SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	15:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_account_change_password
LEAF_NODE	2:0	2:0	3	purple_account_change_password
PARAMETER_LIST	2:30	3:20	2	( PurpleAccount * account , const char * orig_pw , const char * new_pw )
LEAF_NODE	2:30	2:30	3	(
PARAMETER_DECL	2:31	2:46	3	PurpleAccount * account
TYPE	2:31	2:45	4	PurpleAccount *
TYPE_NAME	2:31	2:31	5	PurpleAccount
LEAF_NODE	2:31	2:31	6	PurpleAccount
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	account
LEAF_NODE	2:46	2:46	5	account
LEAF_NODE	2:53	2:53	3	,
PARAMETER_DECL	2:55	2:67	3	const char * orig_pw
TYPE	2:55	2:66	4	const char *
TYPE_NAME	2:55	2:61	5	const char
LEAF_NODE	2:55	2:55	6	const
LEAF_NODE	2:61	2:61	6	char
POINTER	2:66	2:66	5	*
LEAF_NODE	2:66	2:66	6	*
NAME	2:67	2:67	4	orig_pw
LEAF_NODE	2:67	2:67	5	orig_pw
LEAF_NODE	2:74	2:74	3	,
PARAMETER_DECL	3:2	3:14	3	const char * new_pw
TYPE	3:2	3:13	4	const char *
TYPE_NAME	3:2	3:8	5	const char
LEAF_NODE	3:2	3:2	6	const
LEAF_NODE	3:8	3:8	6	char
POINTER	3:13	3:13	5	*
LEAF_NODE	3:13	3:13	6	*
NAME	3:14	3:14	4	new_pw
LEAF_NODE	3:14	3:14	5	new_pw
LEAF_NODE	3:20	3:20	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	13:1	2	
SIMPLE_DECL	5:1	5:43	3	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL ;
VAR_DECL	5:1	5:27	4	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL
TYPE	5:1	5:26	5	PurplePluginProtocolInfo *
TYPE_NAME	5:1	5:1	6	PurplePluginProtocolInfo
LEAF_NODE	5:1	5:1	7	PurplePluginProtocolInfo
POINTER	5:26	5:26	6	*
LEAF_NODE	5:26	5:26	7	*
NAME	5:27	5:27	5	prpl_info
LEAF_NODE	5:27	5:27	6	prpl_info
LEAF_NODE	0:0	0:0	5	;
INIT	5:27	5:27	5	prpl_info = NULL
ASSIGN	5:27	5:39	6	prpl_info = NULL
LVAL	5:27	5:27	7	prpl_info
NAME	5:27	5:27	8	prpl_info
LEAF_NODE	5:27	5:27	9	prpl_info
ASSIGN_OP	5:37	5:37	7	=
LEAF_NODE	5:37	5:37	8	=
RVAL	5:39	5:39	7	NULL
FIELD	5:39	5:39	8	NULL
LEAF_NODE	5:39	5:39	9	NULL
LEAF_NODE	5:43	5:43	4	;
SIMPLE_DECL	6:1	6:62	3	PurpleConnection * gc ; gc = purple_account_get_connection ( account ) ;
VAR_DECL	6:1	6:19	4	PurpleConnection * gc ; gc = purple_account_get_connection ( account )
TYPE	6:1	6:18	5	PurpleConnection *
TYPE_NAME	6:1	6:1	6	PurpleConnection
LEAF_NODE	6:1	6:1	7	PurpleConnection
POINTER	6:18	6:18	6	*
LEAF_NODE	6:18	6:18	7	*
NAME	6:19	6:19	5	gc
LEAF_NODE	6:19	6:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	6:19	6:19	5	gc = purple_account_get_connection ( account )
ASSIGN	6:19	6:24	6	gc = purple_account_get_connection ( account )
LVAL	6:19	6:19	7	gc
NAME	6:19	6:19	8	gc
LEAF_NODE	6:19	6:19	9	gc
ASSIGN_OP	6:22	6:22	7	=
LEAF_NODE	6:22	6:22	8	=
RVAL	6:24	6:24	7	purple_account_get_connection ( account )
FUNCTION_CALL	6:24	6:61	8	purple_account_get_connection ( account )
CALLEE	6:24	6:24	9	purple_account_get_connection
LEAF_NODE	6:24	6:24	10	purple_account_get_connection
LEAF_NODE	6:53	6:53	9	(
ARGUMENT	6:54	6:54	9	account
FIELD	6:54	6:54	10	account
LEAF_NODE	6:54	6:54	11	account
LEAF_NODE	6:61	6:61	9	)
LEAF_NODE	6:62	6:62	4	;
SIMPLE_DECL	7:1	7:26	3	PurplePlugin * prpl ; prpl = NULL ;
VAR_DECL	7:1	7:15	4	PurplePlugin * prpl ; prpl = NULL
TYPE	7:1	7:14	5	PurplePlugin *
TYPE_NAME	7:1	7:1	6	PurplePlugin
LEAF_NODE	7:1	7:1	7	PurplePlugin
POINTER	7:14	7:14	6	*
LEAF_NODE	7:14	7:14	7	*
NAME	7:15	7:15	5	prpl
LEAF_NODE	7:15	7:15	6	prpl
LEAF_NODE	0:0	0:0	5	;
INIT	7:15	7:15	5	prpl = NULL
ASSIGN	7:15	7:22	6	prpl = NULL
LVAL	7:15	7:15	7	prpl
NAME	7:15	7:15	8	prpl
LEAF_NODE	7:15	7:15	9	prpl
ASSIGN_OP	7:20	7:20	7	=
LEAF_NODE	7:20	7:20	8	=
RVAL	7:22	7:22	7	NULL
FIELD	7:22	7:22	8	NULL
LEAF_NODE	7:22	7:22	9	NULL
LEAF_NODE	7:26	7:26	4	;
EXPR_STATEMENT	8:1	8:45	3	purple_account_set_password ( account , new_pw ) ;
EXPR	8:1	8:1	4	purple_account_set_password ( account , new_pw )
FUNCTION_CALL	8:1	8:44	5	purple_account_set_password ( account , new_pw )
CALLEE	8:1	8:1	6	purple_account_set_password
LEAF_NODE	8:1	8:1	7	purple_account_set_password
LEAF_NODE	8:28	8:28	6	(
ARGUMENT	8:29	8:29	6	account
FIELD	8:29	8:29	7	account
LEAF_NODE	8:29	8:29	8	account
LEAF_NODE	8:36	8:36	6	,
ARGUMENT	8:38	8:38	6	new_pw
FIELD	8:38	8:38	7	new_pw
LEAF_NODE	8:38	8:38	8	new_pw
LEAF_NODE	8:44	8:44	6	)
LEAF_NODE	8:45	8:45	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	gc != NULL
EXPR	9:5	9:11	5	gc != NULL
FIELD	9:5	9:5	6	gc
LEAF_NODE	9:5	9:5	7	gc
EQ_OPERATOR	9:8	9:8	6	!=
LEAF_NODE	9:8	9:8	7	!=
FIELD	9:11	9:11	6	NULL
LEAF_NODE	9:11	9:11	7	NULL
LEAF_NODE	9:15	9:15	4	)
STATEMENTS	10:2	10:2	4	
EXPR_STATEMENT	10:2	10:39	5	prpl = purple_connection_get_prpl ( gc ) ;
EXPR	10:2	10:2	6	prpl = purple_connection_get_prpl ( gc )
ASSIGN	10:2	10:9	7	prpl = purple_connection_get_prpl ( gc )
LVAL	10:2	10:2	8	prpl
FIELD	10:2	10:2	9	prpl
LEAF_NODE	10:2	10:2	10	prpl
ASSIGN_OP	10:7	10:7	8	=
LEAF_NODE	10:7	10:7	9	=
RVAL	10:9	10:9	8	purple_connection_get_prpl ( gc )
FUNCTION_CALL	10:9	10:38	9	purple_connection_get_prpl ( gc )
CALLEE	10:9	10:9	10	purple_connection_get_prpl
LEAF_NODE	10:9	10:9	11	purple_connection_get_prpl
LEAF_NODE	10:35	10:35	10	(
ARGUMENT	10:36	10:36	10	gc
FIELD	10:36	10:36	11	gc
LEAF_NODE	10:36	10:36	12	gc
LEAF_NODE	10:38	10:38	10	)
LEAF_NODE	10:39	10:39	6	;
SELECTION	11:1	12:2	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	prpl != NULL
EXPR	11:5	11:13	5	prpl != NULL
FIELD	11:5	11:5	6	prpl
LEAF_NODE	11:5	11:5	7	prpl
EQ_OPERATOR	11:10	11:10	6	!=
LEAF_NODE	11:10	11:10	7	!=
FIELD	11:13	11:13	6	NULL
LEAF_NODE	11:13	11:13	7	NULL
LEAF_NODE	11:17	11:17	4	)
STATEMENTS	12:2	12:2	4	
EXPR_STATEMENT	12:2	12:47	5	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl ) ;
EXPR	12:2	12:2	6	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
ASSIGN	12:2	12:14	7	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
LVAL	12:2	12:2	8	prpl_info
FIELD	12:2	12:2	9	prpl_info
LEAF_NODE	12:2	12:2	10	prpl_info
ASSIGN_OP	12:12	12:12	8	=
LEAF_NODE	12:12	12:12	9	=
RVAL	12:14	12:14	8	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
FUNCTION_CALL	12:14	12:46	9	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
CALLEE	12:14	12:14	10	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	12:14	12:14	11	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	12:41	12:41	10	(
ARGUMENT	12:42	12:42	10	prpl
FIELD	12:42	12:42	11	prpl
LEAF_NODE	12:42	12:42	12	prpl
LEAF_NODE	12:46	12:46	10	)
LEAF_NODE	12:47	12:47	6	;
SELECTION	13:1	14:2	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	prpl_info && prpl_info -> change_passwd
EXPR	13:5	13:5	5	prpl_info && prpl_info -> change_passwd
AND	13:5	13:18	6	prpl_info && prpl_info -> change_passwd
EXPR	13:5	13:5	7	prpl_info
FIELD	13:5	13:5	8	prpl_info
LEAF_NODE	13:5	13:5	9	prpl_info
LEAF_NODE	13:15	13:15	7	&&
EXPR	13:18	13:18	7	prpl_info -> change_passwd
FIELD	13:18	13:29	8	prpl_info -> change_passwd
LEAF_NODE	13:18	13:18	9	prpl_info
LEAF_NODE	13:27	13:27	9	->
LEAF_NODE	13:29	13:29	9	change_passwd
LEAF_NODE	13:42	13:42	4	)
STATEMENTS	14:2	14:2	4	
EXPR_STATEMENT	14:2	14:47	5	prpl_info -> change_passwd ( gc , orig_pw , new_pw ) ;
EXPR	14:2	14:2	6	prpl_info -> change_passwd ( gc , orig_pw , new_pw )
FUNCTION_CALL	14:2	14:46	7	prpl_info -> change_passwd ( gc , orig_pw , new_pw )
CALLEE	14:2	14:13	8	prpl_info -> change_passwd
LEAF_NODE	14:2	14:2	9	prpl_info
LEAF_NODE	14:11	14:11	9	->
LEAF_NODE	14:13	14:13	9	change_passwd
LEAF_NODE	14:26	14:26	8	(
ARGUMENT	14:27	14:27	8	gc
FIELD	14:27	14:27	9	gc
LEAF_NODE	14:27	14:27	10	gc
LEAF_NODE	14:29	14:29	8	,
ARGUMENT	14:31	14:31	8	orig_pw
FIELD	14:31	14:31	9	orig_pw
LEAF_NODE	14:31	14:31	10	orig_pw
LEAF_NODE	14:38	14:38	8	,
ARGUMENT	14:40	14:40	8	new_pw
FIELD	14:40	14:40	9	new_pw
LEAF_NODE	14:40	14:40	10	new_pw
LEAF_NODE	14:46	14:46	8	)
LEAF_NODE	14:47	14:47	6	;
LEAF_NODE	15:0	15:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	7:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	irc_register_commands
LEAF_NODE	2:5	2:5	3	irc_register_commands
PARAMETER_LIST	2:26	2:31	2	( void )
LEAF_NODE	2:26	2:26	3	(
PARAMETER_DECL	2:27	2:27	3	void
LEAF_NODE	2:27	2:27	4	void
LEAF_NODE	2:31	2:31	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:24	3	struct _irc_user_cmd * c ;
VAR_DECL	4:1	4:23	4	struct _irc_user_cmd * c
TYPE	4:1	4:22	5	struct _irc_user_cmd *
TYPE_NAME	4:1	4:8	6	struct _irc_user_cmd
LEAF_NODE	4:1	4:1	7	struct
LEAF_NODE	4:8	4:8	7	_irc_user_cmd
POINTER	4:22	4:22	6	*
LEAF_NODE	4:22	4:22	7	*
NAME	4:23	4:23	5	c
LEAF_NODE	4:23	4:23	6	c
LEAF_NODE	4:24	4:24	4	;
ITERATION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	for
LEAF_NODE	5:1	5:1	5	for
LEAF_NODE	5:5	5:5	4	(
FOR_INIT	5:6	5:19	4	c = _irc_cmds ;
EXPR	5:6	5:6	5	c = _irc_cmds
ASSIGN	5:6	5:10	6	c = _irc_cmds
LVAL	5:6	5:6	7	c
FIELD	5:6	5:6	8	c
LEAF_NODE	5:6	5:6	9	c
ASSIGN_OP	5:8	5:8	7	=
LEAF_NODE	5:8	5:8	8	=
RVAL	5:10	5:10	7	_irc_cmds
FIELD	5:10	5:10	8	_irc_cmds
LEAF_NODE	5:10	5:10	9	_irc_cmds
LEAF_NODE	5:19	5:19	5	;
CONDITION	5:21	5:21	4	c && c -> name
EXPR	5:21	5:21	5	c && c -> name
AND	5:21	5:26	6	c && c -> name
EXPR	5:21	5:21	7	c
FIELD	5:21	5:21	8	c
LEAF_NODE	5:21	5:21	9	c
LEAF_NODE	5:23	5:23	7	&&
EXPR	5:26	5:26	7	c -> name
FIELD	5:26	5:29	8	c -> name
LEAF_NODE	5:26	5:26	9	c
LEAF_NODE	5:27	5:27	9	->
LEAF_NODE	5:29	5:29	9	name
LEAF_NODE	5:33	5:33	4	;
FOR_EXPR	5:35	5:35	4	c ++
EXPR	5:35	5:35	5	c ++
FIELD	5:35	5:36	6	c ++
LEAF_NODE	5:35	5:35	7	c
LEAF_NODE	5:36	5:36	7	++
LEAF_NODE	5:38	5:38	4	)
STATEMENTS	6:2	6:2	4	
EXPR_STATEMENT	6:2	6:25	5	irc_register_command ( c ) ;
EXPR	6:2	6:2	6	irc_register_command ( c )
FUNCTION_CALL	6:2	6:24	7	irc_register_command ( c )
CALLEE	6:2	6:2	8	irc_register_command
LEAF_NODE	6:2	6:2	9	irc_register_command
LEAF_NODE	6:22	6:22	8	(
ARGUMENT	6:23	6:23	8	c
FIELD	6:23	6:23	9	c
LEAF_NODE	6:23	6:23	10	c
LEAF_NODE	6:24	6:24	8	)
LEAF_NODE	6:25	6:25	6	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	save_blist_theme
LEAF_NODE	2:0	2:0	3	save_blist_theme
PARAMETER_LIST	2:16	2:48	2	( GtkWidget * w , GtkWidget * window )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:28	3	GtkWidget * w
TYPE	2:17	2:27	4	GtkWidget *
TYPE_NAME	2:17	2:17	5	GtkWidget
LEAF_NODE	2:17	2:17	6	GtkWidget
POINTER	2:27	2:27	5	*
LEAF_NODE	2:27	2:27	6	*
NAME	2:28	2:28	4	w
LEAF_NODE	2:28	2:28	5	w
LEAF_NODE	2:29	2:29	3	,
PARAMETER_DECL	2:31	2:42	3	GtkWidget * window
TYPE	2:31	2:41	4	GtkWidget *
TYPE_NAME	2:31	2:31	5	GtkWidget
LEAF_NODE	2:31	2:31	6	GtkWidget
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	window
LEAF_NODE	2:42	2:42	5	window
LEAF_NODE	2:48	2:48	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	5:1	5:1	2	
EXPR_STATEMENT	5:1	5:27	3	gtk_widget_destroy ( window ) ;
EXPR	5:1	5:1	4	gtk_widget_destroy ( window )
FUNCTION_CALL	5:1	5:26	5	gtk_widget_destroy ( window )
CALLEE	5:1	5:1	6	gtk_widget_destroy
LEAF_NODE	5:1	5:1	7	gtk_widget_destroy
LEAF_NODE	5:19	5:19	6	(
ARGUMENT	5:20	5:20	6	window
FIELD	5:20	5:20	7	window
LEAF_NODE	5:20	5:20	8	window
LEAF_NODE	5:26	5:26	6	)
LEAF_NODE	5:27	5:27	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	61:0	1	
RETURN_TYPE	2:0	2:7	2	static int
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	int
LEAF_NODE	2:7	2:7	4	int
FUNCTION_NAME	2:11	2:11	2	gg_session_handle_notify_reply_80
LEAF_NODE	2:11	2:11	3	gg_session_handle_notify_reply_80
PARAMETER_LIST	2:44	3:64	2	( struct gg_session * gs , uint32_t type , const char * ptr , size_t len , struct gg_event * ge )
LEAF_NODE	2:44	2:44	3	(
PARAMETER_DECL	2:45	2:64	3	struct gg_session * gs
TYPE	2:45	2:63	4	struct gg_session *
TYPE_NAME	2:45	2:52	5	struct gg_session
LEAF_NODE	2:45	2:45	6	struct
LEAF_NODE	2:52	2:52	6	gg_session
POINTER	2:63	2:63	5	*
LEAF_NODE	2:63	2:63	6	*
NAME	2:64	2:64	4	gs
LEAF_NODE	2:64	2:64	5	gs
LEAF_NODE	2:66	2:66	3	,
PARAMETER_DECL	3:1	3:10	3	uint32_t type
TYPE	3:1	3:1	4	uint32_t
TYPE_NAME	3:1	3:1	5	uint32_t
LEAF_NODE	3:1	3:1	6	uint32_t
NAME	3:10	3:10	4	type
LEAF_NODE	3:10	3:10	5	type
LEAF_NODE	3:14	3:14	3	,
PARAMETER_DECL	3:16	3:28	3	const char * ptr
TYPE	3:16	3:27	4	const char *
TYPE_NAME	3:16	3:22	5	const char
LEAF_NODE	3:16	3:16	6	const
LEAF_NODE	3:22	3:22	6	char
POINTER	3:27	3:27	5	*
LEAF_NODE	3:27	3:27	6	*
NAME	3:28	3:28	4	ptr
LEAF_NODE	3:28	3:28	5	ptr
LEAF_NODE	3:31	3:31	3	,
PARAMETER_DECL	3:33	3:40	3	size_t len
TYPE	3:33	3:33	4	size_t
TYPE_NAME	3:33	3:33	5	size_t
LEAF_NODE	3:33	3:33	6	size_t
NAME	3:40	3:40	4	len
LEAF_NODE	3:40	3:40	5	len
LEAF_NODE	3:43	3:43	3	,
PARAMETER_DECL	3:45	3:62	3	struct gg_event * ge
TYPE	3:45	3:61	4	struct gg_event *
TYPE_NAME	3:45	3:52	5	struct gg_event
LEAF_NODE	3:45	3:45	6	struct
LEAF_NODE	3:52	3:52	6	gg_event
POINTER	3:61	3:61	5	*
LEAF_NODE	3:61	3:61	6	*
NAME	3:62	3:62	4	ge
LEAF_NODE	3:62	3:62	5	ge
LEAF_NODE	3:64	3:64	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	60:1	2	
SIMPLE_DECL	5:1	5:54	3	const struct gg_notify_reply80 * n ; n = ( const void * ) ptr ;
VAR_DECL	5:1	5:33	4	const struct gg_notify_reply80 * n ; n = ( const void * ) ptr
TYPE	5:1	5:32	5	const struct gg_notify_reply80 *
TYPE_NAME	5:1	5:14	6	const struct gg_notify_reply80
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	struct
LEAF_NODE	5:14	5:14	7	gg_notify_reply80
POINTER	5:32	5:32	6	*
LEAF_NODE	5:32	5:32	7	*
NAME	5:33	5:33	5	n
LEAF_NODE	5:33	5:33	6	n
LEAF_NODE	0:0	0:0	5	;
INIT	5:33	5:33	5	n = ( const void * ) ptr
ASSIGN	5:33	5:37	6	n = ( const void * ) ptr
LVAL	5:33	5:33	7	n
NAME	5:33	5:33	8	n
LEAF_NODE	5:33	5:33	9	n
ASSIGN_OP	5:35	5:35	7	=
LEAF_NODE	5:35	5:35	8	=
RVAL	5:37	5:51	7	( const void * ) ptr
LEAF_NODE	5:37	5:37	8	(
TYPE_NAME	5:38	5:44	8	const void
LEAF_NODE	5:38	5:38	9	const
LEAF_NODE	5:44	5:44	9	void
LEAF_NODE	5:48	5:48	8	*
LEAF_NODE	5:49	5:49	8	)
FIELD	5:51	5:51	8	ptr
LEAF_NODE	5:51	5:51	9	ptr
LEAF_NODE	5:54	5:54	4	;
SIMPLE_DECL	6:1	6:33	3	unsigned int length ; length = len , unsigned int i ; i = 0 ;
INIT_DECL_LIST	6:1	6:1	4	unsigned int length ; length = len , unsigned int i ; i = 0
VAR_DECL	6:1	6:14	5	unsigned int length ; length = len
TYPE	6:1	6:1	6	unsigned int
TYPE_NAME	6:1	6:10	7	unsigned int
LEAF_NODE	6:1	6:1	8	unsigned
LEAF_NODE	6:10	6:10	8	int
NAME	6:14	6:14	6	length
LEAF_NODE	6:14	6:14	7	length
LEAF_NODE	0:0	0:0	6	;
INIT	6:14	6:14	6	length = len
ASSIGN	6:14	6:23	7	length = len
LVAL	6:14	6:14	8	length
NAME	6:14	6:14	9	length
LEAF_NODE	6:14	6:14	10	length
ASSIGN_OP	6:21	6:21	8	=
LEAF_NODE	6:21	6:21	9	=
RVAL	6:23	6:23	8	len
FIELD	6:23	6:23	9	len
LEAF_NODE	6:23	6:23	10	len
LEAF_NODE	6:26	6:26	5	,
VAR_DECL	6:1	6:28	5	unsigned int i ; i = 0
TYPE	6:1	6:1	6	unsigned int
TYPE_NAME	6:1	6:10	7	unsigned int
LEAF_NODE	6:1	6:1	8	unsigned
LEAF_NODE	6:10	6:10	8	int
NAME	6:28	6:28	6	i
LEAF_NODE	6:28	6:28	7	i
LEAF_NODE	0:0	0:0	6	;
INIT	6:28	6:28	6	i = 0
ASSIGN	6:28	6:32	7	i = 0
LVAL	6:28	6:28	8	i
NAME	6:28	6:28	9	i
LEAF_NODE	6:28	6:28	10	i
ASSIGN_OP	6:30	6:30	8	=
LEAF_NODE	6:30	6:30	9	=
RVAL	6:32	6:32	8	0
FIELD	6:32	6:32	9	0
LEAF_NODE	6:32	6:32	10	0
LEAF_NODE	6:33	6:33	4	;
EXPR_STATEMENT	10:1	10:92	3	gg_debug_session ( gs , GG_DEBUG_MISC , "// gg_watch_fd_connected() received a notify reply\n" ) ;
EXPR	10:1	10:1	4	gg_debug_session ( gs , GG_DEBUG_MISC , "// gg_watch_fd_connected() received a notify reply\n" )
FUNCTION_CALL	10:1	10:91	5	gg_debug_session ( gs , GG_DEBUG_MISC , "// gg_watch_fd_connected() received a notify reply\n" )
CALLEE	10:1	10:1	6	gg_debug_session
LEAF_NODE	10:1	10:1	7	gg_debug_session
LEAF_NODE	10:17	10:17	6	(
ARGUMENT	10:18	10:18	6	gs
FIELD	10:18	10:18	7	gs
LEAF_NODE	10:18	10:18	8	gs
LEAF_NODE	10:20	10:20	6	,
ARGUMENT	10:22	10:22	6	GG_DEBUG_MISC
FIELD	10:22	10:22	7	GG_DEBUG_MISC
LEAF_NODE	10:22	10:22	8	GG_DEBUG_MISC
LEAF_NODE	10:35	10:35	6	,
ARGUMENT	10:37	10:37	6	"// gg_watch_fd_connected() received a notify reply\n"
FIELD	10:37	10:37	7	"// gg_watch_fd_connected() received a notify reply\n"
LEAF_NODE	10:37	10:37	8	"// gg_watch_fd_connected() received a notify reply\n"
LEAF_NODE	10:91	10:91	6	)
LEAF_NODE	10:92	10:92	4	;
EXPR_STATEMENT	11:1	11:29	3	ge -> type = GG_EVENT_NOTIFY60 ;
EXPR	11:1	11:1	4	ge -> type = GG_EVENT_NOTIFY60
ASSIGN	11:1	11:12	5	ge -> type = GG_EVENT_NOTIFY60
LVAL	11:1	11:1	6	ge -> type
FIELD	11:1	11:5	7	ge -> type
LEAF_NODE	11:1	11:1	8	ge
LEAF_NODE	11:3	11:3	8	->
LEAF_NODE	11:5	11:5	8	type
ASSIGN_OP	11:10	11:10	6	=
LEAF_NODE	11:10	11:10	7	=
RVAL	11:12	11:12	6	GG_EVENT_NOTIFY60
FIELD	11:12	11:12	7	GG_EVENT_NOTIFY60
LEAF_NODE	11:12	11:12	8	GG_EVENT_NOTIFY60
LEAF_NODE	11:29	11:29	4	;
EXPR_STATEMENT	12:1	12:57	3	ge -> event . notify60 = malloc ( sizeof ( * ge -> event . notify60 ) ) ;
EXPR	12:1	12:1	4	ge -> event . notify60 = malloc ( sizeof ( * ge -> event . notify60 ) )
ASSIGN	12:1	12:22	5	ge -> event . notify60 = malloc ( sizeof ( * ge -> event . notify60 ) )
LVAL	12:1	12:1	6	ge -> event . notify60
FIELD	12:1	12:11	7	ge -> event . notify60
LEAF_NODE	12:1	12:1	8	ge
LEAF_NODE	12:3	12:3	8	->
LEAF_NODE	12:5	12:5	8	event
LEAF_NODE	12:10	12:10	8	.
LEAF_NODE	12:11	12:11	8	notify60
ASSIGN_OP	12:20	12:20	6	=
LEAF_NODE	12:20	12:20	7	=
RVAL	12:22	12:22	6	malloc ( sizeof ( * ge -> event . notify60 ) )
FUNCTION_CALL	12:22	12:56	7	malloc ( sizeof ( * ge -> event . notify60 ) )
CALLEE	12:22	12:22	8	malloc
LEAF_NODE	12:22	12:22	9	malloc
LEAF_NODE	12:28	12:28	8	(
ARGUMENT	12:29	12:29	8	sizeof ( * ge -> event . notify60 )
FUNCTION_CALL	12:29	12:55	9	sizeof ( * ge -> event . notify60 )
CALLEE	12:29	12:29	10	sizeof
LEAF_NODE	12:29	12:29	11	sizeof
LEAF_NODE	12:35	12:35	10	(
ARGUMENT	12:36	12:36	10	* ge -> event . notify60
UNARY_EXPR	12:36	12:37	11	* ge -> event . notify60
UNARY_OPERATOR	12:36	12:36	12	*
LEAF_NODE	12:36	12:36	13	*
FIELD	12:37	12:47	12	ge -> event . notify60
LEAF_NODE	12:37	12:37	13	ge
LEAF_NODE	12:39	12:39	13	->
LEAF_NODE	12:41	12:41	13	event
LEAF_NODE	12:46	12:46	13	.
LEAF_NODE	12:47	12:47	13	notify60
LEAF_NODE	12:55	12:55	10	)
LEAF_NODE	12:56	12:56	8	)
LEAF_NODE	12:57	12:57	4	;
SELECTION	13:1	13:26	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	! ge -> event . notify60
EXPR	13:5	13:5	5	! ge -> event . notify60
UNARY_EXPR	13:5	13:6	6	! ge -> event . notify60
UNARY_OPERATOR	13:5	13:5	7	!
LEAF_NODE	13:5	13:5	8	!
FIELD	13:6	13:16	7	ge -> event . notify60
LEAF_NODE	13:6	13:6	8	ge
LEAF_NODE	13:8	13:8	8	->
LEAF_NODE	13:10	13:10	8	event
LEAF_NODE	13:15	13:15	8	.
LEAF_NODE	13:16	13:16	8	notify60
LEAF_NODE	13:24	13:24	4	)
STATEMENTS	13:26	16:1	4	
LEAF_NODE	13:26	13:26	5	{
STATEMENTS	14:2	15:2	5	
EXPR_STATEMENT	14:2	14:83	6	gg_debug_session ( gs , GG_DEBUG_MISC , "// gg_watch_fd_connected() out of memory\n" ) ;
EXPR	14:2	14:2	7	gg_debug_session ( gs , GG_DEBUG_MISC , "// gg_watch_fd_connected() out of memory\n" )
FUNCTION_CALL	14:2	14:82	8	gg_debug_session ( gs , GG_DEBUG_MISC , "// gg_watch_fd_connected() out of memory\n" )
CALLEE	14:2	14:2	9	gg_debug_session
LEAF_NODE	14:2	14:2	10	gg_debug_session
LEAF_NODE	14:18	14:18	9	(
ARGUMENT	14:19	14:19	9	gs
FIELD	14:19	14:19	10	gs
LEAF_NODE	14:19	14:19	11	gs
LEAF_NODE	14:21	14:21	9	,
ARGUMENT	14:23	14:23	9	GG_DEBUG_MISC
FIELD	14:23	14:23	10	GG_DEBUG_MISC
LEAF_NODE	14:23	14:23	11	GG_DEBUG_MISC
LEAF_NODE	14:36	14:36	9	,
ARGUMENT	14:38	14:38	9	"// gg_watch_fd_connected() out of memory\n"
FIELD	14:38	14:38	10	"// gg_watch_fd_connected() out of memory\n"
LEAF_NODE	14:38	14:38	11	"// gg_watch_fd_connected() out of memory\n"
LEAF_NODE	14:82	14:82	9	)
LEAF_NODE	14:83	14:83	7	;
JUMP_STATEMENT	15:2	15:11	6	return - 1 ;
KEYWORD	15:2	15:2	7	return
LEAF_NODE	15:2	15:2	8	return
DESTINATION	15:9	15:9	7	- 1
EXPR	15:9	15:9	8	- 1
UNARY_EXPR	15:9	15:10	9	- 1
UNARY_OPERATOR	15:9	15:9	10	-
LEAF_NODE	15:9	15:9	11	-
FIELD	15:10	15:10	10	1
LEAF_NODE	15:10	15:10	11	1
LEAF_NODE	15:11	15:11	7	;
LEAF_NODE	16:1	16:1	5	}
EXPR_STATEMENT	17:1	17:30	3	ge -> event . notify60 [ 0 ] . uin = 0 ;
EXPR	17:1	17:1	4	ge -> event . notify60 [ 0 ] . uin = 0
ASSIGN	17:1	17:29	5	ge -> event . notify60 [ 0 ] . uin = 0
LVAL	17:1	17:1	6	ge -> event . notify60 [ 0 ] . uin
FIELD	17:1	17:23	7	ge -> event . notify60 [ 0 ] . uin
LEAF_NODE	17:1	17:1	8	ge
LEAF_NODE	17:3	17:3	8	->
LEAF_NODE	17:5	17:5	8	event
LEAF_NODE	17:10	17:10	8	.
LEAF_NODE	17:11	17:11	8	notify60
LEAF_NODE	17:19	17:19	8	[
EXPR	17:20	17:20	8	0
FIELD	17:20	17:20	9	0
LEAF_NODE	17:20	17:20	10	0
LEAF_NODE	17:21	17:21	8	]
LEAF_NODE	17:22	17:22	8	.
LEAF_NODE	17:23	17:23	8	uin
ASSIGN_OP	17:27	17:27	6	=
LEAF_NODE	17:27	17:27	7	=
RVAL	17:29	17:29	6	0
FIELD	17:29	17:29	7	0
LEAF_NODE	17:29	17:29	8	0
LEAF_NODE	17:30	17:30	4	;
LEAF_NODE	18:1	18:1	3	while
LEAF_NODE	18:7	18:7	3	(
LEAF_NODE	18:8	18:8	3	length
LEAF_NODE	18:15	18:15	3	>=
LEAF_NODE	18:18	18:18	3	sizeof
LEAF_NODE	18:24	18:24	3	(
LEAF_NODE	18:25	18:25	3	struct
LEAF_NODE	18:32	18:32	3	gg_notify_reply80
LEAF_NODE	18:49	18:49	3	)
LEAF_NODE	18:50	18:50	3	)
LEAF_NODE	18:52	18:52	3	{
STATEMENTS	19:2	58:2	3	
SIMPLE_DECL	19:2	19:30	4	uin_t uin ; uin = gg_fix32 ( n -> uin ) ;
VAR_DECL	19:2	19:8	5	uin_t uin ; uin = gg_fix32 ( n -> uin )
TYPE	19:2	19:2	6	uin_t
TYPE_NAME	19:2	19:2	7	uin_t
LEAF_NODE	19:2	19:2	8	uin_t
NAME	19:8	19:8	6	uin
LEAF_NODE	19:8	19:8	7	uin
LEAF_NODE	0:0	0:0	6	;
INIT	19:8	19:8	6	uin = gg_fix32 ( n -> uin )
ASSIGN	19:8	19:14	7	uin = gg_fix32 ( n -> uin )
LVAL	19:8	19:8	8	uin
NAME	19:8	19:8	9	uin
LEAF_NODE	19:8	19:8	10	uin
ASSIGN_OP	19:12	19:12	8	=
LEAF_NODE	19:12	19:12	9	=
RVAL	19:14	19:14	8	gg_fix32 ( n -> uin )
FUNCTION_CALL	19:14	19:29	9	gg_fix32 ( n -> uin )
CALLEE	19:14	19:14	10	gg_fix32
LEAF_NODE	19:14	19:14	11	gg_fix32
LEAF_NODE	19:22	19:22	10	(
ARGUMENT	19:23	19:23	10	n -> uin
FIELD	19:23	19:26	11	n -> uin
LEAF_NODE	19:23	19:23	12	n
LEAF_NODE	19:24	19:24	12	->
LEAF_NODE	19:26	19:26	12	uin
LEAF_NODE	19:29	19:29	10	)
LEAF_NODE	19:30	19:30	5	;
SIMPLE_DECL	20:2	20:15	4	int descr_len ;
VAR_DECL	20:2	20:6	5	int descr_len
TYPE	20:2	20:2	6	int
TYPE_NAME	20:2	20:2	7	int
LEAF_NODE	20:2	20:2	8	int
NAME	20:6	20:6	6	descr_len
LEAF_NODE	20:6	20:6	7	descr_len
LEAF_NODE	20:15	20:15	5	;
SIMPLE_DECL	21:2	21:11	4	void * tmp ;
VAR_DECL	21:2	21:8	5	void * tmp
TYPE	21:2	21:7	6	void *
TYPE_NAME	21:2	21:2	7	void
LEAF_NODE	21:2	21:2	8	void
POINTER	21:7	21:7	7	*
LEAF_NODE	21:7	21:7	8	*
NAME	21:8	21:8	6	tmp
LEAF_NODE	21:8	21:8	7	tmp
LEAF_NODE	21:11	21:11	5	;
EXPR_STATEMENT	22:2	22:33	4	ge -> event . notify60 [ i ] . uin = uin ;
EXPR	22:2	22:2	5	ge -> event . notify60 [ i ] . uin = uin
ASSIGN	22:2	22:30	6	ge -> event . notify60 [ i ] . uin = uin
LVAL	22:2	22:2	7	ge -> event . notify60 [ i ] . uin
FIELD	22:2	22:24	8	ge -> event . notify60 [ i ] . uin
LEAF_NODE	22:2	22:2	9	ge
LEAF_NODE	22:4	22:4	9	->
LEAF_NODE	22:6	22:6	9	event
LEAF_NODE	22:11	22:11	9	.
LEAF_NODE	22:12	22:12	9	notify60
LEAF_NODE	22:20	22:20	9	[
EXPR	22:21	22:21	9	i
FIELD	22:21	22:21	10	i
LEAF_NODE	22:21	22:21	11	i
LEAF_NODE	22:22	22:22	9	]
LEAF_NODE	22:23	22:23	9	.
LEAF_NODE	22:24	22:24	9	uin
ASSIGN_OP	22:28	22:28	7	=
LEAF_NODE	22:28	22:28	8	=
RVAL	22:30	22:30	7	uin
FIELD	22:30	22:30	8	uin
LEAF_NODE	22:30	22:30	9	uin
LEAF_NODE	22:33	22:33	5	;
EXPR_STATEMENT	23:2	23:52	4	ge -> event . notify60 [ i ] . status = gg_fix32 ( n -> status ) ;
EXPR	23:2	23:2	5	ge -> event . notify60 [ i ] . status = gg_fix32 ( n -> status )
ASSIGN	23:2	23:33	6	ge -> event . notify60 [ i ] . status = gg_fix32 ( n -> status )
LVAL	23:2	23:2	7	ge -> event . notify60 [ i ] . status
FIELD	23:2	23:24	8	ge -> event . notify60 [ i ] . status
LEAF_NODE	23:2	23:2	9	ge
LEAF_NODE	23:4	23:4	9	->
LEAF_NODE	23:6	23:6	9	event
LEAF_NODE	23:11	23:11	9	.
LEAF_NODE	23:12	23:12	9	notify60
LEAF_NODE	23:20	23:20	9	[
EXPR	23:21	23:21	9	i
FIELD	23:21	23:21	10	i
LEAF_NODE	23:21	23:21	11	i
LEAF_NODE	23:22	23:22	9	]
LEAF_NODE	23:23	23:23	9	.
LEAF_NODE	23:24	23:24	9	status
ASSIGN_OP	23:31	23:31	7	=
LEAF_NODE	23:31	23:31	8	=
RVAL	23:33	23:33	7	gg_fix32 ( n -> status )
FUNCTION_CALL	23:33	23:51	8	gg_fix32 ( n -> status )
CALLEE	23:33	23:33	9	gg_fix32
LEAF_NODE	23:33	23:33	10	gg_fix32
LEAF_NODE	23:41	23:41	9	(
ARGUMENT	23:42	23:42	9	n -> status
FIELD	23:42	23:45	10	n -> status
LEAF_NODE	23:42	23:42	11	n
LEAF_NODE	23:43	23:43	11	->
LEAF_NODE	23:45	23:45	11	status
LEAF_NODE	23:51	23:51	9	)
LEAF_NODE	23:52	23:52	5	;
EXPR_STATEMENT	24:2	24:48	4	ge -> event . notify60 [ i ] . remote_ip = n -> remote_ip ;
EXPR	24:2	24:2	5	ge -> event . notify60 [ i ] . remote_ip = n -> remote_ip
ASSIGN	24:2	24:36	6	ge -> event . notify60 [ i ] . remote_ip = n -> remote_ip
LVAL	24:2	24:2	7	ge -> event . notify60 [ i ] . remote_ip
FIELD	24:2	24:24	8	ge -> event . notify60 [ i ] . remote_ip
LEAF_NODE	24:2	24:2	9	ge
LEAF_NODE	24:4	24:4	9	->
LEAF_NODE	24:6	24:6	9	event
LEAF_NODE	24:11	24:11	9	.
LEAF_NODE	24:12	24:12	9	notify60
LEAF_NODE	24:20	24:20	9	[
EXPR	24:21	24:21	9	i
FIELD	24:21	24:21	10	i
LEAF_NODE	24:21	24:21	11	i
LEAF_NODE	24:22	24:22	9	]
LEAF_NODE	24:23	24:23	9	.
LEAF_NODE	24:24	24:24	9	remote_ip
ASSIGN_OP	24:34	24:34	7	=
LEAF_NODE	24:34	24:34	8	=
RVAL	24:36	24:36	7	n -> remote_ip
FIELD	24:36	24:39	8	n -> remote_ip
LEAF_NODE	24:36	24:36	9	n
LEAF_NODE	24:37	24:37	9	->
LEAF_NODE	24:39	24:39	9	remote_ip
LEAF_NODE	24:48	24:48	5	;
EXPR_STATEMENT	25:2	25:62	4	ge -> event . notify60 [ i ] . remote_port = gg_fix16 ( n -> remote_port ) ;
EXPR	25:2	25:2	5	ge -> event . notify60 [ i ] . remote_port = gg_fix16 ( n -> remote_port )
ASSIGN	25:2	25:38	6	ge -> event . notify60 [ i ] . remote_port = gg_fix16 ( n -> remote_port )
LVAL	25:2	25:2	7	ge -> event . notify60 [ i ] . remote_port
FIELD	25:2	25:24	8	ge -> event . notify60 [ i ] . remote_port
LEAF_NODE	25:2	25:2	9	ge
LEAF_NODE	25:4	25:4	9	->
LEAF_NODE	25:6	25:6	9	event
LEAF_NODE	25:11	25:11	9	.
LEAF_NODE	25:12	25:12	9	notify60
LEAF_NODE	25:20	25:20	9	[
EXPR	25:21	25:21	9	i
FIELD	25:21	25:21	10	i
LEAF_NODE	25:21	25:21	11	i
LEAF_NODE	25:22	25:22	9	]
LEAF_NODE	25:23	25:23	9	.
LEAF_NODE	25:24	25:24	9	remote_port
ASSIGN_OP	25:36	25:36	7	=
LEAF_NODE	25:36	25:36	8	=
RVAL	25:38	25:38	7	gg_fix16 ( n -> remote_port )
FUNCTION_CALL	25:38	25:61	8	gg_fix16 ( n -> remote_port )
CALLEE	25:38	25:38	9	gg_fix16
LEAF_NODE	25:38	25:38	10	gg_fix16
LEAF_NODE	25:46	25:46	9	(
ARGUMENT	25:47	25:47	9	n -> remote_port
FIELD	25:47	25:50	10	n -> remote_port
LEAF_NODE	25:47	25:47	11	n
LEAF_NODE	25:48	25:48	11	->
LEAF_NODE	25:50	25:50	11	remote_port
LEAF_NODE	25:61	25:61	9	)
LEAF_NODE	25:62	25:62	5	;
EXPR_STATEMENT	26:2	26:35	4	ge -> event . notify60 [ i ] . version = 0 ;
EXPR	26:2	26:2	5	ge -> event . notify60 [ i ] . version = 0
ASSIGN	26:2	26:34	6	ge -> event . notify60 [ i ] . version = 0
LVAL	26:2	26:2	7	ge -> event . notify60 [ i ] . version
FIELD	26:2	26:24	8	ge -> event . notify60 [ i ] . version
LEAF_NODE	26:2	26:2	9	ge
LEAF_NODE	26:4	26:4	9	->
LEAF_NODE	26:6	26:6	9	event
LEAF_NODE	26:11	26:11	9	.
LEAF_NODE	26:12	26:12	9	notify60
LEAF_NODE	26:20	26:20	9	[
EXPR	26:21	26:21	9	i
FIELD	26:21	26:21	10	i
LEAF_NODE	26:21	26:21	11	i
LEAF_NODE	26:22	26:22	9	]
LEAF_NODE	26:23	26:23	9	.
LEAF_NODE	26:24	26:24	9	version
ASSIGN_OP	26:32	26:32	7	=
LEAF_NODE	26:32	26:32	8	=
RVAL	26:34	26:34	7	0
FIELD	26:34	26:34	8	0
LEAF_NODE	26:34	26:34	9	0
LEAF_NODE	26:35	26:35	5	;
EXPR_STATEMENT	27:2	27:50	4	ge -> event . notify60 [ i ] . image_size = n -> image_size ;
EXPR	27:2	27:2	5	ge -> event . notify60 [ i ] . image_size = n -> image_size
ASSIGN	27:2	27:37	6	ge -> event . notify60 [ i ] . image_size = n -> image_size
LVAL	27:2	27:2	7	ge -> event . notify60 [ i ] . image_size
FIELD	27:2	27:24	8	ge -> event . notify60 [ i ] . image_size
LEAF_NODE	27:2	27:2	9	ge
LEAF_NODE	27:4	27:4	9	->
LEAF_NODE	27:6	27:6	9	event
LEAF_NODE	27:11	27:11	9	.
LEAF_NODE	27:12	27:12	9	notify60
LEAF_NODE	27:20	27:20	9	[
EXPR	27:21	27:21	9	i
FIELD	27:21	27:21	10	i
LEAF_NODE	27:21	27:21	11	i
LEAF_NODE	27:22	27:22	9	]
LEAF_NODE	27:23	27:23	9	.
LEAF_NODE	27:24	27:24	9	image_size
ASSIGN_OP	27:35	27:35	7	=
LEAF_NODE	27:35	27:35	8	=
RVAL	27:37	27:37	7	n -> image_size
FIELD	27:37	27:40	8	n -> image_size
LEAF_NODE	27:37	27:37	9	n
LEAF_NODE	27:38	27:38	9	->
LEAF_NODE	27:40	27:40	9	image_size
LEAF_NODE	27:50	27:50	5	;
EXPR_STATEMENT	28:2	28:36	4	ge -> event . notify60 [ i ] . descr = NULL ;
EXPR	28:2	28:2	5	ge -> event . notify60 [ i ] . descr = NULL
ASSIGN	28:2	28:32	6	ge -> event . notify60 [ i ] . descr = NULL
LVAL	28:2	28:2	7	ge -> event . notify60 [ i ] . descr
FIELD	28:2	28:24	8	ge -> event . notify60 [ i ] . descr
LEAF_NODE	28:2	28:2	9	ge
LEAF_NODE	28:4	28:4	9	->
LEAF_NODE	28:6	28:6	9	event
LEAF_NODE	28:11	28:11	9	.
LEAF_NODE	28:12	28:12	9	notify60
LEAF_NODE	28:20	28:20	9	[
EXPR	28:21	28:21	9	i
FIELD	28:21	28:21	10	i
LEAF_NODE	28:21	28:21	11	i
LEAF_NODE	28:22	28:22	9	]
LEAF_NODE	28:23	28:23	9	.
LEAF_NODE	28:24	28:24	9	descr
ASSIGN_OP	28:30	28:30	7	=
LEAF_NODE	28:30	28:30	8	=
RVAL	28:32	28:32	7	NULL
FIELD	28:32	28:32	8	NULL
LEAF_NODE	28:32	28:32	9	NULL
LEAF_NODE	28:36	28:36	5	;
EXPR_STATEMENT	29:2	29:32	4	ge -> event . notify60 [ i ] . time = 0 ;
EXPR	29:2	29:2	5	ge -> event . notify60 [ i ] . time = 0
ASSIGN	29:2	29:31	6	ge -> event . notify60 [ i ] . time = 0
LVAL	29:2	29:2	7	ge -> event . notify60 [ i ] . time
FIELD	29:2	29:24	8	ge -> event . notify60 [ i ] . time
LEAF_NODE	29:2	29:2	9	ge
LEAF_NODE	29:4	29:4	9	->
LEAF_NODE	29:6	29:6	9	event
LEAF_NODE	29:11	29:11	9	.
LEAF_NODE	29:12	29:12	9	notify60
LEAF_NODE	29:20	29:20	9	[
EXPR	29:21	29:21	9	i
FIELD	29:21	29:21	10	i
LEAF_NODE	29:21	29:21	11	i
LEAF_NODE	29:22	29:22	9	]
LEAF_NODE	29:23	29:23	9	.
LEAF_NODE	29:24	29:24	9	time
ASSIGN_OP	29:29	29:29	7	=
LEAF_NODE	29:29	29:29	8	=
RVAL	29:31	29:31	7	0
FIELD	29:31	29:31	8	0
LEAF_NODE	29:31	29:31	9	0
LEAF_NODE	29:32	29:32	5	;
EXPR_STATEMENT	30:2	30:36	4	descr_len = gg_fix32 ( n -> descr_len ) ;
EXPR	30:2	30:2	5	descr_len = gg_fix32 ( n -> descr_len )
ASSIGN	30:2	30:14	6	descr_len = gg_fix32 ( n -> descr_len )
LVAL	30:2	30:2	7	descr_len
FIELD	30:2	30:2	8	descr_len
LEAF_NODE	30:2	30:2	9	descr_len
ASSIGN_OP	30:12	30:12	7	=
LEAF_NODE	30:12	30:12	8	=
RVAL	30:14	30:14	7	gg_fix32 ( n -> descr_len )
FUNCTION_CALL	30:14	30:35	8	gg_fix32 ( n -> descr_len )
CALLEE	30:14	30:14	9	gg_fix32
LEAF_NODE	30:14	30:14	10	gg_fix32
LEAF_NODE	30:22	30:22	9	(
ARGUMENT	30:23	30:23	9	n -> descr_len
FIELD	30:23	30:26	10	n -> descr_len
LEAF_NODE	30:23	30:23	11	n
LEAF_NODE	30:24	30:24	11	->
LEAF_NODE	30:26	30:26	11	descr_len
LEAF_NODE	30:35	30:35	9	)
LEAF_NODE	30:36	30:36	5	;
SELECTION	31:2	31:22	4	
KEYWORD	31:2	31:2	5	if
LEAF_NODE	31:2	31:2	6	if
LEAF_NODE	31:5	31:5	5	(
CONDITION	31:6	31:6	5	descr_len != 0
EXPR	31:6	31:19	6	descr_len != 0
FIELD	31:6	31:6	7	descr_len
LEAF_NODE	31:6	31:6	8	descr_len
EQ_OPERATOR	31:16	31:16	7	!=
LEAF_NODE	31:16	31:16	8	!=
FIELD	31:19	31:19	7	0
LEAF_NODE	31:19	31:19	8	0
LEAF_NODE	31:20	31:20	5	)
STATEMENTS	31:22	48:2	5	
LEAF_NODE	31:22	31:22	6	{
STATEMENTS	32:3	45:5	6	
LEAF_NODE	32:3	32:3	7	if
LEAF_NODE	32:6	32:6	7	(
LEAF_NODE	32:7	32:7	7	sizeof
LEAF_NODE	32:13	32:13	7	(
LEAF_NODE	32:14	32:14	7	struct
LEAF_NODE	32:21	32:21	7	gg_notify_reply80
LEAF_NODE	32:38	32:38	7	)
LEAF_NODE	32:40	32:40	7	+
LEAF_NODE	32:42	32:42	7	descr_len
LEAF_NODE	32:52	32:52	7	<=
LEAF_NODE	32:55	32:55	7	length
LEAF_NODE	32:61	32:61	7	)
LEAF_NODE	32:63	32:63	7	{
STATEMENTS	33:4	44:86	7	
LEAF_NODE	33:4	33:4	8	ge
LEAF_NODE	33:6	33:6	8	->
LEAF_NODE	33:8	33:8	8	event
LEAF_NODE	33:13	33:13	8	.
LEAF_NODE	33:14	33:14	8	notify60
LEAF_NODE	33:22	33:22	8	[
LEAF_NODE	33:23	33:23	8	i
LEAF_NODE	33:24	33:24	8	]
LEAF_NODE	33:25	33:25	8	.
LEAF_NODE	33:26	33:26	8	descr
LEAF_NODE	33:32	33:32	8	=
LEAF_NODE	33:34	33:34	8	gg_encoding_convert
LEAF_NODE	33:53	33:53	8	(
LEAF_NODE	34:5	34:5	8	(
LEAF_NODE	34:6	34:6	8	const
LEAF_NODE	34:12	34:12	8	char
LEAF_NODE	34:16	34:16	8	*
LEAF_NODE	34:17	34:17	8	)
LEAF_NODE	34:19	34:19	8	n
LEAF_NODE	34:21	34:21	8	+
LEAF_NODE	34:23	34:23	8	sizeof
LEAF_NODE	34:29	34:29	8	(
LEAF_NODE	34:30	34:30	8	struct
LEAF_NODE	34:37	34:37	8	gg_notify_reply80
LEAF_NODE	34:54	34:54	8	)
LEAF_NODE	34:55	34:55	8	,
LEAF_NODE	35:5	35:5	8	GG_ENCODING_UTF8
LEAF_NODE	35:21	35:21	8	,
LEAF_NODE	35:23	35:23	8	gs
LEAF_NODE	35:25	35:25	8	->
LEAF_NODE	35:27	35:27	8	encoding
LEAF_NODE	35:35	35:35	8	,
LEAF_NODE	35:37	35:37	8	descr_len
LEAF_NODE	35:46	35:46	8	,
LEAF_NODE	35:48	35:48	8	-
LEAF_NODE	35:49	35:49	8	1
LEAF_NODE	35:50	35:50	8	)
LEAF_NODE	35:51	35:51	8	;
SELECTION	36:4	36:45	8	
KEYWORD	36:4	36:4	9	if
LEAF_NODE	36:4	36:4	10	if
LEAF_NODE	36:7	36:7	9	(
CONDITION	36:8	36:8	9	ge -> event . notify60 [ i ] . descr == NULL
EXPR	36:8	36:39	10	ge -> event . notify60 [ i ] . descr == NULL
FIELD	36:8	36:30	11	ge -> event . notify60 [ i ] . descr
LEAF_NODE	36:8	36:8	12	ge
LEAF_NODE	36:10	36:10	12	->
LEAF_NODE	36:12	36:12	12	event
LEAF_NODE	36:17	36:17	12	.
LEAF_NODE	36:18	36:18	12	notify60
LEAF_NODE	36:26	36:26	12	[
EXPR	36:27	36:27	12	i
FIELD	36:27	36:27	13	i
LEAF_NODE	36:27	36:27	14	i
LEAF_NODE	36:28	36:28	12	]
LEAF_NODE	36:29	36:29	12	.
LEAF_NODE	36:30	36:30	12	descr
EQ_OPERATOR	36:36	36:36	11	==
LEAF_NODE	36:36	36:36	12	==
FIELD	36:39	36:39	11	NULL
LEAF_NODE	36:39	36:39	12	NULL
LEAF_NODE	36:43	36:43	9	)
STATEMENTS	36:45	41:4	9	
LEAF_NODE	36:45	36:45	10	{
STATEMENTS	37:5	40:5	10	
LEAF_NODE	37:5	37:5	11	gg_debug_session
LEAF_NODE	37:21	37:21	11	(
LEAF_NODE	37:22	37:22	11	gs
LEAF_NODE	37:24	37:24	11	,
LEAF_NODE	37:26	37:26	11	GG_DEBUG_MISC
LEAF_NODE	37:39	37:39	11	,
LEAF_NODE	38:6	38:6	11	"// gg_watch_fd_connected() "
LEAF_NODE	39:6	39:6	11	"out of memory\n"
LEAF_NODE	39:23	39:23	11	)
LEAF_NODE	39:24	39:24	11	;
JUMP_STATEMENT	40:5	40:14	11	return - 1 ;
KEYWORD	40:5	40:5	12	return
LEAF_NODE	40:5	40:5	13	return
DESTINATION	40:12	40:12	12	- 1
EXPR	40:12	40:12	13	- 1
UNARY_EXPR	40:12	40:13	14	- 1
UNARY_OPERATOR	40:12	40:12	15	-
LEAF_NODE	40:12	40:12	16	-
FIELD	40:13	40:13	15	1
LEAF_NODE	40:13	40:13	16	1
LEAF_NODE	40:14	40:14	12	;
LEAF_NODE	41:4	41:4	10	}
LEAF_NODE	43:4	43:4	8	length
LEAF_NODE	43:11	43:11	8	-=
LEAF_NODE	43:14	43:14	8	sizeof
EXPR_STATEMENT	43:20	43:58	8	( struct gg_notify_reply80 ) + descr_len ;
EXPR	43:20	43:47	9	( struct gg_notify_reply80 ) + descr_len
LEAF_NODE	43:20	43:20	10	(
TYPE_NAME	43:21	43:28	10	struct gg_notify_reply80
LEAF_NODE	43:21	43:21	11	struct
LEAF_NODE	43:28	43:28	11	gg_notify_reply80
LEAF_NODE	43:45	43:45	10	)
UNARY_EXPR	43:47	43:49	10	+ descr_len
UNARY_OPERATOR	43:47	43:47	11	+
LEAF_NODE	43:47	43:47	12	+
FIELD	43:49	43:49	11	descr_len
LEAF_NODE	43:49	43:49	12	descr_len
LEAF_NODE	43:58	43:58	9	;
LEAF_NODE	44:4	44:4	8	n
LEAF_NODE	44:6	44:6	8	=
LEAF_NODE	44:8	44:8	8	(
LEAF_NODE	44:9	44:9	8	const
LEAF_NODE	44:15	44:15	8	void
LEAF_NODE	44:19	44:19	8	*
LEAF_NODE	44:20	44:20	8	)
LEAF_NODE	44:22	44:22	8	(
LEAF_NODE	44:23	44:23	8	(
LEAF_NODE	44:24	44:24	8	const
LEAF_NODE	44:30	44:30	8	char
LEAF_NODE	44:34	44:34	8	*
LEAF_NODE	44:35	44:35	8	)
LEAF_NODE	44:37	44:37	8	n
LEAF_NODE	44:39	44:39	8	+
LEAF_NODE	44:41	44:41	8	sizeof
LEAF_NODE	44:47	44:47	8	(
LEAF_NODE	44:48	44:48	8	struct
LEAF_NODE	44:55	44:55	8	gg_notify_reply80
LEAF_NODE	44:72	44:72	8	)
LEAF_NODE	44:74	44:74	8	+
LEAF_NODE	44:76	44:76	8	descr_len
LEAF_NODE	44:85	44:85	8	)
LEAF_NODE	44:86	44:86	8	;
LEAF_NODE	45:3	45:3	7	}
SELECTION	45:5	45:10	7	
KEYWORD	45:5	45:5	8	else
LEAF_NODE	45:5	45:5	9	else
STATEMENTS	45:10	47:3	8	
LEAF_NODE	45:10	45:10	9	{
STATEMENTS	46:4	46:4	9	
EXPR_STATEMENT	46:4	46:14	10	length = 0 ;
EXPR	46:4	46:4	11	length = 0
ASSIGN	46:4	46:13	12	length = 0
LVAL	46:4	46:4	13	length
FIELD	46:4	46:4	14	length
LEAF_NODE	46:4	46:4	15	length
ASSIGN_OP	46:11	46:11	13	=
LEAF_NODE	46:11	46:11	14	=
RVAL	46:13	46:13	13	0
FIELD	46:13	46:13	14	0
LEAF_NODE	46:13	46:13	15	0
LEAF_NODE	46:14	46:14	11	;
LEAF_NODE	47:3	47:3	9	}
LEAF_NODE	48:2	48:2	6	}
SELECTION	48:4	48:9	4	
KEYWORD	48:4	48:4	5	else
LEAF_NODE	48:4	48:4	6	else
STATEMENTS	48:9	51:2	5	
LEAF_NODE	48:9	48:9	6	{
STATEMENTS	49:3	50:73	6	
LEAF_NODE	49:3	49:3	7	length
LEAF_NODE	49:10	49:10	7	-=
LEAF_NODE	49:13	49:13	7	sizeof
LEAF_NODE	49:19	49:19	7	(
LEAF_NODE	49:20	49:20	7	struct
LEAF_NODE	49:27	49:27	7	gg_notify_reply80
LEAF_NODE	49:44	49:44	7	)
LEAF_NODE	49:45	49:45	7	;
LEAF_NODE	50:3	50:3	7	n
LEAF_NODE	50:5	50:5	7	=
LEAF_NODE	50:7	50:7	7	(
LEAF_NODE	50:8	50:8	7	const
LEAF_NODE	50:14	50:14	7	void
LEAF_NODE	50:18	50:18	7	*
LEAF_NODE	50:19	50:19	7	)
LEAF_NODE	50:21	50:21	7	(
LEAF_NODE	50:22	50:22	7	(
LEAF_NODE	50:23	50:23	7	const
LEAF_NODE	50:29	50:29	7	char
LEAF_NODE	50:33	50:33	7	*
LEAF_NODE	50:34	50:34	7	)
LEAF_NODE	50:36	50:36	7	n
LEAF_NODE	50:38	50:38	7	+
LEAF_NODE	50:40	50:40	7	sizeof
LEAF_NODE	50:46	50:46	7	(
LEAF_NODE	50:47	50:47	7	struct
LEAF_NODE	50:54	50:54	7	gg_notify_reply80
LEAF_NODE	50:71	50:71	7	)
LEAF_NODE	50:72	50:72	7	)
LEAF_NODE	50:73	50:73	7	;
LEAF_NODE	51:2	51:2	6	}
SELECTION	52:2	52:83	4	
KEYWORD	52:2	52:2	5	if
LEAF_NODE	52:2	52:2	6	if
LEAF_NODE	52:5	52:5	5	(
CONDITION	52:6	52:6	5	! ( tmp = realloc ( ge -> event . notify60 , ( i + 2 ) * sizeof ( * ge -> event . notify60 ) ) )
EXPR	52:6	52:6	6	! ( tmp = realloc ( ge -> event . notify60 , ( i + 2 ) * sizeof ( * ge -> event . notify60 ) ) )
UNARY_EXPR	52:6	52:80	7	! ( tmp = realloc ( ge -> event . notify60 , ( i + 2 ) * sizeof ( * ge -> event . notify60 ) ) )
UNARY_OPERATOR	52:6	52:6	8	!
LEAF_NODE	52:6	52:6	9	!
LEAF_NODE	52:7	52:7	8	(
ASSIGN	52:8	52:14	8	tmp = realloc ( ge -> event . notify60 , ( i + 2 ) * sizeof ( * ge -> event . notify60 ) )
LVAL	52:8	52:8	9	tmp
FIELD	52:8	52:8	10	tmp
LEAF_NODE	52:8	52:8	11	tmp
ASSIGN_OP	52:12	52:12	9	=
LEAF_NODE	52:12	52:12	10	=
RVAL	52:14	52:14	9	realloc ( ge -> event . notify60 , ( i + 2 ) * sizeof ( * ge -> event . notify60 ) )
FUNCTION_CALL	52:14	52:79	10	realloc ( ge -> event . notify60 , ( i + 2 ) * sizeof ( * ge -> event . notify60 ) )
CALLEE	52:14	52:14	11	realloc
LEAF_NODE	52:14	52:14	12	realloc
LEAF_NODE	52:21	52:21	11	(
ARGUMENT	52:22	52:22	11	ge -> event . notify60
FIELD	52:22	52:32	12	ge -> event . notify60
LEAF_NODE	52:22	52:22	13	ge
LEAF_NODE	52:24	52:24	13	->
LEAF_NODE	52:26	52:26	13	event
LEAF_NODE	52:31	52:31	13	.
LEAF_NODE	52:32	52:32	13	notify60
LEAF_NODE	52:40	52:40	11	,
ARGUMENT	52:42	52:52	11	( i + 2 ) * sizeof ( * ge -> event . notify60 )
LEAF_NODE	52:42	52:42	12	(
FIELD	52:43	52:43	12	i
LEAF_NODE	52:43	52:43	13	i
LEAF_NODE	52:45	52:45	12	+
FIELD	52:47	52:47	12	2
LEAF_NODE	52:47	52:47	13	2
LEAF_NODE	52:48	52:48	12	)
LEAF_NODE	52:50	52:50	12	*
FUNCTION_CALL	52:52	52:78	12	sizeof ( * ge -> event . notify60 )
CALLEE	52:52	52:52	13	sizeof
LEAF_NODE	52:52	52:52	14	sizeof
LEAF_NODE	52:58	52:58	13	(
ARGUMENT	52:59	52:59	13	* ge -> event . notify60
UNARY_EXPR	52:59	52:60	14	* ge -> event . notify60
UNARY_OPERATOR	52:59	52:59	15	*
LEAF_NODE	52:59	52:59	16	*
FIELD	52:60	52:70	15	ge -> event . notify60
LEAF_NODE	52:60	52:60	16	ge
LEAF_NODE	52:62	52:62	16	->
LEAF_NODE	52:64	52:64	16	event
LEAF_NODE	52:69	52:69	16	.
LEAF_NODE	52:70	52:70	16	notify60
LEAF_NODE	52:78	52:78	13	)
LEAF_NODE	52:79	52:79	11	)
LEAF_NODE	52:80	52:80	8	)
LEAF_NODE	52:81	52:81	5	)
STATEMENTS	52:83	56:2	5	
LEAF_NODE	52:83	52:83	6	{
STATEMENTS	53:3	55:3	6	
EXPR_STATEMENT	53:3	53:84	7	gg_debug_session ( gs , GG_DEBUG_MISC , "// gg_watch_fd_connected() out of memory\n" ) ;
EXPR	53:3	53:3	8	gg_debug_session ( gs , GG_DEBUG_MISC , "// gg_watch_fd_connected() out of memory\n" )
FUNCTION_CALL	53:3	53:83	9	gg_debug_session ( gs , GG_DEBUG_MISC , "// gg_watch_fd_connected() out of memory\n" )
CALLEE	53:3	53:3	10	gg_debug_session
LEAF_NODE	53:3	53:3	11	gg_debug_session
LEAF_NODE	53:19	53:19	10	(
ARGUMENT	53:20	53:20	10	gs
FIELD	53:20	53:20	11	gs
LEAF_NODE	53:20	53:20	12	gs
LEAF_NODE	53:22	53:22	10	,
ARGUMENT	53:24	53:24	10	GG_DEBUG_MISC
FIELD	53:24	53:24	11	GG_DEBUG_MISC
LEAF_NODE	53:24	53:24	12	GG_DEBUG_MISC
LEAF_NODE	53:37	53:37	10	,
ARGUMENT	53:39	53:39	10	"// gg_watch_fd_connected() out of memory\n"
FIELD	53:39	53:39	11	"// gg_watch_fd_connected() out of memory\n"
LEAF_NODE	53:39	53:39	12	"// gg_watch_fd_connected() out of memory\n"
LEAF_NODE	53:83	53:83	10	)
LEAF_NODE	53:84	53:84	8	;
EXPR_STATEMENT	54:3	54:27	7	free ( ge -> event . notify60 ) ;
EXPR	54:3	54:3	8	free ( ge -> event . notify60 )
FUNCTION_CALL	54:3	54:26	9	free ( ge -> event . notify60 )
CALLEE	54:3	54:3	10	free
LEAF_NODE	54:3	54:3	11	free
LEAF_NODE	54:7	54:7	10	(
ARGUMENT	54:8	54:8	10	ge -> event . notify60
FIELD	54:8	54:18	11	ge -> event . notify60
LEAF_NODE	54:8	54:8	12	ge
LEAF_NODE	54:10	54:10	12	->
LEAF_NODE	54:12	54:12	12	event
LEAF_NODE	54:17	54:17	12	.
LEAF_NODE	54:18	54:18	12	notify60
LEAF_NODE	54:26	54:26	10	)
LEAF_NODE	54:27	54:27	8	;
JUMP_STATEMENT	55:3	55:12	7	return - 1 ;
KEYWORD	55:3	55:3	8	return
LEAF_NODE	55:3	55:3	9	return
DESTINATION	55:10	55:10	8	- 1
EXPR	55:10	55:10	9	- 1
UNARY_EXPR	55:10	55:11	10	- 1
UNARY_OPERATOR	55:10	55:10	11	-
LEAF_NODE	55:10	55:10	12	-
FIELD	55:11	55:11	11	1
LEAF_NODE	55:11	55:11	12	1
LEAF_NODE	55:12	55:12	8	;
LEAF_NODE	56:2	56:2	6	}
EXPR_STATEMENT	57:2	57:26	4	ge -> event . notify60 = tmp ;
EXPR	57:2	57:2	5	ge -> event . notify60 = tmp
ASSIGN	57:2	57:23	6	ge -> event . notify60 = tmp
LVAL	57:2	57:2	7	ge -> event . notify60
FIELD	57:2	57:12	8	ge -> event . notify60
LEAF_NODE	57:2	57:2	9	ge
LEAF_NODE	57:4	57:4	9	->
LEAF_NODE	57:6	57:6	9	event
LEAF_NODE	57:11	57:11	9	.
LEAF_NODE	57:12	57:12	9	notify60
ASSIGN_OP	57:21	57:21	7	=
LEAF_NODE	57:21	57:21	8	=
RVAL	57:23	57:23	7	tmp
FIELD	57:23	57:23	8	tmp
LEAF_NODE	57:23	57:23	9	tmp
LEAF_NODE	57:26	57:26	5	;
EXPR_STATEMENT	58:2	58:33	4	ge -> event . notify60 [ ++ i ] . uin = 0 ;
EXPR	58:2	58:2	5	ge -> event . notify60 [ ++ i ] . uin = 0
ASSIGN	58:2	58:32	6	ge -> event . notify60 [ ++ i ] . uin = 0
LVAL	58:2	58:2	7	ge -> event . notify60 [ ++ i ] . uin
FIELD	58:2	58:26	8	ge -> event . notify60 [ ++ i ] . uin
LEAF_NODE	58:2	58:2	9	ge
LEAF_NODE	58:4	58:4	9	->
LEAF_NODE	58:6	58:6	9	event
LEAF_NODE	58:11	58:11	9	.
LEAF_NODE	58:12	58:12	9	notify60
LEAF_NODE	58:20	58:20	9	[
EXPR	58:21	58:23	9	++ i
LEAF_NODE	58:21	58:21	10	++
FIELD	58:23	58:23	10	i
LEAF_NODE	58:23	58:23	11	i
LEAF_NODE	58:24	58:24	9	]
LEAF_NODE	58:25	58:25	9	.
LEAF_NODE	58:26	58:26	9	uin
ASSIGN_OP	58:30	58:30	7	=
LEAF_NODE	58:30	58:30	8	=
RVAL	58:32	58:32	7	0
FIELD	58:32	58:32	8	0
LEAF_NODE	58:32	58:32	9	0
LEAF_NODE	58:33	58:33	5	;
LEAF_NODE	59:1	59:1	3	}
JUMP_STATEMENT	60:1	60:9	3	return 0 ;
KEYWORD	60:1	60:1	4	return
LEAF_NODE	60:1	60:1	5	return
DESTINATION	60:8	60:8	4	0
EXPR	60:8	60:8	5	0
FIELD	60:8	60:8	6	0
LEAF_NODE	60:8	60:8	7	0
LEAF_NODE	60:9	60:9	4	;
LEAF_NODE	61:0	61:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	61:0	1	
RETURN_TYPE	2:0	2:7	2	static gboolean
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	gboolean
LEAF_NODE	2:7	2:7	4	gboolean
FUNCTION_NAME	2:16	2:16	2	do_login
LEAF_NODE	2:16	2:16	3	do_login
PARAMETER_LIST	2:24	2:45	2	( PurpleConnection * gc )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:43	3	PurpleConnection * gc
TYPE	2:25	2:42	4	PurpleConnection *
TYPE_NAME	2:25	2:25	5	PurpleConnection
LEAF_NODE	2:25	2:25	6	PurpleConnection
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	gc
LEAF_NODE	2:43	2:43	5	gc
LEAF_NODE	2:45	2:45	3	)
LEAF_NODE	2:47	2:47	2	{
STATEMENTS	3:1	60:1	2	
SIMPLE_DECL	3:1	3:23	3	char * buf , char * tmp ; tmp = NULL ;
INIT_DECL_LIST	3:1	3:1	4	char * buf , char * tmp ; tmp = NULL
VAR_DECL	3:1	3:7	5	char * buf
TYPE	3:1	3:6	6	char *
TYPE_NAME	3:1	3:1	7	char
LEAF_NODE	3:1	3:1	8	char
POINTER	3:6	3:6	7	*
LEAF_NODE	3:6	3:6	8	*
NAME	3:7	3:7	6	buf
LEAF_NODE	3:7	3:7	7	buf
LEAF_NODE	3:10	3:10	5	,
VAR_DECL	3:1	3:13	5	char * tmp ; tmp = NULL
TYPE	3:1	3:12	6	char *
TYPE_NAME	3:1	3:1	7	char
LEAF_NODE	3:1	3:1	8	char
POINTER	3:12	3:12	7	*
LEAF_NODE	3:12	3:12	8	*
NAME	3:13	3:13	6	tmp
LEAF_NODE	3:13	3:13	7	tmp
LEAF_NODE	0:0	0:0	6	;
INIT	3:13	3:13	6	tmp = NULL
ASSIGN	3:13	3:19	7	tmp = NULL
LVAL	3:13	3:13	8	tmp
NAME	3:13	3:13	9	tmp
LEAF_NODE	3:13	3:13	10	tmp
ASSIGN_OP	3:17	3:17	8	=
LEAF_NODE	3:17	3:17	9	=
RVAL	3:19	3:19	8	NULL
FIELD	3:19	3:19	9	NULL
LEAF_NODE	3:19	3:19	10	NULL
LEAF_NODE	3:23	3:23	4	;
SIMPLE_DECL	4:1	4:13	3	char * server ;
VAR_DECL	4:1	4:7	4	char * server
TYPE	4:1	4:6	5	char *
TYPE_NAME	4:1	4:1	6	char
LEAF_NODE	4:1	4:1	7	char
POINTER	4:6	4:6	6	*
LEAF_NODE	4:6	4:6	7	*
NAME	4:7	4:7	5	server
LEAF_NODE	4:7	4:7	6	server
LEAF_NODE	4:13	4:13	4	;
SIMPLE_DECL	5:1	5:44	3	const char * nickname , const char * identname , const char * realname ;
INIT_DECL_LIST	5:1	5:1	4	const char * nickname , const char * identname , const char * realname
VAR_DECL	5:1	5:13	5	const char * nickname
TYPE	5:1	5:12	6	const char *
TYPE_NAME	5:1	5:7	7	const char
LEAF_NODE	5:1	5:1	8	const
LEAF_NODE	5:7	5:7	8	char
POINTER	5:12	5:12	7	*
LEAF_NODE	5:12	5:12	8	*
NAME	5:13	5:13	6	nickname
LEAF_NODE	5:13	5:13	7	nickname
LEAF_NODE	5:21	5:21	5	,
INIT_DECL_LIST	5:1	5:1	5	const char * identname , const char * realname
VAR_DECL	5:1	5:24	6	const char * identname
TYPE	5:1	5:23	7	const char *
TYPE_NAME	5:1	5:7	8	const char
LEAF_NODE	5:1	5:1	9	const
LEAF_NODE	5:7	5:7	9	char
POINTER	5:23	5:23	8	*
LEAF_NODE	5:23	5:23	9	*
NAME	5:24	5:24	7	identname
LEAF_NODE	5:24	5:24	8	identname
LEAF_NODE	5:33	5:33	6	,
VAR_DECL	5:1	5:36	6	const char * realname
TYPE	5:1	5:35	7	const char *
TYPE_NAME	5:1	5:7	8	const char
LEAF_NODE	5:1	5:1	9	const
LEAF_NODE	5:7	5:7	9	char
POINTER	5:35	5:35	8	*
LEAF_NODE	5:35	5:35	9	*
NAME	5:36	5:36	7	realname
LEAF_NODE	5:36	5:36	8	realname
LEAF_NODE	5:44	5:44	4	;
SIMPLE_DECL	6:1	6:38	3	struct irc_conn * irc ; irc = gc -> proto_data ;
VAR_DECL	6:1	6:18	4	struct irc_conn * irc ; irc = gc -> proto_data
TYPE	6:1	6:17	5	struct irc_conn *
TYPE_NAME	6:1	6:8	6	struct irc_conn
LEAF_NODE	6:1	6:1	7	struct
LEAF_NODE	6:8	6:8	7	irc_conn
POINTER	6:17	6:17	6	*
LEAF_NODE	6:17	6:17	7	*
NAME	6:18	6:18	5	irc
LEAF_NODE	6:18	6:18	6	irc
LEAF_NODE	0:0	0:0	5	;
INIT	6:18	6:18	5	irc = gc -> proto_data
ASSIGN	6:18	6:24	6	irc = gc -> proto_data
LVAL	6:18	6:18	7	irc
NAME	6:18	6:18	8	irc
LEAF_NODE	6:18	6:18	9	irc
ASSIGN_OP	6:22	6:22	7	=
LEAF_NODE	6:22	6:22	8	=
RVAL	6:24	6:24	7	gc -> proto_data
FIELD	6:24	6:28	8	gc -> proto_data
LEAF_NODE	6:24	6:24	9	gc
LEAF_NODE	6:26	6:26	9	->
LEAF_NODE	6:28	6:28	9	proto_data
LEAF_NODE	6:38	6:38	4	;
SIMPLE_DECL	7:1	7:54	3	const char * pass ; pass = purple_connection_get_password ( gc ) ;
VAR_DECL	7:1	7:13	4	const char * pass ; pass = purple_connection_get_password ( gc )
TYPE	7:1	7:12	5	const char *
TYPE_NAME	7:1	7:7	6	const char
LEAF_NODE	7:1	7:1	7	const
LEAF_NODE	7:7	7:7	7	char
POINTER	7:12	7:12	6	*
LEAF_NODE	7:12	7:12	7	*
NAME	7:13	7:13	5	pass
LEAF_NODE	7:13	7:13	6	pass
LEAF_NODE	0:0	0:0	5	;
INIT	7:13	7:13	5	pass = purple_connection_get_password ( gc )
ASSIGN	7:13	7:20	6	pass = purple_connection_get_password ( gc )
LVAL	7:13	7:13	7	pass
NAME	7:13	7:13	8	pass
LEAF_NODE	7:13	7:13	9	pass
ASSIGN_OP	7:18	7:18	7	=
LEAF_NODE	7:18	7:18	8	=
RVAL	7:20	7:20	7	purple_connection_get_password ( gc )
FUNCTION_CALL	7:20	7:53	8	purple_connection_get_password ( gc )
CALLEE	7:20	7:20	9	purple_connection_get_password
LEAF_NODE	7:20	7:20	10	purple_connection_get_password
LEAF_NODE	7:50	7:50	9	(
ARGUMENT	7:51	7:51	9	gc
FIELD	7:51	7:51	10	gc
LEAF_NODE	7:51	7:51	11	gc
LEAF_NODE	7:53	7:53	9	)
LEAF_NODE	7:54	7:54	4	;
SIMPLE_DECL	9:1	9:79	3	const gboolean use_sasl ; use_sasl = purple_account_get_bool ( irc -> account , "sasl" , FALSE ) ;
VAR_DECL	9:1	9:16	4	const gboolean use_sasl ; use_sasl = purple_account_get_bool ( irc -> account , "sasl" , FALSE )
TYPE	9:1	9:1	5	const gboolean
TYPE_NAME	9:1	9:7	6	const gboolean
LEAF_NODE	9:1	9:1	7	const
LEAF_NODE	9:7	9:7	7	gboolean
NAME	9:16	9:16	5	use_sasl
LEAF_NODE	9:16	9:16	6	use_sasl
LEAF_NODE	0:0	0:0	5	;
INIT	9:16	9:16	5	use_sasl = purple_account_get_bool ( irc -> account , "sasl" , FALSE )
ASSIGN	9:16	9:27	6	use_sasl = purple_account_get_bool ( irc -> account , "sasl" , FALSE )
LVAL	9:16	9:16	7	use_sasl
NAME	9:16	9:16	8	use_sasl
LEAF_NODE	9:16	9:16	9	use_sasl
ASSIGN_OP	9:25	9:25	7	=
LEAF_NODE	9:25	9:25	8	=
RVAL	9:27	9:27	7	purple_account_get_bool ( irc -> account , "sasl" , FALSE )
FUNCTION_CALL	9:27	9:78	8	purple_account_get_bool ( irc -> account , "sasl" , FALSE )
CALLEE	9:27	9:27	9	purple_account_get_bool
LEAF_NODE	9:27	9:27	10	purple_account_get_bool
LEAF_NODE	9:50	9:50	9	(
ARGUMENT	9:51	9:51	9	irc -> account
FIELD	9:51	9:56	10	irc -> account
LEAF_NODE	9:51	9:51	11	irc
LEAF_NODE	9:54	9:54	11	->
LEAF_NODE	9:56	9:56	11	account
LEAF_NODE	9:63	9:63	9	,
ARGUMENT	9:65	9:65	9	"sasl"
FIELD	9:65	9:65	10	"sasl"
LEAF_NODE	9:65	9:65	11	"sasl"
LEAF_NODE	9:71	9:71	9	,
ARGUMENT	9:73	9:73	9	FALSE
FIELD	9:73	9:73	10	FALSE
LEAF_NODE	9:73	9:73	11	FALSE
LEAF_NODE	9:78	9:78	9	)
LEAF_NODE	9:79	9:79	4	;
SELECTION	11:1	11:20	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	pass && * pass
EXPR	11:5	11:5	5	pass && * pass
AND	11:5	11:13	6	pass && * pass
EXPR	11:5	11:5	7	pass
FIELD	11:5	11:5	8	pass
LEAF_NODE	11:5	11:5	9	pass
LEAF_NODE	11:10	11:10	7	&&
EXPR	11:13	11:13	7	* pass
UNARY_EXPR	11:13	11:14	8	* pass
UNARY_OPERATOR	11:13	11:13	9	*
LEAF_NODE	11:13	11:13	10	*
FIELD	11:14	11:14	9	pass
LEAF_NODE	11:14	11:14	10	pass
LEAF_NODE	11:18	11:18	4	)
STATEMENTS	11:20	23:1	4	
LEAF_NODE	11:20	11:20	5	{
STATEMENTS	13:2	22:2	5	
SELECTION	13:2	14:3	6	
KEYWORD	13:2	13:2	7	if
LEAF_NODE	13:2	13:2	8	if
LEAF_NODE	13:5	13:5	7	(
CONDITION	13:6	13:6	7	use_sasl
EXPR	13:6	13:6	8	use_sasl
FIELD	13:6	13:6	9	use_sasl
LEAF_NODE	13:6	13:6	10	use_sasl
LEAF_NODE	13:14	13:14	7	)
STATEMENTS	14:3	14:3	7	
EXPR_STATEMENT	14:3	14:53	8	buf = irc_format ( irc , "vv:" , "CAP" , "REQ" , "sasl" ) ;
EXPR	14:3	14:3	9	buf = irc_format ( irc , "vv:" , "CAP" , "REQ" , "sasl" )
ASSIGN	14:3	14:9	10	buf = irc_format ( irc , "vv:" , "CAP" , "REQ" , "sasl" )
LVAL	14:3	14:3	11	buf
FIELD	14:3	14:3	12	buf
LEAF_NODE	14:3	14:3	13	buf
ASSIGN_OP	14:7	14:7	11	=
LEAF_NODE	14:7	14:7	12	=
RVAL	14:9	14:9	11	irc_format ( irc , "vv:" , "CAP" , "REQ" , "sasl" )
FUNCTION_CALL	14:9	14:52	12	irc_format ( irc , "vv:" , "CAP" , "REQ" , "sasl" )
CALLEE	14:9	14:9	13	irc_format
LEAF_NODE	14:9	14:9	14	irc_format
LEAF_NODE	14:19	14:19	13	(
ARGUMENT	14:20	14:20	13	irc
FIELD	14:20	14:20	14	irc
LEAF_NODE	14:20	14:20	15	irc
LEAF_NODE	14:23	14:23	13	,
ARGUMENT	14:25	14:25	13	"vv:"
FIELD	14:25	14:25	14	"vv:"
LEAF_NODE	14:25	14:25	15	"vv:"
LEAF_NODE	14:30	14:30	13	,
ARGUMENT	14:32	14:32	13	"CAP"
FIELD	14:32	14:32	14	"CAP"
LEAF_NODE	14:32	14:32	15	"CAP"
LEAF_NODE	14:37	14:37	13	,
ARGUMENT	14:39	14:39	13	"REQ"
FIELD	14:39	14:39	14	"REQ"
LEAF_NODE	14:39	14:39	15	"REQ"
LEAF_NODE	14:44	14:44	13	,
ARGUMENT	14:46	14:46	13	"sasl"
FIELD	14:46	14:46	14	"sasl"
LEAF_NODE	14:46	14:46	15	"sasl"
LEAF_NODE	14:52	14:52	13	)
LEAF_NODE	14:53	14:53	9	;
SELECTION	15:2	17:3	6	
KEYWORD	15:2	15:2	7	else
LEAF_NODE	15:2	15:2	8	else
STATEMENTS	17:3	17:3	7	
EXPR_STATEMENT	17:3	17:44	8	buf = irc_format ( irc , "v:" , "PASS" , pass ) ;
EXPR	17:3	17:3	9	buf = irc_format ( irc , "v:" , "PASS" , pass )
ASSIGN	17:3	17:9	10	buf = irc_format ( irc , "v:" , "PASS" , pass )
LVAL	17:3	17:3	11	buf
FIELD	17:3	17:3	12	buf
LEAF_NODE	17:3	17:3	13	buf
ASSIGN_OP	17:7	17:7	11	=
LEAF_NODE	17:7	17:7	12	=
RVAL	17:9	17:9	11	irc_format ( irc , "v:" , "PASS" , pass )
FUNCTION_CALL	17:9	17:43	12	irc_format ( irc , "v:" , "PASS" , pass )
CALLEE	17:9	17:9	13	irc_format
LEAF_NODE	17:9	17:9	14	irc_format
LEAF_NODE	17:19	17:19	13	(
ARGUMENT	17:20	17:20	13	irc
FIELD	17:20	17:20	14	irc
LEAF_NODE	17:20	17:20	15	irc
LEAF_NODE	17:23	17:23	13	,
ARGUMENT	17:25	17:25	13	"v:"
FIELD	17:25	17:25	14	"v:"
LEAF_NODE	17:25	17:25	15	"v:"
LEAF_NODE	17:29	17:29	13	,
ARGUMENT	17:31	17:31	13	"PASS"
FIELD	17:31	17:31	14	"PASS"
LEAF_NODE	17:31	17:31	15	"PASS"
LEAF_NODE	17:37	17:37	13	,
ARGUMENT	17:39	17:39	13	pass
FIELD	17:39	17:39	14	pass
LEAF_NODE	17:39	17:39	15	pass
LEAF_NODE	17:43	17:43	13	)
LEAF_NODE	17:44	17:44	9	;
SELECTION	18:2	18:30	6	
KEYWORD	18:2	18:2	7	if
LEAF_NODE	18:2	18:2	8	if
LEAF_NODE	18:5	18:5	7	(
CONDITION	18:6	18:6	7	irc_send ( irc , buf ) < 0
EXPR	18:6	18:27	8	irc_send ( irc , buf ) < 0
FUNCTION_CALL	18:6	18:23	9	irc_send ( irc , buf )
CALLEE	18:6	18:6	10	irc_send
LEAF_NODE	18:6	18:6	11	irc_send
LEAF_NODE	18:14	18:14	10	(
ARGUMENT	18:15	18:15	10	irc
FIELD	18:15	18:15	11	irc
LEAF_NODE	18:15	18:15	12	irc
LEAF_NODE	18:18	18:18	10	,
ARGUMENT	18:20	18:20	10	buf
FIELD	18:20	18:20	11	buf
LEAF_NODE	18:20	18:20	12	buf
LEAF_NODE	18:23	18:23	10	)
REL_OPERATOR	18:25	18:25	9	<
LEAF_NODE	18:25	18:25	10	<
FIELD	18:27	18:27	9	0
LEAF_NODE	18:27	18:27	10	0
LEAF_NODE	18:28	18:28	7	)
STATEMENTS	18:30	21:2	7	
LEAF_NODE	18:30	18:30	8	{
STATEMENTS	19:3	20:3	8	
EXPR_STATEMENT	19:3	19:14	9	g_free ( buf ) ;
EXPR	19:3	19:3	10	g_free ( buf )
FUNCTION_CALL	19:3	19:13	11	g_free ( buf )
CALLEE	19:3	19:3	12	g_free
LEAF_NODE	19:3	19:3	13	g_free
LEAF_NODE	19:9	19:9	12	(
ARGUMENT	19:10	19:10	12	buf
FIELD	19:10	19:10	13	buf
LEAF_NODE	19:10	19:10	14	buf
LEAF_NODE	19:13	19:13	12	)
LEAF_NODE	19:14	19:14	10	;
JUMP_STATEMENT	20:3	20:15	9	return FALSE ;
KEYWORD	20:3	20:3	10	return
LEAF_NODE	20:3	20:3	11	return
DESTINATION	20:10	20:10	10	FALSE
EXPR	20:10	20:10	11	FALSE
FIELD	20:10	20:10	12	FALSE
LEAF_NODE	20:10	20:10	13	FALSE
LEAF_NODE	20:15	20:15	10	;
LEAF_NODE	21:2	21:2	8	}
EXPR_STATEMENT	22:2	22:13	6	g_free ( buf ) ;
EXPR	22:2	22:2	7	g_free ( buf )
FUNCTION_CALL	22:2	22:12	8	g_free ( buf )
CALLEE	22:2	22:2	9	g_free
LEAF_NODE	22:2	22:2	10	g_free
LEAF_NODE	22:8	22:8	9	(
ARGUMENT	22:9	22:9	9	buf
FIELD	22:9	22:9	10	buf
LEAF_NODE	22:9	22:9	11	buf
LEAF_NODE	22:12	22:12	9	)
LEAF_NODE	22:13	22:13	7	;
LEAF_NODE	23:1	23:1	5	}
EXPR_STATEMENT	24:1	24:67	3	realname = purple_account_get_string ( irc -> account , "realname" , "" ) ;
EXPR	24:1	24:1	4	realname = purple_account_get_string ( irc -> account , "realname" , "" )
ASSIGN	24:1	24:12	5	realname = purple_account_get_string ( irc -> account , "realname" , "" )
LVAL	24:1	24:1	6	realname
FIELD	24:1	24:1	7	realname
LEAF_NODE	24:1	24:1	8	realname
ASSIGN_OP	24:10	24:10	6	=
LEAF_NODE	24:10	24:10	7	=
RVAL	24:12	24:12	6	purple_account_get_string ( irc -> account , "realname" , "" )
FUNCTION_CALL	24:12	24:66	7	purple_account_get_string ( irc -> account , "realname" , "" )
CALLEE	24:12	24:12	8	purple_account_get_string
LEAF_NODE	24:12	24:12	9	purple_account_get_string
LEAF_NODE	24:37	24:37	8	(
ARGUMENT	24:38	24:38	8	irc -> account
FIELD	24:38	24:43	9	irc -> account
LEAF_NODE	24:38	24:38	10	irc
LEAF_NODE	24:41	24:41	10	->
LEAF_NODE	24:43	24:43	10	account
LEAF_NODE	24:50	24:50	8	,
ARGUMENT	24:52	24:52	8	"realname"
FIELD	24:52	24:52	9	"realname"
LEAF_NODE	24:52	24:52	10	"realname"
LEAF_NODE	24:62	24:62	8	,
ARGUMENT	24:64	24:64	8	""
FIELD	24:64	24:64	9	""
LEAF_NODE	24:64	24:64	10	""
LEAF_NODE	24:66	24:66	8	)
LEAF_NODE	24:67	24:67	4	;
EXPR_STATEMENT	25:1	25:68	3	identname = purple_account_get_string ( irc -> account , "username" , "" ) ;
EXPR	25:1	25:1	4	identname = purple_account_get_string ( irc -> account , "username" , "" )
ASSIGN	25:1	25:13	5	identname = purple_account_get_string ( irc -> account , "username" , "" )
LVAL	25:1	25:1	6	identname
FIELD	25:1	25:1	7	identname
LEAF_NODE	25:1	25:1	8	identname
ASSIGN_OP	25:11	25:11	6	=
LEAF_NODE	25:11	25:11	7	=
RVAL	25:13	25:13	6	purple_account_get_string ( irc -> account , "username" , "" )
FUNCTION_CALL	25:13	25:67	7	purple_account_get_string ( irc -> account , "username" , "" )
CALLEE	25:13	25:13	8	purple_account_get_string
LEAF_NODE	25:13	25:13	9	purple_account_get_string
LEAF_NODE	25:38	25:38	8	(
ARGUMENT	25:39	25:39	8	irc -> account
FIELD	25:39	25:44	9	irc -> account
LEAF_NODE	25:39	25:39	10	irc
LEAF_NODE	25:42	25:42	10	->
LEAF_NODE	25:44	25:44	10	account
LEAF_NODE	25:51	25:51	8	,
ARGUMENT	25:53	25:53	8	"username"
FIELD	25:53	25:53	9	"username"
LEAF_NODE	25:53	25:53	10	"username"
LEAF_NODE	25:63	25:63	8	,
ARGUMENT	25:65	25:65	8	""
FIELD	25:65	25:65	9	""
LEAF_NODE	25:65	25:65	10	""
LEAF_NODE	25:67	25:67	8	)
LEAF_NODE	25:68	25:68	4	;
SELECTION	26:1	26:46	3	
KEYWORD	26:1	26:1	4	if
LEAF_NODE	26:1	26:1	5	if
LEAF_NODE	26:4	26:4	4	(
CONDITION	26:5	26:5	4	identname == NULL || * identname == '\0'
EXPR	26:5	26:5	5	identname == NULL || * identname == '\0'
OR	26:5	26:26	6	identname == NULL || * identname == '\0'
EXPR	26:5	26:18	7	identname == NULL
FIELD	26:5	26:5	8	identname
LEAF_NODE	26:5	26:5	9	identname
EQ_OPERATOR	26:15	26:15	8	==
LEAF_NODE	26:15	26:15	9	==
FIELD	26:18	26:18	8	NULL
LEAF_NODE	26:18	26:18	9	NULL
LEAF_NODE	26:23	26:23	7	||
EXPR	26:26	26:40	7	* identname == '\0'
UNARY_EXPR	26:26	26:27	8	* identname
UNARY_OPERATOR	26:26	26:26	9	*
LEAF_NODE	26:26	26:26	10	*
FIELD	26:27	26:27	9	identname
LEAF_NODE	26:27	26:27	10	identname
EQ_OPERATOR	26:37	26:37	8	==
LEAF_NODE	26:37	26:37	9	==
FIELD	26:40	26:40	8	'\0'
LEAF_NODE	26:40	26:40	9	'\0'
LEAF_NODE	26:44	26:44	4	)
STATEMENTS	26:46	28:1	4	
LEAF_NODE	26:46	26:46	5	{
STATEMENTS	27:2	27:2	5	
EXPR_STATEMENT	27:2	27:31	6	identname = g_get_user_name ( ) ;
EXPR	27:2	27:2	7	identname = g_get_user_name ( )
ASSIGN	27:2	27:14	8	identname = g_get_user_name ( )
LVAL	27:2	27:2	9	identname
FIELD	27:2	27:2	10	identname
LEAF_NODE	27:2	27:2	11	identname
ASSIGN_OP	27:12	27:12	9	=
LEAF_NODE	27:12	27:12	10	=
RVAL	27:14	27:14	9	g_get_user_name ( )
FUNCTION_CALL	27:14	27:30	10	g_get_user_name ( )
CALLEE	27:14	27:14	11	g_get_user_name
LEAF_NODE	27:14	27:14	12	g_get_user_name
LEAF_NODE	27:29	27:29	11	(
LEAF_NODE	27:30	27:30	11	)
LEAF_NODE	27:31	27:31	7	;
LEAF_NODE	28:1	28:1	5	}
SELECTION	29:1	29:58	3	
KEYWORD	29:1	29:1	4	if
LEAF_NODE	29:1	29:1	5	if
LEAF_NODE	29:4	29:4	4	(
CONDITION	29:5	29:5	4	identname != NULL && strchr ( identname , ' ' ) != NULL
EXPR	29:5	29:5	5	identname != NULL && strchr ( identname , ' ' ) != NULL
AND	29:5	29:26	6	identname != NULL && strchr ( identname , ' ' ) != NULL
EXPR	29:5	29:18	7	identname != NULL
FIELD	29:5	29:5	8	identname
LEAF_NODE	29:5	29:5	9	identname
EQ_OPERATOR	29:15	29:15	8	!=
LEAF_NODE	29:15	29:15	9	!=
FIELD	29:18	29:18	8	NULL
LEAF_NODE	29:18	29:18	9	NULL
LEAF_NODE	29:23	29:23	7	&&
EXPR	29:26	29:52	7	strchr ( identname , ' ' ) != NULL
FUNCTION_CALL	29:26	29:47	8	strchr ( identname , ' ' )
CALLEE	29:26	29:26	9	strchr
LEAF_NODE	29:26	29:26	10	strchr
LEAF_NODE	29:32	29:32	9	(
ARGUMENT	29:33	29:33	9	identname
FIELD	29:33	29:33	10	identname
LEAF_NODE	29:33	29:33	11	identname
LEAF_NODE	29:42	29:42	9	,
ARGUMENT	29:44	29:44	9	' '
FIELD	29:44	29:44	10	' '
LEAF_NODE	29:44	29:44	11	' '
LEAF_NODE	29:47	29:47	9	)
EQ_OPERATOR	29:49	29:49	8	!=
LEAF_NODE	29:49	29:49	9	!=
FIELD	29:52	29:52	8	NULL
LEAF_NODE	29:52	29:52	9	NULL
LEAF_NODE	29:56	29:56	4	)
STATEMENTS	29:58	34:1	4	
LEAF_NODE	29:58	29:58	5	{
STATEMENTS	30:2	31:2	5	
EXPR_STATEMENT	30:2	30:27	6	tmp = g_strdup ( identname ) ;
EXPR	30:2	30:2	7	tmp = g_strdup ( identname )
ASSIGN	30:2	30:8	8	tmp = g_strdup ( identname )
LVAL	30:2	30:2	9	tmp
FIELD	30:2	30:2	10	tmp
LEAF_NODE	30:2	30:2	11	tmp
ASSIGN_OP	30:6	30:6	9	=
LEAF_NODE	30:6	30:6	10	=
RVAL	30:8	30:8	9	g_strdup ( identname )
FUNCTION_CALL	30:8	30:26	10	g_strdup ( identname )
CALLEE	30:8	30:8	11	g_strdup
LEAF_NODE	30:8	30:8	12	g_strdup
LEAF_NODE	30:16	30:16	11	(
ARGUMENT	30:17	30:17	11	identname
FIELD	30:17	30:17	12	identname
LEAF_NODE	30:17	30:17	13	identname
LEAF_NODE	30:26	30:26	11	)
LEAF_NODE	30:27	30:27	7	;
ITERATION	31:2	31:43	6	
KEYWORD	31:2	31:2	7	while
LEAF_NODE	31:2	31:2	8	while
LEAF_NODE	31:8	31:8	7	(
CONDITION	31:9	31:9	7	( buf = strchr ( tmp , ' ' ) ) != NULL
EXPR	31:9	31:37	8	( buf = strchr ( tmp , ' ' ) ) != NULL
LEAF_NODE	31:9	31:9	9	(
ASSIGN	31:10	31:16	9	buf = strchr ( tmp , ' ' )
LVAL	31:10	31:10	10	buf
FIELD	31:10	31:10	11	buf
LEAF_NODE	31:10	31:10	12	buf
ASSIGN_OP	31:14	31:14	10	=
LEAF_NODE	31:14	31:14	11	=
RVAL	31:16	31:16	10	strchr ( tmp , ' ' )
FUNCTION_CALL	31:16	31:31	11	strchr ( tmp , ' ' )
CALLEE	31:16	31:16	12	strchr
LEAF_NODE	31:16	31:16	13	strchr
LEAF_NODE	31:22	31:22	12	(
ARGUMENT	31:23	31:23	12	tmp
FIELD	31:23	31:23	13	tmp
LEAF_NODE	31:23	31:23	14	tmp
LEAF_NODE	31:26	31:26	12	,
ARGUMENT	31:28	31:28	12	' '
FIELD	31:28	31:28	13	' '
LEAF_NODE	31:28	31:28	14	' '
LEAF_NODE	31:31	31:31	12	)
LEAF_NODE	31:32	31:32	9	)
EQ_OPERATOR	31:34	31:34	9	!=
LEAF_NODE	31:34	31:34	10	!=
FIELD	31:37	31:37	9	NULL
LEAF_NODE	31:37	31:37	10	NULL
LEAF_NODE	31:41	31:41	7	)
STATEMENTS	31:43	33:2	7	
LEAF_NODE	31:43	31:43	8	{
STATEMENTS	32:3	32:3	8	
EXPR_STATEMENT	32:3	32:13	9	* buf = '_' ;
EXPR	32:3	32:3	10	* buf = '_'
ASSIGN	32:3	32:10	11	* buf = '_'
LVAL	32:3	32:3	12	* buf
UNARY_EXPR	32:3	32:4	13	* buf
UNARY_OPERATOR	32:3	32:3	14	*
LEAF_NODE	32:3	32:3	15	*
FIELD	32:4	32:4	14	buf
LEAF_NODE	32:4	32:4	15	buf
ASSIGN_OP	32:8	32:8	12	=
LEAF_NODE	32:8	32:8	13	=
RVAL	32:10	32:10	12	'_'
FIELD	32:10	32:10	13	'_'
LEAF_NODE	32:10	32:10	14	'_'
LEAF_NODE	32:13	32:13	10	;
LEAF_NODE	33:2	33:2	8	}
LEAF_NODE	34:1	34:1	5	}
SELECTION	35:1	35:26	3	
KEYWORD	35:1	35:1	4	if
LEAF_NODE	35:1	35:1	5	if
LEAF_NODE	35:4	35:4	4	(
CONDITION	35:5	35:5	4	* irc -> server == ':'
EXPR	35:5	35:21	5	* irc -> server == ':'
UNARY_EXPR	35:5	35:6	6	* irc -> server
UNARY_OPERATOR	35:5	35:5	7	*
LEAF_NODE	35:5	35:5	8	*
FIELD	35:6	35:11	7	irc -> server
LEAF_NODE	35:6	35:6	8	irc
LEAF_NODE	35:9	35:9	8	->
LEAF_NODE	35:11	35:11	8	server
EQ_OPERATOR	35:18	35:18	6	==
LEAF_NODE	35:18	35:18	7	==
FIELD	35:21	35:21	6	':'
LEAF_NODE	35:21	35:21	7	':'
LEAF_NODE	35:24	35:24	4	)
STATEMENTS	35:26	38:1	4	
LEAF_NODE	35:26	35:26	5	{
STATEMENTS	37:2	37:2	5	
EXPR_STATEMENT	37:2	37:46	6	server = g_strdup_printf ( "0%s" , irc -> server ) ;
EXPR	37:2	37:2	7	server = g_strdup_printf ( "0%s" , irc -> server )
ASSIGN	37:2	37:11	8	server = g_strdup_printf ( "0%s" , irc -> server )
LVAL	37:2	37:2	9	server
FIELD	37:2	37:2	10	server
LEAF_NODE	37:2	37:2	11	server
ASSIGN_OP	37:9	37:9	9	=
LEAF_NODE	37:9	37:9	10	=
RVAL	37:11	37:11	9	g_strdup_printf ( "0%s" , irc -> server )
FUNCTION_CALL	37:11	37:45	10	g_strdup_printf ( "0%s" , irc -> server )
CALLEE	37:11	37:11	11	g_strdup_printf
LEAF_NODE	37:11	37:11	12	g_strdup_printf
LEAF_NODE	37:26	37:26	11	(
ARGUMENT	37:27	37:27	11	"0%s"
FIELD	37:27	37:27	12	"0%s"
LEAF_NODE	37:27	37:27	13	"0%s"
LEAF_NODE	37:32	37:32	11	,
ARGUMENT	37:34	37:34	11	irc -> server
FIELD	37:34	37:39	12	irc -> server
LEAF_NODE	37:34	37:34	13	irc
LEAF_NODE	37:37	37:37	13	->
LEAF_NODE	37:39	37:39	13	server
LEAF_NODE	37:45	37:45	11	)
LEAF_NODE	37:46	37:46	7	;
LEAF_NODE	38:1	38:1	5	}
SELECTION	38:3	38:8	3	
KEYWORD	38:3	38:3	4	else
LEAF_NODE	38:3	38:3	5	else
STATEMENTS	38:8	40:1	4	
LEAF_NODE	38:8	38:8	5	{
STATEMENTS	39:2	39:2	5	
EXPR_STATEMENT	39:2	39:32	6	server = g_strdup ( irc -> server ) ;
EXPR	39:2	39:2	7	server = g_strdup ( irc -> server )
ASSIGN	39:2	39:11	8	server = g_strdup ( irc -> server )
LVAL	39:2	39:2	9	server
FIELD	39:2	39:2	10	server
LEAF_NODE	39:2	39:2	11	server
ASSIGN_OP	39:9	39:9	9	=
LEAF_NODE	39:9	39:9	10	=
RVAL	39:11	39:11	9	g_strdup ( irc -> server )
FUNCTION_CALL	39:11	39:31	10	g_strdup ( irc -> server )
CALLEE	39:11	39:11	11	g_strdup
LEAF_NODE	39:11	39:11	12	g_strdup
LEAF_NODE	39:19	39:19	11	(
ARGUMENT	39:20	39:20	11	irc -> server
FIELD	39:20	39:25	12	irc -> server
LEAF_NODE	39:20	39:20	13	irc
LEAF_NODE	39:23	39:23	13	->
LEAF_NODE	39:25	39:25	13	server
LEAF_NODE	39:31	39:31	11	)
LEAF_NODE	39:32	39:32	7	;
LEAF_NODE	40:1	40:1	5	}
EXPR_STATEMENT	41:1	42:66	3	buf = irc_format ( irc , "vvvv:" , "USER" , tmp ? tmp : identname , "*" , server , strlen ( realname ) ? realname : IRC_DEFAULT_ALIAS ) ;
EXPR	41:1	41:1	4	buf = irc_format ( irc , "vvvv:" , "USER" , tmp ? tmp : identname , "*" , server , strlen ( realname ) ? realname : IRC_DEFAULT_ALIAS )
ASSIGN	41:1	41:7	5	buf = irc_format ( irc , "vvvv:" , "USER" , tmp ? tmp : identname , "*" , server , strlen ( realname ) ? realname : IRC_DEFAULT_ALIAS )
LVAL	41:1	41:1	6	buf
FIELD	41:1	41:1	7	buf
LEAF_NODE	41:1	41:1	8	buf
ASSIGN_OP	41:5	41:5	6	=
LEAF_NODE	41:5	41:5	7	=
RVAL	41:7	41:7	6	irc_format ( irc , "vvvv:" , "USER" , tmp ? tmp : identname , "*" , server , strlen ( realname ) ? realname : IRC_DEFAULT_ALIAS )
FUNCTION_CALL	41:7	42:65	7	irc_format ( irc , "vvvv:" , "USER" , tmp ? tmp : identname , "*" , server , strlen ( realname ) ? realname : IRC_DEFAULT_ALIAS )
CALLEE	41:7	41:7	8	irc_format
LEAF_NODE	41:7	41:7	9	irc_format
LEAF_NODE	41:17	41:17	8	(
ARGUMENT	41:18	41:18	8	irc
FIELD	41:18	41:18	9	irc
LEAF_NODE	41:18	41:18	10	irc
LEAF_NODE	41:21	41:21	8	,
ARGUMENT	41:23	41:23	8	"vvvv:"
FIELD	41:23	41:23	9	"vvvv:"
LEAF_NODE	41:23	41:23	10	"vvvv:"
LEAF_NODE	41:30	41:30	8	,
ARGUMENT	41:32	41:32	8	"USER"
FIELD	41:32	41:32	9	"USER"
LEAF_NODE	41:32	41:32	10	"USER"
LEAF_NODE	41:38	41:38	8	,
ARGUMENT	41:40	41:40	8	tmp ? tmp : identname
COND_EXPR	41:40	41:52	9	tmp ? tmp : identname
CONDITION	41:40	41:40	10	tmp
FIELD	41:40	41:40	11	tmp
LEAF_NODE	41:40	41:40	12	tmp
LEAF_NODE	41:44	41:44	10	?
EXPR	41:46	41:46	10	tmp
FIELD	41:46	41:46	11	tmp
LEAF_NODE	41:46	41:46	12	tmp
LEAF_NODE	41:50	41:50	10	:
FIELD	41:52	41:52	10	identname
LEAF_NODE	41:52	41:52	11	identname
LEAF_NODE	41:61	41:61	8	,
ARGUMENT	41:63	41:63	8	"*"
FIELD	41:63	41:63	9	"*"
LEAF_NODE	41:63	41:63	10	"*"
LEAF_NODE	41:66	41:66	8	,
ARGUMENT	41:68	41:68	8	server
FIELD	41:68	41:68	9	server
LEAF_NODE	41:68	41:68	10	server
LEAF_NODE	41:74	41:74	8	,
ARGUMENT	42:18	42:18	8	strlen ( realname ) ? realname : IRC_DEFAULT_ALIAS
COND_EXPR	42:18	42:48	9	strlen ( realname ) ? realname : IRC_DEFAULT_ALIAS
CONDITION	42:18	42:18	10	strlen ( realname )
FUNCTION_CALL	42:18	42:33	11	strlen ( realname )
CALLEE	42:18	42:18	12	strlen
LEAF_NODE	42:18	42:18	13	strlen
LEAF_NODE	42:24	42:24	12	(
ARGUMENT	42:25	42:25	12	realname
FIELD	42:25	42:25	13	realname
LEAF_NODE	42:25	42:25	14	realname
LEAF_NODE	42:33	42:33	12	)
LEAF_NODE	42:35	42:35	10	?
EXPR	42:37	42:37	10	realname
FIELD	42:37	42:37	11	realname
LEAF_NODE	42:37	42:37	12	realname
LEAF_NODE	42:46	42:46	10	:
FIELD	42:48	42:48	10	IRC_DEFAULT_ALIAS
LEAF_NODE	42:48	42:48	11	IRC_DEFAULT_ALIAS
LEAF_NODE	42:65	42:65	8	)
LEAF_NODE	42:66	42:66	4	;
EXPR_STATEMENT	43:1	43:12	3	g_free ( tmp ) ;
EXPR	43:1	43:1	4	g_free ( tmp )
FUNCTION_CALL	43:1	43:11	5	g_free ( tmp )
CALLEE	43:1	43:1	6	g_free
LEAF_NODE	43:1	43:1	7	g_free
LEAF_NODE	43:7	43:7	6	(
ARGUMENT	43:8	43:8	6	tmp
FIELD	43:8	43:8	7	tmp
LEAF_NODE	43:8	43:8	8	tmp
LEAF_NODE	43:11	43:11	6	)
LEAF_NODE	43:12	43:12	4	;
EXPR_STATEMENT	44:1	44:15	3	g_free ( server ) ;
EXPR	44:1	44:1	4	g_free ( server )
FUNCTION_CALL	44:1	44:14	5	g_free ( server )
CALLEE	44:1	44:1	6	g_free
LEAF_NODE	44:1	44:1	7	g_free
LEAF_NODE	44:7	44:7	6	(
ARGUMENT	44:8	44:8	6	server
FIELD	44:8	44:8	7	server
LEAF_NODE	44:8	44:8	8	server
LEAF_NODE	44:14	44:14	6	)
LEAF_NODE	44:15	44:15	4	;
SELECTION	45:1	45:29	3	
KEYWORD	45:1	45:1	4	if
LEAF_NODE	45:1	45:1	5	if
LEAF_NODE	45:4	45:4	4	(
CONDITION	45:5	45:5	4	irc_send ( irc , buf ) < 0
EXPR	45:5	45:26	5	irc_send ( irc , buf ) < 0
FUNCTION_CALL	45:5	45:22	6	irc_send ( irc , buf )
CALLEE	45:5	45:5	7	irc_send
LEAF_NODE	45:5	45:5	8	irc_send
LEAF_NODE	45:13	45:13	7	(
ARGUMENT	45:14	45:14	7	irc
FIELD	45:14	45:14	8	irc
LEAF_NODE	45:14	45:14	9	irc
LEAF_NODE	45:17	45:17	7	,
ARGUMENT	45:19	45:19	7	buf
FIELD	45:19	45:19	8	buf
LEAF_NODE	45:19	45:19	9	buf
LEAF_NODE	45:22	45:22	7	)
REL_OPERATOR	45:24	45:24	6	<
LEAF_NODE	45:24	45:24	7	<
FIELD	45:26	45:26	6	0
LEAF_NODE	45:26	45:26	7	0
LEAF_NODE	45:27	45:27	4	)
STATEMENTS	45:29	48:1	4	
LEAF_NODE	45:29	45:29	5	{
STATEMENTS	46:2	47:2	5	
EXPR_STATEMENT	46:2	46:13	6	g_free ( buf ) ;
EXPR	46:2	46:2	7	g_free ( buf )
FUNCTION_CALL	46:2	46:12	8	g_free ( buf )
CALLEE	46:2	46:2	9	g_free
LEAF_NODE	46:2	46:2	10	g_free
LEAF_NODE	46:8	46:8	9	(
ARGUMENT	46:9	46:9	9	buf
FIELD	46:9	46:9	10	buf
LEAF_NODE	46:9	46:9	11	buf
LEAF_NODE	46:12	46:12	9	)
LEAF_NODE	46:13	46:13	7	;
JUMP_STATEMENT	47:2	47:14	6	return FALSE ;
KEYWORD	47:2	47:2	7	return
LEAF_NODE	47:2	47:2	8	return
DESTINATION	47:9	47:9	7	FALSE
EXPR	47:9	47:9	8	FALSE
FIELD	47:9	47:9	9	FALSE
LEAF_NODE	47:9	47:9	10	FALSE
LEAF_NODE	47:14	47:14	7	;
LEAF_NODE	48:1	48:1	5	}
EXPR_STATEMENT	49:1	49:12	3	g_free ( buf ) ;
EXPR	49:1	49:1	4	g_free ( buf )
FUNCTION_CALL	49:1	49:11	5	g_free ( buf )
CALLEE	49:1	49:1	6	g_free
LEAF_NODE	49:1	49:1	7	g_free
LEAF_NODE	49:7	49:7	6	(
ARGUMENT	49:8	49:8	6	buf
FIELD	49:8	49:8	7	buf
LEAF_NODE	49:8	49:8	8	buf
LEAF_NODE	49:11	49:11	6	)
LEAF_NODE	49:12	49:12	4	;
EXPR_STATEMENT	50:1	50:50	3	nickname = purple_connection_get_display_name ( gc ) ;
EXPR	50:1	50:1	4	nickname = purple_connection_get_display_name ( gc )
ASSIGN	50:1	50:12	5	nickname = purple_connection_get_display_name ( gc )
LVAL	50:1	50:1	6	nickname
FIELD	50:1	50:1	7	nickname
LEAF_NODE	50:1	50:1	8	nickname
ASSIGN_OP	50:10	50:10	6	=
LEAF_NODE	50:10	50:10	7	=
RVAL	50:12	50:12	6	purple_connection_get_display_name ( gc )
FUNCTION_CALL	50:12	50:49	7	purple_connection_get_display_name ( gc )
CALLEE	50:12	50:12	8	purple_connection_get_display_name
LEAF_NODE	50:12	50:12	9	purple_connection_get_display_name
LEAF_NODE	50:46	50:46	8	(
ARGUMENT	50:47	50:47	8	gc
FIELD	50:47	50:47	9	gc
LEAF_NODE	50:47	50:47	10	gc
LEAF_NODE	50:49	50:49	8	)
LEAF_NODE	50:50	50:50	4	;
EXPR_STATEMENT	51:1	51:46	3	buf = irc_format ( irc , "vn" , "NICK" , nickname ) ;
EXPR	51:1	51:1	4	buf = irc_format ( irc , "vn" , "NICK" , nickname )
ASSIGN	51:1	51:7	5	buf = irc_format ( irc , "vn" , "NICK" , nickname )
LVAL	51:1	51:1	6	buf
FIELD	51:1	51:1	7	buf
LEAF_NODE	51:1	51:1	8	buf
ASSIGN_OP	51:5	51:5	6	=
LEAF_NODE	51:5	51:5	7	=
RVAL	51:7	51:7	6	irc_format ( irc , "vn" , "NICK" , nickname )
FUNCTION_CALL	51:7	51:45	7	irc_format ( irc , "vn" , "NICK" , nickname )
CALLEE	51:7	51:7	8	irc_format
LEAF_NODE	51:7	51:7	9	irc_format
LEAF_NODE	51:17	51:17	8	(
ARGUMENT	51:18	51:18	8	irc
FIELD	51:18	51:18	9	irc
LEAF_NODE	51:18	51:18	10	irc
LEAF_NODE	51:21	51:21	8	,
ARGUMENT	51:23	51:23	8	"vn"
FIELD	51:23	51:23	9	"vn"
LEAF_NODE	51:23	51:23	10	"vn"
LEAF_NODE	51:27	51:27	8	,
ARGUMENT	51:29	51:29	8	"NICK"
FIELD	51:29	51:29	9	"NICK"
LEAF_NODE	51:29	51:29	10	"NICK"
LEAF_NODE	51:35	51:35	8	,
ARGUMENT	51:37	51:37	8	nickname
FIELD	51:37	51:37	9	nickname
LEAF_NODE	51:37	51:37	10	nickname
LEAF_NODE	51:45	51:45	8	)
LEAF_NODE	51:46	51:46	4	;
EXPR_STATEMENT	52:1	52:34	3	irc -> reqnick = g_strdup ( nickname ) ;
EXPR	52:1	52:1	4	irc -> reqnick = g_strdup ( nickname )
ASSIGN	52:1	52:16	5	irc -> reqnick = g_strdup ( nickname )
LVAL	52:1	52:1	6	irc -> reqnick
FIELD	52:1	52:6	7	irc -> reqnick
LEAF_NODE	52:1	52:1	8	irc
LEAF_NODE	52:4	52:4	8	->
LEAF_NODE	52:6	52:6	8	reqnick
ASSIGN_OP	52:14	52:14	6	=
LEAF_NODE	52:14	52:14	7	=
RVAL	52:16	52:16	6	g_strdup ( nickname )
FUNCTION_CALL	52:16	52:33	7	g_strdup ( nickname )
CALLEE	52:16	52:16	8	g_strdup
LEAF_NODE	52:16	52:16	9	g_strdup
LEAF_NODE	52:24	52:24	8	(
ARGUMENT	52:25	52:25	8	nickname
FIELD	52:25	52:25	9	nickname
LEAF_NODE	52:25	52:25	10	nickname
LEAF_NODE	52:33	52:33	8	)
LEAF_NODE	52:34	52:34	4	;
EXPR_STATEMENT	53:1	53:22	3	irc -> nickused = FALSE ;
EXPR	53:1	53:1	4	irc -> nickused = FALSE
ASSIGN	53:1	53:17	5	irc -> nickused = FALSE
LVAL	53:1	53:1	6	irc -> nickused
FIELD	53:1	53:6	7	irc -> nickused
LEAF_NODE	53:1	53:1	8	irc
LEAF_NODE	53:4	53:4	8	->
LEAF_NODE	53:6	53:6	8	nickused
ASSIGN_OP	53:15	53:15	6	=
LEAF_NODE	53:15	53:15	7	=
RVAL	53:17	53:17	6	FALSE
FIELD	53:17	53:17	7	FALSE
LEAF_NODE	53:17	53:17	8	FALSE
LEAF_NODE	53:22	53:22	4	;
SELECTION	54:1	54:29	3	
KEYWORD	54:1	54:1	4	if
LEAF_NODE	54:1	54:1	5	if
LEAF_NODE	54:4	54:4	4	(
CONDITION	54:5	54:5	4	irc_send ( irc , buf ) < 0
EXPR	54:5	54:26	5	irc_send ( irc , buf ) < 0
FUNCTION_CALL	54:5	54:22	6	irc_send ( irc , buf )
CALLEE	54:5	54:5	7	irc_send
LEAF_NODE	54:5	54:5	8	irc_send
LEAF_NODE	54:13	54:13	7	(
ARGUMENT	54:14	54:14	7	irc
FIELD	54:14	54:14	8	irc
LEAF_NODE	54:14	54:14	9	irc
LEAF_NODE	54:17	54:17	7	,
ARGUMENT	54:19	54:19	7	buf
FIELD	54:19	54:19	8	buf
LEAF_NODE	54:19	54:19	9	buf
LEAF_NODE	54:22	54:22	7	)
REL_OPERATOR	54:24	54:24	6	<
LEAF_NODE	54:24	54:24	7	<
FIELD	54:26	54:26	6	0
LEAF_NODE	54:26	54:26	7	0
LEAF_NODE	54:27	54:27	4	)
STATEMENTS	54:29	57:1	4	
LEAF_NODE	54:29	54:29	5	{
STATEMENTS	55:2	56:2	5	
EXPR_STATEMENT	55:2	55:13	6	g_free ( buf ) ;
EXPR	55:2	55:2	7	g_free ( buf )
FUNCTION_CALL	55:2	55:12	8	g_free ( buf )
CALLEE	55:2	55:2	9	g_free
LEAF_NODE	55:2	55:2	10	g_free
LEAF_NODE	55:8	55:8	9	(
ARGUMENT	55:9	55:9	9	buf
FIELD	55:9	55:9	10	buf
LEAF_NODE	55:9	55:9	11	buf
LEAF_NODE	55:12	55:12	9	)
LEAF_NODE	55:13	55:13	7	;
JUMP_STATEMENT	56:2	56:14	6	return FALSE ;
KEYWORD	56:2	56:2	7	return
LEAF_NODE	56:2	56:2	8	return
DESTINATION	56:9	56:9	7	FALSE
EXPR	56:9	56:9	8	FALSE
FIELD	56:9	56:9	9	FALSE
LEAF_NODE	56:9	56:9	10	FALSE
LEAF_NODE	56:14	56:14	7	;
LEAF_NODE	57:1	57:1	5	}
EXPR_STATEMENT	58:1	58:12	3	g_free ( buf ) ;
EXPR	58:1	58:1	4	g_free ( buf )
FUNCTION_CALL	58:1	58:11	5	g_free ( buf )
CALLEE	58:1	58:1	6	g_free
LEAF_NODE	58:1	58:1	7	g_free
LEAF_NODE	58:7	58:7	6	(
ARGUMENT	58:8	58:8	6	buf
FIELD	58:8	58:8	7	buf
LEAF_NODE	58:8	58:8	8	buf
LEAF_NODE	58:11	58:11	6	)
LEAF_NODE	58:12	58:12	4	;
EXPR_STATEMENT	59:1	59:28	3	irc -> recv_time = time ( NULL ) ;
EXPR	59:1	59:1	4	irc -> recv_time = time ( NULL )
ASSIGN	59:1	59:18	5	irc -> recv_time = time ( NULL )
LVAL	59:1	59:1	6	irc -> recv_time
FIELD	59:1	59:6	7	irc -> recv_time
LEAF_NODE	59:1	59:1	8	irc
LEAF_NODE	59:4	59:4	8	->
LEAF_NODE	59:6	59:6	8	recv_time
ASSIGN_OP	59:16	59:16	6	=
LEAF_NODE	59:16	59:16	7	=
RVAL	59:18	59:18	6	time ( NULL )
FUNCTION_CALL	59:18	59:27	7	time ( NULL )
CALLEE	59:18	59:18	8	time
LEAF_NODE	59:18	59:18	9	time
LEAF_NODE	59:22	59:22	8	(
ARGUMENT	59:23	59:23	8	NULL
FIELD	59:23	59:23	9	NULL
LEAF_NODE	59:23	59:23	10	NULL
LEAF_NODE	59:27	59:27	8	)
LEAF_NODE	59:28	59:28	4	;
JUMP_STATEMENT	60:1	60:12	3	return TRUE ;
KEYWORD	60:1	60:1	4	return
LEAF_NODE	60:1	60:1	5	return
DESTINATION	60:8	60:8	4	TRUE
EXPR	60:8	60:8	5	TRUE
FIELD	60:8	60:8	6	TRUE
LEAF_NODE	60:8	60:8	7	TRUE
LEAF_NODE	60:12	60:12	4	;
LEAF_NODE	61:0	61:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	13:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	flap_connection_schedule_destroy
LEAF_NODE	2:0	2:0	3	flap_connection_schedule_destroy
PARAMETER_LIST	2:32	2:111	2	( FlapConnection * conn , OscarDisconnectReason reason , const gchar * error_message )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:49	3	FlapConnection * conn
TYPE	2:33	2:48	4	FlapConnection *
TYPE_NAME	2:33	2:33	5	FlapConnection
LEAF_NODE	2:33	2:33	6	FlapConnection
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	conn
LEAF_NODE	2:49	2:49	5	conn
LEAF_NODE	2:53	2:53	3	,
PARAMETER_DECL	2:55	2:77	3	OscarDisconnectReason reason
TYPE	2:55	2:55	4	OscarDisconnectReason
TYPE_NAME	2:55	2:55	5	OscarDisconnectReason
LEAF_NODE	2:55	2:55	6	OscarDisconnectReason
NAME	2:77	2:77	4	reason
LEAF_NODE	2:77	2:77	5	reason
LEAF_NODE	2:83	2:83	3	,
PARAMETER_DECL	2:85	2:98	3	const gchar * error_message
TYPE	2:85	2:97	4	const gchar *
TYPE_NAME	2:85	2:91	5	const gchar
LEAF_NODE	2:85	2:85	6	const
LEAF_NODE	2:91	2:91	6	gchar
POINTER	2:97	2:97	5	*
LEAF_NODE	2:97	2:97	6	*
NAME	2:98	2:98	4	error_message
LEAF_NODE	2:98	2:98	5	error_message
LEAF_NODE	2:111	2:111	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	12:1	2	
SELECTION	4:1	6:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	conn -> destroy_timeout != 0
EXPR	4:5	4:30	5	conn -> destroy_timeout != 0
FIELD	4:5	4:11	6	conn -> destroy_timeout
LEAF_NODE	4:5	4:5	7	conn
LEAF_NODE	4:9	4:9	7	->
LEAF_NODE	4:11	4:11	7	destroy_timeout
EQ_OPERATOR	4:27	4:27	6	!=
LEAF_NODE	4:27	4:27	7	!=
FIELD	4:30	4:30	6	0
LEAF_NODE	4:30	4:30	7	0
LEAF_NODE	4:31	4:31	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:8	5	return DESTINATION ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	6:8	6:8	6	;
LEAF_NODE	7:1	7:1	3	purple_debug_info
LEAF_NODE	7:18	7:18	3	(
LEAF_NODE	7:19	7:19	3	"oscar"
LEAF_NODE	7:26	7:26	3	,
LEAF_NODE	7:28	7:28	3	"Scheduling destruction of FLAP "
LEAF_NODE	8:3	8:3	3	"connection %p of type 0x%04hx\n"
LEAF_NODE	8:36	8:36	3	,
LEAF_NODE	8:38	8:38	3	conn
LEAF_NODE	8:42	8:42	3	,
LEAF_NODE	8:44	8:44	3	conn
LEAF_NODE	8:48	8:48	3	->
LEAF_NODE	8:50	8:50	3	type
LEAF_NODE	8:54	8:54	3	)
LEAF_NODE	8:55	8:55	3	;
EXPR_STATEMENT	9:1	9:33	3	conn -> disconnect_reason = reason ;
EXPR	9:1	9:1	4	conn -> disconnect_reason = reason
ASSIGN	9:1	9:27	5	conn -> disconnect_reason = reason
LVAL	9:1	9:1	6	conn -> disconnect_reason
FIELD	9:1	9:7	7	conn -> disconnect_reason
LEAF_NODE	9:1	9:1	8	conn
LEAF_NODE	9:5	9:5	8	->
LEAF_NODE	9:7	9:7	8	disconnect_reason
ASSIGN_OP	9:25	9:25	6	=
LEAF_NODE	9:25	9:25	7	=
RVAL	9:27	9:27	6	reason
FIELD	9:27	9:27	7	reason
LEAF_NODE	9:27	9:27	8	reason
LEAF_NODE	9:33	9:33	4	;
EXPR_STATEMENT	10:1	10:28	3	g_free ( conn -> error_message ) ;
EXPR	10:1	10:1	4	g_free ( conn -> error_message )
FUNCTION_CALL	10:1	10:27	5	g_free ( conn -> error_message )
CALLEE	10:1	10:1	6	g_free
LEAF_NODE	10:1	10:1	7	g_free
LEAF_NODE	10:7	10:7	6	(
ARGUMENT	10:8	10:8	6	conn -> error_message
FIELD	10:8	10:14	7	conn -> error_message
LEAF_NODE	10:8	10:8	8	conn
LEAF_NODE	10:12	10:12	8	->
LEAF_NODE	10:14	10:14	8	error_message
LEAF_NODE	10:27	10:27	6	)
LEAF_NODE	10:28	10:28	4	;
EXPR_STATEMENT	11:1	11:46	3	conn -> error_message = g_strdup ( error_message ) ;
EXPR	11:1	11:1	4	conn -> error_message = g_strdup ( error_message )
ASSIGN	11:1	11:23	5	conn -> error_message = g_strdup ( error_message )
LVAL	11:1	11:1	6	conn -> error_message
FIELD	11:1	11:7	7	conn -> error_message
LEAF_NODE	11:1	11:1	8	conn
LEAF_NODE	11:5	11:5	8	->
LEAF_NODE	11:7	11:7	8	error_message
ASSIGN_OP	11:21	11:21	6	=
LEAF_NODE	11:21	11:21	7	=
RVAL	11:23	11:23	6	g_strdup ( error_message )
FUNCTION_CALL	11:23	11:45	7	g_strdup ( error_message )
CALLEE	11:23	11:23	8	g_strdup
LEAF_NODE	11:23	11:23	9	g_strdup
LEAF_NODE	11:31	11:31	8	(
ARGUMENT	11:32	11:32	8	error_message
FIELD	11:32	11:32	9	error_message
LEAF_NODE	11:32	11:32	10	error_message
LEAF_NODE	11:45	11:45	8	)
LEAF_NODE	11:46	11:46	4	;
EXPR_STATEMENT	12:1	12:80	3	conn -> destroy_timeout = purple_timeout_add ( 0 , flap_connection_destroy_cb , conn ) ;
EXPR	12:1	12:1	4	conn -> destroy_timeout = purple_timeout_add ( 0 , flap_connection_destroy_cb , conn )
ASSIGN	12:1	12:25	5	conn -> destroy_timeout = purple_timeout_add ( 0 , flap_connection_destroy_cb , conn )
LVAL	12:1	12:1	6	conn -> destroy_timeout
FIELD	12:1	12:7	7	conn -> destroy_timeout
LEAF_NODE	12:1	12:1	8	conn
LEAF_NODE	12:5	12:5	8	->
LEAF_NODE	12:7	12:7	8	destroy_timeout
ASSIGN_OP	12:23	12:23	6	=
LEAF_NODE	12:23	12:23	7	=
RVAL	12:25	12:25	6	purple_timeout_add ( 0 , flap_connection_destroy_cb , conn )
FUNCTION_CALL	12:25	12:79	7	purple_timeout_add ( 0 , flap_connection_destroy_cb , conn )
CALLEE	12:25	12:25	8	purple_timeout_add
LEAF_NODE	12:25	12:25	9	purple_timeout_add
LEAF_NODE	12:43	12:43	8	(
ARGUMENT	12:44	12:44	8	0
FIELD	12:44	12:44	9	0
LEAF_NODE	12:44	12:44	10	0
LEAF_NODE	12:45	12:45	8	,
ARGUMENT	12:47	12:47	8	flap_connection_destroy_cb
FIELD	12:47	12:47	9	flap_connection_destroy_cb
LEAF_NODE	12:47	12:47	10	flap_connection_destroy_cb
LEAF_NODE	12:73	12:73	8	,
ARGUMENT	12:75	12:75	8	conn
FIELD	12:75	12:75	9	conn
LEAF_NODE	12:75	12:75	10	conn
LEAF_NODE	12:79	12:79	8	)
LEAF_NODE	12:80	12:80	4	;
LEAF_NODE	13:0	13:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	9:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	purple_roomlist_room_add
LEAF_NODE	2:5	2:5	3	purple_roomlist_room_add
PARAMETER_LIST	2:29	2:76	2	( PurpleRoomlist * list , PurpleRoomlistRoom * room )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:46	3	PurpleRoomlist * list
TYPE	2:30	2:45	4	PurpleRoomlist *
TYPE_NAME	2:30	2:30	5	PurpleRoomlist
LEAF_NODE	2:30	2:30	6	PurpleRoomlist
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	list
LEAF_NODE	2:46	2:46	5	list
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:72	3	PurpleRoomlistRoom * room
TYPE	2:52	2:71	4	PurpleRoomlistRoom *
TYPE_NAME	2:52	2:52	5	PurpleRoomlistRoom
LEAF_NODE	2:52	2:52	6	PurpleRoomlistRoom
POINTER	2:71	2:71	5	*
LEAF_NODE	2:71	2:71	6	*
NAME	2:72	2:72	4	room
LEAF_NODE	2:72	2:72	5	room
LEAF_NODE	2:76	2:76	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
EXPR_STATEMENT	4:1	4:31	3	g_return_if_fail ( list != NULL ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( list != NULL )
FUNCTION_CALL	4:1	4:30	5	g_return_if_fail ( list != NULL )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:26	6	list != NULL
FIELD	4:18	4:18	7	list
LEAF_NODE	4:18	4:18	8	list
EQ_OPERATOR	4:23	4:23	7	!=
LEAF_NODE	4:23	4:23	8	!=
FIELD	4:26	4:26	7	NULL
LEAF_NODE	4:26	4:26	8	NULL
LEAF_NODE	4:30	4:30	6	)
LEAF_NODE	4:31	4:31	4	;
EXPR_STATEMENT	5:1	5:31	3	g_return_if_fail ( room != NULL ) ;
EXPR	5:1	5:1	4	g_return_if_fail ( room != NULL )
FUNCTION_CALL	5:1	5:30	5	g_return_if_fail ( room != NULL )
CALLEE	5:1	5:1	6	g_return_if_fail
LEAF_NODE	5:1	5:1	7	g_return_if_fail
LEAF_NODE	5:17	5:17	6	(
ARGUMENT	5:18	5:26	6	room != NULL
FIELD	5:18	5:18	7	room
LEAF_NODE	5:18	5:18	8	room
EQ_OPERATOR	5:23	5:23	7	!=
LEAF_NODE	5:23	5:23	8	!=
FIELD	5:26	5:26	7	NULL
LEAF_NODE	5:26	5:26	8	NULL
LEAF_NODE	5:30	5:30	6	)
LEAF_NODE	5:31	5:31	4	;
EXPR_STATEMENT	6:1	6:47	3	list -> rooms = g_list_append ( list -> rooms , room ) ;
EXPR	6:1	6:1	4	list -> rooms = g_list_append ( list -> rooms , room )
ASSIGN	6:1	6:15	5	list -> rooms = g_list_append ( list -> rooms , room )
LVAL	6:1	6:1	6	list -> rooms
FIELD	6:1	6:7	7	list -> rooms
LEAF_NODE	6:1	6:1	8	list
LEAF_NODE	6:5	6:5	8	->
LEAF_NODE	6:7	6:7	8	rooms
ASSIGN_OP	6:13	6:13	6	=
LEAF_NODE	6:13	6:13	7	=
RVAL	6:15	6:15	6	g_list_append ( list -> rooms , room )
FUNCTION_CALL	6:15	6:46	7	g_list_append ( list -> rooms , room )
CALLEE	6:15	6:15	8	g_list_append
LEAF_NODE	6:15	6:15	9	g_list_append
LEAF_NODE	6:28	6:28	8	(
ARGUMENT	6:29	6:29	8	list -> rooms
FIELD	6:29	6:35	9	list -> rooms
LEAF_NODE	6:29	6:29	10	list
LEAF_NODE	6:33	6:33	10	->
LEAF_NODE	6:35	6:35	10	rooms
LEAF_NODE	6:40	6:40	8	,
ARGUMENT	6:42	6:42	8	room
FIELD	6:42	6:42	9	room
LEAF_NODE	6:42	6:42	10	room
LEAF_NODE	6:46	6:46	8	)
LEAF_NODE	6:47	6:47	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	ops && ops -> add_room
EXPR	7:5	7:5	5	ops && ops -> add_room
AND	7:5	7:12	6	ops && ops -> add_room
EXPR	7:5	7:5	7	ops
FIELD	7:5	7:5	8	ops
LEAF_NODE	7:5	7:5	9	ops
LEAF_NODE	7:9	7:9	7	&&
EXPR	7:12	7:12	7	ops -> add_room
FIELD	7:12	7:17	8	ops -> add_room
LEAF_NODE	7:12	7:12	9	ops
LEAF_NODE	7:15	7:15	9	->
LEAF_NODE	7:17	7:17	9	add_room
LEAF_NODE	7:25	7:25	4	)
STATEMENTS	8:2	8:2	4	
EXPR_STATEMENT	8:2	8:27	5	ops -> add_room ( list , room ) ;
EXPR	8:2	8:2	6	ops -> add_room ( list , room )
FUNCTION_CALL	8:2	8:26	7	ops -> add_room ( list , room )
CALLEE	8:2	8:7	8	ops -> add_room
LEAF_NODE	8:2	8:2	9	ops
LEAF_NODE	8:5	8:5	9	->
LEAF_NODE	8:7	8:7	9	add_room
LEAF_NODE	8:15	8:15	8	(
ARGUMENT	8:16	8:16	8	list
FIELD	8:16	8:16	9	list
LEAF_NODE	8:16	8:16	10	list
LEAF_NODE	8:20	8:20	8	,
ARGUMENT	8:22	8:22	8	room
FIELD	8:22	8:22	9	room
LEAF_NODE	8:22	8:22	10	room
LEAF_NODE	8:26	8:26	8	)
LEAF_NODE	8:27	8:27	6	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	42:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_savedstatuses_init
LEAF_NODE	2:0	2:0	3	purple_savedstatuses_init
PARAMETER_LIST	2:25	2:30	2	( void )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:26	3	void
LEAF_NODE	2:26	2:26	4	void
LEAF_NODE	2:30	2:30	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	38:1	2	
SIMPLE_DECL	4:1	4:49	3	void * handle ; handle = purple_savedstatuses_get_handle ( ) ;
VAR_DECL	4:1	4:7	4	void * handle ; handle = purple_savedstatuses_get_handle ( )
TYPE	4:1	4:6	5	void *
TYPE_NAME	4:1	4:1	6	void
LEAF_NODE	4:1	4:1	7	void
POINTER	4:6	4:6	6	*
LEAF_NODE	4:6	4:6	7	*
NAME	4:7	4:7	5	handle
LEAF_NODE	4:7	4:7	6	handle
LEAF_NODE	0:0	0:0	5	;
INIT	4:7	4:7	5	handle = purple_savedstatuses_get_handle ( )
ASSIGN	4:7	4:16	6	handle = purple_savedstatuses_get_handle ( )
LVAL	4:7	4:7	7	handle
NAME	4:7	4:7	8	handle
LEAF_NODE	4:7	4:7	9	handle
ASSIGN_OP	4:14	4:14	7	=
LEAF_NODE	4:14	4:14	8	=
RVAL	4:16	4:16	7	purple_savedstatuses_get_handle ( )
FUNCTION_CALL	4:16	4:48	8	purple_savedstatuses_get_handle ( )
CALLEE	4:16	4:16	9	purple_savedstatuses_get_handle
LEAF_NODE	4:16	4:16	10	purple_savedstatuses_get_handle
LEAF_NODE	4:47	4:47	9	(
LEAF_NODE	4:48	4:48	9	)
LEAF_NODE	4:49	4:49	4	;
EXPR_STATEMENT	5:1	5:65	3	creation_times = g_hash_table_new ( g_direct_hash , g_direct_equal ) ;
EXPR	5:1	5:1	4	creation_times = g_hash_table_new ( g_direct_hash , g_direct_equal )
ASSIGN	5:1	5:18	5	creation_times = g_hash_table_new ( g_direct_hash , g_direct_equal )
LVAL	5:1	5:1	6	creation_times
FIELD	5:1	5:1	7	creation_times
LEAF_NODE	5:1	5:1	8	creation_times
ASSIGN_OP	5:16	5:16	6	=
LEAF_NODE	5:16	5:16	7	=
RVAL	5:18	5:18	6	g_hash_table_new ( g_direct_hash , g_direct_equal )
FUNCTION_CALL	5:18	5:64	7	g_hash_table_new ( g_direct_hash , g_direct_equal )
CALLEE	5:18	5:18	8	g_hash_table_new
LEAF_NODE	5:18	5:18	9	g_hash_table_new
LEAF_NODE	5:34	5:34	8	(
ARGUMENT	5:35	5:35	8	g_direct_hash
FIELD	5:35	5:35	9	g_direct_hash
LEAF_NODE	5:35	5:35	10	g_direct_hash
LEAF_NODE	5:48	5:48	8	,
ARGUMENT	5:50	5:50	8	g_direct_equal
FIELD	5:50	5:50	9	g_direct_equal
LEAF_NODE	5:50	5:50	10	g_direct_equal
LEAF_NODE	5:64	5:64	8	)
LEAF_NODE	5:65	5:65	4	;
EXPR_STATEMENT	13:1	13:45	3	purple_prefs_add_none ( "/purple/savedstatus" ) ;
EXPR	13:1	13:1	4	purple_prefs_add_none ( "/purple/savedstatus" )
FUNCTION_CALL	13:1	13:44	5	purple_prefs_add_none ( "/purple/savedstatus" )
CALLEE	13:1	13:1	6	purple_prefs_add_none
LEAF_NODE	13:1	13:1	7	purple_prefs_add_none
LEAF_NODE	13:22	13:22	6	(
ARGUMENT	13:23	13:23	6	"/purple/savedstatus"
FIELD	13:23	13:23	7	"/purple/savedstatus"
LEAF_NODE	13:23	13:23	8	"/purple/savedstatus"
LEAF_NODE	13:44	13:44	6	)
LEAF_NODE	13:45	13:45	4	;
EXPR_STATEMENT	14:1	14:55	3	purple_prefs_add_int ( "/purple/savedstatus/default" , 0 ) ;
EXPR	14:1	14:1	4	purple_prefs_add_int ( "/purple/savedstatus/default" , 0 )
FUNCTION_CALL	14:1	14:54	5	purple_prefs_add_int ( "/purple/savedstatus/default" , 0 )
CALLEE	14:1	14:1	6	purple_prefs_add_int
LEAF_NODE	14:1	14:1	7	purple_prefs_add_int
LEAF_NODE	14:21	14:21	6	(
ARGUMENT	14:22	14:22	6	"/purple/savedstatus/default"
FIELD	14:22	14:22	7	"/purple/savedstatus/default"
LEAF_NODE	14:22	14:22	8	"/purple/savedstatus/default"
LEAF_NODE	14:51	14:51	6	,
ARGUMENT	14:53	14:53	6	0
FIELD	14:53	14:53	7	0
LEAF_NODE	14:53	14:53	8	0
LEAF_NODE	14:54	14:54	6	)
LEAF_NODE	14:55	14:55	4	;
EXPR_STATEMENT	15:1	15:55	3	purple_prefs_add_int ( "/purple/savedstatus/startup" , 0 ) ;
EXPR	15:1	15:1	4	purple_prefs_add_int ( "/purple/savedstatus/startup" , 0 )
FUNCTION_CALL	15:1	15:54	5	purple_prefs_add_int ( "/purple/savedstatus/startup" , 0 )
CALLEE	15:1	15:1	6	purple_prefs_add_int
LEAF_NODE	15:1	15:1	7	purple_prefs_add_int
LEAF_NODE	15:21	15:21	6	(
ARGUMENT	15:22	15:22	6	"/purple/savedstatus/startup"
FIELD	15:22	15:22	7	"/purple/savedstatus/startup"
LEAF_NODE	15:22	15:22	8	"/purple/savedstatus/startup"
LEAF_NODE	15:51	15:51	6	,
ARGUMENT	15:53	15:53	6	0
FIELD	15:53	15:53	7	0
LEAF_NODE	15:53	15:53	8	0
LEAF_NODE	15:54	15:54	6	)
LEAF_NODE	15:55	15:55	4	;
EXPR_STATEMENT	16:1	16:74	3	purple_prefs_add_bool ( "/purple/savedstatus/startup_current_status" , TRUE ) ;
EXPR	16:1	16:1	4	purple_prefs_add_bool ( "/purple/savedstatus/startup_current_status" , TRUE )
FUNCTION_CALL	16:1	16:73	5	purple_prefs_add_bool ( "/purple/savedstatus/startup_current_status" , TRUE )
CALLEE	16:1	16:1	6	purple_prefs_add_bool
LEAF_NODE	16:1	16:1	7	purple_prefs_add_bool
LEAF_NODE	16:22	16:22	6	(
ARGUMENT	16:23	16:23	6	"/purple/savedstatus/startup_current_status"
FIELD	16:23	16:23	7	"/purple/savedstatus/startup_current_status"
LEAF_NODE	16:23	16:23	8	"/purple/savedstatus/startup_current_status"
LEAF_NODE	16:67	16:67	6	,
ARGUMENT	16:69	16:69	6	TRUE
FIELD	16:69	16:69	7	TRUE
LEAF_NODE	16:69	16:69	8	TRUE
LEAF_NODE	16:73	16:73	6	)
LEAF_NODE	16:74	16:74	4	;
EXPR_STATEMENT	17:1	17:56	3	purple_prefs_add_int ( "/purple/savedstatus/idleaway" , 0 ) ;
EXPR	17:1	17:1	4	purple_prefs_add_int ( "/purple/savedstatus/idleaway" , 0 )
FUNCTION_CALL	17:1	17:55	5	purple_prefs_add_int ( "/purple/savedstatus/idleaway" , 0 )
CALLEE	17:1	17:1	6	purple_prefs_add_int
LEAF_NODE	17:1	17:1	7	purple_prefs_add_int
LEAF_NODE	17:21	17:21	6	(
ARGUMENT	17:22	17:22	6	"/purple/savedstatus/idleaway"
FIELD	17:22	17:22	7	"/purple/savedstatus/idleaway"
LEAF_NODE	17:22	17:22	8	"/purple/savedstatus/idleaway"
LEAF_NODE	17:52	17:52	6	,
ARGUMENT	17:54	17:54	6	0
FIELD	17:54	17:54	7	0
LEAF_NODE	17:54	17:54	8	0
LEAF_NODE	17:55	17:55	6	)
LEAF_NODE	17:56	17:56	4	;
EXPR_STATEMENT	18:1	18:63	3	purple_prefs_add_bool ( "/purple/savedstatus/isidleaway" , FALSE ) ;
EXPR	18:1	18:1	4	purple_prefs_add_bool ( "/purple/savedstatus/isidleaway" , FALSE )
FUNCTION_CALL	18:1	18:62	5	purple_prefs_add_bool ( "/purple/savedstatus/isidleaway" , FALSE )
CALLEE	18:1	18:1	6	purple_prefs_add_bool
LEAF_NODE	18:1	18:1	7	purple_prefs_add_bool
LEAF_NODE	18:22	18:22	6	(
ARGUMENT	18:23	18:23	6	"/purple/savedstatus/isidleaway"
FIELD	18:23	18:23	7	"/purple/savedstatus/isidleaway"
LEAF_NODE	18:23	18:23	8	"/purple/savedstatus/isidleaway"
LEAF_NODE	18:55	18:55	6	,
ARGUMENT	18:57	18:57	6	FALSE
FIELD	18:57	18:57	7	FALSE
LEAF_NODE	18:57	18:57	8	FALSE
LEAF_NODE	18:62	18:62	6	)
LEAF_NODE	18:63	18:63	4	;
EXPR_STATEMENT	19:1	19:16	3	load_statuses ( ) ;
EXPR	19:1	19:1	4	load_statuses ( )
FUNCTION_CALL	19:1	19:15	5	load_statuses ( )
CALLEE	19:1	19:1	6	load_statuses
LEAF_NODE	19:1	19:1	7	load_statuses
LEAF_NODE	19:14	19:14	6	(
LEAF_NODE	19:15	19:15	6	)
LEAF_NODE	19:16	19:16	4	;
EXPR_STATEMENT	20:1	25:37	3	purple_signal_register ( handle , "savedstatus-changed" , purple_marshal_VOID__POINTER_POINTER , NULL , 2 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) ) ;
EXPR	20:1	20:1	4	purple_signal_register ( handle , "savedstatus-changed" , purple_marshal_VOID__POINTER_POINTER , NULL , 2 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) )
FUNCTION_CALL	20:1	25:36	5	purple_signal_register ( handle , "savedstatus-changed" , purple_marshal_VOID__POINTER_POINTER , NULL , 2 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) )
CALLEE	20:1	20:1	6	purple_signal_register
LEAF_NODE	20:1	20:1	7	purple_signal_register
LEAF_NODE	20:23	20:23	6	(
ARGUMENT	20:24	20:24	6	handle
FIELD	20:24	20:24	7	handle
LEAF_NODE	20:24	20:24	8	handle
LEAF_NODE	20:30	20:30	6	,
ARGUMENT	20:32	20:32	6	"savedstatus-changed"
FIELD	20:32	20:32	7	"savedstatus-changed"
LEAF_NODE	20:32	20:32	8	"savedstatus-changed"
LEAF_NODE	20:53	20:53	6	,
ARGUMENT	21:6	21:6	6	purple_marshal_VOID__POINTER_POINTER
FIELD	21:6	21:6	7	purple_marshal_VOID__POINTER_POINTER
LEAF_NODE	21:6	21:6	8	purple_marshal_VOID__POINTER_POINTER
LEAF_NODE	21:42	21:42	6	,
ARGUMENT	21:44	21:44	6	NULL
FIELD	21:44	21:44	7	NULL
LEAF_NODE	21:44	21:44	8	NULL
LEAF_NODE	21:48	21:48	6	,
ARGUMENT	21:50	21:50	6	2
FIELD	21:50	21:50	7	2
LEAF_NODE	21:50	21:50	8	2
LEAF_NODE	21:51	21:51	6	,
ARGUMENT	22:6	22:6	6	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS )
FUNCTION_CALL	22:6	23:35	7	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS )
CALLEE	22:6	22:6	8	purple_value_new
LEAF_NODE	22:6	22:6	9	purple_value_new
LEAF_NODE	22:22	22:22	8	(
ARGUMENT	22:23	22:23	8	PURPLE_TYPE_SUBTYPE
FIELD	22:23	22:23	9	PURPLE_TYPE_SUBTYPE
LEAF_NODE	22:23	22:23	10	PURPLE_TYPE_SUBTYPE
LEAF_NODE	22:42	22:42	8	,
ARGUMENT	23:9	23:9	8	PURPLE_SUBTYPE_SAVEDSTATUS
FIELD	23:9	23:9	9	PURPLE_SUBTYPE_SAVEDSTATUS
LEAF_NODE	23:9	23:9	10	PURPLE_SUBTYPE_SAVEDSTATUS
LEAF_NODE	23:35	23:35	8	)
LEAF_NODE	23:36	23:36	6	,
ARGUMENT	24:6	24:6	6	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS )
FUNCTION_CALL	24:6	25:35	7	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS )
CALLEE	24:6	24:6	8	purple_value_new
LEAF_NODE	24:6	24:6	9	purple_value_new
LEAF_NODE	24:22	24:22	8	(
ARGUMENT	24:23	24:23	8	PURPLE_TYPE_SUBTYPE
FIELD	24:23	24:23	9	PURPLE_TYPE_SUBTYPE
LEAF_NODE	24:23	24:23	10	PURPLE_TYPE_SUBTYPE
LEAF_NODE	24:42	24:42	8	,
ARGUMENT	25:9	25:9	8	PURPLE_SUBTYPE_SAVEDSTATUS
FIELD	25:9	25:9	9	PURPLE_SUBTYPE_SAVEDSTATUS
LEAF_NODE	25:9	25:9	10	PURPLE_SUBTYPE_SAVEDSTATUS
LEAF_NODE	25:35	25:35	8	)
LEAF_NODE	25:36	25:36	6	)
LEAF_NODE	25:37	25:37	4	;
EXPR_STATEMENT	26:1	29:31	3	purple_signal_register ( handle , "savedstatus-added" , purple_marshal_VOID__POINTER , NULL , 1 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) ) ;
EXPR	26:1	26:1	4	purple_signal_register ( handle , "savedstatus-added" , purple_marshal_VOID__POINTER , NULL , 1 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) )
FUNCTION_CALL	26:1	29:30	5	purple_signal_register ( handle , "savedstatus-added" , purple_marshal_VOID__POINTER , NULL , 1 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) )
CALLEE	26:1	26:1	6	purple_signal_register
LEAF_NODE	26:1	26:1	7	purple_signal_register
LEAF_NODE	26:23	26:23	6	(
ARGUMENT	26:24	26:24	6	handle
FIELD	26:24	26:24	7	handle
LEAF_NODE	26:24	26:24	8	handle
LEAF_NODE	26:30	26:30	6	,
ARGUMENT	26:32	26:32	6	"savedstatus-added"
FIELD	26:32	26:32	7	"savedstatus-added"
LEAF_NODE	26:32	26:32	8	"savedstatus-added"
LEAF_NODE	26:51	26:51	6	,
ARGUMENT	27:2	27:2	6	purple_marshal_VOID__POINTER
FIELD	27:2	27:2	7	purple_marshal_VOID__POINTER
LEAF_NODE	27:2	27:2	8	purple_marshal_VOID__POINTER
LEAF_NODE	27:30	27:30	6	,
ARGUMENT	27:32	27:32	6	NULL
FIELD	27:32	27:32	7	NULL
LEAF_NODE	27:32	27:32	8	NULL
LEAF_NODE	27:36	27:36	6	,
ARGUMENT	27:38	27:38	6	1
FIELD	27:38	27:38	7	1
LEAF_NODE	27:38	27:38	8	1
LEAF_NODE	27:39	27:39	6	,
ARGUMENT	28:2	28:2	6	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS )
FUNCTION_CALL	28:2	29:29	7	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS )
CALLEE	28:2	28:2	8	purple_value_new
LEAF_NODE	28:2	28:2	9	purple_value_new
LEAF_NODE	28:18	28:18	8	(
ARGUMENT	28:19	28:19	8	PURPLE_TYPE_SUBTYPE
FIELD	28:19	28:19	9	PURPLE_TYPE_SUBTYPE
LEAF_NODE	28:19	28:19	10	PURPLE_TYPE_SUBTYPE
LEAF_NODE	28:38	28:38	8	,
ARGUMENT	29:3	29:3	8	PURPLE_SUBTYPE_SAVEDSTATUS
FIELD	29:3	29:3	9	PURPLE_SUBTYPE_SAVEDSTATUS
LEAF_NODE	29:3	29:3	10	PURPLE_SUBTYPE_SAVEDSTATUS
LEAF_NODE	29:29	29:29	8	)
LEAF_NODE	29:30	29:30	6	)
LEAF_NODE	29:31	29:31	4	;
EXPR_STATEMENT	30:1	33:31	3	purple_signal_register ( handle , "savedstatus-deleted" , purple_marshal_VOID__POINTER , NULL , 1 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) ) ;
EXPR	30:1	30:1	4	purple_signal_register ( handle , "savedstatus-deleted" , purple_marshal_VOID__POINTER , NULL , 1 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) )
FUNCTION_CALL	30:1	33:30	5	purple_signal_register ( handle , "savedstatus-deleted" , purple_marshal_VOID__POINTER , NULL , 1 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) )
CALLEE	30:1	30:1	6	purple_signal_register
LEAF_NODE	30:1	30:1	7	purple_signal_register
LEAF_NODE	30:23	30:23	6	(
ARGUMENT	30:24	30:24	6	handle
FIELD	30:24	30:24	7	handle
LEAF_NODE	30:24	30:24	8	handle
LEAF_NODE	30:30	30:30	6	,
ARGUMENT	30:32	30:32	6	"savedstatus-deleted"
FIELD	30:32	30:32	7	"savedstatus-deleted"
LEAF_NODE	30:32	30:32	8	"savedstatus-deleted"
LEAF_NODE	30:53	30:53	6	,
ARGUMENT	31:2	31:2	6	purple_marshal_VOID__POINTER
FIELD	31:2	31:2	7	purple_marshal_VOID__POINTER
LEAF_NODE	31:2	31:2	8	purple_marshal_VOID__POINTER
LEAF_NODE	31:30	31:30	6	,
ARGUMENT	31:32	31:32	6	NULL
FIELD	31:32	31:32	7	NULL
LEAF_NODE	31:32	31:32	8	NULL
LEAF_NODE	31:36	31:36	6	,
ARGUMENT	31:38	31:38	6	1
FIELD	31:38	31:38	7	1
LEAF_NODE	31:38	31:38	8	1
LEAF_NODE	31:39	31:39	6	,
ARGUMENT	32:2	32:2	6	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS )
FUNCTION_CALL	32:2	33:29	7	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS )
CALLEE	32:2	32:2	8	purple_value_new
LEAF_NODE	32:2	32:2	9	purple_value_new
LEAF_NODE	32:18	32:18	8	(
ARGUMENT	32:19	32:19	8	PURPLE_TYPE_SUBTYPE
FIELD	32:19	32:19	9	PURPLE_TYPE_SUBTYPE
LEAF_NODE	32:19	32:19	10	PURPLE_TYPE_SUBTYPE
LEAF_NODE	32:38	32:38	8	,
ARGUMENT	33:3	33:3	8	PURPLE_SUBTYPE_SAVEDSTATUS
FIELD	33:3	33:3	9	PURPLE_SUBTYPE_SAVEDSTATUS
LEAF_NODE	33:3	33:3	10	PURPLE_SUBTYPE_SAVEDSTATUS
LEAF_NODE	33:29	33:29	8	)
LEAF_NODE	33:30	33:30	6	)
LEAF_NODE	33:31	33:31	4	;
EXPR_STATEMENT	34:1	37:31	3	purple_signal_register ( handle , "savedstatus-modified" , purple_marshal_VOID__POINTER , NULL , 1 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) ) ;
EXPR	34:1	34:1	4	purple_signal_register ( handle , "savedstatus-modified" , purple_marshal_VOID__POINTER , NULL , 1 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) )
FUNCTION_CALL	34:1	37:30	5	purple_signal_register ( handle , "savedstatus-modified" , purple_marshal_VOID__POINTER , NULL , 1 , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS ) )
CALLEE	34:1	34:1	6	purple_signal_register
LEAF_NODE	34:1	34:1	7	purple_signal_register
LEAF_NODE	34:23	34:23	6	(
ARGUMENT	34:24	34:24	6	handle
FIELD	34:24	34:24	7	handle
LEAF_NODE	34:24	34:24	8	handle
LEAF_NODE	34:30	34:30	6	,
ARGUMENT	34:32	34:32	6	"savedstatus-modified"
FIELD	34:32	34:32	7	"savedstatus-modified"
LEAF_NODE	34:32	34:32	8	"savedstatus-modified"
LEAF_NODE	34:54	34:54	6	,
ARGUMENT	35:2	35:2	6	purple_marshal_VOID__POINTER
FIELD	35:2	35:2	7	purple_marshal_VOID__POINTER
LEAF_NODE	35:2	35:2	8	purple_marshal_VOID__POINTER
LEAF_NODE	35:30	35:30	6	,
ARGUMENT	35:32	35:32	6	NULL
FIELD	35:32	35:32	7	NULL
LEAF_NODE	35:32	35:32	8	NULL
LEAF_NODE	35:36	35:36	6	,
ARGUMENT	35:38	35:38	6	1
FIELD	35:38	35:38	7	1
LEAF_NODE	35:38	35:38	8	1
LEAF_NODE	35:39	35:39	6	,
ARGUMENT	36:2	36:2	6	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS )
FUNCTION_CALL	36:2	37:29	7	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_SAVEDSTATUS )
CALLEE	36:2	36:2	8	purple_value_new
LEAF_NODE	36:2	36:2	9	purple_value_new
LEAF_NODE	36:18	36:18	8	(
ARGUMENT	36:19	36:19	8	PURPLE_TYPE_SUBTYPE
FIELD	36:19	36:19	9	PURPLE_TYPE_SUBTYPE
LEAF_NODE	36:19	36:19	10	PURPLE_TYPE_SUBTYPE
LEAF_NODE	36:38	36:38	8	,
ARGUMENT	37:3	37:3	8	PURPLE_SUBTYPE_SAVEDSTATUS
FIELD	37:3	37:3	9	PURPLE_SUBTYPE_SAVEDSTATUS
LEAF_NODE	37:3	37:3	10	PURPLE_SUBTYPE_SAVEDSTATUS
LEAF_NODE	37:29	37:29	8	)
LEAF_NODE	37:30	37:30	6	)
LEAF_NODE	37:31	37:31	4	;
EXPR_STATEMENT	38:1	41:8	3	purple_signal_connect ( purple_accounts_get_handle ( ) , "account-removed" , handle , PURPLE_CALLBACK ( purple_savedstatus_unset_all_substatuses ) , NULL ) ;
EXPR	38:1	38:1	4	purple_signal_connect ( purple_accounts_get_handle ( ) , "account-removed" , handle , PURPLE_CALLBACK ( purple_savedstatus_unset_all_substatuses ) , NULL )
FUNCTION_CALL	38:1	41:7	5	purple_signal_connect ( purple_accounts_get_handle ( ) , "account-removed" , handle , PURPLE_CALLBACK ( purple_savedstatus_unset_all_substatuses ) , NULL )
CALLEE	38:1	38:1	6	purple_signal_connect
LEAF_NODE	38:1	38:1	7	purple_signal_connect
LEAF_NODE	38:22	38:22	6	(
ARGUMENT	38:23	38:23	6	purple_accounts_get_handle ( )
FUNCTION_CALL	38:23	38:50	7	purple_accounts_get_handle ( )
CALLEE	38:23	38:23	8	purple_accounts_get_handle
LEAF_NODE	38:23	38:23	9	purple_accounts_get_handle
LEAF_NODE	38:49	38:49	8	(
LEAF_NODE	38:50	38:50	8	)
LEAF_NODE	38:51	38:51	6	,
ARGUMENT	38:53	38:53	6	"account-removed"
FIELD	38:53	38:53	7	"account-removed"
LEAF_NODE	38:53	38:53	8	"account-removed"
LEAF_NODE	38:70	38:70	6	,
ARGUMENT	39:3	39:3	6	handle
FIELD	39:3	39:3	7	handle
LEAF_NODE	39:3	39:3	8	handle
LEAF_NODE	39:9	39:9	6	,
ARGUMENT	40:3	40:3	6	PURPLE_CALLBACK ( purple_savedstatus_unset_all_substatuses )
FUNCTION_CALL	40:3	40:59	7	PURPLE_CALLBACK ( purple_savedstatus_unset_all_substatuses )
CALLEE	40:3	40:3	8	PURPLE_CALLBACK
LEAF_NODE	40:3	40:3	9	PURPLE_CALLBACK
LEAF_NODE	40:18	40:18	8	(
ARGUMENT	40:19	40:19	8	purple_savedstatus_unset_all_substatuses
FIELD	40:19	40:19	9	purple_savedstatus_unset_all_substatuses
LEAF_NODE	40:19	40:19	10	purple_savedstatus_unset_all_substatuses
LEAF_NODE	40:59	40:59	8	)
LEAF_NODE	40:60	40:60	6	,
ARGUMENT	41:3	41:3	6	NULL
FIELD	41:3	41:3	7	NULL
LEAF_NODE	41:3	41:3	8	NULL
LEAF_NODE	41:7	41:7	6	)
LEAF_NODE	41:8	41:8	4	;
LEAF_NODE	42:0	42:0	2	}

LEAF_NODE	0:0	0:0	0	SOURCE_FILE

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	12:0	1	
RETURN_TYPE	2:0	2:5	2	char *
TYPE_NAME	2:0	2:0	3	char
LEAF_NODE	2:0	2:0	4	char
LEAF_NODE	2:5	2:5	3	*
FUNCTION_NAME	2:6	2:6	2	aim_ssi_getcomment
LEAF_NODE	2:6	2:6	3	aim_ssi_getcomment
PARAMETER_LIST	2:24	2:82	2	( struct aim_ssi_item * list , const char * gn , const char * bn )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:46	3	struct aim_ssi_item * list
TYPE	2:25	2:45	4	struct aim_ssi_item *
TYPE_NAME	2:25	2:32	5	struct aim_ssi_item
LEAF_NODE	2:25	2:25	6	struct
LEAF_NODE	2:32	2:32	6	aim_ssi_item
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	list
LEAF_NODE	2:46	2:46	5	list
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:64	3	const char * gn
TYPE	2:52	2:63	4	const char *
TYPE_NAME	2:52	2:58	5	const char
LEAF_NODE	2:52	2:52	6	const
LEAF_NODE	2:58	2:58	6	char
POINTER	2:63	2:63	5	*
LEAF_NODE	2:63	2:63	6	*
NAME	2:64	2:64	4	gn
LEAF_NODE	2:64	2:64	5	gn
LEAF_NODE	2:66	2:66	3	,
PARAMETER_DECL	2:68	2:80	3	const char * bn
TYPE	2:68	2:79	4	const char *
TYPE_NAME	2:68	2:74	5	const char
LEAF_NODE	2:68	2:68	6	const
LEAF_NODE	2:74	2:74	6	char
POINTER	2:79	2:79	5	*
LEAF_NODE	2:79	2:79	6	*
NAME	2:80	2:80	4	bn
LEAF_NODE	2:80	2:80	5	bn
LEAF_NODE	2:82	2:82	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	11:1	2	
SIMPLE_DECL	4:1	4:87	3	struct aim_ssi_item * cur ; cur = aim_ssi_itemlist_finditem ( list , gn , bn , AIM_SSI_TYPE_BUDDY ) ;
VAR_DECL	4:1	4:22	4	struct aim_ssi_item * cur ; cur = aim_ssi_itemlist_finditem ( list , gn , bn , AIM_SSI_TYPE_BUDDY )
TYPE	4:1	4:21	5	struct aim_ssi_item *
TYPE_NAME	4:1	4:8	6	struct aim_ssi_item
LEAF_NODE	4:1	4:1	7	struct
LEAF_NODE	4:8	4:8	7	aim_ssi_item
POINTER	4:21	4:21	6	*
LEAF_NODE	4:21	4:21	7	*
NAME	4:22	4:22	5	cur
LEAF_NODE	4:22	4:22	6	cur
LEAF_NODE	0:0	0:0	5	;
INIT	4:22	4:22	5	cur = aim_ssi_itemlist_finditem ( list , gn , bn , AIM_SSI_TYPE_BUDDY )
ASSIGN	4:22	4:28	6	cur = aim_ssi_itemlist_finditem ( list , gn , bn , AIM_SSI_TYPE_BUDDY )
LVAL	4:22	4:22	7	cur
NAME	4:22	4:22	8	cur
LEAF_NODE	4:22	4:22	9	cur
ASSIGN_OP	4:26	4:26	7	=
LEAF_NODE	4:26	4:26	8	=
RVAL	4:28	4:28	7	aim_ssi_itemlist_finditem ( list , gn , bn , AIM_SSI_TYPE_BUDDY )
FUNCTION_CALL	4:28	4:86	8	aim_ssi_itemlist_finditem ( list , gn , bn , AIM_SSI_TYPE_BUDDY )
CALLEE	4:28	4:28	9	aim_ssi_itemlist_finditem
LEAF_NODE	4:28	4:28	10	aim_ssi_itemlist_finditem
LEAF_NODE	4:53	4:53	9	(
ARGUMENT	4:54	4:54	9	list
FIELD	4:54	4:54	10	list
LEAF_NODE	4:54	4:54	11	list
LEAF_NODE	4:58	4:58	9	,
ARGUMENT	4:60	4:60	9	gn
FIELD	4:60	4:60	10	gn
LEAF_NODE	4:60	4:60	11	gn
LEAF_NODE	4:62	4:62	9	,
ARGUMENT	4:64	4:64	9	bn
FIELD	4:64	4:64	10	bn
LEAF_NODE	4:64	4:64	11	bn
LEAF_NODE	4:66	4:66	9	,
ARGUMENT	4:68	4:68	9	AIM_SSI_TYPE_BUDDY
FIELD	4:68	4:68	10	AIM_SSI_TYPE_BUDDY
LEAF_NODE	4:68	4:68	11	AIM_SSI_TYPE_BUDDY
LEAF_NODE	4:86	4:86	9	)
LEAF_NODE	4:87	4:87	4	;
SELECTION	5:1	5:10	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	cur
EXPR	5:5	5:5	5	cur
FIELD	5:5	5:5	6	cur
LEAF_NODE	5:5	5:5	7	cur
LEAF_NODE	5:8	5:8	4	)
STATEMENTS	5:10	10:1	4	
LEAF_NODE	5:10	5:10	5	{
STATEMENTS	6:2	7:2	5	
SIMPLE_DECL	6:2	6:55	6	aim_tlv_t * tlv ; tlv = aim_tlv_gettlv ( cur -> data , 0x013c , 1 ) ;
VAR_DECL	6:2	6:13	7	aim_tlv_t * tlv ; tlv = aim_tlv_gettlv ( cur -> data , 0x013c , 1 )
TYPE	6:2	6:12	8	aim_tlv_t *
TYPE_NAME	6:2	6:2	9	aim_tlv_t
LEAF_NODE	6:2	6:2	10	aim_tlv_t
POINTER	6:12	6:12	9	*
LEAF_NODE	6:12	6:12	10	*
NAME	6:13	6:13	8	tlv
LEAF_NODE	6:13	6:13	9	tlv
LEAF_NODE	0:0	0:0	8	;
INIT	6:13	6:13	8	tlv = aim_tlv_gettlv ( cur -> data , 0x013c , 1 )
ASSIGN	6:13	6:19	9	tlv = aim_tlv_gettlv ( cur -> data , 0x013c , 1 )
LVAL	6:13	6:13	10	tlv
NAME	6:13	6:13	11	tlv
LEAF_NODE	6:13	6:13	12	tlv
ASSIGN_OP	6:17	6:17	10	=
LEAF_NODE	6:17	6:17	11	=
RVAL	6:19	6:19	10	aim_tlv_gettlv ( cur -> data , 0x013c , 1 )
FUNCTION_CALL	6:19	6:54	11	aim_tlv_gettlv ( cur -> data , 0x013c , 1 )
CALLEE	6:19	6:19	12	aim_tlv_gettlv
LEAF_NODE	6:19	6:19	13	aim_tlv_gettlv
LEAF_NODE	6:33	6:33	12	(
ARGUMENT	6:34	6:34	12	cur -> data
FIELD	6:34	6:39	13	cur -> data
LEAF_NODE	6:34	6:34	14	cur
LEAF_NODE	6:37	6:37	14	->
LEAF_NODE	6:39	6:39	14	data
LEAF_NODE	6:43	6:43	12	,
ARGUMENT	6:45	6:45	12	0x013c
FIELD	6:45	6:45	13	0x013c
LEAF_NODE	6:45	6:45	14	0x013c
LEAF_NODE	6:51	6:51	12	,
ARGUMENT	6:53	6:53	12	1
FIELD	6:53	6:53	13	1
LEAF_NODE	6:53	6:53	14	1
LEAF_NODE	6:54	6:54	12	)
LEAF_NODE	6:55	6:55	7	;
SELECTION	7:2	7:26	6	
KEYWORD	7:2	7:2	7	if
LEAF_NODE	7:2	7:2	8	if
LEAF_NODE	7:5	7:5	7	(
CONDITION	7:6	7:6	7	tlv && tlv -> length
EXPR	7:6	7:6	8	tlv && tlv -> length
AND	7:6	7:13	9	tlv && tlv -> length
EXPR	7:6	7:6	10	tlv
FIELD	7:6	7:6	11	tlv
LEAF_NODE	7:6	7:6	12	tlv
LEAF_NODE	7:10	7:10	10	&&
EXPR	7:13	7:13	10	tlv -> length
FIELD	7:13	7:18	11	tlv -> length
LEAF_NODE	7:13	7:13	12	tlv
LEAF_NODE	7:16	7:16	12	->
LEAF_NODE	7:18	7:18	12	length
LEAF_NODE	7:24	7:24	7	)
STATEMENTS	7:26	9:2	7	
LEAF_NODE	7:26	7:26	8	{
STATEMENTS	8:3	8:3	8	
JUMP_STATEMENT	8:3	8:59	9	return g_strndup ( ( const gchar * ) tlv -> value , tlv -> length ) ;
KEYWORD	8:3	8:3	10	return
LEAF_NODE	8:3	8:3	11	return
DESTINATION	8:10	8:10	10	g_strndup ( ( const gchar * ) tlv -> value , tlv -> length )
EXPR	8:10	8:10	11	g_strndup ( ( const gchar * ) tlv -> value , tlv -> length )
FUNCTION_CALL	8:10	8:58	12	g_strndup ( ( const gchar * ) tlv -> value , tlv -> length )
CALLEE	8:10	8:10	13	g_strndup
LEAF_NODE	8:10	8:10	14	g_strndup
LEAF_NODE	8:19	8:19	13	(
ARGUMENT	8:20	8:35	13	( const gchar * ) tlv -> value
LEAF_NODE	8:20	8:20	14	(
TYPE_NAME	8:21	8:27	14	const gchar
LEAF_NODE	8:21	8:21	15	const
LEAF_NODE	8:27	8:27	15	gchar
LEAF_NODE	8:33	8:33	14	*
LEAF_NODE	8:34	8:34	14	)
FIELD	8:35	8:40	14	tlv -> value
LEAF_NODE	8:35	8:35	15	tlv
LEAF_NODE	8:38	8:38	15	->
LEAF_NODE	8:40	8:40	15	value
LEAF_NODE	8:45	8:45	13	,
ARGUMENT	8:47	8:47	13	tlv -> length
FIELD	8:47	8:52	14	tlv -> length
LEAF_NODE	8:47	8:47	15	tlv
LEAF_NODE	8:50	8:50	15	->
LEAF_NODE	8:52	8:52	15	length
LEAF_NODE	8:58	8:58	13	)
LEAF_NODE	8:59	8:59	10	;
LEAF_NODE	9:2	9:2	8	}
LEAF_NODE	10:1	10:1	5	}
JUMP_STATEMENT	11:1	11:12	3	return NULL ;
KEYWORD	11:1	11:1	4	return
LEAF_NODE	11:1	11:1	5	return
DESTINATION	11:8	11:8	4	NULL
EXPR	11:8	11:8	5	NULL
FIELD	11:8	11:8	6	NULL
LEAF_NODE	11:8	11:8	7	NULL
LEAF_NODE	11:12	11:12	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	143:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	jabber_iq_parse
LEAF_NODE	2:5	2:5	3	jabber_iq_parse
PARAMETER_LIST	2:20	2:54	2	( JabberStream * js , xmlnode * packet )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:35	3	JabberStream * js
TYPE	2:21	2:34	4	JabberStream *
TYPE_NAME	2:21	2:21	5	JabberStream
LEAF_NODE	2:21	2:21	6	JabberStream
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	js
LEAF_NODE	2:35	2:35	5	js
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:48	3	xmlnode * packet
TYPE	2:39	2:47	4	xmlnode *
TYPE_NAME	2:39	2:39	5	xmlnode
LEAF_NODE	2:39	2:39	6	xmlnode
POINTER	2:47	2:47	5	*
LEAF_NODE	2:47	2:47	6	*
NAME	2:48	2:48	4	packet
LEAF_NODE	2:48	2:48	5	packet
LEAF_NODE	2:54	2:54	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	142:1	2	
SIMPLE_DECL	4:1	4:26	3	JabberIqCallbackData * jcd ;
VAR_DECL	4:1	4:23	4	JabberIqCallbackData * jcd
TYPE	4:1	4:22	5	JabberIqCallbackData *
TYPE_NAME	4:1	4:1	6	JabberIqCallbackData
LEAF_NODE	4:1	4:1	7	JabberIqCallbackData
POINTER	4:22	4:22	6	*
LEAF_NODE	4:22	4:22	7	*
NAME	4:23	4:23	5	jcd
LEAF_NODE	4:23	4:23	6	jcd
LEAF_NODE	4:26	4:26	4	;
SIMPLE_DECL	5:1	5:27	3	xmlnode * child , xmlnode * error , xmlnode * x ;
INIT_DECL_LIST	5:1	5:1	4	xmlnode * child , xmlnode * error , xmlnode * x
VAR_DECL	5:1	5:10	5	xmlnode * child
TYPE	5:1	5:9	6	xmlnode *
TYPE_NAME	5:1	5:1	7	xmlnode
LEAF_NODE	5:1	5:1	8	xmlnode
POINTER	5:9	5:9	7	*
LEAF_NODE	5:9	5:9	8	*
NAME	5:10	5:10	6	child
LEAF_NODE	5:10	5:10	7	child
LEAF_NODE	5:15	5:15	5	,
INIT_DECL_LIST	5:1	5:1	5	xmlnode * error , xmlnode * x
VAR_DECL	5:1	5:18	6	xmlnode * error
TYPE	5:1	5:17	7	xmlnode *
TYPE_NAME	5:1	5:1	8	xmlnode
LEAF_NODE	5:1	5:1	9	xmlnode
POINTER	5:17	5:17	8	*
LEAF_NODE	5:17	5:17	9	*
NAME	5:18	5:18	7	error
LEAF_NODE	5:18	5:18	8	error
LEAF_NODE	5:23	5:23	6	,
VAR_DECL	5:1	5:26	6	xmlnode * x
TYPE	5:1	5:25	7	xmlnode *
TYPE_NAME	5:1	5:1	8	xmlnode
LEAF_NODE	5:1	5:1	9	xmlnode
POINTER	5:25	5:25	8	*
LEAF_NODE	5:25	5:25	9	*
NAME	5:26	5:26	7	x
LEAF_NODE	5:26	5:26	8	x
LEAF_NODE	5:27	5:27	4	;
SIMPLE_DECL	6:1	6:18	3	const char * xmlns ;
VAR_DECL	6:1	6:13	4	const char * xmlns
TYPE	6:1	6:12	5	const char *
TYPE_NAME	6:1	6:7	6	const char
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	char
POINTER	6:12	6:12	6	*
LEAF_NODE	6:12	6:12	7	*
NAME	6:13	6:13	5	xmlns
LEAF_NODE	6:13	6:13	6	xmlns
LEAF_NODE	6:18	6:18	4	;
SIMPLE_DECL	7:1	7:32	3	const char * iq_type , const char * id , const char * from ;
INIT_DECL_LIST	7:1	7:1	4	const char * iq_type , const char * id , const char * from
VAR_DECL	7:1	7:13	5	const char * iq_type
TYPE	7:1	7:12	6	const char *
TYPE_NAME	7:1	7:7	7	const char
LEAF_NODE	7:1	7:1	8	const
LEAF_NODE	7:7	7:7	8	char
POINTER	7:12	7:12	7	*
LEAF_NODE	7:12	7:12	8	*
NAME	7:13	7:13	6	iq_type
LEAF_NODE	7:13	7:13	7	iq_type
LEAF_NODE	7:20	7:20	5	,
INIT_DECL_LIST	7:1	7:1	5	const char * id , const char * from
VAR_DECL	7:1	7:23	6	const char * id
TYPE	7:1	7:22	7	const char *
TYPE_NAME	7:1	7:7	8	const char
LEAF_NODE	7:1	7:1	9	const
LEAF_NODE	7:7	7:7	9	char
POINTER	7:22	7:22	8	*
LEAF_NODE	7:22	7:22	9	*
NAME	7:23	7:23	7	id
LEAF_NODE	7:23	7:23	8	id
LEAF_NODE	7:25	7:25	6	,
VAR_DECL	7:1	7:28	6	const char * from
TYPE	7:1	7:27	7	const char *
TYPE_NAME	7:1	7:7	8	const char
LEAF_NODE	7:1	7:1	9	const
LEAF_NODE	7:7	7:7	9	char
POINTER	7:27	7:27	8	*
LEAF_NODE	7:27	7:27	9	*
NAME	7:28	7:28	7	from
LEAF_NODE	7:28	7:28	8	from
LEAF_NODE	7:32	7:32	4	;
SIMPLE_DECL	8:1	8:35	3	JabberIqType type ; type = JABBER_IQ_NONE ;
VAR_DECL	8:1	8:14	4	JabberIqType type ; type = JABBER_IQ_NONE
TYPE	8:1	8:1	5	JabberIqType
TYPE_NAME	8:1	8:1	6	JabberIqType
LEAF_NODE	8:1	8:1	7	JabberIqType
NAME	8:14	8:14	5	type
LEAF_NODE	8:14	8:14	6	type
LEAF_NODE	0:0	0:0	5	;
INIT	8:14	8:14	5	type = JABBER_IQ_NONE
ASSIGN	8:14	8:21	6	type = JABBER_IQ_NONE
LVAL	8:14	8:14	7	type
NAME	8:14	8:14	8	type
LEAF_NODE	8:14	8:14	9	type
ASSIGN_OP	8:19	8:19	7	=
LEAF_NODE	8:19	8:19	8	=
RVAL	8:21	8:21	7	JABBER_IQ_NONE
FIELD	8:21	8:21	8	JABBER_IQ_NONE
LEAF_NODE	8:21	8:21	9	JABBER_IQ_NONE
LEAF_NODE	8:35	8:35	4	;
SIMPLE_DECL	9:1	9:23	3	gboolean signal_return ;
VAR_DECL	9:1	9:10	4	gboolean signal_return
TYPE	9:1	9:1	5	gboolean
TYPE_NAME	9:1	9:1	6	gboolean
LEAF_NODE	9:1	9:1	7	gboolean
NAME	9:10	9:10	5	signal_return
LEAF_NODE	9:10	9:10	6	signal_return
LEAF_NODE	9:23	9:23	4	;
SIMPLE_DECL	10:1	10:18	3	JabberID * from_id ;
VAR_DECL	10:1	10:11	4	JabberID * from_id
TYPE	10:1	10:10	5	JabberID *
TYPE_NAME	10:1	10:1	6	JabberID
LEAF_NODE	10:1	10:1	7	JabberID
POINTER	10:10	10:10	6	*
LEAF_NODE	10:10	10:10	7	*
NAME	10:11	10:11	5	from_id
LEAF_NODE	10:11	10:11	6	from_id
LEAF_NODE	10:18	10:18	4	;
EXPR_STATEMENT	11:1	11:42	3	from = xmlnode_get_attrib ( packet , "from" ) ;
EXPR	11:1	11:1	4	from = xmlnode_get_attrib ( packet , "from" )
ASSIGN	11:1	11:8	5	from = xmlnode_get_attrib ( packet , "from" )
LVAL	11:1	11:1	6	from
FIELD	11:1	11:1	7	from
LEAF_NODE	11:1	11:1	8	from
ASSIGN_OP	11:6	11:6	6	=
LEAF_NODE	11:6	11:6	7	=
RVAL	11:8	11:8	6	xmlnode_get_attrib ( packet , "from" )
FUNCTION_CALL	11:8	11:41	7	xmlnode_get_attrib ( packet , "from" )
CALLEE	11:8	11:8	8	xmlnode_get_attrib
LEAF_NODE	11:8	11:8	9	xmlnode_get_attrib
LEAF_NODE	11:26	11:26	8	(
ARGUMENT	11:27	11:27	8	packet
FIELD	11:27	11:27	9	packet
LEAF_NODE	11:27	11:27	10	packet
LEAF_NODE	11:33	11:33	8	,
ARGUMENT	11:35	11:35	8	"from"
FIELD	11:35	11:35	9	"from"
LEAF_NODE	11:35	11:35	10	"from"
LEAF_NODE	11:41	11:41	8	)
LEAF_NODE	11:42	11:42	4	;
EXPR_STATEMENT	12:1	12:38	3	id = xmlnode_get_attrib ( packet , "id" ) ;
EXPR	12:1	12:1	4	id = xmlnode_get_attrib ( packet , "id" )
ASSIGN	12:1	12:6	5	id = xmlnode_get_attrib ( packet , "id" )
LVAL	12:1	12:1	6	id
FIELD	12:1	12:1	7	id
LEAF_NODE	12:1	12:1	8	id
ASSIGN_OP	12:4	12:4	6	=
LEAF_NODE	12:4	12:4	7	=
RVAL	12:6	12:6	6	xmlnode_get_attrib ( packet , "id" )
FUNCTION_CALL	12:6	12:37	7	xmlnode_get_attrib ( packet , "id" )
CALLEE	12:6	12:6	8	xmlnode_get_attrib
LEAF_NODE	12:6	12:6	9	xmlnode_get_attrib
LEAF_NODE	12:24	12:24	8	(
ARGUMENT	12:25	12:25	8	packet
FIELD	12:25	12:25	9	packet
LEAF_NODE	12:25	12:25	10	packet
LEAF_NODE	12:31	12:31	8	,
ARGUMENT	12:33	12:33	8	"id"
FIELD	12:33	12:33	9	"id"
LEAF_NODE	12:33	12:33	10	"id"
LEAF_NODE	12:37	12:37	8	)
LEAF_NODE	12:38	12:38	4	;
EXPR_STATEMENT	13:1	13:45	3	iq_type = xmlnode_get_attrib ( packet , "type" ) ;
EXPR	13:1	13:1	4	iq_type = xmlnode_get_attrib ( packet , "type" )
ASSIGN	13:1	13:11	5	iq_type = xmlnode_get_attrib ( packet , "type" )
LVAL	13:1	13:1	6	iq_type
FIELD	13:1	13:1	7	iq_type
LEAF_NODE	13:1	13:1	8	iq_type
ASSIGN_OP	13:9	13:9	6	=
LEAF_NODE	13:9	13:9	7	=
RVAL	13:11	13:11	6	xmlnode_get_attrib ( packet , "type" )
FUNCTION_CALL	13:11	13:44	7	xmlnode_get_attrib ( packet , "type" )
CALLEE	13:11	13:11	8	xmlnode_get_attrib
LEAF_NODE	13:11	13:11	9	xmlnode_get_attrib
LEAF_NODE	13:29	13:29	8	(
ARGUMENT	13:30	13:30	8	packet
FIELD	13:30	13:30	9	packet
LEAF_NODE	13:30	13:30	10	packet
LEAF_NODE	13:36	13:36	8	,
ARGUMENT	13:38	13:38	8	"type"
FIELD	13:38	13:38	9	"type"
LEAF_NODE	13:38	13:38	10	"type"
LEAF_NODE	13:44	13:44	8	)
LEAF_NODE	13:45	13:45	4	;
EXPR_STATEMENT	18:1	18:30	3	from_id = jabber_id_new ( from ) ;
EXPR	18:1	18:1	4	from_id = jabber_id_new ( from )
ASSIGN	18:1	18:11	5	from_id = jabber_id_new ( from )
LVAL	18:1	18:1	6	from_id
FIELD	18:1	18:1	7	from_id
LEAF_NODE	18:1	18:1	8	from_id
ASSIGN_OP	18:9	18:9	6	=
LEAF_NODE	18:9	18:9	7	=
RVAL	18:11	18:11	6	jabber_id_new ( from )
FUNCTION_CALL	18:11	18:29	7	jabber_id_new ( from )
CALLEE	18:11	18:11	8	jabber_id_new
LEAF_NODE	18:11	18:11	9	jabber_id_new
LEAF_NODE	18:24	18:24	8	(
ARGUMENT	18:25	18:25	8	from
FIELD	18:25	18:25	9	from
LEAF_NODE	18:25	18:25	10	from
LEAF_NODE	18:29	18:29	8	)
LEAF_NODE	18:30	18:30	4	;
SELECTION	19:1	19:23	3	
KEYWORD	19:1	19:1	4	if
LEAF_NODE	19:1	19:1	5	if
LEAF_NODE	19:4	19:4	4	(
CONDITION	19:5	19:5	4	from && ! from_id
EXPR	19:5	19:5	5	from && ! from_id
AND	19:5	19:13	6	from && ! from_id
EXPR	19:5	19:5	7	from
FIELD	19:5	19:5	8	from
LEAF_NODE	19:5	19:5	9	from
LEAF_NODE	19:10	19:10	7	&&
EXPR	19:13	19:13	7	! from_id
UNARY_EXPR	19:13	19:14	8	! from_id
UNARY_OPERATOR	19:13	19:13	9	!
LEAF_NODE	19:13	19:13	10	!
FIELD	19:14	19:14	9	from_id
LEAF_NODE	19:14	19:14	10	from_id
LEAF_NODE	19:21	19:21	4	)
STATEMENTS	19:23	22:1	4	
LEAF_NODE	19:23	19:23	5	{
STATEMENTS	20:2	21:2	5	
EXPR_STATEMENT	20:2	20:81	6	purple_debug_error ( "jabber" , "Received an iq with an invalid from: %s\n" , from ) ;
EXPR	20:2	20:2	7	purple_debug_error ( "jabber" , "Received an iq with an invalid from: %s\n" , from )
FUNCTION_CALL	20:2	20:80	8	purple_debug_error ( "jabber" , "Received an iq with an invalid from: %s\n" , from )
CALLEE	20:2	20:2	9	purple_debug_error
LEAF_NODE	20:2	20:2	10	purple_debug_error
LEAF_NODE	20:20	20:20	9	(
ARGUMENT	20:21	20:21	9	"jabber"
FIELD	20:21	20:21	10	"jabber"
LEAF_NODE	20:21	20:21	11	"jabber"
LEAF_NODE	20:29	20:29	9	,
ARGUMENT	20:31	20:31	9	"Received an iq with an invalid from: %s\n"
FIELD	20:31	20:31	10	"Received an iq with an invalid from: %s\n"
LEAF_NODE	20:31	20:31	11	"Received an iq with an invalid from: %s\n"
LEAF_NODE	20:74	20:74	9	,
ARGUMENT	20:76	20:76	9	from
FIELD	20:76	20:76	10	from
LEAF_NODE	20:76	20:76	11	from
LEAF_NODE	20:80	20:80	9	)
LEAF_NODE	20:81	20:81	7	;
JUMP_STATEMENT	21:2	21:8	6	return DESTINATION ;
KEYWORD	21:2	21:2	7	return
LEAF_NODE	21:2	21:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	21:8	21:8	7	;
LEAF_NODE	22:1	22:1	5	}
ITERATION	29:1	29:57	3	
KEYWORD	29:1	29:1	4	for
LEAF_NODE	29:1	29:1	5	for
LEAF_NODE	29:5	29:5	4	(
FOR_INIT	29:6	29:27	4	child = packet -> child ;
EXPR	29:6	29:6	5	child = packet -> child
ASSIGN	29:6	29:14	6	child = packet -> child
LVAL	29:6	29:6	7	child
FIELD	29:6	29:6	8	child
LEAF_NODE	29:6	29:6	9	child
ASSIGN_OP	29:12	29:12	7	=
LEAF_NODE	29:12	29:12	8	=
RVAL	29:14	29:14	7	packet -> child
FIELD	29:14	29:22	8	packet -> child
LEAF_NODE	29:14	29:14	9	packet
LEAF_NODE	29:20	29:20	9	->
LEAF_NODE	29:22	29:22	9	child
LEAF_NODE	29:27	29:27	5	;
CONDITION	29:29	29:29	4	child
EXPR	29:29	29:29	5	child
FIELD	29:29	29:29	6	child
LEAF_NODE	29:29	29:29	7	child
LEAF_NODE	29:34	29:34	4	;
FOR_EXPR	29:36	29:36	4	child = child -> next
EXPR	29:36	29:36	5	child = child -> next
ASSIGN	29:36	29:44	6	child = child -> next
LVAL	29:36	29:36	7	child
FIELD	29:36	29:36	8	child
LEAF_NODE	29:36	29:36	9	child
ASSIGN_OP	29:42	29:42	7	=
LEAF_NODE	29:42	29:42	8	=
RVAL	29:44	29:44	7	child -> next
FIELD	29:44	29:51	8	child -> next
LEAF_NODE	29:44	29:44	9	child
LEAF_NODE	29:49	29:49	9	->
LEAF_NODE	29:51	29:51	9	next
LEAF_NODE	29:55	29:55	4	)
STATEMENTS	29:57	32:1	4	
LEAF_NODE	29:57	29:57	5	{
STATEMENTS	30:2	30:2	5	
SELECTION	30:2	31:3	6	
KEYWORD	30:2	30:2	7	if
LEAF_NODE	30:2	30:2	8	if
LEAF_NODE	30:5	30:5	7	(
CONDITION	30:6	30:6	7	child -> type == XMLNODE_TYPE_TAG
EXPR	30:6	30:21	8	child -> type == XMLNODE_TYPE_TAG
FIELD	30:6	30:13	9	child -> type
LEAF_NODE	30:6	30:6	10	child
LEAF_NODE	30:11	30:11	10	->
LEAF_NODE	30:13	30:13	10	type
EQ_OPERATOR	30:18	30:18	9	==
LEAF_NODE	30:18	30:18	10	==
FIELD	30:21	30:21	9	XMLNODE_TYPE_TAG
LEAF_NODE	30:21	30:21	10	XMLNODE_TYPE_TAG
LEAF_NODE	30:37	30:37	7	)
STATEMENTS	31:3	31:3	7	
JUMP_STATEMENT	31:3	31:8	8	break DESTINATION ;
KEYWORD	31:3	31:3	9	break
LEAF_NODE	31:3	31:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	31:8	31:8	9	;
LEAF_NODE	32:1	32:1	5	}
SELECTION	33:1	33:14	3	
KEYWORD	33:1	33:1	4	if
LEAF_NODE	33:1	33:1	5	if
LEAF_NODE	33:4	33:4	4	(
CONDITION	33:5	33:5	4	iq_type
EXPR	33:5	33:5	5	iq_type
FIELD	33:5	33:5	6	iq_type
LEAF_NODE	33:5	33:5	7	iq_type
LEAF_NODE	33:12	33:12	4	)
STATEMENTS	33:14	42:1	4	
LEAF_NODE	33:14	33:14	5	{
STATEMENTS	34:2	40:2	5	
SELECTION	34:2	35:3	6	
KEYWORD	34:2	34:2	7	if
LEAF_NODE	34:2	34:2	8	if
LEAF_NODE	34:5	34:5	7	(
CONDITION	34:6	34:6	7	! strcmp ( iq_type , "get" )
EXPR	34:6	34:6	8	! strcmp ( iq_type , "get" )
UNARY_EXPR	34:6	34:7	9	! strcmp ( iq_type , "get" )
UNARY_OPERATOR	34:6	34:6	10	!
LEAF_NODE	34:6	34:6	11	!
FUNCTION_CALL	34:7	34:28	10	strcmp ( iq_type , "get" )
CALLEE	34:7	34:7	11	strcmp
LEAF_NODE	34:7	34:7	12	strcmp
LEAF_NODE	34:13	34:13	11	(
ARGUMENT	34:14	34:14	11	iq_type
FIELD	34:14	34:14	12	iq_type
LEAF_NODE	34:14	34:14	13	iq_type
LEAF_NODE	34:21	34:21	11	,
ARGUMENT	34:23	34:23	11	"get"
FIELD	34:23	34:23	12	"get"
LEAF_NODE	34:23	34:23	13	"get"
LEAF_NODE	34:28	34:28	11	)
LEAF_NODE	34:29	34:29	7	)
STATEMENTS	35:3	35:3	7	
EXPR_STATEMENT	35:3	35:23	8	type = JABBER_IQ_GET ;
EXPR	35:3	35:3	9	type = JABBER_IQ_GET
ASSIGN	35:3	35:10	10	type = JABBER_IQ_GET
LVAL	35:3	35:3	11	type
FIELD	35:3	35:3	12	type
LEAF_NODE	35:3	35:3	13	type
ASSIGN_OP	35:8	35:8	11	=
LEAF_NODE	35:8	35:8	12	=
RVAL	35:10	35:10	11	JABBER_IQ_GET
FIELD	35:10	35:10	12	JABBER_IQ_GET
LEAF_NODE	35:10	35:10	13	JABBER_IQ_GET
LEAF_NODE	35:23	35:23	9	;
SELECTION	36:2	36:7	6	
KEYWORD	36:2	36:2	7	else
LEAF_NODE	36:2	36:2	8	else
STATEMENTS	36:7	36:7	7	
SELECTION	36:7	37:3	8	
KEYWORD	36:7	36:7	9	if
LEAF_NODE	36:7	36:7	10	if
LEAF_NODE	36:10	36:10	9	(
CONDITION	36:11	36:11	9	! strcmp ( iq_type , "set" )
EXPR	36:11	36:11	10	! strcmp ( iq_type , "set" )
UNARY_EXPR	36:11	36:12	11	! strcmp ( iq_type , "set" )
UNARY_OPERATOR	36:11	36:11	12	!
LEAF_NODE	36:11	36:11	13	!
FUNCTION_CALL	36:12	36:33	12	strcmp ( iq_type , "set" )
CALLEE	36:12	36:12	13	strcmp
LEAF_NODE	36:12	36:12	14	strcmp
LEAF_NODE	36:18	36:18	13	(
ARGUMENT	36:19	36:19	13	iq_type
FIELD	36:19	36:19	14	iq_type
LEAF_NODE	36:19	36:19	15	iq_type
LEAF_NODE	36:26	36:26	13	,
ARGUMENT	36:28	36:28	13	"set"
FIELD	36:28	36:28	14	"set"
LEAF_NODE	36:28	36:28	15	"set"
LEAF_NODE	36:33	36:33	13	)
LEAF_NODE	36:34	36:34	9	)
STATEMENTS	37:3	37:3	9	
EXPR_STATEMENT	37:3	37:23	10	type = JABBER_IQ_SET ;
EXPR	37:3	37:3	11	type = JABBER_IQ_SET
ASSIGN	37:3	37:10	12	type = JABBER_IQ_SET
LVAL	37:3	37:3	13	type
FIELD	37:3	37:3	14	type
LEAF_NODE	37:3	37:3	15	type
ASSIGN_OP	37:8	37:8	13	=
LEAF_NODE	37:8	37:8	14	=
RVAL	37:10	37:10	13	JABBER_IQ_SET
FIELD	37:10	37:10	14	JABBER_IQ_SET
LEAF_NODE	37:10	37:10	15	JABBER_IQ_SET
LEAF_NODE	37:23	37:23	11	;
SELECTION	38:2	38:7	6	
KEYWORD	38:2	38:2	7	else
LEAF_NODE	38:2	38:2	8	else
STATEMENTS	38:7	38:7	7	
SELECTION	38:7	39:3	8	
KEYWORD	38:7	38:7	9	if
LEAF_NODE	38:7	38:7	10	if
LEAF_NODE	38:10	38:10	9	(
CONDITION	38:11	38:11	9	! strcmp ( iq_type , "result" )
EXPR	38:11	38:11	10	! strcmp ( iq_type , "result" )
UNARY_EXPR	38:11	38:12	11	! strcmp ( iq_type , "result" )
UNARY_OPERATOR	38:11	38:11	12	!
LEAF_NODE	38:11	38:11	13	!
FUNCTION_CALL	38:12	38:36	12	strcmp ( iq_type , "result" )
CALLEE	38:12	38:12	13	strcmp
LEAF_NODE	38:12	38:12	14	strcmp
LEAF_NODE	38:18	38:18	13	(
ARGUMENT	38:19	38:19	13	iq_type
FIELD	38:19	38:19	14	iq_type
LEAF_NODE	38:19	38:19	15	iq_type
LEAF_NODE	38:26	38:26	13	,
ARGUMENT	38:28	38:28	13	"result"
FIELD	38:28	38:28	14	"result"
LEAF_NODE	38:28	38:28	15	"result"
LEAF_NODE	38:36	38:36	13	)
LEAF_NODE	38:37	38:37	9	)
STATEMENTS	39:3	39:3	9	
EXPR_STATEMENT	39:3	39:26	10	type = JABBER_IQ_RESULT ;
EXPR	39:3	39:3	11	type = JABBER_IQ_RESULT
ASSIGN	39:3	39:10	12	type = JABBER_IQ_RESULT
LVAL	39:3	39:3	13	type
FIELD	39:3	39:3	14	type
LEAF_NODE	39:3	39:3	15	type
ASSIGN_OP	39:8	39:8	13	=
LEAF_NODE	39:8	39:8	14	=
RVAL	39:10	39:10	13	JABBER_IQ_RESULT
FIELD	39:10	39:10	14	JABBER_IQ_RESULT
LEAF_NODE	39:10	39:10	15	JABBER_IQ_RESULT
LEAF_NODE	39:26	39:26	11	;
SELECTION	40:2	40:7	6	
KEYWORD	40:2	40:2	7	else
LEAF_NODE	40:2	40:2	8	else
STATEMENTS	40:7	40:7	7	
SELECTION	40:7	41:3	8	
KEYWORD	40:7	40:7	9	if
LEAF_NODE	40:7	40:7	10	if
LEAF_NODE	40:10	40:10	9	(
CONDITION	40:11	40:11	9	! strcmp ( iq_type , "error" )
EXPR	40:11	40:11	10	! strcmp ( iq_type , "error" )
UNARY_EXPR	40:11	40:12	11	! strcmp ( iq_type , "error" )
UNARY_OPERATOR	40:11	40:11	12	!
LEAF_NODE	40:11	40:11	13	!
FUNCTION_CALL	40:12	40:35	12	strcmp ( iq_type , "error" )
CALLEE	40:12	40:12	13	strcmp
LEAF_NODE	40:12	40:12	14	strcmp
LEAF_NODE	40:18	40:18	13	(
ARGUMENT	40:19	40:19	13	iq_type
FIELD	40:19	40:19	14	iq_type
LEAF_NODE	40:19	40:19	15	iq_type
LEAF_NODE	40:26	40:26	13	,
ARGUMENT	40:28	40:28	13	"error"
FIELD	40:28	40:28	14	"error"
LEAF_NODE	40:28	40:28	15	"error"
LEAF_NODE	40:35	40:35	13	)
LEAF_NODE	40:36	40:36	9	)
STATEMENTS	41:3	41:3	9	
EXPR_STATEMENT	41:3	41:25	10	type = JABBER_IQ_ERROR ;
EXPR	41:3	41:3	11	type = JABBER_IQ_ERROR
ASSIGN	41:3	41:10	12	type = JABBER_IQ_ERROR
LVAL	41:3	41:3	13	type
FIELD	41:3	41:3	14	type
LEAF_NODE	41:3	41:3	15	type
ASSIGN_OP	41:8	41:8	13	=
LEAF_NODE	41:8	41:8	14	=
RVAL	41:10	41:10	13	JABBER_IQ_ERROR
FIELD	41:10	41:10	14	JABBER_IQ_ERROR
LEAF_NODE	41:10	41:10	15	JABBER_IQ_ERROR
LEAF_NODE	41:25	41:25	11	;
LEAF_NODE	42:1	42:1	5	}
SELECTION	43:1	43:29	3	
KEYWORD	43:1	43:1	4	if
LEAF_NODE	43:1	43:1	5	if
LEAF_NODE	43:4	43:4	4	(
CONDITION	43:5	43:5	4	type == JABBER_IQ_NONE
EXPR	43:5	43:13	5	type == JABBER_IQ_NONE
FIELD	43:5	43:5	6	type
LEAF_NODE	43:5	43:5	7	type
EQ_OPERATOR	43:10	43:10	6	==
LEAF_NODE	43:10	43:10	7	==
FIELD	43:13	43:13	6	JABBER_IQ_NONE
LEAF_NODE	43:13	43:13	7	JABBER_IQ_NONE
LEAF_NODE	43:27	43:27	4	)
STATEMENTS	43:29	48:1	4	
LEAF_NODE	43:29	43:29	5	{
STATEMENTS	44:2	47:2	5	
EXPR_STATEMENT	44:2	45:38	6	purple_debug_error ( "jabber" , "IQ with invalid type ('%s') - ignoring.\n" , iq_type ? iq_type : "(null)" ) ;
EXPR	44:2	44:2	7	purple_debug_error ( "jabber" , "IQ with invalid type ('%s') - ignoring.\n" , iq_type ? iq_type : "(null)" )
FUNCTION_CALL	44:2	45:37	8	purple_debug_error ( "jabber" , "IQ with invalid type ('%s') - ignoring.\n" , iq_type ? iq_type : "(null)" )
CALLEE	44:2	44:2	9	purple_debug_error
LEAF_NODE	44:2	44:2	10	purple_debug_error
LEAF_NODE	44:20	44:20	9	(
ARGUMENT	44:21	44:21	9	"jabber"
FIELD	44:21	44:21	10	"jabber"
LEAF_NODE	44:21	44:21	11	"jabber"
LEAF_NODE	44:29	44:29	9	,
ARGUMENT	44:31	44:31	9	"IQ with invalid type ('%s') - ignoring.\n"
FIELD	44:31	44:31	10	"IQ with invalid type ('%s') - ignoring.\n"
LEAF_NODE	44:31	44:31	11	"IQ with invalid type ('%s') - ignoring.\n"
LEAF_NODE	44:74	44:74	9	,
ARGUMENT	45:9	45:9	9	iq_type ? iq_type : "(null)"
COND_EXPR	45:9	45:29	10	iq_type ? iq_type : "(null)"
CONDITION	45:9	45:9	11	iq_type
FIELD	45:9	45:9	12	iq_type
LEAF_NODE	45:9	45:9	13	iq_type
LEAF_NODE	45:17	45:17	11	?
EXPR	45:19	45:19	11	iq_type
FIELD	45:19	45:19	12	iq_type
LEAF_NODE	45:19	45:19	13	iq_type
LEAF_NODE	45:27	45:27	11	:
FIELD	45:29	45:29	11	"(null)"
LEAF_NODE	45:29	45:29	12	"(null)"
LEAF_NODE	45:37	45:37	9	)
LEAF_NODE	45:38	45:38	7	;
EXPR_STATEMENT	46:2	46:25	6	jabber_id_free ( from_id ) ;
EXPR	46:2	46:2	7	jabber_id_free ( from_id )
FUNCTION_CALL	46:2	46:24	8	jabber_id_free ( from_id )
CALLEE	46:2	46:2	9	jabber_id_free
LEAF_NODE	46:2	46:2	10	jabber_id_free
LEAF_NODE	46:16	46:16	9	(
ARGUMENT	46:17	46:17	9	from_id
FIELD	46:17	46:17	10	from_id
LEAF_NODE	46:17	46:17	11	from_id
LEAF_NODE	46:24	46:24	9	)
LEAF_NODE	46:25	46:25	7	;
JUMP_STATEMENT	47:2	47:8	6	return DESTINATION ;
KEYWORD	47:2	47:2	7	return
LEAF_NODE	47:2	47:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	47:8	47:8	7	;
LEAF_NODE	48:1	48:1	5	}
SELECTION	50:1	50:17	3	
KEYWORD	50:1	50:1	4	if
LEAF_NODE	50:1	50:1	5	if
LEAF_NODE	50:3	50:3	4	(
CONDITION	50:4	50:4	4	! id || ! * id
EXPR	50:4	50:4	5	! id || ! * id
OR	50:4	50:11	6	! id || ! * id
EXPR	50:4	50:4	7	! id
UNARY_EXPR	50:4	50:5	8	! id
UNARY_OPERATOR	50:4	50:4	9	!
LEAF_NODE	50:4	50:4	10	!
FIELD	50:5	50:5	9	id
LEAF_NODE	50:5	50:5	10	id
LEAF_NODE	50:8	50:8	7	||
EXPR	50:11	50:11	7	! * id
UNARY_EXPR	50:11	50:13	8	! * id
UNARY_OPERATOR	50:11	50:11	9	!
LEAF_NODE	50:11	50:11	10	!
UNARY_OPERATOR	50:12	50:12	9	*
LEAF_NODE	50:12	50:12	10	*
FIELD	50:13	50:13	9	id
LEAF_NODE	50:13	50:13	10	id
LEAF_NODE	50:15	50:15	4	)
STATEMENTS	50:17	73:1	4	
LEAF_NODE	50:17	50:17	5	{
STATEMENTS	51:2	72:2	5	
SELECTION	51:2	51:53	6	
KEYWORD	51:2	51:2	7	if
LEAF_NODE	51:2	51:2	8	if
LEAF_NODE	51:4	51:4	7	(
CONDITION	51:5	51:5	7	type == JABBER_IQ_SET || type == JABBER_IQ_GET
EXPR	51:5	51:5	8	type == JABBER_IQ_SET || type == JABBER_IQ_GET
OR	51:5	51:30	9	type == JABBER_IQ_SET || type == JABBER_IQ_GET
EXPR	51:5	51:13	10	type == JABBER_IQ_SET
FIELD	51:5	51:5	11	type
LEAF_NODE	51:5	51:5	12	type
EQ_OPERATOR	51:10	51:10	11	==
LEAF_NODE	51:10	51:10	12	==
FIELD	51:13	51:13	11	JABBER_IQ_SET
LEAF_NODE	51:13	51:13	12	JABBER_IQ_SET
LEAF_NODE	51:27	51:27	10	||
EXPR	51:30	51:38	10	type == JABBER_IQ_GET
FIELD	51:30	51:30	11	type
LEAF_NODE	51:30	51:30	12	type
EQ_OPERATOR	51:35	51:35	11	==
LEAF_NODE	51:35	51:35	12	==
FIELD	51:38	51:38	11	JABBER_IQ_GET
LEAF_NODE	51:38	51:38	12	JABBER_IQ_GET
LEAF_NODE	51:51	51:51	7	)
STATEMENTS	51:53	68:2	7	
LEAF_NODE	51:53	51:53	8	{
STATEMENTS	52:3	67:3	8	
SIMPLE_DECL	52:3	52:52	9	JabberIq * iq ; iq = jabber_iq_new ( js , JABBER_IQ_ERROR ) ;
VAR_DECL	52:3	52:13	10	JabberIq * iq ; iq = jabber_iq_new ( js , JABBER_IQ_ERROR )
TYPE	52:3	52:12	11	JabberIq *
TYPE_NAME	52:3	52:3	12	JabberIq
LEAF_NODE	52:3	52:3	13	JabberIq
POINTER	52:12	52:12	12	*
LEAF_NODE	52:12	52:12	13	*
NAME	52:13	52:13	11	iq
LEAF_NODE	52:13	52:13	12	iq
LEAF_NODE	0:0	0:0	11	;
INIT	52:13	52:13	11	iq = jabber_iq_new ( js , JABBER_IQ_ERROR )
ASSIGN	52:13	52:18	12	iq = jabber_iq_new ( js , JABBER_IQ_ERROR )
LVAL	52:13	52:13	13	iq
NAME	52:13	52:13	14	iq
LEAF_NODE	52:13	52:13	15	iq
ASSIGN_OP	52:16	52:16	13	=
LEAF_NODE	52:16	52:16	14	=
RVAL	52:18	52:18	13	jabber_iq_new ( js , JABBER_IQ_ERROR )
FUNCTION_CALL	52:18	52:51	14	jabber_iq_new ( js , JABBER_IQ_ERROR )
CALLEE	52:18	52:18	15	jabber_iq_new
LEAF_NODE	52:18	52:18	16	jabber_iq_new
LEAF_NODE	52:31	52:31	15	(
ARGUMENT	52:32	52:32	15	js
FIELD	52:32	52:32	16	js
LEAF_NODE	52:32	52:32	17	js
LEAF_NODE	52:34	52:34	15	,
ARGUMENT	52:36	52:36	15	JABBER_IQ_ERROR
FIELD	52:36	52:36	16	JABBER_IQ_ERROR
LEAF_NODE	52:36	52:36	17	JABBER_IQ_ERROR
LEAF_NODE	52:51	52:51	15	)
LEAF_NODE	52:52	52:52	10	;
EXPR_STATEMENT	53:3	53:25	9	xmlnode_free ( iq -> node ) ;
EXPR	53:3	53:3	10	xmlnode_free ( iq -> node )
FUNCTION_CALL	53:3	53:24	11	xmlnode_free ( iq -> node )
CALLEE	53:3	53:3	12	xmlnode_free
LEAF_NODE	53:3	53:3	13	xmlnode_free
LEAF_NODE	53:15	53:15	12	(
ARGUMENT	53:16	53:16	12	iq -> node
FIELD	53:16	53:20	13	iq -> node
LEAF_NODE	53:16	53:16	14	iq
LEAF_NODE	53:18	53:18	14	->
LEAF_NODE	53:20	53:20	14	node
LEAF_NODE	53:24	53:24	12	)
LEAF_NODE	53:25	53:25	10	;
EXPR_STATEMENT	54:3	54:34	9	iq -> node = xmlnode_copy ( packet ) ;
EXPR	54:3	54:3	10	iq -> node = xmlnode_copy ( packet )
ASSIGN	54:3	54:14	11	iq -> node = xmlnode_copy ( packet )
LVAL	54:3	54:3	12	iq -> node
FIELD	54:3	54:7	13	iq -> node
LEAF_NODE	54:3	54:3	14	iq
LEAF_NODE	54:5	54:5	14	->
LEAF_NODE	54:7	54:7	14	node
ASSIGN_OP	54:12	54:12	12	=
LEAF_NODE	54:12	54:12	13	=
RVAL	54:14	54:14	12	xmlnode_copy ( packet )
FUNCTION_CALL	54:14	54:33	13	xmlnode_copy ( packet )
CALLEE	54:14	54:14	14	xmlnode_copy
LEAF_NODE	54:14	54:14	15	xmlnode_copy
LEAF_NODE	54:26	54:26	14	(
ARGUMENT	54:27	54:27	14	packet
FIELD	54:27	54:27	15	packet
LEAF_NODE	54:27	54:27	16	packet
LEAF_NODE	54:33	54:33	14	)
LEAF_NODE	54:34	54:34	10	;
SELECTION	55:3	55:13	9	
KEYWORD	55:3	55:3	10	if
LEAF_NODE	55:3	55:3	11	if
LEAF_NODE	55:6	55:6	10	(
CONDITION	55:7	55:7	10	from
EXPR	55:7	55:7	11	from
FIELD	55:7	55:7	12	from
LEAF_NODE	55:7	55:7	13	from
LEAF_NODE	55:11	55:11	10	)
STATEMENTS	55:13	58:3	10	
LEAF_NODE	55:13	55:13	11	{
STATEMENTS	56:4	57:4	11	
EXPR_STATEMENT	56:4	56:44	12	xmlnode_set_attrib ( iq -> node , "to" , from ) ;
EXPR	56:4	56:4	13	xmlnode_set_attrib ( iq -> node , "to" , from )
FUNCTION_CALL	56:4	56:43	14	xmlnode_set_attrib ( iq -> node , "to" , from )
CALLEE	56:4	56:4	15	xmlnode_set_attrib
LEAF_NODE	56:4	56:4	16	xmlnode_set_attrib
LEAF_NODE	56:22	56:22	15	(
ARGUMENT	56:23	56:23	15	iq -> node
FIELD	56:23	56:27	16	iq -> node
LEAF_NODE	56:23	56:23	17	iq
LEAF_NODE	56:25	56:25	17	->
LEAF_NODE	56:27	56:27	17	node
LEAF_NODE	56:31	56:31	15	,
ARGUMENT	56:33	56:33	15	"to"
FIELD	56:33	56:33	16	"to"
LEAF_NODE	56:33	56:33	17	"to"
LEAF_NODE	56:37	56:37	15	,
ARGUMENT	56:39	56:39	15	from
FIELD	56:39	56:39	16	from
LEAF_NODE	56:39	56:39	17	from
LEAF_NODE	56:43	56:43	15	)
LEAF_NODE	56:44	56:44	13	;
EXPR_STATEMENT	57:4	57:43	12	xmlnode_remove_attrib ( iq -> node , "from" ) ;
EXPR	57:4	57:4	13	xmlnode_remove_attrib ( iq -> node , "from" )
FUNCTION_CALL	57:4	57:42	14	xmlnode_remove_attrib ( iq -> node , "from" )
CALLEE	57:4	57:4	15	xmlnode_remove_attrib
LEAF_NODE	57:4	57:4	16	xmlnode_remove_attrib
LEAF_NODE	57:25	57:25	15	(
ARGUMENT	57:26	57:26	15	iq -> node
FIELD	57:26	57:30	16	iq -> node
LEAF_NODE	57:26	57:26	17	iq
LEAF_NODE	57:28	57:28	17	->
LEAF_NODE	57:30	57:30	17	node
LEAF_NODE	57:34	57:34	15	,
ARGUMENT	57:36	57:36	15	"from"
FIELD	57:36	57:36	16	"from"
LEAF_NODE	57:36	57:36	17	"from"
LEAF_NODE	57:42	57:42	15	)
LEAF_NODE	57:43	57:43	13	;
LEAF_NODE	58:3	58:3	11	}
EXPR_STATEMENT	59:3	59:48	9	xmlnode_set_attrib ( iq -> node , "type" , "error" ) ;
EXPR	59:3	59:3	10	xmlnode_set_attrib ( iq -> node , "type" , "error" )
FUNCTION_CALL	59:3	59:47	11	xmlnode_set_attrib ( iq -> node , "type" , "error" )
CALLEE	59:3	59:3	12	xmlnode_set_attrib
LEAF_NODE	59:3	59:3	13	xmlnode_set_attrib
LEAF_NODE	59:21	59:21	12	(
ARGUMENT	59:22	59:22	12	iq -> node
FIELD	59:22	59:26	13	iq -> node
LEAF_NODE	59:22	59:22	14	iq
LEAF_NODE	59:24	59:24	14	->
LEAF_NODE	59:26	59:26	14	node
LEAF_NODE	59:30	59:30	12	,
ARGUMENT	59:32	59:32	12	"type"
FIELD	59:32	59:32	13	"type"
LEAF_NODE	59:32	59:32	14	"type"
LEAF_NODE	59:38	59:38	12	,
ARGUMENT	59:40	59:40	12	"error"
FIELD	59:40	59:40	13	"error"
LEAF_NODE	59:40	59:40	14	"error"
LEAF_NODE	59:47	59:47	12	)
LEAF_NODE	59:48	59:48	10	;
EXPR_STATEMENT	61:3	61:34	9	iq -> id = jabber_get_next_id ( js ) ;
EXPR	61:3	61:3	10	iq -> id = jabber_get_next_id ( js )
ASSIGN	61:3	61:12	11	iq -> id = jabber_get_next_id ( js )
LVAL	61:3	61:3	12	iq -> id
FIELD	61:3	61:7	13	iq -> id
LEAF_NODE	61:3	61:3	14	iq
LEAF_NODE	61:5	61:5	14	->
LEAF_NODE	61:7	61:7	14	id
ASSIGN_OP	61:10	61:10	12	=
LEAF_NODE	61:10	61:10	13	=
RVAL	61:12	61:12	12	jabber_get_next_id ( js )
FUNCTION_CALL	61:12	61:33	13	jabber_get_next_id ( js )
CALLEE	61:12	61:12	14	jabber_get_next_id
LEAF_NODE	61:12	61:12	15	jabber_get_next_id
LEAF_NODE	61:30	61:30	14	(
ARGUMENT	61:31	61:31	14	js
FIELD	61:31	61:31	15	js
LEAF_NODE	61:31	61:31	16	js
LEAF_NODE	61:33	61:33	14	)
LEAF_NODE	61:34	61:34	10	;
EXPR_STATEMENT	62:3	62:45	9	xmlnode_set_attrib ( iq -> node , "id" , iq -> id ) ;
EXPR	62:3	62:3	10	xmlnode_set_attrib ( iq -> node , "id" , iq -> id )
FUNCTION_CALL	62:3	62:44	11	xmlnode_set_attrib ( iq -> node , "id" , iq -> id )
CALLEE	62:3	62:3	12	xmlnode_set_attrib
LEAF_NODE	62:3	62:3	13	xmlnode_set_attrib
LEAF_NODE	62:21	62:21	12	(
ARGUMENT	62:22	62:22	12	iq -> node
FIELD	62:22	62:26	13	iq -> node
LEAF_NODE	62:22	62:22	14	iq
LEAF_NODE	62:24	62:24	14	->
LEAF_NODE	62:26	62:26	14	node
LEAF_NODE	62:30	62:30	12	,
ARGUMENT	62:32	62:32	12	"id"
FIELD	62:32	62:32	13	"id"
LEAF_NODE	62:32	62:32	14	"id"
LEAF_NODE	62:36	62:36	12	,
ARGUMENT	62:38	62:38	12	iq -> id
FIELD	62:38	62:42	13	iq -> id
LEAF_NODE	62:38	62:38	14	iq
LEAF_NODE	62:40	62:40	14	->
LEAF_NODE	62:42	62:42	14	id
LEAF_NODE	62:44	62:44	12	)
LEAF_NODE	62:45	62:45	10	;
EXPR_STATEMENT	63:3	63:47	9	error = xmlnode_new_child ( iq -> node , "error" ) ;
EXPR	63:3	63:3	10	error = xmlnode_new_child ( iq -> node , "error" )
ASSIGN	63:3	63:11	11	error = xmlnode_new_child ( iq -> node , "error" )
LVAL	63:3	63:3	12	error
FIELD	63:3	63:3	13	error
LEAF_NODE	63:3	63:3	14	error
ASSIGN_OP	63:9	63:9	12	=
LEAF_NODE	63:9	63:9	13	=
RVAL	63:11	63:11	12	xmlnode_new_child ( iq -> node , "error" )
FUNCTION_CALL	63:11	63:46	13	xmlnode_new_child ( iq -> node , "error" )
CALLEE	63:11	63:11	14	xmlnode_new_child
LEAF_NODE	63:11	63:11	15	xmlnode_new_child
LEAF_NODE	63:28	63:28	14	(
ARGUMENT	63:29	63:29	14	iq -> node
FIELD	63:29	63:33	15	iq -> node
LEAF_NODE	63:29	63:29	16	iq
LEAF_NODE	63:31	63:31	16	->
LEAF_NODE	63:33	63:33	16	node
LEAF_NODE	63:37	63:37	14	,
ARGUMENT	63:39	63:39	14	"error"
FIELD	63:39	63:39	15	"error"
LEAF_NODE	63:39	63:39	16	"error"
LEAF_NODE	63:46	63:46	14	)
LEAF_NODE	63:47	63:47	10	;
EXPR_STATEMENT	64:3	64:46	9	xmlnode_set_attrib ( error , "type" , "modify" ) ;
EXPR	64:3	64:3	10	xmlnode_set_attrib ( error , "type" , "modify" )
FUNCTION_CALL	64:3	64:45	11	xmlnode_set_attrib ( error , "type" , "modify" )
CALLEE	64:3	64:3	12	xmlnode_set_attrib
LEAF_NODE	64:3	64:3	13	xmlnode_set_attrib
LEAF_NODE	64:21	64:21	12	(
ARGUMENT	64:22	64:22	12	error
FIELD	64:22	64:22	13	error
LEAF_NODE	64:22	64:22	14	error
LEAF_NODE	64:27	64:27	12	,
ARGUMENT	64:29	64:29	12	"type"
FIELD	64:29	64:29	13	"type"
LEAF_NODE	64:29	64:29	14	"type"
LEAF_NODE	64:35	64:35	12	,
ARGUMENT	64:37	64:37	12	"modify"
FIELD	64:37	64:37	13	"modify"
LEAF_NODE	64:37	64:37	14	"modify"
LEAF_NODE	64:45	64:45	12	)
LEAF_NODE	64:46	64:46	10	;
EXPR_STATEMENT	65:3	65:46	9	x = xmlnode_new_child ( error , "bad-request" ) ;
EXPR	65:3	65:3	10	x = xmlnode_new_child ( error , "bad-request" )
ASSIGN	65:3	65:7	11	x = xmlnode_new_child ( error , "bad-request" )
LVAL	65:3	65:3	12	x
FIELD	65:3	65:3	13	x
LEAF_NODE	65:3	65:3	14	x
ASSIGN_OP	65:5	65:5	12	=
LEAF_NODE	65:5	65:5	13	=
RVAL	65:7	65:7	12	xmlnode_new_child ( error , "bad-request" )
FUNCTION_CALL	65:7	65:45	13	xmlnode_new_child ( error , "bad-request" )
CALLEE	65:7	65:7	14	xmlnode_new_child
LEAF_NODE	65:7	65:7	15	xmlnode_new_child
LEAF_NODE	65:24	65:24	14	(
ARGUMENT	65:25	65:25	14	error
FIELD	65:25	65:25	15	error
LEAF_NODE	65:25	65:25	16	error
LEAF_NODE	65:30	65:30	14	,
ARGUMENT	65:32	65:32	14	"bad-request"
FIELD	65:32	65:32	15	"bad-request"
LEAF_NODE	65:32	65:32	16	"bad-request"
LEAF_NODE	65:45	65:45	14	)
LEAF_NODE	65:46	65:46	10	;
EXPR_STATEMENT	66:3	66:44	9	xmlnode_set_namespace ( x , NS_XMPP_STANZAS ) ;
EXPR	66:3	66:3	10	xmlnode_set_namespace ( x , NS_XMPP_STANZAS )
FUNCTION_CALL	66:3	66:43	11	xmlnode_set_namespace ( x , NS_XMPP_STANZAS )
CALLEE	66:3	66:3	12	xmlnode_set_namespace
LEAF_NODE	66:3	66:3	13	xmlnode_set_namespace
LEAF_NODE	66:24	66:24	12	(
ARGUMENT	66:25	66:25	12	x
FIELD	66:25	66:25	13	x
LEAF_NODE	66:25	66:25	14	x
LEAF_NODE	66:26	66:26	12	,
ARGUMENT	66:28	66:28	12	NS_XMPP_STANZAS
FIELD	66:28	66:28	13	NS_XMPP_STANZAS
LEAF_NODE	66:28	66:28	14	NS_XMPP_STANZAS
LEAF_NODE	66:43	66:43	12	)
LEAF_NODE	66:44	66:44	10	;
EXPR_STATEMENT	67:3	67:21	9	jabber_iq_send ( iq ) ;
EXPR	67:3	67:3	10	jabber_iq_send ( iq )
FUNCTION_CALL	67:3	67:20	11	jabber_iq_send ( iq )
CALLEE	67:3	67:3	12	jabber_iq_send
LEAF_NODE	67:3	67:3	13	jabber_iq_send
LEAF_NODE	67:17	67:17	12	(
ARGUMENT	67:18	67:18	12	iq
FIELD	67:18	67:18	13	iq
LEAF_NODE	67:18	67:18	14	iq
LEAF_NODE	67:20	67:20	12	)
LEAF_NODE	67:21	67:21	10	;
LEAF_NODE	68:2	68:2	8	}
SELECTION	68:4	69:3	6	
KEYWORD	68:4	68:4	7	else
LEAF_NODE	68:4	68:4	8	else
STATEMENTS	69:3	69:3	7	
EXPR_STATEMENT	69:3	70:30	8	purple_debug_error ( "jabber" , "IQ of type '%s' missing id - ignoring.\n" , iq_type ) ;
EXPR	69:3	69:3	9	purple_debug_error ( "jabber" , "IQ of type '%s' missing id - ignoring.\n" , iq_type )
FUNCTION_CALL	69:3	70:29	10	purple_debug_error ( "jabber" , "IQ of type '%s' missing id - ignoring.\n" , iq_type )
CALLEE	69:3	69:3	11	purple_debug_error
LEAF_NODE	69:3	69:3	12	purple_debug_error
LEAF_NODE	69:21	69:21	11	(
ARGUMENT	69:22	69:22	11	"jabber"
FIELD	69:22	69:22	12	"jabber"
LEAF_NODE	69:22	69:22	13	"jabber"
LEAF_NODE	69:30	69:30	11	,
ARGUMENT	69:32	69:32	11	"IQ of type '%s' missing id - ignoring.\n"
FIELD	69:32	69:32	12	"IQ of type '%s' missing id - ignoring.\n"
LEAF_NODE	69:32	69:32	13	"IQ of type '%s' missing id - ignoring.\n"
LEAF_NODE	69:74	69:74	11	,
ARGUMENT	70:22	70:22	11	iq_type
FIELD	70:22	70:22	12	iq_type
LEAF_NODE	70:22	70:22	13	iq_type
LEAF_NODE	70:29	70:29	11	)
LEAF_NODE	70:30	70:30	9	;
EXPR_STATEMENT	71:2	71:25	6	jabber_id_free ( from_id ) ;
EXPR	71:2	71:2	7	jabber_id_free ( from_id )
FUNCTION_CALL	71:2	71:24	8	jabber_id_free ( from_id )
CALLEE	71:2	71:2	9	jabber_id_free
LEAF_NODE	71:2	71:2	10	jabber_id_free
LEAF_NODE	71:16	71:16	9	(
ARGUMENT	71:17	71:17	9	from_id
FIELD	71:17	71:17	10	from_id
LEAF_NODE	71:17	71:17	11	from_id
LEAF_NODE	71:24	71:24	9	)
LEAF_NODE	71:25	71:25	7	;
JUMP_STATEMENT	72:2	72:8	6	return DESTINATION ;
KEYWORD	72:2	72:2	7	return
LEAF_NODE	72:2	72:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	72:8	72:8	7	;
LEAF_NODE	73:1	73:1	5	}
EXPR_STATEMENT	74:1	75:61	3	signal_return = GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-receiving-iq" , js -> gc , iq_type , id , from , packet ) ) ;
EXPR	74:1	74:1	4	signal_return = GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-receiving-iq" , js -> gc , iq_type , id , from , packet ) )
ASSIGN	74:1	74:17	5	signal_return = GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-receiving-iq" , js -> gc , iq_type , id , from , packet ) )
LVAL	74:1	74:1	6	signal_return
FIELD	74:1	74:1	7	signal_return
LEAF_NODE	74:1	74:1	8	signal_return
ASSIGN_OP	74:15	74:15	6	=
LEAF_NODE	74:15	74:15	7	=
RVAL	74:17	74:17	6	GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-receiving-iq" , js -> gc , iq_type , id , from , packet ) )
FUNCTION_CALL	74:17	75:60	7	GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-receiving-iq" , js -> gc , iq_type , id , from , packet ) )
CALLEE	74:17	74:17	8	GPOINTER_TO_INT
LEAF_NODE	74:17	74:17	9	GPOINTER_TO_INT
LEAF_NODE	74:32	74:32	8	(
ARGUMENT	74:33	74:33	8	purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-receiving-iq" , js -> gc , iq_type , id , from , packet )
FUNCTION_CALL	74:33	75:59	9	purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-receiving-iq" , js -> gc , iq_type , id , from , packet )
CALLEE	74:33	74:33	10	purple_signal_emit_return_1
LEAF_NODE	74:33	74:33	11	purple_signal_emit_return_1
LEAF_NODE	74:60	74:60	10	(
ARGUMENT	74:61	74:61	10	purple_connection_get_prpl ( js -> gc )
FUNCTION_CALL	74:61	74:94	11	purple_connection_get_prpl ( js -> gc )
CALLEE	74:61	74:61	12	purple_connection_get_prpl
LEAF_NODE	74:61	74:61	13	purple_connection_get_prpl
LEAF_NODE	74:87	74:87	12	(
ARGUMENT	74:88	74:88	12	js -> gc
FIELD	74:88	74:92	13	js -> gc
LEAF_NODE	74:88	74:88	14	js
LEAF_NODE	74:90	74:90	14	->
LEAF_NODE	74:92	74:92	14	gc
LEAF_NODE	74:94	74:94	12	)
LEAF_NODE	74:95	74:95	10	,
ARGUMENT	75:3	75:3	10	"jabber-receiving-iq"
FIELD	75:3	75:3	11	"jabber-receiving-iq"
LEAF_NODE	75:3	75:3	12	"jabber-receiving-iq"
LEAF_NODE	75:24	75:24	10	,
ARGUMENT	75:26	75:26	10	js -> gc
FIELD	75:26	75:30	11	js -> gc
LEAF_NODE	75:26	75:26	12	js
LEAF_NODE	75:28	75:28	12	->
LEAF_NODE	75:30	75:30	12	gc
LEAF_NODE	75:32	75:32	10	,
ARGUMENT	75:34	75:34	10	iq_type
FIELD	75:34	75:34	11	iq_type
LEAF_NODE	75:34	75:34	12	iq_type
LEAF_NODE	75:41	75:41	10	,
ARGUMENT	75:43	75:43	10	id
FIELD	75:43	75:43	11	id
LEAF_NODE	75:43	75:43	12	id
LEAF_NODE	75:45	75:45	10	,
ARGUMENT	75:47	75:47	10	from
FIELD	75:47	75:47	11	from
LEAF_NODE	75:47	75:47	12	from
LEAF_NODE	75:51	75:51	10	,
ARGUMENT	75:53	75:53	10	packet
FIELD	75:53	75:53	11	packet
LEAF_NODE	75:53	75:53	12	packet
LEAF_NODE	75:59	75:59	10	)
LEAF_NODE	75:60	75:60	8	)
LEAF_NODE	75:61	75:61	4	;
SELECTION	76:1	76:20	3	
KEYWORD	76:1	76:1	4	if
LEAF_NODE	76:1	76:1	5	if
LEAF_NODE	76:4	76:4	4	(
CONDITION	76:5	76:5	4	signal_return
EXPR	76:5	76:5	5	signal_return
FIELD	76:5	76:5	6	signal_return
LEAF_NODE	76:5	76:5	7	signal_return
LEAF_NODE	76:18	76:18	4	)
STATEMENTS	76:20	79:1	4	
LEAF_NODE	76:20	76:20	5	{
STATEMENTS	77:2	78:2	5	
EXPR_STATEMENT	77:2	77:25	6	jabber_id_free ( from_id ) ;
EXPR	77:2	77:2	7	jabber_id_free ( from_id )
FUNCTION_CALL	77:2	77:24	8	jabber_id_free ( from_id )
CALLEE	77:2	77:2	9	jabber_id_free
LEAF_NODE	77:2	77:2	10	jabber_id_free
LEAF_NODE	77:16	77:16	9	(
ARGUMENT	77:17	77:17	9	from_id
FIELD	77:17	77:17	10	from_id
LEAF_NODE	77:17	77:17	11	from_id
LEAF_NODE	77:24	77:24	9	)
LEAF_NODE	77:25	77:25	7	;
JUMP_STATEMENT	78:2	78:8	6	return DESTINATION ;
KEYWORD	78:2	78:2	7	return
LEAF_NODE	78:2	78:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	78:8	78:8	7	;
LEAF_NODE	79:1	79:1	5	}
SELECTION	81:1	81:57	3	
KEYWORD	81:1	81:1	4	if
LEAF_NODE	81:1	81:1	5	if
LEAF_NODE	81:3	81:3	4	(
CONDITION	81:4	81:4	4	type == JABBER_IQ_RESULT || type == JABBER_IQ_ERROR
EXPR	81:4	81:4	5	type == JABBER_IQ_RESULT || type == JABBER_IQ_ERROR
OR	81:4	81:32	6	type == JABBER_IQ_RESULT || type == JABBER_IQ_ERROR
EXPR	81:4	81:12	7	type == JABBER_IQ_RESULT
FIELD	81:4	81:4	8	type
LEAF_NODE	81:4	81:4	9	type
EQ_OPERATOR	81:9	81:9	8	==
LEAF_NODE	81:9	81:9	9	==
FIELD	81:12	81:12	8	JABBER_IQ_RESULT
LEAF_NODE	81:12	81:12	9	JABBER_IQ_RESULT
LEAF_NODE	81:29	81:29	7	||
EXPR	81:32	81:40	7	type == JABBER_IQ_ERROR
FIELD	81:32	81:32	8	type
LEAF_NODE	81:32	81:32	9	type
EQ_OPERATOR	81:37	81:37	8	==
LEAF_NODE	81:37	81:37	9	==
FIELD	81:40	81:40	8	JABBER_IQ_ERROR
LEAF_NODE	81:40	81:40	9	JABBER_IQ_ERROR
LEAF_NODE	81:55	81:55	4	)
STATEMENTS	81:57	100:1	4	
LEAF_NODE	81:57	81:57	5	{
STATEMENTS	82:2	83:2	5	
EXPR_STATEMENT	82:2	82:49	6	jcd = g_hash_table_lookup ( js -> iq_callbacks , id ) ;
EXPR	82:2	82:2	7	jcd = g_hash_table_lookup ( js -> iq_callbacks , id )
ASSIGN	82:2	82:8	8	jcd = g_hash_table_lookup ( js -> iq_callbacks , id )
LVAL	82:2	82:2	9	jcd
FIELD	82:2	82:2	10	jcd
LEAF_NODE	82:2	82:2	11	jcd
ASSIGN_OP	82:6	82:6	9	=
LEAF_NODE	82:6	82:6	10	=
RVAL	82:8	82:8	9	g_hash_table_lookup ( js -> iq_callbacks , id )
FUNCTION_CALL	82:8	82:48	10	g_hash_table_lookup ( js -> iq_callbacks , id )
CALLEE	82:8	82:8	11	g_hash_table_lookup
LEAF_NODE	82:8	82:8	12	g_hash_table_lookup
LEAF_NODE	82:27	82:27	11	(
ARGUMENT	82:28	82:28	11	js -> iq_callbacks
FIELD	82:28	82:32	12	js -> iq_callbacks
LEAF_NODE	82:28	82:28	13	js
LEAF_NODE	82:30	82:30	13	->
LEAF_NODE	82:32	82:32	13	iq_callbacks
LEAF_NODE	82:44	82:44	11	,
ARGUMENT	82:46	82:46	11	id
FIELD	82:46	82:46	12	id
LEAF_NODE	82:46	82:46	13	id
LEAF_NODE	82:48	82:48	11	)
LEAF_NODE	82:49	82:49	7	;
SELECTION	83:2	83:11	6	
KEYWORD	83:2	83:2	7	if
LEAF_NODE	83:2	83:2	8	if
LEAF_NODE	83:5	83:5	7	(
CONDITION	83:6	83:6	7	jcd
EXPR	83:6	83:6	8	jcd
FIELD	83:6	83:6	9	jcd
LEAF_NODE	83:6	83:6	10	jcd
LEAF_NODE	83:9	83:9	7	)
STATEMENTS	83:11	99:2	7	
LEAF_NODE	83:11	83:11	8	{
STATEMENTS	84:3	89:5	8	
SELECTION	84:3	84:63	9	
KEYWORD	84:3	84:3	10	if
LEAF_NODE	84:3	84:3	11	if
LEAF_NODE	84:6	84:6	10	(
CONDITION	84:7	84:7	10	does_reply_from_match_request_to ( js , jcd -> to , from_id )
EXPR	84:7	84:7	11	does_reply_from_match_request_to ( js , jcd -> to , from_id )
FUNCTION_CALL	84:7	84:60	12	does_reply_from_match_request_to ( js , jcd -> to , from_id )
CALLEE	84:7	84:7	13	does_reply_from_match_request_to
LEAF_NODE	84:7	84:7	14	does_reply_from_match_request_to
LEAF_NODE	84:39	84:39	13	(
ARGUMENT	84:40	84:40	13	js
FIELD	84:40	84:40	14	js
LEAF_NODE	84:40	84:40	15	js
LEAF_NODE	84:42	84:42	13	,
ARGUMENT	84:44	84:44	13	jcd -> to
FIELD	84:44	84:49	14	jcd -> to
LEAF_NODE	84:44	84:44	15	jcd
LEAF_NODE	84:47	84:47	15	->
LEAF_NODE	84:49	84:49	15	to
LEAF_NODE	84:51	84:51	13	,
ARGUMENT	84:53	84:53	13	from_id
FIELD	84:53	84:53	14	from_id
LEAF_NODE	84:53	84:53	15	from_id
LEAF_NODE	84:60	84:60	13	)
LEAF_NODE	84:61	84:61	10	)
STATEMENTS	84:63	89:3	10	
LEAF_NODE	84:63	84:63	11	{
STATEMENTS	85:4	88:4	11	
EXPR_STATEMENT	85:4	85:56	12	jcd -> callback ( js , from , type , id , packet , jcd -> data ) ;
EXPR	85:4	85:4	13	jcd -> callback ( js , from , type , id , packet , jcd -> data )
FUNCTION_CALL	85:4	85:55	14	jcd -> callback ( js , from , type , id , packet , jcd -> data )
CALLEE	85:4	85:9	15	jcd -> callback
LEAF_NODE	85:4	85:4	16	jcd
LEAF_NODE	85:7	85:7	16	->
LEAF_NODE	85:9	85:9	16	callback
LEAF_NODE	85:17	85:17	15	(
ARGUMENT	85:18	85:18	15	js
FIELD	85:18	85:18	16	js
LEAF_NODE	85:18	85:18	17	js
LEAF_NODE	85:20	85:20	15	,
ARGUMENT	85:22	85:22	15	from
FIELD	85:22	85:22	16	from
LEAF_NODE	85:22	85:22	17	from
LEAF_NODE	85:26	85:26	15	,
ARGUMENT	85:28	85:28	15	type
FIELD	85:28	85:28	16	type
LEAF_NODE	85:28	85:28	17	type
LEAF_NODE	85:32	85:32	15	,
ARGUMENT	85:34	85:34	15	id
FIELD	85:34	85:34	16	id
LEAF_NODE	85:34	85:34	17	id
LEAF_NODE	85:36	85:36	15	,
ARGUMENT	85:38	85:38	15	packet
FIELD	85:38	85:38	16	packet
LEAF_NODE	85:38	85:38	17	packet
LEAF_NODE	85:44	85:44	15	,
ARGUMENT	85:46	85:46	15	jcd -> data
FIELD	85:46	85:51	16	jcd -> data
LEAF_NODE	85:46	85:46	17	jcd
LEAF_NODE	85:49	85:49	17	->
LEAF_NODE	85:51	85:51	17	data
LEAF_NODE	85:55	85:55	15	)
LEAF_NODE	85:56	85:56	13	;
EXPR_STATEMENT	86:4	86:43	12	jabber_iq_remove_callback_by_id ( js , id ) ;
EXPR	86:4	86:4	13	jabber_iq_remove_callback_by_id ( js , id )
FUNCTION_CALL	86:4	86:42	14	jabber_iq_remove_callback_by_id ( js , id )
CALLEE	86:4	86:4	15	jabber_iq_remove_callback_by_id
LEAF_NODE	86:4	86:4	16	jabber_iq_remove_callback_by_id
LEAF_NODE	86:35	86:35	15	(
ARGUMENT	86:36	86:36	15	js
FIELD	86:36	86:36	16	js
LEAF_NODE	86:36	86:36	17	js
LEAF_NODE	86:38	86:38	15	,
ARGUMENT	86:40	86:40	15	id
FIELD	86:40	86:40	16	id
LEAF_NODE	86:40	86:40	17	id
LEAF_NODE	86:42	86:42	15	)
LEAF_NODE	86:43	86:43	13	;
EXPR_STATEMENT	87:4	87:27	12	jabber_id_free ( from_id ) ;
EXPR	87:4	87:4	13	jabber_id_free ( from_id )
FUNCTION_CALL	87:4	87:26	14	jabber_id_free ( from_id )
CALLEE	87:4	87:4	15	jabber_id_free
LEAF_NODE	87:4	87:4	16	jabber_id_free
LEAF_NODE	87:18	87:18	15	(
ARGUMENT	87:19	87:19	15	from_id
FIELD	87:19	87:19	16	from_id
LEAF_NODE	87:19	87:19	17	from_id
LEAF_NODE	87:26	87:26	15	)
LEAF_NODE	87:27	87:27	13	;
JUMP_STATEMENT	88:4	88:10	12	return DESTINATION ;
KEYWORD	88:4	88:4	13	return
LEAF_NODE	88:4	88:4	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	88:10	88:10	13	;
LEAF_NODE	89:3	89:3	11	}
SELECTION	89:5	89:10	9	
KEYWORD	89:5	89:5	10	else
LEAF_NODE	89:5	89:5	11	else
STATEMENTS	89:10	98:3	10	
LEAF_NODE	89:10	89:10	11	{
STATEMENTS	90:4	97:4	11	
SIMPLE_DECL	90:4	90:21	12	char * expected_to ;
VAR_DECL	90:4	90:10	13	char * expected_to
TYPE	90:4	90:9	14	char *
TYPE_NAME	90:4	90:4	15	char
LEAF_NODE	90:4	90:4	16	char
POINTER	90:9	90:9	15	*
LEAF_NODE	90:9	90:9	16	*
NAME	90:10	90:10	14	expected_to
LEAF_NODE	90:10	90:10	15	expected_to
LEAF_NODE	90:21	90:21	13	;
SELECTION	91:4	91:17	12	
KEYWORD	91:4	91:4	13	if
LEAF_NODE	91:4	91:4	14	if
LEAF_NODE	91:7	91:7	13	(
CONDITION	91:8	91:8	13	jcd -> to
EXPR	91:8	91:8	14	jcd -> to
FIELD	91:8	91:13	15	jcd -> to
LEAF_NODE	91:8	91:8	16	jcd
LEAF_NODE	91:11	91:11	16	->
LEAF_NODE	91:13	91:13	16	to
LEAF_NODE	91:15	91:15	13	)
STATEMENTS	91:17	93:4	13	
LEAF_NODE	91:17	91:17	14	{
STATEMENTS	92:5	92:5	14	
EXPR_STATEMENT	92:5	92:50	15	expected_to = jabber_id_get_full_jid ( jcd -> to ) ;
EXPR	92:5	92:5	16	expected_to = jabber_id_get_full_jid ( jcd -> to )
ASSIGN	92:5	92:19	17	expected_to = jabber_id_get_full_jid ( jcd -> to )
LVAL	92:5	92:5	18	expected_to
FIELD	92:5	92:5	19	expected_to
LEAF_NODE	92:5	92:5	20	expected_to
ASSIGN_OP	92:17	92:17	18	=
LEAF_NODE	92:17	92:17	19	=
RVAL	92:19	92:19	18	jabber_id_get_full_jid ( jcd -> to )
FUNCTION_CALL	92:19	92:49	19	jabber_id_get_full_jid ( jcd -> to )
CALLEE	92:19	92:19	20	jabber_id_get_full_jid
LEAF_NODE	92:19	92:19	21	jabber_id_get_full_jid
LEAF_NODE	92:41	92:41	20	(
ARGUMENT	92:42	92:42	20	jcd -> to
FIELD	92:42	92:47	21	jcd -> to
LEAF_NODE	92:42	92:42	22	jcd
LEAF_NODE	92:45	92:45	22	->
LEAF_NODE	92:47	92:47	22	to
LEAF_NODE	92:49	92:49	20	)
LEAF_NODE	92:50	92:50	16	;
LEAF_NODE	93:4	93:4	14	}
SELECTION	93:6	93:11	12	
KEYWORD	93:6	93:6	13	else
LEAF_NODE	93:6	93:6	14	else
STATEMENTS	93:11	95:4	13	
LEAF_NODE	93:11	93:11	14	{
STATEMENTS	94:5	94:5	14	
EXPR_STATEMENT	94:5	94:51	15	expected_to = jabber_id_get_bare_jid ( js -> user ) ;
EXPR	94:5	94:5	16	expected_to = jabber_id_get_bare_jid ( js -> user )
ASSIGN	94:5	94:19	17	expected_to = jabber_id_get_bare_jid ( js -> user )
LVAL	94:5	94:5	18	expected_to
FIELD	94:5	94:5	19	expected_to
LEAF_NODE	94:5	94:5	20	expected_to
ASSIGN_OP	94:17	94:17	18	=
LEAF_NODE	94:17	94:17	19	=
RVAL	94:19	94:19	18	jabber_id_get_bare_jid ( js -> user )
FUNCTION_CALL	94:19	94:50	19	jabber_id_get_bare_jid ( js -> user )
CALLEE	94:19	94:19	20	jabber_id_get_bare_jid
LEAF_NODE	94:19	94:19	21	jabber_id_get_bare_jid
LEAF_NODE	94:41	94:41	20	(
ARGUMENT	94:42	94:42	20	js -> user
FIELD	94:42	94:46	21	js -> user
LEAF_NODE	94:42	94:42	22	js
LEAF_NODE	94:44	94:44	22	->
LEAF_NODE	94:46	94:46	22	user
LEAF_NODE	94:50	94:50	20	)
LEAF_NODE	94:51	94:51	16	;
LEAF_NODE	95:4	95:4	14	}
EXPR_STATEMENT	96:4	96:137	12	purple_debug_error ( "jabber" , "Got a result iq with id %s from %s instead of expected %s!\n" , id , from ? from : "(null)" , expected_to ) ;
EXPR	96:4	96:4	13	purple_debug_error ( "jabber" , "Got a result iq with id %s from %s instead of expected %s!\n" , id , from ? from : "(null)" , expected_to )
FUNCTION_CALL	96:4	96:136	14	purple_debug_error ( "jabber" , "Got a result iq with id %s from %s instead of expected %s!\n" , id , from ? from : "(null)" , expected_to )
CALLEE	96:4	96:4	15	purple_debug_error
LEAF_NODE	96:4	96:4	16	purple_debug_error
LEAF_NODE	96:22	96:22	15	(
ARGUMENT	96:23	96:23	15	"jabber"
FIELD	96:23	96:23	16	"jabber"
LEAF_NODE	96:23	96:23	17	"jabber"
LEAF_NODE	96:31	96:31	15	,
ARGUMENT	96:33	96:33	15	"Got a result iq with id %s from %s instead of expected %s!\n"
FIELD	96:33	96:33	16	"Got a result iq with id %s from %s instead of expected %s!\n"
LEAF_NODE	96:33	96:33	17	"Got a result iq with id %s from %s instead of expected %s!\n"
LEAF_NODE	96:95	96:95	15	,
ARGUMENT	96:97	96:97	15	id
FIELD	96:97	96:97	16	id
LEAF_NODE	96:97	96:97	17	id
LEAF_NODE	96:99	96:99	15	,
ARGUMENT	96:101	96:101	15	from ? from : "(null)"
COND_EXPR	96:101	96:115	16	from ? from : "(null)"
CONDITION	96:101	96:101	17	from
FIELD	96:101	96:101	18	from
LEAF_NODE	96:101	96:101	19	from
LEAF_NODE	96:106	96:106	17	?
EXPR	96:108	96:108	17	from
FIELD	96:108	96:108	18	from
LEAF_NODE	96:108	96:108	19	from
LEAF_NODE	96:113	96:113	17	:
FIELD	96:115	96:115	17	"(null)"
LEAF_NODE	96:115	96:115	18	"(null)"
LEAF_NODE	96:123	96:123	15	,
ARGUMENT	96:125	96:125	15	expected_to
FIELD	96:125	96:125	16	expected_to
LEAF_NODE	96:125	96:125	17	expected_to
LEAF_NODE	96:136	96:136	15	)
LEAF_NODE	96:137	96:137	13	;
EXPR_STATEMENT	97:4	97:23	12	g_free ( expected_to ) ;
EXPR	97:4	97:4	13	g_free ( expected_to )
FUNCTION_CALL	97:4	97:22	14	g_free ( expected_to )
CALLEE	97:4	97:4	15	g_free
LEAF_NODE	97:4	97:4	16	g_free
LEAF_NODE	97:10	97:10	15	(
ARGUMENT	97:11	97:11	15	expected_to
FIELD	97:11	97:11	16	expected_to
LEAF_NODE	97:11	97:11	17	expected_to
LEAF_NODE	97:22	97:22	15	)
LEAF_NODE	97:23	97:23	13	;
LEAF_NODE	98:3	98:3	11	}
LEAF_NODE	99:2	99:2	8	}
LEAF_NODE	100:1	100:1	5	}
SELECTION	105:1	105:53	3	
KEYWORD	105:1	105:1	4	if
LEAF_NODE	105:1	105:1	5	if
LEAF_NODE	105:3	105:3	4	(
CONDITION	105:4	105:4	4	child && ( xmlns = xmlnode_get_namespace ( child ) )
EXPR	105:4	105:4	5	child && ( xmlns = xmlnode_get_namespace ( child ) )
AND	105:4	105:13	6	child && ( xmlns = xmlnode_get_namespace ( child ) )
EXPR	105:4	105:4	7	child
FIELD	105:4	105:4	8	child
LEAF_NODE	105:4	105:4	9	child
LEAF_NODE	105:10	105:10	7	&&
EXPR	105:13	105:50	7	( xmlns = xmlnode_get_namespace ( child ) )
LEAF_NODE	105:13	105:13	8	(
ASSIGN	105:14	105:22	8	xmlns = xmlnode_get_namespace ( child )
LVAL	105:14	105:14	9	xmlns
FIELD	105:14	105:14	10	xmlns
LEAF_NODE	105:14	105:14	11	xmlns
ASSIGN_OP	105:20	105:20	9	=
LEAF_NODE	105:20	105:20	10	=
RVAL	105:22	105:22	9	xmlnode_get_namespace ( child )
FUNCTION_CALL	105:22	105:49	10	xmlnode_get_namespace ( child )
CALLEE	105:22	105:22	11	xmlnode_get_namespace
LEAF_NODE	105:22	105:22	12	xmlnode_get_namespace
LEAF_NODE	105:43	105:43	11	(
ARGUMENT	105:44	105:44	11	child
FIELD	105:44	105:44	12	child
LEAF_NODE	105:44	105:44	13	child
LEAF_NODE	105:49	105:49	11	)
LEAF_NODE	105:50	105:50	8	)
LEAF_NODE	105:51	105:51	4	)
STATEMENTS	105:53	123:1	4	
LEAF_NODE	105:53	105:53	5	{
STATEMENTS	106:2	118:2	5	
SIMPLE_DECL	106:2	106:58	6	char * key ; key = g_strdup_printf ( "%s %s" , child -> name , xmlns ) ;
VAR_DECL	106:2	106:8	7	char * key ; key = g_strdup_printf ( "%s %s" , child -> name , xmlns )
TYPE	106:2	106:7	8	char *
TYPE_NAME	106:2	106:2	9	char
LEAF_NODE	106:2	106:2	10	char
POINTER	106:7	106:7	9	*
LEAF_NODE	106:7	106:7	10	*
NAME	106:8	106:8	8	key
LEAF_NODE	106:8	106:8	9	key
LEAF_NODE	0:0	0:0	8	;
INIT	106:8	106:8	8	key = g_strdup_printf ( "%s %s" , child -> name , xmlns )
ASSIGN	106:8	106:14	9	key = g_strdup_printf ( "%s %s" , child -> name , xmlns )
LVAL	106:8	106:8	10	key
NAME	106:8	106:8	11	key
LEAF_NODE	106:8	106:8	12	key
ASSIGN_OP	106:12	106:12	10	=
LEAF_NODE	106:12	106:12	11	=
RVAL	106:14	106:14	10	g_strdup_printf ( "%s %s" , child -> name , xmlns )
FUNCTION_CALL	106:14	106:57	11	g_strdup_printf ( "%s %s" , child -> name , xmlns )
CALLEE	106:14	106:14	12	g_strdup_printf
LEAF_NODE	106:14	106:14	13	g_strdup_printf
LEAF_NODE	106:29	106:29	12	(
ARGUMENT	106:30	106:30	12	"%s %s"
FIELD	106:30	106:30	13	"%s %s"
LEAF_NODE	106:30	106:30	14	"%s %s"
LEAF_NODE	106:37	106:37	12	,
ARGUMENT	106:39	106:39	12	child -> name
FIELD	106:39	106:46	13	child -> name
LEAF_NODE	106:39	106:39	14	child
LEAF_NODE	106:44	106:44	14	->
LEAF_NODE	106:46	106:46	14	name
LEAF_NODE	106:50	106:50	12	,
ARGUMENT	106:52	106:52	12	xmlns
FIELD	106:52	106:52	13	xmlns
LEAF_NODE	106:52	106:52	14	xmlns
LEAF_NODE	106:57	106:57	12	)
LEAF_NODE	106:58	106:58	7	;
SIMPLE_DECL	107:2	107:62	6	JabberIqHandler * jih ; jih = g_hash_table_lookup ( iq_handlers , key ) ;
VAR_DECL	107:2	107:19	7	JabberIqHandler * jih ; jih = g_hash_table_lookup ( iq_handlers , key )
TYPE	107:2	107:18	8	JabberIqHandler *
TYPE_NAME	107:2	107:2	9	JabberIqHandler
LEAF_NODE	107:2	107:2	10	JabberIqHandler
POINTER	107:18	107:18	9	*
LEAF_NODE	107:18	107:18	10	*
NAME	107:19	107:19	8	jih
LEAF_NODE	107:19	107:19	9	jih
LEAF_NODE	0:0	0:0	8	;
INIT	107:19	107:19	8	jih = g_hash_table_lookup ( iq_handlers , key )
ASSIGN	107:19	107:25	9	jih = g_hash_table_lookup ( iq_handlers , key )
LVAL	107:19	107:19	10	jih
NAME	107:19	107:19	11	jih
LEAF_NODE	107:19	107:19	12	jih
ASSIGN_OP	107:23	107:23	10	=
LEAF_NODE	107:23	107:23	11	=
RVAL	107:25	107:25	10	g_hash_table_lookup ( iq_handlers , key )
FUNCTION_CALL	107:25	107:61	11	g_hash_table_lookup ( iq_handlers , key )
CALLEE	107:25	107:25	12	g_hash_table_lookup
LEAF_NODE	107:25	107:25	13	g_hash_table_lookup
LEAF_NODE	107:44	107:44	12	(
ARGUMENT	107:45	107:45	12	iq_handlers
FIELD	107:45	107:45	13	iq_handlers
LEAF_NODE	107:45	107:45	14	iq_handlers
LEAF_NODE	107:56	107:56	12	,
ARGUMENT	107:58	107:58	12	key
FIELD	107:58	107:58	13	key
LEAF_NODE	107:58	107:58	14	key
LEAF_NODE	107:61	107:61	12	)
LEAF_NODE	107:62	107:62	7	;
SIMPLE_DECL	108:2	108:80	6	int signal_ref ; signal_ref = GPOINTER_TO_INT ( g_hash_table_lookup ( signal_iq_handlers , key ) ) ;
VAR_DECL	108:2	108:6	7	int signal_ref ; signal_ref = GPOINTER_TO_INT ( g_hash_table_lookup ( signal_iq_handlers , key ) )
TYPE	108:2	108:2	8	int
TYPE_NAME	108:2	108:2	9	int
LEAF_NODE	108:2	108:2	10	int
NAME	108:6	108:6	8	signal_ref
LEAF_NODE	108:6	108:6	9	signal_ref
LEAF_NODE	0:0	0:0	8	;
INIT	108:6	108:6	8	signal_ref = GPOINTER_TO_INT ( g_hash_table_lookup ( signal_iq_handlers , key ) )
ASSIGN	108:6	108:19	9	signal_ref = GPOINTER_TO_INT ( g_hash_table_lookup ( signal_iq_handlers , key ) )
LVAL	108:6	108:6	10	signal_ref
NAME	108:6	108:6	11	signal_ref
LEAF_NODE	108:6	108:6	12	signal_ref
ASSIGN_OP	108:17	108:17	10	=
LEAF_NODE	108:17	108:17	11	=
RVAL	108:19	108:19	10	GPOINTER_TO_INT ( g_hash_table_lookup ( signal_iq_handlers , key ) )
FUNCTION_CALL	108:19	108:79	11	GPOINTER_TO_INT ( g_hash_table_lookup ( signal_iq_handlers , key ) )
CALLEE	108:19	108:19	12	GPOINTER_TO_INT
LEAF_NODE	108:19	108:19	13	GPOINTER_TO_INT
LEAF_NODE	108:34	108:34	12	(
ARGUMENT	108:35	108:35	12	g_hash_table_lookup ( signal_iq_handlers , key )
FUNCTION_CALL	108:35	108:78	13	g_hash_table_lookup ( signal_iq_handlers , key )
CALLEE	108:35	108:35	14	g_hash_table_lookup
LEAF_NODE	108:35	108:35	15	g_hash_table_lookup
LEAF_NODE	108:54	108:54	14	(
ARGUMENT	108:55	108:55	14	signal_iq_handlers
FIELD	108:55	108:55	15	signal_iq_handlers
LEAF_NODE	108:55	108:55	16	signal_iq_handlers
LEAF_NODE	108:73	108:73	14	,
ARGUMENT	108:75	108:75	14	key
FIELD	108:75	108:75	15	key
LEAF_NODE	108:75	108:75	16	key
LEAF_NODE	108:78	108:78	14	)
LEAF_NODE	108:79	108:79	12	)
LEAF_NODE	108:80	108:80	7	;
EXPR_STATEMENT	109:2	109:13	6	g_free ( key ) ;
EXPR	109:2	109:2	7	g_free ( key )
FUNCTION_CALL	109:2	109:12	8	g_free ( key )
CALLEE	109:2	109:2	9	g_free
LEAF_NODE	109:2	109:2	10	g_free
LEAF_NODE	109:8	109:8	9	(
ARGUMENT	109:9	109:9	9	key
FIELD	109:9	109:9	10	key
LEAF_NODE	109:9	109:9	11	key
LEAF_NODE	109:12	109:12	9	)
LEAF_NODE	109:13	109:13	7	;
SELECTION	110:2	110:22	6	
KEYWORD	110:2	110:2	7	if
LEAF_NODE	110:2	110:2	8	if
LEAF_NODE	110:5	110:5	7	(
CONDITION	110:6	110:6	7	signal_ref > 0
EXPR	110:6	110:19	8	signal_ref > 0
FIELD	110:6	110:6	9	signal_ref
LEAF_NODE	110:6	110:6	10	signal_ref
REL_OPERATOR	110:17	110:17	9	>
LEAF_NODE	110:17	110:17	10	>
FIELD	110:19	110:19	9	0
LEAF_NODE	110:19	110:19	10	0
LEAF_NODE	110:20	110:20	7	)
STATEMENTS	110:22	117:2	7	
LEAF_NODE	110:22	110:22	8	{
STATEMENTS	111:3	113:3	8	
EXPR_STATEMENT	111:3	112:39	9	signal_return = GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-watched-iq" , js -> gc , iq_type , id , from , child ) ) ;
EXPR	111:3	111:3	10	signal_return = GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-watched-iq" , js -> gc , iq_type , id , from , child ) )
ASSIGN	111:3	111:19	11	signal_return = GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-watched-iq" , js -> gc , iq_type , id , from , child ) )
LVAL	111:3	111:3	12	signal_return
FIELD	111:3	111:3	13	signal_return
LEAF_NODE	111:3	111:3	14	signal_return
ASSIGN_OP	111:17	111:17	12	=
LEAF_NODE	111:17	111:17	13	=
RVAL	111:19	111:19	12	GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-watched-iq" , js -> gc , iq_type , id , from , child ) )
FUNCTION_CALL	111:19	112:38	13	GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-watched-iq" , js -> gc , iq_type , id , from , child ) )
CALLEE	111:19	111:19	14	GPOINTER_TO_INT
LEAF_NODE	111:19	111:19	15	GPOINTER_TO_INT
LEAF_NODE	111:34	111:34	14	(
ARGUMENT	111:35	111:35	14	purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-watched-iq" , js -> gc , iq_type , id , from , child )
FUNCTION_CALL	111:35	112:37	15	purple_signal_emit_return_1 ( purple_connection_get_prpl ( js -> gc ) , "jabber-watched-iq" , js -> gc , iq_type , id , from , child )
CALLEE	111:35	111:35	16	purple_signal_emit_return_1
LEAF_NODE	111:35	111:35	17	purple_signal_emit_return_1
LEAF_NODE	111:62	111:62	16	(
ARGUMENT	111:63	111:63	16	purple_connection_get_prpl ( js -> gc )
FUNCTION_CALL	111:63	111:96	17	purple_connection_get_prpl ( js -> gc )
CALLEE	111:63	111:63	18	purple_connection_get_prpl
LEAF_NODE	111:63	111:63	19	purple_connection_get_prpl
LEAF_NODE	111:89	111:89	18	(
ARGUMENT	111:90	111:90	18	js -> gc
FIELD	111:90	111:94	19	js -> gc
LEAF_NODE	111:90	111:90	20	js
LEAF_NODE	111:92	111:92	20	->
LEAF_NODE	111:94	111:94	20	gc
LEAF_NODE	111:96	111:96	18	)
LEAF_NODE	111:97	111:97	16	,
ARGUMENT	111:99	111:99	16	"jabber-watched-iq"
FIELD	111:99	111:99	17	"jabber-watched-iq"
LEAF_NODE	111:99	111:99	18	"jabber-watched-iq"
LEAF_NODE	111:118	111:118	16	,
ARGUMENT	112:5	112:5	16	js -> gc
FIELD	112:5	112:9	17	js -> gc
LEAF_NODE	112:5	112:5	18	js
LEAF_NODE	112:7	112:7	18	->
LEAF_NODE	112:9	112:9	18	gc
LEAF_NODE	112:11	112:11	16	,
ARGUMENT	112:13	112:13	16	iq_type
FIELD	112:13	112:13	17	iq_type
LEAF_NODE	112:13	112:13	18	iq_type
LEAF_NODE	112:20	112:20	16	,
ARGUMENT	112:22	112:22	16	id
FIELD	112:22	112:22	17	id
LEAF_NODE	112:22	112:22	18	id
LEAF_NODE	112:24	112:24	16	,
ARGUMENT	112:26	112:26	16	from
FIELD	112:26	112:26	17	from
LEAF_NODE	112:26	112:26	18	from
LEAF_NODE	112:30	112:30	16	,
ARGUMENT	112:32	112:32	16	child
FIELD	112:32	112:32	17	child
LEAF_NODE	112:32	112:32	18	child
LEAF_NODE	112:37	112:37	16	)
LEAF_NODE	112:38	112:38	14	)
LEAF_NODE	112:39	112:39	10	;
SELECTION	113:3	113:22	9	
KEYWORD	113:3	113:3	10	if
LEAF_NODE	113:3	113:3	11	if
LEAF_NODE	113:6	113:6	10	(
CONDITION	113:7	113:7	10	signal_return
EXPR	113:7	113:7	11	signal_return
FIELD	113:7	113:7	12	signal_return
LEAF_NODE	113:7	113:7	13	signal_return
LEAF_NODE	113:20	113:20	10	)
STATEMENTS	113:22	116:3	10	
LEAF_NODE	113:22	113:22	11	{
STATEMENTS	114:4	115:4	11	
EXPR_STATEMENT	114:4	114:27	12	jabber_id_free ( from_id ) ;
EXPR	114:4	114:4	13	jabber_id_free ( from_id )
FUNCTION_CALL	114:4	114:26	14	jabber_id_free ( from_id )
CALLEE	114:4	114:4	15	jabber_id_free
LEAF_NODE	114:4	114:4	16	jabber_id_free
LEAF_NODE	114:18	114:18	15	(
ARGUMENT	114:19	114:19	15	from_id
FIELD	114:19	114:19	16	from_id
LEAF_NODE	114:19	114:19	17	from_id
LEAF_NODE	114:26	114:26	15	)
LEAF_NODE	114:27	114:27	13	;
JUMP_STATEMENT	115:4	115:10	12	return DESTINATION ;
KEYWORD	115:4	115:4	13	return
LEAF_NODE	115:4	115:4	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	115:10	115:10	13	;
LEAF_NODE	116:3	116:3	11	}
LEAF_NODE	117:2	117:2	8	}
SELECTION	118:2	118:10	6	
KEYWORD	118:2	118:2	7	if
LEAF_NODE	118:2	118:2	8	if
LEAF_NODE	118:4	118:4	7	(
CONDITION	118:5	118:5	7	jih
EXPR	118:5	118:5	8	jih
FIELD	118:5	118:5	9	jih
LEAF_NODE	118:5	118:5	10	jih
LEAF_NODE	118:8	118:8	7	)
STATEMENTS	118:10	122:2	7	
LEAF_NODE	118:10	118:10	8	{
STATEMENTS	119:3	121:3	8	
EXPR_STATEMENT	119:3	119:33	9	jih ( js , from , type , id , child ) ;
EXPR	119:3	119:3	10	jih ( js , from , type , id , child )
FUNCTION_CALL	119:3	119:32	11	jih ( js , from , type , id , child )
CALLEE	119:3	119:3	12	jih
LEAF_NODE	119:3	119:3	13	jih
LEAF_NODE	119:6	119:6	12	(
ARGUMENT	119:7	119:7	12	js
FIELD	119:7	119:7	13	js
LEAF_NODE	119:7	119:7	14	js
LEAF_NODE	119:9	119:9	12	,
ARGUMENT	119:11	119:11	12	from
FIELD	119:11	119:11	13	from
LEAF_NODE	119:11	119:11	14	from
LEAF_NODE	119:15	119:15	12	,
ARGUMENT	119:17	119:17	12	type
FIELD	119:17	119:17	13	type
LEAF_NODE	119:17	119:17	14	type
LEAF_NODE	119:21	119:21	12	,
ARGUMENT	119:23	119:23	12	id
FIELD	119:23	119:23	13	id
LEAF_NODE	119:23	119:23	14	id
LEAF_NODE	119:25	119:25	12	,
ARGUMENT	119:27	119:27	12	child
FIELD	119:27	119:27	13	child
LEAF_NODE	119:27	119:27	14	child
LEAF_NODE	119:32	119:32	12	)
LEAF_NODE	119:33	119:33	10	;
EXPR_STATEMENT	120:3	120:26	9	jabber_id_free ( from_id ) ;
EXPR	120:3	120:3	10	jabber_id_free ( from_id )
FUNCTION_CALL	120:3	120:25	11	jabber_id_free ( from_id )
CALLEE	120:3	120:3	12	jabber_id_free
LEAF_NODE	120:3	120:3	13	jabber_id_free
LEAF_NODE	120:17	120:17	12	(
ARGUMENT	120:18	120:18	12	from_id
FIELD	120:18	120:18	13	from_id
LEAF_NODE	120:18	120:18	14	from_id
LEAF_NODE	120:25	120:25	12	)
LEAF_NODE	120:26	120:26	10	;
JUMP_STATEMENT	121:3	121:9	9	return DESTINATION ;
KEYWORD	121:3	121:3	10	return
LEAF_NODE	121:3	121:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	121:9	121:9	10	;
LEAF_NODE	122:2	122:2	8	}
LEAF_NODE	123:1	123:1	5	}
EXPR_STATEMENT	124:1	124:61	3	purple_debug_misc ( "jabber" , "Unhandled IQ with id %s\n" , id ) ;
EXPR	124:1	124:1	4	purple_debug_misc ( "jabber" , "Unhandled IQ with id %s\n" , id )
FUNCTION_CALL	124:1	124:60	5	purple_debug_misc ( "jabber" , "Unhandled IQ with id %s\n" , id )
CALLEE	124:1	124:1	6	purple_debug_misc
LEAF_NODE	124:1	124:1	7	purple_debug_misc
LEAF_NODE	124:18	124:18	6	(
ARGUMENT	124:19	124:19	6	"jabber"
FIELD	124:19	124:19	7	"jabber"
LEAF_NODE	124:19	124:19	8	"jabber"
LEAF_NODE	124:27	124:27	6	,
ARGUMENT	124:29	124:29	6	"Unhandled IQ with id %s\n"
FIELD	124:29	124:29	7	"Unhandled IQ with id %s\n"
LEAF_NODE	124:29	124:29	8	"Unhandled IQ with id %s\n"
LEAF_NODE	124:56	124:56	6	,
ARGUMENT	124:58	124:58	6	id
FIELD	124:58	124:58	7	id
LEAF_NODE	124:58	124:58	8	id
LEAF_NODE	124:60	124:60	6	)
LEAF_NODE	124:61	124:61	4	;
SELECTION	126:1	126:52	3	
KEYWORD	126:1	126:1	4	if
LEAF_NODE	126:1	126:1	5	if
LEAF_NODE	126:3	126:3	4	(
CONDITION	126:4	126:4	4	type == JABBER_IQ_SET || type == JABBER_IQ_GET
EXPR	126:4	126:4	5	type == JABBER_IQ_SET || type == JABBER_IQ_GET
OR	126:4	126:29	6	type == JABBER_IQ_SET || type == JABBER_IQ_GET
EXPR	126:4	126:12	7	type == JABBER_IQ_SET
FIELD	126:4	126:4	8	type
LEAF_NODE	126:4	126:4	9	type
EQ_OPERATOR	126:9	126:9	8	==
LEAF_NODE	126:9	126:9	9	==
FIELD	126:12	126:12	8	JABBER_IQ_SET
LEAF_NODE	126:12	126:12	9	JABBER_IQ_SET
LEAF_NODE	126:26	126:26	7	||
EXPR	126:29	126:37	7	type == JABBER_IQ_GET
FIELD	126:29	126:29	8	type
LEAF_NODE	126:29	126:29	9	type
EQ_OPERATOR	126:34	126:34	8	==
LEAF_NODE	126:34	126:34	9	==
FIELD	126:37	126:37	8	JABBER_IQ_GET
LEAF_NODE	126:37	126:37	9	JABBER_IQ_GET
LEAF_NODE	126:50	126:50	4	)
STATEMENTS	126:52	141:1	4	
LEAF_NODE	126:52	126:52	5	{
STATEMENTS	127:2	140:2	5	
SIMPLE_DECL	127:2	127:51	6	JabberIq * iq ; iq = jabber_iq_new ( js , JABBER_IQ_ERROR ) ;
VAR_DECL	127:2	127:12	7	JabberIq * iq ; iq = jabber_iq_new ( js , JABBER_IQ_ERROR )
TYPE	127:2	127:11	8	JabberIq *
TYPE_NAME	127:2	127:2	9	JabberIq
LEAF_NODE	127:2	127:2	10	JabberIq
POINTER	127:11	127:11	9	*
LEAF_NODE	127:11	127:11	10	*
NAME	127:12	127:12	8	iq
LEAF_NODE	127:12	127:12	9	iq
LEAF_NODE	0:0	0:0	8	;
INIT	127:12	127:12	8	iq = jabber_iq_new ( js , JABBER_IQ_ERROR )
ASSIGN	127:12	127:17	9	iq = jabber_iq_new ( js , JABBER_IQ_ERROR )
LVAL	127:12	127:12	10	iq
NAME	127:12	127:12	11	iq
LEAF_NODE	127:12	127:12	12	iq
ASSIGN_OP	127:15	127:15	10	=
LEAF_NODE	127:15	127:15	11	=
RVAL	127:17	127:17	10	jabber_iq_new ( js , JABBER_IQ_ERROR )
FUNCTION_CALL	127:17	127:50	11	jabber_iq_new ( js , JABBER_IQ_ERROR )
CALLEE	127:17	127:17	12	jabber_iq_new
LEAF_NODE	127:17	127:17	13	jabber_iq_new
LEAF_NODE	127:30	127:30	12	(
ARGUMENT	127:31	127:31	12	js
FIELD	127:31	127:31	13	js
LEAF_NODE	127:31	127:31	14	js
LEAF_NODE	127:33	127:33	12	,
ARGUMENT	127:35	127:35	12	JABBER_IQ_ERROR
FIELD	127:35	127:35	13	JABBER_IQ_ERROR
LEAF_NODE	127:35	127:35	14	JABBER_IQ_ERROR
LEAF_NODE	127:50	127:50	12	)
LEAF_NODE	127:51	127:51	7	;
EXPR_STATEMENT	128:2	128:24	6	xmlnode_free ( iq -> node ) ;
EXPR	128:2	128:2	7	xmlnode_free ( iq -> node )
FUNCTION_CALL	128:2	128:23	8	xmlnode_free ( iq -> node )
CALLEE	128:2	128:2	9	xmlnode_free
LEAF_NODE	128:2	128:2	10	xmlnode_free
LEAF_NODE	128:14	128:14	9	(
ARGUMENT	128:15	128:15	9	iq -> node
FIELD	128:15	128:19	10	iq -> node
LEAF_NODE	128:15	128:15	11	iq
LEAF_NODE	128:17	128:17	11	->
LEAF_NODE	128:19	128:19	11	node
LEAF_NODE	128:23	128:23	9	)
LEAF_NODE	128:24	128:24	7	;
EXPR_STATEMENT	129:2	129:33	6	iq -> node = xmlnode_copy ( packet ) ;
EXPR	129:2	129:2	7	iq -> node = xmlnode_copy ( packet )
ASSIGN	129:2	129:13	8	iq -> node = xmlnode_copy ( packet )
LVAL	129:2	129:2	9	iq -> node
FIELD	129:2	129:6	10	iq -> node
LEAF_NODE	129:2	129:2	11	iq
LEAF_NODE	129:4	129:4	11	->
LEAF_NODE	129:6	129:6	11	node
ASSIGN_OP	129:11	129:11	9	=
LEAF_NODE	129:11	129:11	10	=
RVAL	129:13	129:13	9	xmlnode_copy ( packet )
FUNCTION_CALL	129:13	129:32	10	xmlnode_copy ( packet )
CALLEE	129:13	129:13	11	xmlnode_copy
LEAF_NODE	129:13	129:13	12	xmlnode_copy
LEAF_NODE	129:25	129:25	11	(
ARGUMENT	129:26	129:26	11	packet
FIELD	129:26	129:26	12	packet
LEAF_NODE	129:26	129:26	13	packet
LEAF_NODE	129:32	129:32	11	)
LEAF_NODE	129:33	129:33	7	;
SELECTION	130:2	130:12	6	
KEYWORD	130:2	130:2	7	if
LEAF_NODE	130:2	130:2	8	if
LEAF_NODE	130:5	130:5	7	(
CONDITION	130:6	130:6	7	from
EXPR	130:6	130:6	8	from
FIELD	130:6	130:6	9	from
LEAF_NODE	130:6	130:6	10	from
LEAF_NODE	130:10	130:10	7	)
STATEMENTS	130:12	133:2	7	
LEAF_NODE	130:12	130:12	8	{
STATEMENTS	131:3	132:3	8	
EXPR_STATEMENT	131:3	131:43	9	xmlnode_set_attrib ( iq -> node , "to" , from ) ;
EXPR	131:3	131:3	10	xmlnode_set_attrib ( iq -> node , "to" , from )
FUNCTION_CALL	131:3	131:42	11	xmlnode_set_attrib ( iq -> node , "to" , from )
CALLEE	131:3	131:3	12	xmlnode_set_attrib
LEAF_NODE	131:3	131:3	13	xmlnode_set_attrib
LEAF_NODE	131:21	131:21	12	(
ARGUMENT	131:22	131:22	12	iq -> node
FIELD	131:22	131:26	13	iq -> node
LEAF_NODE	131:22	131:22	14	iq
LEAF_NODE	131:24	131:24	14	->
LEAF_NODE	131:26	131:26	14	node
LEAF_NODE	131:30	131:30	12	,
ARGUMENT	131:32	131:32	12	"to"
FIELD	131:32	131:32	13	"to"
LEAF_NODE	131:32	131:32	14	"to"
LEAF_NODE	131:36	131:36	12	,
ARGUMENT	131:38	131:38	12	from
FIELD	131:38	131:38	13	from
LEAF_NODE	131:38	131:38	14	from
LEAF_NODE	131:42	131:42	12	)
LEAF_NODE	131:43	131:43	10	;
EXPR_STATEMENT	132:3	132:42	9	xmlnode_remove_attrib ( iq -> node , "from" ) ;
EXPR	132:3	132:3	10	xmlnode_remove_attrib ( iq -> node , "from" )
FUNCTION_CALL	132:3	132:41	11	xmlnode_remove_attrib ( iq -> node , "from" )
CALLEE	132:3	132:3	12	xmlnode_remove_attrib
LEAF_NODE	132:3	132:3	13	xmlnode_remove_attrib
LEAF_NODE	132:24	132:24	12	(
ARGUMENT	132:25	132:25	12	iq -> node
FIELD	132:25	132:29	13	iq -> node
LEAF_NODE	132:25	132:25	14	iq
LEAF_NODE	132:27	132:27	14	->
LEAF_NODE	132:29	132:29	14	node
LEAF_NODE	132:33	132:33	12	,
ARGUMENT	132:35	132:35	12	"from"
FIELD	132:35	132:35	13	"from"
LEAF_NODE	132:35	132:35	14	"from"
LEAF_NODE	132:41	132:41	12	)
LEAF_NODE	132:42	132:42	10	;
LEAF_NODE	133:2	133:2	8	}
EXPR_STATEMENT	134:2	134:47	6	xmlnode_set_attrib ( iq -> node , "type" , "error" ) ;
EXPR	134:2	134:2	7	xmlnode_set_attrib ( iq -> node , "type" , "error" )
FUNCTION_CALL	134:2	134:46	8	xmlnode_set_attrib ( iq -> node , "type" , "error" )
CALLEE	134:2	134:2	9	xmlnode_set_attrib
LEAF_NODE	134:2	134:2	10	xmlnode_set_attrib
LEAF_NODE	134:20	134:20	9	(
ARGUMENT	134:21	134:21	9	iq -> node
FIELD	134:21	134:25	10	iq -> node
LEAF_NODE	134:21	134:21	11	iq
LEAF_NODE	134:23	134:23	11	->
LEAF_NODE	134:25	134:25	11	node
LEAF_NODE	134:29	134:29	9	,
ARGUMENT	134:31	134:31	9	"type"
FIELD	134:31	134:31	10	"type"
LEAF_NODE	134:31	134:31	11	"type"
LEAF_NODE	134:37	134:37	9	,
ARGUMENT	134:39	134:39	9	"error"
FIELD	134:39	134:39	10	"error"
LEAF_NODE	134:39	134:39	11	"error"
LEAF_NODE	134:46	134:46	9	)
LEAF_NODE	134:47	134:47	7	;
EXPR_STATEMENT	135:2	135:46	6	error = xmlnode_new_child ( iq -> node , "error" ) ;
EXPR	135:2	135:2	7	error = xmlnode_new_child ( iq -> node , "error" )
ASSIGN	135:2	135:10	8	error = xmlnode_new_child ( iq -> node , "error" )
LVAL	135:2	135:2	9	error
FIELD	135:2	135:2	10	error
LEAF_NODE	135:2	135:2	11	error
ASSIGN_OP	135:8	135:8	9	=
LEAF_NODE	135:8	135:8	10	=
RVAL	135:10	135:10	9	xmlnode_new_child ( iq -> node , "error" )
FUNCTION_CALL	135:10	135:45	10	xmlnode_new_child ( iq -> node , "error" )
CALLEE	135:10	135:10	11	xmlnode_new_child
LEAF_NODE	135:10	135:10	12	xmlnode_new_child
LEAF_NODE	135:27	135:27	11	(
ARGUMENT	135:28	135:28	11	iq -> node
FIELD	135:28	135:32	12	iq -> node
LEAF_NODE	135:28	135:28	13	iq
LEAF_NODE	135:30	135:30	13	->
LEAF_NODE	135:32	135:32	13	node
LEAF_NODE	135:36	135:36	11	,
ARGUMENT	135:38	135:38	11	"error"
FIELD	135:38	135:38	12	"error"
LEAF_NODE	135:38	135:38	13	"error"
LEAF_NODE	135:45	135:45	11	)
LEAF_NODE	135:46	135:46	7	;
EXPR_STATEMENT	136:2	136:45	6	xmlnode_set_attrib ( error , "type" , "cancel" ) ;
EXPR	136:2	136:2	7	xmlnode_set_attrib ( error , "type" , "cancel" )
FUNCTION_CALL	136:2	136:44	8	xmlnode_set_attrib ( error , "type" , "cancel" )
CALLEE	136:2	136:2	9	xmlnode_set_attrib
LEAF_NODE	136:2	136:2	10	xmlnode_set_attrib
LEAF_NODE	136:20	136:20	9	(
ARGUMENT	136:21	136:21	9	error
FIELD	136:21	136:21	10	error
LEAF_NODE	136:21	136:21	11	error
LEAF_NODE	136:26	136:26	9	,
ARGUMENT	136:28	136:28	9	"type"
FIELD	136:28	136:28	10	"type"
LEAF_NODE	136:28	136:28	11	"type"
LEAF_NODE	136:34	136:34	9	,
ARGUMENT	136:36	136:36	9	"cancel"
FIELD	136:36	136:36	10	"cancel"
LEAF_NODE	136:36	136:36	11	"cancel"
LEAF_NODE	136:44	136:44	9	)
LEAF_NODE	136:45	136:45	7	;
EXPR_STATEMENT	137:2	137:42	6	xmlnode_set_attrib ( error , "code" , "501" ) ;
EXPR	137:2	137:2	7	xmlnode_set_attrib ( error , "code" , "501" )
FUNCTION_CALL	137:2	137:41	8	xmlnode_set_attrib ( error , "code" , "501" )
CALLEE	137:2	137:2	9	xmlnode_set_attrib
LEAF_NODE	137:2	137:2	10	xmlnode_set_attrib
LEAF_NODE	137:20	137:20	9	(
ARGUMENT	137:21	137:21	9	error
FIELD	137:21	137:21	10	error
LEAF_NODE	137:21	137:21	11	error
LEAF_NODE	137:26	137:26	9	,
ARGUMENT	137:28	137:28	9	"code"
FIELD	137:28	137:28	10	"code"
LEAF_NODE	137:28	137:28	11	"code"
LEAF_NODE	137:34	137:34	9	,
ARGUMENT	137:36	137:36	9	"501"
FIELD	137:36	137:36	10	"501"
LEAF_NODE	137:36	137:36	11	"501"
LEAF_NODE	137:41	137:41	9	)
LEAF_NODE	137:42	137:42	7	;
EXPR_STATEMENT	138:2	138:57	6	x = xmlnode_new_child ( error , "feature-not-implemented" ) ;
EXPR	138:2	138:2	7	x = xmlnode_new_child ( error , "feature-not-implemented" )
ASSIGN	138:2	138:6	8	x = xmlnode_new_child ( error , "feature-not-implemented" )
LVAL	138:2	138:2	9	x
FIELD	138:2	138:2	10	x
LEAF_NODE	138:2	138:2	11	x
ASSIGN_OP	138:4	138:4	9	=
LEAF_NODE	138:4	138:4	10	=
RVAL	138:6	138:6	9	xmlnode_new_child ( error , "feature-not-implemented" )
FUNCTION_CALL	138:6	138:56	10	xmlnode_new_child ( error , "feature-not-implemented" )
CALLEE	138:6	138:6	11	xmlnode_new_child
LEAF_NODE	138:6	138:6	12	xmlnode_new_child
LEAF_NODE	138:23	138:23	11	(
ARGUMENT	138:24	138:24	11	error
FIELD	138:24	138:24	12	error
LEAF_NODE	138:24	138:24	13	error
LEAF_NODE	138:29	138:29	11	,
ARGUMENT	138:31	138:31	11	"feature-not-implemented"
FIELD	138:31	138:31	12	"feature-not-implemented"
LEAF_NODE	138:31	138:31	13	"feature-not-implemented"
LEAF_NODE	138:56	138:56	11	)
LEAF_NODE	138:57	138:57	7	;
EXPR_STATEMENT	139:2	139:43	6	xmlnode_set_namespace ( x , NS_XMPP_STANZAS ) ;
EXPR	139:2	139:2	7	xmlnode_set_namespace ( x , NS_XMPP_STANZAS )
FUNCTION_CALL	139:2	139:42	8	xmlnode_set_namespace ( x , NS_XMPP_STANZAS )
CALLEE	139:2	139:2	9	xmlnode_set_namespace
LEAF_NODE	139:2	139:2	10	xmlnode_set_namespace
LEAF_NODE	139:23	139:23	9	(
ARGUMENT	139:24	139:24	9	x
FIELD	139:24	139:24	10	x
LEAF_NODE	139:24	139:24	11	x
LEAF_NODE	139:25	139:25	9	,
ARGUMENT	139:27	139:27	9	NS_XMPP_STANZAS
FIELD	139:27	139:27	10	NS_XMPP_STANZAS
LEAF_NODE	139:27	139:27	11	NS_XMPP_STANZAS
LEAF_NODE	139:42	139:42	9	)
LEAF_NODE	139:43	139:43	7	;
EXPR_STATEMENT	140:2	140:20	6	jabber_iq_send ( iq ) ;
EXPR	140:2	140:2	7	jabber_iq_send ( iq )
FUNCTION_CALL	140:2	140:19	8	jabber_iq_send ( iq )
CALLEE	140:2	140:2	9	jabber_iq_send
LEAF_NODE	140:2	140:2	10	jabber_iq_send
LEAF_NODE	140:16	140:16	9	(
ARGUMENT	140:17	140:17	9	iq
FIELD	140:17	140:17	10	iq
LEAF_NODE	140:17	140:17	11	iq
LEAF_NODE	140:19	140:19	9	)
LEAF_NODE	140:20	140:20	7	;
LEAF_NODE	141:1	141:1	5	}
EXPR_STATEMENT	142:1	142:24	3	jabber_id_free ( from_id ) ;
EXPR	142:1	142:1	4	jabber_id_free ( from_id )
FUNCTION_CALL	142:1	142:23	5	jabber_id_free ( from_id )
CALLEE	142:1	142:1	6	jabber_id_free
LEAF_NODE	142:1	142:1	7	jabber_id_free
LEAF_NODE	142:15	142:15	6	(
ARGUMENT	142:16	142:16	6	from_id
FIELD	142:16	142:16	7	from_id
LEAF_NODE	142:16	142:16	8	from_id
LEAF_NODE	142:23	142:23	6	)
LEAF_NODE	142:24	142:24	4	;
LEAF_NODE	143:0	143:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	7:0	1	
RETURN_TYPE	2:0	2:15	2	struct gg_http *
TYPE_NAME	2:0	2:7	3	struct gg_http
LEAF_NODE	2:0	2:0	4	struct
LEAF_NODE	2:7	2:7	4	gg_http
LEAF_NODE	2:15	2:15	3	*
FUNCTION_NAME	2:16	2:16	2	gg_userlist_get
LEAF_NODE	2:16	2:16	3	gg_userlist_get
PARAMETER_LIST	2:31	2:72	2	( uin_t uin , const char * passwd , int async )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:38	3	uin_t uin
TYPE	2:32	2:32	4	uin_t
TYPE_NAME	2:32	2:32	5	uin_t
LEAF_NODE	2:32	2:32	6	uin_t
NAME	2:38	2:38	4	uin
LEAF_NODE	2:38	2:38	5	uin
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:55	3	const char * passwd
TYPE	2:43	2:54	4	const char *
TYPE_NAME	2:43	2:49	5	const char
LEAF_NODE	2:43	2:43	6	const
LEAF_NODE	2:49	2:49	6	char
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	passwd
LEAF_NODE	2:55	2:55	5	passwd
LEAF_NODE	2:61	2:61	3	,
PARAMETER_DECL	2:63	2:67	3	int async
TYPE	2:63	2:63	4	int
TYPE_NAME	2:63	2:63	5	int
LEAF_NODE	2:63	2:63	6	int
NAME	2:67	2:67	4	async
LEAF_NODE	2:67	2:67	5	async
LEAF_NODE	2:72	2:72	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
EXPR_STATEMENT	4:1	4:98	3	gg_debug ( GG_DEBUG_MISC , "// gg_userlist_get() is obsolete. use gg_userlist_request() instead!\n" ) ;
EXPR	4:1	4:1	4	gg_debug ( GG_DEBUG_MISC , "// gg_userlist_get() is obsolete. use gg_userlist_request() instead!\n" )
FUNCTION_CALL	4:1	4:97	5	gg_debug ( GG_DEBUG_MISC , "// gg_userlist_get() is obsolete. use gg_userlist_request() instead!\n" )
CALLEE	4:1	4:1	6	gg_debug
LEAF_NODE	4:1	4:1	7	gg_debug
LEAF_NODE	4:9	4:9	6	(
ARGUMENT	4:10	4:10	6	GG_DEBUG_MISC
FIELD	4:10	4:10	7	GG_DEBUG_MISC
LEAF_NODE	4:10	4:10	8	GG_DEBUG_MISC
LEAF_NODE	4:23	4:23	6	,
ARGUMENT	4:25	4:25	6	"// gg_userlist_get() is obsolete. use gg_userlist_request() instead!\n"
FIELD	4:25	4:25	7	"// gg_userlist_get() is obsolete. use gg_userlist_request() instead!\n"
LEAF_NODE	4:25	4:25	8	"// gg_userlist_get() is obsolete. use gg_userlist_request() instead!\n"
LEAF_NODE	4:97	4:97	6	)
LEAF_NODE	4:98	4:98	4	;
EXPR_STATEMENT	5:1	5:15	3	errno = EINVAL ;
EXPR	5:1	5:1	4	errno = EINVAL
ASSIGN	5:1	5:9	5	errno = EINVAL
LVAL	5:1	5:1	6	errno
FIELD	5:1	5:1	7	errno
LEAF_NODE	5:1	5:1	8	errno
ASSIGN_OP	5:7	5:7	6	=
LEAF_NODE	5:7	5:7	7	=
RVAL	5:9	5:9	6	EINVAL
FIELD	5:9	5:9	7	EINVAL
LEAF_NODE	5:9	5:9	8	EINVAL
LEAF_NODE	5:15	5:15	4	;
JUMP_STATEMENT	6:1	6:12	3	return NULL ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	NULL
EXPR	6:8	6:8	5	NULL
FIELD	6:8	6:8	6	NULL
LEAF_NODE	6:8	6:8	7	NULL
LEAF_NODE	6:12	6:12	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	fields_write
LEAF_NODE	2:0	2:0	3	fields_write
PARAMETER_LIST	2:12	2:49	2	( struct mime_fields * mf , GString * str )
LEAF_NODE	2:12	2:12	3	(
PARAMETER_DECL	2:13	2:33	3	struct mime_fields * mf
TYPE	2:13	2:32	4	struct mime_fields *
TYPE_NAME	2:13	2:20	5	struct mime_fields
LEAF_NODE	2:13	2:13	6	struct
LEAF_NODE	2:20	2:20	6	mime_fields
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	mf
LEAF_NODE	2:33	2:33	5	mf
LEAF_NODE	2:35	2:35	3	,
PARAMETER_DECL	2:37	2:46	3	GString * str
TYPE	2:37	2:45	4	GString *
TYPE_NAME	2:37	2:37	5	GString
LEAF_NODE	2:37	2:37	6	GString
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	str
LEAF_NODE	2:46	2:46	5	str
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
EXPR_STATEMENT	4:1	4:29	3	g_return_if_fail ( mf != NULL ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( mf != NULL )
FUNCTION_CALL	4:1	4:28	5	g_return_if_fail ( mf != NULL )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:24	6	mf != NULL
FIELD	4:18	4:18	7	mf
LEAF_NODE	4:18	4:18	8	mf
EQ_OPERATOR	4:21	4:21	7	!=
LEAF_NODE	4:21	4:21	8	!=
FIELD	4:24	4:24	7	NULL
LEAF_NODE	4:24	4:24	8	NULL
LEAF_NODE	4:28	4:28	6	)
LEAF_NODE	4:29	4:29	4	;
EXPR_STATEMENT	5:1	5:57	3	g_hash_table_foreach ( mf -> map , ( GHFunc ) field_write , str ) ;
EXPR	5:1	5:1	4	g_hash_table_foreach ( mf -> map , ( GHFunc ) field_write , str )
FUNCTION_CALL	5:1	5:56	5	g_hash_table_foreach ( mf -> map , ( GHFunc ) field_write , str )
CALLEE	5:1	5:1	6	g_hash_table_foreach
LEAF_NODE	5:1	5:1	7	g_hash_table_foreach
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:22	6	mf -> map
FIELD	5:22	5:26	7	mf -> map
LEAF_NODE	5:22	5:22	8	mf
LEAF_NODE	5:24	5:24	8	->
LEAF_NODE	5:26	5:26	8	map
LEAF_NODE	5:29	5:29	6	,
ARGUMENT	5:31	5:40	6	( GHFunc ) field_write
LEAF_NODE	5:31	5:31	7	(
TYPE_NAME	5:32	5:32	7	GHFunc
LEAF_NODE	5:32	5:32	8	GHFunc
LEAF_NODE	5:38	5:38	7	)
FIELD	5:40	5:40	7	field_write
LEAF_NODE	5:40	5:40	8	field_write
LEAF_NODE	5:51	5:51	6	,
ARGUMENT	5:53	5:53	6	str
FIELD	5:53	5:53	7	str
LEAF_NODE	5:53	5:53	8	str
LEAF_NODE	5:56	5:56	6	)
LEAF_NODE	5:57	5:57	4	;
EXPR_STATEMENT	6:1	6:29	3	g_string_append ( str , "\r\n" ) ;
EXPR	6:1	6:1	4	g_string_append ( str , "\r\n" )
FUNCTION_CALL	6:1	6:28	5	g_string_append ( str , "\r\n" )
CALLEE	6:1	6:1	6	g_string_append
LEAF_NODE	6:1	6:1	7	g_string_append
LEAF_NODE	6:16	6:16	6	(
ARGUMENT	6:17	6:17	6	str
FIELD	6:17	6:17	7	str
LEAF_NODE	6:17	6:17	8	str
LEAF_NODE	6:20	6:20	6	,
ARGUMENT	6:22	6:22	6	"\r\n"
FIELD	6:22	6:22	7	"\r\n"
LEAF_NODE	6:22	6:22	8	"\r\n"
LEAF_NODE	6:28	6:28	6	)
LEAF_NODE	6:29	6:29	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	9:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	add_selected_row_to_list
LEAF_NODE	2:12	2:12	3	add_selected_row_to_list
PARAMETER_LIST	2:36	3:33	2	( GtkTreeModel * model , GtkTreePath * path , GtkTreeIter * iter , gpointer data )
LEAF_NODE	2:36	2:36	3	(
PARAMETER_DECL	2:37	2:51	3	GtkTreeModel * model
TYPE	2:37	2:50	4	GtkTreeModel *
TYPE_NAME	2:37	2:37	5	GtkTreeModel
LEAF_NODE	2:37	2:37	6	GtkTreeModel
POINTER	2:50	2:50	5	*
LEAF_NODE	2:50	2:50	6	*
NAME	2:51	2:51	4	model
LEAF_NODE	2:51	2:51	5	model
LEAF_NODE	2:56	2:56	3	,
PARAMETER_DECL	2:58	2:71	3	GtkTreePath * path
TYPE	2:58	2:70	4	GtkTreePath *
TYPE_NAME	2:58	2:58	5	GtkTreePath
LEAF_NODE	2:58	2:58	6	GtkTreePath
POINTER	2:70	2:70	5	*
LEAF_NODE	2:70	2:70	6	*
NAME	2:71	2:71	4	path
LEAF_NODE	2:71	2:71	5	path
LEAF_NODE	2:75	2:75	3	,
PARAMETER_DECL	3:1	3:14	3	GtkTreeIter * iter
TYPE	3:1	3:13	4	GtkTreeIter *
TYPE_NAME	3:1	3:1	5	GtkTreeIter
LEAF_NODE	3:1	3:1	6	GtkTreeIter
POINTER	3:13	3:13	5	*
LEAF_NODE	3:13	3:13	6	*
NAME	3:14	3:14	4	iter
LEAF_NODE	3:14	3:14	5	iter
LEAF_NODE	3:18	3:18	3	,
PARAMETER_DECL	3:20	3:29	3	gpointer data
TYPE	3:20	3:20	4	gpointer
TYPE_NAME	3:20	3:20	5	gpointer
LEAF_NODE	3:20	3:20	6	gpointer
NAME	3:29	3:29	4	data
LEAF_NODE	3:29	3:29	5	data
LEAF_NODE	3:33	3:33	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	8:1	2	
SIMPLE_DECL	5:1	5:35	3	GtkTreeRowReference * row_reference ;
VAR_DECL	5:1	5:22	4	GtkTreeRowReference * row_reference
TYPE	5:1	5:21	5	GtkTreeRowReference *
TYPE_NAME	5:1	5:1	6	GtkTreeRowReference
LEAF_NODE	5:1	5:1	7	GtkTreeRowReference
POINTER	5:21	5:21	6	*
LEAF_NODE	5:21	5:21	7	*
NAME	5:22	5:22	5	row_reference
LEAF_NODE	5:22	5:22	6	row_reference
LEAF_NODE	5:35	5:35	4	;
SIMPLE_DECL	6:1	6:32	3	GSList * list ; list = ( GSList * * ) data ;
VAR_DECL	6:1	6:10	4	GSList * list ; list = ( GSList * * ) data
TYPE	6:1	6:9	5	GSList *
TYPE_NAME	6:1	6:1	6	GSList
LEAF_NODE	6:1	6:1	7	GSList
POINTER	6:9	6:9	6	*
LEAF_NODE	6:9	6:9	7	*
NAME	6:10	6:10	5	list
LEAF_NODE	6:10	6:10	6	list
LEAF_NODE	0:0	0:0	5	;
INIT	6:10	6:10	5	list = ( GSList * * ) data
ASSIGN	6:10	6:17	6	list = ( GSList * * ) data
LVAL	6:10	6:10	7	list
NAME	6:10	6:10	8	list
LEAF_NODE	6:10	6:10	9	list
ASSIGN_OP	6:15	6:15	7	=
LEAF_NODE	6:15	6:15	8	=
RVAL	6:17	6:28	7	( GSList * * ) data
LEAF_NODE	6:17	6:17	8	(
TYPE_NAME	6:18	6:18	8	GSList
LEAF_NODE	6:18	6:18	9	GSList
LEAF_NODE	6:25	6:25	8	*
LEAF_NODE	6:26	6:26	8	*
LEAF_NODE	6:27	6:27	8	)
FIELD	6:28	6:28	8	data
LEAF_NODE	6:28	6:28	9	data
LEAF_NODE	6:32	6:32	4	;
EXPR_STATEMENT	7:1	7:56	3	row_reference = gtk_tree_row_reference_new ( model , path ) ;
EXPR	7:1	7:1	4	row_reference = gtk_tree_row_reference_new ( model , path )
ASSIGN	7:1	7:17	5	row_reference = gtk_tree_row_reference_new ( model , path )
LVAL	7:1	7:1	6	row_reference
FIELD	7:1	7:1	7	row_reference
LEAF_NODE	7:1	7:1	8	row_reference
ASSIGN_OP	7:15	7:15	6	=
LEAF_NODE	7:15	7:15	7	=
RVAL	7:17	7:17	6	gtk_tree_row_reference_new ( model , path )
FUNCTION_CALL	7:17	7:55	7	gtk_tree_row_reference_new ( model , path )
CALLEE	7:17	7:17	8	gtk_tree_row_reference_new
LEAF_NODE	7:17	7:17	9	gtk_tree_row_reference_new
LEAF_NODE	7:43	7:43	8	(
ARGUMENT	7:44	7:44	8	model
FIELD	7:44	7:44	9	model
LEAF_NODE	7:44	7:44	10	model
LEAF_NODE	7:49	7:49	8	,
ARGUMENT	7:51	7:51	8	path
FIELD	7:51	7:51	9	path
LEAF_NODE	7:51	7:51	10	path
LEAF_NODE	7:55	7:55	8	)
LEAF_NODE	7:56	7:56	4	;
EXPR_STATEMENT	8:1	8:46	3	* list = g_slist_prepend ( * list , row_reference ) ;
EXPR	8:1	8:1	4	* list = g_slist_prepend ( * list , row_reference )
ASSIGN	8:1	8:9	5	* list = g_slist_prepend ( * list , row_reference )
LVAL	8:1	8:1	6	* list
UNARY_EXPR	8:1	8:2	7	* list
UNARY_OPERATOR	8:1	8:1	8	*
LEAF_NODE	8:1	8:1	9	*
FIELD	8:2	8:2	8	list
LEAF_NODE	8:2	8:2	9	list
ASSIGN_OP	8:7	8:7	6	=
LEAF_NODE	8:7	8:7	7	=
RVAL	8:9	8:9	6	g_slist_prepend ( * list , row_reference )
FUNCTION_CALL	8:9	8:45	7	g_slist_prepend ( * list , row_reference )
CALLEE	8:9	8:9	8	g_slist_prepend
LEAF_NODE	8:9	8:9	9	g_slist_prepend
LEAF_NODE	8:24	8:24	8	(
ARGUMENT	8:25	8:25	8	* list
UNARY_EXPR	8:25	8:26	9	* list
UNARY_OPERATOR	8:25	8:25	10	*
LEAF_NODE	8:25	8:25	11	*
FIELD	8:26	8:26	10	list
LEAF_NODE	8:26	8:26	11	list
LEAF_NODE	8:30	8:30	8	,
ARGUMENT	8:32	8:32	8	row_reference
FIELD	8:32	8:32	9	row_reference
LEAF_NODE	8:32	8:32	10	row_reference
LEAF_NODE	8:45	8:45	8	)
LEAF_NODE	8:46	8:46	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	32:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	_get_details_resp_add_privacy_item
LEAF_NODE	2:0	2:0	3	_get_details_resp_add_privacy_item
PARAMETER_LIST	2:34	3:49	2	( NMUser * user , NMERR_T ret_code , gpointer resp_data , gpointer user_data )
LEAF_NODE	2:34	2:34	3	(
PARAMETER_DECL	2:35	2:43	3	NMUser * user
TYPE	2:35	2:42	4	NMUser *
TYPE_NAME	2:35	2:35	5	NMUser
LEAF_NODE	2:35	2:35	6	NMUser
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	user
LEAF_NODE	2:43	2:43	5	user
LEAF_NODE	2:47	2:47	3	,
PARAMETER_DECL	2:49	2:57	3	NMERR_T ret_code
TYPE	2:49	2:49	4	NMERR_T
TYPE_NAME	2:49	2:49	5	NMERR_T
LEAF_NODE	2:49	2:49	6	NMERR_T
NAME	2:57	2:57	4	ret_code
LEAF_NODE	2:57	2:57	5	ret_code
LEAF_NODE	2:65	2:65	3	,
PARAMETER_DECL	3:11	3:20	3	gpointer resp_data
TYPE	3:11	3:11	4	gpointer
TYPE_NAME	3:11	3:11	5	gpointer
LEAF_NODE	3:11	3:11	6	gpointer
NAME	3:20	3:20	4	resp_data
LEAF_NODE	3:20	3:20	5	resp_data
LEAF_NODE	3:29	3:29	3	,
PARAMETER_DECL	3:31	3:40	3	gpointer user_data
TYPE	3:31	3:31	4	gpointer
TYPE_NAME	3:31	3:31	5	gpointer
LEAF_NODE	3:31	3:31	6	gpointer
NAME	3:40	3:40	4	user_data
LEAF_NODE	3:40	3:40	5	user_data
LEAF_NODE	3:49	3:49	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	26:3	2	
SIMPLE_DECL	5:1	5:21	3	PurpleConnection * gc ;
VAR_DECL	5:1	5:19	4	PurpleConnection * gc
TYPE	5:1	5:18	5	PurpleConnection *
TYPE_NAME	5:1	5:1	6	PurpleConnection
LEAF_NODE	5:1	5:1	7	PurpleConnection
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	gc
LEAF_NODE	5:19	5:19	6	gc
LEAF_NODE	5:21	5:21	4	;
SIMPLE_DECL	6:1	6:38	3	NMUserRecord * user_record ; user_record = resp_data ;
VAR_DECL	6:1	6:15	4	NMUserRecord * user_record ; user_record = resp_data
TYPE	6:1	6:14	5	NMUserRecord *
TYPE_NAME	6:1	6:1	6	NMUserRecord
LEAF_NODE	6:1	6:1	7	NMUserRecord
POINTER	6:14	6:14	6	*
LEAF_NODE	6:14	6:14	7	*
NAME	6:15	6:15	5	user_record
LEAF_NODE	6:15	6:15	6	user_record
LEAF_NODE	0:0	0:0	5	;
INIT	6:15	6:15	5	user_record = resp_data
ASSIGN	6:15	6:29	6	user_record = resp_data
LVAL	6:15	6:15	7	user_record
NAME	6:15	6:15	8	user_record
LEAF_NODE	6:15	6:15	9	user_record
ASSIGN_OP	6:27	6:27	7	=
LEAF_NODE	6:27	6:27	8	=
RVAL	6:29	6:29	7	resp_data
FIELD	6:29	6:29	8	resp_data
LEAF_NODE	6:29	6:29	9	resp_data
LEAF_NODE	6:38	6:38	4	;
SIMPLE_DECL	7:1	7:10	3	char * err ;
VAR_DECL	7:1	7:7	4	char * err
TYPE	7:1	7:6	5	char *
TYPE_NAME	7:1	7:1	6	char
LEAF_NODE	7:1	7:1	7	char
POINTER	7:6	7:6	6	*
LEAF_NODE	7:6	7:6	7	*
NAME	7:7	7:7	5	err
LEAF_NODE	7:7	7:7	6	err
LEAF_NODE	7:10	7:10	4	;
SIMPLE_DECL	8:1	8:46	3	gboolean allowed ; allowed = GPOINTER_TO_INT ( user_data ) ;
VAR_DECL	8:1	8:10	4	gboolean allowed ; allowed = GPOINTER_TO_INT ( user_data )
TYPE	8:1	8:1	5	gboolean
TYPE_NAME	8:1	8:1	6	gboolean
LEAF_NODE	8:1	8:1	7	gboolean
NAME	8:10	8:10	5	allowed
LEAF_NODE	8:10	8:10	6	allowed
LEAF_NODE	0:0	0:0	5	;
INIT	8:10	8:10	5	allowed = GPOINTER_TO_INT ( user_data )
ASSIGN	8:10	8:20	6	allowed = GPOINTER_TO_INT ( user_data )
LVAL	8:10	8:10	7	allowed
NAME	8:10	8:10	8	allowed
LEAF_NODE	8:10	8:10	9	allowed
ASSIGN_OP	8:18	8:18	7	=
LEAF_NODE	8:18	8:18	8	=
RVAL	8:20	8:20	7	GPOINTER_TO_INT ( user_data )
FUNCTION_CALL	8:20	8:45	8	GPOINTER_TO_INT ( user_data )
CALLEE	8:20	8:20	9	GPOINTER_TO_INT
LEAF_NODE	8:20	8:20	10	GPOINTER_TO_INT
LEAF_NODE	8:35	8:35	9	(
ARGUMENT	8:36	8:36	9	user_data
FIELD	8:36	8:36	10	user_data
LEAF_NODE	8:36	8:36	11	user_data
LEAF_NODE	8:45	8:45	9	)
LEAF_NODE	8:46	8:46	4	;
SIMPLE_DECL	9:1	9:23	3	const char * display_id ;
VAR_DECL	9:1	9:13	4	const char * display_id
TYPE	9:1	9:12	5	const char *
TYPE_NAME	9:1	9:7	6	const char
LEAF_NODE	9:1	9:1	7	const
LEAF_NODE	9:7	9:7	7	char
POINTER	9:12	9:12	6	*
LEAF_NODE	9:12	9:12	7	*
NAME	9:13	9:13	5	display_id
LEAF_NODE	9:13	9:13	6	display_id
LEAF_NODE	9:23	9:23	4	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	user == NULL
EXPR	10:5	10:13	5	user == NULL
FIELD	10:5	10:5	6	user
LEAF_NODE	10:5	10:5	7	user
EQ_OPERATOR	10:10	10:10	6	==
LEAF_NODE	10:10	10:10	7	==
FIELD	10:13	10:13	6	NULL
LEAF_NODE	10:13	10:13	7	NULL
LEAF_NODE	10:17	10:17	4	)
STATEMENTS	11:2	11:2	4	
JUMP_STATEMENT	11:2	11:8	5	return DESTINATION ;
KEYWORD	11:2	11:2	6	return
LEAF_NODE	11:2	11:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	11:8	11:8	6	;
EXPR_STATEMENT	12:1	12:54	3	gc = purple_account_get_connection ( user -> client_data ) ;
EXPR	12:1	12:1	4	gc = purple_account_get_connection ( user -> client_data )
ASSIGN	12:1	12:6	5	gc = purple_account_get_connection ( user -> client_data )
LVAL	12:1	12:1	6	gc
FIELD	12:1	12:1	7	gc
LEAF_NODE	12:1	12:1	8	gc
ASSIGN_OP	12:4	12:4	6	=
LEAF_NODE	12:4	12:4	7	=
RVAL	12:6	12:6	6	purple_account_get_connection ( user -> client_data )
FUNCTION_CALL	12:6	12:53	7	purple_account_get_connection ( user -> client_data )
CALLEE	12:6	12:6	8	purple_account_get_connection
LEAF_NODE	12:6	12:6	9	purple_account_get_connection
LEAF_NODE	12:35	12:35	8	(
ARGUMENT	12:36	12:36	8	user -> client_data
FIELD	12:36	12:42	9	user -> client_data
LEAF_NODE	12:36	12:36	10	user
LEAF_NODE	12:40	12:40	10	->
LEAF_NODE	12:42	12:42	10	client_data
LEAF_NODE	12:53	12:53	8	)
LEAF_NODE	12:54	12:54	4	;
EXPR_STATEMENT	13:1	13:56	3	display_id = nm_user_record_get_display_id ( user_record ) ;
EXPR	13:1	13:1	4	display_id = nm_user_record_get_display_id ( user_record )
ASSIGN	13:1	13:14	5	display_id = nm_user_record_get_display_id ( user_record )
LVAL	13:1	13:1	6	display_id
FIELD	13:1	13:1	7	display_id
LEAF_NODE	13:1	13:1	8	display_id
ASSIGN_OP	13:12	13:12	6	=
LEAF_NODE	13:12	13:12	7	=
RVAL	13:14	13:14	6	nm_user_record_get_display_id ( user_record )
FUNCTION_CALL	13:14	13:55	7	nm_user_record_get_display_id ( user_record )
CALLEE	13:14	13:14	8	nm_user_record_get_display_id
LEAF_NODE	13:14	13:14	9	nm_user_record_get_display_id
LEAF_NODE	13:43	13:43	8	(
ARGUMENT	13:44	13:44	8	user_record
FIELD	13:44	13:44	9	user_record
LEAF_NODE	13:44	13:44	10	user_record
LEAF_NODE	13:55	13:55	8	)
LEAF_NODE	13:56	13:56	4	;
SELECTION	14:1	14:24	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	ret_code == NM_OK
EXPR	14:5	14:17	5	ret_code == NM_OK
FIELD	14:5	14:5	6	ret_code
LEAF_NODE	14:5	14:5	7	ret_code
EQ_OPERATOR	14:14	14:14	6	==
LEAF_NODE	14:14	14:14	7	==
FIELD	14:17	14:17	6	NM_OK
LEAF_NODE	14:17	14:17	7	NM_OK
LEAF_NODE	14:22	14:22	4	)
STATEMENTS	14:24	26:1	4	
LEAF_NODE	14:24	14:24	5	{
STATEMENTS	15:2	20:4	5	
SELECTION	15:2	15:15	6	
KEYWORD	15:2	15:2	7	if
LEAF_NODE	15:2	15:2	8	if
LEAF_NODE	15:5	15:5	7	(
CONDITION	15:6	15:6	7	allowed
EXPR	15:6	15:6	8	allowed
FIELD	15:6	15:6	9	allowed
LEAF_NODE	15:6	15:6	10	allowed
LEAF_NODE	15:13	15:13	7	)
STATEMENTS	15:15	20:2	7	
LEAF_NODE	15:15	15:15	8	{
STATEMENTS	16:3	16:3	8	
SELECTION	16:3	17:61	9	
KEYWORD	16:3	16:3	10	if
LEAF_NODE	16:3	16:3	11	if
LEAF_NODE	16:6	16:6	10	(
CONDITION	16:7	16:7	10	! g_slist_find_custom ( gc -> account -> permit , display_id , ( GCompareFunc ) purple_utf8_strcasecmp )
EXPR	16:7	16:7	11	! g_slist_find_custom ( gc -> account -> permit , display_id , ( GCompareFunc ) purple_utf8_strcasecmp )
UNARY_EXPR	16:7	16:8	12	! g_slist_find_custom ( gc -> account -> permit , display_id , ( GCompareFunc ) purple_utf8_strcasecmp )
UNARY_OPERATOR	16:7	16:7	13	!
LEAF_NODE	16:7	16:7	14	!
FUNCTION_CALL	16:8	17:58	13	g_slist_find_custom ( gc -> account -> permit , display_id , ( GCompareFunc ) purple_utf8_strcasecmp )
CALLEE	16:8	16:8	14	g_slist_find_custom
LEAF_NODE	16:8	16:8	15	g_slist_find_custom
LEAF_NODE	16:27	16:27	14	(
ARGUMENT	16:28	16:28	14	gc -> account -> permit
FIELD	16:28	16:41	15	gc -> account -> permit
LEAF_NODE	16:28	16:28	16	gc
LEAF_NODE	16:30	16:30	16	->
LEAF_NODE	16:32	16:32	16	account
LEAF_NODE	16:39	16:39	16	->
LEAF_NODE	16:41	16:41	16	permit
LEAF_NODE	16:47	16:47	14	,
ARGUMENT	17:10	17:10	14	display_id
FIELD	17:10	17:10	15	display_id
LEAF_NODE	17:10	17:10	16	display_id
LEAF_NODE	17:20	17:20	14	,
ARGUMENT	17:22	17:36	14	( GCompareFunc ) purple_utf8_strcasecmp
LEAF_NODE	17:22	17:22	15	(
TYPE_NAME	17:23	17:23	15	GCompareFunc
LEAF_NODE	17:23	17:23	16	GCompareFunc
LEAF_NODE	17:35	17:35	15	)
FIELD	17:36	17:36	15	purple_utf8_strcasecmp
LEAF_NODE	17:36	17:36	16	purple_utf8_strcasecmp
LEAF_NODE	17:58	17:58	14	)
LEAF_NODE	17:59	17:59	10	)
STATEMENTS	17:61	19:3	10	
LEAF_NODE	17:61	17:61	11	{
STATEMENTS	18:4	18:4	11	
EXPR_STATEMENT	18:4	18:60	12	purple_privacy_permit_add ( gc -> account , display_id , TRUE ) ;
EXPR	18:4	18:4	13	purple_privacy_permit_add ( gc -> account , display_id , TRUE )
FUNCTION_CALL	18:4	18:59	14	purple_privacy_permit_add ( gc -> account , display_id , TRUE )
CALLEE	18:4	18:4	15	purple_privacy_permit_add
LEAF_NODE	18:4	18:4	16	purple_privacy_permit_add
LEAF_NODE	18:29	18:29	15	(
ARGUMENT	18:30	18:30	15	gc -> account
FIELD	18:30	18:34	16	gc -> account
LEAF_NODE	18:30	18:30	17	gc
LEAF_NODE	18:32	18:32	17	->
LEAF_NODE	18:34	18:34	17	account
LEAF_NODE	18:41	18:41	15	,
ARGUMENT	18:43	18:43	15	display_id
FIELD	18:43	18:43	16	display_id
LEAF_NODE	18:43	18:43	17	display_id
LEAF_NODE	18:53	18:53	15	,
ARGUMENT	18:55	18:55	15	TRUE
FIELD	18:55	18:55	16	TRUE
LEAF_NODE	18:55	18:55	17	TRUE
LEAF_NODE	18:59	18:59	15	)
LEAF_NODE	18:60	18:60	13	;
LEAF_NODE	19:3	19:3	11	}
LEAF_NODE	20:2	20:2	8	}
SELECTION	20:4	20:9	6	
KEYWORD	20:4	20:4	7	else
LEAF_NODE	20:4	20:4	8	else
STATEMENTS	20:9	25:2	7	
LEAF_NODE	20:9	20:9	8	{
STATEMENTS	21:3	21:3	8	
SELECTION	21:3	22:61	9	
KEYWORD	21:3	21:3	10	if
LEAF_NODE	21:3	21:3	11	if
LEAF_NODE	21:6	21:6	10	(
CONDITION	21:7	21:7	10	! g_slist_find_custom ( gc -> account -> permit , display_id , ( GCompareFunc ) purple_utf8_strcasecmp )
EXPR	21:7	21:7	11	! g_slist_find_custom ( gc -> account -> permit , display_id , ( GCompareFunc ) purple_utf8_strcasecmp )
UNARY_EXPR	21:7	21:8	12	! g_slist_find_custom ( gc -> account -> permit , display_id , ( GCompareFunc ) purple_utf8_strcasecmp )
UNARY_OPERATOR	21:7	21:7	13	!
LEAF_NODE	21:7	21:7	14	!
FUNCTION_CALL	21:8	22:58	13	g_slist_find_custom ( gc -> account -> permit , display_id , ( GCompareFunc ) purple_utf8_strcasecmp )
CALLEE	21:8	21:8	14	g_slist_find_custom
LEAF_NODE	21:8	21:8	15	g_slist_find_custom
LEAF_NODE	21:27	21:27	14	(
ARGUMENT	21:28	21:28	14	gc -> account -> permit
FIELD	21:28	21:41	15	gc -> account -> permit
LEAF_NODE	21:28	21:28	16	gc
LEAF_NODE	21:30	21:30	16	->
LEAF_NODE	21:32	21:32	16	account
LEAF_NODE	21:39	21:39	16	->
LEAF_NODE	21:41	21:41	16	permit
LEAF_NODE	21:47	21:47	14	,
ARGUMENT	22:10	22:10	14	display_id
FIELD	22:10	22:10	15	display_id
LEAF_NODE	22:10	22:10	16	display_id
LEAF_NODE	22:20	22:20	14	,
ARGUMENT	22:22	22:36	14	( GCompareFunc ) purple_utf8_strcasecmp
LEAF_NODE	22:22	22:22	15	(
TYPE_NAME	22:23	22:23	15	GCompareFunc
LEAF_NODE	22:23	22:23	16	GCompareFunc
LEAF_NODE	22:35	22:35	15	)
FIELD	22:36	22:36	15	purple_utf8_strcasecmp
LEAF_NODE	22:36	22:36	16	purple_utf8_strcasecmp
LEAF_NODE	22:58	22:58	14	)
LEAF_NODE	22:59	22:59	10	)
STATEMENTS	22:61	24:3	10	
LEAF_NODE	22:61	22:61	11	{
STATEMENTS	23:4	23:4	11	
EXPR_STATEMENT	23:4	23:58	12	purple_privacy_deny_add ( gc -> account , display_id , TRUE ) ;
EXPR	23:4	23:4	13	purple_privacy_deny_add ( gc -> account , display_id , TRUE )
FUNCTION_CALL	23:4	23:57	14	purple_privacy_deny_add ( gc -> account , display_id , TRUE )
CALLEE	23:4	23:4	15	purple_privacy_deny_add
LEAF_NODE	23:4	23:4	16	purple_privacy_deny_add
LEAF_NODE	23:27	23:27	15	(
ARGUMENT	23:28	23:28	15	gc -> account
FIELD	23:28	23:32	16	gc -> account
LEAF_NODE	23:28	23:28	17	gc
LEAF_NODE	23:30	23:30	17	->
LEAF_NODE	23:32	23:32	17	account
LEAF_NODE	23:39	23:39	15	,
ARGUMENT	23:41	23:41	15	display_id
FIELD	23:41	23:41	16	display_id
LEAF_NODE	23:41	23:41	17	display_id
LEAF_NODE	23:51	23:51	15	,
ARGUMENT	23:53	23:53	15	TRUE
FIELD	23:53	23:53	16	TRUE
LEAF_NODE	23:53	23:53	17	TRUE
LEAF_NODE	23:57	23:57	15	)
LEAF_NODE	23:58	23:58	13	;
LEAF_NODE	24:3	24:3	11	}
LEAF_NODE	25:2	25:2	8	}
LEAF_NODE	26:1	26:1	5	}
SELECTION	26:3	26:8	3	
KEYWORD	26:3	26:3	4	else
LEAF_NODE	26:3	26:3	5	else
STATEMENTS	26:8	31:1	4	
LEAF_NODE	26:8	26:8	5	{
STATEMENTS	27:2	30:2	5	
EXPR_STATEMENT	27:2	28:38	6	err = g_strdup_printf ( _ ( "Unable to add user to privacy list (%s)." ) , nm_error_to_string ( ret_code ) ) ;
EXPR	27:2	27:2	7	err = g_strdup_printf ( _ ( "Unable to add user to privacy list (%s)." ) , nm_error_to_string ( ret_code ) )
ASSIGN	27:2	27:8	8	err = g_strdup_printf ( _ ( "Unable to add user to privacy list (%s)." ) , nm_error_to_string ( ret_code ) )
LVAL	27:2	27:2	9	err
FIELD	27:2	27:2	10	err
LEAF_NODE	27:2	27:2	11	err
ASSIGN_OP	27:6	27:6	9	=
LEAF_NODE	27:6	27:6	10	=
RVAL	27:8	27:8	9	g_strdup_printf ( _ ( "Unable to add user to privacy list (%s)." ) , nm_error_to_string ( ret_code ) )
FUNCTION_CALL	27:8	28:37	10	g_strdup_printf ( _ ( "Unable to add user to privacy list (%s)." ) , nm_error_to_string ( ret_code ) )
CALLEE	27:8	27:8	11	g_strdup_printf
LEAF_NODE	27:8	27:8	12	g_strdup_printf
LEAF_NODE	27:23	27:23	11	(
ARGUMENT	27:24	27:24	11	_ ( "Unable to add user to privacy list (%s)." )
FUNCTION_CALL	27:24	27:68	12	_ ( "Unable to add user to privacy list (%s)." )
CALLEE	27:24	27:24	13	_
LEAF_NODE	27:24	27:24	14	_
LEAF_NODE	27:25	27:25	13	(
ARGUMENT	27:26	27:26	13	"Unable to add user to privacy list (%s)."
FIELD	27:26	27:26	14	"Unable to add user to privacy list (%s)."
LEAF_NODE	27:26	27:26	15	"Unable to add user to privacy list (%s)."
LEAF_NODE	27:68	27:68	13	)
LEAF_NODE	27:69	27:69	11	,
ARGUMENT	28:9	28:9	11	nm_error_to_string ( ret_code )
FUNCTION_CALL	28:9	28:36	12	nm_error_to_string ( ret_code )
CALLEE	28:9	28:9	13	nm_error_to_string
LEAF_NODE	28:9	28:9	14	nm_error_to_string
LEAF_NODE	28:27	28:27	13	(
ARGUMENT	28:28	28:28	13	ret_code
FIELD	28:28	28:28	14	ret_code
LEAF_NODE	28:28	28:28	15	ret_code
LEAF_NODE	28:36	28:36	13	)
LEAF_NODE	28:37	28:37	11	)
LEAF_NODE	28:38	28:38	7	;
EXPR_STATEMENT	29:2	29:42	6	purple_notify_error ( gc , NULL , err , NULL ) ;
EXPR	29:2	29:2	7	purple_notify_error ( gc , NULL , err , NULL )
FUNCTION_CALL	29:2	29:41	8	purple_notify_error ( gc , NULL , err , NULL )
CALLEE	29:2	29:2	9	purple_notify_error
LEAF_NODE	29:2	29:2	10	purple_notify_error
LEAF_NODE	29:21	29:21	9	(
ARGUMENT	29:22	29:22	9	gc
FIELD	29:22	29:22	10	gc
LEAF_NODE	29:22	29:22	11	gc
LEAF_NODE	29:24	29:24	9	,
ARGUMENT	29:26	29:26	9	NULL
FIELD	29:26	29:26	10	NULL
LEAF_NODE	29:26	29:26	11	NULL
LEAF_NODE	29:30	29:30	9	,
ARGUMENT	29:32	29:32	9	err
FIELD	29:32	29:32	10	err
LEAF_NODE	29:32	29:32	11	err
LEAF_NODE	29:35	29:35	9	,
ARGUMENT	29:37	29:37	9	NULL
FIELD	29:37	29:37	10	NULL
LEAF_NODE	29:37	29:37	11	NULL
LEAF_NODE	29:41	29:41	9	)
LEAF_NODE	29:42	29:42	7	;
EXPR_STATEMENT	30:2	30:13	6	g_free ( err ) ;
EXPR	30:2	30:2	7	g_free ( err )
FUNCTION_CALL	30:2	30:12	8	g_free ( err )
CALLEE	30:2	30:2	9	g_free
LEAF_NODE	30:2	30:2	10	g_free
LEAF_NODE	30:8	30:8	9	(
ARGUMENT	30:9	30:9	9	err
FIELD	30:9	30:9	10	err
LEAF_NODE	30:9	30:9	11	err
LEAF_NODE	30:12	30:12	9	)
LEAF_NODE	30:13	30:13	7	;
LEAF_NODE	31:1	31:1	5	}
LEAF_NODE	32:0	32:0	2	}

SOURCE_FILE	1:0	2:0	0	
FUNCTION_DEF	1:0	1:105	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	1:16	1:16	2	wgtkspell_set_language
LEAF_NODE	1:16	1:16	3	wgtkspell_set_language
PARAMETER_LIST	1:38	1:89	2	( GtkSpell * spell , const gchar * lang , GError * * error )
LEAF_NODE	1:38	1:38	3	(
PARAMETER_DECL	1:39	1:49	3	GtkSpell * spell
TYPE	1:39	1:48	4	GtkSpell *
TYPE_NAME	1:39	1:39	5	GtkSpell
LEAF_NODE	1:39	1:39	6	GtkSpell
POINTER	1:48	1:48	5	*
LEAF_NODE	1:48	1:48	6	*
NAME	1:49	1:49	4	spell
LEAF_NODE	1:49	1:49	5	spell
LEAF_NODE	1:54	1:54	3	,
PARAMETER_DECL	1:56	1:69	3	const gchar * lang
TYPE	1:56	1:68	4	const gchar *
TYPE_NAME	1:56	1:62	5	const gchar
LEAF_NODE	1:56	1:56	6	const
LEAF_NODE	1:62	1:62	6	gchar
POINTER	1:68	1:68	5	*
LEAF_NODE	1:68	1:68	6	*
NAME	1:69	1:69	4	lang
LEAF_NODE	1:69	1:69	5	lang
LEAF_NODE	1:73	1:73	3	,
PARAMETER_DECL	1:75	1:84	3	GError * * error
TYPE	1:75	1:82	4	GError * *
TYPE_NAME	1:75	1:75	5	GError
LEAF_NODE	1:75	1:75	6	GError
POINTER	1:82	1:83	5	* *
LEAF_NODE	1:82	1:82	6	*
LEAF_NODE	1:83	1:83	6	*
NAME	1:84	1:84	4	error
LEAF_NODE	1:84	1:84	5	error
LEAF_NODE	1:89	1:89	3	)
LEAF_NODE	1:91	1:91	2	{
STATEMENTS	1:92	1:92	2	
JUMP_STATEMENT	1:92	1:104	3	return FALSE ;
KEYWORD	1:92	1:92	4	return
LEAF_NODE	1:92	1:92	5	return
DESTINATION	1:99	1:99	4	FALSE
EXPR	1:99	1:99	5	FALSE
FIELD	1:99	1:99	6	FALSE
LEAF_NODE	1:99	1:99	7	FALSE
LEAF_NODE	1:104	1:104	4	;
LEAF_NODE	1:105	1:105	2	}
FUNCTION_DEF	2:0	2:52	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	wgtkspell_recheck_all
LEAF_NODE	2:12	2:12	3	wgtkspell_recheck_all
PARAMETER_LIST	2:33	2:49	2	( GtkSpell * spell )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:44	3	GtkSpell * spell
TYPE	2:34	2:43	4	GtkSpell *
TYPE_NAME	2:34	2:34	5	GtkSpell
LEAF_NODE	2:34	2:34	6	GtkSpell
POINTER	2:43	2:43	5	*
LEAF_NODE	2:43	2:43	6	*
NAME	2:44	2:44	4	spell
LEAF_NODE	2:44	2:44	5	spell
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	2:51	2:51	2	{
LEAF_NODE	0:0	0:0	2	STATEMENTS
LEAF_NODE	2:52	2:52	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	38:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	set_account_protocol_cb
LEAF_NODE	2:0	2:0	3	set_account_protocol_cb
PARAMETER_LIST	2:23	3:32	2	( GtkWidget * item , const char * id , AccountPrefsDialog * dialog )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:35	3	GtkWidget * item
TYPE	2:24	2:34	4	GtkWidget *
TYPE_NAME	2:24	2:24	5	GtkWidget
LEAF_NODE	2:24	2:24	6	GtkWidget
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	item
LEAF_NODE	2:35	2:35	5	item
LEAF_NODE	2:39	2:39	3	,
PARAMETER_DECL	2:41	2:53	3	const char * id
TYPE	2:41	2:52	4	const char *
TYPE_NAME	2:41	2:47	5	const char
LEAF_NODE	2:41	2:41	6	const
LEAF_NODE	2:47	2:47	6	char
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	id
LEAF_NODE	2:53	2:53	5	id
LEAF_NODE	2:55	2:55	3	,
PARAMETER_DECL	3:6	3:26	3	AccountPrefsDialog * dialog
TYPE	3:6	3:25	4	AccountPrefsDialog *
TYPE_NAME	3:6	3:6	5	AccountPrefsDialog
LEAF_NODE	3:6	3:6	6	AccountPrefsDialog
POINTER	3:25	3:25	5	*
LEAF_NODE	3:25	3:25	6	*
NAME	3:26	3:26	4	dialog
LEAF_NODE	3:26	3:26	5	dialog
LEAF_NODE	3:32	3:32	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	29:3	2	
SIMPLE_DECL	5:1	5:25	3	PurplePlugin * new_plugin ;
VAR_DECL	5:1	5:15	4	PurplePlugin * new_plugin
TYPE	5:1	5:14	5	PurplePlugin *
TYPE_NAME	5:1	5:1	6	PurplePlugin
LEAF_NODE	5:1	5:1	7	PurplePlugin
POINTER	5:14	5:14	6	*
LEAF_NODE	5:14	5:14	7	*
NAME	5:15	5:15	5	new_plugin
LEAF_NODE	5:15	5:15	6	new_plugin
LEAF_NODE	5:25	5:25	4	;
EXPR_STATEMENT	6:1	6:34	3	new_plugin = purple_find_prpl ( id ) ;
EXPR	6:1	6:1	4	new_plugin = purple_find_prpl ( id )
ASSIGN	6:1	6:14	5	new_plugin = purple_find_prpl ( id )
LVAL	6:1	6:1	6	new_plugin
FIELD	6:1	6:1	7	new_plugin
LEAF_NODE	6:1	6:1	8	new_plugin
ASSIGN_OP	6:12	6:12	6	=
LEAF_NODE	6:12	6:12	7	=
RVAL	6:14	6:14	6	purple_find_prpl ( id )
FUNCTION_CALL	6:14	6:33	7	purple_find_prpl ( id )
CALLEE	6:14	6:14	8	purple_find_prpl
LEAF_NODE	6:14	6:14	9	purple_find_prpl
LEAF_NODE	6:30	6:30	8	(
ARGUMENT	6:31	6:31	8	id
FIELD	6:31	6:31	9	id
LEAF_NODE	6:31	6:31	10	id
LEAF_NODE	6:33	6:33	8	)
LEAF_NODE	6:34	6:34	4	;
EXPR_STATEMENT	7:1	7:28	3	dialog -> plugin = new_plugin ;
EXPR	7:1	7:1	4	dialog -> plugin = new_plugin
ASSIGN	7:1	7:18	5	dialog -> plugin = new_plugin
LVAL	7:1	7:1	6	dialog -> plugin
FIELD	7:1	7:9	7	dialog -> plugin
LEAF_NODE	7:1	7:1	8	dialog
LEAF_NODE	7:7	7:7	8	->
LEAF_NODE	7:9	7:9	8	plugin
ASSIGN_OP	7:16	7:16	6	=
LEAF_NODE	7:16	7:16	7	=
RVAL	7:18	7:18	6	new_plugin
FIELD	7:18	7:18	7	new_plugin
LEAF_NODE	7:18	7:18	8	new_plugin
LEAF_NODE	7:28	7:28	4	;
SELECTION	8:1	9:1	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	dialog -> plugin != NULL
EXPR	8:5	8:23	5	dialog -> plugin != NULL
FIELD	8:5	8:13	6	dialog -> plugin
LEAF_NODE	8:5	8:5	7	dialog
LEAF_NODE	8:11	8:11	7	->
LEAF_NODE	8:13	8:13	7	plugin
EQ_OPERATOR	8:20	8:20	6	!=
LEAF_NODE	8:20	8:20	7	!=
FIELD	8:23	8:23	6	NULL
LEAF_NODE	8:23	8:23	7	NULL
LEAF_NODE	8:27	8:27	4	)
STATEMENTS	9:1	18:1	4	
LEAF_NODE	9:1	9:1	5	{
STATEMENTS	10:2	14:2	5	
SIMPLE_DECL	10:2	10:33	6	PurplePlugin * old_plugin ; old_plugin = NULL ;
VAR_DECL	10:2	10:16	7	PurplePlugin * old_plugin ; old_plugin = NULL
TYPE	10:2	10:15	8	PurplePlugin *
TYPE_NAME	10:2	10:2	9	PurplePlugin
LEAF_NODE	10:2	10:2	10	PurplePlugin
POINTER	10:15	10:15	9	*
LEAF_NODE	10:15	10:15	10	*
NAME	10:16	10:16	8	old_plugin
LEAF_NODE	10:16	10:16	9	old_plugin
LEAF_NODE	0:0	0:0	8	;
INIT	10:16	10:16	8	old_plugin = NULL
ASSIGN	10:16	10:29	9	old_plugin = NULL
LVAL	10:16	10:16	10	old_plugin
NAME	10:16	10:16	11	old_plugin
LEAF_NODE	10:16	10:16	12	old_plugin
ASSIGN_OP	10:27	10:27	10	=
LEAF_NODE	10:27	10:27	11	=
RVAL	10:29	10:29	10	NULL
FIELD	10:29	10:29	11	NULL
LEAF_NODE	10:29	10:29	12	NULL
LEAF_NODE	10:33	10:33	7	;
EXPR_STATEMENT	11:2	11:65	6	dialog -> prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( dialog -> plugin ) ;
EXPR	11:2	11:2	7	dialog -> prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( dialog -> plugin )
ASSIGN	11:2	11:22	8	dialog -> prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( dialog -> plugin )
LVAL	11:2	11:2	9	dialog -> prpl_info
FIELD	11:2	11:10	10	dialog -> prpl_info
LEAF_NODE	11:2	11:2	11	dialog
LEAF_NODE	11:8	11:8	11	->
LEAF_NODE	11:10	11:10	11	prpl_info
ASSIGN_OP	11:20	11:20	9	=
LEAF_NODE	11:20	11:20	10	=
RVAL	11:22	11:22	9	PURPLE_PLUGIN_PROTOCOL_INFO ( dialog -> plugin )
FUNCTION_CALL	11:22	11:64	10	PURPLE_PLUGIN_PROTOCOL_INFO ( dialog -> plugin )
CALLEE	11:22	11:22	11	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	11:22	11:22	12	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	11:49	11:49	11	(
ARGUMENT	11:50	11:50	11	dialog -> plugin
FIELD	11:50	11:58	12	dialog -> plugin
LEAF_NODE	11:50	11:50	13	dialog
LEAF_NODE	11:56	11:56	13	->
LEAF_NODE	11:58	11:58	13	plugin
LEAF_NODE	11:64	11:64	11	)
LEAF_NODE	11:65	11:65	7	;
SELECTION	12:2	13:3	6	
KEYWORD	12:2	12:2	7	if
LEAF_NODE	12:2	12:2	8	if
LEAF_NODE	12:5	12:5	7	(
CONDITION	12:6	12:6	7	dialog -> protocol_id
EXPR	12:6	12:6	8	dialog -> protocol_id
FIELD	12:6	12:14	9	dialog -> protocol_id
LEAF_NODE	12:6	12:6	10	dialog
LEAF_NODE	12:12	12:12	10	->
LEAF_NODE	12:14	12:14	10	protocol_id
LEAF_NODE	12:25	12:25	7	)
STATEMENTS	13:3	13:3	7	
EXPR_STATEMENT	13:3	13:53	8	old_plugin = purple_find_prpl ( dialog -> protocol_id ) ;
EXPR	13:3	13:3	9	old_plugin = purple_find_prpl ( dialog -> protocol_id )
ASSIGN	13:3	13:16	10	old_plugin = purple_find_prpl ( dialog -> protocol_id )
LVAL	13:3	13:3	11	old_plugin
FIELD	13:3	13:3	12	old_plugin
LEAF_NODE	13:3	13:3	13	old_plugin
ASSIGN_OP	13:14	13:14	11	=
LEAF_NODE	13:14	13:14	12	=
RVAL	13:16	13:16	11	purple_find_prpl ( dialog -> protocol_id )
FUNCTION_CALL	13:16	13:52	12	purple_find_prpl ( dialog -> protocol_id )
CALLEE	13:16	13:16	13	purple_find_prpl
LEAF_NODE	13:16	13:16	14	purple_find_prpl
LEAF_NODE	13:32	13:32	13	(
ARGUMENT	13:33	13:33	13	dialog -> protocol_id
FIELD	13:33	13:41	14	dialog -> protocol_id
LEAF_NODE	13:33	13:33	15	dialog
LEAF_NODE	13:39	13:39	15	->
LEAF_NODE	13:41	13:41	15	protocol_id
LEAF_NODE	13:52	13:52	13	)
LEAF_NODE	13:53	13:53	9	;
SELECTION	14:2	14:32	6	
KEYWORD	14:2	14:2	7	if
LEAF_NODE	14:2	14:2	8	if
LEAF_NODE	14:5	14:5	7	(
CONDITION	14:6	14:6	7	old_plugin != new_plugin
EXPR	14:6	14:20	8	old_plugin != new_plugin
FIELD	14:6	14:6	9	old_plugin
LEAF_NODE	14:6	14:6	10	old_plugin
EQ_OPERATOR	14:17	14:17	9	!=
LEAF_NODE	14:17	14:17	10	!=
FIELD	14:20	14:20	9	new_plugin
LEAF_NODE	14:20	14:20	10	new_plugin
LEAF_NODE	14:30	14:30	7	)
STATEMENTS	14:32	17:2	7	
LEAF_NODE	14:32	14:32	8	{
STATEMENTS	15:3	16:3	8	
EXPR_STATEMENT	15:3	15:30	9	g_free ( dialog -> protocol_id ) ;
EXPR	15:3	15:3	10	g_free ( dialog -> protocol_id )
FUNCTION_CALL	15:3	15:29	11	g_free ( dialog -> protocol_id )
CALLEE	15:3	15:3	12	g_free
LEAF_NODE	15:3	15:3	13	g_free
LEAF_NODE	15:9	15:9	12	(
ARGUMENT	15:10	15:10	12	dialog -> protocol_id
FIELD	15:10	15:18	13	dialog -> protocol_id
LEAF_NODE	15:10	15:10	14	dialog
LEAF_NODE	15:16	15:16	14	->
LEAF_NODE	15:18	15:18	14	protocol_id
LEAF_NODE	15:29	15:29	12	)
LEAF_NODE	15:30	15:30	10	;
EXPR_STATEMENT	16:3	16:59	9	dialog -> protocol_id = g_strdup ( dialog -> plugin -> info -> id ) ;
EXPR	16:3	16:3	10	dialog -> protocol_id = g_strdup ( dialog -> plugin -> info -> id )
ASSIGN	16:3	16:25	11	dialog -> protocol_id = g_strdup ( dialog -> plugin -> info -> id )
LVAL	16:3	16:3	12	dialog -> protocol_id
FIELD	16:3	16:11	13	dialog -> protocol_id
LEAF_NODE	16:3	16:3	14	dialog
LEAF_NODE	16:9	16:9	14	->
LEAF_NODE	16:11	16:11	14	protocol_id
ASSIGN_OP	16:23	16:23	12	=
LEAF_NODE	16:23	16:23	13	=
RVAL	16:25	16:25	12	g_strdup ( dialog -> plugin -> info -> id )
FUNCTION_CALL	16:25	16:58	13	g_strdup ( dialog -> plugin -> info -> id )
CALLEE	16:25	16:25	14	g_strdup
LEAF_NODE	16:25	16:25	15	g_strdup
LEAF_NODE	16:33	16:33	14	(
ARGUMENT	16:34	16:34	14	dialog -> plugin -> info -> id
FIELD	16:34	16:56	15	dialog -> plugin -> info -> id
LEAF_NODE	16:34	16:34	16	dialog
LEAF_NODE	16:40	16:40	16	->
LEAF_NODE	16:42	16:42	16	plugin
LEAF_NODE	16:48	16:48	16	->
LEAF_NODE	16:50	16:50	16	info
LEAF_NODE	16:54	16:54	16	->
LEAF_NODE	16:56	16:56	16	id
LEAF_NODE	16:58	16:58	14	)
LEAF_NODE	16:59	16:59	10	;
LEAF_NODE	17:2	17:2	8	}
LEAF_NODE	18:1	18:1	5	}
SELECTION	19:1	20:2	3	
KEYWORD	19:1	19:1	4	if
LEAF_NODE	19:1	19:1	5	if
LEAF_NODE	19:4	19:4	4	(
CONDITION	19:5	19:5	4	dialog -> account != NULL
EXPR	19:5	19:24	5	dialog -> account != NULL
FIELD	19:5	19:13	6	dialog -> account
LEAF_NODE	19:5	19:5	7	dialog
LEAF_NODE	19:11	19:11	7	->
LEAF_NODE	19:13	19:13	7	account
EQ_OPERATOR	19:21	19:21	6	!=
LEAF_NODE	19:21	19:21	7	!=
FIELD	19:24	19:24	6	NULL
LEAF_NODE	19:24	19:24	7	NULL
LEAF_NODE	19:28	19:28	4	)
STATEMENTS	20:2	20:2	4	
EXPR_STATEMENT	20:2	20:48	5	purple_account_clear_settings ( dialog -> account ) ;
EXPR	20:2	20:2	6	purple_account_clear_settings ( dialog -> account )
FUNCTION_CALL	20:2	20:47	7	purple_account_clear_settings ( dialog -> account )
CALLEE	20:2	20:2	8	purple_account_clear_settings
LEAF_NODE	20:2	20:2	9	purple_account_clear_settings
LEAF_NODE	20:31	20:31	8	(
ARGUMENT	20:32	20:32	8	dialog -> account
FIELD	20:32	20:40	9	dialog -> account
LEAF_NODE	20:32	20:32	10	dialog
LEAF_NODE	20:38	20:38	10	->
LEAF_NODE	20:40	20:40	10	account
LEAF_NODE	20:47	20:47	8	)
LEAF_NODE	20:48	20:48	6	;
EXPR_STATEMENT	21:1	21:47	3	add_login_options ( dialog , dialog -> top_vbox ) ;
EXPR	21:1	21:1	4	add_login_options ( dialog , dialog -> top_vbox )
FUNCTION_CALL	21:1	21:46	5	add_login_options ( dialog , dialog -> top_vbox )
CALLEE	21:1	21:1	6	add_login_options
LEAF_NODE	21:1	21:1	7	add_login_options
LEAF_NODE	21:18	21:18	6	(
ARGUMENT	21:19	21:19	6	dialog
FIELD	21:19	21:19	7	dialog
LEAF_NODE	21:19	21:19	8	dialog
LEAF_NODE	21:25	21:25	6	,
ARGUMENT	21:30	21:30	6	dialog -> top_vbox
FIELD	21:30	21:38	7	dialog -> top_vbox
LEAF_NODE	21:30	21:30	8	dialog
LEAF_NODE	21:36	21:36	8	->
LEAF_NODE	21:38	21:38	8	top_vbox
LEAF_NODE	21:46	21:46	6	)
LEAF_NODE	21:47	21:47	4	;
EXPR_STATEMENT	22:1	22:47	3	add_user_options ( dialog , dialog -> top_vbox ) ;
EXPR	22:1	22:1	4	add_user_options ( dialog , dialog -> top_vbox )
FUNCTION_CALL	22:1	22:46	5	add_user_options ( dialog , dialog -> top_vbox )
CALLEE	22:1	22:1	6	add_user_options
LEAF_NODE	22:1	22:1	7	add_user_options
LEAF_NODE	22:17	22:17	6	(
ARGUMENT	22:18	22:18	6	dialog
FIELD	22:18	22:18	7	dialog
LEAF_NODE	22:18	22:18	8	dialog
LEAF_NODE	22:24	22:24	6	,
ARGUMENT	22:30	22:30	6	dialog -> top_vbox
FIELD	22:30	22:38	7	dialog -> top_vbox
LEAF_NODE	22:30	22:30	8	dialog
LEAF_NODE	22:36	22:36	8	->
LEAF_NODE	22:38	22:38	8	top_vbox
LEAF_NODE	22:46	22:46	6	)
LEAF_NODE	22:47	22:47	4	;
EXPR_STATEMENT	23:1	23:29	3	add_protocol_options ( dialog ) ;
EXPR	23:1	23:1	4	add_protocol_options ( dialog )
FUNCTION_CALL	23:1	23:28	5	add_protocol_options ( dialog )
CALLEE	23:1	23:1	6	add_protocol_options
LEAF_NODE	23:1	23:1	7	add_protocol_options
LEAF_NODE	23:21	23:21	6	(
ARGUMENT	23:22	23:22	6	dialog
FIELD	23:22	23:22	7	dialog
LEAF_NODE	23:22	23:22	8	dialog
LEAF_NODE	23:28	23:28	6	)
LEAF_NODE	23:29	23:29	4	;
EXPR_STATEMENT	24:1	24:26	3	add_voice_options ( dialog ) ;
EXPR	24:1	24:1	4	add_voice_options ( dialog )
FUNCTION_CALL	24:1	24:25	5	add_voice_options ( dialog )
CALLEE	24:1	24:1	6	add_voice_options
LEAF_NODE	24:1	24:1	7	add_voice_options
LEAF_NODE	24:18	24:18	6	(
ARGUMENT	24:19	24:19	6	dialog
FIELD	24:19	24:19	7	dialog
LEAF_NODE	24:19	24:19	8	dialog
LEAF_NODE	24:25	24:25	6	)
LEAF_NODE	24:26	24:26	4	;
EXPR_STATEMENT	25:1	25:45	3	gtk_widget_grab_focus ( dialog -> protocol_menu ) ;
EXPR	25:1	25:1	4	gtk_widget_grab_focus ( dialog -> protocol_menu )
FUNCTION_CALL	25:1	25:44	5	gtk_widget_grab_focus ( dialog -> protocol_menu )
CALLEE	25:1	25:1	6	gtk_widget_grab_focus
LEAF_NODE	25:1	25:1	7	gtk_widget_grab_focus
LEAF_NODE	25:22	25:22	6	(
ARGUMENT	25:23	25:23	6	dialog -> protocol_menu
FIELD	25:23	25:31	7	dialog -> protocol_menu
LEAF_NODE	25:23	25:23	8	dialog
LEAF_NODE	25:29	25:29	8	->
LEAF_NODE	25:31	25:31	8	protocol_menu
LEAF_NODE	25:44	25:44	6	)
LEAF_NODE	25:45	25:45	4	;
SELECTION	26:1	27:48	3	
KEYWORD	26:1	26:1	4	if
LEAF_NODE	26:1	26:1	5	if
LEAF_NODE	26:4	26:4	4	(
CONDITION	26:5	26:5	4	! dialog -> prpl_info || ! dialog -> prpl_info -> register_user || g_object_get_data ( G_OBJECT ( item ) , "fake" )
EXPR	26:5	26:5	5	! dialog -> prpl_info || ! dialog -> prpl_info -> register_user || g_object_get_data ( G_OBJECT ( item ) , "fake" )
OR	26:5	26:27	6	! dialog -> prpl_info || ! dialog -> prpl_info -> register_user || g_object_get_data ( G_OBJECT ( item ) , "fake" )
EXPR	26:5	26:5	7	! dialog -> prpl_info
UNARY_EXPR	26:5	26:6	8	! dialog -> prpl_info
UNARY_OPERATOR	26:5	26:5	9	!
LEAF_NODE	26:5	26:5	10	!
FIELD	26:6	26:14	9	dialog -> prpl_info
LEAF_NODE	26:6	26:6	10	dialog
LEAF_NODE	26:12	26:12	10	->
LEAF_NODE	26:14	26:14	10	prpl_info
LEAF_NODE	26:24	26:24	7	||
EXPR	26:27	26:27	7	! dialog -> prpl_info -> register_user || g_object_get_data ( G_OBJECT ( item ) , "fake" )
OR	26:27	27:5	8	! dialog -> prpl_info -> register_user || g_object_get_data ( G_OBJECT ( item ) , "fake" )
EXPR	26:27	26:27	9	! dialog -> prpl_info -> register_user
UNARY_EXPR	26:27	26:28	10	! dialog -> prpl_info -> register_user
UNARY_OPERATOR	26:27	26:27	11	!
LEAF_NODE	26:27	26:27	12	!
FIELD	26:28	26:47	11	dialog -> prpl_info -> register_user
LEAF_NODE	26:28	26:28	12	dialog
LEAF_NODE	26:34	26:34	12	->
LEAF_NODE	26:36	26:36	12	prpl_info
LEAF_NODE	26:45	26:45	12	->
LEAF_NODE	26:47	26:47	12	register_user
LEAF_NODE	26:61	26:61	9	||
EXPR	27:5	27:5	9	g_object_get_data ( G_OBJECT ( item ) , "fake" )
FUNCTION_CALL	27:5	27:45	10	g_object_get_data ( G_OBJECT ( item ) , "fake" )
CALLEE	27:5	27:5	11	g_object_get_data
LEAF_NODE	27:5	27:5	12	g_object_get_data
LEAF_NODE	27:22	27:22	11	(
ARGUMENT	27:23	27:23	11	G_OBJECT ( item )
FUNCTION_CALL	27:23	27:36	12	G_OBJECT ( item )
CALLEE	27:23	27:23	13	G_OBJECT
LEAF_NODE	27:23	27:23	14	G_OBJECT
LEAF_NODE	27:31	27:31	13	(
ARGUMENT	27:32	27:32	13	item
FIELD	27:32	27:32	14	item
LEAF_NODE	27:32	27:32	15	item
LEAF_NODE	27:36	27:36	13	)
LEAF_NODE	27:37	27:37	11	,
ARGUMENT	27:39	27:39	11	"fake"
FIELD	27:39	27:39	12	"fake"
LEAF_NODE	27:39	27:39	13	"fake"
LEAF_NODE	27:45	27:45	11	)
LEAF_NODE	27:46	27:46	4	)
STATEMENTS	27:48	29:1	4	
LEAF_NODE	27:48	27:48	5	{
STATEMENTS	28:2	28:2	5	
EXPR_STATEMENT	28:2	28:42	6	gtk_widget_hide ( dialog -> register_button ) ;
EXPR	28:2	28:2	7	gtk_widget_hide ( dialog -> register_button )
FUNCTION_CALL	28:2	28:41	8	gtk_widget_hide ( dialog -> register_button )
CALLEE	28:2	28:2	9	gtk_widget_hide
LEAF_NODE	28:2	28:2	10	gtk_widget_hide
LEAF_NODE	28:17	28:17	9	(
ARGUMENT	28:18	28:18	9	dialog -> register_button
FIELD	28:18	28:26	10	dialog -> register_button
LEAF_NODE	28:18	28:18	11	dialog
LEAF_NODE	28:24	28:24	11	->
LEAF_NODE	28:26	28:26	11	register_button
LEAF_NODE	28:41	28:41	9	)
LEAF_NODE	28:42	28:42	7	;
LEAF_NODE	29:1	29:1	5	}
SELECTION	29:3	29:8	3	
KEYWORD	29:3	29:3	4	else
LEAF_NODE	29:3	29:3	5	else
STATEMENTS	29:8	37:1	4	
LEAF_NODE	29:8	29:8	5	{
STATEMENTS	30:2	36:2	5	
SELECTION	30:2	31:69	6	
KEYWORD	30:2	30:2	7	if
LEAF_NODE	30:2	30:2	8	if
LEAF_NODE	30:5	30:5	7	(
CONDITION	30:6	30:6	7	dialog -> prpl_info != NULL && ( dialog -> prpl_info -> options & OPT_PROTO_REGISTER_NOSCREENNAME )
EXPR	30:6	30:6	8	dialog -> prpl_info != NULL && ( dialog -> prpl_info -> options & OPT_PROTO_REGISTER_NOSCREENNAME )
AND	30:6	31:5	9	dialog -> prpl_info != NULL && ( dialog -> prpl_info -> options & OPT_PROTO_REGISTER_NOSCREENNAME )
EXPR	30:6	30:27	10	dialog -> prpl_info != NULL
FIELD	30:6	30:14	11	dialog -> prpl_info
LEAF_NODE	30:6	30:6	12	dialog
LEAF_NODE	30:12	30:12	12	->
LEAF_NODE	30:14	30:14	12	prpl_info
EQ_OPERATOR	30:24	30:24	11	!=
LEAF_NODE	30:24	30:24	12	!=
FIELD	30:27	30:27	11	NULL
LEAF_NODE	30:27	30:27	12	NULL
LEAF_NODE	30:32	30:32	10	&&
EXPR	31:5	31:66	10	( dialog -> prpl_info -> options & OPT_PROTO_REGISTER_NOSCREENNAME )
LEAF_NODE	31:5	31:5	11	(
FIELD	31:6	31:25	11	dialog -> prpl_info -> options
LEAF_NODE	31:6	31:6	12	dialog
LEAF_NODE	31:12	31:12	12	->
LEAF_NODE	31:14	31:14	12	prpl_info
LEAF_NODE	31:23	31:23	12	->
LEAF_NODE	31:25	31:25	12	options
LEAF_NODE	31:33	31:33	11	&
FIELD	31:35	31:35	11	OPT_PROTO_REGISTER_NOSCREENNAME
LEAF_NODE	31:35	31:35	12	OPT_PROTO_REGISTER_NOSCREENNAME
LEAF_NODE	31:66	31:66	11	)
LEAF_NODE	31:67	31:67	7	)
STATEMENTS	31:69	33:2	7	
LEAF_NODE	31:69	31:69	8	{
STATEMENTS	32:3	32:3	8	
EXPR_STATEMENT	32:3	32:58	9	gtk_widget_set_sensitive ( dialog -> register_button , TRUE ) ;
EXPR	32:3	32:3	10	gtk_widget_set_sensitive ( dialog -> register_button , TRUE )
FUNCTION_CALL	32:3	32:57	11	gtk_widget_set_sensitive ( dialog -> register_button , TRUE )
CALLEE	32:3	32:3	12	gtk_widget_set_sensitive
LEAF_NODE	32:3	32:3	13	gtk_widget_set_sensitive
LEAF_NODE	32:27	32:27	12	(
ARGUMENT	32:28	32:28	12	dialog -> register_button
FIELD	32:28	32:36	13	dialog -> register_button
LEAF_NODE	32:28	32:28	14	dialog
LEAF_NODE	32:34	32:34	14	->
LEAF_NODE	32:36	32:36	14	register_button
LEAF_NODE	32:51	32:51	12	,
ARGUMENT	32:53	32:53	12	TRUE
FIELD	32:53	32:53	13	TRUE
LEAF_NODE	32:53	32:53	14	TRUE
LEAF_NODE	32:57	32:57	12	)
LEAF_NODE	32:58	32:58	10	;
LEAF_NODE	33:2	33:2	8	}
SELECTION	33:4	33:9	6	
KEYWORD	33:4	33:4	7	else
LEAF_NODE	33:4	33:4	8	else
STATEMENTS	33:9	35:2	7	
LEAF_NODE	33:9	33:9	8	{
STATEMENTS	34:3	34:3	8	
EXPR_STATEMENT	34:3	34:59	9	gtk_widget_set_sensitive ( dialog -> register_button , FALSE ) ;
EXPR	34:3	34:3	10	gtk_widget_set_sensitive ( dialog -> register_button , FALSE )
FUNCTION_CALL	34:3	34:58	11	gtk_widget_set_sensitive ( dialog -> register_button , FALSE )
CALLEE	34:3	34:3	12	gtk_widget_set_sensitive
LEAF_NODE	34:3	34:3	13	gtk_widget_set_sensitive
LEAF_NODE	34:27	34:27	12	(
ARGUMENT	34:28	34:28	12	dialog -> register_button
FIELD	34:28	34:36	13	dialog -> register_button
LEAF_NODE	34:28	34:28	14	dialog
LEAF_NODE	34:34	34:34	14	->
LEAF_NODE	34:36	34:36	14	register_button
LEAF_NODE	34:51	34:51	12	,
ARGUMENT	34:53	34:53	12	FALSE
FIELD	34:53	34:53	13	FALSE
LEAF_NODE	34:53	34:53	14	FALSE
LEAF_NODE	34:58	34:58	12	)
LEAF_NODE	34:59	34:59	10	;
LEAF_NODE	35:2	35:2	8	}
EXPR_STATEMENT	36:2	36:42	6	gtk_widget_show ( dialog -> register_button ) ;
EXPR	36:2	36:2	7	gtk_widget_show ( dialog -> register_button )
FUNCTION_CALL	36:2	36:41	8	gtk_widget_show ( dialog -> register_button )
CALLEE	36:2	36:2	9	gtk_widget_show
LEAF_NODE	36:2	36:2	10	gtk_widget_show
LEAF_NODE	36:17	36:17	9	(
ARGUMENT	36:18	36:18	9	dialog -> register_button
FIELD	36:18	36:26	10	dialog -> register_button
LEAF_NODE	36:18	36:18	11	dialog
LEAF_NODE	36:24	36:24	11	->
LEAF_NODE	36:26	36:26	11	register_button
LEAF_NODE	36:41	36:41	9	)
LEAF_NODE	36:42	36:42	7	;
LEAF_NODE	37:1	37:1	5	}
LEAF_NODE	38:0	38:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	66:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	x509_ca_lazy_init
LEAF_NODE	2:0	2:0	3	x509_ca_lazy_init
PARAMETER_LIST	2:17	2:22	2	( void )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:18	3	void
LEAF_NODE	2:18	2:18	4	void
LEAF_NODE	2:22	2:22	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	65:1	2	
SIMPLE_DECL	4:1	4:30	3	PurpleCertificateScheme * x509 ;
VAR_DECL	4:1	4:26	4	PurpleCertificateScheme * x509
TYPE	4:1	4:25	5	PurpleCertificateScheme *
TYPE_NAME	4:1	4:1	6	PurpleCertificateScheme
LEAF_NODE	4:1	4:1	7	PurpleCertificateScheme
POINTER	4:25	4:25	6	*
LEAF_NODE	4:25	4:25	7	*
NAME	4:26	4:26	5	x509
LEAF_NODE	4:26	4:26	6	x509
LEAF_NODE	4:30	4:30	4	;
SIMPLE_DECL	5:1	5:14	3	GDir * certdir ;
VAR_DECL	5:1	5:7	4	GDir * certdir
TYPE	5:1	5:6	5	GDir *
TYPE_NAME	5:1	5:1	6	GDir
LEAF_NODE	5:1	5:1	7	GDir
POINTER	5:6	5:6	6	*
LEAF_NODE	5:6	5:6	7	*
NAME	5:7	5:7	5	certdir
LEAF_NODE	5:7	5:7	6	certdir
LEAF_NODE	5:14	5:14	4	;
SIMPLE_DECL	6:1	6:19	3	const gchar * entry ;
VAR_DECL	6:1	6:14	4	const gchar * entry
TYPE	6:1	6:13	5	const gchar *
TYPE_NAME	6:1	6:7	6	const gchar
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	gchar
POINTER	6:13	6:13	6	*
LEAF_NODE	6:13	6:13	7	*
NAME	6:14	6:14	5	entry
LEAF_NODE	6:14	6:14	6	entry
LEAF_NODE	6:19	6:19	4	;
SIMPLE_DECL	7:1	7:30	3	GPatternSpec * pempat , GPatternSpec * crtpat ;
INIT_DECL_LIST	7:1	7:1	4	GPatternSpec * pempat , GPatternSpec * crtpat
VAR_DECL	7:1	7:15	5	GPatternSpec * pempat
TYPE	7:1	7:14	6	GPatternSpec *
TYPE_NAME	7:1	7:1	7	GPatternSpec
LEAF_NODE	7:1	7:1	8	GPatternSpec
POINTER	7:14	7:14	7	*
LEAF_NODE	7:14	7:14	8	*
NAME	7:15	7:15	6	pempat
LEAF_NODE	7:15	7:15	7	pempat
LEAF_NODE	7:21	7:21	5	,
VAR_DECL	7:1	7:24	5	GPatternSpec * crtpat
TYPE	7:1	7:23	6	GPatternSpec *
TYPE_NAME	7:1	7:1	7	GPatternSpec
LEAF_NODE	7:1	7:1	8	GPatternSpec
POINTER	7:23	7:23	7	*
LEAF_NODE	7:23	7:23	8	*
NAME	7:24	7:24	6	crtpat
LEAF_NODE	7:24	7:24	7	crtpat
LEAF_NODE	7:30	7:30	4	;
SIMPLE_DECL	8:1	8:19	3	GList * iter ; iter = NULL ;
VAR_DECL	8:1	8:8	4	GList * iter ; iter = NULL
TYPE	8:1	8:7	5	GList *
TYPE_NAME	8:1	8:1	6	GList
LEAF_NODE	8:1	8:1	7	GList
POINTER	8:7	8:7	6	*
LEAF_NODE	8:7	8:7	7	*
NAME	8:8	8:8	5	iter
LEAF_NODE	8:8	8:8	6	iter
LEAF_NODE	0:0	0:0	5	;
INIT	8:8	8:8	5	iter = NULL
ASSIGN	8:8	8:15	6	iter = NULL
LVAL	8:8	8:8	7	iter
NAME	8:8	8:8	8	iter
LEAF_NODE	8:8	8:8	9	iter
ASSIGN_OP	8:13	8:13	7	=
LEAF_NODE	8:13	8:13	8	=
RVAL	8:15	8:15	7	NULL
FIELD	8:15	8:15	8	NULL
LEAF_NODE	8:15	8:15	9	NULL
LEAF_NODE	8:19	8:19	4	;
SIMPLE_DECL	9:1	9:20	3	GSList * crts ; crts = NULL ;
VAR_DECL	9:1	9:9	4	GSList * crts ; crts = NULL
TYPE	9:1	9:8	5	GSList *
TYPE_NAME	9:1	9:1	6	GSList
LEAF_NODE	9:1	9:1	7	GSList
POINTER	9:8	9:8	6	*
LEAF_NODE	9:8	9:8	7	*
NAME	9:9	9:9	5	crts
LEAF_NODE	9:9	9:9	6	crts
LEAF_NODE	0:0	0:0	5	;
INIT	9:9	9:9	5	crts = NULL
ASSIGN	9:9	9:16	6	crts = NULL
LVAL	9:9	9:9	7	crts
NAME	9:9	9:9	8	crts
LEAF_NODE	9:9	9:9	9	crts
ASSIGN_OP	9:14	9:14	7	=
LEAF_NODE	9:14	9:14	8	=
RVAL	9:16	9:16	7	NULL
FIELD	9:16	9:16	8	NULL
LEAF_NODE	9:16	9:16	9	NULL
LEAF_NODE	9:20	9:20	4	;
SELECTION	10:1	10:26	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	x509_ca_initialized
EXPR	10:5	10:5	5	x509_ca_initialized
FIELD	10:5	10:5	6	x509_ca_initialized
LEAF_NODE	10:5	10:5	7	x509_ca_initialized
LEAF_NODE	10:24	10:24	4	)
STATEMENTS	10:26	10:26	4	
JUMP_STATEMENT	10:26	10:37	5	return TRUE ;
KEYWORD	10:26	10:26	6	return
LEAF_NODE	10:26	10:26	7	return
DESTINATION	10:33	10:33	6	TRUE
EXPR	10:33	10:33	7	TRUE
FIELD	10:33	10:33	8	TRUE
LEAF_NODE	10:33	10:33	9	TRUE
LEAF_NODE	10:37	10:37	6	;
EXPR_STATEMENT	12:1	12:59	3	x509 = purple_certificate_find_scheme ( x509_ca . scheme_name ) ;
EXPR	12:1	12:1	4	x509 = purple_certificate_find_scheme ( x509_ca . scheme_name )
ASSIGN	12:1	12:8	5	x509 = purple_certificate_find_scheme ( x509_ca . scheme_name )
LVAL	12:1	12:1	6	x509
FIELD	12:1	12:1	7	x509
LEAF_NODE	12:1	12:1	8	x509
ASSIGN_OP	12:6	12:6	6	=
LEAF_NODE	12:6	12:6	7	=
RVAL	12:8	12:8	6	purple_certificate_find_scheme ( x509_ca . scheme_name )
FUNCTION_CALL	12:8	12:58	7	purple_certificate_find_scheme ( x509_ca . scheme_name )
CALLEE	12:8	12:8	8	purple_certificate_find_scheme
LEAF_NODE	12:8	12:8	9	purple_certificate_find_scheme
LEAF_NODE	12:38	12:38	8	(
ARGUMENT	12:39	12:39	8	x509_ca . scheme_name
FIELD	12:39	12:47	9	x509_ca . scheme_name
LEAF_NODE	12:39	12:39	10	x509_ca
LEAF_NODE	12:46	12:46	10	.
LEAF_NODE	12:47	12:47	10	scheme_name
LEAF_NODE	12:58	12:58	8	)
LEAF_NODE	12:59	12:59	4	;
SELECTION	13:1	13:14	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:6	13:6	4	! x509
EXPR	13:6	13:6	5	! x509
UNARY_EXPR	13:6	13:7	6	! x509
UNARY_OPERATOR	13:6	13:6	7	!
LEAF_NODE	13:6	13:6	8	!
FIELD	13:7	13:7	7	x509
LEAF_NODE	13:7	13:7	8	x509
LEAF_NODE	13:12	13:12	4	)
STATEMENTS	13:14	19:1	4	
LEAF_NODE	13:14	13:14	5	{
STATEMENTS	14:2	18:2	5	
LEAF_NODE	14:2	14:2	6	purple_debug_warning
LEAF_NODE	14:22	14:22	6	(
LEAF_NODE	14:23	14:23	6	"certificate/x509/ca"
LEAF_NODE	14:44	14:44	6	,
LEAF_NODE	15:6	15:6	6	"Lazy init failed because an X.509 Scheme "
LEAF_NODE	16:6	16:6	6	"is not yet registered. Maybe it will be "
LEAF_NODE	17:6	17:6	6	"better later.\n"
LEAF_NODE	17:23	17:23	6	)
LEAF_NODE	17:24	17:24	6	;
JUMP_STATEMENT	18:2	18:14	6	return FALSE ;
KEYWORD	18:2	18:2	7	return
LEAF_NODE	18:2	18:2	8	return
DESTINATION	18:9	18:9	7	FALSE
EXPR	18:9	18:9	8	FALSE
FIELD	18:9	18:9	9	FALSE
LEAF_NODE	18:9	18:9	10	FALSE
LEAF_NODE	18:14	18:14	7	;
LEAF_NODE	19:1	19:1	5	}
EXPR_STATEMENT	21:1	21:37	3	pempat = g_pattern_spec_new ( "*.pem" ) ;
EXPR	21:1	21:1	4	pempat = g_pattern_spec_new ( "*.pem" )
ASSIGN	21:1	21:10	5	pempat = g_pattern_spec_new ( "*.pem" )
LVAL	21:1	21:1	6	pempat
FIELD	21:1	21:1	7	pempat
LEAF_NODE	21:1	21:1	8	pempat
ASSIGN_OP	21:8	21:8	6	=
LEAF_NODE	21:8	21:8	7	=
RVAL	21:10	21:10	6	g_pattern_spec_new ( "*.pem" )
FUNCTION_CALL	21:10	21:36	7	g_pattern_spec_new ( "*.pem" )
CALLEE	21:10	21:10	8	g_pattern_spec_new
LEAF_NODE	21:10	21:10	9	g_pattern_spec_new
LEAF_NODE	21:28	21:28	8	(
ARGUMENT	21:29	21:29	8	"*.pem"
FIELD	21:29	21:29	9	"*.pem"
LEAF_NODE	21:29	21:29	10	"*.pem"
LEAF_NODE	21:36	21:36	8	)
LEAF_NODE	21:37	21:37	4	;
EXPR_STATEMENT	22:1	22:37	3	crtpat = g_pattern_spec_new ( "*.crt" ) ;
EXPR	22:1	22:1	4	crtpat = g_pattern_spec_new ( "*.crt" )
ASSIGN	22:1	22:10	5	crtpat = g_pattern_spec_new ( "*.crt" )
LVAL	22:1	22:1	6	crtpat
FIELD	22:1	22:1	7	crtpat
LEAF_NODE	22:1	22:1	8	crtpat
ASSIGN_OP	22:8	22:8	6	=
LEAF_NODE	22:8	22:8	7	=
RVAL	22:10	22:10	6	g_pattern_spec_new ( "*.crt" )
FUNCTION_CALL	22:10	22:36	7	g_pattern_spec_new ( "*.crt" )
CALLEE	22:10	22:10	8	g_pattern_spec_new
LEAF_NODE	22:10	22:10	9	g_pattern_spec_new
LEAF_NODE	22:28	22:28	8	(
ARGUMENT	22:29	22:29	8	"*.crt"
FIELD	22:29	22:29	9	"*.crt"
LEAF_NODE	22:29	22:29	10	"*.crt"
LEAF_NODE	22:36	22:36	8	)
LEAF_NODE	22:37	22:37	4	;
ITERATION	24:1	24:53	3	
KEYWORD	24:1	24:1	4	for
LEAF_NODE	24:1	24:1	5	for
LEAF_NODE	24:5	24:5	4	(
FOR_INIT	24:6	24:26	4	iter = x509_ca_paths ;
EXPR	24:6	24:6	5	iter = x509_ca_paths
ASSIGN	24:6	24:13	6	iter = x509_ca_paths
LVAL	24:6	24:6	7	iter
FIELD	24:6	24:6	8	iter
LEAF_NODE	24:6	24:6	9	iter
ASSIGN_OP	24:11	24:11	7	=
LEAF_NODE	24:11	24:11	8	=
RVAL	24:13	24:13	7	x509_ca_paths
FIELD	24:13	24:13	8	x509_ca_paths
LEAF_NODE	24:13	24:13	9	x509_ca_paths
LEAF_NODE	24:26	24:26	5	;
CONDITION	24:28	24:28	4	iter
EXPR	24:28	24:28	5	iter
FIELD	24:28	24:28	6	iter
LEAF_NODE	24:28	24:28	7	iter
LEAF_NODE	24:32	24:32	4	;
FOR_EXPR	24:34	24:34	4	iter = iter -> next
EXPR	24:34	24:34	5	iter = iter -> next
ASSIGN	24:34	24:41	6	iter = iter -> next
LVAL	24:34	24:34	7	iter
FIELD	24:34	24:34	8	iter
LEAF_NODE	24:34	24:34	9	iter
ASSIGN_OP	24:39	24:39	7	=
LEAF_NODE	24:39	24:39	8	=
RVAL	24:41	24:41	7	iter -> next
FIELD	24:41	24:47	8	iter -> next
LEAF_NODE	24:41	24:41	9	iter
LEAF_NODE	24:45	24:45	9	->
LEAF_NODE	24:47	24:47	9	next
LEAF_NODE	24:51	24:51	4	)
STATEMENTS	24:53	59:1	4	
LEAF_NODE	24:53	24:53	5	{
STATEMENTS	25:2	58:2	5	
EXPR_STATEMENT	25:2	25:43	6	certdir = g_dir_open ( iter -> data , 0 , NULL ) ;
EXPR	25:2	25:2	7	certdir = g_dir_open ( iter -> data , 0 , NULL )
ASSIGN	25:2	25:12	8	certdir = g_dir_open ( iter -> data , 0 , NULL )
LVAL	25:2	25:2	9	certdir
FIELD	25:2	25:2	10	certdir
LEAF_NODE	25:2	25:2	11	certdir
ASSIGN_OP	25:10	25:10	9	=
LEAF_NODE	25:10	25:10	10	=
RVAL	25:12	25:12	9	g_dir_open ( iter -> data , 0 , NULL )
FUNCTION_CALL	25:12	25:42	10	g_dir_open ( iter -> data , 0 , NULL )
CALLEE	25:12	25:12	11	g_dir_open
LEAF_NODE	25:12	25:12	12	g_dir_open
LEAF_NODE	25:22	25:22	11	(
ARGUMENT	25:23	25:23	11	iter -> data
FIELD	25:23	25:29	12	iter -> data
LEAF_NODE	25:23	25:23	13	iter
LEAF_NODE	25:27	25:27	13	->
LEAF_NODE	25:29	25:29	13	data
LEAF_NODE	25:33	25:33	11	,
ARGUMENT	25:35	25:35	11	0
FIELD	25:35	25:35	12	0
LEAF_NODE	25:35	25:35	13	0
LEAF_NODE	25:36	25:36	11	,
ARGUMENT	25:38	25:38	11	NULL
FIELD	25:38	25:38	12	NULL
LEAF_NODE	25:38	25:38	13	NULL
LEAF_NODE	25:42	25:42	11	)
LEAF_NODE	25:43	25:43	7	;
SELECTION	26:2	26:16	6	
KEYWORD	26:2	26:2	7	if
LEAF_NODE	26:2	26:2	8	if
LEAF_NODE	26:5	26:5	7	(
CONDITION	26:6	26:6	7	! certdir
EXPR	26:6	26:6	8	! certdir
UNARY_EXPR	26:6	26:7	9	! certdir
UNARY_OPERATOR	26:6	26:6	10	!
LEAF_NODE	26:6	26:6	11	!
FIELD	26:7	26:7	10	certdir
LEAF_NODE	26:7	26:7	11	certdir
LEAF_NODE	26:14	26:14	7	)
STATEMENTS	26:16	29:2	7	
LEAF_NODE	26:16	26:16	8	{
STATEMENTS	27:3	28:3	8	
EXPR_STATEMENT	27:3	27:103	9	purple_debug_error ( "certificate/x509/ca" , "Couldn't open location '%s'\n" , ( const char * ) iter -> data ) ;
EXPR	27:3	27:3	10	purple_debug_error ( "certificate/x509/ca" , "Couldn't open location '%s'\n" , ( const char * ) iter -> data )
FUNCTION_CALL	27:3	27:102	11	purple_debug_error ( "certificate/x509/ca" , "Couldn't open location '%s'\n" , ( const char * ) iter -> data )
CALLEE	27:3	27:3	12	purple_debug_error
LEAF_NODE	27:3	27:3	13	purple_debug_error
LEAF_NODE	27:21	27:21	12	(
ARGUMENT	27:22	27:22	12	"certificate/x509/ca"
FIELD	27:22	27:22	13	"certificate/x509/ca"
LEAF_NODE	27:22	27:22	14	"certificate/x509/ca"
LEAF_NODE	27:43	27:43	12	,
ARGUMENT	27:45	27:45	12	"Couldn't open location '%s'\n"
FIELD	27:45	27:45	13	"Couldn't open location '%s'\n"
LEAF_NODE	27:45	27:45	14	"Couldn't open location '%s'\n"
LEAF_NODE	27:76	27:76	12	,
ARGUMENT	27:78	27:92	12	( const char * ) iter -> data
LEAF_NODE	27:78	27:78	13	(
TYPE_NAME	27:79	27:85	13	const char
LEAF_NODE	27:79	27:79	14	const
LEAF_NODE	27:85	27:85	14	char
LEAF_NODE	27:90	27:90	13	*
LEAF_NODE	27:91	27:91	13	)
FIELD	27:92	27:98	13	iter -> data
LEAF_NODE	27:92	27:92	14	iter
LEAF_NODE	27:96	27:96	14	->
LEAF_NODE	27:98	27:98	14	data
LEAF_NODE	27:102	27:102	12	)
LEAF_NODE	27:103	27:103	10	;
JUMP_STATEMENT	28:3	28:11	9	continue DESTINATION ;
KEYWORD	28:3	28:3	10	continue
LEAF_NODE	28:3	28:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	28:11	28:11	10	;
LEAF_NODE	29:2	29:2	8	}
ITERATION	30:2	30:47	6	
KEYWORD	30:2	30:2	7	while
LEAF_NODE	30:2	30:2	8	while
LEAF_NODE	30:8	30:8	7	(
CONDITION	30:10	30:10	7	( entry = g_dir_read_name ( certdir ) )
EXPR	30:10	30:43	8	( entry = g_dir_read_name ( certdir ) )
LEAF_NODE	30:10	30:10	9	(
ASSIGN	30:11	30:19	9	entry = g_dir_read_name ( certdir )
LVAL	30:11	30:11	10	entry
FIELD	30:11	30:11	11	entry
LEAF_NODE	30:11	30:11	12	entry
ASSIGN_OP	30:17	30:17	10	=
LEAF_NODE	30:17	30:17	11	=
RVAL	30:19	30:19	10	g_dir_read_name ( certdir )
FUNCTION_CALL	30:19	30:42	11	g_dir_read_name ( certdir )
CALLEE	30:19	30:19	12	g_dir_read_name
LEAF_NODE	30:19	30:19	13	g_dir_read_name
LEAF_NODE	30:34	30:34	12	(
ARGUMENT	30:35	30:35	12	certdir
FIELD	30:35	30:35	13	certdir
LEAF_NODE	30:35	30:35	14	certdir
LEAF_NODE	30:42	30:42	12	)
LEAF_NODE	30:43	30:43	9	)
LEAF_NODE	30:45	30:45	7	)
STATEMENTS	30:47	57:2	7	
LEAF_NODE	30:47	30:47	8	{
STATEMENTS	31:3	56:3	8	
SIMPLE_DECL	31:3	31:18	9	gchar * fullpath ;
VAR_DECL	31:3	31:10	10	gchar * fullpath
TYPE	31:3	31:9	11	gchar *
TYPE_NAME	31:3	31:3	12	gchar
LEAF_NODE	31:3	31:3	13	gchar
POINTER	31:9	31:9	12	*
LEAF_NODE	31:9	31:9	13	*
NAME	31:10	31:10	11	fullpath
LEAF_NODE	31:10	31:10	12	fullpath
LEAF_NODE	31:18	31:18	10	;
SIMPLE_DECL	32:3	32:25	9	PurpleCertificate * crt ;
VAR_DECL	32:3	32:22	10	PurpleCertificate * crt
TYPE	32:3	32:21	11	PurpleCertificate *
TYPE_NAME	32:3	32:3	12	PurpleCertificate
LEAF_NODE	32:3	32:3	13	PurpleCertificate
POINTER	32:21	32:21	12	*
LEAF_NODE	32:21	32:21	13	*
NAME	32:22	32:22	11	crt
LEAF_NODE	32:22	32:22	12	crt
LEAF_NODE	32:25	32:25	10	;
SELECTION	33:3	33:89	9	
KEYWORD	33:3	33:3	10	if
LEAF_NODE	33:3	33:3	11	if
LEAF_NODE	33:6	33:6	10	(
CONDITION	33:7	33:7	10	! g_pattern_match_string ( pempat , entry ) && ! g_pattern_match_string ( crtpat , entry )
EXPR	33:7	33:7	11	! g_pattern_match_string ( pempat , entry ) && ! g_pattern_match_string ( crtpat , entry )
AND	33:7	33:49	12	! g_pattern_match_string ( pempat , entry ) && ! g_pattern_match_string ( crtpat , entry )
EXPR	33:7	33:7	13	! g_pattern_match_string ( pempat , entry )
UNARY_EXPR	33:7	33:8	14	! g_pattern_match_string ( pempat , entry )
UNARY_OPERATOR	33:7	33:7	15	!
LEAF_NODE	33:7	33:7	16	!
FUNCTION_CALL	33:8	33:44	15	g_pattern_match_string ( pempat , entry )
CALLEE	33:8	33:8	16	g_pattern_match_string
LEAF_NODE	33:8	33:8	17	g_pattern_match_string
LEAF_NODE	33:30	33:30	16	(
ARGUMENT	33:31	33:31	16	pempat
FIELD	33:31	33:31	17	pempat
LEAF_NODE	33:31	33:31	18	pempat
LEAF_NODE	33:37	33:37	16	,
ARGUMENT	33:39	33:39	16	entry
FIELD	33:39	33:39	17	entry
LEAF_NODE	33:39	33:39	18	entry
LEAF_NODE	33:44	33:44	16	)
LEAF_NODE	33:46	33:46	13	&&
EXPR	33:49	33:49	13	! g_pattern_match_string ( crtpat , entry )
UNARY_EXPR	33:49	33:50	14	! g_pattern_match_string ( crtpat , entry )
UNARY_OPERATOR	33:49	33:49	15	!
LEAF_NODE	33:49	33:49	16	!
FUNCTION_CALL	33:50	33:86	15	g_pattern_match_string ( crtpat , entry )
CALLEE	33:50	33:50	16	g_pattern_match_string
LEAF_NODE	33:50	33:50	17	g_pattern_match_string
LEAF_NODE	33:72	33:72	16	(
ARGUMENT	33:73	33:73	16	crtpat
FIELD	33:73	33:73	17	crtpat
LEAF_NODE	33:73	33:73	18	crtpat
LEAF_NODE	33:79	33:79	16	,
ARGUMENT	33:81	33:81	16	entry
FIELD	33:81	33:81	17	entry
LEAF_NODE	33:81	33:81	18	entry
LEAF_NODE	33:86	33:86	16	)
LEAF_NODE	33:87	33:87	10	)
STATEMENTS	33:89	35:3	10	
LEAF_NODE	33:89	33:89	11	{
STATEMENTS	34:4	34:4	11	
JUMP_STATEMENT	34:4	34:12	12	continue DESTINATION ;
KEYWORD	34:4	34:4	13	continue
LEAF_NODE	34:4	34:4	14	continue
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	34:12	34:12	13	;
LEAF_NODE	35:3	35:3	11	}
EXPR_STATEMENT	36:3	36:55	9	fullpath = g_build_filename ( iter -> data , entry , NULL ) ;
EXPR	36:3	36:3	10	fullpath = g_build_filename ( iter -> data , entry , NULL )
ASSIGN	36:3	36:14	11	fullpath = g_build_filename ( iter -> data , entry , NULL )
LVAL	36:3	36:3	12	fullpath
FIELD	36:3	36:3	13	fullpath
LEAF_NODE	36:3	36:3	14	fullpath
ASSIGN_OP	36:12	36:12	12	=
LEAF_NODE	36:12	36:12	13	=
RVAL	36:14	36:14	12	g_build_filename ( iter -> data , entry , NULL )
FUNCTION_CALL	36:14	36:54	13	g_build_filename ( iter -> data , entry , NULL )
CALLEE	36:14	36:14	14	g_build_filename
LEAF_NODE	36:14	36:14	15	g_build_filename
LEAF_NODE	36:30	36:30	14	(
ARGUMENT	36:31	36:31	14	iter -> data
FIELD	36:31	36:37	15	iter -> data
LEAF_NODE	36:31	36:31	16	iter
LEAF_NODE	36:35	36:35	16	->
LEAF_NODE	36:37	36:37	16	data
LEAF_NODE	36:41	36:41	14	,
ARGUMENT	36:43	36:43	14	entry
FIELD	36:43	36:43	15	entry
LEAF_NODE	36:43	36:43	16	entry
LEAF_NODE	36:48	36:48	14	,
ARGUMENT	36:50	36:50	14	NULL
FIELD	36:50	36:50	15	NULL
LEAF_NODE	36:50	36:50	16	NULL
LEAF_NODE	36:54	36:54	14	)
LEAF_NODE	36:55	36:55	10	;
EXPR_STATEMENT	38:3	38:52	9	crts = purple_certificates_import ( x509 , fullpath ) ;
EXPR	38:3	38:3	10	crts = purple_certificates_import ( x509 , fullpath )
ASSIGN	38:3	38:10	11	crts = purple_certificates_import ( x509 , fullpath )
LVAL	38:3	38:3	12	crts
FIELD	38:3	38:3	13	crts
LEAF_NODE	38:3	38:3	14	crts
ASSIGN_OP	38:8	38:8	12	=
LEAF_NODE	38:8	38:8	13	=
RVAL	38:10	38:10	12	purple_certificates_import ( x509 , fullpath )
FUNCTION_CALL	38:10	38:51	13	purple_certificates_import ( x509 , fullpath )
CALLEE	38:10	38:10	14	purple_certificates_import
LEAF_NODE	38:10	38:10	15	purple_certificates_import
LEAF_NODE	38:36	38:36	14	(
ARGUMENT	38:37	38:37	14	x509
FIELD	38:37	38:37	15	x509
LEAF_NODE	38:37	38:37	16	x509
LEAF_NODE	38:41	38:41	14	,
ARGUMENT	38:43	38:43	14	fullpath
FIELD	38:43	38:43	15	fullpath
LEAF_NODE	38:43	38:43	16	fullpath
LEAF_NODE	38:51	38:51	14	)
LEAF_NODE	38:52	38:52	10	;
ITERATION	39:3	39:30	9	
KEYWORD	39:3	39:3	10	while
LEAF_NODE	39:3	39:3	11	while
LEAF_NODE	39:9	39:9	10	(
CONDITION	39:10	39:10	10	crts && crts -> data
EXPR	39:10	39:10	11	crts && crts -> data
AND	39:10	39:18	12	crts && crts -> data
EXPR	39:10	39:10	13	crts
FIELD	39:10	39:10	14	crts
LEAF_NODE	39:10	39:10	15	crts
LEAF_NODE	39:15	39:15	13	&&
EXPR	39:18	39:18	13	crts -> data
FIELD	39:18	39:24	14	crts -> data
LEAF_NODE	39:18	39:18	15	crts
LEAF_NODE	39:22	39:22	15	->
LEAF_NODE	39:24	39:24	15	data
LEAF_NODE	39:28	39:28	10	)
STATEMENTS	39:30	55:3	10	
LEAF_NODE	39:30	39:30	11	{
STATEMENTS	40:4	54:4	11	
EXPR_STATEMENT	40:4	40:20	12	crt = crts -> data ;
EXPR	40:4	40:4	13	crt = crts -> data
ASSIGN	40:4	40:10	14	crt = crts -> data
LVAL	40:4	40:4	15	crt
FIELD	40:4	40:4	16	crt
LEAF_NODE	40:4	40:4	17	crt
ASSIGN_OP	40:8	40:8	15	=
LEAF_NODE	40:8	40:8	16	=
RVAL	40:10	40:10	15	crts -> data
FIELD	40:10	40:16	16	crts -> data
LEAF_NODE	40:10	40:10	17	crts
LEAF_NODE	40:14	40:14	17	->
LEAF_NODE	40:16	40:16	17	data
LEAF_NODE	40:20	40:20	13	;
SELECTION	41:4	41:37	12	
KEYWORD	41:4	41:4	13	if
LEAF_NODE	41:4	41:4	14	if
LEAF_NODE	41:7	41:7	13	(
CONDITION	41:8	41:8	13	x509_ca_quiet_put_cert ( crt )
EXPR	41:8	41:8	14	x509_ca_quiet_put_cert ( crt )
FUNCTION_CALL	41:8	41:34	15	x509_ca_quiet_put_cert ( crt )
CALLEE	41:8	41:8	16	x509_ca_quiet_put_cert
LEAF_NODE	41:8	41:8	17	x509_ca_quiet_put_cert
LEAF_NODE	41:30	41:30	16	(
ARGUMENT	41:31	41:31	16	crt
FIELD	41:31	41:31	17	crt
LEAF_NODE	41:31	41:31	18	crt
LEAF_NODE	41:34	41:34	16	)
LEAF_NODE	41:35	41:35	13	)
STATEMENTS	41:37	48:4	13	
LEAF_NODE	41:37	41:37	14	{
STATEMENTS	42:5	47:5	14	
SIMPLE_DECL	42:5	42:16	15	gchar * name ;
VAR_DECL	42:5	42:12	16	gchar * name
TYPE	42:5	42:11	17	gchar *
TYPE_NAME	42:5	42:5	18	gchar
LEAF_NODE	42:5	42:5	19	gchar
POINTER	42:11	42:11	18	*
LEAF_NODE	42:11	42:11	19	*
NAME	42:12	42:12	17	name
LEAF_NODE	42:12	42:12	18	name
LEAF_NODE	42:16	42:16	16	;
EXPR_STATEMENT	43:5	43:52	15	name = purple_certificate_get_subject_name ( crt ) ;
EXPR	43:5	43:5	16	name = purple_certificate_get_subject_name ( crt )
ASSIGN	43:5	43:12	17	name = purple_certificate_get_subject_name ( crt )
LVAL	43:5	43:5	18	name
FIELD	43:5	43:5	19	name
LEAF_NODE	43:5	43:5	20	name
ASSIGN_OP	43:10	43:10	18	=
LEAF_NODE	43:10	43:10	19	=
RVAL	43:12	43:12	18	purple_certificate_get_subject_name ( crt )
FUNCTION_CALL	43:12	43:51	19	purple_certificate_get_subject_name ( crt )
CALLEE	43:12	43:12	20	purple_certificate_get_subject_name
LEAF_NODE	43:12	43:12	21	purple_certificate_get_subject_name
LEAF_NODE	43:47	43:47	20	(
ARGUMENT	43:48	43:48	20	crt
FIELD	43:48	43:48	21	crt
LEAF_NODE	43:48	43:48	22	crt
LEAF_NODE	43:51	43:51	20	)
LEAF_NODE	43:52	43:52	16	;
EXPR_STATEMENT	44:5	46:45	15	purple_debug_info ( "certificate/x509/ca" , "Loaded %s from %s\n" , name ? name : "(unknown)" , fullpath ) ;
EXPR	44:5	44:5	16	purple_debug_info ( "certificate/x509/ca" , "Loaded %s from %s\n" , name ? name : "(unknown)" , fullpath )
FUNCTION_CALL	44:5	46:44	17	purple_debug_info ( "certificate/x509/ca" , "Loaded %s from %s\n" , name ? name : "(unknown)" , fullpath )
CALLEE	44:5	44:5	18	purple_debug_info
LEAF_NODE	44:5	44:5	19	purple_debug_info
LEAF_NODE	44:22	44:22	18	(
ARGUMENT	44:23	44:23	18	"certificate/x509/ca"
FIELD	44:23	44:23	19	"certificate/x509/ca"
LEAF_NODE	44:23	44:23	20	"certificate/x509/ca"
LEAF_NODE	44:44	44:44	18	,
ARGUMENT	45:9	45:9	18	"Loaded %s from %s\n"
FIELD	45:9	45:9	19	"Loaded %s from %s\n"
LEAF_NODE	45:9	45:9	20	"Loaded %s from %s\n"
LEAF_NODE	45:30	45:30	18	,
ARGUMENT	46:9	46:9	18	name ? name : "(unknown)"
COND_EXPR	46:9	46:23	19	name ? name : "(unknown)"
CONDITION	46:9	46:9	20	name
FIELD	46:9	46:9	21	name
LEAF_NODE	46:9	46:9	22	name
LEAF_NODE	46:14	46:14	20	?
EXPR	46:16	46:16	20	name
FIELD	46:16	46:16	21	name
LEAF_NODE	46:16	46:16	22	name
LEAF_NODE	46:21	46:21	20	:
FIELD	46:23	46:23	20	"(unknown)"
LEAF_NODE	46:23	46:23	21	"(unknown)"
LEAF_NODE	46:34	46:34	18	,
ARGUMENT	46:36	46:36	18	fullpath
FIELD	46:36	46:36	19	fullpath
LEAF_NODE	46:36	46:36	20	fullpath
LEAF_NODE	46:44	46:44	18	)
LEAF_NODE	46:45	46:45	16	;
EXPR_STATEMENT	47:5	47:17	15	g_free ( name ) ;
EXPR	47:5	47:5	16	g_free ( name )
FUNCTION_CALL	47:5	47:16	17	g_free ( name )
CALLEE	47:5	47:5	18	g_free
LEAF_NODE	47:5	47:5	19	g_free
LEAF_NODE	47:11	47:11	18	(
ARGUMENT	47:12	47:12	18	name
FIELD	47:12	47:12	19	name
LEAF_NODE	47:12	47:12	20	name
LEAF_NODE	47:16	47:16	18	)
LEAF_NODE	47:17	47:17	16	;
LEAF_NODE	48:4	48:4	14	}
SELECTION	48:6	48:11	12	
KEYWORD	48:6	48:6	13	else
LEAF_NODE	48:6	48:6	14	else
STATEMENTS	48:11	52:4	13	
LEAF_NODE	48:11	48:11	14	{
STATEMENTS	49:5	49:5	14	
EXPR_STATEMENT	49:5	51:18	15	purple_debug_error ( "certificate/x509/ca" , "Failed to load certificate from %s\n" , fullpath ) ;
EXPR	49:5	49:5	16	purple_debug_error ( "certificate/x509/ca" , "Failed to load certificate from %s\n" , fullpath )
FUNCTION_CALL	49:5	51:17	17	purple_debug_error ( "certificate/x509/ca" , "Failed to load certificate from %s\n" , fullpath )
CALLEE	49:5	49:5	18	purple_debug_error
LEAF_NODE	49:5	49:5	19	purple_debug_error
LEAF_NODE	49:23	49:23	18	(
ARGUMENT	49:24	49:24	18	"certificate/x509/ca"
FIELD	49:24	49:24	19	"certificate/x509/ca"
LEAF_NODE	49:24	49:24	20	"certificate/x509/ca"
LEAF_NODE	49:45	49:45	18	,
ARGUMENT	50:9	50:9	18	"Failed to load certificate from %s\n"
FIELD	50:9	50:9	19	"Failed to load certificate from %s\n"
LEAF_NODE	50:9	50:9	20	"Failed to load certificate from %s\n"
LEAF_NODE	50:47	50:47	18	,
ARGUMENT	51:9	51:9	18	fullpath
FIELD	51:9	51:9	19	fullpath
LEAF_NODE	51:9	51:9	20	fullpath
LEAF_NODE	51:17	51:17	18	)
LEAF_NODE	51:18	51:18	16	;
LEAF_NODE	52:4	52:4	14	}
EXPR_STATEMENT	53:4	53:35	12	purple_certificate_destroy ( crt ) ;
EXPR	53:4	53:4	13	purple_certificate_destroy ( crt )
FUNCTION_CALL	53:4	53:34	14	purple_certificate_destroy ( crt )
CALLEE	53:4	53:4	15	purple_certificate_destroy
LEAF_NODE	53:4	53:4	16	purple_certificate_destroy
LEAF_NODE	53:30	53:30	15	(
ARGUMENT	53:31	53:31	15	crt
FIELD	53:31	53:31	16	crt
LEAF_NODE	53:31	53:31	17	crt
LEAF_NODE	53:34	53:34	15	)
LEAF_NODE	53:35	53:35	13	;
EXPR_STATEMENT	54:4	54:42	12	crts = g_slist_delete_link ( crts , crts ) ;
EXPR	54:4	54:4	13	crts = g_slist_delete_link ( crts , crts )
ASSIGN	54:4	54:11	14	crts = g_slist_delete_link ( crts , crts )
LVAL	54:4	54:4	15	crts
FIELD	54:4	54:4	16	crts
LEAF_NODE	54:4	54:4	17	crts
ASSIGN_OP	54:9	54:9	15	=
LEAF_NODE	54:9	54:9	16	=
RVAL	54:11	54:11	15	g_slist_delete_link ( crts , crts )
FUNCTION_CALL	54:11	54:41	16	g_slist_delete_link ( crts , crts )
CALLEE	54:11	54:11	17	g_slist_delete_link
LEAF_NODE	54:11	54:11	18	g_slist_delete_link
LEAF_NODE	54:30	54:30	17	(
ARGUMENT	54:31	54:31	17	crts
FIELD	54:31	54:31	18	crts
LEAF_NODE	54:31	54:31	19	crts
LEAF_NODE	54:35	54:35	17	,
ARGUMENT	54:37	54:37	17	crts
FIELD	54:37	54:37	18	crts
LEAF_NODE	54:37	54:37	19	crts
LEAF_NODE	54:41	54:41	17	)
LEAF_NODE	54:42	54:42	13	;
LEAF_NODE	55:3	55:3	11	}
EXPR_STATEMENT	56:3	56:19	9	g_free ( fullpath ) ;
EXPR	56:3	56:3	10	g_free ( fullpath )
FUNCTION_CALL	56:3	56:18	11	g_free ( fullpath )
CALLEE	56:3	56:3	12	g_free
LEAF_NODE	56:3	56:3	13	g_free
LEAF_NODE	56:9	56:9	12	(
ARGUMENT	56:10	56:10	12	fullpath
FIELD	56:10	56:10	13	fullpath
LEAF_NODE	56:10	56:10	14	fullpath
LEAF_NODE	56:18	56:18	12	)
LEAF_NODE	56:19	56:19	10	;
LEAF_NODE	57:2	57:2	8	}
EXPR_STATEMENT	58:2	58:22	6	g_dir_close ( certdir ) ;
EXPR	58:2	58:2	7	g_dir_close ( certdir )
FUNCTION_CALL	58:2	58:21	8	g_dir_close ( certdir )
CALLEE	58:2	58:2	9	g_dir_close
LEAF_NODE	58:2	58:2	10	g_dir_close
LEAF_NODE	58:13	58:13	9	(
ARGUMENT	58:14	58:14	9	certdir
FIELD	58:14	58:14	10	certdir
LEAF_NODE	58:14	58:14	11	certdir
LEAF_NODE	58:21	58:21	9	)
LEAF_NODE	58:22	58:22	7	;
LEAF_NODE	59:1	59:1	5	}
EXPR_STATEMENT	60:1	60:28	3	g_pattern_spec_free ( pempat ) ;
EXPR	60:1	60:1	4	g_pattern_spec_free ( pempat )
FUNCTION_CALL	60:1	60:27	5	g_pattern_spec_free ( pempat )
CALLEE	60:1	60:1	6	g_pattern_spec_free
LEAF_NODE	60:1	60:1	7	g_pattern_spec_free
LEAF_NODE	60:20	60:20	6	(
ARGUMENT	60:21	60:21	6	pempat
FIELD	60:21	60:21	7	pempat
LEAF_NODE	60:21	60:21	8	pempat
LEAF_NODE	60:27	60:27	6	)
LEAF_NODE	60:28	60:28	4	;
EXPR_STATEMENT	61:1	61:28	3	g_pattern_spec_free ( crtpat ) ;
EXPR	61:1	61:1	4	g_pattern_spec_free ( crtpat )
FUNCTION_CALL	61:1	61:27	5	g_pattern_spec_free ( crtpat )
CALLEE	61:1	61:1	6	g_pattern_spec_free
LEAF_NODE	61:1	61:1	7	g_pattern_spec_free
LEAF_NODE	61:20	61:20	6	(
ARGUMENT	61:21	61:21	6	crtpat
FIELD	61:21	61:21	7	crtpat
LEAF_NODE	61:21	61:21	8	crtpat
LEAF_NODE	61:27	61:27	6	)
LEAF_NODE	61:28	61:28	4	;
EXPR_STATEMENT	62:1	63:30	3	purple_debug_info ( "certificate/x509/ca" , "Lazy init completed.\n" ) ;
EXPR	62:1	62:1	4	purple_debug_info ( "certificate/x509/ca" , "Lazy init completed.\n" )
FUNCTION_CALL	62:1	63:29	5	purple_debug_info ( "certificate/x509/ca" , "Lazy init completed.\n" )
CALLEE	62:1	62:1	6	purple_debug_info
LEAF_NODE	62:1	62:1	7	purple_debug_info
LEAF_NODE	62:18	62:18	6	(
ARGUMENT	62:19	62:19	6	"certificate/x509/ca"
FIELD	62:19	62:19	7	"certificate/x509/ca"
LEAF_NODE	62:19	62:19	8	"certificate/x509/ca"
LEAF_NODE	62:40	62:40	6	,
ARGUMENT	63:5	63:5	6	"Lazy init completed.\n"
FIELD	63:5	63:5	7	"Lazy init completed.\n"
LEAF_NODE	63:5	63:5	8	"Lazy init completed.\n"
LEAF_NODE	63:29	63:29	6	)
LEAF_NODE	63:30	63:30	4	;
EXPR_STATEMENT	64:1	64:27	3	x509_ca_initialized = TRUE ;
EXPR	64:1	64:1	4	x509_ca_initialized = TRUE
ASSIGN	64:1	64:23	5	x509_ca_initialized = TRUE
LVAL	64:1	64:1	6	x509_ca_initialized
FIELD	64:1	64:1	7	x509_ca_initialized
LEAF_NODE	64:1	64:1	8	x509_ca_initialized
ASSIGN_OP	64:21	64:21	6	=
LEAF_NODE	64:21	64:21	7	=
RVAL	64:23	64:23	6	TRUE
FIELD	64:23	64:23	7	TRUE
LEAF_NODE	64:23	64:23	8	TRUE
LEAF_NODE	64:27	64:27	4	;
JUMP_STATEMENT	65:1	65:12	3	return TRUE ;
KEYWORD	65:1	65:1	4	return
LEAF_NODE	65:1	65:1	5	return
DESTINATION	65:8	65:8	4	TRUE
EXPR	65:8	65:8	5	TRUE
FIELD	65:8	65:8	6	TRUE
LEAF_NODE	65:8	65:8	7	TRUE
LEAF_NODE	65:12	65:12	4	;
LEAF_NODE	66:0	66:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	80:0	1	
RETURN_TYPE	2:0	2:7	2	static BOOL
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	BOOL
LEAF_NODE	2:7	2:7	4	BOOL
FUNCTION_NAME	2:12	2:12	2	common_dll_prep
LEAF_NODE	2:12	2:12	3	common_dll_prep
PARAMETER_LIST	2:27	2:47	2	( const wchar_t * path )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:43	3	const wchar_t * path
TYPE	2:28	2:42	4	const wchar_t *
TYPE_NAME	2:28	2:34	5	const wchar_t
LEAF_NODE	2:28	2:28	6	const
LEAF_NODE	2:34	2:34	6	wchar_t
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	path
LEAF_NODE	2:43	2:43	5	path
LEAF_NODE	2:47	2:47	3	)
LEAF_NODE	2:49	2:49	2	{
STATEMENTS	3:1	79:1	2	
SIMPLE_DECL	3:1	3:13	3	HMODULE hmod ;
VAR_DECL	3:1	3:9	4	HMODULE hmod
TYPE	3:1	3:1	5	HMODULE
TYPE_NAME	3:1	3:1	6	HMODULE
LEAF_NODE	3:1	3:1	7	HMODULE
NAME	3:9	3:9	5	hmod
LEAF_NODE	3:9	3:9	6	hmod
LEAF_NODE	3:13	3:13	4	;
SIMPLE_DECL	4:1	4:10	3	HKEY hkey ;
VAR_DECL	4:1	4:6	4	HKEY hkey
TYPE	4:1	4:1	5	HKEY
TYPE_NAME	4:1	4:1	6	HKEY
LEAF_NODE	4:1	4:1	7	HKEY
NAME	4:6	4:6	5	hkey
LEAF_NODE	4:6	4:6	6	hkey
LEAF_NODE	4:10	4:10	4	;
SIMPLE_DECL	5:1	5:22	3	struct _stat stat_buf ;
VAR_DECL	5:1	5:14	4	struct _stat stat_buf
TYPE	5:1	5:1	5	struct _stat
TYPE_NAME	5:1	5:8	6	struct _stat
LEAF_NODE	5:1	5:1	7	struct
LEAF_NODE	5:8	5:8	7	_stat
NAME	5:14	5:14	5	stat_buf
LEAF_NODE	5:14	5:14	6	stat_buf
LEAF_NODE	5:22	5:22	4	;
SIMPLE_DECL	6:1	6:32	3	wchar_t [ MAX_PATH + 1 ] test_path ;
VAR_DECL	6:1	6:9	4	wchar_t [ MAX_PATH + 1 ] test_path
TYPE	6:1	6:18	5	wchar_t [ MAX_PATH + 1 ]
TYPE_NAME	6:1	6:1	6	wchar_t
LEAF_NODE	6:1	6:1	7	wchar_t
TYPE_SUFFIX	6:18	6:31	6	[ MAX_PATH + 1 ]
LEAF_NODE	6:18	6:18	7	[
FIELD	6:19	6:19	7	MAX_PATH
LEAF_NODE	6:19	6:19	8	MAX_PATH
LEAF_NODE	6:28	6:28	7	+
FIELD	6:30	6:30	7	1
LEAF_NODE	6:30	6:30	8	1
LEAF_NODE	6:31	6:31	7	]
NAME	6:9	6:9	5	test_path
LEAF_NODE	6:9	6:9	6	test_path
LEAF_NODE	6:32	6:32	4	;
LEAF_NODE	7:1	7:1	3	_snwprintf
LEAF_NODE	7:11	7:11	3	(
LEAF_NODE	7:12	7:12	3	test_path
LEAF_NODE	7:21	7:21	3	,
LEAF_NODE	7:23	7:23	3	sizeof
LEAF_NODE	7:29	7:29	3	(
LEAF_NODE	7:30	7:30	3	test_path
LEAF_NODE	7:39	7:39	3	)
LEAF_NODE	7:41	7:41	3	/
LEAF_NODE	7:43	7:43	3	sizeof
LEAF_NODE	7:49	7:49	3	(
LEAF_NODE	7:50	7:50	3	wchar_t
LEAF_NODE	7:57	7:57	3	)
LEAF_NODE	7:58	7:58	3	,
LEAF_NODE	8:2	8:2	3	L
LEAF_NODE	8:3	8:3	3	"%s\\libgtk-win32-2.0-0.dll"
LEAF_NODE	8:31	8:31	3	,
LEAF_NODE	8:33	8:33	3	path
LEAF_NODE	8:37	8:37	3	)
LEAF_NODE	8:38	8:38	3	;
LEAF_NODE	9:1	9:1	3	test_path
LEAF_NODE	9:10	9:10	3	[
LEAF_NODE	9:11	9:11	3	sizeof
LEAF_NODE	9:17	9:17	3	(
LEAF_NODE	9:18	9:18	3	test_path
LEAF_NODE	9:27	9:27	3	)
LEAF_NODE	9:29	9:29	3	/
LEAF_NODE	9:31	9:31	3	sizeof
LEAF_NODE	9:37	9:37	3	(
LEAF_NODE	9:38	9:38	3	wchar_t
LEAF_NODE	9:45	9:45	3	)
LEAF_NODE	9:47	9:47	3	-
LEAF_NODE	9:49	9:49	3	1
LEAF_NODE	9:50	9:50	3	]
LEAF_NODE	9:52	9:52	3	=
LEAF_NODE	9:54	9:54	3	L
EXPR_STATEMENT	9:55	9:59	3	'\0' ;
EXPR	9:55	9:55	4	'\0'
FIELD	9:55	9:55	5	'\0'
LEAF_NODE	9:55	9:55	6	'\0'
LEAF_NODE	9:59	9:59	4	;
SELECTION	10:1	10:40	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	_wstat ( test_path , & stat_buf ) != 0
EXPR	10:5	10:37	5	_wstat ( test_path , & stat_buf ) != 0
FUNCTION_CALL	10:5	10:32	6	_wstat ( test_path , & stat_buf )
CALLEE	10:5	10:5	7	_wstat
LEAF_NODE	10:5	10:5	8	_wstat
LEAF_NODE	10:11	10:11	7	(
ARGUMENT	10:12	10:12	7	test_path
FIELD	10:12	10:12	8	test_path
LEAF_NODE	10:12	10:12	9	test_path
LEAF_NODE	10:21	10:21	7	,
ARGUMENT	10:23	10:23	7	& stat_buf
UNARY_EXPR	10:23	10:24	8	& stat_buf
UNARY_OPERATOR	10:23	10:23	9	&
LEAF_NODE	10:23	10:23	10	&
FIELD	10:24	10:24	9	stat_buf
LEAF_NODE	10:24	10:24	10	stat_buf
LEAF_NODE	10:32	10:32	7	)
EQ_OPERATOR	10:34	10:34	6	!=
LEAF_NODE	10:34	10:34	7	!=
FIELD	10:37	10:37	6	0
LEAF_NODE	10:37	10:37	7	0
LEAF_NODE	10:38	10:38	4	)
STATEMENTS	10:40	14:1	4	
LEAF_NODE	10:40	10:40	5	{
STATEMENTS	11:2	13:2	5	
LEAF_NODE	11:2	11:2	6	printf
LEAF_NODE	11:8	11:8	6	(
LEAF_NODE	11:9	11:9	6	"Unable to determine GTK+ path. \n"
LEAF_NODE	12:3	12:3	6	"Assuming GTK+ is in the PATH.\n"
LEAF_NODE	12:36	12:36	6	)
LEAF_NODE	12:37	12:37	6	;
JUMP_STATEMENT	13:2	13:14	6	return FALSE ;
KEYWORD	13:2	13:2	7	return
LEAF_NODE	13:2	13:2	8	return
DESTINATION	13:9	13:9	7	FALSE
EXPR	13:9	13:9	8	FALSE
FIELD	13:9	13:9	9	FALSE
LEAF_NODE	13:9	13:9	10	FALSE
LEAF_NODE	13:14	13:14	7	;
LEAF_NODE	14:1	14:1	5	}
LEAF_NODE	15:1	15:1	3	wprintf
LEAF_NODE	15:8	15:8	3	(
LEAF_NODE	15:9	15:9	3	L
LEAF_NODE	15:10	15:10	3	"GTK+ path found: %s\n"
LEAF_NODE	15:33	15:33	3	,
LEAF_NODE	15:35	15:35	3	path
LEAF_NODE	15:39	15:39	3	)
LEAF_NODE	15:40	15:40	3	;
LEAF_NODE	16:1	16:1	3	if
LEAF_NODE	16:4	16:4	3	(
LEAF_NODE	16:5	16:5	3	(
LEAF_NODE	16:6	16:6	3	hmod
LEAF_NODE	16:11	16:11	3	=
LEAF_NODE	16:13	16:13	3	GetModuleHandleW
LEAF_NODE	16:29	16:29	3	(
LEAF_NODE	16:30	16:30	3	L
LEAF_NODE	16:31	16:31	3	"kernel32.dll"
LEAF_NODE	16:45	16:45	3	)
LEAF_NODE	16:46	16:46	3	)
LEAF_NODE	16:47	16:47	3	)
LEAF_NODE	16:49	16:49	3	{
STATEMENTS	17:2	19:2	3	
EXPR_STATEMENT	17:2	18:28	4	MySetDllDirectory = ( LPFNSETDLLDIRECTORY ) GetProcAddress ( hmod , "SetDllDirectoryW" ) ;
EXPR	17:2	17:2	5	MySetDllDirectory = ( LPFNSETDLLDIRECTORY ) GetProcAddress ( hmod , "SetDllDirectoryW" )
ASSIGN	17:2	17:22	6	MySetDllDirectory = ( LPFNSETDLLDIRECTORY ) GetProcAddress ( hmod , "SetDllDirectoryW" )
LVAL	17:2	17:2	7	MySetDllDirectory
FIELD	17:2	17:2	8	MySetDllDirectory
LEAF_NODE	17:2	17:2	9	MySetDllDirectory
ASSIGN_OP	17:20	17:20	7	=
LEAF_NODE	17:20	17:20	8	=
RVAL	17:22	17:44	7	( LPFNSETDLLDIRECTORY ) GetProcAddress ( hmod , "SetDllDirectoryW" )
LEAF_NODE	17:22	17:22	8	(
TYPE_NAME	17:23	17:23	8	LPFNSETDLLDIRECTORY
LEAF_NODE	17:23	17:23	9	LPFNSETDLLDIRECTORY
LEAF_NODE	17:42	17:42	8	)
FUNCTION_CALL	17:44	18:27	8	GetProcAddress ( hmod , "SetDllDirectoryW" )
CALLEE	17:44	17:44	9	GetProcAddress
LEAF_NODE	17:44	17:44	10	GetProcAddress
LEAF_NODE	17:58	17:58	9	(
ARGUMENT	18:3	18:3	9	hmod
FIELD	18:3	18:3	10	hmod
LEAF_NODE	18:3	18:3	11	hmod
LEAF_NODE	18:7	18:7	9	,
ARGUMENT	18:9	18:9	9	"SetDllDirectoryW"
FIELD	18:9	18:9	10	"SetDllDirectoryW"
LEAF_NODE	18:9	18:9	11	"SetDllDirectoryW"
LEAF_NODE	18:27	18:27	9	)
LEAF_NODE	18:28	18:28	5	;
SELECTION	19:2	20:3	4	
KEYWORD	19:2	19:2	5	if
LEAF_NODE	19:2	19:2	6	if
LEAF_NODE	19:5	19:5	5	(
CONDITION	19:6	19:6	5	! MySetDllDirectory
EXPR	19:6	19:6	6	! MySetDllDirectory
UNARY_EXPR	19:6	19:7	7	! MySetDllDirectory
UNARY_OPERATOR	19:6	19:6	8	!
LEAF_NODE	19:6	19:6	9	!
FIELD	19:7	19:7	8	MySetDllDirectory
LEAF_NODE	19:7	19:7	9	MySetDllDirectory
LEAF_NODE	19:24	19:24	5	)
STATEMENTS	20:3	20:3	5	
EXPR_STATEMENT	20:3	20:44	6	printf ( "SetDllDirectory not supported\n" ) ;
EXPR	20:3	20:3	7	printf ( "SetDllDirectory not supported\n" )
FUNCTION_CALL	20:3	20:43	8	printf ( "SetDllDirectory not supported\n" )
CALLEE	20:3	20:3	9	printf
LEAF_NODE	20:3	20:3	10	printf
LEAF_NODE	20:9	20:9	9	(
ARGUMENT	20:10	20:10	9	"SetDllDirectory not supported\n"
FIELD	20:10	20:10	10	"SetDllDirectory not supported\n"
LEAF_NODE	20:10	20:10	11	"SetDllDirectory not supported\n"
LEAF_NODE	20:43	20:43	9	)
LEAF_NODE	20:44	20:44	7	;
LEAF_NODE	21:1	21:1	3	}
SELECTION	21:3	22:2	3	
KEYWORD	21:3	21:3	4	else
LEAF_NODE	21:3	21:3	5	else
STATEMENTS	22:2	22:2	4	
EXPR_STATEMENT	22:2	22:54	5	printf ( "Error getting kernel32.dll module handle\n" ) ;
EXPR	22:2	22:2	6	printf ( "Error getting kernel32.dll module handle\n" )
FUNCTION_CALL	22:2	22:53	7	printf ( "Error getting kernel32.dll module handle\n" )
CALLEE	22:2	22:2	8	printf
LEAF_NODE	22:2	22:2	9	printf
LEAF_NODE	22:8	22:8	8	(
ARGUMENT	22:9	22:9	8	"Error getting kernel32.dll module handle\n"
FIELD	22:9	22:9	9	"Error getting kernel32.dll module handle\n"
LEAF_NODE	22:9	22:9	10	"Error getting kernel32.dll module handle\n"
LEAF_NODE	22:53	22:53	8	)
LEAF_NODE	22:54	22:54	6	;
SELECTION	24:1	24:24	3	
KEYWORD	24:1	24:1	4	if
LEAF_NODE	24:1	24:1	5	if
LEAF_NODE	24:4	24:4	4	(
CONDITION	24:5	24:5	4	MySetDllDirectory
EXPR	24:5	24:5	5	MySetDllDirectory
FIELD	24:5	24:5	6	MySetDllDirectory
LEAF_NODE	24:5	24:5	7	MySetDllDirectory
LEAF_NODE	24:22	24:22	4	)
STATEMENTS	24:24	27:1	4	
LEAF_NODE	24:24	24:24	5	{
STATEMENTS	25:2	26:2	5	
EXPR_STATEMENT	25:2	25:35	6	printf ( "Using SetDllDirectory\n" ) ;
EXPR	25:2	25:2	7	printf ( "Using SetDllDirectory\n" )
FUNCTION_CALL	25:2	25:34	8	printf ( "Using SetDllDirectory\n" )
CALLEE	25:2	25:2	9	printf
LEAF_NODE	25:2	25:2	10	printf
LEAF_NODE	25:8	25:8	9	(
ARGUMENT	25:9	25:9	9	"Using SetDllDirectory\n"
FIELD	25:9	25:9	10	"Using SetDllDirectory\n"
LEAF_NODE	25:9	25:9	11	"Using SetDllDirectory\n"
LEAF_NODE	25:34	25:34	9	)
LEAF_NODE	25:35	25:35	7	;
EXPR_STATEMENT	26:2	26:25	6	MySetDllDirectory ( path ) ;
EXPR	26:2	26:2	7	MySetDllDirectory ( path )
FUNCTION_CALL	26:2	26:24	8	MySetDllDirectory ( path )
CALLEE	26:2	26:2	9	MySetDllDirectory
LEAF_NODE	26:2	26:2	10	MySetDllDirectory
LEAF_NODE	26:19	26:19	9	(
ARGUMENT	26:20	26:20	9	path
FIELD	26:20	26:20	10	path
LEAF_NODE	26:20	26:20	11	path
LEAF_NODE	26:24	26:24	9	)
LEAF_NODE	26:25	26:25	7	;
LEAF_NODE	27:1	27:1	5	}
SELECTION	30:1	30:6	3	
KEYWORD	30:1	30:1	4	else
LEAF_NODE	30:1	30:1	5	else
STATEMENTS	30:6	78:1	4	
LEAF_NODE	30:6	30:6	5	{
STATEMENTS	31:2	77:2	5	
SIMPLE_DECL	31:2	31:23	6	OSVERSIONINFOW osinfo ;
VAR_DECL	31:2	31:17	7	OSVERSIONINFOW osinfo
TYPE	31:2	31:2	8	OSVERSIONINFOW
TYPE_NAME	31:2	31:2	9	OSVERSIONINFOW
LEAF_NODE	31:2	31:2	10	OSVERSIONINFOW
NAME	31:17	31:17	8	osinfo
LEAF_NODE	31:17	31:17	9	osinfo
LEAF_NODE	31:23	31:23	7	;
EXPR_STATEMENT	32:2	32:61	6	printf ( "Setting current directory to GTK+ dll directory\n" ) ;
EXPR	32:2	32:2	7	printf ( "Setting current directory to GTK+ dll directory\n" )
FUNCTION_CALL	32:2	32:60	8	printf ( "Setting current directory to GTK+ dll directory\n" )
CALLEE	32:2	32:2	9	printf
LEAF_NODE	32:2	32:2	10	printf
LEAF_NODE	32:8	32:8	9	(
ARGUMENT	32:9	32:9	9	"Setting current directory to GTK+ dll directory\n"
FIELD	32:9	32:9	10	"Setting current directory to GTK+ dll directory\n"
LEAF_NODE	32:9	32:9	11	"Setting current directory to GTK+ dll directory\n"
LEAF_NODE	32:60	32:60	9	)
LEAF_NODE	32:61	32:61	7	;
EXPR_STATEMENT	33:2	33:28	6	SetCurrentDirectoryW ( path ) ;
EXPR	33:2	33:2	7	SetCurrentDirectoryW ( path )
FUNCTION_CALL	33:2	33:27	8	SetCurrentDirectoryW ( path )
CALLEE	33:2	33:2	9	SetCurrentDirectoryW
LEAF_NODE	33:2	33:2	10	SetCurrentDirectoryW
LEAF_NODE	33:22	33:22	9	(
ARGUMENT	33:23	33:23	9	path
FIELD	33:23	33:23	10	path
LEAF_NODE	33:23	33:23	11	path
LEAF_NODE	33:27	33:27	9	)
LEAF_NODE	33:28	33:28	7	;
EXPR_STATEMENT	39:2	39:53	6	osinfo . dwOSVersionInfoSize = sizeof ( OSVERSIONINFOW ) ;
EXPR	39:2	39:2	7	osinfo . dwOSVersionInfoSize = sizeof ( OSVERSIONINFOW )
ASSIGN	39:2	39:31	8	osinfo . dwOSVersionInfoSize = sizeof ( OSVERSIONINFOW )
LVAL	39:2	39:2	9	osinfo . dwOSVersionInfoSize
FIELD	39:2	39:9	10	osinfo . dwOSVersionInfoSize
LEAF_NODE	39:2	39:2	11	osinfo
LEAF_NODE	39:8	39:8	11	.
LEAF_NODE	39:9	39:9	11	dwOSVersionInfoSize
ASSIGN_OP	39:29	39:29	9	=
LEAF_NODE	39:29	39:29	10	=
RVAL	39:31	39:31	9	sizeof ( OSVERSIONINFOW )
FUNCTION_CALL	39:31	39:52	10	sizeof ( OSVERSIONINFOW )
CALLEE	39:31	39:31	11	sizeof
LEAF_NODE	39:31	39:31	12	sizeof
LEAF_NODE	39:37	39:37	11	(
ARGUMENT	39:38	39:38	11	OSVERSIONINFOW
FIELD	39:38	39:38	12	OSVERSIONINFOW
LEAF_NODE	39:38	39:38	13	OSVERSIONINFOW
LEAF_NODE	39:52	39:52	11	)
LEAF_NODE	39:53	39:53	7	;
EXPR_STATEMENT	40:2	40:24	6	GetVersionExW ( & osinfo ) ;
EXPR	40:2	40:2	7	GetVersionExW ( & osinfo )
FUNCTION_CALL	40:2	40:23	8	GetVersionExW ( & osinfo )
CALLEE	40:2	40:2	9	GetVersionExW
LEAF_NODE	40:2	40:2	10	GetVersionExW
LEAF_NODE	40:15	40:15	9	(
ARGUMENT	40:16	40:16	9	& osinfo
UNARY_EXPR	40:16	40:17	10	& osinfo
UNARY_OPERATOR	40:16	40:16	11	&
LEAF_NODE	40:16	40:16	12	&
FIELD	40:17	40:17	11	osinfo
LEAF_NODE	40:17	40:17	12	osinfo
LEAF_NODE	40:23	40:23	9	)
LEAF_NODE	40:24	40:24	7	;
LEAF_NODE	41:2	41:2	6	if
LEAF_NODE	41:5	41:5	6	(
LEAF_NODE	41:6	41:6	6	(
LEAF_NODE	41:7	41:7	6	osinfo
LEAF_NODE	41:13	41:13	6	.
LEAF_NODE	41:14	41:14	6	dwMajorVersion
LEAF_NODE	41:29	41:29	6	==
LEAF_NODE	41:32	41:32	6	5
LEAF_NODE	42:4	42:4	6	&&
LEAF_NODE	42:7	42:7	6	osinfo
LEAF_NODE	42:13	42:13	6	.
LEAF_NODE	42:14	42:14	6	dwMinorVersion
LEAF_NODE	42:29	42:29	6	==
LEAF_NODE	42:32	42:32	6	0
LEAF_NODE	43:4	43:4	6	&&
LEAF_NODE	43:7	43:7	6	wcscmp
LEAF_NODE	43:13	43:13	6	(
LEAF_NODE	43:14	43:14	6	osinfo
LEAF_NODE	43:20	43:20	6	.
LEAF_NODE	43:21	43:21	6	szCSDVersion
LEAF_NODE	43:33	43:33	6	,
LEAF_NODE	43:35	43:35	6	L
LEAF_NODE	43:36	43:36	6	"Service Pack 3"
LEAF_NODE	43:52	43:52	6	)
LEAF_NODE	43:54	43:54	6	>=
LEAF_NODE	43:57	43:57	6	0
LEAF_NODE	43:58	43:58	6	)
LEAF_NODE	44:3	44:3	6	||
LEAF_NODE	45:3	45:3	6	(
LEAF_NODE	45:4	45:4	6	osinfo
LEAF_NODE	45:10	45:10	6	.
LEAF_NODE	45:11	45:11	6	dwMajorVersion
LEAF_NODE	45:26	45:26	6	==
LEAF_NODE	45:29	45:29	6	5
LEAF_NODE	46:4	46:4	6	&&
LEAF_NODE	46:7	46:7	6	osinfo
LEAF_NODE	46:13	46:13	6	.
LEAF_NODE	46:14	46:14	6	dwMinorVersion
LEAF_NODE	46:29	46:29	6	==
LEAF_NODE	46:32	46:32	6	1
LEAF_NODE	47:4	47:4	6	&&
LEAF_NODE	47:7	47:7	6	wcscmp
LEAF_NODE	47:13	47:13	6	(
LEAF_NODE	47:14	47:14	6	osinfo
LEAF_NODE	47:20	47:20	6	.
LEAF_NODE	47:21	47:21	6	szCSDVersion
LEAF_NODE	47:33	47:33	6	,
LEAF_NODE	47:35	47:35	6	L
LEAF_NODE	47:36	47:36	6	""
LEAF_NODE	47:38	47:38	6	)
LEAF_NODE	47:40	47:40	6	>=
LEAF_NODE	47:43	47:43	6	0
LEAF_NODE	47:44	47:44	6	)
LEAF_NODE	48:2	48:2	6	)
LEAF_NODE	48:4	48:4	6	{
STATEMENTS	49:3	75:5	6	
SIMPLE_DECL	49:3	49:19	7	DWORD regval ; regval = 1 ;
VAR_DECL	49:3	49:9	8	DWORD regval ; regval = 1
TYPE	49:3	49:3	9	DWORD
TYPE_NAME	49:3	49:3	10	DWORD
LEAF_NODE	49:3	49:3	11	DWORD
NAME	49:9	49:9	9	regval
LEAF_NODE	49:9	49:9	10	regval
LEAF_NODE	0:0	0:0	9	;
INIT	49:9	49:9	9	regval = 1
ASSIGN	49:9	49:18	10	regval = 1
LVAL	49:9	49:9	11	regval
NAME	49:9	49:9	12	regval
LEAF_NODE	49:9	49:9	13	regval
ASSIGN_OP	49:16	49:16	11	=
LEAF_NODE	49:16	49:16	12	=
RVAL	49:18	49:18	11	1
FIELD	49:18	49:18	12	1
LEAF_NODE	49:18	49:18	13	1
LEAF_NODE	49:19	49:19	8	;
SIMPLE_DECL	50:3	50:31	7	DWORD reglen ; reglen = sizeof ( DWORD ) ;
VAR_DECL	50:3	50:9	8	DWORD reglen ; reglen = sizeof ( DWORD )
TYPE	50:3	50:3	9	DWORD
TYPE_NAME	50:3	50:3	10	DWORD
LEAF_NODE	50:3	50:3	11	DWORD
NAME	50:9	50:9	9	reglen
LEAF_NODE	50:9	50:9	10	reglen
LEAF_NODE	0:0	0:0	9	;
INIT	50:9	50:9	9	reglen = sizeof ( DWORD )
ASSIGN	50:9	50:18	10	reglen = sizeof ( DWORD )
LVAL	50:9	50:9	11	reglen
NAME	50:9	50:9	12	reglen
LEAF_NODE	50:9	50:9	13	reglen
ASSIGN_OP	50:16	50:16	11	=
LEAF_NODE	50:16	50:16	12	=
RVAL	50:18	50:18	11	sizeof ( DWORD )
FUNCTION_CALL	50:18	50:30	12	sizeof ( DWORD )
CALLEE	50:18	50:18	13	sizeof
LEAF_NODE	50:18	50:18	14	sizeof
LEAF_NODE	50:24	50:24	13	(
ARGUMENT	50:25	50:25	13	DWORD
FIELD	50:25	50:25	14	DWORD
LEAF_NODE	50:25	50:25	15	DWORD
LEAF_NODE	50:30	50:30	13	)
LEAF_NODE	50:31	50:31	8	;
EXPR_STATEMENT	51:3	51:75	7	printf ( "Using Win2k (SP3+) / WinXP (No SP)... Checking SafeDllSearch\n" ) ;
EXPR	51:3	51:3	8	printf ( "Using Win2k (SP3+) / WinXP (No SP)... Checking SafeDllSearch\n" )
FUNCTION_CALL	51:3	51:74	9	printf ( "Using Win2k (SP3+) / WinXP (No SP)... Checking SafeDllSearch\n" )
CALLEE	51:3	51:3	10	printf
LEAF_NODE	51:3	51:3	11	printf
LEAF_NODE	51:9	51:9	10	(
ARGUMENT	51:10	51:10	10	"Using Win2k (SP3+) / WinXP (No SP)... Checking SafeDllSearch\n"
FIELD	51:10	51:10	11	"Using Win2k (SP3+) / WinXP (No SP)... Checking SafeDllSearch\n"
LEAF_NODE	51:10	51:10	12	"Using Win2k (SP3+) / WinXP (No SP)... Checking SafeDllSearch\n"
LEAF_NODE	51:74	51:74	10	)
LEAF_NODE	51:75	51:75	8	;
LEAF_NODE	52:3	52:3	7	read_reg_string
LEAF_NODE	52:18	52:18	7	(
LEAF_NODE	52:19	52:19	7	HKEY_LOCAL_MACHINE
LEAF_NODE	52:37	52:37	7	,
LEAF_NODE	53:4	53:4	7	L
LEAF_NODE	53:5	53:5	7	"System\\CurrentControlSet\\Control\\Session Manager"
LEAF_NODE	53:58	53:58	7	,
LEAF_NODE	54:4	54:4	7	L
LEAF_NODE	54:5	54:5	7	"SafeDllSearchMode"
LEAF_NODE	54:24	54:24	7	,
LEAF_NODE	55:4	55:4	7	(
LEAF_NODE	55:5	55:5	7	LPBYTE
LEAF_NODE	55:11	55:11	7	)
LEAF_NODE	55:13	55:13	7	&
LEAF_NODE	55:14	55:14	7	regval
LEAF_NODE	55:20	55:20	7	,
LEAF_NODE	56:4	56:4	7	&
LEAF_NODE	56:5	56:5	7	reglen
LEAF_NODE	56:11	56:11	7	)
LEAF_NODE	56:12	56:12	7	;
SELECTION	57:3	57:20	7	
KEYWORD	57:3	57:3	8	if
LEAF_NODE	57:3	57:3	9	if
LEAF_NODE	57:6	57:6	8	(
CONDITION	57:7	57:7	8	regval != 0
EXPR	57:7	57:17	9	regval != 0
FIELD	57:7	57:7	10	regval
LEAF_NODE	57:7	57:7	11	regval
EQ_OPERATOR	57:14	57:14	10	!=
LEAF_NODE	57:14	57:14	11	!=
FIELD	57:17	57:17	10	0
LEAF_NODE	57:17	57:17	11	0
LEAF_NODE	57:18	57:18	8	)
STATEMENTS	57:20	75:3	8	
LEAF_NODE	57:20	57:20	9	{
STATEMENTS	58:4	72:6	9	
EXPR_STATEMENT	58:4	58:52	10	printf ( "Trying to set SafeDllSearchMode to 0\n" ) ;
EXPR	58:4	58:4	11	printf ( "Trying to set SafeDllSearchMode to 0\n" )
FUNCTION_CALL	58:4	58:51	12	printf ( "Trying to set SafeDllSearchMode to 0\n" )
CALLEE	58:4	58:4	13	printf
LEAF_NODE	58:4	58:4	14	printf
LEAF_NODE	58:10	58:10	13	(
ARGUMENT	58:11	58:11	13	"Trying to set SafeDllSearchMode to 0\n"
FIELD	58:11	58:11	14	"Trying to set SafeDllSearchMode to 0\n"
LEAF_NODE	58:11	58:11	15	"Trying to set SafeDllSearchMode to 0\n"
LEAF_NODE	58:51	58:51	13	)
LEAF_NODE	58:52	58:52	11	;
EXPR_STATEMENT	59:4	59:14	10	regval = 0 ;
EXPR	59:4	59:4	11	regval = 0
ASSIGN	59:4	59:13	12	regval = 0
LVAL	59:4	59:4	13	regval
FIELD	59:4	59:4	14	regval
LEAF_NODE	59:4	59:4	15	regval
ASSIGN_OP	59:11	59:11	13	=
LEAF_NODE	59:11	59:11	14	=
RVAL	59:13	59:13	13	0
FIELD	59:13	59:13	14	0
LEAF_NODE	59:13	59:13	15	0
LEAF_NODE	59:14	59:14	11	;
LEAF_NODE	60:4	60:4	10	if
LEAF_NODE	60:7	60:7	10	(
LEAF_NODE	60:8	60:8	10	RegOpenKeyExW
LEAF_NODE	60:21	60:21	10	(
LEAF_NODE	60:22	60:22	10	HKEY_LOCAL_MACHINE
LEAF_NODE	60:40	60:40	10	,
LEAF_NODE	61:5	61:5	10	L
LEAF_NODE	61:6	61:6	10	"System\\CurrentControlSet\\Control\\Session Manager"
LEAF_NODE	61:59	61:59	10	,
LEAF_NODE	62:5	62:5	10	0
LEAF_NODE	62:6	62:6	10	,
LEAF_NODE	62:9	62:9	10	KEY_SET_VALUE
LEAF_NODE	62:22	62:22	10	,
LEAF_NODE	62:24	62:24	10	&
LEAF_NODE	62:25	62:25	10	hkey
LEAF_NODE	63:4	63:4	10	)
LEAF_NODE	63:6	63:6	10	==
LEAF_NODE	63:9	63:9	10	ERROR_SUCCESS
LEAF_NODE	63:22	63:22	10	)
LEAF_NODE	63:24	63:24	10	{
STATEMENTS	64:5	71:5	10	
LEAF_NODE	64:5	64:5	11	if
LEAF_NODE	64:8	64:8	11	(
LEAF_NODE	64:9	64:9	11	RegSetValueExW
LEAF_NODE	64:23	64:23	11	(
LEAF_NODE	64:24	64:24	11	hkey
LEAF_NODE	64:28	64:28	11	,
LEAF_NODE	65:6	65:6	11	L
LEAF_NODE	65:7	65:7	11	"SafeDllSearchMode"
LEAF_NODE	65:26	65:26	11	,
LEAF_NODE	65:28	65:28	11	0
LEAF_NODE	65:29	65:29	11	,
LEAF_NODE	66:6	66:6	11	REG_DWORD
LEAF_NODE	66:15	66:15	11	,
LEAF_NODE	66:17	66:17	11	(
LEAF_NODE	66:18	66:18	11	LPBYTE
LEAF_NODE	66:24	66:24	11	)
LEAF_NODE	66:26	66:26	11	&
LEAF_NODE	66:27	66:27	11	regval
LEAF_NODE	66:33	66:33	11	,
LEAF_NODE	67:6	67:6	11	sizeof
LEAF_NODE	67:12	67:12	11	(
LEAF_NODE	67:13	67:13	11	DWORD
LEAF_NODE	67:18	67:18	11	)
LEAF_NODE	68:5	68:5	11	)
LEAF_NODE	68:7	68:7	11	!=
LEAF_NODE	68:10	68:10	11	ERROR_SUCCESS
LEAF_NODE	68:23	68:23	11	)
EXPR_STATEMENT	69:6	70:29	11	printf ( "Error writing SafeDllSearchMode. Error: %u\n" , ( UINT ) GetLastError ( ) ) ;
EXPR	69:6	69:6	12	printf ( "Error writing SafeDllSearchMode. Error: %u\n" , ( UINT ) GetLastError ( ) )
FUNCTION_CALL	69:6	70:28	13	printf ( "Error writing SafeDllSearchMode. Error: %u\n" , ( UINT ) GetLastError ( ) )
CALLEE	69:6	69:6	14	printf
LEAF_NODE	69:6	69:6	15	printf
LEAF_NODE	69:12	69:12	14	(
ARGUMENT	69:13	69:13	14	"Error writing SafeDllSearchMode. Error: %u\n"
FIELD	69:13	69:13	15	"Error writing SafeDllSearchMode. Error: %u\n"
LEAF_NODE	69:13	69:13	16	"Error writing SafeDllSearchMode. Error: %u\n"
LEAF_NODE	69:59	69:59	14	,
ARGUMENT	70:7	70:14	14	( UINT ) GetLastError ( )
LEAF_NODE	70:7	70:7	15	(
TYPE_NAME	70:8	70:8	15	UINT
LEAF_NODE	70:8	70:8	16	UINT
LEAF_NODE	70:12	70:12	15	)
FUNCTION_CALL	70:14	70:27	15	GetLastError ( )
CALLEE	70:14	70:14	16	GetLastError
LEAF_NODE	70:14	70:14	17	GetLastError
LEAF_NODE	70:26	70:26	16	(
LEAF_NODE	70:27	70:27	16	)
LEAF_NODE	70:28	70:28	14	)
LEAF_NODE	70:29	70:29	12	;
EXPR_STATEMENT	71:5	71:22	11	RegCloseKey ( hkey ) ;
EXPR	71:5	71:5	12	RegCloseKey ( hkey )
FUNCTION_CALL	71:5	71:21	13	RegCloseKey ( hkey )
CALLEE	71:5	71:5	14	RegCloseKey
LEAF_NODE	71:5	71:5	15	RegCloseKey
LEAF_NODE	71:16	71:16	14	(
ARGUMENT	71:17	71:17	14	hkey
FIELD	71:17	71:17	15	hkey
LEAF_NODE	71:17	71:17	16	hkey
LEAF_NODE	71:21	71:21	14	)
LEAF_NODE	71:22	71:22	12	;
LEAF_NODE	72:4	72:4	10	}
SELECTION	72:6	73:5	10	
KEYWORD	72:6	72:6	11	else
LEAF_NODE	72:6	72:6	12	else
STATEMENTS	73:5	73:5	11	
EXPR_STATEMENT	73:5	74:28	12	printf ( "Error opening Session Manager key for writing. Error: %u\n" , ( UINT ) GetLastError ( ) ) ;
EXPR	73:5	73:5	13	printf ( "Error opening Session Manager key for writing. Error: %u\n" , ( UINT ) GetLastError ( ) )
FUNCTION_CALL	73:5	74:27	14	printf ( "Error opening Session Manager key for writing. Error: %u\n" , ( UINT ) GetLastError ( ) )
CALLEE	73:5	73:5	15	printf
LEAF_NODE	73:5	73:5	16	printf
LEAF_NODE	73:11	73:11	15	(
ARGUMENT	73:12	73:12	15	"Error opening Session Manager key for writing. Error: %u\n"
FIELD	73:12	73:12	16	"Error opening Session Manager key for writing. Error: %u\n"
LEAF_NODE	73:12	73:12	17	"Error opening Session Manager key for writing. Error: %u\n"
LEAF_NODE	73:72	73:72	15	,
ARGUMENT	74:6	74:13	15	( UINT ) GetLastError ( )
LEAF_NODE	74:6	74:6	16	(
TYPE_NAME	74:7	74:7	16	UINT
LEAF_NODE	74:7	74:7	17	UINT
LEAF_NODE	74:11	74:11	16	)
FUNCTION_CALL	74:13	74:26	16	GetLastError ( )
CALLEE	74:13	74:13	17	GetLastError
LEAF_NODE	74:13	74:13	18	GetLastError
LEAF_NODE	74:25	74:25	17	(
LEAF_NODE	74:26	74:26	17	)
LEAF_NODE	74:27	74:27	15	)
LEAF_NODE	74:28	74:28	13	;
LEAF_NODE	75:3	75:3	9	}
SELECTION	75:5	76:4	7	
KEYWORD	75:5	75:5	8	else
LEAF_NODE	75:5	75:5	9	else
STATEMENTS	76:4	76:4	8	
EXPR_STATEMENT	76:4	76:45	9	printf ( "SafeDllSearchMode is set to 0\n" ) ;
EXPR	76:4	76:4	10	printf ( "SafeDllSearchMode is set to 0\n" )
FUNCTION_CALL	76:4	76:44	11	printf ( "SafeDllSearchMode is set to 0\n" )
CALLEE	76:4	76:4	12	printf
LEAF_NODE	76:4	76:4	13	printf
LEAF_NODE	76:10	76:10	12	(
ARGUMENT	76:11	76:11	12	"SafeDllSearchMode is set to 0\n"
FIELD	76:11	76:11	13	"SafeDllSearchMode is set to 0\n"
LEAF_NODE	76:11	76:11	14	"SafeDllSearchMode is set to 0\n"
LEAF_NODE	76:44	76:44	12	)
LEAF_NODE	76:45	76:45	10	;
LEAF_NODE	77:2	77:2	6	}
LEAF_NODE	78:1	78:1	5	}
JUMP_STATEMENT	79:1	79:12	3	return TRUE ;
KEYWORD	79:1	79:1	4	return
LEAF_NODE	79:1	79:1	5	return
DESTINATION	79:8	79:8	4	TRUE
EXPR	79:8	79:8	5	TRUE
FIELD	79:8	79:8	6	TRUE
LEAF_NODE	79:8	79:8	7	TRUE
LEAF_NODE	79:12	79:12	4	;
LEAF_NODE	80:0	80:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	6:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	init_plugin
LEAF_NODE	2:12	2:12	3	init_plugin
PARAMETER_LIST	2:23	2:44	2	( PurplePlugin * plugin )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:38	3	PurplePlugin * plugin
TYPE	2:24	2:37	4	PurplePlugin *
TYPE_NAME	2:24	2:24	5	PurplePlugin
LEAF_NODE	2:24	2:24	6	PurplePlugin
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	plugin
LEAF_NODE	2:38	2:38	5	plugin
LEAF_NODE	2:44	2:44	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:10	3	ml_init ( ) ;
EXPR	4:1	4:1	4	ml_init ( )
FUNCTION_CALL	4:1	4:9	5	ml_init ( )
CALLEE	4:1	4:1	6	ml_init
LEAF_NODE	4:1	4:1	7	ml_init
LEAF_NODE	4:8	4:8	6	(
LEAF_NODE	4:9	4:9	6	)
LEAF_NODE	4:10	4:10	4	;
EXPR_STATEMENT	5:1	5:58	3	loader_info . exts = g_list_append ( loader_info . exts , "dll" ) ;
EXPR	5:1	5:1	4	loader_info . exts = g_list_append ( loader_info . exts , "dll" )
ASSIGN	5:1	5:20	5	loader_info . exts = g_list_append ( loader_info . exts , "dll" )
LVAL	5:1	5:1	6	loader_info . exts
FIELD	5:1	5:13	7	loader_info . exts
LEAF_NODE	5:1	5:1	8	loader_info
LEAF_NODE	5:12	5:12	8	.
LEAF_NODE	5:13	5:13	8	exts
ASSIGN_OP	5:18	5:18	6	=
LEAF_NODE	5:18	5:18	7	=
RVAL	5:20	5:20	6	g_list_append ( loader_info . exts , "dll" )
FUNCTION_CALL	5:20	5:57	7	g_list_append ( loader_info . exts , "dll" )
CALLEE	5:20	5:20	8	g_list_append
LEAF_NODE	5:20	5:20	9	g_list_append
LEAF_NODE	5:33	5:33	8	(
ARGUMENT	5:34	5:34	8	loader_info . exts
FIELD	5:34	5:46	9	loader_info . exts
LEAF_NODE	5:34	5:34	10	loader_info
LEAF_NODE	5:45	5:45	10	.
LEAF_NODE	5:46	5:46	10	exts
LEAF_NODE	5:50	5:50	8	,
ARGUMENT	5:52	5:52	8	"dll"
FIELD	5:52	5:52	9	"dll"
LEAF_NODE	5:52	5:52	10	"dll"
LEAF_NODE	5:57	5:57	8	)
LEAF_NODE	5:58	5:58	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	74:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	finch_plugins_show_all
LEAF_NODE	2:5	2:5	3	finch_plugins_show_all
PARAMETER_LIST	2:27	2:28	2	( )
LEAF_NODE	2:27	2:27	3	(
LEAF_NODE	2:28	2:28	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	73:1	2	
SIMPLE_DECL	4:1	4:48	3	GntWidget * window , GntWidget * tree , GntWidget * box , GntWidget * aboot , GntWidget * button ;
INIT_DECL_LIST	4:1	4:1	4	GntWidget * window , GntWidget * tree , GntWidget * box , GntWidget * aboot , GntWidget * button
VAR_DECL	4:1	4:12	5	GntWidget * window
TYPE	4:1	4:11	6	GntWidget *
TYPE_NAME	4:1	4:1	7	GntWidget
LEAF_NODE	4:1	4:1	8	GntWidget
POINTER	4:11	4:11	7	*
LEAF_NODE	4:11	4:11	8	*
NAME	4:12	4:12	6	window
LEAF_NODE	4:12	4:12	7	window
LEAF_NODE	4:18	4:18	5	,
INIT_DECL_LIST	4:1	4:1	5	GntWidget * tree , GntWidget * box , GntWidget * aboot , GntWidget * button
VAR_DECL	4:1	4:21	6	GntWidget * tree
TYPE	4:1	4:20	7	GntWidget *
TYPE_NAME	4:1	4:1	8	GntWidget
LEAF_NODE	4:1	4:1	9	GntWidget
POINTER	4:20	4:20	8	*
LEAF_NODE	4:20	4:20	9	*
NAME	4:21	4:21	7	tree
LEAF_NODE	4:21	4:21	8	tree
LEAF_NODE	4:25	4:25	6	,
INIT_DECL_LIST	4:1	4:1	6	GntWidget * box , GntWidget * aboot , GntWidget * button
VAR_DECL	4:1	4:28	7	GntWidget * box
TYPE	4:1	4:27	8	GntWidget *
TYPE_NAME	4:1	4:1	9	GntWidget
LEAF_NODE	4:1	4:1	10	GntWidget
POINTER	4:27	4:27	9	*
LEAF_NODE	4:27	4:27	10	*
NAME	4:28	4:28	8	box
LEAF_NODE	4:28	4:28	9	box
LEAF_NODE	4:31	4:31	7	,
INIT_DECL_LIST	4:1	4:1	7	GntWidget * aboot , GntWidget * button
VAR_DECL	4:1	4:34	8	GntWidget * aboot
TYPE	4:1	4:33	9	GntWidget *
TYPE_NAME	4:1	4:1	10	GntWidget
LEAF_NODE	4:1	4:1	11	GntWidget
POINTER	4:33	4:33	10	*
LEAF_NODE	4:33	4:33	11	*
NAME	4:34	4:34	9	aboot
LEAF_NODE	4:34	4:34	10	aboot
LEAF_NODE	4:39	4:39	8	,
VAR_DECL	4:1	4:42	8	GntWidget * button
TYPE	4:1	4:41	9	GntWidget *
TYPE_NAME	4:1	4:1	10	GntWidget
LEAF_NODE	4:1	4:1	11	GntWidget
POINTER	4:41	4:41	10	*
LEAF_NODE	4:41	4:41	11	*
NAME	4:42	4:42	9	button
LEAF_NODE	4:42	4:42	10	button
LEAF_NODE	4:48	4:48	4	;
SIMPLE_DECL	5:1	5:12	3	GList * iter ;
VAR_DECL	5:1	5:8	4	GList * iter
TYPE	5:1	5:7	5	GList *
TYPE_NAME	5:1	5:1	6	GList
LEAF_NODE	5:1	5:1	7	GList
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	iter
LEAF_NODE	5:8	5:8	6	iter
LEAF_NODE	5:12	5:12	4	;
SIMPLE_DECL	6:1	6:12	3	GList * seen ;
VAR_DECL	6:1	6:8	4	GList * seen
TYPE	6:1	6:7	5	GList *
TYPE_NAME	6:1	6:1	6	GList
LEAF_NODE	6:1	6:1	7	GList
POINTER	6:7	6:7	6	*
LEAF_NODE	6:7	6:7	7	*
NAME	6:8	6:8	5	seen
LEAF_NODE	6:8	6:8	6	seen
LEAF_NODE	6:12	6:12	4	;
SELECTION	7:1	7:21	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	plugins . window
EXPR	7:5	7:5	5	plugins . window
FIELD	7:5	7:13	6	plugins . window
LEAF_NODE	7:5	7:5	7	plugins
LEAF_NODE	7:12	7:12	7	.
LEAF_NODE	7:13	7:13	7	window
LEAF_NODE	7:19	7:19	4	)
STATEMENTS	7:21	10:1	4	
LEAF_NODE	7:21	7:21	5	{
STATEMENTS	8:2	9:2	5	
EXPR_STATEMENT	8:2	8:36	6	gnt_window_present ( plugins . window ) ;
EXPR	8:2	8:2	7	gnt_window_present ( plugins . window )
FUNCTION_CALL	8:2	8:35	8	gnt_window_present ( plugins . window )
CALLEE	8:2	8:2	9	gnt_window_present
LEAF_NODE	8:2	8:2	10	gnt_window_present
LEAF_NODE	8:20	8:20	9	(
ARGUMENT	8:21	8:21	9	plugins . window
FIELD	8:21	8:29	10	plugins . window
LEAF_NODE	8:21	8:21	11	plugins
LEAF_NODE	8:28	8:28	11	.
LEAF_NODE	8:29	8:29	11	window
LEAF_NODE	8:35	8:35	9	)
LEAF_NODE	8:36	8:36	7	;
JUMP_STATEMENT	9:2	9:8	6	return DESTINATION ;
KEYWORD	9:2	9:2	7	return
LEAF_NODE	9:2	9:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	9:8	9:8	7	;
LEAF_NODE	10:1	10:1	5	}
EXPR_STATEMENT	11:1	11:38	3	purple_plugins_probe ( G_MODULE_SUFFIX ) ;
EXPR	11:1	11:1	4	purple_plugins_probe ( G_MODULE_SUFFIX )
FUNCTION_CALL	11:1	11:37	5	purple_plugins_probe ( G_MODULE_SUFFIX )
CALLEE	11:1	11:1	6	purple_plugins_probe
LEAF_NODE	11:1	11:1	7	purple_plugins_probe
LEAF_NODE	11:21	11:21	6	(
ARGUMENT	11:22	11:22	6	G_MODULE_SUFFIX
FIELD	11:22	11:22	7	G_MODULE_SUFFIX
LEAF_NODE	11:22	11:22	8	G_MODULE_SUFFIX
LEAF_NODE	11:37	11:37	6	)
LEAF_NODE	11:38	11:38	4	;
EXPR_STATEMENT	12:1	12:46	3	plugins . window = window = gnt_vbox_new ( FALSE ) ;
EXPR	12:1	12:1	4	plugins . window = window = gnt_vbox_new ( FALSE )
ASSIGN	12:1	12:18	5	plugins . window = window = gnt_vbox_new ( FALSE )
LVAL	12:1	12:1	6	plugins . window
FIELD	12:1	12:9	7	plugins . window
LEAF_NODE	12:1	12:1	8	plugins
LEAF_NODE	12:8	12:8	8	.
LEAF_NODE	12:9	12:9	8	window
ASSIGN_OP	12:16	12:16	6	=
LEAF_NODE	12:16	12:16	7	=
RVAL	12:18	12:18	6	window = gnt_vbox_new ( FALSE )
ASSIGN	12:18	12:27	7	window = gnt_vbox_new ( FALSE )
LVAL	12:18	12:18	8	window
FIELD	12:18	12:18	9	window
LEAF_NODE	12:18	12:18	10	window
ASSIGN_OP	12:25	12:25	8	=
LEAF_NODE	12:25	12:25	9	=
RVAL	12:27	12:27	8	gnt_vbox_new ( FALSE )
FUNCTION_CALL	12:27	12:45	9	gnt_vbox_new ( FALSE )
CALLEE	12:27	12:27	10	gnt_vbox_new
LEAF_NODE	12:27	12:27	11	gnt_vbox_new
LEAF_NODE	12:39	12:39	10	(
ARGUMENT	12:40	12:40	10	FALSE
FIELD	12:40	12:40	11	FALSE
LEAF_NODE	12:40	12:40	12	FALSE
LEAF_NODE	12:45	12:45	10	)
LEAF_NODE	12:46	12:46	4	;
EXPR_STATEMENT	13:1	13:44	3	gnt_box_set_toplevel ( GNT_BOX ( window ) , TRUE ) ;
EXPR	13:1	13:1	4	gnt_box_set_toplevel ( GNT_BOX ( window ) , TRUE )
FUNCTION_CALL	13:1	13:43	5	gnt_box_set_toplevel ( GNT_BOX ( window ) , TRUE )
CALLEE	13:1	13:1	6	gnt_box_set_toplevel
LEAF_NODE	13:1	13:1	7	gnt_box_set_toplevel
LEAF_NODE	13:21	13:21	6	(
ARGUMENT	13:22	13:22	6	GNT_BOX ( window )
FUNCTION_CALL	13:22	13:36	7	GNT_BOX ( window )
CALLEE	13:22	13:22	8	GNT_BOX
LEAF_NODE	13:22	13:22	9	GNT_BOX
LEAF_NODE	13:29	13:29	8	(
ARGUMENT	13:30	13:30	8	window
FIELD	13:30	13:30	9	window
LEAF_NODE	13:30	13:30	10	window
LEAF_NODE	13:36	13:36	8	)
LEAF_NODE	13:37	13:37	6	,
ARGUMENT	13:39	13:39	6	TRUE
FIELD	13:39	13:39	7	TRUE
LEAF_NODE	13:39	13:39	8	TRUE
LEAF_NODE	13:43	13:43	6	)
LEAF_NODE	13:44	13:44	4	;
EXPR_STATEMENT	14:1	14:49	3	gnt_box_set_title ( GNT_BOX ( window ) , _ ( "Plugins" ) ) ;
EXPR	14:1	14:1	4	gnt_box_set_title ( GNT_BOX ( window ) , _ ( "Plugins" ) )
FUNCTION_CALL	14:1	14:48	5	gnt_box_set_title ( GNT_BOX ( window ) , _ ( "Plugins" ) )
CALLEE	14:1	14:1	6	gnt_box_set_title
LEAF_NODE	14:1	14:1	7	gnt_box_set_title
LEAF_NODE	14:18	14:18	6	(
ARGUMENT	14:19	14:19	6	GNT_BOX ( window )
FUNCTION_CALL	14:19	14:33	7	GNT_BOX ( window )
CALLEE	14:19	14:19	8	GNT_BOX
LEAF_NODE	14:19	14:19	9	GNT_BOX
LEAF_NODE	14:26	14:26	8	(
ARGUMENT	14:27	14:27	8	window
FIELD	14:27	14:27	9	window
LEAF_NODE	14:27	14:27	10	window
LEAF_NODE	14:33	14:33	8	)
LEAF_NODE	14:34	14:34	6	,
ARGUMENT	14:36	14:36	6	_ ( "Plugins" )
FUNCTION_CALL	14:36	14:47	7	_ ( "Plugins" )
CALLEE	14:36	14:36	8	_
LEAF_NODE	14:36	14:36	9	_
LEAF_NODE	14:37	14:37	8	(
ARGUMENT	14:38	14:38	8	"Plugins"
FIELD	14:38	14:38	9	"Plugins"
LEAF_NODE	14:38	14:38	10	"Plugins"
LEAF_NODE	14:47	14:47	8	)
LEAF_NODE	14:48	14:48	6	)
LEAF_NODE	14:49	14:49	4	;
EXPR_STATEMENT	15:1	15:36	3	gnt_box_set_pad ( GNT_BOX ( window ) , 0 ) ;
EXPR	15:1	15:1	4	gnt_box_set_pad ( GNT_BOX ( window ) , 0 )
FUNCTION_CALL	15:1	15:35	5	gnt_box_set_pad ( GNT_BOX ( window ) , 0 )
CALLEE	15:1	15:1	6	gnt_box_set_pad
LEAF_NODE	15:1	15:1	7	gnt_box_set_pad
LEAF_NODE	15:16	15:16	6	(
ARGUMENT	15:17	15:17	6	GNT_BOX ( window )
FUNCTION_CALL	15:17	15:31	7	GNT_BOX ( window )
CALLEE	15:17	15:17	8	GNT_BOX
LEAF_NODE	15:17	15:17	9	GNT_BOX
LEAF_NODE	15:24	15:24	8	(
ARGUMENT	15:25	15:25	8	window
FIELD	15:25	15:25	9	window
LEAF_NODE	15:25	15:25	10	window
LEAF_NODE	15:31	15:31	8	)
LEAF_NODE	15:32	15:32	6	,
ARGUMENT	15:34	15:34	6	0
FIELD	15:34	15:34	7	0
LEAF_NODE	15:34	15:34	8	0
LEAF_NODE	15:35	15:35	6	)
LEAF_NODE	15:36	15:36	4	;
EXPR_STATEMENT	16:1	16:54	3	gnt_box_set_alignment ( GNT_BOX ( window ) , GNT_ALIGN_MID ) ;
EXPR	16:1	16:1	4	gnt_box_set_alignment ( GNT_BOX ( window ) , GNT_ALIGN_MID )
FUNCTION_CALL	16:1	16:53	5	gnt_box_set_alignment ( GNT_BOX ( window ) , GNT_ALIGN_MID )
CALLEE	16:1	16:1	6	gnt_box_set_alignment
LEAF_NODE	16:1	16:1	7	gnt_box_set_alignment
LEAF_NODE	16:22	16:22	6	(
ARGUMENT	16:23	16:23	6	GNT_BOX ( window )
FUNCTION_CALL	16:23	16:37	7	GNT_BOX ( window )
CALLEE	16:23	16:23	8	GNT_BOX
LEAF_NODE	16:23	16:23	9	GNT_BOX
LEAF_NODE	16:30	16:30	8	(
ARGUMENT	16:31	16:31	8	window
FIELD	16:31	16:31	9	window
LEAF_NODE	16:31	16:31	10	window
LEAF_NODE	16:37	16:37	8	)
LEAF_NODE	16:38	16:38	6	,
ARGUMENT	16:40	16:40	6	GNT_ALIGN_MID
FIELD	16:40	16:40	7	GNT_ALIGN_MID
LEAF_NODE	16:40	16:40	8	GNT_ALIGN_MID
LEAF_NODE	16:53	16:53	6	)
LEAF_NODE	16:54	16:54	4	;
EXPR_STATEMENT	17:1	18:73	3	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new ( _ ( "You can (un)load plugins from the following list." ) ) ) ;
EXPR	17:1	17:1	4	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new ( _ ( "You can (un)load plugins from the following list." ) ) )
FUNCTION_CALL	17:1	18:72	5	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new ( _ ( "You can (un)load plugins from the following list." ) ) )
CALLEE	17:1	17:1	6	gnt_box_add_widget
LEAF_NODE	17:1	17:1	7	gnt_box_add_widget
LEAF_NODE	17:19	17:19	6	(
ARGUMENT	17:20	17:20	6	GNT_BOX ( window )
FUNCTION_CALL	17:20	17:34	7	GNT_BOX ( window )
CALLEE	17:20	17:20	8	GNT_BOX
LEAF_NODE	17:20	17:20	9	GNT_BOX
LEAF_NODE	17:27	17:27	8	(
ARGUMENT	17:28	17:28	8	window
FIELD	17:28	17:28	9	window
LEAF_NODE	17:28	17:28	10	window
LEAF_NODE	17:34	17:34	8	)
LEAF_NODE	17:35	17:35	6	,
ARGUMENT	18:3	18:3	6	gnt_label_new ( _ ( "You can (un)load plugins from the following list." ) )
FUNCTION_CALL	18:3	18:71	7	gnt_label_new ( _ ( "You can (un)load plugins from the following list." ) )
CALLEE	18:3	18:3	8	gnt_label_new
LEAF_NODE	18:3	18:3	9	gnt_label_new
LEAF_NODE	18:16	18:16	8	(
ARGUMENT	18:17	18:17	8	_ ( "You can (un)load plugins from the following list." )
FUNCTION_CALL	18:17	18:70	9	_ ( "You can (un)load plugins from the following list." )
CALLEE	18:17	18:17	10	_
LEAF_NODE	18:17	18:17	11	_
LEAF_NODE	18:18	18:18	10	(
ARGUMENT	18:19	18:19	10	"You can (un)load plugins from the following list."
FIELD	18:19	18:19	11	"You can (un)load plugins from the following list."
LEAF_NODE	18:19	18:19	12	"You can (un)load plugins from the following list."
LEAF_NODE	18:70	18:70	10	)
LEAF_NODE	18:71	18:71	8	)
LEAF_NODE	18:72	18:72	6	)
LEAF_NODE	18:73	18:73	4	;
EXPR_STATEMENT	19:1	19:53	3	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_hline_new ( ) ) ;
EXPR	19:1	19:1	4	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_hline_new ( ) )
FUNCTION_CALL	19:1	19:52	5	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_hline_new ( ) )
CALLEE	19:1	19:1	6	gnt_box_add_widget
LEAF_NODE	19:1	19:1	7	gnt_box_add_widget
LEAF_NODE	19:19	19:19	6	(
ARGUMENT	19:20	19:20	6	GNT_BOX ( window )
FUNCTION_CALL	19:20	19:34	7	GNT_BOX ( window )
CALLEE	19:20	19:20	8	GNT_BOX
LEAF_NODE	19:20	19:20	9	GNT_BOX
LEAF_NODE	19:27	19:27	8	(
ARGUMENT	19:28	19:28	8	window
FIELD	19:28	19:28	9	window
LEAF_NODE	19:28	19:28	10	window
LEAF_NODE	19:34	19:34	8	)
LEAF_NODE	19:35	19:35	6	,
ARGUMENT	19:37	19:37	6	gnt_hline_new ( )
FUNCTION_CALL	19:37	19:51	7	gnt_hline_new ( )
CALLEE	19:37	19:37	8	gnt_hline_new
LEAF_NODE	19:37	19:37	9	gnt_hline_new
LEAF_NODE	19:50	19:50	8	(
LEAF_NODE	19:51	19:51	8	)
LEAF_NODE	19:52	19:52	6	)
LEAF_NODE	19:53	19:53	4	;
EXPR_STATEMENT	20:1	20:26	3	box = gnt_hbox_new ( FALSE ) ;
EXPR	20:1	20:1	4	box = gnt_hbox_new ( FALSE )
ASSIGN	20:1	20:7	5	box = gnt_hbox_new ( FALSE )
LVAL	20:1	20:1	6	box
FIELD	20:1	20:1	7	box
LEAF_NODE	20:1	20:1	8	box
ASSIGN_OP	20:5	20:5	6	=
LEAF_NODE	20:5	20:5	7	=
RVAL	20:7	20:7	6	gnt_hbox_new ( FALSE )
FUNCTION_CALL	20:7	20:25	7	gnt_hbox_new ( FALSE )
CALLEE	20:7	20:7	8	gnt_hbox_new
LEAF_NODE	20:7	20:7	9	gnt_hbox_new
LEAF_NODE	20:19	20:19	8	(
ARGUMENT	20:20	20:20	8	FALSE
FIELD	20:20	20:20	9	FALSE
LEAF_NODE	20:20	20:20	10	FALSE
LEAF_NODE	20:25	20:25	8	)
LEAF_NODE	20:26	20:26	4	;
EXPR_STATEMENT	21:1	21:41	3	gnt_box_add_widget ( GNT_BOX ( window ) , box ) ;
EXPR	21:1	21:1	4	gnt_box_add_widget ( GNT_BOX ( window ) , box )
FUNCTION_CALL	21:1	21:40	5	gnt_box_add_widget ( GNT_BOX ( window ) , box )
CALLEE	21:1	21:1	6	gnt_box_add_widget
LEAF_NODE	21:1	21:1	7	gnt_box_add_widget
LEAF_NODE	21:19	21:19	6	(
ARGUMENT	21:20	21:20	6	GNT_BOX ( window )
FUNCTION_CALL	21:20	21:34	7	GNT_BOX ( window )
CALLEE	21:20	21:20	8	GNT_BOX
LEAF_NODE	21:20	21:20	9	GNT_BOX
LEAF_NODE	21:27	21:27	8	(
ARGUMENT	21:28	21:28	8	window
FIELD	21:28	21:28	9	window
LEAF_NODE	21:28	21:28	10	window
LEAF_NODE	21:34	21:34	8	)
LEAF_NODE	21:35	21:35	6	,
ARGUMENT	21:37	21:37	6	box
FIELD	21:37	21:37	7	box
LEAF_NODE	21:37	21:37	8	box
LEAF_NODE	21:40	21:40	6	)
LEAF_NODE	21:41	21:41	4	;
EXPR_STATEMENT	22:1	22:53	3	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_hline_new ( ) ) ;
EXPR	22:1	22:1	4	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_hline_new ( ) )
FUNCTION_CALL	22:1	22:52	5	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_hline_new ( ) )
CALLEE	22:1	22:1	6	gnt_box_add_widget
LEAF_NODE	22:1	22:1	7	gnt_box_add_widget
LEAF_NODE	22:19	22:19	6	(
ARGUMENT	22:20	22:20	6	GNT_BOX ( window )
FUNCTION_CALL	22:20	22:34	7	GNT_BOX ( window )
CALLEE	22:20	22:20	8	GNT_BOX
LEAF_NODE	22:20	22:20	9	GNT_BOX
LEAF_NODE	22:27	22:27	8	(
ARGUMENT	22:28	22:28	8	window
FIELD	22:28	22:28	9	window
LEAF_NODE	22:28	22:28	10	window
LEAF_NODE	22:34	22:34	8	)
LEAF_NODE	22:35	22:35	6	,
ARGUMENT	22:37	22:37	6	gnt_hline_new ( )
FUNCTION_CALL	22:37	22:51	7	gnt_hline_new ( )
CALLEE	22:37	22:37	8	gnt_hline_new
LEAF_NODE	22:37	22:37	9	gnt_hline_new
LEAF_NODE	22:50	22:50	8	(
LEAF_NODE	22:51	22:51	8	)
LEAF_NODE	22:52	22:52	6	)
LEAF_NODE	22:53	22:53	4	;
EXPR_STATEMENT	23:1	23:33	3	gnt_box_set_pad ( GNT_BOX ( box ) , 0 ) ;
EXPR	23:1	23:1	4	gnt_box_set_pad ( GNT_BOX ( box ) , 0 )
FUNCTION_CALL	23:1	23:32	5	gnt_box_set_pad ( GNT_BOX ( box ) , 0 )
CALLEE	23:1	23:1	6	gnt_box_set_pad
LEAF_NODE	23:1	23:1	7	gnt_box_set_pad
LEAF_NODE	23:16	23:16	6	(
ARGUMENT	23:17	23:17	6	GNT_BOX ( box )
FUNCTION_CALL	23:17	23:28	7	GNT_BOX ( box )
CALLEE	23:17	23:17	8	GNT_BOX
LEAF_NODE	23:17	23:17	9	GNT_BOX
LEAF_NODE	23:24	23:24	8	(
ARGUMENT	23:25	23:25	8	box
FIELD	23:25	23:25	9	box
LEAF_NODE	23:25	23:25	10	box
LEAF_NODE	23:28	23:28	8	)
LEAF_NODE	23:29	23:29	6	,
ARGUMENT	23:31	23:31	6	0
FIELD	23:31	23:31	7	0
LEAF_NODE	23:31	23:31	8	0
LEAF_NODE	23:32	23:32	6	)
LEAF_NODE	23:33	23:33	4	;
EXPR_STATEMENT	24:1	24:37	3	plugins . tree = tree = gnt_tree_new ( ) ;
EXPR	24:1	24:1	4	plugins . tree = tree = gnt_tree_new ( )
ASSIGN	24:1	24:16	5	plugins . tree = tree = gnt_tree_new ( )
LVAL	24:1	24:1	6	plugins . tree
FIELD	24:1	24:9	7	plugins . tree
LEAF_NODE	24:1	24:1	8	plugins
LEAF_NODE	24:8	24:8	8	.
LEAF_NODE	24:9	24:9	8	tree
ASSIGN_OP	24:14	24:14	6	=
LEAF_NODE	24:14	24:14	7	=
RVAL	24:16	24:16	6	tree = gnt_tree_new ( )
ASSIGN	24:16	24:23	7	tree = gnt_tree_new ( )
LVAL	24:16	24:16	8	tree
FIELD	24:16	24:16	9	tree
LEAF_NODE	24:16	24:16	10	tree
ASSIGN_OP	24:21	24:21	8	=
LEAF_NODE	24:21	24:21	9	=
RVAL	24:23	24:23	8	gnt_tree_new ( )
FUNCTION_CALL	24:23	24:36	9	gnt_tree_new ( )
CALLEE	24:23	24:23	10	gnt_tree_new
LEAF_NODE	24:23	24:23	11	gnt_tree_new
LEAF_NODE	24:35	24:35	10	(
LEAF_NODE	24:36	24:36	10	)
LEAF_NODE	24:37	24:37	4	;
EXPR_STATEMENT	25:1	25:72	3	gnt_tree_set_compare_func ( GNT_TREE ( tree ) , ( GCompareFunc ) plugin_compare ) ;
EXPR	25:1	25:1	4	gnt_tree_set_compare_func ( GNT_TREE ( tree ) , ( GCompareFunc ) plugin_compare )
FUNCTION_CALL	25:1	25:71	5	gnt_tree_set_compare_func ( GNT_TREE ( tree ) , ( GCompareFunc ) plugin_compare )
CALLEE	25:1	25:1	6	gnt_tree_set_compare_func
LEAF_NODE	25:1	25:1	7	gnt_tree_set_compare_func
LEAF_NODE	25:26	25:26	6	(
ARGUMENT	25:27	25:27	6	GNT_TREE ( tree )
FUNCTION_CALL	25:27	25:40	7	GNT_TREE ( tree )
CALLEE	25:27	25:27	8	GNT_TREE
LEAF_NODE	25:27	25:27	9	GNT_TREE
LEAF_NODE	25:35	25:35	8	(
ARGUMENT	25:36	25:36	8	tree
FIELD	25:36	25:36	9	tree
LEAF_NODE	25:36	25:36	10	tree
LEAF_NODE	25:40	25:40	8	)
LEAF_NODE	25:41	25:41	6	,
ARGUMENT	25:43	25:57	6	( GCompareFunc ) plugin_compare
LEAF_NODE	25:43	25:43	7	(
TYPE_NAME	25:44	25:44	7	GCompareFunc
LEAF_NODE	25:44	25:44	8	GCompareFunc
LEAF_NODE	25:56	25:56	7	)
FIELD	25:57	25:57	7	plugin_compare
LEAF_NODE	25:57	25:57	8	plugin_compare
LEAF_NODE	25:71	25:71	6	)
LEAF_NODE	25:72	25:72	4	;
EXPR_STATEMENT	26:1	26:49	3	GNT_WIDGET_SET_FLAGS ( tree , GNT_WIDGET_NO_BORDER ) ;
EXPR	26:1	26:1	4	GNT_WIDGET_SET_FLAGS ( tree , GNT_WIDGET_NO_BORDER )
FUNCTION_CALL	26:1	26:48	5	GNT_WIDGET_SET_FLAGS ( tree , GNT_WIDGET_NO_BORDER )
CALLEE	26:1	26:1	6	GNT_WIDGET_SET_FLAGS
LEAF_NODE	26:1	26:1	7	GNT_WIDGET_SET_FLAGS
LEAF_NODE	26:21	26:21	6	(
ARGUMENT	26:22	26:22	6	tree
FIELD	26:22	26:22	7	tree
LEAF_NODE	26:22	26:22	8	tree
LEAF_NODE	26:26	26:26	6	,
ARGUMENT	26:28	26:28	6	GNT_WIDGET_NO_BORDER
FIELD	26:28	26:28	7	GNT_WIDGET_NO_BORDER
LEAF_NODE	26:28	26:28	8	GNT_WIDGET_NO_BORDER
LEAF_NODE	26:48	26:48	6	)
LEAF_NODE	26:49	26:49	4	;
EXPR_STATEMENT	27:1	27:39	3	gnt_box_add_widget ( GNT_BOX ( box ) , tree ) ;
EXPR	27:1	27:1	4	gnt_box_add_widget ( GNT_BOX ( box ) , tree )
FUNCTION_CALL	27:1	27:38	5	gnt_box_add_widget ( GNT_BOX ( box ) , tree )
CALLEE	27:1	27:1	6	gnt_box_add_widget
LEAF_NODE	27:1	27:1	7	gnt_box_add_widget
LEAF_NODE	27:19	27:19	6	(
ARGUMENT	27:20	27:20	6	GNT_BOX ( box )
FUNCTION_CALL	27:20	27:31	7	GNT_BOX ( box )
CALLEE	27:20	27:20	8	GNT_BOX
LEAF_NODE	27:20	27:20	9	GNT_BOX
LEAF_NODE	27:27	27:27	8	(
ARGUMENT	27:28	27:28	8	box
FIELD	27:28	27:28	9	box
LEAF_NODE	27:28	27:28	10	box
LEAF_NODE	27:31	27:31	8	)
LEAF_NODE	27:32	27:32	6	,
ARGUMENT	27:34	27:34	6	tree
FIELD	27:34	27:34	7	tree
LEAF_NODE	27:34	27:34	8	tree
LEAF_NODE	27:38	27:38	6	)
LEAF_NODE	27:39	27:39	4	;
EXPR_STATEMENT	28:1	28:50	3	gnt_box_add_widget ( GNT_BOX ( box ) , gnt_vline_new ( ) ) ;
EXPR	28:1	28:1	4	gnt_box_add_widget ( GNT_BOX ( box ) , gnt_vline_new ( ) )
FUNCTION_CALL	28:1	28:49	5	gnt_box_add_widget ( GNT_BOX ( box ) , gnt_vline_new ( ) )
CALLEE	28:1	28:1	6	gnt_box_add_widget
LEAF_NODE	28:1	28:1	7	gnt_box_add_widget
LEAF_NODE	28:19	28:19	6	(
ARGUMENT	28:20	28:20	6	GNT_BOX ( box )
FUNCTION_CALL	28:20	28:31	7	GNT_BOX ( box )
CALLEE	28:20	28:20	8	GNT_BOX
LEAF_NODE	28:20	28:20	9	GNT_BOX
LEAF_NODE	28:27	28:27	8	(
ARGUMENT	28:28	28:28	8	box
FIELD	28:28	28:28	9	box
LEAF_NODE	28:28	28:28	10	box
LEAF_NODE	28:31	28:31	8	)
LEAF_NODE	28:32	28:32	6	,
ARGUMENT	28:34	28:34	6	gnt_vline_new ( )
FUNCTION_CALL	28:34	28:48	7	gnt_vline_new ( )
CALLEE	28:34	28:34	8	gnt_vline_new
LEAF_NODE	28:34	28:34	9	gnt_vline_new
LEAF_NODE	28:47	28:47	8	(
LEAF_NODE	28:48	28:48	8	)
LEAF_NODE	28:49	28:49	6	)
LEAF_NODE	28:50	28:50	4	;
EXPR_STATEMENT	29:1	29:44	3	plugins . aboot = aboot = gnt_text_view_new ( ) ;
EXPR	29:1	29:1	4	plugins . aboot = aboot = gnt_text_view_new ( )
ASSIGN	29:1	29:17	5	plugins . aboot = aboot = gnt_text_view_new ( )
LVAL	29:1	29:1	6	plugins . aboot
FIELD	29:1	29:9	7	plugins . aboot
LEAF_NODE	29:1	29:1	8	plugins
LEAF_NODE	29:8	29:8	8	.
LEAF_NODE	29:9	29:9	8	aboot
ASSIGN_OP	29:15	29:15	6	=
LEAF_NODE	29:15	29:15	7	=
RVAL	29:17	29:17	6	aboot = gnt_text_view_new ( )
ASSIGN	29:17	29:25	7	aboot = gnt_text_view_new ( )
LVAL	29:17	29:17	8	aboot
FIELD	29:17	29:17	9	aboot
LEAF_NODE	29:17	29:17	10	aboot
ASSIGN_OP	29:23	29:23	8	=
LEAF_NODE	29:23	29:23	9	=
RVAL	29:25	29:25	8	gnt_text_view_new ( )
FUNCTION_CALL	29:25	29:43	9	gnt_text_view_new ( )
CALLEE	29:25	29:25	10	gnt_text_view_new
LEAF_NODE	29:25	29:25	11	gnt_text_view_new
LEAF_NODE	29:42	29:42	10	(
LEAF_NODE	29:43	29:43	10	)
LEAF_NODE	29:44	29:44	4	;
EXPR_STATEMENT	30:1	30:70	3	gnt_text_view_set_flag ( GNT_TEXT_VIEW ( aboot ) , GNT_TEXT_VIEW_TOP_ALIGN ) ;
EXPR	30:1	30:1	4	gnt_text_view_set_flag ( GNT_TEXT_VIEW ( aboot ) , GNT_TEXT_VIEW_TOP_ALIGN )
FUNCTION_CALL	30:1	30:69	5	gnt_text_view_set_flag ( GNT_TEXT_VIEW ( aboot ) , GNT_TEXT_VIEW_TOP_ALIGN )
CALLEE	30:1	30:1	6	gnt_text_view_set_flag
LEAF_NODE	30:1	30:1	7	gnt_text_view_set_flag
LEAF_NODE	30:23	30:23	6	(
ARGUMENT	30:24	30:24	6	GNT_TEXT_VIEW ( aboot )
FUNCTION_CALL	30:24	30:43	7	GNT_TEXT_VIEW ( aboot )
CALLEE	30:24	30:24	8	GNT_TEXT_VIEW
LEAF_NODE	30:24	30:24	9	GNT_TEXT_VIEW
LEAF_NODE	30:37	30:37	8	(
ARGUMENT	30:38	30:38	8	aboot
FIELD	30:38	30:38	9	aboot
LEAF_NODE	30:38	30:38	10	aboot
LEAF_NODE	30:43	30:43	8	)
LEAF_NODE	30:44	30:44	6	,
ARGUMENT	30:46	30:46	6	GNT_TEXT_VIEW_TOP_ALIGN
FIELD	30:46	30:46	7	GNT_TEXT_VIEW_TOP_ALIGN
LEAF_NODE	30:46	30:46	8	GNT_TEXT_VIEW_TOP_ALIGN
LEAF_NODE	30:69	30:69	6	)
LEAF_NODE	30:70	30:70	4	;
EXPR_STATEMENT	31:1	31:35	3	gnt_widget_set_size ( aboot , 40 , 20 ) ;
EXPR	31:1	31:1	4	gnt_widget_set_size ( aboot , 40 , 20 )
FUNCTION_CALL	31:1	31:34	5	gnt_widget_set_size ( aboot , 40 , 20 )
CALLEE	31:1	31:1	6	gnt_widget_set_size
LEAF_NODE	31:1	31:1	7	gnt_widget_set_size
LEAF_NODE	31:20	31:20	6	(
ARGUMENT	31:21	31:21	6	aboot
FIELD	31:21	31:21	7	aboot
LEAF_NODE	31:21	31:21	8	aboot
LEAF_NODE	31:26	31:26	6	,
ARGUMENT	31:28	31:28	6	40
FIELD	31:28	31:28	7	40
LEAF_NODE	31:28	31:28	8	40
LEAF_NODE	31:30	31:30	6	,
ARGUMENT	31:32	31:32	6	20
FIELD	31:32	31:32	7	20
LEAF_NODE	31:32	31:32	8	20
LEAF_NODE	31:34	31:34	6	)
LEAF_NODE	31:35	31:35	4	;
EXPR_STATEMENT	32:1	32:40	3	gnt_box_add_widget ( GNT_BOX ( box ) , aboot ) ;
EXPR	32:1	32:1	4	gnt_box_add_widget ( GNT_BOX ( box ) , aboot )
FUNCTION_CALL	32:1	32:39	5	gnt_box_add_widget ( GNT_BOX ( box ) , aboot )
CALLEE	32:1	32:1	6	gnt_box_add_widget
LEAF_NODE	32:1	32:1	7	gnt_box_add_widget
LEAF_NODE	32:19	32:19	6	(
ARGUMENT	32:20	32:20	6	GNT_BOX ( box )
FUNCTION_CALL	32:20	32:31	7	GNT_BOX ( box )
CALLEE	32:20	32:20	8	GNT_BOX
LEAF_NODE	32:20	32:20	9	GNT_BOX
LEAF_NODE	32:27	32:27	8	(
ARGUMENT	32:28	32:28	8	box
FIELD	32:28	32:28	9	box
LEAF_NODE	32:28	32:28	10	box
LEAF_NODE	32:31	32:31	8	)
LEAF_NODE	32:32	32:32	6	,
ARGUMENT	32:34	32:34	6	aboot
FIELD	32:34	32:34	7	aboot
LEAF_NODE	32:34	32:34	8	aboot
LEAF_NODE	32:39	32:39	6	)
LEAF_NODE	32:40	32:40	4	;
EXPR_STATEMENT	33:1	33:57	3	seen = purple_prefs_get_path_list ( "/finch/plugins/seen" ) ;
EXPR	33:1	33:1	4	seen = purple_prefs_get_path_list ( "/finch/plugins/seen" )
ASSIGN	33:1	33:8	5	seen = purple_prefs_get_path_list ( "/finch/plugins/seen" )
LVAL	33:1	33:1	6	seen
FIELD	33:1	33:1	7	seen
LEAF_NODE	33:1	33:1	8	seen
ASSIGN_OP	33:6	33:6	6	=
LEAF_NODE	33:6	33:6	7	=
RVAL	33:8	33:8	6	purple_prefs_get_path_list ( "/finch/plugins/seen" )
FUNCTION_CALL	33:8	33:56	7	purple_prefs_get_path_list ( "/finch/plugins/seen" )
CALLEE	33:8	33:8	8	purple_prefs_get_path_list
LEAF_NODE	33:8	33:8	9	purple_prefs_get_path_list
LEAF_NODE	33:34	33:34	8	(
ARGUMENT	33:35	33:35	8	"/finch/plugins/seen"
FIELD	33:35	33:35	9	"/finch/plugins/seen"
LEAF_NODE	33:35	33:35	10	"/finch/plugins/seen"
LEAF_NODE	33:56	33:56	8	)
LEAF_NODE	33:57	33:57	4	;
ITERATION	34:1	35:1	3	
KEYWORD	34:1	34:1	4	for
LEAF_NODE	34:1	34:1	5	for
LEAF_NODE	34:5	34:5	4	(
FOR_INIT	34:6	34:37	4	iter = purple_plugins_get_all ( ) ;
EXPR	34:6	34:6	5	iter = purple_plugins_get_all ( )
ASSIGN	34:6	34:13	6	iter = purple_plugins_get_all ( )
LVAL	34:6	34:6	7	iter
FIELD	34:6	34:6	8	iter
LEAF_NODE	34:6	34:6	9	iter
ASSIGN_OP	34:11	34:11	7	=
LEAF_NODE	34:11	34:11	8	=
RVAL	34:13	34:13	7	purple_plugins_get_all ( )
FUNCTION_CALL	34:13	34:36	8	purple_plugins_get_all ( )
CALLEE	34:13	34:13	9	purple_plugins_get_all
LEAF_NODE	34:13	34:13	10	purple_plugins_get_all
LEAF_NODE	34:35	34:35	9	(
LEAF_NODE	34:36	34:36	9	)
LEAF_NODE	34:37	34:37	5	;
CONDITION	34:39	34:39	4	iter
EXPR	34:39	34:39	5	iter
FIELD	34:39	34:39	6	iter
LEAF_NODE	34:39	34:39	7	iter
LEAF_NODE	34:43	34:43	4	;
FOR_EXPR	34:45	34:45	4	iter = iter -> next
EXPR	34:45	34:45	5	iter = iter -> next
ASSIGN	34:45	34:52	6	iter = iter -> next
LVAL	34:45	34:45	7	iter
FIELD	34:45	34:45	8	iter
LEAF_NODE	34:45	34:45	9	iter
ASSIGN_OP	34:50	34:50	7	=
LEAF_NODE	34:50	34:50	8	=
RVAL	34:52	34:52	7	iter -> next
FIELD	34:52	34:58	8	iter -> next
LEAF_NODE	34:52	34:52	9	iter
LEAF_NODE	34:56	34:56	9	->
LEAF_NODE	34:58	34:58	9	next
LEAF_NODE	34:62	34:62	4	)
STATEMENTS	35:1	53:1	4	
LEAF_NODE	35:1	35:1	5	{
STATEMENTS	36:2	51:2	5	
SIMPLE_DECL	36:2	36:33	6	PurplePlugin * plug ; plug = iter -> data ;
VAR_DECL	36:2	36:16	7	PurplePlugin * plug ; plug = iter -> data
TYPE	36:2	36:15	8	PurplePlugin *
TYPE_NAME	36:2	36:2	9	PurplePlugin
LEAF_NODE	36:2	36:2	10	PurplePlugin
POINTER	36:15	36:15	9	*
LEAF_NODE	36:15	36:15	10	*
NAME	36:16	36:16	8	plug
LEAF_NODE	36:16	36:16	9	plug
LEAF_NODE	0:0	0:0	8	;
INIT	36:16	36:16	8	plug = iter -> data
ASSIGN	36:16	36:23	9	plug = iter -> data
LVAL	36:16	36:16	10	plug
NAME	36:16	36:16	11	plug
LEAF_NODE	36:16	36:16	12	plug
ASSIGN_OP	36:21	36:21	10	=
LEAF_NODE	36:21	36:21	11	=
RVAL	36:23	36:23	10	iter -> data
FIELD	36:23	36:29	11	iter -> data
LEAF_NODE	36:23	36:23	12	iter
LEAF_NODE	36:27	36:27	12	->
LEAF_NODE	36:29	36:29	12	data
LEAF_NODE	36:33	36:33	7	;
SELECTION	37:2	37:48	6	
KEYWORD	37:2	37:2	7	if
LEAF_NODE	37:2	37:2	8	if
LEAF_NODE	37:5	37:5	7	(
CONDITION	37:6	37:6	7	plug -> info -> type == PURPLE_PLUGIN_LOADER
EXPR	37:6	37:26	8	plug -> info -> type == PURPLE_PLUGIN_LOADER
FIELD	37:6	37:18	9	plug -> info -> type
LEAF_NODE	37:6	37:6	10	plug
LEAF_NODE	37:10	37:10	10	->
LEAF_NODE	37:12	37:12	10	info
LEAF_NODE	37:16	37:16	10	->
LEAF_NODE	37:18	37:18	10	type
EQ_OPERATOR	37:23	37:23	9	==
LEAF_NODE	37:23	37:23	10	==
FIELD	37:26	37:26	9	PURPLE_PLUGIN_LOADER
LEAF_NODE	37:26	37:26	10	PURPLE_PLUGIN_LOADER
LEAF_NODE	37:46	37:46	7	)
STATEMENTS	37:48	43:2	7	
LEAF_NODE	37:48	37:48	8	{
STATEMENTS	38:3	42:3	8	
SIMPLE_DECL	38:3	38:13	9	GList * cur ;
VAR_DECL	38:3	38:10	10	GList * cur
TYPE	38:3	38:9	11	GList *
TYPE_NAME	38:3	38:3	12	GList
LEAF_NODE	38:3	38:3	13	GList
POINTER	38:9	38:9	12	*
LEAF_NODE	38:9	38:9	13	*
NAME	38:10	38:10	11	cur
LEAF_NODE	38:10	38:10	12	cur
LEAF_NODE	38:13	38:13	10	;
ITERATION	39:3	41:4	9	
KEYWORD	39:3	39:3	10	for
LEAF_NODE	39:3	39:3	11	for
LEAF_NODE	39:7	39:7	10	(
FOR_INIT	39:8	39:51	10	cur = PURPLE_PLUGIN_LOADER_INFO ( plug ) -> exts ;
EXPR	39:8	39:8	11	cur = PURPLE_PLUGIN_LOADER_INFO ( plug ) -> exts
ASSIGN	39:8	39:14	12	cur = PURPLE_PLUGIN_LOADER_INFO ( plug ) -> exts
LVAL	39:8	39:8	13	cur
FIELD	39:8	39:8	14	cur
LEAF_NODE	39:8	39:8	15	cur
ASSIGN_OP	39:12	39:12	13	=
LEAF_NODE	39:12	39:12	14	=
RVAL	39:14	39:47	13	PURPLE_PLUGIN_LOADER_INFO ( plug ) -> exts
FUNCTION_CALL	39:14	39:44	14	PURPLE_PLUGIN_LOADER_INFO ( plug )
CALLEE	39:14	39:14	15	PURPLE_PLUGIN_LOADER_INFO
LEAF_NODE	39:14	39:14	16	PURPLE_PLUGIN_LOADER_INFO
LEAF_NODE	39:39	39:39	15	(
ARGUMENT	39:40	39:40	15	plug
FIELD	39:40	39:40	16	plug
LEAF_NODE	39:40	39:40	17	plug
LEAF_NODE	39:44	39:44	15	)
LEAF_NODE	39:45	39:45	14	->
LEAF_NODE	39:47	39:47	14	exts
LEAF_NODE	39:51	39:51	11	;
CONDITION	39:53	39:53	10	cur != NULL
EXPR	39:53	39:60	11	cur != NULL
FIELD	39:53	39:53	12	cur
LEAF_NODE	39:53	39:53	13	cur
EQ_OPERATOR	39:57	39:57	12	!=
LEAF_NODE	39:57	39:57	13	!=
FIELD	39:60	39:60	12	NULL
LEAF_NODE	39:60	39:60	13	NULL
LEAF_NODE	39:64	39:64	10	;
FOR_EXPR	40:6	40:6	10	cur = cur -> next
EXPR	40:6	40:6	11	cur = cur -> next
ASSIGN	40:6	40:12	12	cur = cur -> next
LVAL	40:6	40:6	13	cur
FIELD	40:6	40:6	14	cur
LEAF_NODE	40:6	40:6	15	cur
ASSIGN_OP	40:10	40:10	13	=
LEAF_NODE	40:10	40:10	14	=
RVAL	40:12	40:12	13	cur -> next
FIELD	40:12	40:17	14	cur -> next
LEAF_NODE	40:12	40:12	15	cur
LEAF_NODE	40:15	40:15	15	->
LEAF_NODE	40:17	40:17	15	next
LEAF_NODE	40:21	40:21	10	)
STATEMENTS	41:4	41:4	10	
EXPR_STATEMENT	41:4	41:35	11	purple_plugins_probe ( cur -> data ) ;
EXPR	41:4	41:4	12	purple_plugins_probe ( cur -> data )
FUNCTION_CALL	41:4	41:34	13	purple_plugins_probe ( cur -> data )
CALLEE	41:4	41:4	14	purple_plugins_probe
LEAF_NODE	41:4	41:4	15	purple_plugins_probe
LEAF_NODE	41:24	41:24	14	(
ARGUMENT	41:25	41:25	14	cur -> data
FIELD	41:25	41:30	15	cur -> data
LEAF_NODE	41:25	41:25	16	cur
LEAF_NODE	41:28	41:28	16	->
LEAF_NODE	41:30	41:30	16	data
LEAF_NODE	41:34	41:34	14	)
LEAF_NODE	41:35	41:35	12	;
JUMP_STATEMENT	42:3	42:11	9	continue DESTINATION ;
KEYWORD	42:3	42:3	10	continue
LEAF_NODE	42:3	42:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	42:11	42:11	10	;
LEAF_NODE	43:2	43:2	8	}
SELECTION	44:2	47:3	6	
KEYWORD	44:2	44:2	7	if
LEAF_NODE	44:2	44:2	8	if
LEAF_NODE	44:5	44:5	7	(
CONDITION	44:6	44:6	7	plug -> info -> type != PURPLE_PLUGIN_STANDARD || ( plug -> info -> flags & PURPLE_PLUGIN_FLAG_INVISIBLE ) || plug -> error
EXPR	44:6	44:6	8	plug -> info -> type != PURPLE_PLUGIN_STANDARD || ( plug -> info -> flags & PURPLE_PLUGIN_FLAG_INVISIBLE ) || plug -> error
OR	44:6	45:3	9	plug -> info -> type != PURPLE_PLUGIN_STANDARD || ( plug -> info -> flags & PURPLE_PLUGIN_FLAG_INVISIBLE ) || plug -> error
EXPR	44:6	44:26	10	plug -> info -> type != PURPLE_PLUGIN_STANDARD
FIELD	44:6	44:18	11	plug -> info -> type
LEAF_NODE	44:6	44:6	12	plug
LEAF_NODE	44:10	44:10	12	->
LEAF_NODE	44:12	44:12	12	info
LEAF_NODE	44:16	44:16	12	->
LEAF_NODE	44:18	44:18	12	type
EQ_OPERATOR	44:23	44:23	11	!=
LEAF_NODE	44:23	44:23	12	!=
FIELD	44:26	44:26	11	PURPLE_PLUGIN_STANDARD
LEAF_NODE	44:26	44:26	12	PURPLE_PLUGIN_STANDARD
LEAF_NODE	44:49	44:49	10	||
EXPR	45:3	45:3	10	( plug -> info -> flags & PURPLE_PLUGIN_FLAG_INVISIBLE ) || plug -> error
OR	45:3	46:3	11	( plug -> info -> flags & PURPLE_PLUGIN_FLAG_INVISIBLE ) || plug -> error
EXPR	45:3	45:52	12	( plug -> info -> flags & PURPLE_PLUGIN_FLAG_INVISIBLE )
LEAF_NODE	45:3	45:3	13	(
FIELD	45:4	45:16	13	plug -> info -> flags
LEAF_NODE	45:4	45:4	14	plug
LEAF_NODE	45:8	45:8	14	->
LEAF_NODE	45:10	45:10	14	info
LEAF_NODE	45:14	45:14	14	->
LEAF_NODE	45:16	45:16	14	flags
LEAF_NODE	45:22	45:22	13	&
FIELD	45:24	45:24	13	PURPLE_PLUGIN_FLAG_INVISIBLE
LEAF_NODE	45:24	45:24	14	PURPLE_PLUGIN_FLAG_INVISIBLE
LEAF_NODE	45:52	45:52	13	)
LEAF_NODE	45:54	45:54	12	||
EXPR	46:3	46:3	12	plug -> error
FIELD	46:3	46:9	13	plug -> error
LEAF_NODE	46:3	46:3	14	plug
LEAF_NODE	46:7	46:7	14	->
LEAF_NODE	46:9	46:9	14	error
LEAF_NODE	46:14	46:14	7	)
STATEMENTS	47:3	47:3	7	
JUMP_STATEMENT	47:3	47:11	8	continue DESTINATION ;
KEYWORD	47:3	47:3	9	continue
LEAF_NODE	47:3	47:3	10	continue
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	47:11	47:11	9	;
EXPR_STATEMENT	48:2	49:70	6	gnt_tree_add_choice ( GNT_TREE ( tree ) , plug , gnt_tree_create_row ( GNT_TREE ( tree ) , plug -> info -> name ) , NULL , NULL ) ;
EXPR	48:2	48:2	7	gnt_tree_add_choice ( GNT_TREE ( tree ) , plug , gnt_tree_create_row ( GNT_TREE ( tree ) , plug -> info -> name ) , NULL , NULL )
FUNCTION_CALL	48:2	49:69	8	gnt_tree_add_choice ( GNT_TREE ( tree ) , plug , gnt_tree_create_row ( GNT_TREE ( tree ) , plug -> info -> name ) , NULL , NULL )
CALLEE	48:2	48:2	9	gnt_tree_add_choice
LEAF_NODE	48:2	48:2	10	gnt_tree_add_choice
LEAF_NODE	48:21	48:21	9	(
ARGUMENT	48:22	48:22	9	GNT_TREE ( tree )
FUNCTION_CALL	48:22	48:35	10	GNT_TREE ( tree )
CALLEE	48:22	48:22	11	GNT_TREE
LEAF_NODE	48:22	48:22	12	GNT_TREE
LEAF_NODE	48:30	48:30	11	(
ARGUMENT	48:31	48:31	11	tree
FIELD	48:31	48:31	12	tree
LEAF_NODE	48:31	48:31	13	tree
LEAF_NODE	48:35	48:35	11	)
LEAF_NODE	48:36	48:36	9	,
ARGUMENT	48:38	48:38	9	plug
FIELD	48:38	48:38	10	plug
LEAF_NODE	48:38	48:38	11	plug
LEAF_NODE	48:42	48:42	9	,
ARGUMENT	49:4	49:4	9	gnt_tree_create_row ( GNT_TREE ( tree ) , plug -> info -> name )
FUNCTION_CALL	49:4	49:56	10	gnt_tree_create_row ( GNT_TREE ( tree ) , plug -> info -> name )
CALLEE	49:4	49:4	11	gnt_tree_create_row
LEAF_NODE	49:4	49:4	12	gnt_tree_create_row
LEAF_NODE	49:23	49:23	11	(
ARGUMENT	49:24	49:24	11	GNT_TREE ( tree )
FUNCTION_CALL	49:24	49:37	12	GNT_TREE ( tree )
CALLEE	49:24	49:24	13	GNT_TREE
LEAF_NODE	49:24	49:24	14	GNT_TREE
LEAF_NODE	49:32	49:32	13	(
ARGUMENT	49:33	49:33	13	tree
FIELD	49:33	49:33	14	tree
LEAF_NODE	49:33	49:33	15	tree
LEAF_NODE	49:37	49:37	13	)
LEAF_NODE	49:38	49:38	11	,
ARGUMENT	49:40	49:40	11	plug -> info -> name
FIELD	49:40	49:52	12	plug -> info -> name
LEAF_NODE	49:40	49:40	13	plug
LEAF_NODE	49:44	49:44	13	->
LEAF_NODE	49:46	49:46	13	info
LEAF_NODE	49:50	49:50	13	->
LEAF_NODE	49:52	49:52	13	name
LEAF_NODE	49:56	49:56	11	)
LEAF_NODE	49:57	49:57	9	,
ARGUMENT	49:59	49:59	9	NULL
FIELD	49:59	49:59	10	NULL
LEAF_NODE	49:59	49:59	11	NULL
LEAF_NODE	49:63	49:63	9	,
ARGUMENT	49:65	49:65	9	NULL
FIELD	49:65	49:65	10	NULL
LEAF_NODE	49:65	49:65	11	NULL
LEAF_NODE	49:69	49:69	9	)
LEAF_NODE	49:70	49:70	7	;
EXPR_STATEMENT	50:2	50:74	6	gnt_tree_set_choice ( GNT_TREE ( tree ) , plug , purple_plugin_is_loaded ( plug ) ) ;
EXPR	50:2	50:2	7	gnt_tree_set_choice ( GNT_TREE ( tree ) , plug , purple_plugin_is_loaded ( plug ) )
FUNCTION_CALL	50:2	50:73	8	gnt_tree_set_choice ( GNT_TREE ( tree ) , plug , purple_plugin_is_loaded ( plug ) )
CALLEE	50:2	50:2	9	gnt_tree_set_choice
LEAF_NODE	50:2	50:2	10	gnt_tree_set_choice
LEAF_NODE	50:21	50:21	9	(
ARGUMENT	50:22	50:22	9	GNT_TREE ( tree )
FUNCTION_CALL	50:22	50:35	10	GNT_TREE ( tree )
CALLEE	50:22	50:22	11	GNT_TREE
LEAF_NODE	50:22	50:22	12	GNT_TREE
LEAF_NODE	50:30	50:30	11	(
ARGUMENT	50:31	50:31	11	tree
FIELD	50:31	50:31	12	tree
LEAF_NODE	50:31	50:31	13	tree
LEAF_NODE	50:35	50:35	11	)
LEAF_NODE	50:36	50:36	9	,
ARGUMENT	50:38	50:38	9	plug
FIELD	50:38	50:38	10	plug
LEAF_NODE	50:38	50:38	11	plug
LEAF_NODE	50:42	50:42	9	,
ARGUMENT	50:44	50:44	9	purple_plugin_is_loaded ( plug )
FUNCTION_CALL	50:44	50:72	10	purple_plugin_is_loaded ( plug )
CALLEE	50:44	50:44	11	purple_plugin_is_loaded
LEAF_NODE	50:44	50:44	12	purple_plugin_is_loaded
LEAF_NODE	50:67	50:67	11	(
ARGUMENT	50:68	50:68	11	plug
FIELD	50:68	50:68	12	plug
LEAF_NODE	50:68	50:68	13	plug
LEAF_NODE	50:72	50:72	11	)
LEAF_NODE	50:73	50:73	9	)
LEAF_NODE	50:74	50:74	7	;
SELECTION	51:2	52:3	6	
KEYWORD	51:2	51:2	7	if
LEAF_NODE	51:2	51:2	8	if
LEAF_NODE	51:5	51:5	7	(
CONDITION	51:6	51:6	7	! g_list_find_custom ( seen , plug -> path , ( GCompareFunc ) strcmp )
EXPR	51:6	51:6	8	! g_list_find_custom ( seen , plug -> path , ( GCompareFunc ) strcmp )
UNARY_EXPR	51:6	51:7	9	! g_list_find_custom ( seen , plug -> path , ( GCompareFunc ) strcmp )
UNARY_OPERATOR	51:6	51:6	10	!
LEAF_NODE	51:6	51:6	11	!
FUNCTION_CALL	51:7	51:64	10	g_list_find_custom ( seen , plug -> path , ( GCompareFunc ) strcmp )
CALLEE	51:7	51:7	11	g_list_find_custom
LEAF_NODE	51:7	51:7	12	g_list_find_custom
LEAF_NODE	51:25	51:25	11	(
ARGUMENT	51:26	51:26	11	seen
FIELD	51:26	51:26	12	seen
LEAF_NODE	51:26	51:26	13	seen
LEAF_NODE	51:30	51:30	11	,
ARGUMENT	51:32	51:32	11	plug -> path
FIELD	51:32	51:38	12	plug -> path
LEAF_NODE	51:32	51:32	13	plug
LEAF_NODE	51:36	51:36	13	->
LEAF_NODE	51:38	51:38	13	path
LEAF_NODE	51:42	51:42	11	,
ARGUMENT	51:44	51:58	11	( GCompareFunc ) strcmp
LEAF_NODE	51:44	51:44	12	(
TYPE_NAME	51:45	51:45	12	GCompareFunc
LEAF_NODE	51:45	51:45	13	GCompareFunc
LEAF_NODE	51:57	51:57	12	)
FIELD	51:58	51:58	12	strcmp
LEAF_NODE	51:58	51:58	13	strcmp
LEAF_NODE	51:64	51:64	11	)
LEAF_NODE	51:65	51:65	7	)
STATEMENTS	52:3	52:3	7	
EXPR_STATEMENT	52:3	52:67	8	gnt_tree_set_row_flags ( GNT_TREE ( tree ) , plug , GNT_TEXT_FLAG_BOLD ) ;
EXPR	52:3	52:3	9	gnt_tree_set_row_flags ( GNT_TREE ( tree ) , plug , GNT_TEXT_FLAG_BOLD )
FUNCTION_CALL	52:3	52:66	10	gnt_tree_set_row_flags ( GNT_TREE ( tree ) , plug , GNT_TEXT_FLAG_BOLD )
CALLEE	52:3	52:3	11	gnt_tree_set_row_flags
LEAF_NODE	52:3	52:3	12	gnt_tree_set_row_flags
LEAF_NODE	52:25	52:25	11	(
ARGUMENT	52:26	52:26	11	GNT_TREE ( tree )
FUNCTION_CALL	52:26	52:39	12	GNT_TREE ( tree )
CALLEE	52:26	52:26	13	GNT_TREE
LEAF_NODE	52:26	52:26	14	GNT_TREE
LEAF_NODE	52:34	52:34	13	(
ARGUMENT	52:35	52:35	13	tree
FIELD	52:35	52:35	14	tree
LEAF_NODE	52:35	52:35	15	tree
LEAF_NODE	52:39	52:39	13	)
LEAF_NODE	52:40	52:40	11	,
ARGUMENT	52:42	52:42	11	plug
FIELD	52:42	52:42	12	plug
LEAF_NODE	52:42	52:42	13	plug
LEAF_NODE	52:46	52:46	11	,
ARGUMENT	52:48	52:48	11	GNT_TEXT_FLAG_BOLD
FIELD	52:48	52:48	12	GNT_TEXT_FLAG_BOLD
LEAF_NODE	52:48	52:48	13	GNT_TEXT_FLAG_BOLD
LEAF_NODE	52:66	52:66	11	)
LEAF_NODE	52:67	52:67	9	;
LEAF_NODE	53:1	53:1	5	}
EXPR_STATEMENT	54:1	54:46	3	gnt_tree_set_col_width ( GNT_TREE ( tree ) , 0 , 30 ) ;
EXPR	54:1	54:1	4	gnt_tree_set_col_width ( GNT_TREE ( tree ) , 0 , 30 )
FUNCTION_CALL	54:1	54:45	5	gnt_tree_set_col_width ( GNT_TREE ( tree ) , 0 , 30 )
CALLEE	54:1	54:1	6	gnt_tree_set_col_width
LEAF_NODE	54:1	54:1	7	gnt_tree_set_col_width
LEAF_NODE	54:23	54:23	6	(
ARGUMENT	54:24	54:24	6	GNT_TREE ( tree )
FUNCTION_CALL	54:24	54:37	7	GNT_TREE ( tree )
CALLEE	54:24	54:24	8	GNT_TREE
LEAF_NODE	54:24	54:24	9	GNT_TREE
LEAF_NODE	54:32	54:32	8	(
ARGUMENT	54:33	54:33	8	tree
FIELD	54:33	54:33	9	tree
LEAF_NODE	54:33	54:33	10	tree
LEAF_NODE	54:37	54:37	8	)
LEAF_NODE	54:38	54:38	6	,
ARGUMENT	54:40	54:40	6	0
FIELD	54:40	54:40	7	0
LEAF_NODE	54:40	54:40	8	0
LEAF_NODE	54:41	54:41	6	,
ARGUMENT	54:43	54:43	6	30
FIELD	54:43	54:43	7	30
LEAF_NODE	54:43	54:43	8	30
LEAF_NODE	54:45	54:45	6	)
LEAF_NODE	54:46	54:46	4	;
EXPR_STATEMENT	55:1	55:81	3	g_signal_connect ( G_OBJECT ( tree ) , "toggled" , G_CALLBACK ( plugin_toggled_cb ) , NULL ) ;
EXPR	55:1	55:1	4	g_signal_connect ( G_OBJECT ( tree ) , "toggled" , G_CALLBACK ( plugin_toggled_cb ) , NULL )
FUNCTION_CALL	55:1	55:80	5	g_signal_connect ( G_OBJECT ( tree ) , "toggled" , G_CALLBACK ( plugin_toggled_cb ) , NULL )
CALLEE	55:1	55:1	6	g_signal_connect
LEAF_NODE	55:1	55:1	7	g_signal_connect
LEAF_NODE	55:17	55:17	6	(
ARGUMENT	55:18	55:18	6	G_OBJECT ( tree )
FUNCTION_CALL	55:18	55:31	7	G_OBJECT ( tree )
CALLEE	55:18	55:18	8	G_OBJECT
LEAF_NODE	55:18	55:18	9	G_OBJECT
LEAF_NODE	55:26	55:26	8	(
ARGUMENT	55:27	55:27	8	tree
FIELD	55:27	55:27	9	tree
LEAF_NODE	55:27	55:27	10	tree
LEAF_NODE	55:31	55:31	8	)
LEAF_NODE	55:32	55:32	6	,
ARGUMENT	55:34	55:34	6	"toggled"
FIELD	55:34	55:34	7	"toggled"
LEAF_NODE	55:34	55:34	8	"toggled"
LEAF_NODE	55:43	55:43	6	,
ARGUMENT	55:45	55:45	6	G_CALLBACK ( plugin_toggled_cb )
FUNCTION_CALL	55:45	55:73	7	G_CALLBACK ( plugin_toggled_cb )
CALLEE	55:45	55:45	8	G_CALLBACK
LEAF_NODE	55:45	55:45	9	G_CALLBACK
LEAF_NODE	55:55	55:55	8	(
ARGUMENT	55:56	55:56	8	plugin_toggled_cb
FIELD	55:56	55:56	9	plugin_toggled_cb
LEAF_NODE	55:56	55:56	10	plugin_toggled_cb
LEAF_NODE	55:73	55:73	8	)
LEAF_NODE	55:74	55:74	6	,
ARGUMENT	55:76	55:76	6	NULL
FIELD	55:76	55:76	7	NULL
LEAF_NODE	55:76	55:76	8	NULL
LEAF_NODE	55:80	55:80	6	)
LEAF_NODE	55:81	55:81	4	;
EXPR_STATEMENT	56:1	56:91	3	g_signal_connect ( G_OBJECT ( tree ) , "selection_changed" , G_CALLBACK ( selection_changed ) , NULL ) ;
EXPR	56:1	56:1	4	g_signal_connect ( G_OBJECT ( tree ) , "selection_changed" , G_CALLBACK ( selection_changed ) , NULL )
FUNCTION_CALL	56:1	56:90	5	g_signal_connect ( G_OBJECT ( tree ) , "selection_changed" , G_CALLBACK ( selection_changed ) , NULL )
CALLEE	56:1	56:1	6	g_signal_connect
LEAF_NODE	56:1	56:1	7	g_signal_connect
LEAF_NODE	56:17	56:17	6	(
ARGUMENT	56:18	56:18	6	G_OBJECT ( tree )
FUNCTION_CALL	56:18	56:31	7	G_OBJECT ( tree )
CALLEE	56:18	56:18	8	G_OBJECT
LEAF_NODE	56:18	56:18	9	G_OBJECT
LEAF_NODE	56:26	56:26	8	(
ARGUMENT	56:27	56:27	8	tree
FIELD	56:27	56:27	9	tree
LEAF_NODE	56:27	56:27	10	tree
LEAF_NODE	56:31	56:31	8	)
LEAF_NODE	56:32	56:32	6	,
ARGUMENT	56:34	56:34	6	"selection_changed"
FIELD	56:34	56:34	7	"selection_changed"
LEAF_NODE	56:34	56:34	8	"selection_changed"
LEAF_NODE	56:53	56:53	6	,
ARGUMENT	56:55	56:55	6	G_CALLBACK ( selection_changed )
FUNCTION_CALL	56:55	56:83	7	G_CALLBACK ( selection_changed )
CALLEE	56:55	56:55	8	G_CALLBACK
LEAF_NODE	56:55	56:55	9	G_CALLBACK
LEAF_NODE	56:65	56:65	8	(
ARGUMENT	56:66	56:66	8	selection_changed
FIELD	56:66	56:66	9	selection_changed
LEAF_NODE	56:66	56:66	10	selection_changed
LEAF_NODE	56:83	56:83	8	)
LEAF_NODE	56:84	56:84	6	,
ARGUMENT	56:86	56:86	6	NULL
FIELD	56:86	56:86	7	NULL
LEAF_NODE	56:86	56:86	8	NULL
LEAF_NODE	56:90	56:90	6	)
LEAF_NODE	56:91	56:91	4	;
EXPR_STATEMENT	57:1	57:53	3	g_object_set_data ( G_OBJECT ( tree ) , "seen-list" , seen ) ;
EXPR	57:1	57:1	4	g_object_set_data ( G_OBJECT ( tree ) , "seen-list" , seen )
FUNCTION_CALL	57:1	57:52	5	g_object_set_data ( G_OBJECT ( tree ) , "seen-list" , seen )
CALLEE	57:1	57:1	6	g_object_set_data
LEAF_NODE	57:1	57:1	7	g_object_set_data
LEAF_NODE	57:18	57:18	6	(
ARGUMENT	57:19	57:19	6	G_OBJECT ( tree )
FUNCTION_CALL	57:19	57:32	7	G_OBJECT ( tree )
CALLEE	57:19	57:19	8	G_OBJECT
LEAF_NODE	57:19	57:19	9	G_OBJECT
LEAF_NODE	57:27	57:27	8	(
ARGUMENT	57:28	57:28	8	tree
FIELD	57:28	57:28	9	tree
LEAF_NODE	57:28	57:28	10	tree
LEAF_NODE	57:32	57:32	8	)
LEAF_NODE	57:33	57:33	6	,
ARGUMENT	57:35	57:35	6	"seen-list"
FIELD	57:35	57:35	7	"seen-list"
LEAF_NODE	57:35	57:35	8	"seen-list"
LEAF_NODE	57:46	57:46	6	,
ARGUMENT	57:48	57:48	6	seen
FIELD	57:48	57:48	7	seen
LEAF_NODE	57:48	57:48	8	seen
LEAF_NODE	57:52	57:52	6	)
LEAF_NODE	57:53	57:53	4	;
EXPR_STATEMENT	58:1	58:26	3	box = gnt_hbox_new ( FALSE ) ;
EXPR	58:1	58:1	4	box = gnt_hbox_new ( FALSE )
ASSIGN	58:1	58:7	5	box = gnt_hbox_new ( FALSE )
LVAL	58:1	58:1	6	box
FIELD	58:1	58:1	7	box
LEAF_NODE	58:1	58:1	8	box
ASSIGN_OP	58:5	58:5	6	=
LEAF_NODE	58:5	58:5	7	=
RVAL	58:7	58:7	6	gnt_hbox_new ( FALSE )
FUNCTION_CALL	58:7	58:25	7	gnt_hbox_new ( FALSE )
CALLEE	58:7	58:7	8	gnt_hbox_new
LEAF_NODE	58:7	58:7	9	gnt_hbox_new
LEAF_NODE	58:19	58:19	8	(
ARGUMENT	58:20	58:20	8	FALSE
FIELD	58:20	58:20	9	FALSE
LEAF_NODE	58:20	58:20	10	FALSE
LEAF_NODE	58:25	58:25	8	)
LEAF_NODE	58:26	58:26	4	;
EXPR_STATEMENT	59:1	59:41	3	gnt_box_add_widget ( GNT_BOX ( window ) , box ) ;
EXPR	59:1	59:1	4	gnt_box_add_widget ( GNT_BOX ( window ) , box )
FUNCTION_CALL	59:1	59:40	5	gnt_box_add_widget ( GNT_BOX ( window ) , box )
CALLEE	59:1	59:1	6	gnt_box_add_widget
LEAF_NODE	59:1	59:1	7	gnt_box_add_widget
LEAF_NODE	59:19	59:19	6	(
ARGUMENT	59:20	59:20	6	GNT_BOX ( window )
FUNCTION_CALL	59:20	59:34	7	GNT_BOX ( window )
CALLEE	59:20	59:20	8	GNT_BOX
LEAF_NODE	59:20	59:20	9	GNT_BOX
LEAF_NODE	59:27	59:27	8	(
ARGUMENT	59:28	59:28	8	window
FIELD	59:28	59:28	9	window
LEAF_NODE	59:28	59:28	10	window
LEAF_NODE	59:34	59:34	8	)
LEAF_NODE	59:35	59:35	6	,
ARGUMENT	59:37	59:37	6	box
FIELD	59:37	59:37	7	box
LEAF_NODE	59:37	59:37	8	box
LEAF_NODE	59:40	59:40	6	)
LEAF_NODE	59:41	59:41	4	;
EXPR_STATEMENT	60:1	60:48	3	button = gnt_button_new ( _ ( "Install Plugin..." ) ) ;
EXPR	60:1	60:1	4	button = gnt_button_new ( _ ( "Install Plugin..." ) )
ASSIGN	60:1	60:10	5	button = gnt_button_new ( _ ( "Install Plugin..." ) )
LVAL	60:1	60:1	6	button
FIELD	60:1	60:1	7	button
LEAF_NODE	60:1	60:1	8	button
ASSIGN_OP	60:8	60:8	6	=
LEAF_NODE	60:8	60:8	7	=
RVAL	60:10	60:10	6	gnt_button_new ( _ ( "Install Plugin..." ) )
FUNCTION_CALL	60:10	60:47	7	gnt_button_new ( _ ( "Install Plugin..." ) )
CALLEE	60:10	60:10	8	gnt_button_new
LEAF_NODE	60:10	60:10	9	gnt_button_new
LEAF_NODE	60:24	60:24	8	(
ARGUMENT	60:25	60:25	8	_ ( "Install Plugin..." )
FUNCTION_CALL	60:25	60:46	9	_ ( "Install Plugin..." )
CALLEE	60:25	60:25	10	_
LEAF_NODE	60:25	60:25	11	_
LEAF_NODE	60:26	60:26	10	(
ARGUMENT	60:27	60:27	10	"Install Plugin..."
FIELD	60:27	60:27	11	"Install Plugin..."
LEAF_NODE	60:27	60:27	12	"Install Plugin..."
LEAF_NODE	60:46	60:46	10	)
LEAF_NODE	60:47	60:47	8	)
LEAF_NODE	60:48	60:48	4	;
EXPR_STATEMENT	61:1	61:41	3	gnt_box_add_widget ( GNT_BOX ( box ) , button ) ;
EXPR	61:1	61:1	4	gnt_box_add_widget ( GNT_BOX ( box ) , button )
FUNCTION_CALL	61:1	61:40	5	gnt_box_add_widget ( GNT_BOX ( box ) , button )
CALLEE	61:1	61:1	6	gnt_box_add_widget
LEAF_NODE	61:1	61:1	7	gnt_box_add_widget
LEAF_NODE	61:19	61:19	6	(
ARGUMENT	61:20	61:20	6	GNT_BOX ( box )
FUNCTION_CALL	61:20	61:31	7	GNT_BOX ( box )
CALLEE	61:20	61:20	8	GNT_BOX
LEAF_NODE	61:20	61:20	9	GNT_BOX
LEAF_NODE	61:27	61:27	8	(
ARGUMENT	61:28	61:28	8	box
FIELD	61:28	61:28	9	box
LEAF_NODE	61:28	61:28	10	box
LEAF_NODE	61:31	61:31	8	)
LEAF_NODE	61:32	61:32	6	,
ARGUMENT	61:34	61:34	6	button
FIELD	61:34	61:34	7	button
LEAF_NODE	61:34	61:34	8	button
LEAF_NODE	61:40	61:40	6	)
LEAF_NODE	61:41	61:41	4	;
EXPR_STATEMENT	62:1	62:67	3	gnt_util_set_trigger_widget ( GNT_WIDGET ( tree ) , GNT_KEY_INS , button ) ;
EXPR	62:1	62:1	4	gnt_util_set_trigger_widget ( GNT_WIDGET ( tree ) , GNT_KEY_INS , button )
FUNCTION_CALL	62:1	62:66	5	gnt_util_set_trigger_widget ( GNT_WIDGET ( tree ) , GNT_KEY_INS , button )
CALLEE	62:1	62:1	6	gnt_util_set_trigger_widget
LEAF_NODE	62:1	62:1	7	gnt_util_set_trigger_widget
LEAF_NODE	62:28	62:28	6	(
ARGUMENT	62:29	62:29	6	GNT_WIDGET ( tree )
FUNCTION_CALL	62:29	62:44	7	GNT_WIDGET ( tree )
CALLEE	62:29	62:29	8	GNT_WIDGET
LEAF_NODE	62:29	62:29	9	GNT_WIDGET
LEAF_NODE	62:39	62:39	8	(
ARGUMENT	62:40	62:40	8	tree
FIELD	62:40	62:40	9	tree
LEAF_NODE	62:40	62:40	10	tree
LEAF_NODE	62:44	62:44	8	)
LEAF_NODE	62:45	62:45	6	,
ARGUMENT	62:47	62:47	6	GNT_KEY_INS
FIELD	62:47	62:47	7	GNT_KEY_INS
LEAF_NODE	62:47	62:47	8	GNT_KEY_INS
LEAF_NODE	62:58	62:58	6	,
ARGUMENT	62:60	62:60	6	button
FIELD	62:60	62:60	7	button
LEAF_NODE	62:60	62:60	8	button
LEAF_NODE	62:66	62:66	6	)
LEAF_NODE	62:67	62:67	4	;
EXPR_STATEMENT	63:1	63:84	3	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( install_plugin_cb ) , NULL ) ;
EXPR	63:1	63:1	4	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( install_plugin_cb ) , NULL )
FUNCTION_CALL	63:1	63:83	5	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( install_plugin_cb ) , NULL )
CALLEE	63:1	63:1	6	g_signal_connect
LEAF_NODE	63:1	63:1	7	g_signal_connect
LEAF_NODE	63:17	63:17	6	(
ARGUMENT	63:18	63:18	6	G_OBJECT ( button )
FUNCTION_CALL	63:18	63:33	7	G_OBJECT ( button )
CALLEE	63:18	63:18	8	G_OBJECT
LEAF_NODE	63:18	63:18	9	G_OBJECT
LEAF_NODE	63:26	63:26	8	(
ARGUMENT	63:27	63:27	8	button
FIELD	63:27	63:27	9	button
LEAF_NODE	63:27	63:27	10	button
LEAF_NODE	63:33	63:33	8	)
LEAF_NODE	63:34	63:34	6	,
ARGUMENT	63:36	63:36	6	"activate"
FIELD	63:36	63:36	7	"activate"
LEAF_NODE	63:36	63:36	8	"activate"
LEAF_NODE	63:46	63:46	6	,
ARGUMENT	63:48	63:48	6	G_CALLBACK ( install_plugin_cb )
FUNCTION_CALL	63:48	63:76	7	G_CALLBACK ( install_plugin_cb )
CALLEE	63:48	63:48	8	G_CALLBACK
LEAF_NODE	63:48	63:48	9	G_CALLBACK
LEAF_NODE	63:58	63:58	8	(
ARGUMENT	63:59	63:59	8	install_plugin_cb
FIELD	63:59	63:59	9	install_plugin_cb
LEAF_NODE	63:59	63:59	10	install_plugin_cb
LEAF_NODE	63:76	63:76	8	)
LEAF_NODE	63:77	63:77	6	,
ARGUMENT	63:79	63:79	6	NULL
FIELD	63:79	63:79	7	NULL
LEAF_NODE	63:79	63:79	8	NULL
LEAF_NODE	63:83	63:83	6	)
LEAF_NODE	63:84	63:84	4	;
EXPR_STATEMENT	64:1	64:36	3	button = gnt_button_new ( _ ( "Close" ) ) ;
EXPR	64:1	64:1	4	button = gnt_button_new ( _ ( "Close" ) )
ASSIGN	64:1	64:10	5	button = gnt_button_new ( _ ( "Close" ) )
LVAL	64:1	64:1	6	button
FIELD	64:1	64:1	7	button
LEAF_NODE	64:1	64:1	8	button
ASSIGN_OP	64:8	64:8	6	=
LEAF_NODE	64:8	64:8	7	=
RVAL	64:10	64:10	6	gnt_button_new ( _ ( "Close" ) )
FUNCTION_CALL	64:10	64:35	7	gnt_button_new ( _ ( "Close" ) )
CALLEE	64:10	64:10	8	gnt_button_new
LEAF_NODE	64:10	64:10	9	gnt_button_new
LEAF_NODE	64:24	64:24	8	(
ARGUMENT	64:25	64:25	8	_ ( "Close" )
FUNCTION_CALL	64:25	64:34	9	_ ( "Close" )
CALLEE	64:25	64:25	10	_
LEAF_NODE	64:25	64:25	11	_
LEAF_NODE	64:26	64:26	10	(
ARGUMENT	64:27	64:27	10	"Close"
FIELD	64:27	64:27	11	"Close"
LEAF_NODE	64:27	64:27	12	"Close"
LEAF_NODE	64:34	64:34	10	)
LEAF_NODE	64:35	64:35	8	)
LEAF_NODE	64:36	64:36	4	;
EXPR_STATEMENT	65:1	65:41	3	gnt_box_add_widget ( GNT_BOX ( box ) , button ) ;
EXPR	65:1	65:1	4	gnt_box_add_widget ( GNT_BOX ( box ) , button )
FUNCTION_CALL	65:1	65:40	5	gnt_box_add_widget ( GNT_BOX ( box ) , button )
CALLEE	65:1	65:1	6	gnt_box_add_widget
LEAF_NODE	65:1	65:1	7	gnt_box_add_widget
LEAF_NODE	65:19	65:19	6	(
ARGUMENT	65:20	65:20	6	GNT_BOX ( box )
FUNCTION_CALL	65:20	65:31	7	GNT_BOX ( box )
CALLEE	65:20	65:20	8	GNT_BOX
LEAF_NODE	65:20	65:20	9	GNT_BOX
LEAF_NODE	65:27	65:27	8	(
ARGUMENT	65:28	65:28	8	box
FIELD	65:28	65:28	9	box
LEAF_NODE	65:28	65:28	10	box
LEAF_NODE	65:31	65:31	8	)
LEAF_NODE	65:32	65:32	6	,
ARGUMENT	65:34	65:34	6	button
FIELD	65:34	65:34	7	button
LEAF_NODE	65:34	65:34	8	button
LEAF_NODE	65:40	65:40	6	)
LEAF_NODE	65:41	65:41	4	;
EXPR_STATEMENT	66:1	67:42	3	g_signal_connect_swapped ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( gnt_widget_destroy ) , window ) ;
EXPR	66:1	66:1	4	g_signal_connect_swapped ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( gnt_widget_destroy ) , window )
FUNCTION_CALL	66:1	67:41	5	g_signal_connect_swapped ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( gnt_widget_destroy ) , window )
CALLEE	66:1	66:1	6	g_signal_connect_swapped
LEAF_NODE	66:1	66:1	7	g_signal_connect_swapped
LEAF_NODE	66:25	66:25	6	(
ARGUMENT	66:26	66:26	6	G_OBJECT ( button )
FUNCTION_CALL	66:26	66:41	7	G_OBJECT ( button )
CALLEE	66:26	66:26	8	G_OBJECT
LEAF_NODE	66:26	66:26	9	G_OBJECT
LEAF_NODE	66:34	66:34	8	(
ARGUMENT	66:35	66:35	8	button
FIELD	66:35	66:35	9	button
LEAF_NODE	66:35	66:35	10	button
LEAF_NODE	66:41	66:41	8	)
LEAF_NODE	66:42	66:42	6	,
ARGUMENT	66:44	66:44	6	"activate"
FIELD	66:44	66:44	7	"activate"
LEAF_NODE	66:44	66:44	8	"activate"
LEAF_NODE	66:54	66:54	6	,
ARGUMENT	67:3	67:3	6	G_CALLBACK ( gnt_widget_destroy )
FUNCTION_CALL	67:3	67:32	7	G_CALLBACK ( gnt_widget_destroy )
CALLEE	67:3	67:3	8	G_CALLBACK
LEAF_NODE	67:3	67:3	9	G_CALLBACK
LEAF_NODE	67:13	67:13	8	(
ARGUMENT	67:14	67:14	8	gnt_widget_destroy
FIELD	67:14	67:14	9	gnt_widget_destroy
LEAF_NODE	67:14	67:14	10	gnt_widget_destroy
LEAF_NODE	67:32	67:32	8	)
LEAF_NODE	67:33	67:33	6	,
ARGUMENT	67:35	67:35	6	window
FIELD	67:35	67:35	7	window
LEAF_NODE	67:35	67:35	8	window
LEAF_NODE	67:41	67:41	6	)
LEAF_NODE	67:42	67:42	4	;
EXPR_STATEMENT	68:1	68:62	3	plugins . conf = button = gnt_button_new ( _ ( "Configure Plugin" ) ) ;
EXPR	68:1	68:1	4	plugins . conf = button = gnt_button_new ( _ ( "Configure Plugin" ) )
ASSIGN	68:1	68:16	5	plugins . conf = button = gnt_button_new ( _ ( "Configure Plugin" ) )
LVAL	68:1	68:1	6	plugins . conf
FIELD	68:1	68:9	7	plugins . conf
LEAF_NODE	68:1	68:1	8	plugins
LEAF_NODE	68:8	68:8	8	.
LEAF_NODE	68:9	68:9	8	conf
ASSIGN_OP	68:14	68:14	6	=
LEAF_NODE	68:14	68:14	7	=
RVAL	68:16	68:16	6	button = gnt_button_new ( _ ( "Configure Plugin" ) )
ASSIGN	68:16	68:25	7	button = gnt_button_new ( _ ( "Configure Plugin" ) )
LVAL	68:16	68:16	8	button
FIELD	68:16	68:16	9	button
LEAF_NODE	68:16	68:16	10	button
ASSIGN_OP	68:23	68:23	8	=
LEAF_NODE	68:23	68:23	9	=
RVAL	68:25	68:25	8	gnt_button_new ( _ ( "Configure Plugin" ) )
FUNCTION_CALL	68:25	68:61	9	gnt_button_new ( _ ( "Configure Plugin" ) )
CALLEE	68:25	68:25	10	gnt_button_new
LEAF_NODE	68:25	68:25	11	gnt_button_new
LEAF_NODE	68:39	68:39	10	(
ARGUMENT	68:40	68:40	10	_ ( "Configure Plugin" )
FUNCTION_CALL	68:40	68:60	11	_ ( "Configure Plugin" )
CALLEE	68:40	68:40	12	_
LEAF_NODE	68:40	68:40	13	_
LEAF_NODE	68:41	68:41	12	(
ARGUMENT	68:42	68:42	12	"Configure Plugin"
FIELD	68:42	68:42	13	"Configure Plugin"
LEAF_NODE	68:42	68:42	14	"Configure Plugin"
LEAF_NODE	68:60	68:60	12	)
LEAF_NODE	68:61	68:61	10	)
LEAF_NODE	68:62	68:62	4	;
EXPR_STATEMENT	69:1	69:41	3	gnt_box_add_widget ( GNT_BOX ( box ) , button ) ;
EXPR	69:1	69:1	4	gnt_box_add_widget ( GNT_BOX ( box ) , button )
FUNCTION_CALL	69:1	69:40	5	gnt_box_add_widget ( GNT_BOX ( box ) , button )
CALLEE	69:1	69:1	6	gnt_box_add_widget
LEAF_NODE	69:1	69:1	7	gnt_box_add_widget
LEAF_NODE	69:19	69:19	6	(
ARGUMENT	69:20	69:20	6	GNT_BOX ( box )
FUNCTION_CALL	69:20	69:31	7	GNT_BOX ( box )
CALLEE	69:20	69:20	8	GNT_BOX
LEAF_NODE	69:20	69:20	9	GNT_BOX
LEAF_NODE	69:27	69:27	8	(
ARGUMENT	69:28	69:28	8	box
FIELD	69:28	69:28	9	box
LEAF_NODE	69:28	69:28	10	box
LEAF_NODE	69:31	69:31	8	)
LEAF_NODE	69:32	69:32	6	,
ARGUMENT	69:34	69:34	6	button
FIELD	69:34	69:34	7	button
LEAF_NODE	69:34	69:34	8	button
LEAF_NODE	69:40	69:40	6	)
LEAF_NODE	69:41	69:41	4	;
EXPR_STATEMENT	70:1	70:86	3	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( configure_plugin_cb ) , NULL ) ;
EXPR	70:1	70:1	4	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( configure_plugin_cb ) , NULL )
FUNCTION_CALL	70:1	70:85	5	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( configure_plugin_cb ) , NULL )
CALLEE	70:1	70:1	6	g_signal_connect
LEAF_NODE	70:1	70:1	7	g_signal_connect
LEAF_NODE	70:17	70:17	6	(
ARGUMENT	70:18	70:18	6	G_OBJECT ( button )
FUNCTION_CALL	70:18	70:33	7	G_OBJECT ( button )
CALLEE	70:18	70:18	8	G_OBJECT
LEAF_NODE	70:18	70:18	9	G_OBJECT
LEAF_NODE	70:26	70:26	8	(
ARGUMENT	70:27	70:27	8	button
FIELD	70:27	70:27	9	button
LEAF_NODE	70:27	70:27	10	button
LEAF_NODE	70:33	70:33	8	)
LEAF_NODE	70:34	70:34	6	,
ARGUMENT	70:36	70:36	6	"activate"
FIELD	70:36	70:36	7	"activate"
LEAF_NODE	70:36	70:36	8	"activate"
LEAF_NODE	70:46	70:46	6	,
ARGUMENT	70:48	70:48	6	G_CALLBACK ( configure_plugin_cb )
FUNCTION_CALL	70:48	70:78	7	G_CALLBACK ( configure_plugin_cb )
CALLEE	70:48	70:48	8	G_CALLBACK
LEAF_NODE	70:48	70:48	9	G_CALLBACK
LEAF_NODE	70:58	70:58	8	(
ARGUMENT	70:59	70:59	8	configure_plugin_cb
FIELD	70:59	70:59	9	configure_plugin_cb
LEAF_NODE	70:59	70:59	10	configure_plugin_cb
LEAF_NODE	70:78	70:78	8	)
LEAF_NODE	70:79	70:79	6	,
ARGUMENT	70:81	70:81	6	NULL
FIELD	70:81	70:81	7	NULL
LEAF_NODE	70:81	70:81	8	NULL
LEAF_NODE	70:85	70:85	6	)
LEAF_NODE	70:86	70:86	4	;
EXPR_STATEMENT	71:1	71:85	3	g_signal_connect ( G_OBJECT ( window ) , "destroy" , G_CALLBACK ( reset_plugin_window ) , NULL ) ;
EXPR	71:1	71:1	4	g_signal_connect ( G_OBJECT ( window ) , "destroy" , G_CALLBACK ( reset_plugin_window ) , NULL )
FUNCTION_CALL	71:1	71:84	5	g_signal_connect ( G_OBJECT ( window ) , "destroy" , G_CALLBACK ( reset_plugin_window ) , NULL )
CALLEE	71:1	71:1	6	g_signal_connect
LEAF_NODE	71:1	71:1	7	g_signal_connect
LEAF_NODE	71:17	71:17	6	(
ARGUMENT	71:18	71:18	6	G_OBJECT ( window )
FUNCTION_CALL	71:18	71:33	7	G_OBJECT ( window )
CALLEE	71:18	71:18	8	G_OBJECT
LEAF_NODE	71:18	71:18	9	G_OBJECT
LEAF_NODE	71:26	71:26	8	(
ARGUMENT	71:27	71:27	8	window
FIELD	71:27	71:27	9	window
LEAF_NODE	71:27	71:27	10	window
LEAF_NODE	71:33	71:33	8	)
LEAF_NODE	71:34	71:34	6	,
ARGUMENT	71:36	71:36	6	"destroy"
FIELD	71:36	71:36	7	"destroy"
LEAF_NODE	71:36	71:36	8	"destroy"
LEAF_NODE	71:45	71:45	6	,
ARGUMENT	71:47	71:47	6	G_CALLBACK ( reset_plugin_window )
FUNCTION_CALL	71:47	71:77	7	G_CALLBACK ( reset_plugin_window )
CALLEE	71:47	71:47	8	G_CALLBACK
LEAF_NODE	71:47	71:47	9	G_CALLBACK
LEAF_NODE	71:57	71:57	8	(
ARGUMENT	71:58	71:58	8	reset_plugin_window
FIELD	71:58	71:58	9	reset_plugin_window
LEAF_NODE	71:58	71:58	10	reset_plugin_window
LEAF_NODE	71:77	71:77	8	)
LEAF_NODE	71:78	71:78	6	,
ARGUMENT	71:80	71:80	6	NULL
FIELD	71:80	71:80	7	NULL
LEAF_NODE	71:80	71:80	8	NULL
LEAF_NODE	71:84	71:84	6	)
LEAF_NODE	71:85	71:85	4	;
EXPR_STATEMENT	72:1	72:24	3	gnt_widget_show ( window ) ;
EXPR	72:1	72:1	4	gnt_widget_show ( window )
FUNCTION_CALL	72:1	72:23	5	gnt_widget_show ( window )
CALLEE	72:1	72:1	6	gnt_widget_show
LEAF_NODE	72:1	72:1	7	gnt_widget_show
LEAF_NODE	72:16	72:16	6	(
ARGUMENT	72:17	72:17	6	window
FIELD	72:17	72:17	7	window
LEAF_NODE	72:17	72:17	8	window
LEAF_NODE	72:23	72:23	6	)
LEAF_NODE	72:24	72:24	4	;
EXPR_STATEMENT	73:1	73:64	3	decide_conf_button ( gnt_tree_get_selection_data ( GNT_TREE ( tree ) ) ) ;
EXPR	73:1	73:1	4	decide_conf_button ( gnt_tree_get_selection_data ( GNT_TREE ( tree ) ) )
FUNCTION_CALL	73:1	73:63	5	decide_conf_button ( gnt_tree_get_selection_data ( GNT_TREE ( tree ) ) )
CALLEE	73:1	73:1	6	decide_conf_button
LEAF_NODE	73:1	73:1	7	decide_conf_button
LEAF_NODE	73:19	73:19	6	(
ARGUMENT	73:20	73:20	6	gnt_tree_get_selection_data ( GNT_TREE ( tree ) )
FUNCTION_CALL	73:20	73:62	7	gnt_tree_get_selection_data ( GNT_TREE ( tree ) )
CALLEE	73:20	73:20	8	gnt_tree_get_selection_data
LEAF_NODE	73:20	73:20	9	gnt_tree_get_selection_data
LEAF_NODE	73:47	73:47	8	(
ARGUMENT	73:48	73:48	8	GNT_TREE ( tree )
FUNCTION_CALL	73:48	73:61	9	GNT_TREE ( tree )
CALLEE	73:48	73:48	10	GNT_TREE
LEAF_NODE	73:48	73:48	11	GNT_TREE
LEAF_NODE	73:56	73:56	10	(
ARGUMENT	73:57	73:57	10	tree
FIELD	73:57	73:57	11	tree
LEAF_NODE	73:57	73:57	12	tree
LEAF_NODE	73:61	73:61	10	)
LEAF_NODE	73:62	73:62	8	)
LEAF_NODE	73:63	73:63	6	)
LEAF_NODE	73:64	73:64	4	;
LEAF_NODE	74:0	74:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	free_auto_recon
LEAF_NODE	2:0	2:0	3	free_auto_recon
PARAMETER_LIST	2:15	2:29	2	( gpointer data )
LEAF_NODE	2:15	2:15	3	(
PARAMETER_DECL	2:16	2:25	3	gpointer data
TYPE	2:16	2:16	4	gpointer
TYPE_NAME	2:16	2:16	5	gpointer
LEAF_NODE	2:16	2:16	6	gpointer
NAME	2:25	2:25	4	data
LEAF_NODE	2:25	2:25	5	data
LEAF_NODE	2:29	2:29	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:29	3	PidginAutoRecon * info ; info = data ;
VAR_DECL	4:1	4:18	4	PidginAutoRecon * info ; info = data
TYPE	4:1	4:17	5	PidginAutoRecon *
TYPE_NAME	4:1	4:1	6	PidginAutoRecon
LEAF_NODE	4:1	4:1	7	PidginAutoRecon
POINTER	4:17	4:17	6	*
LEAF_NODE	4:17	4:17	7	*
NAME	4:18	4:18	5	info
LEAF_NODE	4:18	4:18	6	info
LEAF_NODE	0:0	0:0	5	;
INIT	4:18	4:18	5	info = data
ASSIGN	4:18	4:25	6	info = data
LVAL	4:18	4:18	7	info
NAME	4:18	4:18	8	info
LEAF_NODE	4:18	4:18	9	info
ASSIGN_OP	4:23	4:23	7	=
LEAF_NODE	4:23	4:23	8	=
RVAL	4:25	4:25	7	data
FIELD	4:25	4:25	8	data
LEAF_NODE	4:25	4:25	9	data
LEAF_NODE	4:29	4:29	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	info -> timeout != 0
EXPR	5:5	5:22	5	info -> timeout != 0
FIELD	5:5	5:11	6	info -> timeout
LEAF_NODE	5:5	5:5	7	info
LEAF_NODE	5:9	5:9	7	->
LEAF_NODE	5:11	5:11	7	timeout
EQ_OPERATOR	5:19	5:19	6	!=
LEAF_NODE	5:19	5:19	7	!=
FIELD	5:22	5:22	6	0
LEAF_NODE	5:22	5:22	7	0
LEAF_NODE	5:23	5:23	4	)
STATEMENTS	6:2	6:2	4	
EXPR_STATEMENT	6:2	6:32	5	g_source_remove ( info -> timeout ) ;
EXPR	6:2	6:2	6	g_source_remove ( info -> timeout )
FUNCTION_CALL	6:2	6:31	7	g_source_remove ( info -> timeout )
CALLEE	6:2	6:2	8	g_source_remove
LEAF_NODE	6:2	6:2	9	g_source_remove
LEAF_NODE	6:17	6:17	8	(
ARGUMENT	6:18	6:18	8	info -> timeout
FIELD	6:18	6:24	9	info -> timeout
LEAF_NODE	6:18	6:18	10	info
LEAF_NODE	6:22	6:22	10	->
LEAF_NODE	6:24	6:24	10	timeout
LEAF_NODE	6:31	6:31	8	)
LEAF_NODE	6:32	6:32	6	;
EXPR_STATEMENT	7:1	7:13	3	g_free ( info ) ;
EXPR	7:1	7:1	4	g_free ( info )
FUNCTION_CALL	7:1	7:12	5	g_free ( info )
CALLEE	7:1	7:1	6	g_free
LEAF_NODE	7:1	7:1	7	g_free
LEAF_NODE	7:7	7:7	6	(
ARGUMENT	7:8	7:8	6	info
FIELD	7:8	7:8	7	info
LEAF_NODE	7:8	7:8	8	info
LEAF_NODE	7:12	7:12	6	)
LEAF_NODE	7:13	7:13	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	10:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	ggp_action_buddylist_load
LEAF_NODE	2:12	2:12	3	ggp_action_buddylist_load
PARAMETER_LIST	2:37	2:64	2	( PurplePluginAction * action )
LEAF_NODE	2:37	2:37	3	(
PARAMETER_DECL	2:38	2:58	3	PurplePluginAction * action
TYPE	2:38	2:57	4	PurplePluginAction *
TYPE_NAME	2:38	2:38	5	PurplePluginAction
LEAF_NODE	2:38	2:38	6	PurplePluginAction
POINTER	2:57	2:57	5	*
LEAF_NODE	2:57	2:57	6	*
NAME	2:58	2:58	4	action
LEAF_NODE	2:58	2:58	5	action
LEAF_NODE	2:64	2:64	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:59	3	PurpleConnection * gc ; gc = ( PurpleConnection * ) action -> context ;
VAR_DECL	4:1	4:19	4	PurpleConnection * gc ; gc = ( PurpleConnection * ) action -> context
TYPE	4:1	4:18	5	PurpleConnection *
TYPE_NAME	4:1	4:1	6	PurpleConnection
LEAF_NODE	4:1	4:1	7	PurpleConnection
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	gc
LEAF_NODE	4:19	4:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	4:19	4:19	5	gc = ( PurpleConnection * ) action -> context
ASSIGN	4:19	4:24	6	gc = ( PurpleConnection * ) action -> context
LVAL	4:19	4:19	7	gc
NAME	4:19	4:19	8	gc
LEAF_NODE	4:19	4:19	9	gc
ASSIGN_OP	4:22	4:22	7	=
LEAF_NODE	4:22	4:22	8	=
RVAL	4:24	4:44	7	( PurpleConnection * ) action -> context
LEAF_NODE	4:24	4:24	8	(
TYPE_NAME	4:25	4:25	8	PurpleConnection
LEAF_NODE	4:25	4:25	9	PurpleConnection
LEAF_NODE	4:42	4:42	8	*
LEAF_NODE	4:43	4:43	8	)
FIELD	4:44	4:52	8	action -> context
LEAF_NODE	4:44	4:44	9	action
LEAF_NODE	4:50	4:50	9	->
LEAF_NODE	4:52	4:52	9	context
LEAF_NODE	4:59	4:59	4	;
EXPR_STATEMENT	5:1	9:6	3	purple_request_file ( action , _ ( "Load buddylist from file..." ) , NULL , FALSE , G_CALLBACK ( ggp_callback_buddylist_load_ok ) , NULL , purple_connection_get_account ( gc ) , NULL , NULL , gc ) ;
EXPR	5:1	5:1	4	purple_request_file ( action , _ ( "Load buddylist from file..." ) , NULL , FALSE , G_CALLBACK ( ggp_callback_buddylist_load_ok ) , NULL , purple_connection_get_account ( gc ) , NULL , NULL , gc )
FUNCTION_CALL	5:1	9:5	5	purple_request_file ( action , _ ( "Load buddylist from file..." ) , NULL , FALSE , G_CALLBACK ( ggp_callback_buddylist_load_ok ) , NULL , purple_connection_get_account ( gc ) , NULL , NULL , gc )
CALLEE	5:1	5:1	6	purple_request_file
LEAF_NODE	5:1	5:1	7	purple_request_file
LEAF_NODE	5:20	5:20	6	(
ARGUMENT	5:21	5:21	6	action
FIELD	5:21	5:21	7	action
LEAF_NODE	5:21	5:21	8	action
LEAF_NODE	5:27	5:27	6	,
ARGUMENT	5:29	5:29	6	_ ( "Load buddylist from file..." )
FUNCTION_CALL	5:29	5:60	7	_ ( "Load buddylist from file..." )
CALLEE	5:29	5:29	8	_
LEAF_NODE	5:29	5:29	9	_
LEAF_NODE	5:30	5:30	8	(
ARGUMENT	5:31	5:31	8	"Load buddylist from file..."
FIELD	5:31	5:31	9	"Load buddylist from file..."
LEAF_NODE	5:31	5:31	10	"Load buddylist from file..."
LEAF_NODE	5:60	5:60	8	)
LEAF_NODE	5:61	5:61	6	,
ARGUMENT	5:63	5:63	6	NULL
FIELD	5:63	5:63	7	NULL
LEAF_NODE	5:63	5:63	8	NULL
LEAF_NODE	5:67	5:67	6	,
ARGUMENT	6:3	6:3	6	FALSE
FIELD	6:3	6:3	7	FALSE
LEAF_NODE	6:3	6:3	8	FALSE
LEAF_NODE	6:8	6:8	6	,
ARGUMENT	7:3	7:3	6	G_CALLBACK ( ggp_callback_buddylist_load_ok )
FUNCTION_CALL	7:3	7:44	7	G_CALLBACK ( ggp_callback_buddylist_load_ok )
CALLEE	7:3	7:3	8	G_CALLBACK
LEAF_NODE	7:3	7:3	9	G_CALLBACK
LEAF_NODE	7:13	7:13	8	(
ARGUMENT	7:14	7:14	8	ggp_callback_buddylist_load_ok
FIELD	7:14	7:14	9	ggp_callback_buddylist_load_ok
LEAF_NODE	7:14	7:14	10	ggp_callback_buddylist_load_ok
LEAF_NODE	7:44	7:44	8	)
LEAF_NODE	7:45	7:45	6	,
ARGUMENT	7:47	7:47	6	NULL
FIELD	7:47	7:47	7	NULL
LEAF_NODE	7:47	7:47	8	NULL
LEAF_NODE	7:51	7:51	6	,
ARGUMENT	8:3	8:3	6	purple_connection_get_account ( gc )
FUNCTION_CALL	8:3	8:35	7	purple_connection_get_account ( gc )
CALLEE	8:3	8:3	8	purple_connection_get_account
LEAF_NODE	8:3	8:3	9	purple_connection_get_account
LEAF_NODE	8:32	8:32	8	(
ARGUMENT	8:33	8:33	8	gc
FIELD	8:33	8:33	9	gc
LEAF_NODE	8:33	8:33	10	gc
LEAF_NODE	8:35	8:35	8	)
LEAF_NODE	8:36	8:36	6	,
ARGUMENT	8:38	8:38	6	NULL
FIELD	8:38	8:38	7	NULL
LEAF_NODE	8:38	8:38	8	NULL
LEAF_NODE	8:42	8:42	6	,
ARGUMENT	8:44	8:44	6	NULL
FIELD	8:44	8:44	7	NULL
LEAF_NODE	8:44	8:44	8	NULL
LEAF_NODE	8:48	8:48	6	,
ARGUMENT	9:3	9:3	6	gc
FIELD	9:3	9:3	7	gc
LEAF_NODE	9:3	9:3	8	gc
LEAF_NODE	9:5	9:5	6	)
LEAF_NODE	9:6	9:6	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	des3_set_iv
LEAF_NODE	2:0	2:0	3	des3_set_iv
PARAMETER_LIST	2:11	2:64	2	( PurpleCipherContext * context , guchar * iv , size_t len )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:33	3	PurpleCipherContext * context
TYPE	2:12	2:32	4	PurpleCipherContext *
TYPE_NAME	2:12	2:12	5	PurpleCipherContext
LEAF_NODE	2:12	2:12	6	PurpleCipherContext
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	context
LEAF_NODE	2:33	2:33	5	context
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:50	3	guchar * iv
TYPE	2:42	2:49	4	guchar *
TYPE_NAME	2:42	2:42	5	guchar
LEAF_NODE	2:42	2:42	6	guchar
POINTER	2:49	2:49	5	*
LEAF_NODE	2:49	2:49	6	*
NAME	2:50	2:50	4	iv
LEAF_NODE	2:50	2:50	5	iv
LEAF_NODE	2:52	2:52	3	,
PARAMETER_DECL	2:54	2:61	3	size_t len
TYPE	2:54	2:54	4	size_t
TYPE_NAME	2:54	2:54	5	size_t
LEAF_NODE	2:54	2:54	6	size_t
NAME	2:61	2:61	4	len
LEAF_NODE	2:61	2:61	5	len
LEAF_NODE	2:64	2:64	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:22	3	struct _des3_ctx * ctx ;
VAR_DECL	4:1	4:19	4	struct _des3_ctx * ctx
TYPE	4:1	4:18	5	struct _des3_ctx *
TYPE_NAME	4:1	4:8	6	struct _des3_ctx
LEAF_NODE	4:1	4:1	7	struct
LEAF_NODE	4:8	4:8	7	_des3_ctx
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	ctx
LEAF_NODE	4:19	4:19	6	ctx
LEAF_NODE	4:22	4:22	4	;
EXPR_STATEMENT	5:1	5:27	3	g_return_if_fail ( len == 8 ) ;
EXPR	5:1	5:1	4	g_return_if_fail ( len == 8 )
FUNCTION_CALL	5:1	5:26	5	g_return_if_fail ( len == 8 )
CALLEE	5:1	5:1	6	g_return_if_fail
LEAF_NODE	5:1	5:1	7	g_return_if_fail
LEAF_NODE	5:17	5:17	6	(
ARGUMENT	5:18	5:25	6	len == 8
FIELD	5:18	5:18	7	len
LEAF_NODE	5:18	5:18	8	len
EQ_OPERATOR	5:22	5:22	7	==
LEAF_NODE	5:22	5:22	8	==
FIELD	5:25	5:25	7	8
LEAF_NODE	5:25	5:25	8	8
LEAF_NODE	5:26	5:26	6	)
LEAF_NODE	5:27	5:27	4	;
EXPR_STATEMENT	6:1	6:46	3	ctx = purple_cipher_context_get_data ( context ) ;
EXPR	6:1	6:1	4	ctx = purple_cipher_context_get_data ( context )
ASSIGN	6:1	6:7	5	ctx = purple_cipher_context_get_data ( context )
LVAL	6:1	6:1	6	ctx
FIELD	6:1	6:1	7	ctx
LEAF_NODE	6:1	6:1	8	ctx
ASSIGN_OP	6:5	6:5	6	=
LEAF_NODE	6:5	6:5	7	=
RVAL	6:7	6:7	6	purple_cipher_context_get_data ( context )
FUNCTION_CALL	6:7	6:45	7	purple_cipher_context_get_data ( context )
CALLEE	6:7	6:7	8	purple_cipher_context_get_data
LEAF_NODE	6:7	6:7	9	purple_cipher_context_get_data
LEAF_NODE	6:37	6:37	8	(
ARGUMENT	6:38	6:38	8	context
FIELD	6:38	6:38	9	context
LEAF_NODE	6:38	6:38	10	context
LEAF_NODE	6:45	6:45	8	)
LEAF_NODE	6:46	6:46	4	;
EXPR_STATEMENT	7:1	7:25	3	memcpy ( ctx -> iv , iv , len ) ;
EXPR	7:1	7:1	4	memcpy ( ctx -> iv , iv , len )
FUNCTION_CALL	7:1	7:24	5	memcpy ( ctx -> iv , iv , len )
CALLEE	7:1	7:1	6	memcpy
LEAF_NODE	7:1	7:1	7	memcpy
LEAF_NODE	7:7	7:7	6	(
ARGUMENT	7:8	7:8	6	ctx -> iv
FIELD	7:8	7:13	7	ctx -> iv
LEAF_NODE	7:8	7:8	8	ctx
LEAF_NODE	7:11	7:11	8	->
LEAF_NODE	7:13	7:13	8	iv
LEAF_NODE	7:15	7:15	6	,
ARGUMENT	7:17	7:17	6	iv
FIELD	7:17	7:17	7	iv
LEAF_NODE	7:17	7:17	8	iv
LEAF_NODE	7:19	7:19	6	,
ARGUMENT	7:21	7:21	6	len
FIELD	7:21	7:21	7	len
LEAF_NODE	7:21	7:21	8	len
LEAF_NODE	7:24	7:24	6	)
LEAF_NODE	7:25	7:25	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	18:0	1	
RETURN_TYPE	1:0	1:13	2	static GList *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	GList
LEAF_NODE	1:7	1:7	4	GList
LEAF_NODE	1:13	1:13	3	*
FUNCTION_NAME	2:0	2:0	2	plugin_actions
LEAF_NODE	2:0	2:0	3	plugin_actions
PARAMETER_LIST	2:15	2:55	2	( PurplePlugin * plugin , gpointer context )
LEAF_NODE	2:15	2:15	3	(
PARAMETER_DECL	2:16	2:31	3	PurplePlugin * plugin
TYPE	2:16	2:29	4	PurplePlugin *
TYPE_NAME	2:16	2:16	5	PurplePlugin
LEAF_NODE	2:16	2:16	6	PurplePlugin
POINTER	2:29	2:29	5	*
LEAF_NODE	2:29	2:29	6	*
NAME	2:31	2:31	4	plugin
LEAF_NODE	2:31	2:31	5	plugin
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:48	3	gpointer context
TYPE	2:39	2:39	4	gpointer
TYPE_NAME	2:39	2:39	5	gpointer
LEAF_NODE	2:39	2:39	6	gpointer
NAME	2:48	2:48	4	context
LEAF_NODE	2:48	2:48	5	context
LEAF_NODE	2:55	2:55	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	8:1	17:1	2	
SIMPLE_DECL	8:1	8:19	3	GList * list ; list = NULL ;
VAR_DECL	8:1	8:8	4	GList * list ; list = NULL
TYPE	8:1	8:7	5	GList *
TYPE_NAME	8:1	8:1	6	GList
LEAF_NODE	8:1	8:1	7	GList
POINTER	8:7	8:7	6	*
LEAF_NODE	8:7	8:7	7	*
NAME	8:8	8:8	5	list
LEAF_NODE	8:8	8:8	6	list
LEAF_NODE	0:0	0:0	5	;
INIT	8:8	8:8	5	list = NULL
ASSIGN	8:8	8:15	6	list = NULL
LVAL	8:8	8:8	7	list
NAME	8:8	8:8	8	list
LEAF_NODE	8:8	8:8	9	list
ASSIGN_OP	8:13	8:13	7	=
LEAF_NODE	8:13	8:13	8	=
RVAL	8:15	8:15	7	NULL
FIELD	8:15	8:15	8	NULL
LEAF_NODE	8:15	8:15	9	NULL
LEAF_NODE	8:19	8:19	4	;
SIMPLE_DECL	9:1	9:34	3	PurplePluginAction * action ; action = NULL ;
VAR_DECL	9:1	9:21	4	PurplePluginAction * action ; action = NULL
TYPE	9:1	9:20	5	PurplePluginAction *
TYPE_NAME	9:1	9:1	6	PurplePluginAction
LEAF_NODE	9:1	9:1	7	PurplePluginAction
POINTER	9:20	9:20	6	*
LEAF_NODE	9:20	9:20	7	*
NAME	9:21	9:21	5	action
LEAF_NODE	9:21	9:21	6	action
LEAF_NODE	0:0	0:0	5	;
INIT	9:21	9:21	5	action = NULL
ASSIGN	9:21	9:30	6	action = NULL
LVAL	9:21	9:21	7	action
NAME	9:21	9:21	8	action
LEAF_NODE	9:21	9:21	9	action
ASSIGN_OP	9:28	9:28	7	=
LEAF_NODE	9:28	9:28	8	=
RVAL	9:30	9:30	7	NULL
FIELD	9:30	9:30	8	NULL
LEAF_NODE	9:30	9:30	9	NULL
LEAF_NODE	9:34	9:34	4	;
EXPR_STATEMENT	12:1	12:80	3	action = purple_plugin_action_new ( "Plugin Action Test" , plugin_action_test_cb ) ;
EXPR	12:1	12:1	4	action = purple_plugin_action_new ( "Plugin Action Test" , plugin_action_test_cb )
ASSIGN	12:1	12:10	5	action = purple_plugin_action_new ( "Plugin Action Test" , plugin_action_test_cb )
LVAL	12:1	12:1	6	action
FIELD	12:1	12:1	7	action
LEAF_NODE	12:1	12:1	8	action
ASSIGN_OP	12:8	12:8	6	=
LEAF_NODE	12:8	12:8	7	=
RVAL	12:10	12:10	6	purple_plugin_action_new ( "Plugin Action Test" , plugin_action_test_cb )
FUNCTION_CALL	12:10	12:79	7	purple_plugin_action_new ( "Plugin Action Test" , plugin_action_test_cb )
CALLEE	12:10	12:10	8	purple_plugin_action_new
LEAF_NODE	12:10	12:10	9	purple_plugin_action_new
LEAF_NODE	12:35	12:35	8	(
ARGUMENT	12:36	12:36	8	"Plugin Action Test"
FIELD	12:36	12:36	9	"Plugin Action Test"
LEAF_NODE	12:36	12:36	10	"Plugin Action Test"
LEAF_NODE	12:56	12:56	8	,
ARGUMENT	12:58	12:58	8	plugin_action_test_cb
FIELD	12:58	12:58	9	plugin_action_test_cb
LEAF_NODE	12:58	12:58	10	plugin_action_test_cb
LEAF_NODE	12:79	12:79	8	)
LEAF_NODE	12:80	12:80	4	;
EXPR_STATEMENT	15:1	15:36	3	list = g_list_append ( list , action ) ;
EXPR	15:1	15:1	4	list = g_list_append ( list , action )
ASSIGN	15:1	15:8	5	list = g_list_append ( list , action )
LVAL	15:1	15:1	6	list
FIELD	15:1	15:1	7	list
LEAF_NODE	15:1	15:1	8	list
ASSIGN_OP	15:6	15:6	6	=
LEAF_NODE	15:6	15:6	7	=
RVAL	15:8	15:8	6	g_list_append ( list , action )
FUNCTION_CALL	15:8	15:35	7	g_list_append ( list , action )
CALLEE	15:8	15:8	8	g_list_append
LEAF_NODE	15:8	15:8	9	g_list_append
LEAF_NODE	15:22	15:22	8	(
ARGUMENT	15:23	15:23	8	list
FIELD	15:23	15:23	9	list
LEAF_NODE	15:23	15:23	10	list
LEAF_NODE	15:27	15:27	8	,
ARGUMENT	15:29	15:29	8	action
FIELD	15:29	15:29	9	action
LEAF_NODE	15:29	15:29	10	action
LEAF_NODE	15:35	15:35	8	)
LEAF_NODE	15:36	15:36	4	;
JUMP_STATEMENT	17:1	17:12	3	return list ;
KEYWORD	17:1	17:1	4	return
LEAF_NODE	17:1	17:1	5	return
DESTINATION	17:8	17:8	4	list
EXPR	17:8	17:8	5	list
FIELD	17:8	17:8	6	list
LEAF_NODE	17:8	17:8	7	list
LEAF_NODE	17:12	17:12	4	;
LEAF_NODE	18:0	18:0	2	}

SOURCE_FILE	3:1	44:2	0	
SIMPLE_DECL	3:1	3:30	1	PurpleConnection * gc ; gc = od -> gc ;
VAR_DECL	3:1	3:19	2	PurpleConnection * gc ; gc = od -> gc
TYPE	3:1	3:18	3	PurpleConnection *
TYPE_NAME	3:1	3:1	4	PurpleConnection
LEAF_NODE	3:1	3:1	5	PurpleConnection
POINTER	3:18	3:18	4	*
LEAF_NODE	3:18	3:18	5	*
NAME	3:19	3:19	3	gc
LEAF_NODE	3:19	3:19	4	gc
LEAF_NODE	0:0	0:0	3	;
INIT	3:19	3:19	3	gc = od -> gc
ASSIGN	3:19	3:24	4	gc = od -> gc
LVAL	3:19	3:19	5	gc
NAME	3:19	3:19	6	gc
LEAF_NODE	3:19	3:19	7	gc
ASSIGN_OP	3:22	3:22	5	=
LEAF_NODE	3:22	3:22	6	=
RVAL	3:24	3:24	5	od -> gc
FIELD	3:24	3:28	6	od -> gc
LEAF_NODE	3:24	3:24	7	od
LEAF_NODE	3:26	3:26	7	->
LEAF_NODE	3:28	3:28	7	gc
LEAF_NODE	3:30	3:30	2	;
SIMPLE_DECL	4:1	4:11	1	va_list ap ;
VAR_DECL	4:1	4:9	2	va_list ap
TYPE	4:1	4:1	3	va_list
TYPE_NAME	4:1	4:1	4	va_list
LEAF_NODE	4:1	4:1	5	va_list
NAME	4:9	4:9	3	ap
LEAF_NODE	4:9	4:9	4	ap
LEAF_NODE	4:11	4:11	2	;
SIMPLE_DECL	5:1	5:19	1	guint16 perms , guint16 err ;
INIT_DECL_LIST	5:1	5:1	2	guint16 perms , guint16 err
VAR_DECL	5:1	5:9	3	guint16 perms
TYPE	5:1	5:1	4	guint16
TYPE_NAME	5:1	5:1	5	guint16
LEAF_NODE	5:1	5:1	6	guint16
NAME	5:9	5:9	4	perms
LEAF_NODE	5:9	5:9	5	perms
LEAF_NODE	5:14	5:14	3	,
VAR_DECL	5:1	5:16	3	guint16 err
TYPE	5:1	5:1	4	guint16
TYPE_NAME	5:1	5:1	5	guint16
LEAF_NODE	5:1	5:1	6	guint16
NAME	5:16	5:16	4	err
LEAF_NODE	5:16	5:16	5	err
LEAF_NODE	5:19	5:19	2	;
SIMPLE_DECL	6:1	6:23	1	char * url , char * bn , char * email ;
INIT_DECL_LIST	6:1	6:1	2	char * url , char * bn , char * email
VAR_DECL	6:1	6:7	3	char * url
TYPE	6:1	6:6	4	char *
TYPE_NAME	6:1	6:1	5	char
LEAF_NODE	6:1	6:1	6	char
POINTER	6:6	6:6	5	*
LEAF_NODE	6:6	6:6	6	*
NAME	6:7	6:7	4	url
LEAF_NODE	6:7	6:7	5	url
LEAF_NODE	6:10	6:10	3	,
INIT_DECL_LIST	6:1	6:1	3	char * bn , char * email
VAR_DECL	6:1	6:13	4	char * bn
TYPE	6:1	6:12	5	char *
TYPE_NAME	6:1	6:1	6	char
LEAF_NODE	6:1	6:1	7	char
POINTER	6:12	6:12	6	*
LEAF_NODE	6:12	6:12	7	*
NAME	6:13	6:13	5	bn
LEAF_NODE	6:13	6:13	6	bn
LEAF_NODE	6:15	6:15	4	,
VAR_DECL	6:1	6:18	4	char * email
TYPE	6:1	6:17	5	char *
TYPE_NAME	6:1	6:1	6	char
LEAF_NODE	6:1	6:1	7	char
POINTER	6:17	6:17	6	*
LEAF_NODE	6:17	6:17	7	*
NAME	6:18	6:18	5	email
LEAF_NODE	6:18	6:18	6	email
LEAF_NODE	6:23	6:23	2	;
SIMPLE_DECL	7:1	7:11	1	int change ;
VAR_DECL	7:1	7:5	2	int change
TYPE	7:1	7:1	3	int
TYPE_NAME	7:1	7:1	4	int
LEAF_NODE	7:1	7:1	5	int
NAME	7:5	7:5	3	change
LEAF_NODE	7:5	7:5	4	change
LEAF_NODE	7:11	7:11	2	;
SIMPLE_DECL	23:2	23:18	1	char * dialog_msg ;
VAR_DECL	23:2	23:8	2	char * dialog_msg
TYPE	23:2	23:7	3	char *
TYPE_NAME	23:2	23:2	4	char
LEAF_NODE	23:2	23:2	5	char
POINTER	23:7	23:7	4	*
LEAF_NODE	23:7	23:7	5	*
NAME	23:8	23:8	3	dialog_msg
LEAF_NODE	23:8	23:8	4	dialog_msg
LEAF_NODE	23:18	23:18	2	;
SIMPLE_DECL	44:2	45:79	1	char * dialog_msg ; dialog_msg = g_strdup_printf ( _ ( "The email address for %s is %s" ) , purple_account_get_username ( purple_connection_get_account ( gc ) ) , email ) ;
VAR_DECL	44:2	44:8	2	char * dialog_msg ; dialog_msg = g_strdup_printf ( _ ( "The email address for %s is %s" ) , purple_account_get_username ( purple_connection_get_account ( gc ) ) , email )
TYPE	44:2	44:7	3	char *
TYPE_NAME	44:2	44:2	4	char
LEAF_NODE	44:2	44:2	5	char
POINTER	44:7	44:7	4	*
LEAF_NODE	44:7	44:7	5	*
NAME	44:8	44:8	3	dialog_msg
LEAF_NODE	44:8	44:8	4	dialog_msg
LEAF_NODE	0:0	0:0	3	;
INIT	44:8	44:8	3	dialog_msg = g_strdup_printf ( _ ( "The email address for %s is %s" ) , purple_account_get_username ( purple_connection_get_account ( gc ) ) , email )
ASSIGN	44:8	44:21	4	dialog_msg = g_strdup_printf ( _ ( "The email address for %s is %s" ) , purple_account_get_username ( purple_connection_get_account ( gc ) ) , email )
LVAL	44:8	44:8	5	dialog_msg
NAME	44:8	44:8	6	dialog_msg
LEAF_NODE	44:8	44:8	7	dialog_msg
ASSIGN_OP	44:19	44:19	5	=
LEAF_NODE	44:19	44:19	6	=
RVAL	44:21	44:21	5	g_strdup_printf ( _ ( "The email address for %s is %s" ) , purple_account_get_username ( purple_connection_get_account ( gc ) ) , email )
FUNCTION_CALL	44:21	45:78	6	g_strdup_printf ( _ ( "The email address for %s is %s" ) , purple_account_get_username ( purple_connection_get_account ( gc ) ) , email )
CALLEE	44:21	44:21	7	g_strdup_printf
LEAF_NODE	44:21	44:21	8	g_strdup_printf
LEAF_NODE	44:36	44:36	7	(
ARGUMENT	44:37	44:37	7	_ ( "The email address for %s is %s" )
FUNCTION_CALL	44:37	44:71	8	_ ( "The email address for %s is %s" )
CALLEE	44:37	44:37	9	_
LEAF_NODE	44:37	44:37	10	_
LEAF_NODE	44:38	44:38	9	(
ARGUMENT	44:39	44:39	9	"The email address for %s is %s"
FIELD	44:39	44:39	10	"The email address for %s is %s"
LEAF_NODE	44:39	44:39	11	"The email address for %s is %s"
LEAF_NODE	44:71	44:71	9	)
LEAF_NODE	44:72	44:72	7	,
ARGUMENT	45:9	45:9	7	purple_account_get_username ( purple_connection_get_account ( gc ) )
FUNCTION_CALL	45:9	45:70	8	purple_account_get_username ( purple_connection_get_account ( gc ) )
CALLEE	45:9	45:9	9	purple_account_get_username
LEAF_NODE	45:9	45:9	10	purple_account_get_username
LEAF_NODE	45:36	45:36	9	(
ARGUMENT	45:37	45:37	9	purple_connection_get_account ( gc )
FUNCTION_CALL	45:37	45:69	10	purple_connection_get_account ( gc )
CALLEE	45:37	45:37	11	purple_connection_get_account
LEAF_NODE	45:37	45:37	12	purple_connection_get_account
LEAF_NODE	45:66	45:66	11	(
ARGUMENT	45:67	45:67	11	gc
FIELD	45:67	45:67	12	gc
LEAF_NODE	45:67	45:67	13	gc
LEAF_NODE	45:69	45:69	11	)
LEAF_NODE	45:70	45:70	9	)
LEAF_NODE	45:71	45:71	7	,
ARGUMENT	45:73	45:73	7	email
FIELD	45:73	45:73	8	email
LEAF_NODE	45:73	45:73	9	email
LEAF_NODE	45:78	45:78	7	)
LEAF_NODE	45:79	45:79	2	;

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	37:0	1	
RETURN_TYPE	1:0	1:13	2	static gchar *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gchar
LEAF_NODE	1:7	1:7	4	gchar
LEAF_NODE	1:13	1:13	3	*
FUNCTION_NAME	2:0	2:0	2	x509_common_name
LEAF_NODE	2:0	2:0	3	x509_common_name
PARAMETER_LIST	2:17	2:40	2	( PurpleCertificate * crt )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:37	3	PurpleCertificate * crt
TYPE	2:18	2:36	4	PurpleCertificate *
TYPE_NAME	2:18	2:18	5	PurpleCertificate
LEAF_NODE	2:18	2:18	6	PurpleCertificate
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	crt
LEAF_NODE	2:37	2:37	5	crt
LEAF_NODE	2:40	2:40	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	36:1	2	
SIMPLE_DECL	4:1	4:27	3	gnutls_x509_crt_t cert_dat ;
VAR_DECL	4:1	4:19	4	gnutls_x509_crt_t cert_dat
TYPE	4:1	4:1	5	gnutls_x509_crt_t
TYPE_NAME	4:1	4:1	6	gnutls_x509_crt_t
LEAF_NODE	4:1	4:1	7	gnutls_x509_crt_t
NAME	4:19	4:19	5	cert_dat
LEAF_NODE	4:19	4:19	6	cert_dat
LEAF_NODE	4:27	4:27	4	;
SIMPLE_DECL	5:1	5:17	3	gchar * cn ; cn = NULL ;
VAR_DECL	5:1	5:8	4	gchar * cn ; cn = NULL
TYPE	5:1	5:7	5	gchar *
TYPE_NAME	5:1	5:1	6	gchar
LEAF_NODE	5:1	5:1	7	gchar
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	cn
LEAF_NODE	5:8	5:8	6	cn
LEAF_NODE	0:0	0:0	5	;
INIT	5:8	5:8	5	cn = NULL
ASSIGN	5:8	5:13	6	cn = NULL
LVAL	5:8	5:8	7	cn
NAME	5:8	5:8	8	cn
LEAF_NODE	5:8	5:8	9	cn
ASSIGN_OP	5:11	5:11	7	=
LEAF_NODE	5:11	5:11	8	=
RVAL	5:13	5:13	7	NULL
FIELD	5:13	5:13	8	NULL
LEAF_NODE	5:13	5:13	9	NULL
LEAF_NODE	5:17	5:17	4	;
SIMPLE_DECL	6:1	6:15	3	size_t cn_size ;
VAR_DECL	6:1	6:8	4	size_t cn_size
TYPE	6:1	6:1	5	size_t
TYPE_NAME	6:1	6:1	6	size_t
LEAF_NODE	6:1	6:1	7	size_t
NAME	6:8	6:8	5	cn_size
LEAF_NODE	6:8	6:8	6	cn_size
LEAF_NODE	6:15	6:15	4	;
SIMPLE_DECL	7:1	7:8	3	int ret ;
VAR_DECL	7:1	7:5	4	int ret
TYPE	7:1	7:1	5	int
TYPE_NAME	7:1	7:1	6	int
LEAF_NODE	7:1	7:1	7	int
NAME	7:5	7:5	5	ret
LEAF_NODE	7:5	7:5	6	ret
LEAF_NODE	7:8	7:8	4	;
EXPR_STATEMENT	8:1	8:32	3	g_return_val_if_fail ( crt , NULL ) ;
EXPR	8:1	8:1	4	g_return_val_if_fail ( crt , NULL )
FUNCTION_CALL	8:1	8:31	5	g_return_val_if_fail ( crt , NULL )
CALLEE	8:1	8:1	6	g_return_val_if_fail
LEAF_NODE	8:1	8:1	7	g_return_val_if_fail
LEAF_NODE	8:21	8:21	6	(
ARGUMENT	8:22	8:22	6	crt
FIELD	8:22	8:22	7	crt
LEAF_NODE	8:22	8:22	8	crt
LEAF_NODE	8:25	8:25	6	,
ARGUMENT	8:27	8:27	6	NULL
FIELD	8:27	8:27	7	NULL
LEAF_NODE	8:27	8:27	8	NULL
LEAF_NODE	8:31	8:31	6	)
LEAF_NODE	8:32	8:32	4	;
EXPR_STATEMENT	9:1	9:56	3	g_return_val_if_fail ( crt -> scheme == & x509_gnutls , NULL ) ;
EXPR	9:1	9:1	4	g_return_val_if_fail ( crt -> scheme == & x509_gnutls , NULL )
FUNCTION_CALL	9:1	9:55	5	g_return_val_if_fail ( crt -> scheme == & x509_gnutls , NULL )
CALLEE	9:1	9:1	6	g_return_val_if_fail
LEAF_NODE	9:1	9:1	7	g_return_val_if_fail
LEAF_NODE	9:21	9:21	6	(
ARGUMENT	9:22	9:37	6	crt -> scheme == & x509_gnutls
FIELD	9:22	9:27	7	crt -> scheme
LEAF_NODE	9:22	9:22	8	crt
LEAF_NODE	9:25	9:25	8	->
LEAF_NODE	9:27	9:27	8	scheme
EQ_OPERATOR	9:34	9:34	7	==
LEAF_NODE	9:34	9:34	8	==
UNARY_EXPR	9:37	9:38	7	& x509_gnutls
UNARY_OPERATOR	9:37	9:37	8	&
LEAF_NODE	9:37	9:37	9	&
FIELD	9:38	9:38	8	x509_gnutls
LEAF_NODE	9:38	9:38	9	x509_gnutls
LEAF_NODE	9:49	9:49	6	,
ARGUMENT	9:51	9:51	6	NULL
FIELD	9:51	9:51	7	NULL
LEAF_NODE	9:51	9:51	8	NULL
LEAF_NODE	9:55	9:55	6	)
LEAF_NODE	9:56	9:56	4	;
EXPR_STATEMENT	10:1	10:37	3	cert_dat = X509_GET_GNUTLS_DATA ( crt ) ;
EXPR	10:1	10:1	4	cert_dat = X509_GET_GNUTLS_DATA ( crt )
ASSIGN	10:1	10:12	5	cert_dat = X509_GET_GNUTLS_DATA ( crt )
LVAL	10:1	10:1	6	cert_dat
FIELD	10:1	10:1	7	cert_dat
LEAF_NODE	10:1	10:1	8	cert_dat
ASSIGN_OP	10:10	10:10	6	=
LEAF_NODE	10:10	10:10	7	=
RVAL	10:12	10:12	6	X509_GET_GNUTLS_DATA ( crt )
FUNCTION_CALL	10:12	10:36	7	X509_GET_GNUTLS_DATA ( crt )
CALLEE	10:12	10:12	8	X509_GET_GNUTLS_DATA
LEAF_NODE	10:12	10:12	9	X509_GET_GNUTLS_DATA
LEAF_NODE	10:32	10:32	8	(
ARGUMENT	10:33	10:33	8	crt
FIELD	10:33	10:33	9	crt
LEAF_NODE	10:33	10:33	10	crt
LEAF_NODE	10:36	10:36	8	)
LEAF_NODE	10:37	10:37	4	;
EXPR_STATEMENT	14:1	14:12	3	cn_size = 0 ;
EXPR	14:1	14:1	4	cn_size = 0
ASSIGN	14:1	14:11	5	cn_size = 0
LVAL	14:1	14:1	6	cn_size
FIELD	14:1	14:1	7	cn_size
LEAF_NODE	14:1	14:1	8	cn_size
ASSIGN_OP	14:9	14:9	6	=
LEAF_NODE	14:9	14:9	7	=
RVAL	14:11	14:11	6	0
FIELD	14:11	14:11	7	0
LEAF_NODE	14:11	14:11	8	0
LEAF_NODE	14:12	14:12	4	;
EXPR_STATEMENT	15:1	19:23	3	gnutls_x509_crt_get_dn_by_oid ( cert_dat , GNUTLS_OID_X520_COMMON_NAME , 0 , 0 , cn , & cn_size ) ;
EXPR	15:1	15:1	4	gnutls_x509_crt_get_dn_by_oid ( cert_dat , GNUTLS_OID_X520_COMMON_NAME , 0 , 0 , cn , & cn_size )
FUNCTION_CALL	15:1	19:22	5	gnutls_x509_crt_get_dn_by_oid ( cert_dat , GNUTLS_OID_X520_COMMON_NAME , 0 , 0 , cn , & cn_size )
CALLEE	15:1	15:1	6	gnutls_x509_crt_get_dn_by_oid
LEAF_NODE	15:1	15:1	7	gnutls_x509_crt_get_dn_by_oid
LEAF_NODE	15:30	15:30	6	(
ARGUMENT	15:31	15:31	6	cert_dat
FIELD	15:31	15:31	7	cert_dat
LEAF_NODE	15:31	15:31	8	cert_dat
LEAF_NODE	15:39	15:39	6	,
ARGUMENT	16:10	16:10	6	GNUTLS_OID_X520_COMMON_NAME
FIELD	16:10	16:10	7	GNUTLS_OID_X520_COMMON_NAME
LEAF_NODE	16:10	16:10	8	GNUTLS_OID_X520_COMMON_NAME
LEAF_NODE	16:37	16:37	6	,
ARGUMENT	17:10	17:10	6	0
FIELD	17:10	17:10	7	0
LEAF_NODE	17:10	17:10	8	0
LEAF_NODE	17:11	17:11	6	,
ARGUMENT	18:10	18:10	6	0
FIELD	18:10	18:10	7	0
LEAF_NODE	18:10	18:10	8	0
LEAF_NODE	18:11	18:11	6	,
ARGUMENT	19:10	19:10	6	cn
FIELD	19:10	19:10	7	cn
LEAF_NODE	19:10	19:10	8	cn
LEAF_NODE	19:12	19:12	6	,
ARGUMENT	19:14	19:14	6	& cn_size
UNARY_EXPR	19:14	19:15	7	& cn_size
UNARY_OPERATOR	19:14	19:14	8	&
LEAF_NODE	19:14	19:14	9	&
FIELD	19:15	19:15	8	cn_size
LEAF_NODE	19:15	19:15	9	cn_size
LEAF_NODE	19:22	19:22	6	)
LEAF_NODE	19:23	19:23	4	;
EXPR_STATEMENT	24:1	24:30	3	cn = g_new0 ( gchar , ++ cn_size ) ;
EXPR	24:1	24:1	4	cn = g_new0 ( gchar , ++ cn_size )
ASSIGN	24:1	24:6	5	cn = g_new0 ( gchar , ++ cn_size )
LVAL	24:1	24:1	6	cn
FIELD	24:1	24:1	7	cn
LEAF_NODE	24:1	24:1	8	cn
ASSIGN_OP	24:4	24:4	6	=
LEAF_NODE	24:4	24:4	7	=
RVAL	24:6	24:6	6	g_new0 ( gchar , ++ cn_size )
FUNCTION_CALL	24:6	24:29	7	g_new0 ( gchar , ++ cn_size )
CALLEE	24:6	24:6	8	g_new0
LEAF_NODE	24:6	24:6	9	g_new0
LEAF_NODE	24:12	24:12	8	(
ARGUMENT	24:13	24:13	8	gchar
FIELD	24:13	24:13	9	gchar
LEAF_NODE	24:13	24:13	10	gchar
LEAF_NODE	24:18	24:18	8	,
ARGUMENT	24:20	24:22	8	++ cn_size
LEAF_NODE	24:20	24:20	9	++
FIELD	24:22	24:22	9	cn_size
LEAF_NODE	24:22	24:22	10	cn_size
LEAF_NODE	24:29	24:29	8	)
LEAF_NODE	24:30	24:30	4	;
EXPR_STATEMENT	25:1	29:22	3	ret = gnutls_x509_crt_get_dn_by_oid ( cert_dat , GNUTLS_OID_X520_COMMON_NAME , 0 , 0 , cn , & cn_size ) ;
EXPR	25:1	25:1	4	ret = gnutls_x509_crt_get_dn_by_oid ( cert_dat , GNUTLS_OID_X520_COMMON_NAME , 0 , 0 , cn , & cn_size )
ASSIGN	25:1	25:7	5	ret = gnutls_x509_crt_get_dn_by_oid ( cert_dat , GNUTLS_OID_X520_COMMON_NAME , 0 , 0 , cn , & cn_size )
LVAL	25:1	25:1	6	ret
FIELD	25:1	25:1	7	ret
LEAF_NODE	25:1	25:1	8	ret
ASSIGN_OP	25:5	25:5	6	=
LEAF_NODE	25:5	25:5	7	=
RVAL	25:7	25:7	6	gnutls_x509_crt_get_dn_by_oid ( cert_dat , GNUTLS_OID_X520_COMMON_NAME , 0 , 0 , cn , & cn_size )
FUNCTION_CALL	25:7	29:21	7	gnutls_x509_crt_get_dn_by_oid ( cert_dat , GNUTLS_OID_X520_COMMON_NAME , 0 , 0 , cn , & cn_size )
CALLEE	25:7	25:7	8	gnutls_x509_crt_get_dn_by_oid
LEAF_NODE	25:7	25:7	9	gnutls_x509_crt_get_dn_by_oid
LEAF_NODE	25:36	25:36	8	(
ARGUMENT	25:37	25:37	8	cert_dat
FIELD	25:37	25:37	9	cert_dat
LEAF_NODE	25:37	25:37	10	cert_dat
LEAF_NODE	25:45	25:45	8	,
ARGUMENT	26:9	26:9	8	GNUTLS_OID_X520_COMMON_NAME
FIELD	26:9	26:9	9	GNUTLS_OID_X520_COMMON_NAME
LEAF_NODE	26:9	26:9	10	GNUTLS_OID_X520_COMMON_NAME
LEAF_NODE	26:36	26:36	8	,
ARGUMENT	27:9	27:9	8	0
FIELD	27:9	27:9	9	0
LEAF_NODE	27:9	27:9	10	0
LEAF_NODE	27:10	27:10	8	,
ARGUMENT	28:9	28:9	8	0
FIELD	28:9	28:9	9	0
LEAF_NODE	28:9	28:9	10	0
LEAF_NODE	28:10	28:10	8	,
ARGUMENT	29:9	29:9	8	cn
FIELD	29:9	29:9	9	cn
LEAF_NODE	29:9	29:9	10	cn
LEAF_NODE	29:11	29:11	8	,
ARGUMENT	29:13	29:13	8	& cn_size
UNARY_EXPR	29:13	29:14	9	& cn_size
UNARY_OPERATOR	29:13	29:13	10	&
LEAF_NODE	29:13	29:13	11	&
FIELD	29:14	29:14	10	cn_size
LEAF_NODE	29:14	29:14	11	cn_size
LEAF_NODE	29:21	29:21	8	)
LEAF_NODE	29:22	29:22	4	;
SELECTION	30:1	30:15	3	
KEYWORD	30:1	30:1	4	if
LEAF_NODE	30:1	30:1	5	if
LEAF_NODE	30:4	30:4	4	(
CONDITION	30:5	30:5	4	ret != 0
EXPR	30:5	30:12	5	ret != 0
FIELD	30:5	30:5	6	ret
LEAF_NODE	30:5	30:5	7	ret
EQ_OPERATOR	30:9	30:9	6	!=
LEAF_NODE	30:9	30:9	7	!=
FIELD	30:12	30:12	6	0
LEAF_NODE	30:12	30:12	7	0
LEAF_NODE	30:13	30:13	4	)
STATEMENTS	30:15	35:1	4	
LEAF_NODE	30:15	30:15	5	{
STATEMENTS	31:2	34:2	5	
EXPR_STATEMENT	31:2	32:37	6	purple_debug_error ( "gnutls/x509" , "Failed to get Common Name\n" ) ;
EXPR	31:2	31:2	7	purple_debug_error ( "gnutls/x509" , "Failed to get Common Name\n" )
FUNCTION_CALL	31:2	32:36	8	purple_debug_error ( "gnutls/x509" , "Failed to get Common Name\n" )
CALLEE	31:2	31:2	9	purple_debug_error
LEAF_NODE	31:2	31:2	10	purple_debug_error
LEAF_NODE	31:20	31:20	9	(
ARGUMENT	31:21	31:21	9	"gnutls/x509"
FIELD	31:21	31:21	10	"gnutls/x509"
LEAF_NODE	31:21	31:21	11	"gnutls/x509"
LEAF_NODE	31:34	31:34	9	,
ARGUMENT	32:7	32:7	9	"Failed to get Common Name\n"
FIELD	32:7	32:7	10	"Failed to get Common Name\n"
LEAF_NODE	32:7	32:7	11	"Failed to get Common Name\n"
LEAF_NODE	32:36	32:36	9	)
LEAF_NODE	32:37	32:37	7	;
EXPR_STATEMENT	33:2	33:12	6	g_free ( cn ) ;
EXPR	33:2	33:2	7	g_free ( cn )
FUNCTION_CALL	33:2	33:11	8	g_free ( cn )
CALLEE	33:2	33:2	9	g_free
LEAF_NODE	33:2	33:2	10	g_free
LEAF_NODE	33:8	33:8	9	(
ARGUMENT	33:9	33:9	9	cn
FIELD	33:9	33:9	10	cn
LEAF_NODE	33:9	33:9	11	cn
LEAF_NODE	33:11	33:11	9	)
LEAF_NODE	33:12	33:12	7	;
JUMP_STATEMENT	34:2	34:13	6	return NULL ;
KEYWORD	34:2	34:2	7	return
LEAF_NODE	34:2	34:2	8	return
DESTINATION	34:9	34:9	7	NULL
EXPR	34:9	34:9	8	NULL
FIELD	34:9	34:9	9	NULL
LEAF_NODE	34:9	34:9	10	NULL
LEAF_NODE	34:13	34:13	7	;
LEAF_NODE	35:1	35:1	5	}
JUMP_STATEMENT	36:1	36:10	3	return cn ;
KEYWORD	36:1	36:1	4	return
LEAF_NODE	36:1	36:1	5	return
DESTINATION	36:8	36:8	4	cn
EXPR	36:8	36:8	5	cn
FIELD	36:8	36:8	6	cn
LEAF_NODE	36:8	36:8	7	cn
LEAF_NODE	36:10	36:10	4	;
LEAF_NODE	37:0	37:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	17:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	dumptlv
LEAF_NODE	2:0	2:0	3	dumptlv
PARAMETER_LIST	2:7	2:63	2	( OscarData * od , guint16 type , ByteStream * bs , guint8 len )
LEAF_NODE	2:7	2:7	3	(
PARAMETER_DECL	2:8	2:19	3	OscarData * od
TYPE	2:8	2:18	4	OscarData *
TYPE_NAME	2:8	2:8	5	OscarData
LEAF_NODE	2:8	2:8	6	OscarData
POINTER	2:18	2:18	5	*
LEAF_NODE	2:18	2:18	6	*
NAME	2:19	2:19	4	od
LEAF_NODE	2:19	2:19	5	od
LEAF_NODE	2:21	2:21	3	,
PARAMETER_DECL	2:23	2:31	3	guint16 type
TYPE	2:23	2:23	4	guint16
TYPE_NAME	2:23	2:23	5	guint16
LEAF_NODE	2:23	2:23	6	guint16
NAME	2:31	2:31	4	type
LEAF_NODE	2:31	2:31	5	type
LEAF_NODE	2:35	2:35	3	,
PARAMETER_DECL	2:37	2:49	3	ByteStream * bs
TYPE	2:37	2:48	4	ByteStream *
TYPE_NAME	2:37	2:37	5	ByteStream
LEAF_NODE	2:37	2:37	6	ByteStream
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	bs
LEAF_NODE	2:49	2:49	5	bs
LEAF_NODE	2:51	2:51	3	,
PARAMETER_DECL	2:53	2:60	3	guint8 len
TYPE	2:53	2:53	4	guint8
TYPE_NAME	2:53	2:53	5	guint8
LEAF_NODE	2:53	2:53	6	guint8
NAME	2:60	2:60	4	len
LEAF_NODE	2:60	2:60	5	len
LEAF_NODE	2:63	2:63	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	16:1	2	
SIMPLE_DECL	4:1	4:6	3	int i ;
VAR_DECL	4:1	4:5	4	int i
TYPE	4:1	4:1	5	int
TYPE_NAME	4:1	4:1	6	int
LEAF_NODE	4:1	4:1	7	int
NAME	4:5	4:5	5	i
LEAF_NODE	4:5	4:5	6	i
LEAF_NODE	4:6	4:6	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	! od || ! bs || ! len
EXPR	5:5	5:5	5	! od || ! bs || ! len
OR	5:5	5:12	6	! od || ! bs || ! len
EXPR	5:5	5:5	7	! od
UNARY_EXPR	5:5	5:6	8	! od
UNARY_OPERATOR	5:5	5:5	9	!
LEAF_NODE	5:5	5:5	10	!
FIELD	5:6	5:6	9	od
LEAF_NODE	5:6	5:6	10	od
LEAF_NODE	5:9	5:9	7	||
EXPR	5:12	5:12	7	! bs || ! len
OR	5:12	5:19	8	! bs || ! len
EXPR	5:12	5:12	9	! bs
UNARY_EXPR	5:12	5:13	10	! bs
UNARY_OPERATOR	5:12	5:12	11	!
LEAF_NODE	5:12	5:12	12	!
FIELD	5:13	5:13	11	bs
LEAF_NODE	5:13	5:13	12	bs
LEAF_NODE	5:16	5:16	9	||
EXPR	5:19	5:19	9	! len
UNARY_EXPR	5:19	5:20	10	! len
UNARY_OPERATOR	5:19	5:19	11	!
LEAF_NODE	5:19	5:19	12	!
FIELD	5:20	5:20	11	len
LEAF_NODE	5:20	5:20	12	len
LEAF_NODE	5:23	5:23	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:8	5	return DESTINATION ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	6:8	6:8	6	;
EXPR_STATEMENT	7:1	7:64	3	purple_debug_misc ( "oscar" , "userinfo:   type  =0x%04x\n" , type ) ;
EXPR	7:1	7:1	4	purple_debug_misc ( "oscar" , "userinfo:   type  =0x%04x\n" , type )
FUNCTION_CALL	7:1	7:63	5	purple_debug_misc ( "oscar" , "userinfo:   type  =0x%04x\n" , type )
CALLEE	7:1	7:1	6	purple_debug_misc
LEAF_NODE	7:1	7:1	7	purple_debug_misc
LEAF_NODE	7:18	7:18	6	(
ARGUMENT	7:19	7:19	6	"oscar"
FIELD	7:19	7:19	7	"oscar"
LEAF_NODE	7:19	7:19	8	"oscar"
LEAF_NODE	7:26	7:26	6	,
ARGUMENT	7:28	7:28	6	"userinfo:   type  =0x%04x\n"
FIELD	7:28	7:28	7	"userinfo:   type  =0x%04x\n"
LEAF_NODE	7:28	7:28	8	"userinfo:   type  =0x%04x\n"
LEAF_NODE	7:57	7:57	6	,
ARGUMENT	7:59	7:59	6	type
FIELD	7:59	7:59	7	type
LEAF_NODE	7:59	7:59	8	type
LEAF_NODE	7:63	7:63	6	)
LEAF_NODE	7:64	7:64	4	;
EXPR_STATEMENT	8:1	8:63	3	purple_debug_misc ( "oscar" , "userinfo:   length=0x%04x\n" , len ) ;
EXPR	8:1	8:1	4	purple_debug_misc ( "oscar" , "userinfo:   length=0x%04x\n" , len )
FUNCTION_CALL	8:1	8:62	5	purple_debug_misc ( "oscar" , "userinfo:   length=0x%04x\n" , len )
CALLEE	8:1	8:1	6	purple_debug_misc
LEAF_NODE	8:1	8:1	7	purple_debug_misc
LEAF_NODE	8:18	8:18	6	(
ARGUMENT	8:19	8:19	6	"oscar"
FIELD	8:19	8:19	7	"oscar"
LEAF_NODE	8:19	8:19	8	"oscar"
LEAF_NODE	8:26	8:26	6	,
ARGUMENT	8:28	8:28	6	"userinfo:   length=0x%04x\n"
FIELD	8:28	8:28	7	"userinfo:   length=0x%04x\n"
LEAF_NODE	8:28	8:28	8	"userinfo:   length=0x%04x\n"
LEAF_NODE	8:57	8:57	6	,
ARGUMENT	8:59	8:59	6	len
FIELD	8:59	8:59	7	len
LEAF_NODE	8:59	8:59	8	len
LEAF_NODE	8:62	8:62	6	)
LEAF_NODE	8:63	8:63	4	;
EXPR_STATEMENT	9:1	9:51	3	purple_debug_misc ( "oscar" , "userinfo:   value:\n" ) ;
EXPR	9:1	9:1	4	purple_debug_misc ( "oscar" , "userinfo:   value:\n" )
FUNCTION_CALL	9:1	9:50	5	purple_debug_misc ( "oscar" , "userinfo:   value:\n" )
CALLEE	9:1	9:1	6	purple_debug_misc
LEAF_NODE	9:1	9:1	7	purple_debug_misc
LEAF_NODE	9:18	9:18	6	(
ARGUMENT	9:19	9:19	6	"oscar"
FIELD	9:19	9:19	7	"oscar"
LEAF_NODE	9:19	9:19	8	"oscar"
LEAF_NODE	9:26	9:26	6	,
ARGUMENT	9:28	9:28	6	"userinfo:   value:\n"
FIELD	9:28	9:28	7	"userinfo:   value:\n"
LEAF_NODE	9:28	9:28	8	"userinfo:   value:\n"
LEAF_NODE	9:50	9:50	6	)
LEAF_NODE	9:51	9:51	4	;
ITERATION	10:1	10:27	3	
KEYWORD	10:1	10:1	4	for
LEAF_NODE	10:1	10:1	5	for
LEAF_NODE	10:5	10:5	4	(
FOR_INIT	10:6	10:11	4	i = 0 ;
EXPR	10:6	10:6	5	i = 0
ASSIGN	10:6	10:10	6	i = 0
LVAL	10:6	10:6	7	i
FIELD	10:6	10:6	8	i
LEAF_NODE	10:6	10:6	9	i
ASSIGN_OP	10:8	10:8	7	=
LEAF_NODE	10:8	10:8	8	=
RVAL	10:10	10:10	7	0
FIELD	10:10	10:10	8	0
LEAF_NODE	10:10	10:10	9	0
LEAF_NODE	10:11	10:11	5	;
CONDITION	10:13	10:13	4	i < len
EXPR	10:13	10:17	5	i < len
FIELD	10:13	10:13	6	i
LEAF_NODE	10:13	10:13	7	i
REL_OPERATOR	10:15	10:15	6	<
LEAF_NODE	10:15	10:15	7	<
FIELD	10:17	10:17	6	len
LEAF_NODE	10:17	10:17	7	len
LEAF_NODE	10:20	10:20	4	;
FOR_EXPR	10:22	10:22	4	i ++
EXPR	10:22	10:22	5	i ++
FIELD	10:22	10:23	6	i ++
LEAF_NODE	10:22	10:22	7	i
LEAF_NODE	10:23	10:23	7	++
LEAF_NODE	10:25	10:25	4	)
STATEMENTS	10:27	14:1	4	
LEAF_NODE	10:27	10:27	5	{
STATEMENTS	11:2	13:2	5	
SELECTION	11:2	12:3	6	
KEYWORD	11:2	11:2	7	if
LEAF_NODE	11:2	11:2	8	if
LEAF_NODE	11:5	11:5	7	(
CONDITION	11:6	11:6	7	( i % 8 ) == 0
EXPR	11:6	11:17	8	( i % 8 ) == 0
LEAF_NODE	11:6	11:6	9	(
FIELD	11:7	11:7	9	i
LEAF_NODE	11:7	11:7	10	i
LEAF_NODE	11:9	11:9	9	%
FIELD	11:11	11:11	9	8
LEAF_NODE	11:11	11:11	10	8
LEAF_NODE	11:12	11:12	9	)
EQ_OPERATOR	11:14	11:14	9	==
LEAF_NODE	11:14	11:14	10	==
FIELD	11:17	11:17	9	0
LEAF_NODE	11:17	11:17	10	0
LEAF_NODE	11:18	11:18	7	)
STATEMENTS	12:3	12:3	7	
EXPR_STATEMENT	12:3	12:52	8	purple_debug_misc ( "oscar" , "\nuserinfo:        " ) ;
EXPR	12:3	12:3	9	purple_debug_misc ( "oscar" , "\nuserinfo:        " )
FUNCTION_CALL	12:3	12:51	10	purple_debug_misc ( "oscar" , "\nuserinfo:        " )
CALLEE	12:3	12:3	11	purple_debug_misc
LEAF_NODE	12:3	12:3	12	purple_debug_misc
LEAF_NODE	12:20	12:20	11	(
ARGUMENT	12:21	12:21	11	"oscar"
FIELD	12:21	12:21	12	"oscar"
LEAF_NODE	12:21	12:21	13	"oscar"
LEAF_NODE	12:28	12:28	11	,
ARGUMENT	12:30	12:30	11	"\nuserinfo:        "
FIELD	12:30	12:30	12	"\nuserinfo:        "
LEAF_NODE	12:30	12:30	13	"\nuserinfo:        "
LEAF_NODE	12:51	12:51	11	)
LEAF_NODE	12:52	12:52	9	;
EXPR_STATEMENT	13:2	13:60	6	purple_debug_misc ( "oscar" , "0x%2x " , byte_stream_get8 ( bs ) ) ;
EXPR	13:2	13:2	7	purple_debug_misc ( "oscar" , "0x%2x " , byte_stream_get8 ( bs ) )
FUNCTION_CALL	13:2	13:59	8	purple_debug_misc ( "oscar" , "0x%2x " , byte_stream_get8 ( bs ) )
CALLEE	13:2	13:2	9	purple_debug_misc
LEAF_NODE	13:2	13:2	10	purple_debug_misc
LEAF_NODE	13:19	13:19	9	(
ARGUMENT	13:20	13:20	9	"oscar"
FIELD	13:20	13:20	10	"oscar"
LEAF_NODE	13:20	13:20	11	"oscar"
LEAF_NODE	13:27	13:27	9	,
ARGUMENT	13:29	13:29	9	"0x%2x "
FIELD	13:29	13:29	10	"0x%2x "
LEAF_NODE	13:29	13:29	11	"0x%2x "
LEAF_NODE	13:37	13:37	9	,
ARGUMENT	13:39	13:39	9	byte_stream_get8 ( bs )
FUNCTION_CALL	13:39	13:58	10	byte_stream_get8 ( bs )
CALLEE	13:39	13:39	11	byte_stream_get8
LEAF_NODE	13:39	13:39	12	byte_stream_get8
LEAF_NODE	13:55	13:55	11	(
ARGUMENT	13:56	13:56	11	bs
FIELD	13:56	13:56	12	bs
LEAF_NODE	13:56	13:56	13	bs
LEAF_NODE	13:58	13:58	11	)
LEAF_NODE	13:59	13:59	9	)
LEAF_NODE	13:60	13:60	7	;
LEAF_NODE	14:1	14:1	5	}
EXPR_STATEMENT	15:1	15:33	3	purple_debug_misc ( "oscar" , "\n" ) ;
EXPR	15:1	15:1	4	purple_debug_misc ( "oscar" , "\n" )
FUNCTION_CALL	15:1	15:32	5	purple_debug_misc ( "oscar" , "\n" )
CALLEE	15:1	15:1	6	purple_debug_misc
LEAF_NODE	15:1	15:1	7	purple_debug_misc
LEAF_NODE	15:18	15:18	6	(
ARGUMENT	15:19	15:19	6	"oscar"
FIELD	15:19	15:19	7	"oscar"
LEAF_NODE	15:19	15:19	8	"oscar"
LEAF_NODE	15:26	15:26	6	,
ARGUMENT	15:28	15:28	6	"\n"
FIELD	15:28	15:28	7	"\n"
LEAF_NODE	15:28	15:28	8	"\n"
LEAF_NODE	15:32	15:32	6	)
LEAF_NODE	15:33	15:33	4	;
JUMP_STATEMENT	16:1	16:7	3	return DESTINATION ;
KEYWORD	16:1	16:1	4	return
LEAF_NODE	16:1	16:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	16:7	16:7	4	;
LEAF_NODE	17:0	17:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	18:0	1	
RETURN_TYPE	1:0	1:30	2	static PurpleMediaAppDataInfo *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	PurpleMediaAppDataInfo
LEAF_NODE	1:7	1:7	4	PurpleMediaAppDataInfo
LEAF_NODE	1:30	1:30	3	*
FUNCTION_NAME	2:0	2:0	2	ensure_app_data_info_and_lock
LEAF_NODE	2:0	2:0	3	ensure_app_data_info_and_lock
PARAMETER_LIST	2:30	3:50	2	( PurpleMediaManager * manager , PurpleMedia * media , const gchar * session_id , const gchar * participant )
LEAF_NODE	2:30	2:30	3	(
PARAMETER_DECL	2:31	2:51	3	PurpleMediaManager * manager
TYPE	2:31	2:50	4	PurpleMediaManager *
TYPE_NAME	2:31	2:31	5	PurpleMediaManager
LEAF_NODE	2:31	2:31	6	PurpleMediaManager
POINTER	2:50	2:50	5	*
LEAF_NODE	2:50	2:50	6	*
NAME	2:51	2:51	4	manager
LEAF_NODE	2:51	2:51	5	manager
LEAF_NODE	2:58	2:58	3	,
PARAMETER_DECL	2:60	2:73	3	PurpleMedia * media
TYPE	2:60	2:72	4	PurpleMedia *
TYPE_NAME	2:60	2:60	5	PurpleMedia
LEAF_NODE	2:60	2:60	6	PurpleMedia
POINTER	2:72	2:72	5	*
LEAF_NODE	2:72	2:72	6	*
NAME	2:73	2:73	4	media
LEAF_NODE	2:73	2:73	5	media
LEAF_NODE	2:78	2:78	3	,
PARAMETER_DECL	3:1	3:14	3	const gchar * session_id
TYPE	3:1	3:13	4	const gchar *
TYPE_NAME	3:1	3:7	5	const gchar
LEAF_NODE	3:1	3:1	6	const
LEAF_NODE	3:7	3:7	6	gchar
POINTER	3:13	3:13	5	*
LEAF_NODE	3:13	3:13	6	*
NAME	3:14	3:14	4	session_id
LEAF_NODE	3:14	3:14	5	session_id
LEAF_NODE	3:24	3:24	3	,
PARAMETER_DECL	3:26	3:39	3	const gchar * participant
TYPE	3:26	3:38	4	const gchar *
TYPE_NAME	3:26	3:32	5	const gchar
LEAF_NODE	3:26	3:26	6	const
LEAF_NODE	3:32	3:32	6	gchar
POINTER	3:38	3:38	5	*
LEAF_NODE	3:38	3:38	6	*
NAME	3:39	3:39	4	participant
LEAF_NODE	3:39	3:39	5	participant
LEAF_NODE	3:50	3:50	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	17:1	2	
SIMPLE_DECL	5:1	6:26	3	PurpleMediaAppDataInfo * info ; info = get_app_data_info_and_lock ( manager , media , session_id , participant ) ;
VAR_DECL	5:1	5:26	4	PurpleMediaAppDataInfo * info ; info = get_app_data_info_and_lock ( manager , media , session_id , participant )
TYPE	5:1	5:24	5	PurpleMediaAppDataInfo *
TYPE_NAME	5:1	5:1	6	PurpleMediaAppDataInfo
LEAF_NODE	5:1	5:1	7	PurpleMediaAppDataInfo
POINTER	5:24	5:24	6	*
LEAF_NODE	5:24	5:24	7	*
NAME	5:26	5:26	5	info
LEAF_NODE	5:26	5:26	6	info
LEAF_NODE	0:0	0:0	5	;
INIT	5:26	5:26	5	info = get_app_data_info_and_lock ( manager , media , session_id , participant )
ASSIGN	5:26	5:33	6	info = get_app_data_info_and_lock ( manager , media , session_id , participant )
LVAL	5:26	5:26	7	info
NAME	5:26	5:26	8	info
LEAF_NODE	5:26	5:26	9	info
ASSIGN_OP	5:31	5:31	7	=
LEAF_NODE	5:31	5:31	8	=
RVAL	5:33	5:33	7	get_app_data_info_and_lock ( manager , media , session_id , participant )
FUNCTION_CALL	5:33	6:25	8	get_app_data_info_and_lock ( manager , media , session_id , participant )
CALLEE	5:33	5:33	9	get_app_data_info_and_lock
LEAF_NODE	5:33	5:33	10	get_app_data_info_and_lock
LEAF_NODE	5:60	5:60	9	(
ARGUMENT	5:61	5:61	9	manager
FIELD	5:61	5:61	10	manager
LEAF_NODE	5:61	5:61	11	manager
LEAF_NODE	5:68	5:68	9	,
ARGUMENT	5:70	5:70	9	media
FIELD	5:70	5:70	10	media
LEAF_NODE	5:70	5:70	11	media
LEAF_NODE	5:75	5:75	9	,
ARGUMENT	6:2	6:2	9	session_id
FIELD	6:2	6:2	10	session_id
LEAF_NODE	6:2	6:2	11	session_id
LEAF_NODE	6:12	6:12	9	,
ARGUMENT	6:14	6:14	9	participant
FIELD	6:14	6:14	10	participant
LEAF_NODE	6:14	6:14	11	participant
LEAF_NODE	6:25	6:25	9	)
LEAF_NODE	6:26	6:26	4	;
SELECTION	7:1	7:19	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	info == NULL
EXPR	7:5	7:13	5	info == NULL
FIELD	7:5	7:5	6	info
LEAF_NODE	7:5	7:5	7	info
EQ_OPERATOR	7:10	7:10	6	==
LEAF_NODE	7:10	7:10	7	==
FIELD	7:13	7:13	6	NULL
LEAF_NODE	7:13	7:13	7	NULL
LEAF_NODE	7:17	7:17	4	)
STATEMENTS	7:19	16:1	4	
LEAF_NODE	7:19	7:19	5	{
STATEMENTS	8:2	14:2	5	
EXPR_STATEMENT	8:2	8:46	6	info = g_slice_new0 ( PurpleMediaAppDataInfo ) ;
EXPR	8:2	8:2	7	info = g_slice_new0 ( PurpleMediaAppDataInfo )
ASSIGN	8:2	8:9	8	info = g_slice_new0 ( PurpleMediaAppDataInfo )
LVAL	8:2	8:2	9	info
FIELD	8:2	8:2	10	info
LEAF_NODE	8:2	8:2	11	info
ASSIGN_OP	8:7	8:7	9	=
LEAF_NODE	8:7	8:7	10	=
RVAL	8:9	8:9	9	g_slice_new0 ( PurpleMediaAppDataInfo )
FUNCTION_CALL	8:9	8:45	10	g_slice_new0 ( PurpleMediaAppDataInfo )
CALLEE	8:9	8:9	11	g_slice_new0
LEAF_NODE	8:9	8:9	12	g_slice_new0
LEAF_NODE	8:22	8:22	11	(
ARGUMENT	8:23	8:23	11	PurpleMediaAppDataInfo
FIELD	8:23	8:23	12	PurpleMediaAppDataInfo
LEAF_NODE	8:23	8:23	13	PurpleMediaAppDataInfo
LEAF_NODE	8:45	8:45	11	)
LEAF_NODE	8:46	8:46	7	;
EXPR_STATEMENT	9:2	9:21	6	info -> media = media ;
EXPR	9:2	9:2	7	info -> media = media
ASSIGN	9:2	9:16	8	info -> media = media
LVAL	9:2	9:2	9	info -> media
FIELD	9:2	9:8	10	info -> media
LEAF_NODE	9:2	9:2	11	info
LEAF_NODE	9:6	9:6	11	->
LEAF_NODE	9:8	9:8	11	media
ASSIGN_OP	9:14	9:14	9	=
LEAF_NODE	9:14	9:14	10	=
RVAL	9:16	9:16	9	media
FIELD	9:16	9:16	10	media
LEAF_NODE	9:16	9:16	11	media
LEAF_NODE	9:21	9:21	7	;
EXPR_STATEMENT	10:2	10:43	6	g_weak_ref_init ( & info -> media_ref , media ) ;
EXPR	10:2	10:2	7	g_weak_ref_init ( & info -> media_ref , media )
FUNCTION_CALL	10:2	10:42	8	g_weak_ref_init ( & info -> media_ref , media )
CALLEE	10:2	10:2	9	g_weak_ref_init
LEAF_NODE	10:2	10:2	10	g_weak_ref_init
LEAF_NODE	10:18	10:18	9	(
ARGUMENT	10:19	10:19	9	& info -> media_ref
UNARY_EXPR	10:19	10:20	10	& info -> media_ref
UNARY_OPERATOR	10:19	10:19	11	&
LEAF_NODE	10:19	10:19	12	&
FIELD	10:20	10:26	11	info -> media_ref
LEAF_NODE	10:20	10:20	12	info
LEAF_NODE	10:24	10:24	12	->
LEAF_NODE	10:26	10:26	12	media_ref
LEAF_NODE	10:35	10:35	9	,
ARGUMENT	10:37	10:37	9	media
FIELD	10:37	10:37	10	media
LEAF_NODE	10:37	10:37	11	media
LEAF_NODE	10:42	10:42	9	)
LEAF_NODE	10:43	10:43	7	;
EXPR_STATEMENT	11:2	11:42	6	info -> session_id = g_strdup ( session_id ) ;
EXPR	11:2	11:2	7	info -> session_id = g_strdup ( session_id )
ASSIGN	11:2	11:21	8	info -> session_id = g_strdup ( session_id )
LVAL	11:2	11:2	9	info -> session_id
FIELD	11:2	11:8	10	info -> session_id
LEAF_NODE	11:2	11:2	11	info
LEAF_NODE	11:6	11:6	11	->
LEAF_NODE	11:8	11:8	11	session_id
ASSIGN_OP	11:19	11:19	9	=
LEAF_NODE	11:19	11:19	10	=
RVAL	11:21	11:21	9	g_strdup ( session_id )
FUNCTION_CALL	11:21	11:41	10	g_strdup ( session_id )
CALLEE	11:21	11:21	11	g_strdup
LEAF_NODE	11:21	11:21	12	g_strdup
LEAF_NODE	11:30	11:30	11	(
ARGUMENT	11:31	11:31	11	session_id
FIELD	11:31	11:31	12	session_id
LEAF_NODE	11:31	11:31	13	session_id
LEAF_NODE	11:41	11:41	11	)
LEAF_NODE	11:42	11:42	7	;
EXPR_STATEMENT	12:2	12:44	6	info -> participant = g_strdup ( participant ) ;
EXPR	12:2	12:2	7	info -> participant = g_strdup ( participant )
ASSIGN	12:2	12:22	8	info -> participant = g_strdup ( participant )
LVAL	12:2	12:2	9	info -> participant
FIELD	12:2	12:8	10	info -> participant
LEAF_NODE	12:2	12:2	11	info
LEAF_NODE	12:6	12:6	11	->
LEAF_NODE	12:8	12:8	11	participant
ASSIGN_OP	12:20	12:20	9	=
LEAF_NODE	12:20	12:20	10	=
RVAL	12:22	12:22	9	g_strdup ( participant )
FUNCTION_CALL	12:22	12:43	10	g_strdup ( participant )
CALLEE	12:22	12:22	11	g_strdup
LEAF_NODE	12:22	12:22	12	g_strdup
LEAF_NODE	12:31	12:31	11	(
ARGUMENT	12:32	12:32	11	participant
FIELD	12:32	12:32	12	participant
LEAF_NODE	12:32	12:32	13	participant
LEAF_NODE	12:43	12:43	11	)
LEAF_NODE	12:44	12:44	7	;
EXPR_STATEMENT	13:2	13:36	6	g_cond_init ( & info -> readable_cond ) ;
EXPR	13:2	13:2	7	g_cond_init ( & info -> readable_cond )
FUNCTION_CALL	13:2	13:35	8	g_cond_init ( & info -> readable_cond )
CALLEE	13:2	13:2	9	g_cond_init
LEAF_NODE	13:2	13:2	10	g_cond_init
LEAF_NODE	13:14	13:14	9	(
ARGUMENT	13:15	13:15	9	& info -> readable_cond
UNARY_EXPR	13:15	13:16	10	& info -> readable_cond
UNARY_OPERATOR	13:15	13:15	11	&
LEAF_NODE	13:15	13:15	12	&
FIELD	13:16	13:22	11	info -> readable_cond
LEAF_NODE	13:16	13:16	12	info
LEAF_NODE	13:20	13:20	12	->
LEAF_NODE	13:22	13:22	12	readable_cond
LEAF_NODE	13:35	13:35	9	)
LEAF_NODE	13:36	13:36	7	;
EXPR_STATEMENT	14:2	15:37	6	manager -> priv -> appdata_info = g_list_prepend ( manager -> priv -> appdata_info , info ) ;
EXPR	14:2	14:2	7	manager -> priv -> appdata_info = g_list_prepend ( manager -> priv -> appdata_info , info )
ASSIGN	14:2	14:32	8	manager -> priv -> appdata_info = g_list_prepend ( manager -> priv -> appdata_info , info )
LVAL	14:2	14:2	9	manager -> priv -> appdata_info
FIELD	14:2	14:17	10	manager -> priv -> appdata_info
LEAF_NODE	14:2	14:2	11	manager
LEAF_NODE	14:9	14:9	11	->
LEAF_NODE	14:11	14:11	11	priv
LEAF_NODE	14:15	14:15	11	->
LEAF_NODE	14:17	14:17	11	appdata_info
ASSIGN_OP	14:30	14:30	9	=
LEAF_NODE	14:30	14:30	10	=
RVAL	14:32	14:32	9	g_list_prepend ( manager -> priv -> appdata_info , info )
FUNCTION_CALL	14:32	15:36	10	g_list_prepend ( manager -> priv -> appdata_info , info )
CALLEE	14:32	14:32	11	g_list_prepend
LEAF_NODE	14:32	14:32	12	g_list_prepend
LEAF_NODE	14:47	14:47	11	(
ARGUMENT	15:3	15:3	11	manager -> priv -> appdata_info
FIELD	15:3	15:18	12	manager -> priv -> appdata_info
LEAF_NODE	15:3	15:3	13	manager
LEAF_NODE	15:10	15:10	13	->
LEAF_NODE	15:12	15:12	13	priv
LEAF_NODE	15:16	15:16	13	->
LEAF_NODE	15:18	15:18	13	appdata_info
LEAF_NODE	15:30	15:30	11	,
ARGUMENT	15:32	15:32	11	info
FIELD	15:32	15:32	12	info
LEAF_NODE	15:32	15:32	13	info
LEAF_NODE	15:36	15:36	11	)
LEAF_NODE	15:37	15:37	7	;
LEAF_NODE	16:1	16:1	5	}
JUMP_STATEMENT	17:1	17:12	3	return info ;
KEYWORD	17:1	17:1	4	return
LEAF_NODE	17:1	17:1	5	return
DESTINATION	17:8	17:8	4	info
EXPR	17:8	17:8	5	info
FIELD	17:8	17:8	6	info
LEAF_NODE	17:8	17:8	7	info
LEAF_NODE	17:12	17:12	4	;
LEAF_NODE	18:0	18:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	17:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	aim_cachecookie
LEAF_NODE	2:4	2:4	3	aim_cachecookie
PARAMETER_LIST	2:19	2:53	2	( OscarData * od , IcbmCookie * cookie )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:31	3	OscarData * od
TYPE	2:20	2:30	4	OscarData *
TYPE_NAME	2:20	2:20	5	OscarData
LEAF_NODE	2:20	2:20	6	OscarData
POINTER	2:30	2:30	5	*
LEAF_NODE	2:30	2:30	6	*
NAME	2:31	2:31	4	od
LEAF_NODE	2:31	2:31	5	od
LEAF_NODE	2:33	2:33	3	,
PARAMETER_DECL	2:35	2:47	3	IcbmCookie * cookie
TYPE	2:35	2:46	4	IcbmCookie *
TYPE_NAME	2:35	2:35	5	IcbmCookie
LEAF_NODE	2:35	2:35	6	IcbmCookie
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	cookie
LEAF_NODE	2:47	2:47	5	cookie
LEAF_NODE	2:53	2:53	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	16:1	2	
SIMPLE_DECL	4:1	4:20	3	IcbmCookie * newcook ;
VAR_DECL	4:1	4:13	4	IcbmCookie * newcook
TYPE	4:1	4:12	5	IcbmCookie *
TYPE_NAME	4:1	4:1	6	IcbmCookie
LEAF_NODE	4:1	4:1	7	IcbmCookie
POINTER	4:12	4:12	6	*
LEAF_NODE	4:12	4:12	7	*
NAME	4:13	4:13	5	newcook
LEAF_NODE	4:13	4:13	6	newcook
LEAF_NODE	4:20	4:20	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	! od || ! cookie
EXPR	5:5	5:5	5	! od || ! cookie
OR	5:5	5:12	6	! od || ! cookie
EXPR	5:5	5:5	7	! od
UNARY_EXPR	5:5	5:6	8	! od
UNARY_OPERATOR	5:5	5:5	9	!
LEAF_NODE	5:5	5:5	10	!
FIELD	5:6	5:6	9	od
LEAF_NODE	5:6	5:6	10	od
LEAF_NODE	5:9	5:9	7	||
EXPR	5:12	5:12	7	! cookie
UNARY_EXPR	5:12	5:13	8	! cookie
UNARY_OPERATOR	5:12	5:12	9	!
LEAF_NODE	5:12	5:12	10	!
FIELD	5:13	5:13	9	cookie
LEAF_NODE	5:13	5:13	10	cookie
LEAF_NODE	5:19	5:19	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:16	5	return - EINVAL ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
DESTINATION	6:9	6:9	6	- EINVAL
EXPR	6:9	6:9	7	- EINVAL
UNARY_EXPR	6:9	6:10	8	- EINVAL
UNARY_OPERATOR	6:9	6:9	9	-
LEAF_NODE	6:9	6:9	10	-
FIELD	6:10	6:10	9	EINVAL
LEAF_NODE	6:10	6:10	10	EINVAL
LEAF_NODE	6:16	6:16	6	;
EXPR_STATEMENT	7:1	7:60	3	newcook = aim_checkcookie ( od , cookie -> cookie , cookie -> type ) ;
EXPR	7:1	7:1	4	newcook = aim_checkcookie ( od , cookie -> cookie , cookie -> type )
ASSIGN	7:1	7:11	5	newcook = aim_checkcookie ( od , cookie -> cookie , cookie -> type )
LVAL	7:1	7:1	6	newcook
FIELD	7:1	7:1	7	newcook
LEAF_NODE	7:1	7:1	8	newcook
ASSIGN_OP	7:9	7:9	6	=
LEAF_NODE	7:9	7:9	7	=
RVAL	7:11	7:11	6	aim_checkcookie ( od , cookie -> cookie , cookie -> type )
FUNCTION_CALL	7:11	7:59	7	aim_checkcookie ( od , cookie -> cookie , cookie -> type )
CALLEE	7:11	7:11	8	aim_checkcookie
LEAF_NODE	7:11	7:11	9	aim_checkcookie
LEAF_NODE	7:26	7:26	8	(
ARGUMENT	7:27	7:27	8	od
FIELD	7:27	7:27	9	od
LEAF_NODE	7:27	7:27	10	od
LEAF_NODE	7:29	7:29	8	,
ARGUMENT	7:31	7:31	8	cookie -> cookie
FIELD	7:31	7:39	9	cookie -> cookie
LEAF_NODE	7:31	7:31	10	cookie
LEAF_NODE	7:37	7:37	10	->
LEAF_NODE	7:39	7:39	10	cookie
LEAF_NODE	7:45	7:45	8	,
ARGUMENT	7:47	7:47	8	cookie -> type
FIELD	7:47	7:55	9	cookie -> type
LEAF_NODE	7:47	7:47	10	cookie
LEAF_NODE	7:53	7:53	10	->
LEAF_NODE	7:55	7:55	10	type
LEAF_NODE	7:59	7:59	8	)
LEAF_NODE	7:60	7:60	4	;
SELECTION	8:1	8:24	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	newcook == cookie
EXPR	8:5	8:16	5	newcook == cookie
FIELD	8:5	8:5	6	newcook
LEAF_NODE	8:5	8:5	7	newcook
EQ_OPERATOR	8:13	8:13	6	==
LEAF_NODE	8:13	8:13	7	==
FIELD	8:16	8:16	6	cookie
LEAF_NODE	8:16	8:16	7	cookie
LEAF_NODE	8:22	8:22	4	)
STATEMENTS	8:24	11:1	4	
LEAF_NODE	8:24	8:24	5	{
STATEMENTS	9:2	10:2	5	
EXPR_STATEMENT	9:2	9:31	6	newcook -> addtime = time ( NULL ) ;
EXPR	9:2	9:2	7	newcook -> addtime = time ( NULL )
ASSIGN	9:2	9:21	8	newcook -> addtime = time ( NULL )
LVAL	9:2	9:2	9	newcook -> addtime
FIELD	9:2	9:11	10	newcook -> addtime
LEAF_NODE	9:2	9:2	11	newcook
LEAF_NODE	9:9	9:9	11	->
LEAF_NODE	9:11	9:11	11	addtime
ASSIGN_OP	9:19	9:19	9	=
LEAF_NODE	9:19	9:19	10	=
RVAL	9:21	9:21	9	time ( NULL )
FUNCTION_CALL	9:21	9:30	10	time ( NULL )
CALLEE	9:21	9:21	11	time
LEAF_NODE	9:21	9:21	12	time
LEAF_NODE	9:25	9:25	11	(
ARGUMENT	9:26	9:26	11	NULL
FIELD	9:26	9:26	12	NULL
LEAF_NODE	9:26	9:26	13	NULL
LEAF_NODE	9:30	9:30	11	)
LEAF_NODE	9:31	9:31	7	;
JUMP_STATEMENT	10:2	10:10	6	return 1 ;
KEYWORD	10:2	10:2	7	return
LEAF_NODE	10:2	10:2	8	return
DESTINATION	10:9	10:9	7	1
EXPR	10:9	10:9	8	1
FIELD	10:9	10:9	9	1
LEAF_NODE	10:9	10:9	10	1
LEAF_NODE	10:10	10:10	7	;
LEAF_NODE	11:1	11:1	5	}
SELECTION	11:3	11:8	3	
KEYWORD	11:3	11:3	4	else
LEAF_NODE	11:3	11:3	5	else
STATEMENTS	11:8	11:8	4	
SELECTION	11:8	12:2	5	
KEYWORD	11:8	11:8	6	if
LEAF_NODE	11:8	11:8	7	if
LEAF_NODE	11:11	11:11	6	(
CONDITION	11:12	11:12	6	newcook
EXPR	11:12	11:12	7	newcook
FIELD	11:12	11:12	8	newcook
LEAF_NODE	11:12	11:12	9	newcook
LEAF_NODE	11:19	11:19	6	)
STATEMENTS	12:2	12:2	6	
EXPR_STATEMENT	12:2	12:30	7	aim_cookie_free ( od , newcook ) ;
EXPR	12:2	12:2	8	aim_cookie_free ( od , newcook )
FUNCTION_CALL	12:2	12:29	9	aim_cookie_free ( od , newcook )
CALLEE	12:2	12:2	10	aim_cookie_free
LEAF_NODE	12:2	12:2	11	aim_cookie_free
LEAF_NODE	12:17	12:17	10	(
ARGUMENT	12:18	12:18	10	od
FIELD	12:18	12:18	11	od
LEAF_NODE	12:18	12:18	12	od
LEAF_NODE	12:20	12:20	10	,
ARGUMENT	12:22	12:22	10	newcook
FIELD	12:22	12:22	11	newcook
LEAF_NODE	12:22	12:22	12	newcook
LEAF_NODE	12:29	12:29	10	)
LEAF_NODE	12:30	12:30	8	;
EXPR_STATEMENT	13:1	13:29	3	cookie -> addtime = time ( NULL ) ;
EXPR	13:1	13:1	4	cookie -> addtime = time ( NULL )
ASSIGN	13:1	13:19	5	cookie -> addtime = time ( NULL )
LVAL	13:1	13:1	6	cookie -> addtime
FIELD	13:1	13:9	7	cookie -> addtime
LEAF_NODE	13:1	13:1	8	cookie
LEAF_NODE	13:7	13:7	8	->
LEAF_NODE	13:9	13:9	8	addtime
ASSIGN_OP	13:17	13:17	6	=
LEAF_NODE	13:17	13:17	7	=
RVAL	13:19	13:19	6	time ( NULL )
FUNCTION_CALL	13:19	13:28	7	time ( NULL )
CALLEE	13:19	13:19	8	time
LEAF_NODE	13:19	13:19	9	time
LEAF_NODE	13:23	13:23	8	(
ARGUMENT	13:24	13:24	8	NULL
FIELD	13:24	13:24	9	NULL
LEAF_NODE	13:24	13:24	10	NULL
LEAF_NODE	13:28	13:28	8	)
LEAF_NODE	13:29	13:29	4	;
EXPR_STATEMENT	14:1	14:30	3	cookie -> next = od -> msgcookies ;
EXPR	14:1	14:1	4	cookie -> next = od -> msgcookies
ASSIGN	14:1	14:16	5	cookie -> next = od -> msgcookies
LVAL	14:1	14:1	6	cookie -> next
FIELD	14:1	14:9	7	cookie -> next
LEAF_NODE	14:1	14:1	8	cookie
LEAF_NODE	14:7	14:7	8	->
LEAF_NODE	14:9	14:9	8	next
ASSIGN_OP	14:14	14:14	6	=
LEAF_NODE	14:14	14:14	7	=
RVAL	14:16	14:16	6	od -> msgcookies
FIELD	14:16	14:20	7	od -> msgcookies
LEAF_NODE	14:16	14:16	8	od
LEAF_NODE	14:18	14:18	8	->
LEAF_NODE	14:20	14:20	8	msgcookies
LEAF_NODE	14:30	14:30	4	;
EXPR_STATEMENT	15:1	15:24	3	od -> msgcookies = cookie ;
EXPR	15:1	15:1	4	od -> msgcookies = cookie
ASSIGN	15:1	15:18	5	od -> msgcookies = cookie
LVAL	15:1	15:1	6	od -> msgcookies
FIELD	15:1	15:5	7	od -> msgcookies
LEAF_NODE	15:1	15:1	8	od
LEAF_NODE	15:3	15:3	8	->
LEAF_NODE	15:5	15:5	8	msgcookies
ASSIGN_OP	15:16	15:16	6	=
LEAF_NODE	15:16	15:16	7	=
RVAL	15:18	15:18	6	cookie
FIELD	15:18	15:18	7	cookie
LEAF_NODE	15:18	15:18	8	cookie
LEAF_NODE	15:24	15:24	4	;
JUMP_STATEMENT	16:1	16:9	3	return 0 ;
KEYWORD	16:1	16:1	4	return
LEAF_NODE	16:1	16:1	5	return
DESTINATION	16:8	16:8	4	0
EXPR	16:8	16:8	5	0
FIELD	16:8	16:8	6	0
LEAF_NODE	16:8	16:8	7	0
LEAF_NODE	16:9	16:9	4	;
LEAF_NODE	17:0	17:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	25:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	row_motion_cb
LEAF_NODE	2:0	2:0	3	row_motion_cb
PARAMETER_LIST	2:13	2:69	2	( GtkWidget * tv , GdkEventMotion * event , gpointer userdata )
LEAF_NODE	2:13	2:13	3	(
PARAMETER_DECL	2:14	2:25	3	GtkWidget * tv
TYPE	2:14	2:24	4	GtkWidget *
TYPE_NAME	2:14	2:14	5	GtkWidget
LEAF_NODE	2:14	2:14	6	GtkWidget
POINTER	2:24	2:24	5	*
LEAF_NODE	2:24	2:24	6	*
NAME	2:25	2:25	4	tv
LEAF_NODE	2:25	2:25	5	tv
LEAF_NODE	2:27	2:27	3	,
PARAMETER_DECL	2:29	2:45	3	GdkEventMotion * event
TYPE	2:29	2:44	4	GdkEventMotion *
TYPE_NAME	2:29	2:29	5	GdkEventMotion
LEAF_NODE	2:29	2:29	6	GdkEventMotion
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	event
LEAF_NODE	2:45	2:45	5	event
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:61	3	gpointer userdata
TYPE	2:52	2:52	4	gpointer
TYPE_NAME	2:52	2:52	5	gpointer
LEAF_NODE	2:52	2:52	6	gpointer
NAME	2:61	2:61	4	userdata
LEAF_NODE	2:61	2:61	5	userdata
LEAF_NODE	2:69	2:69	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	24:1	2	
SIMPLE_DECL	4:1	4:18	3	GtkTreePath * path ;
VAR_DECL	4:1	4:14	4	GtkTreePath * path
TYPE	4:1	4:13	5	GtkTreePath *
TYPE_NAME	4:1	4:1	6	GtkTreePath
LEAF_NODE	4:1	4:1	7	GtkTreePath
POINTER	4:13	4:13	6	*
LEAF_NODE	4:13	4:13	7	*
NAME	4:14	4:14	5	path
LEAF_NODE	4:14	4:14	6	path
LEAF_NODE	4:18	4:18	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	event -> window != gtk_tree_view_get_bin_window ( GTK_TREE_VIEW ( tv ) )
EXPR	5:5	5:22	5	event -> window != gtk_tree_view_get_bin_window ( GTK_TREE_VIEW ( tv ) )
FIELD	5:5	5:12	6	event -> window
LEAF_NODE	5:5	5:5	7	event
LEAF_NODE	5:10	5:10	7	->
LEAF_NODE	5:12	5:12	7	window
EQ_OPERATOR	5:19	5:19	6	!=
LEAF_NODE	5:19	5:19	7	!=
FUNCTION_CALL	5:22	5:68	6	gtk_tree_view_get_bin_window ( GTK_TREE_VIEW ( tv ) )
CALLEE	5:22	5:22	7	gtk_tree_view_get_bin_window
LEAF_NODE	5:22	5:22	8	gtk_tree_view_get_bin_window
LEAF_NODE	5:50	5:50	7	(
ARGUMENT	5:51	5:51	7	GTK_TREE_VIEW ( tv )
FUNCTION_CALL	5:51	5:67	8	GTK_TREE_VIEW ( tv )
CALLEE	5:51	5:51	9	GTK_TREE_VIEW
LEAF_NODE	5:51	5:51	10	GTK_TREE_VIEW
LEAF_NODE	5:64	5:64	9	(
ARGUMENT	5:65	5:65	9	tv
FIELD	5:65	5:65	10	tv
LEAF_NODE	5:65	5:65	11	tv
LEAF_NODE	5:67	5:67	9	)
LEAF_NODE	5:68	5:68	7	)
LEAF_NODE	5:69	5:69	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:14	5	return FALSE ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
DESTINATION	6:9	6:9	6	FALSE
EXPR	6:9	6:9	7	FALSE
FIELD	6:9	6:9	8	FALSE
LEAF_NODE	6:9	6:9	9	FALSE
LEAF_NODE	6:14	6:14	6	;
EXPR_STATEMENT	7:1	7:27	3	initialize_tooltip_delay ( ) ;
EXPR	7:1	7:1	4	initialize_tooltip_delay ( )
FUNCTION_CALL	7:1	7:26	5	initialize_tooltip_delay ( )
CALLEE	7:1	7:1	6	initialize_tooltip_delay
LEAF_NODE	7:1	7:1	7	initialize_tooltip_delay
LEAF_NODE	7:25	7:25	6	(
LEAF_NODE	7:26	7:26	6	)
LEAF_NODE	7:27	7:27	4	;
SELECTION	8:1	9:2	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	! enable_tooltips
EXPR	8:5	8:5	5	! enable_tooltips
UNARY_EXPR	8:5	8:6	6	! enable_tooltips
UNARY_OPERATOR	8:5	8:5	7	!
LEAF_NODE	8:5	8:5	8	!
FIELD	8:6	8:6	7	enable_tooltips
LEAF_NODE	8:6	8:6	8	enable_tooltips
LEAF_NODE	8:21	8:21	4	)
STATEMENTS	9:2	9:2	4	
JUMP_STATEMENT	9:2	9:14	5	return FALSE ;
KEYWORD	9:2	9:2	6	return
LEAF_NODE	9:2	9:2	7	return
DESTINATION	9:9	9:9	6	FALSE
EXPR	9:9	9:9	7	FALSE
FIELD	9:9	9:9	8	FALSE
LEAF_NODE	9:9	9:9	9	FALSE
LEAF_NODE	9:14	9:14	6	;
SELECTION	10:1	10:29	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	pidgin_tooltip . timeout
EXPR	10:5	10:5	5	pidgin_tooltip . timeout
FIELD	10:5	10:20	6	pidgin_tooltip . timeout
LEAF_NODE	10:5	10:5	7	pidgin_tooltip
LEAF_NODE	10:19	10:19	7	.
LEAF_NODE	10:20	10:20	7	timeout
LEAF_NODE	10:27	10:27	4	)
STATEMENTS	10:29	15:1	4	
LEAF_NODE	10:29	10:29	5	{
STATEMENTS	11:2	14:2	5	
SELECTION	11:2	12:3	6	
KEYWORD	11:2	11:2	7	if
LEAF_NODE	11:2	11:2	8	if
LEAF_NODE	11:5	11:5	7	(
CONDITION	11:6	11:6	7	( event -> y >= pidgin_tooltip . tip_rect . y ) && ( ( event -> y - pidgin_tooltip . tip_rect . height ) <= pidgin_tooltip . tip_rect . y )
EXPR	11:6	11:6	8	( event -> y >= pidgin_tooltip . tip_rect . y ) && ( ( event -> y - pidgin_tooltip . tip_rect . height ) <= pidgin_tooltip . tip_rect . y )
AND	11:6	11:49	9	( event -> y >= pidgin_tooltip . tip_rect . y ) && ( ( event -> y - pidgin_tooltip . tip_rect . height ) <= pidgin_tooltip . tip_rect . y )
EXPR	11:6	11:44	10	( event -> y >= pidgin_tooltip . tip_rect . y )
LEAF_NODE	11:6	11:6	11	(
FIELD	11:7	11:14	11	event -> y
LEAF_NODE	11:7	11:7	12	event
LEAF_NODE	11:12	11:12	12	->
LEAF_NODE	11:14	11:14	12	y
REL_OPERATOR	11:16	11:16	11	>=
LEAF_NODE	11:16	11:16	12	>=
FIELD	11:19	11:43	11	pidgin_tooltip . tip_rect . y
LEAF_NODE	11:19	11:19	12	pidgin_tooltip
LEAF_NODE	11:33	11:33	12	.
LEAF_NODE	11:34	11:34	12	tip_rect
LEAF_NODE	11:42	11:42	12	.
LEAF_NODE	11:43	11:43	12	y
LEAF_NODE	11:44	11:44	11	)
LEAF_NODE	11:46	11:46	10	&&
EXPR	11:49	11:122	10	( ( event -> y - pidgin_tooltip . tip_rect . height ) <= pidgin_tooltip . tip_rect . y )
LEAF_NODE	11:49	11:49	11	(
LEAF_NODE	11:50	11:50	11	(
FIELD	11:51	11:58	11	event -> y
LEAF_NODE	11:51	11:51	12	event
LEAF_NODE	11:56	11:56	12	->
LEAF_NODE	11:58	11:58	12	y
LEAF_NODE	11:60	11:60	11	-
FIELD	11:62	11:86	11	pidgin_tooltip . tip_rect . height
LEAF_NODE	11:62	11:62	12	pidgin_tooltip
LEAF_NODE	11:76	11:76	12	.
LEAF_NODE	11:77	11:77	12	tip_rect
LEAF_NODE	11:85	11:85	12	.
LEAF_NODE	11:86	11:86	12	height
LEAF_NODE	11:92	11:92	11	)
REL_OPERATOR	11:94	11:94	11	<=
LEAF_NODE	11:94	11:94	12	<=
FIELD	11:97	11:121	11	pidgin_tooltip . tip_rect . y
LEAF_NODE	11:97	11:97	12	pidgin_tooltip
LEAF_NODE	11:111	11:111	12	.
LEAF_NODE	11:112	11:112	12	tip_rect
LEAF_NODE	11:120	11:120	12	.
LEAF_NODE	11:121	11:121	12	y
LEAF_NODE	11:122	11:122	11	)
LEAF_NODE	11:123	11:123	7	)
STATEMENTS	12:3	12:3	7	
JUMP_STATEMENT	12:3	12:15	8	return FALSE ;
KEYWORD	12:3	12:3	9	return
LEAF_NODE	12:3	12:3	10	return
DESTINATION	12:10	12:10	9	FALSE
EXPR	12:10	12:10	10	FALSE
FIELD	12:10	12:10	11	FALSE
LEAF_NODE	12:10	12:10	12	FALSE
LEAF_NODE	12:15	12:15	9	;
EXPR_STATEMENT	14:2	14:26	6	pidgin_tooltip_destroy ( ) ;
EXPR	14:2	14:2	7	pidgin_tooltip_destroy ( )
FUNCTION_CALL	14:2	14:25	8	pidgin_tooltip_destroy ( )
CALLEE	14:2	14:2	9	pidgin_tooltip_destroy
LEAF_NODE	14:2	14:2	10	pidgin_tooltip_destroy
LEAF_NODE	14:24	14:24	9	(
LEAF_NODE	14:25	14:25	9	)
LEAF_NODE	14:26	14:26	7	;
LEAF_NODE	15:1	15:1	5	}
EXPR_STATEMENT	16:1	16:94	3	gtk_tree_view_get_path_at_pos ( GTK_TREE_VIEW ( tv ) , event -> x , event -> y , & path , NULL , NULL , NULL ) ;
EXPR	16:1	16:1	4	gtk_tree_view_get_path_at_pos ( GTK_TREE_VIEW ( tv ) , event -> x , event -> y , & path , NULL , NULL , NULL )
FUNCTION_CALL	16:1	16:93	5	gtk_tree_view_get_path_at_pos ( GTK_TREE_VIEW ( tv ) , event -> x , event -> y , & path , NULL , NULL , NULL )
CALLEE	16:1	16:1	6	gtk_tree_view_get_path_at_pos
LEAF_NODE	16:1	16:1	7	gtk_tree_view_get_path_at_pos
LEAF_NODE	16:30	16:30	6	(
ARGUMENT	16:31	16:31	6	GTK_TREE_VIEW ( tv )
FUNCTION_CALL	16:31	16:47	7	GTK_TREE_VIEW ( tv )
CALLEE	16:31	16:31	8	GTK_TREE_VIEW
LEAF_NODE	16:31	16:31	9	GTK_TREE_VIEW
LEAF_NODE	16:44	16:44	8	(
ARGUMENT	16:45	16:45	8	tv
FIELD	16:45	16:45	9	tv
LEAF_NODE	16:45	16:45	10	tv
LEAF_NODE	16:47	16:47	8	)
LEAF_NODE	16:48	16:48	6	,
ARGUMENT	16:50	16:50	6	event -> x
FIELD	16:50	16:57	7	event -> x
LEAF_NODE	16:50	16:50	8	event
LEAF_NODE	16:55	16:55	8	->
LEAF_NODE	16:57	16:57	8	x
LEAF_NODE	16:58	16:58	6	,
ARGUMENT	16:60	16:60	6	event -> y
FIELD	16:60	16:67	7	event -> y
LEAF_NODE	16:60	16:60	8	event
LEAF_NODE	16:65	16:65	8	->
LEAF_NODE	16:67	16:67	8	y
LEAF_NODE	16:68	16:68	6	,
ARGUMENT	16:70	16:70	6	& path
UNARY_EXPR	16:70	16:71	7	& path
UNARY_OPERATOR	16:70	16:70	8	&
LEAF_NODE	16:70	16:70	9	&
FIELD	16:71	16:71	8	path
LEAF_NODE	16:71	16:71	9	path
LEAF_NODE	16:75	16:75	6	,
ARGUMENT	16:77	16:77	6	NULL
FIELD	16:77	16:77	7	NULL
LEAF_NODE	16:77	16:77	8	NULL
LEAF_NODE	16:81	16:81	6	,
ARGUMENT	16:83	16:83	6	NULL
FIELD	16:83	16:83	7	NULL
LEAF_NODE	16:83	16:83	8	NULL
LEAF_NODE	16:87	16:87	6	,
ARGUMENT	16:89	16:89	6	NULL
FIELD	16:89	16:89	7	NULL
LEAF_NODE	16:89	16:89	8	NULL
LEAF_NODE	16:93	16:93	6	)
LEAF_NODE	16:94	16:94	4	;
SELECTION	17:1	17:19	3	
KEYWORD	17:1	17:1	4	if
LEAF_NODE	17:1	17:1	5	if
LEAF_NODE	17:4	17:4	4	(
CONDITION	17:5	17:5	4	path == NULL
EXPR	17:5	17:13	5	path == NULL
FIELD	17:5	17:5	6	path
LEAF_NODE	17:5	17:5	7	path
EQ_OPERATOR	17:10	17:10	6	==
LEAF_NODE	17:10	17:10	7	==
FIELD	17:13	17:13	6	NULL
LEAF_NODE	17:13	17:13	7	NULL
LEAF_NODE	17:17	17:17	4	)
STATEMENTS	17:19	20:1	4	
LEAF_NODE	17:19	17:19	5	{
STATEMENTS	18:2	19:2	5	
EXPR_STATEMENT	18:2	18:26	6	pidgin_tooltip_destroy ( ) ;
EXPR	18:2	18:2	7	pidgin_tooltip_destroy ( )
FUNCTION_CALL	18:2	18:25	8	pidgin_tooltip_destroy ( )
CALLEE	18:2	18:2	9	pidgin_tooltip_destroy
LEAF_NODE	18:2	18:2	10	pidgin_tooltip_destroy
LEAF_NODE	18:24	18:24	9	(
LEAF_NODE	18:25	18:25	9	)
LEAF_NODE	18:26	18:26	7	;
JUMP_STATEMENT	19:2	19:14	6	return FALSE ;
KEYWORD	19:2	19:2	7	return
LEAF_NODE	19:2	19:2	8	return
DESTINATION	19:9	19:9	7	FALSE
EXPR	19:9	19:9	8	FALSE
FIELD	19:9	19:9	9	FALSE
LEAF_NODE	19:9	19:9	10	FALSE
LEAF_NODE	19:14	19:14	7	;
LEAF_NODE	20:1	20:1	5	}
EXPR_STATEMENT	21:1	21:85	3	gtk_tree_view_get_cell_area ( GTK_TREE_VIEW ( tv ) , path , NULL , & pidgin_tooltip . tip_rect ) ;
EXPR	21:1	21:1	4	gtk_tree_view_get_cell_area ( GTK_TREE_VIEW ( tv ) , path , NULL , & pidgin_tooltip . tip_rect )
FUNCTION_CALL	21:1	21:84	5	gtk_tree_view_get_cell_area ( GTK_TREE_VIEW ( tv ) , path , NULL , & pidgin_tooltip . tip_rect )
CALLEE	21:1	21:1	6	gtk_tree_view_get_cell_area
LEAF_NODE	21:1	21:1	7	gtk_tree_view_get_cell_area
LEAF_NODE	21:28	21:28	6	(
ARGUMENT	21:29	21:29	6	GTK_TREE_VIEW ( tv )
FUNCTION_CALL	21:29	21:45	7	GTK_TREE_VIEW ( tv )
CALLEE	21:29	21:29	8	GTK_TREE_VIEW
LEAF_NODE	21:29	21:29	9	GTK_TREE_VIEW
LEAF_NODE	21:42	21:42	8	(
ARGUMENT	21:43	21:43	8	tv
FIELD	21:43	21:43	9	tv
LEAF_NODE	21:43	21:43	10	tv
LEAF_NODE	21:45	21:45	8	)
LEAF_NODE	21:46	21:46	6	,
ARGUMENT	21:48	21:48	6	path
FIELD	21:48	21:48	7	path
LEAF_NODE	21:48	21:48	8	path
LEAF_NODE	21:52	21:52	6	,
ARGUMENT	21:54	21:54	6	NULL
FIELD	21:54	21:54	7	NULL
LEAF_NODE	21:54	21:54	8	NULL
LEAF_NODE	21:58	21:58	6	,
ARGUMENT	21:60	21:60	6	& pidgin_tooltip . tip_rect
UNARY_EXPR	21:60	21:61	7	& pidgin_tooltip . tip_rect
UNARY_OPERATOR	21:60	21:60	8	&
LEAF_NODE	21:60	21:60	9	&
FIELD	21:61	21:76	8	pidgin_tooltip . tip_rect
LEAF_NODE	21:61	21:61	9	pidgin_tooltip
LEAF_NODE	21:75	21:75	9	.
LEAF_NODE	21:76	21:76	9	tip_rect
LEAF_NODE	21:84	21:84	6	)
LEAF_NODE	21:85	21:85	4	;
EXPR_STATEMENT	22:1	22:25	3	gtk_tree_path_free ( path ) ;
EXPR	22:1	22:1	4	gtk_tree_path_free ( path )
FUNCTION_CALL	22:1	22:24	5	gtk_tree_path_free ( path )
CALLEE	22:1	22:1	6	gtk_tree_path_free
LEAF_NODE	22:1	22:1	7	gtk_tree_path_free
LEAF_NODE	22:19	22:19	6	(
ARGUMENT	22:20	22:20	6	path
FIELD	22:20	22:20	7	path
LEAF_NODE	22:20	22:20	8	path
LEAF_NODE	22:24	22:24	6	)
LEAF_NODE	22:25	22:25	4	;
EXPR_STATEMENT	23:1	23:101	3	pidgin_tooltip . timeout = g_timeout_add ( tooltip_delay , ( GSourceFunc ) pidgin_tooltip_timeout , userdata ) ;
EXPR	23:1	23:1	4	pidgin_tooltip . timeout = g_timeout_add ( tooltip_delay , ( GSourceFunc ) pidgin_tooltip_timeout , userdata )
ASSIGN	23:1	23:26	5	pidgin_tooltip . timeout = g_timeout_add ( tooltip_delay , ( GSourceFunc ) pidgin_tooltip_timeout , userdata )
LVAL	23:1	23:1	6	pidgin_tooltip . timeout
FIELD	23:1	23:16	7	pidgin_tooltip . timeout
LEAF_NODE	23:1	23:1	8	pidgin_tooltip
LEAF_NODE	23:15	23:15	8	.
LEAF_NODE	23:16	23:16	8	timeout
ASSIGN_OP	23:24	23:24	6	=
LEAF_NODE	23:24	23:24	7	=
RVAL	23:26	23:26	6	g_timeout_add ( tooltip_delay , ( GSourceFunc ) pidgin_tooltip_timeout , userdata )
FUNCTION_CALL	23:26	23:100	7	g_timeout_add ( tooltip_delay , ( GSourceFunc ) pidgin_tooltip_timeout , userdata )
CALLEE	23:26	23:26	8	g_timeout_add
LEAF_NODE	23:26	23:26	9	g_timeout_add
LEAF_NODE	23:39	23:39	8	(
ARGUMENT	23:40	23:40	8	tooltip_delay
FIELD	23:40	23:40	9	tooltip_delay
LEAF_NODE	23:40	23:40	10	tooltip_delay
LEAF_NODE	23:53	23:53	8	,
ARGUMENT	23:55	23:68	8	( GSourceFunc ) pidgin_tooltip_timeout
LEAF_NODE	23:55	23:55	9	(
TYPE_NAME	23:56	23:56	9	GSourceFunc
LEAF_NODE	23:56	23:56	10	GSourceFunc
LEAF_NODE	23:67	23:67	9	)
FIELD	23:68	23:68	9	pidgin_tooltip_timeout
LEAF_NODE	23:68	23:68	10	pidgin_tooltip_timeout
LEAF_NODE	23:90	23:90	8	,
ARGUMENT	23:92	23:92	8	userdata
FIELD	23:92	23:92	9	userdata
LEAF_NODE	23:92	23:92	10	userdata
LEAF_NODE	23:100	23:100	8	)
LEAF_NODE	23:101	23:101	4	;
JUMP_STATEMENT	24:1	24:13	3	return FALSE ;
KEYWORD	24:1	24:1	4	return
LEAF_NODE	24:1	24:1	5	return
DESTINATION	24:8	24:8	4	FALSE
EXPR	24:8	24:8	5	FALSE
FIELD	24:8	24:8	6	FALSE
LEAF_NODE	24:8	24:8	7	FALSE
LEAF_NODE	24:13	24:13	4	;
LEAF_NODE	25:0	25:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	18:0	1	
RETURN_TYPE	1:0	1:7	2	guint8 *
TYPE_NAME	1:0	1:0	3	guint8
LEAF_NODE	1:0	1:0	4	guint8
LEAF_NODE	1:7	1:7	3	*
FUNCTION_NAME	2:0	2:0	2	purple_ntlm_parse_type2
LEAF_NODE	2:0	2:0	3	purple_ntlm_parse_type2
PARAMETER_LIST	2:23	2:58	2	( const gchar * type2 , guint32 * flags )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:37	3	const gchar * type2
TYPE	2:24	2:36	4	const gchar *
TYPE_NAME	2:24	2:30	5	const gchar
LEAF_NODE	2:24	2:24	6	const
LEAF_NODE	2:30	2:30	6	gchar
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	type2
LEAF_NODE	2:37	2:37	5	type2
LEAF_NODE	2:42	2:42	3	,
PARAMETER_DECL	2:44	2:53	3	guint32 * flags
TYPE	2:44	2:52	4	guint32 *
TYPE_NAME	2:44	2:44	5	guint32
LEAF_NODE	2:44	2:44	6	guint32
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	flags
LEAF_NODE	2:53	2:53	5	flags
LEAF_NODE	2:58	2:58	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	17:1	2	
SIMPLE_DECL	4:1	4:13	3	gsize retlen ;
VAR_DECL	4:1	4:7	4	gsize retlen
TYPE	4:1	4:1	5	gsize
TYPE_NAME	4:1	4:1	6	gsize
LEAF_NODE	4:1	4:1	7	gsize
NAME	4:7	4:7	5	retlen
LEAF_NODE	4:7	4:7	6	retlen
LEAF_NODE	4:13	4:13	4	;
SIMPLE_DECL	5:1	5:27	3	struct type2_message * tmsg ;
VAR_DECL	5:1	5:23	4	struct type2_message * tmsg
TYPE	5:1	5:22	5	struct type2_message *
TYPE_NAME	5:1	5:8	6	struct type2_message
LEAF_NODE	5:1	5:1	7	struct
LEAF_NODE	5:8	5:8	7	type2_message
POINTER	5:22	5:22	6	*
LEAF_NODE	5:22	5:22	7	*
NAME	5:23	5:23	5	tmsg
LEAF_NODE	5:23	5:23	6	tmsg
LEAF_NODE	5:27	5:27	4	;
LEAF_NODE	6:1	6:1	3	static
SIMPLE_DECL	6:8	6:23	3	guint8 [ 8 ] nonce ;
VAR_DECL	6:8	6:15	4	guint8 [ 8 ] nonce
TYPE	6:8	6:20	5	guint8 [ 8 ]
TYPE_NAME	6:8	6:8	6	guint8
LEAF_NODE	6:8	6:8	7	guint8
TYPE_SUFFIX	6:20	6:22	6	[ 8 ]
LEAF_NODE	6:20	6:20	7	[
FIELD	6:21	6:21	7	8
LEAF_NODE	6:21	6:21	8	8
LEAF_NODE	6:22	6:22	7	]
NAME	6:15	6:15	5	nonce
LEAF_NODE	6:15	6:15	6	nonce
LEAF_NODE	6:23	6:23	4	;
EXPR_STATEMENT	7:1	7:67	3	tmsg = ( struct type2_message * ) purple_base64_decode ( type2 , & retlen ) ;
EXPR	7:1	7:1	4	tmsg = ( struct type2_message * ) purple_base64_decode ( type2 , & retlen )
ASSIGN	7:1	7:8	5	tmsg = ( struct type2_message * ) purple_base64_decode ( type2 , & retlen )
LVAL	7:1	7:1	6	tmsg
FIELD	7:1	7:1	7	tmsg
LEAF_NODE	7:1	7:1	8	tmsg
ASSIGN_OP	7:6	7:6	6	=
LEAF_NODE	7:6	7:6	7	=
RVAL	7:8	7:31	6	( struct type2_message * ) purple_base64_decode ( type2 , & retlen )
LEAF_NODE	7:8	7:8	7	(
TYPE_NAME	7:9	7:16	7	struct type2_message
LEAF_NODE	7:9	7:9	8	struct
LEAF_NODE	7:16	7:16	8	type2_message
LEAF_NODE	7:29	7:29	7	*
LEAF_NODE	7:30	7:30	7	)
FUNCTION_CALL	7:31	7:66	7	purple_base64_decode ( type2 , & retlen )
CALLEE	7:31	7:31	8	purple_base64_decode
LEAF_NODE	7:31	7:31	9	purple_base64_decode
LEAF_NODE	7:51	7:51	8	(
ARGUMENT	7:52	7:52	8	type2
FIELD	7:52	7:52	9	type2
LEAF_NODE	7:52	7:52	10	type2
LEAF_NODE	7:57	7:57	8	,
ARGUMENT	7:59	7:59	8	& retlen
UNARY_EXPR	7:59	7:60	9	& retlen
UNARY_OPERATOR	7:59	7:59	10	&
LEAF_NODE	7:59	7:59	11	&
FIELD	7:60	7:60	10	retlen
LEAF_NODE	7:60	7:60	11	retlen
LEAF_NODE	7:66	7:66	8	)
LEAF_NODE	7:67	7:67	4	;
LEAF_NODE	8:1	8:1	3	if
LEAF_NODE	8:4	8:4	3	(
LEAF_NODE	8:5	8:5	3	tmsg
LEAF_NODE	8:10	8:10	3	!=
LEAF_NODE	8:13	8:13	3	NULL
LEAF_NODE	8:18	8:18	3	&&
LEAF_NODE	8:21	8:21	3	retlen
LEAF_NODE	8:28	8:28	3	>=
LEAF_NODE	8:31	8:31	3	(
LEAF_NODE	8:32	8:32	3	sizeof
LEAF_NODE	8:38	8:38	3	(
LEAF_NODE	8:39	8:39	3	struct
LEAF_NODE	8:46	8:46	3	type2_message
LEAF_NODE	8:59	8:59	3	)
LEAF_NODE	8:61	8:61	3	-
LEAF_NODE	8:63	8:63	3	1
LEAF_NODE	8:64	8:64	3	)
LEAF_NODE	8:65	8:65	3	)
LEAF_NODE	8:67	8:67	3	{
STATEMENTS	9:2	10:2	3	
EXPR_STATEMENT	9:2	9:31	4	memcpy ( nonce , tmsg -> nonce , 8 ) ;
EXPR	9:2	9:2	5	memcpy ( nonce , tmsg -> nonce , 8 )
FUNCTION_CALL	9:2	9:30	6	memcpy ( nonce , tmsg -> nonce , 8 )
CALLEE	9:2	9:2	7	memcpy
LEAF_NODE	9:2	9:2	8	memcpy
LEAF_NODE	9:8	9:8	7	(
ARGUMENT	9:9	9:9	7	nonce
FIELD	9:9	9:9	8	nonce
LEAF_NODE	9:9	9:9	9	nonce
LEAF_NODE	9:14	9:14	7	,
ARGUMENT	9:16	9:16	7	tmsg -> nonce
FIELD	9:16	9:22	8	tmsg -> nonce
LEAF_NODE	9:16	9:16	9	tmsg
LEAF_NODE	9:20	9:20	9	->
LEAF_NODE	9:22	9:22	9	nonce
LEAF_NODE	9:27	9:27	7	,
ARGUMENT	9:29	9:29	7	8
FIELD	9:29	9:29	8	8
LEAF_NODE	9:29	9:29	9	8
LEAF_NODE	9:30	9:30	7	)
LEAF_NODE	9:31	9:31	5	;
SELECTION	10:2	11:3	4	
KEYWORD	10:2	10:2	5	if
LEAF_NODE	10:2	10:2	6	if
LEAF_NODE	10:5	10:5	5	(
CONDITION	10:6	10:6	5	flags != NULL
EXPR	10:6	10:15	6	flags != NULL
FIELD	10:6	10:6	7	flags
LEAF_NODE	10:6	10:6	8	flags
EQ_OPERATOR	10:12	10:12	7	!=
LEAF_NODE	10:12	10:12	8	!=
FIELD	10:15	10:15	7	NULL
LEAF_NODE	10:15	10:15	8	NULL
LEAF_NODE	10:19	10:19	5	)
STATEMENTS	11:3	11:3	5	
EXPR_STATEMENT	11:3	11:40	6	* flags = GUINT16_FROM_LE ( tmsg -> flags ) ;
EXPR	11:3	11:3	7	* flags = GUINT16_FROM_LE ( tmsg -> flags )
ASSIGN	11:3	11:12	8	* flags = GUINT16_FROM_LE ( tmsg -> flags )
LVAL	11:3	11:3	9	* flags
UNARY_EXPR	11:3	11:4	10	* flags
UNARY_OPERATOR	11:3	11:3	11	*
LEAF_NODE	11:3	11:3	12	*
FIELD	11:4	11:4	11	flags
LEAF_NODE	11:4	11:4	12	flags
ASSIGN_OP	11:10	11:10	9	=
LEAF_NODE	11:10	11:10	10	=
RVAL	11:12	11:12	9	GUINT16_FROM_LE ( tmsg -> flags )
FUNCTION_CALL	11:12	11:39	10	GUINT16_FROM_LE ( tmsg -> flags )
CALLEE	11:12	11:12	11	GUINT16_FROM_LE
LEAF_NODE	11:12	11:12	12	GUINT16_FROM_LE
LEAF_NODE	11:27	11:27	11	(
ARGUMENT	11:28	11:28	11	tmsg -> flags
FIELD	11:28	11:34	12	tmsg -> flags
LEAF_NODE	11:28	11:28	13	tmsg
LEAF_NODE	11:32	11:32	13	->
LEAF_NODE	11:34	11:34	13	flags
LEAF_NODE	11:39	11:39	11	)
LEAF_NODE	11:40	11:40	7	;
LEAF_NODE	12:1	12:1	3	}
SELECTION	12:3	12:8	3	
KEYWORD	12:3	12:3	4	else
LEAF_NODE	12:3	12:3	5	else
STATEMENTS	12:8	15:1	4	
LEAF_NODE	12:8	12:8	5	{
STATEMENTS	13:2	14:2	5	
EXPR_STATEMENT	13:2	13:88	6	purple_debug_error ( "ntlm" , "Unable to parse type2 message - returning empty nonce.\n" ) ;
EXPR	13:2	13:2	7	purple_debug_error ( "ntlm" , "Unable to parse type2 message - returning empty nonce.\n" )
FUNCTION_CALL	13:2	13:87	8	purple_debug_error ( "ntlm" , "Unable to parse type2 message - returning empty nonce.\n" )
CALLEE	13:2	13:2	9	purple_debug_error
LEAF_NODE	13:2	13:2	10	purple_debug_error
LEAF_NODE	13:20	13:20	9	(
ARGUMENT	13:21	13:21	9	"ntlm"
FIELD	13:21	13:21	10	"ntlm"
LEAF_NODE	13:21	13:21	11	"ntlm"
LEAF_NODE	13:27	13:27	9	,
ARGUMENT	13:29	13:29	9	"Unable to parse type2 message - returning empty nonce.\n"
FIELD	13:29	13:29	10	"Unable to parse type2 message - returning empty nonce.\n"
LEAF_NODE	13:29	13:29	11	"Unable to parse type2 message - returning empty nonce.\n"
LEAF_NODE	13:87	13:87	9	)
LEAF_NODE	13:88	13:88	7	;
EXPR_STATEMENT	14:2	14:21	6	memset ( nonce , 0 , 8 ) ;
EXPR	14:2	14:2	7	memset ( nonce , 0 , 8 )
FUNCTION_CALL	14:2	14:20	8	memset ( nonce , 0 , 8 )
CALLEE	14:2	14:2	9	memset
LEAF_NODE	14:2	14:2	10	memset
LEAF_NODE	14:8	14:8	9	(
ARGUMENT	14:9	14:9	9	nonce
FIELD	14:9	14:9	10	nonce
LEAF_NODE	14:9	14:9	11	nonce
LEAF_NODE	14:14	14:14	9	,
ARGUMENT	14:16	14:16	9	0
FIELD	14:16	14:16	10	0
LEAF_NODE	14:16	14:16	11	0
LEAF_NODE	14:17	14:17	9	,
ARGUMENT	14:19	14:19	9	8
FIELD	14:19	14:19	10	8
LEAF_NODE	14:19	14:19	11	8
LEAF_NODE	14:20	14:20	9	)
LEAF_NODE	14:21	14:21	7	;
LEAF_NODE	15:1	15:1	5	}
EXPR_STATEMENT	16:1	16:13	3	g_free ( tmsg ) ;
EXPR	16:1	16:1	4	g_free ( tmsg )
FUNCTION_CALL	16:1	16:12	5	g_free ( tmsg )
CALLEE	16:1	16:1	6	g_free
LEAF_NODE	16:1	16:1	7	g_free
LEAF_NODE	16:7	16:7	6	(
ARGUMENT	16:8	16:8	6	tmsg
FIELD	16:8	16:8	7	tmsg
LEAF_NODE	16:8	16:8	8	tmsg
LEAF_NODE	16:12	16:12	6	)
LEAF_NODE	16:13	16:13	4	;
JUMP_STATEMENT	17:1	17:13	3	return nonce ;
KEYWORD	17:1	17:1	4	return
LEAF_NODE	17:1	17:1	5	return
DESTINATION	17:8	17:8	4	nonce
EXPR	17:8	17:8	5	nonce
FIELD	17:8	17:8	6	nonce
LEAF_NODE	17:8	17:8	7	nonce
LEAF_NODE	17:13	17:13	4	;
LEAF_NODE	18:0	18:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	deny_no_add_cb
LEAF_NODE	2:0	2:0	3	deny_no_add_cb
PARAMETER_LIST	2:14	2:31	2	( auth_and_add * aa )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:29	3	auth_and_add * aa
TYPE	2:15	2:28	4	auth_and_add *
TYPE_NAME	2:15	2:15	5	auth_and_add
LEAF_NODE	2:15	2:15	6	auth_and_add
POINTER	2:28	2:28	5	*
LEAF_NODE	2:28	2:28	6	*
NAME	2:29	2:29	4	aa
LEAF_NODE	2:29	2:29	5	aa
LEAF_NODE	2:31	2:31	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	4:22	3	aa -> deny_cb ( aa -> data ) ;
EXPR	4:1	4:1	4	aa -> deny_cb ( aa -> data )
FUNCTION_CALL	4:1	4:21	5	aa -> deny_cb ( aa -> data )
CALLEE	4:1	4:5	6	aa -> deny_cb
LEAF_NODE	4:1	4:1	7	aa
LEAF_NODE	4:3	4:3	7	->
LEAF_NODE	4:5	4:5	7	deny_cb
LEAF_NODE	4:12	4:12	6	(
ARGUMENT	4:13	4:13	6	aa -> data
FIELD	4:13	4:17	7	aa -> data
LEAF_NODE	4:13	4:13	8	aa
LEAF_NODE	4:15	4:15	8	->
LEAF_NODE	4:17	4:17	8	data
LEAF_NODE	4:21	4:21	6	)
LEAF_NODE	4:22	4:22	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	11:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	populate_pounces_list
LEAF_NODE	2:0	2:0	3	populate_pounces_list
PARAMETER_LIST	2:21	2:44	2	( PouncesManager * dialog )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:38	3	PouncesManager * dialog
TYPE	2:22	2:37	4	PouncesManager *
TYPE_NAME	2:22	2:22	5	PouncesManager
LEAF_NODE	2:22	2:22	6	PouncesManager
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	dialog
LEAF_NODE	2:38	2:38	5	dialog
LEAF_NODE	2:44	2:44	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SIMPLE_DECL	4:1	4:15	3	GList * pounces ;
VAR_DECL	4:1	4:8	4	GList * pounces
TYPE	4:1	4:7	5	GList *
TYPE_NAME	4:1	4:1	6	GList
LEAF_NODE	4:1	4:1	7	GList
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	pounces
LEAF_NODE	4:8	4:8	6	pounces
LEAF_NODE	4:15	4:15	4	;
EXPR_STATEMENT	5:1	5:36	3	gtk_list_store_clear ( dialog -> model ) ;
EXPR	5:1	5:1	4	gtk_list_store_clear ( dialog -> model )
FUNCTION_CALL	5:1	5:35	5	gtk_list_store_clear ( dialog -> model )
CALLEE	5:1	5:1	6	gtk_list_store_clear
LEAF_NODE	5:1	5:1	7	gtk_list_store_clear
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:22	6	dialog -> model
FIELD	5:22	5:30	7	dialog -> model
LEAF_NODE	5:22	5:22	8	dialog
LEAF_NODE	5:28	5:28	8	->
LEAF_NODE	5:30	5:30	8	model
LEAF_NODE	5:35	5:35	6	)
LEAF_NODE	5:36	5:36	4	;
ITERATION	6:1	8:1	3	
KEYWORD	6:1	6:1	4	for
LEAF_NODE	6:1	6:1	5	for
LEAF_NODE	6:5	6:5	4	(
FOR_INIT	6:6	6:56	4	pounces = purple_pounces_get_all_for_ui ( PIDGIN_UI ) ;
EXPR	6:6	6:6	5	pounces = purple_pounces_get_all_for_ui ( PIDGIN_UI )
ASSIGN	6:6	6:16	6	pounces = purple_pounces_get_all_for_ui ( PIDGIN_UI )
LVAL	6:6	6:6	7	pounces
FIELD	6:6	6:6	8	pounces
LEAF_NODE	6:6	6:6	9	pounces
ASSIGN_OP	6:14	6:14	7	=
LEAF_NODE	6:14	6:14	8	=
RVAL	6:16	6:16	7	purple_pounces_get_all_for_ui ( PIDGIN_UI )
FUNCTION_CALL	6:16	6:55	8	purple_pounces_get_all_for_ui ( PIDGIN_UI )
CALLEE	6:16	6:16	9	purple_pounces_get_all_for_ui
LEAF_NODE	6:16	6:16	10	purple_pounces_get_all_for_ui
LEAF_NODE	6:45	6:45	9	(
ARGUMENT	6:46	6:46	9	PIDGIN_UI
FIELD	6:46	6:46	10	PIDGIN_UI
LEAF_NODE	6:46	6:46	11	PIDGIN_UI
LEAF_NODE	6:55	6:55	9	)
LEAF_NODE	6:56	6:56	5	;
CONDITION	6:58	6:58	4	pounces != NULL
EXPR	6:58	6:69	5	pounces != NULL
FIELD	6:58	6:58	6	pounces
LEAF_NODE	6:58	6:58	7	pounces
EQ_OPERATOR	6:66	6:66	6	!=
LEAF_NODE	6:66	6:66	7	!=
FIELD	6:69	6:69	6	NULL
LEAF_NODE	6:69	6:69	7	NULL
LEAF_NODE	6:73	6:73	4	;
FOR_EXPR	7:3	7:3	4	pounces = g_list_delete_link ( pounces , pounces )
EXPR	7:3	7:3	5	pounces = g_list_delete_link ( pounces , pounces )
ASSIGN	7:3	7:13	6	pounces = g_list_delete_link ( pounces , pounces )
LVAL	7:3	7:3	7	pounces
FIELD	7:3	7:3	8	pounces
LEAF_NODE	7:3	7:3	9	pounces
ASSIGN_OP	7:11	7:11	7	=
LEAF_NODE	7:11	7:11	8	=
RVAL	7:13	7:13	7	g_list_delete_link ( pounces , pounces )
FUNCTION_CALL	7:13	7:48	8	g_list_delete_link ( pounces , pounces )
CALLEE	7:13	7:13	9	g_list_delete_link
LEAF_NODE	7:13	7:13	10	g_list_delete_link
LEAF_NODE	7:31	7:31	9	(
ARGUMENT	7:32	7:32	9	pounces
FIELD	7:32	7:32	10	pounces
LEAF_NODE	7:32	7:32	11	pounces
LEAF_NODE	7:39	7:39	9	,
ARGUMENT	7:41	7:41	9	pounces
FIELD	7:41	7:41	10	pounces
LEAF_NODE	7:41	7:41	11	pounces
LEAF_NODE	7:48	7:48	9	)
LEAF_NODE	7:49	7:49	4	)
STATEMENTS	8:1	10:1	4	
LEAF_NODE	8:1	8:1	5	{
STATEMENTS	9:2	9:2	5	
EXPR_STATEMENT	9:2	9:54	6	add_pounce_to_treeview ( dialog -> model , pounces -> data ) ;
EXPR	9:2	9:2	7	add_pounce_to_treeview ( dialog -> model , pounces -> data )
FUNCTION_CALL	9:2	9:53	8	add_pounce_to_treeview ( dialog -> model , pounces -> data )
CALLEE	9:2	9:2	9	add_pounce_to_treeview
LEAF_NODE	9:2	9:2	10	add_pounce_to_treeview
LEAF_NODE	9:24	9:24	9	(
ARGUMENT	9:25	9:25	9	dialog -> model
FIELD	9:25	9:33	10	dialog -> model
LEAF_NODE	9:25	9:25	11	dialog
LEAF_NODE	9:31	9:31	11	->
LEAF_NODE	9:33	9:33	11	model
LEAF_NODE	9:38	9:38	9	,
ARGUMENT	9:40	9:40	9	pounces -> data
FIELD	9:40	9:49	10	pounces -> data
LEAF_NODE	9:40	9:40	11	pounces
LEAF_NODE	9:47	9:47	11	->
LEAF_NODE	9:49	9:49	11	data
LEAF_NODE	9:53	9:53	9	)
LEAF_NODE	9:54	9:54	7	;
LEAF_NODE	10:1	10:1	5	}
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	19:0	1	
RETURN_TYPE	2:0	2:7	2	static gboolean
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	gboolean
LEAF_NODE	2:7	2:7	4	gboolean
FUNCTION_NAME	2:16	2:16	2	remove_current_mech
LEAF_NODE	2:16	2:16	3	remove_current_mech
PARAMETER_LIST	2:35	2:52	2	( JabberStream * js )
LEAF_NODE	2:35	2:35	3	(
PARAMETER_DECL	2:36	2:50	3	JabberStream * js
TYPE	2:36	2:49	4	JabberStream *
TYPE_NAME	2:36	2:36	5	JabberStream
LEAF_NODE	2:36	2:36	6	JabberStream
POINTER	2:49	2:49	5	*
LEAF_NODE	2:49	2:49	6	*
NAME	2:50	2:50	4	js
LEAF_NODE	2:50	2:50	5	js
LEAF_NODE	2:52	2:52	3	)
LEAF_NODE	2:54	2:54	2	{
STATEMENTS	3:1	18:1	2	
SIMPLE_DECL	3:1	3:10	3	char * pos ;
VAR_DECL	3:1	3:7	4	char * pos
TYPE	3:1	3:6	5	char *
TYPE_NAME	3:1	3:1	6	char
LEAF_NODE	3:1	3:1	7	char
POINTER	3:6	3:6	6	*
LEAF_NODE	3:6	3:6	7	*
NAME	3:7	3:7	5	pos
LEAF_NODE	3:7	3:7	6	pos
LEAF_NODE	3:10	3:10	4	;
SELECTION	4:1	4:60	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	( pos = strstr ( js -> sasl_mechs -> str , js -> current_mech ) )
EXPR	4:5	4:57	5	( pos = strstr ( js -> sasl_mechs -> str , js -> current_mech ) )
LEAF_NODE	4:5	4:5	6	(
ASSIGN	4:6	4:12	6	pos = strstr ( js -> sasl_mechs -> str , js -> current_mech )
LVAL	4:6	4:6	7	pos
FIELD	4:6	4:6	8	pos
LEAF_NODE	4:6	4:6	9	pos
ASSIGN_OP	4:10	4:10	7	=
LEAF_NODE	4:10	4:10	8	=
RVAL	4:12	4:12	7	strstr ( js -> sasl_mechs -> str , js -> current_mech )
FUNCTION_CALL	4:12	4:56	8	strstr ( js -> sasl_mechs -> str , js -> current_mech )
CALLEE	4:12	4:12	9	strstr
LEAF_NODE	4:12	4:12	10	strstr
LEAF_NODE	4:18	4:18	9	(
ARGUMENT	4:19	4:19	9	js -> sasl_mechs -> str
FIELD	4:19	4:35	10	js -> sasl_mechs -> str
LEAF_NODE	4:19	4:19	11	js
LEAF_NODE	4:21	4:21	11	->
LEAF_NODE	4:23	4:23	11	sasl_mechs
LEAF_NODE	4:33	4:33	11	->
LEAF_NODE	4:35	4:35	11	str
LEAF_NODE	4:38	4:38	9	,
ARGUMENT	4:40	4:40	9	js -> current_mech
FIELD	4:40	4:44	10	js -> current_mech
LEAF_NODE	4:40	4:40	11	js
LEAF_NODE	4:42	4:42	11	->
LEAF_NODE	4:44	4:44	11	current_mech
LEAF_NODE	4:56	4:56	9	)
LEAF_NODE	4:57	4:57	6	)
LEAF_NODE	4:58	4:58	4	)
STATEMENTS	4:60	17:1	4	
LEAF_NODE	4:60	4:60	5	{
STATEMENTS	5:2	16:2	5	
SIMPLE_DECL	5:2	5:36	6	int len ; len = strlen ( js -> current_mech ) ;
VAR_DECL	5:2	5:6	7	int len ; len = strlen ( js -> current_mech )
TYPE	5:2	5:2	8	int
TYPE_NAME	5:2	5:2	9	int
LEAF_NODE	5:2	5:2	10	int
NAME	5:6	5:6	8	len
LEAF_NODE	5:6	5:6	9	len
LEAF_NODE	0:0	0:0	8	;
INIT	5:6	5:6	8	len = strlen ( js -> current_mech )
ASSIGN	5:6	5:12	9	len = strlen ( js -> current_mech )
LVAL	5:6	5:6	10	len
NAME	5:6	5:6	11	len
LEAF_NODE	5:6	5:6	12	len
ASSIGN_OP	5:10	5:10	10	=
LEAF_NODE	5:10	5:10	11	=
RVAL	5:12	5:12	10	strlen ( js -> current_mech )
FUNCTION_CALL	5:12	5:35	11	strlen ( js -> current_mech )
CALLEE	5:12	5:12	12	strlen
LEAF_NODE	5:12	5:12	13	strlen
LEAF_NODE	5:18	5:18	12	(
ARGUMENT	5:19	5:19	12	js -> current_mech
FIELD	5:19	5:23	13	js -> current_mech
LEAF_NODE	5:19	5:19	14	js
LEAF_NODE	5:21	5:21	14	->
LEAF_NODE	5:23	5:23	14	current_mech
LEAF_NODE	5:35	5:35	12	)
LEAF_NODE	5:36	5:36	7	;
SELECTION	7:2	7:54	6	
KEYWORD	7:2	7:2	7	if
LEAF_NODE	7:2	7:2	8	if
LEAF_NODE	7:5	7:5	7	(
CONDITION	7:6	7:6	7	pos > js -> sasl_mechs -> str && * ( pos - 1 ) == ' '
EXPR	7:6	7:6	8	pos > js -> sasl_mechs -> str && * ( pos - 1 ) == ' '
AND	7:6	7:35	9	pos > js -> sasl_mechs -> str && * ( pos - 1 ) == ' '
EXPR	7:6	7:12	10	pos > js -> sasl_mechs -> str
FIELD	7:6	7:6	11	pos
LEAF_NODE	7:6	7:6	12	pos
REL_OPERATOR	7:10	7:10	11	>
LEAF_NODE	7:10	7:10	12	>
FIELD	7:12	7:28	11	js -> sasl_mechs -> str
LEAF_NODE	7:12	7:12	12	js
LEAF_NODE	7:14	7:14	12	->
LEAF_NODE	7:16	7:16	12	sasl_mechs
LEAF_NODE	7:26	7:26	12	->
LEAF_NODE	7:28	7:28	12	str
LEAF_NODE	7:32	7:32	10	&&
EXPR	7:35	7:49	10	* ( pos - 1 ) == ' '
UNARY_EXPR	7:35	7:44	11	* ( pos - 1 )
UNARY_OPERATOR	7:35	7:35	12	*
LEAF_NODE	7:35	7:35	13	*
LEAF_NODE	7:36	7:36	12	(
FIELD	7:37	7:37	12	pos
LEAF_NODE	7:37	7:37	13	pos
LEAF_NODE	7:41	7:41	12	-
FIELD	7:43	7:43	12	1
LEAF_NODE	7:43	7:43	13	1
LEAF_NODE	7:44	7:44	12	)
EQ_OPERATOR	7:46	7:46	11	==
LEAF_NODE	7:46	7:46	12	==
FIELD	7:49	7:49	11	' '
LEAF_NODE	7:49	7:49	12	' '
LEAF_NODE	7:52	7:52	7	)
STATEMENTS	7:54	11:2	7	
LEAF_NODE	7:54	7:54	8	{
STATEMENTS	9:3	10:3	8	
EXPR_STATEMENT	9:3	9:8	9	pos -- ;
EXPR	9:3	9:3	10	pos --
FIELD	9:3	9:6	11	pos --
LEAF_NODE	9:3	9:3	12	pos
LEAF_NODE	9:6	9:6	12	--
LEAF_NODE	9:8	9:8	10	;
EXPR_STATEMENT	10:3	10:8	9	len ++ ;
EXPR	10:3	10:3	10	len ++
FIELD	10:3	10:6	11	len ++
LEAF_NODE	10:3	10:3	12	len
LEAF_NODE	10:6	10:6	12	++
LEAF_NODE	10:8	10:8	10	;
LEAF_NODE	11:2	11:2	8	}
SELECTION	11:4	11:9	6	
KEYWORD	11:4	11:4	7	else
LEAF_NODE	11:4	11:4	8	else
STATEMENTS	11:9	11:9	7	
SELECTION	11:9	11:55	8	
KEYWORD	11:9	11:9	9	if
LEAF_NODE	11:9	11:9	10	if
LEAF_NODE	11:12	11:12	9	(
CONDITION	11:13	11:13	9	strlen ( pos ) > len && * ( pos + len ) == ' '
EXPR	11:13	11:13	10	strlen ( pos ) > len && * ( pos + len ) == ' '
AND	11:13	11:34	11	strlen ( pos ) > len && * ( pos + len ) == ' '
EXPR	11:13	11:27	12	strlen ( pos ) > len
FUNCTION_CALL	11:13	11:23	13	strlen ( pos )
CALLEE	11:13	11:13	14	strlen
LEAF_NODE	11:13	11:13	15	strlen
LEAF_NODE	11:19	11:19	14	(
ARGUMENT	11:20	11:20	14	pos
FIELD	11:20	11:20	15	pos
LEAF_NODE	11:20	11:20	16	pos
LEAF_NODE	11:23	11:23	14	)
REL_OPERATOR	11:25	11:25	13	>
LEAF_NODE	11:25	11:25	14	>
FIELD	11:27	11:27	13	len
LEAF_NODE	11:27	11:27	14	len
LEAF_NODE	11:31	11:31	12	&&
EXPR	11:34	11:50	12	* ( pos + len ) == ' '
UNARY_EXPR	11:34	11:45	13	* ( pos + len )
UNARY_OPERATOR	11:34	11:34	14	*
LEAF_NODE	11:34	11:34	15	*
LEAF_NODE	11:35	11:35	14	(
FIELD	11:36	11:36	14	pos
LEAF_NODE	11:36	11:36	15	pos
LEAF_NODE	11:40	11:40	14	+
FIELD	11:42	11:42	14	len
LEAF_NODE	11:42	11:42	15	len
LEAF_NODE	11:45	11:45	14	)
EQ_OPERATOR	11:47	11:47	13	==
LEAF_NODE	11:47	11:47	14	==
FIELD	11:50	11:50	13	' '
LEAF_NODE	11:50	11:50	14	' '
LEAF_NODE	11:53	11:53	9	)
STATEMENTS	11:55	14:2	9	
LEAF_NODE	11:55	11:55	10	{
STATEMENTS	13:3	13:3	10	
EXPR_STATEMENT	13:3	13:8	11	len ++ ;
EXPR	13:3	13:3	12	len ++
FIELD	13:3	13:6	13	len ++
LEAF_NODE	13:3	13:3	14	len
LEAF_NODE	13:6	13:6	14	++
LEAF_NODE	13:8	13:8	12	;
LEAF_NODE	14:2	14:2	10	}
EXPR_STATEMENT	15:2	15:64	6	g_string_erase ( js -> sasl_mechs , pos - js -> sasl_mechs -> str , len ) ;
EXPR	15:2	15:2	7	g_string_erase ( js -> sasl_mechs , pos - js -> sasl_mechs -> str , len )
FUNCTION_CALL	15:2	15:63	8	g_string_erase ( js -> sasl_mechs , pos - js -> sasl_mechs -> str , len )
CALLEE	15:2	15:2	9	g_string_erase
LEAF_NODE	15:2	15:2	10	g_string_erase
LEAF_NODE	15:16	15:16	9	(
ARGUMENT	15:17	15:17	9	js -> sasl_mechs
FIELD	15:17	15:21	10	js -> sasl_mechs
LEAF_NODE	15:17	15:17	11	js
LEAF_NODE	15:19	15:19	11	->
LEAF_NODE	15:21	15:21	11	sasl_mechs
LEAF_NODE	15:31	15:31	9	,
ARGUMENT	15:33	15:39	9	pos - js -> sasl_mechs -> str
FIELD	15:33	15:33	10	pos
LEAF_NODE	15:33	15:33	11	pos
LEAF_NODE	15:37	15:37	10	-
FIELD	15:39	15:55	10	js -> sasl_mechs -> str
LEAF_NODE	15:39	15:39	11	js
LEAF_NODE	15:41	15:41	11	->
LEAF_NODE	15:43	15:43	11	sasl_mechs
LEAF_NODE	15:53	15:53	11	->
LEAF_NODE	15:55	15:55	11	str
LEAF_NODE	15:58	15:58	9	,
ARGUMENT	15:60	15:60	9	len
FIELD	15:60	15:60	10	len
LEAF_NODE	15:60	15:60	11	len
LEAF_NODE	15:63	15:63	9	)
LEAF_NODE	15:64	15:64	7	;
JUMP_STATEMENT	16:2	16:13	6	return TRUE ;
KEYWORD	16:2	16:2	7	return
LEAF_NODE	16:2	16:2	8	return
DESTINATION	16:9	16:9	7	TRUE
EXPR	16:9	16:9	8	TRUE
FIELD	16:9	16:9	9	TRUE
LEAF_NODE	16:9	16:9	10	TRUE
LEAF_NODE	16:13	16:13	7	;
LEAF_NODE	17:1	17:1	5	}
JUMP_STATEMENT	18:1	18:13	3	return FALSE ;
KEYWORD	18:1	18:1	4	return
LEAF_NODE	18:1	18:1	5	return
DESTINATION	18:8	18:8	4	FALSE
EXPR	18:8	18:8	5	FALSE
FIELD	18:8	18:8	6	FALSE
LEAF_NODE	18:8	18:8	7	FALSE
LEAF_NODE	18:13	18:13	4	;
LEAF_NODE	19:0	19:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	24:0	1	
RETURN_TYPE	2:0	2:7	2	static int
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	int
LEAF_NODE	2:7	2:7	4	int
FUNCTION_NAME	2:11	2:11	2	gg_dcc7_request_id
LEAF_NODE	2:11	2:11	3	gg_dcc7_request_id
PARAMETER_LIST	2:29	2:68	2	( struct gg_session * sess , uint32_t type )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:49	3	struct gg_session * sess
TYPE	2:30	2:48	4	struct gg_session *
TYPE_NAME	2:30	2:37	5	struct gg_session
LEAF_NODE	2:30	2:30	6	struct
LEAF_NODE	2:37	2:37	6	gg_session
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	sess
LEAF_NODE	2:49	2:49	5	sess
LEAF_NODE	2:53	2:53	3	,
PARAMETER_DECL	2:55	2:64	3	uint32_t type
TYPE	2:55	2:55	4	uint32_t
TYPE_NAME	2:55	2:55	5	uint32_t
LEAF_NODE	2:55	2:55	6	uint32_t
NAME	2:64	2:64	4	type
LEAF_NODE	2:64	2:64	5	type
LEAF_NODE	2:68	2:68	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	23:1	2	
SIMPLE_DECL	4:1	4:30	3	struct gg_dcc7_id_request pkt ;
VAR_DECL	4:1	4:27	4	struct gg_dcc7_id_request pkt
TYPE	4:1	4:1	5	struct gg_dcc7_id_request
TYPE_NAME	4:1	4:8	6	struct gg_dcc7_id_request
LEAF_NODE	4:1	4:1	7	struct
LEAF_NODE	4:8	4:8	7	gg_dcc7_id_request
NAME	4:27	4:27	5	pkt
LEAF_NODE	4:27	4:27	6	pkt
LEAF_NODE	4:30	4:30	4	;
EXPR_STATEMENT	5:1	5:89	3	gg_debug_session ( sess , GG_DEBUG_FUNCTION , "** gg_dcc7_request_id(%p, %d)\n" , sess , type ) ;
EXPR	5:1	5:1	4	gg_debug_session ( sess , GG_DEBUG_FUNCTION , "** gg_dcc7_request_id(%p, %d)\n" , sess , type )
FUNCTION_CALL	5:1	5:88	5	gg_debug_session ( sess , GG_DEBUG_FUNCTION , "** gg_dcc7_request_id(%p, %d)\n" , sess , type )
CALLEE	5:1	5:1	6	gg_debug_session
LEAF_NODE	5:1	5:1	7	gg_debug_session
LEAF_NODE	5:17	5:17	6	(
ARGUMENT	5:18	5:18	6	sess
FIELD	5:18	5:18	7	sess
LEAF_NODE	5:18	5:18	8	sess
LEAF_NODE	5:22	5:22	6	,
ARGUMENT	5:24	5:24	6	GG_DEBUG_FUNCTION
FIELD	5:24	5:24	7	GG_DEBUG_FUNCTION
LEAF_NODE	5:24	5:24	8	GG_DEBUG_FUNCTION
LEAF_NODE	5:41	5:41	6	,
ARGUMENT	5:43	5:43	6	"** gg_dcc7_request_id(%p, %d)\n"
FIELD	5:43	5:43	7	"** gg_dcc7_request_id(%p, %d)\n"
LEAF_NODE	5:43	5:43	8	"** gg_dcc7_request_id(%p, %d)\n"
LEAF_NODE	5:76	5:76	6	,
ARGUMENT	5:78	5:78	6	sess
FIELD	5:78	5:78	7	sess
LEAF_NODE	5:78	5:78	8	sess
LEAF_NODE	5:82	5:82	6	,
ARGUMENT	5:84	5:84	6	type
FIELD	5:84	5:84	7	type
LEAF_NODE	5:84	5:84	8	type
LEAF_NODE	5:88	5:88	6	)
LEAF_NODE	5:89	5:89	4	;
SELECTION	6:1	6:12	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	! sess
EXPR	6:5	6:5	5	! sess
UNARY_EXPR	6:5	6:6	6	! sess
UNARY_OPERATOR	6:5	6:5	7	!
LEAF_NODE	6:5	6:5	8	!
FIELD	6:6	6:6	7	sess
LEAF_NODE	6:6	6:6	8	sess
LEAF_NODE	6:10	6:10	4	)
STATEMENTS	6:12	10:1	4	
LEAF_NODE	6:12	6:12	5	{
STATEMENTS	7:2	9:2	5	
EXPR_STATEMENT	7:2	7:87	6	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_dcc7_request_id() invalid parameters\n" ) ;
EXPR	7:2	7:2	7	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_dcc7_request_id() invalid parameters\n" )
FUNCTION_CALL	7:2	7:86	8	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_dcc7_request_id() invalid parameters\n" )
CALLEE	7:2	7:2	9	gg_debug_session
LEAF_NODE	7:2	7:2	10	gg_debug_session
LEAF_NODE	7:18	7:18	9	(
ARGUMENT	7:19	7:19	9	sess
FIELD	7:19	7:19	10	sess
LEAF_NODE	7:19	7:19	11	sess
LEAF_NODE	7:23	7:23	9	,
ARGUMENT	7:25	7:25	9	GG_DEBUG_MISC
FIELD	7:25	7:25	10	GG_DEBUG_MISC
LEAF_NODE	7:25	7:25	11	GG_DEBUG_MISC
LEAF_NODE	7:38	7:38	9	,
ARGUMENT	7:40	7:40	9	"// gg_dcc7_request_id() invalid parameters\n"
FIELD	7:40	7:40	10	"// gg_dcc7_request_id() invalid parameters\n"
LEAF_NODE	7:40	7:40	11	"// gg_dcc7_request_id() invalid parameters\n"
LEAF_NODE	7:86	7:86	9	)
LEAF_NODE	7:87	7:87	7	;
EXPR_STATEMENT	8:2	8:16	6	errno = EFAULT ;
EXPR	8:2	8:2	7	errno = EFAULT
ASSIGN	8:2	8:10	8	errno = EFAULT
LVAL	8:2	8:2	9	errno
FIELD	8:2	8:2	10	errno
LEAF_NODE	8:2	8:2	11	errno
ASSIGN_OP	8:8	8:8	9	=
LEAF_NODE	8:8	8:8	10	=
RVAL	8:10	8:10	9	EFAULT
FIELD	8:10	8:10	10	EFAULT
LEAF_NODE	8:10	8:10	11	EFAULT
LEAF_NODE	8:16	8:16	7	;
JUMP_STATEMENT	9:2	9:11	6	return - 1 ;
KEYWORD	9:2	9:2	7	return
LEAF_NODE	9:2	9:2	8	return
DESTINATION	9:9	9:9	7	- 1
EXPR	9:9	9:9	8	- 1
UNARY_EXPR	9:9	9:10	9	- 1
UNARY_OPERATOR	9:9	9:9	10	-
LEAF_NODE	9:9	9:9	11	-
FIELD	9:10	9:10	10	1
LEAF_NODE	9:10	9:10	11	1
LEAF_NODE	9:11	9:11	7	;
LEAF_NODE	10:1	10:1	5	}
SELECTION	11:1	11:40	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	sess -> state != GG_STATE_CONNECTED
EXPR	11:5	11:20	5	sess -> state != GG_STATE_CONNECTED
FIELD	11:5	11:11	6	sess -> state
LEAF_NODE	11:5	11:5	7	sess
LEAF_NODE	11:9	11:9	7	->
LEAF_NODE	11:11	11:11	7	state
EQ_OPERATOR	11:17	11:17	6	!=
LEAF_NODE	11:17	11:17	7	!=
FIELD	11:20	11:20	6	GG_STATE_CONNECTED
LEAF_NODE	11:20	11:20	7	GG_STATE_CONNECTED
LEAF_NODE	11:38	11:38	4	)
STATEMENTS	11:40	15:1	4	
LEAF_NODE	11:40	11:40	5	{
STATEMENTS	12:2	14:2	5	
EXPR_STATEMENT	12:2	12:82	6	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_dcc7_request_id() not connected\n" ) ;
EXPR	12:2	12:2	7	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_dcc7_request_id() not connected\n" )
FUNCTION_CALL	12:2	12:81	8	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_dcc7_request_id() not connected\n" )
CALLEE	12:2	12:2	9	gg_debug_session
LEAF_NODE	12:2	12:2	10	gg_debug_session
LEAF_NODE	12:18	12:18	9	(
ARGUMENT	12:19	12:19	9	sess
FIELD	12:19	12:19	10	sess
LEAF_NODE	12:19	12:19	11	sess
LEAF_NODE	12:23	12:23	9	,
ARGUMENT	12:25	12:25	9	GG_DEBUG_MISC
FIELD	12:25	12:25	10	GG_DEBUG_MISC
LEAF_NODE	12:25	12:25	11	GG_DEBUG_MISC
LEAF_NODE	12:38	12:38	9	,
ARGUMENT	12:40	12:40	9	"// gg_dcc7_request_id() not connected\n"
FIELD	12:40	12:40	10	"// gg_dcc7_request_id() not connected\n"
LEAF_NODE	12:40	12:40	11	"// gg_dcc7_request_id() not connected\n"
LEAF_NODE	12:81	12:81	9	)
LEAF_NODE	12:82	12:82	7	;
EXPR_STATEMENT	13:2	13:18	6	errno = ENOTCONN ;
EXPR	13:2	13:2	7	errno = ENOTCONN
ASSIGN	13:2	13:10	8	errno = ENOTCONN
LVAL	13:2	13:2	9	errno
FIELD	13:2	13:2	10	errno
LEAF_NODE	13:2	13:2	11	errno
ASSIGN_OP	13:8	13:8	9	=
LEAF_NODE	13:8	13:8	10	=
RVAL	13:10	13:10	9	ENOTCONN
FIELD	13:10	13:10	10	ENOTCONN
LEAF_NODE	13:10	13:10	11	ENOTCONN
LEAF_NODE	13:18	13:18	7	;
JUMP_STATEMENT	14:2	14:11	6	return - 1 ;
KEYWORD	14:2	14:2	7	return
LEAF_NODE	14:2	14:2	8	return
DESTINATION	14:9	14:9	7	- 1
EXPR	14:9	14:9	8	- 1
UNARY_EXPR	14:9	14:10	9	- 1
UNARY_OPERATOR	14:9	14:9	10	-
LEAF_NODE	14:9	14:9	11	-
FIELD	14:10	14:10	10	1
LEAF_NODE	14:10	14:10	11	1
LEAF_NODE	14:11	14:11	7	;
LEAF_NODE	15:1	15:1	5	}
SELECTION	16:1	16:62	3	
KEYWORD	16:1	16:1	4	if
LEAF_NODE	16:1	16:1	5	if
LEAF_NODE	16:4	16:4	4	(
CONDITION	16:5	16:5	4	type != GG_DCC7_TYPE_VOICE && type != GG_DCC7_TYPE_FILE
EXPR	16:5	16:5	5	type != GG_DCC7_TYPE_VOICE && type != GG_DCC7_TYPE_FILE
AND	16:5	16:35	6	type != GG_DCC7_TYPE_VOICE && type != GG_DCC7_TYPE_FILE
EXPR	16:5	16:13	7	type != GG_DCC7_TYPE_VOICE
FIELD	16:5	16:5	8	type
LEAF_NODE	16:5	16:5	9	type
EQ_OPERATOR	16:10	16:10	8	!=
LEAF_NODE	16:10	16:10	9	!=
FIELD	16:13	16:13	8	GG_DCC7_TYPE_VOICE
LEAF_NODE	16:13	16:13	9	GG_DCC7_TYPE_VOICE
LEAF_NODE	16:32	16:32	7	&&
EXPR	16:35	16:43	7	type != GG_DCC7_TYPE_FILE
FIELD	16:35	16:35	8	type
LEAF_NODE	16:35	16:35	9	type
EQ_OPERATOR	16:40	16:40	8	!=
LEAF_NODE	16:40	16:40	9	!=
FIELD	16:43	16:43	8	GG_DCC7_TYPE_FILE
LEAF_NODE	16:43	16:43	9	GG_DCC7_TYPE_FILE
LEAF_NODE	16:60	16:60	4	)
STATEMENTS	16:62	20:1	4	
LEAF_NODE	16:62	16:62	5	{
STATEMENTS	17:2	19:2	5	
EXPR_STATEMENT	17:2	17:101	6	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_dcc7_request_id() invalid transfer type (%d)\n" , type ) ;
EXPR	17:2	17:2	7	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_dcc7_request_id() invalid transfer type (%d)\n" , type )
FUNCTION_CALL	17:2	17:100	8	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_dcc7_request_id() invalid transfer type (%d)\n" , type )
CALLEE	17:2	17:2	9	gg_debug_session
LEAF_NODE	17:2	17:2	10	gg_debug_session
LEAF_NODE	17:18	17:18	9	(
ARGUMENT	17:19	17:19	9	sess
FIELD	17:19	17:19	10	sess
LEAF_NODE	17:19	17:19	11	sess
LEAF_NODE	17:23	17:23	9	,
ARGUMENT	17:25	17:25	9	GG_DEBUG_MISC
FIELD	17:25	17:25	10	GG_DEBUG_MISC
LEAF_NODE	17:25	17:25	11	GG_DEBUG_MISC
LEAF_NODE	17:38	17:38	9	,
ARGUMENT	17:40	17:40	9	"// gg_dcc7_request_id() invalid transfer type (%d)\n"
FIELD	17:40	17:40	10	"// gg_dcc7_request_id() invalid transfer type (%d)\n"
LEAF_NODE	17:40	17:40	11	"// gg_dcc7_request_id() invalid transfer type (%d)\n"
LEAF_NODE	17:94	17:94	9	,
ARGUMENT	17:96	17:96	9	type
FIELD	17:96	17:96	10	type
LEAF_NODE	17:96	17:96	11	type
LEAF_NODE	17:100	17:100	9	)
LEAF_NODE	17:101	17:101	7	;
EXPR_STATEMENT	18:2	18:16	6	errno = EINVAL ;
EXPR	18:2	18:2	7	errno = EINVAL
ASSIGN	18:2	18:10	8	errno = EINVAL
LVAL	18:2	18:2	9	errno
FIELD	18:2	18:2	10	errno
LEAF_NODE	18:2	18:2	11	errno
ASSIGN_OP	18:8	18:8	9	=
LEAF_NODE	18:8	18:8	10	=
RVAL	18:10	18:10	9	EINVAL
FIELD	18:10	18:10	10	EINVAL
LEAF_NODE	18:10	18:10	11	EINVAL
LEAF_NODE	18:16	18:16	7	;
JUMP_STATEMENT	19:2	19:11	6	return - 1 ;
KEYWORD	19:2	19:2	7	return
LEAF_NODE	19:2	19:2	8	return
DESTINATION	19:9	19:9	7	- 1
EXPR	19:9	19:9	8	- 1
UNARY_EXPR	19:9	19:10	9	- 1
UNARY_OPERATOR	19:9	19:9	10	-
LEAF_NODE	19:9	19:9	11	-
FIELD	19:10	19:10	10	1
LEAF_NODE	19:10	19:10	11	1
LEAF_NODE	19:11	19:11	7	;
LEAF_NODE	20:1	20:1	5	}
EXPR_STATEMENT	21:1	21:29	3	memset ( & pkt , 0 , sizeof ( pkt ) ) ;
EXPR	21:1	21:1	4	memset ( & pkt , 0 , sizeof ( pkt ) )
FUNCTION_CALL	21:1	21:28	5	memset ( & pkt , 0 , sizeof ( pkt ) )
CALLEE	21:1	21:1	6	memset
LEAF_NODE	21:1	21:1	7	memset
LEAF_NODE	21:7	21:7	6	(
ARGUMENT	21:8	21:8	6	& pkt
UNARY_EXPR	21:8	21:9	7	& pkt
UNARY_OPERATOR	21:8	21:8	8	&
LEAF_NODE	21:8	21:8	9	&
FIELD	21:9	21:9	8	pkt
LEAF_NODE	21:9	21:9	9	pkt
LEAF_NODE	21:12	21:12	6	,
ARGUMENT	21:14	21:14	6	0
FIELD	21:14	21:14	7	0
LEAF_NODE	21:14	21:14	8	0
LEAF_NODE	21:15	21:15	6	,
ARGUMENT	21:17	21:17	6	sizeof ( pkt )
FUNCTION_CALL	21:17	21:27	7	sizeof ( pkt )
CALLEE	21:17	21:17	8	sizeof
LEAF_NODE	21:17	21:17	9	sizeof
LEAF_NODE	21:23	21:23	8	(
ARGUMENT	21:24	21:24	8	pkt
FIELD	21:24	21:24	9	pkt
LEAF_NODE	21:24	21:24	10	pkt
LEAF_NODE	21:27	21:27	8	)
LEAF_NODE	21:28	21:28	6	)
LEAF_NODE	21:29	21:29	4	;
EXPR_STATEMENT	22:1	22:26	3	pkt . type = gg_fix32 ( type ) ;
EXPR	22:1	22:1	4	pkt . type = gg_fix32 ( type )
ASSIGN	22:1	22:12	5	pkt . type = gg_fix32 ( type )
LVAL	22:1	22:1	6	pkt . type
FIELD	22:1	22:5	7	pkt . type
LEAF_NODE	22:1	22:1	8	pkt
LEAF_NODE	22:4	22:4	8	.
LEAF_NODE	22:5	22:5	8	type
ASSIGN_OP	22:10	22:10	6	=
LEAF_NODE	22:10	22:10	7	=
RVAL	22:12	22:12	6	gg_fix32 ( type )
FUNCTION_CALL	22:12	22:25	7	gg_fix32 ( type )
CALLEE	22:12	22:12	8	gg_fix32
LEAF_NODE	22:12	22:12	9	gg_fix32
LEAF_NODE	22:20	22:20	8	(
ARGUMENT	22:21	22:21	8	type
FIELD	22:21	22:21	9	type
LEAF_NODE	22:21	22:21	10	type
LEAF_NODE	22:25	22:25	8	)
LEAF_NODE	22:26	22:26	4	;
JUMP_STATEMENT	23:1	23:73	3	return gg_send_packet ( sess , GG_DCC7_ID_REQUEST , & pkt , sizeof ( pkt ) , NULL ) ;
KEYWORD	23:1	23:1	4	return
LEAF_NODE	23:1	23:1	5	return
DESTINATION	23:8	23:8	4	gg_send_packet ( sess , GG_DCC7_ID_REQUEST , & pkt , sizeof ( pkt ) , NULL )
EXPR	23:8	23:8	5	gg_send_packet ( sess , GG_DCC7_ID_REQUEST , & pkt , sizeof ( pkt ) , NULL )
FUNCTION_CALL	23:8	23:72	6	gg_send_packet ( sess , GG_DCC7_ID_REQUEST , & pkt , sizeof ( pkt ) , NULL )
CALLEE	23:8	23:8	7	gg_send_packet
LEAF_NODE	23:8	23:8	8	gg_send_packet
LEAF_NODE	23:22	23:22	7	(
ARGUMENT	23:23	23:23	7	sess
FIELD	23:23	23:23	8	sess
LEAF_NODE	23:23	23:23	9	sess
LEAF_NODE	23:27	23:27	7	,
ARGUMENT	23:29	23:29	7	GG_DCC7_ID_REQUEST
FIELD	23:29	23:29	8	GG_DCC7_ID_REQUEST
LEAF_NODE	23:29	23:29	9	GG_DCC7_ID_REQUEST
LEAF_NODE	23:47	23:47	7	,
ARGUMENT	23:49	23:49	7	& pkt
UNARY_EXPR	23:49	23:50	8	& pkt
UNARY_OPERATOR	23:49	23:49	9	&
LEAF_NODE	23:49	23:49	10	&
FIELD	23:50	23:50	9	pkt
LEAF_NODE	23:50	23:50	10	pkt
LEAF_NODE	23:53	23:53	7	,
ARGUMENT	23:55	23:55	7	sizeof ( pkt )
FUNCTION_CALL	23:55	23:65	8	sizeof ( pkt )
CALLEE	23:55	23:55	9	sizeof
LEAF_NODE	23:55	23:55	10	sizeof
LEAF_NODE	23:61	23:61	9	(
ARGUMENT	23:62	23:62	9	pkt
FIELD	23:62	23:62	10	pkt
LEAF_NODE	23:62	23:62	11	pkt
LEAF_NODE	23:65	23:65	9	)
LEAF_NODE	23:66	23:66	7	,
ARGUMENT	23:68	23:68	7	NULL
FIELD	23:68	23:68	8	NULL
LEAF_NODE	23:68	23:68	9	NULL
LEAF_NODE	23:72	23:72	7	)
LEAF_NODE	23:73	23:73	4	;
LEAF_NODE	24:0	24:0	2	}

SOURCE_FILE	4:1	5:1	0	
SIMPLE_DECL	4:1	4:21	1	PurpleConnection * gc ;
VAR_DECL	4:1	4:19	2	PurpleConnection * gc
TYPE	4:1	4:18	3	PurpleConnection *
TYPE_NAME	4:1	4:1	4	PurpleConnection
LEAF_NODE	4:1	4:1	5	PurpleConnection
POINTER	4:18	4:18	4	*
LEAF_NODE	4:18	4:18	5	*
NAME	4:19	4:19	3	gc
LEAF_NODE	4:19	4:19	4	gc
LEAF_NODE	4:21	4:21	2	;
SIMPLE_DECL	5:1	5:17	1	char * who , char * text ;
INIT_DECL_LIST	5:1	5:1	2	char * who , char * text
VAR_DECL	5:1	5:7	3	char * who
TYPE	5:1	5:6	4	char *
TYPE_NAME	5:1	5:1	5	char
LEAF_NODE	5:1	5:1	6	char
POINTER	5:6	5:6	5	*
LEAF_NODE	5:6	5:6	6	*
NAME	5:7	5:7	4	who
LEAF_NODE	5:7	5:7	5	who
LEAF_NODE	5:10	5:10	3	,
VAR_DECL	5:1	5:13	3	char * text
TYPE	5:1	5:12	4	char *
TYPE_NAME	5:1	5:1	5	char
LEAF_NODE	5:1	5:1	6	char
POINTER	5:12	5:12	5	*
LEAF_NODE	5:12	5:12	6	*
NAME	5:13	5:13	4	text
LEAF_NODE	5:13	5:13	5	text
LEAF_NODE	5:17	5:17	2	;

SOURCE_FILE	4:1	7:1	0	
SIMPLE_DECL	4:1	4:30	1	PurpleConnection * gc ; gc = od -> gc ;
VAR_DECL	4:1	4:19	2	PurpleConnection * gc ; gc = od -> gc
TYPE	4:1	4:18	3	PurpleConnection *
TYPE_NAME	4:1	4:1	4	PurpleConnection
LEAF_NODE	4:1	4:1	5	PurpleConnection
POINTER	4:18	4:18	4	*
LEAF_NODE	4:18	4:18	5	*
NAME	4:19	4:19	3	gc
LEAF_NODE	4:19	4:19	4	gc
LEAF_NODE	0:0	0:0	3	;
INIT	4:19	4:19	3	gc = od -> gc
ASSIGN	4:19	4:24	4	gc = od -> gc
LVAL	4:19	4:19	5	gc
NAME	4:19	4:19	6	gc
LEAF_NODE	4:19	4:19	7	gc
ASSIGN_OP	4:22	4:22	5	=
LEAF_NODE	4:22	4:22	6	=
RVAL	4:24	4:24	5	od -> gc
FIELD	4:24	4:28	6	od -> gc
LEAF_NODE	4:24	4:24	7	od
LEAF_NODE	4:26	4:26	7	->
LEAF_NODE	4:28	4:28	7	gc
LEAF_NODE	4:30	4:30	2	;
SIMPLE_DECL	5:1	5:12	1	gchar * text ;
VAR_DECL	5:1	5:8	2	gchar * text
TYPE	5:1	5:7	3	gchar *
TYPE_NAME	5:1	5:1	4	gchar
LEAF_NODE	5:1	5:1	5	gchar
POINTER	5:7	5:7	4	*
LEAF_NODE	5:7	5:7	5	*
NAME	5:8	5:8	3	text
LEAF_NODE	5:8	5:8	4	text
LEAF_NODE	5:12	5:12	2	;
SIMPLE_DECL	6:1	6:11	1	va_list ap ;
VAR_DECL	6:1	6:9	2	va_list ap
TYPE	6:1	6:1	3	va_list
TYPE_NAME	6:1	6:1	4	va_list
LEAF_NODE	6:1	6:1	5	va_list
NAME	6:9	6:9	3	ap
LEAF_NODE	6:9	6:9	4	ap
LEAF_NODE	6:11	6:11	2	;
SIMPLE_DECL	7:1	7:16	1	char * msg , char * url ;
INIT_DECL_LIST	7:1	7:1	2	char * msg , char * url
VAR_DECL	7:1	7:7	3	char * msg
TYPE	7:1	7:6	4	char *
TYPE_NAME	7:1	7:1	5	char
LEAF_NODE	7:1	7:1	6	char
POINTER	7:6	7:6	5	*
LEAF_NODE	7:6	7:6	6	*
NAME	7:7	7:7	4	msg
LEAF_NODE	7:7	7:7	5	msg
LEAF_NODE	7:10	7:10	3	,
VAR_DECL	7:1	7:13	3	char * url
TYPE	7:1	7:12	4	char *
TYPE_NAME	7:1	7:1	5	char
LEAF_NODE	7:1	7:1	6	char
POINTER	7:12	7:12	5	*
LEAF_NODE	7:12	7:12	6	*
NAME	7:13	7:13	4	url
LEAF_NODE	7:13	7:13	5	url
LEAF_NODE	7:16	7:16	2	;

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	12:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	aim_admin_getinfo
LEAF_NODE	2:0	2:0	3	aim_admin_getinfo
PARAMETER_LIST	2:17	2:67	2	( OscarData * od , FlapConnection * conn , guint16 info )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:29	3	OscarData * od
TYPE	2:18	2:28	4	OscarData *
TYPE_NAME	2:18	2:18	5	OscarData
LEAF_NODE	2:18	2:18	6	OscarData
POINTER	2:28	2:28	5	*
LEAF_NODE	2:28	2:28	6	*
NAME	2:29	2:29	4	od
LEAF_NODE	2:29	2:29	5	od
LEAF_NODE	2:31	2:31	3	,
PARAMETER_DECL	2:33	2:49	3	FlapConnection * conn
TYPE	2:33	2:48	4	FlapConnection *
TYPE_NAME	2:33	2:33	5	FlapConnection
LEAF_NODE	2:33	2:33	6	FlapConnection
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	conn
LEAF_NODE	2:49	2:49	5	conn
LEAF_NODE	2:53	2:53	3	,
PARAMETER_DECL	2:55	2:63	3	guint16 info
TYPE	2:55	2:55	4	guint16
TYPE_NAME	2:55	2:55	5	guint16
LEAF_NODE	2:55	2:55	6	guint16
NAME	2:63	2:63	4	info
LEAF_NODE	2:63	2:63	5	info
LEAF_NODE	2:67	2:67	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	11:1	2	
SIMPLE_DECL	4:1	4:14	3	ByteStream bs ;
VAR_DECL	4:1	4:12	4	ByteStream bs
TYPE	4:1	4:1	5	ByteStream
TYPE_NAME	4:1	4:1	6	ByteStream
LEAF_NODE	4:1	4:1	7	ByteStream
NAME	4:12	4:12	5	bs
LEAF_NODE	4:12	4:12	6	bs
LEAF_NODE	4:14	4:14	4	;
SIMPLE_DECL	5:1	5:20	3	aim_snacid_t snacid ;
VAR_DECL	5:1	5:14	4	aim_snacid_t snacid
TYPE	5:1	5:1	5	aim_snacid_t
TYPE_NAME	5:1	5:1	6	aim_snacid_t
LEAF_NODE	5:1	5:1	7	aim_snacid_t
NAME	5:14	5:14	5	snacid
LEAF_NODE	5:14	5:14	6	snacid
LEAF_NODE	5:20	5:20	4	;
EXPR_STATEMENT	6:1	6:24	3	byte_stream_new ( & bs , 4 ) ;
EXPR	6:1	6:1	4	byte_stream_new ( & bs , 4 )
FUNCTION_CALL	6:1	6:23	5	byte_stream_new ( & bs , 4 )
CALLEE	6:1	6:1	6	byte_stream_new
LEAF_NODE	6:1	6:1	7	byte_stream_new
LEAF_NODE	6:16	6:16	6	(
ARGUMENT	6:17	6:17	6	& bs
UNARY_EXPR	6:17	6:18	7	& bs
UNARY_OPERATOR	6:17	6:17	8	&
LEAF_NODE	6:17	6:17	9	&
FIELD	6:18	6:18	8	bs
LEAF_NODE	6:18	6:18	9	bs
LEAF_NODE	6:20	6:20	6	,
ARGUMENT	6:22	6:22	6	4
FIELD	6:22	6:22	7	4
LEAF_NODE	6:22	6:22	8	4
LEAF_NODE	6:23	6:23	6	)
LEAF_NODE	6:24	6:24	4	;
EXPR_STATEMENT	7:1	7:29	3	byte_stream_put16 ( & bs , info ) ;
EXPR	7:1	7:1	4	byte_stream_put16 ( & bs , info )
FUNCTION_CALL	7:1	7:28	5	byte_stream_put16 ( & bs , info )
CALLEE	7:1	7:1	6	byte_stream_put16
LEAF_NODE	7:1	7:1	7	byte_stream_put16
LEAF_NODE	7:18	7:18	6	(
ARGUMENT	7:19	7:19	6	& bs
UNARY_EXPR	7:19	7:20	7	& bs
UNARY_OPERATOR	7:19	7:19	8	&
LEAF_NODE	7:19	7:19	9	&
FIELD	7:20	7:20	8	bs
LEAF_NODE	7:20	7:20	9	bs
LEAF_NODE	7:22	7:22	6	,
ARGUMENT	7:24	7:24	6	info
FIELD	7:24	7:24	7	info
LEAF_NODE	7:24	7:24	8	info
LEAF_NODE	7:28	7:28	6	)
LEAF_NODE	7:29	7:29	4	;
EXPR_STATEMENT	8:1	8:31	3	byte_stream_put16 ( & bs , 0x0000 ) ;
EXPR	8:1	8:1	4	byte_stream_put16 ( & bs , 0x0000 )
FUNCTION_CALL	8:1	8:30	5	byte_stream_put16 ( & bs , 0x0000 )
CALLEE	8:1	8:1	6	byte_stream_put16
LEAF_NODE	8:1	8:1	7	byte_stream_put16
LEAF_NODE	8:18	8:18	6	(
ARGUMENT	8:19	8:19	6	& bs
UNARY_EXPR	8:19	8:20	7	& bs
UNARY_OPERATOR	8:19	8:19	8	&
LEAF_NODE	8:19	8:19	9	&
FIELD	8:20	8:20	8	bs
LEAF_NODE	8:20	8:20	9	bs
LEAF_NODE	8:22	8:22	6	,
ARGUMENT	8:24	8:24	6	0x0000
FIELD	8:24	8:24	7	0x0000
LEAF_NODE	8:24	8:24	8	0x0000
LEAF_NODE	8:30	8:30	6	)
LEAF_NODE	8:31	8:31	4	;
EXPR_STATEMENT	9:1	9:71	3	snacid = aim_cachesnac ( od , SNAC_FAMILY_ADMIN , 0x0002 , 0x0000 , NULL , 0 ) ;
EXPR	9:1	9:1	4	snacid = aim_cachesnac ( od , SNAC_FAMILY_ADMIN , 0x0002 , 0x0000 , NULL , 0 )
ASSIGN	9:1	9:10	5	snacid = aim_cachesnac ( od , SNAC_FAMILY_ADMIN , 0x0002 , 0x0000 , NULL , 0 )
LVAL	9:1	9:1	6	snacid
FIELD	9:1	9:1	7	snacid
LEAF_NODE	9:1	9:1	8	snacid
ASSIGN_OP	9:8	9:8	6	=
LEAF_NODE	9:8	9:8	7	=
RVAL	9:10	9:10	6	aim_cachesnac ( od , SNAC_FAMILY_ADMIN , 0x0002 , 0x0000 , NULL , 0 )
FUNCTION_CALL	9:10	9:70	7	aim_cachesnac ( od , SNAC_FAMILY_ADMIN , 0x0002 , 0x0000 , NULL , 0 )
CALLEE	9:10	9:10	8	aim_cachesnac
LEAF_NODE	9:10	9:10	9	aim_cachesnac
LEAF_NODE	9:23	9:23	8	(
ARGUMENT	9:24	9:24	8	od
FIELD	9:24	9:24	9	od
LEAF_NODE	9:24	9:24	10	od
LEAF_NODE	9:26	9:26	8	,
ARGUMENT	9:28	9:28	8	SNAC_FAMILY_ADMIN
FIELD	9:28	9:28	9	SNAC_FAMILY_ADMIN
LEAF_NODE	9:28	9:28	10	SNAC_FAMILY_ADMIN
LEAF_NODE	9:45	9:45	8	,
ARGUMENT	9:47	9:47	8	0x0002
FIELD	9:47	9:47	9	0x0002
LEAF_NODE	9:47	9:47	10	0x0002
LEAF_NODE	9:53	9:53	8	,
ARGUMENT	9:55	9:55	8	0x0000
FIELD	9:55	9:55	9	0x0000
LEAF_NODE	9:55	9:55	10	0x0000
LEAF_NODE	9:61	9:61	8	,
ARGUMENT	9:63	9:63	8	NULL
FIELD	9:63	9:63	9	NULL
LEAF_NODE	9:63	9:63	10	NULL
LEAF_NODE	9:67	9:67	8	,
ARGUMENT	9:69	9:69	8	0
FIELD	9:69	9:69	9	0
LEAF_NODE	9:69	9:69	10	0
LEAF_NODE	9:70	9:70	8	)
LEAF_NODE	9:71	9:71	4	;
EXPR_STATEMENT	10:1	10:76	3	flap_connection_send_snac ( od , conn , SNAC_FAMILY_ADMIN , 0x0002 , snacid , & bs ) ;
EXPR	10:1	10:1	4	flap_connection_send_snac ( od , conn , SNAC_FAMILY_ADMIN , 0x0002 , snacid , & bs )
FUNCTION_CALL	10:1	10:75	5	flap_connection_send_snac ( od , conn , SNAC_FAMILY_ADMIN , 0x0002 , snacid , & bs )
CALLEE	10:1	10:1	6	flap_connection_send_snac
LEAF_NODE	10:1	10:1	7	flap_connection_send_snac
LEAF_NODE	10:26	10:26	6	(
ARGUMENT	10:27	10:27	6	od
FIELD	10:27	10:27	7	od
LEAF_NODE	10:27	10:27	8	od
LEAF_NODE	10:29	10:29	6	,
ARGUMENT	10:31	10:31	6	conn
FIELD	10:31	10:31	7	conn
LEAF_NODE	10:31	10:31	8	conn
LEAF_NODE	10:35	10:35	6	,
ARGUMENT	10:37	10:37	6	SNAC_FAMILY_ADMIN
FIELD	10:37	10:37	7	SNAC_FAMILY_ADMIN
LEAF_NODE	10:37	10:37	8	SNAC_FAMILY_ADMIN
LEAF_NODE	10:54	10:54	6	,
ARGUMENT	10:56	10:56	6	0x0002
FIELD	10:56	10:56	7	0x0002
LEAF_NODE	10:56	10:56	8	0x0002
LEAF_NODE	10:62	10:62	6	,
ARGUMENT	10:64	10:64	6	snacid
FIELD	10:64	10:64	7	snacid
LEAF_NODE	10:64	10:64	8	snacid
LEAF_NODE	10:70	10:70	6	,
ARGUMENT	10:72	10:72	6	& bs
UNARY_EXPR	10:72	10:73	7	& bs
UNARY_OPERATOR	10:72	10:72	8	&
LEAF_NODE	10:72	10:72	9	&
FIELD	10:73	10:73	8	bs
LEAF_NODE	10:73	10:73	9	bs
LEAF_NODE	10:75	10:75	6	)
LEAF_NODE	10:76	10:76	4	;
EXPR_STATEMENT	11:1	11:25	3	byte_stream_destroy ( & bs ) ;
EXPR	11:1	11:1	4	byte_stream_destroy ( & bs )
FUNCTION_CALL	11:1	11:24	5	byte_stream_destroy ( & bs )
CALLEE	11:1	11:1	6	byte_stream_destroy
LEAF_NODE	11:1	11:1	7	byte_stream_destroy
LEAF_NODE	11:20	11:20	6	(
ARGUMENT	11:21	11:21	6	& bs
UNARY_EXPR	11:21	11:22	7	& bs
UNARY_OPERATOR	11:21	11:21	8	&
LEAF_NODE	11:21	11:21	9	&
FIELD	11:22	11:22	8	bs
LEAF_NODE	11:22	11:22	9	bs
LEAF_NODE	11:24	11:24	6	)
LEAF_NODE	11:25	11:25	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	15:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	x509_crtdata_delref
LEAF_NODE	2:0	2:0	3	x509_crtdata_delref
PARAMETER_LIST	2:19	2:38	2	( x509_crtdata_t * cd )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:36	3	x509_crtdata_t * cd
TYPE	2:20	2:35	4	x509_crtdata_t *
TYPE_NAME	2:20	2:20	5	x509_crtdata_t
LEAF_NODE	2:20	2:20	6	x509_crtdata_t
POINTER	2:35	2:35	5	*
LEAF_NODE	2:35	2:35	6	*
NAME	2:36	2:36	4	cd
LEAF_NODE	2:36	2:36	5	cd
LEAF_NODE	2:38	2:38	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
EXPR_STATEMENT	4:1	4:17	3	( cd -> refcount ) -- ;
EXPR	4:1	4:15	4	( cd -> refcount ) --
LEAF_NODE	4:1	4:1	5	(
FIELD	4:2	4:6	5	cd -> refcount
LEAF_NODE	4:2	4:2	6	cd
LEAF_NODE	4:4	4:4	6	->
LEAF_NODE	4:6	4:6	6	refcount
LEAF_NODE	4:14	4:14	5	)
LEAF_NODE	4:15	4:15	5	--
LEAF_NODE	4:17	4:17	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	cd -> refcount < 0
EXPR	5:5	5:20	5	cd -> refcount < 0
FIELD	5:5	5:9	6	cd -> refcount
LEAF_NODE	5:5	5:5	7	cd
LEAF_NODE	5:7	5:7	7	->
LEAF_NODE	5:9	5:9	7	refcount
REL_OPERATOR	5:18	5:18	6	<
LEAF_NODE	5:18	5:18	7	<
FIELD	5:20	5:20	6	0
LEAF_NODE	5:20	5:20	7	0
LEAF_NODE	5:21	5:21	4	)
STATEMENTS	6:2	6:2	4	
LEAF_NODE	6:2	6:2	5	g_critical
LEAF_NODE	6:12	6:12	3	(
LEAF_NODE	6:13	6:13	3	"Refcount of x509_crtdata_t is %d, which is less "
LEAF_NODE	7:4	7:4	3	"than zero!\n"
LEAF_NODE	7:18	7:18	3	,
LEAF_NODE	7:20	7:20	3	cd
LEAF_NODE	7:22	7:22	3	->
LEAF_NODE	7:24	7:24	3	refcount
LEAF_NODE	7:32	7:32	3	)
LEAF_NODE	7:33	7:33	3	;
SELECTION	9:1	9:24	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	cd -> refcount <= 0
EXPR	9:5	9:21	5	cd -> refcount <= 0
FIELD	9:5	9:9	6	cd -> refcount
LEAF_NODE	9:5	9:5	7	cd
LEAF_NODE	9:7	9:7	7	->
LEAF_NODE	9:9	9:9	7	refcount
REL_OPERATOR	9:18	9:18	6	<=
LEAF_NODE	9:18	9:18	7	<=
FIELD	9:21	9:21	6	0
LEAF_NODE	9:21	9:21	7	0
LEAF_NODE	9:22	9:22	4	)
STATEMENTS	9:24	14:1	4	
LEAF_NODE	9:24	9:24	5	{
STATEMENTS	11:2	13:2	5	
EXPR_STATEMENT	11:2	11:35	6	gnutls_x509_crt_deinit ( cd -> crt ) ;
EXPR	11:2	11:2	7	gnutls_x509_crt_deinit ( cd -> crt )
FUNCTION_CALL	11:2	11:34	8	gnutls_x509_crt_deinit ( cd -> crt )
CALLEE	11:2	11:2	9	gnutls_x509_crt_deinit
LEAF_NODE	11:2	11:2	10	gnutls_x509_crt_deinit
LEAF_NODE	11:24	11:24	9	(
ARGUMENT	11:26	11:26	9	cd -> crt
FIELD	11:26	11:30	10	cd -> crt
LEAF_NODE	11:26	11:26	11	cd
LEAF_NODE	11:28	11:28	11	->
LEAF_NODE	11:30	11:30	11	crt
LEAF_NODE	11:34	11:34	9	)
LEAF_NODE	11:35	11:35	7	;
EXPR_STATEMENT	13:2	13:14	6	g_free ( cd ) ;
EXPR	13:2	13:2	7	g_free ( cd )
FUNCTION_CALL	13:2	13:13	8	g_free ( cd )
CALLEE	13:2	13:2	9	g_free
LEAF_NODE	13:2	13:2	10	g_free
LEAF_NODE	13:8	13:8	9	(
ARGUMENT	13:10	13:10	9	cd
FIELD	13:10	13:10	10	cd
LEAF_NODE	13:10	13:10	11	cd
LEAF_NODE	13:13	13:13	9	)
LEAF_NODE	13:14	13:14	7	;
LEAF_NODE	14:1	14:1	5	}
LEAF_NODE	15:0	15:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	purple_whiteboard_draw_list_destroy
LEAF_NODE	2:5	2:5	3	purple_whiteboard_draw_list_destroy
PARAMETER_LIST	2:40	2:57	2	( GList * draw_list )
LEAF_NODE	2:40	2:40	3	(
PARAMETER_DECL	2:41	2:48	3	GList * draw_list
TYPE	2:41	2:47	4	GList *
TYPE_NAME	2:41	2:41	5	GList
LEAF_NODE	2:41	2:41	6	GList
POINTER	2:47	2:47	5	*
LEAF_NODE	2:47	2:47	6	*
NAME	2:48	2:48	4	draw_list
LEAF_NODE	2:48	2:48	5	draw_list
LEAF_NODE	2:57	2:57	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	4:23	3	g_list_free ( draw_list ) ;
EXPR	4:1	4:1	4	g_list_free ( draw_list )
FUNCTION_CALL	4:1	4:22	5	g_list_free ( draw_list )
CALLEE	4:1	4:1	6	g_list_free
LEAF_NODE	4:1	4:1	7	g_list_free
LEAF_NODE	4:12	4:12	6	(
ARGUMENT	4:13	4:13	6	draw_list
FIELD	4:13	4:13	7	draw_list
LEAF_NODE	4:13	4:13	8	draw_list
LEAF_NODE	4:22	4:22	6	)
LEAF_NODE	4:23	4:23	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	27:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	jingle_rtp_candidates_prepared_cb
LEAF_NODE	2:0	2:0	3	jingle_rtp_candidates_prepared_cb
PARAMETER_LIST	2:33	3:49	2	( PurpleMedia * media , gchar * sid , gchar * name , JingleSession * session )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:47	3	PurpleMedia * media
TYPE	2:34	2:46	4	PurpleMedia *
TYPE_NAME	2:34	2:34	5	PurpleMedia
LEAF_NODE	2:34	2:34	6	PurpleMedia
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	media
LEAF_NODE	2:47	2:47	5	media
LEAF_NODE	2:52	2:52	3	,
PARAMETER_DECL	3:2	3:9	3	gchar * sid
TYPE	3:2	3:8	4	gchar *
TYPE_NAME	3:2	3:2	5	gchar
LEAF_NODE	3:2	3:2	6	gchar
POINTER	3:8	3:8	5	*
LEAF_NODE	3:8	3:8	6	*
NAME	3:9	3:9	4	sid
LEAF_NODE	3:9	3:9	5	sid
LEAF_NODE	3:12	3:12	3	,
PARAMETER_DECL	3:14	3:21	3	gchar * name
TYPE	3:14	3:20	4	gchar *
TYPE_NAME	3:14	3:14	5	gchar
LEAF_NODE	3:14	3:14	6	gchar
POINTER	3:20	3:20	5	*
LEAF_NODE	3:20	3:20	6	*
NAME	3:21	3:21	4	name
LEAF_NODE	3:21	3:21	5	name
LEAF_NODE	3:25	3:25	3	,
PARAMETER_DECL	3:27	3:42	3	JingleSession * session
TYPE	3:27	3:41	4	JingleSession *
TYPE_NAME	3:27	3:27	5	JingleSession
LEAF_NODE	3:27	3:27	6	JingleSession
POINTER	3:41	3:41	5	*
LEAF_NODE	3:41	3:41	6	*
NAME	3:42	3:42	4	session
LEAF_NODE	3:42	3:42	5	session
LEAF_NODE	3:49	3:49	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	26:1	2	
SIMPLE_DECL	5:1	6:22	3	JingleContent * content ; content = jingle_session_find_content ( session , sid , NULL ) ;
VAR_DECL	5:1	5:16	4	JingleContent * content ; content = jingle_session_find_content ( session , sid , NULL )
TYPE	5:1	5:15	5	JingleContent *
TYPE_NAME	5:1	5:1	6	JingleContent
LEAF_NODE	5:1	5:1	7	JingleContent
POINTER	5:15	5:15	6	*
LEAF_NODE	5:15	5:15	7	*
NAME	5:16	5:16	5	content
LEAF_NODE	5:16	5:16	6	content
LEAF_NODE	0:0	0:0	5	;
INIT	5:16	5:16	5	content = jingle_session_find_content ( session , sid , NULL )
ASSIGN	5:16	5:26	6	content = jingle_session_find_content ( session , sid , NULL )
LVAL	5:16	5:16	7	content
NAME	5:16	5:16	8	content
LEAF_NODE	5:16	5:16	9	content
ASSIGN_OP	5:24	5:24	7	=
LEAF_NODE	5:24	5:24	8	=
RVAL	5:26	5:26	7	jingle_session_find_content ( session , sid , NULL )
FUNCTION_CALL	5:26	6:21	8	jingle_session_find_content ( session , sid , NULL )
CALLEE	5:26	5:26	9	jingle_session_find_content
LEAF_NODE	5:26	5:26	10	jingle_session_find_content
LEAF_NODE	5:53	5:53	9	(
ARGUMENT	6:3	6:3	9	session
FIELD	6:3	6:3	10	session
LEAF_NODE	6:3	6:3	11	session
LEAF_NODE	6:10	6:10	9	,
ARGUMENT	6:12	6:12	9	sid
FIELD	6:12	6:12	10	sid
LEAF_NODE	6:12	6:12	11	sid
LEAF_NODE	6:15	6:15	9	,
ARGUMENT	6:17	6:17	9	NULL
FIELD	6:17	6:17	10	NULL
LEAF_NODE	6:17	6:17	11	NULL
LEAF_NODE	6:21	6:21	9	)
LEAF_NODE	6:22	6:22	4	;
SIMPLE_DECL	7:1	7:42	3	JingleTransport * oldtransport , JingleTransport * transport ;
INIT_DECL_LIST	7:1	7:1	4	JingleTransport * oldtransport , JingleTransport * transport
VAR_DECL	7:1	7:18	5	JingleTransport * oldtransport
TYPE	7:1	7:17	6	JingleTransport *
TYPE_NAME	7:1	7:1	7	JingleTransport
LEAF_NODE	7:1	7:1	8	JingleTransport
POINTER	7:17	7:17	7	*
LEAF_NODE	7:17	7:17	8	*
NAME	7:18	7:18	6	oldtransport
LEAF_NODE	7:18	7:18	7	oldtransport
LEAF_NODE	7:30	7:30	5	,
VAR_DECL	7:1	7:33	5	JingleTransport * transport
TYPE	7:1	7:32	6	JingleTransport *
TYPE_NAME	7:1	7:1	7	JingleTransport
LEAF_NODE	7:1	7:1	8	JingleTransport
POINTER	7:32	7:32	7	*
LEAF_NODE	7:32	7:32	8	*
NAME	7:33	7:33	6	transport
LEAF_NODE	7:33	7:33	7	transport
LEAF_NODE	7:42	7:42	4	;
SIMPLE_DECL	8:1	8:18	3	GList * candidates ;
VAR_DECL	8:1	8:8	4	GList * candidates
TYPE	8:1	8:7	5	GList *
TYPE_NAME	8:1	8:1	6	GList
LEAF_NODE	8:1	8:1	7	GList
POINTER	8:7	8:7	6	*
LEAF_NODE	8:7	8:7	7	*
NAME	8:8	8:8	5	candidates
LEAF_NODE	8:8	8:8	6	candidates
LEAF_NODE	8:18	8:18	4	;
EXPR_STATEMENT	9:1	9:71	3	purple_debug_info ( "jingle-rtp" , "jingle_rtp_candidates_prepared_cb\n" ) ;
EXPR	9:1	9:1	4	purple_debug_info ( "jingle-rtp" , "jingle_rtp_candidates_prepared_cb\n" )
FUNCTION_CALL	9:1	9:70	5	purple_debug_info ( "jingle-rtp" , "jingle_rtp_candidates_prepared_cb\n" )
CALLEE	9:1	9:1	6	purple_debug_info
LEAF_NODE	9:1	9:1	7	purple_debug_info
LEAF_NODE	9:18	9:18	6	(
ARGUMENT	9:19	9:19	6	"jingle-rtp"
FIELD	9:19	9:19	7	"jingle-rtp"
LEAF_NODE	9:19	9:19	8	"jingle-rtp"
LEAF_NODE	9:31	9:31	6	,
ARGUMENT	9:33	9:33	6	"jingle_rtp_candidates_prepared_cb\n"
FIELD	9:33	9:33	7	"jingle_rtp_candidates_prepared_cb\n"
LEAF_NODE	9:33	9:33	8	"jingle_rtp_candidates_prepared_cb\n"
LEAF_NODE	9:70	9:70	6	)
LEAF_NODE	9:71	9:71	4	;
SELECTION	10:1	10:22	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	content == NULL
EXPR	10:5	10:16	5	content == NULL
FIELD	10:5	10:5	6	content
LEAF_NODE	10:5	10:5	7	content
EQ_OPERATOR	10:13	10:13	6	==
LEAF_NODE	10:13	10:13	7	==
FIELD	10:16	10:16	6	NULL
LEAF_NODE	10:16	10:16	7	NULL
LEAF_NODE	10:20	10:20	4	)
STATEMENTS	10:22	15:1	4	
LEAF_NODE	10:22	10:22	5	{
STATEMENTS	11:2	14:2	5	
LEAF_NODE	11:2	11:2	6	purple_debug_error
LEAF_NODE	11:20	11:20	6	(
LEAF_NODE	11:21	11:21	6	"jingle-rtp"
LEAF_NODE	11:33	11:33	6	,
LEAF_NODE	12:4	12:4	6	"jingle_rtp_candidates_prepared_cb: "
LEAF_NODE	13:4	13:4	6	"Can't find session %s\n"
LEAF_NODE	13:29	13:29	6	,
LEAF_NODE	13:31	13:31	6	sid
LEAF_NODE	13:34	13:34	6	)
LEAF_NODE	13:35	13:35	6	;
JUMP_STATEMENT	14:2	14:8	6	return DESTINATION ;
KEYWORD	14:2	14:2	7	return
LEAF_NODE	14:2	14:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	14:8	14:8	7	;
LEAF_NODE	15:1	15:1	5	}
EXPR_STATEMENT	16:1	16:53	3	oldtransport = jingle_content_get_transport ( content ) ;
EXPR	16:1	16:1	4	oldtransport = jingle_content_get_transport ( content )
ASSIGN	16:1	16:16	5	oldtransport = jingle_content_get_transport ( content )
LVAL	16:1	16:1	6	oldtransport
FIELD	16:1	16:1	7	oldtransport
LEAF_NODE	16:1	16:1	8	oldtransport
ASSIGN_OP	16:14	16:14	6	=
LEAF_NODE	16:14	16:14	7	=
RVAL	16:16	16:16	6	jingle_content_get_transport ( content )
FUNCTION_CALL	16:16	16:52	7	jingle_content_get_transport ( content )
CALLEE	16:16	16:16	8	jingle_content_get_transport
LEAF_NODE	16:16	16:16	9	jingle_content_get_transport
LEAF_NODE	16:44	16:44	8	(
ARGUMENT	16:45	16:45	8	content
FIELD	16:45	16:45	9	content
LEAF_NODE	16:45	16:45	10	content
LEAF_NODE	16:52	16:52	8	)
LEAF_NODE	16:53	16:53	4	;
EXPR_STATEMENT	17:1	17:65	3	candidates = purple_media_get_local_candidates ( media , sid , name ) ;
EXPR	17:1	17:1	4	candidates = purple_media_get_local_candidates ( media , sid , name )
ASSIGN	17:1	17:14	5	candidates = purple_media_get_local_candidates ( media , sid , name )
LVAL	17:1	17:1	6	candidates
FIELD	17:1	17:1	7	candidates
LEAF_NODE	17:1	17:1	8	candidates
ASSIGN_OP	17:12	17:12	6	=
LEAF_NODE	17:12	17:12	7	=
RVAL	17:14	17:14	6	purple_media_get_local_candidates ( media , sid , name )
FUNCTION_CALL	17:14	17:64	7	purple_media_get_local_candidates ( media , sid , name )
CALLEE	17:14	17:14	8	purple_media_get_local_candidates
LEAF_NODE	17:14	17:14	9	purple_media_get_local_candidates
LEAF_NODE	17:47	17:47	8	(
ARGUMENT	17:48	17:48	8	media
FIELD	17:48	17:48	9	media
LEAF_NODE	17:48	17:48	10	media
LEAF_NODE	17:53	17:53	8	,
ARGUMENT	17:55	17:55	8	sid
FIELD	17:55	17:55	9	sid
LEAF_NODE	17:55	17:55	10	sid
LEAF_NODE	17:58	17:58	8	,
ARGUMENT	17:60	17:60	8	name
FIELD	17:60	17:60	9	name
LEAF_NODE	17:60	17:60	10	name
LEAF_NODE	17:64	17:64	8	)
LEAF_NODE	17:65	17:65	4	;
EXPR_STATEMENT	18:1	21:18	3	transport = JINGLE_TRANSPORT ( jingle_rtp_candidates_to_transport ( session , JINGLE_IS_RAWUDP ( oldtransport ) ? JINGLE_TYPE_RAWUDP : JINGLE_TYPE_ICEUDP , 0 , candidates ) ) ;
EXPR	18:1	18:1	4	transport = JINGLE_TRANSPORT ( jingle_rtp_candidates_to_transport ( session , JINGLE_IS_RAWUDP ( oldtransport ) ? JINGLE_TYPE_RAWUDP : JINGLE_TYPE_ICEUDP , 0 , candidates ) )
ASSIGN	18:1	18:13	5	transport = JINGLE_TRANSPORT ( jingle_rtp_candidates_to_transport ( session , JINGLE_IS_RAWUDP ( oldtransport ) ? JINGLE_TYPE_RAWUDP : JINGLE_TYPE_ICEUDP , 0 , candidates ) )
LVAL	18:1	18:1	6	transport
FIELD	18:1	18:1	7	transport
LEAF_NODE	18:1	18:1	8	transport
ASSIGN_OP	18:11	18:11	6	=
LEAF_NODE	18:11	18:11	7	=
RVAL	18:13	18:13	6	JINGLE_TRANSPORT ( jingle_rtp_candidates_to_transport ( session , JINGLE_IS_RAWUDP ( oldtransport ) ? JINGLE_TYPE_RAWUDP : JINGLE_TYPE_ICEUDP , 0 , candidates ) )
FUNCTION_CALL	18:13	21:17	7	JINGLE_TRANSPORT ( jingle_rtp_candidates_to_transport ( session , JINGLE_IS_RAWUDP ( oldtransport ) ? JINGLE_TYPE_RAWUDP : JINGLE_TYPE_ICEUDP , 0 , candidates ) )
CALLEE	18:13	18:13	8	JINGLE_TRANSPORT
LEAF_NODE	18:13	18:13	9	JINGLE_TRANSPORT
LEAF_NODE	18:29	18:29	8	(
ARGUMENT	18:30	18:30	8	jingle_rtp_candidates_to_transport ( session , JINGLE_IS_RAWUDP ( oldtransport ) ? JINGLE_TYPE_RAWUDP : JINGLE_TYPE_ICEUDP , 0 , candidates )
FUNCTION_CALL	18:30	21:16	9	jingle_rtp_candidates_to_transport ( session , JINGLE_IS_RAWUDP ( oldtransport ) ? JINGLE_TYPE_RAWUDP : JINGLE_TYPE_ICEUDP , 0 , candidates )
CALLEE	18:30	18:30	10	jingle_rtp_candidates_to_transport
LEAF_NODE	18:30	18:30	11	jingle_rtp_candidates_to_transport
LEAF_NODE	18:64	18:64	10	(
ARGUMENT	19:3	19:3	10	session
FIELD	19:3	19:3	11	session
LEAF_NODE	19:3	19:3	12	session
LEAF_NODE	19:10	19:10	10	,
ARGUMENT	19:12	19:12	10	JINGLE_IS_RAWUDP ( oldtransport ) ? JINGLE_TYPE_RAWUDP : JINGLE_TYPE_ICEUDP
COND_EXPR	19:12	20:25	11	JINGLE_IS_RAWUDP ( oldtransport ) ? JINGLE_TYPE_RAWUDP : JINGLE_TYPE_ICEUDP
CONDITION	19:12	19:12	12	JINGLE_IS_RAWUDP ( oldtransport )
FUNCTION_CALL	19:12	19:41	13	JINGLE_IS_RAWUDP ( oldtransport )
CALLEE	19:12	19:12	14	JINGLE_IS_RAWUDP
LEAF_NODE	19:12	19:12	15	JINGLE_IS_RAWUDP
LEAF_NODE	19:28	19:28	14	(
ARGUMENT	19:29	19:29	14	oldtransport
FIELD	19:29	19:29	15	oldtransport
LEAF_NODE	19:29	19:29	16	oldtransport
LEAF_NODE	19:41	19:41	14	)
LEAF_NODE	19:43	19:43	12	?
EXPR	20:4	20:4	12	JINGLE_TYPE_RAWUDP
FIELD	20:4	20:4	13	JINGLE_TYPE_RAWUDP
LEAF_NODE	20:4	20:4	14	JINGLE_TYPE_RAWUDP
LEAF_NODE	20:23	20:23	12	:
FIELD	20:25	20:25	12	JINGLE_TYPE_ICEUDP
LEAF_NODE	20:25	20:25	13	JINGLE_TYPE_ICEUDP
LEAF_NODE	20:43	20:43	10	,
ARGUMENT	21:3	21:3	10	0
FIELD	21:3	21:3	11	0
LEAF_NODE	21:3	21:3	12	0
LEAF_NODE	21:4	21:4	10	,
ARGUMENT	21:6	21:6	10	candidates
FIELD	21:6	21:6	11	candidates
LEAF_NODE	21:6	21:6	12	candidates
LEAF_NODE	21:16	21:16	10	)
LEAF_NODE	21:17	21:17	8	)
LEAF_NODE	21:18	21:18	4	;
EXPR_STATEMENT	22:1	22:24	3	g_list_free ( candidates ) ;
EXPR	22:1	22:1	4	g_list_free ( candidates )
FUNCTION_CALL	22:1	22:23	5	g_list_free ( candidates )
CALLEE	22:1	22:1	6	g_list_free
LEAF_NODE	22:1	22:1	7	g_list_free
LEAF_NODE	22:12	22:12	6	(
ARGUMENT	22:13	22:13	6	candidates
FIELD	22:13	22:13	7	candidates
LEAF_NODE	22:13	22:13	8	candidates
LEAF_NODE	22:23	22:23	6	)
LEAF_NODE	22:24	22:24	4	;
EXPR_STATEMENT	23:1	23:29	3	g_object_unref ( oldtransport ) ;
EXPR	23:1	23:1	4	g_object_unref ( oldtransport )
FUNCTION_CALL	23:1	23:28	5	g_object_unref ( oldtransport )
CALLEE	23:1	23:1	6	g_object_unref
LEAF_NODE	23:1	23:1	7	g_object_unref
LEAF_NODE	23:15	23:15	6	(
ARGUMENT	23:16	23:16	6	oldtransport
FIELD	23:16	23:16	7	oldtransport
LEAF_NODE	23:16	23:16	8	oldtransport
LEAF_NODE	23:28	23:28	6	)
LEAF_NODE	23:29	23:29	4	;
EXPR_STATEMENT	24:1	24:57	3	jingle_content_set_pending_transport ( content , transport ) ;
EXPR	24:1	24:1	4	jingle_content_set_pending_transport ( content , transport )
FUNCTION_CALL	24:1	24:56	5	jingle_content_set_pending_transport ( content , transport )
CALLEE	24:1	24:1	6	jingle_content_set_pending_transport
LEAF_NODE	24:1	24:1	7	jingle_content_set_pending_transport
LEAF_NODE	24:37	24:37	6	(
ARGUMENT	24:38	24:38	6	content
FIELD	24:38	24:38	7	content
LEAF_NODE	24:38	24:38	8	content
LEAF_NODE	24:45	24:45	6	,
ARGUMENT	24:47	24:47	6	transport
FIELD	24:47	24:47	7	transport
LEAF_NODE	24:47	24:47	8	transport
LEAF_NODE	24:56	24:56	6	)
LEAF_NODE	24:57	24:57	4	;
EXPR_STATEMENT	25:1	25:41	3	jingle_content_accept_transport ( content ) ;
EXPR	25:1	25:1	4	jingle_content_accept_transport ( content )
FUNCTION_CALL	25:1	25:40	5	jingle_content_accept_transport ( content )
CALLEE	25:1	25:1	6	jingle_content_accept_transport
LEAF_NODE	25:1	25:1	7	jingle_content_accept_transport
LEAF_NODE	25:32	25:32	6	(
ARGUMENT	25:33	25:33	6	content
FIELD	25:33	25:33	7	content
LEAF_NODE	25:33	25:33	8	content
LEAF_NODE	25:40	25:40	6	)
LEAF_NODE	25:41	25:41	4	;
EXPR_STATEMENT	26:1	26:26	3	jingle_rtp_ready ( session ) ;
EXPR	26:1	26:1	4	jingle_rtp_ready ( session )
FUNCTION_CALL	26:1	26:25	5	jingle_rtp_ready ( session )
CALLEE	26:1	26:1	6	jingle_rtp_ready
LEAF_NODE	26:1	26:1	7	jingle_rtp_ready
LEAF_NODE	26:17	26:17	6	(
ARGUMENT	26:18	26:18	6	session
FIELD	26:18	26:18	7	session
LEAF_NODE	26:18	26:18	8	session
LEAF_NODE	26:25	26:25	6	)
LEAF_NODE	26:26	26:26	4	;
LEAF_NODE	27:0	27:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:7	2	xmlnode *
TYPE_NAME	1:0	1:0	3	xmlnode
LEAF_NODE	1:0	1:0	4	xmlnode
LEAF_NODE	1:7	1:7	3	*
FUNCTION_NAME	2:0	2:0	2	xmlnode_get_child
LEAF_NODE	2:0	2:0	3	xmlnode_get_child
PARAMETER_LIST	2:17	2:57	2	( const xmlnode * parent , const char * name )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:33	3	const xmlnode * parent
TYPE	2:18	2:32	4	const xmlnode *
TYPE_NAME	2:18	2:24	5	const xmlnode
LEAF_NODE	2:18	2:18	6	const
LEAF_NODE	2:24	2:24	6	xmlnode
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	parent
LEAF_NODE	2:33	2:33	5	parent
LEAF_NODE	2:39	2:39	3	,
PARAMETER_DECL	2:41	2:53	3	const char * name
TYPE	2:41	2:52	4	const char *
TYPE_NAME	2:41	2:47	5	const char
LEAF_NODE	2:41	2:41	6	const
LEAF_NODE	2:47	2:47	6	char
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	name
LEAF_NODE	2:53	2:53	5	name
LEAF_NODE	2:57	2:57	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:60	3	return xmlnode_get_child_with_namespace ( parent , name , NULL ) ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	xmlnode_get_child_with_namespace ( parent , name , NULL )
EXPR	4:8	4:8	5	xmlnode_get_child_with_namespace ( parent , name , NULL )
FUNCTION_CALL	4:8	4:59	6	xmlnode_get_child_with_namespace ( parent , name , NULL )
CALLEE	4:8	4:8	7	xmlnode_get_child_with_namespace
LEAF_NODE	4:8	4:8	8	xmlnode_get_child_with_namespace
LEAF_NODE	4:40	4:40	7	(
ARGUMENT	4:41	4:41	7	parent
FIELD	4:41	4:41	8	parent
LEAF_NODE	4:41	4:41	9	parent
LEAF_NODE	4:47	4:47	7	,
ARGUMENT	4:49	4:49	7	name
FIELD	4:49	4:49	8	name
LEAF_NODE	4:49	4:49	9	name
LEAF_NODE	4:53	4:53	7	,
ARGUMENT	4:55	4:55	7	NULL
FIELD	4:55	4:55	8	NULL
LEAF_NODE	4:55	4:55	9	NULL
LEAF_NODE	4:59	4:59	7	)
LEAF_NODE	4:60	4:60	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	gnt_progress_bar_set_show_progress
LEAF_NODE	2:0	2:0	3	gnt_progress_bar_set_show_progress
PARAMETER_LIST	2:35	2:71	2	( GntProgressBar * pbar , gboolean show )
LEAF_NODE	2:35	2:35	3	(
PARAMETER_DECL	2:36	2:52	3	GntProgressBar * pbar
TYPE	2:36	2:51	4	GntProgressBar *
TYPE_NAME	2:36	2:36	5	GntProgressBar
LEAF_NODE	2:36	2:36	6	GntProgressBar
POINTER	2:51	2:51	5	*
LEAF_NODE	2:51	2:51	6	*
NAME	2:52	2:52	4	pbar
LEAF_NODE	2:52	2:52	5	pbar
LEAF_NODE	2:56	2:56	3	,
PARAMETER_DECL	2:58	2:67	3	gboolean show
TYPE	2:58	2:58	4	gboolean
TYPE_NAME	2:58	2:58	5	gboolean
LEAF_NODE	2:58	2:58	6	gboolean
NAME	2:67	2:67	4	show
LEAF_NODE	2:67	2:67	5	show
LEAF_NODE	2:71	2:71	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:66	3	GntProgressBarPrivate * priv ; priv = GNT_PROGRESS_BAR_GET_PRIVATE ( pbar ) ;
VAR_DECL	4:1	4:24	4	GntProgressBarPrivate * priv ; priv = GNT_PROGRESS_BAR_GET_PRIVATE ( pbar )
TYPE	4:1	4:23	5	GntProgressBarPrivate *
TYPE_NAME	4:1	4:1	6	GntProgressBarPrivate
LEAF_NODE	4:1	4:1	7	GntProgressBarPrivate
POINTER	4:23	4:23	6	*
LEAF_NODE	4:23	4:23	7	*
NAME	4:24	4:24	5	priv
LEAF_NODE	4:24	4:24	6	priv
LEAF_NODE	0:0	0:0	5	;
INIT	4:24	4:24	5	priv = GNT_PROGRESS_BAR_GET_PRIVATE ( pbar )
ASSIGN	4:24	4:31	6	priv = GNT_PROGRESS_BAR_GET_PRIVATE ( pbar )
LVAL	4:24	4:24	7	priv
NAME	4:24	4:24	8	priv
LEAF_NODE	4:24	4:24	9	priv
ASSIGN_OP	4:29	4:29	7	=
LEAF_NODE	4:29	4:29	8	=
RVAL	4:31	4:31	7	GNT_PROGRESS_BAR_GET_PRIVATE ( pbar )
FUNCTION_CALL	4:31	4:65	8	GNT_PROGRESS_BAR_GET_PRIVATE ( pbar )
CALLEE	4:31	4:31	9	GNT_PROGRESS_BAR_GET_PRIVATE
LEAF_NODE	4:31	4:31	10	GNT_PROGRESS_BAR_GET_PRIVATE
LEAF_NODE	4:60	4:60	9	(
ARGUMENT	4:61	4:61	9	pbar
FIELD	4:61	4:61	10	pbar
LEAF_NODE	4:61	4:61	11	pbar
LEAF_NODE	4:65	4:65	9	)
LEAF_NODE	4:66	4:66	4	;
EXPR_STATEMENT	5:1	5:24	3	priv -> show_value = show ;
EXPR	5:1	5:1	4	priv -> show_value = show
ASSIGN	5:1	5:20	5	priv -> show_value = show
LVAL	5:1	5:1	6	priv -> show_value
FIELD	5:1	5:7	7	priv -> show_value
LEAF_NODE	5:1	5:1	8	priv
LEAF_NODE	5:5	5:5	8	->
LEAF_NODE	5:7	5:7	8	show_value
ASSIGN_OP	5:18	5:18	6	=
LEAF_NODE	5:18	5:18	7	=
RVAL	5:20	5:20	6	show
FIELD	5:20	5:20	7	show
LEAF_NODE	5:20	5:20	8	show
LEAF_NODE	5:24	5:24	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	pidgin_media_delete_event_cb
LEAF_NODE	2:0	2:0	3	pidgin_media_delete_event_cb
PARAMETER_LIST	2:28	3:37	2	( GtkWidget * widget , GdkEvent * event , PidginMedia * media )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:40	3	GtkWidget * widget
TYPE	2:29	2:39	4	GtkWidget *
TYPE_NAME	2:29	2:29	5	GtkWidget
LEAF_NODE	2:29	2:29	6	GtkWidget
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	widget
LEAF_NODE	2:40	2:40	5	widget
LEAF_NODE	2:46	2:46	3	,
PARAMETER_DECL	3:2	3:12	3	GdkEvent * event
TYPE	3:2	3:11	4	GdkEvent *
TYPE_NAME	3:2	3:2	5	GdkEvent
LEAF_NODE	3:2	3:2	6	GdkEvent
POINTER	3:11	3:11	5	*
LEAF_NODE	3:11	3:11	6	*
NAME	3:12	3:12	4	event
LEAF_NODE	3:12	3:12	5	event
LEAF_NODE	3:17	3:17	3	,
PARAMETER_DECL	3:19	3:32	3	PidginMedia * media
TYPE	3:19	3:31	4	PidginMedia *
TYPE_NAME	3:19	3:19	5	PidginMedia
LEAF_NODE	3:19	3:19	6	PidginMedia
POINTER	3:31	3:31	5	*
LEAF_NODE	3:31	3:31	6	*
NAME	3:32	3:32	4	media
LEAF_NODE	3:32	3:32	5	media
LEAF_NODE	3:37	3:37	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	8:1	2	
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	media -> priv -> media
EXPR	5:5	5:5	5	media -> priv -> media
FIELD	5:5	5:18	6	media -> priv -> media
LEAF_NODE	5:5	5:5	7	media
LEAF_NODE	5:10	5:10	7	->
LEAF_NODE	5:12	5:12	7	priv
LEAF_NODE	5:16	5:16	7	->
LEAF_NODE	5:18	5:18	7	media
LEAF_NODE	5:23	5:23	4	)
STATEMENTS	6:2	6:2	4	
EXPR_STATEMENT	6:2	7:47	5	purple_media_stream_info ( media -> priv -> media , PURPLE_MEDIA_INFO_HANGUP , NULL , NULL , TRUE ) ;
EXPR	6:2	6:2	6	purple_media_stream_info ( media -> priv -> media , PURPLE_MEDIA_INFO_HANGUP , NULL , NULL , TRUE )
FUNCTION_CALL	6:2	7:46	7	purple_media_stream_info ( media -> priv -> media , PURPLE_MEDIA_INFO_HANGUP , NULL , NULL , TRUE )
CALLEE	6:2	6:2	8	purple_media_stream_info
LEAF_NODE	6:2	6:2	9	purple_media_stream_info
LEAF_NODE	6:26	6:26	8	(
ARGUMENT	6:27	6:27	8	media -> priv -> media
FIELD	6:27	6:40	9	media -> priv -> media
LEAF_NODE	6:27	6:27	10	media
LEAF_NODE	6:32	6:32	10	->
LEAF_NODE	6:34	6:34	10	priv
LEAF_NODE	6:38	6:38	10	->
LEAF_NODE	6:40	6:40	10	media
LEAF_NODE	6:45	6:45	8	,
ARGUMENT	7:4	7:4	8	PURPLE_MEDIA_INFO_HANGUP
FIELD	7:4	7:4	9	PURPLE_MEDIA_INFO_HANGUP
LEAF_NODE	7:4	7:4	10	PURPLE_MEDIA_INFO_HANGUP
LEAF_NODE	7:28	7:28	8	,
ARGUMENT	7:30	7:30	8	NULL
FIELD	7:30	7:30	9	NULL
LEAF_NODE	7:30	7:30	10	NULL
LEAF_NODE	7:34	7:34	8	,
ARGUMENT	7:36	7:36	8	NULL
FIELD	7:36	7:36	9	NULL
LEAF_NODE	7:36	7:36	10	NULL
LEAF_NODE	7:40	7:40	8	,
ARGUMENT	7:42	7:42	8	TRUE
FIELD	7:42	7:42	9	TRUE
LEAF_NODE	7:42	7:42	10	TRUE
LEAF_NODE	7:46	7:46	8	)
LEAF_NODE	7:47	7:47	6	;
JUMP_STATEMENT	8:1	8:13	3	return FALSE ;
KEYWORD	8:1	8:1	4	return
LEAF_NODE	8:1	8:1	5	return
DESTINATION	8:8	8:8	4	FALSE
EXPR	8:8	8:8	5	FALSE
FIELD	8:8	8:8	6	FALSE
LEAF_NODE	8:8	8:8	7	FALSE
LEAF_NODE	8:13	8:13	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:24	2	static PidginMiniDialog *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	PidginMiniDialog
LEAF_NODE	1:7	1:7	4	PidginMiniDialog
LEAF_NODE	1:24	1:24	3	*
FUNCTION_NAME	2:0	2:0	2	mini_dialog_new
LEAF_NODE	2:0	2:0	3	mini_dialog_new
PARAMETER_LIST	2:15	2:60	2	( const gchar * title , const gchar * description )
LEAF_NODE	2:15	2:15	3	(
PARAMETER_DECL	2:16	2:29	3	const gchar * title
TYPE	2:16	2:28	4	const gchar *
TYPE_NAME	2:16	2:22	5	const gchar
LEAF_NODE	2:16	2:16	6	const
LEAF_NODE	2:22	2:22	6	gchar
POINTER	2:28	2:28	5	*
LEAF_NODE	2:28	2:28	6	*
NAME	2:29	2:29	4	title
LEAF_NODE	2:29	2:29	5	title
LEAF_NODE	2:34	2:34	3	,
PARAMETER_DECL	2:36	2:49	3	const gchar * description
TYPE	2:36	2:48	4	const gchar *
TYPE_NAME	2:36	2:42	5	const gchar
LEAF_NODE	2:36	2:36	6	const
LEAF_NODE	2:42	2:42	6	gchar
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	description
LEAF_NODE	2:49	2:49	5	description
LEAF_NODE	2:60	2:60	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	7:7	3	return g_object_new ( PIDGIN_TYPE_MINI_DIALOG , "title" , title , "description" , description , NULL ) ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	g_object_new ( PIDGIN_TYPE_MINI_DIALOG , "title" , title , "description" , description , NULL )
EXPR	4:8	4:8	5	g_object_new ( PIDGIN_TYPE_MINI_DIALOG , "title" , title , "description" , description , NULL )
FUNCTION_CALL	4:8	7:6	6	g_object_new ( PIDGIN_TYPE_MINI_DIALOG , "title" , title , "description" , description , NULL )
CALLEE	4:8	4:8	7	g_object_new
LEAF_NODE	4:8	4:8	8	g_object_new
LEAF_NODE	4:20	4:20	7	(
ARGUMENT	4:21	4:21	7	PIDGIN_TYPE_MINI_DIALOG
FIELD	4:21	4:21	8	PIDGIN_TYPE_MINI_DIALOG
LEAF_NODE	4:21	4:21	9	PIDGIN_TYPE_MINI_DIALOG
LEAF_NODE	4:44	4:44	7	,
ARGUMENT	5:2	5:2	7	"title"
FIELD	5:2	5:2	8	"title"
LEAF_NODE	5:2	5:2	9	"title"
LEAF_NODE	5:9	5:9	7	,
ARGUMENT	5:11	5:11	7	title
FIELD	5:11	5:11	8	title
LEAF_NODE	5:11	5:11	9	title
LEAF_NODE	5:16	5:16	7	,
ARGUMENT	6:2	6:2	7	"description"
FIELD	6:2	6:2	8	"description"
LEAF_NODE	6:2	6:2	9	"description"
LEAF_NODE	6:15	6:15	7	,
ARGUMENT	6:17	6:17	7	description
FIELD	6:17	6:17	8	description
LEAF_NODE	6:17	6:17	9	description
LEAF_NODE	6:28	6:28	7	,
ARGUMENT	7:2	7:2	7	NULL
FIELD	7:2	7:2	8	NULL
LEAF_NODE	7:2	7:2	9	NULL
LEAF_NODE	7:6	7:6	7	)
LEAF_NODE	7:7	7:7	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	17:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_account_set_ui_int
LEAF_NODE	2:0	2:0	3	purple_account_set_ui_int
PARAMETER_LIST	2:25	3:33	2	( PurpleAccount * account , const char * ui , const char * name , int value )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:41	3	PurpleAccount * account
TYPE	2:26	2:40	4	PurpleAccount *
TYPE_NAME	2:26	2:26	5	PurpleAccount
LEAF_NODE	2:26	2:26	6	PurpleAccount
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	account
LEAF_NODE	2:41	2:41	5	account
LEAF_NODE	2:48	2:48	3	,
PARAMETER_DECL	2:50	2:62	3	const char * ui
TYPE	2:50	2:61	4	const char *
TYPE_NAME	2:50	2:56	5	const char
LEAF_NODE	2:50	2:50	6	const
LEAF_NODE	2:56	2:56	6	char
POINTER	2:61	2:61	5	*
LEAF_NODE	2:61	2:61	6	*
NAME	2:62	2:62	4	ui
LEAF_NODE	2:62	2:62	5	ui
LEAF_NODE	2:64	2:64	3	,
PARAMETER_DECL	3:6	3:18	3	const char * name
TYPE	3:6	3:17	4	const char *
TYPE_NAME	3:6	3:12	5	const char
LEAF_NODE	3:6	3:6	6	const
LEAF_NODE	3:12	3:12	6	char
POINTER	3:17	3:17	5	*
LEAF_NODE	3:17	3:17	6	*
NAME	3:18	3:18	4	name
LEAF_NODE	3:18	3:18	5	name
LEAF_NODE	3:22	3:22	3	,
PARAMETER_DECL	3:24	3:28	3	int value
TYPE	3:24	3:24	4	int
TYPE_NAME	3:24	3:24	5	int
LEAF_NODE	3:24	3:24	6	int
NAME	3:28	3:28	4	value
LEAF_NODE	3:28	3:28	5	value
LEAF_NODE	3:33	3:33	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	16:1	2	
SIMPLE_DECL	5:1	5:30	3	PurpleAccountSetting * setting ;
VAR_DECL	5:1	5:23	4	PurpleAccountSetting * setting
TYPE	5:1	5:22	5	PurpleAccountSetting *
TYPE_NAME	5:1	5:1	6	PurpleAccountSetting
LEAF_NODE	5:1	5:1	7	PurpleAccountSetting
POINTER	5:22	5:22	6	*
LEAF_NODE	5:22	5:22	7	*
NAME	5:23	5:23	5	setting
LEAF_NODE	5:23	5:23	6	setting
LEAF_NODE	5:30	5:30	4	;
SIMPLE_DECL	6:1	6:18	3	GHashTable * table ;
VAR_DECL	6:1	6:13	4	GHashTable * table
TYPE	6:1	6:12	5	GHashTable *
TYPE_NAME	6:1	6:1	6	GHashTable
LEAF_NODE	6:1	6:1	7	GHashTable
POINTER	6:12	6:12	6	*
LEAF_NODE	6:12	6:12	7	*
NAME	6:13	6:13	5	table
LEAF_NODE	6:13	6:13	6	table
LEAF_NODE	6:18	6:18	4	;
EXPR_STATEMENT	7:1	7:34	3	g_return_if_fail ( account != NULL ) ;
EXPR	7:1	7:1	4	g_return_if_fail ( account != NULL )
FUNCTION_CALL	7:1	7:33	5	g_return_if_fail ( account != NULL )
CALLEE	7:1	7:1	6	g_return_if_fail
LEAF_NODE	7:1	7:1	7	g_return_if_fail
LEAF_NODE	7:17	7:17	6	(
ARGUMENT	7:18	7:29	6	account != NULL
FIELD	7:18	7:18	7	account
LEAF_NODE	7:18	7:18	8	account
EQ_OPERATOR	7:26	7:26	7	!=
LEAF_NODE	7:26	7:26	8	!=
FIELD	7:29	7:29	7	NULL
LEAF_NODE	7:29	7:29	8	NULL
LEAF_NODE	7:33	7:33	6	)
LEAF_NODE	7:34	7:34	4	;
EXPR_STATEMENT	8:1	8:34	3	g_return_if_fail ( ui != NULL ) ;
EXPR	8:1	8:1	4	g_return_if_fail ( ui != NULL )
FUNCTION_CALL	8:1	8:33	5	g_return_if_fail ( ui != NULL )
CALLEE	8:1	8:1	6	g_return_if_fail
LEAF_NODE	8:1	8:1	7	g_return_if_fail
LEAF_NODE	8:17	8:17	6	(
ARGUMENT	8:18	8:29	6	ui != NULL
FIELD	8:18	8:18	7	ui
LEAF_NODE	8:18	8:18	8	ui
EQ_OPERATOR	8:26	8:26	7	!=
LEAF_NODE	8:26	8:26	8	!=
FIELD	8:29	8:29	7	NULL
LEAF_NODE	8:29	8:29	8	NULL
LEAF_NODE	8:33	8:33	6	)
LEAF_NODE	8:34	8:34	4	;
EXPR_STATEMENT	9:1	9:34	3	g_return_if_fail ( name != NULL ) ;
EXPR	9:1	9:1	4	g_return_if_fail ( name != NULL )
FUNCTION_CALL	9:1	9:33	5	g_return_if_fail ( name != NULL )
CALLEE	9:1	9:1	6	g_return_if_fail
LEAF_NODE	9:1	9:1	7	g_return_if_fail
LEAF_NODE	9:17	9:17	6	(
ARGUMENT	9:18	9:29	6	name != NULL
FIELD	9:18	9:18	7	name
LEAF_NODE	9:18	9:18	8	name
EQ_OPERATOR	9:26	9:26	7	!=
LEAF_NODE	9:26	9:26	8	!=
FIELD	9:29	9:29	7	NULL
LEAF_NODE	9:29	9:29	8	NULL
LEAF_NODE	9:33	9:33	6	)
LEAF_NODE	9:34	9:34	4	;
EXPR_STATEMENT	10:1	10:42	3	setting = g_new0 ( PurpleAccountSetting , 1 ) ;
EXPR	10:1	10:1	4	setting = g_new0 ( PurpleAccountSetting , 1 )
ASSIGN	10:1	10:11	5	setting = g_new0 ( PurpleAccountSetting , 1 )
LVAL	10:1	10:1	6	setting
FIELD	10:1	10:1	7	setting
LEAF_NODE	10:1	10:1	8	setting
ASSIGN_OP	10:9	10:9	6	=
LEAF_NODE	10:9	10:9	7	=
RVAL	10:11	10:11	6	g_new0 ( PurpleAccountSetting , 1 )
FUNCTION_CALL	10:11	10:41	7	g_new0 ( PurpleAccountSetting , 1 )
CALLEE	10:11	10:11	8	g_new0
LEAF_NODE	10:11	10:11	9	g_new0
LEAF_NODE	10:17	10:17	8	(
ARGUMENT	10:18	10:18	8	PurpleAccountSetting
FIELD	10:18	10:18	9	PurpleAccountSetting
LEAF_NODE	10:18	10:18	10	PurpleAccountSetting
LEAF_NODE	10:38	10:38	8	,
ARGUMENT	10:40	10:40	8	1
FIELD	10:40	10:40	9	1
LEAF_NODE	10:40	10:40	10	1
LEAF_NODE	10:41	10:41	8	)
LEAF_NODE	10:42	10:42	4	;
EXPR_STATEMENT	11:1	11:41	3	setting -> type = PURPLE_PREF_INT ;
EXPR	11:1	11:1	4	setting -> type = PURPLE_PREF_INT
ASSIGN	11:1	11:26	5	setting -> type = PURPLE_PREF_INT
LVAL	11:1	11:1	6	setting -> type
FIELD	11:1	11:10	7	setting -> type
LEAF_NODE	11:1	11:1	8	setting
LEAF_NODE	11:8	11:8	8	->
LEAF_NODE	11:10	11:10	8	type
ASSIGN_OP	11:24	11:24	6	=
LEAF_NODE	11:24	11:24	7	=
RVAL	11:26	11:26	6	PURPLE_PREF_INT
FIELD	11:26	11:26	7	PURPLE_PREF_INT
LEAF_NODE	11:26	11:26	8	PURPLE_PREF_INT
LEAF_NODE	11:41	11:41	4	;
EXPR_STATEMENT	12:1	12:38	3	setting -> ui = g_strdup ( ui ) ;
EXPR	12:1	12:1	4	setting -> ui = g_strdup ( ui )
ASSIGN	12:1	12:26	5	setting -> ui = g_strdup ( ui )
LVAL	12:1	12:1	6	setting -> ui
FIELD	12:1	12:10	7	setting -> ui
LEAF_NODE	12:1	12:1	8	setting
LEAF_NODE	12:8	12:8	8	->
LEAF_NODE	12:10	12:10	8	ui
ASSIGN_OP	12:24	12:24	6	=
LEAF_NODE	12:24	12:24	7	=
RVAL	12:26	12:26	6	g_strdup ( ui )
FUNCTION_CALL	12:26	12:37	7	g_strdup ( ui )
CALLEE	12:26	12:26	8	g_strdup
LEAF_NODE	12:26	12:26	9	g_strdup
LEAF_NODE	12:34	12:34	8	(
ARGUMENT	12:35	12:35	8	ui
FIELD	12:35	12:35	9	ui
LEAF_NODE	12:35	12:35	10	ui
LEAF_NODE	12:37	12:37	8	)
LEAF_NODE	12:38	12:38	4	;
EXPR_STATEMENT	13:1	13:31	3	setting -> value . integer = value ;
EXPR	13:1	13:1	4	setting -> value . integer = value
ASSIGN	13:1	13:26	5	setting -> value . integer = value
LVAL	13:1	13:1	6	setting -> value . integer
FIELD	13:1	13:16	7	setting -> value . integer
LEAF_NODE	13:1	13:1	8	setting
LEAF_NODE	13:8	13:8	8	->
LEAF_NODE	13:10	13:10	8	value
LEAF_NODE	13:15	13:15	8	.
LEAF_NODE	13:16	13:16	8	integer
ASSIGN_OP	13:24	13:24	6	=
LEAF_NODE	13:24	13:24	7	=
RVAL	13:26	13:26	6	value
FIELD	13:26	13:26	7	value
LEAF_NODE	13:26	13:26	8	value
LEAF_NODE	13:31	13:31	4	;
EXPR_STATEMENT	14:1	14:43	3	table = get_ui_settings_table ( account , ui ) ;
EXPR	14:1	14:1	4	table = get_ui_settings_table ( account , ui )
ASSIGN	14:1	14:9	5	table = get_ui_settings_table ( account , ui )
LVAL	14:1	14:1	6	table
FIELD	14:1	14:1	7	table
LEAF_NODE	14:1	14:1	8	table
ASSIGN_OP	14:7	14:7	6	=
LEAF_NODE	14:7	14:7	7	=
RVAL	14:9	14:9	6	get_ui_settings_table ( account , ui )
FUNCTION_CALL	14:9	14:42	7	get_ui_settings_table ( account , ui )
CALLEE	14:9	14:9	8	get_ui_settings_table
LEAF_NODE	14:9	14:9	9	get_ui_settings_table
LEAF_NODE	14:30	14:30	8	(
ARGUMENT	14:31	14:31	8	account
FIELD	14:31	14:31	9	account
LEAF_NODE	14:31	14:31	10	account
LEAF_NODE	14:38	14:38	8	,
ARGUMENT	14:40	14:40	8	ui
FIELD	14:40	14:40	9	ui
LEAF_NODE	14:40	14:40	10	ui
LEAF_NODE	14:42	14:42	8	)
LEAF_NODE	14:43	14:43	4	;
EXPR_STATEMENT	15:1	15:52	3	g_hash_table_insert ( table , g_strdup ( name ) , setting ) ;
EXPR	15:1	15:1	4	g_hash_table_insert ( table , g_strdup ( name ) , setting )
FUNCTION_CALL	15:1	15:51	5	g_hash_table_insert ( table , g_strdup ( name ) , setting )
CALLEE	15:1	15:1	6	g_hash_table_insert
LEAF_NODE	15:1	15:1	7	g_hash_table_insert
LEAF_NODE	15:20	15:20	6	(
ARGUMENT	15:21	15:21	6	table
FIELD	15:21	15:21	7	table
LEAF_NODE	15:21	15:21	8	table
LEAF_NODE	15:26	15:26	6	,
ARGUMENT	15:28	15:28	6	g_strdup ( name )
FUNCTION_CALL	15:28	15:41	7	g_strdup ( name )
CALLEE	15:28	15:28	8	g_strdup
LEAF_NODE	15:28	15:28	9	g_strdup
LEAF_NODE	15:36	15:36	8	(
ARGUMENT	15:37	15:37	8	name
FIELD	15:37	15:37	9	name
LEAF_NODE	15:37	15:37	10	name
LEAF_NODE	15:41	15:41	8	)
LEAF_NODE	15:42	15:42	6	,
ARGUMENT	15:44	15:44	6	setting
FIELD	15:44	15:44	7	setting
LEAF_NODE	15:44	15:44	8	setting
LEAF_NODE	15:51	15:51	6	)
LEAF_NODE	15:52	15:52	4	;
EXPR_STATEMENT	16:1	16:25	3	schedule_accounts_save ( ) ;
EXPR	16:1	16:1	4	schedule_accounts_save ( )
FUNCTION_CALL	16:1	16:24	5	schedule_accounts_save ( )
CALLEE	16:1	16:1	6	schedule_accounts_save
LEAF_NODE	16:1	16:1	7	schedule_accounts_save
LEAF_NODE	16:23	16:23	6	(
LEAF_NODE	16:24	16:24	6	)
LEAF_NODE	16:25	16:25	4	;
LEAF_NODE	17:0	17:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	12:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	help_for_widget
LEAF_NODE	2:0	2:0	3	help_for_widget
PARAMETER_LIST	2:15	2:50	2	( GntBindable * bindable , GList * null )
LEAF_NODE	2:15	2:15	3	(
PARAMETER_DECL	2:16	2:29	3	GntBindable * bindable
TYPE	2:16	2:28	4	GntBindable *
TYPE_NAME	2:16	2:16	5	GntBindable
LEAF_NODE	2:16	2:16	6	GntBindable
POINTER	2:28	2:28	5	*
LEAF_NODE	2:28	2:28	6	*
NAME	2:29	2:29	4	bindable
LEAF_NODE	2:29	2:29	5	bindable
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:46	3	GList * null
TYPE	2:39	2:45	4	GList *
TYPE_NAME	2:39	2:39	5	GList
LEAF_NODE	2:39	2:39	6	GList
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	null
LEAF_NODE	2:46	2:46	5	null
LEAF_NODE	2:50	2:50	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	11:1	2	
SIMPLE_DECL	4:1	4:29	3	GntWM * wm ; wm = GNT_WM ( bindable ) ;
VAR_DECL	4:1	4:8	4	GntWM * wm ; wm = GNT_WM ( bindable )
TYPE	4:1	4:7	5	GntWM *
TYPE_NAME	4:1	4:1	6	GntWM
LEAF_NODE	4:1	4:1	7	GntWM
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	wm
LEAF_NODE	4:8	4:8	6	wm
LEAF_NODE	0:0	0:0	5	;
INIT	4:8	4:8	5	wm = GNT_WM ( bindable )
ASSIGN	4:8	4:13	6	wm = GNT_WM ( bindable )
LVAL	4:8	4:8	7	wm
NAME	4:8	4:8	8	wm
LEAF_NODE	4:8	4:8	9	wm
ASSIGN_OP	4:11	4:11	7	=
LEAF_NODE	4:11	4:11	8	=
RVAL	4:13	4:13	7	GNT_WM ( bindable )
FUNCTION_CALL	4:13	4:28	8	GNT_WM ( bindable )
CALLEE	4:13	4:13	9	GNT_WM
LEAF_NODE	4:13	4:13	10	GNT_WM
LEAF_NODE	4:19	4:19	9	(
ARGUMENT	4:20	4:20	9	bindable
FIELD	4:20	4:20	10	bindable
LEAF_NODE	4:20	4:20	11	bindable
LEAF_NODE	4:28	4:28	9	)
LEAF_NODE	4:29	4:29	4	;
SIMPLE_DECL	5:1	5:18	3	GntWidget * widget ;
VAR_DECL	5:1	5:12	4	GntWidget * widget
TYPE	5:1	5:11	5	GntWidget *
TYPE_NAME	5:1	5:1	6	GntWidget
LEAF_NODE	5:1	5:1	7	GntWidget
POINTER	5:11	5:11	6	*
LEAF_NODE	5:11	5:11	7	*
NAME	5:12	5:12	5	widget
LEAF_NODE	5:12	5:12	6	widget
LEAF_NODE	5:18	5:18	4	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	! wm -> cws -> ordered
EXPR	6:5	6:5	5	! wm -> cws -> ordered
UNARY_EXPR	6:5	6:6	6	! wm -> cws -> ordered
UNARY_OPERATOR	6:5	6:5	7	!
LEAF_NODE	6:5	6:5	8	!
FIELD	6:6	6:15	7	wm -> cws -> ordered
LEAF_NODE	6:6	6:6	8	wm
LEAF_NODE	6:8	6:8	8	->
LEAF_NODE	6:10	6:10	8	cws
LEAF_NODE	6:13	6:13	8	->
LEAF_NODE	6:15	6:15	8	ordered
LEAF_NODE	6:22	6:22	4	)
STATEMENTS	7:2	7:2	4	
JUMP_STATEMENT	7:2	7:13	5	return TRUE ;
KEYWORD	7:2	7:2	6	return
LEAF_NODE	7:2	7:2	7	return
DESTINATION	7:9	7:9	6	TRUE
EXPR	7:9	7:9	7	TRUE
FIELD	7:9	7:9	8	TRUE
LEAF_NODE	7:9	7:9	9	TRUE
LEAF_NODE	7:13	7:13	6	;
EXPR_STATEMENT	8:1	8:32	3	widget = wm -> cws -> ordered -> data ;
EXPR	8:1	8:1	4	widget = wm -> cws -> ordered -> data
ASSIGN	8:1	8:10	5	widget = wm -> cws -> ordered -> data
LVAL	8:1	8:1	6	widget
FIELD	8:1	8:1	7	widget
LEAF_NODE	8:1	8:1	8	widget
ASSIGN_OP	8:8	8:8	6	=
LEAF_NODE	8:8	8:8	7	=
RVAL	8:10	8:10	6	wm -> cws -> ordered -> data
FIELD	8:10	8:28	7	wm -> cws -> ordered -> data
LEAF_NODE	8:10	8:10	8	wm
LEAF_NODE	8:12	8:12	8	->
LEAF_NODE	8:14	8:14	8	cws
LEAF_NODE	8:17	8:17	8	->
LEAF_NODE	8:19	8:19	8	ordered
LEAF_NODE	8:26	8:26	8	->
LEAF_NODE	8:28	8:28	8	data
LEAF_NODE	8:32	8:32	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	! GNT_IS_BOX ( widget )
EXPR	9:5	9:5	5	! GNT_IS_BOX ( widget )
UNARY_EXPR	9:5	9:6	6	! GNT_IS_BOX ( widget )
UNARY_OPERATOR	9:5	9:5	7	!
LEAF_NODE	9:5	9:5	8	!
FUNCTION_CALL	9:6	9:23	7	GNT_IS_BOX ( widget )
CALLEE	9:6	9:6	8	GNT_IS_BOX
LEAF_NODE	9:6	9:6	9	GNT_IS_BOX
LEAF_NODE	9:16	9:16	8	(
ARGUMENT	9:17	9:17	8	widget
FIELD	9:17	9:17	9	widget
LEAF_NODE	9:17	9:17	10	widget
LEAF_NODE	9:23	9:23	8	)
LEAF_NODE	9:24	9:24	4	)
STATEMENTS	10:2	10:2	4	
JUMP_STATEMENT	10:2	10:13	5	return TRUE ;
KEYWORD	10:2	10:2	6	return
LEAF_NODE	10:2	10:2	7	return
DESTINATION	10:9	10:9	6	TRUE
EXPR	10:9	10:9	7	TRUE
FIELD	10:9	10:9	8	TRUE
LEAF_NODE	10:9	10:9	9	TRUE
LEAF_NODE	10:13	10:13	6	;
JUMP_STATEMENT	11:1	11:68	3	return help_for_bindable ( wm , GNT_BINDABLE ( GNT_BOX ( widget ) -> active ) ) ;
KEYWORD	11:1	11:1	4	return
LEAF_NODE	11:1	11:1	5	return
DESTINATION	11:8	11:8	4	help_for_bindable ( wm , GNT_BINDABLE ( GNT_BOX ( widget ) -> active ) )
EXPR	11:8	11:8	5	help_for_bindable ( wm , GNT_BINDABLE ( GNT_BOX ( widget ) -> active ) )
FUNCTION_CALL	11:8	11:67	6	help_for_bindable ( wm , GNT_BINDABLE ( GNT_BOX ( widget ) -> active ) )
CALLEE	11:8	11:8	7	help_for_bindable
LEAF_NODE	11:8	11:8	8	help_for_bindable
LEAF_NODE	11:25	11:25	7	(
ARGUMENT	11:26	11:26	7	wm
FIELD	11:26	11:26	8	wm
LEAF_NODE	11:26	11:26	9	wm
LEAF_NODE	11:28	11:28	7	,
ARGUMENT	11:30	11:30	7	GNT_BINDABLE ( GNT_BOX ( widget ) -> active )
FUNCTION_CALL	11:30	11:66	8	GNT_BINDABLE ( GNT_BOX ( widget ) -> active )
CALLEE	11:30	11:30	9	GNT_BINDABLE
LEAF_NODE	11:30	11:30	10	GNT_BINDABLE
LEAF_NODE	11:42	11:42	9	(
ARGUMENT	11:43	11:60	9	GNT_BOX ( widget ) -> active
FUNCTION_CALL	11:43	11:57	10	GNT_BOX ( widget )
CALLEE	11:43	11:43	11	GNT_BOX
LEAF_NODE	11:43	11:43	12	GNT_BOX
LEAF_NODE	11:50	11:50	11	(
ARGUMENT	11:51	11:51	11	widget
FIELD	11:51	11:51	12	widget
LEAF_NODE	11:51	11:51	13	widget
LEAF_NODE	11:57	11:57	11	)
LEAF_NODE	11:58	11:58	10	->
LEAF_NODE	11:60	11:60	10	active
LEAF_NODE	11:66	11:66	9	)
LEAF_NODE	11:67	11:67	7	)
LEAF_NODE	11:68	11:68	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	free_conv_message
LEAF_NODE	2:0	2:0	3	free_conv_message
PARAMETER_LIST	2:17	2:40	2	( PurpleConvMessage * msg )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:37	3	PurpleConvMessage * msg
TYPE	2:18	2:36	4	PurpleConvMessage *
TYPE_NAME	2:18	2:18	5	PurpleConvMessage
LEAF_NODE	2:18	2:18	6	PurpleConvMessage
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	msg
LEAF_NODE	2:37	2:37	5	msg
LEAF_NODE	2:40	2:40	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
EXPR_STATEMENT	4:1	4:17	3	g_free ( msg -> who ) ;
EXPR	4:1	4:1	4	g_free ( msg -> who )
FUNCTION_CALL	4:1	4:16	5	g_free ( msg -> who )
CALLEE	4:1	4:1	6	g_free
LEAF_NODE	4:1	4:1	7	g_free
LEAF_NODE	4:7	4:7	6	(
ARGUMENT	4:8	4:8	6	msg -> who
FIELD	4:8	4:13	7	msg -> who
LEAF_NODE	4:8	4:8	8	msg
LEAF_NODE	4:11	4:11	8	->
LEAF_NODE	4:13	4:13	8	who
LEAF_NODE	4:16	4:16	6	)
LEAF_NODE	4:17	4:17	4	;
EXPR_STATEMENT	5:1	5:19	3	g_free ( msg -> alias ) ;
EXPR	5:1	5:1	4	g_free ( msg -> alias )
FUNCTION_CALL	5:1	5:18	5	g_free ( msg -> alias )
CALLEE	5:1	5:1	6	g_free
LEAF_NODE	5:1	5:1	7	g_free
LEAF_NODE	5:7	5:7	6	(
ARGUMENT	5:8	5:8	6	msg -> alias
FIELD	5:8	5:13	7	msg -> alias
LEAF_NODE	5:8	5:8	8	msg
LEAF_NODE	5:11	5:11	8	->
LEAF_NODE	5:13	5:13	8	alias
LEAF_NODE	5:18	5:18	6	)
LEAF_NODE	5:19	5:19	4	;
EXPR_STATEMENT	6:1	6:18	3	g_free ( msg -> what ) ;
EXPR	6:1	6:1	4	g_free ( msg -> what )
FUNCTION_CALL	6:1	6:17	5	g_free ( msg -> what )
CALLEE	6:1	6:1	6	g_free
LEAF_NODE	6:1	6:1	7	g_free
LEAF_NODE	6:7	6:7	6	(
ARGUMENT	6:8	6:8	6	msg -> what
FIELD	6:8	6:13	7	msg -> what
LEAF_NODE	6:8	6:8	8	msg
LEAF_NODE	6:11	6:11	8	->
LEAF_NODE	6:13	6:13	8	what
LEAF_NODE	6:17	6:17	6	)
LEAF_NODE	6:18	6:18	4	;
EXPR_STATEMENT	7:1	7:36	3	PURPLE_DBUS_UNREGISTER_POINTER ( msg ) ;
EXPR	7:1	7:1	4	PURPLE_DBUS_UNREGISTER_POINTER ( msg )
FUNCTION_CALL	7:1	7:35	5	PURPLE_DBUS_UNREGISTER_POINTER ( msg )
CALLEE	7:1	7:1	6	PURPLE_DBUS_UNREGISTER_POINTER
LEAF_NODE	7:1	7:1	7	PURPLE_DBUS_UNREGISTER_POINTER
LEAF_NODE	7:31	7:31	6	(
ARGUMENT	7:32	7:32	6	msg
FIELD	7:32	7:32	7	msg
LEAF_NODE	7:32	7:32	8	msg
LEAF_NODE	7:35	7:35	6	)
LEAF_NODE	7:36	7:36	4	;
EXPR_STATEMENT	8:1	8:12	3	g_free ( msg ) ;
EXPR	8:1	8:1	4	g_free ( msg )
FUNCTION_CALL	8:1	8:11	5	g_free ( msg )
CALLEE	8:1	8:1	6	g_free
LEAF_NODE	8:1	8:1	7	g_free
LEAF_NODE	8:7	8:7	6	(
ARGUMENT	8:8	8:8	6	msg
FIELD	8:8	8:8	7	msg
LEAF_NODE	8:8	8:8	8	msg
LEAF_NODE	8:11	8:11	6	)
LEAF_NODE	8:12	8:12	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	82:0	0	
FUNCTION_DEF	1:0	81:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	lines_match
LEAF_NODE	2:0	2:0	3	lines_match
PARAMETER_LIST	2:12	7:34	2	( const GtkTextIter * start , const gchar * * lines , gboolean visible_only , gboolean slice , GtkTextIter * match_start , GtkTextIter * match_end )
LEAF_NODE	2:12	2:12	3	(
PARAMETER_DECL	2:13	2:32	3	const GtkTextIter * start
TYPE	2:13	2:31	4	const GtkTextIter *
TYPE_NAME	2:13	2:19	5	const GtkTextIter
LEAF_NODE	2:13	2:13	6	const
LEAF_NODE	2:19	2:19	6	GtkTextIter
POINTER	2:31	2:31	5	*
LEAF_NODE	2:31	2:31	6	*
NAME	2:32	2:32	4	start
LEAF_NODE	2:32	2:32	5	start
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	3:6	3:25	3	const gchar * * lines
TYPE	3:6	3:23	4	const gchar * *
TYPE_NAME	3:6	3:12	5	const gchar
LEAF_NODE	3:6	3:6	6	const
LEAF_NODE	3:12	3:12	6	gchar
POINTER	3:23	3:24	5	* *
LEAF_NODE	3:23	3:23	6	*
LEAF_NODE	3:24	3:24	6	*
NAME	3:25	3:25	4	lines
LEAF_NODE	3:25	3:25	5	lines
LEAF_NODE	3:30	3:30	3	,
PARAMETER_DECL	4:6	4:25	3	gboolean visible_only
TYPE	4:6	4:6	4	gboolean
TYPE_NAME	4:6	4:6	5	gboolean
LEAF_NODE	4:6	4:6	6	gboolean
NAME	4:25	4:25	4	visible_only
LEAF_NODE	4:25	4:25	5	visible_only
LEAF_NODE	4:37	4:37	3	,
PARAMETER_DECL	5:6	5:25	3	gboolean slice
TYPE	5:6	5:6	4	gboolean
TYPE_NAME	5:6	5:6	5	gboolean
LEAF_NODE	5:6	5:6	6	gboolean
NAME	5:25	5:25	4	slice
LEAF_NODE	5:25	5:25	5	slice
LEAF_NODE	5:30	5:30	3	,
PARAMETER_DECL	6:6	6:25	3	GtkTextIter * match_start
TYPE	6:6	6:24	4	GtkTextIter *
TYPE_NAME	6:6	6:6	5	GtkTextIter
LEAF_NODE	6:6	6:6	6	GtkTextIter
POINTER	6:24	6:24	5	*
LEAF_NODE	6:24	6:24	6	*
NAME	6:25	6:25	4	match_start
LEAF_NODE	6:25	6:25	5	match_start
LEAF_NODE	6:36	6:36	3	,
PARAMETER_DECL	7:6	7:25	3	GtkTextIter * match_end
TYPE	7:6	7:24	4	GtkTextIter *
TYPE_NAME	7:6	7:6	5	GtkTextIter
LEAF_NODE	7:6	7:6	6	GtkTextIter
POINTER	7:24	7:24	5	*
LEAF_NODE	7:24	7:24	6	*
NAME	7:25	7:25	4	match_end
LEAF_NODE	7:25	7:25	5	match_end
LEAF_NODE	7:34	7:34	3	)
LEAF_NODE	8:0	8:0	2	{
STATEMENTS	9:1	80:1	2	
SIMPLE_DECL	9:1	9:17	3	GtkTextIter next ;
VAR_DECL	9:1	9:13	4	GtkTextIter next
TYPE	9:1	9:1	5	GtkTextIter
TYPE_NAME	9:1	9:1	6	GtkTextIter
LEAF_NODE	9:1	9:1	7	GtkTextIter
NAME	9:13	9:13	5	next
LEAF_NODE	9:13	9:13	6	next
LEAF_NODE	9:17	9:17	4	;
SIMPLE_DECL	10:1	10:17	3	gchar * line_text ;
VAR_DECL	10:1	10:8	4	gchar * line_text
TYPE	10:1	10:7	5	gchar *
TYPE_NAME	10:1	10:1	6	gchar
LEAF_NODE	10:1	10:1	7	gchar
POINTER	10:7	10:7	6	*
LEAF_NODE	10:7	10:7	7	*
NAME	10:8	10:8	5	line_text
LEAF_NODE	10:8	10:8	6	line_text
LEAF_NODE	10:17	10:17	4	;
SIMPLE_DECL	11:1	11:19	3	const gchar * found ;
VAR_DECL	11:1	11:14	4	const gchar * found
TYPE	11:1	11:13	5	const gchar *
TYPE_NAME	11:1	11:7	6	const gchar
LEAF_NODE	11:1	11:1	7	const
LEAF_NODE	11:7	11:7	7	gchar
POINTER	11:13	11:13	6	*
LEAF_NODE	11:13	11:13	7	*
NAME	11:14	11:14	5	found
LEAF_NODE	11:14	11:14	6	found
LEAF_NODE	11:19	11:19	4	;
SIMPLE_DECL	12:1	12:12	3	gint offset ;
VAR_DECL	12:1	12:6	4	gint offset
TYPE	12:1	12:1	5	gint
TYPE_NAME	12:1	12:1	6	gint
LEAF_NODE	12:1	12:1	7	gint
NAME	12:6	12:6	5	offset
LEAF_NODE	12:6	12:6	6	offset
LEAF_NODE	12:12	12:12	4	;
SELECTION	13:1	14:1	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	* lines == NULL || * * lines == '\0'
EXPR	13:5	13:5	5	* lines == NULL || * * lines == '\0'
OR	13:5	13:23	6	* lines == NULL || * * lines == '\0'
EXPR	13:5	13:15	7	* lines == NULL
UNARY_EXPR	13:5	13:6	8	* lines
UNARY_OPERATOR	13:5	13:5	9	*
LEAF_NODE	13:5	13:5	10	*
FIELD	13:6	13:6	9	lines
LEAF_NODE	13:6	13:6	10	lines
EQ_OPERATOR	13:12	13:12	8	==
LEAF_NODE	13:12	13:12	9	==
FIELD	13:15	13:15	8	NULL
LEAF_NODE	13:15	13:15	9	NULL
LEAF_NODE	13:20	13:20	7	||
EXPR	13:23	13:34	7	* * lines == '\0'
UNARY_EXPR	13:23	13:25	8	* * lines
UNARY_OPERATOR	13:23	13:23	9	*
LEAF_NODE	13:23	13:23	10	*
UNARY_OPERATOR	13:24	13:24	9	*
LEAF_NODE	13:24	13:24	10	*
FIELD	13:25	13:25	9	lines
LEAF_NODE	13:25	13:25	10	lines
EQ_OPERATOR	13:31	13:31	8	==
LEAF_NODE	13:31	13:31	9	==
FIELD	13:34	13:34	8	'\0'
LEAF_NODE	13:34	13:34	9	'\0'
LEAF_NODE	13:38	13:38	4	)
STATEMENTS	14:1	20:1	4	
LEAF_NODE	14:1	14:1	5	{
STATEMENTS	15:2	19:2	5	
SELECTION	15:2	16:3	6	
KEYWORD	15:2	15:2	7	if
LEAF_NODE	15:2	15:2	8	if
LEAF_NODE	15:5	15:5	7	(
CONDITION	15:6	15:6	7	match_start
EXPR	15:6	15:6	8	match_start
FIELD	15:6	15:6	9	match_start
LEAF_NODE	15:6	15:6	10	match_start
LEAF_NODE	15:17	15:17	7	)
STATEMENTS	16:3	16:3	7	
EXPR_STATEMENT	16:3	16:24	8	* match_start = * start ;
EXPR	16:3	16:3	9	* match_start = * start
ASSIGN	16:3	16:18	10	* match_start = * start
LVAL	16:3	16:3	11	* match_start
UNARY_EXPR	16:3	16:4	12	* match_start
UNARY_OPERATOR	16:3	16:3	13	*
LEAF_NODE	16:3	16:3	14	*
FIELD	16:4	16:4	13	match_start
LEAF_NODE	16:4	16:4	14	match_start
ASSIGN_OP	16:16	16:16	11	=
LEAF_NODE	16:16	16:16	12	=
RVAL	16:18	16:18	11	* start
UNARY_EXPR	16:18	16:19	12	* start
UNARY_OPERATOR	16:18	16:18	13	*
LEAF_NODE	16:18	16:18	14	*
FIELD	16:19	16:19	13	start
LEAF_NODE	16:19	16:19	14	start
LEAF_NODE	16:24	16:24	9	;
SELECTION	17:2	18:3	6	
KEYWORD	17:2	17:2	7	if
LEAF_NODE	17:2	17:2	8	if
LEAF_NODE	17:5	17:5	7	(
CONDITION	17:6	17:6	7	match_end
EXPR	17:6	17:6	8	match_end
FIELD	17:6	17:6	9	match_end
LEAF_NODE	17:6	17:6	10	match_end
LEAF_NODE	17:15	17:15	7	)
STATEMENTS	18:3	18:3	7	
EXPR_STATEMENT	18:3	18:22	8	* match_end = * start ;
EXPR	18:3	18:3	9	* match_end = * start
ASSIGN	18:3	18:16	10	* match_end = * start
LVAL	18:3	18:3	11	* match_end
UNARY_EXPR	18:3	18:4	12	* match_end
UNARY_OPERATOR	18:3	18:3	13	*
LEAF_NODE	18:3	18:3	14	*
FIELD	18:4	18:4	13	match_end
LEAF_NODE	18:4	18:4	14	match_end
ASSIGN_OP	18:14	18:14	11	=
LEAF_NODE	18:14	18:14	12	=
RVAL	18:16	18:16	11	* start
UNARY_EXPR	18:16	18:17	12	* start
UNARY_OPERATOR	18:16	18:16	13	*
LEAF_NODE	18:16	18:16	14	*
FIELD	18:17	18:17	13	start
LEAF_NODE	18:17	18:17	14	start
LEAF_NODE	18:22	18:22	9	;
JUMP_STATEMENT	19:2	19:13	6	return TRUE ;
KEYWORD	19:2	19:2	7	return
LEAF_NODE	19:2	19:2	8	return
DESTINATION	19:9	19:9	7	TRUE
EXPR	19:9	19:9	8	TRUE
FIELD	19:9	19:9	9	TRUE
LEAF_NODE	19:9	19:9	10	TRUE
LEAF_NODE	19:13	19:13	7	;
LEAF_NODE	20:1	20:1	5	}
EXPR_STATEMENT	21:1	21:14	3	next = * start ;
EXPR	21:1	21:1	4	next = * start
ASSIGN	21:1	21:8	5	next = * start
LVAL	21:1	21:1	6	next
FIELD	21:1	21:1	7	next
LEAF_NODE	21:1	21:1	8	next
ASSIGN_OP	21:6	21:6	6	=
LEAF_NODE	21:6	21:6	7	=
RVAL	21:8	21:8	6	* start
UNARY_EXPR	21:8	21:9	7	* start
UNARY_OPERATOR	21:8	21:8	8	*
LEAF_NODE	21:8	21:8	9	*
FIELD	21:9	21:9	8	start
LEAF_NODE	21:9	21:9	9	start
LEAF_NODE	21:14	21:14	4	;
EXPR_STATEMENT	22:1	22:35	3	gtk_text_iter_forward_line ( & next ) ;
EXPR	22:1	22:1	4	gtk_text_iter_forward_line ( & next )
FUNCTION_CALL	22:1	22:34	5	gtk_text_iter_forward_line ( & next )
CALLEE	22:1	22:1	6	gtk_text_iter_forward_line
LEAF_NODE	22:1	22:1	7	gtk_text_iter_forward_line
LEAF_NODE	22:28	22:28	6	(
ARGUMENT	22:29	22:29	6	& next
UNARY_EXPR	22:29	22:30	7	& next
UNARY_OPERATOR	22:29	22:29	8	&
LEAF_NODE	22:29	22:29	9	&
FIELD	22:30	22:30	8	next
LEAF_NODE	22:30	22:30	9	next
LEAF_NODE	22:34	22:34	6	)
LEAF_NODE	22:35	22:35	4	;
SELECTION	24:1	25:2	3	
KEYWORD	24:1	24:1	4	if
LEAF_NODE	24:1	24:1	5	if
LEAF_NODE	24:4	24:4	4	(
CONDITION	24:5	24:5	4	gtk_text_iter_equal ( start , & next )
EXPR	24:5	24:5	5	gtk_text_iter_equal ( start , & next )
FUNCTION_CALL	24:5	24:38	6	gtk_text_iter_equal ( start , & next )
CALLEE	24:5	24:5	7	gtk_text_iter_equal
LEAF_NODE	24:5	24:5	8	gtk_text_iter_equal
LEAF_NODE	24:25	24:25	7	(
ARGUMENT	24:26	24:26	7	start
FIELD	24:26	24:26	8	start
LEAF_NODE	24:26	24:26	9	start
LEAF_NODE	24:31	24:31	7	,
ARGUMENT	24:33	24:33	7	& next
UNARY_EXPR	24:33	24:34	8	& next
UNARY_OPERATOR	24:33	24:33	9	&
LEAF_NODE	24:33	24:33	10	&
FIELD	24:34	24:34	9	next
LEAF_NODE	24:34	24:34	10	next
LEAF_NODE	24:38	24:38	7	)
LEAF_NODE	24:39	24:39	4	)
STATEMENTS	25:2	25:2	4	
JUMP_STATEMENT	25:2	25:14	5	return FALSE ;
KEYWORD	25:2	25:2	6	return
LEAF_NODE	25:2	25:2	7	return
DESTINATION	25:9	25:9	6	FALSE
EXPR	25:9	25:9	7	FALSE
FIELD	25:9	25:9	8	FALSE
LEAF_NODE	25:9	25:9	9	FALSE
LEAF_NODE	25:14	25:14	6	;
SELECTION	26:1	27:1	3	
KEYWORD	26:1	26:1	4	if
LEAF_NODE	26:1	26:1	5	if
LEAF_NODE	26:4	26:4	4	(
CONDITION	26:5	26:5	4	slice
EXPR	26:5	26:5	5	slice
FIELD	26:5	26:5	6	slice
LEAF_NODE	26:5	26:5	7	slice
LEAF_NODE	26:10	26:10	4	)
STATEMENTS	27:1	32:1	4	
LEAF_NODE	27:1	27:1	5	{
STATEMENTS	28:2	30:2	5	
SELECTION	28:2	29:3	6	
KEYWORD	28:2	28:2	7	if
LEAF_NODE	28:2	28:2	8	if
LEAF_NODE	28:5	28:5	7	(
CONDITION	28:6	28:6	7	visible_only
EXPR	28:6	28:6	8	visible_only
FIELD	28:6	28:6	9	visible_only
LEAF_NODE	28:6	28:6	10	visible_only
LEAF_NODE	28:18	28:18	7	)
STATEMENTS	29:3	29:3	7	
EXPR_STATEMENT	29:3	29:61	8	line_text = gtk_text_iter_get_visible_slice ( start , & next ) ;
EXPR	29:3	29:3	9	line_text = gtk_text_iter_get_visible_slice ( start , & next )
ASSIGN	29:3	29:15	10	line_text = gtk_text_iter_get_visible_slice ( start , & next )
LVAL	29:3	29:3	11	line_text
FIELD	29:3	29:3	12	line_text
LEAF_NODE	29:3	29:3	13	line_text
ASSIGN_OP	29:13	29:13	11	=
LEAF_NODE	29:13	29:13	12	=
RVAL	29:15	29:15	11	gtk_text_iter_get_visible_slice ( start , & next )
FUNCTION_CALL	29:15	29:60	12	gtk_text_iter_get_visible_slice ( start , & next )
CALLEE	29:15	29:15	13	gtk_text_iter_get_visible_slice
LEAF_NODE	29:15	29:15	14	gtk_text_iter_get_visible_slice
LEAF_NODE	29:47	29:47	13	(
ARGUMENT	29:48	29:48	13	start
FIELD	29:48	29:48	14	start
LEAF_NODE	29:48	29:48	15	start
LEAF_NODE	29:53	29:53	13	,
ARGUMENT	29:55	29:55	13	& next
UNARY_EXPR	29:55	29:56	14	& next
UNARY_OPERATOR	29:55	29:55	15	&
LEAF_NODE	29:55	29:55	16	&
FIELD	29:56	29:56	15	next
LEAF_NODE	29:56	29:56	16	next
LEAF_NODE	29:60	29:60	13	)
LEAF_NODE	29:61	29:61	9	;
SELECTION	30:2	31:3	6	
KEYWORD	30:2	30:2	7	else
LEAF_NODE	30:2	30:2	8	else
STATEMENTS	31:3	31:3	7	
EXPR_STATEMENT	31:3	31:53	8	line_text = gtk_text_iter_get_slice ( start , & next ) ;
EXPR	31:3	31:3	9	line_text = gtk_text_iter_get_slice ( start , & next )
ASSIGN	31:3	31:15	10	line_text = gtk_text_iter_get_slice ( start , & next )
LVAL	31:3	31:3	11	line_text
FIELD	31:3	31:3	12	line_text
LEAF_NODE	31:3	31:3	13	line_text
ASSIGN_OP	31:13	31:13	11	=
LEAF_NODE	31:13	31:13	12	=
RVAL	31:15	31:15	11	gtk_text_iter_get_slice ( start , & next )
FUNCTION_CALL	31:15	31:52	12	gtk_text_iter_get_slice ( start , & next )
CALLEE	31:15	31:15	13	gtk_text_iter_get_slice
LEAF_NODE	31:15	31:15	14	gtk_text_iter_get_slice
LEAF_NODE	31:39	31:39	13	(
ARGUMENT	31:40	31:40	13	start
FIELD	31:40	31:40	14	start
LEAF_NODE	31:40	31:40	15	start
LEAF_NODE	31:45	31:45	13	,
ARGUMENT	31:47	31:47	13	& next
UNARY_EXPR	31:47	31:48	14	& next
UNARY_OPERATOR	31:47	31:47	15	&
LEAF_NODE	31:47	31:47	16	&
FIELD	31:48	31:48	15	next
LEAF_NODE	31:48	31:48	16	next
LEAF_NODE	31:52	31:52	13	)
LEAF_NODE	31:53	31:53	9	;
LEAF_NODE	32:1	32:1	5	}
SELECTION	33:1	34:1	3	
KEYWORD	33:1	33:1	4	else
LEAF_NODE	33:1	33:1	5	else
STATEMENTS	34:1	39:1	4	
LEAF_NODE	34:1	34:1	5	{
STATEMENTS	35:2	37:2	5	
SELECTION	35:2	36:3	6	
KEYWORD	35:2	35:2	7	if
LEAF_NODE	35:2	35:2	8	if
LEAF_NODE	35:5	35:5	7	(
CONDITION	35:6	35:6	7	visible_only
EXPR	35:6	35:6	8	visible_only
FIELD	35:6	35:6	9	visible_only
LEAF_NODE	35:6	35:6	10	visible_only
LEAF_NODE	35:18	35:18	7	)
STATEMENTS	36:3	36:3	7	
EXPR_STATEMENT	36:3	36:60	8	line_text = gtk_text_iter_get_visible_text ( start , & next ) ;
EXPR	36:3	36:3	9	line_text = gtk_text_iter_get_visible_text ( start , & next )
ASSIGN	36:3	36:15	10	line_text = gtk_text_iter_get_visible_text ( start , & next )
LVAL	36:3	36:3	11	line_text
FIELD	36:3	36:3	12	line_text
LEAF_NODE	36:3	36:3	13	line_text
ASSIGN_OP	36:13	36:13	11	=
LEAF_NODE	36:13	36:13	12	=
RVAL	36:15	36:15	11	gtk_text_iter_get_visible_text ( start , & next )
FUNCTION_CALL	36:15	36:59	12	gtk_text_iter_get_visible_text ( start , & next )
CALLEE	36:15	36:15	13	gtk_text_iter_get_visible_text
LEAF_NODE	36:15	36:15	14	gtk_text_iter_get_visible_text
LEAF_NODE	36:46	36:46	13	(
ARGUMENT	36:47	36:47	13	start
FIELD	36:47	36:47	14	start
LEAF_NODE	36:47	36:47	15	start
LEAF_NODE	36:52	36:52	13	,
ARGUMENT	36:54	36:54	13	& next
UNARY_EXPR	36:54	36:55	14	& next
UNARY_OPERATOR	36:54	36:54	15	&
LEAF_NODE	36:54	36:54	16	&
FIELD	36:55	36:55	15	next
LEAF_NODE	36:55	36:55	16	next
LEAF_NODE	36:59	36:59	13	)
LEAF_NODE	36:60	36:60	9	;
SELECTION	37:2	38:3	6	
KEYWORD	37:2	37:2	7	else
LEAF_NODE	37:2	37:2	8	else
STATEMENTS	38:3	38:3	7	
EXPR_STATEMENT	38:3	38:52	8	line_text = gtk_text_iter_get_text ( start , & next ) ;
EXPR	38:3	38:3	9	line_text = gtk_text_iter_get_text ( start , & next )
ASSIGN	38:3	38:15	10	line_text = gtk_text_iter_get_text ( start , & next )
LVAL	38:3	38:3	11	line_text
FIELD	38:3	38:3	12	line_text
LEAF_NODE	38:3	38:3	13	line_text
ASSIGN_OP	38:13	38:13	11	=
LEAF_NODE	38:13	38:13	12	=
RVAL	38:15	38:15	11	gtk_text_iter_get_text ( start , & next )
FUNCTION_CALL	38:15	38:51	12	gtk_text_iter_get_text ( start , & next )
CALLEE	38:15	38:15	13	gtk_text_iter_get_text
LEAF_NODE	38:15	38:15	14	gtk_text_iter_get_text
LEAF_NODE	38:38	38:38	13	(
ARGUMENT	38:39	38:39	13	start
FIELD	38:39	38:39	14	start
LEAF_NODE	38:39	38:39	15	start
LEAF_NODE	38:44	38:44	13	,
ARGUMENT	38:46	38:46	13	& next
UNARY_EXPR	38:46	38:47	14	& next
UNARY_OPERATOR	38:46	38:46	15	&
LEAF_NODE	38:46	38:46	16	&
FIELD	38:47	38:47	15	next
LEAF_NODE	38:47	38:47	16	next
LEAF_NODE	38:51	38:51	13	)
LEAF_NODE	38:52	38:52	9	;
LEAF_NODE	39:1	39:1	5	}
SELECTION	40:1	41:1	3	
KEYWORD	40:1	40:1	4	if
LEAF_NODE	40:1	40:1	5	if
LEAF_NODE	40:4	40:4	4	(
CONDITION	40:5	40:5	4	match_start
EXPR	40:5	40:5	5	match_start
FIELD	40:5	40:5	6	match_start
LEAF_NODE	40:5	40:5	7	match_start
LEAF_NODE	40:16	40:16	4	)
STATEMENTS	41:1	43:1	4	
LEAF_NODE	41:1	41:1	5	{
STATEMENTS	42:2	42:2	5	
EXPR_STATEMENT	42:2	42:47	6	found = g_utf8_strcasestr ( line_text , * lines ) ;
EXPR	42:2	42:2	7	found = g_utf8_strcasestr ( line_text , * lines )
ASSIGN	42:2	42:10	8	found = g_utf8_strcasestr ( line_text , * lines )
LVAL	42:2	42:2	9	found
FIELD	42:2	42:2	10	found
LEAF_NODE	42:2	42:2	11	found
ASSIGN_OP	42:8	42:8	9	=
LEAF_NODE	42:8	42:8	10	=
RVAL	42:10	42:10	9	g_utf8_strcasestr ( line_text , * lines )
FUNCTION_CALL	42:10	42:46	10	g_utf8_strcasestr ( line_text , * lines )
CALLEE	42:10	42:10	11	g_utf8_strcasestr
LEAF_NODE	42:10	42:10	12	g_utf8_strcasestr
LEAF_NODE	42:28	42:28	11	(
ARGUMENT	42:29	42:29	11	line_text
FIELD	42:29	42:29	12	line_text
LEAF_NODE	42:29	42:29	13	line_text
LEAF_NODE	42:38	42:38	11	,
ARGUMENT	42:40	42:40	11	* lines
UNARY_EXPR	42:40	42:41	12	* lines
UNARY_OPERATOR	42:40	42:40	13	*
LEAF_NODE	42:40	42:40	14	*
FIELD	42:41	42:41	13	lines
LEAF_NODE	42:41	42:41	14	lines
LEAF_NODE	42:46	42:46	11	)
LEAF_NODE	42:47	42:47	7	;
LEAF_NODE	43:1	43:1	5	}
SELECTION	44:1	45:1	3	
KEYWORD	44:1	44:1	4	else
LEAF_NODE	44:1	44:1	5	else
STATEMENTS	45:1	54:1	4	
LEAF_NODE	45:1	45:1	5	{
STATEMENTS	49:2	52:2	5	
SELECTION	49:2	51:3	6	
KEYWORD	49:2	49:2	7	if
LEAF_NODE	49:2	49:2	8	if
LEAF_NODE	49:5	49:5	7	(
CONDITION	49:6	49:6	7	g_utf8_caselessnmatch ( line_text , * lines , strlen ( line_text ) , strlen ( * lines ) )
EXPR	49:6	49:6	8	g_utf8_caselessnmatch ( line_text , * lines , strlen ( line_text ) , strlen ( * lines ) )
FUNCTION_CALL	49:6	50:23	9	g_utf8_caselessnmatch ( line_text , * lines , strlen ( line_text ) , strlen ( * lines ) )
CALLEE	49:6	49:6	10	g_utf8_caselessnmatch
LEAF_NODE	49:6	49:6	11	g_utf8_caselessnmatch
LEAF_NODE	49:28	49:28	10	(
ARGUMENT	49:29	49:29	10	line_text
FIELD	49:29	49:29	11	line_text
LEAF_NODE	49:29	49:29	12	line_text
LEAF_NODE	49:38	49:38	10	,
ARGUMENT	49:40	49:40	10	* lines
UNARY_EXPR	49:40	49:41	11	* lines
UNARY_OPERATOR	49:40	49:40	12	*
LEAF_NODE	49:40	49:40	13	*
FIELD	49:41	49:41	12	lines
LEAF_NODE	49:41	49:41	13	lines
LEAF_NODE	49:46	49:46	10	,
ARGUMENT	49:48	49:48	10	strlen ( line_text )
FUNCTION_CALL	49:48	49:65	11	strlen ( line_text )
CALLEE	49:48	49:48	12	strlen
LEAF_NODE	49:48	49:48	13	strlen
LEAF_NODE	49:55	49:55	12	(
ARGUMENT	49:56	49:56	12	line_text
FIELD	49:56	49:56	13	line_text
LEAF_NODE	49:56	49:56	14	line_text
LEAF_NODE	49:65	49:65	12	)
LEAF_NODE	49:66	49:66	10	,
ARGUMENT	50:8	50:8	10	strlen ( * lines )
FUNCTION_CALL	50:8	50:22	11	strlen ( * lines )
CALLEE	50:8	50:8	12	strlen
LEAF_NODE	50:8	50:8	13	strlen
LEAF_NODE	50:15	50:15	12	(
ARGUMENT	50:16	50:16	12	* lines
UNARY_EXPR	50:16	50:17	13	* lines
UNARY_OPERATOR	50:16	50:16	14	*
LEAF_NODE	50:16	50:16	15	*
FIELD	50:17	50:17	14	lines
LEAF_NODE	50:17	50:17	15	lines
LEAF_NODE	50:22	50:22	12	)
LEAF_NODE	50:23	50:23	10	)
LEAF_NODE	50:24	50:24	7	)
STATEMENTS	51:3	51:3	7	
EXPR_STATEMENT	51:3	51:20	8	found = line_text ;
EXPR	51:3	51:3	9	found = line_text
ASSIGN	51:3	51:11	10	found = line_text
LVAL	51:3	51:3	11	found
FIELD	51:3	51:3	12	found
LEAF_NODE	51:3	51:3	13	found
ASSIGN_OP	51:9	51:9	11	=
LEAF_NODE	51:9	51:9	12	=
RVAL	51:11	51:11	11	line_text
FIELD	51:11	51:11	12	line_text
LEAF_NODE	51:11	51:11	13	line_text
LEAF_NODE	51:20	51:20	9	;
SELECTION	52:2	53:3	6	
KEYWORD	52:2	52:2	7	else
LEAF_NODE	52:2	52:2	8	else
STATEMENTS	53:3	53:3	7	
EXPR_STATEMENT	53:3	53:15	8	found = NULL ;
EXPR	53:3	53:3	9	found = NULL
ASSIGN	53:3	53:11	10	found = NULL
LVAL	53:3	53:3	11	found
FIELD	53:3	53:3	12	found
LEAF_NODE	53:3	53:3	13	found
ASSIGN_OP	53:9	53:9	11	=
LEAF_NODE	53:9	53:9	12	=
RVAL	53:11	53:11	11	NULL
FIELD	53:11	53:11	12	NULL
LEAF_NODE	53:11	53:11	13	NULL
LEAF_NODE	53:15	53:15	9	;
LEAF_NODE	54:1	54:1	5	}
SELECTION	55:1	56:1	3	
KEYWORD	55:1	55:1	4	if
LEAF_NODE	55:1	55:1	5	if
LEAF_NODE	55:4	55:4	4	(
CONDITION	55:5	55:5	4	found == NULL
EXPR	55:5	55:14	5	found == NULL
FIELD	55:5	55:5	6	found
LEAF_NODE	55:5	55:5	7	found
EQ_OPERATOR	55:11	55:11	6	==
LEAF_NODE	55:11	55:11	7	==
FIELD	55:14	55:14	6	NULL
LEAF_NODE	55:14	55:14	7	NULL
LEAF_NODE	55:18	55:18	4	)
STATEMENTS	56:1	59:1	4	
LEAF_NODE	56:1	56:1	5	{
STATEMENTS	57:2	58:2	5	
EXPR_STATEMENT	57:2	57:20	6	g_free ( line_text ) ;
EXPR	57:2	57:2	7	g_free ( line_text )
FUNCTION_CALL	57:2	57:19	8	g_free ( line_text )
CALLEE	57:2	57:2	9	g_free
LEAF_NODE	57:2	57:2	10	g_free
LEAF_NODE	57:9	57:9	9	(
ARGUMENT	57:10	57:10	9	line_text
FIELD	57:10	57:10	10	line_text
LEAF_NODE	57:10	57:10	11	line_text
LEAF_NODE	57:19	57:19	9	)
LEAF_NODE	57:20	57:20	7	;
JUMP_STATEMENT	58:2	58:14	6	return FALSE ;
KEYWORD	58:2	58:2	7	return
LEAF_NODE	58:2	58:2	8	return
DESTINATION	58:9	58:9	7	FALSE
EXPR	58:9	58:9	8	FALSE
FIELD	58:9	58:9	9	FALSE
LEAF_NODE	58:9	58:9	10	FALSE
LEAF_NODE	58:14	58:14	7	;
LEAF_NODE	59:1	59:1	5	}
EXPR_STATEMENT	61:1	61:54	3	offset = g_utf8_strlen ( line_text , found - line_text ) ;
EXPR	61:1	61:1	4	offset = g_utf8_strlen ( line_text , found - line_text )
ASSIGN	61:1	61:10	5	offset = g_utf8_strlen ( line_text , found - line_text )
LVAL	61:1	61:1	6	offset
FIELD	61:1	61:1	7	offset
LEAF_NODE	61:1	61:1	8	offset
ASSIGN_OP	61:8	61:8	6	=
LEAF_NODE	61:8	61:8	7	=
RVAL	61:10	61:10	6	g_utf8_strlen ( line_text , found - line_text )
FUNCTION_CALL	61:10	61:53	7	g_utf8_strlen ( line_text , found - line_text )
CALLEE	61:10	61:10	8	g_utf8_strlen
LEAF_NODE	61:10	61:10	9	g_utf8_strlen
LEAF_NODE	61:24	61:24	8	(
ARGUMENT	61:25	61:25	8	line_text
FIELD	61:25	61:25	9	line_text
LEAF_NODE	61:25	61:25	10	line_text
LEAF_NODE	61:34	61:34	8	,
ARGUMENT	61:36	61:44	8	found - line_text
FIELD	61:36	61:36	9	found
LEAF_NODE	61:36	61:36	10	found
LEAF_NODE	61:42	61:42	9	-
FIELD	61:44	61:44	9	line_text
LEAF_NODE	61:44	61:44	10	line_text
LEAF_NODE	61:53	61:53	8	)
LEAF_NODE	61:54	61:54	4	;
EXPR_STATEMENT	62:1	62:14	3	next = * start ;
EXPR	62:1	62:1	4	next = * start
ASSIGN	62:1	62:8	5	next = * start
LVAL	62:1	62:1	6	next
FIELD	62:1	62:1	7	next
LEAF_NODE	62:1	62:1	8	next
ASSIGN_OP	62:6	62:6	6	=
LEAF_NODE	62:6	62:6	7	=
RVAL	62:8	62:8	6	* start
UNARY_EXPR	62:8	62:9	7	* start
UNARY_OPERATOR	62:8	62:8	8	*
LEAF_NODE	62:8	62:8	9	*
FIELD	62:9	62:9	8	start
LEAF_NODE	62:9	62:9	9	start
LEAF_NODE	62:14	62:14	4	;
EXPR_STATEMENT	66:1	66:73	3	forward_chars_with_skipping ( & next , offset , visible_only , ! slice , FALSE ) ;
EXPR	66:1	66:1	4	forward_chars_with_skipping ( & next , offset , visible_only , ! slice , FALSE )
FUNCTION_CALL	66:1	66:72	5	forward_chars_with_skipping ( & next , offset , visible_only , ! slice , FALSE )
CALLEE	66:1	66:1	6	forward_chars_with_skipping
LEAF_NODE	66:1	66:1	7	forward_chars_with_skipping
LEAF_NODE	66:29	66:29	6	(
ARGUMENT	66:30	66:30	6	& next
UNARY_EXPR	66:30	66:31	7	& next
UNARY_OPERATOR	66:30	66:30	8	&
LEAF_NODE	66:30	66:30	9	&
FIELD	66:31	66:31	8	next
LEAF_NODE	66:31	66:31	9	next
LEAF_NODE	66:35	66:35	6	,
ARGUMENT	66:37	66:37	6	offset
FIELD	66:37	66:37	7	offset
LEAF_NODE	66:37	66:37	8	offset
LEAF_NODE	66:43	66:43	6	,
ARGUMENT	66:45	66:45	6	visible_only
FIELD	66:45	66:45	7	visible_only
LEAF_NODE	66:45	66:45	8	visible_only
LEAF_NODE	66:57	66:57	6	,
ARGUMENT	66:59	66:59	6	! slice
UNARY_EXPR	66:59	66:60	7	! slice
UNARY_OPERATOR	66:59	66:59	8	!
LEAF_NODE	66:59	66:59	9	!
FIELD	66:60	66:60	8	slice
LEAF_NODE	66:60	66:60	9	slice
LEAF_NODE	66:65	66:65	6	,
ARGUMENT	66:67	66:67	6	FALSE
FIELD	66:67	66:67	7	FALSE
LEAF_NODE	66:67	66:67	8	FALSE
LEAF_NODE	66:72	66:72	6	)
LEAF_NODE	66:73	66:73	4	;
SELECTION	67:1	68:1	3	
KEYWORD	67:1	67:1	4	if
LEAF_NODE	67:1	67:1	5	if
LEAF_NODE	67:4	67:4	4	(
CONDITION	67:5	67:5	4	match_start
EXPR	67:5	67:5	5	match_start
FIELD	67:5	67:5	6	match_start
LEAF_NODE	67:5	67:5	7	match_start
LEAF_NODE	67:16	67:16	4	)
STATEMENTS	68:1	70:1	4	
LEAF_NODE	68:1	68:1	5	{
STATEMENTS	69:2	69:2	5	
EXPR_STATEMENT	69:2	69:21	6	* match_start = next ;
EXPR	69:2	69:2	7	* match_start = next
ASSIGN	69:2	69:17	8	* match_start = next
LVAL	69:2	69:2	9	* match_start
UNARY_EXPR	69:2	69:3	10	* match_start
UNARY_OPERATOR	69:2	69:2	11	*
LEAF_NODE	69:2	69:2	12	*
FIELD	69:3	69:3	11	match_start
LEAF_NODE	69:3	69:3	12	match_start
ASSIGN_OP	69:15	69:15	9	=
LEAF_NODE	69:15	69:15	10	=
RVAL	69:17	69:17	9	next
FIELD	69:17	69:17	10	next
LEAF_NODE	69:17	69:17	11	next
LEAF_NODE	69:21	69:21	7	;
LEAF_NODE	70:1	70:1	5	}
EXPR_STATEMENT	72:1	72:92	3	forward_chars_with_skipping ( & next , g_utf8_strlen ( * lines , - 1 ) , visible_only , ! slice , TRUE ) ;
EXPR	72:1	72:1	4	forward_chars_with_skipping ( & next , g_utf8_strlen ( * lines , - 1 ) , visible_only , ! slice , TRUE )
FUNCTION_CALL	72:1	72:91	5	forward_chars_with_skipping ( & next , g_utf8_strlen ( * lines , - 1 ) , visible_only , ! slice , TRUE )
CALLEE	72:1	72:1	6	forward_chars_with_skipping
LEAF_NODE	72:1	72:1	7	forward_chars_with_skipping
LEAF_NODE	72:29	72:29	6	(
ARGUMENT	72:30	72:30	6	& next
UNARY_EXPR	72:30	72:31	7	& next
UNARY_OPERATOR	72:30	72:30	8	&
LEAF_NODE	72:30	72:30	9	&
FIELD	72:31	72:31	8	next
LEAF_NODE	72:31	72:31	9	next
LEAF_NODE	72:35	72:35	6	,
ARGUMENT	72:37	72:37	6	g_utf8_strlen ( * lines , - 1 )
FUNCTION_CALL	72:37	72:62	7	g_utf8_strlen ( * lines , - 1 )
CALLEE	72:37	72:37	8	g_utf8_strlen
LEAF_NODE	72:37	72:37	9	g_utf8_strlen
LEAF_NODE	72:51	72:51	8	(
ARGUMENT	72:52	72:52	8	* lines
UNARY_EXPR	72:52	72:53	9	* lines
UNARY_OPERATOR	72:52	72:52	10	*
LEAF_NODE	72:52	72:52	11	*
FIELD	72:53	72:53	10	lines
LEAF_NODE	72:53	72:53	11	lines
LEAF_NODE	72:58	72:58	8	,
ARGUMENT	72:60	72:60	8	- 1
UNARY_EXPR	72:60	72:61	9	- 1
UNARY_OPERATOR	72:60	72:60	10	-
LEAF_NODE	72:60	72:60	11	-
FIELD	72:61	72:61	10	1
LEAF_NODE	72:61	72:61	11	1
LEAF_NODE	72:62	72:62	8	)
LEAF_NODE	72:63	72:63	6	,
ARGUMENT	72:65	72:65	6	visible_only
FIELD	72:65	72:65	7	visible_only
LEAF_NODE	72:65	72:65	8	visible_only
LEAF_NODE	72:77	72:77	6	,
ARGUMENT	72:79	72:79	6	! slice
UNARY_EXPR	72:79	72:80	7	! slice
UNARY_OPERATOR	72:79	72:79	8	!
LEAF_NODE	72:79	72:79	9	!
FIELD	72:80	72:80	8	slice
LEAF_NODE	72:80	72:80	9	slice
LEAF_NODE	72:85	72:85	6	,
ARGUMENT	72:87	72:87	6	TRUE
FIELD	72:87	72:87	7	TRUE
LEAF_NODE	72:87	72:87	8	TRUE
LEAF_NODE	72:91	72:91	6	)
LEAF_NODE	72:92	72:92	4	;
EXPR_STATEMENT	73:1	73:19	3	g_free ( line_text ) ;
EXPR	73:1	73:1	4	g_free ( line_text )
FUNCTION_CALL	73:1	73:18	5	g_free ( line_text )
CALLEE	73:1	73:1	6	g_free
LEAF_NODE	73:1	73:1	7	g_free
LEAF_NODE	73:8	73:8	6	(
ARGUMENT	73:9	73:9	6	line_text
FIELD	73:9	73:9	7	line_text
LEAF_NODE	73:9	73:9	8	line_text
LEAF_NODE	73:18	73:18	6	)
LEAF_NODE	73:19	73:19	4	;
EXPR_STATEMENT	74:1	74:8	3	++ lines ;
EXPR	74:1	74:3	4	++ lines
LEAF_NODE	74:1	74:1	5	++
FIELD	74:3	74:3	5	lines
LEAF_NODE	74:3	74:3	6	lines
LEAF_NODE	74:8	74:8	4	;
SELECTION	75:1	76:2	3	
KEYWORD	75:1	75:1	4	if
LEAF_NODE	75:1	75:1	5	if
LEAF_NODE	75:4	75:4	4	(
CONDITION	75:5	75:5	4	match_end
EXPR	75:5	75:5	5	match_end
FIELD	75:5	75:5	6	match_end
LEAF_NODE	75:5	75:5	7	match_end
LEAF_NODE	75:14	75:14	4	)
STATEMENTS	76:2	76:2	4	
EXPR_STATEMENT	76:2	76:19	5	* match_end = next ;
EXPR	76:2	76:2	6	* match_end = next
ASSIGN	76:2	76:15	7	* match_end = next
LVAL	76:2	76:2	8	* match_end
UNARY_EXPR	76:2	76:3	9	* match_end
UNARY_OPERATOR	76:2	76:2	10	*
LEAF_NODE	76:2	76:2	11	*
FIELD	76:3	76:3	10	match_end
LEAF_NODE	76:3	76:3	11	match_end
ASSIGN_OP	76:13	76:13	8	=
LEAF_NODE	76:13	76:13	9	=
RVAL	76:15	76:15	8	next
FIELD	76:15	76:15	9	next
LEAF_NODE	76:15	76:15	10	next
LEAF_NODE	76:19	76:19	6	;
JUMP_STATEMENT	80:1	80:72	3	return lines_match ( & next , lines , visible_only , slice , NULL , match_end ) ;
KEYWORD	80:1	80:1	4	return
LEAF_NODE	80:1	80:1	5	return
DESTINATION	80:8	80:8	4	lines_match ( & next , lines , visible_only , slice , NULL , match_end )
EXPR	80:8	80:8	5	lines_match ( & next , lines , visible_only , slice , NULL , match_end )
FUNCTION_CALL	80:8	80:71	6	lines_match ( & next , lines , visible_only , slice , NULL , match_end )
CALLEE	80:8	80:8	7	lines_match
LEAF_NODE	80:8	80:8	8	lines_match
LEAF_NODE	80:20	80:20	7	(
ARGUMENT	80:21	80:21	7	& next
UNARY_EXPR	80:21	80:22	8	& next
UNARY_OPERATOR	80:21	80:21	9	&
LEAF_NODE	80:21	80:21	10	&
FIELD	80:22	80:22	9	next
LEAF_NODE	80:22	80:22	10	next
LEAF_NODE	80:26	80:26	7	,
ARGUMENT	80:28	80:28	7	lines
FIELD	80:28	80:28	8	lines
LEAF_NODE	80:28	80:28	9	lines
LEAF_NODE	80:33	80:33	7	,
ARGUMENT	80:35	80:35	7	visible_only
FIELD	80:35	80:35	8	visible_only
LEAF_NODE	80:35	80:35	9	visible_only
LEAF_NODE	80:47	80:47	7	,
ARGUMENT	80:49	80:49	7	slice
FIELD	80:49	80:49	8	slice
LEAF_NODE	80:49	80:49	9	slice
LEAF_NODE	80:54	80:54	7	,
ARGUMENT	80:56	80:56	7	NULL
FIELD	80:56	80:56	8	NULL
LEAF_NODE	80:56	80:56	9	NULL
LEAF_NODE	80:60	80:60	7	,
ARGUMENT	80:62	80:62	7	match_end
FIELD	80:62	80:62	8	match_end
LEAF_NODE	80:62	80:62	9	match_end
LEAF_NODE	80:71	80:71	7	)
LEAF_NODE	80:72	80:72	4	;
LEAF_NODE	81:0	81:0	2	}
FUNCTION_DEF	82:0	165:0	1	
RETURN_TYPE	82:0	82:7	2	static gboolean
LEAF_NODE	82:0	82:0	3	static
TYPE_NAME	82:7	82:7	3	gboolean
LEAF_NODE	82:7	82:7	4	gboolean
FUNCTION_NAME	83:0	83:0	2	backward_lines_match
LEAF_NODE	83:0	83:0	3	backward_lines_match
PARAMETER_LIST	83:21	88:36	2	( const GtkTextIter * start , const gchar * * lines , gboolean visible_only , gboolean slice , GtkTextIter * match_start , GtkTextIter * match_end )
LEAF_NODE	83:21	83:21	3	(
PARAMETER_DECL	83:22	83:41	3	const GtkTextIter * start
TYPE	83:22	83:40	4	const GtkTextIter *
TYPE_NAME	83:22	83:28	5	const GtkTextIter
LEAF_NODE	83:22	83:22	6	const
LEAF_NODE	83:28	83:28	6	GtkTextIter
POINTER	83:40	83:40	5	*
LEAF_NODE	83:40	83:40	6	*
NAME	83:41	83:41	4	start
LEAF_NODE	83:41	83:41	5	start
LEAF_NODE	83:46	83:46	3	,
PARAMETER_DECL	84:8	84:27	3	const gchar * * lines
TYPE	84:8	84:25	4	const gchar * *
TYPE_NAME	84:8	84:14	5	const gchar
LEAF_NODE	84:8	84:8	6	const
LEAF_NODE	84:14	84:14	6	gchar
POINTER	84:25	84:26	5	* *
LEAF_NODE	84:25	84:25	6	*
LEAF_NODE	84:26	84:26	6	*
NAME	84:27	84:27	4	lines
LEAF_NODE	84:27	84:27	5	lines
LEAF_NODE	84:32	84:32	3	,
PARAMETER_DECL	85:8	85:27	3	gboolean visible_only
TYPE	85:8	85:8	4	gboolean
TYPE_NAME	85:8	85:8	5	gboolean
LEAF_NODE	85:8	85:8	6	gboolean
NAME	85:27	85:27	4	visible_only
LEAF_NODE	85:27	85:27	5	visible_only
LEAF_NODE	85:39	85:39	3	,
PARAMETER_DECL	86:8	86:27	3	gboolean slice
TYPE	86:8	86:8	4	gboolean
TYPE_NAME	86:8	86:8	5	gboolean
LEAF_NODE	86:8	86:8	6	gboolean
NAME	86:27	86:27	4	slice
LEAF_NODE	86:27	86:27	5	slice
LEAF_NODE	86:32	86:32	3	,
PARAMETER_DECL	87:8	87:27	3	GtkTextIter * match_start
TYPE	87:8	87:26	4	GtkTextIter *
TYPE_NAME	87:8	87:8	5	GtkTextIter
LEAF_NODE	87:8	87:8	6	GtkTextIter
POINTER	87:26	87:26	5	*
LEAF_NODE	87:26	87:26	6	*
NAME	87:27	87:27	4	match_start
LEAF_NODE	87:27	87:27	5	match_start
LEAF_NODE	87:38	87:38	3	,
PARAMETER_DECL	88:8	88:27	3	GtkTextIter * match_end
TYPE	88:8	88:26	4	GtkTextIter *
TYPE_NAME	88:8	88:8	5	GtkTextIter
LEAF_NODE	88:8	88:8	6	GtkTextIter
POINTER	88:26	88:26	5	*
LEAF_NODE	88:26	88:26	6	*
NAME	88:27	88:27	4	match_end
LEAF_NODE	88:27	88:27	5	match_end
LEAF_NODE	88:36	88:36	3	)
LEAF_NODE	89:0	89:0	2	{
STATEMENTS	90:1	163:1	2	
SIMPLE_DECL	90:1	90:23	3	GtkTextIter line , GtkTextIter next ;
INIT_DECL_LIST	90:1	90:1	4	GtkTextIter line , GtkTextIter next
VAR_DECL	90:1	90:13	5	GtkTextIter line
TYPE	90:1	90:1	6	GtkTextIter
TYPE_NAME	90:1	90:1	7	GtkTextIter
LEAF_NODE	90:1	90:1	8	GtkTextIter
NAME	90:13	90:13	6	line
LEAF_NODE	90:13	90:13	7	line
LEAF_NODE	90:17	90:17	5	,
VAR_DECL	90:1	90:19	5	GtkTextIter next
TYPE	90:1	90:1	6	GtkTextIter
TYPE_NAME	90:1	90:1	7	GtkTextIter
LEAF_NODE	90:1	90:1	8	GtkTextIter
NAME	90:19	90:19	6	next
LEAF_NODE	90:19	90:19	7	next
LEAF_NODE	90:23	90:23	4	;
SIMPLE_DECL	91:1	91:17	3	gchar * line_text ;
VAR_DECL	91:1	91:8	4	gchar * line_text
TYPE	91:1	91:7	5	gchar *
TYPE_NAME	91:1	91:1	6	gchar
LEAF_NODE	91:1	91:1	7	gchar
POINTER	91:7	91:7	6	*
LEAF_NODE	91:7	91:7	7	*
NAME	91:8	91:8	5	line_text
LEAF_NODE	91:8	91:8	6	line_text
LEAF_NODE	91:17	91:17	4	;
SIMPLE_DECL	92:1	92:19	3	const gchar * found ;
VAR_DECL	92:1	92:14	4	const gchar * found
TYPE	92:1	92:13	5	const gchar *
TYPE_NAME	92:1	92:7	6	const gchar
LEAF_NODE	92:1	92:1	7	const
LEAF_NODE	92:7	92:7	7	gchar
POINTER	92:13	92:13	6	*
LEAF_NODE	92:13	92:13	7	*
NAME	92:14	92:14	5	found
LEAF_NODE	92:14	92:14	6	found
LEAF_NODE	92:19	92:19	4	;
SIMPLE_DECL	93:1	93:12	3	gint offset ;
VAR_DECL	93:1	93:6	4	gint offset
TYPE	93:1	93:1	5	gint
TYPE_NAME	93:1	93:1	6	gint
LEAF_NODE	93:1	93:1	7	gint
NAME	93:6	93:6	5	offset
LEAF_NODE	93:6	93:6	6	offset
LEAF_NODE	93:12	93:12	4	;
SELECTION	94:1	95:1	3	
KEYWORD	94:1	94:1	4	if
LEAF_NODE	94:1	94:1	5	if
LEAF_NODE	94:4	94:4	4	(
CONDITION	94:5	94:5	4	* lines == NULL || * * lines == '\0'
EXPR	94:5	94:5	5	* lines == NULL || * * lines == '\0'
OR	94:5	94:23	6	* lines == NULL || * * lines == '\0'
EXPR	94:5	94:15	7	* lines == NULL
UNARY_EXPR	94:5	94:6	8	* lines
UNARY_OPERATOR	94:5	94:5	9	*
LEAF_NODE	94:5	94:5	10	*
FIELD	94:6	94:6	9	lines
LEAF_NODE	94:6	94:6	10	lines
EQ_OPERATOR	94:12	94:12	8	==
LEAF_NODE	94:12	94:12	9	==
FIELD	94:15	94:15	8	NULL
LEAF_NODE	94:15	94:15	9	NULL
LEAF_NODE	94:20	94:20	7	||
EXPR	94:23	94:34	7	* * lines == '\0'
UNARY_EXPR	94:23	94:25	8	* * lines
UNARY_OPERATOR	94:23	94:23	9	*
LEAF_NODE	94:23	94:23	10	*
UNARY_OPERATOR	94:24	94:24	9	*
LEAF_NODE	94:24	94:24	10	*
FIELD	94:25	94:25	9	lines
LEAF_NODE	94:25	94:25	10	lines
EQ_OPERATOR	94:31	94:31	8	==
LEAF_NODE	94:31	94:31	9	==
FIELD	94:34	94:34	8	'\0'
LEAF_NODE	94:34	94:34	9	'\0'
LEAF_NODE	94:38	94:38	4	)
STATEMENTS	95:1	101:1	4	
LEAF_NODE	95:1	95:1	5	{
STATEMENTS	96:2	100:2	5	
SELECTION	96:2	97:3	6	
KEYWORD	96:2	96:2	7	if
LEAF_NODE	96:2	96:2	8	if
LEAF_NODE	96:5	96:5	7	(
CONDITION	96:6	96:6	7	match_start
EXPR	96:6	96:6	8	match_start
FIELD	96:6	96:6	9	match_start
LEAF_NODE	96:6	96:6	10	match_start
LEAF_NODE	96:17	96:17	7	)
STATEMENTS	97:3	97:3	7	
EXPR_STATEMENT	97:3	97:24	8	* match_start = * start ;
EXPR	97:3	97:3	9	* match_start = * start
ASSIGN	97:3	97:18	10	* match_start = * start
LVAL	97:3	97:3	11	* match_start
UNARY_EXPR	97:3	97:4	12	* match_start
UNARY_OPERATOR	97:3	97:3	13	*
LEAF_NODE	97:3	97:3	14	*
FIELD	97:4	97:4	13	match_start
LEAF_NODE	97:4	97:4	14	match_start
ASSIGN_OP	97:16	97:16	11	=
LEAF_NODE	97:16	97:16	12	=
RVAL	97:18	97:18	11	* start
UNARY_EXPR	97:18	97:19	12	* start
UNARY_OPERATOR	97:18	97:18	13	*
LEAF_NODE	97:18	97:18	14	*
FIELD	97:19	97:19	13	start
LEAF_NODE	97:19	97:19	14	start
LEAF_NODE	97:24	97:24	9	;
SELECTION	98:2	99:3	6	
KEYWORD	98:2	98:2	7	if
LEAF_NODE	98:2	98:2	8	if
LEAF_NODE	98:5	98:5	7	(
CONDITION	98:6	98:6	7	match_end
EXPR	98:6	98:6	8	match_end
FIELD	98:6	98:6	9	match_end
LEAF_NODE	98:6	98:6	10	match_end
LEAF_NODE	98:15	98:15	7	)
STATEMENTS	99:3	99:3	7	
EXPR_STATEMENT	99:3	99:22	8	* match_end = * start ;
EXPR	99:3	99:3	9	* match_end = * start
ASSIGN	99:3	99:16	10	* match_end = * start
LVAL	99:3	99:3	11	* match_end
UNARY_EXPR	99:3	99:4	12	* match_end
UNARY_OPERATOR	99:3	99:3	13	*
LEAF_NODE	99:3	99:3	14	*
FIELD	99:4	99:4	13	match_end
LEAF_NODE	99:4	99:4	14	match_end
ASSIGN_OP	99:14	99:14	11	=
LEAF_NODE	99:14	99:14	12	=
RVAL	99:16	99:16	11	* start
UNARY_EXPR	99:16	99:17	12	* start
UNARY_OPERATOR	99:16	99:16	13	*
LEAF_NODE	99:16	99:16	14	*
FIELD	99:17	99:17	13	start
LEAF_NODE	99:17	99:17	14	start
LEAF_NODE	99:22	99:22	9	;
JUMP_STATEMENT	100:2	100:13	6	return TRUE ;
KEYWORD	100:2	100:2	7	return
LEAF_NODE	100:2	100:2	8	return
DESTINATION	100:9	100:9	7	TRUE
EXPR	100:9	100:9	8	TRUE
FIELD	100:9	100:9	9	TRUE
LEAF_NODE	100:9	100:9	10	TRUE
LEAF_NODE	100:13	100:13	7	;
LEAF_NODE	101:1	101:1	5	}
EXPR_STATEMENT	102:1	102:21	3	line = next = * start ;
EXPR	102:1	102:1	4	line = next = * start
ASSIGN	102:1	102:8	5	line = next = * start
LVAL	102:1	102:1	6	line
FIELD	102:1	102:1	7	line
LEAF_NODE	102:1	102:1	8	line
ASSIGN_OP	102:6	102:6	6	=
LEAF_NODE	102:6	102:6	7	=
RVAL	102:8	102:8	6	next = * start
ASSIGN	102:8	102:15	7	next = * start
LVAL	102:8	102:8	8	next
FIELD	102:8	102:8	9	next
LEAF_NODE	102:8	102:8	10	next
ASSIGN_OP	102:13	102:13	8	=
LEAF_NODE	102:13	102:13	9	=
RVAL	102:15	102:15	8	* start
UNARY_EXPR	102:15	102:16	9	* start
UNARY_OPERATOR	102:15	102:15	10	*
LEAF_NODE	102:15	102:15	11	*
FIELD	102:16	102:16	10	start
LEAF_NODE	102:16	102:16	11	start
LEAF_NODE	102:21	102:21	4	;
SELECTION	103:1	104:1	3	
KEYWORD	103:1	103:1	4	if
LEAF_NODE	103:1	103:1	5	if
LEAF_NODE	103:4	103:4	4	(
CONDITION	103:5	103:5	4	gtk_text_iter_get_line_offset ( & next ) == 0
EXPR	103:5	103:46	5	gtk_text_iter_get_line_offset ( & next ) == 0
FUNCTION_CALL	103:5	103:41	6	gtk_text_iter_get_line_offset ( & next )
CALLEE	103:5	103:5	7	gtk_text_iter_get_line_offset
LEAF_NODE	103:5	103:5	8	gtk_text_iter_get_line_offset
LEAF_NODE	103:35	103:35	7	(
ARGUMENT	103:36	103:36	7	& next
UNARY_EXPR	103:36	103:37	8	& next
UNARY_OPERATOR	103:36	103:36	9	&
LEAF_NODE	103:36	103:36	10	&
FIELD	103:37	103:37	9	next
LEAF_NODE	103:37	103:37	10	next
LEAF_NODE	103:41	103:41	7	)
EQ_OPERATOR	103:43	103:43	6	==
LEAF_NODE	103:43	103:43	7	==
FIELD	103:46	103:46	6	0
LEAF_NODE	103:46	103:46	7	0
LEAF_NODE	103:47	103:47	4	)
STATEMENTS	104:1	107:1	4	
LEAF_NODE	104:1	104:1	5	{
STATEMENTS	105:2	105:2	5	
SELECTION	105:2	106:3	6	
KEYWORD	105:2	105:2	7	if
LEAF_NODE	105:2	105:2	8	if
LEAF_NODE	105:5	105:5	7	(
CONDITION	105:6	105:6	7	! gtk_text_iter_backward_line ( & next )
EXPR	105:6	105:6	8	! gtk_text_iter_backward_line ( & next )
UNARY_EXPR	105:6	105:7	9	! gtk_text_iter_backward_line ( & next )
UNARY_OPERATOR	105:6	105:6	10	!
LEAF_NODE	105:6	105:6	11	!
FUNCTION_CALL	105:7	105:41	10	gtk_text_iter_backward_line ( & next )
CALLEE	105:7	105:7	11	gtk_text_iter_backward_line
LEAF_NODE	105:7	105:7	12	gtk_text_iter_backward_line
LEAF_NODE	105:35	105:35	11	(
ARGUMENT	105:36	105:36	11	& next
UNARY_EXPR	105:36	105:37	12	& next
UNARY_OPERATOR	105:36	105:36	13	&
LEAF_NODE	105:36	105:36	14	&
FIELD	105:37	105:37	13	next
LEAF_NODE	105:37	105:37	14	next
LEAF_NODE	105:41	105:41	11	)
LEAF_NODE	105:42	105:42	7	)
STATEMENTS	106:3	106:3	7	
JUMP_STATEMENT	106:3	106:15	8	return FALSE ;
KEYWORD	106:3	106:3	9	return
LEAF_NODE	106:3	106:3	10	return
DESTINATION	106:10	106:10	9	FALSE
EXPR	106:10	106:10	10	FALSE
FIELD	106:10	106:10	11	FALSE
LEAF_NODE	106:10	106:10	12	FALSE
LEAF_NODE	106:15	106:15	9	;
LEAF_NODE	107:1	107:1	5	}
SELECTION	108:1	109:2	3	
KEYWORD	108:1	108:1	4	else
LEAF_NODE	108:1	108:1	5	else
STATEMENTS	109:2	109:2	4	
EXPR_STATEMENT	109:2	109:42	5	gtk_text_iter_set_line_offset ( & next , 0 ) ;
EXPR	109:2	109:2	6	gtk_text_iter_set_line_offset ( & next , 0 )
FUNCTION_CALL	109:2	109:41	7	gtk_text_iter_set_line_offset ( & next , 0 )
CALLEE	109:2	109:2	8	gtk_text_iter_set_line_offset
LEAF_NODE	109:2	109:2	9	gtk_text_iter_set_line_offset
LEAF_NODE	109:32	109:32	8	(
ARGUMENT	109:33	109:33	8	& next
UNARY_EXPR	109:33	109:34	9	& next
UNARY_OPERATOR	109:33	109:33	10	&
LEAF_NODE	109:33	109:33	11	&
FIELD	109:34	109:34	10	next
LEAF_NODE	109:34	109:34	11	next
LEAF_NODE	109:38	109:38	8	,
ARGUMENT	109:40	109:40	8	0
FIELD	109:40	109:40	9	0
LEAF_NODE	109:40	109:40	10	0
LEAF_NODE	109:41	109:41	8	)
LEAF_NODE	109:42	109:42	6	;
SELECTION	110:1	111:1	3	
KEYWORD	110:1	110:1	4	if
LEAF_NODE	110:1	110:1	5	if
LEAF_NODE	110:4	110:4	4	(
CONDITION	110:5	110:5	4	slice
EXPR	110:5	110:5	5	slice
FIELD	110:5	110:5	6	slice
LEAF_NODE	110:5	110:5	7	slice
LEAF_NODE	110:10	110:10	4	)
STATEMENTS	111:1	116:1	4	
LEAF_NODE	111:1	111:1	5	{
STATEMENTS	112:2	114:2	5	
SELECTION	112:2	113:3	6	
KEYWORD	112:2	112:2	7	if
LEAF_NODE	112:2	112:2	8	if
LEAF_NODE	112:5	112:5	7	(
CONDITION	112:6	112:6	7	visible_only
EXPR	112:6	112:6	8	visible_only
FIELD	112:6	112:6	9	visible_only
LEAF_NODE	112:6	112:6	10	visible_only
LEAF_NODE	112:18	112:18	7	)
STATEMENTS	113:3	113:3	7	
EXPR_STATEMENT	113:3	113:61	8	line_text = gtk_text_iter_get_visible_slice ( & next , & line ) ;
EXPR	113:3	113:3	9	line_text = gtk_text_iter_get_visible_slice ( & next , & line )
ASSIGN	113:3	113:15	10	line_text = gtk_text_iter_get_visible_slice ( & next , & line )
LVAL	113:3	113:3	11	line_text
FIELD	113:3	113:3	12	line_text
LEAF_NODE	113:3	113:3	13	line_text
ASSIGN_OP	113:13	113:13	11	=
LEAF_NODE	113:13	113:13	12	=
RVAL	113:15	113:15	11	gtk_text_iter_get_visible_slice ( & next , & line )
FUNCTION_CALL	113:15	113:60	12	gtk_text_iter_get_visible_slice ( & next , & line )
CALLEE	113:15	113:15	13	gtk_text_iter_get_visible_slice
LEAF_NODE	113:15	113:15	14	gtk_text_iter_get_visible_slice
LEAF_NODE	113:47	113:47	13	(
ARGUMENT	113:48	113:48	13	& next
UNARY_EXPR	113:48	113:49	14	& next
UNARY_OPERATOR	113:48	113:48	15	&
LEAF_NODE	113:48	113:48	16	&
FIELD	113:49	113:49	15	next
LEAF_NODE	113:49	113:49	16	next
LEAF_NODE	113:53	113:53	13	,
ARGUMENT	113:55	113:55	13	& line
UNARY_EXPR	113:55	113:56	14	& line
UNARY_OPERATOR	113:55	113:55	15	&
LEAF_NODE	113:55	113:55	16	&
FIELD	113:56	113:56	15	line
LEAF_NODE	113:56	113:56	16	line
LEAF_NODE	113:60	113:60	13	)
LEAF_NODE	113:61	113:61	9	;
SELECTION	114:2	115:3	6	
KEYWORD	114:2	114:2	7	else
LEAF_NODE	114:2	114:2	8	else
STATEMENTS	115:3	115:3	7	
EXPR_STATEMENT	115:3	115:53	8	line_text = gtk_text_iter_get_slice ( & next , & line ) ;
EXPR	115:3	115:3	9	line_text = gtk_text_iter_get_slice ( & next , & line )
ASSIGN	115:3	115:15	10	line_text = gtk_text_iter_get_slice ( & next , & line )
LVAL	115:3	115:3	11	line_text
FIELD	115:3	115:3	12	line_text
LEAF_NODE	115:3	115:3	13	line_text
ASSIGN_OP	115:13	115:13	11	=
LEAF_NODE	115:13	115:13	12	=
RVAL	115:15	115:15	11	gtk_text_iter_get_slice ( & next , & line )
FUNCTION_CALL	115:15	115:52	12	gtk_text_iter_get_slice ( & next , & line )
CALLEE	115:15	115:15	13	gtk_text_iter_get_slice
LEAF_NODE	115:15	115:15	14	gtk_text_iter_get_slice
LEAF_NODE	115:39	115:39	13	(
ARGUMENT	115:40	115:40	13	& next
UNARY_EXPR	115:40	115:41	14	& next
UNARY_OPERATOR	115:40	115:40	15	&
LEAF_NODE	115:40	115:40	16	&
FIELD	115:41	115:41	15	next
LEAF_NODE	115:41	115:41	16	next
LEAF_NODE	115:45	115:45	13	,
ARGUMENT	115:47	115:47	13	& line
UNARY_EXPR	115:47	115:48	14	& line
UNARY_OPERATOR	115:47	115:47	15	&
LEAF_NODE	115:47	115:47	16	&
FIELD	115:48	115:48	15	line
LEAF_NODE	115:48	115:48	16	line
LEAF_NODE	115:52	115:52	13	)
LEAF_NODE	115:53	115:53	9	;
LEAF_NODE	116:1	116:1	5	}
SELECTION	117:1	118:1	3	
KEYWORD	117:1	117:1	4	else
LEAF_NODE	117:1	117:1	5	else
STATEMENTS	118:1	123:1	4	
LEAF_NODE	118:1	118:1	5	{
STATEMENTS	119:2	121:2	5	
SELECTION	119:2	120:3	6	
KEYWORD	119:2	119:2	7	if
LEAF_NODE	119:2	119:2	8	if
LEAF_NODE	119:5	119:5	7	(
CONDITION	119:6	119:6	7	visible_only
EXPR	119:6	119:6	8	visible_only
FIELD	119:6	119:6	9	visible_only
LEAF_NODE	119:6	119:6	10	visible_only
LEAF_NODE	119:18	119:18	7	)
STATEMENTS	120:3	120:3	7	
EXPR_STATEMENT	120:3	120:60	8	line_text = gtk_text_iter_get_visible_text ( & next , & line ) ;
EXPR	120:3	120:3	9	line_text = gtk_text_iter_get_visible_text ( & next , & line )
ASSIGN	120:3	120:15	10	line_text = gtk_text_iter_get_visible_text ( & next , & line )
LVAL	120:3	120:3	11	line_text
FIELD	120:3	120:3	12	line_text
LEAF_NODE	120:3	120:3	13	line_text
ASSIGN_OP	120:13	120:13	11	=
LEAF_NODE	120:13	120:13	12	=
RVAL	120:15	120:15	11	gtk_text_iter_get_visible_text ( & next , & line )
FUNCTION_CALL	120:15	120:59	12	gtk_text_iter_get_visible_text ( & next , & line )
CALLEE	120:15	120:15	13	gtk_text_iter_get_visible_text
LEAF_NODE	120:15	120:15	14	gtk_text_iter_get_visible_text
LEAF_NODE	120:46	120:46	13	(
ARGUMENT	120:47	120:47	13	& next
UNARY_EXPR	120:47	120:48	14	& next
UNARY_OPERATOR	120:47	120:47	15	&
LEAF_NODE	120:47	120:47	16	&
FIELD	120:48	120:48	15	next
LEAF_NODE	120:48	120:48	16	next
LEAF_NODE	120:52	120:52	13	,
ARGUMENT	120:54	120:54	13	& line
UNARY_EXPR	120:54	120:55	14	& line
UNARY_OPERATOR	120:54	120:54	15	&
LEAF_NODE	120:54	120:54	16	&
FIELD	120:55	120:55	15	line
LEAF_NODE	120:55	120:55	16	line
LEAF_NODE	120:59	120:59	13	)
LEAF_NODE	120:60	120:60	9	;
SELECTION	121:2	122:3	6	
KEYWORD	121:2	121:2	7	else
LEAF_NODE	121:2	121:2	8	else
STATEMENTS	122:3	122:3	7	
EXPR_STATEMENT	122:3	122:52	8	line_text = gtk_text_iter_get_text ( & next , & line ) ;
EXPR	122:3	122:3	9	line_text = gtk_text_iter_get_text ( & next , & line )
ASSIGN	122:3	122:15	10	line_text = gtk_text_iter_get_text ( & next , & line )
LVAL	122:3	122:3	11	line_text
FIELD	122:3	122:3	12	line_text
LEAF_NODE	122:3	122:3	13	line_text
ASSIGN_OP	122:13	122:13	11	=
LEAF_NODE	122:13	122:13	12	=
RVAL	122:15	122:15	11	gtk_text_iter_get_text ( & next , & line )
FUNCTION_CALL	122:15	122:51	12	gtk_text_iter_get_text ( & next , & line )
CALLEE	122:15	122:15	13	gtk_text_iter_get_text
LEAF_NODE	122:15	122:15	14	gtk_text_iter_get_text
LEAF_NODE	122:38	122:38	13	(
ARGUMENT	122:39	122:39	13	& next
UNARY_EXPR	122:39	122:40	14	& next
UNARY_OPERATOR	122:39	122:39	15	&
LEAF_NODE	122:39	122:39	16	&
FIELD	122:40	122:40	15	next
LEAF_NODE	122:40	122:40	16	next
LEAF_NODE	122:44	122:44	13	,
ARGUMENT	122:46	122:46	13	& line
UNARY_EXPR	122:46	122:47	14	& line
UNARY_OPERATOR	122:46	122:46	15	&
LEAF_NODE	122:46	122:46	16	&
FIELD	122:47	122:47	15	line
LEAF_NODE	122:47	122:47	16	line
LEAF_NODE	122:51	122:51	13	)
LEAF_NODE	122:52	122:52	9	;
LEAF_NODE	123:1	123:1	5	}
SELECTION	124:1	125:1	3	
KEYWORD	124:1	124:1	4	if
LEAF_NODE	124:1	124:1	5	if
LEAF_NODE	124:4	124:4	4	(
CONDITION	124:5	124:5	4	match_start
EXPR	124:5	124:5	5	match_start
FIELD	124:5	124:5	6	match_start
LEAF_NODE	124:5	124:5	7	match_start
LEAF_NODE	124:16	124:16	4	)
STATEMENTS	125:1	127:1	4	
LEAF_NODE	125:1	125:1	5	{
STATEMENTS	126:2	126:2	5	
EXPR_STATEMENT	126:2	126:48	6	found = g_utf8_strrcasestr ( line_text , * lines ) ;
EXPR	126:2	126:2	7	found = g_utf8_strrcasestr ( line_text , * lines )
ASSIGN	126:2	126:10	8	found = g_utf8_strrcasestr ( line_text , * lines )
LVAL	126:2	126:2	9	found
FIELD	126:2	126:2	10	found
LEAF_NODE	126:2	126:2	11	found
ASSIGN_OP	126:8	126:8	9	=
LEAF_NODE	126:8	126:8	10	=
RVAL	126:10	126:10	9	g_utf8_strrcasestr ( line_text , * lines )
FUNCTION_CALL	126:10	126:47	10	g_utf8_strrcasestr ( line_text , * lines )
CALLEE	126:10	126:10	11	g_utf8_strrcasestr
LEAF_NODE	126:10	126:10	12	g_utf8_strrcasestr
LEAF_NODE	126:29	126:29	11	(
ARGUMENT	126:30	126:30	11	line_text
FIELD	126:30	126:30	12	line_text
LEAF_NODE	126:30	126:30	13	line_text
LEAF_NODE	126:39	126:39	11	,
ARGUMENT	126:41	126:41	11	* lines
UNARY_EXPR	126:41	126:42	12	* lines
UNARY_OPERATOR	126:41	126:41	13	*
LEAF_NODE	126:41	126:41	14	*
FIELD	126:42	126:42	13	lines
LEAF_NODE	126:42	126:42	14	lines
LEAF_NODE	126:47	126:47	11	)
LEAF_NODE	126:48	126:48	7	;
LEAF_NODE	127:1	127:1	5	}
SELECTION	128:1	129:1	3	
KEYWORD	128:1	128:1	4	else
LEAF_NODE	128:1	128:1	5	else
STATEMENTS	129:1	138:1	4	
LEAF_NODE	129:1	129:1	5	{
STATEMENTS	133:2	136:2	5	
SELECTION	133:2	135:3	6	
KEYWORD	133:2	133:2	7	if
LEAF_NODE	133:2	133:2	8	if
LEAF_NODE	133:5	133:5	7	(
CONDITION	133:6	133:6	7	g_utf8_caselessnmatch ( line_text , * lines , strlen ( line_text ) , strlen ( * lines ) )
EXPR	133:6	133:6	8	g_utf8_caselessnmatch ( line_text , * lines , strlen ( line_text ) , strlen ( * lines ) )
FUNCTION_CALL	133:6	134:23	9	g_utf8_caselessnmatch ( line_text , * lines , strlen ( line_text ) , strlen ( * lines ) )
CALLEE	133:6	133:6	10	g_utf8_caselessnmatch
LEAF_NODE	133:6	133:6	11	g_utf8_caselessnmatch
LEAF_NODE	133:28	133:28	10	(
ARGUMENT	133:29	133:29	10	line_text
FIELD	133:29	133:29	11	line_text
LEAF_NODE	133:29	133:29	12	line_text
LEAF_NODE	133:38	133:38	10	,
ARGUMENT	133:40	133:40	10	* lines
UNARY_EXPR	133:40	133:41	11	* lines
UNARY_OPERATOR	133:40	133:40	12	*
LEAF_NODE	133:40	133:40	13	*
FIELD	133:41	133:41	12	lines
LEAF_NODE	133:41	133:41	13	lines
LEAF_NODE	133:46	133:46	10	,
ARGUMENT	133:48	133:48	10	strlen ( line_text )
FUNCTION_CALL	133:48	133:65	11	strlen ( line_text )
CALLEE	133:48	133:48	12	strlen
LEAF_NODE	133:48	133:48	13	strlen
LEAF_NODE	133:55	133:55	12	(
ARGUMENT	133:56	133:56	12	line_text
FIELD	133:56	133:56	13	line_text
LEAF_NODE	133:56	133:56	14	line_text
LEAF_NODE	133:65	133:65	12	)
LEAF_NODE	133:66	133:66	10	,
ARGUMENT	134:8	134:8	10	strlen ( * lines )
FUNCTION_CALL	134:8	134:22	11	strlen ( * lines )
CALLEE	134:8	134:8	12	strlen
LEAF_NODE	134:8	134:8	13	strlen
LEAF_NODE	134:15	134:15	12	(
ARGUMENT	134:16	134:16	12	* lines
UNARY_EXPR	134:16	134:17	13	* lines
UNARY_OPERATOR	134:16	134:16	14	*
LEAF_NODE	134:16	134:16	15	*
FIELD	134:17	134:17	14	lines
LEAF_NODE	134:17	134:17	15	lines
LEAF_NODE	134:22	134:22	12	)
LEAF_NODE	134:23	134:23	10	)
LEAF_NODE	134:24	134:24	7	)
STATEMENTS	135:3	135:3	7	
EXPR_STATEMENT	135:3	135:20	8	found = line_text ;
EXPR	135:3	135:3	9	found = line_text
ASSIGN	135:3	135:11	10	found = line_text
LVAL	135:3	135:3	11	found
FIELD	135:3	135:3	12	found
LEAF_NODE	135:3	135:3	13	found
ASSIGN_OP	135:9	135:9	11	=
LEAF_NODE	135:9	135:9	12	=
RVAL	135:11	135:11	11	line_text
FIELD	135:11	135:11	12	line_text
LEAF_NODE	135:11	135:11	13	line_text
LEAF_NODE	135:20	135:20	9	;
SELECTION	136:2	137:3	6	
KEYWORD	136:2	136:2	7	else
LEAF_NODE	136:2	136:2	8	else
STATEMENTS	137:3	137:3	7	
EXPR_STATEMENT	137:3	137:15	8	found = NULL ;
EXPR	137:3	137:3	9	found = NULL
ASSIGN	137:3	137:11	10	found = NULL
LVAL	137:3	137:3	11	found
FIELD	137:3	137:3	12	found
LEAF_NODE	137:3	137:3	13	found
ASSIGN_OP	137:9	137:9	11	=
LEAF_NODE	137:9	137:9	12	=
RVAL	137:11	137:11	11	NULL
FIELD	137:11	137:11	12	NULL
LEAF_NODE	137:11	137:11	13	NULL
LEAF_NODE	137:15	137:15	9	;
LEAF_NODE	138:1	138:1	5	}
SELECTION	139:1	140:1	3	
KEYWORD	139:1	139:1	4	if
LEAF_NODE	139:1	139:1	5	if
LEAF_NODE	139:4	139:4	4	(
CONDITION	139:5	139:5	4	found == NULL
EXPR	139:5	139:14	5	found == NULL
FIELD	139:5	139:5	6	found
LEAF_NODE	139:5	139:5	7	found
EQ_OPERATOR	139:11	139:11	6	==
LEAF_NODE	139:11	139:11	7	==
FIELD	139:14	139:14	6	NULL
LEAF_NODE	139:14	139:14	7	NULL
LEAF_NODE	139:18	139:18	4	)
STATEMENTS	140:1	143:1	4	
LEAF_NODE	140:1	140:1	5	{
STATEMENTS	141:2	142:2	5	
EXPR_STATEMENT	141:2	141:20	6	g_free ( line_text ) ;
EXPR	141:2	141:2	7	g_free ( line_text )
FUNCTION_CALL	141:2	141:19	8	g_free ( line_text )
CALLEE	141:2	141:2	9	g_free
LEAF_NODE	141:2	141:2	10	g_free
LEAF_NODE	141:9	141:9	9	(
ARGUMENT	141:10	141:10	9	line_text
FIELD	141:10	141:10	10	line_text
LEAF_NODE	141:10	141:10	11	line_text
LEAF_NODE	141:19	141:19	9	)
LEAF_NODE	141:20	141:20	7	;
JUMP_STATEMENT	142:2	142:14	6	return FALSE ;
KEYWORD	142:2	142:2	7	return
LEAF_NODE	142:2	142:2	8	return
DESTINATION	142:9	142:9	7	FALSE
EXPR	142:9	142:9	8	FALSE
FIELD	142:9	142:9	9	FALSE
LEAF_NODE	142:9	142:9	10	FALSE
LEAF_NODE	142:14	142:14	7	;
LEAF_NODE	143:1	143:1	5	}
EXPR_STATEMENT	145:1	145:54	3	offset = g_utf8_strlen ( line_text , found - line_text ) ;
EXPR	145:1	145:1	4	offset = g_utf8_strlen ( line_text , found - line_text )
ASSIGN	145:1	145:10	5	offset = g_utf8_strlen ( line_text , found - line_text )
LVAL	145:1	145:1	6	offset
FIELD	145:1	145:1	7	offset
LEAF_NODE	145:1	145:1	8	offset
ASSIGN_OP	145:8	145:8	6	=
LEAF_NODE	145:8	145:8	7	=
RVAL	145:10	145:10	6	g_utf8_strlen ( line_text , found - line_text )
FUNCTION_CALL	145:10	145:53	7	g_utf8_strlen ( line_text , found - line_text )
CALLEE	145:10	145:10	8	g_utf8_strlen
LEAF_NODE	145:10	145:10	9	g_utf8_strlen
LEAF_NODE	145:24	145:24	8	(
ARGUMENT	145:25	145:25	8	line_text
FIELD	145:25	145:25	9	line_text
LEAF_NODE	145:25	145:25	10	line_text
LEAF_NODE	145:34	145:34	8	,
ARGUMENT	145:36	145:44	8	found - line_text
FIELD	145:36	145:36	9	found
LEAF_NODE	145:36	145:36	10	found
LEAF_NODE	145:42	145:42	9	-
FIELD	145:44	145:44	9	line_text
LEAF_NODE	145:44	145:44	10	line_text
LEAF_NODE	145:53	145:53	8	)
LEAF_NODE	145:54	145:54	4	;
EXPR_STATEMENT	146:1	146:73	3	forward_chars_with_skipping ( & next , offset , visible_only , ! slice , FALSE ) ;
EXPR	146:1	146:1	4	forward_chars_with_skipping ( & next , offset , visible_only , ! slice , FALSE )
FUNCTION_CALL	146:1	146:72	5	forward_chars_with_skipping ( & next , offset , visible_only , ! slice , FALSE )
CALLEE	146:1	146:1	6	forward_chars_with_skipping
LEAF_NODE	146:1	146:1	7	forward_chars_with_skipping
LEAF_NODE	146:29	146:29	6	(
ARGUMENT	146:30	146:30	6	& next
UNARY_EXPR	146:30	146:31	7	& next
UNARY_OPERATOR	146:30	146:30	8	&
LEAF_NODE	146:30	146:30	9	&
FIELD	146:31	146:31	8	next
LEAF_NODE	146:31	146:31	9	next
LEAF_NODE	146:35	146:35	6	,
ARGUMENT	146:37	146:37	6	offset
FIELD	146:37	146:37	7	offset
LEAF_NODE	146:37	146:37	8	offset
LEAF_NODE	146:43	146:43	6	,
ARGUMENT	146:45	146:45	6	visible_only
FIELD	146:45	146:45	7	visible_only
LEAF_NODE	146:45	146:45	8	visible_only
LEAF_NODE	146:57	146:57	6	,
ARGUMENT	146:59	146:59	6	! slice
UNARY_EXPR	146:59	146:60	7	! slice
UNARY_OPERATOR	146:59	146:59	8	!
LEAF_NODE	146:59	146:59	9	!
FIELD	146:60	146:60	8	slice
LEAF_NODE	146:60	146:60	9	slice
LEAF_NODE	146:65	146:65	6	,
ARGUMENT	146:67	146:67	6	FALSE
FIELD	146:67	146:67	7	FALSE
LEAF_NODE	146:67	146:67	8	FALSE
LEAF_NODE	146:72	146:72	6	)
LEAF_NODE	146:73	146:73	4	;
SELECTION	150:1	151:1	3	
KEYWORD	150:1	150:1	4	if
LEAF_NODE	150:1	150:1	5	if
LEAF_NODE	150:4	150:4	4	(
CONDITION	150:5	150:5	4	match_start
EXPR	150:5	150:5	5	match_start
FIELD	150:5	150:5	6	match_start
LEAF_NODE	150:5	150:5	7	match_start
LEAF_NODE	150:16	150:16	4	)
STATEMENTS	151:1	153:1	4	
LEAF_NODE	151:1	151:1	5	{
STATEMENTS	152:2	152:2	5	
EXPR_STATEMENT	152:2	152:21	6	* match_start = next ;
EXPR	152:2	152:2	7	* match_start = next
ASSIGN	152:2	152:17	8	* match_start = next
LVAL	152:2	152:2	9	* match_start
UNARY_EXPR	152:2	152:3	10	* match_start
UNARY_OPERATOR	152:2	152:2	11	*
LEAF_NODE	152:2	152:2	12	*
FIELD	152:3	152:3	11	match_start
LEAF_NODE	152:3	152:3	12	match_start
ASSIGN_OP	152:15	152:15	9	=
LEAF_NODE	152:15	152:15	10	=
RVAL	152:17	152:17	9	next
FIELD	152:17	152:17	10	next
LEAF_NODE	152:17	152:17	11	next
LEAF_NODE	152:21	152:21	7	;
LEAF_NODE	153:1	153:1	5	}
EXPR_STATEMENT	155:1	155:92	3	forward_chars_with_skipping ( & next , g_utf8_strlen ( * lines , - 1 ) , visible_only , ! slice , TRUE ) ;
EXPR	155:1	155:1	4	forward_chars_with_skipping ( & next , g_utf8_strlen ( * lines , - 1 ) , visible_only , ! slice , TRUE )
FUNCTION_CALL	155:1	155:91	5	forward_chars_with_skipping ( & next , g_utf8_strlen ( * lines , - 1 ) , visible_only , ! slice , TRUE )
CALLEE	155:1	155:1	6	forward_chars_with_skipping
LEAF_NODE	155:1	155:1	7	forward_chars_with_skipping
LEAF_NODE	155:29	155:29	6	(
ARGUMENT	155:30	155:30	6	& next
UNARY_EXPR	155:30	155:31	7	& next
UNARY_OPERATOR	155:30	155:30	8	&
LEAF_NODE	155:30	155:30	9	&
FIELD	155:31	155:31	8	next
LEAF_NODE	155:31	155:31	9	next
LEAF_NODE	155:35	155:35	6	,
ARGUMENT	155:37	155:37	6	g_utf8_strlen ( * lines , - 1 )
FUNCTION_CALL	155:37	155:62	7	g_utf8_strlen ( * lines , - 1 )
CALLEE	155:37	155:37	8	g_utf8_strlen
LEAF_NODE	155:37	155:37	9	g_utf8_strlen
LEAF_NODE	155:51	155:51	8	(
ARGUMENT	155:52	155:52	8	* lines
UNARY_EXPR	155:52	155:53	9	* lines
UNARY_OPERATOR	155:52	155:52	10	*
LEAF_NODE	155:52	155:52	11	*
FIELD	155:53	155:53	10	lines
LEAF_NODE	155:53	155:53	11	lines
LEAF_NODE	155:58	155:58	8	,
ARGUMENT	155:60	155:60	8	- 1
UNARY_EXPR	155:60	155:61	9	- 1
UNARY_OPERATOR	155:60	155:60	10	-
LEAF_NODE	155:60	155:60	11	-
FIELD	155:61	155:61	10	1
LEAF_NODE	155:61	155:61	11	1
LEAF_NODE	155:62	155:62	8	)
LEAF_NODE	155:63	155:63	6	,
ARGUMENT	155:65	155:65	6	visible_only
FIELD	155:65	155:65	7	visible_only
LEAF_NODE	155:65	155:65	8	visible_only
LEAF_NODE	155:77	155:77	6	,
ARGUMENT	155:79	155:79	6	! slice
UNARY_EXPR	155:79	155:80	7	! slice
UNARY_OPERATOR	155:79	155:79	8	!
LEAF_NODE	155:79	155:79	9	!
FIELD	155:80	155:80	8	slice
LEAF_NODE	155:80	155:80	9	slice
LEAF_NODE	155:85	155:85	6	,
ARGUMENT	155:87	155:87	6	TRUE
FIELD	155:87	155:87	7	TRUE
LEAF_NODE	155:87	155:87	8	TRUE
LEAF_NODE	155:91	155:91	6	)
LEAF_NODE	155:92	155:92	4	;
EXPR_STATEMENT	156:1	156:19	3	g_free ( line_text ) ;
EXPR	156:1	156:1	4	g_free ( line_text )
FUNCTION_CALL	156:1	156:18	5	g_free ( line_text )
CALLEE	156:1	156:1	6	g_free
LEAF_NODE	156:1	156:1	7	g_free
LEAF_NODE	156:8	156:8	6	(
ARGUMENT	156:9	156:9	6	line_text
FIELD	156:9	156:9	7	line_text
LEAF_NODE	156:9	156:9	8	line_text
LEAF_NODE	156:18	156:18	6	)
LEAF_NODE	156:19	156:19	4	;
EXPR_STATEMENT	157:1	157:8	3	++ lines ;
EXPR	157:1	157:3	4	++ lines
LEAF_NODE	157:1	157:1	5	++
FIELD	157:3	157:3	5	lines
LEAF_NODE	157:3	157:3	6	lines
LEAF_NODE	157:8	157:8	4	;
SELECTION	158:1	159:2	3	
KEYWORD	158:1	158:1	4	if
LEAF_NODE	158:1	158:1	5	if
LEAF_NODE	158:4	158:4	4	(
CONDITION	158:5	158:5	4	match_end
EXPR	158:5	158:5	5	match_end
FIELD	158:5	158:5	6	match_end
LEAF_NODE	158:5	158:5	7	match_end
LEAF_NODE	158:14	158:14	4	)
STATEMENTS	159:2	159:2	4	
EXPR_STATEMENT	159:2	159:19	5	* match_end = next ;
EXPR	159:2	159:2	6	* match_end = next
ASSIGN	159:2	159:15	7	* match_end = next
LVAL	159:2	159:2	8	* match_end
UNARY_EXPR	159:2	159:3	9	* match_end
UNARY_OPERATOR	159:2	159:2	10	*
LEAF_NODE	159:2	159:2	11	*
FIELD	159:3	159:3	10	match_end
LEAF_NODE	159:3	159:3	11	match_end
ASSIGN_OP	159:13	159:13	8	=
LEAF_NODE	159:13	159:13	9	=
RVAL	159:15	159:15	8	next
FIELD	159:15	159:15	9	next
LEAF_NODE	159:15	159:15	10	next
LEAF_NODE	159:19	159:19	6	;
JUMP_STATEMENT	163:1	164:30	3	return lines_match ( & next , lines , visible_only , slice , NULL , match_end ) ;
KEYWORD	163:1	163:1	4	return
LEAF_NODE	163:1	163:1	5	return
DESTINATION	163:8	163:8	4	lines_match ( & next , lines , visible_only , slice , NULL , match_end )
EXPR	163:8	163:8	5	lines_match ( & next , lines , visible_only , slice , NULL , match_end )
FUNCTION_CALL	163:8	164:29	6	lines_match ( & next , lines , visible_only , slice , NULL , match_end )
CALLEE	163:8	163:8	7	lines_match
LEAF_NODE	163:8	163:8	8	lines_match
LEAF_NODE	163:20	163:20	7	(
ARGUMENT	163:21	163:21	7	& next
UNARY_EXPR	163:21	163:22	8	& next
UNARY_OPERATOR	163:21	163:21	9	&
LEAF_NODE	163:21	163:21	10	&
FIELD	163:22	163:22	9	next
LEAF_NODE	163:22	163:22	10	next
LEAF_NODE	163:26	163:26	7	,
ARGUMENT	163:28	163:28	7	lines
FIELD	163:28	163:28	8	lines
LEAF_NODE	163:28	163:28	9	lines
LEAF_NODE	163:33	163:33	7	,
ARGUMENT	163:35	163:35	7	visible_only
FIELD	163:35	163:35	8	visible_only
LEAF_NODE	163:35	163:35	9	visible_only
LEAF_NODE	163:47	163:47	7	,
ARGUMENT	164:7	164:7	7	slice
FIELD	164:7	164:7	8	slice
LEAF_NODE	164:7	164:7	9	slice
LEAF_NODE	164:12	164:12	7	,
ARGUMENT	164:14	164:14	7	NULL
FIELD	164:14	164:14	8	NULL
LEAF_NODE	164:14	164:14	9	NULL
LEAF_NODE	164:18	164:18	7	,
ARGUMENT	164:20	164:20	7	match_end
FIELD	164:20	164:20	8	match_end
LEAF_NODE	164:20	164:20	9	match_end
LEAF_NODE	164:29	164:29	7	)
LEAF_NODE	164:30	164:30	4	;
LEAF_NODE	165:0	165:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:13	2	static GList *
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	GList
LEAF_NODE	2:7	2:7	4	GList
LEAF_NODE	2:13	2:13	3	*
FUNCTION_NAME	2:14	2:14	2	txt_logger_list
LEAF_NODE	2:14	2:14	3	txt_logger_list
PARAMETER_LIST	2:29	2:88	2	( PurpleLogType type , const char * sn , PurpleAccount * account )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:44	3	PurpleLogType type
TYPE	2:30	2:30	4	PurpleLogType
TYPE_NAME	2:30	2:30	5	PurpleLogType
LEAF_NODE	2:30	2:30	6	PurpleLogType
NAME	2:44	2:44	4	type
LEAF_NODE	2:44	2:44	5	type
LEAF_NODE	2:48	2:48	3	,
PARAMETER_DECL	2:50	2:62	3	const char * sn
TYPE	2:50	2:61	4	const char *
TYPE_NAME	2:50	2:56	5	const char
LEAF_NODE	2:50	2:50	6	const
LEAF_NODE	2:56	2:56	6	char
POINTER	2:61	2:61	5	*
LEAF_NODE	2:61	2:61	6	*
NAME	2:62	2:62	4	sn
LEAF_NODE	2:62	2:62	5	sn
LEAF_NODE	2:64	2:64	3	,
PARAMETER_DECL	2:66	2:81	3	PurpleAccount * account
TYPE	2:66	2:80	4	PurpleAccount *
TYPE_NAME	2:66	2:66	5	PurpleAccount
LEAF_NODE	2:66	2:66	6	PurpleAccount
POINTER	2:80	2:80	5	*
LEAF_NODE	2:80	2:80	6	*
NAME	2:81	2:81	4	account
LEAF_NODE	2:81	2:81	5	account
LEAF_NODE	2:88	2:88	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:71	3	return purple_log_common_lister ( type , sn , account , ".txt" , txt_logger ) ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	purple_log_common_lister ( type , sn , account , ".txt" , txt_logger )
EXPR	4:8	4:8	5	purple_log_common_lister ( type , sn , account , ".txt" , txt_logger )
FUNCTION_CALL	4:8	4:70	6	purple_log_common_lister ( type , sn , account , ".txt" , txt_logger )
CALLEE	4:8	4:8	7	purple_log_common_lister
LEAF_NODE	4:8	4:8	8	purple_log_common_lister
LEAF_NODE	4:32	4:32	7	(
ARGUMENT	4:33	4:33	7	type
FIELD	4:33	4:33	8	type
LEAF_NODE	4:33	4:33	9	type
LEAF_NODE	4:37	4:37	7	,
ARGUMENT	4:39	4:39	7	sn
FIELD	4:39	4:39	8	sn
LEAF_NODE	4:39	4:39	9	sn
LEAF_NODE	4:41	4:41	7	,
ARGUMENT	4:43	4:43	7	account
FIELD	4:43	4:43	8	account
LEAF_NODE	4:43	4:43	9	account
LEAF_NODE	4:50	4:50	7	,
ARGUMENT	4:52	4:52	7	".txt"
FIELD	4:52	4:52	8	".txt"
LEAF_NODE	4:52	4:52	9	".txt"
LEAF_NODE	4:58	4:58	7	,
ARGUMENT	4:60	4:60	7	txt_logger
FIELD	4:60	4:60	8	txt_logger
LEAF_NODE	4:60	4:60	9	txt_logger
LEAF_NODE	4:70	4:70	7	)
LEAF_NODE	4:71	4:71	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	pidgin_blist_theme_set_offline_text_info
LEAF_NODE	2:0	2:0	3	pidgin_blist_theme_set_offline_text_info
PARAMETER_LIST	2:40	2:93	2	( PidginBlistTheme * theme , const PidginThemeFont * pair )
LEAF_NODE	2:40	2:40	3	(
PARAMETER_DECL	2:41	2:59	3	PidginBlistTheme * theme
TYPE	2:41	2:58	4	PidginBlistTheme *
TYPE_NAME	2:41	2:41	5	PidginBlistTheme
LEAF_NODE	2:41	2:41	6	PidginBlistTheme
POINTER	2:58	2:58	5	*
LEAF_NODE	2:58	2:58	6	*
NAME	2:59	2:59	4	theme
LEAF_NODE	2:59	2:59	5	theme
LEAF_NODE	2:64	2:64	3	,
PARAMETER_DECL	2:66	2:89	3	const PidginThemeFont * pair
TYPE	2:66	2:88	4	const PidginThemeFont *
TYPE_NAME	2:66	2:72	5	const PidginThemeFont
LEAF_NODE	2:66	2:66	6	const
LEAF_NODE	2:72	2:72	6	PidginThemeFont
POINTER	2:88	2:88	5	*
LEAF_NODE	2:88	2:88	6	*
NAME	2:89	2:89	4	pair
LEAF_NODE	2:89	2:89	5	pair
LEAF_NODE	2:93	2:93	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SIMPLE_DECL	4:1	4:30	3	PidginBlistThemePrivate * priv ;
VAR_DECL	4:1	4:26	4	PidginBlistThemePrivate * priv
TYPE	4:1	4:25	5	PidginBlistThemePrivate *
TYPE_NAME	4:1	4:1	6	PidginBlistThemePrivate
LEAF_NODE	4:1	4:1	7	PidginBlistThemePrivate
POINTER	4:25	4:25	6	*
LEAF_NODE	4:25	4:25	7	*
NAME	4:26	4:26	5	priv
LEAF_NODE	4:26	4:26	6	priv
LEAF_NODE	4:30	4:30	4	;
EXPR_STATEMENT	5:1	5:47	3	g_return_if_fail ( PIDGIN_IS_BLIST_THEME ( theme ) ) ;
EXPR	5:1	5:1	4	g_return_if_fail ( PIDGIN_IS_BLIST_THEME ( theme ) )
FUNCTION_CALL	5:1	5:46	5	g_return_if_fail ( PIDGIN_IS_BLIST_THEME ( theme ) )
CALLEE	5:1	5:1	6	g_return_if_fail
LEAF_NODE	5:1	5:1	7	g_return_if_fail
LEAF_NODE	5:17	5:17	6	(
ARGUMENT	5:18	5:18	6	PIDGIN_IS_BLIST_THEME ( theme )
FUNCTION_CALL	5:18	5:45	7	PIDGIN_IS_BLIST_THEME ( theme )
CALLEE	5:18	5:18	8	PIDGIN_IS_BLIST_THEME
LEAF_NODE	5:18	5:18	9	PIDGIN_IS_BLIST_THEME
LEAF_NODE	5:39	5:39	8	(
ARGUMENT	5:40	5:40	8	theme
FIELD	5:40	5:40	9	theme
LEAF_NODE	5:40	5:40	10	theme
LEAF_NODE	5:45	5:45	8	)
LEAF_NODE	5:46	5:46	6	)
LEAF_NODE	5:47	5:47	4	;
EXPR_STATEMENT	6:1	6:55	3	priv = PIDGIN_BLIST_THEME_GET_PRIVATE ( G_OBJECT ( theme ) ) ;
EXPR	6:1	6:1	4	priv = PIDGIN_BLIST_THEME_GET_PRIVATE ( G_OBJECT ( theme ) )
ASSIGN	6:1	6:8	5	priv = PIDGIN_BLIST_THEME_GET_PRIVATE ( G_OBJECT ( theme ) )
LVAL	6:1	6:1	6	priv
FIELD	6:1	6:1	7	priv
LEAF_NODE	6:1	6:1	8	priv
ASSIGN_OP	6:6	6:6	6	=
LEAF_NODE	6:6	6:6	7	=
RVAL	6:8	6:8	6	PIDGIN_BLIST_THEME_GET_PRIVATE ( G_OBJECT ( theme ) )
FUNCTION_CALL	6:8	6:54	7	PIDGIN_BLIST_THEME_GET_PRIVATE ( G_OBJECT ( theme ) )
CALLEE	6:8	6:8	8	PIDGIN_BLIST_THEME_GET_PRIVATE
LEAF_NODE	6:8	6:8	9	PIDGIN_BLIST_THEME_GET_PRIVATE
LEAF_NODE	6:38	6:38	8	(
ARGUMENT	6:39	6:39	8	G_OBJECT ( theme )
FUNCTION_CALL	6:39	6:53	9	G_OBJECT ( theme )
CALLEE	6:39	6:39	10	G_OBJECT
LEAF_NODE	6:39	6:39	11	G_OBJECT
LEAF_NODE	6:47	6:47	10	(
ARGUMENT	6:48	6:48	10	theme
FIELD	6:48	6:48	11	theme
LEAF_NODE	6:48	6:48	12	theme
LEAF_NODE	6:53	6:53	10	)
LEAF_NODE	6:54	6:54	8	)
LEAF_NODE	6:55	6:55	4	;
EXPR_STATEMENT	7:1	7:38	3	pidgin_theme_font_free ( priv -> offline ) ;
EXPR	7:1	7:1	4	pidgin_theme_font_free ( priv -> offline )
FUNCTION_CALL	7:1	7:37	5	pidgin_theme_font_free ( priv -> offline )
CALLEE	7:1	7:1	6	pidgin_theme_font_free
LEAF_NODE	7:1	7:1	7	pidgin_theme_font_free
LEAF_NODE	7:23	7:23	6	(
ARGUMENT	7:24	7:24	6	priv -> offline
FIELD	7:24	7:30	7	priv -> offline
LEAF_NODE	7:24	7:24	8	priv
LEAF_NODE	7:28	7:28	8	->
LEAF_NODE	7:30	7:30	8	offline
LEAF_NODE	7:37	7:37	6	)
LEAF_NODE	7:38	7:38	4	;
EXPR_STATEMENT	8:1	8:42	3	priv -> offline = copy_font_and_color ( pair ) ;
EXPR	8:1	8:1	4	priv -> offline = copy_font_and_color ( pair )
ASSIGN	8:1	8:17	5	priv -> offline = copy_font_and_color ( pair )
LVAL	8:1	8:1	6	priv -> offline
FIELD	8:1	8:7	7	priv -> offline
LEAF_NODE	8:1	8:1	8	priv
LEAF_NODE	8:5	8:5	8	->
LEAF_NODE	8:7	8:7	8	offline
ASSIGN_OP	8:15	8:15	6	=
LEAF_NODE	8:15	8:15	7	=
RVAL	8:17	8:17	6	copy_font_and_color ( pair )
FUNCTION_CALL	8:17	8:41	7	copy_font_and_color ( pair )
CALLEE	8:17	8:17	8	copy_font_and_color
LEAF_NODE	8:17	8:17	9	copy_font_and_color
LEAF_NODE	8:36	8:36	8	(
ARGUMENT	8:37	8:37	8	pair
FIELD	8:37	8:37	9	pair
LEAF_NODE	8:37	8:37	10	pair
LEAF_NODE	8:41	8:41	8	)
LEAF_NODE	8:42	8:42	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	21:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	pounce_response_edit_cb
LEAF_NODE	2:0	2:0	3	pounce_response_edit_cb
PARAMETER_LIST	2:23	3:34	2	( GtkTreeModel * model , GtkTreePath * path , GtkTreeIter * iter , gpointer data )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:38	3	GtkTreeModel * model
TYPE	2:24	2:37	4	GtkTreeModel *
TYPE_NAME	2:24	2:24	5	GtkTreeModel
LEAF_NODE	2:24	2:24	6	GtkTreeModel
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	model
LEAF_NODE	2:38	2:38	5	model
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:58	3	GtkTreePath * path
TYPE	2:45	2:57	4	GtkTreePath *
TYPE_NAME	2:45	2:45	5	GtkTreePath
LEAF_NODE	2:45	2:45	6	GtkTreePath
POINTER	2:57	2:57	5	*
LEAF_NODE	2:57	2:57	6	*
NAME	2:58	2:58	4	path
LEAF_NODE	2:58	2:58	5	path
LEAF_NODE	2:62	2:62	3	,
PARAMETER_DECL	3:2	3:15	3	GtkTreeIter * iter
TYPE	3:2	3:14	4	GtkTreeIter *
TYPE_NAME	3:2	3:2	5	GtkTreeIter
LEAF_NODE	3:2	3:2	6	GtkTreeIter
POINTER	3:14	3:14	5	*
LEAF_NODE	3:14	3:14	6	*
NAME	3:15	3:15	4	iter
LEAF_NODE	3:15	3:15	5	iter
LEAF_NODE	3:19	3:19	3	,
PARAMETER_DECL	3:21	3:30	3	gpointer data
TYPE	3:21	3:21	4	gpointer
TYPE_NAME	3:21	3:21	5	gpointer
LEAF_NODE	3:21	3:21	6	gpointer
NAME	3:30	3:30	4	data
LEAF_NODE	3:30	3:30	5	data
LEAF_NODE	3:34	3:34	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	20:1	2	
SIMPLE_DECL	5:1	5:36	3	PidginNotifyPounceData * pounce_data ;
VAR_DECL	5:1	5:25	4	PidginNotifyPounceData * pounce_data
TYPE	5:1	5:24	5	PidginNotifyPounceData *
TYPE_NAME	5:1	5:1	6	PidginNotifyPounceData
LEAF_NODE	5:1	5:1	7	PidginNotifyPounceData
POINTER	5:24	5:24	6	*
LEAF_NODE	5:24	5:24	7	*
NAME	5:25	5:25	5	pounce_data
LEAF_NODE	5:25	5:25	6	pounce_data
LEAF_NODE	5:36	5:36	4	;
SIMPLE_DECL	6:1	6:55	3	PidginNotifyDialog * dialog ; dialog = ( PidginNotifyDialog * ) data ;
VAR_DECL	6:1	6:21	4	PidginNotifyDialog * dialog ; dialog = ( PidginNotifyDialog * ) data
TYPE	6:1	6:20	5	PidginNotifyDialog *
TYPE_NAME	6:1	6:1	6	PidginNotifyDialog
LEAF_NODE	6:1	6:1	7	PidginNotifyDialog
POINTER	6:20	6:20	6	*
LEAF_NODE	6:20	6:20	7	*
NAME	6:21	6:21	5	dialog
LEAF_NODE	6:21	6:21	6	dialog
LEAF_NODE	0:0	0:0	5	;
INIT	6:21	6:21	5	dialog = ( PidginNotifyDialog * ) data
ASSIGN	6:21	6:30	6	dialog = ( PidginNotifyDialog * ) data
LVAL	6:21	6:21	7	dialog
NAME	6:21	6:21	8	dialog
LEAF_NODE	6:21	6:21	9	dialog
ASSIGN_OP	6:28	6:28	7	=
LEAF_NODE	6:28	6:28	8	=
RVAL	6:30	6:51	7	( PidginNotifyDialog * ) data
LEAF_NODE	6:30	6:30	8	(
TYPE_NAME	6:31	6:31	8	PidginNotifyDialog
LEAF_NODE	6:31	6:31	9	PidginNotifyDialog
LEAF_NODE	6:49	6:49	8	*
LEAF_NODE	6:50	6:50	8	)
FIELD	6:51	6:51	8	data
LEAF_NODE	6:51	6:51	9	data
LEAF_NODE	6:55	6:55	4	;
SIMPLE_DECL	7:1	7:21	3	PurplePounce * pounce ;
VAR_DECL	7:1	7:15	4	PurplePounce * pounce
TYPE	7:1	7:14	5	PurplePounce *
TYPE_NAME	7:1	7:1	6	PurplePounce
LEAF_NODE	7:1	7:1	7	PurplePounce
POINTER	7:14	7:14	6	*
LEAF_NODE	7:14	7:14	7	*
NAME	7:15	7:15	5	pounce
LEAF_NODE	7:15	7:15	6	pounce
LEAF_NODE	7:21	7:21	4	;
SIMPLE_DECL	8:1	8:12	3	GList * list ;
VAR_DECL	8:1	8:8	4	GList * list
TYPE	8:1	8:7	5	GList *
TYPE_NAME	8:1	8:1	6	GList
LEAF_NODE	8:1	8:1	7	GList
POINTER	8:7	8:7	6	*
LEAF_NODE	8:7	8:7	7	*
NAME	8:8	8:8	5	list
LEAF_NODE	8:8	8:8	6	list
LEAF_NODE	8:12	8:12	4	;
EXPR_STATEMENT	9:1	9:32	3	list = purple_pounces_get_all ( ) ;
EXPR	9:1	9:1	4	list = purple_pounces_get_all ( )
ASSIGN	9:1	9:8	5	list = purple_pounces_get_all ( )
LVAL	9:1	9:1	6	list
FIELD	9:1	9:1	7	list
LEAF_NODE	9:1	9:1	8	list
ASSIGN_OP	9:6	9:6	6	=
LEAF_NODE	9:6	9:6	7	=
RVAL	9:8	9:8	6	purple_pounces_get_all ( )
FUNCTION_CALL	9:8	9:31	7	purple_pounces_get_all ( )
CALLEE	9:8	9:8	8	purple_pounces_get_all
LEAF_NODE	9:8	9:8	9	purple_pounces_get_all
LEAF_NODE	9:30	9:30	8	(
LEAF_NODE	9:31	9:31	8	)
LEAF_NODE	9:32	9:32	4	;
EXPR_STATEMENT	10:1	12:6	3	gtk_tree_model_get ( GTK_TREE_MODEL ( dialog -> treemodel ) , iter , PIDGIN_POUNCE_DATA , & pounce_data , - 1 ) ;
EXPR	10:1	10:1	4	gtk_tree_model_get ( GTK_TREE_MODEL ( dialog -> treemodel ) , iter , PIDGIN_POUNCE_DATA , & pounce_data , - 1 )
FUNCTION_CALL	10:1	12:5	5	gtk_tree_model_get ( GTK_TREE_MODEL ( dialog -> treemodel ) , iter , PIDGIN_POUNCE_DATA , & pounce_data , - 1 )
CALLEE	10:1	10:1	6	gtk_tree_model_get
LEAF_NODE	10:1	10:1	7	gtk_tree_model_get
LEAF_NODE	10:19	10:19	6	(
ARGUMENT	10:20	10:20	6	GTK_TREE_MODEL ( dialog -> treemodel )
FUNCTION_CALL	10:20	10:52	7	GTK_TREE_MODEL ( dialog -> treemodel )
CALLEE	10:20	10:20	8	GTK_TREE_MODEL
LEAF_NODE	10:20	10:20	9	GTK_TREE_MODEL
LEAF_NODE	10:34	10:34	8	(
ARGUMENT	10:35	10:35	8	dialog -> treemodel
FIELD	10:35	10:43	9	dialog -> treemodel
LEAF_NODE	10:35	10:35	10	dialog
LEAF_NODE	10:41	10:41	10	->
LEAF_NODE	10:43	10:43	10	treemodel
LEAF_NODE	10:52	10:52	8	)
LEAF_NODE	10:53	10:53	6	,
ARGUMENT	10:55	10:55	6	iter
FIELD	10:55	10:55	7	iter
LEAF_NODE	10:55	10:55	8	iter
LEAF_NODE	10:59	10:59	6	,
ARGUMENT	11:3	11:3	6	PIDGIN_POUNCE_DATA
FIELD	11:3	11:3	7	PIDGIN_POUNCE_DATA
LEAF_NODE	11:3	11:3	8	PIDGIN_POUNCE_DATA
LEAF_NODE	11:21	11:21	6	,
ARGUMENT	11:23	11:23	6	& pounce_data
UNARY_EXPR	11:23	11:24	7	& pounce_data
UNARY_OPERATOR	11:23	11:23	8	&
LEAF_NODE	11:23	11:23	9	&
FIELD	11:24	11:24	8	pounce_data
LEAF_NODE	11:24	11:24	9	pounce_data
LEAF_NODE	11:35	11:35	6	,
ARGUMENT	12:3	12:3	6	- 1
UNARY_EXPR	12:3	12:4	7	- 1
UNARY_OPERATOR	12:3	12:3	8	-
LEAF_NODE	12:3	12:3	9	-
FIELD	12:4	12:4	8	1
LEAF_NODE	12:4	12:4	9	1
LEAF_NODE	12:5	12:5	6	)
LEAF_NODE	12:6	12:6	4	;
ITERATION	13:1	13:41	3	
KEYWORD	13:1	13:1	4	for
LEAF_NODE	13:1	13:1	5	for
LEAF_NODE	13:5	13:5	4	(
FOR_INIT	13:6	13:6	4	;
LEAF_NODE	13:6	13:6	5	;
CONDITION	13:8	13:8	4	list != NULL
EXPR	13:8	13:16	5	list != NULL
FIELD	13:8	13:8	6	list
LEAF_NODE	13:8	13:8	7	list
EQ_OPERATOR	13:13	13:13	6	!=
LEAF_NODE	13:13	13:13	7	!=
FIELD	13:16	13:16	6	NULL
LEAF_NODE	13:16	13:16	7	NULL
LEAF_NODE	13:20	13:20	4	;
FOR_EXPR	13:22	13:22	4	list = list -> next
EXPR	13:22	13:22	5	list = list -> next
ASSIGN	13:22	13:29	6	list = list -> next
LVAL	13:22	13:22	7	list
FIELD	13:22	13:22	8	list
LEAF_NODE	13:22	13:22	9	list
ASSIGN_OP	13:27	13:27	7	=
LEAF_NODE	13:27	13:27	8	=
RVAL	13:29	13:29	7	list -> next
FIELD	13:29	13:35	8	list -> next
LEAF_NODE	13:29	13:29	9	list
LEAF_NODE	13:33	13:33	9	->
LEAF_NODE	13:35	13:35	9	next
LEAF_NODE	13:39	13:39	4	)
STATEMENTS	13:41	19:1	4	
LEAF_NODE	13:41	13:41	5	{
STATEMENTS	14:2	15:2	5	
EXPR_STATEMENT	14:2	14:21	6	pounce = list -> data ;
EXPR	14:2	14:2	7	pounce = list -> data
ASSIGN	14:2	14:11	8	pounce = list -> data
LVAL	14:2	14:2	9	pounce
FIELD	14:2	14:2	10	pounce
LEAF_NODE	14:2	14:2	11	pounce
ASSIGN_OP	14:9	14:9	9	=
LEAF_NODE	14:9	14:9	10	=
RVAL	14:11	14:11	9	list -> data
FIELD	14:11	14:17	10	list -> data
LEAF_NODE	14:11	14:11	11	list
LEAF_NODE	14:15	14:15	11	->
LEAF_NODE	14:17	14:17	11	data
LEAF_NODE	14:21	14:21	7	;
SELECTION	15:2	15:37	6	
KEYWORD	15:2	15:2	7	if
LEAF_NODE	15:2	15:2	8	if
LEAF_NODE	15:5	15:5	7	(
CONDITION	15:6	15:6	7	pounce == pounce_data -> pounce
EXPR	15:6	15:16	8	pounce == pounce_data -> pounce
FIELD	15:6	15:6	9	pounce
LEAF_NODE	15:6	15:6	10	pounce
EQ_OPERATOR	15:13	15:13	9	==
LEAF_NODE	15:13	15:13	10	==
FIELD	15:16	15:29	9	pounce_data -> pounce
LEAF_NODE	15:16	15:16	10	pounce_data
LEAF_NODE	15:27	15:27	10	->
LEAF_NODE	15:29	15:29	10	pounce
LEAF_NODE	15:35	15:35	7	)
STATEMENTS	15:37	18:2	7	
LEAF_NODE	15:37	15:37	8	{
STATEMENTS	16:3	17:3	8	
EXPR_STATEMENT	16:3	16:77	9	pidgin_pounce_editor_show ( pounce_data -> account , NULL , pounce_data -> pounce ) ;
EXPR	16:3	16:3	10	pidgin_pounce_editor_show ( pounce_data -> account , NULL , pounce_data -> pounce )
FUNCTION_CALL	16:3	16:76	11	pidgin_pounce_editor_show ( pounce_data -> account , NULL , pounce_data -> pounce )
CALLEE	16:3	16:3	12	pidgin_pounce_editor_show
LEAF_NODE	16:3	16:3	13	pidgin_pounce_editor_show
LEAF_NODE	16:28	16:28	12	(
ARGUMENT	16:29	16:29	12	pounce_data -> account
FIELD	16:29	16:42	13	pounce_data -> account
LEAF_NODE	16:29	16:29	14	pounce_data
LEAF_NODE	16:40	16:40	14	->
LEAF_NODE	16:42	16:42	14	account
LEAF_NODE	16:49	16:49	12	,
ARGUMENT	16:51	16:51	12	NULL
FIELD	16:51	16:51	13	NULL
LEAF_NODE	16:51	16:51	14	NULL
LEAF_NODE	16:55	16:55	12	,
ARGUMENT	16:57	16:57	12	pounce_data -> pounce
FIELD	16:57	16:70	13	pounce_data -> pounce
LEAF_NODE	16:57	16:57	14	pounce_data
LEAF_NODE	16:68	16:68	14	->
LEAF_NODE	16:70	16:70	14	pounce
LEAF_NODE	16:76	16:76	12	)
LEAF_NODE	16:77	16:77	10	;
JUMP_STATEMENT	17:3	17:9	9	return DESTINATION ;
KEYWORD	17:3	17:3	10	return
LEAF_NODE	17:3	17:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	17:9	17:9	10	;
LEAF_NODE	18:2	18:2	8	}
LEAF_NODE	19:1	19:1	5	}
EXPR_STATEMENT	20:1	20:61	3	purple_debug_warning ( "gtknotify" , "Pounce was destroyed.\n" ) ;
EXPR	20:1	20:1	4	purple_debug_warning ( "gtknotify" , "Pounce was destroyed.\n" )
FUNCTION_CALL	20:1	20:60	5	purple_debug_warning ( "gtknotify" , "Pounce was destroyed.\n" )
CALLEE	20:1	20:1	6	purple_debug_warning
LEAF_NODE	20:1	20:1	7	purple_debug_warning
LEAF_NODE	20:21	20:21	6	(
ARGUMENT	20:22	20:22	6	"gtknotify"
FIELD	20:22	20:22	7	"gtknotify"
LEAF_NODE	20:22	20:22	8	"gtknotify"
LEAF_NODE	20:33	20:33	6	,
ARGUMENT	20:35	20:35	6	"Pounce was destroyed.\n"
FIELD	20:35	20:35	7	"Pounce was destroyed.\n"
LEAF_NODE	20:35	20:35	8	"Pounce was destroyed.\n"
LEAF_NODE	20:60	20:60	6	)
LEAF_NODE	20:61	20:61	4	;
LEAF_NODE	21:0	21:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	23:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	pidgin_disco_signed_off_cb
LEAF_NODE	2:5	2:5	3	pidgin_disco_signed_off_cb
PARAMETER_LIST	2:31	2:52	2	( PurpleConnection * pc )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:50	3	PurpleConnection * pc
TYPE	2:32	2:49	4	PurpleConnection *
TYPE_NAME	2:32	2:32	5	PurpleConnection
LEAF_NODE	2:32	2:32	6	PurpleConnection
POINTER	2:49	2:49	5	*
LEAF_NODE	2:49	2:49	6	*
NAME	2:50	2:50	4	pc
LEAF_NODE	2:50	2:50	5	pc
LEAF_NODE	2:52	2:52	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:12	3	GList * node ;
VAR_DECL	4:1	4:8	4	GList * node
TYPE	4:1	4:7	5	GList *
TYPE_NAME	4:1	4:1	6	GList
LEAF_NODE	4:1	4:1	7	GList
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	node
LEAF_NODE	4:8	4:8	6	node
LEAF_NODE	4:12	4:12	4	;
ITERATION	5:1	5:47	3	
KEYWORD	5:1	5:1	4	for
LEAF_NODE	5:1	5:1	5	for
LEAF_NODE	5:5	5:5	4	(
FOR_INIT	5:6	5:20	4	node = dialogs ;
EXPR	5:6	5:6	5	node = dialogs
ASSIGN	5:6	5:13	6	node = dialogs
LVAL	5:6	5:6	7	node
FIELD	5:6	5:6	8	node
LEAF_NODE	5:6	5:6	9	node
ASSIGN_OP	5:11	5:11	7	=
LEAF_NODE	5:11	5:11	8	=
RVAL	5:13	5:13	7	dialogs
FIELD	5:13	5:13	8	dialogs
LEAF_NODE	5:13	5:13	9	dialogs
LEAF_NODE	5:20	5:20	5	;
CONDITION	5:22	5:22	4	node
EXPR	5:22	5:22	5	node
FIELD	5:22	5:22	6	node
LEAF_NODE	5:22	5:22	7	node
LEAF_NODE	5:26	5:26	4	;
FOR_EXPR	5:28	5:28	4	node = node -> next
EXPR	5:28	5:28	5	node = node -> next
ASSIGN	5:28	5:35	6	node = node -> next
LVAL	5:28	5:28	7	node
FIELD	5:28	5:28	8	node
LEAF_NODE	5:28	5:28	9	node
ASSIGN_OP	5:33	5:33	7	=
LEAF_NODE	5:33	5:33	8	=
RVAL	5:35	5:35	7	node -> next
FIELD	5:35	5:41	8	node -> next
LEAF_NODE	5:35	5:35	9	node
LEAF_NODE	5:39	5:39	9	->
LEAF_NODE	5:41	5:41	9	next
LEAF_NODE	5:45	5:45	4	)
STATEMENTS	5:47	22:1	4	
LEAF_NODE	5:47	5:47	5	{
STATEMENTS	6:2	8:2	5	
SIMPLE_DECL	6:2	6:40	6	PidginDiscoDialog * dialog ; dialog = node -> data ;
VAR_DECL	6:2	6:21	7	PidginDiscoDialog * dialog ; dialog = node -> data
TYPE	6:2	6:20	8	PidginDiscoDialog *
TYPE_NAME	6:2	6:2	9	PidginDiscoDialog
LEAF_NODE	6:2	6:2	10	PidginDiscoDialog
POINTER	6:20	6:20	9	*
LEAF_NODE	6:20	6:20	10	*
NAME	6:21	6:21	8	dialog
LEAF_NODE	6:21	6:21	9	dialog
LEAF_NODE	0:0	0:0	8	;
INIT	6:21	6:21	8	dialog = node -> data
ASSIGN	6:21	6:30	9	dialog = node -> data
LVAL	6:21	6:21	10	dialog
NAME	6:21	6:21	11	dialog
LEAF_NODE	6:21	6:21	12	dialog
ASSIGN_OP	6:28	6:28	10	=
LEAF_NODE	6:28	6:28	11	=
RVAL	6:30	6:30	10	node -> data
FIELD	6:30	6:36	11	node -> data
LEAF_NODE	6:30	6:30	12	node
LEAF_NODE	6:34	6:34	12	->
LEAF_NODE	6:36	6:36	12	data
LEAF_NODE	6:40	6:40	7	;
SIMPLE_DECL	7:2	7:43	6	PidginDiscoList * list ; list = dialog -> discolist ;
VAR_DECL	7:2	7:19	7	PidginDiscoList * list ; list = dialog -> discolist
TYPE	7:2	7:18	8	PidginDiscoList *
TYPE_NAME	7:2	7:2	9	PidginDiscoList
LEAF_NODE	7:2	7:2	10	PidginDiscoList
POINTER	7:18	7:18	9	*
LEAF_NODE	7:18	7:18	10	*
NAME	7:19	7:19	8	list
LEAF_NODE	7:19	7:19	9	list
LEAF_NODE	0:0	0:0	8	;
INIT	7:19	7:19	8	list = dialog -> discolist
ASSIGN	7:19	7:26	9	list = dialog -> discolist
LVAL	7:19	7:19	10	list
NAME	7:19	7:19	11	list
LEAF_NODE	7:19	7:19	12	list
ASSIGN_OP	7:24	7:24	10	=
LEAF_NODE	7:24	7:24	11	=
RVAL	7:26	7:26	10	dialog -> discolist
FIELD	7:26	7:34	11	dialog -> discolist
LEAF_NODE	7:26	7:26	12	dialog
LEAF_NODE	7:32	7:32	12	->
LEAF_NODE	7:34	7:34	12	discolist
LEAF_NODE	7:43	7:43	7	;
SELECTION	8:2	8:30	6	
KEYWORD	8:2	8:2	7	if
LEAF_NODE	8:2	8:2	8	if
LEAF_NODE	8:5	8:5	7	(
CONDITION	8:6	8:6	7	list && list -> pc == pc
EXPR	8:6	8:6	8	list && list -> pc == pc
AND	8:6	8:14	9	list && list -> pc == pc
EXPR	8:6	8:6	10	list
FIELD	8:6	8:6	11	list
LEAF_NODE	8:6	8:6	12	list
LEAF_NODE	8:11	8:11	10	&&
EXPR	8:14	8:26	10	list -> pc == pc
FIELD	8:14	8:20	11	list -> pc
LEAF_NODE	8:14	8:14	12	list
LEAF_NODE	8:18	8:18	12	->
LEAF_NODE	8:20	8:20	12	pc
EQ_OPERATOR	8:23	8:23	11	==
LEAF_NODE	8:23	8:23	12	==
FIELD	8:26	8:26	11	pc
LEAF_NODE	8:26	8:26	12	pc
LEAF_NODE	8:28	8:28	7	)
STATEMENTS	8:30	21:2	7	
LEAF_NODE	8:30	8:30	8	{
STATEMENTS	9:3	20:3	8	
SELECTION	9:3	10:4	9	
KEYWORD	9:3	9:3	10	if
LEAF_NODE	9:3	9:3	11	if
LEAF_NODE	9:6	9:6	10	(
CONDITION	9:7	9:7	10	list -> in_progress
EXPR	9:7	9:7	11	list -> in_progress
FIELD	9:7	9:13	12	list -> in_progress
LEAF_NODE	9:7	9:7	13	list
LEAF_NODE	9:11	9:11	13	->
LEAF_NODE	9:13	9:13	13	in_progress
LEAF_NODE	9:24	9:24	10	)
STATEMENTS	10:4	10:4	10	
EXPR_STATEMENT	10:4	10:50	11	pidgin_disco_list_set_in_progress ( list , FALSE ) ;
EXPR	10:4	10:4	12	pidgin_disco_list_set_in_progress ( list , FALSE )
FUNCTION_CALL	10:4	10:49	13	pidgin_disco_list_set_in_progress ( list , FALSE )
CALLEE	10:4	10:4	14	pidgin_disco_list_set_in_progress
LEAF_NODE	10:4	10:4	15	pidgin_disco_list_set_in_progress
LEAF_NODE	10:37	10:37	14	(
ARGUMENT	10:38	10:38	14	list
FIELD	10:38	10:38	15	list
LEAF_NODE	10:38	10:38	16	list
LEAF_NODE	10:42	10:42	14	,
ARGUMENT	10:44	10:44	14	FALSE
FIELD	10:44	10:44	15	FALSE
LEAF_NODE	10:44	10:44	16	FALSE
LEAF_NODE	10:49	10:49	14	)
LEAF_NODE	10:50	10:50	12	;
SELECTION	11:3	11:19	9	
KEYWORD	11:3	11:3	10	if
LEAF_NODE	11:3	11:3	11	if
LEAF_NODE	11:6	11:6	10	(
CONDITION	11:7	11:7	10	list -> tree
EXPR	11:7	11:7	11	list -> tree
FIELD	11:7	11:13	12	list -> tree
LEAF_NODE	11:7	11:7	13	list
LEAF_NODE	11:11	11:11	13	->
LEAF_NODE	11:13	11:13	13	tree
LEAF_NODE	11:17	11:17	10	)
STATEMENTS	11:19	14:3	10	
LEAF_NODE	11:19	11:19	11	{
STATEMENTS	12:4	13:4	11	
EXPR_STATEMENT	12:4	12:34	12	gtk_widget_destroy ( list -> tree ) ;
EXPR	12:4	12:4	13	gtk_widget_destroy ( list -> tree )
FUNCTION_CALL	12:4	12:33	14	gtk_widget_destroy ( list -> tree )
CALLEE	12:4	12:4	15	gtk_widget_destroy
LEAF_NODE	12:4	12:4	16	gtk_widget_destroy
LEAF_NODE	12:22	12:22	15	(
ARGUMENT	12:23	12:23	15	list -> tree
FIELD	12:23	12:29	16	list -> tree
LEAF_NODE	12:23	12:23	17	list
LEAF_NODE	12:27	12:27	17	->
LEAF_NODE	12:29	12:29	17	tree
LEAF_NODE	12:33	12:33	15	)
LEAF_NODE	12:34	12:34	13	;
EXPR_STATEMENT	13:4	13:21	12	list -> tree = NULL ;
EXPR	13:4	13:4	13	list -> tree = NULL
ASSIGN	13:4	13:17	14	list -> tree = NULL
LVAL	13:4	13:4	15	list -> tree
FIELD	13:4	13:10	16	list -> tree
LEAF_NODE	13:4	13:4	17	list
LEAF_NODE	13:8	13:8	17	->
LEAF_NODE	13:10	13:10	17	tree
ASSIGN_OP	13:15	13:15	15	=
LEAF_NODE	13:15	13:15	16	=
RVAL	13:17	13:17	15	NULL
FIELD	13:17	13:17	16	NULL
LEAF_NODE	13:17	13:17	17	NULL
LEAF_NODE	13:21	13:21	13	;
LEAF_NODE	14:3	14:3	11	}
EXPR_STATEMENT	15:3	15:32	9	pidgin_disco_list_unref ( list ) ;
EXPR	15:3	15:3	10	pidgin_disco_list_unref ( list )
FUNCTION_CALL	15:3	15:31	11	pidgin_disco_list_unref ( list )
CALLEE	15:3	15:3	12	pidgin_disco_list_unref
LEAF_NODE	15:3	15:3	13	pidgin_disco_list_unref
LEAF_NODE	15:26	15:26	12	(
ARGUMENT	15:27	15:27	12	list
FIELD	15:27	15:27	13	list
LEAF_NODE	15:27	15:27	14	list
LEAF_NODE	15:31	15:31	12	)
LEAF_NODE	15:32	15:32	10	;
EXPR_STATEMENT	16:3	16:27	9	dialog -> discolist = NULL ;
EXPR	16:3	16:3	10	dialog -> discolist = NULL
ASSIGN	16:3	16:23	11	dialog -> discolist = NULL
LVAL	16:3	16:3	12	dialog -> discolist
FIELD	16:3	16:11	13	dialog -> discolist
LEAF_NODE	16:3	16:3	14	dialog
LEAF_NODE	16:9	16:9	14	->
LEAF_NODE	16:11	16:11	14	discolist
ASSIGN_OP	16:21	16:21	12	=
LEAF_NODE	16:21	16:21	13	=
RVAL	16:23	16:23	12	NULL
FIELD	16:23	16:23	13	NULL
LEAF_NODE	16:23	16:23	14	NULL
LEAF_NODE	16:27	16:27	10	;
EXPR_STATEMENT	17:3	18:77	9	gtk_widget_set_sensitive ( dialog -> browse_button , pidgin_account_option_menu_get_selected ( dialog -> account_widget ) != NULL ) ;
EXPR	17:3	17:3	10	gtk_widget_set_sensitive ( dialog -> browse_button , pidgin_account_option_menu_get_selected ( dialog -> account_widget ) != NULL )
FUNCTION_CALL	17:3	18:76	11	gtk_widget_set_sensitive ( dialog -> browse_button , pidgin_account_option_menu_get_selected ( dialog -> account_widget ) != NULL )
CALLEE	17:3	17:3	12	gtk_widget_set_sensitive
LEAF_NODE	17:3	17:3	13	gtk_widget_set_sensitive
LEAF_NODE	17:27	17:27	12	(
ARGUMENT	17:28	17:28	12	dialog -> browse_button
FIELD	17:28	17:36	13	dialog -> browse_button
LEAF_NODE	17:28	17:28	14	dialog
LEAF_NODE	17:34	17:34	14	->
LEAF_NODE	17:36	17:36	14	browse_button
LEAF_NODE	17:49	17:49	12	,
ARGUMENT	18:5	18:72	12	pidgin_account_option_menu_get_selected ( dialog -> account_widget ) != NULL
FUNCTION_CALL	18:5	18:67	13	pidgin_account_option_menu_get_selected ( dialog -> account_widget )
CALLEE	18:5	18:5	14	pidgin_account_option_menu_get_selected
LEAF_NODE	18:5	18:5	15	pidgin_account_option_menu_get_selected
LEAF_NODE	18:44	18:44	14	(
ARGUMENT	18:45	18:45	14	dialog -> account_widget
FIELD	18:45	18:53	15	dialog -> account_widget
LEAF_NODE	18:45	18:45	16	dialog
LEAF_NODE	18:51	18:51	16	->
LEAF_NODE	18:53	18:53	16	account_widget
LEAF_NODE	18:67	18:67	14	)
EQ_OPERATOR	18:69	18:69	13	!=
LEAF_NODE	18:69	18:69	14	!=
FIELD	18:72	18:72	13	NULL
LEAF_NODE	18:72	18:72	14	NULL
LEAF_NODE	18:76	18:76	12	)
LEAF_NODE	18:77	18:77	10	;
EXPR_STATEMENT	19:3	19:59	9	gtk_widget_set_sensitive ( dialog -> register_button , FALSE ) ;
EXPR	19:3	19:3	10	gtk_widget_set_sensitive ( dialog -> register_button , FALSE )
FUNCTION_CALL	19:3	19:58	11	gtk_widget_set_sensitive ( dialog -> register_button , FALSE )
CALLEE	19:3	19:3	12	gtk_widget_set_sensitive
LEAF_NODE	19:3	19:3	13	gtk_widget_set_sensitive
LEAF_NODE	19:27	19:27	12	(
ARGUMENT	19:28	19:28	12	dialog -> register_button
FIELD	19:28	19:36	13	dialog -> register_button
LEAF_NODE	19:28	19:28	14	dialog
LEAF_NODE	19:34	19:34	14	->
LEAF_NODE	19:36	19:36	14	register_button
LEAF_NODE	19:51	19:51	12	,
ARGUMENT	19:53	19:53	12	FALSE
FIELD	19:53	19:53	13	FALSE
LEAF_NODE	19:53	19:53	14	FALSE
LEAF_NODE	19:58	19:58	12	)
LEAF_NODE	19:59	19:59	10	;
EXPR_STATEMENT	20:3	20:54	9	gtk_widget_set_sensitive ( dialog -> add_button , FALSE ) ;
EXPR	20:3	20:3	10	gtk_widget_set_sensitive ( dialog -> add_button , FALSE )
FUNCTION_CALL	20:3	20:53	11	gtk_widget_set_sensitive ( dialog -> add_button , FALSE )
CALLEE	20:3	20:3	12	gtk_widget_set_sensitive
LEAF_NODE	20:3	20:3	13	gtk_widget_set_sensitive
LEAF_NODE	20:27	20:27	12	(
ARGUMENT	20:28	20:28	12	dialog -> add_button
FIELD	20:28	20:36	13	dialog -> add_button
LEAF_NODE	20:28	20:28	14	dialog
LEAF_NODE	20:34	20:34	14	->
LEAF_NODE	20:36	20:36	14	add_button
LEAF_NODE	20:46	20:46	12	,
ARGUMENT	20:48	20:48	12	FALSE
FIELD	20:48	20:48	13	FALSE
LEAF_NODE	20:48	20:48	14	FALSE
LEAF_NODE	20:53	20:53	12	)
LEAF_NODE	20:54	20:54	10	;
LEAF_NODE	21:2	21:2	8	}
LEAF_NODE	22:1	22:1	5	}
LEAF_NODE	23:0	23:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	61:0	1	
RETURN_TYPE	1:0	1:0	2	gboolean
TYPE_NAME	1:0	1:0	3	gboolean
LEAF_NODE	1:0	1:0	4	gboolean
FUNCTION_NAME	2:0	2:0	2	jingle_rtp_initiate_media
LEAF_NODE	2:0	2:0	3	jingle_rtp_initiate_media
PARAMETER_LIST	2:25	3:35	2	( JabberStream * js , const gchar * who , PurpleMediaSessionType type )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:40	3	JabberStream * js
TYPE	2:26	2:39	4	JabberStream *
TYPE_NAME	2:26	2:26	5	JabberStream
LEAF_NODE	2:26	2:26	6	JabberStream
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	js
LEAF_NODE	2:40	2:40	5	js
LEAF_NODE	2:42	2:42	3	,
PARAMETER_DECL	2:44	2:57	3	const gchar * who
TYPE	2:44	2:56	4	const gchar *
TYPE_NAME	2:44	2:50	5	const gchar
LEAF_NODE	2:44	2:44	6	const
LEAF_NODE	2:50	2:50	6	gchar
POINTER	2:56	2:56	5	*
LEAF_NODE	2:56	2:56	6	*
NAME	2:57	2:57	4	who
LEAF_NODE	2:57	2:57	5	who
LEAF_NODE	2:60	2:60	3	,
PARAMETER_DECL	3:8	3:31	3	PurpleMediaSessionType type
TYPE	3:8	3:8	4	PurpleMediaSessionType
TYPE_NAME	3:8	3:8	5	PurpleMediaSessionType
LEAF_NODE	3:8	3:8	6	PurpleMediaSessionType
NAME	3:31	3:31	4	type
LEAF_NODE	3:31	3:31	5	type
LEAF_NODE	3:35	3:35	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	6:1	60:1	2	
SIMPLE_DECL	6:1	6:23	3	JingleSession * session ;
VAR_DECL	6:1	6:16	4	JingleSession * session
TYPE	6:1	6:15	5	JingleSession *
TYPE_NAME	6:1	6:1	6	JingleSession
LEAF_NODE	6:1	6:1	7	JingleSession
POINTER	6:15	6:15	6	*
LEAF_NODE	6:15	6:15	7	*
NAME	6:16	6:16	5	session
LEAF_NODE	6:16	6:16	6	session
LEAF_NODE	6:23	6:23	4	;
SIMPLE_DECL	7:1	7:23	3	JingleContent * content ;
VAR_DECL	7:1	7:16	4	JingleContent * content
TYPE	7:1	7:15	5	JingleContent *
TYPE_NAME	7:1	7:1	6	JingleContent
LEAF_NODE	7:1	7:1	7	JingleContent
POINTER	7:15	7:15	6	*
LEAF_NODE	7:15	7:15	7	*
NAME	7:16	7:16	5	content
LEAF_NODE	7:16	7:16	6	content
LEAF_NODE	7:23	7:23	4	;
SIMPLE_DECL	8:1	8:27	3	JingleTransport * transport ;
VAR_DECL	8:1	8:18	4	JingleTransport * transport
TYPE	8:1	8:17	5	JingleTransport *
TYPE_NAME	8:1	8:1	6	JingleTransport
LEAF_NODE	8:1	8:1	7	JingleTransport
POINTER	8:17	8:17	6	*
LEAF_NODE	8:17	8:17	7	*
NAME	8:18	8:18	5	transport
LEAF_NODE	8:18	8:18	6	transport
LEAF_NODE	8:27	8:27	4	;
SIMPLE_DECL	9:1	9:16	3	JabberBuddy * jb ;
VAR_DECL	9:1	9:14	4	JabberBuddy * jb
TYPE	9:1	9:13	5	JabberBuddy *
TYPE_NAME	9:1	9:1	6	JabberBuddy
LEAF_NODE	9:1	9:1	7	JabberBuddy
POINTER	9:13	9:13	6	*
LEAF_NODE	9:13	9:13	7	*
NAME	9:14	9:14	5	jb
LEAF_NODE	9:14	9:14	6	jb
LEAF_NODE	9:16	9:16	4	;
SIMPLE_DECL	10:1	10:25	3	JabberBuddyResource * jbr ;
VAR_DECL	10:1	10:22	4	JabberBuddyResource * jbr
TYPE	10:1	10:21	5	JabberBuddyResource *
TYPE_NAME	10:1	10:1	6	JabberBuddyResource
LEAF_NODE	10:1	10:1	7	JabberBuddyResource
POINTER	10:21	10:21	6	*
LEAF_NODE	10:21	10:21	7	*
NAME	10:22	10:22	5	jbr
LEAF_NODE	10:22	10:22	6	jbr
LEAF_NODE	10:25	10:25	4	;
SIMPLE_DECL	11:1	11:28	3	const gchar * transport_type ;
VAR_DECL	11:1	11:14	4	const gchar * transport_type
TYPE	11:1	11:13	5	const gchar *
TYPE_NAME	11:1	11:7	6	const gchar
LEAF_NODE	11:1	11:1	7	const
LEAF_NODE	11:7	11:7	7	gchar
POINTER	11:13	11:13	6	*
LEAF_NODE	11:13	11:13	7	*
NAME	11:14	11:14	5	transport_type
LEAF_NODE	11:14	11:14	6	transport_type
LEAF_NODE	11:28	11:28	4	;
SIMPLE_DECL	12:1	12:48	3	gchar * resource ; resource = NULL , gchar * me ; me = NULL , gchar * sid ; sid = NULL ;
INIT_DECL_LIST	12:1	12:1	4	gchar * resource ; resource = NULL , gchar * me ; me = NULL , gchar * sid ; sid = NULL
VAR_DECL	12:1	12:8	5	gchar * resource ; resource = NULL
TYPE	12:1	12:7	6	gchar *
TYPE_NAME	12:1	12:1	7	gchar
LEAF_NODE	12:1	12:1	8	gchar
POINTER	12:7	12:7	7	*
LEAF_NODE	12:7	12:7	8	*
NAME	12:8	12:8	6	resource
LEAF_NODE	12:8	12:8	7	resource
LEAF_NODE	0:0	0:0	6	;
INIT	12:8	12:8	6	resource = NULL
ASSIGN	12:8	12:19	7	resource = NULL
LVAL	12:8	12:8	8	resource
NAME	12:8	12:8	9	resource
LEAF_NODE	12:8	12:8	10	resource
ASSIGN_OP	12:17	12:17	8	=
LEAF_NODE	12:17	12:17	9	=
RVAL	12:19	12:19	8	NULL
FIELD	12:19	12:19	9	NULL
LEAF_NODE	12:19	12:19	10	NULL
LEAF_NODE	12:23	12:23	5	,
INIT_DECL_LIST	12:1	12:1	5	gchar * me ; me = NULL , gchar * sid ; sid = NULL
VAR_DECL	12:1	12:26	6	gchar * me ; me = NULL
TYPE	12:1	12:25	7	gchar *
TYPE_NAME	12:1	12:1	8	gchar
LEAF_NODE	12:1	12:1	9	gchar
POINTER	12:25	12:25	8	*
LEAF_NODE	12:25	12:25	9	*
NAME	12:26	12:26	7	me
LEAF_NODE	12:26	12:26	8	me
LEAF_NODE	0:0	0:0	7	;
INIT	12:26	12:26	7	me = NULL
ASSIGN	12:26	12:31	8	me = NULL
LVAL	12:26	12:26	9	me
NAME	12:26	12:26	10	me
LEAF_NODE	12:26	12:26	11	me
ASSIGN_OP	12:29	12:29	9	=
LEAF_NODE	12:29	12:29	10	=
RVAL	12:31	12:31	9	NULL
FIELD	12:31	12:31	10	NULL
LEAF_NODE	12:31	12:31	11	NULL
LEAF_NODE	12:35	12:35	6	,
VAR_DECL	12:1	12:38	6	gchar * sid ; sid = NULL
TYPE	12:1	12:37	7	gchar *
TYPE_NAME	12:1	12:1	8	gchar
LEAF_NODE	12:1	12:1	9	gchar
POINTER	12:37	12:37	8	*
LEAF_NODE	12:37	12:37	9	*
NAME	12:38	12:38	7	sid
LEAF_NODE	12:38	12:38	8	sid
LEAF_NODE	0:0	0:0	7	;
INIT	12:38	12:38	7	sid = NULL
ASSIGN	12:38	12:44	8	sid = NULL
LVAL	12:38	12:38	9	sid
NAME	12:38	12:38	10	sid
LEAF_NODE	12:38	12:38	11	sid
ASSIGN_OP	12:42	12:42	9	=
LEAF_NODE	12:42	12:42	10	=
RVAL	12:44	12:44	9	NULL
FIELD	12:44	12:44	10	NULL
LEAF_NODE	12:44	12:44	11	NULL
LEAF_NODE	12:48	12:48	4	;
EXPR_STATEMENT	14:1	14:39	3	jb = jabber_buddy_find ( js , who , FALSE ) ;
EXPR	14:1	14:1	4	jb = jabber_buddy_find ( js , who , FALSE )
ASSIGN	14:1	14:6	5	jb = jabber_buddy_find ( js , who , FALSE )
LVAL	14:1	14:1	6	jb
FIELD	14:1	14:1	7	jb
LEAF_NODE	14:1	14:1	8	jb
ASSIGN_OP	14:4	14:4	6	=
LEAF_NODE	14:4	14:4	7	=
RVAL	14:6	14:6	6	jabber_buddy_find ( js , who , FALSE )
FUNCTION_CALL	14:6	14:38	7	jabber_buddy_find ( js , who , FALSE )
CALLEE	14:6	14:6	8	jabber_buddy_find
LEAF_NODE	14:6	14:6	9	jabber_buddy_find
LEAF_NODE	14:23	14:23	8	(
ARGUMENT	14:24	14:24	8	js
FIELD	14:24	14:24	9	js
LEAF_NODE	14:24	14:24	10	js
LEAF_NODE	14:26	14:26	8	,
ARGUMENT	14:28	14:28	8	who
FIELD	14:28	14:28	9	who
LEAF_NODE	14:28	14:28	10	who
LEAF_NODE	14:31	14:31	8	,
ARGUMENT	14:33	14:33	8	FALSE
FIELD	14:33	14:33	9	FALSE
LEAF_NODE	14:33	14:33	10	FALSE
LEAF_NODE	14:38	14:38	8	)
LEAF_NODE	14:39	14:39	4	;
SELECTION	15:1	15:10	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:4	15:4	4	(
CONDITION	15:5	15:5	4	! jb
EXPR	15:5	15:5	5	! jb
UNARY_EXPR	15:5	15:6	6	! jb
UNARY_OPERATOR	15:5	15:5	7	!
LEAF_NODE	15:5	15:5	8	!
FIELD	15:6	15:6	7	jb
LEAF_NODE	15:6	15:6	8	jb
LEAF_NODE	15:8	15:8	4	)
STATEMENTS	15:10	18:1	4	
LEAF_NODE	15:10	15:10	5	{
STATEMENTS	16:2	17:2	5	
EXPR_STATEMENT	16:2	16:67	6	purple_debug_error ( "jingle-rtp" , "Could not find Jabber buddy\n" ) ;
EXPR	16:2	16:2	7	purple_debug_error ( "jingle-rtp" , "Could not find Jabber buddy\n" )
FUNCTION_CALL	16:2	16:66	8	purple_debug_error ( "jingle-rtp" , "Could not find Jabber buddy\n" )
CALLEE	16:2	16:2	9	purple_debug_error
LEAF_NODE	16:2	16:2	10	purple_debug_error
LEAF_NODE	16:20	16:20	9	(
ARGUMENT	16:21	16:21	9	"jingle-rtp"
FIELD	16:21	16:21	10	"jingle-rtp"
LEAF_NODE	16:21	16:21	11	"jingle-rtp"
LEAF_NODE	16:33	16:33	9	,
ARGUMENT	16:35	16:35	9	"Could not find Jabber buddy\n"
FIELD	16:35	16:35	10	"Could not find Jabber buddy\n"
LEAF_NODE	16:35	16:35	11	"Could not find Jabber buddy\n"
LEAF_NODE	16:66	16:66	9	)
LEAF_NODE	16:67	16:67	7	;
JUMP_STATEMENT	17:2	17:14	6	return FALSE ;
KEYWORD	17:2	17:2	7	return
LEAF_NODE	17:2	17:2	8	return
DESTINATION	17:9	17:9	7	FALSE
EXPR	17:9	17:9	8	FALSE
FIELD	17:9	17:9	9	FALSE
LEAF_NODE	17:9	17:9	10	FALSE
LEAF_NODE	17:14	17:14	7	;
LEAF_NODE	18:1	18:1	5	}
EXPR_STATEMENT	19:1	19:36	3	resource = jabber_get_resource ( who ) ;
EXPR	19:1	19:1	4	resource = jabber_get_resource ( who )
ASSIGN	19:1	19:12	5	resource = jabber_get_resource ( who )
LVAL	19:1	19:1	6	resource
FIELD	19:1	19:1	7	resource
LEAF_NODE	19:1	19:1	8	resource
ASSIGN_OP	19:10	19:10	6	=
LEAF_NODE	19:10	19:10	7	=
RVAL	19:12	19:12	6	jabber_get_resource ( who )
FUNCTION_CALL	19:12	19:35	7	jabber_get_resource ( who )
CALLEE	19:12	19:12	8	jabber_get_resource
LEAF_NODE	19:12	19:12	9	jabber_get_resource
LEAF_NODE	19:31	19:31	8	(
ARGUMENT	19:32	19:32	8	who
FIELD	19:32	19:32	9	who
LEAF_NODE	19:32	19:32	10	who
LEAF_NODE	19:35	19:35	8	)
LEAF_NODE	19:36	19:36	4	;
EXPR_STATEMENT	20:1	20:47	3	jbr = jabber_buddy_find_resource ( jb , resource ) ;
EXPR	20:1	20:1	4	jbr = jabber_buddy_find_resource ( jb , resource )
ASSIGN	20:1	20:7	5	jbr = jabber_buddy_find_resource ( jb , resource )
LVAL	20:1	20:1	6	jbr
FIELD	20:1	20:1	7	jbr
LEAF_NODE	20:1	20:1	8	jbr
ASSIGN_OP	20:5	20:5	6	=
LEAF_NODE	20:5	20:5	7	=
RVAL	20:7	20:7	6	jabber_buddy_find_resource ( jb , resource )
FUNCTION_CALL	20:7	20:46	7	jabber_buddy_find_resource ( jb , resource )
CALLEE	20:7	20:7	8	jabber_buddy_find_resource
LEAF_NODE	20:7	20:7	9	jabber_buddy_find_resource
LEAF_NODE	20:33	20:33	8	(
ARGUMENT	20:34	20:34	8	jb
FIELD	20:34	20:34	9	jb
LEAF_NODE	20:34	20:34	10	jb
LEAF_NODE	20:36	20:36	8	,
ARGUMENT	20:38	20:38	8	resource
FIELD	20:38	20:38	9	resource
LEAF_NODE	20:38	20:38	10	resource
LEAF_NODE	20:46	20:46	8	)
LEAF_NODE	20:47	20:47	4	;
EXPR_STATEMENT	21:1	21:17	3	g_free ( resource ) ;
EXPR	21:1	21:1	4	g_free ( resource )
FUNCTION_CALL	21:1	21:16	5	g_free ( resource )
CALLEE	21:1	21:1	6	g_free
LEAF_NODE	21:1	21:1	7	g_free
LEAF_NODE	21:7	21:7	6	(
ARGUMENT	21:8	21:8	6	resource
FIELD	21:8	21:8	7	resource
LEAF_NODE	21:8	21:8	8	resource
LEAF_NODE	21:16	21:16	6	)
LEAF_NODE	21:17	21:17	4	;
SELECTION	22:1	22:11	3	
KEYWORD	22:1	22:1	4	if
LEAF_NODE	22:1	22:1	5	if
LEAF_NODE	22:4	22:4	4	(
CONDITION	22:5	22:5	4	! jbr
EXPR	22:5	22:5	5	! jbr
UNARY_EXPR	22:5	22:6	6	! jbr
UNARY_OPERATOR	22:5	22:5	7	!
LEAF_NODE	22:5	22:5	8	!
FIELD	22:6	22:6	7	jbr
LEAF_NODE	22:6	22:6	8	jbr
LEAF_NODE	22:9	22:9	4	)
STATEMENTS	22:11	25:1	4	
LEAF_NODE	22:11	22:11	5	{
STATEMENTS	23:2	24:2	5	
EXPR_STATEMENT	23:2	23:86	6	purple_debug_error ( "jingle-rtp" , "Could not find buddy's resource - %s\n" , resource ) ;
EXPR	23:2	23:2	7	purple_debug_error ( "jingle-rtp" , "Could not find buddy's resource - %s\n" , resource )
FUNCTION_CALL	23:2	23:85	8	purple_debug_error ( "jingle-rtp" , "Could not find buddy's resource - %s\n" , resource )
CALLEE	23:2	23:2	9	purple_debug_error
LEAF_NODE	23:2	23:2	10	purple_debug_error
LEAF_NODE	23:20	23:20	9	(
ARGUMENT	23:21	23:21	9	"jingle-rtp"
FIELD	23:21	23:21	10	"jingle-rtp"
LEAF_NODE	23:21	23:21	11	"jingle-rtp"
LEAF_NODE	23:33	23:33	9	,
ARGUMENT	23:35	23:35	9	"Could not find buddy's resource - %s\n"
FIELD	23:35	23:35	10	"Could not find buddy's resource - %s\n"
LEAF_NODE	23:35	23:35	11	"Could not find buddy's resource - %s\n"
LEAF_NODE	23:75	23:75	9	,
ARGUMENT	23:77	23:77	9	resource
FIELD	23:77	23:77	10	resource
LEAF_NODE	23:77	23:77	11	resource
LEAF_NODE	23:85	23:85	9	)
LEAF_NODE	23:86	23:86	7	;
JUMP_STATEMENT	24:2	24:14	6	return FALSE ;
KEYWORD	24:2	24:2	7	return
LEAF_NODE	24:2	24:2	8	return
DESTINATION	24:9	24:9	7	FALSE
EXPR	24:9	24:9	8	FALSE
FIELD	24:9	24:9	9	FALSE
LEAF_NODE	24:9	24:9	10	FALSE
LEAF_NODE	24:14	24:14	7	;
LEAF_NODE	25:1	25:1	5	}
SELECTION	26:1	26:67	3	
KEYWORD	26:1	26:1	4	if
LEAF_NODE	26:1	26:1	5	if
LEAF_NODE	26:4	26:4	4	(
CONDITION	26:5	26:5	4	jabber_resource_has_capability ( jbr , JINGLE_TRANSPORT_ICEUDP )
EXPR	26:5	26:5	5	jabber_resource_has_capability ( jbr , JINGLE_TRANSPORT_ICEUDP )
FUNCTION_CALL	26:5	26:64	6	jabber_resource_has_capability ( jbr , JINGLE_TRANSPORT_ICEUDP )
CALLEE	26:5	26:5	7	jabber_resource_has_capability
LEAF_NODE	26:5	26:5	8	jabber_resource_has_capability
LEAF_NODE	26:35	26:35	7	(
ARGUMENT	26:36	26:36	7	jbr
FIELD	26:36	26:36	8	jbr
LEAF_NODE	26:36	26:36	9	jbr
LEAF_NODE	26:39	26:39	7	,
ARGUMENT	26:41	26:41	7	JINGLE_TRANSPORT_ICEUDP
FIELD	26:41	26:41	8	JINGLE_TRANSPORT_ICEUDP
LEAF_NODE	26:41	26:41	9	JINGLE_TRANSPORT_ICEUDP
LEAF_NODE	26:64	26:64	7	)
LEAF_NODE	26:65	26:65	4	)
STATEMENTS	26:67	28:1	4	
LEAF_NODE	26:67	26:67	5	{
STATEMENTS	27:2	27:2	5	
EXPR_STATEMENT	27:2	27:42	6	transport_type = JINGLE_TRANSPORT_ICEUDP ;
EXPR	27:2	27:2	7	transport_type = JINGLE_TRANSPORT_ICEUDP
ASSIGN	27:2	27:19	8	transport_type = JINGLE_TRANSPORT_ICEUDP
LVAL	27:2	27:2	9	transport_type
FIELD	27:2	27:2	10	transport_type
LEAF_NODE	27:2	27:2	11	transport_type
ASSIGN_OP	27:17	27:17	9	=
LEAF_NODE	27:17	27:17	10	=
RVAL	27:19	27:19	9	JINGLE_TRANSPORT_ICEUDP
FIELD	27:19	27:19	10	JINGLE_TRANSPORT_ICEUDP
LEAF_NODE	27:19	27:19	11	JINGLE_TRANSPORT_ICEUDP
LEAF_NODE	27:42	27:42	7	;
LEAF_NODE	28:1	28:1	5	}
SELECTION	28:3	28:8	3	
KEYWORD	28:3	28:3	4	else
LEAF_NODE	28:3	28:3	5	else
STATEMENTS	28:8	28:8	4	
SELECTION	28:8	28:74	5	
KEYWORD	28:8	28:8	6	if
LEAF_NODE	28:8	28:8	7	if
LEAF_NODE	28:11	28:11	6	(
CONDITION	28:12	28:12	6	jabber_resource_has_capability ( jbr , JINGLE_TRANSPORT_RAWUDP )
EXPR	28:12	28:12	7	jabber_resource_has_capability ( jbr , JINGLE_TRANSPORT_RAWUDP )
FUNCTION_CALL	28:12	28:71	8	jabber_resource_has_capability ( jbr , JINGLE_TRANSPORT_RAWUDP )
CALLEE	28:12	28:12	9	jabber_resource_has_capability
LEAF_NODE	28:12	28:12	10	jabber_resource_has_capability
LEAF_NODE	28:42	28:42	9	(
ARGUMENT	28:43	28:43	9	jbr
FIELD	28:43	28:43	10	jbr
LEAF_NODE	28:43	28:43	11	jbr
LEAF_NODE	28:46	28:46	9	,
ARGUMENT	28:48	28:48	9	JINGLE_TRANSPORT_RAWUDP
FIELD	28:48	28:48	10	JINGLE_TRANSPORT_RAWUDP
LEAF_NODE	28:48	28:48	11	JINGLE_TRANSPORT_RAWUDP
LEAF_NODE	28:71	28:71	9	)
LEAF_NODE	28:72	28:72	6	)
STATEMENTS	28:74	30:1	6	
LEAF_NODE	28:74	28:74	7	{
STATEMENTS	29:2	29:2	7	
EXPR_STATEMENT	29:2	29:42	8	transport_type = JINGLE_TRANSPORT_RAWUDP ;
EXPR	29:2	29:2	9	transport_type = JINGLE_TRANSPORT_RAWUDP
ASSIGN	29:2	29:19	10	transport_type = JINGLE_TRANSPORT_RAWUDP
LVAL	29:2	29:2	11	transport_type
FIELD	29:2	29:2	12	transport_type
LEAF_NODE	29:2	29:2	13	transport_type
ASSIGN_OP	29:17	29:17	11	=
LEAF_NODE	29:17	29:17	12	=
RVAL	29:19	29:19	11	JINGLE_TRANSPORT_RAWUDP
FIELD	29:19	29:19	12	JINGLE_TRANSPORT_RAWUDP
LEAF_NODE	29:19	29:19	13	JINGLE_TRANSPORT_RAWUDP
LEAF_NODE	29:42	29:42	9	;
LEAF_NODE	30:1	30:1	7	}
SELECTION	30:3	30:8	3	
KEYWORD	30:3	30:3	4	else
LEAF_NODE	30:3	30:3	5	else
STATEMENTS	30:8	34:1	4	
LEAF_NODE	30:8	30:8	5	{
STATEMENTS	31:2	33:2	5	
LEAF_NODE	31:2	31:2	6	purple_debug_error
LEAF_NODE	31:20	31:20	6	(
LEAF_NODE	31:21	31:21	6	"jingle-rtp"
LEAF_NODE	31:33	31:33	6	,
LEAF_NODE	31:35	31:35	6	"Resource doesn't support "
LEAF_NODE	32:4	32:4	6	"the same transport types\n"
LEAF_NODE	32:32	32:32	6	)
LEAF_NODE	32:33	32:33	6	;
JUMP_STATEMENT	33:2	33:14	6	return FALSE ;
KEYWORD	33:2	33:2	7	return
LEAF_NODE	33:2	33:2	8	return
DESTINATION	33:9	33:9	7	FALSE
EXPR	33:9	33:9	8	FALSE
FIELD	33:9	33:9	9	FALSE
LEAF_NODE	33:9	33:9	10	FALSE
LEAF_NODE	33:14	33:14	7	;
LEAF_NODE	34:1	34:1	5	}
EXPR_STATEMENT	36:1	36:87	3	me = g_strdup_printf ( "%s@%s/%s" , js -> user -> node , js -> user -> domain , js -> user -> resource ) ;
EXPR	36:1	36:1	4	me = g_strdup_printf ( "%s@%s/%s" , js -> user -> node , js -> user -> domain , js -> user -> resource )
ASSIGN	36:1	36:6	5	me = g_strdup_printf ( "%s@%s/%s" , js -> user -> node , js -> user -> domain , js -> user -> resource )
LVAL	36:1	36:1	6	me
FIELD	36:1	36:1	7	me
LEAF_NODE	36:1	36:1	8	me
ASSIGN_OP	36:4	36:4	6	=
LEAF_NODE	36:4	36:4	7	=
RVAL	36:6	36:6	6	g_strdup_printf ( "%s@%s/%s" , js -> user -> node , js -> user -> domain , js -> user -> resource )
FUNCTION_CALL	36:6	36:86	7	g_strdup_printf ( "%s@%s/%s" , js -> user -> node , js -> user -> domain , js -> user -> resource )
CALLEE	36:6	36:6	8	g_strdup_printf
LEAF_NODE	36:6	36:6	9	g_strdup_printf
LEAF_NODE	36:21	36:21	8	(
ARGUMENT	36:22	36:22	8	"%s@%s/%s"
FIELD	36:22	36:22	9	"%s@%s/%s"
LEAF_NODE	36:22	36:22	10	"%s@%s/%s"
LEAF_NODE	36:32	36:32	8	,
ARGUMENT	36:34	36:34	8	js -> user -> node
FIELD	36:34	36:44	9	js -> user -> node
LEAF_NODE	36:34	36:34	10	js
LEAF_NODE	36:36	36:36	10	->
LEAF_NODE	36:38	36:38	10	user
LEAF_NODE	36:42	36:42	10	->
LEAF_NODE	36:44	36:44	10	node
LEAF_NODE	36:48	36:48	8	,
ARGUMENT	36:50	36:50	8	js -> user -> domain
FIELD	36:50	36:60	9	js -> user -> domain
LEAF_NODE	36:50	36:50	10	js
LEAF_NODE	36:52	36:52	10	->
LEAF_NODE	36:54	36:54	10	user
LEAF_NODE	36:58	36:58	10	->
LEAF_NODE	36:60	36:60	10	domain
LEAF_NODE	36:66	36:66	8	,
ARGUMENT	36:68	36:68	8	js -> user -> resource
FIELD	36:68	36:78	9	js -> user -> resource
LEAF_NODE	36:68	36:68	10	js
LEAF_NODE	36:70	36:70	10	->
LEAF_NODE	36:72	36:72	10	user
LEAF_NODE	36:76	36:76	10	->
LEAF_NODE	36:78	36:78	10	resource
LEAF_NODE	36:86	36:86	8	)
LEAF_NODE	36:87	36:87	4	;
EXPR_STATEMENT	37:1	37:29	3	sid = jabber_get_next_id ( js ) ;
EXPR	37:1	37:1	4	sid = jabber_get_next_id ( js )
ASSIGN	37:1	37:7	5	sid = jabber_get_next_id ( js )
LVAL	37:1	37:1	6	sid
FIELD	37:1	37:1	7	sid
LEAF_NODE	37:1	37:1	8	sid
ASSIGN_OP	37:5	37:5	6	=
LEAF_NODE	37:5	37:5	7	=
RVAL	37:7	37:7	6	jabber_get_next_id ( js )
FUNCTION_CALL	37:7	37:28	7	jabber_get_next_id ( js )
CALLEE	37:7	37:7	8	jabber_get_next_id
LEAF_NODE	37:7	37:7	9	jabber_get_next_id
LEAF_NODE	37:25	37:25	8	(
ARGUMENT	37:26	37:26	8	js
FIELD	37:26	37:26	9	js
LEAF_NODE	37:26	37:26	10	js
LEAF_NODE	37:28	37:28	8	)
LEAF_NODE	37:29	37:29	4	;
EXPR_STATEMENT	38:1	38:56	3	session = jingle_session_create ( js , sid , me , who , TRUE ) ;
EXPR	38:1	38:1	4	session = jingle_session_create ( js , sid , me , who , TRUE )
ASSIGN	38:1	38:11	5	session = jingle_session_create ( js , sid , me , who , TRUE )
LVAL	38:1	38:1	6	session
FIELD	38:1	38:1	7	session
LEAF_NODE	38:1	38:1	8	session
ASSIGN_OP	38:9	38:9	6	=
LEAF_NODE	38:9	38:9	7	=
RVAL	38:11	38:11	6	jingle_session_create ( js , sid , me , who , TRUE )
FUNCTION_CALL	38:11	38:55	7	jingle_session_create ( js , sid , me , who , TRUE )
CALLEE	38:11	38:11	8	jingle_session_create
LEAF_NODE	38:11	38:11	9	jingle_session_create
LEAF_NODE	38:32	38:32	8	(
ARGUMENT	38:33	38:33	8	js
FIELD	38:33	38:33	9	js
LEAF_NODE	38:33	38:33	10	js
LEAF_NODE	38:35	38:35	8	,
ARGUMENT	38:37	38:37	8	sid
FIELD	38:37	38:37	9	sid
LEAF_NODE	38:37	38:37	10	sid
LEAF_NODE	38:40	38:40	8	,
ARGUMENT	38:42	38:42	8	me
FIELD	38:42	38:42	9	me
LEAF_NODE	38:42	38:42	10	me
LEAF_NODE	38:44	38:44	8	,
ARGUMENT	38:46	38:46	8	who
FIELD	38:46	38:46	9	who
LEAF_NODE	38:46	38:46	10	who
LEAF_NODE	38:49	38:49	8	,
ARGUMENT	38:51	38:51	8	TRUE
FIELD	38:51	38:51	9	TRUE
LEAF_NODE	38:51	38:51	10	TRUE
LEAF_NODE	38:55	38:55	8	)
LEAF_NODE	38:56	38:56	4	;
EXPR_STATEMENT	39:1	39:12	3	g_free ( sid ) ;
EXPR	39:1	39:1	4	g_free ( sid )
FUNCTION_CALL	39:1	39:11	5	g_free ( sid )
CALLEE	39:1	39:1	6	g_free
LEAF_NODE	39:1	39:1	7	g_free
LEAF_NODE	39:7	39:7	6	(
ARGUMENT	39:8	39:8	6	sid
FIELD	39:8	39:8	7	sid
LEAF_NODE	39:8	39:8	8	sid
LEAF_NODE	39:11	39:11	6	)
LEAF_NODE	39:12	39:12	4	;
SELECTION	40:1	40:32	3	
KEYWORD	40:1	40:1	4	if
LEAF_NODE	40:1	40:1	5	if
LEAF_NODE	40:4	40:4	4	(
CONDITION	40:5	40:5	4	type & PURPLE_MEDIA_AUDIO
EXPR	40:5	40:12	5	type & PURPLE_MEDIA_AUDIO
FIELD	40:5	40:5	6	type
LEAF_NODE	40:5	40:5	7	type
LEAF_NODE	40:10	40:10	6	&
FIELD	40:12	40:12	6	PURPLE_MEDIA_AUDIO
LEAF_NODE	40:12	40:12	7	PURPLE_MEDIA_AUDIO
LEAF_NODE	40:30	40:30	4	)
STATEMENTS	40:32	47:1	4	
LEAF_NODE	40:32	40:32	5	{
STATEMENTS	41:2	46:2	5	
EXPR_STATEMENT	41:2	41:53	6	transport = jingle_transport_create ( transport_type ) ;
EXPR	41:2	41:2	7	transport = jingle_transport_create ( transport_type )
ASSIGN	41:2	41:14	8	transport = jingle_transport_create ( transport_type )
LVAL	41:2	41:2	9	transport
FIELD	41:2	41:2	10	transport
LEAF_NODE	41:2	41:2	11	transport
ASSIGN_OP	41:12	41:12	9	=
LEAF_NODE	41:12	41:12	10	=
RVAL	41:14	41:14	9	jingle_transport_create ( transport_type )
FUNCTION_CALL	41:14	41:52	10	jingle_transport_create ( transport_type )
CALLEE	41:14	41:14	11	jingle_transport_create
LEAF_NODE	41:14	41:14	12	jingle_transport_create
LEAF_NODE	41:37	41:37	11	(
ARGUMENT	41:38	41:38	11	transport_type
FIELD	41:38	41:38	12	transport_type
LEAF_NODE	41:38	41:38	13	transport_type
LEAF_NODE	41:52	41:52	11	)
LEAF_NODE	41:53	41:53	7	;
EXPR_STATEMENT	42:2	43:50	6	content = jingle_content_create ( JINGLE_APP_RTP , "initiator" , "session" , "audio-session" , "both" , transport ) ;
EXPR	42:2	42:2	7	content = jingle_content_create ( JINGLE_APP_RTP , "initiator" , "session" , "audio-session" , "both" , transport )
ASSIGN	42:2	42:12	8	content = jingle_content_create ( JINGLE_APP_RTP , "initiator" , "session" , "audio-session" , "both" , transport )
LVAL	42:2	42:2	9	content
FIELD	42:2	42:2	10	content
LEAF_NODE	42:2	42:2	11	content
ASSIGN_OP	42:10	42:10	9	=
LEAF_NODE	42:10	42:10	10	=
RVAL	42:12	42:12	9	jingle_content_create ( JINGLE_APP_RTP , "initiator" , "session" , "audio-session" , "both" , transport )
FUNCTION_CALL	42:12	43:49	10	jingle_content_create ( JINGLE_APP_RTP , "initiator" , "session" , "audio-session" , "both" , transport )
CALLEE	42:12	42:12	11	jingle_content_create
LEAF_NODE	42:12	42:12	12	jingle_content_create
LEAF_NODE	42:33	42:33	11	(
ARGUMENT	42:34	42:34	11	JINGLE_APP_RTP
FIELD	42:34	42:34	12	JINGLE_APP_RTP
LEAF_NODE	42:34	42:34	13	JINGLE_APP_RTP
LEAF_NODE	42:48	42:48	11	,
ARGUMENT	42:50	42:50	11	"initiator"
FIELD	42:50	42:50	12	"initiator"
LEAF_NODE	42:50	42:50	13	"initiator"
LEAF_NODE	42:61	42:61	11	,
ARGUMENT	43:4	43:4	11	"session"
FIELD	43:4	43:4	12	"session"
LEAF_NODE	43:4	43:4	13	"session"
LEAF_NODE	43:13	43:13	11	,
ARGUMENT	43:15	43:15	11	"audio-session"
FIELD	43:15	43:15	12	"audio-session"
LEAF_NODE	43:15	43:15	13	"audio-session"
LEAF_NODE	43:30	43:30	11	,
ARGUMENT	43:32	43:32	11	"both"
FIELD	43:32	43:32	12	"both"
LEAF_NODE	43:32	43:32	13	"both"
LEAF_NODE	43:38	43:38	11	,
ARGUMENT	43:40	43:40	11	transport
FIELD	43:40	43:40	12	transport
LEAF_NODE	43:40	43:40	13	transport
LEAF_NODE	43:49	43:49	11	)
LEAF_NODE	43:50	43:50	7	;
EXPR_STATEMENT	44:2	44:46	6	jingle_session_add_content ( session , content ) ;
EXPR	44:2	44:2	7	jingle_session_add_content ( session , content )
FUNCTION_CALL	44:2	44:45	8	jingle_session_add_content ( session , content )
CALLEE	44:2	44:2	9	jingle_session_add_content
LEAF_NODE	44:2	44:2	10	jingle_session_add_content
LEAF_NODE	44:28	44:28	9	(
ARGUMENT	44:29	44:29	9	session
FIELD	44:29	44:29	10	session
LEAF_NODE	44:29	44:29	11	session
LEAF_NODE	44:36	44:36	9	,
ARGUMENT	44:38	44:38	9	content
FIELD	44:38	44:38	10	content
LEAF_NODE	44:38	44:38	11	content
LEAF_NODE	44:45	44:45	9	)
LEAF_NODE	44:46	44:46	7	;
LEAF_NODE	45:2	45:2	6	JINGLE_RTP
LEAF_NODE	45:12	45:12	6	(
LEAF_NODE	45:13	45:13	6	content
LEAF_NODE	45:20	45:20	6	)
LEAF_NODE	45:21	45:21	6	->
EXPR_STATEMENT	45:23	45:59	6	priv -> media_type = g_strdup ( "audio" ) ;
EXPR	45:23	45:23	7	priv -> media_type = g_strdup ( "audio" )
ASSIGN	45:23	45:42	8	priv -> media_type = g_strdup ( "audio" )
LVAL	45:23	45:23	9	priv -> media_type
FIELD	45:23	45:29	10	priv -> media_type
LEAF_NODE	45:23	45:23	11	priv
LEAF_NODE	45:27	45:27	11	->
LEAF_NODE	45:29	45:29	11	media_type
ASSIGN_OP	45:40	45:40	9	=
LEAF_NODE	45:40	45:40	10	=
RVAL	45:42	45:42	9	g_strdup ( "audio" )
FUNCTION_CALL	45:42	45:58	10	g_strdup ( "audio" )
CALLEE	45:42	45:42	11	g_strdup
LEAF_NODE	45:42	45:42	12	g_strdup
LEAF_NODE	45:50	45:50	11	(
ARGUMENT	45:51	45:51	11	"audio"
FIELD	45:51	45:51	12	"audio"
LEAF_NODE	45:51	45:51	13	"audio"
LEAF_NODE	45:58	45:58	11	)
LEAF_NODE	45:59	45:59	7	;
EXPR_STATEMENT	46:2	46:32	6	jingle_rtp_init_media ( content ) ;
EXPR	46:2	46:2	7	jingle_rtp_init_media ( content )
FUNCTION_CALL	46:2	46:31	8	jingle_rtp_init_media ( content )
CALLEE	46:2	46:2	9	jingle_rtp_init_media
LEAF_NODE	46:2	46:2	10	jingle_rtp_init_media
LEAF_NODE	46:23	46:23	9	(
ARGUMENT	46:24	46:24	9	content
FIELD	46:24	46:24	10	content
LEAF_NODE	46:24	46:24	11	content
LEAF_NODE	46:31	46:31	9	)
LEAF_NODE	46:32	46:32	7	;
LEAF_NODE	47:1	47:1	5	}
SELECTION	48:1	48:32	3	
KEYWORD	48:1	48:1	4	if
LEAF_NODE	48:1	48:1	5	if
LEAF_NODE	48:4	48:4	4	(
CONDITION	48:5	48:5	4	type & PURPLE_MEDIA_VIDEO
EXPR	48:5	48:12	5	type & PURPLE_MEDIA_VIDEO
FIELD	48:5	48:5	6	type
LEAF_NODE	48:5	48:5	7	type
LEAF_NODE	48:10	48:10	6	&
FIELD	48:12	48:12	6	PURPLE_MEDIA_VIDEO
LEAF_NODE	48:12	48:12	7	PURPLE_MEDIA_VIDEO
LEAF_NODE	48:30	48:30	4	)
STATEMENTS	48:32	55:1	4	
LEAF_NODE	48:32	48:32	5	{
STATEMENTS	49:2	54:2	5	
EXPR_STATEMENT	49:2	49:53	6	transport = jingle_transport_create ( transport_type ) ;
EXPR	49:2	49:2	7	transport = jingle_transport_create ( transport_type )
ASSIGN	49:2	49:14	8	transport = jingle_transport_create ( transport_type )
LVAL	49:2	49:2	9	transport
FIELD	49:2	49:2	10	transport
LEAF_NODE	49:2	49:2	11	transport
ASSIGN_OP	49:12	49:12	9	=
LEAF_NODE	49:12	49:12	10	=
RVAL	49:14	49:14	9	jingle_transport_create ( transport_type )
FUNCTION_CALL	49:14	49:52	10	jingle_transport_create ( transport_type )
CALLEE	49:14	49:14	11	jingle_transport_create
LEAF_NODE	49:14	49:14	12	jingle_transport_create
LEAF_NODE	49:37	49:37	11	(
ARGUMENT	49:38	49:38	11	transport_type
FIELD	49:38	49:38	12	transport_type
LEAF_NODE	49:38	49:38	13	transport_type
LEAF_NODE	49:52	49:52	11	)
LEAF_NODE	49:53	49:53	7	;
EXPR_STATEMENT	50:2	51:50	6	content = jingle_content_create ( JINGLE_APP_RTP , "initiator" , "session" , "video-session" , "both" , transport ) ;
EXPR	50:2	50:2	7	content = jingle_content_create ( JINGLE_APP_RTP , "initiator" , "session" , "video-session" , "both" , transport )
ASSIGN	50:2	50:12	8	content = jingle_content_create ( JINGLE_APP_RTP , "initiator" , "session" , "video-session" , "both" , transport )
LVAL	50:2	50:2	9	content
FIELD	50:2	50:2	10	content
LEAF_NODE	50:2	50:2	11	content
ASSIGN_OP	50:10	50:10	9	=
LEAF_NODE	50:10	50:10	10	=
RVAL	50:12	50:12	9	jingle_content_create ( JINGLE_APP_RTP , "initiator" , "session" , "video-session" , "both" , transport )
FUNCTION_CALL	50:12	51:49	10	jingle_content_create ( JINGLE_APP_RTP , "initiator" , "session" , "video-session" , "both" , transport )
CALLEE	50:12	50:12	11	jingle_content_create
LEAF_NODE	50:12	50:12	12	jingle_content_create
LEAF_NODE	50:33	50:33	11	(
ARGUMENT	50:34	50:34	11	JINGLE_APP_RTP
FIELD	50:34	50:34	12	JINGLE_APP_RTP
LEAF_NODE	50:34	50:34	13	JINGLE_APP_RTP
LEAF_NODE	50:48	50:48	11	,
ARGUMENT	50:50	50:50	11	"initiator"
FIELD	50:50	50:50	12	"initiator"
LEAF_NODE	50:50	50:50	13	"initiator"
LEAF_NODE	50:61	50:61	11	,
ARGUMENT	51:4	51:4	11	"session"
FIELD	51:4	51:4	12	"session"
LEAF_NODE	51:4	51:4	13	"session"
LEAF_NODE	51:13	51:13	11	,
ARGUMENT	51:15	51:15	11	"video-session"
FIELD	51:15	51:15	12	"video-session"
LEAF_NODE	51:15	51:15	13	"video-session"
LEAF_NODE	51:30	51:30	11	,
ARGUMENT	51:32	51:32	11	"both"
FIELD	51:32	51:32	12	"both"
LEAF_NODE	51:32	51:32	13	"both"
LEAF_NODE	51:38	51:38	11	,
ARGUMENT	51:40	51:40	11	transport
FIELD	51:40	51:40	12	transport
LEAF_NODE	51:40	51:40	13	transport
LEAF_NODE	51:49	51:49	11	)
LEAF_NODE	51:50	51:50	7	;
EXPR_STATEMENT	52:2	52:46	6	jingle_session_add_content ( session , content ) ;
EXPR	52:2	52:2	7	jingle_session_add_content ( session , content )
FUNCTION_CALL	52:2	52:45	8	jingle_session_add_content ( session , content )
CALLEE	52:2	52:2	9	jingle_session_add_content
LEAF_NODE	52:2	52:2	10	jingle_session_add_content
LEAF_NODE	52:28	52:28	9	(
ARGUMENT	52:29	52:29	9	session
FIELD	52:29	52:29	10	session
LEAF_NODE	52:29	52:29	11	session
LEAF_NODE	52:36	52:36	9	,
ARGUMENT	52:38	52:38	9	content
FIELD	52:38	52:38	10	content
LEAF_NODE	52:38	52:38	11	content
LEAF_NODE	52:45	52:45	9	)
LEAF_NODE	52:46	52:46	7	;
LEAF_NODE	53:2	53:2	6	JINGLE_RTP
LEAF_NODE	53:12	53:12	6	(
LEAF_NODE	53:13	53:13	6	content
LEAF_NODE	53:20	53:20	6	)
LEAF_NODE	53:21	53:21	6	->
EXPR_STATEMENT	53:23	53:59	6	priv -> media_type = g_strdup ( "video" ) ;
EXPR	53:23	53:23	7	priv -> media_type = g_strdup ( "video" )
ASSIGN	53:23	53:42	8	priv -> media_type = g_strdup ( "video" )
LVAL	53:23	53:23	9	priv -> media_type
FIELD	53:23	53:29	10	priv -> media_type
LEAF_NODE	53:23	53:23	11	priv
LEAF_NODE	53:27	53:27	11	->
LEAF_NODE	53:29	53:29	11	media_type
ASSIGN_OP	53:40	53:40	9	=
LEAF_NODE	53:40	53:40	10	=
RVAL	53:42	53:42	9	g_strdup ( "video" )
FUNCTION_CALL	53:42	53:58	10	g_strdup ( "video" )
CALLEE	53:42	53:42	11	g_strdup
LEAF_NODE	53:42	53:42	12	g_strdup
LEAF_NODE	53:50	53:50	11	(
ARGUMENT	53:51	53:51	11	"video"
FIELD	53:51	53:51	12	"video"
LEAF_NODE	53:51	53:51	13	"video"
LEAF_NODE	53:58	53:58	11	)
LEAF_NODE	53:59	53:59	7	;
EXPR_STATEMENT	54:2	54:32	6	jingle_rtp_init_media ( content ) ;
EXPR	54:2	54:2	7	jingle_rtp_init_media ( content )
FUNCTION_CALL	54:2	54:31	8	jingle_rtp_init_media ( content )
CALLEE	54:2	54:2	9	jingle_rtp_init_media
LEAF_NODE	54:2	54:2	10	jingle_rtp_init_media
LEAF_NODE	54:23	54:23	9	(
ARGUMENT	54:24	54:24	9	content
FIELD	54:24	54:24	10	content
LEAF_NODE	54:24	54:24	11	content
LEAF_NODE	54:31	54:31	9	)
LEAF_NODE	54:32	54:32	7	;
LEAF_NODE	55:1	55:1	5	}
EXPR_STATEMENT	56:1	56:11	3	g_free ( me ) ;
EXPR	56:1	56:1	4	g_free ( me )
FUNCTION_CALL	56:1	56:10	5	g_free ( me )
CALLEE	56:1	56:1	6	g_free
LEAF_NODE	56:1	56:1	7	g_free
LEAF_NODE	56:7	56:7	6	(
ARGUMENT	56:8	56:8	6	me
FIELD	56:8	56:8	7	me
LEAF_NODE	56:8	56:8	8	me
LEAF_NODE	56:10	56:10	6	)
LEAF_NODE	56:11	56:11	4	;
SELECTION	57:1	57:44	3	
KEYWORD	57:1	57:1	4	if
LEAF_NODE	57:1	57:1	5	if
LEAF_NODE	57:4	57:4	4	(
CONDITION	57:5	57:5	4	jingle_rtp_get_media ( session ) == NULL
EXPR	57:5	57:38	5	jingle_rtp_get_media ( session ) == NULL
FUNCTION_CALL	57:5	57:33	6	jingle_rtp_get_media ( session )
CALLEE	57:5	57:5	7	jingle_rtp_get_media
LEAF_NODE	57:5	57:5	8	jingle_rtp_get_media
LEAF_NODE	57:25	57:25	7	(
ARGUMENT	57:26	57:26	7	session
FIELD	57:26	57:26	8	session
LEAF_NODE	57:26	57:26	9	session
LEAF_NODE	57:33	57:33	7	)
EQ_OPERATOR	57:35	57:35	6	==
LEAF_NODE	57:35	57:35	7	==
FIELD	57:38	57:38	6	NULL
LEAF_NODE	57:38	57:38	7	NULL
LEAF_NODE	57:42	57:42	4	)
STATEMENTS	57:44	59:1	4	
LEAF_NODE	57:44	57:44	5	{
STATEMENTS	58:2	58:2	5	
JUMP_STATEMENT	58:2	58:14	6	return FALSE ;
KEYWORD	58:2	58:2	7	return
LEAF_NODE	58:2	58:2	8	return
DESTINATION	58:9	58:9	7	FALSE
EXPR	58:9	58:9	8	FALSE
FIELD	58:9	58:9	9	FALSE
LEAF_NODE	58:9	58:9	10	FALSE
LEAF_NODE	58:14	58:14	7	;
LEAF_NODE	59:1	59:1	5	}
JUMP_STATEMENT	60:1	60:12	3	return TRUE ;
KEYWORD	60:1	60:1	4	return
LEAF_NODE	60:1	60:1	5	return
DESTINATION	60:8	60:8	4	TRUE
EXPR	60:8	60:8	5	TRUE
FIELD	60:8	60:8	6	TRUE
LEAF_NODE	60:8	60:8	7	TRUE
LEAF_NODE	60:12	60:12	4	;
LEAF_NODE	61:0	61:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	83:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	purple_media_candidate_class_init
LEAF_NODE	2:0	2:0	3	purple_media_candidate_class_init
PARAMETER_LIST	2:33	2:66	2	( PurpleMediaCandidateClass * klass )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:61	3	PurpleMediaCandidateClass * klass
TYPE	2:34	2:60	4	PurpleMediaCandidateClass *
TYPE_NAME	2:34	2:34	5	PurpleMediaCandidateClass
LEAF_NODE	2:34	2:34	6	PurpleMediaCandidateClass
POINTER	2:60	2:60	5	*
LEAF_NODE	2:60	2:60	6	*
NAME	2:61	2:61	4	klass
LEAF_NODE	2:61	2:61	5	klass
LEAF_NODE	2:66	2:66	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	82:1	2	
SIMPLE_DECL	4:1	4:51	3	GObjectClass * gobject_class ; gobject_class = ( GObjectClass * ) klass ;
VAR_DECL	4:1	4:15	4	GObjectClass * gobject_class ; gobject_class = ( GObjectClass * ) klass
TYPE	4:1	4:14	5	GObjectClass *
TYPE_NAME	4:1	4:1	6	GObjectClass
LEAF_NODE	4:1	4:1	7	GObjectClass
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	gobject_class
LEAF_NODE	4:15	4:15	6	gobject_class
LEAF_NODE	0:0	0:0	5	;
INIT	4:15	4:15	5	gobject_class = ( GObjectClass * ) klass
ASSIGN	4:15	4:31	6	gobject_class = ( GObjectClass * ) klass
LVAL	4:15	4:15	7	gobject_class
NAME	4:15	4:15	8	gobject_class
LEAF_NODE	4:15	4:15	9	gobject_class
ASSIGN_OP	4:29	4:29	7	=
LEAF_NODE	4:29	4:29	8	=
RVAL	4:31	4:46	7	( GObjectClass * ) klass
LEAF_NODE	4:31	4:31	8	(
TYPE_NAME	4:32	4:32	8	GObjectClass
LEAF_NODE	4:32	4:32	9	GObjectClass
LEAF_NODE	4:44	4:44	8	*
LEAF_NODE	4:45	4:45	8	)
FIELD	4:46	4:46	8	klass
LEAF_NODE	4:46	4:46	9	klass
LEAF_NODE	4:51	4:51	4	;
EXPR_STATEMENT	5:1	5:58	3	gobject_class -> finalize = purple_media_candidate_finalize ;
EXPR	5:1	5:1	4	gobject_class -> finalize = purple_media_candidate_finalize
ASSIGN	5:1	5:27	5	gobject_class -> finalize = purple_media_candidate_finalize
LVAL	5:1	5:1	6	gobject_class -> finalize
FIELD	5:1	5:16	7	gobject_class -> finalize
LEAF_NODE	5:1	5:1	8	gobject_class
LEAF_NODE	5:14	5:14	8	->
LEAF_NODE	5:16	5:16	8	finalize
ASSIGN_OP	5:25	5:25	6	=
LEAF_NODE	5:25	5:25	7	=
RVAL	5:27	5:27	6	purple_media_candidate_finalize
FIELD	5:27	5:27	7	purple_media_candidate_finalize
LEAF_NODE	5:27	5:27	8	purple_media_candidate_finalize
LEAF_NODE	5:58	5:58	4	;
EXPR_STATEMENT	6:1	6:66	3	gobject_class -> set_property = purple_media_candidate_set_property ;
EXPR	6:1	6:1	4	gobject_class -> set_property = purple_media_candidate_set_property
ASSIGN	6:1	6:31	5	gobject_class -> set_property = purple_media_candidate_set_property
LVAL	6:1	6:1	6	gobject_class -> set_property
FIELD	6:1	6:16	7	gobject_class -> set_property
LEAF_NODE	6:1	6:1	8	gobject_class
LEAF_NODE	6:14	6:14	8	->
LEAF_NODE	6:16	6:16	8	set_property
ASSIGN_OP	6:29	6:29	6	=
LEAF_NODE	6:29	6:29	7	=
RVAL	6:31	6:31	6	purple_media_candidate_set_property
FIELD	6:31	6:31	7	purple_media_candidate_set_property
LEAF_NODE	6:31	6:31	8	purple_media_candidate_set_property
LEAF_NODE	6:66	6:66	4	;
EXPR_STATEMENT	7:1	7:66	3	gobject_class -> get_property = purple_media_candidate_get_property ;
EXPR	7:1	7:1	4	gobject_class -> get_property = purple_media_candidate_get_property
ASSIGN	7:1	7:31	5	gobject_class -> get_property = purple_media_candidate_get_property
LVAL	7:1	7:1	6	gobject_class -> get_property
FIELD	7:1	7:16	7	gobject_class -> get_property
LEAF_NODE	7:1	7:1	8	gobject_class
LEAF_NODE	7:14	7:14	8	->
LEAF_NODE	7:16	7:16	8	get_property
ASSIGN_OP	7:29	7:29	6	=
LEAF_NODE	7:29	7:29	7	=
RVAL	7:31	7:31	6	purple_media_candidate_get_property
FIELD	7:31	7:31	7	purple_media_candidate_get_property
LEAF_NODE	7:31	7:31	8	purple_media_candidate_get_property
LEAF_NODE	7:66	7:66	4	;
EXPR_STATEMENT	8:1	13:22	3	g_object_class_install_property ( gobject_class , PROP_FOUNDATION , g_param_spec_string ( "foundation" , "Foundation" , "The foundation of the candidate." , NULL , G_PARAM_READWRITE ) ) ;
EXPR	8:1	8:1	4	g_object_class_install_property ( gobject_class , PROP_FOUNDATION , g_param_spec_string ( "foundation" , "Foundation" , "The foundation of the candidate." , NULL , G_PARAM_READWRITE ) )
FUNCTION_CALL	8:1	13:21	5	g_object_class_install_property ( gobject_class , PROP_FOUNDATION , g_param_spec_string ( "foundation" , "Foundation" , "The foundation of the candidate." , NULL , G_PARAM_READWRITE ) )
CALLEE	8:1	8:1	6	g_object_class_install_property
LEAF_NODE	8:1	8:1	7	g_object_class_install_property
LEAF_NODE	8:32	8:32	6	(
ARGUMENT	8:33	8:33	6	gobject_class
FIELD	8:33	8:33	7	gobject_class
LEAF_NODE	8:33	8:33	8	gobject_class
LEAF_NODE	8:46	8:46	6	,
ARGUMENT	8:48	8:48	6	PROP_FOUNDATION
FIELD	8:48	8:48	7	PROP_FOUNDATION
LEAF_NODE	8:48	8:48	8	PROP_FOUNDATION
LEAF_NODE	8:63	8:63	6	,
ARGUMENT	9:3	9:3	6	g_param_spec_string ( "foundation" , "Foundation" , "The foundation of the candidate." , NULL , G_PARAM_READWRITE )
FUNCTION_CALL	9:3	13:20	7	g_param_spec_string ( "foundation" , "Foundation" , "The foundation of the candidate." , NULL , G_PARAM_READWRITE )
CALLEE	9:3	9:3	8	g_param_spec_string
LEAF_NODE	9:3	9:3	9	g_param_spec_string
LEAF_NODE	9:22	9:22	8	(
ARGUMENT	9:23	9:23	8	"foundation"
FIELD	9:23	9:23	9	"foundation"
LEAF_NODE	9:23	9:23	10	"foundation"
LEAF_NODE	9:35	9:35	8	,
ARGUMENT	10:3	10:3	8	"Foundation"
FIELD	10:3	10:3	9	"Foundation"
LEAF_NODE	10:3	10:3	10	"Foundation"
LEAF_NODE	10:15	10:15	8	,
ARGUMENT	11:3	11:3	8	"The foundation of the candidate."
FIELD	11:3	11:3	9	"The foundation of the candidate."
LEAF_NODE	11:3	11:3	10	"The foundation of the candidate."
LEAF_NODE	11:37	11:37	8	,
ARGUMENT	12:3	12:3	8	NULL
FIELD	12:3	12:3	9	NULL
LEAF_NODE	12:3	12:3	10	NULL
LEAF_NODE	12:7	12:7	8	,
ARGUMENT	13:3	13:3	8	G_PARAM_READWRITE
FIELD	13:3	13:3	9	G_PARAM_READWRITE
LEAF_NODE	13:3	13:3	10	G_PARAM_READWRITE
LEAF_NODE	13:20	13:20	8	)
LEAF_NODE	13:21	13:21	6	)
LEAF_NODE	13:22	13:22	4	;
EXPR_STATEMENT	14:1	19:22	3	g_object_class_install_property ( gobject_class , PROP_COMPONENT_ID , g_param_spec_uint ( "component-id" , "Component ID" , "The component id of the candidate." , 0 , G_MAXUINT , 0 , G_PARAM_READWRITE ) ) ;
EXPR	14:1	14:1	4	g_object_class_install_property ( gobject_class , PROP_COMPONENT_ID , g_param_spec_uint ( "component-id" , "Component ID" , "The component id of the candidate." , 0 , G_MAXUINT , 0 , G_PARAM_READWRITE ) )
FUNCTION_CALL	14:1	19:21	5	g_object_class_install_property ( gobject_class , PROP_COMPONENT_ID , g_param_spec_uint ( "component-id" , "Component ID" , "The component id of the candidate." , 0 , G_MAXUINT , 0 , G_PARAM_READWRITE ) )
CALLEE	14:1	14:1	6	g_object_class_install_property
LEAF_NODE	14:1	14:1	7	g_object_class_install_property
LEAF_NODE	14:32	14:32	6	(
ARGUMENT	14:33	14:33	6	gobject_class
FIELD	14:33	14:33	7	gobject_class
LEAF_NODE	14:33	14:33	8	gobject_class
LEAF_NODE	14:46	14:46	6	,
ARGUMENT	14:48	14:48	6	PROP_COMPONENT_ID
FIELD	14:48	14:48	7	PROP_COMPONENT_ID
LEAF_NODE	14:48	14:48	8	PROP_COMPONENT_ID
LEAF_NODE	14:65	14:65	6	,
ARGUMENT	15:3	15:3	6	g_param_spec_uint ( "component-id" , "Component ID" , "The component id of the candidate." , 0 , G_MAXUINT , 0 , G_PARAM_READWRITE )
FUNCTION_CALL	15:3	19:20	7	g_param_spec_uint ( "component-id" , "Component ID" , "The component id of the candidate." , 0 , G_MAXUINT , 0 , G_PARAM_READWRITE )
CALLEE	15:3	15:3	8	g_param_spec_uint
LEAF_NODE	15:3	15:3	9	g_param_spec_uint
LEAF_NODE	15:20	15:20	8	(
ARGUMENT	15:21	15:21	8	"component-id"
FIELD	15:21	15:21	9	"component-id"
LEAF_NODE	15:21	15:21	10	"component-id"
LEAF_NODE	15:35	15:35	8	,
ARGUMENT	16:3	16:3	8	"Component ID"
FIELD	16:3	16:3	9	"Component ID"
LEAF_NODE	16:3	16:3	10	"Component ID"
LEAF_NODE	16:17	16:17	8	,
ARGUMENT	17:3	17:3	8	"The component id of the candidate."
FIELD	17:3	17:3	9	"The component id of the candidate."
LEAF_NODE	17:3	17:3	10	"The component id of the candidate."
LEAF_NODE	17:39	17:39	8	,
ARGUMENT	18:3	18:3	8	0
FIELD	18:3	18:3	9	0
LEAF_NODE	18:3	18:3	10	0
LEAF_NODE	18:4	18:4	8	,
ARGUMENT	18:6	18:6	8	G_MAXUINT
FIELD	18:6	18:6	9	G_MAXUINT
LEAF_NODE	18:6	18:6	10	G_MAXUINT
LEAF_NODE	18:15	18:15	8	,
ARGUMENT	18:17	18:17	8	0
FIELD	18:17	18:17	9	0
LEAF_NODE	18:17	18:17	10	0
LEAF_NODE	18:18	18:18	8	,
ARGUMENT	19:3	19:3	8	G_PARAM_READWRITE
FIELD	19:3	19:3	9	G_PARAM_READWRITE
LEAF_NODE	19:3	19:3	10	G_PARAM_READWRITE
LEAF_NODE	19:20	19:20	8	)
LEAF_NODE	19:21	19:21	6	)
LEAF_NODE	19:22	19:22	4	;
EXPR_STATEMENT	20:1	25:22	3	g_object_class_install_property ( gobject_class , PROP_IP , g_param_spec_string ( "ip" , "IP Address" , "The IP address of the candidate." , NULL , G_PARAM_READWRITE ) ) ;
EXPR	20:1	20:1	4	g_object_class_install_property ( gobject_class , PROP_IP , g_param_spec_string ( "ip" , "IP Address" , "The IP address of the candidate." , NULL , G_PARAM_READWRITE ) )
FUNCTION_CALL	20:1	25:21	5	g_object_class_install_property ( gobject_class , PROP_IP , g_param_spec_string ( "ip" , "IP Address" , "The IP address of the candidate." , NULL , G_PARAM_READWRITE ) )
CALLEE	20:1	20:1	6	g_object_class_install_property
LEAF_NODE	20:1	20:1	7	g_object_class_install_property
LEAF_NODE	20:32	20:32	6	(
ARGUMENT	20:33	20:33	6	gobject_class
FIELD	20:33	20:33	7	gobject_class
LEAF_NODE	20:33	20:33	8	gobject_class
LEAF_NODE	20:46	20:46	6	,
ARGUMENT	20:48	20:48	6	PROP_IP
FIELD	20:48	20:48	7	PROP_IP
LEAF_NODE	20:48	20:48	8	PROP_IP
LEAF_NODE	20:55	20:55	6	,
ARGUMENT	21:3	21:3	6	g_param_spec_string ( "ip" , "IP Address" , "The IP address of the candidate." , NULL , G_PARAM_READWRITE )
FUNCTION_CALL	21:3	25:20	7	g_param_spec_string ( "ip" , "IP Address" , "The IP address of the candidate." , NULL , G_PARAM_READWRITE )
CALLEE	21:3	21:3	8	g_param_spec_string
LEAF_NODE	21:3	21:3	9	g_param_spec_string
LEAF_NODE	21:22	21:22	8	(
ARGUMENT	21:23	21:23	8	"ip"
FIELD	21:23	21:23	9	"ip"
LEAF_NODE	21:23	21:23	10	"ip"
LEAF_NODE	21:27	21:27	8	,
ARGUMENT	22:3	22:3	8	"IP Address"
FIELD	22:3	22:3	9	"IP Address"
LEAF_NODE	22:3	22:3	10	"IP Address"
LEAF_NODE	22:15	22:15	8	,
ARGUMENT	23:3	23:3	8	"The IP address of the candidate."
FIELD	23:3	23:3	9	"The IP address of the candidate."
LEAF_NODE	23:3	23:3	10	"The IP address of the candidate."
LEAF_NODE	23:37	23:37	8	,
ARGUMENT	24:3	24:3	8	NULL
FIELD	24:3	24:3	9	NULL
LEAF_NODE	24:3	24:3	10	NULL
LEAF_NODE	24:7	24:7	8	,
ARGUMENT	25:3	25:3	8	G_PARAM_READWRITE
FIELD	25:3	25:3	9	G_PARAM_READWRITE
LEAF_NODE	25:3	25:3	10	G_PARAM_READWRITE
LEAF_NODE	25:20	25:20	8	)
LEAF_NODE	25:21	25:21	6	)
LEAF_NODE	25:22	25:22	4	;
EXPR_STATEMENT	26:1	31:22	3	g_object_class_install_property ( gobject_class , PROP_PORT , g_param_spec_uint ( "port" , "Port" , "The port of the candidate." , 0 , G_MAXUINT16 , 0 , G_PARAM_READWRITE ) ) ;
EXPR	26:1	26:1	4	g_object_class_install_property ( gobject_class , PROP_PORT , g_param_spec_uint ( "port" , "Port" , "The port of the candidate." , 0 , G_MAXUINT16 , 0 , G_PARAM_READWRITE ) )
FUNCTION_CALL	26:1	31:21	5	g_object_class_install_property ( gobject_class , PROP_PORT , g_param_spec_uint ( "port" , "Port" , "The port of the candidate." , 0 , G_MAXUINT16 , 0 , G_PARAM_READWRITE ) )
CALLEE	26:1	26:1	6	g_object_class_install_property
LEAF_NODE	26:1	26:1	7	g_object_class_install_property
LEAF_NODE	26:32	26:32	6	(
ARGUMENT	26:33	26:33	6	gobject_class
FIELD	26:33	26:33	7	gobject_class
LEAF_NODE	26:33	26:33	8	gobject_class
LEAF_NODE	26:46	26:46	6	,
ARGUMENT	26:48	26:48	6	PROP_PORT
FIELD	26:48	26:48	7	PROP_PORT
LEAF_NODE	26:48	26:48	8	PROP_PORT
LEAF_NODE	26:57	26:57	6	,
ARGUMENT	27:3	27:3	6	g_param_spec_uint ( "port" , "Port" , "The port of the candidate." , 0 , G_MAXUINT16 , 0 , G_PARAM_READWRITE )
FUNCTION_CALL	27:3	31:20	7	g_param_spec_uint ( "port" , "Port" , "The port of the candidate." , 0 , G_MAXUINT16 , 0 , G_PARAM_READWRITE )
CALLEE	27:3	27:3	8	g_param_spec_uint
LEAF_NODE	27:3	27:3	9	g_param_spec_uint
LEAF_NODE	27:20	27:20	8	(
ARGUMENT	27:21	27:21	8	"port"
FIELD	27:21	27:21	9	"port"
LEAF_NODE	27:21	27:21	10	"port"
LEAF_NODE	27:27	27:27	8	,
ARGUMENT	28:3	28:3	8	"Port"
FIELD	28:3	28:3	9	"Port"
LEAF_NODE	28:3	28:3	10	"Port"
LEAF_NODE	28:9	28:9	8	,
ARGUMENT	29:3	29:3	8	"The port of the candidate."
FIELD	29:3	29:3	9	"The port of the candidate."
LEAF_NODE	29:3	29:3	10	"The port of the candidate."
LEAF_NODE	29:31	29:31	8	,
ARGUMENT	30:3	30:3	8	0
FIELD	30:3	30:3	9	0
LEAF_NODE	30:3	30:3	10	0
LEAF_NODE	30:4	30:4	8	,
ARGUMENT	30:6	30:6	8	G_MAXUINT16
FIELD	30:6	30:6	9	G_MAXUINT16
LEAF_NODE	30:6	30:6	10	G_MAXUINT16
LEAF_NODE	30:17	30:17	8	,
ARGUMENT	30:19	30:19	8	0
FIELD	30:19	30:19	9	0
LEAF_NODE	30:19	30:19	10	0
LEAF_NODE	30:20	30:20	8	,
ARGUMENT	31:3	31:3	8	G_PARAM_READWRITE
FIELD	31:3	31:3	9	G_PARAM_READWRITE
LEAF_NODE	31:3	31:3	10	G_PARAM_READWRITE
LEAF_NODE	31:20	31:20	8	)
LEAF_NODE	31:21	31:21	6	)
LEAF_NODE	31:22	31:22	4	;
EXPR_STATEMENT	32:1	37:22	3	g_object_class_install_property ( gobject_class , PROP_BASE_IP , g_param_spec_string ( "base-ip" , "Base IP" , "The internal IP address of the candidate." , NULL , G_PARAM_READWRITE ) ) ;
EXPR	32:1	32:1	4	g_object_class_install_property ( gobject_class , PROP_BASE_IP , g_param_spec_string ( "base-ip" , "Base IP" , "The internal IP address of the candidate." , NULL , G_PARAM_READWRITE ) )
FUNCTION_CALL	32:1	37:21	5	g_object_class_install_property ( gobject_class , PROP_BASE_IP , g_param_spec_string ( "base-ip" , "Base IP" , "The internal IP address of the candidate." , NULL , G_PARAM_READWRITE ) )
CALLEE	32:1	32:1	6	g_object_class_install_property
LEAF_NODE	32:1	32:1	7	g_object_class_install_property
LEAF_NODE	32:32	32:32	6	(
ARGUMENT	32:33	32:33	6	gobject_class
FIELD	32:33	32:33	7	gobject_class
LEAF_NODE	32:33	32:33	8	gobject_class
LEAF_NODE	32:46	32:46	6	,
ARGUMENT	32:48	32:48	6	PROP_BASE_IP
FIELD	32:48	32:48	7	PROP_BASE_IP
LEAF_NODE	32:48	32:48	8	PROP_BASE_IP
LEAF_NODE	32:60	32:60	6	,
ARGUMENT	33:3	33:3	6	g_param_spec_string ( "base-ip" , "Base IP" , "The internal IP address of the candidate." , NULL , G_PARAM_READWRITE )
FUNCTION_CALL	33:3	37:20	7	g_param_spec_string ( "base-ip" , "Base IP" , "The internal IP address of the candidate." , NULL , G_PARAM_READWRITE )
CALLEE	33:3	33:3	8	g_param_spec_string
LEAF_NODE	33:3	33:3	9	g_param_spec_string
LEAF_NODE	33:22	33:22	8	(
ARGUMENT	33:23	33:23	8	"base-ip"
FIELD	33:23	33:23	9	"base-ip"
LEAF_NODE	33:23	33:23	10	"base-ip"
LEAF_NODE	33:32	33:32	8	,
ARGUMENT	34:3	34:3	8	"Base IP"
FIELD	34:3	34:3	9	"Base IP"
LEAF_NODE	34:3	34:3	10	"Base IP"
LEAF_NODE	34:12	34:12	8	,
ARGUMENT	35:3	35:3	8	"The internal IP address of the candidate."
FIELD	35:3	35:3	9	"The internal IP address of the candidate."
LEAF_NODE	35:3	35:3	10	"The internal IP address of the candidate."
LEAF_NODE	35:46	35:46	8	,
ARGUMENT	36:3	36:3	8	NULL
FIELD	36:3	36:3	9	NULL
LEAF_NODE	36:3	36:3	10	NULL
LEAF_NODE	36:7	36:7	8	,
ARGUMENT	37:3	37:3	8	G_PARAM_READWRITE
FIELD	37:3	37:3	9	G_PARAM_READWRITE
LEAF_NODE	37:3	37:3	10	G_PARAM_READWRITE
LEAF_NODE	37:20	37:20	8	)
LEAF_NODE	37:21	37:21	6	)
LEAF_NODE	37:22	37:22	4	;
EXPR_STATEMENT	38:1	43:22	3	g_object_class_install_property ( gobject_class , PROP_BASE_PORT , g_param_spec_uint ( "base-port" , "Base Port" , "The internal port of the candidate." , 0 , G_MAXUINT16 , 0 , G_PARAM_READWRITE ) ) ;
EXPR	38:1	38:1	4	g_object_class_install_property ( gobject_class , PROP_BASE_PORT , g_param_spec_uint ( "base-port" , "Base Port" , "The internal port of the candidate." , 0 , G_MAXUINT16 , 0 , G_PARAM_READWRITE ) )
FUNCTION_CALL	38:1	43:21	5	g_object_class_install_property ( gobject_class , PROP_BASE_PORT , g_param_spec_uint ( "base-port" , "Base Port" , "The internal port of the candidate." , 0 , G_MAXUINT16 , 0 , G_PARAM_READWRITE ) )
CALLEE	38:1	38:1	6	g_object_class_install_property
LEAF_NODE	38:1	38:1	7	g_object_class_install_property
LEAF_NODE	38:32	38:32	6	(
ARGUMENT	38:33	38:33	6	gobject_class
FIELD	38:33	38:33	7	gobject_class
LEAF_NODE	38:33	38:33	8	gobject_class
LEAF_NODE	38:46	38:46	6	,
ARGUMENT	38:48	38:48	6	PROP_BASE_PORT
FIELD	38:48	38:48	7	PROP_BASE_PORT
LEAF_NODE	38:48	38:48	8	PROP_BASE_PORT
LEAF_NODE	38:62	38:62	6	,
ARGUMENT	39:3	39:3	6	g_param_spec_uint ( "base-port" , "Base Port" , "The internal port of the candidate." , 0 , G_MAXUINT16 , 0 , G_PARAM_READWRITE )
FUNCTION_CALL	39:3	43:20	7	g_param_spec_uint ( "base-port" , "Base Port" , "The internal port of the candidate." , 0 , G_MAXUINT16 , 0 , G_PARAM_READWRITE )
CALLEE	39:3	39:3	8	g_param_spec_uint
LEAF_NODE	39:3	39:3	9	g_param_spec_uint
LEAF_NODE	39:20	39:20	8	(
ARGUMENT	39:21	39:21	8	"base-port"
FIELD	39:21	39:21	9	"base-port"
LEAF_NODE	39:21	39:21	10	"base-port"
LEAF_NODE	39:32	39:32	8	,
ARGUMENT	40:3	40:3	8	"Base Port"
FIELD	40:3	40:3	9	"Base Port"
LEAF_NODE	40:3	40:3	10	"Base Port"
LEAF_NODE	40:14	40:14	8	,
ARGUMENT	41:3	41:3	8	"The internal port of the candidate."
FIELD	41:3	41:3	9	"The internal port of the candidate."
LEAF_NODE	41:3	41:3	10	"The internal port of the candidate."
LEAF_NODE	41:40	41:40	8	,
ARGUMENT	42:3	42:3	8	0
FIELD	42:3	42:3	9	0
LEAF_NODE	42:3	42:3	10	0
LEAF_NODE	42:4	42:4	8	,
ARGUMENT	42:6	42:6	8	G_MAXUINT16
FIELD	42:6	42:6	9	G_MAXUINT16
LEAF_NODE	42:6	42:6	10	G_MAXUINT16
LEAF_NODE	42:17	42:17	8	,
ARGUMENT	42:19	42:19	8	0
FIELD	42:19	42:19	9	0
LEAF_NODE	42:19	42:19	10	0
LEAF_NODE	42:20	42:20	8	,
ARGUMENT	43:3	43:3	8	G_PARAM_READWRITE
FIELD	43:3	43:3	9	G_PARAM_READWRITE
LEAF_NODE	43:3	43:3	10	G_PARAM_READWRITE
LEAF_NODE	43:20	43:20	8	)
LEAF_NODE	43:21	43:21	6	)
LEAF_NODE	43:22	43:22	4	;
EXPR_STATEMENT	44:1	50:22	3	g_object_class_install_property ( gobject_class , PROP_PROTOCOL , g_param_spec_enum ( "protocol" , "Protocol" , "The protocol of the candidate." , PURPLE_TYPE_MEDIA_NETWORK_PROTOCOL , PURPLE_MEDIA_NETWORK_PROTOCOL_UDP , G_PARAM_READWRITE ) ) ;
EXPR	44:1	44:1	4	g_object_class_install_property ( gobject_class , PROP_PROTOCOL , g_param_spec_enum ( "protocol" , "Protocol" , "The protocol of the candidate." , PURPLE_TYPE_MEDIA_NETWORK_PROTOCOL , PURPLE_MEDIA_NETWORK_PROTOCOL_UDP , G_PARAM_READWRITE ) )
FUNCTION_CALL	44:1	50:21	5	g_object_class_install_property ( gobject_class , PROP_PROTOCOL , g_param_spec_enum ( "protocol" , "Protocol" , "The protocol of the candidate." , PURPLE_TYPE_MEDIA_NETWORK_PROTOCOL , PURPLE_MEDIA_NETWORK_PROTOCOL_UDP , G_PARAM_READWRITE ) )
CALLEE	44:1	44:1	6	g_object_class_install_property
LEAF_NODE	44:1	44:1	7	g_object_class_install_property
LEAF_NODE	44:32	44:32	6	(
ARGUMENT	44:33	44:33	6	gobject_class
FIELD	44:33	44:33	7	gobject_class
LEAF_NODE	44:33	44:33	8	gobject_class
LEAF_NODE	44:46	44:46	6	,
ARGUMENT	44:48	44:48	6	PROP_PROTOCOL
FIELD	44:48	44:48	7	PROP_PROTOCOL
LEAF_NODE	44:48	44:48	8	PROP_PROTOCOL
LEAF_NODE	44:61	44:61	6	,
ARGUMENT	45:3	45:3	6	g_param_spec_enum ( "protocol" , "Protocol" , "The protocol of the candidate." , PURPLE_TYPE_MEDIA_NETWORK_PROTOCOL , PURPLE_MEDIA_NETWORK_PROTOCOL_UDP , G_PARAM_READWRITE )
FUNCTION_CALL	45:3	50:20	7	g_param_spec_enum ( "protocol" , "Protocol" , "The protocol of the candidate." , PURPLE_TYPE_MEDIA_NETWORK_PROTOCOL , PURPLE_MEDIA_NETWORK_PROTOCOL_UDP , G_PARAM_READWRITE )
CALLEE	45:3	45:3	8	g_param_spec_enum
LEAF_NODE	45:3	45:3	9	g_param_spec_enum
LEAF_NODE	45:20	45:20	8	(
ARGUMENT	45:21	45:21	8	"protocol"
FIELD	45:21	45:21	9	"protocol"
LEAF_NODE	45:21	45:21	10	"protocol"
LEAF_NODE	45:31	45:31	8	,
ARGUMENT	46:3	46:3	8	"Protocol"
FIELD	46:3	46:3	9	"Protocol"
LEAF_NODE	46:3	46:3	10	"Protocol"
LEAF_NODE	46:13	46:13	8	,
ARGUMENT	47:3	47:3	8	"The protocol of the candidate."
FIELD	47:3	47:3	9	"The protocol of the candidate."
LEAF_NODE	47:3	47:3	10	"The protocol of the candidate."
LEAF_NODE	47:35	47:35	8	,
ARGUMENT	48:3	48:3	8	PURPLE_TYPE_MEDIA_NETWORK_PROTOCOL
FIELD	48:3	48:3	9	PURPLE_TYPE_MEDIA_NETWORK_PROTOCOL
LEAF_NODE	48:3	48:3	10	PURPLE_TYPE_MEDIA_NETWORK_PROTOCOL
LEAF_NODE	48:37	48:37	8	,
ARGUMENT	49:3	49:3	8	PURPLE_MEDIA_NETWORK_PROTOCOL_UDP
FIELD	49:3	49:3	9	PURPLE_MEDIA_NETWORK_PROTOCOL_UDP
LEAF_NODE	49:3	49:3	10	PURPLE_MEDIA_NETWORK_PROTOCOL_UDP
LEAF_NODE	49:36	49:36	8	,
ARGUMENT	50:3	50:3	8	G_PARAM_READWRITE
FIELD	50:3	50:3	9	G_PARAM_READWRITE
LEAF_NODE	50:3	50:3	10	G_PARAM_READWRITE
LEAF_NODE	50:20	50:20	8	)
LEAF_NODE	50:21	50:21	6	)
LEAF_NODE	50:22	50:22	4	;
EXPR_STATEMENT	51:1	56:22	3	g_object_class_install_property ( gobject_class , PROP_PRIORITY , g_param_spec_uint ( "priority" , "Priority" , "The priority of the candidate." , 0 , G_MAXUINT32 , 0 , G_PARAM_READWRITE ) ) ;
EXPR	51:1	51:1	4	g_object_class_install_property ( gobject_class , PROP_PRIORITY , g_param_spec_uint ( "priority" , "Priority" , "The priority of the candidate." , 0 , G_MAXUINT32 , 0 , G_PARAM_READWRITE ) )
FUNCTION_CALL	51:1	56:21	5	g_object_class_install_property ( gobject_class , PROP_PRIORITY , g_param_spec_uint ( "priority" , "Priority" , "The priority of the candidate." , 0 , G_MAXUINT32 , 0 , G_PARAM_READWRITE ) )
CALLEE	51:1	51:1	6	g_object_class_install_property
LEAF_NODE	51:1	51:1	7	g_object_class_install_property
LEAF_NODE	51:32	51:32	6	(
ARGUMENT	51:33	51:33	6	gobject_class
FIELD	51:33	51:33	7	gobject_class
LEAF_NODE	51:33	51:33	8	gobject_class
LEAF_NODE	51:46	51:46	6	,
ARGUMENT	51:48	51:48	6	PROP_PRIORITY
FIELD	51:48	51:48	7	PROP_PRIORITY
LEAF_NODE	51:48	51:48	8	PROP_PRIORITY
LEAF_NODE	51:61	51:61	6	,
ARGUMENT	52:3	52:3	6	g_param_spec_uint ( "priority" , "Priority" , "The priority of the candidate." , 0 , G_MAXUINT32 , 0 , G_PARAM_READWRITE )
FUNCTION_CALL	52:3	56:20	7	g_param_spec_uint ( "priority" , "Priority" , "The priority of the candidate." , 0 , G_MAXUINT32 , 0 , G_PARAM_READWRITE )
CALLEE	52:3	52:3	8	g_param_spec_uint
LEAF_NODE	52:3	52:3	9	g_param_spec_uint
LEAF_NODE	52:20	52:20	8	(
ARGUMENT	52:21	52:21	8	"priority"
FIELD	52:21	52:21	9	"priority"
LEAF_NODE	52:21	52:21	10	"priority"
LEAF_NODE	52:31	52:31	8	,
ARGUMENT	53:3	53:3	8	"Priority"
FIELD	53:3	53:3	9	"Priority"
LEAF_NODE	53:3	53:3	10	"Priority"
LEAF_NODE	53:13	53:13	8	,
ARGUMENT	54:3	54:3	8	"The priority of the candidate."
FIELD	54:3	54:3	9	"The priority of the candidate."
LEAF_NODE	54:3	54:3	10	"The priority of the candidate."
LEAF_NODE	54:35	54:35	8	,
ARGUMENT	55:3	55:3	8	0
FIELD	55:3	55:3	9	0
LEAF_NODE	55:3	55:3	10	0
LEAF_NODE	55:4	55:4	8	,
ARGUMENT	55:6	55:6	8	G_MAXUINT32
FIELD	55:6	55:6	9	G_MAXUINT32
LEAF_NODE	55:6	55:6	10	G_MAXUINT32
LEAF_NODE	55:17	55:17	8	,
ARGUMENT	55:19	55:19	8	0
FIELD	55:19	55:19	9	0
LEAF_NODE	55:19	55:19	10	0
LEAF_NODE	55:20	55:20	8	,
ARGUMENT	56:3	56:3	8	G_PARAM_READWRITE
FIELD	56:3	56:3	9	G_PARAM_READWRITE
LEAF_NODE	56:3	56:3	10	G_PARAM_READWRITE
LEAF_NODE	56:20	56:20	8	)
LEAF_NODE	56:21	56:21	6	)
LEAF_NODE	56:22	56:22	4	;
EXPR_STATEMENT	57:1	63:22	3	g_object_class_install_property ( gobject_class , PROP_TYPE , g_param_spec_enum ( "type" , "Type" , "The type of the candidate." , PURPLE_TYPE_MEDIA_CANDIDATE_TYPE , PURPLE_MEDIA_CANDIDATE_TYPE_HOST , G_PARAM_READWRITE ) ) ;
EXPR	57:1	57:1	4	g_object_class_install_property ( gobject_class , PROP_TYPE , g_param_spec_enum ( "type" , "Type" , "The type of the candidate." , PURPLE_TYPE_MEDIA_CANDIDATE_TYPE , PURPLE_MEDIA_CANDIDATE_TYPE_HOST , G_PARAM_READWRITE ) )
FUNCTION_CALL	57:1	63:21	5	g_object_class_install_property ( gobject_class , PROP_TYPE , g_param_spec_enum ( "type" , "Type" , "The type of the candidate." , PURPLE_TYPE_MEDIA_CANDIDATE_TYPE , PURPLE_MEDIA_CANDIDATE_TYPE_HOST , G_PARAM_READWRITE ) )
CALLEE	57:1	57:1	6	g_object_class_install_property
LEAF_NODE	57:1	57:1	7	g_object_class_install_property
LEAF_NODE	57:32	57:32	6	(
ARGUMENT	57:33	57:33	6	gobject_class
FIELD	57:33	57:33	7	gobject_class
LEAF_NODE	57:33	57:33	8	gobject_class
LEAF_NODE	57:46	57:46	6	,
ARGUMENT	57:48	57:48	6	PROP_TYPE
FIELD	57:48	57:48	7	PROP_TYPE
LEAF_NODE	57:48	57:48	8	PROP_TYPE
LEAF_NODE	57:57	57:57	6	,
ARGUMENT	58:3	58:3	6	g_param_spec_enum ( "type" , "Type" , "The type of the candidate." , PURPLE_TYPE_MEDIA_CANDIDATE_TYPE , PURPLE_MEDIA_CANDIDATE_TYPE_HOST , G_PARAM_READWRITE )
FUNCTION_CALL	58:3	63:20	7	g_param_spec_enum ( "type" , "Type" , "The type of the candidate." , PURPLE_TYPE_MEDIA_CANDIDATE_TYPE , PURPLE_MEDIA_CANDIDATE_TYPE_HOST , G_PARAM_READWRITE )
CALLEE	58:3	58:3	8	g_param_spec_enum
LEAF_NODE	58:3	58:3	9	g_param_spec_enum
LEAF_NODE	58:20	58:20	8	(
ARGUMENT	58:21	58:21	8	"type"
FIELD	58:21	58:21	9	"type"
LEAF_NODE	58:21	58:21	10	"type"
LEAF_NODE	58:27	58:27	8	,
ARGUMENT	59:3	59:3	8	"Type"
FIELD	59:3	59:3	9	"Type"
LEAF_NODE	59:3	59:3	10	"Type"
LEAF_NODE	59:9	59:9	8	,
ARGUMENT	60:3	60:3	8	"The type of the candidate."
FIELD	60:3	60:3	9	"The type of the candidate."
LEAF_NODE	60:3	60:3	10	"The type of the candidate."
LEAF_NODE	60:31	60:31	8	,
ARGUMENT	61:3	61:3	8	PURPLE_TYPE_MEDIA_CANDIDATE_TYPE
FIELD	61:3	61:3	9	PURPLE_TYPE_MEDIA_CANDIDATE_TYPE
LEAF_NODE	61:3	61:3	10	PURPLE_TYPE_MEDIA_CANDIDATE_TYPE
LEAF_NODE	61:35	61:35	8	,
ARGUMENT	62:3	62:3	8	PURPLE_MEDIA_CANDIDATE_TYPE_HOST
FIELD	62:3	62:3	9	PURPLE_MEDIA_CANDIDATE_TYPE_HOST
LEAF_NODE	62:3	62:3	10	PURPLE_MEDIA_CANDIDATE_TYPE_HOST
LEAF_NODE	62:35	62:35	8	,
ARGUMENT	63:3	63:3	8	G_PARAM_READWRITE
FIELD	63:3	63:3	9	G_PARAM_READWRITE
LEAF_NODE	63:3	63:3	10	G_PARAM_READWRITE
LEAF_NODE	63:20	63:20	8	)
LEAF_NODE	63:21	63:21	6	)
LEAF_NODE	63:22	63:22	4	;
EXPR_STATEMENT	64:1	69:22	3	g_object_class_install_property ( gobject_class , PROP_USERNAME , g_param_spec_string ( "username" , "Username" , "The username used to connect to the candidate." , NULL , G_PARAM_READWRITE ) ) ;
EXPR	64:1	64:1	4	g_object_class_install_property ( gobject_class , PROP_USERNAME , g_param_spec_string ( "username" , "Username" , "The username used to connect to the candidate." , NULL , G_PARAM_READWRITE ) )
FUNCTION_CALL	64:1	69:21	5	g_object_class_install_property ( gobject_class , PROP_USERNAME , g_param_spec_string ( "username" , "Username" , "The username used to connect to the candidate." , NULL , G_PARAM_READWRITE ) )
CALLEE	64:1	64:1	6	g_object_class_install_property
LEAF_NODE	64:1	64:1	7	g_object_class_install_property
LEAF_NODE	64:32	64:32	6	(
ARGUMENT	64:33	64:33	6	gobject_class
FIELD	64:33	64:33	7	gobject_class
LEAF_NODE	64:33	64:33	8	gobject_class
LEAF_NODE	64:46	64:46	6	,
ARGUMENT	64:48	64:48	6	PROP_USERNAME
FIELD	64:48	64:48	7	PROP_USERNAME
LEAF_NODE	64:48	64:48	8	PROP_USERNAME
LEAF_NODE	64:61	64:61	6	,
ARGUMENT	65:3	65:3	6	g_param_spec_string ( "username" , "Username" , "The username used to connect to the candidate." , NULL , G_PARAM_READWRITE )
FUNCTION_CALL	65:3	69:20	7	g_param_spec_string ( "username" , "Username" , "The username used to connect to the candidate." , NULL , G_PARAM_READWRITE )
CALLEE	65:3	65:3	8	g_param_spec_string
LEAF_NODE	65:3	65:3	9	g_param_spec_string
LEAF_NODE	65:22	65:22	8	(
ARGUMENT	65:23	65:23	8	"username"
FIELD	65:23	65:23	9	"username"
LEAF_NODE	65:23	65:23	10	"username"
LEAF_NODE	65:33	65:33	8	,
ARGUMENT	66:3	66:3	8	"Username"
FIELD	66:3	66:3	9	"Username"
LEAF_NODE	66:3	66:3	10	"Username"
LEAF_NODE	66:13	66:13	8	,
ARGUMENT	67:3	67:3	8	"The username used to connect to the candidate."
FIELD	67:3	67:3	9	"The username used to connect to the candidate."
LEAF_NODE	67:3	67:3	10	"The username used to connect to the candidate."
LEAF_NODE	67:51	67:51	8	,
ARGUMENT	68:3	68:3	8	NULL
FIELD	68:3	68:3	9	NULL
LEAF_NODE	68:3	68:3	10	NULL
LEAF_NODE	68:7	68:7	8	,
ARGUMENT	69:3	69:3	8	G_PARAM_READWRITE
FIELD	69:3	69:3	9	G_PARAM_READWRITE
LEAF_NODE	69:3	69:3	10	G_PARAM_READWRITE
LEAF_NODE	69:20	69:20	8	)
LEAF_NODE	69:21	69:21	6	)
LEAF_NODE	69:22	69:22	4	;
EXPR_STATEMENT	70:1	75:22	3	g_object_class_install_property ( gobject_class , PROP_PASSWORD , g_param_spec_string ( "password" , "Password" , "The password use to connect to the candidate." , NULL , G_PARAM_READWRITE ) ) ;
EXPR	70:1	70:1	4	g_object_class_install_property ( gobject_class , PROP_PASSWORD , g_param_spec_string ( "password" , "Password" , "The password use to connect to the candidate." , NULL , G_PARAM_READWRITE ) )
FUNCTION_CALL	70:1	75:21	5	g_object_class_install_property ( gobject_class , PROP_PASSWORD , g_param_spec_string ( "password" , "Password" , "The password use to connect to the candidate." , NULL , G_PARAM_READWRITE ) )
CALLEE	70:1	70:1	6	g_object_class_install_property
LEAF_NODE	70:1	70:1	7	g_object_class_install_property
LEAF_NODE	70:32	70:32	6	(
ARGUMENT	70:33	70:33	6	gobject_class
FIELD	70:33	70:33	7	gobject_class
LEAF_NODE	70:33	70:33	8	gobject_class
LEAF_NODE	70:46	70:46	6	,
ARGUMENT	70:48	70:48	6	PROP_PASSWORD
FIELD	70:48	70:48	7	PROP_PASSWORD
LEAF_NODE	70:48	70:48	8	PROP_PASSWORD
LEAF_NODE	70:61	70:61	6	,
ARGUMENT	71:3	71:3	6	g_param_spec_string ( "password" , "Password" , "The password use to connect to the candidate." , NULL , G_PARAM_READWRITE )
FUNCTION_CALL	71:3	75:20	7	g_param_spec_string ( "password" , "Password" , "The password use to connect to the candidate." , NULL , G_PARAM_READWRITE )
CALLEE	71:3	71:3	8	g_param_spec_string
LEAF_NODE	71:3	71:3	9	g_param_spec_string
LEAF_NODE	71:22	71:22	8	(
ARGUMENT	71:23	71:23	8	"password"
FIELD	71:23	71:23	9	"password"
LEAF_NODE	71:23	71:23	10	"password"
LEAF_NODE	71:33	71:33	8	,
ARGUMENT	72:3	72:3	8	"Password"
FIELD	72:3	72:3	9	"Password"
LEAF_NODE	72:3	72:3	10	"Password"
LEAF_NODE	72:13	72:13	8	,
ARGUMENT	73:3	73:3	8	"The password use to connect to the candidate."
FIELD	73:3	73:3	9	"The password use to connect to the candidate."
LEAF_NODE	73:3	73:3	10	"The password use to connect to the candidate."
LEAF_NODE	73:50	73:50	8	,
ARGUMENT	74:3	74:3	8	NULL
FIELD	74:3	74:3	9	NULL
LEAF_NODE	74:3	74:3	10	NULL
LEAF_NODE	74:7	74:7	8	,
ARGUMENT	75:3	75:3	8	G_PARAM_READWRITE
FIELD	75:3	75:3	9	G_PARAM_READWRITE
LEAF_NODE	75:3	75:3	10	G_PARAM_READWRITE
LEAF_NODE	75:20	75:20	8	)
LEAF_NODE	75:21	75:21	6	)
LEAF_NODE	75:22	75:22	4	;
EXPR_STATEMENT	76:1	81:22	3	g_object_class_install_property ( gobject_class , PROP_TTL , g_param_spec_uint ( "ttl" , "TTL" , "The TTL of the candidate." , 0 , G_MAXUINT , 0 , G_PARAM_READWRITE ) ) ;
EXPR	76:1	76:1	4	g_object_class_install_property ( gobject_class , PROP_TTL , g_param_spec_uint ( "ttl" , "TTL" , "The TTL of the candidate." , 0 , G_MAXUINT , 0 , G_PARAM_READWRITE ) )
FUNCTION_CALL	76:1	81:21	5	g_object_class_install_property ( gobject_class , PROP_TTL , g_param_spec_uint ( "ttl" , "TTL" , "The TTL of the candidate." , 0 , G_MAXUINT , 0 , G_PARAM_READWRITE ) )
CALLEE	76:1	76:1	6	g_object_class_install_property
LEAF_NODE	76:1	76:1	7	g_object_class_install_property
LEAF_NODE	76:32	76:32	6	(
ARGUMENT	76:33	76:33	6	gobject_class
FIELD	76:33	76:33	7	gobject_class
LEAF_NODE	76:33	76:33	8	gobject_class
LEAF_NODE	76:46	76:46	6	,
ARGUMENT	76:48	76:48	6	PROP_TTL
FIELD	76:48	76:48	7	PROP_TTL
LEAF_NODE	76:48	76:48	8	PROP_TTL
LEAF_NODE	76:56	76:56	6	,
ARGUMENT	77:3	77:3	6	g_param_spec_uint ( "ttl" , "TTL" , "The TTL of the candidate." , 0 , G_MAXUINT , 0 , G_PARAM_READWRITE )
FUNCTION_CALL	77:3	81:20	7	g_param_spec_uint ( "ttl" , "TTL" , "The TTL of the candidate." , 0 , G_MAXUINT , 0 , G_PARAM_READWRITE )
CALLEE	77:3	77:3	8	g_param_spec_uint
LEAF_NODE	77:3	77:3	9	g_param_spec_uint
LEAF_NODE	77:20	77:20	8	(
ARGUMENT	77:21	77:21	8	"ttl"
FIELD	77:21	77:21	9	"ttl"
LEAF_NODE	77:21	77:21	10	"ttl"
LEAF_NODE	77:26	77:26	8	,
ARGUMENT	78:3	78:3	8	"TTL"
FIELD	78:3	78:3	9	"TTL"
LEAF_NODE	78:3	78:3	10	"TTL"
LEAF_NODE	78:8	78:8	8	,
ARGUMENT	79:3	79:3	8	"The TTL of the candidate."
FIELD	79:3	79:3	9	"The TTL of the candidate."
LEAF_NODE	79:3	79:3	10	"The TTL of the candidate."
LEAF_NODE	79:30	79:30	8	,
ARGUMENT	80:3	80:3	8	0
FIELD	80:3	80:3	9	0
LEAF_NODE	80:3	80:3	10	0
LEAF_NODE	80:4	80:4	8	,
ARGUMENT	80:6	80:6	8	G_MAXUINT
FIELD	80:6	80:6	9	G_MAXUINT
LEAF_NODE	80:6	80:6	10	G_MAXUINT
LEAF_NODE	80:15	80:15	8	,
ARGUMENT	80:17	80:17	8	0
FIELD	80:17	80:17	9	0
LEAF_NODE	80:17	80:17	10	0
LEAF_NODE	80:18	80:18	8	,
ARGUMENT	81:3	81:3	8	G_PARAM_READWRITE
FIELD	81:3	81:3	9	G_PARAM_READWRITE
LEAF_NODE	81:3	81:3	10	G_PARAM_READWRITE
LEAF_NODE	81:20	81:20	8	)
LEAF_NODE	81:21	81:21	6	)
LEAF_NODE	81:22	81:22	4	;
EXPR_STATEMENT	82:1	82:69	3	g_type_class_add_private ( klass , sizeof ( PurpleMediaCandidatePrivate ) ) ;
EXPR	82:1	82:1	4	g_type_class_add_private ( klass , sizeof ( PurpleMediaCandidatePrivate ) )
FUNCTION_CALL	82:1	82:68	5	g_type_class_add_private ( klass , sizeof ( PurpleMediaCandidatePrivate ) )
CALLEE	82:1	82:1	6	g_type_class_add_private
LEAF_NODE	82:1	82:1	7	g_type_class_add_private
LEAF_NODE	82:25	82:25	6	(
ARGUMENT	82:26	82:26	6	klass
FIELD	82:26	82:26	7	klass
LEAF_NODE	82:26	82:26	8	klass
LEAF_NODE	82:31	82:31	6	,
ARGUMENT	82:33	82:33	6	sizeof ( PurpleMediaCandidatePrivate )
FUNCTION_CALL	82:33	82:67	7	sizeof ( PurpleMediaCandidatePrivate )
CALLEE	82:33	82:33	8	sizeof
LEAF_NODE	82:33	82:33	9	sizeof
LEAF_NODE	82:39	82:39	8	(
ARGUMENT	82:40	82:40	8	PurpleMediaCandidatePrivate
FIELD	82:40	82:40	9	PurpleMediaCandidatePrivate
LEAF_NODE	82:40	82:40	10	PurpleMediaCandidatePrivate
LEAF_NODE	82:67	82:67	8	)
LEAF_NODE	82:68	82:68	6	)
LEAF_NODE	82:69	82:69	4	;
LEAF_NODE	83:0	83:0	2	}

SOURCE_FILE	3:0	22:0	0	
FUNCTION_DEF	3:0	9:0	1	
RETURN_TYPE	3:0	3:19	2	PurpleConversation *
TYPE_NAME	3:0	3:0	3	PurpleConversation
LEAF_NODE	3:0	3:0	4	PurpleConversation
LEAF_NODE	3:19	3:19	3	*
FUNCTION_NAME	3:20	3:20	2	ggp_confer_find_by_name
LEAF_NODE	3:20	3:20	3	ggp_confer_find_by_name
PARAMETER_LIST	3:43	3:83	2	( PurpleConnection * gc , const gchar * name )
LEAF_NODE	3:43	3:43	3	(
PARAMETER_DECL	3:44	3:62	3	PurpleConnection * gc
TYPE	3:44	3:61	4	PurpleConnection *
TYPE_NAME	3:44	3:44	5	PurpleConnection
LEAF_NODE	3:44	3:44	6	PurpleConnection
POINTER	3:61	3:61	5	*
LEAF_NODE	3:61	3:61	6	*
NAME	3:62	3:62	4	gc
LEAF_NODE	3:62	3:62	5	gc
LEAF_NODE	3:64	3:64	3	,
PARAMETER_DECL	3:66	3:79	3	const gchar * name
TYPE	3:66	3:78	4	const gchar *
TYPE_NAME	3:66	3:72	5	const gchar
LEAF_NODE	3:66	3:66	6	const
LEAF_NODE	3:72	3:72	6	gchar
POINTER	3:78	3:78	5	*
LEAF_NODE	3:78	3:78	6	*
NAME	3:79	3:79	4	name
LEAF_NODE	3:79	3:79	5	name
LEAF_NODE	3:83	3:83	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	7:1	2	
EXPR_STATEMENT	5:1	5:41	3	g_return_val_if_fail ( gc != NULL , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( gc != NULL , NULL )
FUNCTION_CALL	5:1	5:40	5	g_return_val_if_fail ( gc != NULL , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:30	6	gc != NULL
FIELD	5:22	5:22	7	gc
LEAF_NODE	5:22	5:22	8	gc
EQ_OPERATOR	5:27	5:27	7	!=
LEAF_NODE	5:27	5:27	8	!=
FIELD	5:30	5:30	7	NULL
LEAF_NODE	5:30	5:30	8	NULL
LEAF_NODE	5:34	5:34	6	,
ARGUMENT	5:36	5:36	6	NULL
FIELD	5:36	5:36	7	NULL
LEAF_NODE	5:36	5:36	8	NULL
LEAF_NODE	5:40	5:40	6	)
LEAF_NODE	5:41	5:41	4	;
EXPR_STATEMENT	6:1	6:41	3	g_return_val_if_fail ( name != NULL , NULL ) ;
EXPR	6:1	6:1	4	g_return_val_if_fail ( name != NULL , NULL )
FUNCTION_CALL	6:1	6:40	5	g_return_val_if_fail ( name != NULL , NULL )
CALLEE	6:1	6:1	6	g_return_val_if_fail
LEAF_NODE	6:1	6:1	7	g_return_val_if_fail
LEAF_NODE	6:21	6:21	6	(
ARGUMENT	6:22	6:30	6	name != NULL
FIELD	6:22	6:22	7	name
LEAF_NODE	6:22	6:22	8	name
EQ_OPERATOR	6:27	6:27	7	!=
LEAF_NODE	6:27	6:27	8	!=
FIELD	6:30	6:30	7	NULL
LEAF_NODE	6:30	6:30	8	NULL
LEAF_NODE	6:34	6:34	6	,
ARGUMENT	6:36	6:36	6	NULL
FIELD	6:36	6:36	7	NULL
LEAF_NODE	6:36	6:36	8	NULL
LEAF_NODE	6:40	6:40	6	)
LEAF_NODE	6:41	6:41	4	;
JUMP_STATEMENT	7:1	8:37	3	return purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) ) ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) )
EXPR	7:8	7:8	5	purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) )
FUNCTION_CALL	7:8	8:36	6	purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) )
CALLEE	7:8	7:8	7	purple_find_conversation_with_account
LEAF_NODE	7:8	7:8	8	purple_find_conversation_with_account
LEAF_NODE	7:45	7:45	7	(
ARGUMENT	7:46	7:46	7	PURPLE_CONV_TYPE_CHAT
FIELD	7:46	7:46	8	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	7:46	7:46	9	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	7:67	7:67	7	,
ARGUMENT	7:69	7:69	7	name
FIELD	7:69	7:69	8	name
LEAF_NODE	7:69	7:69	9	name
LEAF_NODE	7:73	7:73	7	,
ARGUMENT	8:3	8:3	7	purple_connection_get_account ( gc )
FUNCTION_CALL	8:3	8:35	8	purple_connection_get_account ( gc )
CALLEE	8:3	8:3	9	purple_connection_get_account
LEAF_NODE	8:3	8:3	10	purple_connection_get_account
LEAF_NODE	8:32	8:32	9	(
ARGUMENT	8:33	8:33	9	gc
FIELD	8:33	8:33	10	gc
LEAF_NODE	8:33	8:33	11	gc
LEAF_NODE	8:35	8:35	9	)
LEAF_NODE	8:36	8:36	7	)
LEAF_NODE	8:37	8:37	4	;
LEAF_NODE	9:0	9:0	2	}
FUNCTION_DEF	13:0	19:0	1	
RETURN_TYPE	13:0	13:19	2	PurpleConversation *
TYPE_NAME	13:0	13:0	3	PurpleConversation
LEAF_NODE	13:0	13:0	4	PurpleConversation
LEAF_NODE	13:19	13:19	3	*
FUNCTION_NAME	13:20	13:20	2	ggp_confer_find_by_name
LEAF_NODE	13:20	13:20	3	ggp_confer_find_by_name
PARAMETER_LIST	13:43	13:83	2	( PurpleConnection * gc , const gchar * name )
LEAF_NODE	13:43	13:43	3	(
PARAMETER_DECL	13:44	13:62	3	PurpleConnection * gc
TYPE	13:44	13:61	4	PurpleConnection *
TYPE_NAME	13:44	13:44	5	PurpleConnection
LEAF_NODE	13:44	13:44	6	PurpleConnection
POINTER	13:61	13:61	5	*
LEAF_NODE	13:61	13:61	6	*
NAME	13:62	13:62	4	gc
LEAF_NODE	13:62	13:62	5	gc
LEAF_NODE	13:64	13:64	3	,
PARAMETER_DECL	13:66	13:79	3	const gchar * name
TYPE	13:66	13:78	4	const gchar *
TYPE_NAME	13:66	13:72	5	const gchar
LEAF_NODE	13:66	13:66	6	const
LEAF_NODE	13:72	13:72	6	gchar
POINTER	13:78	13:78	5	*
LEAF_NODE	13:78	13:78	6	*
NAME	13:79	13:79	4	name
LEAF_NODE	13:79	13:79	5	name
LEAF_NODE	13:83	13:83	3	)
LEAF_NODE	14:0	14:0	2	{
STATEMENTS	15:1	17:1	2	
EXPR_STATEMENT	15:1	15:41	3	g_return_val_if_fail ( gc != NULL , NULL ) ;
EXPR	15:1	15:1	4	g_return_val_if_fail ( gc != NULL , NULL )
FUNCTION_CALL	15:1	15:40	5	g_return_val_if_fail ( gc != NULL , NULL )
CALLEE	15:1	15:1	6	g_return_val_if_fail
LEAF_NODE	15:1	15:1	7	g_return_val_if_fail
LEAF_NODE	15:21	15:21	6	(
ARGUMENT	15:22	15:30	6	gc != NULL
FIELD	15:22	15:22	7	gc
LEAF_NODE	15:22	15:22	8	gc
EQ_OPERATOR	15:27	15:27	7	!=
LEAF_NODE	15:27	15:27	8	!=
FIELD	15:30	15:30	7	NULL
LEAF_NODE	15:30	15:30	8	NULL
LEAF_NODE	15:34	15:34	6	,
ARGUMENT	15:36	15:36	6	NULL
FIELD	15:36	15:36	7	NULL
LEAF_NODE	15:36	15:36	8	NULL
LEAF_NODE	15:40	15:40	6	)
LEAF_NODE	15:41	15:41	4	;
EXPR_STATEMENT	16:1	16:41	3	g_return_val_if_fail ( name != NULL , NULL ) ;
EXPR	16:1	16:1	4	g_return_val_if_fail ( name != NULL , NULL )
FUNCTION_CALL	16:1	16:40	5	g_return_val_if_fail ( name != NULL , NULL )
CALLEE	16:1	16:1	6	g_return_val_if_fail
LEAF_NODE	16:1	16:1	7	g_return_val_if_fail
LEAF_NODE	16:21	16:21	6	(
ARGUMENT	16:22	16:30	6	name != NULL
FIELD	16:22	16:22	7	name
LEAF_NODE	16:22	16:22	8	name
EQ_OPERATOR	16:27	16:27	7	!=
LEAF_NODE	16:27	16:27	8	!=
FIELD	16:30	16:30	7	NULL
LEAF_NODE	16:30	16:30	8	NULL
LEAF_NODE	16:34	16:34	6	,
ARGUMENT	16:36	16:36	6	NULL
FIELD	16:36	16:36	7	NULL
LEAF_NODE	16:36	16:36	8	NULL
LEAF_NODE	16:40	16:40	6	)
LEAF_NODE	16:41	16:41	4	;
JUMP_STATEMENT	17:1	18:37	3	return purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) ) ;
KEYWORD	17:1	17:1	4	return
LEAF_NODE	17:1	17:1	5	return
DESTINATION	17:8	17:8	4	purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) )
EXPR	17:8	17:8	5	purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) )
FUNCTION_CALL	17:8	18:36	6	purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) )
CALLEE	17:8	17:8	7	purple_find_conversation_with_account
LEAF_NODE	17:8	17:8	8	purple_find_conversation_with_account
LEAF_NODE	17:45	17:45	7	(
ARGUMENT	17:46	17:46	7	PURPLE_CONV_TYPE_CHAT
FIELD	17:46	17:46	8	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	17:46	17:46	9	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	17:67	17:67	7	,
ARGUMENT	17:69	17:69	7	name
FIELD	17:69	17:69	8	name
LEAF_NODE	17:69	17:69	9	name
LEAF_NODE	17:73	17:73	7	,
ARGUMENT	18:3	18:3	7	purple_connection_get_account ( gc )
FUNCTION_CALL	18:3	18:35	8	purple_connection_get_account ( gc )
CALLEE	18:3	18:3	9	purple_connection_get_account
LEAF_NODE	18:3	18:3	10	purple_connection_get_account
LEAF_NODE	18:32	18:32	9	(
ARGUMENT	18:33	18:33	9	gc
FIELD	18:33	18:33	10	gc
LEAF_NODE	18:33	18:33	11	gc
LEAF_NODE	18:35	18:35	9	)
LEAF_NODE	18:36	18:36	7	)
LEAF_NODE	18:37	18:37	4	;
LEAF_NODE	19:0	19:0	2	}
FUNCTION_DEF	22:0	28:0	1	
RETURN_TYPE	22:0	22:19	2	PurpleConversation *
TYPE_NAME	22:0	22:0	3	PurpleConversation
LEAF_NODE	22:0	22:0	4	PurpleConversation
LEAF_NODE	22:19	22:19	3	*
FUNCTION_NAME	22:20	22:20	2	ggp_confer_find_by_name
LEAF_NODE	22:20	22:20	3	ggp_confer_find_by_name
PARAMETER_LIST	22:43	22:83	2	( PurpleConnection * gc , const gchar * name )
LEAF_NODE	22:43	22:43	3	(
PARAMETER_DECL	22:44	22:62	3	PurpleConnection * gc
TYPE	22:44	22:61	4	PurpleConnection *
TYPE_NAME	22:44	22:44	5	PurpleConnection
LEAF_NODE	22:44	22:44	6	PurpleConnection
POINTER	22:61	22:61	5	*
LEAF_NODE	22:61	22:61	6	*
NAME	22:62	22:62	4	gc
LEAF_NODE	22:62	22:62	5	gc
LEAF_NODE	22:64	22:64	3	,
PARAMETER_DECL	22:66	22:79	3	const gchar * name
TYPE	22:66	22:78	4	const gchar *
TYPE_NAME	22:66	22:72	5	const gchar
LEAF_NODE	22:66	22:66	6	const
LEAF_NODE	22:72	22:72	6	gchar
POINTER	22:78	22:78	5	*
LEAF_NODE	22:78	22:78	6	*
NAME	22:79	22:79	4	name
LEAF_NODE	22:79	22:79	5	name
LEAF_NODE	22:83	22:83	3	)
LEAF_NODE	23:0	23:0	2	{
STATEMENTS	24:1	26:1	2	
EXPR_STATEMENT	24:1	24:41	3	g_return_val_if_fail ( gc != NULL , NULL ) ;
EXPR	24:1	24:1	4	g_return_val_if_fail ( gc != NULL , NULL )
FUNCTION_CALL	24:1	24:40	5	g_return_val_if_fail ( gc != NULL , NULL )
CALLEE	24:1	24:1	6	g_return_val_if_fail
LEAF_NODE	24:1	24:1	7	g_return_val_if_fail
LEAF_NODE	24:21	24:21	6	(
ARGUMENT	24:22	24:30	6	gc != NULL
FIELD	24:22	24:22	7	gc
LEAF_NODE	24:22	24:22	8	gc
EQ_OPERATOR	24:27	24:27	7	!=
LEAF_NODE	24:27	24:27	8	!=
FIELD	24:30	24:30	7	NULL
LEAF_NODE	24:30	24:30	8	NULL
LEAF_NODE	24:34	24:34	6	,
ARGUMENT	24:36	24:36	6	NULL
FIELD	24:36	24:36	7	NULL
LEAF_NODE	24:36	24:36	8	NULL
LEAF_NODE	24:40	24:40	6	)
LEAF_NODE	24:41	24:41	4	;
EXPR_STATEMENT	25:1	25:41	3	g_return_val_if_fail ( name != NULL , NULL ) ;
EXPR	25:1	25:1	4	g_return_val_if_fail ( name != NULL , NULL )
FUNCTION_CALL	25:1	25:40	5	g_return_val_if_fail ( name != NULL , NULL )
CALLEE	25:1	25:1	6	g_return_val_if_fail
LEAF_NODE	25:1	25:1	7	g_return_val_if_fail
LEAF_NODE	25:21	25:21	6	(
ARGUMENT	25:22	25:30	6	name != NULL
FIELD	25:22	25:22	7	name
LEAF_NODE	25:22	25:22	8	name
EQ_OPERATOR	25:27	25:27	7	!=
LEAF_NODE	25:27	25:27	8	!=
FIELD	25:30	25:30	7	NULL
LEAF_NODE	25:30	25:30	8	NULL
LEAF_NODE	25:34	25:34	6	,
ARGUMENT	25:36	25:36	6	NULL
FIELD	25:36	25:36	7	NULL
LEAF_NODE	25:36	25:36	8	NULL
LEAF_NODE	25:40	25:40	6	)
LEAF_NODE	25:41	25:41	4	;
JUMP_STATEMENT	26:1	27:37	3	return purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) ) ;
KEYWORD	26:1	26:1	4	return
LEAF_NODE	26:1	26:1	5	return
DESTINATION	26:8	26:8	4	purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) )
EXPR	26:8	26:8	5	purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) )
FUNCTION_CALL	26:8	27:36	6	purple_find_conversation_with_account ( PURPLE_CONV_TYPE_CHAT , name , purple_connection_get_account ( gc ) )
CALLEE	26:8	26:8	7	purple_find_conversation_with_account
LEAF_NODE	26:8	26:8	8	purple_find_conversation_with_account
LEAF_NODE	26:45	26:45	7	(
ARGUMENT	26:46	26:46	7	PURPLE_CONV_TYPE_CHAT
FIELD	26:46	26:46	8	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	26:46	26:46	9	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	26:67	26:67	7	,
ARGUMENT	26:69	26:69	7	name
FIELD	26:69	26:69	8	name
LEAF_NODE	26:69	26:69	9	name
LEAF_NODE	26:73	26:73	7	,
ARGUMENT	27:3	27:3	7	purple_connection_get_account ( gc )
FUNCTION_CALL	27:3	27:35	8	purple_connection_get_account ( gc )
CALLEE	27:3	27:3	9	purple_connection_get_account
LEAF_NODE	27:3	27:3	10	purple_connection_get_account
LEAF_NODE	27:32	27:32	9	(
ARGUMENT	27:33	27:33	9	gc
FIELD	27:33	27:33	10	gc
LEAF_NODE	27:33	27:33	11	gc
LEAF_NODE	27:35	27:35	9	)
LEAF_NODE	27:36	27:36	7	)
LEAF_NODE	27:37	27:37	4	;
LEAF_NODE	28:0	28:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	12:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	pidgin_log_init
LEAF_NODE	2:5	2:5	3	pidgin_log_init
PARAMETER_LIST	2:20	2:25	2	( void )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:21	3	void
LEAF_NODE	2:21	2:21	4	void
LEAF_NODE	2:25	2:25	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:39	3	void * handle ; handle = pidgin_log_get_handle ( ) ;
VAR_DECL	4:1	4:7	4	void * handle ; handle = pidgin_log_get_handle ( )
TYPE	4:1	4:6	5	void *
TYPE_NAME	4:1	4:1	6	void
LEAF_NODE	4:1	4:1	7	void
POINTER	4:6	4:6	6	*
LEAF_NODE	4:6	4:6	7	*
NAME	4:7	4:7	5	handle
LEAF_NODE	4:7	4:7	6	handle
LEAF_NODE	0:0	0:0	5	;
INIT	4:7	4:7	5	handle = pidgin_log_get_handle ( )
ASSIGN	4:7	4:16	6	handle = pidgin_log_get_handle ( )
LVAL	4:7	4:7	7	handle
NAME	4:7	4:7	8	handle
LEAF_NODE	4:7	4:7	9	handle
ASSIGN_OP	4:14	4:14	7	=
LEAF_NODE	4:14	4:14	8	=
RVAL	4:16	4:16	7	pidgin_log_get_handle ( )
FUNCTION_CALL	4:16	4:38	8	pidgin_log_get_handle ( )
CALLEE	4:16	4:16	9	pidgin_log_get_handle
LEAF_NODE	4:16	4:16	10	pidgin_log_get_handle
LEAF_NODE	4:37	4:37	9	(
LEAF_NODE	4:38	4:38	9	)
LEAF_NODE	4:39	4:39	4	;
EXPR_STATEMENT	5:1	11:57	3	purple_signal_register ( handle , "log-displaying" , purple_marshal_VOID__POINTER_POINTER , NULL , 2 , purple_value_new ( PURPLE_TYPE_BOXED , "PidginLogViewer *" ) , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_LOG ) ) ;
EXPR	5:1	5:1	4	purple_signal_register ( handle , "log-displaying" , purple_marshal_VOID__POINTER_POINTER , NULL , 2 , purple_value_new ( PURPLE_TYPE_BOXED , "PidginLogViewer *" ) , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_LOG ) )
FUNCTION_CALL	5:1	11:56	5	purple_signal_register ( handle , "log-displaying" , purple_marshal_VOID__POINTER_POINTER , NULL , 2 , purple_value_new ( PURPLE_TYPE_BOXED , "PidginLogViewer *" ) , purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_LOG ) )
CALLEE	5:1	5:1	6	purple_signal_register
LEAF_NODE	5:1	5:1	7	purple_signal_register
LEAF_NODE	5:23	5:23	6	(
ARGUMENT	5:24	5:24	6	handle
FIELD	5:24	5:24	7	handle
LEAF_NODE	5:24	5:24	8	handle
LEAF_NODE	5:30	5:30	6	,
ARGUMENT	5:32	5:32	6	"log-displaying"
FIELD	5:32	5:32	7	"log-displaying"
LEAF_NODE	5:32	5:32	8	"log-displaying"
LEAF_NODE	5:48	5:48	6	,
ARGUMENT	6:22	6:22	6	purple_marshal_VOID__POINTER_POINTER
FIELD	6:22	6:22	7	purple_marshal_VOID__POINTER_POINTER
LEAF_NODE	6:22	6:22	8	purple_marshal_VOID__POINTER_POINTER
LEAF_NODE	6:58	6:58	6	,
ARGUMENT	7:22	7:22	6	NULL
FIELD	7:22	7:22	7	NULL
LEAF_NODE	7:22	7:22	8	NULL
LEAF_NODE	7:26	7:26	6	,
ARGUMENT	7:28	7:28	6	2
FIELD	7:28	7:28	7	2
LEAF_NODE	7:28	7:28	8	2
LEAF_NODE	7:29	7:29	6	,
ARGUMENT	8:22	8:22	6	purple_value_new ( PURPLE_TYPE_BOXED , "PidginLogViewer *" )
FUNCTION_CALL	8:22	9:56	7	purple_value_new ( PURPLE_TYPE_BOXED , "PidginLogViewer *" )
CALLEE	8:22	8:22	8	purple_value_new
LEAF_NODE	8:22	8:22	9	purple_value_new
LEAF_NODE	8:38	8:38	8	(
ARGUMENT	8:39	8:39	8	PURPLE_TYPE_BOXED
FIELD	8:39	8:39	9	PURPLE_TYPE_BOXED
LEAF_NODE	8:39	8:39	10	PURPLE_TYPE_BOXED
LEAF_NODE	8:56	8:56	8	,
ARGUMENT	9:37	9:37	8	"PidginLogViewer *"
FIELD	9:37	9:37	9	"PidginLogViewer *"
LEAF_NODE	9:37	9:37	10	"PidginLogViewer *"
LEAF_NODE	9:56	9:56	8	)
LEAF_NODE	9:57	9:57	6	,
ARGUMENT	10:22	10:22	6	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_LOG )
FUNCTION_CALL	10:22	11:55	7	purple_value_new ( PURPLE_TYPE_SUBTYPE , PURPLE_SUBTYPE_LOG )
CALLEE	10:22	10:22	8	purple_value_new
LEAF_NODE	10:22	10:22	9	purple_value_new
LEAF_NODE	10:38	10:38	8	(
ARGUMENT	10:39	10:39	8	PURPLE_TYPE_SUBTYPE
FIELD	10:39	10:39	9	PURPLE_TYPE_SUBTYPE
LEAF_NODE	10:39	10:39	10	PURPLE_TYPE_SUBTYPE
LEAF_NODE	10:58	10:58	8	,
ARGUMENT	11:37	11:37	8	PURPLE_SUBTYPE_LOG
FIELD	11:37	11:37	9	PURPLE_SUBTYPE_LOG
LEAF_NODE	11:37	11:37	10	PURPLE_SUBTYPE_LOG
LEAF_NODE	11:55	11:55	8	)
LEAF_NODE	11:56	11:56	6	)
LEAF_NODE	11:57	11:57	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	10:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	serv_chat_leave
LEAF_NODE	2:5	2:5	3	serv_chat_leave
PARAMETER_LIST	2:20	2:49	2	( PurpleConnection * gc , int id )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:39	3	PurpleConnection * gc
TYPE	2:21	2:38	4	PurpleConnection *
TYPE_NAME	2:21	2:21	5	PurpleConnection
LEAF_NODE	2:21	2:21	6	PurpleConnection
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	gc
LEAF_NODE	2:39	2:39	5	gc
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:47	3	int id
TYPE	2:43	2:43	4	int
TYPE_NAME	2:43	2:43	5	int
LEAF_NODE	2:43	2:43	6	int
NAME	2:47	2:47	4	id
LEAF_NODE	2:47	2:47	5	id
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SIMPLE_DECL	4:1	4:19	3	PurplePlugin * prpl ;
VAR_DECL	4:1	4:15	4	PurplePlugin * prpl
TYPE	4:1	4:14	5	PurplePlugin *
TYPE_NAME	4:1	4:1	6	PurplePlugin
LEAF_NODE	4:1	4:1	7	PurplePlugin
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	prpl
LEAF_NODE	4:15	4:15	6	prpl
LEAF_NODE	4:19	4:19	4	;
SIMPLE_DECL	5:1	5:36	3	PurplePluginProtocolInfo * prpl_info ;
VAR_DECL	5:1	5:27	4	PurplePluginProtocolInfo * prpl_info
TYPE	5:1	5:26	5	PurplePluginProtocolInfo *
TYPE_NAME	5:1	5:1	6	PurplePluginProtocolInfo
LEAF_NODE	5:1	5:1	7	PurplePluginProtocolInfo
POINTER	5:26	5:26	6	*
LEAF_NODE	5:26	5:26	7	*
NAME	5:27	5:27	5	prpl_info
LEAF_NODE	5:27	5:27	6	prpl_info
LEAF_NODE	5:36	5:36	4	;
EXPR_STATEMENT	6:1	6:38	3	prpl = purple_connection_get_prpl ( gc ) ;
EXPR	6:1	6:1	4	prpl = purple_connection_get_prpl ( gc )
ASSIGN	6:1	6:8	5	prpl = purple_connection_get_prpl ( gc )
LVAL	6:1	6:1	6	prpl
FIELD	6:1	6:1	7	prpl
LEAF_NODE	6:1	6:1	8	prpl
ASSIGN_OP	6:6	6:6	6	=
LEAF_NODE	6:6	6:6	7	=
RVAL	6:8	6:8	6	purple_connection_get_prpl ( gc )
FUNCTION_CALL	6:8	6:37	7	purple_connection_get_prpl ( gc )
CALLEE	6:8	6:8	8	purple_connection_get_prpl
LEAF_NODE	6:8	6:8	9	purple_connection_get_prpl
LEAF_NODE	6:34	6:34	8	(
ARGUMENT	6:35	6:35	8	gc
FIELD	6:35	6:35	9	gc
LEAF_NODE	6:35	6:35	10	gc
LEAF_NODE	6:37	6:37	8	)
LEAF_NODE	6:38	6:38	4	;
EXPR_STATEMENT	7:1	7:46	3	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl ) ;
EXPR	7:1	7:1	4	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
ASSIGN	7:1	7:13	5	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
LVAL	7:1	7:1	6	prpl_info
FIELD	7:1	7:1	7	prpl_info
LEAF_NODE	7:1	7:1	8	prpl_info
ASSIGN_OP	7:11	7:11	6	=
LEAF_NODE	7:11	7:11	7	=
RVAL	7:13	7:13	6	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
FUNCTION_CALL	7:13	7:45	7	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
CALLEE	7:13	7:13	8	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	7:13	7:13	9	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	7:40	7:40	8	(
ARGUMENT	7:41	7:41	8	prpl
FIELD	7:41	7:41	9	prpl
LEAF_NODE	7:41	7:41	10	prpl
LEAF_NODE	7:45	7:45	8	)
LEAF_NODE	7:46	7:46	4	;
SELECTION	8:1	9:2	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	prpl_info -> chat_leave
EXPR	8:5	8:5	5	prpl_info -> chat_leave
FIELD	8:5	8:16	6	prpl_info -> chat_leave
LEAF_NODE	8:5	8:5	7	prpl_info
LEAF_NODE	8:14	8:14	7	->
LEAF_NODE	8:16	8:16	7	chat_leave
LEAF_NODE	8:26	8:26	4	)
STATEMENTS	9:2	9:2	4	
EXPR_STATEMENT	9:2	9:31	5	prpl_info -> chat_leave ( gc , id ) ;
EXPR	9:2	9:2	6	prpl_info -> chat_leave ( gc , id )
FUNCTION_CALL	9:2	9:30	7	prpl_info -> chat_leave ( gc , id )
CALLEE	9:2	9:13	8	prpl_info -> chat_leave
LEAF_NODE	9:2	9:2	9	prpl_info
LEAF_NODE	9:11	9:11	9	->
LEAF_NODE	9:13	9:13	9	chat_leave
LEAF_NODE	9:23	9:23	8	(
ARGUMENT	9:24	9:24	8	gc
FIELD	9:24	9:24	9	gc
LEAF_NODE	9:24	9:24	10	gc
LEAF_NODE	9:26	9:26	8	,
ARGUMENT	9:28	9:28	8	id
FIELD	9:28	9:28	9	id
LEAF_NODE	9:28	9:28	10	id
LEAF_NODE	9:30	9:30	8	)
LEAF_NODE	9:31	9:31	6	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	86:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	plugin_load
LEAF_NODE	2:0	2:0	3	plugin_load
PARAMETER_LIST	2:11	2:32	2	( PurplePlugin * plugin )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:26	3	PurplePlugin * plugin
TYPE	2:12	2:25	4	PurplePlugin *
TYPE_NAME	2:12	2:12	5	PurplePlugin
LEAF_NODE	2:12	2:12	6	PurplePlugin
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	plugin
LEAF_NODE	2:26	2:26	5	plugin
LEAF_NODE	2:32	2:32	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	85:1	2	
EXPR_STATEMENT	4:1	4:44	3	g_return_val_if_fail ( plugin != NULL , FALSE ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( plugin != NULL , FALSE )
FUNCTION_CALL	4:1	4:43	5	g_return_val_if_fail ( plugin != NULL , FALSE )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:32	6	plugin != NULL
FIELD	4:22	4:22	7	plugin
LEAF_NODE	4:22	4:22	8	plugin
EQ_OPERATOR	4:29	4:29	7	!=
LEAF_NODE	4:29	4:29	8	!=
FIELD	4:32	4:32	7	NULL
LEAF_NODE	4:32	4:32	8	NULL
LEAF_NODE	4:36	4:36	6	,
ARGUMENT	4:38	4:38	6	FALSE
FIELD	4:38	4:38	7	FALSE
LEAF_NODE	4:38	4:38	8	FALSE
LEAF_NODE	4:43	4:43	6	)
LEAF_NODE	4:44	4:44	4	;
EXPR_STATEMENT	5:1	5:24	3	log_reader_init_prefs ( ) ;
EXPR	5:1	5:1	4	log_reader_init_prefs ( )
FUNCTION_CALL	5:1	5:23	5	log_reader_init_prefs ( )
CALLEE	5:1	5:1	6	log_reader_init_prefs
LEAF_NODE	5:1	5:1	7	log_reader_init_prefs
LEAF_NODE	5:22	5:22	6	(
LEAF_NODE	5:23	5:23	6	)
LEAF_NODE	5:24	5:24	4	;
EXPR_STATEMENT	9:1	15:30	3	adium_logger = purple_log_logger_new ( "adium" , _ ( "Adium" ) , 6 , NULL , NULL , adium_logger_finalize , adium_logger_list , adium_logger_read , adium_logger_size ) ;
EXPR	9:1	9:1	4	adium_logger = purple_log_logger_new ( "adium" , _ ( "Adium" ) , 6 , NULL , NULL , adium_logger_finalize , adium_logger_list , adium_logger_read , adium_logger_size )
ASSIGN	9:1	9:16	5	adium_logger = purple_log_logger_new ( "adium" , _ ( "Adium" ) , 6 , NULL , NULL , adium_logger_finalize , adium_logger_list , adium_logger_read , adium_logger_size )
LVAL	9:1	9:1	6	adium_logger
FIELD	9:1	9:1	7	adium_logger
LEAF_NODE	9:1	9:1	8	adium_logger
ASSIGN_OP	9:14	9:14	6	=
LEAF_NODE	9:14	9:14	7	=
RVAL	9:16	9:16	6	purple_log_logger_new ( "adium" , _ ( "Adium" ) , 6 , NULL , NULL , adium_logger_finalize , adium_logger_list , adium_logger_read , adium_logger_size )
FUNCTION_CALL	9:16	15:29	7	purple_log_logger_new ( "adium" , _ ( "Adium" ) , 6 , NULL , NULL , adium_logger_finalize , adium_logger_list , adium_logger_read , adium_logger_size )
CALLEE	9:16	9:16	8	purple_log_logger_new
LEAF_NODE	9:16	9:16	9	purple_log_logger_new
LEAF_NODE	9:37	9:37	8	(
ARGUMENT	9:38	9:38	8	"adium"
FIELD	9:38	9:38	9	"adium"
LEAF_NODE	9:38	9:38	10	"adium"
LEAF_NODE	9:45	9:45	8	,
ARGUMENT	9:47	9:47	8	_ ( "Adium" )
FUNCTION_CALL	9:47	9:56	9	_ ( "Adium" )
CALLEE	9:47	9:47	10	_
LEAF_NODE	9:47	9:47	11	_
LEAF_NODE	9:48	9:48	10	(
ARGUMENT	9:49	9:49	10	"Adium"
FIELD	9:49	9:49	11	"Adium"
LEAF_NODE	9:49	9:49	12	"Adium"
LEAF_NODE	9:56	9:56	10	)
LEAF_NODE	9:57	9:57	8	,
ARGUMENT	9:59	9:59	8	6
FIELD	9:59	9:59	9	6
LEAF_NODE	9:59	9:59	10	6
LEAF_NODE	9:60	9:60	8	,
ARGUMENT	10:12	10:12	8	NULL
FIELD	10:12	10:12	9	NULL
LEAF_NODE	10:12	10:12	10	NULL
LEAF_NODE	10:16	10:16	8	,
ARGUMENT	11:12	11:12	8	NULL
FIELD	11:12	11:12	9	NULL
LEAF_NODE	11:12	11:12	10	NULL
LEAF_NODE	11:16	11:16	8	,
ARGUMENT	12:12	12:12	8	adium_logger_finalize
FIELD	12:12	12:12	9	adium_logger_finalize
LEAF_NODE	12:12	12:12	10	adium_logger_finalize
LEAF_NODE	12:33	12:33	8	,
ARGUMENT	13:12	13:12	8	adium_logger_list
FIELD	13:12	13:12	9	adium_logger_list
LEAF_NODE	13:12	13:12	10	adium_logger_list
LEAF_NODE	13:29	13:29	8	,
ARGUMENT	14:12	14:12	8	adium_logger_read
FIELD	14:12	14:12	9	adium_logger_read
LEAF_NODE	14:12	14:12	10	adium_logger_read
LEAF_NODE	14:29	14:29	8	,
ARGUMENT	15:12	15:12	8	adium_logger_size
FIELD	15:12	15:12	9	adium_logger_size
LEAF_NODE	15:12	15:12	10	adium_logger_size
LEAF_NODE	15:29	15:29	8	)
LEAF_NODE	15:30	15:30	4	;
EXPR_STATEMENT	16:1	16:36	3	purple_log_logger_add ( adium_logger ) ;
EXPR	16:1	16:1	4	purple_log_logger_add ( adium_logger )
FUNCTION_CALL	16:1	16:35	5	purple_log_logger_add ( adium_logger )
CALLEE	16:1	16:1	6	purple_log_logger_add
LEAF_NODE	16:1	16:1	7	purple_log_logger_add
LEAF_NODE	16:22	16:22	6	(
ARGUMENT	16:23	16:23	6	adium_logger
FIELD	16:23	16:23	7	adium_logger
LEAF_NODE	16:23	16:23	8	adium_logger
LEAF_NODE	16:35	16:35	6	)
LEAF_NODE	16:36	16:36	4	;
EXPR_STATEMENT	21:1	27:28	3	fire_logger = purple_log_logger_new ( "fire" , _ ( "Fire" ) , 6 , NULL , NULL , fire_logger_finalize , fire_logger_list , fire_logger_read , fire_logger_size ) ;
EXPR	21:1	21:1	4	fire_logger = purple_log_logger_new ( "fire" , _ ( "Fire" ) , 6 , NULL , NULL , fire_logger_finalize , fire_logger_list , fire_logger_read , fire_logger_size )
ASSIGN	21:1	21:15	5	fire_logger = purple_log_logger_new ( "fire" , _ ( "Fire" ) , 6 , NULL , NULL , fire_logger_finalize , fire_logger_list , fire_logger_read , fire_logger_size )
LVAL	21:1	21:1	6	fire_logger
FIELD	21:1	21:1	7	fire_logger
LEAF_NODE	21:1	21:1	8	fire_logger
ASSIGN_OP	21:13	21:13	6	=
LEAF_NODE	21:13	21:13	7	=
RVAL	21:15	21:15	6	purple_log_logger_new ( "fire" , _ ( "Fire" ) , 6 , NULL , NULL , fire_logger_finalize , fire_logger_list , fire_logger_read , fire_logger_size )
FUNCTION_CALL	21:15	27:27	7	purple_log_logger_new ( "fire" , _ ( "Fire" ) , 6 , NULL , NULL , fire_logger_finalize , fire_logger_list , fire_logger_read , fire_logger_size )
CALLEE	21:15	21:15	8	purple_log_logger_new
LEAF_NODE	21:15	21:15	9	purple_log_logger_new
LEAF_NODE	21:36	21:36	8	(
ARGUMENT	21:37	21:37	8	"fire"
FIELD	21:37	21:37	9	"fire"
LEAF_NODE	21:37	21:37	10	"fire"
LEAF_NODE	21:43	21:43	8	,
ARGUMENT	21:45	21:45	8	_ ( "Fire" )
FUNCTION_CALL	21:45	21:53	9	_ ( "Fire" )
CALLEE	21:45	21:45	10	_
LEAF_NODE	21:45	21:45	11	_
LEAF_NODE	21:46	21:46	10	(
ARGUMENT	21:47	21:47	10	"Fire"
FIELD	21:47	21:47	11	"Fire"
LEAF_NODE	21:47	21:47	12	"Fire"
LEAF_NODE	21:53	21:53	10	)
LEAF_NODE	21:54	21:54	8	,
ARGUMENT	21:56	21:56	8	6
FIELD	21:56	21:56	9	6
LEAF_NODE	21:56	21:56	10	6
LEAF_NODE	21:57	21:57	8	,
ARGUMENT	22:11	22:11	8	NULL
FIELD	22:11	22:11	9	NULL
LEAF_NODE	22:11	22:11	10	NULL
LEAF_NODE	22:15	22:15	8	,
ARGUMENT	23:11	23:11	8	NULL
FIELD	23:11	23:11	9	NULL
LEAF_NODE	23:11	23:11	10	NULL
LEAF_NODE	23:15	23:15	8	,
ARGUMENT	24:11	24:11	8	fire_logger_finalize
FIELD	24:11	24:11	9	fire_logger_finalize
LEAF_NODE	24:11	24:11	10	fire_logger_finalize
LEAF_NODE	24:31	24:31	8	,
ARGUMENT	25:11	25:11	8	fire_logger_list
FIELD	25:11	25:11	9	fire_logger_list
LEAF_NODE	25:11	25:11	10	fire_logger_list
LEAF_NODE	25:27	25:27	8	,
ARGUMENT	26:11	26:11	8	fire_logger_read
FIELD	26:11	26:11	9	fire_logger_read
LEAF_NODE	26:11	26:11	10	fire_logger_read
LEAF_NODE	26:27	26:27	8	,
ARGUMENT	27:11	27:11	8	fire_logger_size
FIELD	27:11	27:11	9	fire_logger_size
LEAF_NODE	27:11	27:11	10	fire_logger_size
LEAF_NODE	27:27	27:27	8	)
LEAF_NODE	27:28	27:28	4	;
EXPR_STATEMENT	28:1	28:35	3	purple_log_logger_add ( fire_logger ) ;
EXPR	28:1	28:1	4	purple_log_logger_add ( fire_logger )
FUNCTION_CALL	28:1	28:34	5	purple_log_logger_add ( fire_logger )
CALLEE	28:1	28:1	6	purple_log_logger_add
LEAF_NODE	28:1	28:1	7	purple_log_logger_add
LEAF_NODE	28:22	28:22	6	(
ARGUMENT	28:23	28:23	6	fire_logger
FIELD	28:23	28:23	7	fire_logger
LEAF_NODE	28:23	28:23	8	fire_logger
LEAF_NODE	28:34	28:34	6	)
LEAF_NODE	28:35	28:35	4	;
EXPR_STATEMENT	32:1	38:39	3	messenger_plus_logger = purple_log_logger_new ( "messenger_plus" , _ ( "Messenger Plus!" ) , 6 , NULL , NULL , messenger_plus_logger_finalize , messenger_plus_logger_list , messenger_plus_logger_read , messenger_plus_logger_size ) ;
EXPR	32:1	32:1	4	messenger_plus_logger = purple_log_logger_new ( "messenger_plus" , _ ( "Messenger Plus!" ) , 6 , NULL , NULL , messenger_plus_logger_finalize , messenger_plus_logger_list , messenger_plus_logger_read , messenger_plus_logger_size )
ASSIGN	32:1	32:25	5	messenger_plus_logger = purple_log_logger_new ( "messenger_plus" , _ ( "Messenger Plus!" ) , 6 , NULL , NULL , messenger_plus_logger_finalize , messenger_plus_logger_list , messenger_plus_logger_read , messenger_plus_logger_size )
LVAL	32:1	32:1	6	messenger_plus_logger
FIELD	32:1	32:1	7	messenger_plus_logger
LEAF_NODE	32:1	32:1	8	messenger_plus_logger
ASSIGN_OP	32:23	32:23	6	=
LEAF_NODE	32:23	32:23	7	=
RVAL	32:25	32:25	6	purple_log_logger_new ( "messenger_plus" , _ ( "Messenger Plus!" ) , 6 , NULL , NULL , messenger_plus_logger_finalize , messenger_plus_logger_list , messenger_plus_logger_read , messenger_plus_logger_size )
FUNCTION_CALL	32:25	38:38	7	purple_log_logger_new ( "messenger_plus" , _ ( "Messenger Plus!" ) , 6 , NULL , NULL , messenger_plus_logger_finalize , messenger_plus_logger_list , messenger_plus_logger_read , messenger_plus_logger_size )
CALLEE	32:25	32:25	8	purple_log_logger_new
LEAF_NODE	32:25	32:25	9	purple_log_logger_new
LEAF_NODE	32:46	32:46	8	(
ARGUMENT	32:47	32:47	8	"messenger_plus"
FIELD	32:47	32:47	9	"messenger_plus"
LEAF_NODE	32:47	32:47	10	"messenger_plus"
LEAF_NODE	32:63	32:63	8	,
ARGUMENT	32:65	32:65	8	_ ( "Messenger Plus!" )
FUNCTION_CALL	32:65	32:84	9	_ ( "Messenger Plus!" )
CALLEE	32:65	32:65	10	_
LEAF_NODE	32:65	32:65	11	_
LEAF_NODE	32:66	32:66	10	(
ARGUMENT	32:67	32:67	10	"Messenger Plus!"
FIELD	32:67	32:67	11	"Messenger Plus!"
LEAF_NODE	32:67	32:67	12	"Messenger Plus!"
LEAF_NODE	32:84	32:84	10	)
LEAF_NODE	32:85	32:85	8	,
ARGUMENT	32:87	32:87	8	6
FIELD	32:87	32:87	9	6
LEAF_NODE	32:87	32:87	10	6
LEAF_NODE	32:88	32:88	8	,
ARGUMENT	33:12	33:12	8	NULL
FIELD	33:12	33:12	9	NULL
LEAF_NODE	33:12	33:12	10	NULL
LEAF_NODE	33:16	33:16	8	,
ARGUMENT	34:12	34:12	8	NULL
FIELD	34:12	34:12	9	NULL
LEAF_NODE	34:12	34:12	10	NULL
LEAF_NODE	34:16	34:16	8	,
ARGUMENT	35:12	35:12	8	messenger_plus_logger_finalize
FIELD	35:12	35:12	9	messenger_plus_logger_finalize
LEAF_NODE	35:12	35:12	10	messenger_plus_logger_finalize
LEAF_NODE	35:42	35:42	8	,
ARGUMENT	36:12	36:12	8	messenger_plus_logger_list
FIELD	36:12	36:12	9	messenger_plus_logger_list
LEAF_NODE	36:12	36:12	10	messenger_plus_logger_list
LEAF_NODE	36:38	36:38	8	,
ARGUMENT	37:12	37:12	8	messenger_plus_logger_read
FIELD	37:12	37:12	9	messenger_plus_logger_read
LEAF_NODE	37:12	37:12	10	messenger_plus_logger_read
LEAF_NODE	37:38	37:38	8	,
ARGUMENT	38:12	38:12	8	messenger_plus_logger_size
FIELD	38:12	38:12	9	messenger_plus_logger_size
LEAF_NODE	38:12	38:12	10	messenger_plus_logger_size
LEAF_NODE	38:38	38:38	8	)
LEAF_NODE	38:39	38:39	4	;
EXPR_STATEMENT	39:1	39:45	3	purple_log_logger_add ( messenger_plus_logger ) ;
EXPR	39:1	39:1	4	purple_log_logger_add ( messenger_plus_logger )
FUNCTION_CALL	39:1	39:44	5	purple_log_logger_add ( messenger_plus_logger )
CALLEE	39:1	39:1	6	purple_log_logger_add
LEAF_NODE	39:1	39:1	7	purple_log_logger_add
LEAF_NODE	39:22	39:22	6	(
ARGUMENT	39:23	39:23	6	messenger_plus_logger
FIELD	39:23	39:23	7	messenger_plus_logger
LEAF_NODE	39:23	39:23	8	messenger_plus_logger
LEAF_NODE	39:44	39:44	6	)
LEAF_NODE	39:45	39:45	4	;
EXPR_STATEMENT	44:1	50:27	3	qip_logger = purple_log_logger_new ( "qip" , _ ( "QIP" ) , 6 , NULL , NULL , qip_logger_finalize , qip_logger_list , qip_logger_read , qip_logger_size ) ;
EXPR	44:1	44:1	4	qip_logger = purple_log_logger_new ( "qip" , _ ( "QIP" ) , 6 , NULL , NULL , qip_logger_finalize , qip_logger_list , qip_logger_read , qip_logger_size )
ASSIGN	44:1	44:14	5	qip_logger = purple_log_logger_new ( "qip" , _ ( "QIP" ) , 6 , NULL , NULL , qip_logger_finalize , qip_logger_list , qip_logger_read , qip_logger_size )
LVAL	44:1	44:1	6	qip_logger
FIELD	44:1	44:1	7	qip_logger
LEAF_NODE	44:1	44:1	8	qip_logger
ASSIGN_OP	44:12	44:12	6	=
LEAF_NODE	44:12	44:12	7	=
RVAL	44:14	44:14	6	purple_log_logger_new ( "qip" , _ ( "QIP" ) , 6 , NULL , NULL , qip_logger_finalize , qip_logger_list , qip_logger_read , qip_logger_size )
FUNCTION_CALL	44:14	50:26	7	purple_log_logger_new ( "qip" , _ ( "QIP" ) , 6 , NULL , NULL , qip_logger_finalize , qip_logger_list , qip_logger_read , qip_logger_size )
CALLEE	44:14	44:14	8	purple_log_logger_new
LEAF_NODE	44:14	44:14	9	purple_log_logger_new
LEAF_NODE	44:35	44:35	8	(
ARGUMENT	44:36	44:36	8	"qip"
FIELD	44:36	44:36	9	"qip"
LEAF_NODE	44:36	44:36	10	"qip"
LEAF_NODE	44:41	44:41	8	,
ARGUMENT	44:43	44:43	8	_ ( "QIP" )
FUNCTION_CALL	44:43	44:50	9	_ ( "QIP" )
CALLEE	44:43	44:43	10	_
LEAF_NODE	44:43	44:43	11	_
LEAF_NODE	44:44	44:44	10	(
ARGUMENT	44:45	44:45	10	"QIP"
FIELD	44:45	44:45	11	"QIP"
LEAF_NODE	44:45	44:45	12	"QIP"
LEAF_NODE	44:50	44:50	10	)
LEAF_NODE	44:51	44:51	8	,
ARGUMENT	44:53	44:53	8	6
FIELD	44:53	44:53	9	6
LEAF_NODE	44:53	44:53	10	6
LEAF_NODE	44:54	44:54	8	,
ARGUMENT	45:11	45:11	8	NULL
FIELD	45:11	45:11	9	NULL
LEAF_NODE	45:11	45:11	10	NULL
LEAF_NODE	45:15	45:15	8	,
ARGUMENT	46:11	46:11	8	NULL
FIELD	46:11	46:11	9	NULL
LEAF_NODE	46:11	46:11	10	NULL
LEAF_NODE	46:15	46:15	8	,
ARGUMENT	47:11	47:11	8	qip_logger_finalize
FIELD	47:11	47:11	9	qip_logger_finalize
LEAF_NODE	47:11	47:11	10	qip_logger_finalize
LEAF_NODE	47:30	47:30	8	,
ARGUMENT	48:11	48:11	8	qip_logger_list
FIELD	48:11	48:11	9	qip_logger_list
LEAF_NODE	48:11	48:11	10	qip_logger_list
LEAF_NODE	48:26	48:26	8	,
ARGUMENT	49:11	49:11	8	qip_logger_read
FIELD	49:11	49:11	9	qip_logger_read
LEAF_NODE	49:11	49:11	10	qip_logger_read
LEAF_NODE	49:26	49:26	8	,
ARGUMENT	50:11	50:11	8	qip_logger_size
FIELD	50:11	50:11	9	qip_logger_size
LEAF_NODE	50:11	50:11	10	qip_logger_size
LEAF_NODE	50:26	50:26	8	)
LEAF_NODE	50:27	50:27	4	;
EXPR_STATEMENT	51:1	51:34	3	purple_log_logger_add ( qip_logger ) ;
EXPR	51:1	51:1	4	purple_log_logger_add ( qip_logger )
FUNCTION_CALL	51:1	51:33	5	purple_log_logger_add ( qip_logger )
CALLEE	51:1	51:1	6	purple_log_logger_add
LEAF_NODE	51:1	51:1	7	purple_log_logger_add
LEAF_NODE	51:22	51:22	6	(
ARGUMENT	51:23	51:23	6	qip_logger
FIELD	51:23	51:23	7	qip_logger
LEAF_NODE	51:23	51:23	8	qip_logger
LEAF_NODE	51:33	51:33	6	)
LEAF_NODE	51:34	51:34	4	;
EXPR_STATEMENT	55:1	61:26	3	msn_logger = purple_log_logger_new ( "msn" , _ ( "MSN Messenger" ) , 6 , NULL , NULL , msn_logger_finalize , msn_logger_list , msn_logger_read , msn_logger_size ) ;
EXPR	55:1	55:1	4	msn_logger = purple_log_logger_new ( "msn" , _ ( "MSN Messenger" ) , 6 , NULL , NULL , msn_logger_finalize , msn_logger_list , msn_logger_read , msn_logger_size )
ASSIGN	55:1	55:14	5	msn_logger = purple_log_logger_new ( "msn" , _ ( "MSN Messenger" ) , 6 , NULL , NULL , msn_logger_finalize , msn_logger_list , msn_logger_read , msn_logger_size )
LVAL	55:1	55:1	6	msn_logger
FIELD	55:1	55:1	7	msn_logger
LEAF_NODE	55:1	55:1	8	msn_logger
ASSIGN_OP	55:12	55:12	6	=
LEAF_NODE	55:12	55:12	7	=
RVAL	55:14	55:14	6	purple_log_logger_new ( "msn" , _ ( "MSN Messenger" ) , 6 , NULL , NULL , msn_logger_finalize , msn_logger_list , msn_logger_read , msn_logger_size )
FUNCTION_CALL	55:14	61:25	7	purple_log_logger_new ( "msn" , _ ( "MSN Messenger" ) , 6 , NULL , NULL , msn_logger_finalize , msn_logger_list , msn_logger_read , msn_logger_size )
CALLEE	55:14	55:14	8	purple_log_logger_new
LEAF_NODE	55:14	55:14	9	purple_log_logger_new
LEAF_NODE	55:35	55:35	8	(
ARGUMENT	55:36	55:36	8	"msn"
FIELD	55:36	55:36	9	"msn"
LEAF_NODE	55:36	55:36	10	"msn"
LEAF_NODE	55:41	55:41	8	,
ARGUMENT	55:43	55:43	8	_ ( "MSN Messenger" )
FUNCTION_CALL	55:43	55:60	9	_ ( "MSN Messenger" )
CALLEE	55:43	55:43	10	_
LEAF_NODE	55:43	55:43	11	_
LEAF_NODE	55:44	55:44	10	(
ARGUMENT	55:45	55:45	10	"MSN Messenger"
FIELD	55:45	55:45	11	"MSN Messenger"
LEAF_NODE	55:45	55:45	12	"MSN Messenger"
LEAF_NODE	55:60	55:60	10	)
LEAF_NODE	55:61	55:61	8	,
ARGUMENT	55:63	55:63	8	6
FIELD	55:63	55:63	9	6
LEAF_NODE	55:63	55:63	10	6
LEAF_NODE	55:64	55:64	8	,
ARGUMENT	56:10	56:10	8	NULL
FIELD	56:10	56:10	9	NULL
LEAF_NODE	56:10	56:10	10	NULL
LEAF_NODE	56:14	56:14	8	,
ARGUMENT	57:10	57:10	8	NULL
FIELD	57:10	57:10	9	NULL
LEAF_NODE	57:10	57:10	10	NULL
LEAF_NODE	57:14	57:14	8	,
ARGUMENT	58:10	58:10	8	msn_logger_finalize
FIELD	58:10	58:10	9	msn_logger_finalize
LEAF_NODE	58:10	58:10	10	msn_logger_finalize
LEAF_NODE	58:29	58:29	8	,
ARGUMENT	59:10	59:10	8	msn_logger_list
FIELD	59:10	59:10	9	msn_logger_list
LEAF_NODE	59:10	59:10	10	msn_logger_list
LEAF_NODE	59:25	59:25	8	,
ARGUMENT	60:10	60:10	8	msn_logger_read
FIELD	60:10	60:10	9	msn_logger_read
LEAF_NODE	60:10	60:10	10	msn_logger_read
LEAF_NODE	60:25	60:25	8	,
ARGUMENT	61:10	61:10	8	msn_logger_size
FIELD	61:10	61:10	9	msn_logger_size
LEAF_NODE	61:10	61:10	10	msn_logger_size
LEAF_NODE	61:25	61:25	8	)
LEAF_NODE	61:26	61:26	4	;
EXPR_STATEMENT	62:1	62:34	3	purple_log_logger_add ( msn_logger ) ;
EXPR	62:1	62:1	4	purple_log_logger_add ( msn_logger )
FUNCTION_CALL	62:1	62:33	5	purple_log_logger_add ( msn_logger )
CALLEE	62:1	62:1	6	purple_log_logger_add
LEAF_NODE	62:1	62:1	7	purple_log_logger_add
LEAF_NODE	62:22	62:22	6	(
ARGUMENT	62:23	62:23	6	msn_logger
FIELD	62:23	62:23	7	msn_logger
LEAF_NODE	62:23	62:23	8	msn_logger
LEAF_NODE	62:33	62:33	6	)
LEAF_NODE	62:34	62:34	4	;
EXPR_STATEMENT	66:1	72:33	3	trillian_logger = purple_log_logger_new ( "trillian" , _ ( "Trillian" ) , 6 , NULL , NULL , trillian_logger_finalize , trillian_logger_list , trillian_logger_read , trillian_logger_size ) ;
EXPR	66:1	66:1	4	trillian_logger = purple_log_logger_new ( "trillian" , _ ( "Trillian" ) , 6 , NULL , NULL , trillian_logger_finalize , trillian_logger_list , trillian_logger_read , trillian_logger_size )
ASSIGN	66:1	66:19	5	trillian_logger = purple_log_logger_new ( "trillian" , _ ( "Trillian" ) , 6 , NULL , NULL , trillian_logger_finalize , trillian_logger_list , trillian_logger_read , trillian_logger_size )
LVAL	66:1	66:1	6	trillian_logger
FIELD	66:1	66:1	7	trillian_logger
LEAF_NODE	66:1	66:1	8	trillian_logger
ASSIGN_OP	66:17	66:17	6	=
LEAF_NODE	66:17	66:17	7	=
RVAL	66:19	66:19	6	purple_log_logger_new ( "trillian" , _ ( "Trillian" ) , 6 , NULL , NULL , trillian_logger_finalize , trillian_logger_list , trillian_logger_read , trillian_logger_size )
FUNCTION_CALL	66:19	72:32	7	purple_log_logger_new ( "trillian" , _ ( "Trillian" ) , 6 , NULL , NULL , trillian_logger_finalize , trillian_logger_list , trillian_logger_read , trillian_logger_size )
CALLEE	66:19	66:19	8	purple_log_logger_new
LEAF_NODE	66:19	66:19	9	purple_log_logger_new
LEAF_NODE	66:40	66:40	8	(
ARGUMENT	66:41	66:41	8	"trillian"
FIELD	66:41	66:41	9	"trillian"
LEAF_NODE	66:41	66:41	10	"trillian"
LEAF_NODE	66:51	66:51	8	,
ARGUMENT	66:53	66:53	8	_ ( "Trillian" )
FUNCTION_CALL	66:53	66:65	9	_ ( "Trillian" )
CALLEE	66:53	66:53	10	_
LEAF_NODE	66:53	66:53	11	_
LEAF_NODE	66:54	66:54	10	(
ARGUMENT	66:55	66:55	10	"Trillian"
FIELD	66:55	66:55	11	"Trillian"
LEAF_NODE	66:55	66:55	12	"Trillian"
LEAF_NODE	66:65	66:65	10	)
LEAF_NODE	66:66	66:66	8	,
ARGUMENT	66:68	66:68	8	6
FIELD	66:68	66:68	9	6
LEAF_NODE	66:68	66:68	10	6
LEAF_NODE	66:69	66:69	8	,
ARGUMENT	67:12	67:12	8	NULL
FIELD	67:12	67:12	9	NULL
LEAF_NODE	67:12	67:12	10	NULL
LEAF_NODE	67:16	67:16	8	,
ARGUMENT	68:12	68:12	8	NULL
FIELD	68:12	68:12	9	NULL
LEAF_NODE	68:12	68:12	10	NULL
LEAF_NODE	68:16	68:16	8	,
ARGUMENT	69:12	69:12	8	trillian_logger_finalize
FIELD	69:12	69:12	9	trillian_logger_finalize
LEAF_NODE	69:12	69:12	10	trillian_logger_finalize
LEAF_NODE	69:36	69:36	8	,
ARGUMENT	70:12	70:12	8	trillian_logger_list
FIELD	70:12	70:12	9	trillian_logger_list
LEAF_NODE	70:12	70:12	10	trillian_logger_list
LEAF_NODE	70:32	70:32	8	,
ARGUMENT	71:12	71:12	8	trillian_logger_read
FIELD	71:12	71:12	9	trillian_logger_read
LEAF_NODE	71:12	71:12	10	trillian_logger_read
LEAF_NODE	71:32	71:32	8	,
ARGUMENT	72:12	72:12	8	trillian_logger_size
FIELD	72:12	72:12	9	trillian_logger_size
LEAF_NODE	72:12	72:12	10	trillian_logger_size
LEAF_NODE	72:32	72:32	8	)
LEAF_NODE	72:33	72:33	4	;
EXPR_STATEMENT	73:1	73:39	3	purple_log_logger_add ( trillian_logger ) ;
EXPR	73:1	73:1	4	purple_log_logger_add ( trillian_logger )
FUNCTION_CALL	73:1	73:38	5	purple_log_logger_add ( trillian_logger )
CALLEE	73:1	73:1	6	purple_log_logger_add
LEAF_NODE	73:1	73:1	7	purple_log_logger_add
LEAF_NODE	73:22	73:22	6	(
ARGUMENT	73:23	73:23	6	trillian_logger
FIELD	73:23	73:23	7	trillian_logger
LEAF_NODE	73:23	73:23	8	trillian_logger
LEAF_NODE	73:38	73:38	6	)
LEAF_NODE	73:39	73:39	4	;
EXPR_STATEMENT	77:1	83:29	3	amsn_logger = purple_log_logger_new ( "amsn" , _ ( "aMSN" ) , 6 , NULL , NULL , amsn_logger_finalize , amsn_logger_list , amsn_logger_read , amsn_logger_size ) ;
EXPR	77:1	77:1	4	amsn_logger = purple_log_logger_new ( "amsn" , _ ( "aMSN" ) , 6 , NULL , NULL , amsn_logger_finalize , amsn_logger_list , amsn_logger_read , amsn_logger_size )
ASSIGN	77:1	77:15	5	amsn_logger = purple_log_logger_new ( "amsn" , _ ( "aMSN" ) , 6 , NULL , NULL , amsn_logger_finalize , amsn_logger_list , amsn_logger_read , amsn_logger_size )
LVAL	77:1	77:1	6	amsn_logger
FIELD	77:1	77:1	7	amsn_logger
LEAF_NODE	77:1	77:1	8	amsn_logger
ASSIGN_OP	77:13	77:13	6	=
LEAF_NODE	77:13	77:13	7	=
RVAL	77:15	77:15	6	purple_log_logger_new ( "amsn" , _ ( "aMSN" ) , 6 , NULL , NULL , amsn_logger_finalize , amsn_logger_list , amsn_logger_read , amsn_logger_size )
FUNCTION_CALL	77:15	83:28	7	purple_log_logger_new ( "amsn" , _ ( "aMSN" ) , 6 , NULL , NULL , amsn_logger_finalize , amsn_logger_list , amsn_logger_read , amsn_logger_size )
CALLEE	77:15	77:15	8	purple_log_logger_new
LEAF_NODE	77:15	77:15	9	purple_log_logger_new
LEAF_NODE	77:36	77:36	8	(
ARGUMENT	77:37	77:37	8	"amsn"
FIELD	77:37	77:37	9	"amsn"
LEAF_NODE	77:37	77:37	10	"amsn"
LEAF_NODE	77:43	77:43	8	,
ARGUMENT	77:45	77:45	8	_ ( "aMSN" )
FUNCTION_CALL	77:45	77:53	9	_ ( "aMSN" )
CALLEE	77:45	77:45	10	_
LEAF_NODE	77:45	77:45	11	_
LEAF_NODE	77:46	77:46	10	(
ARGUMENT	77:47	77:47	10	"aMSN"
FIELD	77:47	77:47	11	"aMSN"
LEAF_NODE	77:47	77:47	12	"aMSN"
LEAF_NODE	77:53	77:53	10	)
LEAF_NODE	77:54	77:54	8	,
ARGUMENT	77:56	77:56	8	6
FIELD	77:56	77:56	9	6
LEAF_NODE	77:56	77:56	10	6
LEAF_NODE	77:57	77:57	8	,
ARGUMENT	78:12	78:12	8	NULL
FIELD	78:12	78:12	9	NULL
LEAF_NODE	78:12	78:12	10	NULL
LEAF_NODE	78:16	78:16	8	,
ARGUMENT	79:12	79:12	8	NULL
FIELD	79:12	79:12	9	NULL
LEAF_NODE	79:12	79:12	10	NULL
LEAF_NODE	79:16	79:16	8	,
ARGUMENT	80:12	80:12	8	amsn_logger_finalize
FIELD	80:12	80:12	9	amsn_logger_finalize
LEAF_NODE	80:12	80:12	10	amsn_logger_finalize
LEAF_NODE	80:32	80:32	8	,
ARGUMENT	81:12	81:12	8	amsn_logger_list
FIELD	81:12	81:12	9	amsn_logger_list
LEAF_NODE	81:12	81:12	10	amsn_logger_list
LEAF_NODE	81:28	81:28	8	,
ARGUMENT	82:12	82:12	8	amsn_logger_read
FIELD	82:12	82:12	9	amsn_logger_read
LEAF_NODE	82:12	82:12	10	amsn_logger_read
LEAF_NODE	82:28	82:28	8	,
ARGUMENT	83:12	83:12	8	amsn_logger_size
FIELD	83:12	83:12	9	amsn_logger_size
LEAF_NODE	83:12	83:12	10	amsn_logger_size
LEAF_NODE	83:28	83:28	8	)
LEAF_NODE	83:29	83:29	4	;
EXPR_STATEMENT	84:1	84:35	3	purple_log_logger_add ( amsn_logger ) ;
EXPR	84:1	84:1	4	purple_log_logger_add ( amsn_logger )
FUNCTION_CALL	84:1	84:34	5	purple_log_logger_add ( amsn_logger )
CALLEE	84:1	84:1	6	purple_log_logger_add
LEAF_NODE	84:1	84:1	7	purple_log_logger_add
LEAF_NODE	84:22	84:22	6	(
ARGUMENT	84:23	84:23	6	amsn_logger
FIELD	84:23	84:23	7	amsn_logger
LEAF_NODE	84:23	84:23	8	amsn_logger
LEAF_NODE	84:34	84:34	6	)
LEAF_NODE	84:35	84:35	4	;
JUMP_STATEMENT	85:1	85:12	3	return TRUE ;
KEYWORD	85:1	85:1	4	return
LEAF_NODE	85:1	85:1	5	return
DESTINATION	85:8	85:8	4	TRUE
EXPR	85:8	85:8	5	TRUE
FIELD	85:8	85:8	6	TRUE
LEAF_NODE	85:8	85:8	7	TRUE
LEAF_NODE	85:12	85:12	4	;
LEAF_NODE	86:0	86:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	24:0	1	
RETURN_TYPE	1:0	1:17	2	JabberIBBSession *
TYPE_NAME	1:0	1:0	3	JabberIBBSession
LEAF_NODE	1:0	1:0	4	JabberIBBSession
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	jabber_ibb_session_create_from_xmlnode
LEAF_NODE	2:0	2:0	3	jabber_ibb_session_create_from_xmlnode
PARAMETER_LIST	2:38	3:50	2	( JabberStream * js , const char * from , const char * id , xmlnode * open , gpointer user_data )
LEAF_NODE	2:38	2:38	3	(
PARAMETER_DECL	2:39	2:53	3	JabberStream * js
TYPE	2:39	2:52	4	JabberStream *
TYPE_NAME	2:39	2:39	5	JabberStream
LEAF_NODE	2:39	2:39	6	JabberStream
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	js
LEAF_NODE	2:53	2:53	5	js
LEAF_NODE	2:55	2:55	3	,
PARAMETER_DECL	2:57	2:69	3	const char * from
TYPE	2:57	2:68	4	const char *
TYPE_NAME	2:57	2:63	5	const char
LEAF_NODE	2:57	2:57	6	const
LEAF_NODE	2:63	2:63	6	char
POINTER	2:68	2:68	5	*
LEAF_NODE	2:68	2:68	6	*
NAME	2:69	2:69	4	from
LEAF_NODE	2:69	2:69	5	from
LEAF_NODE	2:73	2:73	3	,
PARAMETER_DECL	3:1	3:13	3	const char * id
TYPE	3:1	3:12	4	const char *
TYPE_NAME	3:1	3:7	5	const char
LEAF_NODE	3:1	3:1	6	const
LEAF_NODE	3:7	3:7	6	char
POINTER	3:12	3:12	5	*
LEAF_NODE	3:12	3:12	6	*
NAME	3:13	3:13	4	id
LEAF_NODE	3:13	3:13	5	id
LEAF_NODE	3:15	3:15	3	,
PARAMETER_DECL	3:17	3:26	3	xmlnode * open
TYPE	3:17	3:25	4	xmlnode *
TYPE_NAME	3:17	3:17	5	xmlnode
LEAF_NODE	3:17	3:17	6	xmlnode
POINTER	3:25	3:25	5	*
LEAF_NODE	3:25	3:25	6	*
NAME	3:26	3:26	4	open
LEAF_NODE	3:26	3:26	5	open
LEAF_NODE	3:30	3:30	3	,
PARAMETER_DECL	3:32	3:41	3	gpointer user_data
TYPE	3:32	3:32	4	gpointer
TYPE_NAME	3:32	3:32	5	gpointer
LEAF_NODE	3:32	3:32	6	gpointer
NAME	3:41	3:41	4	user_data
LEAF_NODE	3:41	3:41	5	user_data
LEAF_NODE	3:50	3:50	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	23:1	2	
SIMPLE_DECL	5:1	5:30	3	JabberIBBSession * sess ; sess = NULL ;
VAR_DECL	5:1	5:19	4	JabberIBBSession * sess ; sess = NULL
TYPE	5:1	5:18	5	JabberIBBSession *
TYPE_NAME	5:1	5:1	6	JabberIBBSession
LEAF_NODE	5:1	5:1	7	JabberIBBSession
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	sess
LEAF_NODE	5:19	5:19	6	sess
LEAF_NODE	0:0	0:0	5	;
INIT	5:19	5:19	5	sess = NULL
ASSIGN	5:19	5:26	6	sess = NULL
LVAL	5:19	5:19	7	sess
NAME	5:19	5:19	8	sess
LEAF_NODE	5:19	5:19	9	sess
ASSIGN_OP	5:24	5:24	7	=
LEAF_NODE	5:24	5:24	8	=
RVAL	5:26	5:26	7	NULL
FIELD	5:26	5:26	8	NULL
LEAF_NODE	5:26	5:26	9	NULL
LEAF_NODE	5:30	5:30	4	;
SIMPLE_DECL	6:1	6:51	3	const gchar * sid ; sid = xmlnode_get_attrib ( open , "sid" ) ;
VAR_DECL	6:1	6:14	4	const gchar * sid ; sid = xmlnode_get_attrib ( open , "sid" )
TYPE	6:1	6:13	5	const gchar *
TYPE_NAME	6:1	6:7	6	const gchar
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	gchar
POINTER	6:13	6:13	6	*
LEAF_NODE	6:13	6:13	7	*
NAME	6:14	6:14	5	sid
LEAF_NODE	6:14	6:14	6	sid
LEAF_NODE	0:0	0:0	5	;
INIT	6:14	6:14	5	sid = xmlnode_get_attrib ( open , "sid" )
ASSIGN	6:14	6:20	6	sid = xmlnode_get_attrib ( open , "sid" )
LVAL	6:14	6:14	7	sid
NAME	6:14	6:14	8	sid
LEAF_NODE	6:14	6:14	9	sid
ASSIGN_OP	6:18	6:18	7	=
LEAF_NODE	6:18	6:18	8	=
RVAL	6:20	6:20	7	xmlnode_get_attrib ( open , "sid" )
FUNCTION_CALL	6:20	6:50	8	xmlnode_get_attrib ( open , "sid" )
CALLEE	6:20	6:20	9	xmlnode_get_attrib
LEAF_NODE	6:20	6:20	10	xmlnode_get_attrib
LEAF_NODE	6:38	6:38	9	(
ARGUMENT	6:39	6:39	9	open
FIELD	6:39	6:39	10	open
LEAF_NODE	6:39	6:39	11	open
LEAF_NODE	6:43	6:43	9	,
ARGUMENT	6:45	6:45	9	"sid"
FIELD	6:45	6:45	10	"sid"
LEAF_NODE	6:45	6:45	11	"sid"
LEAF_NODE	6:50	6:50	9	)
LEAF_NODE	6:51	6:51	4	;
SIMPLE_DECL	7:1	7:65	3	const gchar * block_size ; block_size = xmlnode_get_attrib ( open , "block-size" ) ;
VAR_DECL	7:1	7:14	4	const gchar * block_size ; block_size = xmlnode_get_attrib ( open , "block-size" )
TYPE	7:1	7:13	5	const gchar *
TYPE_NAME	7:1	7:7	6	const gchar
LEAF_NODE	7:1	7:1	7	const
LEAF_NODE	7:7	7:7	7	gchar
POINTER	7:13	7:13	6	*
LEAF_NODE	7:13	7:13	7	*
NAME	7:14	7:14	5	block_size
LEAF_NODE	7:14	7:14	6	block_size
LEAF_NODE	0:0	0:0	5	;
INIT	7:14	7:14	5	block_size = xmlnode_get_attrib ( open , "block-size" )
ASSIGN	7:14	7:27	6	block_size = xmlnode_get_attrib ( open , "block-size" )
LVAL	7:14	7:14	7	block_size
NAME	7:14	7:14	8	block_size
LEAF_NODE	7:14	7:14	9	block_size
ASSIGN_OP	7:25	7:25	7	=
LEAF_NODE	7:25	7:25	8	=
RVAL	7:27	7:27	7	xmlnode_get_attrib ( open , "block-size" )
FUNCTION_CALL	7:27	7:64	8	xmlnode_get_attrib ( open , "block-size" )
CALLEE	7:27	7:27	9	xmlnode_get_attrib
LEAF_NODE	7:27	7:27	10	xmlnode_get_attrib
LEAF_NODE	7:45	7:45	9	(
ARGUMENT	7:46	7:46	9	open
FIELD	7:46	7:46	10	open
LEAF_NODE	7:46	7:46	11	open
LEAF_NODE	7:50	7:50	9	,
ARGUMENT	7:52	7:52	9	"block-size"
FIELD	7:52	7:52	10	"block-size"
LEAF_NODE	7:52	7:52	11	"block-size"
LEAF_NODE	7:64	7:64	9	)
LEAF_NODE	7:65	7:65	4	;
SELECTION	8:1	8:12	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	! open
EXPR	8:5	8:5	5	! open
UNARY_EXPR	8:5	8:6	6	! open
UNARY_OPERATOR	8:5	8:5	7	!
LEAF_NODE	8:5	8:5	8	!
FIELD	8:6	8:6	7	open
LEAF_NODE	8:6	8:6	8	open
LEAF_NODE	8:10	8:10	4	)
STATEMENTS	8:12	10:1	4	
LEAF_NODE	8:12	8:12	5	{
STATEMENTS	9:2	9:2	5	
JUMP_STATEMENT	9:2	9:13	6	return NULL ;
KEYWORD	9:2	9:2	7	return
LEAF_NODE	9:2	9:2	8	return
DESTINATION	9:9	9:9	7	NULL
EXPR	9:9	9:9	8	NULL
FIELD	9:9	9:9	9	NULL
LEAF_NODE	9:9	9:9	10	NULL
LEAF_NODE	9:13	9:13	7	;
LEAF_NODE	10:1	10:1	5	}
SELECTION	11:1	11:26	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	! sid || ! block_size
EXPR	11:5	11:5	5	! sid || ! block_size
OR	11:5	11:13	6	! sid || ! block_size
EXPR	11:5	11:5	7	! sid
UNARY_EXPR	11:5	11:6	8	! sid
UNARY_OPERATOR	11:5	11:5	9	!
LEAF_NODE	11:5	11:5	10	!
FIELD	11:6	11:6	9	sid
LEAF_NODE	11:6	11:6	10	sid
LEAF_NODE	11:10	11:10	7	||
EXPR	11:13	11:13	7	! block_size
UNARY_EXPR	11:13	11:14	8	! block_size
UNARY_OPERATOR	11:13	11:13	9	!
LEAF_NODE	11:13	11:13	10	!
FIELD	11:14	11:14	9	block_size
LEAF_NODE	11:14	11:14	10	block_size
LEAF_NODE	11:24	11:24	4	)
STATEMENTS	11:26	16:1	4	
LEAF_NODE	11:26	11:26	5	{
STATEMENTS	12:2	15:2	5	
EXPR_STATEMENT	12:2	13:67	6	purple_debug_error ( "jabber" , "IBB session open tag requires sid and block-size attributes\n" ) ;
EXPR	12:2	12:2	7	purple_debug_error ( "jabber" , "IBB session open tag requires sid and block-size attributes\n" )
FUNCTION_CALL	12:2	13:66	8	purple_debug_error ( "jabber" , "IBB session open tag requires sid and block-size attributes\n" )
CALLEE	12:2	12:2	9	purple_debug_error
LEAF_NODE	12:2	12:2	10	purple_debug_error
LEAF_NODE	12:20	12:20	9	(
ARGUMENT	12:21	12:21	9	"jabber"
FIELD	12:21	12:21	10	"jabber"
LEAF_NODE	12:21	12:21	11	"jabber"
LEAF_NODE	12:29	12:29	9	,
ARGUMENT	13:3	13:3	9	"IBB session open tag requires sid and block-size attributes\n"
FIELD	13:3	13:3	10	"IBB session open tag requires sid and block-size attributes\n"
LEAF_NODE	13:3	13:3	11	"IBB session open tag requires sid and block-size attributes\n"
LEAF_NODE	13:66	13:66	9	)
LEAF_NODE	13:67	13:67	7	;
EXPR_STATEMENT	14:2	14:14	6	g_free ( sess ) ;
EXPR	14:2	14:2	7	g_free ( sess )
FUNCTION_CALL	14:2	14:13	8	g_free ( sess )
CALLEE	14:2	14:2	9	g_free
LEAF_NODE	14:2	14:2	10	g_free
LEAF_NODE	14:8	14:8	9	(
ARGUMENT	14:9	14:9	9	sess
FIELD	14:9	14:9	10	sess
LEAF_NODE	14:9	14:9	11	sess
LEAF_NODE	14:13	14:13	9	)
LEAF_NODE	14:14	14:14	7	;
JUMP_STATEMENT	15:2	15:13	6	return NULL ;
KEYWORD	15:2	15:2	7	return
LEAF_NODE	15:2	15:2	8	return
DESTINATION	15:9	15:9	7	NULL
EXPR	15:9	15:9	8	NULL
FIELD	15:9	15:9	9	NULL
LEAF_NODE	15:9	15:9	10	NULL
LEAF_NODE	15:13	15:13	7	;
LEAF_NODE	16:1	16:1	5	}
EXPR_STATEMENT	17:1	17:59	3	sess = jabber_ibb_session_create ( js , sid , from , user_data ) ;
EXPR	17:1	17:1	4	sess = jabber_ibb_session_create ( js , sid , from , user_data )
ASSIGN	17:1	17:8	5	sess = jabber_ibb_session_create ( js , sid , from , user_data )
LVAL	17:1	17:1	6	sess
FIELD	17:1	17:1	7	sess
LEAF_NODE	17:1	17:1	8	sess
ASSIGN_OP	17:6	17:6	6	=
LEAF_NODE	17:6	17:6	7	=
RVAL	17:8	17:8	6	jabber_ibb_session_create ( js , sid , from , user_data )
FUNCTION_CALL	17:8	17:58	7	jabber_ibb_session_create ( js , sid , from , user_data )
CALLEE	17:8	17:8	8	jabber_ibb_session_create
LEAF_NODE	17:8	17:8	9	jabber_ibb_session_create
LEAF_NODE	17:33	17:33	8	(
ARGUMENT	17:34	17:34	8	js
FIELD	17:34	17:34	9	js
LEAF_NODE	17:34	17:34	10	js
LEAF_NODE	17:36	17:36	8	,
ARGUMENT	17:38	17:38	8	sid
FIELD	17:38	17:38	9	sid
LEAF_NODE	17:38	17:38	10	sid
LEAF_NODE	17:41	17:41	8	,
ARGUMENT	17:43	17:43	8	from
FIELD	17:43	17:43	9	from
LEAF_NODE	17:43	17:43	10	from
LEAF_NODE	17:47	17:47	8	,
ARGUMENT	17:49	17:49	8	user_data
FIELD	17:49	17:49	9	user_data
LEAF_NODE	17:49	17:49	10	user_data
LEAF_NODE	17:58	17:58	8	)
LEAF_NODE	17:59	17:59	4	;
EXPR_STATEMENT	18:1	18:24	3	sess -> id = g_strdup ( id ) ;
EXPR	18:1	18:1	4	sess -> id = g_strdup ( id )
ASSIGN	18:1	18:12	5	sess -> id = g_strdup ( id )
LVAL	18:1	18:1	6	sess -> id
FIELD	18:1	18:7	7	sess -> id
LEAF_NODE	18:1	18:1	8	sess
LEAF_NODE	18:5	18:5	8	->
LEAF_NODE	18:7	18:7	8	id
ASSIGN_OP	18:10	18:10	6	=
LEAF_NODE	18:10	18:10	7	=
RVAL	18:12	18:12	6	g_strdup ( id )
FUNCTION_CALL	18:12	18:23	7	g_strdup ( id )
CALLEE	18:12	18:12	8	g_strdup
LEAF_NODE	18:12	18:12	9	g_strdup
LEAF_NODE	18:20	18:20	8	(
ARGUMENT	18:21	18:21	8	id
FIELD	18:21	18:21	9	id
LEAF_NODE	18:21	18:21	10	id
LEAF_NODE	18:23	18:23	8	)
LEAF_NODE	18:24	18:24	4	;
EXPR_STATEMENT	19:1	19:36	3	sess -> block_size = atoi ( block_size ) ;
EXPR	19:1	19:1	4	sess -> block_size = atoi ( block_size )
ASSIGN	19:1	19:20	5	sess -> block_size = atoi ( block_size )
LVAL	19:1	19:1	6	sess -> block_size
FIELD	19:1	19:7	7	sess -> block_size
LEAF_NODE	19:1	19:1	8	sess
LEAF_NODE	19:5	19:5	8	->
LEAF_NODE	19:7	19:7	8	block_size
ASSIGN_OP	19:18	19:18	6	=
LEAF_NODE	19:18	19:18	7	=
RVAL	19:20	19:20	6	atoi ( block_size )
FUNCTION_CALL	19:20	19:35	7	atoi ( block_size )
CALLEE	19:20	19:20	8	atoi
LEAF_NODE	19:20	19:20	9	atoi
LEAF_NODE	19:24	19:24	8	(
ARGUMENT	19:25	19:25	8	block_size
FIELD	19:25	19:25	9	block_size
LEAF_NODE	19:25	19:25	10	block_size
LEAF_NODE	19:35	19:35	8	)
LEAF_NODE	19:36	19:36	4	;
EXPR_STATEMENT	22:1	22:40	3	sess -> state = JABBER_IBB_SESSION_OPENED ;
EXPR	22:1	22:1	4	sess -> state = JABBER_IBB_SESSION_OPENED
ASSIGN	22:1	22:15	5	sess -> state = JABBER_IBB_SESSION_OPENED
LVAL	22:1	22:1	6	sess -> state
FIELD	22:1	22:7	7	sess -> state
LEAF_NODE	22:1	22:1	8	sess
LEAF_NODE	22:5	22:5	8	->
LEAF_NODE	22:7	22:7	8	state
ASSIGN_OP	22:13	22:13	6	=
LEAF_NODE	22:13	22:13	7	=
RVAL	22:15	22:15	6	JABBER_IBB_SESSION_OPENED
FIELD	22:15	22:15	7	JABBER_IBB_SESSION_OPENED
LEAF_NODE	22:15	22:15	8	JABBER_IBB_SESSION_OPENED
LEAF_NODE	22:40	22:40	4	;
JUMP_STATEMENT	23:1	23:12	3	return sess ;
KEYWORD	23:1	23:1	4	return
LEAF_NODE	23:1	23:1	5	return
DESTINATION	23:8	23:8	4	sess
EXPR	23:8	23:8	5	sess
FIELD	23:8	23:8	6	sess
LEAF_NODE	23:8	23:8	7	sess
LEAF_NODE	23:12	23:12	4	;
LEAF_NODE	24:0	24:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	16:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	discolist_ok_cb
LEAF_NODE	2:12	2:12	3	discolist_ok_cb
PARAMETER_LIST	2:27	2:68	2	( PidginDiscoList * pdl , const char * server )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:45	3	PidginDiscoList * pdl
TYPE	2:28	2:44	4	PidginDiscoList *
TYPE_NAME	2:28	2:28	5	PidginDiscoList
LEAF_NODE	2:28	2:28	6	PidginDiscoList
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	pdl
LEAF_NODE	2:45	2:45	5	pdl
LEAF_NODE	2:48	2:48	3	,
PARAMETER_DECL	2:50	2:62	3	const char * server
TYPE	2:50	2:61	4	const char *
TYPE_NAME	2:50	2:56	5	const char
LEAF_NODE	2:50	2:50	6	const
LEAF_NODE	2:56	2:56	6	char
POINTER	2:61	2:61	5	*
LEAF_NODE	2:61	2:61	6	*
NAME	2:62	2:62	4	server
LEAF_NODE	2:62	2:62	5	server
LEAF_NODE	2:68	2:68	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	15:1	2	
EXPR_STATEMENT	4:1	4:34	3	pdl -> dialog -> prompt_handle = NULL ;
EXPR	4:1	4:1	4	pdl -> dialog -> prompt_handle = NULL
ASSIGN	4:1	4:30	5	pdl -> dialog -> prompt_handle = NULL
LVAL	4:1	4:1	6	pdl -> dialog -> prompt_handle
FIELD	4:1	4:14	7	pdl -> dialog -> prompt_handle
LEAF_NODE	4:1	4:1	8	pdl
LEAF_NODE	4:4	4:4	8	->
LEAF_NODE	4:6	4:6	8	dialog
LEAF_NODE	4:12	4:12	8	->
LEAF_NODE	4:14	4:14	8	prompt_handle
ASSIGN_OP	4:28	4:28	6	=
LEAF_NODE	4:28	4:28	7	=
RVAL	4:30	4:30	6	NULL
FIELD	4:30	4:30	7	NULL
LEAF_NODE	4:30	4:30	8	NULL
LEAF_NODE	4:34	4:34	4	;
EXPR_STATEMENT	5:1	5:59	3	gtk_widget_set_sensitive ( pdl -> dialog -> browse_button , TRUE ) ;
EXPR	5:1	5:1	4	gtk_widget_set_sensitive ( pdl -> dialog -> browse_button , TRUE )
FUNCTION_CALL	5:1	5:58	5	gtk_widget_set_sensitive ( pdl -> dialog -> browse_button , TRUE )
CALLEE	5:1	5:1	6	gtk_widget_set_sensitive
LEAF_NODE	5:1	5:1	7	gtk_widget_set_sensitive
LEAF_NODE	5:25	5:25	6	(
ARGUMENT	5:26	5:26	6	pdl -> dialog -> browse_button
FIELD	5:26	5:39	7	pdl -> dialog -> browse_button
LEAF_NODE	5:26	5:26	8	pdl
LEAF_NODE	5:29	5:29	8	->
LEAF_NODE	5:31	5:31	8	dialog
LEAF_NODE	5:37	5:37	8	->
LEAF_NODE	5:39	5:39	8	browse_button
LEAF_NODE	5:52	5:52	6	,
ARGUMENT	5:54	5:54	6	TRUE
FIELD	5:54	5:54	7	TRUE
LEAF_NODE	5:54	5:54	8	TRUE
LEAF_NODE	5:58	5:58	6	)
LEAF_NODE	5:59	5:59	4	;
SELECTION	6:1	6:26	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	! server || ! * server
EXPR	6:5	6:5	5	! server || ! * server
OR	6:5	6:16	6	! server || ! * server
EXPR	6:5	6:5	7	! server
UNARY_EXPR	6:5	6:6	8	! server
UNARY_OPERATOR	6:5	6:5	9	!
LEAF_NODE	6:5	6:5	10	!
FIELD	6:6	6:6	9	server
LEAF_NODE	6:6	6:6	10	server
LEAF_NODE	6:13	6:13	7	||
EXPR	6:16	6:16	7	! * server
UNARY_EXPR	6:16	6:18	8	! * server
UNARY_OPERATOR	6:16	6:16	9	!
LEAF_NODE	6:16	6:16	10	!
UNARY_OPERATOR	6:17	6:17	9	*
LEAF_NODE	6:17	6:17	10	*
FIELD	6:18	6:18	9	server
LEAF_NODE	6:18	6:18	10	server
LEAF_NODE	6:24	6:24	4	)
STATEMENTS	6:26	12:1	4	
LEAF_NODE	6:26	6:26	5	{
STATEMENTS	7:2	11:2	5	
EXPR_STATEMENT	7:2	8:27	6	purple_notify_error ( my_plugin , _ ( "Invalid Server" ) , _ ( "Invalid Server" ) , NULL ) ;
EXPR	7:2	7:2	7	purple_notify_error ( my_plugin , _ ( "Invalid Server" ) , _ ( "Invalid Server" ) , NULL )
FUNCTION_CALL	7:2	8:26	8	purple_notify_error ( my_plugin , _ ( "Invalid Server" ) , _ ( "Invalid Server" ) , NULL )
CALLEE	7:2	7:2	9	purple_notify_error
LEAF_NODE	7:2	7:2	10	purple_notify_error
LEAF_NODE	7:21	7:21	9	(
ARGUMENT	7:22	7:22	9	my_plugin
FIELD	7:22	7:22	10	my_plugin
LEAF_NODE	7:22	7:22	11	my_plugin
LEAF_NODE	7:31	7:31	9	,
ARGUMENT	7:33	7:33	9	_ ( "Invalid Server" )
FUNCTION_CALL	7:33	7:51	10	_ ( "Invalid Server" )
CALLEE	7:33	7:33	11	_
LEAF_NODE	7:33	7:33	12	_
LEAF_NODE	7:34	7:34	11	(
ARGUMENT	7:35	7:35	11	"Invalid Server"
FIELD	7:35	7:35	12	"Invalid Server"
LEAF_NODE	7:35	7:35	13	"Invalid Server"
LEAF_NODE	7:51	7:51	11	)
LEAF_NODE	7:52	7:52	9	,
ARGUMENT	7:54	7:54	9	_ ( "Invalid Server" )
FUNCTION_CALL	7:54	7:72	10	_ ( "Invalid Server" )
CALLEE	7:54	7:54	11	_
LEAF_NODE	7:54	7:54	12	_
LEAF_NODE	7:55	7:55	11	(
ARGUMENT	7:56	7:56	11	"Invalid Server"
FIELD	7:56	7:56	12	"Invalid Server"
LEAF_NODE	7:56	7:56	13	"Invalid Server"
LEAF_NODE	7:72	7:72	11	)
LEAF_NODE	7:73	7:73	9	,
ARGUMENT	8:22	8:22	9	NULL
FIELD	8:22	8:22	10	NULL
LEAF_NODE	8:22	8:22	11	NULL
LEAF_NODE	8:26	8:26	9	)
LEAF_NODE	8:27	8:27	7	;
EXPR_STATEMENT	9:2	9:47	6	pidgin_disco_list_set_in_progress ( pdl , FALSE ) ;
EXPR	9:2	9:2	7	pidgin_disco_list_set_in_progress ( pdl , FALSE )
FUNCTION_CALL	9:2	9:46	8	pidgin_disco_list_set_in_progress ( pdl , FALSE )
CALLEE	9:2	9:2	9	pidgin_disco_list_set_in_progress
LEAF_NODE	9:2	9:2	10	pidgin_disco_list_set_in_progress
LEAF_NODE	9:35	9:35	9	(
ARGUMENT	9:36	9:36	9	pdl
FIELD	9:36	9:36	10	pdl
LEAF_NODE	9:36	9:36	11	pdl
LEAF_NODE	9:39	9:39	9	,
ARGUMENT	9:41	9:41	9	FALSE
FIELD	9:41	9:41	10	FALSE
LEAF_NODE	9:41	9:41	11	FALSE
LEAF_NODE	9:46	9:46	9	)
LEAF_NODE	9:47	9:47	7	;
EXPR_STATEMENT	10:2	10:30	6	pidgin_disco_list_unref ( pdl ) ;
EXPR	10:2	10:2	7	pidgin_disco_list_unref ( pdl )
FUNCTION_CALL	10:2	10:29	8	pidgin_disco_list_unref ( pdl )
CALLEE	10:2	10:2	9	pidgin_disco_list_unref
LEAF_NODE	10:2	10:2	10	pidgin_disco_list_unref
LEAF_NODE	10:25	10:25	9	(
ARGUMENT	10:26	10:26	9	pdl
FIELD	10:26	10:26	10	pdl
LEAF_NODE	10:26	10:26	11	pdl
LEAF_NODE	10:29	10:29	9	)
LEAF_NODE	10:30	10:30	7	;
JUMP_STATEMENT	11:2	11:8	6	return DESTINATION ;
KEYWORD	11:2	11:2	7	return
LEAF_NODE	11:2	11:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	11:8	11:8	7	;
LEAF_NODE	12:1	12:1	5	}
EXPR_STATEMENT	13:1	13:31	3	pdl -> server = g_strdup ( server ) ;
EXPR	13:1	13:1	4	pdl -> server = g_strdup ( server )
ASSIGN	13:1	13:15	5	pdl -> server = g_strdup ( server )
LVAL	13:1	13:1	6	pdl -> server
FIELD	13:1	13:6	7	pdl -> server
LEAF_NODE	13:1	13:1	8	pdl
LEAF_NODE	13:4	13:4	8	->
LEAF_NODE	13:6	13:6	8	server
ASSIGN_OP	13:13	13:13	6	=
LEAF_NODE	13:13	13:13	7	=
RVAL	13:15	13:15	6	g_strdup ( server )
FUNCTION_CALL	13:15	13:30	7	g_strdup ( server )
CALLEE	13:15	13:15	8	g_strdup
LEAF_NODE	13:15	13:15	9	g_strdup
LEAF_NODE	13:23	13:23	8	(
ARGUMENT	13:24	13:24	8	server
FIELD	13:24	13:24	9	server
LEAF_NODE	13:24	13:24	10	server
LEAF_NODE	13:30	13:30	8	)
LEAF_NODE	13:31	13:31	4	;
EXPR_STATEMENT	14:1	14:45	3	pidgin_disco_list_set_in_progress ( pdl , TRUE ) ;
EXPR	14:1	14:1	4	pidgin_disco_list_set_in_progress ( pdl , TRUE )
FUNCTION_CALL	14:1	14:44	5	pidgin_disco_list_set_in_progress ( pdl , TRUE )
CALLEE	14:1	14:1	6	pidgin_disco_list_set_in_progress
LEAF_NODE	14:1	14:1	7	pidgin_disco_list_set_in_progress
LEAF_NODE	14:34	14:34	6	(
ARGUMENT	14:35	14:35	6	pdl
FIELD	14:35	14:35	7	pdl
LEAF_NODE	14:35	14:35	8	pdl
LEAF_NODE	14:38	14:38	6	,
ARGUMENT	14:40	14:40	6	TRUE
FIELD	14:40	14:40	7	TRUE
LEAF_NODE	14:40	14:40	8	TRUE
LEAF_NODE	14:44	14:44	6	)
LEAF_NODE	14:45	14:45	4	;
EXPR_STATEMENT	15:1	15:22	3	xmpp_disco_start ( pdl ) ;
EXPR	15:1	15:1	4	xmpp_disco_start ( pdl )
FUNCTION_CALL	15:1	15:21	5	xmpp_disco_start ( pdl )
CALLEE	15:1	15:1	6	xmpp_disco_start
LEAF_NODE	15:1	15:1	7	xmpp_disco_start
LEAF_NODE	15:17	15:17	6	(
ARGUMENT	15:18	15:18	6	pdl
FIELD	15:18	15:18	7	pdl
LEAF_NODE	15:18	15:18	8	pdl
LEAF_NODE	15:21	15:21	6	)
LEAF_NODE	15:22	15:22	4	;
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	7:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	purple_blist_set_visible
LEAF_NODE	2:5	2:5	3	purple_blist_set_visible
PARAMETER_LIST	2:29	2:43	2	( gboolean show )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:39	3	gboolean show
TYPE	2:30	2:30	4	gboolean
TYPE_NAME	2:30	2:30	5	gboolean
LEAF_NODE	2:30	2:30	6	gboolean
NAME	2:39	2:39	4	show
LEAF_NODE	2:39	2:39	5	show
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:50	3	PurpleBlistUiOps * ops ; ops = purple_blist_get_ui_ops ( ) ;
VAR_DECL	4:1	4:19	4	PurpleBlistUiOps * ops ; ops = purple_blist_get_ui_ops ( )
TYPE	4:1	4:18	5	PurpleBlistUiOps *
TYPE_NAME	4:1	4:1	6	PurpleBlistUiOps
LEAF_NODE	4:1	4:1	7	PurpleBlistUiOps
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	ops
LEAF_NODE	4:19	4:19	6	ops
LEAF_NODE	0:0	0:0	5	;
INIT	4:19	4:19	5	ops = purple_blist_get_ui_ops ( )
ASSIGN	4:19	4:25	6	ops = purple_blist_get_ui_ops ( )
LVAL	4:19	4:19	7	ops
NAME	4:19	4:19	8	ops
LEAF_NODE	4:19	4:19	9	ops
ASSIGN_OP	4:23	4:23	7	=
LEAF_NODE	4:23	4:23	8	=
RVAL	4:25	4:25	7	purple_blist_get_ui_ops ( )
FUNCTION_CALL	4:25	4:49	8	purple_blist_get_ui_ops ( )
CALLEE	4:25	4:25	9	purple_blist_get_ui_ops
LEAF_NODE	4:25	4:25	10	purple_blist_get_ui_ops
LEAF_NODE	4:48	4:48	9	(
LEAF_NODE	4:49	4:49	9	)
LEAF_NODE	4:50	4:50	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	ops && ops -> set_visible
EXPR	5:5	5:5	5	ops && ops -> set_visible
AND	5:5	5:12	6	ops && ops -> set_visible
EXPR	5:5	5:5	7	ops
FIELD	5:5	5:5	8	ops
LEAF_NODE	5:5	5:5	9	ops
LEAF_NODE	5:9	5:9	7	&&
EXPR	5:12	5:12	7	ops -> set_visible
FIELD	5:12	5:17	8	ops -> set_visible
LEAF_NODE	5:12	5:12	9	ops
LEAF_NODE	5:15	5:15	9	->
LEAF_NODE	5:17	5:17	9	set_visible
LEAF_NODE	5:28	5:28	4	)
STATEMENTS	6:2	6:2	4	
EXPR_STATEMENT	6:2	6:41	5	ops -> set_visible ( purplebuddylist , show ) ;
EXPR	6:2	6:2	6	ops -> set_visible ( purplebuddylist , show )
FUNCTION_CALL	6:2	6:40	7	ops -> set_visible ( purplebuddylist , show )
CALLEE	6:2	6:7	8	ops -> set_visible
LEAF_NODE	6:2	6:2	9	ops
LEAF_NODE	6:5	6:5	9	->
LEAF_NODE	6:7	6:7	9	set_visible
LEAF_NODE	6:18	6:18	8	(
ARGUMENT	6:19	6:19	8	purplebuddylist
FIELD	6:19	6:19	9	purplebuddylist
LEAF_NODE	6:19	6:19	10	purplebuddylist
LEAF_NODE	6:34	6:34	8	,
ARGUMENT	6:36	6:36	8	show
FIELD	6:36	6:36	9	show
LEAF_NODE	6:36	6:36	10	show
LEAF_NODE	6:40	6:40	8	)
LEAF_NODE	6:41	6:41	6	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	88:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	purple_media_class_init
LEAF_NODE	2:0	2:0	3	purple_media_class_init
PARAMETER_LIST	2:24	2:48	2	( PurpleMediaClass * klass )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:43	3	PurpleMediaClass * klass
TYPE	2:25	2:42	4	PurpleMediaClass *
TYPE_NAME	2:25	2:25	5	PurpleMediaClass
LEAF_NODE	2:25	2:25	6	PurpleMediaClass
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	klass
LEAF_NODE	2:43	2:43	5	klass
LEAF_NODE	2:48	2:48	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	87:1	2	
SIMPLE_DECL	4:1	4:51	3	GObjectClass * gobject_class ; gobject_class = ( GObjectClass * ) klass ;
VAR_DECL	4:1	4:15	4	GObjectClass * gobject_class ; gobject_class = ( GObjectClass * ) klass
TYPE	4:1	4:14	5	GObjectClass *
TYPE_NAME	4:1	4:1	6	GObjectClass
LEAF_NODE	4:1	4:1	7	GObjectClass
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	gobject_class
LEAF_NODE	4:15	4:15	6	gobject_class
LEAF_NODE	0:0	0:0	5	;
INIT	4:15	4:15	5	gobject_class = ( GObjectClass * ) klass
ASSIGN	4:15	4:31	6	gobject_class = ( GObjectClass * ) klass
LVAL	4:15	4:15	7	gobject_class
NAME	4:15	4:15	8	gobject_class
LEAF_NODE	4:15	4:15	9	gobject_class
ASSIGN_OP	4:29	4:29	7	=
LEAF_NODE	4:29	4:29	8	=
RVAL	4:31	4:46	7	( GObjectClass * ) klass
LEAF_NODE	4:31	4:31	8	(
TYPE_NAME	4:32	4:32	8	GObjectClass
LEAF_NODE	4:32	4:32	9	GObjectClass
LEAF_NODE	4:44	4:44	8	*
LEAF_NODE	4:45	4:45	8	)
FIELD	4:46	4:46	8	klass
LEAF_NODE	4:46	4:46	9	klass
LEAF_NODE	4:51	4:51	4	;
EXPR_STATEMENT	5:1	5:47	3	parent_class = g_type_class_peek_parent ( klass ) ;
EXPR	5:1	5:1	4	parent_class = g_type_class_peek_parent ( klass )
ASSIGN	5:1	5:16	5	parent_class = g_type_class_peek_parent ( klass )
LVAL	5:1	5:1	6	parent_class
FIELD	5:1	5:1	7	parent_class
LEAF_NODE	5:1	5:1	8	parent_class
ASSIGN_OP	5:14	5:14	6	=
LEAF_NODE	5:14	5:14	7	=
RVAL	5:16	5:16	6	g_type_class_peek_parent ( klass )
FUNCTION_CALL	5:16	5:46	7	g_type_class_peek_parent ( klass )
CALLEE	5:16	5:16	8	g_type_class_peek_parent
LEAF_NODE	5:16	5:16	9	g_type_class_peek_parent
LEAF_NODE	5:40	5:40	8	(
ARGUMENT	5:41	5:41	8	klass
FIELD	5:41	5:41	9	klass
LEAF_NODE	5:41	5:41	10	klass
LEAF_NODE	5:46	5:46	8	)
LEAF_NODE	5:47	5:47	4	;
EXPR_STATEMENT	6:1	6:46	3	gobject_class -> dispose = purple_media_dispose ;
EXPR	6:1	6:1	4	gobject_class -> dispose = purple_media_dispose
ASSIGN	6:1	6:26	5	gobject_class -> dispose = purple_media_dispose
LVAL	6:1	6:1	6	gobject_class -> dispose
FIELD	6:1	6:16	7	gobject_class -> dispose
LEAF_NODE	6:1	6:1	8	gobject_class
LEAF_NODE	6:14	6:14	8	->
LEAF_NODE	6:16	6:16	8	dispose
ASSIGN_OP	6:24	6:24	6	=
LEAF_NODE	6:24	6:24	7	=
RVAL	6:26	6:26	6	purple_media_dispose
FIELD	6:26	6:26	7	purple_media_dispose
LEAF_NODE	6:26	6:26	8	purple_media_dispose
LEAF_NODE	6:46	6:46	4	;
EXPR_STATEMENT	7:1	7:48	3	gobject_class -> finalize = purple_media_finalize ;
EXPR	7:1	7:1	4	gobject_class -> finalize = purple_media_finalize
ASSIGN	7:1	7:27	5	gobject_class -> finalize = purple_media_finalize
LVAL	7:1	7:1	6	gobject_class -> finalize
FIELD	7:1	7:16	7	gobject_class -> finalize
LEAF_NODE	7:1	7:1	8	gobject_class
LEAF_NODE	7:14	7:14	8	->
LEAF_NODE	7:16	7:16	8	finalize
ASSIGN_OP	7:25	7:25	6	=
LEAF_NODE	7:25	7:25	7	=
RVAL	7:27	7:27	6	purple_media_finalize
FIELD	7:27	7:27	7	purple_media_finalize
LEAF_NODE	7:27	7:27	8	purple_media_finalize
LEAF_NODE	7:48	7:48	4	;
EXPR_STATEMENT	8:1	8:56	3	gobject_class -> set_property = purple_media_set_property ;
EXPR	8:1	8:1	4	gobject_class -> set_property = purple_media_set_property
ASSIGN	8:1	8:31	5	gobject_class -> set_property = purple_media_set_property
LVAL	8:1	8:1	6	gobject_class -> set_property
FIELD	8:1	8:16	7	gobject_class -> set_property
LEAF_NODE	8:1	8:1	8	gobject_class
LEAF_NODE	8:14	8:14	8	->
LEAF_NODE	8:16	8:16	8	set_property
ASSIGN_OP	8:29	8:29	6	=
LEAF_NODE	8:29	8:29	7	=
RVAL	8:31	8:31	6	purple_media_set_property
FIELD	8:31	8:31	7	purple_media_set_property
LEAF_NODE	8:31	8:31	8	purple_media_set_property
LEAF_NODE	8:56	8:56	4	;
EXPR_STATEMENT	9:1	9:56	3	gobject_class -> get_property = purple_media_get_property ;
EXPR	9:1	9:1	4	gobject_class -> get_property = purple_media_get_property
ASSIGN	9:1	9:31	5	gobject_class -> get_property = purple_media_get_property
LVAL	9:1	9:1	6	gobject_class -> get_property
FIELD	9:1	9:16	7	gobject_class -> get_property
LEAF_NODE	9:1	9:1	8	gobject_class
LEAF_NODE	9:14	9:14	8	->
LEAF_NODE	9:16	9:16	8	get_property
ASSIGN_OP	9:29	9:29	6	=
LEAF_NODE	9:29	9:29	7	=
RVAL	9:31	9:31	6	purple_media_get_property
FIELD	9:31	9:31	7	purple_media_get_property
LEAF_NODE	9:31	9:31	8	purple_media_get_property
LEAF_NODE	9:56	9:56	4	;
EXPR_STATEMENT	10:1	15:47	3	g_object_class_install_property ( gobject_class , PROP_MANAGER , g_param_spec_object ( "manager" , "Purple Media Manager" , "The media manager that contains this media session." , PURPLE_TYPE_MEDIA_MANAGER , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE ) ) ;
EXPR	10:1	10:1	4	g_object_class_install_property ( gobject_class , PROP_MANAGER , g_param_spec_object ( "manager" , "Purple Media Manager" , "The media manager that contains this media session." , PURPLE_TYPE_MEDIA_MANAGER , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE ) )
FUNCTION_CALL	10:1	15:46	5	g_object_class_install_property ( gobject_class , PROP_MANAGER , g_param_spec_object ( "manager" , "Purple Media Manager" , "The media manager that contains this media session." , PURPLE_TYPE_MEDIA_MANAGER , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE ) )
CALLEE	10:1	10:1	6	g_object_class_install_property
LEAF_NODE	10:1	10:1	7	g_object_class_install_property
LEAF_NODE	10:32	10:32	6	(
ARGUMENT	10:33	10:33	6	gobject_class
FIELD	10:33	10:33	7	gobject_class
LEAF_NODE	10:33	10:33	8	gobject_class
LEAF_NODE	10:46	10:46	6	,
ARGUMENT	10:48	10:48	6	PROP_MANAGER
FIELD	10:48	10:48	7	PROP_MANAGER
LEAF_NODE	10:48	10:48	8	PROP_MANAGER
LEAF_NODE	10:60	10:60	6	,
ARGUMENT	11:3	11:3	6	g_param_spec_object ( "manager" , "Purple Media Manager" , "The media manager that contains this media session." , PURPLE_TYPE_MEDIA_MANAGER , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE )
FUNCTION_CALL	11:3	15:45	7	g_param_spec_object ( "manager" , "Purple Media Manager" , "The media manager that contains this media session." , PURPLE_TYPE_MEDIA_MANAGER , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE )
CALLEE	11:3	11:3	8	g_param_spec_object
LEAF_NODE	11:3	11:3	9	g_param_spec_object
LEAF_NODE	11:22	11:22	8	(
ARGUMENT	11:23	11:23	8	"manager"
FIELD	11:23	11:23	9	"manager"
LEAF_NODE	11:23	11:23	10	"manager"
LEAF_NODE	11:32	11:32	8	,
ARGUMENT	12:3	12:3	8	"Purple Media Manager"
FIELD	12:3	12:3	9	"Purple Media Manager"
LEAF_NODE	12:3	12:3	10	"Purple Media Manager"
LEAF_NODE	12:25	12:25	8	,
ARGUMENT	13:3	13:3	8	"The media manager that contains this media session."
FIELD	13:3	13:3	9	"The media manager that contains this media session."
LEAF_NODE	13:3	13:3	10	"The media manager that contains this media session."
LEAF_NODE	13:56	13:56	8	,
ARGUMENT	14:3	14:3	8	PURPLE_TYPE_MEDIA_MANAGER
FIELD	14:3	14:3	9	PURPLE_TYPE_MEDIA_MANAGER
LEAF_NODE	14:3	14:3	10	PURPLE_TYPE_MEDIA_MANAGER
LEAF_NODE	14:28	14:28	8	,
ARGUMENT	15:3	15:3	8	G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE
BIT_OR	15:3	15:28	9	G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE
BIT_OR_ELEM	15:3	15:3	10	G_PARAM_CONSTRUCT_ONLY
FIELD	15:3	15:3	11	G_PARAM_CONSTRUCT_ONLY
LEAF_NODE	15:3	15:3	12	G_PARAM_CONSTRUCT_ONLY
LEAF_NODE	15:26	15:26	10	|
BIT_OR_ELEM	15:28	15:28	10	G_PARAM_READWRITE
FIELD	15:28	15:28	11	G_PARAM_READWRITE
LEAF_NODE	15:28	15:28	12	G_PARAM_READWRITE
LEAF_NODE	15:45	15:45	8	)
LEAF_NODE	15:46	15:46	6	)
LEAF_NODE	15:47	15:47	4	;
EXPR_STATEMENT	20:1	25:21	3	g_object_class_install_property ( gobject_class , PROP_BACKEND , g_param_spec_object ( "backend" , "Purple Media Backend" , "The backend object this media object uses." , G_TYPE_OBJECT , G_PARAM_READABLE ) ) ;
EXPR	20:1	20:1	4	g_object_class_install_property ( gobject_class , PROP_BACKEND , g_param_spec_object ( "backend" , "Purple Media Backend" , "The backend object this media object uses." , G_TYPE_OBJECT , G_PARAM_READABLE ) )
FUNCTION_CALL	20:1	25:20	5	g_object_class_install_property ( gobject_class , PROP_BACKEND , g_param_spec_object ( "backend" , "Purple Media Backend" , "The backend object this media object uses." , G_TYPE_OBJECT , G_PARAM_READABLE ) )
CALLEE	20:1	20:1	6	g_object_class_install_property
LEAF_NODE	20:1	20:1	7	g_object_class_install_property
LEAF_NODE	20:32	20:32	6	(
ARGUMENT	20:33	20:33	6	gobject_class
FIELD	20:33	20:33	7	gobject_class
LEAF_NODE	20:33	20:33	8	gobject_class
LEAF_NODE	20:46	20:46	6	,
ARGUMENT	20:48	20:48	6	PROP_BACKEND
FIELD	20:48	20:48	7	PROP_BACKEND
LEAF_NODE	20:48	20:48	8	PROP_BACKEND
LEAF_NODE	20:60	20:60	6	,
ARGUMENT	21:3	21:3	6	g_param_spec_object ( "backend" , "Purple Media Backend" , "The backend object this media object uses." , G_TYPE_OBJECT , G_PARAM_READABLE )
FUNCTION_CALL	21:3	25:19	7	g_param_spec_object ( "backend" , "Purple Media Backend" , "The backend object this media object uses." , G_TYPE_OBJECT , G_PARAM_READABLE )
CALLEE	21:3	21:3	8	g_param_spec_object
LEAF_NODE	21:3	21:3	9	g_param_spec_object
LEAF_NODE	21:22	21:22	8	(
ARGUMENT	21:23	21:23	8	"backend"
FIELD	21:23	21:23	9	"backend"
LEAF_NODE	21:23	21:23	10	"backend"
LEAF_NODE	21:32	21:32	8	,
ARGUMENT	22:3	22:3	8	"Purple Media Backend"
FIELD	22:3	22:3	9	"Purple Media Backend"
LEAF_NODE	22:3	22:3	10	"Purple Media Backend"
LEAF_NODE	22:25	22:25	8	,
ARGUMENT	23:3	23:3	8	"The backend object this media object uses."
FIELD	23:3	23:3	9	"The backend object this media object uses."
LEAF_NODE	23:3	23:3	10	"The backend object this media object uses."
LEAF_NODE	23:47	23:47	8	,
ARGUMENT	24:3	24:3	8	G_TYPE_OBJECT
FIELD	24:3	24:3	9	G_TYPE_OBJECT
LEAF_NODE	24:3	24:3	10	G_TYPE_OBJECT
LEAF_NODE	24:16	24:16	8	,
ARGUMENT	25:3	25:3	8	G_PARAM_READABLE
FIELD	25:3	25:3	9	G_PARAM_READABLE
LEAF_NODE	25:3	25:3	10	G_PARAM_READABLE
LEAF_NODE	25:19	25:19	8	)
LEAF_NODE	25:20	25:20	6	)
LEAF_NODE	25:21	25:21	4	;
EXPR_STATEMENT	26:1	30:47	3	g_object_class_install_property ( gobject_class , PROP_ACCOUNT , g_param_spec_pointer ( "account" , "PurpleAccount" , "The account this media session is on." , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE ) ) ;
EXPR	26:1	26:1	4	g_object_class_install_property ( gobject_class , PROP_ACCOUNT , g_param_spec_pointer ( "account" , "PurpleAccount" , "The account this media session is on." , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE ) )
FUNCTION_CALL	26:1	30:46	5	g_object_class_install_property ( gobject_class , PROP_ACCOUNT , g_param_spec_pointer ( "account" , "PurpleAccount" , "The account this media session is on." , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE ) )
CALLEE	26:1	26:1	6	g_object_class_install_property
LEAF_NODE	26:1	26:1	7	g_object_class_install_property
LEAF_NODE	26:32	26:32	6	(
ARGUMENT	26:33	26:33	6	gobject_class
FIELD	26:33	26:33	7	gobject_class
LEAF_NODE	26:33	26:33	8	gobject_class
LEAF_NODE	26:46	26:46	6	,
ARGUMENT	26:48	26:48	6	PROP_ACCOUNT
FIELD	26:48	26:48	7	PROP_ACCOUNT
LEAF_NODE	26:48	26:48	8	PROP_ACCOUNT
LEAF_NODE	26:60	26:60	6	,
ARGUMENT	27:3	27:3	6	g_param_spec_pointer ( "account" , "PurpleAccount" , "The account this media session is on." , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE )
FUNCTION_CALL	27:3	30:45	7	g_param_spec_pointer ( "account" , "PurpleAccount" , "The account this media session is on." , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE )
CALLEE	27:3	27:3	8	g_param_spec_pointer
LEAF_NODE	27:3	27:3	9	g_param_spec_pointer
LEAF_NODE	27:23	27:23	8	(
ARGUMENT	27:24	27:24	8	"account"
FIELD	27:24	27:24	9	"account"
LEAF_NODE	27:24	27:24	10	"account"
LEAF_NODE	27:33	27:33	8	,
ARGUMENT	28:3	28:3	8	"PurpleAccount"
FIELD	28:3	28:3	9	"PurpleAccount"
LEAF_NODE	28:3	28:3	10	"PurpleAccount"
LEAF_NODE	28:18	28:18	8	,
ARGUMENT	29:3	29:3	8	"The account this media session is on."
FIELD	29:3	29:3	9	"The account this media session is on."
LEAF_NODE	29:3	29:3	10	"The account this media session is on."
LEAF_NODE	29:42	29:42	8	,
ARGUMENT	30:3	30:3	8	G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE
BIT_OR	30:3	30:28	9	G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE
BIT_OR_ELEM	30:3	30:3	10	G_PARAM_CONSTRUCT_ONLY
FIELD	30:3	30:3	11	G_PARAM_CONSTRUCT_ONLY
LEAF_NODE	30:3	30:3	12	G_PARAM_CONSTRUCT_ONLY
LEAF_NODE	30:26	30:26	10	|
BIT_OR_ELEM	30:28	30:28	10	G_PARAM_READWRITE
FIELD	30:28	30:28	11	G_PARAM_READWRITE
LEAF_NODE	30:28	30:28	12	G_PARAM_READWRITE
LEAF_NODE	30:45	30:45	8	)
LEAF_NODE	30:46	30:46	6	)
LEAF_NODE	30:47	30:47	4	;
LEAF_NODE	31:1	31:1	3	g_object_class_install_property
LEAF_NODE	31:32	31:32	3	(
LEAF_NODE	31:33	31:33	3	gobject_class
LEAF_NODE	31:46	31:46	3	,
LEAF_NODE	31:48	31:48	3	PROP_CONFERENCE_TYPE
LEAF_NODE	31:68	31:68	3	,
LEAF_NODE	32:3	32:3	3	g_param_spec_string
LEAF_NODE	32:22	32:22	3	(
LEAF_NODE	32:23	32:23	3	"conference-type"
LEAF_NODE	32:40	32:40	3	,
LEAF_NODE	33:3	33:3	3	"Conference Type"
LEAF_NODE	33:20	33:20	3	,
LEAF_NODE	34:3	34:3	3	"The type of conference that this media object "
LEAF_NODE	35:3	35:3	3	"has been created to provide."
LEAF_NODE	35:33	35:33	3	,
LEAF_NODE	36:3	36:3	3	NULL
LEAF_NODE	36:7	36:7	3	,
LEAF_NODE	37:3	37:3	3	G_PARAM_CONSTRUCT_ONLY
LEAF_NODE	37:26	37:26	3	|
LEAF_NODE	37:28	37:28	3	G_PARAM_READWRITE
LEAF_NODE	37:45	37:45	3	)
LEAF_NODE	37:46	37:46	3	)
LEAF_NODE	37:47	37:47	3	;
EXPR_STATEMENT	38:1	43:47	3	g_object_class_install_property ( gobject_class , PROP_INITIATOR , g_param_spec_boolean ( "initiator" , "initiator" , "If the local user initiated the conference." , FALSE , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE ) ) ;
EXPR	38:1	38:1	4	g_object_class_install_property ( gobject_class , PROP_INITIATOR , g_param_spec_boolean ( "initiator" , "initiator" , "If the local user initiated the conference." , FALSE , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE ) )
FUNCTION_CALL	38:1	43:46	5	g_object_class_install_property ( gobject_class , PROP_INITIATOR , g_param_spec_boolean ( "initiator" , "initiator" , "If the local user initiated the conference." , FALSE , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE ) )
CALLEE	38:1	38:1	6	g_object_class_install_property
LEAF_NODE	38:1	38:1	7	g_object_class_install_property
LEAF_NODE	38:32	38:32	6	(
ARGUMENT	38:33	38:33	6	gobject_class
FIELD	38:33	38:33	7	gobject_class
LEAF_NODE	38:33	38:33	8	gobject_class
LEAF_NODE	38:46	38:46	6	,
ARGUMENT	38:48	38:48	6	PROP_INITIATOR
FIELD	38:48	38:48	7	PROP_INITIATOR
LEAF_NODE	38:48	38:48	8	PROP_INITIATOR
LEAF_NODE	38:62	38:62	6	,
ARGUMENT	39:3	39:3	6	g_param_spec_boolean ( "initiator" , "initiator" , "If the local user initiated the conference." , FALSE , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE )
FUNCTION_CALL	39:3	43:45	7	g_param_spec_boolean ( "initiator" , "initiator" , "If the local user initiated the conference." , FALSE , G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE )
CALLEE	39:3	39:3	8	g_param_spec_boolean
LEAF_NODE	39:3	39:3	9	g_param_spec_boolean
LEAF_NODE	39:23	39:23	8	(
ARGUMENT	39:24	39:24	8	"initiator"
FIELD	39:24	39:24	9	"initiator"
LEAF_NODE	39:24	39:24	10	"initiator"
LEAF_NODE	39:35	39:35	8	,
ARGUMENT	40:3	40:3	8	"initiator"
FIELD	40:3	40:3	9	"initiator"
LEAF_NODE	40:3	40:3	10	"initiator"
LEAF_NODE	40:14	40:14	8	,
ARGUMENT	41:3	41:3	8	"If the local user initiated the conference."
FIELD	41:3	41:3	9	"If the local user initiated the conference."
LEAF_NODE	41:3	41:3	10	"If the local user initiated the conference."
LEAF_NODE	41:48	41:48	8	,
ARGUMENT	42:3	42:3	8	FALSE
FIELD	42:3	42:3	9	FALSE
LEAF_NODE	42:3	42:3	10	FALSE
LEAF_NODE	42:8	42:8	8	,
ARGUMENT	43:3	43:3	8	G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE
BIT_OR	43:3	43:28	9	G_PARAM_CONSTRUCT_ONLY | G_PARAM_READWRITE
BIT_OR_ELEM	43:3	43:3	10	G_PARAM_CONSTRUCT_ONLY
FIELD	43:3	43:3	11	G_PARAM_CONSTRUCT_ONLY
LEAF_NODE	43:3	43:3	12	G_PARAM_CONSTRUCT_ONLY
LEAF_NODE	43:26	43:26	10	|
BIT_OR_ELEM	43:28	43:28	10	G_PARAM_READWRITE
FIELD	43:28	43:28	11	G_PARAM_READWRITE
LEAF_NODE	43:28	43:28	12	G_PARAM_READWRITE
LEAF_NODE	43:45	43:45	8	)
LEAF_NODE	43:46	43:46	6	)
LEAF_NODE	43:47	43:47	4	;
EXPR_STATEMENT	44:1	48:22	3	g_object_class_install_property ( gobject_class , PROP_PRPL_DATA , g_param_spec_pointer ( "prpl-data" , "gpointer" , "Data the prpl plugin set on the media session." , G_PARAM_READWRITE ) ) ;
EXPR	44:1	44:1	4	g_object_class_install_property ( gobject_class , PROP_PRPL_DATA , g_param_spec_pointer ( "prpl-data" , "gpointer" , "Data the prpl plugin set on the media session." , G_PARAM_READWRITE ) )
FUNCTION_CALL	44:1	48:21	5	g_object_class_install_property ( gobject_class , PROP_PRPL_DATA , g_param_spec_pointer ( "prpl-data" , "gpointer" , "Data the prpl plugin set on the media session." , G_PARAM_READWRITE ) )
CALLEE	44:1	44:1	6	g_object_class_install_property
LEAF_NODE	44:1	44:1	7	g_object_class_install_property
LEAF_NODE	44:32	44:32	6	(
ARGUMENT	44:33	44:33	6	gobject_class
FIELD	44:33	44:33	7	gobject_class
LEAF_NODE	44:33	44:33	8	gobject_class
LEAF_NODE	44:46	44:46	6	,
ARGUMENT	44:48	44:48	6	PROP_PRPL_DATA
FIELD	44:48	44:48	7	PROP_PRPL_DATA
LEAF_NODE	44:48	44:48	8	PROP_PRPL_DATA
LEAF_NODE	44:62	44:62	6	,
ARGUMENT	45:3	45:3	6	g_param_spec_pointer ( "prpl-data" , "gpointer" , "Data the prpl plugin set on the media session." , G_PARAM_READWRITE )
FUNCTION_CALL	45:3	48:20	7	g_param_spec_pointer ( "prpl-data" , "gpointer" , "Data the prpl plugin set on the media session." , G_PARAM_READWRITE )
CALLEE	45:3	45:3	8	g_param_spec_pointer
LEAF_NODE	45:3	45:3	9	g_param_spec_pointer
LEAF_NODE	45:23	45:23	8	(
ARGUMENT	45:24	45:24	8	"prpl-data"
FIELD	45:24	45:24	9	"prpl-data"
LEAF_NODE	45:24	45:24	10	"prpl-data"
LEAF_NODE	45:35	45:35	8	,
ARGUMENT	46:3	46:3	8	"gpointer"
FIELD	46:3	46:3	9	"gpointer"
LEAF_NODE	46:3	46:3	10	"gpointer"
LEAF_NODE	46:13	46:13	8	,
ARGUMENT	47:3	47:3	8	"Data the prpl plugin set on the media session."
FIELD	47:3	47:3	9	"Data the prpl plugin set on the media session."
LEAF_NODE	47:3	47:3	10	"Data the prpl plugin set on the media session."
LEAF_NODE	47:51	47:51	8	,
ARGUMENT	48:3	48:3	8	G_PARAM_READWRITE
FIELD	48:3	48:3	9	G_PARAM_READWRITE
LEAF_NODE	48:3	48:3	10	G_PARAM_READWRITE
LEAF_NODE	48:20	48:20	8	)
LEAF_NODE	48:21	48:21	6	)
LEAF_NODE	48:22	48:22	4	;
EXPR_STATEMENT	49:1	52:36	3	purple_media_signals [ S_ERROR ] = g_signal_new ( "error" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , g_cclosure_marshal_VOID__STRING , G_TYPE_NONE , 1 , G_TYPE_STRING ) ;
EXPR	49:1	49:1	4	purple_media_signals [ S_ERROR ] = g_signal_new ( "error" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , g_cclosure_marshal_VOID__STRING , G_TYPE_NONE , 1 , G_TYPE_STRING )
ASSIGN	49:1	49:33	5	purple_media_signals [ S_ERROR ] = g_signal_new ( "error" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , g_cclosure_marshal_VOID__STRING , G_TYPE_NONE , 1 , G_TYPE_STRING )
LVAL	49:1	49:1	6	purple_media_signals [ S_ERROR ]
FIELD	49:1	49:29	7	purple_media_signals [ S_ERROR ]
LEAF_NODE	49:1	49:1	8	purple_media_signals
LEAF_NODE	49:21	49:21	8	[
EXPR	49:22	49:22	8	S_ERROR
FIELD	49:22	49:22	9	S_ERROR
LEAF_NODE	49:22	49:22	10	S_ERROR
LEAF_NODE	49:29	49:29	8	]
ASSIGN_OP	49:31	49:31	6	=
LEAF_NODE	49:31	49:31	7	=
RVAL	49:33	49:33	6	g_signal_new ( "error" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , g_cclosure_marshal_VOID__STRING , G_TYPE_NONE , 1 , G_TYPE_STRING )
FUNCTION_CALL	49:33	52:35	7	g_signal_new ( "error" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , g_cclosure_marshal_VOID__STRING , G_TYPE_NONE , 1 , G_TYPE_STRING )
CALLEE	49:33	49:33	8	g_signal_new
LEAF_NODE	49:33	49:33	9	g_signal_new
LEAF_NODE	49:45	49:45	8	(
ARGUMENT	49:46	49:46	8	"error"
FIELD	49:46	49:46	9	"error"
LEAF_NODE	49:46	49:46	10	"error"
LEAF_NODE	49:53	49:53	8	,
ARGUMENT	49:55	49:55	8	G_TYPE_FROM_CLASS ( klass )
FUNCTION_CALL	49:55	49:78	9	G_TYPE_FROM_CLASS ( klass )
CALLEE	49:55	49:55	10	G_TYPE_FROM_CLASS
LEAF_NODE	49:55	49:55	11	G_TYPE_FROM_CLASS
LEAF_NODE	49:72	49:72	10	(
ARGUMENT	49:73	49:73	10	klass
FIELD	49:73	49:73	11	klass
LEAF_NODE	49:73	49:73	12	klass
LEAF_NODE	49:78	49:78	10	)
LEAF_NODE	49:79	49:79	8	,
ARGUMENT	50:6	50:6	8	G_SIGNAL_RUN_LAST
FIELD	50:6	50:6	9	G_SIGNAL_RUN_LAST
LEAF_NODE	50:6	50:6	10	G_SIGNAL_RUN_LAST
LEAF_NODE	50:23	50:23	8	,
ARGUMENT	50:25	50:25	8	0
FIELD	50:25	50:25	9	0
LEAF_NODE	50:25	50:25	10	0
LEAF_NODE	50:26	50:26	8	,
ARGUMENT	50:28	50:28	8	NULL
FIELD	50:28	50:28	9	NULL
LEAF_NODE	50:28	50:28	10	NULL
LEAF_NODE	50:32	50:32	8	,
ARGUMENT	50:34	50:34	8	NULL
FIELD	50:34	50:34	9	NULL
LEAF_NODE	50:34	50:34	10	NULL
LEAF_NODE	50:38	50:38	8	,
ARGUMENT	51:6	51:6	8	g_cclosure_marshal_VOID__STRING
FIELD	51:6	51:6	9	g_cclosure_marshal_VOID__STRING
LEAF_NODE	51:6	51:6	10	g_cclosure_marshal_VOID__STRING
LEAF_NODE	51:37	51:37	8	,
ARGUMENT	52:6	52:6	8	G_TYPE_NONE
FIELD	52:6	52:6	9	G_TYPE_NONE
LEAF_NODE	52:6	52:6	10	G_TYPE_NONE
LEAF_NODE	52:17	52:17	8	,
ARGUMENT	52:19	52:19	8	1
FIELD	52:19	52:19	9	1
LEAF_NODE	52:19	52:19	10	1
LEAF_NODE	52:20	52:20	8	,
ARGUMENT	52:22	52:22	8	G_TYPE_STRING
FIELD	52:22	52:22	9	G_TYPE_STRING
LEAF_NODE	52:22	52:22	10	G_TYPE_STRING
LEAF_NODE	52:35	52:35	8	)
LEAF_NODE	52:36	52:36	4	;
EXPR_STATEMENT	53:1	57:20	3	purple_media_signals [ CANDIDATES_PREPARED ] = g_signal_new ( "candidates-prepared" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__STRING_STRING , G_TYPE_NONE , 2 , G_TYPE_STRING , G_TYPE_STRING ) ;
EXPR	53:1	53:1	4	purple_media_signals [ CANDIDATES_PREPARED ] = g_signal_new ( "candidates-prepared" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__STRING_STRING , G_TYPE_NONE , 2 , G_TYPE_STRING , G_TYPE_STRING )
ASSIGN	53:1	53:45	5	purple_media_signals [ CANDIDATES_PREPARED ] = g_signal_new ( "candidates-prepared" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__STRING_STRING , G_TYPE_NONE , 2 , G_TYPE_STRING , G_TYPE_STRING )
LVAL	53:1	53:1	6	purple_media_signals [ CANDIDATES_PREPARED ]
FIELD	53:1	53:41	7	purple_media_signals [ CANDIDATES_PREPARED ]
LEAF_NODE	53:1	53:1	8	purple_media_signals
LEAF_NODE	53:21	53:21	8	[
EXPR	53:22	53:22	8	CANDIDATES_PREPARED
FIELD	53:22	53:22	9	CANDIDATES_PREPARED
LEAF_NODE	53:22	53:22	10	CANDIDATES_PREPARED
LEAF_NODE	53:41	53:41	8	]
ASSIGN_OP	53:43	53:43	6	=
LEAF_NODE	53:43	53:43	7	=
RVAL	53:45	53:45	6	g_signal_new ( "candidates-prepared" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__STRING_STRING , G_TYPE_NONE , 2 , G_TYPE_STRING , G_TYPE_STRING )
FUNCTION_CALL	53:45	57:19	7	g_signal_new ( "candidates-prepared" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__STRING_STRING , G_TYPE_NONE , 2 , G_TYPE_STRING , G_TYPE_STRING )
CALLEE	53:45	53:45	8	g_signal_new
LEAF_NODE	53:45	53:45	9	g_signal_new
LEAF_NODE	53:57	53:57	8	(
ARGUMENT	53:58	53:58	8	"candidates-prepared"
FIELD	53:58	53:58	9	"candidates-prepared"
LEAF_NODE	53:58	53:58	10	"candidates-prepared"
LEAF_NODE	53:79	53:79	8	,
ARGUMENT	53:81	53:81	8	G_TYPE_FROM_CLASS ( klass )
FUNCTION_CALL	53:81	53:104	9	G_TYPE_FROM_CLASS ( klass )
CALLEE	53:81	53:81	10	G_TYPE_FROM_CLASS
LEAF_NODE	53:81	53:81	11	G_TYPE_FROM_CLASS
LEAF_NODE	53:98	53:98	10	(
ARGUMENT	53:99	53:99	10	klass
FIELD	53:99	53:99	11	klass
LEAF_NODE	53:99	53:99	12	klass
LEAF_NODE	53:104	53:104	10	)
LEAF_NODE	53:105	53:105	8	,
ARGUMENT	54:6	54:6	8	G_SIGNAL_RUN_LAST
FIELD	54:6	54:6	9	G_SIGNAL_RUN_LAST
LEAF_NODE	54:6	54:6	10	G_SIGNAL_RUN_LAST
LEAF_NODE	54:23	54:23	8	,
ARGUMENT	54:25	54:25	8	0
FIELD	54:25	54:25	9	0
LEAF_NODE	54:25	54:25	10	0
LEAF_NODE	54:26	54:26	8	,
ARGUMENT	54:28	54:28	8	NULL
FIELD	54:28	54:28	9	NULL
LEAF_NODE	54:28	54:28	10	NULL
LEAF_NODE	54:32	54:32	8	,
ARGUMENT	54:34	54:34	8	NULL
FIELD	54:34	54:34	9	NULL
LEAF_NODE	54:34	54:34	10	NULL
LEAF_NODE	54:38	54:38	8	,
ARGUMENT	55:6	55:6	8	purple_smarshal_VOID__STRING_STRING
FIELD	55:6	55:6	9	purple_smarshal_VOID__STRING_STRING
LEAF_NODE	55:6	55:6	10	purple_smarshal_VOID__STRING_STRING
LEAF_NODE	55:41	55:41	8	,
ARGUMENT	56:6	56:6	8	G_TYPE_NONE
FIELD	56:6	56:6	9	G_TYPE_NONE
LEAF_NODE	56:6	56:6	10	G_TYPE_NONE
LEAF_NODE	56:17	56:17	8	,
ARGUMENT	56:19	56:19	8	2
FIELD	56:19	56:19	9	2
LEAF_NODE	56:19	56:19	10	2
LEAF_NODE	56:20	56:20	8	,
ARGUMENT	56:22	56:22	8	G_TYPE_STRING
FIELD	56:22	56:22	9	G_TYPE_STRING
LEAF_NODE	56:22	56:22	10	G_TYPE_STRING
LEAF_NODE	56:35	56:35	8	,
ARGUMENT	57:6	57:6	8	G_TYPE_STRING
FIELD	57:6	57:6	9	G_TYPE_STRING
LEAF_NODE	57:6	57:6	10	G_TYPE_STRING
LEAF_NODE	57:19	57:19	8	)
LEAF_NODE	57:20	57:20	4	;
EXPR_STATEMENT	58:1	61:36	3	purple_media_signals [ CODECS_CHANGED ] = g_signal_new ( "codecs-changed" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , g_cclosure_marshal_VOID__STRING , G_TYPE_NONE , 1 , G_TYPE_STRING ) ;
EXPR	58:1	58:1	4	purple_media_signals [ CODECS_CHANGED ] = g_signal_new ( "codecs-changed" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , g_cclosure_marshal_VOID__STRING , G_TYPE_NONE , 1 , G_TYPE_STRING )
ASSIGN	58:1	58:40	5	purple_media_signals [ CODECS_CHANGED ] = g_signal_new ( "codecs-changed" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , g_cclosure_marshal_VOID__STRING , G_TYPE_NONE , 1 , G_TYPE_STRING )
LVAL	58:1	58:1	6	purple_media_signals [ CODECS_CHANGED ]
FIELD	58:1	58:36	7	purple_media_signals [ CODECS_CHANGED ]
LEAF_NODE	58:1	58:1	8	purple_media_signals
LEAF_NODE	58:21	58:21	8	[
EXPR	58:22	58:22	8	CODECS_CHANGED
FIELD	58:22	58:22	9	CODECS_CHANGED
LEAF_NODE	58:22	58:22	10	CODECS_CHANGED
LEAF_NODE	58:36	58:36	8	]
ASSIGN_OP	58:38	58:38	6	=
LEAF_NODE	58:38	58:38	7	=
RVAL	58:40	58:40	6	g_signal_new ( "codecs-changed" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , g_cclosure_marshal_VOID__STRING , G_TYPE_NONE , 1 , G_TYPE_STRING )
FUNCTION_CALL	58:40	61:35	7	g_signal_new ( "codecs-changed" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , g_cclosure_marshal_VOID__STRING , G_TYPE_NONE , 1 , G_TYPE_STRING )
CALLEE	58:40	58:40	8	g_signal_new
LEAF_NODE	58:40	58:40	9	g_signal_new
LEAF_NODE	58:52	58:52	8	(
ARGUMENT	58:53	58:53	8	"codecs-changed"
FIELD	58:53	58:53	9	"codecs-changed"
LEAF_NODE	58:53	58:53	10	"codecs-changed"
LEAF_NODE	58:69	58:69	8	,
ARGUMENT	58:71	58:71	8	G_TYPE_FROM_CLASS ( klass )
FUNCTION_CALL	58:71	58:94	9	G_TYPE_FROM_CLASS ( klass )
CALLEE	58:71	58:71	10	G_TYPE_FROM_CLASS
LEAF_NODE	58:71	58:71	11	G_TYPE_FROM_CLASS
LEAF_NODE	58:88	58:88	10	(
ARGUMENT	58:89	58:89	10	klass
FIELD	58:89	58:89	11	klass
LEAF_NODE	58:89	58:89	12	klass
LEAF_NODE	58:94	58:94	10	)
LEAF_NODE	58:95	58:95	8	,
ARGUMENT	59:6	59:6	8	G_SIGNAL_RUN_LAST
FIELD	59:6	59:6	9	G_SIGNAL_RUN_LAST
LEAF_NODE	59:6	59:6	10	G_SIGNAL_RUN_LAST
LEAF_NODE	59:23	59:23	8	,
ARGUMENT	59:25	59:25	8	0
FIELD	59:25	59:25	9	0
LEAF_NODE	59:25	59:25	10	0
LEAF_NODE	59:26	59:26	8	,
ARGUMENT	59:28	59:28	8	NULL
FIELD	59:28	59:28	9	NULL
LEAF_NODE	59:28	59:28	10	NULL
LEAF_NODE	59:32	59:32	8	,
ARGUMENT	59:34	59:34	8	NULL
FIELD	59:34	59:34	9	NULL
LEAF_NODE	59:34	59:34	10	NULL
LEAF_NODE	59:38	59:38	8	,
ARGUMENT	60:6	60:6	8	g_cclosure_marshal_VOID__STRING
FIELD	60:6	60:6	9	g_cclosure_marshal_VOID__STRING
LEAF_NODE	60:6	60:6	10	g_cclosure_marshal_VOID__STRING
LEAF_NODE	60:37	60:37	8	,
ARGUMENT	61:6	61:6	8	G_TYPE_NONE
FIELD	61:6	61:6	9	G_TYPE_NONE
LEAF_NODE	61:6	61:6	10	G_TYPE_NONE
LEAF_NODE	61:17	61:17	8	,
ARGUMENT	61:19	61:19	8	1
FIELD	61:19	61:19	9	1
LEAF_NODE	61:19	61:19	10	1
LEAF_NODE	61:20	61:20	8	,
ARGUMENT	61:22	61:22	8	G_TYPE_STRING
FIELD	61:22	61:22	9	G_TYPE_STRING
LEAF_NODE	61:22	61:22	10	G_TYPE_STRING
LEAF_NODE	61:35	61:35	8	)
LEAF_NODE	61:36	61:36	4	;
EXPR_STATEMENT	62:1	66:35	3	purple_media_signals [ LEVEL ] = g_signal_new ( "level" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__STRING_STRING_DOUBLE , G_TYPE_NONE , 3 , G_TYPE_STRING , G_TYPE_STRING , G_TYPE_DOUBLE ) ;
EXPR	62:1	62:1	4	purple_media_signals [ LEVEL ] = g_signal_new ( "level" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__STRING_STRING_DOUBLE , G_TYPE_NONE , 3 , G_TYPE_STRING , G_TYPE_STRING , G_TYPE_DOUBLE )
ASSIGN	62:1	62:31	5	purple_media_signals [ LEVEL ] = g_signal_new ( "level" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__STRING_STRING_DOUBLE , G_TYPE_NONE , 3 , G_TYPE_STRING , G_TYPE_STRING , G_TYPE_DOUBLE )
LVAL	62:1	62:1	6	purple_media_signals [ LEVEL ]
FIELD	62:1	62:27	7	purple_media_signals [ LEVEL ]
LEAF_NODE	62:1	62:1	8	purple_media_signals
LEAF_NODE	62:21	62:21	8	[
EXPR	62:22	62:22	8	LEVEL
FIELD	62:22	62:22	9	LEVEL
LEAF_NODE	62:22	62:22	10	LEVEL
LEAF_NODE	62:27	62:27	8	]
ASSIGN_OP	62:29	62:29	6	=
LEAF_NODE	62:29	62:29	7	=
RVAL	62:31	62:31	6	g_signal_new ( "level" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__STRING_STRING_DOUBLE , G_TYPE_NONE , 3 , G_TYPE_STRING , G_TYPE_STRING , G_TYPE_DOUBLE )
FUNCTION_CALL	62:31	66:34	7	g_signal_new ( "level" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__STRING_STRING_DOUBLE , G_TYPE_NONE , 3 , G_TYPE_STRING , G_TYPE_STRING , G_TYPE_DOUBLE )
CALLEE	62:31	62:31	8	g_signal_new
LEAF_NODE	62:31	62:31	9	g_signal_new
LEAF_NODE	62:43	62:43	8	(
ARGUMENT	62:44	62:44	8	"level"
FIELD	62:44	62:44	9	"level"
LEAF_NODE	62:44	62:44	10	"level"
LEAF_NODE	62:51	62:51	8	,
ARGUMENT	62:53	62:53	8	G_TYPE_FROM_CLASS ( klass )
FUNCTION_CALL	62:53	62:76	9	G_TYPE_FROM_CLASS ( klass )
CALLEE	62:53	62:53	10	G_TYPE_FROM_CLASS
LEAF_NODE	62:53	62:53	11	G_TYPE_FROM_CLASS
LEAF_NODE	62:70	62:70	10	(
ARGUMENT	62:71	62:71	10	klass
FIELD	62:71	62:71	11	klass
LEAF_NODE	62:71	62:71	12	klass
LEAF_NODE	62:76	62:76	10	)
LEAF_NODE	62:77	62:77	8	,
ARGUMENT	63:6	63:6	8	G_SIGNAL_RUN_LAST
FIELD	63:6	63:6	9	G_SIGNAL_RUN_LAST
LEAF_NODE	63:6	63:6	10	G_SIGNAL_RUN_LAST
LEAF_NODE	63:23	63:23	8	,
ARGUMENT	63:25	63:25	8	0
FIELD	63:25	63:25	9	0
LEAF_NODE	63:25	63:25	10	0
LEAF_NODE	63:26	63:26	8	,
ARGUMENT	63:28	63:28	8	NULL
FIELD	63:28	63:28	9	NULL
LEAF_NODE	63:28	63:28	10	NULL
LEAF_NODE	63:32	63:32	8	,
ARGUMENT	63:34	63:34	8	NULL
FIELD	63:34	63:34	9	NULL
LEAF_NODE	63:34	63:34	10	NULL
LEAF_NODE	63:38	63:38	8	,
ARGUMENT	64:6	64:6	8	purple_smarshal_VOID__STRING_STRING_DOUBLE
FIELD	64:6	64:6	9	purple_smarshal_VOID__STRING_STRING_DOUBLE
LEAF_NODE	64:6	64:6	10	purple_smarshal_VOID__STRING_STRING_DOUBLE
LEAF_NODE	64:48	64:48	8	,
ARGUMENT	65:6	65:6	8	G_TYPE_NONE
FIELD	65:6	65:6	9	G_TYPE_NONE
LEAF_NODE	65:6	65:6	10	G_TYPE_NONE
LEAF_NODE	65:17	65:17	8	,
ARGUMENT	65:19	65:19	8	3
FIELD	65:19	65:19	9	3
LEAF_NODE	65:19	65:19	10	3
LEAF_NODE	65:20	65:20	8	,
ARGUMENT	65:22	65:22	8	G_TYPE_STRING
FIELD	65:22	65:22	9	G_TYPE_STRING
LEAF_NODE	65:22	65:22	10	G_TYPE_STRING
LEAF_NODE	65:35	65:35	8	,
ARGUMENT	66:6	66:6	8	G_TYPE_STRING
FIELD	66:6	66:6	9	G_TYPE_STRING
LEAF_NODE	66:6	66:6	10	G_TYPE_STRING
LEAF_NODE	66:19	66:19	8	,
ARGUMENT	66:21	66:21	8	G_TYPE_DOUBLE
FIELD	66:21	66:21	9	G_TYPE_DOUBLE
LEAF_NODE	66:21	66:21	10	G_TYPE_DOUBLE
LEAF_NODE	66:34	66:34	8	)
LEAF_NODE	66:35	66:35	4	;
EXPR_STATEMENT	67:1	71:50	3	purple_media_signals [ NEW_CANDIDATE ] = g_signal_new ( "new-candidate" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__POINTER_POINTER_OBJECT , G_TYPE_NONE , 3 , G_TYPE_POINTER , G_TYPE_POINTER , PURPLE_TYPE_MEDIA_CANDIDATE ) ;
EXPR	67:1	67:1	4	purple_media_signals [ NEW_CANDIDATE ] = g_signal_new ( "new-candidate" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__POINTER_POINTER_OBJECT , G_TYPE_NONE , 3 , G_TYPE_POINTER , G_TYPE_POINTER , PURPLE_TYPE_MEDIA_CANDIDATE )
ASSIGN	67:1	67:39	5	purple_media_signals [ NEW_CANDIDATE ] = g_signal_new ( "new-candidate" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__POINTER_POINTER_OBJECT , G_TYPE_NONE , 3 , G_TYPE_POINTER , G_TYPE_POINTER , PURPLE_TYPE_MEDIA_CANDIDATE )
LVAL	67:1	67:1	6	purple_media_signals [ NEW_CANDIDATE ]
FIELD	67:1	67:35	7	purple_media_signals [ NEW_CANDIDATE ]
LEAF_NODE	67:1	67:1	8	purple_media_signals
LEAF_NODE	67:21	67:21	8	[
EXPR	67:22	67:22	8	NEW_CANDIDATE
FIELD	67:22	67:22	9	NEW_CANDIDATE
LEAF_NODE	67:22	67:22	10	NEW_CANDIDATE
LEAF_NODE	67:35	67:35	8	]
ASSIGN_OP	67:37	67:37	6	=
LEAF_NODE	67:37	67:37	7	=
RVAL	67:39	67:39	6	g_signal_new ( "new-candidate" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__POINTER_POINTER_OBJECT , G_TYPE_NONE , 3 , G_TYPE_POINTER , G_TYPE_POINTER , PURPLE_TYPE_MEDIA_CANDIDATE )
FUNCTION_CALL	67:39	71:49	7	g_signal_new ( "new-candidate" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__POINTER_POINTER_OBJECT , G_TYPE_NONE , 3 , G_TYPE_POINTER , G_TYPE_POINTER , PURPLE_TYPE_MEDIA_CANDIDATE )
CALLEE	67:39	67:39	8	g_signal_new
LEAF_NODE	67:39	67:39	9	g_signal_new
LEAF_NODE	67:51	67:51	8	(
ARGUMENT	67:52	67:52	8	"new-candidate"
FIELD	67:52	67:52	9	"new-candidate"
LEAF_NODE	67:52	67:52	10	"new-candidate"
LEAF_NODE	67:67	67:67	8	,
ARGUMENT	67:69	67:69	8	G_TYPE_FROM_CLASS ( klass )
FUNCTION_CALL	67:69	67:92	9	G_TYPE_FROM_CLASS ( klass )
CALLEE	67:69	67:69	10	G_TYPE_FROM_CLASS
LEAF_NODE	67:69	67:69	11	G_TYPE_FROM_CLASS
LEAF_NODE	67:86	67:86	10	(
ARGUMENT	67:87	67:87	10	klass
FIELD	67:87	67:87	11	klass
LEAF_NODE	67:87	67:87	12	klass
LEAF_NODE	67:92	67:92	10	)
LEAF_NODE	67:93	67:93	8	,
ARGUMENT	68:6	68:6	8	G_SIGNAL_RUN_LAST
FIELD	68:6	68:6	9	G_SIGNAL_RUN_LAST
LEAF_NODE	68:6	68:6	10	G_SIGNAL_RUN_LAST
LEAF_NODE	68:23	68:23	8	,
ARGUMENT	68:25	68:25	8	0
FIELD	68:25	68:25	9	0
LEAF_NODE	68:25	68:25	10	0
LEAF_NODE	68:26	68:26	8	,
ARGUMENT	68:28	68:28	8	NULL
FIELD	68:28	68:28	9	NULL
LEAF_NODE	68:28	68:28	10	NULL
LEAF_NODE	68:32	68:32	8	,
ARGUMENT	68:34	68:34	8	NULL
FIELD	68:34	68:34	9	NULL
LEAF_NODE	68:34	68:34	10	NULL
LEAF_NODE	68:38	68:38	8	,
ARGUMENT	69:6	69:6	8	purple_smarshal_VOID__POINTER_POINTER_OBJECT
FIELD	69:6	69:6	9	purple_smarshal_VOID__POINTER_POINTER_OBJECT
LEAF_NODE	69:6	69:6	10	purple_smarshal_VOID__POINTER_POINTER_OBJECT
LEAF_NODE	69:50	69:50	8	,
ARGUMENT	70:6	70:6	8	G_TYPE_NONE
FIELD	70:6	70:6	9	G_TYPE_NONE
LEAF_NODE	70:6	70:6	10	G_TYPE_NONE
LEAF_NODE	70:17	70:17	8	,
ARGUMENT	70:19	70:19	8	3
FIELD	70:19	70:19	9	3
LEAF_NODE	70:19	70:19	10	3
LEAF_NODE	70:20	70:20	8	,
ARGUMENT	70:22	70:22	8	G_TYPE_POINTER
FIELD	70:22	70:22	9	G_TYPE_POINTER
LEAF_NODE	70:22	70:22	10	G_TYPE_POINTER
LEAF_NODE	70:36	70:36	8	,
ARGUMENT	71:6	71:6	8	G_TYPE_POINTER
FIELD	71:6	71:6	9	G_TYPE_POINTER
LEAF_NODE	71:6	71:6	10	G_TYPE_POINTER
LEAF_NODE	71:20	71:20	8	,
ARGUMENT	71:22	71:22	8	PURPLE_TYPE_MEDIA_CANDIDATE
FIELD	71:22	71:22	9	PURPLE_TYPE_MEDIA_CANDIDATE
LEAF_NODE	71:22	71:22	10	PURPLE_TYPE_MEDIA_CANDIDATE
LEAF_NODE	71:49	71:49	8	)
LEAF_NODE	71:50	71:50	4	;
EXPR_STATEMENT	72:1	76:35	3	purple_media_signals [ STATE_CHANGED ] = g_signal_new ( "state-changed" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__ENUM_STRING_STRING , G_TYPE_NONE , 3 , PURPLE_MEDIA_TYPE_STATE , G_TYPE_STRING , G_TYPE_STRING ) ;
EXPR	72:1	72:1	4	purple_media_signals [ STATE_CHANGED ] = g_signal_new ( "state-changed" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__ENUM_STRING_STRING , G_TYPE_NONE , 3 , PURPLE_MEDIA_TYPE_STATE , G_TYPE_STRING , G_TYPE_STRING )
ASSIGN	72:1	72:39	5	purple_media_signals [ STATE_CHANGED ] = g_signal_new ( "state-changed" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__ENUM_STRING_STRING , G_TYPE_NONE , 3 , PURPLE_MEDIA_TYPE_STATE , G_TYPE_STRING , G_TYPE_STRING )
LVAL	72:1	72:1	6	purple_media_signals [ STATE_CHANGED ]
FIELD	72:1	72:35	7	purple_media_signals [ STATE_CHANGED ]
LEAF_NODE	72:1	72:1	8	purple_media_signals
LEAF_NODE	72:21	72:21	8	[
EXPR	72:22	72:22	8	STATE_CHANGED
FIELD	72:22	72:22	9	STATE_CHANGED
LEAF_NODE	72:22	72:22	10	STATE_CHANGED
LEAF_NODE	72:35	72:35	8	]
ASSIGN_OP	72:37	72:37	6	=
LEAF_NODE	72:37	72:37	7	=
RVAL	72:39	72:39	6	g_signal_new ( "state-changed" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__ENUM_STRING_STRING , G_TYPE_NONE , 3 , PURPLE_MEDIA_TYPE_STATE , G_TYPE_STRING , G_TYPE_STRING )
FUNCTION_CALL	72:39	76:34	7	g_signal_new ( "state-changed" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__ENUM_STRING_STRING , G_TYPE_NONE , 3 , PURPLE_MEDIA_TYPE_STATE , G_TYPE_STRING , G_TYPE_STRING )
CALLEE	72:39	72:39	8	g_signal_new
LEAF_NODE	72:39	72:39	9	g_signal_new
LEAF_NODE	72:51	72:51	8	(
ARGUMENT	72:52	72:52	8	"state-changed"
FIELD	72:52	72:52	9	"state-changed"
LEAF_NODE	72:52	72:52	10	"state-changed"
LEAF_NODE	72:67	72:67	8	,
ARGUMENT	72:69	72:69	8	G_TYPE_FROM_CLASS ( klass )
FUNCTION_CALL	72:69	72:92	9	G_TYPE_FROM_CLASS ( klass )
CALLEE	72:69	72:69	10	G_TYPE_FROM_CLASS
LEAF_NODE	72:69	72:69	11	G_TYPE_FROM_CLASS
LEAF_NODE	72:86	72:86	10	(
ARGUMENT	72:87	72:87	10	klass
FIELD	72:87	72:87	11	klass
LEAF_NODE	72:87	72:87	12	klass
LEAF_NODE	72:92	72:92	10	)
LEAF_NODE	72:93	72:93	8	,
ARGUMENT	73:6	73:6	8	G_SIGNAL_RUN_LAST
FIELD	73:6	73:6	9	G_SIGNAL_RUN_LAST
LEAF_NODE	73:6	73:6	10	G_SIGNAL_RUN_LAST
LEAF_NODE	73:23	73:23	8	,
ARGUMENT	73:25	73:25	8	0
FIELD	73:25	73:25	9	0
LEAF_NODE	73:25	73:25	10	0
LEAF_NODE	73:26	73:26	8	,
ARGUMENT	73:28	73:28	8	NULL
FIELD	73:28	73:28	9	NULL
LEAF_NODE	73:28	73:28	10	NULL
LEAF_NODE	73:32	73:32	8	,
ARGUMENT	73:34	73:34	8	NULL
FIELD	73:34	73:34	9	NULL
LEAF_NODE	73:34	73:34	10	NULL
LEAF_NODE	73:38	73:38	8	,
ARGUMENT	74:6	74:6	8	purple_smarshal_VOID__ENUM_STRING_STRING
FIELD	74:6	74:6	9	purple_smarshal_VOID__ENUM_STRING_STRING
LEAF_NODE	74:6	74:6	10	purple_smarshal_VOID__ENUM_STRING_STRING
LEAF_NODE	74:46	74:46	8	,
ARGUMENT	75:6	75:6	8	G_TYPE_NONE
FIELD	75:6	75:6	9	G_TYPE_NONE
LEAF_NODE	75:6	75:6	10	G_TYPE_NONE
LEAF_NODE	75:17	75:17	8	,
ARGUMENT	75:19	75:19	8	3
FIELD	75:19	75:19	9	3
LEAF_NODE	75:19	75:19	10	3
LEAF_NODE	75:20	75:20	8	,
ARGUMENT	75:22	75:22	8	PURPLE_MEDIA_TYPE_STATE
FIELD	75:22	75:22	9	PURPLE_MEDIA_TYPE_STATE
LEAF_NODE	75:22	75:22	10	PURPLE_MEDIA_TYPE_STATE
LEAF_NODE	75:45	75:45	8	,
ARGUMENT	76:6	76:6	8	G_TYPE_STRING
FIELD	76:6	76:6	9	G_TYPE_STRING
LEAF_NODE	76:6	76:6	10	G_TYPE_STRING
LEAF_NODE	76:19	76:19	8	,
ARGUMENT	76:21	76:21	8	G_TYPE_STRING
FIELD	76:21	76:21	9	G_TYPE_STRING
LEAF_NODE	76:21	76:21	10	G_TYPE_STRING
LEAF_NODE	76:34	76:34	8	)
LEAF_NODE	76:35	76:35	4	;
EXPR_STATEMENT	77:1	81:51	3	purple_media_signals [ STREAM_INFO ] = g_signal_new ( "stream-info" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__ENUM_STRING_STRING_BOOLEAN , G_TYPE_NONE , 4 , PURPLE_MEDIA_TYPE_INFO_TYPE , G_TYPE_STRING , G_TYPE_STRING , G_TYPE_BOOLEAN ) ;
EXPR	77:1	77:1	4	purple_media_signals [ STREAM_INFO ] = g_signal_new ( "stream-info" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__ENUM_STRING_STRING_BOOLEAN , G_TYPE_NONE , 4 , PURPLE_MEDIA_TYPE_INFO_TYPE , G_TYPE_STRING , G_TYPE_STRING , G_TYPE_BOOLEAN )
ASSIGN	77:1	77:37	5	purple_media_signals [ STREAM_INFO ] = g_signal_new ( "stream-info" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__ENUM_STRING_STRING_BOOLEAN , G_TYPE_NONE , 4 , PURPLE_MEDIA_TYPE_INFO_TYPE , G_TYPE_STRING , G_TYPE_STRING , G_TYPE_BOOLEAN )
LVAL	77:1	77:1	6	purple_media_signals [ STREAM_INFO ]
FIELD	77:1	77:33	7	purple_media_signals [ STREAM_INFO ]
LEAF_NODE	77:1	77:1	8	purple_media_signals
LEAF_NODE	77:21	77:21	8	[
EXPR	77:22	77:22	8	STREAM_INFO
FIELD	77:22	77:22	9	STREAM_INFO
LEAF_NODE	77:22	77:22	10	STREAM_INFO
LEAF_NODE	77:33	77:33	8	]
ASSIGN_OP	77:35	77:35	6	=
LEAF_NODE	77:35	77:35	7	=
RVAL	77:37	77:37	6	g_signal_new ( "stream-info" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__ENUM_STRING_STRING_BOOLEAN , G_TYPE_NONE , 4 , PURPLE_MEDIA_TYPE_INFO_TYPE , G_TYPE_STRING , G_TYPE_STRING , G_TYPE_BOOLEAN )
FUNCTION_CALL	77:37	81:50	7	g_signal_new ( "stream-info" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__ENUM_STRING_STRING_BOOLEAN , G_TYPE_NONE , 4 , PURPLE_MEDIA_TYPE_INFO_TYPE , G_TYPE_STRING , G_TYPE_STRING , G_TYPE_BOOLEAN )
CALLEE	77:37	77:37	8	g_signal_new
LEAF_NODE	77:37	77:37	9	g_signal_new
LEAF_NODE	77:49	77:49	8	(
ARGUMENT	77:50	77:50	8	"stream-info"
FIELD	77:50	77:50	9	"stream-info"
LEAF_NODE	77:50	77:50	10	"stream-info"
LEAF_NODE	77:63	77:63	8	,
ARGUMENT	77:65	77:65	8	G_TYPE_FROM_CLASS ( klass )
FUNCTION_CALL	77:65	77:88	9	G_TYPE_FROM_CLASS ( klass )
CALLEE	77:65	77:65	10	G_TYPE_FROM_CLASS
LEAF_NODE	77:65	77:65	11	G_TYPE_FROM_CLASS
LEAF_NODE	77:82	77:82	10	(
ARGUMENT	77:83	77:83	10	klass
FIELD	77:83	77:83	11	klass
LEAF_NODE	77:83	77:83	12	klass
LEAF_NODE	77:88	77:88	10	)
LEAF_NODE	77:89	77:89	8	,
ARGUMENT	78:6	78:6	8	G_SIGNAL_RUN_LAST
FIELD	78:6	78:6	9	G_SIGNAL_RUN_LAST
LEAF_NODE	78:6	78:6	10	G_SIGNAL_RUN_LAST
LEAF_NODE	78:23	78:23	8	,
ARGUMENT	78:25	78:25	8	0
FIELD	78:25	78:25	9	0
LEAF_NODE	78:25	78:25	10	0
LEAF_NODE	78:26	78:26	8	,
ARGUMENT	78:28	78:28	8	NULL
FIELD	78:28	78:28	9	NULL
LEAF_NODE	78:28	78:28	10	NULL
LEAF_NODE	78:32	78:32	8	,
ARGUMENT	78:34	78:34	8	NULL
FIELD	78:34	78:34	9	NULL
LEAF_NODE	78:34	78:34	10	NULL
LEAF_NODE	78:38	78:38	8	,
ARGUMENT	79:6	79:6	8	purple_smarshal_VOID__ENUM_STRING_STRING_BOOLEAN
FIELD	79:6	79:6	9	purple_smarshal_VOID__ENUM_STRING_STRING_BOOLEAN
LEAF_NODE	79:6	79:6	10	purple_smarshal_VOID__ENUM_STRING_STRING_BOOLEAN
LEAF_NODE	79:54	79:54	8	,
ARGUMENT	80:6	80:6	8	G_TYPE_NONE
FIELD	80:6	80:6	9	G_TYPE_NONE
LEAF_NODE	80:6	80:6	10	G_TYPE_NONE
LEAF_NODE	80:17	80:17	8	,
ARGUMENT	80:19	80:19	8	4
FIELD	80:19	80:19	9	4
LEAF_NODE	80:19	80:19	10	4
LEAF_NODE	80:20	80:20	8	,
ARGUMENT	80:22	80:22	8	PURPLE_MEDIA_TYPE_INFO_TYPE
FIELD	80:22	80:22	9	PURPLE_MEDIA_TYPE_INFO_TYPE
LEAF_NODE	80:22	80:22	10	PURPLE_MEDIA_TYPE_INFO_TYPE
LEAF_NODE	80:49	80:49	8	,
ARGUMENT	81:6	81:6	8	G_TYPE_STRING
FIELD	81:6	81:6	9	G_TYPE_STRING
LEAF_NODE	81:6	81:6	10	G_TYPE_STRING
LEAF_NODE	81:19	81:19	8	,
ARGUMENT	81:21	81:21	8	G_TYPE_STRING
FIELD	81:21	81:21	9	G_TYPE_STRING
LEAF_NODE	81:21	81:21	10	G_TYPE_STRING
LEAF_NODE	81:34	81:34	8	,
ARGUMENT	81:36	81:36	8	G_TYPE_BOOLEAN
FIELD	81:36	81:36	9	G_TYPE_BOOLEAN
LEAF_NODE	81:36	81:36	10	G_TYPE_BOOLEAN
LEAF_NODE	81:50	81:50	8	)
LEAF_NODE	81:51	81:51	4	;
EXPR_STATEMENT	82:1	86:63	3	purple_media_signals [ CANDIDATE_PAIR_ESTABLISHED ] = g_signal_new ( "candidate-pair-established" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__POINTER_POINTER_OBJECT_OBJECT , G_TYPE_NONE , 4 , G_TYPE_POINTER , G_TYPE_POINTER , PURPLE_TYPE_MEDIA_CANDIDATE , PURPLE_TYPE_MEDIA_CANDIDATE ) ;
EXPR	82:1	82:1	4	purple_media_signals [ CANDIDATE_PAIR_ESTABLISHED ] = g_signal_new ( "candidate-pair-established" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__POINTER_POINTER_OBJECT_OBJECT , G_TYPE_NONE , 4 , G_TYPE_POINTER , G_TYPE_POINTER , PURPLE_TYPE_MEDIA_CANDIDATE , PURPLE_TYPE_MEDIA_CANDIDATE )
ASSIGN	82:1	82:52	5	purple_media_signals [ CANDIDATE_PAIR_ESTABLISHED ] = g_signal_new ( "candidate-pair-established" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__POINTER_POINTER_OBJECT_OBJECT , G_TYPE_NONE , 4 , G_TYPE_POINTER , G_TYPE_POINTER , PURPLE_TYPE_MEDIA_CANDIDATE , PURPLE_TYPE_MEDIA_CANDIDATE )
LVAL	82:1	82:1	6	purple_media_signals [ CANDIDATE_PAIR_ESTABLISHED ]
FIELD	82:1	82:48	7	purple_media_signals [ CANDIDATE_PAIR_ESTABLISHED ]
LEAF_NODE	82:1	82:1	8	purple_media_signals
LEAF_NODE	82:21	82:21	8	[
EXPR	82:22	82:22	8	CANDIDATE_PAIR_ESTABLISHED
FIELD	82:22	82:22	9	CANDIDATE_PAIR_ESTABLISHED
LEAF_NODE	82:22	82:22	10	CANDIDATE_PAIR_ESTABLISHED
LEAF_NODE	82:48	82:48	8	]
ASSIGN_OP	82:50	82:50	6	=
LEAF_NODE	82:50	82:50	7	=
RVAL	82:52	82:52	6	g_signal_new ( "candidate-pair-established" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__POINTER_POINTER_OBJECT_OBJECT , G_TYPE_NONE , 4 , G_TYPE_POINTER , G_TYPE_POINTER , PURPLE_TYPE_MEDIA_CANDIDATE , PURPLE_TYPE_MEDIA_CANDIDATE )
FUNCTION_CALL	82:52	86:62	7	g_signal_new ( "candidate-pair-established" , G_TYPE_FROM_CLASS ( klass ) , G_SIGNAL_RUN_LAST , 0 , NULL , NULL , purple_smarshal_VOID__POINTER_POINTER_OBJECT_OBJECT , G_TYPE_NONE , 4 , G_TYPE_POINTER , G_TYPE_POINTER , PURPLE_TYPE_MEDIA_CANDIDATE , PURPLE_TYPE_MEDIA_CANDIDATE )
CALLEE	82:52	82:52	8	g_signal_new
LEAF_NODE	82:52	82:52	9	g_signal_new
LEAF_NODE	82:64	82:64	8	(
ARGUMENT	82:65	82:65	8	"candidate-pair-established"
FIELD	82:65	82:65	9	"candidate-pair-established"
LEAF_NODE	82:65	82:65	10	"candidate-pair-established"
LEAF_NODE	82:93	82:93	8	,
ARGUMENT	82:95	82:95	8	G_TYPE_FROM_CLASS ( klass )
FUNCTION_CALL	82:95	82:118	9	G_TYPE_FROM_CLASS ( klass )
CALLEE	82:95	82:95	10	G_TYPE_FROM_CLASS
LEAF_NODE	82:95	82:95	11	G_TYPE_FROM_CLASS
LEAF_NODE	82:112	82:112	10	(
ARGUMENT	82:113	82:113	10	klass
FIELD	82:113	82:113	11	klass
LEAF_NODE	82:113	82:113	12	klass
LEAF_NODE	82:118	82:118	10	)
LEAF_NODE	82:119	82:119	8	,
ARGUMENT	83:6	83:6	8	G_SIGNAL_RUN_LAST
FIELD	83:6	83:6	9	G_SIGNAL_RUN_LAST
LEAF_NODE	83:6	83:6	10	G_SIGNAL_RUN_LAST
LEAF_NODE	83:23	83:23	8	,
ARGUMENT	83:25	83:25	8	0
FIELD	83:25	83:25	9	0
LEAF_NODE	83:25	83:25	10	0
LEAF_NODE	83:26	83:26	8	,
ARGUMENT	83:28	83:28	8	NULL
FIELD	83:28	83:28	9	NULL
LEAF_NODE	83:28	83:28	10	NULL
LEAF_NODE	83:32	83:32	8	,
ARGUMENT	83:34	83:34	8	NULL
FIELD	83:34	83:34	9	NULL
LEAF_NODE	83:34	83:34	10	NULL
LEAF_NODE	83:38	83:38	8	,
ARGUMENT	84:6	84:6	8	purple_smarshal_VOID__POINTER_POINTER_OBJECT_OBJECT
FIELD	84:6	84:6	9	purple_smarshal_VOID__POINTER_POINTER_OBJECT_OBJECT
LEAF_NODE	84:6	84:6	10	purple_smarshal_VOID__POINTER_POINTER_OBJECT_OBJECT
LEAF_NODE	84:57	84:57	8	,
ARGUMENT	85:6	85:6	8	G_TYPE_NONE
FIELD	85:6	85:6	9	G_TYPE_NONE
LEAF_NODE	85:6	85:6	10	G_TYPE_NONE
LEAF_NODE	85:17	85:17	8	,
ARGUMENT	85:19	85:19	8	4
FIELD	85:19	85:19	9	4
LEAF_NODE	85:19	85:19	10	4
LEAF_NODE	85:20	85:20	8	,
ARGUMENT	85:22	85:22	8	G_TYPE_POINTER
FIELD	85:22	85:22	9	G_TYPE_POINTER
LEAF_NODE	85:22	85:22	10	G_TYPE_POINTER
LEAF_NODE	85:36	85:36	8	,
ARGUMENT	85:38	85:38	8	G_TYPE_POINTER
FIELD	85:38	85:38	9	G_TYPE_POINTER
LEAF_NODE	85:38	85:38	10	G_TYPE_POINTER
LEAF_NODE	85:52	85:52	8	,
ARGUMENT	86:6	86:6	8	PURPLE_TYPE_MEDIA_CANDIDATE
FIELD	86:6	86:6	9	PURPLE_TYPE_MEDIA_CANDIDATE
LEAF_NODE	86:6	86:6	10	PURPLE_TYPE_MEDIA_CANDIDATE
LEAF_NODE	86:33	86:33	8	,
ARGUMENT	86:35	86:35	8	PURPLE_TYPE_MEDIA_CANDIDATE
FIELD	86:35	86:35	9	PURPLE_TYPE_MEDIA_CANDIDATE
LEAF_NODE	86:35	86:35	10	PURPLE_TYPE_MEDIA_CANDIDATE
LEAF_NODE	86:62	86:62	8	)
LEAF_NODE	86:63	86:63	4	;
EXPR_STATEMENT	87:1	87:60	3	g_type_class_add_private ( klass , sizeof ( PurpleMediaPrivate ) ) ;
EXPR	87:1	87:1	4	g_type_class_add_private ( klass , sizeof ( PurpleMediaPrivate ) )
FUNCTION_CALL	87:1	87:59	5	g_type_class_add_private ( klass , sizeof ( PurpleMediaPrivate ) )
CALLEE	87:1	87:1	6	g_type_class_add_private
LEAF_NODE	87:1	87:1	7	g_type_class_add_private
LEAF_NODE	87:25	87:25	6	(
ARGUMENT	87:26	87:26	6	klass
FIELD	87:26	87:26	7	klass
LEAF_NODE	87:26	87:26	8	klass
LEAF_NODE	87:31	87:31	6	,
ARGUMENT	87:33	87:33	6	sizeof ( PurpleMediaPrivate )
FUNCTION_CALL	87:33	87:58	7	sizeof ( PurpleMediaPrivate )
CALLEE	87:33	87:33	8	sizeof
LEAF_NODE	87:33	87:33	9	sizeof
LEAF_NODE	87:39	87:39	8	(
ARGUMENT	87:40	87:40	8	PurpleMediaPrivate
FIELD	87:40	87:40	9	PurpleMediaPrivate
LEAF_NODE	87:40	87:40	10	PurpleMediaPrivate
LEAF_NODE	87:58	87:58	8	)
LEAF_NODE	87:59	87:59	6	)
LEAF_NODE	87:60	87:60	4	;
LEAF_NODE	88:0	88:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	41:0	1	
RETURN_TYPE	2:0	2:0	2	gboolean
TYPE_NAME	2:0	2:0	3	gboolean
LEAF_NODE	2:0	2:0	4	gboolean
FUNCTION_NAME	2:9	2:9	2	jabber_google_roster_incoming
LEAF_NODE	2:9	2:9	3	jabber_google_roster_incoming
PARAMETER_LIST	2:38	2:70	2	( JabberStream * js , xmlnode * item )
LEAF_NODE	2:38	2:38	3	(
PARAMETER_DECL	2:39	2:53	3	JabberStream * js
TYPE	2:39	2:52	4	JabberStream *
TYPE_NAME	2:39	2:39	5	JabberStream
LEAF_NODE	2:39	2:39	6	JabberStream
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	js
LEAF_NODE	2:53	2:53	5	js
LEAF_NODE	2:55	2:55	3	,
PARAMETER_DECL	2:57	2:66	3	xmlnode * item
TYPE	2:57	2:65	4	xmlnode *
TYPE_NAME	2:57	2:57	5	xmlnode
LEAF_NODE	2:57	2:57	6	xmlnode
POINTER	2:65	2:65	5	*
LEAF_NODE	2:65	2:65	6	*
NAME	2:66	2:66	4	item
LEAF_NODE	2:66	2:66	5	item
LEAF_NODE	2:70	2:70	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	40:1	2	
SIMPLE_DECL	4:1	4:63	3	PurpleAccount * account ; account = purple_connection_get_account ( js -> gc ) ;
VAR_DECL	4:1	4:16	4	PurpleAccount * account ; account = purple_connection_get_account ( js -> gc )
TYPE	4:1	4:15	5	PurpleAccount *
TYPE_NAME	4:1	4:1	6	PurpleAccount
LEAF_NODE	4:1	4:1	7	PurpleAccount
POINTER	4:15	4:15	6	*
LEAF_NODE	4:15	4:15	7	*
NAME	4:16	4:16	5	account
LEAF_NODE	4:16	4:16	6	account
LEAF_NODE	0:0	0:0	5	;
INIT	4:16	4:16	5	account = purple_connection_get_account ( js -> gc )
ASSIGN	4:16	4:26	6	account = purple_connection_get_account ( js -> gc )
LVAL	4:16	4:16	7	account
NAME	4:16	4:16	8	account
LEAF_NODE	4:16	4:16	9	account
ASSIGN_OP	4:24	4:24	7	=
LEAF_NODE	4:24	4:24	8	=
RVAL	4:26	4:26	7	purple_connection_get_account ( js -> gc )
FUNCTION_CALL	4:26	4:62	8	purple_connection_get_account ( js -> gc )
CALLEE	4:26	4:26	9	purple_connection_get_account
LEAF_NODE	4:26	4:26	10	purple_connection_get_account
LEAF_NODE	4:55	4:55	9	(
ARGUMENT	4:56	4:56	9	js -> gc
FIELD	4:56	4:60	10	js -> gc
LEAF_NODE	4:56	4:56	11	js
LEAF_NODE	4:58	4:58	11	->
LEAF_NODE	4:60	4:60	11	gc
LEAF_NODE	4:62	4:62	9	)
LEAF_NODE	4:63	4:63	4	;
SIMPLE_DECL	5:1	5:50	3	const char * jid ; jid = xmlnode_get_attrib ( item , "jid" ) ;
VAR_DECL	5:1	5:13	4	const char * jid ; jid = xmlnode_get_attrib ( item , "jid" )
TYPE	5:1	5:12	5	const char *
TYPE_NAME	5:1	5:7	6	const char
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	char
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	jid
LEAF_NODE	5:13	5:13	6	jid
LEAF_NODE	0:0	0:0	5	;
INIT	5:13	5:13	5	jid = xmlnode_get_attrib ( item , "jid" )
ASSIGN	5:13	5:19	6	jid = xmlnode_get_attrib ( item , "jid" )
LVAL	5:13	5:13	7	jid
NAME	5:13	5:13	8	jid
LEAF_NODE	5:13	5:13	9	jid
ASSIGN_OP	5:17	5:17	7	=
LEAF_NODE	5:17	5:17	8	=
RVAL	5:19	5:19	7	xmlnode_get_attrib ( item , "jid" )
FUNCTION_CALL	5:19	5:49	8	xmlnode_get_attrib ( item , "jid" )
CALLEE	5:19	5:19	9	xmlnode_get_attrib
LEAF_NODE	5:19	5:19	10	xmlnode_get_attrib
LEAF_NODE	5:37	5:37	9	(
ARGUMENT	5:38	5:38	9	item
FIELD	5:38	5:38	10	item
LEAF_NODE	5:38	5:38	11	item
LEAF_NODE	5:42	5:42	9	,
ARGUMENT	5:44	5:44	9	"jid"
FIELD	5:44	5:44	10	"jid"
LEAF_NODE	5:44	5:44	11	"jid"
LEAF_NODE	5:49	5:49	9	)
LEAF_NODE	5:50	5:50	4	;
SIMPLE_DECL	6:1	6:31	3	gboolean on_block_list ; on_block_list = FALSE ;
VAR_DECL	6:1	6:10	4	gboolean on_block_list ; on_block_list = FALSE
TYPE	6:1	6:1	5	gboolean
TYPE_NAME	6:1	6:1	6	gboolean
LEAF_NODE	6:1	6:1	7	gboolean
NAME	6:10	6:10	5	on_block_list
LEAF_NODE	6:10	6:10	6	on_block_list
LEAF_NODE	0:0	0:0	5	;
INIT	6:10	6:10	5	on_block_list = FALSE
ASSIGN	6:10	6:26	6	on_block_list = FALSE
LVAL	6:10	6:10	7	on_block_list
NAME	6:10	6:10	8	on_block_list
LEAF_NODE	6:10	6:10	9	on_block_list
ASSIGN_OP	6:24	6:24	7	=
LEAF_NODE	6:24	6:24	8	=
RVAL	6:26	6:26	7	FALSE
FIELD	6:26	6:26	8	FALSE
LEAF_NODE	6:26	6:26	9	FALSE
LEAF_NODE	6:31	6:31	4	;
SIMPLE_DECL	7:1	7:15	3	char * jid_norm ;
VAR_DECL	7:1	7:7	4	char * jid_norm
TYPE	7:1	7:6	5	char *
TYPE_NAME	7:1	7:1	6	char
LEAF_NODE	7:1	7:1	7	char
POINTER	7:6	7:6	6	*
LEAF_NODE	7:6	7:6	7	*
NAME	7:7	7:7	5	jid_norm
LEAF_NODE	7:7	7:7	6	jid_norm
LEAF_NODE	7:15	7:15	4	;
SIMPLE_DECL	8:1	8:81	3	const char * grt ; grt = xmlnode_get_attrib_with_namespace ( item , "t" , NS_GOOGLE_ROSTER ) ;
VAR_DECL	8:1	8:13	4	const char * grt ; grt = xmlnode_get_attrib_with_namespace ( item , "t" , NS_GOOGLE_ROSTER )
TYPE	8:1	8:12	5	const char *
TYPE_NAME	8:1	8:7	6	const char
LEAF_NODE	8:1	8:1	7	const
LEAF_NODE	8:7	8:7	7	char
POINTER	8:12	8:12	6	*
LEAF_NODE	8:12	8:12	7	*
NAME	8:13	8:13	5	grt
LEAF_NODE	8:13	8:13	6	grt
LEAF_NODE	0:0	0:0	5	;
INIT	8:13	8:13	5	grt = xmlnode_get_attrib_with_namespace ( item , "t" , NS_GOOGLE_ROSTER )
ASSIGN	8:13	8:19	6	grt = xmlnode_get_attrib_with_namespace ( item , "t" , NS_GOOGLE_ROSTER )
LVAL	8:13	8:13	7	grt
NAME	8:13	8:13	8	grt
LEAF_NODE	8:13	8:13	9	grt
ASSIGN_OP	8:17	8:17	7	=
LEAF_NODE	8:17	8:17	8	=
RVAL	8:19	8:19	7	xmlnode_get_attrib_with_namespace ( item , "t" , NS_GOOGLE_ROSTER )
FUNCTION_CALL	8:19	8:80	8	xmlnode_get_attrib_with_namespace ( item , "t" , NS_GOOGLE_ROSTER )
CALLEE	8:19	8:19	9	xmlnode_get_attrib_with_namespace
LEAF_NODE	8:19	8:19	10	xmlnode_get_attrib_with_namespace
LEAF_NODE	8:52	8:52	9	(
ARGUMENT	8:53	8:53	9	item
FIELD	8:53	8:53	10	item
LEAF_NODE	8:53	8:53	11	item
LEAF_NODE	8:57	8:57	9	,
ARGUMENT	8:59	8:59	9	"t"
FIELD	8:59	8:59	10	"t"
LEAF_NODE	8:59	8:59	11	"t"
LEAF_NODE	8:62	8:62	9	,
ARGUMENT	8:64	8:64	9	NS_GOOGLE_ROSTER
FIELD	8:64	8:64	10	NS_GOOGLE_ROSTER
LEAF_NODE	8:64	8:64	11	NS_GOOGLE_ROSTER
LEAF_NODE	8:80	8:80	9	)
LEAF_NODE	8:81	8:81	4	;
SIMPLE_DECL	9:1	9:68	3	const char * subscription ; subscription = xmlnode_get_attrib ( item , "subscription" ) ;
VAR_DECL	9:1	9:13	4	const char * subscription ; subscription = xmlnode_get_attrib ( item , "subscription" )
TYPE	9:1	9:12	5	const char *
TYPE_NAME	9:1	9:7	6	const char
LEAF_NODE	9:1	9:1	7	const
LEAF_NODE	9:7	9:7	7	char
POINTER	9:12	9:12	6	*
LEAF_NODE	9:12	9:12	7	*
NAME	9:13	9:13	5	subscription
LEAF_NODE	9:13	9:13	6	subscription
LEAF_NODE	0:0	0:0	5	;
INIT	9:13	9:13	5	subscription = xmlnode_get_attrib ( item , "subscription" )
ASSIGN	9:13	9:28	6	subscription = xmlnode_get_attrib ( item , "subscription" )
LVAL	9:13	9:13	7	subscription
NAME	9:13	9:13	8	subscription
LEAF_NODE	9:13	9:13	9	subscription
ASSIGN_OP	9:26	9:26	7	=
LEAF_NODE	9:26	9:26	8	=
RVAL	9:28	9:28	7	xmlnode_get_attrib ( item , "subscription" )
FUNCTION_CALL	9:28	9:67	8	xmlnode_get_attrib ( item , "subscription" )
CALLEE	9:28	9:28	9	xmlnode_get_attrib
LEAF_NODE	9:28	9:28	10	xmlnode_get_attrib
LEAF_NODE	9:46	9:46	9	(
ARGUMENT	9:47	9:47	9	item
FIELD	9:47	9:47	10	item
LEAF_NODE	9:47	9:47	11	item
LEAF_NODE	9:51	9:51	9	,
ARGUMENT	9:53	9:53	9	"subscription"
FIELD	9:53	9:53	10	"subscription"
LEAF_NODE	9:53	9:53	11	"subscription"
LEAF_NODE	9:67	9:67	9	)
LEAF_NODE	9:68	9:68	4	;
SIMPLE_DECL	10:1	10:50	3	const char * ask ; ask = xmlnode_get_attrib ( item , "ask" ) ;
VAR_DECL	10:1	10:13	4	const char * ask ; ask = xmlnode_get_attrib ( item , "ask" )
TYPE	10:1	10:12	5	const char *
TYPE_NAME	10:1	10:7	6	const char
LEAF_NODE	10:1	10:1	7	const
LEAF_NODE	10:7	10:7	7	char
POINTER	10:12	10:12	6	*
LEAF_NODE	10:12	10:12	7	*
NAME	10:13	10:13	5	ask
LEAF_NODE	10:13	10:13	6	ask
LEAF_NODE	0:0	0:0	5	;
INIT	10:13	10:13	5	ask = xmlnode_get_attrib ( item , "ask" )
ASSIGN	10:13	10:19	6	ask = xmlnode_get_attrib ( item , "ask" )
LVAL	10:13	10:13	7	ask
NAME	10:13	10:13	8	ask
LEAF_NODE	10:13	10:13	9	ask
ASSIGN_OP	10:17	10:17	7	=
LEAF_NODE	10:17	10:17	8	=
RVAL	10:19	10:19	7	xmlnode_get_attrib ( item , "ask" )
FUNCTION_CALL	10:19	10:49	8	xmlnode_get_attrib ( item , "ask" )
CALLEE	10:19	10:19	9	xmlnode_get_attrib
LEAF_NODE	10:19	10:19	10	xmlnode_get_attrib
LEAF_NODE	10:37	10:37	9	(
ARGUMENT	10:38	10:38	9	item
FIELD	10:38	10:38	10	item
LEAF_NODE	10:38	10:38	11	item
LEAF_NODE	10:42	10:42	9	,
ARGUMENT	10:44	10:44	9	"ask"
FIELD	10:44	10:44	10	"ask"
LEAF_NODE	10:44	10:44	11	"ask"
LEAF_NODE	10:49	10:49	9	)
LEAF_NODE	10:50	10:50	4	;
SELECTION	11:1	11:63	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	( ! subscription || ! strcmp ( subscription , "none" ) ) && ! ask
EXPR	11:5	11:5	5	( ! subscription || ! strcmp ( subscription , "none" ) ) && ! ask
AND	11:5	11:57	6	( ! subscription || ! strcmp ( subscription , "none" ) ) && ! ask
EXPR	11:5	11:52	7	( ! subscription || ! strcmp ( subscription , "none" ) )
LEAF_NODE	11:5	11:5	8	(
OR	11:6	11:23	8	! subscription || ! strcmp ( subscription , "none" )
EXPR	11:6	11:6	9	! subscription
UNARY_EXPR	11:6	11:7	10	! subscription
UNARY_OPERATOR	11:6	11:6	11	!
LEAF_NODE	11:6	11:6	12	!
FIELD	11:7	11:7	11	subscription
LEAF_NODE	11:7	11:7	12	subscription
LEAF_NODE	11:20	11:20	9	||
EXPR	11:23	11:23	9	! strcmp ( subscription , "none" )
UNARY_EXPR	11:23	11:24	10	! strcmp ( subscription , "none" )
UNARY_OPERATOR	11:23	11:23	11	!
LEAF_NODE	11:23	11:23	12	!
FUNCTION_CALL	11:24	11:51	11	strcmp ( subscription , "none" )
CALLEE	11:24	11:24	12	strcmp
LEAF_NODE	11:24	11:24	13	strcmp
LEAF_NODE	11:30	11:30	12	(
ARGUMENT	11:31	11:31	12	subscription
FIELD	11:31	11:31	13	subscription
LEAF_NODE	11:31	11:31	14	subscription
LEAF_NODE	11:43	11:43	12	,
ARGUMENT	11:45	11:45	12	"none"
FIELD	11:45	11:45	13	"none"
LEAF_NODE	11:45	11:45	14	"none"
LEAF_NODE	11:51	11:51	12	)
LEAF_NODE	11:52	11:52	8	)
LEAF_NODE	11:54	11:54	7	&&
EXPR	11:57	11:57	7	! ask
UNARY_EXPR	11:57	11:58	8	! ask
UNARY_OPERATOR	11:57	11:57	9	!
LEAF_NODE	11:57	11:57	10	!
FIELD	11:58	11:58	9	ask
LEAF_NODE	11:58	11:58	10	ask
LEAF_NODE	11:61	11:61	4	)
STATEMENTS	11:63	16:1	4	
LEAF_NODE	11:63	11:63	5	{
STATEMENTS	15:2	15:2	5	
JUMP_STATEMENT	15:2	15:14	6	return FALSE ;
KEYWORD	15:2	15:2	7	return
LEAF_NODE	15:2	15:2	8	return
DESTINATION	15:9	15:9	7	FALSE
EXPR	15:9	15:9	8	FALSE
FIELD	15:9	15:9	9	FALSE
LEAF_NODE	15:9	15:9	10	FALSE
LEAF_NODE	15:14	15:14	7	;
LEAF_NODE	16:1	16:1	5	}
EXPR_STATEMENT	17:2	17:53	3	jid_norm = g_strdup ( jabber_normalize ( account , jid ) ) ;
EXPR	17:2	17:2	4	jid_norm = g_strdup ( jabber_normalize ( account , jid ) )
ASSIGN	17:2	17:13	5	jid_norm = g_strdup ( jabber_normalize ( account , jid ) )
LVAL	17:2	17:2	6	jid_norm
FIELD	17:2	17:2	7	jid_norm
LEAF_NODE	17:2	17:2	8	jid_norm
ASSIGN_OP	17:11	17:11	6	=
LEAF_NODE	17:11	17:11	7	=
RVAL	17:13	17:13	6	g_strdup ( jabber_normalize ( account , jid ) )
FUNCTION_CALL	17:13	17:52	7	g_strdup ( jabber_normalize ( account , jid ) )
CALLEE	17:13	17:13	8	g_strdup
LEAF_NODE	17:13	17:13	9	g_strdup
LEAF_NODE	17:21	17:21	8	(
ARGUMENT	17:22	17:22	8	jabber_normalize ( account , jid )
FUNCTION_CALL	17:22	17:51	9	jabber_normalize ( account , jid )
CALLEE	17:22	17:22	10	jabber_normalize
LEAF_NODE	17:22	17:22	11	jabber_normalize
LEAF_NODE	17:38	17:38	10	(
ARGUMENT	17:39	17:39	10	account
FIELD	17:39	17:39	11	account
LEAF_NODE	17:39	17:39	12	account
LEAF_NODE	17:46	17:46	10	,
ARGUMENT	17:48	17:48	10	jid
FIELD	17:48	17:48	11	jid
LEAF_NODE	17:48	17:48	12	jid
LEAF_NODE	17:51	17:51	10	)
LEAF_NODE	17:52	17:52	8	)
LEAF_NODE	17:53	17:53	4	;
EXPR_STATEMENT	18:1	19:66	3	on_block_list = NULL != g_slist_find_custom ( account -> deny , jid_norm , ( GCompareFunc ) strcmp ) ;
EXPR	18:1	18:1	4	on_block_list = NULL != g_slist_find_custom ( account -> deny , jid_norm , ( GCompareFunc ) strcmp )
ASSIGN	18:1	18:17	5	on_block_list = NULL != g_slist_find_custom ( account -> deny , jid_norm , ( GCompareFunc ) strcmp )
LVAL	18:1	18:1	6	on_block_list
FIELD	18:1	18:1	7	on_block_list
LEAF_NODE	18:1	18:1	8	on_block_list
ASSIGN_OP	18:15	18:15	6	=
LEAF_NODE	18:15	18:15	7	=
RVAL	18:17	18:25	6	NULL != g_slist_find_custom ( account -> deny , jid_norm , ( GCompareFunc ) strcmp )
FIELD	18:17	18:17	7	NULL
LEAF_NODE	18:17	18:17	8	NULL
EQ_OPERATOR	18:22	18:22	7	!=
LEAF_NODE	18:22	18:22	8	!=
FUNCTION_CALL	18:25	19:65	7	g_slist_find_custom ( account -> deny , jid_norm , ( GCompareFunc ) strcmp )
CALLEE	18:25	18:25	8	g_slist_find_custom
LEAF_NODE	18:25	18:25	9	g_slist_find_custom
LEAF_NODE	18:44	18:44	8	(
ARGUMENT	18:45	18:45	8	account -> deny
FIELD	18:45	18:54	9	account -> deny
LEAF_NODE	18:45	18:45	10	account
LEAF_NODE	18:52	18:52	10	->
LEAF_NODE	18:54	18:54	10	deny
LEAF_NODE	18:58	18:58	8	,
ARGUMENT	18:60	18:60	8	jid_norm
FIELD	18:60	18:60	9	jid_norm
LEAF_NODE	18:60	18:60	10	jid_norm
LEAF_NODE	18:68	18:68	8	,
ARGUMENT	19:45	19:59	8	( GCompareFunc ) strcmp
LEAF_NODE	19:45	19:45	9	(
TYPE_NAME	19:46	19:46	9	GCompareFunc
LEAF_NODE	19:46	19:46	10	GCompareFunc
LEAF_NODE	19:58	19:58	9	)
FIELD	19:59	19:59	9	strcmp
LEAF_NODE	19:59	19:59	10	strcmp
LEAF_NODE	19:65	19:65	8	)
LEAF_NODE	19:66	19:66	4	;
SELECTION	20:1	20:42	3	
KEYWORD	20:1	20:1	4	if
LEAF_NODE	20:1	20:1	5	if
LEAF_NODE	20:4	20:4	4	(
CONDITION	20:5	20:5	4	grt && ( * grt == 'H' || * grt == 'h' )
EXPR	20:5	20:5	5	grt && ( * grt == 'H' || * grt == 'h' )
AND	20:5	20:12	6	grt && ( * grt == 'H' || * grt == 'h' )
EXPR	20:5	20:5	7	grt
FIELD	20:5	20:5	8	grt
LEAF_NODE	20:5	20:5	9	grt
LEAF_NODE	20:9	20:9	7	&&
EXPR	20:12	20:39	7	( * grt == 'H' || * grt == 'h' )
LEAF_NODE	20:12	20:12	8	(
OR	20:13	20:28	8	* grt == 'H' || * grt == 'h'
EXPR	20:13	20:21	9	* grt == 'H'
UNARY_EXPR	20:13	20:14	10	* grt
UNARY_OPERATOR	20:13	20:13	11	*
LEAF_NODE	20:13	20:13	12	*
FIELD	20:14	20:14	11	grt
LEAF_NODE	20:14	20:14	12	grt
EQ_OPERATOR	20:18	20:18	10	==
LEAF_NODE	20:18	20:18	11	==
FIELD	20:21	20:21	10	'H'
LEAF_NODE	20:21	20:21	11	'H'
LEAF_NODE	20:25	20:25	9	||
EXPR	20:28	20:36	9	* grt == 'h'
UNARY_EXPR	20:28	20:29	10	* grt
UNARY_OPERATOR	20:28	20:28	11	*
LEAF_NODE	20:28	20:28	12	*
FIELD	20:29	20:29	11	grt
LEAF_NODE	20:29	20:29	12	grt
EQ_OPERATOR	20:33	20:33	10	==
LEAF_NODE	20:33	20:33	11	==
FIELD	20:36	20:36	10	'h'
LEAF_NODE	20:36	20:36	11	'h'
LEAF_NODE	20:39	20:39	8	)
LEAF_NODE	20:40	20:40	4	)
STATEMENTS	20:42	31:1	4	
LEAF_NODE	20:42	20:42	5	{
STATEMENTS	22:2	30:2	5	
SIMPLE_DECL	22:2	22:58	6	GSList * buddies ; buddies = purple_find_buddies ( account , jid_norm ) ;
VAR_DECL	22:2	22:10	7	GSList * buddies ; buddies = purple_find_buddies ( account , jid_norm )
TYPE	22:2	22:9	8	GSList *
TYPE_NAME	22:2	22:2	9	GSList
LEAF_NODE	22:2	22:2	10	GSList
POINTER	22:9	22:9	9	*
LEAF_NODE	22:9	22:9	10	*
NAME	22:10	22:10	8	buddies
LEAF_NODE	22:10	22:10	9	buddies
LEAF_NODE	0:0	0:0	8	;
INIT	22:10	22:10	8	buddies = purple_find_buddies ( account , jid_norm )
ASSIGN	22:10	22:20	9	buddies = purple_find_buddies ( account , jid_norm )
LVAL	22:10	22:10	10	buddies
NAME	22:10	22:10	11	buddies
LEAF_NODE	22:10	22:10	12	buddies
ASSIGN_OP	22:18	22:18	10	=
LEAF_NODE	22:18	22:18	11	=
RVAL	22:20	22:20	10	purple_find_buddies ( account , jid_norm )
FUNCTION_CALL	22:20	22:57	11	purple_find_buddies ( account , jid_norm )
CALLEE	22:20	22:20	12	purple_find_buddies
LEAF_NODE	22:20	22:20	13	purple_find_buddies
LEAF_NODE	22:39	22:39	12	(
ARGUMENT	22:40	22:40	12	account
FIELD	22:40	22:40	13	account
LEAF_NODE	22:40	22:40	14	account
LEAF_NODE	22:47	22:47	12	,
ARGUMENT	22:49	22:49	12	jid_norm
FIELD	22:49	22:49	13	jid_norm
LEAF_NODE	22:49	22:49	14	jid_norm
LEAF_NODE	22:57	22:57	12	)
LEAF_NODE	22:58	22:58	7	;
SELECTION	23:2	24:3	6	
KEYWORD	23:2	23:2	7	if
LEAF_NODE	23:2	23:2	8	if
LEAF_NODE	23:5	23:5	7	(
CONDITION	23:6	23:6	7	buddies
EXPR	23:6	23:6	8	buddies
FIELD	23:6	23:6	9	buddies
LEAF_NODE	23:6	23:6	10	buddies
LEAF_NODE	23:13	23:13	7	)
STATEMENTS	24:3	24:3	7	
EXPR_STATEMENT	24:3	25:30	8	purple_debug_info ( "jabber" , "Removing %s from local buddy list\n" , jid_norm ) ;
EXPR	24:3	24:3	9	purple_debug_info ( "jabber" , "Removing %s from local buddy list\n" , jid_norm )
FUNCTION_CALL	24:3	25:29	10	purple_debug_info ( "jabber" , "Removing %s from local buddy list\n" , jid_norm )
CALLEE	24:3	24:3	11	purple_debug_info
LEAF_NODE	24:3	24:3	12	purple_debug_info
LEAF_NODE	24:20	24:20	11	(
ARGUMENT	24:21	24:21	11	"jabber"
FIELD	24:21	24:21	12	"jabber"
LEAF_NODE	24:21	24:21	13	"jabber"
LEAF_NODE	24:29	24:29	11	,
ARGUMENT	24:31	24:31	11	"Removing %s from local buddy list\n"
FIELD	24:31	24:31	12	"Removing %s from local buddy list\n"
LEAF_NODE	24:31	24:31	13	"Removing %s from local buddy list\n"
LEAF_NODE	24:68	24:68	11	,
ARGUMENT	25:21	25:21	11	jid_norm
FIELD	25:21	25:21	12	jid_norm
LEAF_NODE	25:21	25:21	13	jid_norm
LEAF_NODE	25:29	25:29	11	)
LEAF_NODE	25:30	25:30	9	;
ITERATION	26:2	26:68	6	
KEYWORD	26:2	26:2	7	for
LEAF_NODE	26:2	26:2	8	for
LEAF_NODE	26:6	26:6	7	(
FOR_INIT	26:8	26:8	7	;
LEAF_NODE	26:8	26:8	8	;
CONDITION	26:10	26:10	7	buddies
EXPR	26:10	26:10	8	buddies
FIELD	26:10	26:10	9	buddies
LEAF_NODE	26:10	26:10	10	buddies
LEAF_NODE	26:17	26:17	7	;
FOR_EXPR	26:19	26:19	7	buddies = g_slist_delete_link ( buddies , buddies )
EXPR	26:19	26:19	8	buddies = g_slist_delete_link ( buddies , buddies )
ASSIGN	26:19	26:29	9	buddies = g_slist_delete_link ( buddies , buddies )
LVAL	26:19	26:19	10	buddies
FIELD	26:19	26:19	11	buddies
LEAF_NODE	26:19	26:19	12	buddies
ASSIGN_OP	26:27	26:27	10	=
LEAF_NODE	26:27	26:27	11	=
RVAL	26:29	26:29	10	g_slist_delete_link ( buddies , buddies )
FUNCTION_CALL	26:29	26:65	11	g_slist_delete_link ( buddies , buddies )
CALLEE	26:29	26:29	12	g_slist_delete_link
LEAF_NODE	26:29	26:29	13	g_slist_delete_link
LEAF_NODE	26:48	26:48	12	(
ARGUMENT	26:49	26:49	12	buddies
FIELD	26:49	26:49	13	buddies
LEAF_NODE	26:49	26:49	14	buddies
LEAF_NODE	26:56	26:56	12	,
ARGUMENT	26:58	26:58	12	buddies
FIELD	26:58	26:58	13	buddies
LEAF_NODE	26:58	26:58	14	buddies
LEAF_NODE	26:65	26:65	12	)
LEAF_NODE	26:66	26:66	7	)
STATEMENTS	26:68	28:2	7	
LEAF_NODE	26:68	26:68	8	{
STATEMENTS	27:3	27:3	8	
EXPR_STATEMENT	27:3	27:43	9	purple_blist_remove_buddy ( buddies -> data ) ;
EXPR	27:3	27:3	10	purple_blist_remove_buddy ( buddies -> data )
FUNCTION_CALL	27:3	27:42	11	purple_blist_remove_buddy ( buddies -> data )
CALLEE	27:3	27:3	12	purple_blist_remove_buddy
LEAF_NODE	27:3	27:3	13	purple_blist_remove_buddy
LEAF_NODE	27:28	27:28	12	(
ARGUMENT	27:29	27:29	12	buddies -> data
FIELD	27:29	27:38	13	buddies -> data
LEAF_NODE	27:29	27:29	14	buddies
LEAF_NODE	27:36	27:36	14	->
LEAF_NODE	27:38	27:38	14	data
LEAF_NODE	27:42	27:42	12	)
LEAF_NODE	27:43	27:43	10	;
LEAF_NODE	28:2	28:2	8	}
EXPR_STATEMENT	29:2	29:18	6	g_free ( jid_norm ) ;
EXPR	29:2	29:2	7	g_free ( jid_norm )
FUNCTION_CALL	29:2	29:17	8	g_free ( jid_norm )
CALLEE	29:2	29:2	9	g_free
LEAF_NODE	29:2	29:2	10	g_free
LEAF_NODE	29:8	29:8	9	(
ARGUMENT	29:9	29:9	9	jid_norm
FIELD	29:9	29:9	10	jid_norm
LEAF_NODE	29:9	29:9	11	jid_norm
LEAF_NODE	29:17	29:17	9	)
LEAF_NODE	29:18	29:18	7	;
JUMP_STATEMENT	30:2	30:14	6	return FALSE ;
KEYWORD	30:2	30:2	7	return
LEAF_NODE	30:2	30:2	8	return
DESTINATION	30:9	30:9	7	FALSE
EXPR	30:9	30:9	8	FALSE
FIELD	30:9	30:9	9	FALSE
LEAF_NODE	30:9	30:9	10	FALSE
LEAF_NODE	30:14	30:14	7	;
LEAF_NODE	31:1	31:1	5	}
SELECTION	32:1	32:62	3	
KEYWORD	32:1	32:1	4	if
LEAF_NODE	32:1	32:1	5	if
LEAF_NODE	32:4	32:4	4	(
CONDITION	32:5	32:5	4	! on_block_list && ( grt && ( * grt == 'B' || * grt == 'b' ) )
EXPR	32:5	32:5	5	! on_block_list && ( grt && ( * grt == 'B' || * grt == 'b' ) )
AND	32:5	32:23	6	! on_block_list && ( grt && ( * grt == 'B' || * grt == 'b' ) )
EXPR	32:5	32:5	7	! on_block_list
UNARY_EXPR	32:5	32:6	8	! on_block_list
UNARY_OPERATOR	32:5	32:5	9	!
LEAF_NODE	32:5	32:5	10	!
FIELD	32:6	32:6	9	on_block_list
LEAF_NODE	32:6	32:6	10	on_block_list
LEAF_NODE	32:20	32:20	7	&&
EXPR	32:23	32:59	7	( grt && ( * grt == 'B' || * grt == 'b' ) )
LEAF_NODE	32:23	32:23	8	(
AND	32:24	32:31	8	grt && ( * grt == 'B' || * grt == 'b' )
EXPR	32:24	32:24	9	grt
FIELD	32:24	32:24	10	grt
LEAF_NODE	32:24	32:24	11	grt
LEAF_NODE	32:28	32:28	9	&&
EXPR	32:31	32:58	9	( * grt == 'B' || * grt == 'b' )
LEAF_NODE	32:31	32:31	10	(
OR	32:32	32:47	10	* grt == 'B' || * grt == 'b'
EXPR	32:32	32:40	11	* grt == 'B'
UNARY_EXPR	32:32	32:33	12	* grt
UNARY_OPERATOR	32:32	32:32	13	*
LEAF_NODE	32:32	32:32	14	*
FIELD	32:33	32:33	13	grt
LEAF_NODE	32:33	32:33	14	grt
EQ_OPERATOR	32:37	32:37	12	==
LEAF_NODE	32:37	32:37	13	==
FIELD	32:40	32:40	12	'B'
LEAF_NODE	32:40	32:40	13	'B'
LEAF_NODE	32:44	32:44	11	||
EXPR	32:47	32:55	11	* grt == 'b'
UNARY_EXPR	32:47	32:48	12	* grt
UNARY_OPERATOR	32:47	32:47	13	*
LEAF_NODE	32:47	32:47	14	*
FIELD	32:48	32:48	13	grt
LEAF_NODE	32:48	32:48	14	grt
EQ_OPERATOR	32:52	32:52	12	==
LEAF_NODE	32:52	32:52	13	==
FIELD	32:55	32:55	12	'b'
LEAF_NODE	32:55	32:55	13	'b'
LEAF_NODE	32:58	32:58	10	)
LEAF_NODE	32:59	32:59	8	)
LEAF_NODE	32:60	32:60	4	)
STATEMENTS	32:62	35:1	4	
LEAF_NODE	32:62	32:62	5	{
STATEMENTS	33:2	34:2	5	
EXPR_STATEMENT	33:2	33:56	6	purple_debug_info ( "jabber" , "Blocking %s\n" , jid_norm ) ;
EXPR	33:2	33:2	7	purple_debug_info ( "jabber" , "Blocking %s\n" , jid_norm )
FUNCTION_CALL	33:2	33:55	8	purple_debug_info ( "jabber" , "Blocking %s\n" , jid_norm )
CALLEE	33:2	33:2	9	purple_debug_info
LEAF_NODE	33:2	33:2	10	purple_debug_info
LEAF_NODE	33:19	33:19	9	(
ARGUMENT	33:20	33:20	9	"jabber"
FIELD	33:20	33:20	10	"jabber"
LEAF_NODE	33:20	33:20	11	"jabber"
LEAF_NODE	33:28	33:28	9	,
ARGUMENT	33:30	33:30	9	"Blocking %s\n"
FIELD	33:30	33:30	10	"Blocking %s\n"
LEAF_NODE	33:30	33:30	11	"Blocking %s\n"
LEAF_NODE	33:45	33:45	9	,
ARGUMENT	33:47	33:47	9	jid_norm
FIELD	33:47	33:47	10	jid_norm
LEAF_NODE	33:47	33:47	11	jid_norm
LEAF_NODE	33:55	33:55	9	)
LEAF_NODE	33:56	33:56	7	;
EXPR_STATEMENT	34:2	34:50	6	purple_privacy_deny_add ( account , jid_norm , TRUE ) ;
EXPR	34:2	34:2	7	purple_privacy_deny_add ( account , jid_norm , TRUE )
FUNCTION_CALL	34:2	34:49	8	purple_privacy_deny_add ( account , jid_norm , TRUE )
CALLEE	34:2	34:2	9	purple_privacy_deny_add
LEAF_NODE	34:2	34:2	10	purple_privacy_deny_add
LEAF_NODE	34:25	34:25	9	(
ARGUMENT	34:26	34:26	9	account
FIELD	34:26	34:26	10	account
LEAF_NODE	34:26	34:26	11	account
LEAF_NODE	34:33	34:33	9	,
ARGUMENT	34:35	34:35	9	jid_norm
FIELD	34:35	34:35	10	jid_norm
LEAF_NODE	34:35	34:35	11	jid_norm
LEAF_NODE	34:43	34:43	9	,
ARGUMENT	34:45	34:45	9	TRUE
FIELD	34:45	34:45	10	TRUE
LEAF_NODE	34:45	34:45	11	TRUE
LEAF_NODE	34:49	34:49	9	)
LEAF_NODE	34:50	34:50	7	;
LEAF_NODE	35:1	35:1	5	}
SELECTION	35:3	35:8	3	
KEYWORD	35:3	35:3	4	else
LEAF_NODE	35:3	35:3	5	else
STATEMENTS	35:8	35:8	4	
SELECTION	35:8	35:69	5	
KEYWORD	35:8	35:8	6	if
LEAF_NODE	35:8	35:8	7	if
LEAF_NODE	35:11	35:11	6	(
CONDITION	35:12	35:12	6	on_block_list && ( ! grt || ( * grt != 'B' && * grt != 'b' ) )
EXPR	35:12	35:12	7	on_block_list && ( ! grt || ( * grt != 'B' && * grt != 'b' ) )
AND	35:12	35:29	8	on_block_list && ( ! grt || ( * grt != 'B' && * grt != 'b' ) )
EXPR	35:12	35:12	9	on_block_list
FIELD	35:12	35:12	10	on_block_list
LEAF_NODE	35:12	35:12	11	on_block_list
LEAF_NODE	35:26	35:26	9	&&
EXPR	35:29	35:67	9	( ! grt || ( * grt != 'B' && * grt != 'b' ) )
LEAF_NODE	35:29	35:29	10	(
OR	35:30	35:38	10	! grt || ( * grt != 'B' && * grt != 'b' )
EXPR	35:30	35:30	11	! grt
UNARY_EXPR	35:30	35:31	12	! grt
UNARY_OPERATOR	35:30	35:30	13	!
LEAF_NODE	35:30	35:30	14	!
FIELD	35:31	35:31	13	grt
LEAF_NODE	35:31	35:31	14	grt
LEAF_NODE	35:35	35:35	11	||
EXPR	35:38	35:66	11	( * grt != 'B' && * grt != 'b' )
LEAF_NODE	35:38	35:38	12	(
AND	35:39	35:54	12	* grt != 'B' && * grt != 'b'
EXPR	35:39	35:47	13	* grt != 'B'
UNARY_EXPR	35:39	35:40	14	* grt
UNARY_OPERATOR	35:39	35:39	15	*
LEAF_NODE	35:39	35:39	16	*
FIELD	35:40	35:40	15	grt
LEAF_NODE	35:40	35:40	16	grt
EQ_OPERATOR	35:44	35:44	14	!=
LEAF_NODE	35:44	35:44	15	!=
FIELD	35:47	35:47	14	'B'
LEAF_NODE	35:47	35:47	15	'B'
LEAF_NODE	35:51	35:51	13	&&
EXPR	35:54	35:62	13	* grt != 'b'
UNARY_EXPR	35:54	35:55	14	* grt
UNARY_OPERATOR	35:54	35:54	15	*
LEAF_NODE	35:54	35:54	16	*
FIELD	35:55	35:55	15	grt
LEAF_NODE	35:55	35:55	16	grt
EQ_OPERATOR	35:59	35:59	14	!=
LEAF_NODE	35:59	35:59	15	!=
FIELD	35:62	35:62	14	'b'
LEAF_NODE	35:62	35:62	15	'b'
LEAF_NODE	35:66	35:66	12	)
LEAF_NODE	35:67	35:67	10	)
LEAF_NODE	35:68	35:68	6	)
STATEMENTS	35:69	38:1	6	
LEAF_NODE	35:69	35:69	7	{
STATEMENTS	36:2	37:2	7	
EXPR_STATEMENT	36:2	36:58	8	purple_debug_info ( "jabber" , "Unblocking %s\n" , jid_norm ) ;
EXPR	36:2	36:2	9	purple_debug_info ( "jabber" , "Unblocking %s\n" , jid_norm )
FUNCTION_CALL	36:2	36:57	10	purple_debug_info ( "jabber" , "Unblocking %s\n" , jid_norm )
CALLEE	36:2	36:2	11	purple_debug_info
LEAF_NODE	36:2	36:2	12	purple_debug_info
LEAF_NODE	36:19	36:19	11	(
ARGUMENT	36:20	36:20	11	"jabber"
FIELD	36:20	36:20	12	"jabber"
LEAF_NODE	36:20	36:20	13	"jabber"
LEAF_NODE	36:28	36:28	11	,
ARGUMENT	36:30	36:30	11	"Unblocking %s\n"
FIELD	36:30	36:30	12	"Unblocking %s\n"
LEAF_NODE	36:30	36:30	13	"Unblocking %s\n"
LEAF_NODE	36:47	36:47	11	,
ARGUMENT	36:49	36:49	11	jid_norm
FIELD	36:49	36:49	12	jid_norm
LEAF_NODE	36:49	36:49	13	jid_norm
LEAF_NODE	36:57	36:57	11	)
LEAF_NODE	36:58	36:58	9	;
EXPR_STATEMENT	37:2	37:53	8	purple_privacy_deny_remove ( account , jid_norm , TRUE ) ;
EXPR	37:2	37:2	9	purple_privacy_deny_remove ( account , jid_norm , TRUE )
FUNCTION_CALL	37:2	37:52	10	purple_privacy_deny_remove ( account , jid_norm , TRUE )
CALLEE	37:2	37:2	11	purple_privacy_deny_remove
LEAF_NODE	37:2	37:2	12	purple_privacy_deny_remove
LEAF_NODE	37:28	37:28	11	(
ARGUMENT	37:29	37:29	11	account
FIELD	37:29	37:29	12	account
LEAF_NODE	37:29	37:29	13	account
LEAF_NODE	37:36	37:36	11	,
ARGUMENT	37:38	37:38	11	jid_norm
FIELD	37:38	37:38	12	jid_norm
LEAF_NODE	37:38	37:38	13	jid_norm
LEAF_NODE	37:46	37:46	11	,
ARGUMENT	37:48	37:48	11	TRUE
FIELD	37:48	37:48	12	TRUE
LEAF_NODE	37:48	37:48	13	TRUE
LEAF_NODE	37:52	37:52	11	)
LEAF_NODE	37:53	37:53	9	;
LEAF_NODE	38:1	38:1	7	}
EXPR_STATEMENT	39:1	39:17	3	g_free ( jid_norm ) ;
EXPR	39:1	39:1	4	g_free ( jid_norm )
FUNCTION_CALL	39:1	39:16	5	g_free ( jid_norm )
CALLEE	39:1	39:1	6	g_free
LEAF_NODE	39:1	39:1	7	g_free
LEAF_NODE	39:7	39:7	6	(
ARGUMENT	39:8	39:8	6	jid_norm
FIELD	39:8	39:8	7	jid_norm
LEAF_NODE	39:8	39:8	8	jid_norm
LEAF_NODE	39:16	39:16	6	)
LEAF_NODE	39:17	39:17	4	;
JUMP_STATEMENT	40:1	40:12	3	return TRUE ;
KEYWORD	40:1	40:1	4	return
LEAF_NODE	40:1	40:1	5	return
DESTINATION	40:8	40:8	4	TRUE
EXPR	40:8	40:8	5	TRUE
FIELD	40:8	40:8	6	TRUE
LEAF_NODE	40:8	40:8	7	TRUE
LEAF_NODE	40:12	40:12	4	;
LEAF_NODE	41:0	41:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	18:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	novell_convo_closed
LEAF_NODE	2:0	2:0	3	novell_convo_closed
PARAMETER_LIST	2:19	2:58	2	( PurpleConnection * gc , const char * who )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:39	3	PurpleConnection * gc
TYPE	2:20	2:37	4	PurpleConnection *
TYPE_NAME	2:20	2:20	5	PurpleConnection
LEAF_NODE	2:20	2:20	6	PurpleConnection
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:39	2:39	4	gc
LEAF_NODE	2:39	2:39	5	gc
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:55	3	const char * who
TYPE	2:43	2:54	4	const char *
TYPE_NAME	2:43	2:49	5	const char
LEAF_NODE	2:43	2:43	6	const
LEAF_NODE	2:49	2:49	6	char
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	who
LEAF_NODE	2:55	2:55	5	who
LEAF_NODE	2:58	2:58	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	11:1	2	
SIMPLE_DECL	4:1	4:13	3	NMUser * user ;
VAR_DECL	4:1	4:9	4	NMUser * user
TYPE	4:1	4:8	5	NMUser *
TYPE_NAME	4:1	4:1	6	NMUser
LEAF_NODE	4:1	4:1	7	NMUser
POINTER	4:8	4:8	6	*
LEAF_NODE	4:8	4:8	7	*
NAME	4:9	4:9	5	user
LEAF_NODE	4:9	4:9	6	user
LEAF_NODE	4:13	4:13	4	;
SIMPLE_DECL	5:1	5:19	3	NMConference * conf ;
VAR_DECL	5:1	5:15	4	NMConference * conf
TYPE	5:1	5:14	5	NMConference *
TYPE_NAME	5:1	5:1	6	NMConference
LEAF_NODE	5:1	5:1	7	NMConference
POINTER	5:14	5:14	6	*
LEAF_NODE	5:14	5:14	7	*
NAME	5:15	5:15	5	conf
LEAF_NODE	5:15	5:15	6	conf
LEAF_NODE	5:19	5:19	4	;
SIMPLE_DECL	6:1	6:15	3	const char * dn ;
VAR_DECL	6:1	6:13	4	const char * dn
TYPE	6:1	6:12	5	const char *
TYPE_NAME	6:1	6:7	6	const char
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	char
POINTER	6:12	6:12	6	*
LEAF_NODE	6:12	6:12	7	*
NAME	6:13	6:13	5	dn
LEAF_NODE	6:13	6:13	6	dn
LEAF_NODE	6:15	6:15	4	;
SIMPLE_DECL	7:1	7:19	3	NMERR_T rc ; rc = NM_OK ;
VAR_DECL	7:1	7:9	4	NMERR_T rc ; rc = NM_OK
TYPE	7:1	7:1	5	NMERR_T
TYPE_NAME	7:1	7:1	6	NMERR_T
LEAF_NODE	7:1	7:1	7	NMERR_T
NAME	7:9	7:9	5	rc
LEAF_NODE	7:9	7:9	6	rc
LEAF_NODE	0:0	0:0	5	;
INIT	7:9	7:9	5	rc = NM_OK
ASSIGN	7:9	7:14	6	rc = NM_OK
LVAL	7:9	7:9	7	rc
NAME	7:9	7:9	8	rc
LEAF_NODE	7:9	7:9	9	rc
ASSIGN_OP	7:12	7:12	7	=
LEAF_NODE	7:12	7:12	8	=
RVAL	7:14	7:14	7	NM_OK
FIELD	7:14	7:14	8	NM_OK
LEAF_NODE	7:14	7:14	9	NM_OK
LEAF_NODE	7:19	7:19	4	;
SELECTION	8:1	9:2	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	gc == NULL || who == NULL
EXPR	8:5	8:5	5	gc == NULL || who == NULL
OR	8:5	8:19	6	gc == NULL || who == NULL
EXPR	8:5	8:11	7	gc == NULL
FIELD	8:5	8:5	8	gc
LEAF_NODE	8:5	8:5	9	gc
EQ_OPERATOR	8:8	8:8	8	==
LEAF_NODE	8:8	8:8	9	==
FIELD	8:11	8:11	8	NULL
LEAF_NODE	8:11	8:11	9	NULL
LEAF_NODE	8:16	8:16	7	||
EXPR	8:19	8:26	7	who == NULL
FIELD	8:19	8:19	8	who
LEAF_NODE	8:19	8:19	9	who
EQ_OPERATOR	8:23	8:23	8	==
LEAF_NODE	8:23	8:23	9	==
FIELD	8:26	8:26	8	NULL
LEAF_NODE	8:26	8:26	9	NULL
LEAF_NODE	8:30	8:30	4	)
STATEMENTS	9:2	9:2	4	
JUMP_STATEMENT	9:2	9:8	5	return DESTINATION ;
KEYWORD	9:2	9:2	6	return
LEAF_NODE	9:2	9:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	9:8	9:8	6	;
EXPR_STATEMENT	10:1	10:22	3	user = gc -> proto_data ;
EXPR	10:1	10:1	4	user = gc -> proto_data
ASSIGN	10:1	10:8	5	user = gc -> proto_data
LVAL	10:1	10:1	6	user
FIELD	10:1	10:1	7	user
LEAF_NODE	10:1	10:1	8	user
ASSIGN_OP	10:6	10:6	6	=
LEAF_NODE	10:6	10:6	7	=
RVAL	10:8	10:8	6	gc -> proto_data
FIELD	10:8	10:12	7	gc -> proto_data
LEAF_NODE	10:8	10:8	8	gc
LEAF_NODE	10:10	10:10	8	->
LEAF_NODE	10:12	10:12	8	proto_data
LEAF_NODE	10:22	10:22	4	;
SELECTION	11:1	11:45	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	user && ( dn = nm_lookup_dn ( user , who ) )
EXPR	11:5	11:5	5	user && ( dn = nm_lookup_dn ( user , who ) )
AND	11:5	11:13	6	user && ( dn = nm_lookup_dn ( user , who ) )
EXPR	11:5	11:5	7	user
FIELD	11:5	11:5	8	user
LEAF_NODE	11:5	11:5	9	user
LEAF_NODE	11:10	11:10	7	&&
EXPR	11:13	11:42	7	( dn = nm_lookup_dn ( user , who ) )
LEAF_NODE	11:13	11:13	8	(
ASSIGN	11:14	11:19	8	dn = nm_lookup_dn ( user , who )
LVAL	11:14	11:14	9	dn
FIELD	11:14	11:14	10	dn
LEAF_NODE	11:14	11:14	11	dn
ASSIGN_OP	11:17	11:17	9	=
LEAF_NODE	11:17	11:17	10	=
RVAL	11:19	11:19	9	nm_lookup_dn ( user , who )
FUNCTION_CALL	11:19	11:41	10	nm_lookup_dn ( user , who )
CALLEE	11:19	11:19	11	nm_lookup_dn
LEAF_NODE	11:19	11:19	12	nm_lookup_dn
LEAF_NODE	11:31	11:31	11	(
ARGUMENT	11:32	11:32	11	user
FIELD	11:32	11:32	12	user
LEAF_NODE	11:32	11:32	13	user
LEAF_NODE	11:36	11:36	11	,
ARGUMENT	11:38	11:38	11	who
FIELD	11:38	11:38	12	who
LEAF_NODE	11:38	11:38	13	who
LEAF_NODE	11:41	11:41	11	)
LEAF_NODE	11:42	11:42	8	)
LEAF_NODE	11:43	11:43	4	)
STATEMENTS	11:45	17:1	4	
LEAF_NODE	11:45	11:45	5	{
STATEMENTS	12:2	13:2	5	
EXPR_STATEMENT	12:2	12:39	6	conf = nm_find_conversation ( user , dn ) ;
EXPR	12:2	12:2	7	conf = nm_find_conversation ( user , dn )
ASSIGN	12:2	12:9	8	conf = nm_find_conversation ( user , dn )
LVAL	12:2	12:2	9	conf
FIELD	12:2	12:2	10	conf
LEAF_NODE	12:2	12:2	11	conf
ASSIGN_OP	12:7	12:7	9	=
LEAF_NODE	12:7	12:7	10	=
RVAL	12:9	12:9	9	nm_find_conversation ( user , dn )
FUNCTION_CALL	12:9	12:38	10	nm_find_conversation ( user , dn )
CALLEE	12:9	12:9	11	nm_find_conversation
LEAF_NODE	12:9	12:9	12	nm_find_conversation
LEAF_NODE	12:29	12:29	11	(
ARGUMENT	12:30	12:30	11	user
FIELD	12:30	12:30	12	user
LEAF_NODE	12:30	12:30	13	user
LEAF_NODE	12:34	12:34	11	,
ARGUMENT	12:36	12:36	11	dn
FIELD	12:36	12:36	12	dn
LEAF_NODE	12:36	12:36	13	dn
LEAF_NODE	12:38	12:38	11	)
LEAF_NODE	12:39	12:39	7	;
SELECTION	13:2	13:12	6	
KEYWORD	13:2	13:2	7	if
LEAF_NODE	13:2	13:2	8	if
LEAF_NODE	13:5	13:5	7	(
CONDITION	13:6	13:6	7	conf
EXPR	13:6	13:6	8	conf
FIELD	13:6	13:6	9	conf
LEAF_NODE	13:6	13:6	10	conf
LEAF_NODE	13:10	13:10	7	)
STATEMENTS	13:12	16:2	7	
LEAF_NODE	13:12	13:12	8	{
STATEMENTS	14:3	15:3	8	
EXPR_STATEMENT	14:3	14:56	9	rc = nm_send_leave_conference ( user , conf , NULL , NULL ) ;
EXPR	14:3	14:3	10	rc = nm_send_leave_conference ( user , conf , NULL , NULL )
ASSIGN	14:3	14:8	11	rc = nm_send_leave_conference ( user , conf , NULL , NULL )
LVAL	14:3	14:3	12	rc
FIELD	14:3	14:3	13	rc
LEAF_NODE	14:3	14:3	14	rc
ASSIGN_OP	14:6	14:6	12	=
LEAF_NODE	14:6	14:6	13	=
RVAL	14:8	14:8	12	nm_send_leave_conference ( user , conf , NULL , NULL )
FUNCTION_CALL	14:8	14:55	13	nm_send_leave_conference ( user , conf , NULL , NULL )
CALLEE	14:8	14:8	14	nm_send_leave_conference
LEAF_NODE	14:8	14:8	15	nm_send_leave_conference
LEAF_NODE	14:32	14:32	14	(
ARGUMENT	14:33	14:33	14	user
FIELD	14:33	14:33	15	user
LEAF_NODE	14:33	14:33	16	user
LEAF_NODE	14:37	14:37	14	,
ARGUMENT	14:39	14:39	14	conf
FIELD	14:39	14:39	15	conf
LEAF_NODE	14:39	14:39	16	conf
LEAF_NODE	14:43	14:43	14	,
ARGUMENT	14:45	14:45	14	NULL
FIELD	14:45	14:45	15	NULL
LEAF_NODE	14:45	14:45	16	NULL
LEAF_NODE	14:49	14:49	14	,
ARGUMENT	14:51	14:51	14	NULL
FIELD	14:51	14:51	15	NULL
LEAF_NODE	14:51	14:51	16	NULL
LEAF_NODE	14:55	14:55	14	)
LEAF_NODE	14:56	14:56	10	;
EXPR_STATEMENT	15:3	15:34	9	_check_for_disconnect ( user , rc ) ;
EXPR	15:3	15:3	10	_check_for_disconnect ( user , rc )
FUNCTION_CALL	15:3	15:33	11	_check_for_disconnect ( user , rc )
CALLEE	15:3	15:3	12	_check_for_disconnect
LEAF_NODE	15:3	15:3	13	_check_for_disconnect
LEAF_NODE	15:24	15:24	12	(
ARGUMENT	15:25	15:25	12	user
FIELD	15:25	15:25	13	user
LEAF_NODE	15:25	15:25	14	user
LEAF_NODE	15:29	15:29	12	,
ARGUMENT	15:31	15:31	12	rc
FIELD	15:31	15:31	13	rc
LEAF_NODE	15:31	15:31	14	rc
LEAF_NODE	15:33	15:33	12	)
LEAF_NODE	15:34	15:34	10	;
LEAF_NODE	16:2	16:2	8	}
LEAF_NODE	17:1	17:1	5	}
LEAF_NODE	18:0	18:0	2	}

SOURCE_FILE	7:1	8:1	0	
SIMPLE_DECL	7:1	7:13	1	GPid pid ; pid = 0 ;
VAR_DECL	7:1	7:6	2	GPid pid ; pid = 0
TYPE	7:1	7:1	3	GPid
TYPE_NAME	7:1	7:1	4	GPid
LEAF_NODE	7:1	7:1	5	GPid
NAME	7:6	7:6	3	pid
LEAF_NODE	7:6	7:6	4	pid
LEAF_NODE	0:0	0:0	3	;
INIT	7:6	7:6	3	pid = 0
ASSIGN	7:6	7:12	4	pid = 0
LVAL	7:6	7:6	5	pid
NAME	7:6	7:6	6	pid
LEAF_NODE	7:6	7:6	7	pid
ASSIGN_OP	7:10	7:10	5	=
LEAF_NODE	7:10	7:10	6	=
RVAL	7:12	7:12	5	0
FIELD	7:12	7:12	6	0
LEAF_NODE	7:12	7:12	7	0
LEAF_NODE	7:13	7:13	2	;
SIMPLE_DECL	8:1	8:24	1	ChildProcess * cp ; cp = NULL ;
VAR_DECL	8:1	8:15	2	ChildProcess * cp ; cp = NULL
TYPE	8:1	8:14	3	ChildProcess *
TYPE_NAME	8:1	8:1	4	ChildProcess
LEAF_NODE	8:1	8:1	5	ChildProcess
POINTER	8:14	8:14	4	*
LEAF_NODE	8:14	8:14	5	*
NAME	8:15	8:15	3	cp
LEAF_NODE	8:15	8:15	4	cp
LEAF_NODE	0:0	0:0	3	;
INIT	8:15	8:15	3	cp = NULL
ASSIGN	8:15	8:20	4	cp = NULL
LVAL	8:15	8:15	5	cp
NAME	8:15	8:15	6	cp
LEAF_NODE	8:15	8:15	7	cp
ASSIGN_OP	8:18	8:18	5	=
LEAF_NODE	8:18	8:18	6	=
RVAL	8:20	8:20	5	NULL
FIELD	8:20	8:20	6	NULL
LEAF_NODE	8:20	8:20	7	NULL
LEAF_NODE	8:24	8:24	2	;

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	174:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	add_protocol_options
LEAF_NODE	2:0	2:0	3	add_protocol_options
PARAMETER_LIST	2:20	2:47	2	( AccountPrefsDialog * dialog )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:41	3	AccountPrefsDialog * dialog
TYPE	2:21	2:40	4	AccountPrefsDialog *
TYPE_NAME	2:21	2:21	5	AccountPrefsDialog
LEAF_NODE	2:21	2:21	6	AccountPrefsDialog
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	dialog
LEAF_NODE	2:41	2:41	5	dialog
LEAF_NODE	2:47	2:47	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	39:1	2	
SIMPLE_DECL	4:1	4:28	3	PurpleAccountOption * option ;
VAR_DECL	4:1	4:22	4	PurpleAccountOption * option
TYPE	4:1	4:21	5	PurpleAccountOption *
TYPE_NAME	4:1	4:1	6	PurpleAccountOption
LEAF_NODE	4:1	4:1	7	PurpleAccountOption
POINTER	4:21	4:21	6	*
LEAF_NODE	4:21	4:21	7	*
NAME	4:22	4:22	5	option
LEAF_NODE	4:22	4:22	6	option
LEAF_NODE	4:28	4:28	4	;
SIMPLE_DECL	5:1	5:23	3	PurpleAccount * account ;
VAR_DECL	5:1	5:16	4	PurpleAccount * account
TYPE	5:1	5:15	5	PurpleAccount *
TYPE_NAME	5:1	5:1	6	PurpleAccount
LEAF_NODE	5:1	5:1	7	PurpleAccount
POINTER	5:15	5:15	6	*
LEAF_NODE	5:15	5:15	7	*
NAME	5:16	5:16	5	account
LEAF_NODE	5:16	5:16	6	account
LEAF_NODE	5:23	5:23	4	;
SIMPLE_DECL	6:1	6:40	3	GtkWidget * vbox , GtkWidget * check , GtkWidget * entry , GtkWidget * combo ;
INIT_DECL_LIST	6:1	6:1	4	GtkWidget * vbox , GtkWidget * check , GtkWidget * entry , GtkWidget * combo
VAR_DECL	6:1	6:12	5	GtkWidget * vbox
TYPE	6:1	6:11	6	GtkWidget *
TYPE_NAME	6:1	6:1	7	GtkWidget
LEAF_NODE	6:1	6:1	8	GtkWidget
POINTER	6:11	6:11	7	*
LEAF_NODE	6:11	6:11	8	*
NAME	6:12	6:12	6	vbox
LEAF_NODE	6:12	6:12	7	vbox
LEAF_NODE	6:16	6:16	5	,
INIT_DECL_LIST	6:1	6:1	5	GtkWidget * check , GtkWidget * entry , GtkWidget * combo
VAR_DECL	6:1	6:19	6	GtkWidget * check
TYPE	6:1	6:18	7	GtkWidget *
TYPE_NAME	6:1	6:1	8	GtkWidget
LEAF_NODE	6:1	6:1	9	GtkWidget
POINTER	6:18	6:18	8	*
LEAF_NODE	6:18	6:18	9	*
NAME	6:19	6:19	7	check
LEAF_NODE	6:19	6:19	8	check
LEAF_NODE	6:24	6:24	6	,
INIT_DECL_LIST	6:1	6:1	6	GtkWidget * entry , GtkWidget * combo
VAR_DECL	6:1	6:27	7	GtkWidget * entry
TYPE	6:1	6:26	8	GtkWidget *
TYPE_NAME	6:1	6:1	9	GtkWidget
LEAF_NODE	6:1	6:1	10	GtkWidget
POINTER	6:26	6:26	9	*
LEAF_NODE	6:26	6:26	10	*
NAME	6:27	6:27	8	entry
LEAF_NODE	6:27	6:27	9	entry
LEAF_NODE	6:32	6:32	7	,
VAR_DECL	6:1	6:35	7	GtkWidget * combo
TYPE	6:1	6:34	8	GtkWidget *
TYPE_NAME	6:1	6:1	9	GtkWidget
LEAF_NODE	6:1	6:1	10	GtkWidget
POINTER	6:34	6:34	9	*
LEAF_NODE	6:34	6:34	10	*
NAME	6:35	6:35	8	combo
LEAF_NODE	6:35	6:35	9	combo
LEAF_NODE	6:40	6:40	4	;
SIMPLE_DECL	7:1	7:19	3	GList * list , GList * node ;
INIT_DECL_LIST	7:1	7:1	4	GList * list , GList * node
VAR_DECL	7:1	7:8	5	GList * list
TYPE	7:1	7:7	6	GList *
TYPE_NAME	7:1	7:1	7	GList
LEAF_NODE	7:1	7:1	8	GList
POINTER	7:7	7:7	7	*
LEAF_NODE	7:7	7:7	8	*
NAME	7:8	7:8	6	list
LEAF_NODE	7:8	7:8	7	list
LEAF_NODE	7:12	7:12	5	,
VAR_DECL	7:1	7:15	5	GList * node
TYPE	7:1	7:14	6	GList *
TYPE_NAME	7:1	7:1	7	GList
LEAF_NODE	7:1	7:1	8	GList
POINTER	7:14	7:14	7	*
LEAF_NODE	7:14	7:14	8	*
NAME	7:15	7:15	6	node
LEAF_NODE	7:15	7:15	7	node
LEAF_NODE	7:19	7:19	4	;
SIMPLE_DECL	8:1	8:23	3	gint i , gint idx , gint int_value ;
INIT_DECL_LIST	8:1	8:1	4	gint i , gint idx , gint int_value
VAR_DECL	8:1	8:6	5	gint i
TYPE	8:1	8:1	6	gint
TYPE_NAME	8:1	8:1	7	gint
LEAF_NODE	8:1	8:1	8	gint
NAME	8:6	8:6	6	i
LEAF_NODE	8:6	8:6	7	i
LEAF_NODE	8:7	8:7	5	,
INIT_DECL_LIST	8:1	8:1	5	gint idx , gint int_value
VAR_DECL	8:1	8:9	6	gint idx
TYPE	8:1	8:1	7	gint
TYPE_NAME	8:1	8:1	8	gint
LEAF_NODE	8:1	8:1	9	gint
NAME	8:9	8:9	7	idx
LEAF_NODE	8:9	8:9	8	idx
LEAF_NODE	8:12	8:12	6	,
VAR_DECL	8:1	8:14	6	gint int_value
TYPE	8:1	8:1	7	gint
TYPE_NAME	8:1	8:1	8	gint
LEAF_NODE	8:1	8:1	9	gint
NAME	8:14	8:14	7	int_value
LEAF_NODE	8:14	8:14	8	int_value
LEAF_NODE	8:23	8:23	4	;
SIMPLE_DECL	9:1	9:20	3	GtkListStore * model ;
VAR_DECL	9:1	9:15	4	GtkListStore * model
TYPE	9:1	9:14	5	GtkListStore *
TYPE_NAME	9:1	9:1	6	GtkListStore
LEAF_NODE	9:1	9:1	7	GtkListStore
POINTER	9:14	9:14	6	*
LEAF_NODE	9:14	9:14	7	*
NAME	9:15	9:15	5	model
LEAF_NODE	9:15	9:15	6	model
LEAF_NODE	9:20	9:20	4	;
SIMPLE_DECL	10:1	10:17	3	GtkTreeIter iter ;
VAR_DECL	10:1	10:13	4	GtkTreeIter iter
TYPE	10:1	10:1	5	GtkTreeIter
TYPE_NAME	10:1	10:1	6	GtkTreeIter
LEAF_NODE	10:1	10:1	7	GtkTreeIter
NAME	10:13	10:13	5	iter
LEAF_NODE	10:13	10:13	6	iter
LEAF_NODE	10:17	10:17	4	;
SIMPLE_DECL	11:1	11:26	3	GtkCellRenderer * renderer ;
VAR_DECL	11:1	11:18	4	GtkCellRenderer * renderer
TYPE	11:1	11:17	5	GtkCellRenderer *
TYPE_NAME	11:1	11:1	6	GtkCellRenderer
LEAF_NODE	11:1	11:1	7	GtkCellRenderer
POINTER	11:17	11:17	6	*
LEAF_NODE	11:17	11:17	7	*
NAME	11:18	11:18	5	renderer
LEAF_NODE	11:18	11:18	6	renderer
LEAF_NODE	11:26	11:26	4	;
SIMPLE_DECL	12:1	12:24	3	PurpleKeyValuePair * kvp ;
VAR_DECL	12:1	12:21	4	PurpleKeyValuePair * kvp
TYPE	12:1	12:20	5	PurpleKeyValuePair *
TYPE_NAME	12:1	12:1	6	PurpleKeyValuePair
LEAF_NODE	12:1	12:1	7	PurpleKeyValuePair
POINTER	12:20	12:20	6	*
LEAF_NODE	12:20	12:20	7	*
NAME	12:21	12:21	5	kvp
LEAF_NODE	12:21	12:21	6	kvp
LEAF_NODE	12:24	12:24	4	;
SIMPLE_DECL	13:1	13:9	3	GList * l ;
VAR_DECL	13:1	13:8	4	GList * l
TYPE	13:1	13:7	5	GList *
TYPE_NAME	13:1	13:1	6	GList
LEAF_NODE	13:1	13:1	7	GList
POINTER	13:7	13:7	6	*
LEAF_NODE	13:7	13:7	7	*
NAME	13:8	13:8	5	l
LEAF_NODE	13:8	13:8	6	l
LEAF_NODE	13:9	13:9	4	;
SIMPLE_DECL	14:1	14:15	3	char [ 1024 ] buf ;
VAR_DECL	14:1	14:6	4	char [ 1024 ] buf
TYPE	14:1	14:9	5	char [ 1024 ]
TYPE_NAME	14:1	14:1	6	char
LEAF_NODE	14:1	14:1	7	char
TYPE_SUFFIX	14:9	14:14	6	[ 1024 ]
LEAF_NODE	14:9	14:9	7	[
FIELD	14:10	14:10	7	1024
LEAF_NODE	14:10	14:10	8	1024
LEAF_NODE	14:14	14:14	7	]
NAME	14:6	14:6	5	buf
LEAF_NODE	14:6	14:6	6	buf
LEAF_NODE	14:15	14:15	4	;
SIMPLE_DECL	15:1	15:18	3	char * title , char * tmp ;
INIT_DECL_LIST	15:1	15:1	4	char * title , char * tmp
VAR_DECL	15:1	15:7	5	char * title
TYPE	15:1	15:6	6	char *
TYPE_NAME	15:1	15:1	7	char
LEAF_NODE	15:1	15:1	8	char
POINTER	15:6	15:6	7	*
LEAF_NODE	15:6	15:6	8	*
NAME	15:7	15:7	6	title
LEAF_NODE	15:7	15:7	7	title
LEAF_NODE	15:12	15:12	5	,
VAR_DECL	15:1	15:15	5	char * tmp
TYPE	15:1	15:14	6	char *
TYPE_NAME	15:1	15:1	7	char
LEAF_NODE	15:1	15:1	8	char
POINTER	15:14	15:14	7	*
LEAF_NODE	15:14	15:14	8	*
NAME	15:15	15:15	6	tmp
LEAF_NODE	15:15	15:15	7	tmp
LEAF_NODE	15:18	15:18	4	;
SIMPLE_DECL	16:1	16:22	3	const char * str_value ;
VAR_DECL	16:1	16:13	4	const char * str_value
TYPE	16:1	16:12	5	const char *
TYPE_NAME	16:1	16:7	6	const char
LEAF_NODE	16:1	16:1	7	const
LEAF_NODE	16:7	16:7	7	char
POINTER	16:12	16:12	6	*
LEAF_NODE	16:12	16:12	7	*
NAME	16:13	16:13	5	str_value
LEAF_NODE	16:13	16:13	6	str_value
LEAF_NODE	16:22	16:22	4	;
SIMPLE_DECL	17:1	17:20	3	gboolean bool_value ;
VAR_DECL	17:1	17:10	4	gboolean bool_value
TYPE	17:1	17:1	5	gboolean
TYPE_NAME	17:1	17:1	6	gboolean
LEAF_NODE	17:1	17:1	7	gboolean
NAME	17:10	17:10	5	bool_value
LEAF_NODE	17:10	17:10	6	bool_value
LEAF_NODE	17:20	17:20	4	;
SIMPLE_DECL	18:1	18:28	3	ProtocolOptEntry * opt_entry ;
VAR_DECL	18:1	18:19	4	ProtocolOptEntry * opt_entry
TYPE	18:1	18:18	5	ProtocolOptEntry *
TYPE_NAME	18:1	18:1	6	ProtocolOptEntry
LEAF_NODE	18:1	18:1	7	ProtocolOptEntry
POINTER	18:18	18:18	6	*
LEAF_NODE	18:18	18:18	7	*
NAME	18:19	18:19	5	opt_entry
LEAF_NODE	18:19	18:19	6	opt_entry
LEAF_NODE	18:28	18:28	4	;
SELECTION	19:1	19:37	3	
KEYWORD	19:1	19:1	4	if
LEAF_NODE	19:1	19:1	5	if
LEAF_NODE	19:4	19:4	4	(
CONDITION	19:5	19:5	4	dialog -> protocol_frame != NULL
EXPR	19:5	19:31	5	dialog -> protocol_frame != NULL
FIELD	19:5	19:13	6	dialog -> protocol_frame
LEAF_NODE	19:5	19:5	7	dialog
LEAF_NODE	19:11	19:11	7	->
LEAF_NODE	19:13	19:13	7	protocol_frame
EQ_OPERATOR	19:28	19:28	6	!=
LEAF_NODE	19:28	19:28	7	!=
FIELD	19:31	19:31	6	NULL
LEAF_NODE	19:31	19:31	7	NULL
LEAF_NODE	19:35	19:35	4	)
STATEMENTS	19:37	22:1	4	
LEAF_NODE	19:37	19:37	5	{
STATEMENTS	20:2	21:2	5	
EXPR_STATEMENT	20:2	20:62	6	gtk_notebook_remove_page ( GTK_NOTEBOOK ( dialog -> notebook ) , 1 ) ;
EXPR	20:2	20:2	7	gtk_notebook_remove_page ( GTK_NOTEBOOK ( dialog -> notebook ) , 1 )
FUNCTION_CALL	20:2	20:61	8	gtk_notebook_remove_page ( GTK_NOTEBOOK ( dialog -> notebook ) , 1 )
CALLEE	20:2	20:2	9	gtk_notebook_remove_page
LEAF_NODE	20:2	20:2	10	gtk_notebook_remove_page
LEAF_NODE	20:27	20:27	9	(
ARGUMENT	20:28	20:28	9	GTK_NOTEBOOK ( dialog -> notebook )
FUNCTION_CALL	20:28	20:57	10	GTK_NOTEBOOK ( dialog -> notebook )
CALLEE	20:28	20:28	11	GTK_NOTEBOOK
LEAF_NODE	20:28	20:28	12	GTK_NOTEBOOK
LEAF_NODE	20:40	20:40	11	(
ARGUMENT	20:41	20:41	11	dialog -> notebook
FIELD	20:41	20:49	12	dialog -> notebook
LEAF_NODE	20:41	20:41	13	dialog
LEAF_NODE	20:47	20:47	13	->
LEAF_NODE	20:49	20:49	13	notebook
LEAF_NODE	20:57	20:57	11	)
LEAF_NODE	20:58	20:58	9	,
ARGUMENT	20:60	20:60	9	1
FIELD	20:60	20:60	10	1
LEAF_NODE	20:60	20:60	11	1
LEAF_NODE	20:61	20:61	9	)
LEAF_NODE	20:62	20:62	7	;
EXPR_STATEMENT	21:2	21:31	6	dialog -> protocol_frame = NULL ;
EXPR	21:2	21:2	7	dialog -> protocol_frame = NULL
ASSIGN	21:2	21:27	8	dialog -> protocol_frame = NULL
LVAL	21:2	21:2	9	dialog -> protocol_frame
FIELD	21:2	21:10	10	dialog -> protocol_frame
LEAF_NODE	21:2	21:2	11	dialog
LEAF_NODE	21:8	21:8	11	->
LEAF_NODE	21:10	21:10	11	protocol_frame
ASSIGN_OP	21:25	21:25	9	=
LEAF_NODE	21:25	21:25	10	=
RVAL	21:27	21:27	9	NULL
FIELD	21:27	21:27	10	NULL
LEAF_NODE	21:27	21:27	11	NULL
LEAF_NODE	21:31	21:31	7	;
LEAF_NODE	22:1	22:1	5	}
ITERATION	23:1	23:46	3	
KEYWORD	23:1	23:1	4	while
LEAF_NODE	23:1	23:1	5	while
LEAF_NODE	23:7	23:7	4	(
CONDITION	23:8	23:8	4	dialog -> protocol_opt_entries != NULL
EXPR	23:8	23:40	5	dialog -> protocol_opt_entries != NULL
FIELD	23:8	23:16	6	dialog -> protocol_opt_entries
LEAF_NODE	23:8	23:8	7	dialog
LEAF_NODE	23:14	23:14	7	->
LEAF_NODE	23:16	23:16	7	protocol_opt_entries
EQ_OPERATOR	23:37	23:37	6	!=
LEAF_NODE	23:37	23:37	7	!=
FIELD	23:40	23:40	6	NULL
LEAF_NODE	23:40	23:40	7	NULL
LEAF_NODE	23:44	23:44	4	)
STATEMENTS	23:46	28:1	4	
LEAF_NODE	23:46	23:46	5	{
STATEMENTS	24:2	27:2	5	
SIMPLE_DECL	24:2	24:66	6	ProtocolOptEntry * opt_entry ; opt_entry = dialog -> protocol_opt_entries -> data ;
VAR_DECL	24:2	24:20	7	ProtocolOptEntry * opt_entry ; opt_entry = dialog -> protocol_opt_entries -> data
TYPE	24:2	24:19	8	ProtocolOptEntry *
TYPE_NAME	24:2	24:2	9	ProtocolOptEntry
LEAF_NODE	24:2	24:2	10	ProtocolOptEntry
POINTER	24:19	24:19	9	*
LEAF_NODE	24:19	24:19	10	*
NAME	24:20	24:20	8	opt_entry
LEAF_NODE	24:20	24:20	9	opt_entry
LEAF_NODE	0:0	0:0	8	;
INIT	24:20	24:20	8	opt_entry = dialog -> protocol_opt_entries -> data
ASSIGN	24:20	24:32	9	opt_entry = dialog -> protocol_opt_entries -> data
LVAL	24:20	24:20	10	opt_entry
NAME	24:20	24:20	11	opt_entry
LEAF_NODE	24:20	24:20	12	opt_entry
ASSIGN_OP	24:30	24:30	10	=
LEAF_NODE	24:30	24:30	11	=
RVAL	24:32	24:32	10	dialog -> protocol_opt_entries -> data
FIELD	24:32	24:62	11	dialog -> protocol_opt_entries -> data
LEAF_NODE	24:32	24:32	12	dialog
LEAF_NODE	24:38	24:38	12	->
LEAF_NODE	24:40	24:40	12	protocol_opt_entries
LEAF_NODE	24:60	24:60	12	->
LEAF_NODE	24:62	24:62	12	data
LEAF_NODE	24:66	24:66	7	;
EXPR_STATEMENT	25:2	25:28	6	g_free ( opt_entry -> setting ) ;
EXPR	25:2	25:2	7	g_free ( opt_entry -> setting )
FUNCTION_CALL	25:2	25:27	8	g_free ( opt_entry -> setting )
CALLEE	25:2	25:2	9	g_free
LEAF_NODE	25:2	25:2	10	g_free
LEAF_NODE	25:8	25:8	9	(
ARGUMENT	25:9	25:9	9	opt_entry -> setting
FIELD	25:9	25:20	10	opt_entry -> setting
LEAF_NODE	25:9	25:9	11	opt_entry
LEAF_NODE	25:18	25:18	11	->
LEAF_NODE	25:20	25:20	11	setting
LEAF_NODE	25:27	25:27	9	)
LEAF_NODE	25:28	25:28	7	;
EXPR_STATEMENT	26:2	26:19	6	g_free ( opt_entry ) ;
EXPR	26:2	26:2	7	g_free ( opt_entry )
FUNCTION_CALL	26:2	26:18	8	g_free ( opt_entry )
CALLEE	26:2	26:2	9	g_free
LEAF_NODE	26:2	26:2	10	g_free
LEAF_NODE	26:8	26:8	9	(
ARGUMENT	26:9	26:9	9	opt_entry
FIELD	26:9	26:9	10	opt_entry
LEAF_NODE	26:9	26:9	11	opt_entry
LEAF_NODE	26:18	26:18	9	)
LEAF_NODE	26:19	26:19	7	;
EXPR_STATEMENT	27:2	27:111	6	dialog -> protocol_opt_entries = g_list_delete_link ( dialog -> protocol_opt_entries , dialog -> protocol_opt_entries ) ;
EXPR	27:2	27:2	7	dialog -> protocol_opt_entries = g_list_delete_link ( dialog -> protocol_opt_entries , dialog -> protocol_opt_entries )
ASSIGN	27:2	27:33	8	dialog -> protocol_opt_entries = g_list_delete_link ( dialog -> protocol_opt_entries , dialog -> protocol_opt_entries )
LVAL	27:2	27:2	9	dialog -> protocol_opt_entries
FIELD	27:2	27:10	10	dialog -> protocol_opt_entries
LEAF_NODE	27:2	27:2	11	dialog
LEAF_NODE	27:8	27:8	11	->
LEAF_NODE	27:10	27:10	11	protocol_opt_entries
ASSIGN_OP	27:31	27:31	9	=
LEAF_NODE	27:31	27:31	10	=
RVAL	27:33	27:33	9	g_list_delete_link ( dialog -> protocol_opt_entries , dialog -> protocol_opt_entries )
FUNCTION_CALL	27:33	27:110	10	g_list_delete_link ( dialog -> protocol_opt_entries , dialog -> protocol_opt_entries )
CALLEE	27:33	27:33	11	g_list_delete_link
LEAF_NODE	27:33	27:33	12	g_list_delete_link
LEAF_NODE	27:51	27:51	11	(
ARGUMENT	27:52	27:52	11	dialog -> protocol_opt_entries
FIELD	27:52	27:60	12	dialog -> protocol_opt_entries
LEAF_NODE	27:52	27:52	13	dialog
LEAF_NODE	27:58	27:58	13	->
LEAF_NODE	27:60	27:60	13	protocol_opt_entries
LEAF_NODE	27:80	27:80	11	,
ARGUMENT	27:82	27:82	11	dialog -> protocol_opt_entries
FIELD	27:82	27:90	12	dialog -> protocol_opt_entries
LEAF_NODE	27:82	27:82	13	dialog
LEAF_NODE	27:88	27:88	13	->
LEAF_NODE	27:90	27:90	13	protocol_opt_entries
LEAF_NODE	27:110	27:110	11	)
LEAF_NODE	27:111	27:111	7	;
LEAF_NODE	28:1	28:1	5	}
SELECTION	29:1	31:2	3	
KEYWORD	29:1	29:1	4	if
LEAF_NODE	29:1	29:1	5	if
LEAF_NODE	29:4	29:4	4	(
CONDITION	29:5	29:5	4	dialog -> prpl_info == NULL || dialog -> prpl_info -> protocol_options == NULL
EXPR	29:5	29:5	5	dialog -> prpl_info == NULL || dialog -> prpl_info -> protocol_options == NULL
OR	29:5	30:3	6	dialog -> prpl_info == NULL || dialog -> prpl_info -> protocol_options == NULL
EXPR	29:5	29:26	7	dialog -> prpl_info == NULL
FIELD	29:5	29:13	8	dialog -> prpl_info
LEAF_NODE	29:5	29:5	9	dialog
LEAF_NODE	29:11	29:11	9	->
LEAF_NODE	29:13	29:13	9	prpl_info
EQ_OPERATOR	29:23	29:23	8	==
LEAF_NODE	29:23	29:23	9	==
FIELD	29:26	29:26	8	NULL
LEAF_NODE	29:26	29:26	9	NULL
LEAF_NODE	29:31	29:31	7	||
EXPR	30:3	30:42	7	dialog -> prpl_info -> protocol_options == NULL
FIELD	30:3	30:22	8	dialog -> prpl_info -> protocol_options
LEAF_NODE	30:3	30:3	9	dialog
LEAF_NODE	30:9	30:9	9	->
LEAF_NODE	30:11	30:11	9	prpl_info
LEAF_NODE	30:20	30:20	9	->
LEAF_NODE	30:22	30:22	9	protocol_options
EQ_OPERATOR	30:39	30:39	8	==
LEAF_NODE	30:39	30:39	9	==
FIELD	30:42	30:42	8	NULL
LEAF_NODE	30:42	30:42	9	NULL
LEAF_NODE	30:46	30:46	4	)
STATEMENTS	31:2	31:2	4	
JUMP_STATEMENT	31:2	31:8	5	return DESTINATION ;
KEYWORD	31:2	31:2	6	return
LEAF_NODE	31:2	31:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	31:8	31:8	6	;
EXPR_STATEMENT	32:1	32:26	3	account = dialog -> account ;
EXPR	32:1	32:1	4	account = dialog -> account
ASSIGN	32:1	32:11	5	account = dialog -> account
LVAL	32:1	32:1	6	account
FIELD	32:1	32:1	7	account
LEAF_NODE	32:1	32:1	8	account
ASSIGN_OP	32:9	32:9	6	=
LEAF_NODE	32:9	32:9	7	=
RVAL	32:11	32:11	6	dialog -> account
FIELD	32:11	32:19	7	dialog -> account
LEAF_NODE	32:11	32:11	8	dialog
LEAF_NODE	32:17	32:17	8	->
LEAF_NODE	32:19	32:19	8	account
LEAF_NODE	32:26	32:26	4	;
EXPR_STATEMENT	34:1	34:74	3	dialog -> protocol_frame = vbox = gtk_vbox_new ( FALSE , PIDGIN_HIG_BOX_SPACE ) ;
EXPR	34:1	34:1	4	dialog -> protocol_frame = vbox = gtk_vbox_new ( FALSE , PIDGIN_HIG_BOX_SPACE )
ASSIGN	34:1	34:26	5	dialog -> protocol_frame = vbox = gtk_vbox_new ( FALSE , PIDGIN_HIG_BOX_SPACE )
LVAL	34:1	34:1	6	dialog -> protocol_frame
FIELD	34:1	34:9	7	dialog -> protocol_frame
LEAF_NODE	34:1	34:1	8	dialog
LEAF_NODE	34:7	34:7	8	->
LEAF_NODE	34:9	34:9	8	protocol_frame
ASSIGN_OP	34:24	34:24	6	=
LEAF_NODE	34:24	34:24	7	=
RVAL	34:26	34:26	6	vbox = gtk_vbox_new ( FALSE , PIDGIN_HIG_BOX_SPACE )
ASSIGN	34:26	34:33	7	vbox = gtk_vbox_new ( FALSE , PIDGIN_HIG_BOX_SPACE )
LVAL	34:26	34:26	8	vbox
FIELD	34:26	34:26	9	vbox
LEAF_NODE	34:26	34:26	10	vbox
ASSIGN_OP	34:31	34:31	8	=
LEAF_NODE	34:31	34:31	9	=
RVAL	34:33	34:33	8	gtk_vbox_new ( FALSE , PIDGIN_HIG_BOX_SPACE )
FUNCTION_CALL	34:33	34:73	9	gtk_vbox_new ( FALSE , PIDGIN_HIG_BOX_SPACE )
CALLEE	34:33	34:33	10	gtk_vbox_new
LEAF_NODE	34:33	34:33	11	gtk_vbox_new
LEAF_NODE	34:45	34:45	10	(
ARGUMENT	34:46	34:46	10	FALSE
FIELD	34:46	34:46	11	FALSE
LEAF_NODE	34:46	34:46	12	FALSE
LEAF_NODE	34:51	34:51	10	,
ARGUMENT	34:53	34:53	10	PIDGIN_HIG_BOX_SPACE
FIELD	34:53	34:53	11	PIDGIN_HIG_BOX_SPACE
LEAF_NODE	34:53	34:53	12	PIDGIN_HIG_BOX_SPACE
LEAF_NODE	34:73	34:73	10	)
LEAF_NODE	34:74	34:74	4	;
EXPR_STATEMENT	35:1	35:71	3	gtk_container_set_border_width ( GTK_CONTAINER ( vbox ) , PIDGIN_HIG_BORDER ) ;
EXPR	35:1	35:1	4	gtk_container_set_border_width ( GTK_CONTAINER ( vbox ) , PIDGIN_HIG_BORDER )
FUNCTION_CALL	35:1	35:70	5	gtk_container_set_border_width ( GTK_CONTAINER ( vbox ) , PIDGIN_HIG_BORDER )
CALLEE	35:1	35:1	6	gtk_container_set_border_width
LEAF_NODE	35:1	35:1	7	gtk_container_set_border_width
LEAF_NODE	35:31	35:31	6	(
ARGUMENT	35:32	35:32	6	GTK_CONTAINER ( vbox )
FUNCTION_CALL	35:32	35:50	7	GTK_CONTAINER ( vbox )
CALLEE	35:32	35:32	8	GTK_CONTAINER
LEAF_NODE	35:32	35:32	9	GTK_CONTAINER
LEAF_NODE	35:45	35:45	8	(
ARGUMENT	35:46	35:46	8	vbox
FIELD	35:46	35:46	9	vbox
LEAF_NODE	35:46	35:46	10	vbox
LEAF_NODE	35:50	35:50	8	)
LEAF_NODE	35:51	35:51	6	,
ARGUMENT	35:53	35:53	6	PIDGIN_HIG_BORDER
FIELD	35:53	35:53	7	PIDGIN_HIG_BORDER
LEAF_NODE	35:53	35:53	8	PIDGIN_HIG_BORDER
LEAF_NODE	35:70	35:70	6	)
LEAF_NODE	35:71	35:71	4	;
EXPR_STATEMENT	36:1	37:50	3	gtk_notebook_insert_page ( GTK_NOTEBOOK ( dialog -> notebook ) , vbox , gtk_label_new_with_mnemonic ( _ ( "Ad_vanced" ) ) , 1 ) ;
EXPR	36:1	36:1	4	gtk_notebook_insert_page ( GTK_NOTEBOOK ( dialog -> notebook ) , vbox , gtk_label_new_with_mnemonic ( _ ( "Ad_vanced" ) ) , 1 )
FUNCTION_CALL	36:1	37:49	5	gtk_notebook_insert_page ( GTK_NOTEBOOK ( dialog -> notebook ) , vbox , gtk_label_new_with_mnemonic ( _ ( "Ad_vanced" ) ) , 1 )
CALLEE	36:1	36:1	6	gtk_notebook_insert_page
LEAF_NODE	36:1	36:1	7	gtk_notebook_insert_page
LEAF_NODE	36:25	36:25	6	(
ARGUMENT	36:26	36:26	6	GTK_NOTEBOOK ( dialog -> notebook )
FUNCTION_CALL	36:26	36:55	7	GTK_NOTEBOOK ( dialog -> notebook )
CALLEE	36:26	36:26	8	GTK_NOTEBOOK
LEAF_NODE	36:26	36:26	9	GTK_NOTEBOOK
LEAF_NODE	36:38	36:38	8	(
ARGUMENT	36:39	36:39	8	dialog -> notebook
FIELD	36:39	36:47	9	dialog -> notebook
LEAF_NODE	36:39	36:39	10	dialog
LEAF_NODE	36:45	36:45	10	->
LEAF_NODE	36:47	36:47	10	notebook
LEAF_NODE	36:55	36:55	8	)
LEAF_NODE	36:56	36:56	6	,
ARGUMENT	36:58	36:58	6	vbox
FIELD	36:58	36:58	7	vbox
LEAF_NODE	36:58	36:58	8	vbox
LEAF_NODE	36:62	36:62	6	,
ARGUMENT	37:3	37:3	6	gtk_label_new_with_mnemonic ( _ ( "Ad_vanced" ) )
FUNCTION_CALL	37:3	37:45	7	gtk_label_new_with_mnemonic ( _ ( "Ad_vanced" ) )
CALLEE	37:3	37:3	8	gtk_label_new_with_mnemonic
LEAF_NODE	37:3	37:3	9	gtk_label_new_with_mnemonic
LEAF_NODE	37:30	37:30	8	(
ARGUMENT	37:31	37:31	8	_ ( "Ad_vanced" )
FUNCTION_CALL	37:31	37:44	9	_ ( "Ad_vanced" )
CALLEE	37:31	37:31	10	_
LEAF_NODE	37:31	37:31	11	_
LEAF_NODE	37:32	37:32	10	(
ARGUMENT	37:33	37:33	10	"Ad_vanced"
FIELD	37:33	37:33	11	"Ad_vanced"
LEAF_NODE	37:33	37:33	12	"Ad_vanced"
LEAF_NODE	37:44	37:44	10	)
LEAF_NODE	37:45	37:45	8	)
LEAF_NODE	37:46	37:46	6	,
ARGUMENT	37:48	37:48	6	1
FIELD	37:48	37:48	7	1
LEAF_NODE	37:48	37:48	8	1
LEAF_NODE	37:49	37:49	6	)
LEAF_NODE	37:50	37:50	4	;
EXPR_STATEMENT	38:1	38:22	3	gtk_widget_show ( vbox ) ;
EXPR	38:1	38:1	4	gtk_widget_show ( vbox )
FUNCTION_CALL	38:1	38:21	5	gtk_widget_show ( vbox )
CALLEE	38:1	38:1	6	gtk_widget_show
LEAF_NODE	38:1	38:1	7	gtk_widget_show
LEAF_NODE	38:16	38:16	6	(
ARGUMENT	38:17	38:17	6	vbox
FIELD	38:17	38:17	7	vbox
LEAF_NODE	38:17	38:17	8	vbox
LEAF_NODE	38:21	38:21	6	)
LEAF_NODE	38:22	38:22	4	;
ITERATION	39:1	40:1	3	
KEYWORD	39:1	39:1	4	for
LEAF_NODE	39:1	39:1	5	for
LEAF_NODE	39:5	39:5	4	(
FOR_INIT	39:6	39:45	4	l = dialog -> prpl_info -> protocol_options ;
EXPR	39:6	39:6	5	l = dialog -> prpl_info -> protocol_options
ASSIGN	39:6	39:10	6	l = dialog -> prpl_info -> protocol_options
LVAL	39:6	39:6	7	l
FIELD	39:6	39:6	8	l
LEAF_NODE	39:6	39:6	9	l
ASSIGN_OP	39:8	39:8	7	=
LEAF_NODE	39:8	39:8	8	=
RVAL	39:10	39:10	7	dialog -> prpl_info -> protocol_options
FIELD	39:10	39:29	8	dialog -> prpl_info -> protocol_options
LEAF_NODE	39:10	39:10	9	dialog
LEAF_NODE	39:16	39:16	9	->
LEAF_NODE	39:18	39:18	9	prpl_info
LEAF_NODE	39:27	39:27	9	->
LEAF_NODE	39:29	39:29	9	protocol_options
LEAF_NODE	39:45	39:45	5	;
CONDITION	39:47	39:47	4	l != NULL
EXPR	39:47	39:52	5	l != NULL
FIELD	39:47	39:47	6	l
LEAF_NODE	39:47	39:47	7	l
EQ_OPERATOR	39:49	39:49	6	!=
LEAF_NODE	39:49	39:49	7	!=
FIELD	39:52	39:52	6	NULL
LEAF_NODE	39:52	39:52	7	NULL
LEAF_NODE	39:56	39:56	4	;
FOR_EXPR	39:58	39:58	4	l = l -> next
EXPR	39:58	39:58	5	l = l -> next
ASSIGN	39:58	39:62	6	l = l -> next
LVAL	39:58	39:58	7	l
FIELD	39:58	39:58	8	l
LEAF_NODE	39:58	39:58	9	l
ASSIGN_OP	39:60	39:60	7	=
LEAF_NODE	39:60	39:60	8	=
RVAL	39:62	39:62	7	l -> next
FIELD	39:62	39:65	8	l -> next
LEAF_NODE	39:62	39:62	9	l
LEAF_NODE	39:63	39:63	9	->
LEAF_NODE	39:65	39:65	9	next
LEAF_NODE	39:69	39:69	4	)
STATEMENTS	40:1	173:1	4	
LEAF_NODE	40:1	40:1	5	{
STATEMENTS	41:2	171:2	5	
EXPR_STATEMENT	41:2	41:41	6	option = ( PurpleAccountOption * ) l -> data ;
EXPR	41:2	41:2	7	option = ( PurpleAccountOption * ) l -> data
ASSIGN	41:2	41:11	8	option = ( PurpleAccountOption * ) l -> data
LVAL	41:2	41:2	9	option
FIELD	41:2	41:2	10	option
LEAF_NODE	41:2	41:2	11	option
ASSIGN_OP	41:9	41:9	9	=
LEAF_NODE	41:9	41:9	10	=
RVAL	41:11	41:34	9	( PurpleAccountOption * ) l -> data
LEAF_NODE	41:11	41:11	10	(
TYPE_NAME	41:12	41:12	10	PurpleAccountOption
LEAF_NODE	41:12	41:12	11	PurpleAccountOption
LEAF_NODE	41:32	41:32	10	*
LEAF_NODE	41:33	41:33	10	)
FIELD	41:34	41:37	10	l -> data
LEAF_NODE	41:34	41:34	11	l
LEAF_NODE	41:35	41:35	11	->
LEAF_NODE	41:37	41:37	11	data
LEAF_NODE	41:41	41:41	7	;
EXPR_STATEMENT	42:2	42:41	6	opt_entry = g_new0 ( ProtocolOptEntry , 1 ) ;
EXPR	42:2	42:2	7	opt_entry = g_new0 ( ProtocolOptEntry , 1 )
ASSIGN	42:2	42:14	8	opt_entry = g_new0 ( ProtocolOptEntry , 1 )
LVAL	42:2	42:2	9	opt_entry
FIELD	42:2	42:2	10	opt_entry
LEAF_NODE	42:2	42:2	11	opt_entry
ASSIGN_OP	42:12	42:12	9	=
LEAF_NODE	42:12	42:12	10	=
RVAL	42:14	42:14	9	g_new0 ( ProtocolOptEntry , 1 )
FUNCTION_CALL	42:14	42:40	10	g_new0 ( ProtocolOptEntry , 1 )
CALLEE	42:14	42:14	11	g_new0
LEAF_NODE	42:14	42:14	12	g_new0
LEAF_NODE	42:20	42:20	11	(
ARGUMENT	42:21	42:21	11	ProtocolOptEntry
FIELD	42:21	42:21	12	ProtocolOptEntry
LEAF_NODE	42:21	42:21	13	ProtocolOptEntry
LEAF_NODE	42:37	42:37	11	,
ARGUMENT	42:39	42:39	11	1
FIELD	42:39	42:39	12	1
LEAF_NODE	42:39	42:39	13	1
LEAF_NODE	42:40	42:40	11	)
LEAF_NODE	42:41	42:41	7	;
EXPR_STATEMENT	43:2	43:58	6	opt_entry -> type = purple_account_option_get_type ( option ) ;
EXPR	43:2	43:2	7	opt_entry -> type = purple_account_option_get_type ( option )
ASSIGN	43:2	43:20	8	opt_entry -> type = purple_account_option_get_type ( option )
LVAL	43:2	43:2	9	opt_entry -> type
FIELD	43:2	43:13	10	opt_entry -> type
LEAF_NODE	43:2	43:2	11	opt_entry
LEAF_NODE	43:11	43:11	11	->
LEAF_NODE	43:13	43:13	11	type
ASSIGN_OP	43:18	43:18	9	=
LEAF_NODE	43:18	43:18	10	=
RVAL	43:20	43:20	9	purple_account_option_get_type ( option )
FUNCTION_CALL	43:20	43:57	10	purple_account_option_get_type ( option )
CALLEE	43:20	43:20	11	purple_account_option_get_type
LEAF_NODE	43:20	43:20	12	purple_account_option_get_type
LEAF_NODE	43:50	43:50	11	(
ARGUMENT	43:51	43:51	11	option
FIELD	43:51	43:51	12	option
LEAF_NODE	43:51	43:51	13	option
LEAF_NODE	43:57	43:57	11	)
LEAF_NODE	43:58	43:58	7	;
EXPR_STATEMENT	44:2	44:74	6	opt_entry -> setting = g_strdup ( purple_account_option_get_setting ( option ) ) ;
EXPR	44:2	44:2	7	opt_entry -> setting = g_strdup ( purple_account_option_get_setting ( option ) )
ASSIGN	44:2	44:23	8	opt_entry -> setting = g_strdup ( purple_account_option_get_setting ( option ) )
LVAL	44:2	44:2	9	opt_entry -> setting
FIELD	44:2	44:13	10	opt_entry -> setting
LEAF_NODE	44:2	44:2	11	opt_entry
LEAF_NODE	44:11	44:11	11	->
LEAF_NODE	44:13	44:13	11	setting
ASSIGN_OP	44:21	44:21	9	=
LEAF_NODE	44:21	44:21	10	=
RVAL	44:23	44:23	9	g_strdup ( purple_account_option_get_setting ( option ) )
FUNCTION_CALL	44:23	44:73	10	g_strdup ( purple_account_option_get_setting ( option ) )
CALLEE	44:23	44:23	11	g_strdup
LEAF_NODE	44:23	44:23	12	g_strdup
LEAF_NODE	44:31	44:31	11	(
ARGUMENT	44:32	44:32	11	purple_account_option_get_setting ( option )
FUNCTION_CALL	44:32	44:72	12	purple_account_option_get_setting ( option )
CALLEE	44:32	44:32	13	purple_account_option_get_setting
LEAF_NODE	44:32	44:32	14	purple_account_option_get_setting
LEAF_NODE	44:65	44:65	13	(
ARGUMENT	44:66	44:66	13	option
FIELD	44:66	44:66	14	option
LEAF_NODE	44:66	44:66	15	option
LEAF_NODE	44:72	44:72	13	)
LEAF_NODE	44:73	44:73	11	)
LEAF_NODE	44:74	44:74	7	;
SELECTION	45:2	46:2	6	
KEYWORD	45:2	45:2	7	switch
LEAF_NODE	45:2	45:2	8	switch
LEAF_NODE	45:9	45:9	7	(
CONDITION	45:10	45:10	7	opt_entry -> type
EXPR	45:10	45:10	8	opt_entry -> type
FIELD	45:10	45:21	9	opt_entry -> type
LEAF_NODE	45:10	45:10	10	opt_entry
LEAF_NODE	45:19	45:19	10	->
LEAF_NODE	45:21	45:21	10	type
LEAF_NODE	45:25	45:25	7	)
STATEMENTS	46:2	170:2	7	
LEAF_NODE	46:2	46:2	8	{
STATEMENTS	47:3	169:4	8	
LABEL	47:3	47:27	9	case PURPLE_PREF_BOOLEAN :
LEAF_NODE	47:3	47:3	10	case
LEAF_NODE	47:8	47:8	10	PURPLE_PREF_BOOLEAN
LEAF_NODE	47:27	47:27	10	:
SELECTION	48:4	51:4	9	
KEYWORD	48:4	48:4	10	if
LEAF_NODE	48:4	48:4	11	if
LEAF_NODE	48:7	48:7	10	(
CONDITION	48:8	48:8	10	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
EXPR	48:8	48:8	11	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
OR	48:8	49:5	12	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
EXPR	48:8	48:19	13	account == NULL
FIELD	48:8	48:8	14	account
LEAF_NODE	48:8	48:8	15	account
EQ_OPERATOR	48:16	48:16	14	==
LEAF_NODE	48:16	48:16	15	==
FIELD	48:19	48:19	14	NULL
LEAF_NODE	48:19	48:19	15	NULL
LEAF_NODE	48:24	48:24	13	||
EXPR	49:5	49:5	13	strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
FUNCTION_CALL	49:5	50:28	14	strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
CALLEE	49:5	49:5	15	strcmp
LEAF_NODE	49:5	49:5	16	strcmp
LEAF_NODE	49:11	49:11	15	(
ARGUMENT	49:12	49:12	15	purple_account_get_protocol_id ( account )
FUNCTION_CALL	49:12	49:50	16	purple_account_get_protocol_id ( account )
CALLEE	49:12	49:12	17	purple_account_get_protocol_id
LEAF_NODE	49:12	49:12	18	purple_account_get_protocol_id
LEAF_NODE	49:42	49:42	17	(
ARGUMENT	49:43	49:43	17	account
FIELD	49:43	49:43	18	account
LEAF_NODE	49:43	49:43	19	account
LEAF_NODE	49:50	49:50	17	)
LEAF_NODE	49:51	49:51	15	,
ARGUMENT	50:9	50:9	15	dialog -> protocol_id
FIELD	50:9	50:17	16	dialog -> protocol_id
LEAF_NODE	50:9	50:9	17	dialog
LEAF_NODE	50:15	50:15	17	->
LEAF_NODE	50:17	50:17	17	protocol_id
LEAF_NODE	50:28	50:28	15	)
LEAF_NODE	50:29	50:29	10	)
STATEMENTS	51:4	53:4	10	
LEAF_NODE	51:4	51:4	11	{
STATEMENTS	52:5	52:5	11	
EXPR_STATEMENT	52:5	52:64	12	bool_value = purple_account_option_get_default_bool ( option ) ;
EXPR	52:5	52:5	13	bool_value = purple_account_option_get_default_bool ( option )
ASSIGN	52:5	52:18	14	bool_value = purple_account_option_get_default_bool ( option )
LVAL	52:5	52:5	15	bool_value
FIELD	52:5	52:5	16	bool_value
LEAF_NODE	52:5	52:5	17	bool_value
ASSIGN_OP	52:16	52:16	15	=
LEAF_NODE	52:16	52:16	16	=
RVAL	52:18	52:18	15	purple_account_option_get_default_bool ( option )
FUNCTION_CALL	52:18	52:63	16	purple_account_option_get_default_bool ( option )
CALLEE	52:18	52:18	17	purple_account_option_get_default_bool
LEAF_NODE	52:18	52:18	18	purple_account_option_get_default_bool
LEAF_NODE	52:56	52:56	17	(
ARGUMENT	52:57	52:57	17	option
FIELD	52:57	52:57	18	option
LEAF_NODE	52:57	52:57	19	option
LEAF_NODE	52:63	52:63	17	)
LEAF_NODE	52:64	52:64	13	;
LEAF_NODE	53:4	53:4	11	}
SELECTION	54:4	55:4	9	
KEYWORD	54:4	54:4	10	else
LEAF_NODE	54:4	54:4	11	else
STATEMENTS	55:4	59:4	10	
LEAF_NODE	55:4	55:4	11	{
STATEMENTS	56:5	56:5	11	
EXPR_STATEMENT	56:5	58:53	12	bool_value = purple_account_get_bool ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_bool ( option ) ) ;
EXPR	56:5	56:5	13	bool_value = purple_account_get_bool ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_bool ( option ) )
ASSIGN	56:5	56:18	14	bool_value = purple_account_get_bool ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_bool ( option ) )
LVAL	56:5	56:5	15	bool_value
FIELD	56:5	56:5	16	bool_value
LEAF_NODE	56:5	56:5	17	bool_value
ASSIGN_OP	56:16	56:16	15	=
LEAF_NODE	56:16	56:16	16	=
RVAL	56:18	56:18	15	purple_account_get_bool ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_bool ( option ) )
FUNCTION_CALL	56:18	58:52	16	purple_account_get_bool ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_bool ( option ) )
CALLEE	56:18	56:18	17	purple_account_get_bool
LEAF_NODE	56:18	56:18	18	purple_account_get_bool
LEAF_NODE	56:41	56:41	17	(
ARGUMENT	56:42	56:42	17	account
FIELD	56:42	56:42	18	account
LEAF_NODE	56:42	56:42	19	account
LEAF_NODE	56:49	56:49	17	,
ARGUMENT	57:6	57:6	17	purple_account_option_get_setting ( option )
FUNCTION_CALL	57:6	57:46	18	purple_account_option_get_setting ( option )
CALLEE	57:6	57:6	19	purple_account_option_get_setting
LEAF_NODE	57:6	57:6	20	purple_account_option_get_setting
LEAF_NODE	57:39	57:39	19	(
ARGUMENT	57:40	57:40	19	option
FIELD	57:40	57:40	20	option
LEAF_NODE	57:40	57:40	21	option
LEAF_NODE	57:46	57:46	19	)
LEAF_NODE	57:47	57:47	17	,
ARGUMENT	58:6	58:6	17	purple_account_option_get_default_bool ( option )
FUNCTION_CALL	58:6	58:51	18	purple_account_option_get_default_bool ( option )
CALLEE	58:6	58:6	19	purple_account_option_get_default_bool
LEAF_NODE	58:6	58:6	20	purple_account_option_get_default_bool
LEAF_NODE	58:44	58:44	19	(
ARGUMENT	58:45	58:45	19	option
FIELD	58:45	58:45	20	option
LEAF_NODE	58:45	58:45	21	option
LEAF_NODE	58:51	58:51	19	)
LEAF_NODE	58:52	58:52	17	)
LEAF_NODE	58:53	58:53	13	;
LEAF_NODE	59:4	59:4	11	}
EXPR_STATEMENT	60:4	60:72	9	tmp = g_strconcat ( "_" , purple_account_option_get_text ( option ) , NULL ) ;
EXPR	60:4	60:4	10	tmp = g_strconcat ( "_" , purple_account_option_get_text ( option ) , NULL )
ASSIGN	60:4	60:10	11	tmp = g_strconcat ( "_" , purple_account_option_get_text ( option ) , NULL )
LVAL	60:4	60:4	12	tmp
FIELD	60:4	60:4	13	tmp
LEAF_NODE	60:4	60:4	14	tmp
ASSIGN_OP	60:8	60:8	12	=
LEAF_NODE	60:8	60:8	13	=
RVAL	60:10	60:10	12	g_strconcat ( "_" , purple_account_option_get_text ( option ) , NULL )
FUNCTION_CALL	60:10	60:71	13	g_strconcat ( "_" , purple_account_option_get_text ( option ) , NULL )
CALLEE	60:10	60:10	14	g_strconcat
LEAF_NODE	60:10	60:10	15	g_strconcat
LEAF_NODE	60:21	60:21	14	(
ARGUMENT	60:22	60:22	14	"_"
FIELD	60:22	60:22	15	"_"
LEAF_NODE	60:22	60:22	16	"_"
LEAF_NODE	60:25	60:25	14	,
ARGUMENT	60:27	60:27	14	purple_account_option_get_text ( option )
FUNCTION_CALL	60:27	60:64	15	purple_account_option_get_text ( option )
CALLEE	60:27	60:27	16	purple_account_option_get_text
LEAF_NODE	60:27	60:27	17	purple_account_option_get_text
LEAF_NODE	60:57	60:57	16	(
ARGUMENT	60:58	60:58	16	option
FIELD	60:58	60:58	17	option
LEAF_NODE	60:58	60:58	18	option
LEAF_NODE	60:64	60:64	16	)
LEAF_NODE	60:65	60:65	14	,
ARGUMENT	60:67	60:67	14	NULL
FIELD	60:67	60:67	15	NULL
LEAF_NODE	60:67	60:67	16	NULL
LEAF_NODE	60:71	60:71	14	)
LEAF_NODE	60:72	60:72	10	;
EXPR_STATEMENT	61:4	61:71	9	opt_entry -> widget = check = gtk_check_button_new_with_mnemonic ( tmp ) ;
EXPR	61:4	61:4	10	opt_entry -> widget = check = gtk_check_button_new_with_mnemonic ( tmp )
ASSIGN	61:4	61:24	11	opt_entry -> widget = check = gtk_check_button_new_with_mnemonic ( tmp )
LVAL	61:4	61:4	12	opt_entry -> widget
FIELD	61:4	61:15	13	opt_entry -> widget
LEAF_NODE	61:4	61:4	14	opt_entry
LEAF_NODE	61:13	61:13	14	->
LEAF_NODE	61:15	61:15	14	widget
ASSIGN_OP	61:22	61:22	12	=
LEAF_NODE	61:22	61:22	13	=
RVAL	61:24	61:24	12	check = gtk_check_button_new_with_mnemonic ( tmp )
ASSIGN	61:24	61:32	13	check = gtk_check_button_new_with_mnemonic ( tmp )
LVAL	61:24	61:24	14	check
FIELD	61:24	61:24	15	check
LEAF_NODE	61:24	61:24	16	check
ASSIGN_OP	61:30	61:30	14	=
LEAF_NODE	61:30	61:30	15	=
RVAL	61:32	61:32	14	gtk_check_button_new_with_mnemonic ( tmp )
FUNCTION_CALL	61:32	61:70	15	gtk_check_button_new_with_mnemonic ( tmp )
CALLEE	61:32	61:32	16	gtk_check_button_new_with_mnemonic
LEAF_NODE	61:32	61:32	17	gtk_check_button_new_with_mnemonic
LEAF_NODE	61:66	61:66	16	(
ARGUMENT	61:67	61:67	16	tmp
FIELD	61:67	61:67	17	tmp
LEAF_NODE	61:67	61:67	18	tmp
LEAF_NODE	61:70	61:70	16	)
LEAF_NODE	61:71	61:71	10	;
EXPR_STATEMENT	62:4	62:15	9	g_free ( tmp ) ;
EXPR	62:4	62:4	10	g_free ( tmp )
FUNCTION_CALL	62:4	62:14	11	g_free ( tmp )
CALLEE	62:4	62:4	12	g_free
LEAF_NODE	62:4	62:4	13	g_free
LEAF_NODE	62:10	62:10	12	(
ARGUMENT	62:11	62:11	12	tmp
FIELD	62:11	62:11	13	tmp
LEAF_NODE	62:11	62:11	14	tmp
LEAF_NODE	62:14	62:14	12	)
LEAF_NODE	62:15	62:15	10	;
EXPR_STATEMENT	63:4	64:23	9	gtk_toggle_button_set_active ( GTK_TOGGLE_BUTTON ( check ) , bool_value ) ;
EXPR	63:4	63:4	10	gtk_toggle_button_set_active ( GTK_TOGGLE_BUTTON ( check ) , bool_value )
FUNCTION_CALL	63:4	64:22	11	gtk_toggle_button_set_active ( GTK_TOGGLE_BUTTON ( check ) , bool_value )
CALLEE	63:4	63:4	12	gtk_toggle_button_set_active
LEAF_NODE	63:4	63:4	13	gtk_toggle_button_set_active
LEAF_NODE	63:32	63:32	12	(
ARGUMENT	63:33	63:33	12	GTK_TOGGLE_BUTTON ( check )
FUNCTION_CALL	63:33	63:56	13	GTK_TOGGLE_BUTTON ( check )
CALLEE	63:33	63:33	14	GTK_TOGGLE_BUTTON
LEAF_NODE	63:33	63:33	15	GTK_TOGGLE_BUTTON
LEAF_NODE	63:50	63:50	14	(
ARGUMENT	63:51	63:51	14	check
FIELD	63:51	63:51	15	check
LEAF_NODE	63:51	63:51	16	check
LEAF_NODE	63:56	63:56	14	)
LEAF_NODE	63:57	63:57	12	,
ARGUMENT	64:12	64:12	12	bool_value
FIELD	64:12	64:12	13	bool_value
LEAF_NODE	64:12	64:12	14	bool_value
LEAF_NODE	64:22	64:22	12	)
LEAF_NODE	64:23	64:23	10	;
EXPR_STATEMENT	65:4	65:61	9	gtk_box_pack_start ( GTK_BOX ( vbox ) , check , FALSE , FALSE , 0 ) ;
EXPR	65:4	65:4	10	gtk_box_pack_start ( GTK_BOX ( vbox ) , check , FALSE , FALSE , 0 )
FUNCTION_CALL	65:4	65:60	11	gtk_box_pack_start ( GTK_BOX ( vbox ) , check , FALSE , FALSE , 0 )
CALLEE	65:4	65:4	12	gtk_box_pack_start
LEAF_NODE	65:4	65:4	13	gtk_box_pack_start
LEAF_NODE	65:22	65:22	12	(
ARGUMENT	65:23	65:23	12	GTK_BOX ( vbox )
FUNCTION_CALL	65:23	65:35	13	GTK_BOX ( vbox )
CALLEE	65:23	65:23	14	GTK_BOX
LEAF_NODE	65:23	65:23	15	GTK_BOX
LEAF_NODE	65:30	65:30	14	(
ARGUMENT	65:31	65:31	14	vbox
FIELD	65:31	65:31	15	vbox
LEAF_NODE	65:31	65:31	16	vbox
LEAF_NODE	65:35	65:35	14	)
LEAF_NODE	65:36	65:36	12	,
ARGUMENT	65:38	65:38	12	check
FIELD	65:38	65:38	13	check
LEAF_NODE	65:38	65:38	14	check
LEAF_NODE	65:43	65:43	12	,
ARGUMENT	65:45	65:45	12	FALSE
FIELD	65:45	65:45	13	FALSE
LEAF_NODE	65:45	65:45	14	FALSE
LEAF_NODE	65:50	65:50	12	,
ARGUMENT	65:52	65:52	12	FALSE
FIELD	65:52	65:52	13	FALSE
LEAF_NODE	65:52	65:52	14	FALSE
LEAF_NODE	65:57	65:57	12	,
ARGUMENT	65:59	65:59	12	0
FIELD	65:59	65:59	13	0
LEAF_NODE	65:59	65:59	14	0
LEAF_NODE	65:60	65:60	12	)
LEAF_NODE	65:61	65:61	10	;
EXPR_STATEMENT	66:4	66:26	9	gtk_widget_show ( check ) ;
EXPR	66:4	66:4	10	gtk_widget_show ( check )
FUNCTION_CALL	66:4	66:25	11	gtk_widget_show ( check )
CALLEE	66:4	66:4	12	gtk_widget_show
LEAF_NODE	66:4	66:4	13	gtk_widget_show
LEAF_NODE	66:19	66:19	12	(
ARGUMENT	66:20	66:20	12	check
FIELD	66:20	66:20	13	check
LEAF_NODE	66:20	66:20	14	check
LEAF_NODE	66:25	66:25	12	)
LEAF_NODE	66:26	66:26	10	;
JUMP_STATEMENT	67:4	67:9	9	break DESTINATION ;
KEYWORD	67:4	67:4	10	break
LEAF_NODE	67:4	67:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	67:9	67:9	10	;
LABEL	68:3	68:23	9	case PURPLE_PREF_INT :
LEAF_NODE	68:3	68:3	10	case
LEAF_NODE	68:8	68:8	10	PURPLE_PREF_INT
LEAF_NODE	68:23	68:23	10	:
SELECTION	69:4	72:4	9	
KEYWORD	69:4	69:4	10	if
LEAF_NODE	69:4	69:4	11	if
LEAF_NODE	69:7	69:7	10	(
CONDITION	69:8	69:8	10	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
EXPR	69:8	69:8	11	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
OR	69:8	70:5	12	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
EXPR	69:8	69:19	13	account == NULL
FIELD	69:8	69:8	14	account
LEAF_NODE	69:8	69:8	15	account
EQ_OPERATOR	69:16	69:16	14	==
LEAF_NODE	69:16	69:16	15	==
FIELD	69:19	69:19	14	NULL
LEAF_NODE	69:19	69:19	15	NULL
LEAF_NODE	69:24	69:24	13	||
EXPR	70:5	70:5	13	strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
FUNCTION_CALL	70:5	71:28	14	strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
CALLEE	70:5	70:5	15	strcmp
LEAF_NODE	70:5	70:5	16	strcmp
LEAF_NODE	70:11	70:11	15	(
ARGUMENT	70:12	70:12	15	purple_account_get_protocol_id ( account )
FUNCTION_CALL	70:12	70:50	16	purple_account_get_protocol_id ( account )
CALLEE	70:12	70:12	17	purple_account_get_protocol_id
LEAF_NODE	70:12	70:12	18	purple_account_get_protocol_id
LEAF_NODE	70:42	70:42	17	(
ARGUMENT	70:43	70:43	17	account
FIELD	70:43	70:43	18	account
LEAF_NODE	70:43	70:43	19	account
LEAF_NODE	70:50	70:50	17	)
LEAF_NODE	70:51	70:51	15	,
ARGUMENT	71:9	71:9	15	dialog -> protocol_id
FIELD	71:9	71:17	16	dialog -> protocol_id
LEAF_NODE	71:9	71:9	17	dialog
LEAF_NODE	71:15	71:15	17	->
LEAF_NODE	71:17	71:17	17	protocol_id
LEAF_NODE	71:28	71:28	15	)
LEAF_NODE	71:29	71:29	10	)
STATEMENTS	72:4	74:4	10	
LEAF_NODE	72:4	72:4	11	{
STATEMENTS	73:5	73:5	11	
EXPR_STATEMENT	73:5	73:62	12	int_value = purple_account_option_get_default_int ( option ) ;
EXPR	73:5	73:5	13	int_value = purple_account_option_get_default_int ( option )
ASSIGN	73:5	73:17	14	int_value = purple_account_option_get_default_int ( option )
LVAL	73:5	73:5	15	int_value
FIELD	73:5	73:5	16	int_value
LEAF_NODE	73:5	73:5	17	int_value
ASSIGN_OP	73:15	73:15	15	=
LEAF_NODE	73:15	73:15	16	=
RVAL	73:17	73:17	15	purple_account_option_get_default_int ( option )
FUNCTION_CALL	73:17	73:61	16	purple_account_option_get_default_int ( option )
CALLEE	73:17	73:17	17	purple_account_option_get_default_int
LEAF_NODE	73:17	73:17	18	purple_account_option_get_default_int
LEAF_NODE	73:54	73:54	17	(
ARGUMENT	73:55	73:55	17	option
FIELD	73:55	73:55	18	option
LEAF_NODE	73:55	73:55	19	option
LEAF_NODE	73:61	73:61	17	)
LEAF_NODE	73:62	73:62	13	;
LEAF_NODE	74:4	74:4	11	}
SELECTION	75:4	76:4	9	
KEYWORD	75:4	75:4	10	else
LEAF_NODE	75:4	75:4	11	else
STATEMENTS	76:4	80:4	10	
LEAF_NODE	76:4	76:4	11	{
STATEMENTS	77:5	77:5	11	
EXPR_STATEMENT	77:5	79:52	12	int_value = purple_account_get_int ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_int ( option ) ) ;
EXPR	77:5	77:5	13	int_value = purple_account_get_int ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_int ( option ) )
ASSIGN	77:5	77:17	14	int_value = purple_account_get_int ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_int ( option ) )
LVAL	77:5	77:5	15	int_value
FIELD	77:5	77:5	16	int_value
LEAF_NODE	77:5	77:5	17	int_value
ASSIGN_OP	77:15	77:15	15	=
LEAF_NODE	77:15	77:15	16	=
RVAL	77:17	77:17	15	purple_account_get_int ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_int ( option ) )
FUNCTION_CALL	77:17	79:51	16	purple_account_get_int ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_int ( option ) )
CALLEE	77:17	77:17	17	purple_account_get_int
LEAF_NODE	77:17	77:17	18	purple_account_get_int
LEAF_NODE	77:39	77:39	17	(
ARGUMENT	77:40	77:40	17	account
FIELD	77:40	77:40	18	account
LEAF_NODE	77:40	77:40	19	account
LEAF_NODE	77:47	77:47	17	,
ARGUMENT	78:6	78:6	17	purple_account_option_get_setting ( option )
FUNCTION_CALL	78:6	78:46	18	purple_account_option_get_setting ( option )
CALLEE	78:6	78:6	19	purple_account_option_get_setting
LEAF_NODE	78:6	78:6	20	purple_account_option_get_setting
LEAF_NODE	78:39	78:39	19	(
ARGUMENT	78:40	78:40	19	option
FIELD	78:40	78:40	20	option
LEAF_NODE	78:40	78:40	21	option
LEAF_NODE	78:46	78:46	19	)
LEAF_NODE	78:47	78:47	17	,
ARGUMENT	79:6	79:6	17	purple_account_option_get_default_int ( option )
FUNCTION_CALL	79:6	79:50	18	purple_account_option_get_default_int ( option )
CALLEE	79:6	79:6	19	purple_account_option_get_default_int
LEAF_NODE	79:6	79:6	20	purple_account_option_get_default_int
LEAF_NODE	79:43	79:43	19	(
ARGUMENT	79:44	79:44	19	option
FIELD	79:44	79:44	20	option
LEAF_NODE	79:44	79:44	21	option
LEAF_NODE	79:50	79:50	19	)
LEAF_NODE	79:51	79:51	17	)
LEAF_NODE	79:52	79:52	13	;
LEAF_NODE	80:4	80:4	11	}
EXPR_STATEMENT	81:4	81:49	9	g_snprintf ( buf , sizeof ( buf ) , "%d" , int_value ) ;
EXPR	81:4	81:4	10	g_snprintf ( buf , sizeof ( buf ) , "%d" , int_value )
FUNCTION_CALL	81:4	81:48	11	g_snprintf ( buf , sizeof ( buf ) , "%d" , int_value )
CALLEE	81:4	81:4	12	g_snprintf
LEAF_NODE	81:4	81:4	13	g_snprintf
LEAF_NODE	81:14	81:14	12	(
ARGUMENT	81:15	81:15	12	buf
FIELD	81:15	81:15	13	buf
LEAF_NODE	81:15	81:15	14	buf
LEAF_NODE	81:18	81:18	12	,
ARGUMENT	81:20	81:20	12	sizeof ( buf )
FUNCTION_CALL	81:20	81:30	13	sizeof ( buf )
CALLEE	81:20	81:20	14	sizeof
LEAF_NODE	81:20	81:20	15	sizeof
LEAF_NODE	81:26	81:26	14	(
ARGUMENT	81:27	81:27	14	buf
FIELD	81:27	81:27	15	buf
LEAF_NODE	81:27	81:27	16	buf
LEAF_NODE	81:30	81:30	14	)
LEAF_NODE	81:31	81:31	12	,
ARGUMENT	81:33	81:33	12	"%d"
FIELD	81:33	81:33	13	"%d"
LEAF_NODE	81:33	81:33	14	"%d"
LEAF_NODE	81:37	81:37	12	,
ARGUMENT	81:39	81:39	12	int_value
FIELD	81:39	81:39	13	int_value
LEAF_NODE	81:39	81:39	14	int_value
LEAF_NODE	81:48	81:48	12	)
LEAF_NODE	81:49	81:49	10	;
EXPR_STATEMENT	82:4	82:47	9	opt_entry -> widget = entry = gtk_entry_new ( ) ;
EXPR	82:4	82:4	10	opt_entry -> widget = entry = gtk_entry_new ( )
ASSIGN	82:4	82:24	11	opt_entry -> widget = entry = gtk_entry_new ( )
LVAL	82:4	82:4	12	opt_entry -> widget
FIELD	82:4	82:15	13	opt_entry -> widget
LEAF_NODE	82:4	82:4	14	opt_entry
LEAF_NODE	82:13	82:13	14	->
LEAF_NODE	82:15	82:15	14	widget
ASSIGN_OP	82:22	82:22	12	=
LEAF_NODE	82:22	82:22	13	=
RVAL	82:24	82:24	12	entry = gtk_entry_new ( )
ASSIGN	82:24	82:32	13	entry = gtk_entry_new ( )
LVAL	82:24	82:24	14	entry
FIELD	82:24	82:24	15	entry
LEAF_NODE	82:24	82:24	16	entry
ASSIGN_OP	82:30	82:30	14	=
LEAF_NODE	82:30	82:30	15	=
RVAL	82:32	82:32	14	gtk_entry_new ( )
FUNCTION_CALL	82:32	82:46	15	gtk_entry_new ( )
CALLEE	82:32	82:32	16	gtk_entry_new
LEAF_NODE	82:32	82:32	17	gtk_entry_new
LEAF_NODE	82:45	82:45	16	(
LEAF_NODE	82:46	82:46	16	)
LEAF_NODE	82:47	82:47	10	;
EXPR_STATEMENT	83:4	83:45	9	gtk_entry_set_text ( GTK_ENTRY ( entry ) , buf ) ;
EXPR	83:4	83:4	10	gtk_entry_set_text ( GTK_ENTRY ( entry ) , buf )
FUNCTION_CALL	83:4	83:44	11	gtk_entry_set_text ( GTK_ENTRY ( entry ) , buf )
CALLEE	83:4	83:4	12	gtk_entry_set_text
LEAF_NODE	83:4	83:4	13	gtk_entry_set_text
LEAF_NODE	83:22	83:22	12	(
ARGUMENT	83:23	83:23	12	GTK_ENTRY ( entry )
FUNCTION_CALL	83:23	83:38	13	GTK_ENTRY ( entry )
CALLEE	83:23	83:23	14	GTK_ENTRY
LEAF_NODE	83:23	83:23	15	GTK_ENTRY
LEAF_NODE	83:32	83:32	14	(
ARGUMENT	83:33	83:33	14	entry
FIELD	83:33	83:33	15	entry
LEAF_NODE	83:33	83:33	16	entry
LEAF_NODE	83:38	83:38	14	)
LEAF_NODE	83:39	83:39	12	,
ARGUMENT	83:41	83:41	12	buf
FIELD	83:41	83:41	13	buf
LEAF_NODE	83:41	83:41	14	buf
LEAF_NODE	83:44	83:44	12	)
LEAF_NODE	83:45	83:45	10	;
EXPR_STATEMENT	84:4	85:45	9	title = g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) ) ;
EXPR	84:4	84:4	10	title = g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
ASSIGN	84:4	84:12	11	title = g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
LVAL	84:4	84:4	12	title
FIELD	84:4	84:4	13	title
LEAF_NODE	84:4	84:4	14	title
ASSIGN_OP	84:10	84:10	12	=
LEAF_NODE	84:10	84:10	13	=
RVAL	84:12	84:12	12	g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
FUNCTION_CALL	84:12	85:44	13	g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
CALLEE	84:12	84:12	14	g_strdup_printf
LEAF_NODE	84:12	84:12	15	g_strdup_printf
LEAF_NODE	84:27	84:27	14	(
ARGUMENT	84:28	84:28	14	"_%s:"
FIELD	84:28	84:28	15	"_%s:"
LEAF_NODE	84:28	84:28	16	"_%s:"
LEAF_NODE	84:34	84:34	14	,
ARGUMENT	85:6	85:6	14	purple_account_option_get_text ( option )
FUNCTION_CALL	85:6	85:43	15	purple_account_option_get_text ( option )
CALLEE	85:6	85:6	16	purple_account_option_get_text
LEAF_NODE	85:6	85:6	17	purple_account_option_get_text
LEAF_NODE	85:36	85:36	16	(
ARGUMENT	85:37	85:37	16	option
FIELD	85:37	85:37	17	option
LEAF_NODE	85:37	85:37	18	option
LEAF_NODE	85:43	85:43	16	)
LEAF_NODE	85:44	85:44	14	)
LEAF_NODE	85:45	85:45	10	;
EXPR_STATEMENT	86:4	86:44	9	add_pref_box ( dialog , vbox , title , entry ) ;
EXPR	86:4	86:4	10	add_pref_box ( dialog , vbox , title , entry )
FUNCTION_CALL	86:4	86:43	11	add_pref_box ( dialog , vbox , title , entry )
CALLEE	86:4	86:4	12	add_pref_box
LEAF_NODE	86:4	86:4	13	add_pref_box
LEAF_NODE	86:16	86:16	12	(
ARGUMENT	86:17	86:17	12	dialog
FIELD	86:17	86:17	13	dialog
LEAF_NODE	86:17	86:17	14	dialog
LEAF_NODE	86:23	86:23	12	,
ARGUMENT	86:25	86:25	12	vbox
FIELD	86:25	86:25	13	vbox
LEAF_NODE	86:25	86:25	14	vbox
LEAF_NODE	86:29	86:29	12	,
ARGUMENT	86:31	86:31	12	title
FIELD	86:31	86:31	13	title
LEAF_NODE	86:31	86:31	14	title
LEAF_NODE	86:36	86:36	12	,
ARGUMENT	86:38	86:38	12	entry
FIELD	86:38	86:38	13	entry
LEAF_NODE	86:38	86:38	14	entry
LEAF_NODE	86:43	86:43	12	)
LEAF_NODE	86:44	86:44	10	;
EXPR_STATEMENT	87:4	87:17	9	g_free ( title ) ;
EXPR	87:4	87:4	10	g_free ( title )
FUNCTION_CALL	87:4	87:16	11	g_free ( title )
CALLEE	87:4	87:4	12	g_free
LEAF_NODE	87:4	87:4	13	g_free
LEAF_NODE	87:10	87:10	12	(
ARGUMENT	87:11	87:11	12	title
FIELD	87:11	87:11	13	title
LEAF_NODE	87:11	87:11	14	title
LEAF_NODE	87:16	87:16	12	)
LEAF_NODE	87:17	87:17	10	;
JUMP_STATEMENT	88:4	88:9	9	break DESTINATION ;
KEYWORD	88:4	88:4	10	break
LEAF_NODE	88:4	88:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	88:9	88:9	10	;
LABEL	89:3	89:26	9	case PURPLE_PREF_STRING :
LEAF_NODE	89:3	89:3	10	case
LEAF_NODE	89:8	89:8	10	PURPLE_PREF_STRING
LEAF_NODE	89:26	89:26	10	:
SELECTION	90:4	93:4	9	
KEYWORD	90:4	90:4	10	if
LEAF_NODE	90:4	90:4	11	if
LEAF_NODE	90:7	90:7	10	(
CONDITION	90:8	90:8	10	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
EXPR	90:8	90:8	11	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
OR	90:8	91:5	12	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
EXPR	90:8	90:19	13	account == NULL
FIELD	90:8	90:8	14	account
LEAF_NODE	90:8	90:8	15	account
EQ_OPERATOR	90:16	90:16	14	==
LEAF_NODE	90:16	90:16	15	==
FIELD	90:19	90:19	14	NULL
LEAF_NODE	90:19	90:19	15	NULL
LEAF_NODE	90:24	90:24	13	||
EXPR	91:5	91:5	13	strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
FUNCTION_CALL	91:5	92:28	14	strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
CALLEE	91:5	91:5	15	strcmp
LEAF_NODE	91:5	91:5	16	strcmp
LEAF_NODE	91:11	91:11	15	(
ARGUMENT	91:12	91:12	15	purple_account_get_protocol_id ( account )
FUNCTION_CALL	91:12	91:50	16	purple_account_get_protocol_id ( account )
CALLEE	91:12	91:12	17	purple_account_get_protocol_id
LEAF_NODE	91:12	91:12	18	purple_account_get_protocol_id
LEAF_NODE	91:42	91:42	17	(
ARGUMENT	91:43	91:43	17	account
FIELD	91:43	91:43	18	account
LEAF_NODE	91:43	91:43	19	account
LEAF_NODE	91:50	91:50	17	)
LEAF_NODE	91:51	91:51	15	,
ARGUMENT	92:9	92:9	15	dialog -> protocol_id
FIELD	92:9	92:17	16	dialog -> protocol_id
LEAF_NODE	92:9	92:9	17	dialog
LEAF_NODE	92:15	92:15	17	->
LEAF_NODE	92:17	92:17	17	protocol_id
LEAF_NODE	92:28	92:28	15	)
LEAF_NODE	92:29	92:29	10	)
STATEMENTS	93:4	95:4	10	
LEAF_NODE	93:4	93:4	11	{
STATEMENTS	94:5	94:5	11	
EXPR_STATEMENT	94:5	94:65	12	str_value = purple_account_option_get_default_string ( option ) ;
EXPR	94:5	94:5	13	str_value = purple_account_option_get_default_string ( option )
ASSIGN	94:5	94:17	14	str_value = purple_account_option_get_default_string ( option )
LVAL	94:5	94:5	15	str_value
FIELD	94:5	94:5	16	str_value
LEAF_NODE	94:5	94:5	17	str_value
ASSIGN_OP	94:15	94:15	15	=
LEAF_NODE	94:15	94:15	16	=
RVAL	94:17	94:17	15	purple_account_option_get_default_string ( option )
FUNCTION_CALL	94:17	94:64	16	purple_account_option_get_default_string ( option )
CALLEE	94:17	94:17	17	purple_account_option_get_default_string
LEAF_NODE	94:17	94:17	18	purple_account_option_get_default_string
LEAF_NODE	94:57	94:57	17	(
ARGUMENT	94:58	94:58	17	option
FIELD	94:58	94:58	18	option
LEAF_NODE	94:58	94:58	19	option
LEAF_NODE	94:64	94:64	17	)
LEAF_NODE	94:65	94:65	13	;
LEAF_NODE	95:4	95:4	11	}
SELECTION	96:4	97:4	9	
KEYWORD	96:4	96:4	10	else
LEAF_NODE	96:4	96:4	11	else
STATEMENTS	97:4	101:4	10	
LEAF_NODE	97:4	97:4	11	{
STATEMENTS	98:5	98:5	11	
EXPR_STATEMENT	98:5	100:55	12	str_value = purple_account_get_string ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_string ( option ) ) ;
EXPR	98:5	98:5	13	str_value = purple_account_get_string ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_string ( option ) )
ASSIGN	98:5	98:17	14	str_value = purple_account_get_string ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_string ( option ) )
LVAL	98:5	98:5	15	str_value
FIELD	98:5	98:5	16	str_value
LEAF_NODE	98:5	98:5	17	str_value
ASSIGN_OP	98:15	98:15	15	=
LEAF_NODE	98:15	98:15	16	=
RVAL	98:17	98:17	15	purple_account_get_string ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_string ( option ) )
FUNCTION_CALL	98:17	100:54	16	purple_account_get_string ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_string ( option ) )
CALLEE	98:17	98:17	17	purple_account_get_string
LEAF_NODE	98:17	98:17	18	purple_account_get_string
LEAF_NODE	98:42	98:42	17	(
ARGUMENT	98:43	98:43	17	account
FIELD	98:43	98:43	18	account
LEAF_NODE	98:43	98:43	19	account
LEAF_NODE	98:50	98:50	17	,
ARGUMENT	99:6	99:6	17	purple_account_option_get_setting ( option )
FUNCTION_CALL	99:6	99:46	18	purple_account_option_get_setting ( option )
CALLEE	99:6	99:6	19	purple_account_option_get_setting
LEAF_NODE	99:6	99:6	20	purple_account_option_get_setting
LEAF_NODE	99:39	99:39	19	(
ARGUMENT	99:40	99:40	19	option
FIELD	99:40	99:40	20	option
LEAF_NODE	99:40	99:40	21	option
LEAF_NODE	99:46	99:46	19	)
LEAF_NODE	99:47	99:47	17	,
ARGUMENT	100:6	100:6	17	purple_account_option_get_default_string ( option )
FUNCTION_CALL	100:6	100:53	18	purple_account_option_get_default_string ( option )
CALLEE	100:6	100:6	19	purple_account_option_get_default_string
LEAF_NODE	100:6	100:6	20	purple_account_option_get_default_string
LEAF_NODE	100:46	100:46	19	(
ARGUMENT	100:47	100:47	19	option
FIELD	100:47	100:47	20	option
LEAF_NODE	100:47	100:47	21	option
LEAF_NODE	100:53	100:53	19	)
LEAF_NODE	100:54	100:54	17	)
LEAF_NODE	100:55	100:55	13	;
LEAF_NODE	101:4	101:4	11	}
EXPR_STATEMENT	102:4	102:47	9	opt_entry -> widget = entry = gtk_entry_new ( ) ;
EXPR	102:4	102:4	10	opt_entry -> widget = entry = gtk_entry_new ( )
ASSIGN	102:4	102:24	11	opt_entry -> widget = entry = gtk_entry_new ( )
LVAL	102:4	102:4	12	opt_entry -> widget
FIELD	102:4	102:15	13	opt_entry -> widget
LEAF_NODE	102:4	102:4	14	opt_entry
LEAF_NODE	102:13	102:13	14	->
LEAF_NODE	102:15	102:15	14	widget
ASSIGN_OP	102:22	102:22	12	=
LEAF_NODE	102:22	102:22	13	=
RVAL	102:24	102:24	12	entry = gtk_entry_new ( )
ASSIGN	102:24	102:32	13	entry = gtk_entry_new ( )
LVAL	102:24	102:24	14	entry
FIELD	102:24	102:24	15	entry
LEAF_NODE	102:24	102:24	16	entry
ASSIGN_OP	102:30	102:30	14	=
LEAF_NODE	102:30	102:30	15	=
RVAL	102:32	102:32	14	gtk_entry_new ( )
FUNCTION_CALL	102:32	102:46	15	gtk_entry_new ( )
CALLEE	102:32	102:32	16	gtk_entry_new
LEAF_NODE	102:32	102:32	17	gtk_entry_new
LEAF_NODE	102:45	102:45	16	(
LEAF_NODE	102:46	102:46	16	)
LEAF_NODE	102:47	102:47	10	;
SELECTION	103:4	104:4	9	
KEYWORD	103:4	103:4	10	if
LEAF_NODE	103:4	103:4	11	if
LEAF_NODE	103:7	103:7	10	(
CONDITION	103:8	103:8	10	purple_account_option_get_masked ( option )
EXPR	103:8	103:8	11	purple_account_option_get_masked ( option )
FUNCTION_CALL	103:8	103:47	12	purple_account_option_get_masked ( option )
CALLEE	103:8	103:8	13	purple_account_option_get_masked
LEAF_NODE	103:8	103:8	14	purple_account_option_get_masked
LEAF_NODE	103:40	103:40	13	(
ARGUMENT	103:41	103:41	13	option
FIELD	103:41	103:41	14	option
LEAF_NODE	103:41	103:41	15	option
LEAF_NODE	103:47	103:47	13	)
LEAF_NODE	103:48	103:48	10	)
STATEMENTS	104:4	110:4	10	
LEAF_NODE	104:4	104:4	11	{
STATEMENTS	105:5	107:5	11	
EXPR_STATEMENT	105:5	105:54	12	gtk_entry_set_visibility ( GTK_ENTRY ( entry ) , FALSE ) ;
EXPR	105:5	105:5	13	gtk_entry_set_visibility ( GTK_ENTRY ( entry ) , FALSE )
FUNCTION_CALL	105:5	105:53	14	gtk_entry_set_visibility ( GTK_ENTRY ( entry ) , FALSE )
CALLEE	105:5	105:5	15	gtk_entry_set_visibility
LEAF_NODE	105:5	105:5	16	gtk_entry_set_visibility
LEAF_NODE	105:29	105:29	15	(
ARGUMENT	105:30	105:30	15	GTK_ENTRY ( entry )
FUNCTION_CALL	105:30	105:45	16	GTK_ENTRY ( entry )
CALLEE	105:30	105:30	17	GTK_ENTRY
LEAF_NODE	105:30	105:30	18	GTK_ENTRY
LEAF_NODE	105:39	105:39	17	(
ARGUMENT	105:40	105:40	17	entry
FIELD	105:40	105:40	18	entry
LEAF_NODE	105:40	105:40	19	entry
LEAF_NODE	105:45	105:45	17	)
LEAF_NODE	105:46	105:46	15	,
ARGUMENT	105:48	105:48	15	FALSE
FIELD	105:48	105:48	16	FALSE
LEAF_NODE	105:48	105:48	17	FALSE
LEAF_NODE	105:53	105:53	15	)
LEAF_NODE	105:54	105:54	13	;
SELECTION	107:5	108:6	12	
KEYWORD	107:5	107:5	13	if
LEAF_NODE	107:5	107:5	14	if
LEAF_NODE	107:8	107:8	13	(
CONDITION	107:9	107:9	13	gtk_entry_get_invisible_char ( GTK_ENTRY ( entry ) ) == '*'
EXPR	107:9	107:59	14	gtk_entry_get_invisible_char ( GTK_ENTRY ( entry ) ) == '*'
FUNCTION_CALL	107:9	107:54	15	gtk_entry_get_invisible_char ( GTK_ENTRY ( entry ) )
CALLEE	107:9	107:9	16	gtk_entry_get_invisible_char
LEAF_NODE	107:9	107:9	17	gtk_entry_get_invisible_char
LEAF_NODE	107:37	107:37	16	(
ARGUMENT	107:38	107:38	16	GTK_ENTRY ( entry )
FUNCTION_CALL	107:38	107:53	17	GTK_ENTRY ( entry )
CALLEE	107:38	107:38	18	GTK_ENTRY
LEAF_NODE	107:38	107:38	19	GTK_ENTRY
LEAF_NODE	107:47	107:47	18	(
ARGUMENT	107:48	107:48	18	entry
FIELD	107:48	107:48	19	entry
LEAF_NODE	107:48	107:48	20	entry
LEAF_NODE	107:53	107:53	18	)
LEAF_NODE	107:54	107:54	16	)
EQ_OPERATOR	107:56	107:56	15	==
LEAF_NODE	107:56	107:56	16	==
FIELD	107:59	107:59	15	'*'
LEAF_NODE	107:59	107:59	16	'*'
LEAF_NODE	107:62	107:62	13	)
STATEMENTS	108:6	108:6	13	
EXPR_STATEMENT	108:6	108:75	14	gtk_entry_set_invisible_char ( GTK_ENTRY ( entry ) , PIDGIN_INVISIBLE_CHAR ) ;
EXPR	108:6	108:6	15	gtk_entry_set_invisible_char ( GTK_ENTRY ( entry ) , PIDGIN_INVISIBLE_CHAR )
FUNCTION_CALL	108:6	108:74	16	gtk_entry_set_invisible_char ( GTK_ENTRY ( entry ) , PIDGIN_INVISIBLE_CHAR )
CALLEE	108:6	108:6	17	gtk_entry_set_invisible_char
LEAF_NODE	108:6	108:6	18	gtk_entry_set_invisible_char
LEAF_NODE	108:34	108:34	17	(
ARGUMENT	108:35	108:35	17	GTK_ENTRY ( entry )
FUNCTION_CALL	108:35	108:50	18	GTK_ENTRY ( entry )
CALLEE	108:35	108:35	19	GTK_ENTRY
LEAF_NODE	108:35	108:35	20	GTK_ENTRY
LEAF_NODE	108:44	108:44	19	(
ARGUMENT	108:45	108:45	19	entry
FIELD	108:45	108:45	20	entry
LEAF_NODE	108:45	108:45	21	entry
LEAF_NODE	108:50	108:50	19	)
LEAF_NODE	108:51	108:51	17	,
ARGUMENT	108:53	108:53	17	PIDGIN_INVISIBLE_CHAR
FIELD	108:53	108:53	18	PIDGIN_INVISIBLE_CHAR
LEAF_NODE	108:53	108:53	19	PIDGIN_INVISIBLE_CHAR
LEAF_NODE	108:74	108:74	17	)
LEAF_NODE	108:75	108:75	15	;
LEAF_NODE	110:4	110:4	11	}
SELECTION	111:4	112:5	9	
KEYWORD	111:4	111:4	10	if
LEAF_NODE	111:4	111:4	11	if
LEAF_NODE	111:7	111:7	10	(
CONDITION	111:8	111:8	10	str_value != NULL
EXPR	111:8	111:21	11	str_value != NULL
FIELD	111:8	111:8	12	str_value
LEAF_NODE	111:8	111:8	13	str_value
EQ_OPERATOR	111:18	111:18	12	!=
LEAF_NODE	111:18	111:18	13	!=
FIELD	111:21	111:21	12	NULL
LEAF_NODE	111:21	111:21	13	NULL
LEAF_NODE	111:25	111:25	10	)
STATEMENTS	112:5	112:5	10	
EXPR_STATEMENT	112:5	112:52	11	gtk_entry_set_text ( GTK_ENTRY ( entry ) , str_value ) ;
EXPR	112:5	112:5	12	gtk_entry_set_text ( GTK_ENTRY ( entry ) , str_value )
FUNCTION_CALL	112:5	112:51	13	gtk_entry_set_text ( GTK_ENTRY ( entry ) , str_value )
CALLEE	112:5	112:5	14	gtk_entry_set_text
LEAF_NODE	112:5	112:5	15	gtk_entry_set_text
LEAF_NODE	112:23	112:23	14	(
ARGUMENT	112:24	112:24	14	GTK_ENTRY ( entry )
FUNCTION_CALL	112:24	112:39	15	GTK_ENTRY ( entry )
CALLEE	112:24	112:24	16	GTK_ENTRY
LEAF_NODE	112:24	112:24	17	GTK_ENTRY
LEAF_NODE	112:33	112:33	16	(
ARGUMENT	112:34	112:34	16	entry
FIELD	112:34	112:34	17	entry
LEAF_NODE	112:34	112:34	18	entry
LEAF_NODE	112:39	112:39	16	)
LEAF_NODE	112:40	112:40	14	,
ARGUMENT	112:42	112:42	14	str_value
FIELD	112:42	112:42	15	str_value
LEAF_NODE	112:42	112:42	16	str_value
LEAF_NODE	112:51	112:51	14	)
LEAF_NODE	112:52	112:52	12	;
EXPR_STATEMENT	113:4	114:45	9	title = g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) ) ;
EXPR	113:4	113:4	10	title = g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
ASSIGN	113:4	113:12	11	title = g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
LVAL	113:4	113:4	12	title
FIELD	113:4	113:4	13	title
LEAF_NODE	113:4	113:4	14	title
ASSIGN_OP	113:10	113:10	12	=
LEAF_NODE	113:10	113:10	13	=
RVAL	113:12	113:12	12	g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
FUNCTION_CALL	113:12	114:44	13	g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
CALLEE	113:12	113:12	14	g_strdup_printf
LEAF_NODE	113:12	113:12	15	g_strdup_printf
LEAF_NODE	113:27	113:27	14	(
ARGUMENT	113:28	113:28	14	"_%s:"
FIELD	113:28	113:28	15	"_%s:"
LEAF_NODE	113:28	113:28	16	"_%s:"
LEAF_NODE	113:34	113:34	14	,
ARGUMENT	114:6	114:6	14	purple_account_option_get_text ( option )
FUNCTION_CALL	114:6	114:43	15	purple_account_option_get_text ( option )
CALLEE	114:6	114:6	16	purple_account_option_get_text
LEAF_NODE	114:6	114:6	17	purple_account_option_get_text
LEAF_NODE	114:36	114:36	16	(
ARGUMENT	114:37	114:37	16	option
FIELD	114:37	114:37	17	option
LEAF_NODE	114:37	114:37	18	option
LEAF_NODE	114:43	114:43	16	)
LEAF_NODE	114:44	114:44	14	)
LEAF_NODE	114:45	114:45	10	;
EXPR_STATEMENT	115:4	115:44	9	add_pref_box ( dialog , vbox , title , entry ) ;
EXPR	115:4	115:4	10	add_pref_box ( dialog , vbox , title , entry )
FUNCTION_CALL	115:4	115:43	11	add_pref_box ( dialog , vbox , title , entry )
CALLEE	115:4	115:4	12	add_pref_box
LEAF_NODE	115:4	115:4	13	add_pref_box
LEAF_NODE	115:16	115:16	12	(
ARGUMENT	115:17	115:17	12	dialog
FIELD	115:17	115:17	13	dialog
LEAF_NODE	115:17	115:17	14	dialog
LEAF_NODE	115:23	115:23	12	,
ARGUMENT	115:25	115:25	12	vbox
FIELD	115:25	115:25	13	vbox
LEAF_NODE	115:25	115:25	14	vbox
LEAF_NODE	115:29	115:29	12	,
ARGUMENT	115:31	115:31	12	title
FIELD	115:31	115:31	13	title
LEAF_NODE	115:31	115:31	14	title
LEAF_NODE	115:36	115:36	12	,
ARGUMENT	115:38	115:38	12	entry
FIELD	115:38	115:38	13	entry
LEAF_NODE	115:38	115:38	14	entry
LEAF_NODE	115:43	115:43	12	)
LEAF_NODE	115:44	115:44	10	;
EXPR_STATEMENT	116:4	116:17	9	g_free ( title ) ;
EXPR	116:4	116:4	10	g_free ( title )
FUNCTION_CALL	116:4	116:16	11	g_free ( title )
CALLEE	116:4	116:4	12	g_free
LEAF_NODE	116:4	116:4	13	g_free
LEAF_NODE	116:10	116:10	12	(
ARGUMENT	116:11	116:11	12	title
FIELD	116:11	116:11	13	title
LEAF_NODE	116:11	116:11	14	title
LEAF_NODE	116:16	116:16	12	)
LEAF_NODE	116:17	116:17	10	;
JUMP_STATEMENT	117:4	117:9	9	break DESTINATION ;
KEYWORD	117:4	117:4	10	break
LEAF_NODE	117:4	117:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	117:9	117:9	10	;
LABEL	118:3	118:31	9	case PURPLE_PREF_STRING_LIST :
LEAF_NODE	118:3	118:3	10	case
LEAF_NODE	118:8	118:8	10	PURPLE_PREF_STRING_LIST
LEAF_NODE	118:31	118:31	10	:
EXPR_STATEMENT	119:4	119:9	9	i = 0 ;
EXPR	119:4	119:4	10	i = 0
ASSIGN	119:4	119:8	11	i = 0
LVAL	119:4	119:4	12	i
FIELD	119:4	119:4	13	i
LEAF_NODE	119:4	119:4	14	i
ASSIGN_OP	119:6	119:6	12	=
LEAF_NODE	119:6	119:6	13	=
RVAL	119:8	119:8	12	0
FIELD	119:8	119:8	13	0
LEAF_NODE	119:8	119:8	14	0
LEAF_NODE	119:9	119:9	10	;
EXPR_STATEMENT	120:4	120:11	9	idx = 0 ;
EXPR	120:4	120:4	10	idx = 0
ASSIGN	120:4	120:10	11	idx = 0
LVAL	120:4	120:4	12	idx
FIELD	120:4	120:4	13	idx
LEAF_NODE	120:4	120:4	14	idx
ASSIGN_OP	120:8	120:8	12	=
LEAF_NODE	120:8	120:8	13	=
RVAL	120:10	120:10	12	0
FIELD	120:10	120:10	13	0
LEAF_NODE	120:10	120:10	14	0
LEAF_NODE	120:11	120:11	10	;
SELECTION	121:4	124:4	9	
KEYWORD	121:4	121:4	10	if
LEAF_NODE	121:4	121:4	11	if
LEAF_NODE	121:7	121:7	10	(
CONDITION	121:8	121:8	10	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
EXPR	121:8	121:8	11	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
OR	121:8	122:5	12	account == NULL || strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
EXPR	121:8	121:19	13	account == NULL
FIELD	121:8	121:8	14	account
LEAF_NODE	121:8	121:8	15	account
EQ_OPERATOR	121:16	121:16	14	==
LEAF_NODE	121:16	121:16	15	==
FIELD	121:19	121:19	14	NULL
LEAF_NODE	121:19	121:19	15	NULL
LEAF_NODE	121:24	121:24	13	||
EXPR	122:5	122:5	13	strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
FUNCTION_CALL	122:5	123:28	14	strcmp ( purple_account_get_protocol_id ( account ) , dialog -> protocol_id )
CALLEE	122:5	122:5	15	strcmp
LEAF_NODE	122:5	122:5	16	strcmp
LEAF_NODE	122:11	122:11	15	(
ARGUMENT	122:12	122:12	15	purple_account_get_protocol_id ( account )
FUNCTION_CALL	122:12	122:50	16	purple_account_get_protocol_id ( account )
CALLEE	122:12	122:12	17	purple_account_get_protocol_id
LEAF_NODE	122:12	122:12	18	purple_account_get_protocol_id
LEAF_NODE	122:42	122:42	17	(
ARGUMENT	122:43	122:43	17	account
FIELD	122:43	122:43	18	account
LEAF_NODE	122:43	122:43	19	account
LEAF_NODE	122:50	122:50	17	)
LEAF_NODE	122:51	122:51	15	,
ARGUMENT	123:9	123:9	15	dialog -> protocol_id
FIELD	123:9	123:17	16	dialog -> protocol_id
LEAF_NODE	123:9	123:9	17	dialog
LEAF_NODE	123:15	123:15	17	->
LEAF_NODE	123:17	123:17	17	protocol_id
LEAF_NODE	123:28	123:28	15	)
LEAF_NODE	123:29	123:29	10	)
STATEMENTS	124:4	126:4	10	
LEAF_NODE	124:4	124:4	11	{
STATEMENTS	125:5	125:5	11	
EXPR_STATEMENT	125:5	125:69	12	str_value = purple_account_option_get_default_list_value ( option ) ;
EXPR	125:5	125:5	13	str_value = purple_account_option_get_default_list_value ( option )
ASSIGN	125:5	125:17	14	str_value = purple_account_option_get_default_list_value ( option )
LVAL	125:5	125:5	15	str_value
FIELD	125:5	125:5	16	str_value
LEAF_NODE	125:5	125:5	17	str_value
ASSIGN_OP	125:15	125:15	15	=
LEAF_NODE	125:15	125:15	16	=
RVAL	125:17	125:17	15	purple_account_option_get_default_list_value ( option )
FUNCTION_CALL	125:17	125:68	16	purple_account_option_get_default_list_value ( option )
CALLEE	125:17	125:17	17	purple_account_option_get_default_list_value
LEAF_NODE	125:17	125:17	18	purple_account_option_get_default_list_value
LEAF_NODE	125:61	125:61	17	(
ARGUMENT	125:62	125:62	17	option
FIELD	125:62	125:62	18	option
LEAF_NODE	125:62	125:62	19	option
LEAF_NODE	125:68	125:68	17	)
LEAF_NODE	125:69	125:69	13	;
LEAF_NODE	126:4	126:4	11	}
SELECTION	127:4	128:4	9	
KEYWORD	127:4	127:4	10	else
LEAF_NODE	127:4	127:4	11	else
STATEMENTS	128:4	132:4	10	
LEAF_NODE	128:4	128:4	11	{
STATEMENTS	129:5	129:5	11	
EXPR_STATEMENT	129:5	131:59	12	str_value = purple_account_get_string ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_list_value ( option ) ) ;
EXPR	129:5	129:5	13	str_value = purple_account_get_string ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_list_value ( option ) )
ASSIGN	129:5	129:17	14	str_value = purple_account_get_string ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_list_value ( option ) )
LVAL	129:5	129:5	15	str_value
FIELD	129:5	129:5	16	str_value
LEAF_NODE	129:5	129:5	17	str_value
ASSIGN_OP	129:15	129:15	15	=
LEAF_NODE	129:15	129:15	16	=
RVAL	129:17	129:17	15	purple_account_get_string ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_list_value ( option ) )
FUNCTION_CALL	129:17	131:58	16	purple_account_get_string ( account , purple_account_option_get_setting ( option ) , purple_account_option_get_default_list_value ( option ) )
CALLEE	129:17	129:17	17	purple_account_get_string
LEAF_NODE	129:17	129:17	18	purple_account_get_string
LEAF_NODE	129:42	129:42	17	(
ARGUMENT	129:43	129:43	17	account
FIELD	129:43	129:43	18	account
LEAF_NODE	129:43	129:43	19	account
LEAF_NODE	129:50	129:50	17	,
ARGUMENT	130:6	130:6	17	purple_account_option_get_setting ( option )
FUNCTION_CALL	130:6	130:46	18	purple_account_option_get_setting ( option )
CALLEE	130:6	130:6	19	purple_account_option_get_setting
LEAF_NODE	130:6	130:6	20	purple_account_option_get_setting
LEAF_NODE	130:39	130:39	19	(
ARGUMENT	130:40	130:40	19	option
FIELD	130:40	130:40	20	option
LEAF_NODE	130:40	130:40	21	option
LEAF_NODE	130:46	130:46	19	)
LEAF_NODE	130:47	130:47	17	,
ARGUMENT	131:6	131:6	17	purple_account_option_get_default_list_value ( option )
FUNCTION_CALL	131:6	131:57	18	purple_account_option_get_default_list_value ( option )
CALLEE	131:6	131:6	19	purple_account_option_get_default_list_value
LEAF_NODE	131:6	131:6	20	purple_account_option_get_default_list_value
LEAF_NODE	131:50	131:50	19	(
ARGUMENT	131:51	131:51	19	option
FIELD	131:51	131:51	20	option
LEAF_NODE	131:51	131:51	21	option
LEAF_NODE	131:57	131:57	19	)
LEAF_NODE	131:58	131:58	17	)
LEAF_NODE	131:59	131:59	13	;
LEAF_NODE	132:4	132:4	11	}
EXPR_STATEMENT	133:4	133:49	9	list = purple_account_option_get_list ( option ) ;
EXPR	133:4	133:4	10	list = purple_account_option_get_list ( option )
ASSIGN	133:4	133:11	11	list = purple_account_option_get_list ( option )
LVAL	133:4	133:4	12	list
FIELD	133:4	133:4	13	list
LEAF_NODE	133:4	133:4	14	list
ASSIGN_OP	133:9	133:9	12	=
LEAF_NODE	133:9	133:9	13	=
RVAL	133:11	133:11	12	purple_account_option_get_list ( option )
FUNCTION_CALL	133:11	133:48	13	purple_account_option_get_list ( option )
CALLEE	133:11	133:11	14	purple_account_option_get_list
LEAF_NODE	133:11	133:11	15	purple_account_option_get_list
LEAF_NODE	133:41	133:41	14	(
ARGUMENT	133:42	133:42	14	option
FIELD	133:42	133:42	15	option
LEAF_NODE	133:42	133:42	16	option
LEAF_NODE	133:48	133:48	14	)
LEAF_NODE	133:49	133:49	10	;
EXPR_STATEMENT	134:4	134:64	9	model = gtk_list_store_new ( 2 , G_TYPE_STRING , G_TYPE_POINTER ) ;
EXPR	134:4	134:4	10	model = gtk_list_store_new ( 2 , G_TYPE_STRING , G_TYPE_POINTER )
ASSIGN	134:4	134:12	11	model = gtk_list_store_new ( 2 , G_TYPE_STRING , G_TYPE_POINTER )
LVAL	134:4	134:4	12	model
FIELD	134:4	134:4	13	model
LEAF_NODE	134:4	134:4	14	model
ASSIGN_OP	134:10	134:10	12	=
LEAF_NODE	134:10	134:10	13	=
RVAL	134:12	134:12	12	gtk_list_store_new ( 2 , G_TYPE_STRING , G_TYPE_POINTER )
FUNCTION_CALL	134:12	134:63	13	gtk_list_store_new ( 2 , G_TYPE_STRING , G_TYPE_POINTER )
CALLEE	134:12	134:12	14	gtk_list_store_new
LEAF_NODE	134:12	134:12	15	gtk_list_store_new
LEAF_NODE	134:30	134:30	14	(
ARGUMENT	134:31	134:31	14	2
FIELD	134:31	134:31	15	2
LEAF_NODE	134:31	134:31	16	2
LEAF_NODE	134:32	134:32	14	,
ARGUMENT	134:34	134:34	14	G_TYPE_STRING
FIELD	134:34	134:34	15	G_TYPE_STRING
LEAF_NODE	134:34	134:34	16	G_TYPE_STRING
LEAF_NODE	134:47	134:47	14	,
ARGUMENT	134:49	134:49	14	G_TYPE_POINTER
FIELD	134:49	134:49	15	G_TYPE_POINTER
LEAF_NODE	134:49	134:49	16	G_TYPE_POINTER
LEAF_NODE	134:63	134:63	14	)
LEAF_NODE	134:64	134:64	10	;
EXPR_STATEMENT	135:4	135:83	9	opt_entry -> widget = combo = gtk_combo_box_new_with_model ( GTK_TREE_MODEL ( model ) ) ;
EXPR	135:4	135:4	10	opt_entry -> widget = combo = gtk_combo_box_new_with_model ( GTK_TREE_MODEL ( model ) )
ASSIGN	135:4	135:24	11	opt_entry -> widget = combo = gtk_combo_box_new_with_model ( GTK_TREE_MODEL ( model ) )
LVAL	135:4	135:4	12	opt_entry -> widget
FIELD	135:4	135:15	13	opt_entry -> widget
LEAF_NODE	135:4	135:4	14	opt_entry
LEAF_NODE	135:13	135:13	14	->
LEAF_NODE	135:15	135:15	14	widget
ASSIGN_OP	135:22	135:22	12	=
LEAF_NODE	135:22	135:22	13	=
RVAL	135:24	135:24	12	combo = gtk_combo_box_new_with_model ( GTK_TREE_MODEL ( model ) )
ASSIGN	135:24	135:32	13	combo = gtk_combo_box_new_with_model ( GTK_TREE_MODEL ( model ) )
LVAL	135:24	135:24	14	combo
FIELD	135:24	135:24	15	combo
LEAF_NODE	135:24	135:24	16	combo
ASSIGN_OP	135:30	135:30	14	=
LEAF_NODE	135:30	135:30	15	=
RVAL	135:32	135:32	14	gtk_combo_box_new_with_model ( GTK_TREE_MODEL ( model ) )
FUNCTION_CALL	135:32	135:82	15	gtk_combo_box_new_with_model ( GTK_TREE_MODEL ( model ) )
CALLEE	135:32	135:32	16	gtk_combo_box_new_with_model
LEAF_NODE	135:32	135:32	17	gtk_combo_box_new_with_model
LEAF_NODE	135:60	135:60	16	(
ARGUMENT	135:61	135:61	16	GTK_TREE_MODEL ( model )
FUNCTION_CALL	135:61	135:81	17	GTK_TREE_MODEL ( model )
CALLEE	135:61	135:61	18	GTK_TREE_MODEL
LEAF_NODE	135:61	135:61	19	GTK_TREE_MODEL
LEAF_NODE	135:75	135:75	18	(
ARGUMENT	135:76	135:76	18	model
FIELD	135:76	135:76	19	model
LEAF_NODE	135:76	135:76	20	model
LEAF_NODE	135:81	135:81	18	)
LEAF_NODE	135:82	135:82	16	)
LEAF_NODE	135:83	135:83	10	;
ITERATION	137:4	137:55	9	
KEYWORD	137:4	137:4	10	for
LEAF_NODE	137:4	137:4	11	for
LEAF_NODE	137:8	137:8	10	(
FOR_INIT	137:9	137:20	10	node = list ;
EXPR	137:9	137:9	11	node = list
ASSIGN	137:9	137:16	12	node = list
LVAL	137:9	137:9	13	node
FIELD	137:9	137:9	14	node
LEAF_NODE	137:9	137:9	15	node
ASSIGN_OP	137:14	137:14	13	=
LEAF_NODE	137:14	137:14	14	=
RVAL	137:16	137:16	13	list
FIELD	137:16	137:16	14	list
LEAF_NODE	137:16	137:16	15	list
LEAF_NODE	137:20	137:20	11	;
CONDITION	137:22	137:22	10	node != NULL
EXPR	137:22	137:30	11	node != NULL
FIELD	137:22	137:22	12	node
LEAF_NODE	137:22	137:22	13	node
EQ_OPERATOR	137:27	137:27	12	!=
LEAF_NODE	137:27	137:27	13	!=
FIELD	137:30	137:30	12	NULL
LEAF_NODE	137:30	137:30	13	NULL
LEAF_NODE	137:34	137:34	10	;
FOR_EXPR	137:36	137:36	10	node = node -> next
EXPR	137:36	137:36	11	node = node -> next
ASSIGN	137:36	137:43	12	node = node -> next
LVAL	137:36	137:36	13	node
FIELD	137:36	137:36	14	node
LEAF_NODE	137:36	137:36	15	node
ASSIGN_OP	137:41	137:41	13	=
LEAF_NODE	137:41	137:41	14	=
RVAL	137:43	137:43	13	node -> next
FIELD	137:43	137:49	14	node -> next
LEAF_NODE	137:43	137:43	15	node
LEAF_NODE	137:47	137:47	15	->
LEAF_NODE	137:49	137:49	15	next
LEAF_NODE	137:53	137:53	10	)
STATEMENTS	137:55	150:4	10	
LEAF_NODE	137:55	137:55	11	{
STATEMENTS	138:5	149:5	11	
SELECTION	138:5	138:29	12	
KEYWORD	138:5	138:5	13	if
LEAF_NODE	138:5	138:5	14	if
LEAF_NODE	138:8	138:8	13	(
CONDITION	138:9	138:9	13	node -> data != NULL
EXPR	138:9	138:23	14	node -> data != NULL
FIELD	138:9	138:15	15	node -> data
LEAF_NODE	138:9	138:9	16	node
LEAF_NODE	138:13	138:13	16	->
LEAF_NODE	138:15	138:15	16	data
EQ_OPERATOR	138:20	138:20	15	!=
LEAF_NODE	138:20	138:20	16	!=
FIELD	138:23	138:23	15	NULL
LEAF_NODE	138:23	138:23	16	NULL
LEAF_NODE	138:27	138:27	13	)
STATEMENTS	138:29	148:5	13	
LEAF_NODE	138:29	138:29	14	{
STATEMENTS	139:6	144:6	14	
EXPR_STATEMENT	139:6	139:45	15	kvp = ( PurpleKeyValuePair * ) node -> data ;
EXPR	139:6	139:6	16	kvp = ( PurpleKeyValuePair * ) node -> data
ASSIGN	139:6	139:12	17	kvp = ( PurpleKeyValuePair * ) node -> data
LVAL	139:6	139:6	18	kvp
FIELD	139:6	139:6	19	kvp
LEAF_NODE	139:6	139:6	20	kvp
ASSIGN_OP	139:10	139:10	18	=
LEAF_NODE	139:10	139:10	19	=
RVAL	139:12	139:35	18	( PurpleKeyValuePair * ) node -> data
LEAF_NODE	139:12	139:12	19	(
TYPE_NAME	139:13	139:13	19	PurpleKeyValuePair
LEAF_NODE	139:13	139:13	20	PurpleKeyValuePair
LEAF_NODE	139:32	139:32	19	*
LEAF_NODE	139:33	139:33	19	)
FIELD	139:35	139:41	19	node -> data
LEAF_NODE	139:35	139:35	20	node
LEAF_NODE	139:39	139:39	20	->
LEAF_NODE	139:41	139:41	20	data
LEAF_NODE	139:45	139:45	16	;
SELECTION	140:6	142:7	15	
KEYWORD	140:6	140:6	16	if
LEAF_NODE	140:6	140:6	17	if
LEAF_NODE	140:9	140:9	16	(
CONDITION	140:10	140:10	16	( kvp -> value != NULL ) && ( str_value != NULL ) && ! g_utf8_collate ( kvp -> value , str_value )
EXPR	140:10	140:10	17	( kvp -> value != NULL ) && ( str_value != NULL ) && ! g_utf8_collate ( kvp -> value , str_value )
AND	140:10	140:34	18	( kvp -> value != NULL ) && ( str_value != NULL ) && ! g_utf8_collate ( kvp -> value , str_value )
EXPR	140:10	140:29	19	( kvp -> value != NULL )
LEAF_NODE	140:10	140:10	20	(
FIELD	140:11	140:16	20	kvp -> value
LEAF_NODE	140:11	140:11	21	kvp
LEAF_NODE	140:14	140:14	21	->
LEAF_NODE	140:16	140:16	21	value
EQ_OPERATOR	140:22	140:22	20	!=
LEAF_NODE	140:22	140:22	21	!=
FIELD	140:25	140:25	20	NULL
LEAF_NODE	140:25	140:25	21	NULL
LEAF_NODE	140:29	140:29	20	)
LEAF_NODE	140:31	140:31	19	&&
EXPR	140:34	140:34	19	( str_value != NULL ) && ! g_utf8_collate ( kvp -> value , str_value )
AND	140:34	141:10	20	( str_value != NULL ) && ! g_utf8_collate ( kvp -> value , str_value )
EXPR	140:34	140:52	21	( str_value != NULL )
LEAF_NODE	140:34	140:34	22	(
FIELD	140:35	140:35	22	str_value
LEAF_NODE	140:35	140:35	23	str_value
EQ_OPERATOR	140:45	140:45	22	!=
LEAF_NODE	140:45	140:45	23	!=
FIELD	140:48	140:48	22	NULL
LEAF_NODE	140:48	140:48	23	NULL
LEAF_NODE	140:52	140:52	22	)
LEAF_NODE	140:54	140:54	21	&&
EXPR	141:10	141:10	21	! g_utf8_collate ( kvp -> value , str_value )
UNARY_EXPR	141:10	141:11	22	! g_utf8_collate ( kvp -> value , str_value )
UNARY_OPERATOR	141:10	141:10	23	!
LEAF_NODE	141:10	141:10	24	!
FUNCTION_CALL	141:11	141:47	23	g_utf8_collate ( kvp -> value , str_value )
CALLEE	141:11	141:11	24	g_utf8_collate
LEAF_NODE	141:11	141:11	25	g_utf8_collate
LEAF_NODE	141:25	141:25	24	(
ARGUMENT	141:26	141:26	24	kvp -> value
FIELD	141:26	141:31	25	kvp -> value
LEAF_NODE	141:26	141:26	26	kvp
LEAF_NODE	141:29	141:29	26	->
LEAF_NODE	141:31	141:31	26	value
LEAF_NODE	141:36	141:36	24	,
ARGUMENT	141:38	141:38	24	str_value
FIELD	141:38	141:38	25	str_value
LEAF_NODE	141:38	141:38	26	str_value
LEAF_NODE	141:47	141:47	24	)
LEAF_NODE	141:48	141:48	16	)
STATEMENTS	142:7	142:7	16	
EXPR_STATEMENT	142:7	142:14	17	idx = i ;
EXPR	142:7	142:7	18	idx = i
ASSIGN	142:7	142:13	19	idx = i
LVAL	142:7	142:7	20	idx
FIELD	142:7	142:7	21	idx
LEAF_NODE	142:7	142:7	22	idx
ASSIGN_OP	142:11	142:11	20	=
LEAF_NODE	142:11	142:11	21	=
RVAL	142:13	142:13	20	i
FIELD	142:13	142:13	21	i
LEAF_NODE	142:13	142:13	22	i
LEAF_NODE	142:14	142:14	18	;
EXPR_STATEMENT	143:6	143:41	15	gtk_list_store_append ( model , & iter ) ;
EXPR	143:6	143:6	16	gtk_list_store_append ( model , & iter )
FUNCTION_CALL	143:6	143:40	17	gtk_list_store_append ( model , & iter )
CALLEE	143:6	143:6	18	gtk_list_store_append
LEAF_NODE	143:6	143:6	19	gtk_list_store_append
LEAF_NODE	143:27	143:27	18	(
ARGUMENT	143:28	143:28	18	model
FIELD	143:28	143:28	19	model
LEAF_NODE	143:28	143:28	20	model
LEAF_NODE	143:33	143:33	18	,
ARGUMENT	143:35	143:35	18	& iter
UNARY_EXPR	143:35	143:36	19	& iter
UNARY_OPERATOR	143:35	143:35	20	&
LEAF_NODE	143:35	143:35	21	&
FIELD	143:36	143:36	20	iter
LEAF_NODE	143:36	143:36	21	iter
LEAF_NODE	143:40	143:40	18	)
LEAF_NODE	143:41	143:41	16	;
EXPR_STATEMENT	144:6	147:11	15	gtk_list_store_set ( model , & iter , 0 , kvp -> key , 1 , kvp -> value , - 1 ) ;
EXPR	144:6	144:6	16	gtk_list_store_set ( model , & iter , 0 , kvp -> key , 1 , kvp -> value , - 1 )
FUNCTION_CALL	144:6	147:10	17	gtk_list_store_set ( model , & iter , 0 , kvp -> key , 1 , kvp -> value , - 1 )
CALLEE	144:6	144:6	18	gtk_list_store_set
LEAF_NODE	144:6	144:6	19	gtk_list_store_set
LEAF_NODE	144:24	144:24	18	(
ARGUMENT	144:25	144:25	18	model
FIELD	144:25	144:25	19	model
LEAF_NODE	144:25	144:25	20	model
LEAF_NODE	144:30	144:30	18	,
ARGUMENT	144:32	144:32	18	& iter
UNARY_EXPR	144:32	144:33	19	& iter
UNARY_OPERATOR	144:32	144:32	20	&
LEAF_NODE	144:32	144:32	21	&
FIELD	144:33	144:33	20	iter
LEAF_NODE	144:33	144:33	21	iter
LEAF_NODE	144:37	144:37	18	,
ARGUMENT	145:8	145:8	18	0
FIELD	145:8	145:8	19	0
LEAF_NODE	145:8	145:8	20	0
LEAF_NODE	145:9	145:9	18	,
ARGUMENT	145:11	145:11	18	kvp -> key
FIELD	145:11	145:16	19	kvp -> key
LEAF_NODE	145:11	145:11	20	kvp
LEAF_NODE	145:14	145:14	20	->
LEAF_NODE	145:16	145:16	20	key
LEAF_NODE	145:19	145:19	18	,
ARGUMENT	146:8	146:8	18	1
FIELD	146:8	146:8	19	1
LEAF_NODE	146:8	146:8	20	1
LEAF_NODE	146:9	146:9	18	,
ARGUMENT	146:11	146:11	18	kvp -> value
FIELD	146:11	146:16	19	kvp -> value
LEAF_NODE	146:11	146:11	20	kvp
LEAF_NODE	146:14	146:14	20	->
LEAF_NODE	146:16	146:16	20	value
LEAF_NODE	146:21	146:21	18	,
ARGUMENT	147:8	147:8	18	- 1
UNARY_EXPR	147:8	147:9	19	- 1
UNARY_OPERATOR	147:8	147:8	20	-
LEAF_NODE	147:8	147:8	21	-
FIELD	147:9	147:9	20	1
LEAF_NODE	147:9	147:9	21	1
LEAF_NODE	147:10	147:10	18	)
LEAF_NODE	147:11	147:11	16	;
LEAF_NODE	148:5	148:5	14	}
EXPR_STATEMENT	149:5	149:8	12	i ++ ;
EXPR	149:5	149:5	13	i ++
FIELD	149:5	149:6	14	i ++
LEAF_NODE	149:5	149:5	15	i
LEAF_NODE	149:6	149:6	15	++
LEAF_NODE	149:8	149:8	13	;
LEAF_NODE	150:4	150:4	11	}
EXPR_STATEMENT	152:4	152:55	9	gtk_combo_box_set_active ( GTK_COMBO_BOX ( combo ) , idx ) ;
EXPR	152:4	152:4	10	gtk_combo_box_set_active ( GTK_COMBO_BOX ( combo ) , idx )
FUNCTION_CALL	152:4	152:54	11	gtk_combo_box_set_active ( GTK_COMBO_BOX ( combo ) , idx )
CALLEE	152:4	152:4	12	gtk_combo_box_set_active
LEAF_NODE	152:4	152:4	13	gtk_combo_box_set_active
LEAF_NODE	152:28	152:28	12	(
ARGUMENT	152:29	152:29	12	GTK_COMBO_BOX ( combo )
FUNCTION_CALL	152:29	152:48	13	GTK_COMBO_BOX ( combo )
CALLEE	152:29	152:29	14	GTK_COMBO_BOX
LEAF_NODE	152:29	152:29	15	GTK_COMBO_BOX
LEAF_NODE	152:42	152:42	14	(
ARGUMENT	152:43	152:43	14	combo
FIELD	152:43	152:43	15	combo
LEAF_NODE	152:43	152:43	16	combo
LEAF_NODE	152:48	152:48	14	)
LEAF_NODE	152:49	152:49	12	,
ARGUMENT	152:51	152:51	12	idx
FIELD	152:51	152:51	13	idx
LEAF_NODE	152:51	152:51	14	idx
LEAF_NODE	152:54	152:54	12	)
LEAF_NODE	152:55	152:55	10	;
EXPR_STATEMENT	154:4	154:43	9	renderer = gtk_cell_renderer_text_new ( ) ;
EXPR	154:4	154:4	10	renderer = gtk_cell_renderer_text_new ( )
ASSIGN	154:4	154:15	11	renderer = gtk_cell_renderer_text_new ( )
LVAL	154:4	154:4	12	renderer
FIELD	154:4	154:4	13	renderer
LEAF_NODE	154:4	154:4	14	renderer
ASSIGN_OP	154:13	154:13	12	=
LEAF_NODE	154:13	154:13	13	=
RVAL	154:15	154:15	12	gtk_cell_renderer_text_new ( )
FUNCTION_CALL	154:15	154:42	13	gtk_cell_renderer_text_new ( )
CALLEE	154:15	154:15	14	gtk_cell_renderer_text_new
LEAF_NODE	154:15	154:15	15	gtk_cell_renderer_text_new
LEAF_NODE	154:41	154:41	14	(
LEAF_NODE	154:42	154:42	14	)
LEAF_NODE	154:43	154:43	10	;
EXPR_STATEMENT	155:4	156:11	9	gtk_cell_layout_pack_start ( GTK_CELL_LAYOUT ( combo ) , renderer , TRUE ) ;
EXPR	155:4	155:4	10	gtk_cell_layout_pack_start ( GTK_CELL_LAYOUT ( combo ) , renderer , TRUE )
FUNCTION_CALL	155:4	156:10	11	gtk_cell_layout_pack_start ( GTK_CELL_LAYOUT ( combo ) , renderer , TRUE )
CALLEE	155:4	155:4	12	gtk_cell_layout_pack_start
LEAF_NODE	155:4	155:4	13	gtk_cell_layout_pack_start
LEAF_NODE	155:30	155:30	12	(
ARGUMENT	155:31	155:31	12	GTK_CELL_LAYOUT ( combo )
FUNCTION_CALL	155:31	155:52	13	GTK_CELL_LAYOUT ( combo )
CALLEE	155:31	155:31	14	GTK_CELL_LAYOUT
LEAF_NODE	155:31	155:31	15	GTK_CELL_LAYOUT
LEAF_NODE	155:46	155:46	14	(
ARGUMENT	155:47	155:47	14	combo
FIELD	155:47	155:47	15	combo
LEAF_NODE	155:47	155:47	16	combo
LEAF_NODE	155:52	155:52	14	)
LEAF_NODE	155:53	155:53	12	,
ARGUMENT	155:55	155:55	12	renderer
FIELD	155:55	155:55	13	renderer
LEAF_NODE	155:55	155:55	14	renderer
LEAF_NODE	155:63	155:63	12	,
ARGUMENT	156:6	156:6	12	TRUE
FIELD	156:6	156:6	13	TRUE
LEAF_NODE	156:6	156:6	14	TRUE
LEAF_NODE	156:10	156:10	12	)
LEAF_NODE	156:11	156:11	10	;
EXPR_STATEMENT	157:4	158:32	9	gtk_cell_layout_set_attributes ( GTK_CELL_LAYOUT ( combo ) , renderer , "text" , 0 , NULL ) ;
EXPR	157:4	157:4	10	gtk_cell_layout_set_attributes ( GTK_CELL_LAYOUT ( combo ) , renderer , "text" , 0 , NULL )
FUNCTION_CALL	157:4	158:31	11	gtk_cell_layout_set_attributes ( GTK_CELL_LAYOUT ( combo ) , renderer , "text" , 0 , NULL )
CALLEE	157:4	157:4	12	gtk_cell_layout_set_attributes
LEAF_NODE	157:4	157:4	13	gtk_cell_layout_set_attributes
LEAF_NODE	157:34	157:34	12	(
ARGUMENT	157:35	157:35	12	GTK_CELL_LAYOUT ( combo )
FUNCTION_CALL	157:35	157:56	13	GTK_CELL_LAYOUT ( combo )
CALLEE	157:35	157:35	14	GTK_CELL_LAYOUT
LEAF_NODE	157:35	157:35	15	GTK_CELL_LAYOUT
LEAF_NODE	157:50	157:50	14	(
ARGUMENT	157:51	157:51	14	combo
FIELD	157:51	157:51	15	combo
LEAF_NODE	157:51	157:51	16	combo
LEAF_NODE	157:56	157:56	14	)
LEAF_NODE	157:57	157:57	12	,
ARGUMENT	158:6	158:6	12	renderer
FIELD	158:6	158:6	13	renderer
LEAF_NODE	158:6	158:6	14	renderer
LEAF_NODE	158:14	158:14	12	,
ARGUMENT	158:16	158:16	12	"text"
FIELD	158:16	158:16	13	"text"
LEAF_NODE	158:16	158:16	14	"text"
LEAF_NODE	158:22	158:22	12	,
ARGUMENT	158:24	158:24	12	0
FIELD	158:24	158:24	13	0
LEAF_NODE	158:24	158:24	14	0
LEAF_NODE	158:25	158:25	12	,
ARGUMENT	158:27	158:27	12	NULL
FIELD	158:27	158:27	13	NULL
LEAF_NODE	158:27	158:27	14	NULL
LEAF_NODE	158:31	158:31	12	)
LEAF_NODE	158:32	158:32	10	;
EXPR_STATEMENT	159:4	160:45	9	title = g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) ) ;
EXPR	159:4	159:4	10	title = g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
ASSIGN	159:4	159:12	11	title = g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
LVAL	159:4	159:4	12	title
FIELD	159:4	159:4	13	title
LEAF_NODE	159:4	159:4	14	title
ASSIGN_OP	159:10	159:10	12	=
LEAF_NODE	159:10	159:10	13	=
RVAL	159:12	159:12	12	g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
FUNCTION_CALL	159:12	160:44	13	g_strdup_printf ( "_%s:" , purple_account_option_get_text ( option ) )
CALLEE	159:12	159:12	14	g_strdup_printf
LEAF_NODE	159:12	159:12	15	g_strdup_printf
LEAF_NODE	159:27	159:27	14	(
ARGUMENT	159:28	159:28	14	"_%s:"
FIELD	159:28	159:28	15	"_%s:"
LEAF_NODE	159:28	159:28	16	"_%s:"
LEAF_NODE	159:34	159:34	14	,
ARGUMENT	160:6	160:6	14	purple_account_option_get_text ( option )
FUNCTION_CALL	160:6	160:43	15	purple_account_option_get_text ( option )
CALLEE	160:6	160:6	16	purple_account_option_get_text
LEAF_NODE	160:6	160:6	17	purple_account_option_get_text
LEAF_NODE	160:36	160:36	16	(
ARGUMENT	160:37	160:37	16	option
FIELD	160:37	160:37	17	option
LEAF_NODE	160:37	160:37	18	option
LEAF_NODE	160:43	160:43	16	)
LEAF_NODE	160:44	160:44	14	)
LEAF_NODE	160:45	160:45	10	;
EXPR_STATEMENT	161:4	161:44	9	add_pref_box ( dialog , vbox , title , combo ) ;
EXPR	161:4	161:4	10	add_pref_box ( dialog , vbox , title , combo )
FUNCTION_CALL	161:4	161:43	11	add_pref_box ( dialog , vbox , title , combo )
CALLEE	161:4	161:4	12	add_pref_box
LEAF_NODE	161:4	161:4	13	add_pref_box
LEAF_NODE	161:16	161:16	12	(
ARGUMENT	161:17	161:17	12	dialog
FIELD	161:17	161:17	13	dialog
LEAF_NODE	161:17	161:17	14	dialog
LEAF_NODE	161:23	161:23	12	,
ARGUMENT	161:25	161:25	12	vbox
FIELD	161:25	161:25	13	vbox
LEAF_NODE	161:25	161:25	14	vbox
LEAF_NODE	161:29	161:29	12	,
ARGUMENT	161:31	161:31	12	title
FIELD	161:31	161:31	13	title
LEAF_NODE	161:31	161:31	14	title
LEAF_NODE	161:36	161:36	12	,
ARGUMENT	161:38	161:38	12	combo
FIELD	161:38	161:38	13	combo
LEAF_NODE	161:38	161:38	14	combo
LEAF_NODE	161:43	161:43	12	)
LEAF_NODE	161:44	161:44	10	;
EXPR_STATEMENT	162:4	162:17	9	g_free ( title ) ;
EXPR	162:4	162:4	10	g_free ( title )
FUNCTION_CALL	162:4	162:16	11	g_free ( title )
CALLEE	162:4	162:4	12	g_free
LEAF_NODE	162:4	162:4	13	g_free
LEAF_NODE	162:10	162:10	12	(
ARGUMENT	162:11	162:11	12	title
FIELD	162:11	162:11	13	title
LEAF_NODE	162:11	162:11	14	title
LEAF_NODE	162:16	162:16	12	)
LEAF_NODE	162:17	162:17	10	;
JUMP_STATEMENT	163:4	163:9	9	break DESTINATION ;
KEYWORD	163:4	163:4	10	break
LEAF_NODE	163:4	163:4	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	163:9	163:9	10	;
LABEL	164:3	164:10	9	default :
LEAF_NODE	164:3	164:3	10	default
LEAF_NODE	164:10	164:10	10	:
EXPR_STATEMENT	165:4	166:25	9	purple_debug_error ( "gtkaccount" , "Invalid Account Option pref type (%d)\n" , opt_entry -> type ) ;
EXPR	165:4	165:4	10	purple_debug_error ( "gtkaccount" , "Invalid Account Option pref type (%d)\n" , opt_entry -> type )
FUNCTION_CALL	165:4	166:24	11	purple_debug_error ( "gtkaccount" , "Invalid Account Option pref type (%d)\n" , opt_entry -> type )
CALLEE	165:4	165:4	12	purple_debug_error
LEAF_NODE	165:4	165:4	13	purple_debug_error
LEAF_NODE	165:22	165:22	12	(
ARGUMENT	165:23	165:23	12	"gtkaccount"
FIELD	165:23	165:23	13	"gtkaccount"
LEAF_NODE	165:23	165:23	14	"gtkaccount"
LEAF_NODE	165:35	165:35	12	,
ARGUMENT	165:37	165:37	12	"Invalid Account Option pref type (%d)\n"
FIELD	165:37	165:37	13	"Invalid Account Option pref type (%d)\n"
LEAF_NODE	165:37	165:37	14	"Invalid Account Option pref type (%d)\n"
LEAF_NODE	165:78	165:78	12	,
ARGUMENT	166:9	166:9	12	opt_entry -> type
FIELD	166:9	166:20	13	opt_entry -> type
LEAF_NODE	166:9	166:9	14	opt_entry
LEAF_NODE	166:18	166:18	14	->
LEAF_NODE	166:20	166:20	14	type
LEAF_NODE	166:24	166:24	12	)
LEAF_NODE	166:25	166:25	10	;
EXPR_STATEMENT	167:4	167:30	9	g_free ( opt_entry -> setting ) ;
EXPR	167:4	167:4	10	g_free ( opt_entry -> setting )
FUNCTION_CALL	167:4	167:29	11	g_free ( opt_entry -> setting )
CALLEE	167:4	167:4	12	g_free
LEAF_NODE	167:4	167:4	13	g_free
LEAF_NODE	167:10	167:10	12	(
ARGUMENT	167:11	167:11	12	opt_entry -> setting
FIELD	167:11	167:22	13	opt_entry -> setting
LEAF_NODE	167:11	167:11	14	opt_entry
LEAF_NODE	167:20	167:20	14	->
LEAF_NODE	167:22	167:22	14	setting
LEAF_NODE	167:29	167:29	12	)
LEAF_NODE	167:30	167:30	10	;
EXPR_STATEMENT	168:4	168:21	9	g_free ( opt_entry ) ;
EXPR	168:4	168:4	10	g_free ( opt_entry )
FUNCTION_CALL	168:4	168:20	11	g_free ( opt_entry )
CALLEE	168:4	168:4	12	g_free
LEAF_NODE	168:4	168:4	13	g_free
LEAF_NODE	168:10	168:10	12	(
ARGUMENT	168:11	168:11	12	opt_entry
FIELD	168:11	168:11	13	opt_entry
LEAF_NODE	168:11	168:11	14	opt_entry
LEAF_NODE	168:20	168:20	12	)
LEAF_NODE	168:21	168:21	10	;
JUMP_STATEMENT	169:4	169:12	9	continue DESTINATION ;
KEYWORD	169:4	169:4	10	continue
LEAF_NODE	169:4	169:4	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	169:12	169:12	10	;
LEAF_NODE	170:2	170:2	8	}
EXPR_STATEMENT	171:2	172:57	6	dialog -> protocol_opt_entries = g_list_append ( dialog -> protocol_opt_entries , opt_entry ) ;
EXPR	171:2	171:2	7	dialog -> protocol_opt_entries = g_list_append ( dialog -> protocol_opt_entries , opt_entry )
ASSIGN	171:2	172:3	8	dialog -> protocol_opt_entries = g_list_append ( dialog -> protocol_opt_entries , opt_entry )
LVAL	171:2	171:2	9	dialog -> protocol_opt_entries
FIELD	171:2	171:10	10	dialog -> protocol_opt_entries
LEAF_NODE	171:2	171:2	11	dialog
LEAF_NODE	171:8	171:8	11	->
LEAF_NODE	171:10	171:10	11	protocol_opt_entries
ASSIGN_OP	171:31	171:31	9	=
LEAF_NODE	171:31	171:31	10	=
RVAL	172:3	172:3	9	g_list_append ( dialog -> protocol_opt_entries , opt_entry )
FUNCTION_CALL	172:3	172:56	10	g_list_append ( dialog -> protocol_opt_entries , opt_entry )
CALLEE	172:3	172:3	11	g_list_append
LEAF_NODE	172:3	172:3	12	g_list_append
LEAF_NODE	172:16	172:16	11	(
ARGUMENT	172:17	172:17	11	dialog -> protocol_opt_entries
FIELD	172:17	172:25	12	dialog -> protocol_opt_entries
LEAF_NODE	172:17	172:17	13	dialog
LEAF_NODE	172:23	172:23	13	->
LEAF_NODE	172:25	172:25	13	protocol_opt_entries
LEAF_NODE	172:45	172:45	11	,
ARGUMENT	172:47	172:47	11	opt_entry
FIELD	172:47	172:47	12	opt_entry
LEAF_NODE	172:47	172:47	13	opt_entry
LEAF_NODE	172:56	172:56	11	)
LEAF_NODE	172:57	172:57	7	;
LEAF_NODE	173:1	173:1	5	}
LEAF_NODE	174:0	174:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	add_custom_action
LEAF_NODE	2:0	2:0	3	add_custom_action
PARAMETER_LIST	2:17	3:15	2	( GntMenu * menu , const char * label , PurpleCallback callback , gpointer data )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:27	3	GntMenu * menu
TYPE	2:18	2:26	4	GntMenu *
TYPE_NAME	2:18	2:18	5	GntMenu
LEAF_NODE	2:18	2:18	6	GntMenu
POINTER	2:26	2:26	5	*
LEAF_NODE	2:26	2:26	6	*
NAME	2:27	2:27	4	menu
LEAF_NODE	2:27	2:27	5	menu
LEAF_NODE	2:31	2:31	3	,
PARAMETER_DECL	2:33	2:45	3	const char * label
TYPE	2:33	2:44	4	const char *
TYPE_NAME	2:33	2:39	5	const char
LEAF_NODE	2:33	2:33	6	const
LEAF_NODE	2:39	2:39	6	char
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	label
LEAF_NODE	2:45	2:45	5	label
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:67	3	PurpleCallback callback
TYPE	2:52	2:52	4	PurpleCallback
TYPE_NAME	2:52	2:52	5	PurpleCallback
LEAF_NODE	2:52	2:52	6	PurpleCallback
NAME	2:67	2:67	4	callback
LEAF_NODE	2:67	2:67	5	callback
LEAF_NODE	2:75	2:75	3	,
PARAMETER_DECL	3:2	3:11	3	gpointer data
TYPE	3:2	3:2	4	gpointer
TYPE_NAME	3:2	3:2	5	gpointer
LEAF_NODE	3:2	3:2	6	gpointer
NAME	3:11	3:11	4	data
LEAF_NODE	3:11	3:11	5	data
LEAF_NODE	3:15	3:15	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	7:1	2	
SIMPLE_DECL	5:1	5:79	3	PurpleMenuAction * action ; action = purple_menu_action_new ( label , callback , data , NULL ) ;
VAR_DECL	5:1	5:19	4	PurpleMenuAction * action ; action = purple_menu_action_new ( label , callback , data , NULL )
TYPE	5:1	5:18	5	PurpleMenuAction *
TYPE_NAME	5:1	5:1	6	PurpleMenuAction
LEAF_NODE	5:1	5:1	7	PurpleMenuAction
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	action
LEAF_NODE	5:19	5:19	6	action
LEAF_NODE	0:0	0:0	5	;
INIT	5:19	5:19	5	action = purple_menu_action_new ( label , callback , data , NULL )
ASSIGN	5:19	5:28	6	action = purple_menu_action_new ( label , callback , data , NULL )
LVAL	5:19	5:19	7	action
NAME	5:19	5:19	8	action
LEAF_NODE	5:19	5:19	9	action
ASSIGN_OP	5:26	5:26	7	=
LEAF_NODE	5:26	5:26	8	=
RVAL	5:28	5:28	7	purple_menu_action_new ( label , callback , data , NULL )
FUNCTION_CALL	5:28	5:78	8	purple_menu_action_new ( label , callback , data , NULL )
CALLEE	5:28	5:28	9	purple_menu_action_new
LEAF_NODE	5:28	5:28	10	purple_menu_action_new
LEAF_NODE	5:50	5:50	9	(
ARGUMENT	5:51	5:51	9	label
FIELD	5:51	5:51	10	label
LEAF_NODE	5:51	5:51	11	label
LEAF_NODE	5:56	5:56	9	,
ARGUMENT	5:58	5:58	9	callback
FIELD	5:58	5:58	10	callback
LEAF_NODE	5:58	5:58	11	callback
LEAF_NODE	5:66	5:66	9	,
ARGUMENT	5:68	5:68	9	data
FIELD	5:68	5:68	10	data
LEAF_NODE	5:68	5:68	11	data
LEAF_NODE	5:72	5:72	9	,
ARGUMENT	5:74	5:74	9	NULL
FIELD	5:74	5:74	10	NULL
LEAF_NODE	5:74	5:74	11	NULL
LEAF_NODE	5:78	5:78	9	)
LEAF_NODE	5:79	5:79	4	;
EXPR_STATEMENT	6:1	6:43	3	gnt_append_menu_action ( menu , action , NULL ) ;
EXPR	6:1	6:1	4	gnt_append_menu_action ( menu , action , NULL )
FUNCTION_CALL	6:1	6:42	5	gnt_append_menu_action ( menu , action , NULL )
CALLEE	6:1	6:1	6	gnt_append_menu_action
LEAF_NODE	6:1	6:1	7	gnt_append_menu_action
LEAF_NODE	6:23	6:23	6	(
ARGUMENT	6:24	6:24	6	menu
FIELD	6:24	6:24	7	menu
LEAF_NODE	6:24	6:24	8	menu
LEAF_NODE	6:28	6:28	6	,
ARGUMENT	6:30	6:30	6	action
FIELD	6:30	6:30	7	action
LEAF_NODE	6:30	6:30	8	action
LEAF_NODE	6:36	6:36	6	,
ARGUMENT	6:38	6:38	6	NULL
FIELD	6:38	6:38	7	NULL
LEAF_NODE	6:38	6:38	8	NULL
LEAF_NODE	6:42	6:42	6	)
LEAF_NODE	6:43	6:43	4	;
EXPR_STATEMENT	7:1	8:47	3	g_signal_connect_swapped ( G_OBJECT ( menu ) , "destroy" , G_CALLBACK ( purple_menu_action_free ) , action ) ;
EXPR	7:1	7:1	4	g_signal_connect_swapped ( G_OBJECT ( menu ) , "destroy" , G_CALLBACK ( purple_menu_action_free ) , action )
FUNCTION_CALL	7:1	8:46	5	g_signal_connect_swapped ( G_OBJECT ( menu ) , "destroy" , G_CALLBACK ( purple_menu_action_free ) , action )
CALLEE	7:1	7:1	6	g_signal_connect_swapped
LEAF_NODE	7:1	7:1	7	g_signal_connect_swapped
LEAF_NODE	7:25	7:25	6	(
ARGUMENT	7:26	7:26	6	G_OBJECT ( menu )
FUNCTION_CALL	7:26	7:39	7	G_OBJECT ( menu )
CALLEE	7:26	7:26	8	G_OBJECT
LEAF_NODE	7:26	7:26	9	G_OBJECT
LEAF_NODE	7:34	7:34	8	(
ARGUMENT	7:35	7:35	8	menu
FIELD	7:35	7:35	9	menu
LEAF_NODE	7:35	7:35	10	menu
LEAF_NODE	7:39	7:39	8	)
LEAF_NODE	7:40	7:40	6	,
ARGUMENT	7:42	7:42	6	"destroy"
FIELD	7:42	7:42	7	"destroy"
LEAF_NODE	7:42	7:42	8	"destroy"
LEAF_NODE	7:51	7:51	6	,
ARGUMENT	8:3	8:3	6	G_CALLBACK ( purple_menu_action_free )
FUNCTION_CALL	8:3	8:37	7	G_CALLBACK ( purple_menu_action_free )
CALLEE	8:3	8:3	8	G_CALLBACK
LEAF_NODE	8:3	8:3	9	G_CALLBACK
LEAF_NODE	8:13	8:13	8	(
ARGUMENT	8:14	8:14	8	purple_menu_action_free
FIELD	8:14	8:14	9	purple_menu_action_free
LEAF_NODE	8:14	8:14	10	purple_menu_action_free
LEAF_NODE	8:37	8:37	8	)
LEAF_NODE	8:38	8:38	6	,
ARGUMENT	8:40	8:40	6	action
FIELD	8:40	8:40	7	action
LEAF_NODE	8:40	8:40	8	action
LEAF_NODE	8:46	8:46	6	)
LEAF_NODE	8:47	8:47	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	4:1	4:1	0	
SIMPLE_DECL	4:1	4:13	1	va_list args ;
VAR_DECL	4:1	4:9	2	va_list args
TYPE	4:1	4:1	3	va_list
TYPE_NAME	4:1	4:1	4	va_list
LEAF_NODE	4:1	4:1	5	va_list
NAME	4:9	4:9	3	args
LEAF_NODE	4:9	4:9	4	args
LEAF_NODE	4:13	4:13	2	;

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	9:0	1	
RETURN_TYPE	2:0	2:15	2	struct gg_dcc7 *
TYPE_NAME	2:0	2:7	3	struct gg_dcc7
LEAF_NODE	2:0	2:0	4	struct
LEAF_NODE	2:7	2:7	4	gg_dcc7
LEAF_NODE	2:15	2:15	3	*
FUNCTION_NAME	2:16	2:16	2	gg_dcc7_send_file_fd
LEAF_NODE	2:16	2:16	3	gg_dcc7_send_file_fd
PARAMETER_LIST	2:36	3:64	2	( struct gg_session * sess , uin_t rcpt , int fd , size_t size , const char * filename1250 , const char * hash )
LEAF_NODE	2:36	2:36	3	(
PARAMETER_DECL	2:37	2:56	3	struct gg_session * sess
TYPE	2:37	2:55	4	struct gg_session *
TYPE_NAME	2:37	2:44	5	struct gg_session
LEAF_NODE	2:37	2:37	6	struct
LEAF_NODE	2:44	2:44	6	gg_session
POINTER	2:55	2:55	5	*
LEAF_NODE	2:55	2:55	6	*
NAME	2:56	2:56	4	sess
LEAF_NODE	2:56	2:56	5	sess
LEAF_NODE	2:60	2:60	3	,
PARAMETER_DECL	2:62	2:68	3	uin_t rcpt
TYPE	2:62	2:62	4	uin_t
TYPE_NAME	2:62	2:62	5	uin_t
LEAF_NODE	2:62	2:62	6	uin_t
NAME	2:68	2:68	4	rcpt
LEAF_NODE	2:68	2:68	5	rcpt
LEAF_NODE	2:72	2:72	3	,
PARAMETER_DECL	3:1	3:5	3	int fd
TYPE	3:1	3:1	4	int
TYPE_NAME	3:1	3:1	5	int
LEAF_NODE	3:1	3:1	6	int
NAME	3:5	3:5	4	fd
LEAF_NODE	3:5	3:5	5	fd
LEAF_NODE	3:7	3:7	3	,
PARAMETER_DECL	3:9	3:16	3	size_t size
TYPE	3:9	3:9	4	size_t
TYPE_NAME	3:9	3:9	5	size_t
LEAF_NODE	3:9	3:9	6	size_t
NAME	3:16	3:16	4	size
LEAF_NODE	3:16	3:16	5	size
LEAF_NODE	3:20	3:20	3	,
PARAMETER_DECL	3:22	3:34	3	const char * filename1250
TYPE	3:22	3:33	4	const char *
TYPE_NAME	3:22	3:28	5	const char
LEAF_NODE	3:22	3:22	6	const
LEAF_NODE	3:28	3:28	6	char
POINTER	3:33	3:33	5	*
LEAF_NODE	3:33	3:33	6	*
NAME	3:34	3:34	4	filename1250
LEAF_NODE	3:34	3:34	5	filename1250
LEAF_NODE	3:46	3:46	3	,
PARAMETER_DECL	3:48	3:60	3	const char * hash
TYPE	3:48	3:59	4	const char *
TYPE_NAME	3:48	3:54	5	const char
LEAF_NODE	3:48	3:48	6	const
LEAF_NODE	3:54	3:54	6	char
POINTER	3:59	3:59	5	*
LEAF_NODE	3:59	3:59	6	*
NAME	3:60	3:60	4	hash
LEAF_NODE	3:60	3:60	5	hash
LEAF_NODE	3:64	3:64	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	8:1	2	
LEAF_NODE	5:1	5:1	3	gg_debug_session
LEAF_NODE	5:17	5:17	3	(
LEAF_NODE	5:18	5:18	3	sess
LEAF_NODE	5:22	5:22	3	,
LEAF_NODE	5:24	5:24	3	GG_DEBUG_FUNCTION
LEAF_NODE	5:41	5:41	3	,
LEAF_NODE	5:43	5:43	3	"** gg_dcc7_send_file_fd(%p, "
LEAF_NODE	6:2	6:2	3	"%d, %d, %"
LEAF_NODE	6:14	6:14	3	GG_SIZE_FMT
LEAF_NODE	6:26	6:26	3	", \"%s\", %p)\n"
LEAF_NODE	6:43	6:43	3	,
LEAF_NODE	7:2	7:2	3	sess
LEAF_NODE	7:6	7:6	3	,
LEAF_NODE	7:8	7:8	3	rcpt
LEAF_NODE	7:12	7:12	3	,
LEAF_NODE	7:14	7:14	3	fd
LEAF_NODE	7:16	7:16	3	,
LEAF_NODE	7:18	7:18	3	size
LEAF_NODE	7:22	7:22	3	,
LEAF_NODE	7:24	7:24	3	filename1250
LEAF_NODE	7:36	7:36	3	,
LEAF_NODE	7:38	7:38	3	hash
LEAF_NODE	7:42	7:42	3	)
LEAF_NODE	7:43	7:43	3	;
JUMP_STATEMENT	8:1	8:77	3	return gg_dcc7_send_file_common ( sess , rcpt , fd , size , filename1250 , hash , 0 ) ;
KEYWORD	8:1	8:1	4	return
LEAF_NODE	8:1	8:1	5	return
DESTINATION	8:8	8:8	4	gg_dcc7_send_file_common ( sess , rcpt , fd , size , filename1250 , hash , 0 )
EXPR	8:8	8:8	5	gg_dcc7_send_file_common ( sess , rcpt , fd , size , filename1250 , hash , 0 )
FUNCTION_CALL	8:8	8:76	6	gg_dcc7_send_file_common ( sess , rcpt , fd , size , filename1250 , hash , 0 )
CALLEE	8:8	8:8	7	gg_dcc7_send_file_common
LEAF_NODE	8:8	8:8	8	gg_dcc7_send_file_common
LEAF_NODE	8:32	8:32	7	(
ARGUMENT	8:33	8:33	7	sess
FIELD	8:33	8:33	8	sess
LEAF_NODE	8:33	8:33	9	sess
LEAF_NODE	8:37	8:37	7	,
ARGUMENT	8:39	8:39	7	rcpt
FIELD	8:39	8:39	8	rcpt
LEAF_NODE	8:39	8:39	9	rcpt
LEAF_NODE	8:43	8:43	7	,
ARGUMENT	8:45	8:45	7	fd
FIELD	8:45	8:45	8	fd
LEAF_NODE	8:45	8:45	9	fd
LEAF_NODE	8:47	8:47	7	,
ARGUMENT	8:49	8:49	7	size
FIELD	8:49	8:49	8	size
LEAF_NODE	8:49	8:49	9	size
LEAF_NODE	8:53	8:53	7	,
ARGUMENT	8:55	8:55	7	filename1250
FIELD	8:55	8:55	8	filename1250
LEAF_NODE	8:55	8:55	9	filename1250
LEAF_NODE	8:67	8:67	7	,
ARGUMENT	8:69	8:69	7	hash
FIELD	8:69	8:69	8	hash
LEAF_NODE	8:69	8:69	9	hash
LEAF_NODE	8:73	8:73	7	,
ARGUMENT	8:75	8:75	7	0
FIELD	8:75	8:75	8	0
LEAF_NODE	8:75	8:75	9	0
LEAF_NODE	8:76	8:76	7	)
LEAF_NODE	8:77	8:77	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	12:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	jabber_unregister_account_cb
LEAF_NODE	2:12	2:12	3	jabber_unregister_account_cb
PARAMETER_LIST	2:40	2:57	2	( JabberStream * js )
LEAF_NODE	2:40	2:40	3	(
PARAMETER_DECL	2:41	2:55	3	JabberStream * js
TYPE	2:41	2:54	4	JabberStream *
TYPE_NAME	2:41	2:41	5	JabberStream
LEAF_NODE	2:41	2:41	6	JabberStream
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	js
LEAF_NODE	2:55	2:55	5	js
LEAF_NODE	2:57	2:57	3	)
LEAF_NODE	2:59	2:59	2	{
STATEMENTS	3:1	11:1	2	
SIMPLE_DECL	3:1	3:13	3	JabberIq * iq ;
VAR_DECL	3:1	3:11	4	JabberIq * iq
TYPE	3:1	3:10	5	JabberIq *
TYPE_NAME	3:1	3:1	6	JabberIq
LEAF_NODE	3:1	3:1	7	JabberIq
POINTER	3:10	3:10	6	*
LEAF_NODE	3:10	3:10	7	*
NAME	3:11	3:11	5	iq
LEAF_NODE	3:11	3:11	6	iq
LEAF_NODE	3:13	3:13	4	;
SIMPLE_DECL	4:1	4:15	3	xmlnode * query ;
VAR_DECL	4:1	4:10	4	xmlnode * query
TYPE	4:1	4:9	5	xmlnode *
TYPE_NAME	4:1	4:1	6	xmlnode
LEAF_NODE	4:1	4:1	7	xmlnode
POINTER	4:9	4:9	6	*
LEAF_NODE	4:9	4:9	7	*
NAME	4:10	4:10	5	query
LEAF_NODE	4:10	4:10	6	query
LEAF_NODE	4:15	4:15	4	;
EXPR_STATEMENT	5:1	5:37	3	g_return_if_fail ( js -> unregistration ) ;
EXPR	5:1	5:1	4	g_return_if_fail ( js -> unregistration )
FUNCTION_CALL	5:1	5:36	5	g_return_if_fail ( js -> unregistration )
CALLEE	5:1	5:1	6	g_return_if_fail
LEAF_NODE	5:1	5:1	7	g_return_if_fail
LEAF_NODE	5:17	5:17	6	(
ARGUMENT	5:18	5:18	6	js -> unregistration
FIELD	5:18	5:22	7	js -> unregistration
LEAF_NODE	5:18	5:18	8	js
LEAF_NODE	5:20	5:20	8	->
LEAF_NODE	5:22	5:22	8	unregistration
LEAF_NODE	5:36	5:36	6	)
LEAF_NODE	5:37	5:37	4	;
EXPR_STATEMENT	6:1	6:66	3	iq = jabber_iq_new_query ( js , JABBER_IQ_SET , "jabber:iq:register" ) ;
EXPR	6:1	6:1	4	iq = jabber_iq_new_query ( js , JABBER_IQ_SET , "jabber:iq:register" )
ASSIGN	6:1	6:6	5	iq = jabber_iq_new_query ( js , JABBER_IQ_SET , "jabber:iq:register" )
LVAL	6:1	6:1	6	iq
FIELD	6:1	6:1	7	iq
LEAF_NODE	6:1	6:1	8	iq
ASSIGN_OP	6:4	6:4	6	=
LEAF_NODE	6:4	6:4	7	=
RVAL	6:6	6:6	6	jabber_iq_new_query ( js , JABBER_IQ_SET , "jabber:iq:register" )
FUNCTION_CALL	6:6	6:65	7	jabber_iq_new_query ( js , JABBER_IQ_SET , "jabber:iq:register" )
CALLEE	6:6	6:6	8	jabber_iq_new_query
LEAF_NODE	6:6	6:6	9	jabber_iq_new_query
LEAF_NODE	6:25	6:25	8	(
ARGUMENT	6:26	6:26	8	js
FIELD	6:26	6:26	9	js
LEAF_NODE	6:26	6:26	10	js
LEAF_NODE	6:28	6:28	8	,
ARGUMENT	6:30	6:30	8	JABBER_IQ_SET
FIELD	6:30	6:30	9	JABBER_IQ_SET
LEAF_NODE	6:30	6:30	10	JABBER_IQ_SET
LEAF_NODE	6:43	6:43	8	,
ARGUMENT	6:45	6:45	8	"jabber:iq:register"
FIELD	6:45	6:45	9	"jabber:iq:register"
LEAF_NODE	6:45	6:45	10	"jabber:iq:register"
LEAF_NODE	6:65	6:65	8	)
LEAF_NODE	6:66	6:66	4	;
EXPR_STATEMENT	7:1	7:82	3	query = xmlnode_get_child_with_namespace ( iq -> node , "query" , "jabber:iq:register" ) ;
EXPR	7:1	7:1	4	query = xmlnode_get_child_with_namespace ( iq -> node , "query" , "jabber:iq:register" )
ASSIGN	7:1	7:9	5	query = xmlnode_get_child_with_namespace ( iq -> node , "query" , "jabber:iq:register" )
LVAL	7:1	7:1	6	query
FIELD	7:1	7:1	7	query
LEAF_NODE	7:1	7:1	8	query
ASSIGN_OP	7:7	7:7	6	=
LEAF_NODE	7:7	7:7	7	=
RVAL	7:9	7:9	6	xmlnode_get_child_with_namespace ( iq -> node , "query" , "jabber:iq:register" )
FUNCTION_CALL	7:9	7:81	7	xmlnode_get_child_with_namespace ( iq -> node , "query" , "jabber:iq:register" )
CALLEE	7:9	7:9	8	xmlnode_get_child_with_namespace
LEAF_NODE	7:9	7:9	9	xmlnode_get_child_with_namespace
LEAF_NODE	7:41	7:41	8	(
ARGUMENT	7:42	7:42	8	iq -> node
FIELD	7:42	7:46	9	iq -> node
LEAF_NODE	7:42	7:42	10	iq
LEAF_NODE	7:44	7:44	10	->
LEAF_NODE	7:46	7:46	10	node
LEAF_NODE	7:50	7:50	8	,
ARGUMENT	7:52	7:52	8	"query"
FIELD	7:52	7:52	9	"query"
LEAF_NODE	7:52	7:52	10	"query"
LEAF_NODE	7:59	7:59	8	,
ARGUMENT	7:61	7:61	8	"jabber:iq:register"
FIELD	7:61	7:61	9	"jabber:iq:register"
LEAF_NODE	7:61	7:61	10	"jabber:iq:register"
LEAF_NODE	7:81	7:81	8	)
LEAF_NODE	7:82	7:82	4	;
EXPR_STATEMENT	8:1	8:35	3	xmlnode_new_child ( query , "remove" ) ;
EXPR	8:1	8:1	4	xmlnode_new_child ( query , "remove" )
FUNCTION_CALL	8:1	8:34	5	xmlnode_new_child ( query , "remove" )
CALLEE	8:1	8:1	6	xmlnode_new_child
LEAF_NODE	8:1	8:1	7	xmlnode_new_child
LEAF_NODE	8:18	8:18	6	(
ARGUMENT	8:19	8:19	6	query
FIELD	8:19	8:19	7	query
LEAF_NODE	8:19	8:19	8	query
LEAF_NODE	8:24	8:24	6	,
ARGUMENT	8:26	8:26	6	"remove"
FIELD	8:26	8:26	7	"remove"
LEAF_NODE	8:26	8:26	8	"remove"
LEAF_NODE	8:34	8:34	6	)
LEAF_NODE	8:35	8:35	4	;
EXPR_STATEMENT	9:1	9:53	3	xmlnode_set_attrib ( iq -> node , "to" , js -> user -> domain ) ;
EXPR	9:1	9:1	4	xmlnode_set_attrib ( iq -> node , "to" , js -> user -> domain )
FUNCTION_CALL	9:1	9:52	5	xmlnode_set_attrib ( iq -> node , "to" , js -> user -> domain )
CALLEE	9:1	9:1	6	xmlnode_set_attrib
LEAF_NODE	9:1	9:1	7	xmlnode_set_attrib
LEAF_NODE	9:19	9:19	6	(
ARGUMENT	9:20	9:20	6	iq -> node
FIELD	9:20	9:24	7	iq -> node
LEAF_NODE	9:20	9:20	8	iq
LEAF_NODE	9:22	9:22	8	->
LEAF_NODE	9:24	9:24	8	node
LEAF_NODE	9:28	9:28	6	,
ARGUMENT	9:30	9:30	6	"to"
FIELD	9:30	9:30	7	"to"
LEAF_NODE	9:30	9:30	8	"to"
LEAF_NODE	9:34	9:34	6	,
ARGUMENT	9:36	9:36	6	js -> user -> domain
FIELD	9:36	9:46	7	js -> user -> domain
LEAF_NODE	9:36	9:36	8	js
LEAF_NODE	9:38	9:38	8	->
LEAF_NODE	9:40	9:40	8	user
LEAF_NODE	9:44	9:44	8	->
LEAF_NODE	9:46	9:46	8	domain
LEAF_NODE	9:52	9:52	6	)
LEAF_NODE	9:53	9:53	4	;
EXPR_STATEMENT	10:1	10:66	3	jabber_iq_set_callback ( iq , jabber_unregister_account_iq_cb , NULL ) ;
EXPR	10:1	10:1	4	jabber_iq_set_callback ( iq , jabber_unregister_account_iq_cb , NULL )
FUNCTION_CALL	10:1	10:65	5	jabber_iq_set_callback ( iq , jabber_unregister_account_iq_cb , NULL )
CALLEE	10:1	10:1	6	jabber_iq_set_callback
LEAF_NODE	10:1	10:1	7	jabber_iq_set_callback
LEAF_NODE	10:23	10:23	6	(
ARGUMENT	10:24	10:24	6	iq
FIELD	10:24	10:24	7	iq
LEAF_NODE	10:24	10:24	8	iq
LEAF_NODE	10:26	10:26	6	,
ARGUMENT	10:28	10:28	6	jabber_unregister_account_iq_cb
FIELD	10:28	10:28	7	jabber_unregister_account_iq_cb
LEAF_NODE	10:28	10:28	8	jabber_unregister_account_iq_cb
LEAF_NODE	10:59	10:59	6	,
ARGUMENT	10:61	10:61	6	NULL
FIELD	10:61	10:61	7	NULL
LEAF_NODE	10:61	10:61	8	NULL
LEAF_NODE	10:65	10:65	6	)
LEAF_NODE	10:66	10:66	4	;
EXPR_STATEMENT	11:1	11:19	3	jabber_iq_send ( iq ) ;
EXPR	11:1	11:1	4	jabber_iq_send ( iq )
FUNCTION_CALL	11:1	11:18	5	jabber_iq_send ( iq )
CALLEE	11:1	11:1	6	jabber_iq_send
LEAF_NODE	11:1	11:1	7	jabber_iq_send
LEAF_NODE	11:15	11:15	6	(
ARGUMENT	11:16	11:16	6	iq
FIELD	11:16	11:16	7	iq
LEAF_NODE	11:16	11:16	8	iq
LEAF_NODE	11:18	11:18	6	)
LEAF_NODE	11:19	11:19	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	95:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	add_cb
LEAF_NODE	2:0	2:0	3	add_cb
PARAMETER_LIST	2:6	2:48	2	( GtkWidget * w , GevoNewPersonDialog * dialog )
LEAF_NODE	2:6	2:6	3	(
PARAMETER_DECL	2:7	2:18	3	GtkWidget * w
TYPE	2:7	2:17	4	GtkWidget *
TYPE_NAME	2:7	2:7	5	GtkWidget
LEAF_NODE	2:7	2:7	6	GtkWidget
POINTER	2:17	2:17	5	*
LEAF_NODE	2:17	2:17	6	*
NAME	2:18	2:18	4	w
LEAF_NODE	2:18	2:18	5	w
LEAF_NODE	2:19	2:19	3	,
PARAMETER_DECL	2:21	2:42	3	GevoNewPersonDialog * dialog
TYPE	2:21	2:41	4	GevoNewPersonDialog *
TYPE_NAME	2:21	2:21	5	GevoNewPersonDialog
LEAF_NODE	2:21	2:21	6	GevoNewPersonDialog
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	dialog
LEAF_NODE	2:42	2:42	5	dialog
LEAF_NODE	2:48	2:48	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	94:1	2	
SIMPLE_DECL	4:1	4:25	3	EContact * contact ; contact = NULL ;
VAR_DECL	4:1	4:11	4	EContact * contact ; contact = NULL
TYPE	4:1	4:10	5	EContact *
TYPE_NAME	4:1	4:1	6	EContact
LEAF_NODE	4:1	4:1	7	EContact
POINTER	4:10	4:10	6	*
LEAF_NODE	4:10	4:10	7	*
NAME	4:11	4:11	5	contact
LEAF_NODE	4:11	4:11	6	contact
LEAF_NODE	0:0	0:0	5	;
INIT	4:11	4:11	5	contact = NULL
ASSIGN	4:11	4:21	6	contact = NULL
LVAL	4:11	4:11	7	contact
NAME	4:11	4:11	8	contact
LEAF_NODE	4:11	4:11	9	contact
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:21	7	NULL
FIELD	4:21	4:21	8	NULL
LEAF_NODE	4:21	4:21	9	NULL
LEAF_NODE	4:25	4:25	4	;
SIMPLE_DECL	5:1	5:21	3	const char * username ;
VAR_DECL	5:1	5:13	4	const char * username
TYPE	5:1	5:12	5	const char *
TYPE_NAME	5:1	5:7	6	const char
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	char
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	username
LEAF_NODE	5:13	5:13	6	username
LEAF_NODE	5:21	5:21	4	;
SIMPLE_DECL	6:1	6:22	3	const char * firstname ;
VAR_DECL	6:1	6:13	4	const char * firstname
TYPE	6:1	6:12	5	const char *
TYPE_NAME	6:1	6:7	6	const char
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	char
POINTER	6:12	6:12	6	*
LEAF_NODE	6:12	6:12	7	*
NAME	6:13	6:13	5	firstname
LEAF_NODE	6:13	6:13	6	firstname
LEAF_NODE	6:22	6:22	4	;
SIMPLE_DECL	7:1	7:21	3	const char * lastname ;
VAR_DECL	7:1	7:13	4	const char * lastname
TYPE	7:1	7:12	5	const char *
TYPE_NAME	7:1	7:7	6	const char
LEAF_NODE	7:1	7:1	7	const
LEAF_NODE	7:7	7:7	7	char
POINTER	7:12	7:12	6	*
LEAF_NODE	7:12	7:12	7	*
NAME	7:13	7:13	5	lastname
LEAF_NODE	7:13	7:13	6	lastname
LEAF_NODE	7:21	7:21	4	;
SIMPLE_DECL	8:1	8:18	3	const char * email ;
VAR_DECL	8:1	8:13	4	const char * email
TYPE	8:1	8:12	5	const char *
TYPE_NAME	8:1	8:7	6	const char
LEAF_NODE	8:1	8:1	7	const
LEAF_NODE	8:7	8:7	7	char
POINTER	8:12	8:12	6	*
LEAF_NODE	8:12	8:12	7	*
NAME	8:13	8:13	5	email
LEAF_NODE	8:13	8:13	6	email
LEAF_NODE	8:18	8:18	4	;
SIMPLE_DECL	9:1	9:23	3	const char * im_service ;
VAR_DECL	9:1	9:13	4	const char * im_service
TYPE	9:1	9:12	5	const char *
TYPE_NAME	9:1	9:7	6	const char
LEAF_NODE	9:1	9:1	7	const
LEAF_NODE	9:7	9:7	7	char
POINTER	9:12	9:12	6	*
LEAF_NODE	9:12	9:12	7	*
NAME	9:13	9:13	5	im_service
LEAF_NODE	9:13	9:13	6	im_service
LEAF_NODE	9:23	9:23	4	;
SIMPLE_DECL	10:1	10:29	3	gboolean new_contact ; new_contact = FALSE ;
VAR_DECL	10:1	10:10	4	gboolean new_contact ; new_contact = FALSE
TYPE	10:1	10:1	5	gboolean
TYPE_NAME	10:1	10:1	6	gboolean
LEAF_NODE	10:1	10:1	7	gboolean
NAME	10:10	10:10	5	new_contact
LEAF_NODE	10:10	10:10	6	new_contact
LEAF_NODE	0:0	0:0	5	;
INIT	10:10	10:10	5	new_contact = FALSE
ASSIGN	10:10	10:24	6	new_contact = FALSE
LVAL	10:10	10:10	7	new_contact
NAME	10:10	10:10	8	new_contact
LEAF_NODE	10:10	10:10	9	new_contact
ASSIGN_OP	10:22	10:22	7	=
LEAF_NODE	10:22	10:22	8	=
RVAL	10:24	10:24	7	FALSE
FIELD	10:24	10:24	8	FALSE
LEAF_NODE	10:24	10:24	9	FALSE
LEAF_NODE	10:29	10:29	4	;
SIMPLE_DECL	11:1	11:24	3	EContactField field ; field = 0 ;
VAR_DECL	11:1	11:15	4	EContactField field ; field = 0
TYPE	11:1	11:1	5	EContactField
TYPE_NAME	11:1	11:1	6	EContactField
LEAF_NODE	11:1	11:1	7	EContactField
NAME	11:15	11:15	5	field
LEAF_NODE	11:15	11:15	6	field
LEAF_NODE	0:0	0:0	5	;
INIT	11:15	11:15	5	field = 0
ASSIGN	11:15	11:23	6	field = 0
LVAL	11:15	11:15	7	field
NAME	11:15	11:15	8	field
LEAF_NODE	11:15	11:15	9	field
ASSIGN_OP	11:21	11:21	7	=
LEAF_NODE	11:21	11:21	8	=
RVAL	11:23	11:23	7	0
FIELD	11:23	11:23	8	0
LEAF_NODE	11:23	11:23	9	0
LEAF_NODE	11:24	11:24	4	;
SIMPLE_DECL	12:1	12:26	3	EContactName * name ; name = NULL ;
VAR_DECL	12:1	12:15	4	EContactName * name ; name = NULL
TYPE	12:1	12:14	5	EContactName *
TYPE_NAME	12:1	12:1	6	EContactName
LEAF_NODE	12:1	12:1	7	EContactName
POINTER	12:14	12:14	6	*
LEAF_NODE	12:14	12:14	7	*
NAME	12:15	12:15	5	name
LEAF_NODE	12:15	12:15	6	name
LEAF_NODE	0:0	0:0	5	;
INIT	12:15	12:15	5	name = NULL
ASSIGN	12:15	12:22	6	name = NULL
LVAL	12:15	12:15	7	name
NAME	12:15	12:15	8	name
LEAF_NODE	12:15	12:15	9	name
ASSIGN_OP	12:20	12:20	7	=
LEAF_NODE	12:20	12:20	8	=
RVAL	12:22	12:22	7	NULL
FIELD	12:22	12:22	8	NULL
LEAF_NODE	12:22	12:22	9	NULL
LEAF_NODE	12:26	12:26	4	;
SIMPLE_DECL	13:1	13:23	3	char * full_name ; full_name = NULL ;
VAR_DECL	13:1	13:7	4	char * full_name ; full_name = NULL
TYPE	13:1	13:6	5	char *
TYPE_NAME	13:1	13:1	6	char
LEAF_NODE	13:1	13:1	7	char
POINTER	13:6	13:6	6	*
LEAF_NODE	13:6	13:6	7	*
NAME	13:7	13:7	5	full_name
LEAF_NODE	13:7	13:7	6	full_name
LEAF_NODE	0:0	0:0	5	;
INIT	13:7	13:7	5	full_name = NULL
ASSIGN	13:7	13:19	6	full_name = NULL
LVAL	13:7	13:7	7	full_name
NAME	13:7	13:7	8	full_name
LEAF_NODE	13:7	13:7	9	full_name
ASSIGN_OP	13:17	13:17	7	=
LEAF_NODE	13:17	13:17	8	=
RVAL	13:19	13:19	7	NULL
FIELD	13:19	13:19	8	NULL
LEAF_NODE	13:19	13:19	9	NULL
LEAF_NODE	13:23	13:23	4	;
SELECTION	14:1	15:2	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	dialog -> person_only
EXPR	14:5	14:5	5	dialog -> person_only
FIELD	14:5	14:13	6	dialog -> person_only
LEAF_NODE	14:5	14:5	7	dialog
LEAF_NODE	14:11	14:11	7	->
LEAF_NODE	14:13	14:13	7	person_only
LEAF_NODE	14:24	14:24	4	)
STATEMENTS	15:2	15:2	4	
EXPR_STATEMENT	15:2	15:32	5	username = dialog -> buddy -> name ;
EXPR	15:2	15:2	6	username = dialog -> buddy -> name
ASSIGN	15:2	15:13	7	username = dialog -> buddy -> name
LVAL	15:2	15:2	8	username
FIELD	15:2	15:2	9	username
LEAF_NODE	15:2	15:2	10	username
ASSIGN_OP	15:11	15:11	8	=
LEAF_NODE	15:11	15:11	9	=
RVAL	15:13	15:13	8	dialog -> buddy -> name
FIELD	15:13	15:28	9	dialog -> buddy -> name
LEAF_NODE	15:13	15:13	10	dialog
LEAF_NODE	15:19	15:19	10	->
LEAF_NODE	15:21	15:21	10	buddy
LEAF_NODE	15:26	15:26	10	->
LEAF_NODE	15:28	15:28	10	name
LEAF_NODE	15:32	15:32	6	;
SELECTION	16:1	17:2	3	
KEYWORD	16:1	16:1	4	else
LEAF_NODE	16:1	16:1	5	else
STATEMENTS	17:2	17:2	4	
EXPR_STATEMENT	17:2	17:60	5	username = gtk_entry_get_text ( GTK_ENTRY ( dialog -> username ) ) ;
EXPR	17:2	17:2	6	username = gtk_entry_get_text ( GTK_ENTRY ( dialog -> username ) )
ASSIGN	17:2	17:13	7	username = gtk_entry_get_text ( GTK_ENTRY ( dialog -> username ) )
LVAL	17:2	17:2	8	username
FIELD	17:2	17:2	9	username
LEAF_NODE	17:2	17:2	10	username
ASSIGN_OP	17:11	17:11	8	=
LEAF_NODE	17:11	17:11	9	=
RVAL	17:13	17:13	8	gtk_entry_get_text ( GTK_ENTRY ( dialog -> username ) )
FUNCTION_CALL	17:13	17:59	9	gtk_entry_get_text ( GTK_ENTRY ( dialog -> username ) )
CALLEE	17:13	17:13	10	gtk_entry_get_text
LEAF_NODE	17:13	17:13	11	gtk_entry_get_text
LEAF_NODE	17:31	17:31	10	(
ARGUMENT	17:32	17:32	10	GTK_ENTRY ( dialog -> username )
FUNCTION_CALL	17:32	17:58	11	GTK_ENTRY ( dialog -> username )
CALLEE	17:32	17:32	12	GTK_ENTRY
LEAF_NODE	17:32	17:32	13	GTK_ENTRY
LEAF_NODE	17:41	17:41	12	(
ARGUMENT	17:42	17:42	12	dialog -> username
FIELD	17:42	17:50	13	dialog -> username
LEAF_NODE	17:42	17:42	14	dialog
LEAF_NODE	17:48	17:48	14	->
LEAF_NODE	17:50	17:50	14	username
LEAF_NODE	17:58	17:58	12	)
LEAF_NODE	17:59	17:59	10	)
LEAF_NODE	17:60	17:60	6	;
EXPR_STATEMENT	18:1	18:62	3	firstname = gtk_entry_get_text ( GTK_ENTRY ( dialog -> firstname ) ) ;
EXPR	18:1	18:1	4	firstname = gtk_entry_get_text ( GTK_ENTRY ( dialog -> firstname ) )
ASSIGN	18:1	18:14	5	firstname = gtk_entry_get_text ( GTK_ENTRY ( dialog -> firstname ) )
LVAL	18:1	18:1	6	firstname
FIELD	18:1	18:1	7	firstname
LEAF_NODE	18:1	18:1	8	firstname
ASSIGN_OP	18:12	18:12	6	=
LEAF_NODE	18:12	18:12	7	=
RVAL	18:14	18:14	6	gtk_entry_get_text ( GTK_ENTRY ( dialog -> firstname ) )
FUNCTION_CALL	18:14	18:61	7	gtk_entry_get_text ( GTK_ENTRY ( dialog -> firstname ) )
CALLEE	18:14	18:14	8	gtk_entry_get_text
LEAF_NODE	18:14	18:14	9	gtk_entry_get_text
LEAF_NODE	18:32	18:32	8	(
ARGUMENT	18:33	18:33	8	GTK_ENTRY ( dialog -> firstname )
FUNCTION_CALL	18:33	18:60	9	GTK_ENTRY ( dialog -> firstname )
CALLEE	18:33	18:33	10	GTK_ENTRY
LEAF_NODE	18:33	18:33	11	GTK_ENTRY
LEAF_NODE	18:42	18:42	10	(
ARGUMENT	18:43	18:43	10	dialog -> firstname
FIELD	18:43	18:51	11	dialog -> firstname
LEAF_NODE	18:43	18:43	12	dialog
LEAF_NODE	18:49	18:49	12	->
LEAF_NODE	18:51	18:51	12	firstname
LEAF_NODE	18:60	18:60	10	)
LEAF_NODE	18:61	18:61	8	)
LEAF_NODE	18:62	18:62	4	;
EXPR_STATEMENT	19:1	19:61	3	lastname = gtk_entry_get_text ( GTK_ENTRY ( dialog -> lastname ) ) ;
EXPR	19:1	19:1	4	lastname = gtk_entry_get_text ( GTK_ENTRY ( dialog -> lastname ) )
ASSIGN	19:1	19:14	5	lastname = gtk_entry_get_text ( GTK_ENTRY ( dialog -> lastname ) )
LVAL	19:1	19:1	6	lastname
FIELD	19:1	19:1	7	lastname
LEAF_NODE	19:1	19:1	8	lastname
ASSIGN_OP	19:12	19:12	6	=
LEAF_NODE	19:12	19:12	7	=
RVAL	19:14	19:14	6	gtk_entry_get_text ( GTK_ENTRY ( dialog -> lastname ) )
FUNCTION_CALL	19:14	19:60	7	gtk_entry_get_text ( GTK_ENTRY ( dialog -> lastname ) )
CALLEE	19:14	19:14	8	gtk_entry_get_text
LEAF_NODE	19:14	19:14	9	gtk_entry_get_text
LEAF_NODE	19:32	19:32	8	(
ARGUMENT	19:33	19:33	8	GTK_ENTRY ( dialog -> lastname )
FUNCTION_CALL	19:33	19:59	9	GTK_ENTRY ( dialog -> lastname )
CALLEE	19:33	19:33	10	GTK_ENTRY
LEAF_NODE	19:33	19:33	11	GTK_ENTRY
LEAF_NODE	19:42	19:42	10	(
ARGUMENT	19:43	19:43	10	dialog -> lastname
FIELD	19:43	19:51	11	dialog -> lastname
LEAF_NODE	19:43	19:43	12	dialog
LEAF_NODE	19:49	19:49	12	->
LEAF_NODE	19:51	19:51	12	lastname
LEAF_NODE	19:59	19:59	10	)
LEAF_NODE	19:60	19:60	8	)
LEAF_NODE	19:61	19:61	4	;
EXPR_STATEMENT	20:1	20:58	3	email = gtk_entry_get_text ( GTK_ENTRY ( dialog -> email ) ) ;
EXPR	20:1	20:1	4	email = gtk_entry_get_text ( GTK_ENTRY ( dialog -> email ) )
ASSIGN	20:1	20:14	5	email = gtk_entry_get_text ( GTK_ENTRY ( dialog -> email ) )
LVAL	20:1	20:1	6	email
FIELD	20:1	20:1	7	email
LEAF_NODE	20:1	20:1	8	email
ASSIGN_OP	20:12	20:12	6	=
LEAF_NODE	20:12	20:12	7	=
RVAL	20:14	20:14	6	gtk_entry_get_text ( GTK_ENTRY ( dialog -> email ) )
FUNCTION_CALL	20:14	20:57	7	gtk_entry_get_text ( GTK_ENTRY ( dialog -> email ) )
CALLEE	20:14	20:14	8	gtk_entry_get_text
LEAF_NODE	20:14	20:14	9	gtk_entry_get_text
LEAF_NODE	20:32	20:32	8	(
ARGUMENT	20:33	20:33	8	GTK_ENTRY ( dialog -> email )
FUNCTION_CALL	20:33	20:56	9	GTK_ENTRY ( dialog -> email )
CALLEE	20:33	20:33	10	GTK_ENTRY
LEAF_NODE	20:33	20:33	11	GTK_ENTRY
LEAF_NODE	20:42	20:42	10	(
ARGUMENT	20:43	20:43	10	dialog -> email
FIELD	20:43	20:51	11	dialog -> email
LEAF_NODE	20:43	20:43	12	dialog
LEAF_NODE	20:49	20:49	12	->
LEAF_NODE	20:51	20:51	12	email
LEAF_NODE	20:56	20:56	10	)
LEAF_NODE	20:57	20:57	8	)
LEAF_NODE	20:58	20:58	4	;
SELECTION	21:1	22:1	3	
KEYWORD	21:1	21:1	4	if
LEAF_NODE	21:1	21:1	5	if
LEAF_NODE	21:4	21:4	4	(
CONDITION	21:5	21:5	4	* firstname || * lastname
EXPR	21:5	21:5	5	* firstname || * lastname
OR	21:5	21:19	6	* firstname || * lastname
EXPR	21:5	21:5	7	* firstname
UNARY_EXPR	21:5	21:6	8	* firstname
UNARY_OPERATOR	21:5	21:5	9	*
LEAF_NODE	21:5	21:5	10	*
FIELD	21:6	21:6	9	firstname
LEAF_NODE	21:6	21:6	10	firstname
LEAF_NODE	21:16	21:16	7	||
EXPR	21:19	21:19	7	* lastname
UNARY_EXPR	21:19	21:20	8	* lastname
UNARY_OPERATOR	21:19	21:19	9	*
LEAF_NODE	21:19	21:19	10	*
FIELD	21:20	21:20	9	lastname
LEAF_NODE	21:20	21:20	10	lastname
LEAF_NODE	21:28	21:28	4	)
STATEMENTS	22:1	84:1	4	
LEAF_NODE	22:1	22:1	5	{
STATEMENTS	23:2	83:2	5	
SELECTION	23:2	24:2	6	
KEYWORD	23:2	23:2	7	if
LEAF_NODE	23:2	23:2	8	if
LEAF_NODE	23:5	23:5	7	(
CONDITION	23:6	23:6	7	dialog -> contact == NULL
EXPR	23:6	23:25	8	dialog -> contact == NULL
FIELD	23:6	23:14	9	dialog -> contact
LEAF_NODE	23:6	23:6	10	dialog
LEAF_NODE	23:12	23:12	10	->
LEAF_NODE	23:14	23:14	10	contact
EQ_OPERATOR	23:22	23:22	9	==
LEAF_NODE	23:22	23:22	10	==
FIELD	23:25	23:25	9	NULL
LEAF_NODE	23:25	23:25	10	NULL
LEAF_NODE	23:29	23:29	7	)
STATEMENTS	24:2	36:2	7	
LEAF_NODE	24:2	24:2	8	{
STATEMENTS	25:3	35:3	8	
SIMPLE_DECL	25:3	25:16	9	char * file_as ;
VAR_DECL	25:3	25:9	10	char * file_as
TYPE	25:3	25:8	11	char *
TYPE_NAME	25:3	25:3	12	char
LEAF_NODE	25:3	25:3	13	char
POINTER	25:8	25:8	12	*
LEAF_NODE	25:8	25:8	13	*
NAME	25:9	25:9	11	file_as
LEAF_NODE	25:9	25:9	12	file_as
LEAF_NODE	25:16	25:16	10	;
EXPR_STATEMENT	26:3	26:36	9	dialog -> contact = e_contact_new ( ) ;
EXPR	26:3	26:3	10	dialog -> contact = e_contact_new ( )
ASSIGN	26:3	26:21	11	dialog -> contact = e_contact_new ( )
LVAL	26:3	26:3	12	dialog -> contact
FIELD	26:3	26:11	13	dialog -> contact
LEAF_NODE	26:3	26:3	14	dialog
LEAF_NODE	26:9	26:9	14	->
LEAF_NODE	26:11	26:11	14	contact
ASSIGN_OP	26:19	26:19	12	=
LEAF_NODE	26:19	26:19	13	=
RVAL	26:21	26:21	12	e_contact_new ( )
FUNCTION_CALL	26:21	26:35	13	e_contact_new ( )
CALLEE	26:21	26:21	14	e_contact_new
LEAF_NODE	26:21	26:21	15	e_contact_new
LEAF_NODE	26:34	26:34	14	(
LEAF_NODE	26:35	26:35	14	)
LEAF_NODE	26:36	26:36	10	;
SELECTION	27:3	28:4	9	
KEYWORD	27:3	27:3	10	if
LEAF_NODE	27:3	27:3	11	if
LEAF_NODE	27:6	27:6	10	(
CONDITION	27:7	27:7	10	* lastname && * firstname
EXPR	27:7	27:7	11	* lastname && * firstname
AND	27:7	27:20	12	* lastname && * firstname
EXPR	27:7	27:7	13	* lastname
UNARY_EXPR	27:7	27:8	14	* lastname
UNARY_OPERATOR	27:7	27:7	15	*
LEAF_NODE	27:7	27:7	16	*
FIELD	27:8	27:8	15	lastname
LEAF_NODE	27:8	27:8	16	lastname
LEAF_NODE	27:17	27:17	13	&&
EXPR	27:20	27:20	13	* firstname
UNARY_EXPR	27:20	27:21	14	* firstname
UNARY_OPERATOR	27:20	27:20	15	*
LEAF_NODE	27:20	27:20	16	*
FIELD	27:21	27:21	15	firstname
LEAF_NODE	27:21	27:21	16	firstname
LEAF_NODE	27:30	27:30	10	)
STATEMENTS	28:4	28:4	10	
EXPR_STATEMENT	28:4	28:60	11	file_as = g_strdup_printf ( "%s, %s" , lastname , firstname ) ;
EXPR	28:4	28:4	12	file_as = g_strdup_printf ( "%s, %s" , lastname , firstname )
ASSIGN	28:4	28:14	13	file_as = g_strdup_printf ( "%s, %s" , lastname , firstname )
LVAL	28:4	28:4	14	file_as
FIELD	28:4	28:4	15	file_as
LEAF_NODE	28:4	28:4	16	file_as
ASSIGN_OP	28:12	28:12	14	=
LEAF_NODE	28:12	28:12	15	=
RVAL	28:14	28:14	14	g_strdup_printf ( "%s, %s" , lastname , firstname )
FUNCTION_CALL	28:14	28:59	15	g_strdup_printf ( "%s, %s" , lastname , firstname )
CALLEE	28:14	28:14	16	g_strdup_printf
LEAF_NODE	28:14	28:14	17	g_strdup_printf
LEAF_NODE	28:29	28:29	16	(
ARGUMENT	28:30	28:30	16	"%s, %s"
FIELD	28:30	28:30	17	"%s, %s"
LEAF_NODE	28:30	28:30	18	"%s, %s"
LEAF_NODE	28:38	28:38	16	,
ARGUMENT	28:40	28:40	16	lastname
FIELD	28:40	28:40	17	lastname
LEAF_NODE	28:40	28:40	18	lastname
LEAF_NODE	28:48	28:48	16	,
ARGUMENT	28:50	28:50	16	firstname
FIELD	28:50	28:50	17	firstname
LEAF_NODE	28:50	28:50	18	firstname
LEAF_NODE	28:59	28:59	16	)
LEAF_NODE	28:60	28:60	12	;
SELECTION	29:3	29:8	9	
KEYWORD	29:3	29:3	10	else
LEAF_NODE	29:3	29:3	11	else
STATEMENTS	29:8	29:8	10	
SELECTION	29:8	30:4	11	
KEYWORD	29:8	29:8	12	if
LEAF_NODE	29:8	29:8	13	if
LEAF_NODE	29:11	29:11	12	(
CONDITION	29:12	29:12	12	* lastname
EXPR	29:12	29:12	13	* lastname
UNARY_EXPR	29:12	29:13	14	* lastname
UNARY_OPERATOR	29:12	29:12	15	*
LEAF_NODE	29:12	29:12	16	*
FIELD	29:13	29:13	15	lastname
LEAF_NODE	29:13	29:13	16	lastname
LEAF_NODE	29:21	29:21	12	)
STATEMENTS	30:4	30:4	12	
EXPR_STATEMENT	30:4	30:32	13	file_as = g_strdup ( lastname ) ;
EXPR	30:4	30:4	14	file_as = g_strdup ( lastname )
ASSIGN	30:4	30:14	15	file_as = g_strdup ( lastname )
LVAL	30:4	30:4	16	file_as
FIELD	30:4	30:4	17	file_as
LEAF_NODE	30:4	30:4	18	file_as
ASSIGN_OP	30:12	30:12	16	=
LEAF_NODE	30:12	30:12	17	=
RVAL	30:14	30:14	16	g_strdup ( lastname )
FUNCTION_CALL	30:14	30:31	17	g_strdup ( lastname )
CALLEE	30:14	30:14	18	g_strdup
LEAF_NODE	30:14	30:14	19	g_strdup
LEAF_NODE	30:22	30:22	18	(
ARGUMENT	30:23	30:23	18	lastname
FIELD	30:23	30:23	19	lastname
LEAF_NODE	30:23	30:23	20	lastname
LEAF_NODE	30:31	30:31	18	)
LEAF_NODE	30:32	30:32	14	;
SELECTION	31:3	32:4	9	
KEYWORD	31:3	31:3	10	else
LEAF_NODE	31:3	31:3	11	else
STATEMENTS	32:4	32:4	10	
EXPR_STATEMENT	32:4	32:33	11	file_as = g_strdup ( firstname ) ;
EXPR	32:4	32:4	12	file_as = g_strdup ( firstname )
ASSIGN	32:4	32:14	13	file_as = g_strdup ( firstname )
LVAL	32:4	32:4	14	file_as
FIELD	32:4	32:4	15	file_as
LEAF_NODE	32:4	32:4	16	file_as
ASSIGN_OP	32:12	32:12	14	=
LEAF_NODE	32:12	32:12	15	=
RVAL	32:14	32:14	14	g_strdup ( firstname )
FUNCTION_CALL	32:14	32:32	15	g_strdup ( firstname )
CALLEE	32:14	32:14	16	g_strdup
LEAF_NODE	32:14	32:14	17	g_strdup
LEAF_NODE	32:22	32:22	16	(
ARGUMENT	32:23	32:23	16	firstname
FIELD	32:23	32:23	17	firstname
LEAF_NODE	32:23	32:23	18	firstname
LEAF_NODE	32:32	32:32	16	)
LEAF_NODE	32:33	32:33	12	;
EXPR_STATEMENT	33:3	33:61	9	e_contact_set ( dialog -> contact , E_CONTACT_FILE_AS , file_as ) ;
EXPR	33:3	33:3	10	e_contact_set ( dialog -> contact , E_CONTACT_FILE_AS , file_as )
FUNCTION_CALL	33:3	33:60	11	e_contact_set ( dialog -> contact , E_CONTACT_FILE_AS , file_as )
CALLEE	33:3	33:3	12	e_contact_set
LEAF_NODE	33:3	33:3	13	e_contact_set
LEAF_NODE	33:16	33:16	12	(
ARGUMENT	33:17	33:17	12	dialog -> contact
FIELD	33:17	33:25	13	dialog -> contact
LEAF_NODE	33:17	33:17	14	dialog
LEAF_NODE	33:23	33:23	14	->
LEAF_NODE	33:25	33:25	14	contact
LEAF_NODE	33:32	33:32	12	,
ARGUMENT	33:34	33:34	12	E_CONTACT_FILE_AS
FIELD	33:34	33:34	13	E_CONTACT_FILE_AS
LEAF_NODE	33:34	33:34	14	E_CONTACT_FILE_AS
LEAF_NODE	33:51	33:51	12	,
ARGUMENT	33:53	33:53	12	file_as
FIELD	33:53	33:53	13	file_as
LEAF_NODE	33:53	33:53	14	file_as
LEAF_NODE	33:60	33:60	12	)
LEAF_NODE	33:61	33:61	10	;
EXPR_STATEMENT	34:3	34:18	9	g_free ( file_as ) ;
EXPR	34:3	34:3	10	g_free ( file_as )
FUNCTION_CALL	34:3	34:17	11	g_free ( file_as )
CALLEE	34:3	34:3	12	g_free
LEAF_NODE	34:3	34:3	13	g_free
LEAF_NODE	34:9	34:9	12	(
ARGUMENT	34:10	34:10	12	file_as
FIELD	34:10	34:10	13	file_as
LEAF_NODE	34:10	34:10	14	file_as
LEAF_NODE	34:17	34:17	12	)
LEAF_NODE	34:18	34:18	10	;
EXPR_STATEMENT	35:3	35:21	9	new_contact = TRUE ;
EXPR	35:3	35:3	10	new_contact = TRUE
ASSIGN	35:3	35:17	11	new_contact = TRUE
LVAL	35:3	35:3	12	new_contact
FIELD	35:3	35:3	13	new_contact
LEAF_NODE	35:3	35:3	14	new_contact
ASSIGN_OP	35:15	35:15	12	=
LEAF_NODE	35:15	35:15	13	=
RVAL	35:17	35:17	12	TRUE
FIELD	35:17	35:17	13	TRUE
LEAF_NODE	35:17	35:17	14	TRUE
LEAF_NODE	35:21	35:21	10	;
LEAF_NODE	36:2	36:2	8	}
EXPR_STATEMENT	37:2	37:27	6	contact = dialog -> contact ;
EXPR	37:2	37:2	7	contact = dialog -> contact
ASSIGN	37:2	37:12	8	contact = dialog -> contact
LVAL	37:2	37:2	9	contact
FIELD	37:2	37:2	10	contact
LEAF_NODE	37:2	37:2	11	contact
ASSIGN_OP	37:10	37:10	9	=
LEAF_NODE	37:10	37:10	10	=
RVAL	37:12	37:12	9	dialog -> contact
FIELD	37:12	37:20	10	dialog -> contact
LEAF_NODE	37:12	37:12	11	dialog
LEAF_NODE	37:18	37:18	11	->
LEAF_NODE	37:20	37:20	11	contact
LEAF_NODE	37:27	37:27	7	;
EXPR_STATEMENT	38:2	38:29	6	name = e_contact_name_new ( ) ;
EXPR	38:2	38:2	7	name = e_contact_name_new ( )
ASSIGN	38:2	38:9	8	name = e_contact_name_new ( )
LVAL	38:2	38:2	9	name
FIELD	38:2	38:2	10	name
LEAF_NODE	38:2	38:2	11	name
ASSIGN_OP	38:7	38:7	9	=
LEAF_NODE	38:7	38:7	10	=
RVAL	38:9	38:9	9	e_contact_name_new ( )
FUNCTION_CALL	38:9	38:28	10	e_contact_name_new ( )
CALLEE	38:9	38:9	11	e_contact_name_new
LEAF_NODE	38:9	38:9	12	e_contact_name_new
LEAF_NODE	38:27	38:27	11	(
LEAF_NODE	38:28	38:28	11	)
LEAF_NODE	38:29	38:29	7	;
EXPR_STATEMENT	39:2	39:36	6	name -> given = g_strdup ( firstname ) ;
EXPR	39:2	39:2	7	name -> given = g_strdup ( firstname )
ASSIGN	39:2	39:17	8	name -> given = g_strdup ( firstname )
LVAL	39:2	39:2	9	name -> given
FIELD	39:2	39:8	10	name -> given
LEAF_NODE	39:2	39:2	11	name
LEAF_NODE	39:6	39:6	11	->
LEAF_NODE	39:8	39:8	11	given
ASSIGN_OP	39:15	39:15	9	=
LEAF_NODE	39:15	39:15	10	=
RVAL	39:17	39:17	9	g_strdup ( firstname )
FUNCTION_CALL	39:17	39:35	10	g_strdup ( firstname )
CALLEE	39:17	39:17	11	g_strdup
LEAF_NODE	39:17	39:17	12	g_strdup
LEAF_NODE	39:25	39:25	11	(
ARGUMENT	39:26	39:26	11	firstname
FIELD	39:26	39:26	12	firstname
LEAF_NODE	39:26	39:26	13	firstname
LEAF_NODE	39:35	39:35	11	)
LEAF_NODE	39:36	39:36	7	;
EXPR_STATEMENT	40:2	40:35	6	name -> family = g_strdup ( lastname ) ;
EXPR	40:2	40:2	7	name -> family = g_strdup ( lastname )
ASSIGN	40:2	40:17	8	name -> family = g_strdup ( lastname )
LVAL	40:2	40:2	9	name -> family
FIELD	40:2	40:8	10	name -> family
LEAF_NODE	40:2	40:2	11	name
LEAF_NODE	40:6	40:6	11	->
LEAF_NODE	40:8	40:8	11	family
ASSIGN_OP	40:15	40:15	9	=
LEAF_NODE	40:15	40:15	10	=
RVAL	40:17	40:17	9	g_strdup ( lastname )
FUNCTION_CALL	40:17	40:34	10	g_strdup ( lastname )
CALLEE	40:17	40:17	11	g_strdup
LEAF_NODE	40:17	40:17	12	g_strdup
LEAF_NODE	40:25	40:25	11	(
ARGUMENT	40:26	40:26	11	lastname
FIELD	40:26	40:26	12	lastname
LEAF_NODE	40:26	40:26	13	lastname
LEAF_NODE	40:34	40:34	11	)
LEAF_NODE	40:35	40:35	7	;
EXPR_STATEMENT	41:2	41:44	6	full_name = e_contact_name_to_string ( name ) ;
EXPR	41:2	41:2	7	full_name = e_contact_name_to_string ( name )
ASSIGN	41:2	41:14	8	full_name = e_contact_name_to_string ( name )
LVAL	41:2	41:2	9	full_name
FIELD	41:2	41:2	10	full_name
LEAF_NODE	41:2	41:2	11	full_name
ASSIGN_OP	41:12	41:12	9	=
LEAF_NODE	41:12	41:12	10	=
RVAL	41:14	41:14	9	e_contact_name_to_string ( name )
FUNCTION_CALL	41:14	41:43	10	e_contact_name_to_string ( name )
CALLEE	41:14	41:14	11	e_contact_name_to_string
LEAF_NODE	41:14	41:14	12	e_contact_name_to_string
LEAF_NODE	41:38	41:38	11	(
ARGUMENT	41:39	41:39	11	name
FIELD	41:39	41:39	12	name
LEAF_NODE	41:39	41:39	13	name
LEAF_NODE	41:43	41:43	11	)
LEAF_NODE	41:44	41:44	7	;
EXPR_STATEMENT	42:2	42:56	6	e_contact_set ( contact , E_CONTACT_FULL_NAME , full_name ) ;
EXPR	42:2	42:2	7	e_contact_set ( contact , E_CONTACT_FULL_NAME , full_name )
FUNCTION_CALL	42:2	42:55	8	e_contact_set ( contact , E_CONTACT_FULL_NAME , full_name )
CALLEE	42:2	42:2	9	e_contact_set
LEAF_NODE	42:2	42:2	10	e_contact_set
LEAF_NODE	42:15	42:15	9	(
ARGUMENT	42:16	42:16	9	contact
FIELD	42:16	42:16	10	contact
LEAF_NODE	42:16	42:16	11	contact
LEAF_NODE	42:23	42:23	9	,
ARGUMENT	42:25	42:25	9	E_CONTACT_FULL_NAME
FIELD	42:25	42:25	10	E_CONTACT_FULL_NAME
LEAF_NODE	42:25	42:25	11	E_CONTACT_FULL_NAME
LEAF_NODE	42:44	42:44	9	,
ARGUMENT	42:46	42:46	9	full_name
FIELD	42:46	42:46	10	full_name
LEAF_NODE	42:46	42:46	11	full_name
LEAF_NODE	42:55	42:55	9	)
LEAF_NODE	42:56	42:56	7	;
EXPR_STATEMENT	43:2	43:62	6	im_service = purple_account_get_protocol_id ( dialog -> account ) ;
EXPR	43:2	43:2	7	im_service = purple_account_get_protocol_id ( dialog -> account )
ASSIGN	43:2	43:15	8	im_service = purple_account_get_protocol_id ( dialog -> account )
LVAL	43:2	43:2	9	im_service
FIELD	43:2	43:2	10	im_service
LEAF_NODE	43:2	43:2	11	im_service
ASSIGN_OP	43:13	43:13	9	=
LEAF_NODE	43:13	43:13	10	=
RVAL	43:15	43:15	9	purple_account_get_protocol_id ( dialog -> account )
FUNCTION_CALL	43:15	43:61	10	purple_account_get_protocol_id ( dialog -> account )
CALLEE	43:15	43:15	11	purple_account_get_protocol_id
LEAF_NODE	43:15	43:15	12	purple_account_get_protocol_id
LEAF_NODE	43:45	43:45	11	(
ARGUMENT	43:46	43:46	11	dialog -> account
FIELD	43:46	43:54	12	dialog -> account
LEAF_NODE	43:46	43:46	13	dialog
LEAF_NODE	43:52	43:52	13	->
LEAF_NODE	43:54	43:54	13	account
LEAF_NODE	43:61	43:61	11	)
LEAF_NODE	43:62	43:62	7	;
SELECTION	44:2	45:3	6	
KEYWORD	44:2	44:2	7	if
LEAF_NODE	44:2	44:2	8	if
LEAF_NODE	44:5	44:5	7	(
CONDITION	44:6	44:6	7	* email
EXPR	44:6	44:6	8	* email
UNARY_EXPR	44:6	44:7	9	* email
UNARY_OPERATOR	44:6	44:6	10	*
LEAF_NODE	44:6	44:6	11	*
FIELD	44:7	44:7	10	email
LEAF_NODE	44:7	44:7	11	email
LEAF_NODE	44:12	44:12	7	)
STATEMENTS	45:3	45:3	7	
EXPR_STATEMENT	45:3	45:61	8	e_contact_set ( contact , E_CONTACT_EMAIL_1 , ( gpointer ) email ) ;
EXPR	45:3	45:3	9	e_contact_set ( contact , E_CONTACT_EMAIL_1 , ( gpointer ) email )
FUNCTION_CALL	45:3	45:60	10	e_contact_set ( contact , E_CONTACT_EMAIL_1 , ( gpointer ) email )
CALLEE	45:3	45:3	11	e_contact_set
LEAF_NODE	45:3	45:3	12	e_contact_set
LEAF_NODE	45:16	45:16	11	(
ARGUMENT	45:17	45:17	11	contact
FIELD	45:17	45:17	12	contact
LEAF_NODE	45:17	45:17	13	contact
LEAF_NODE	45:24	45:24	11	,
ARGUMENT	45:26	45:26	11	E_CONTACT_EMAIL_1
FIELD	45:26	45:26	12	E_CONTACT_EMAIL_1
LEAF_NODE	45:26	45:26	13	E_CONTACT_EMAIL_1
LEAF_NODE	45:43	45:43	11	,
ARGUMENT	45:45	45:55	11	( gpointer ) email
LEAF_NODE	45:45	45:45	12	(
TYPE_NAME	45:46	45:46	12	gpointer
LEAF_NODE	45:46	45:46	13	gpointer
LEAF_NODE	45:54	45:54	12	)
FIELD	45:55	45:55	12	email
LEAF_NODE	45:55	45:55	13	email
LEAF_NODE	45:60	45:60	11	)
LEAF_NODE	45:61	45:61	9	;
SELECTION	46:2	47:3	6	
KEYWORD	46:2	46:2	7	if
LEAF_NODE	46:2	46:2	8	if
LEAF_NODE	46:5	46:5	7	(
CONDITION	46:6	46:6	7	! strcmp ( im_service , "prpl-aim" )
EXPR	46:6	46:6	8	! strcmp ( im_service , "prpl-aim" )
UNARY_EXPR	46:6	46:7	9	! strcmp ( im_service , "prpl-aim" )
UNARY_OPERATOR	46:6	46:6	10	!
LEAF_NODE	46:6	46:6	11	!
FUNCTION_CALL	46:7	46:36	10	strcmp ( im_service , "prpl-aim" )
CALLEE	46:7	46:7	11	strcmp
LEAF_NODE	46:7	46:7	12	strcmp
LEAF_NODE	46:13	46:13	11	(
ARGUMENT	46:14	46:14	11	im_service
FIELD	46:14	46:14	12	im_service
LEAF_NODE	46:14	46:14	13	im_service
LEAF_NODE	46:24	46:24	11	,
ARGUMENT	46:26	46:26	11	"prpl-aim"
FIELD	46:26	46:26	12	"prpl-aim"
LEAF_NODE	46:26	46:26	13	"prpl-aim"
LEAF_NODE	46:36	46:36	11	)
LEAF_NODE	46:37	46:37	7	)
STATEMENTS	47:3	47:3	7	
EXPR_STATEMENT	47:3	47:27	8	field = E_CONTACT_IM_AIM ;
EXPR	47:3	47:3	9	field = E_CONTACT_IM_AIM
ASSIGN	47:3	47:11	10	field = E_CONTACT_IM_AIM
LVAL	47:3	47:3	11	field
FIELD	47:3	47:3	12	field
LEAF_NODE	47:3	47:3	13	field
ASSIGN_OP	47:9	47:9	11	=
LEAF_NODE	47:9	47:9	12	=
RVAL	47:11	47:11	11	E_CONTACT_IM_AIM
FIELD	47:11	47:11	12	E_CONTACT_IM_AIM
LEAF_NODE	47:11	47:11	13	E_CONTACT_IM_AIM
LEAF_NODE	47:27	47:27	9	;
SELECTION	48:2	48:7	6	
KEYWORD	48:2	48:2	7	else
LEAF_NODE	48:2	48:2	8	else
STATEMENTS	48:7	48:7	7	
SELECTION	48:7	49:3	8	
KEYWORD	48:7	48:7	9	if
LEAF_NODE	48:7	48:7	10	if
LEAF_NODE	48:10	48:10	9	(
CONDITION	48:11	48:11	9	! strcmp ( im_service , "prpl-icq" )
EXPR	48:11	48:11	10	! strcmp ( im_service , "prpl-icq" )
UNARY_EXPR	48:11	48:12	11	! strcmp ( im_service , "prpl-icq" )
UNARY_OPERATOR	48:11	48:11	12	!
LEAF_NODE	48:11	48:11	13	!
FUNCTION_CALL	48:12	48:41	12	strcmp ( im_service , "prpl-icq" )
CALLEE	48:12	48:12	13	strcmp
LEAF_NODE	48:12	48:12	14	strcmp
LEAF_NODE	48:18	48:18	13	(
ARGUMENT	48:19	48:19	13	im_service
FIELD	48:19	48:19	14	im_service
LEAF_NODE	48:19	48:19	15	im_service
LEAF_NODE	48:29	48:29	13	,
ARGUMENT	48:31	48:31	13	"prpl-icq"
FIELD	48:31	48:31	14	"prpl-icq"
LEAF_NODE	48:31	48:31	15	"prpl-icq"
LEAF_NODE	48:41	48:41	13	)
LEAF_NODE	48:42	48:42	9	)
STATEMENTS	49:3	49:3	9	
EXPR_STATEMENT	49:3	49:27	10	field = E_CONTACT_IM_ICQ ;
EXPR	49:3	49:3	11	field = E_CONTACT_IM_ICQ
ASSIGN	49:3	49:11	12	field = E_CONTACT_IM_ICQ
LVAL	49:3	49:3	13	field
FIELD	49:3	49:3	14	field
LEAF_NODE	49:3	49:3	15	field
ASSIGN_OP	49:9	49:9	13	=
LEAF_NODE	49:9	49:9	14	=
RVAL	49:11	49:11	13	E_CONTACT_IM_ICQ
FIELD	49:11	49:11	14	E_CONTACT_IM_ICQ
LEAF_NODE	49:11	49:11	15	E_CONTACT_IM_ICQ
LEAF_NODE	49:27	49:27	11	;
SELECTION	50:2	50:7	6	
KEYWORD	50:2	50:2	7	else
LEAF_NODE	50:2	50:2	8	else
STATEMENTS	50:7	50:7	7	
SELECTION	50:7	51:3	8	
KEYWORD	50:7	50:7	9	if
LEAF_NODE	50:7	50:7	10	if
LEAF_NODE	50:10	50:10	9	(
CONDITION	50:11	50:11	9	! strcmp ( im_service , "prpl-jabber" )
EXPR	50:11	50:11	10	! strcmp ( im_service , "prpl-jabber" )
UNARY_EXPR	50:11	50:12	11	! strcmp ( im_service , "prpl-jabber" )
UNARY_OPERATOR	50:11	50:11	12	!
LEAF_NODE	50:11	50:11	13	!
FUNCTION_CALL	50:12	50:44	12	strcmp ( im_service , "prpl-jabber" )
CALLEE	50:12	50:12	13	strcmp
LEAF_NODE	50:12	50:12	14	strcmp
LEAF_NODE	50:18	50:18	13	(
ARGUMENT	50:19	50:19	13	im_service
FIELD	50:19	50:19	14	im_service
LEAF_NODE	50:19	50:19	15	im_service
LEAF_NODE	50:29	50:29	13	,
ARGUMENT	50:31	50:31	13	"prpl-jabber"
FIELD	50:31	50:31	14	"prpl-jabber"
LEAF_NODE	50:31	50:31	15	"prpl-jabber"
LEAF_NODE	50:44	50:44	13	)
LEAF_NODE	50:45	50:45	9	)
STATEMENTS	51:3	51:3	9	
EXPR_STATEMENT	51:3	51:30	10	field = E_CONTACT_IM_JABBER ;
EXPR	51:3	51:3	11	field = E_CONTACT_IM_JABBER
ASSIGN	51:3	51:11	12	field = E_CONTACT_IM_JABBER
LVAL	51:3	51:3	13	field
FIELD	51:3	51:3	14	field
LEAF_NODE	51:3	51:3	15	field
ASSIGN_OP	51:9	51:9	13	=
LEAF_NODE	51:9	51:9	14	=
RVAL	51:11	51:11	13	E_CONTACT_IM_JABBER
FIELD	51:11	51:11	14	E_CONTACT_IM_JABBER
LEAF_NODE	51:11	51:11	15	E_CONTACT_IM_JABBER
LEAF_NODE	51:30	51:30	11	;
SELECTION	52:2	52:7	6	
KEYWORD	52:2	52:2	7	else
LEAF_NODE	52:2	52:2	8	else
STATEMENTS	52:7	52:7	7	
SELECTION	52:7	53:3	8	
KEYWORD	52:7	52:7	9	if
LEAF_NODE	52:7	52:7	10	if
LEAF_NODE	52:10	52:10	9	(
CONDITION	52:11	52:11	9	! strcmp ( im_service , "prpl-novell" )
EXPR	52:11	52:11	10	! strcmp ( im_service , "prpl-novell" )
UNARY_EXPR	52:11	52:12	11	! strcmp ( im_service , "prpl-novell" )
UNARY_OPERATOR	52:11	52:11	12	!
LEAF_NODE	52:11	52:11	13	!
FUNCTION_CALL	52:12	52:44	12	strcmp ( im_service , "prpl-novell" )
CALLEE	52:12	52:12	13	strcmp
LEAF_NODE	52:12	52:12	14	strcmp
LEAF_NODE	52:18	52:18	13	(
ARGUMENT	52:19	52:19	13	im_service
FIELD	52:19	52:19	14	im_service
LEAF_NODE	52:19	52:19	15	im_service
LEAF_NODE	52:29	52:29	13	,
ARGUMENT	52:31	52:31	13	"prpl-novell"
FIELD	52:31	52:31	14	"prpl-novell"
LEAF_NODE	52:31	52:31	15	"prpl-novell"
LEAF_NODE	52:44	52:44	13	)
LEAF_NODE	52:45	52:45	9	)
STATEMENTS	53:3	53:3	9	
EXPR_STATEMENT	53:3	53:33	10	field = E_CONTACT_IM_GROUPWISE ;
EXPR	53:3	53:3	11	field = E_CONTACT_IM_GROUPWISE
ASSIGN	53:3	53:11	12	field = E_CONTACT_IM_GROUPWISE
LVAL	53:3	53:3	13	field
FIELD	53:3	53:3	14	field
LEAF_NODE	53:3	53:3	15	field
ASSIGN_OP	53:9	53:9	13	=
LEAF_NODE	53:9	53:9	14	=
RVAL	53:11	53:11	13	E_CONTACT_IM_GROUPWISE
FIELD	53:11	53:11	14	E_CONTACT_IM_GROUPWISE
LEAF_NODE	53:11	53:11	15	E_CONTACT_IM_GROUPWISE
LEAF_NODE	53:33	53:33	11	;
SELECTION	54:2	54:7	6	
KEYWORD	54:2	54:2	7	else
LEAF_NODE	54:2	54:2	8	else
STATEMENTS	54:7	54:7	7	
SELECTION	54:7	55:3	8	
KEYWORD	54:7	54:7	9	if
LEAF_NODE	54:7	54:7	10	if
LEAF_NODE	54:10	54:10	9	(
CONDITION	54:11	54:11	9	! strcmp ( im_service , "prpl-gg" )
EXPR	54:11	54:11	10	! strcmp ( im_service , "prpl-gg" )
UNARY_EXPR	54:11	54:12	11	! strcmp ( im_service , "prpl-gg" )
UNARY_OPERATOR	54:11	54:11	12	!
LEAF_NODE	54:11	54:11	13	!
FUNCTION_CALL	54:12	54:40	12	strcmp ( im_service , "prpl-gg" )
CALLEE	54:12	54:12	13	strcmp
LEAF_NODE	54:12	54:12	14	strcmp
LEAF_NODE	54:18	54:18	13	(
ARGUMENT	54:19	54:19	13	im_service
FIELD	54:19	54:19	14	im_service
LEAF_NODE	54:19	54:19	15	im_service
LEAF_NODE	54:29	54:29	13	,
ARGUMENT	54:31	54:31	13	"prpl-gg"
FIELD	54:31	54:31	14	"prpl-gg"
LEAF_NODE	54:31	54:31	15	"prpl-gg"
LEAF_NODE	54:40	54:40	13	)
LEAF_NODE	54:41	54:41	9	)
STATEMENTS	55:3	55:3	9	
EXPR_STATEMENT	55:3	55:32	10	field = E_CONTACT_IM_GADUGADU ;
EXPR	55:3	55:3	11	field = E_CONTACT_IM_GADUGADU
ASSIGN	55:3	55:11	12	field = E_CONTACT_IM_GADUGADU
LVAL	55:3	55:3	13	field
FIELD	55:3	55:3	14	field
LEAF_NODE	55:3	55:3	15	field
ASSIGN_OP	55:9	55:9	13	=
LEAF_NODE	55:9	55:9	14	=
RVAL	55:11	55:11	13	E_CONTACT_IM_GADUGADU
FIELD	55:11	55:11	14	E_CONTACT_IM_GADUGADU
LEAF_NODE	55:11	55:11	15	E_CONTACT_IM_GADUGADU
LEAF_NODE	55:32	55:32	11	;
SELECTION	56:2	57:2	6	
KEYWORD	56:2	56:2	7	if
LEAF_NODE	56:2	56:2	8	if
LEAF_NODE	56:5	56:5	7	(
CONDITION	56:6	56:6	7	field > 0
EXPR	56:6	56:14	8	field > 0
FIELD	56:6	56:6	9	field
LEAF_NODE	56:6	56:6	10	field
REL_OPERATOR	56:12	56:12	9	>
LEAF_NODE	56:12	56:12	10	>
FIELD	56:14	56:14	9	0
LEAF_NODE	56:14	56:14	10	0
LEAF_NODE	56:15	56:15	7	)
STATEMENTS	57:2	62:2	7	
LEAF_NODE	57:2	57:2	8	{
STATEMENTS	58:3	61:3	8	
SIMPLE_DECL	58:3	58:56	9	GList * list ; list = g_list_append ( NULL , g_strdup ( username ) ) ;
VAR_DECL	58:3	58:10	10	GList * list ; list = g_list_append ( NULL , g_strdup ( username ) )
TYPE	58:3	58:9	11	GList *
TYPE_NAME	58:3	58:3	12	GList
LEAF_NODE	58:3	58:3	13	GList
POINTER	58:9	58:9	12	*
LEAF_NODE	58:9	58:9	13	*
NAME	58:10	58:10	11	list
LEAF_NODE	58:10	58:10	12	list
LEAF_NODE	0:0	0:0	11	;
INIT	58:10	58:10	11	list = g_list_append ( NULL , g_strdup ( username ) )
ASSIGN	58:10	58:17	12	list = g_list_append ( NULL , g_strdup ( username ) )
LVAL	58:10	58:10	13	list
NAME	58:10	58:10	14	list
LEAF_NODE	58:10	58:10	15	list
ASSIGN_OP	58:15	58:15	13	=
LEAF_NODE	58:15	58:15	14	=
RVAL	58:17	58:17	13	g_list_append ( NULL , g_strdup ( username ) )
FUNCTION_CALL	58:17	58:55	14	g_list_append ( NULL , g_strdup ( username ) )
CALLEE	58:17	58:17	15	g_list_append
LEAF_NODE	58:17	58:17	16	g_list_append
LEAF_NODE	58:30	58:30	15	(
ARGUMENT	58:31	58:31	15	NULL
FIELD	58:31	58:31	16	NULL
LEAF_NODE	58:31	58:31	17	NULL
LEAF_NODE	58:35	58:35	15	,
ARGUMENT	58:37	58:37	15	g_strdup ( username )
FUNCTION_CALL	58:37	58:54	16	g_strdup ( username )
CALLEE	58:37	58:37	17	g_strdup
LEAF_NODE	58:37	58:37	18	g_strdup
LEAF_NODE	58:45	58:45	17	(
ARGUMENT	58:46	58:46	17	username
FIELD	58:46	58:46	18	username
LEAF_NODE	58:46	58:46	19	username
LEAF_NODE	58:54	58:54	17	)
LEAF_NODE	58:55	58:55	15	)
LEAF_NODE	58:56	58:56	10	;
EXPR_STATEMENT	59:3	59:38	9	e_contact_set ( contact , field , list ) ;
EXPR	59:3	59:3	10	e_contact_set ( contact , field , list )
FUNCTION_CALL	59:3	59:37	11	e_contact_set ( contact , field , list )
CALLEE	59:3	59:3	12	e_contact_set
LEAF_NODE	59:3	59:3	13	e_contact_set
LEAF_NODE	59:16	59:16	12	(
ARGUMENT	59:17	59:17	12	contact
FIELD	59:17	59:17	13	contact
LEAF_NODE	59:17	59:17	14	contact
LEAF_NODE	59:24	59:24	12	,
ARGUMENT	59:26	59:26	12	field
FIELD	59:26	59:26	13	field
LEAF_NODE	59:26	59:26	14	field
LEAF_NODE	59:31	59:31	12	,
ARGUMENT	59:33	59:33	12	list
FIELD	59:33	59:33	13	list
LEAF_NODE	59:33	59:33	14	list
LEAF_NODE	59:37	59:37	12	)
LEAF_NODE	59:38	59:38	10	;
EXPR_STATEMENT	60:3	60:21	9	g_free ( list -> data ) ;
EXPR	60:3	60:3	10	g_free ( list -> data )
FUNCTION_CALL	60:3	60:20	11	g_free ( list -> data )
CALLEE	60:3	60:3	12	g_free
LEAF_NODE	60:3	60:3	13	g_free
LEAF_NODE	60:9	60:9	12	(
ARGUMENT	60:10	60:10	12	list -> data
FIELD	60:10	60:16	13	list -> data
LEAF_NODE	60:10	60:10	14	list
LEAF_NODE	60:14	60:14	14	->
LEAF_NODE	60:16	60:16	14	data
LEAF_NODE	60:20	60:20	12	)
LEAF_NODE	60:21	60:21	10	;
EXPR_STATEMENT	61:3	61:20	9	g_list_free ( list ) ;
EXPR	61:3	61:3	10	g_list_free ( list )
FUNCTION_CALL	61:3	61:19	11	g_list_free ( list )
CALLEE	61:3	61:3	12	g_list_free
LEAF_NODE	61:3	61:3	13	g_list_free
LEAF_NODE	61:14	61:14	12	(
ARGUMENT	61:15	61:15	12	list
FIELD	61:15	61:15	13	list
LEAF_NODE	61:15	61:15	14	list
LEAF_NODE	61:19	61:19	12	)
LEAF_NODE	61:20	61:20	10	;
LEAF_NODE	62:2	62:2	8	}
SELECTION	63:2	64:2	6	
KEYWORD	63:2	63:2	7	if
LEAF_NODE	63:2	63:2	8	if
LEAF_NODE	63:5	63:5	7	(
CONDITION	63:6	63:6	7	new_contact
EXPR	63:6	63:6	8	new_contact
FIELD	63:6	63:6	9	new_contact
LEAF_NODE	63:6	63:6	10	new_contact
LEAF_NODE	63:17	63:17	7	)
STATEMENTS	64:2	72:2	7	
LEAF_NODE	64:2	64:2	8	{
STATEMENTS	65:3	65:3	8	
SELECTION	65:3	66:3	9	
KEYWORD	65:3	65:3	10	if
LEAF_NODE	65:3	65:3	11	if
LEAF_NODE	65:6	65:6	10	(
CONDITION	65:7	65:7	10	! e_book_add_contact ( dialog -> book , contact , NULL )
EXPR	65:7	65:7	11	! e_book_add_contact ( dialog -> book , contact , NULL )
UNARY_EXPR	65:7	65:8	12	! e_book_add_contact ( dialog -> book , contact , NULL )
UNARY_OPERATOR	65:7	65:7	13	!
LEAF_NODE	65:7	65:7	14	!
FUNCTION_CALL	65:8	65:54	13	e_book_add_contact ( dialog -> book , contact , NULL )
CALLEE	65:8	65:8	14	e_book_add_contact
LEAF_NODE	65:8	65:8	15	e_book_add_contact
LEAF_NODE	65:26	65:26	14	(
ARGUMENT	65:27	65:27	14	dialog -> book
FIELD	65:27	65:35	15	dialog -> book
LEAF_NODE	65:27	65:27	16	dialog
LEAF_NODE	65:33	65:33	16	->
LEAF_NODE	65:35	65:35	16	book
LEAF_NODE	65:39	65:39	14	,
ARGUMENT	65:41	65:41	14	contact
FIELD	65:41	65:41	15	contact
LEAF_NODE	65:41	65:41	16	contact
LEAF_NODE	65:48	65:48	14	,
ARGUMENT	65:50	65:50	14	NULL
FIELD	65:50	65:50	15	NULL
LEAF_NODE	65:50	65:50	16	NULL
LEAF_NODE	65:54	65:54	14	)
LEAF_NODE	65:55	65:55	10	)
STATEMENTS	66:3	71:3	10	
LEAF_NODE	66:3	66:3	11	{
STATEMENTS	67:4	70:4	11	
EXPR_STATEMENT	67:4	67:69	12	purple_debug_error ( "evolution" , "Error adding contact to book\n" ) ;
EXPR	67:4	67:4	13	purple_debug_error ( "evolution" , "Error adding contact to book\n" )
FUNCTION_CALL	67:4	67:68	14	purple_debug_error ( "evolution" , "Error adding contact to book\n" )
CALLEE	67:4	67:4	15	purple_debug_error
LEAF_NODE	67:4	67:4	16	purple_debug_error
LEAF_NODE	67:22	67:22	15	(
ARGUMENT	67:23	67:23	15	"evolution"
FIELD	67:23	67:23	16	"evolution"
LEAF_NODE	67:23	67:23	17	"evolution"
LEAF_NODE	67:34	67:34	15	,
ARGUMENT	67:36	67:36	15	"Error adding contact to book\n"
FIELD	67:36	67:36	16	"Error adding contact to book\n"
LEAF_NODE	67:36	67:36	17	"Error adding contact to book\n"
LEAF_NODE	67:68	67:68	15	)
LEAF_NODE	67:69	67:69	13	;
EXPR_STATEMENT	68:4	68:27	12	g_object_unref ( contact ) ;
EXPR	68:4	68:4	13	g_object_unref ( contact )
FUNCTION_CALL	68:4	68:26	14	g_object_unref ( contact )
CALLEE	68:4	68:4	15	g_object_unref
LEAF_NODE	68:4	68:4	16	g_object_unref
LEAF_NODE	68:18	68:18	15	(
ARGUMENT	68:19	68:19	15	contact
FIELD	68:19	68:19	16	contact
LEAF_NODE	68:19	68:19	17	contact
LEAF_NODE	68:26	68:26	15	)
LEAF_NODE	68:27	68:27	13	;
EXPR_STATEMENT	69:4	69:37	12	delete_win_cb ( NULL , NULL , dialog ) ;
EXPR	69:4	69:4	13	delete_win_cb ( NULL , NULL , dialog )
FUNCTION_CALL	69:4	69:36	14	delete_win_cb ( NULL , NULL , dialog )
CALLEE	69:4	69:4	15	delete_win_cb
LEAF_NODE	69:4	69:4	16	delete_win_cb
LEAF_NODE	69:17	69:17	15	(
ARGUMENT	69:18	69:18	15	NULL
FIELD	69:18	69:18	16	NULL
LEAF_NODE	69:18	69:18	17	NULL
LEAF_NODE	69:22	69:22	15	,
ARGUMENT	69:24	69:24	15	NULL
FIELD	69:24	69:24	16	NULL
LEAF_NODE	69:24	69:24	17	NULL
LEAF_NODE	69:28	69:28	15	,
ARGUMENT	69:30	69:30	15	dialog
FIELD	69:30	69:30	16	dialog
LEAF_NODE	69:30	69:30	17	dialog
LEAF_NODE	69:36	69:36	15	)
LEAF_NODE	69:37	69:37	13	;
JUMP_STATEMENT	70:4	70:10	12	return DESTINATION ;
KEYWORD	70:4	70:4	13	return
LEAF_NODE	70:4	70:4	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	70:10	70:10	13	;
LEAF_NODE	71:3	71:3	11	}
LEAF_NODE	72:2	72:2	8	}
SELECTION	73:2	74:2	6	
KEYWORD	73:2	73:2	7	else
LEAF_NODE	73:2	73:2	8	else
STATEMENTS	74:2	82:2	7	
LEAF_NODE	74:2	74:2	8	{
STATEMENTS	75:3	75:3	8	
SELECTION	75:3	76:3	9	
KEYWORD	75:3	75:3	10	if
LEAF_NODE	75:3	75:3	11	if
LEAF_NODE	75:6	75:6	10	(
CONDITION	75:7	75:7	10	! e_book_commit_contact ( dialog -> book , contact , NULL )
EXPR	75:7	75:7	11	! e_book_commit_contact ( dialog -> book , contact , NULL )
UNARY_EXPR	75:7	75:8	12	! e_book_commit_contact ( dialog -> book , contact , NULL )
UNARY_OPERATOR	75:7	75:7	13	!
LEAF_NODE	75:7	75:7	14	!
FUNCTION_CALL	75:8	75:57	13	e_book_commit_contact ( dialog -> book , contact , NULL )
CALLEE	75:8	75:8	14	e_book_commit_contact
LEAF_NODE	75:8	75:8	15	e_book_commit_contact
LEAF_NODE	75:29	75:29	14	(
ARGUMENT	75:30	75:30	14	dialog -> book
FIELD	75:30	75:38	15	dialog -> book
LEAF_NODE	75:30	75:30	16	dialog
LEAF_NODE	75:36	75:36	16	->
LEAF_NODE	75:38	75:38	16	book
LEAF_NODE	75:42	75:42	14	,
ARGUMENT	75:44	75:44	14	contact
FIELD	75:44	75:44	15	contact
LEAF_NODE	75:44	75:44	16	contact
LEAF_NODE	75:51	75:51	14	,
ARGUMENT	75:53	75:53	14	NULL
FIELD	75:53	75:53	15	NULL
LEAF_NODE	75:53	75:53	16	NULL
LEAF_NODE	75:57	75:57	14	)
LEAF_NODE	75:58	75:58	10	)
STATEMENTS	76:3	81:3	10	
LEAF_NODE	76:3	76:3	11	{
STATEMENTS	77:4	80:4	11	
EXPR_STATEMENT	77:4	77:69	12	purple_debug_error ( "evolution" , "Error adding contact to book\n" ) ;
EXPR	77:4	77:4	13	purple_debug_error ( "evolution" , "Error adding contact to book\n" )
FUNCTION_CALL	77:4	77:68	14	purple_debug_error ( "evolution" , "Error adding contact to book\n" )
CALLEE	77:4	77:4	15	purple_debug_error
LEAF_NODE	77:4	77:4	16	purple_debug_error
LEAF_NODE	77:22	77:22	15	(
ARGUMENT	77:23	77:23	15	"evolution"
FIELD	77:23	77:23	16	"evolution"
LEAF_NODE	77:23	77:23	17	"evolution"
LEAF_NODE	77:34	77:34	15	,
ARGUMENT	77:36	77:36	15	"Error adding contact to book\n"
FIELD	77:36	77:36	16	"Error adding contact to book\n"
LEAF_NODE	77:36	77:36	17	"Error adding contact to book\n"
LEAF_NODE	77:68	77:68	15	)
LEAF_NODE	77:69	77:69	13	;
EXPR_STATEMENT	78:4	78:27	12	g_object_unref ( contact ) ;
EXPR	78:4	78:4	13	g_object_unref ( contact )
FUNCTION_CALL	78:4	78:26	14	g_object_unref ( contact )
CALLEE	78:4	78:4	15	g_object_unref
LEAF_NODE	78:4	78:4	16	g_object_unref
LEAF_NODE	78:18	78:18	15	(
ARGUMENT	78:19	78:19	15	contact
FIELD	78:19	78:19	16	contact
LEAF_NODE	78:19	78:19	17	contact
LEAF_NODE	78:26	78:26	15	)
LEAF_NODE	78:27	78:27	13	;
EXPR_STATEMENT	79:4	79:37	12	delete_win_cb ( NULL , NULL , dialog ) ;
EXPR	79:4	79:4	13	delete_win_cb ( NULL , NULL , dialog )
FUNCTION_CALL	79:4	79:36	14	delete_win_cb ( NULL , NULL , dialog )
CALLEE	79:4	79:4	15	delete_win_cb
LEAF_NODE	79:4	79:4	16	delete_win_cb
LEAF_NODE	79:17	79:17	15	(
ARGUMENT	79:18	79:18	15	NULL
FIELD	79:18	79:18	16	NULL
LEAF_NODE	79:18	79:18	17	NULL
LEAF_NODE	79:22	79:22	15	,
ARGUMENT	79:24	79:24	15	NULL
FIELD	79:24	79:24	16	NULL
LEAF_NODE	79:24	79:24	17	NULL
LEAF_NODE	79:28	79:28	15	,
ARGUMENT	79:30	79:30	15	dialog
FIELD	79:30	79:30	16	dialog
LEAF_NODE	79:30	79:30	17	dialog
LEAF_NODE	79:36	79:36	15	)
LEAF_NODE	79:37	79:37	13	;
JUMP_STATEMENT	80:4	80:10	12	return DESTINATION ;
KEYWORD	80:4	80:4	13	return
LEAF_NODE	80:4	80:4	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	80:10	80:10	13	;
LEAF_NODE	81:3	81:3	11	}
LEAF_NODE	82:2	82:2	8	}
EXPR_STATEMENT	83:2	83:25	6	g_object_unref ( contact ) ;
EXPR	83:2	83:2	7	g_object_unref ( contact )
FUNCTION_CALL	83:2	83:24	8	g_object_unref ( contact )
CALLEE	83:2	83:2	9	g_object_unref
LEAF_NODE	83:2	83:2	10	g_object_unref
LEAF_NODE	83:16	83:16	9	(
ARGUMENT	83:17	83:17	9	contact
FIELD	83:17	83:17	10	contact
LEAF_NODE	83:17	83:17	11	contact
LEAF_NODE	83:24	83:24	9	)
LEAF_NODE	83:25	83:25	7	;
LEAF_NODE	84:1	84:1	5	}
SELECTION	85:1	86:1	3	
KEYWORD	85:1	85:1	4	if
LEAF_NODE	85:1	85:1	5	if
LEAF_NODE	85:4	85:4	4	(
CONDITION	85:5	85:5	4	! dialog -> person_only
EXPR	85:5	85:5	5	! dialog -> person_only
UNARY_EXPR	85:5	85:6	6	! dialog -> person_only
UNARY_OPERATOR	85:5	85:5	7	!
LEAF_NODE	85:5	85:5	8	!
FIELD	85:6	85:14	7	dialog -> person_only
LEAF_NODE	85:6	85:6	8	dialog
LEAF_NODE	85:12	85:12	8	->
LEAF_NODE	85:14	85:14	8	person_only
LEAF_NODE	85:25	85:25	4	)
STATEMENTS	86:1	90:1	4	
LEAF_NODE	86:1	86:1	5	{
STATEMENTS	87:2	89:2	5	
SIMPLE_DECL	87:2	87:24	6	const char * group_name ;
VAR_DECL	87:2	87:14	7	const char * group_name
TYPE	87:2	87:13	8	const char *
TYPE_NAME	87:2	87:8	9	const char
LEAF_NODE	87:2	87:2	10	const
LEAF_NODE	87:8	87:8	10	char
POINTER	87:13	87:13	9	*
LEAF_NODE	87:13	87:13	10	*
NAME	87:14	87:14	8	group_name
LEAF_NODE	87:14	87:14	9	group_name
LEAF_NODE	87:24	87:24	7	;
EXPR_STATEMENT	88:2	88:72	6	group_name = pidgin_text_combo_box_entry_get_text ( dialog -> group_combo ) ;
EXPR	88:2	88:2	7	group_name = pidgin_text_combo_box_entry_get_text ( dialog -> group_combo )
ASSIGN	88:2	88:15	8	group_name = pidgin_text_combo_box_entry_get_text ( dialog -> group_combo )
LVAL	88:2	88:2	9	group_name
FIELD	88:2	88:2	10	group_name
LEAF_NODE	88:2	88:2	11	group_name
ASSIGN_OP	88:13	88:13	9	=
LEAF_NODE	88:13	88:13	10	=
RVAL	88:15	88:15	9	pidgin_text_combo_box_entry_get_text ( dialog -> group_combo )
FUNCTION_CALL	88:15	88:71	10	pidgin_text_combo_box_entry_get_text ( dialog -> group_combo )
CALLEE	88:15	88:15	11	pidgin_text_combo_box_entry_get_text
LEAF_NODE	88:15	88:15	12	pidgin_text_combo_box_entry_get_text
LEAF_NODE	88:51	88:51	11	(
ARGUMENT	88:52	88:52	11	dialog -> group_combo
FIELD	88:52	88:60	12	dialog -> group_combo
LEAF_NODE	88:52	88:52	13	dialog
LEAF_NODE	88:58	88:58	13	->
LEAF_NODE	88:60	88:60	13	group_combo
LEAF_NODE	88:71	88:71	11	)
LEAF_NODE	88:72	88:72	7	;
EXPR_STATEMENT	89:2	89:66	6	gevo_add_buddy ( dialog -> account , group_name , username , full_name ) ;
EXPR	89:2	89:2	7	gevo_add_buddy ( dialog -> account , group_name , username , full_name )
FUNCTION_CALL	89:2	89:65	8	gevo_add_buddy ( dialog -> account , group_name , username , full_name )
CALLEE	89:2	89:2	9	gevo_add_buddy
LEAF_NODE	89:2	89:2	10	gevo_add_buddy
LEAF_NODE	89:16	89:16	9	(
ARGUMENT	89:17	89:17	9	dialog -> account
FIELD	89:17	89:25	10	dialog -> account
LEAF_NODE	89:17	89:17	11	dialog
LEAF_NODE	89:23	89:23	11	->
LEAF_NODE	89:25	89:25	11	account
LEAF_NODE	89:32	89:32	9	,
ARGUMENT	89:34	89:34	9	group_name
FIELD	89:34	89:34	10	group_name
LEAF_NODE	89:34	89:34	11	group_name
LEAF_NODE	89:44	89:44	9	,
ARGUMENT	89:46	89:46	9	username
FIELD	89:46	89:46	10	username
LEAF_NODE	89:46	89:46	11	username
LEAF_NODE	89:54	89:54	9	,
ARGUMENT	89:56	89:56	9	full_name
FIELD	89:56	89:56	10	full_name
LEAF_NODE	89:56	89:56	11	full_name
LEAF_NODE	89:65	89:65	9	)
LEAF_NODE	89:66	89:66	7	;
LEAF_NODE	90:1	90:1	5	}
SELECTION	91:1	92:2	3	
KEYWORD	91:1	91:1	4	if
LEAF_NODE	91:1	91:1	5	if
LEAF_NODE	91:4	91:4	4	(
CONDITION	91:5	91:5	4	name != NULL
EXPR	91:5	91:13	5	name != NULL
FIELD	91:5	91:5	6	name
LEAF_NODE	91:5	91:5	7	name
EQ_OPERATOR	91:10	91:10	6	!=
LEAF_NODE	91:10	91:10	7	!=
FIELD	91:13	91:13	6	NULL
LEAF_NODE	91:13	91:13	7	NULL
LEAF_NODE	91:17	91:17	4	)
STATEMENTS	92:2	92:2	4	
EXPR_STATEMENT	92:2	92:27	5	e_contact_name_free ( name ) ;
EXPR	92:2	92:2	6	e_contact_name_free ( name )
FUNCTION_CALL	92:2	92:26	7	e_contact_name_free ( name )
CALLEE	92:2	92:2	8	e_contact_name_free
LEAF_NODE	92:2	92:2	9	e_contact_name_free
LEAF_NODE	92:21	92:21	8	(
ARGUMENT	92:22	92:22	8	name
FIELD	92:22	92:22	9	name
LEAF_NODE	92:22	92:22	10	name
LEAF_NODE	92:26	92:26	8	)
LEAF_NODE	92:27	92:27	6	;
EXPR_STATEMENT	93:1	93:18	3	g_free ( full_name ) ;
EXPR	93:1	93:1	4	g_free ( full_name )
FUNCTION_CALL	93:1	93:17	5	g_free ( full_name )
CALLEE	93:1	93:1	6	g_free
LEAF_NODE	93:1	93:1	7	g_free
LEAF_NODE	93:7	93:7	6	(
ARGUMENT	93:8	93:8	6	full_name
FIELD	93:8	93:8	7	full_name
LEAF_NODE	93:8	93:8	8	full_name
LEAF_NODE	93:17	93:17	6	)
LEAF_NODE	93:18	93:18	4	;
EXPR_STATEMENT	94:1	94:34	3	delete_win_cb ( NULL , NULL , dialog ) ;
EXPR	94:1	94:1	4	delete_win_cb ( NULL , NULL , dialog )
FUNCTION_CALL	94:1	94:33	5	delete_win_cb ( NULL , NULL , dialog )
CALLEE	94:1	94:1	6	delete_win_cb
LEAF_NODE	94:1	94:1	7	delete_win_cb
LEAF_NODE	94:14	94:14	6	(
ARGUMENT	94:15	94:15	6	NULL
FIELD	94:15	94:15	7	NULL
LEAF_NODE	94:15	94:15	8	NULL
LEAF_NODE	94:19	94:19	6	,
ARGUMENT	94:21	94:21	6	NULL
FIELD	94:21	94:21	7	NULL
LEAF_NODE	94:21	94:21	8	NULL
LEAF_NODE	94:25	94:25	6	,
ARGUMENT	94:27	94:27	6	dialog
FIELD	94:27	94:27	7	dialog
LEAF_NODE	94:27	94:27	8	dialog
LEAF_NODE	94:33	94:33	6	)
LEAF_NODE	94:34	94:34	4	;
LEAF_NODE	95:0	95:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	google_session_handle_reject
LEAF_NODE	2:0	2:0	3	google_session_handle_reject
PARAMETER_LIST	2:28	2:84	2	( JabberStream * js , GoogleSession * session , xmlnode * sess )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:43	3	JabberStream * js
TYPE	2:29	2:42	4	JabberStream *
TYPE_NAME	2:29	2:29	5	JabberStream
LEAF_NODE	2:29	2:29	6	JabberStream
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	js
LEAF_NODE	2:43	2:43	5	js
LEAF_NODE	2:45	2:45	3	,
PARAMETER_DECL	2:47	2:62	3	GoogleSession * session
TYPE	2:47	2:61	4	GoogleSession *
TYPE_NAME	2:47	2:47	5	GoogleSession
LEAF_NODE	2:47	2:47	6	GoogleSession
POINTER	2:61	2:61	5	*
LEAF_NODE	2:61	2:61	6	*
NAME	2:62	2:62	4	session
LEAF_NODE	2:62	2:62	5	session
LEAF_NODE	2:69	2:69	3	,
PARAMETER_DECL	2:71	2:80	3	xmlnode * sess
TYPE	2:71	2:79	4	xmlnode *
TYPE_NAME	2:71	2:71	5	xmlnode
LEAF_NODE	2:71	2:71	6	xmlnode
POINTER	2:79	2:79	5	*
LEAF_NODE	2:79	2:79	6	*
NAME	2:80	2:80	4	sess
LEAF_NODE	2:80	2:80	5	sess
LEAF_NODE	2:84	2:84	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SIMPLE_DECL	4:1	5:47	3	GoogleAVSessionData * session_data ; session_data = ( GoogleAVSessionData * ) session -> session_data ;
VAR_DECL	4:1	4:22	4	GoogleAVSessionData * session_data ; session_data = ( GoogleAVSessionData * ) session -> session_data
TYPE	4:1	4:21	5	GoogleAVSessionData *
TYPE_NAME	4:1	4:1	6	GoogleAVSessionData
LEAF_NODE	4:1	4:1	7	GoogleAVSessionData
POINTER	4:21	4:21	6	*
LEAF_NODE	4:21	4:21	7	*
NAME	4:22	4:22	5	session_data
LEAF_NODE	4:22	4:22	6	session_data
LEAF_NODE	0:0	0:0	5	;
INIT	4:22	4:22	5	session_data = ( GoogleAVSessionData * ) session -> session_data
ASSIGN	4:22	5:2	6	session_data = ( GoogleAVSessionData * ) session -> session_data
LVAL	4:22	4:22	7	session_data
NAME	4:22	4:22	8	session_data
LEAF_NODE	4:22	4:22	9	session_data
ASSIGN_OP	4:35	4:35	7	=
LEAF_NODE	4:35	4:35	8	=
RVAL	5:2	5:26	7	( GoogleAVSessionData * ) session -> session_data
LEAF_NODE	5:2	5:2	8	(
TYPE_NAME	5:3	5:3	8	GoogleAVSessionData
LEAF_NODE	5:3	5:3	9	GoogleAVSessionData
LEAF_NODE	5:23	5:23	8	*
LEAF_NODE	5:24	5:24	8	)
FIELD	5:26	5:35	8	session -> session_data
LEAF_NODE	5:26	5:26	9	session
LEAF_NODE	5:33	5:33	9	->
LEAF_NODE	5:35	5:35	9	session_data
LEAF_NODE	5:47	5:47	4	;
EXPR_STATEMENT	6:1	6:50	3	purple_media_end ( session_data -> media , NULL , NULL ) ;
EXPR	6:1	6:1	4	purple_media_end ( session_data -> media , NULL , NULL )
FUNCTION_CALL	6:1	6:49	5	purple_media_end ( session_data -> media , NULL , NULL )
CALLEE	6:1	6:1	6	purple_media_end
LEAF_NODE	6:1	6:1	7	purple_media_end
LEAF_NODE	6:17	6:17	6	(
ARGUMENT	6:18	6:18	6	session_data -> media
FIELD	6:18	6:32	7	session_data -> media
LEAF_NODE	6:18	6:18	8	session_data
LEAF_NODE	6:30	6:30	8	->
LEAF_NODE	6:32	6:32	8	media
LEAF_NODE	6:37	6:37	6	,
ARGUMENT	6:39	6:39	6	NULL
FIELD	6:39	6:39	7	NULL
LEAF_NODE	6:39	6:39	8	NULL
LEAF_NODE	6:43	6:43	6	,
ARGUMENT	6:45	6:45	6	NULL
FIELD	6:45	6:45	7	NULL
LEAF_NODE	6:45	6:45	8	NULL
LEAF_NODE	6:49	6:49	6	)
LEAF_NODE	6:50	6:50	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	40:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	gtk_blist_menu_showoffline_cb
LEAF_NODE	2:12	2:12	3	gtk_blist_menu_showoffline_cb
PARAMETER_LIST	2:41	2:77	2	( GtkWidget * w , PurpleBlistNode * node )
LEAF_NODE	2:41	2:41	3	(
PARAMETER_DECL	2:42	2:53	3	GtkWidget * w
TYPE	2:42	2:52	4	GtkWidget *
TYPE_NAME	2:42	2:42	5	GtkWidget
LEAF_NODE	2:42	2:42	6	GtkWidget
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	w
LEAF_NODE	2:53	2:53	5	w
LEAF_NODE	2:54	2:54	3	,
PARAMETER_DECL	2:56	2:73	3	PurpleBlistNode * node
TYPE	2:56	2:72	4	PurpleBlistNode *
TYPE_NAME	2:56	2:56	5	PurpleBlistNode
LEAF_NODE	2:56	2:56	6	PurpleBlistNode
POINTER	2:72	2:72	5	*
LEAF_NODE	2:72	2:72	6	*
NAME	2:73	2:73	4	node
LEAF_NODE	2:73	2:73	5	node
LEAF_NODE	2:77	2:77	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	22:3	2	
SELECTION	4:1	5:1	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	PURPLE_BLIST_NODE_IS_BUDDY ( node )
EXPR	4:5	4:5	5	PURPLE_BLIST_NODE_IS_BUDDY ( node )
FUNCTION_CALL	4:5	4:36	6	PURPLE_BLIST_NODE_IS_BUDDY ( node )
CALLEE	4:5	4:5	7	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	4:5	4:5	8	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	4:31	4:31	7	(
ARGUMENT	4:32	4:32	7	node
FIELD	4:32	4:32	8	node
LEAF_NODE	4:32	4:32	9	node
LEAF_NODE	4:36	4:36	7	)
LEAF_NODE	4:37	4:37	4	)
STATEMENTS	5:1	9:1	4	
LEAF_NODE	5:1	5:1	5	{
STATEMENTS	6:2	8:2	5	
EXPR_STATEMENT	6:2	7:79	6	purple_blist_node_set_bool ( node , "show_offline" , ! purple_blist_node_get_bool ( node , "show_offline" ) ) ;
EXPR	6:2	6:2	7	purple_blist_node_set_bool ( node , "show_offline" , ! purple_blist_node_get_bool ( node , "show_offline" ) )
FUNCTION_CALL	6:2	7:78	8	purple_blist_node_set_bool ( node , "show_offline" , ! purple_blist_node_get_bool ( node , "show_offline" ) )
CALLEE	6:2	6:2	9	purple_blist_node_set_bool
LEAF_NODE	6:2	6:2	10	purple_blist_node_set_bool
LEAF_NODE	6:28	6:28	9	(
ARGUMENT	6:29	6:29	9	node
FIELD	6:29	6:29	10	node
LEAF_NODE	6:29	6:29	11	node
LEAF_NODE	6:33	6:33	9	,
ARGUMENT	6:35	6:35	9	"show_offline"
FIELD	6:35	6:35	10	"show_offline"
LEAF_NODE	6:35	6:35	11	"show_offline"
LEAF_NODE	6:49	6:49	9	,
ARGUMENT	7:29	7:29	9	! purple_blist_node_get_bool ( node , "show_offline" )
UNARY_EXPR	7:29	7:30	10	! purple_blist_node_get_bool ( node , "show_offline" )
UNARY_OPERATOR	7:29	7:29	11	!
LEAF_NODE	7:29	7:29	12	!
FUNCTION_CALL	7:30	7:77	11	purple_blist_node_get_bool ( node , "show_offline" )
CALLEE	7:30	7:30	12	purple_blist_node_get_bool
LEAF_NODE	7:30	7:30	13	purple_blist_node_get_bool
LEAF_NODE	7:56	7:56	12	(
ARGUMENT	7:57	7:57	12	node
FIELD	7:57	7:57	13	node
LEAF_NODE	7:57	7:57	14	node
LEAF_NODE	7:61	7:61	12	,
ARGUMENT	7:63	7:63	12	"show_offline"
FIELD	7:63	7:63	13	"show_offline"
LEAF_NODE	7:63	7:63	14	"show_offline"
LEAF_NODE	7:77	7:77	12	)
LEAF_NODE	7:78	7:78	9	)
LEAF_NODE	7:79	7:79	7	;
EXPR_STATEMENT	8:2	8:47	6	pidgin_blist_update ( purple_get_blist ( ) , node ) ;
EXPR	8:2	8:2	7	pidgin_blist_update ( purple_get_blist ( ) , node )
FUNCTION_CALL	8:2	8:46	8	pidgin_blist_update ( purple_get_blist ( ) , node )
CALLEE	8:2	8:2	9	pidgin_blist_update
LEAF_NODE	8:2	8:2	10	pidgin_blist_update
LEAF_NODE	8:21	8:21	9	(
ARGUMENT	8:22	8:22	9	purple_get_blist ( )
FUNCTION_CALL	8:22	8:39	10	purple_get_blist ( )
CALLEE	8:22	8:22	11	purple_get_blist
LEAF_NODE	8:22	8:22	12	purple_get_blist
LEAF_NODE	8:38	8:38	11	(
LEAF_NODE	8:39	8:39	11	)
LEAF_NODE	8:40	8:40	9	,
ARGUMENT	8:42	8:42	9	node
FIELD	8:42	8:42	10	node
LEAF_NODE	8:42	8:42	11	node
LEAF_NODE	8:46	8:46	9	)
LEAF_NODE	8:47	8:47	7	;
LEAF_NODE	9:1	9:1	5	}
SELECTION	10:1	10:6	3	
KEYWORD	10:1	10:1	4	else
LEAF_NODE	10:1	10:1	5	else
STATEMENTS	10:6	10:6	4	
SELECTION	10:6	11:1	5	
KEYWORD	10:6	10:6	6	if
LEAF_NODE	10:6	10:6	7	if
LEAF_NODE	10:9	10:9	6	(
CONDITION	10:10	10:10	6	PURPLE_BLIST_NODE_IS_CONTACT ( node )
EXPR	10:10	10:10	7	PURPLE_BLIST_NODE_IS_CONTACT ( node )
FUNCTION_CALL	10:10	10:43	8	PURPLE_BLIST_NODE_IS_CONTACT ( node )
CALLEE	10:10	10:10	9	PURPLE_BLIST_NODE_IS_CONTACT
LEAF_NODE	10:10	10:10	10	PURPLE_BLIST_NODE_IS_CONTACT
LEAF_NODE	10:38	10:38	9	(
ARGUMENT	10:39	10:39	9	node
FIELD	10:39	10:39	10	node
LEAF_NODE	10:39	10:39	11	node
LEAF_NODE	10:43	10:43	9	)
LEAF_NODE	10:44	10:44	6	)
STATEMENTS	11:1	22:1	6	
LEAF_NODE	11:1	11:1	7	{
STATEMENTS	12:2	15:2	7	
SIMPLE_DECL	12:2	12:24	8	PurpleBlistNode * bnode ;
VAR_DECL	12:2	12:19	9	PurpleBlistNode * bnode
TYPE	12:2	12:18	10	PurpleBlistNode *
TYPE_NAME	12:2	12:2	11	PurpleBlistNode
LEAF_NODE	12:2	12:2	12	PurpleBlistNode
POINTER	12:18	12:18	11	*
LEAF_NODE	12:18	12:18	12	*
NAME	12:19	12:19	10	bnode
LEAF_NODE	12:19	12:19	11	bnode
LEAF_NODE	12:24	12:24	9	;
SIMPLE_DECL	13:2	13:70	8	gboolean setting ; setting = ! purple_blist_node_get_bool ( node , "show_offline" ) ;
VAR_DECL	13:2	13:11	9	gboolean setting ; setting = ! purple_blist_node_get_bool ( node , "show_offline" )
TYPE	13:2	13:2	10	gboolean
TYPE_NAME	13:2	13:2	11	gboolean
LEAF_NODE	13:2	13:2	12	gboolean
NAME	13:11	13:11	10	setting
LEAF_NODE	13:11	13:11	11	setting
LEAF_NODE	0:0	0:0	10	;
INIT	13:11	13:11	10	setting = ! purple_blist_node_get_bool ( node , "show_offline" )
ASSIGN	13:11	13:21	11	setting = ! purple_blist_node_get_bool ( node , "show_offline" )
LVAL	13:11	13:11	12	setting
NAME	13:11	13:11	13	setting
LEAF_NODE	13:11	13:11	14	setting
ASSIGN_OP	13:19	13:19	12	=
LEAF_NODE	13:19	13:19	13	=
RVAL	13:21	13:21	12	! purple_blist_node_get_bool ( node , "show_offline" )
UNARY_EXPR	13:21	13:22	13	! purple_blist_node_get_bool ( node , "show_offline" )
UNARY_OPERATOR	13:21	13:21	14	!
LEAF_NODE	13:21	13:21	15	!
FUNCTION_CALL	13:22	13:69	14	purple_blist_node_get_bool ( node , "show_offline" )
CALLEE	13:22	13:22	15	purple_blist_node_get_bool
LEAF_NODE	13:22	13:22	16	purple_blist_node_get_bool
LEAF_NODE	13:48	13:48	15	(
ARGUMENT	13:49	13:49	15	node
FIELD	13:49	13:49	16	node
LEAF_NODE	13:49	13:49	17	node
LEAF_NODE	13:53	13:53	15	,
ARGUMENT	13:55	13:55	15	"show_offline"
FIELD	13:55	13:55	16	"show_offline"
LEAF_NODE	13:55	13:55	17	"show_offline"
LEAF_NODE	13:69	13:69	15	)
LEAF_NODE	13:70	13:70	9	;
EXPR_STATEMENT	14:2	14:59	8	purple_blist_node_set_bool ( node , "show_offline" , setting ) ;
EXPR	14:2	14:2	9	purple_blist_node_set_bool ( node , "show_offline" , setting )
FUNCTION_CALL	14:2	14:58	10	purple_blist_node_set_bool ( node , "show_offline" , setting )
CALLEE	14:2	14:2	11	purple_blist_node_set_bool
LEAF_NODE	14:2	14:2	12	purple_blist_node_set_bool
LEAF_NODE	14:28	14:28	11	(
ARGUMENT	14:29	14:29	11	node
FIELD	14:29	14:29	12	node
LEAF_NODE	14:29	14:29	13	node
LEAF_NODE	14:33	14:33	11	,
ARGUMENT	14:35	14:35	11	"show_offline"
FIELD	14:35	14:35	12	"show_offline"
LEAF_NODE	14:35	14:35	13	"show_offline"
LEAF_NODE	14:49	14:49	11	,
ARGUMENT	14:51	14:51	11	setting
FIELD	14:51	14:51	12	setting
LEAF_NODE	14:51	14:51	13	setting
LEAF_NODE	14:58	14:58	11	)
LEAF_NODE	14:59	14:59	9	;
ITERATION	15:2	18:2	8	
KEYWORD	15:2	15:2	9	for
LEAF_NODE	15:2	15:2	10	for
LEAF_NODE	15:6	15:6	9	(
FOR_INIT	15:7	15:54	9	bnode = purple_blist_node_get_first_child ( node ) ;
EXPR	15:7	15:7	10	bnode = purple_blist_node_get_first_child ( node )
ASSIGN	15:7	15:15	11	bnode = purple_blist_node_get_first_child ( node )
LVAL	15:7	15:7	12	bnode
FIELD	15:7	15:7	13	bnode
LEAF_NODE	15:7	15:7	14	bnode
ASSIGN_OP	15:13	15:13	12	=
LEAF_NODE	15:13	15:13	13	=
RVAL	15:15	15:15	12	purple_blist_node_get_first_child ( node )
FUNCTION_CALL	15:15	15:53	13	purple_blist_node_get_first_child ( node )
CALLEE	15:15	15:15	14	purple_blist_node_get_first_child
LEAF_NODE	15:15	15:15	15	purple_blist_node_get_first_child
LEAF_NODE	15:48	15:48	14	(
ARGUMENT	15:49	15:49	14	node
FIELD	15:49	15:49	15	node
LEAF_NODE	15:49	15:49	16	node
LEAF_NODE	15:53	15:53	14	)
LEAF_NODE	15:54	15:54	10	;
CONDITION	16:7	16:7	9	bnode != NULL
EXPR	16:7	16:16	10	bnode != NULL
FIELD	16:7	16:7	11	bnode
LEAF_NODE	16:7	16:7	12	bnode
EQ_OPERATOR	16:13	16:13	11	!=
LEAF_NODE	16:13	16:13	12	!=
FIELD	16:16	16:16	11	NULL
LEAF_NODE	16:16	16:16	12	NULL
LEAF_NODE	16:20	16:20	9	;
FOR_EXPR	17:7	17:7	9	bnode = purple_blist_node_get_sibling_next ( bnode )
EXPR	17:7	17:7	10	bnode = purple_blist_node_get_sibling_next ( bnode )
ASSIGN	17:7	17:15	11	bnode = purple_blist_node_get_sibling_next ( bnode )
LVAL	17:7	17:7	12	bnode
FIELD	17:7	17:7	13	bnode
LEAF_NODE	17:7	17:7	14	bnode
ASSIGN_OP	17:13	17:13	12	=
LEAF_NODE	17:13	17:13	13	=
RVAL	17:15	17:15	12	purple_blist_node_get_sibling_next ( bnode )
FUNCTION_CALL	17:15	17:55	13	purple_blist_node_get_sibling_next ( bnode )
CALLEE	17:15	17:15	14	purple_blist_node_get_sibling_next
LEAF_NODE	17:15	17:15	15	purple_blist_node_get_sibling_next
LEAF_NODE	17:49	17:49	14	(
ARGUMENT	17:50	17:50	14	bnode
FIELD	17:50	17:50	15	bnode
LEAF_NODE	17:50	17:50	16	bnode
LEAF_NODE	17:55	17:55	14	)
LEAF_NODE	17:56	17:56	9	)
STATEMENTS	18:2	21:2	9	
LEAF_NODE	18:2	18:2	10	{
STATEMENTS	19:3	20:3	10	
EXPR_STATEMENT	19:3	19:61	11	purple_blist_node_set_bool ( bnode , "show_offline" , setting ) ;
EXPR	19:3	19:3	12	purple_blist_node_set_bool ( bnode , "show_offline" , setting )
FUNCTION_CALL	19:3	19:60	13	purple_blist_node_set_bool ( bnode , "show_offline" , setting )
CALLEE	19:3	19:3	14	purple_blist_node_set_bool
LEAF_NODE	19:3	19:3	15	purple_blist_node_set_bool
LEAF_NODE	19:29	19:29	14	(
ARGUMENT	19:30	19:30	14	bnode
FIELD	19:30	19:30	15	bnode
LEAF_NODE	19:30	19:30	16	bnode
LEAF_NODE	19:35	19:35	14	,
ARGUMENT	19:37	19:37	14	"show_offline"
FIELD	19:37	19:37	15	"show_offline"
LEAF_NODE	19:37	19:37	16	"show_offline"
LEAF_NODE	19:51	19:51	14	,
ARGUMENT	19:53	19:53	14	setting
FIELD	19:53	19:53	15	setting
LEAF_NODE	19:53	19:53	16	setting
LEAF_NODE	19:60	19:60	14	)
LEAF_NODE	19:61	19:61	12	;
EXPR_STATEMENT	20:3	20:49	11	pidgin_blist_update ( purple_get_blist ( ) , bnode ) ;
EXPR	20:3	20:3	12	pidgin_blist_update ( purple_get_blist ( ) , bnode )
FUNCTION_CALL	20:3	20:48	13	pidgin_blist_update ( purple_get_blist ( ) , bnode )
CALLEE	20:3	20:3	14	pidgin_blist_update
LEAF_NODE	20:3	20:3	15	pidgin_blist_update
LEAF_NODE	20:22	20:22	14	(
ARGUMENT	20:23	20:23	14	purple_get_blist ( )
FUNCTION_CALL	20:23	20:40	15	purple_get_blist ( )
CALLEE	20:23	20:23	16	purple_get_blist
LEAF_NODE	20:23	20:23	17	purple_get_blist
LEAF_NODE	20:39	20:39	16	(
LEAF_NODE	20:40	20:40	16	)
LEAF_NODE	20:41	20:41	14	,
ARGUMENT	20:43	20:43	14	bnode
FIELD	20:43	20:43	15	bnode
LEAF_NODE	20:43	20:43	16	bnode
LEAF_NODE	20:48	20:48	14	)
LEAF_NODE	20:49	20:49	12	;
LEAF_NODE	21:2	21:2	10	}
LEAF_NODE	22:1	22:1	7	}
SELECTION	22:3	22:8	3	
KEYWORD	22:3	22:3	4	else
LEAF_NODE	22:3	22:3	5	else
STATEMENTS	22:8	22:8	4	
SELECTION	22:8	22:46	5	
KEYWORD	22:8	22:8	6	if
LEAF_NODE	22:8	22:8	7	if
LEAF_NODE	22:11	22:11	6	(
CONDITION	22:12	22:12	6	PURPLE_BLIST_NODE_IS_GROUP ( node )
EXPR	22:12	22:12	7	PURPLE_BLIST_NODE_IS_GROUP ( node )
FUNCTION_CALL	22:12	22:43	8	PURPLE_BLIST_NODE_IS_GROUP ( node )
CALLEE	22:12	22:12	9	PURPLE_BLIST_NODE_IS_GROUP
LEAF_NODE	22:12	22:12	10	PURPLE_BLIST_NODE_IS_GROUP
LEAF_NODE	22:38	22:38	9	(
ARGUMENT	22:39	22:39	9	node
FIELD	22:39	22:39	10	node
LEAF_NODE	22:39	22:39	11	node
LEAF_NODE	22:43	22:43	9	)
LEAF_NODE	22:44	22:44	6	)
STATEMENTS	22:46	39:1	6	
LEAF_NODE	22:46	22:46	7	{
STATEMENTS	23:2	26:2	7	
SIMPLE_DECL	23:2	23:32	8	PurpleBlistNode * cnode , PurpleBlistNode * bnode ;
INIT_DECL_LIST	23:2	23:2	9	PurpleBlistNode * cnode , PurpleBlistNode * bnode
VAR_DECL	23:2	23:19	10	PurpleBlistNode * cnode
TYPE	23:2	23:18	11	PurpleBlistNode *
TYPE_NAME	23:2	23:2	12	PurpleBlistNode
LEAF_NODE	23:2	23:2	13	PurpleBlistNode
POINTER	23:18	23:18	12	*
LEAF_NODE	23:18	23:18	13	*
NAME	23:19	23:19	11	cnode
LEAF_NODE	23:19	23:19	12	cnode
LEAF_NODE	23:24	23:24	10	,
VAR_DECL	23:2	23:27	10	PurpleBlistNode * bnode
TYPE	23:2	23:26	11	PurpleBlistNode *
TYPE_NAME	23:2	23:2	12	PurpleBlistNode
LEAF_NODE	23:2	23:2	13	PurpleBlistNode
POINTER	23:26	23:26	12	*
LEAF_NODE	23:26	23:26	13	*
NAME	23:27	23:27	11	bnode
LEAF_NODE	23:27	23:27	12	bnode
LEAF_NODE	23:32	23:32	9	;
SIMPLE_DECL	24:2	24:70	8	gboolean setting ; setting = ! purple_blist_node_get_bool ( node , "show_offline" ) ;
VAR_DECL	24:2	24:11	9	gboolean setting ; setting = ! purple_blist_node_get_bool ( node , "show_offline" )
TYPE	24:2	24:2	10	gboolean
TYPE_NAME	24:2	24:2	11	gboolean
LEAF_NODE	24:2	24:2	12	gboolean
NAME	24:11	24:11	10	setting
LEAF_NODE	24:11	24:11	11	setting
LEAF_NODE	0:0	0:0	10	;
INIT	24:11	24:11	10	setting = ! purple_blist_node_get_bool ( node , "show_offline" )
ASSIGN	24:11	24:21	11	setting = ! purple_blist_node_get_bool ( node , "show_offline" )
LVAL	24:11	24:11	12	setting
NAME	24:11	24:11	13	setting
LEAF_NODE	24:11	24:11	14	setting
ASSIGN_OP	24:19	24:19	12	=
LEAF_NODE	24:19	24:19	13	=
RVAL	24:21	24:21	12	! purple_blist_node_get_bool ( node , "show_offline" )
UNARY_EXPR	24:21	24:22	13	! purple_blist_node_get_bool ( node , "show_offline" )
UNARY_OPERATOR	24:21	24:21	14	!
LEAF_NODE	24:21	24:21	15	!
FUNCTION_CALL	24:22	24:69	14	purple_blist_node_get_bool ( node , "show_offline" )
CALLEE	24:22	24:22	15	purple_blist_node_get_bool
LEAF_NODE	24:22	24:22	16	purple_blist_node_get_bool
LEAF_NODE	24:48	24:48	15	(
ARGUMENT	24:49	24:49	15	node
FIELD	24:49	24:49	16	node
LEAF_NODE	24:49	24:49	17	node
LEAF_NODE	24:53	24:53	15	,
ARGUMENT	24:55	24:55	15	"show_offline"
FIELD	24:55	24:55	16	"show_offline"
LEAF_NODE	24:55	24:55	17	"show_offline"
LEAF_NODE	24:69	24:69	15	)
LEAF_NODE	24:70	24:70	9	;
EXPR_STATEMENT	25:2	25:59	8	purple_blist_node_set_bool ( node , "show_offline" , setting ) ;
EXPR	25:2	25:2	9	purple_blist_node_set_bool ( node , "show_offline" , setting )
FUNCTION_CALL	25:2	25:58	10	purple_blist_node_set_bool ( node , "show_offline" , setting )
CALLEE	25:2	25:2	11	purple_blist_node_set_bool
LEAF_NODE	25:2	25:2	12	purple_blist_node_set_bool
LEAF_NODE	25:28	25:28	11	(
ARGUMENT	25:29	25:29	11	node
FIELD	25:29	25:29	12	node
LEAF_NODE	25:29	25:29	13	node
LEAF_NODE	25:33	25:33	11	,
ARGUMENT	25:35	25:35	11	"show_offline"
FIELD	25:35	25:35	12	"show_offline"
LEAF_NODE	25:35	25:35	13	"show_offline"
LEAF_NODE	25:49	25:49	11	,
ARGUMENT	25:51	25:51	11	setting
FIELD	25:51	25:51	12	setting
LEAF_NODE	25:51	25:51	13	setting
LEAF_NODE	25:58	25:58	11	)
LEAF_NODE	25:59	25:59	9	;
ITERATION	26:2	29:2	8	
KEYWORD	26:2	26:2	9	for
LEAF_NODE	26:2	26:2	10	for
LEAF_NODE	26:6	26:6	9	(
FOR_INIT	26:7	26:54	9	cnode = purple_blist_node_get_first_child ( node ) ;
EXPR	26:7	26:7	10	cnode = purple_blist_node_get_first_child ( node )
ASSIGN	26:7	26:15	11	cnode = purple_blist_node_get_first_child ( node )
LVAL	26:7	26:7	12	cnode
FIELD	26:7	26:7	13	cnode
LEAF_NODE	26:7	26:7	14	cnode
ASSIGN_OP	26:13	26:13	12	=
LEAF_NODE	26:13	26:13	13	=
RVAL	26:15	26:15	12	purple_blist_node_get_first_child ( node )
FUNCTION_CALL	26:15	26:53	13	purple_blist_node_get_first_child ( node )
CALLEE	26:15	26:15	14	purple_blist_node_get_first_child
LEAF_NODE	26:15	26:15	15	purple_blist_node_get_first_child
LEAF_NODE	26:48	26:48	14	(
ARGUMENT	26:49	26:49	14	node
FIELD	26:49	26:49	15	node
LEAF_NODE	26:49	26:49	16	node
LEAF_NODE	26:53	26:53	14	)
LEAF_NODE	26:54	26:54	10	;
CONDITION	27:7	27:7	9	cnode != NULL
EXPR	27:7	27:16	10	cnode != NULL
FIELD	27:7	27:7	11	cnode
LEAF_NODE	27:7	27:7	12	cnode
EQ_OPERATOR	27:13	27:13	11	!=
LEAF_NODE	27:13	27:13	12	!=
FIELD	27:16	27:16	11	NULL
LEAF_NODE	27:16	27:16	12	NULL
LEAF_NODE	27:20	27:20	9	;
FOR_EXPR	28:7	28:7	9	cnode = purple_blist_node_get_sibling_next ( cnode )
EXPR	28:7	28:7	10	cnode = purple_blist_node_get_sibling_next ( cnode )
ASSIGN	28:7	28:15	11	cnode = purple_blist_node_get_sibling_next ( cnode )
LVAL	28:7	28:7	12	cnode
FIELD	28:7	28:7	13	cnode
LEAF_NODE	28:7	28:7	14	cnode
ASSIGN_OP	28:13	28:13	12	=
LEAF_NODE	28:13	28:13	13	=
RVAL	28:15	28:15	12	purple_blist_node_get_sibling_next ( cnode )
FUNCTION_CALL	28:15	28:55	13	purple_blist_node_get_sibling_next ( cnode )
CALLEE	28:15	28:15	14	purple_blist_node_get_sibling_next
LEAF_NODE	28:15	28:15	15	purple_blist_node_get_sibling_next
LEAF_NODE	28:49	28:49	14	(
ARGUMENT	28:50	28:50	14	cnode
FIELD	28:50	28:50	15	cnode
LEAF_NODE	28:50	28:50	16	cnode
LEAF_NODE	28:55	28:55	14	)
LEAF_NODE	28:56	28:56	9	)
STATEMENTS	29:2	38:2	9	
LEAF_NODE	29:2	29:2	10	{
STATEMENTS	30:3	31:3	10	
EXPR_STATEMENT	30:3	30:61	11	purple_blist_node_set_bool ( cnode , "show_offline" , setting ) ;
EXPR	30:3	30:3	12	purple_blist_node_set_bool ( cnode , "show_offline" , setting )
FUNCTION_CALL	30:3	30:60	13	purple_blist_node_set_bool ( cnode , "show_offline" , setting )
CALLEE	30:3	30:3	14	purple_blist_node_set_bool
LEAF_NODE	30:3	30:3	15	purple_blist_node_set_bool
LEAF_NODE	30:29	30:29	14	(
ARGUMENT	30:30	30:30	14	cnode
FIELD	30:30	30:30	15	cnode
LEAF_NODE	30:30	30:30	16	cnode
LEAF_NODE	30:35	30:35	14	,
ARGUMENT	30:37	30:37	14	"show_offline"
FIELD	30:37	30:37	15	"show_offline"
LEAF_NODE	30:37	30:37	16	"show_offline"
LEAF_NODE	30:51	30:51	14	,
ARGUMENT	30:53	30:53	14	setting
FIELD	30:53	30:53	15	setting
LEAF_NODE	30:53	30:53	16	setting
LEAF_NODE	30:60	30:60	14	)
LEAF_NODE	30:61	30:61	12	;
ITERATION	31:3	34:3	11	
KEYWORD	31:3	31:3	12	for
LEAF_NODE	31:3	31:3	13	for
LEAF_NODE	31:7	31:7	12	(
FOR_INIT	31:8	31:56	12	bnode = purple_blist_node_get_first_child ( cnode ) ;
EXPR	31:8	31:8	13	bnode = purple_blist_node_get_first_child ( cnode )
ASSIGN	31:8	31:16	14	bnode = purple_blist_node_get_first_child ( cnode )
LVAL	31:8	31:8	15	bnode
FIELD	31:8	31:8	16	bnode
LEAF_NODE	31:8	31:8	17	bnode
ASSIGN_OP	31:14	31:14	15	=
LEAF_NODE	31:14	31:14	16	=
RVAL	31:16	31:16	15	purple_blist_node_get_first_child ( cnode )
FUNCTION_CALL	31:16	31:55	16	purple_blist_node_get_first_child ( cnode )
CALLEE	31:16	31:16	17	purple_blist_node_get_first_child
LEAF_NODE	31:16	31:16	18	purple_blist_node_get_first_child
LEAF_NODE	31:49	31:49	17	(
ARGUMENT	31:50	31:50	17	cnode
FIELD	31:50	31:50	18	cnode
LEAF_NODE	31:50	31:50	19	cnode
LEAF_NODE	31:55	31:55	17	)
LEAF_NODE	31:56	31:56	13	;
CONDITION	32:8	32:8	12	bnode != NULL
EXPR	32:8	32:17	13	bnode != NULL
FIELD	32:8	32:8	14	bnode
LEAF_NODE	32:8	32:8	15	bnode
EQ_OPERATOR	32:14	32:14	14	!=
LEAF_NODE	32:14	32:14	15	!=
FIELD	32:17	32:17	14	NULL
LEAF_NODE	32:17	32:17	15	NULL
LEAF_NODE	32:21	32:21	12	;
FOR_EXPR	33:8	33:8	12	bnode = purple_blist_node_get_sibling_next ( bnode )
EXPR	33:8	33:8	13	bnode = purple_blist_node_get_sibling_next ( bnode )
ASSIGN	33:8	33:16	14	bnode = purple_blist_node_get_sibling_next ( bnode )
LVAL	33:8	33:8	15	bnode
FIELD	33:8	33:8	16	bnode
LEAF_NODE	33:8	33:8	17	bnode
ASSIGN_OP	33:14	33:14	15	=
LEAF_NODE	33:14	33:14	16	=
RVAL	33:16	33:16	15	purple_blist_node_get_sibling_next ( bnode )
FUNCTION_CALL	33:16	33:56	16	purple_blist_node_get_sibling_next ( bnode )
CALLEE	33:16	33:16	17	purple_blist_node_get_sibling_next
LEAF_NODE	33:16	33:16	18	purple_blist_node_get_sibling_next
LEAF_NODE	33:50	33:50	17	(
ARGUMENT	33:51	33:51	17	bnode
FIELD	33:51	33:51	18	bnode
LEAF_NODE	33:51	33:51	19	bnode
LEAF_NODE	33:56	33:56	17	)
LEAF_NODE	33:57	33:57	12	)
STATEMENTS	34:3	37:3	12	
LEAF_NODE	34:3	34:3	13	{
STATEMENTS	35:4	36:4	13	
EXPR_STATEMENT	35:4	35:62	14	purple_blist_node_set_bool ( bnode , "show_offline" , setting ) ;
EXPR	35:4	35:4	15	purple_blist_node_set_bool ( bnode , "show_offline" , setting )
FUNCTION_CALL	35:4	35:61	16	purple_blist_node_set_bool ( bnode , "show_offline" , setting )
CALLEE	35:4	35:4	17	purple_blist_node_set_bool
LEAF_NODE	35:4	35:4	18	purple_blist_node_set_bool
LEAF_NODE	35:30	35:30	17	(
ARGUMENT	35:31	35:31	17	bnode
FIELD	35:31	35:31	18	bnode
LEAF_NODE	35:31	35:31	19	bnode
LEAF_NODE	35:36	35:36	17	,
ARGUMENT	35:38	35:38	17	"show_offline"
FIELD	35:38	35:38	18	"show_offline"
LEAF_NODE	35:38	35:38	19	"show_offline"
LEAF_NODE	35:52	35:52	17	,
ARGUMENT	35:54	35:54	17	setting
FIELD	35:54	35:54	18	setting
LEAF_NODE	35:54	35:54	19	setting
LEAF_NODE	35:61	35:61	17	)
LEAF_NODE	35:62	35:62	15	;
EXPR_STATEMENT	36:4	36:50	14	pidgin_blist_update ( purple_get_blist ( ) , bnode ) ;
EXPR	36:4	36:4	15	pidgin_blist_update ( purple_get_blist ( ) , bnode )
FUNCTION_CALL	36:4	36:49	16	pidgin_blist_update ( purple_get_blist ( ) , bnode )
CALLEE	36:4	36:4	17	pidgin_blist_update
LEAF_NODE	36:4	36:4	18	pidgin_blist_update
LEAF_NODE	36:23	36:23	17	(
ARGUMENT	36:24	36:24	17	purple_get_blist ( )
FUNCTION_CALL	36:24	36:41	18	purple_get_blist ( )
CALLEE	36:24	36:24	19	purple_get_blist
LEAF_NODE	36:24	36:24	20	purple_get_blist
LEAF_NODE	36:40	36:40	19	(
LEAF_NODE	36:41	36:41	19	)
LEAF_NODE	36:42	36:42	17	,
ARGUMENT	36:44	36:44	17	bnode
FIELD	36:44	36:44	18	bnode
LEAF_NODE	36:44	36:44	19	bnode
LEAF_NODE	36:49	36:49	17	)
LEAF_NODE	36:50	36:50	15	;
LEAF_NODE	37:3	37:3	13	}
LEAF_NODE	38:2	38:2	10	}
LEAF_NODE	39:1	39:1	7	}
LEAF_NODE	40:0	40:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	20:0	1	
RETURN_TYPE	2:0	2:7	2	static gboolean
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	gboolean
LEAF_NODE	2:7	2:7	4	gboolean
FUNCTION_NAME	2:16	2:16	2	pidgin_blist_select_notebook_page_cb
LEAF_NODE	2:16	2:16	3	pidgin_blist_select_notebook_page_cb
PARAMETER_LIST	2:52	2:71	2	( gpointer user_data )
LEAF_NODE	2:52	2:52	3	(
PARAMETER_DECL	2:53	2:62	3	gpointer user_data
TYPE	2:53	2:53	4	gpointer
TYPE_NAME	2:53	2:53	5	gpointer
LEAF_NODE	2:53	2:53	6	gpointer
NAME	2:62	2:62	4	user_data
LEAF_NODE	2:62	2:62	5	user_data
LEAF_NODE	2:71	2:71	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	19:1	2	
SIMPLE_DECL	4:1	4:57	3	PidginBuddyList * gtkblist ; gtkblist = ( PidginBuddyList * ) user_data ;
VAR_DECL	4:1	4:18	4	PidginBuddyList * gtkblist ; gtkblist = ( PidginBuddyList * ) user_data
TYPE	4:1	4:17	5	PidginBuddyList *
TYPE_NAME	4:1	4:1	6	PidginBuddyList
LEAF_NODE	4:1	4:1	7	PidginBuddyList
POINTER	4:17	4:17	6	*
LEAF_NODE	4:17	4:17	7	*
NAME	4:18	4:18	5	gtkblist
LEAF_NODE	4:18	4:18	6	gtkblist
LEAF_NODE	0:0	0:0	5	;
INIT	4:18	4:18	5	gtkblist = ( PidginBuddyList * ) user_data
ASSIGN	4:18	4:29	6	gtkblist = ( PidginBuddyList * ) user_data
LVAL	4:18	4:18	7	gtkblist
NAME	4:18	4:18	8	gtkblist
LEAF_NODE	4:18	4:18	9	gtkblist
ASSIGN_OP	4:27	4:27	7	=
LEAF_NODE	4:27	4:27	8	=
RVAL	4:29	4:48	7	( PidginBuddyList * ) user_data
LEAF_NODE	4:29	4:29	8	(
TYPE_NAME	4:30	4:30	8	PidginBuddyList
LEAF_NODE	4:30	4:30	9	PidginBuddyList
LEAF_NODE	4:46	4:46	8	*
LEAF_NODE	4:47	4:47	8	)
FIELD	4:48	4:48	8	user_data
LEAF_NODE	4:48	4:48	9	user_data
LEAF_NODE	4:57	4:57	4	;
SIMPLE_DECL	5:1	5:15	3	int errors ; errors = 0 ;
VAR_DECL	5:1	5:5	4	int errors ; errors = 0
TYPE	5:1	5:1	5	int
TYPE_NAME	5:1	5:1	6	int
LEAF_NODE	5:1	5:1	7	int
NAME	5:5	5:5	5	errors
LEAF_NODE	5:5	5:5	6	errors
LEAF_NODE	0:0	0:0	5	;
INIT	5:5	5:5	5	errors = 0
ASSIGN	5:5	5:14	6	errors = 0
LVAL	5:5	5:5	7	errors
NAME	5:5	5:5	8	errors
LEAF_NODE	5:5	5:5	9	errors
ASSIGN_OP	5:12	5:12	7	=
LEAF_NODE	5:12	5:12	8	=
RVAL	5:14	5:14	7	0
FIELD	5:14	5:14	8	0
LEAF_NODE	5:14	5:14	9	0
LEAF_NODE	5:15	5:15	4	;
SIMPLE_DECL	6:1	6:19	3	GList * list ; list = NULL ;
VAR_DECL	6:1	6:8	4	GList * list ; list = NULL
TYPE	6:1	6:7	5	GList *
TYPE_NAME	6:1	6:1	6	GList
LEAF_NODE	6:1	6:1	7	GList
POINTER	6:7	6:7	6	*
LEAF_NODE	6:7	6:7	7	*
NAME	6:8	6:8	5	list
LEAF_NODE	6:8	6:8	6	list
LEAF_NODE	0:0	0:0	5	;
INIT	6:8	6:8	5	list = NULL
ASSIGN	6:8	6:15	6	list = NULL
LVAL	6:8	6:8	7	list
NAME	6:8	6:8	8	list
LEAF_NODE	6:8	6:8	9	list
ASSIGN_OP	6:13	6:13	7	=
LEAF_NODE	6:13	6:13	8	=
RVAL	6:15	6:15	7	NULL
FIELD	6:15	6:15	8	NULL
LEAF_NODE	6:15	6:15	9	NULL
LEAF_NODE	6:19	6:19	4	;
SIMPLE_DECL	7:1	7:29	3	PidginBuddyListPrivate * priv ;
VAR_DECL	7:1	7:25	4	PidginBuddyListPrivate * priv
TYPE	7:1	7:24	5	PidginBuddyListPrivate *
TYPE_NAME	7:1	7:1	6	PidginBuddyListPrivate
LEAF_NODE	7:1	7:1	7	PidginBuddyListPrivate
POINTER	7:24	7:24	6	*
LEAF_NODE	7:24	7:24	7	*
NAME	7:25	7:25	5	priv
LEAF_NODE	7:25	7:25	6	priv
LEAF_NODE	7:29	7:29	4	;
EXPR_STATEMENT	8:1	8:47	3	priv = PIDGIN_BUDDY_LIST_GET_PRIVATE ( gtkblist ) ;
EXPR	8:1	8:1	4	priv = PIDGIN_BUDDY_LIST_GET_PRIVATE ( gtkblist )
ASSIGN	8:1	8:8	5	priv = PIDGIN_BUDDY_LIST_GET_PRIVATE ( gtkblist )
LVAL	8:1	8:1	6	priv
FIELD	8:1	8:1	7	priv
LEAF_NODE	8:1	8:1	8	priv
ASSIGN_OP	8:6	8:6	6	=
LEAF_NODE	8:6	8:6	7	=
RVAL	8:8	8:8	6	PIDGIN_BUDDY_LIST_GET_PRIVATE ( gtkblist )
FUNCTION_CALL	8:8	8:46	7	PIDGIN_BUDDY_LIST_GET_PRIVATE ( gtkblist )
CALLEE	8:8	8:8	8	PIDGIN_BUDDY_LIST_GET_PRIVATE
LEAF_NODE	8:8	8:8	9	PIDGIN_BUDDY_LIST_GET_PRIVATE
LEAF_NODE	8:37	8:37	8	(
ARGUMENT	8:38	8:38	8	gtkblist
FIELD	8:38	8:38	9	gtkblist
LEAF_NODE	8:38	8:38	10	gtkblist
LEAF_NODE	8:46	8:46	8	)
LEAF_NODE	8:47	8:47	4	;
EXPR_STATEMENT	9:1	9:30	3	priv -> select_page_timeout = 0 ;
EXPR	9:1	9:1	4	priv -> select_page_timeout = 0
ASSIGN	9:1	9:29	5	priv -> select_page_timeout = 0
LVAL	9:1	9:1	6	priv -> select_page_timeout
FIELD	9:1	9:7	7	priv -> select_page_timeout
LEAF_NODE	9:1	9:1	8	priv
LEAF_NODE	9:5	9:5	8	->
LEAF_NODE	9:7	9:7	8	select_page_timeout
ASSIGN_OP	9:27	9:27	6	=
LEAF_NODE	9:27	9:27	7	=
RVAL	9:29	9:29	6	0
FIELD	9:29	9:29	7	0
LEAF_NODE	9:29	9:29	8	0
LEAF_NODE	9:30	9:30	4	;
SELECTION	11:1	11:37	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	priv -> error_scrollbook != NULL
EXPR	11:5	11:31	5	priv -> error_scrollbook != NULL
FIELD	11:5	11:11	6	priv -> error_scrollbook
LEAF_NODE	11:5	11:5	7	priv
LEAF_NODE	11:9	11:9	7	->
LEAF_NODE	11:11	11:11	7	error_scrollbook
EQ_OPERATOR	11:28	11:28	6	!=
LEAF_NODE	11:28	11:28	7	!=
FIELD	11:31	11:31	6	NULL
LEAF_NODE	11:31	11:31	7	NULL
LEAF_NODE	11:35	11:35	4	)
STATEMENTS	11:37	13:1	4	
LEAF_NODE	11:37	11:37	5	{
STATEMENTS	12:2	12:2	5	
EXPR_STATEMENT	12:2	12:83	6	errors = gtk_notebook_get_n_pages ( GTK_NOTEBOOK ( priv -> error_scrollbook -> notebook ) ) ;
EXPR	12:2	12:2	7	errors = gtk_notebook_get_n_pages ( GTK_NOTEBOOK ( priv -> error_scrollbook -> notebook ) )
ASSIGN	12:2	12:11	8	errors = gtk_notebook_get_n_pages ( GTK_NOTEBOOK ( priv -> error_scrollbook -> notebook ) )
LVAL	12:2	12:2	9	errors
FIELD	12:2	12:2	10	errors
LEAF_NODE	12:2	12:2	11	errors
ASSIGN_OP	12:9	12:9	9	=
LEAF_NODE	12:9	12:9	10	=
RVAL	12:11	12:11	9	gtk_notebook_get_n_pages ( GTK_NOTEBOOK ( priv -> error_scrollbook -> notebook ) )
FUNCTION_CALL	12:11	12:82	10	gtk_notebook_get_n_pages ( GTK_NOTEBOOK ( priv -> error_scrollbook -> notebook ) )
CALLEE	12:11	12:11	11	gtk_notebook_get_n_pages
LEAF_NODE	12:11	12:11	12	gtk_notebook_get_n_pages
LEAF_NODE	12:35	12:35	11	(
ARGUMENT	12:36	12:36	11	GTK_NOTEBOOK ( priv -> error_scrollbook -> notebook )
FUNCTION_CALL	12:36	12:81	12	GTK_NOTEBOOK ( priv -> error_scrollbook -> notebook )
CALLEE	12:36	12:36	13	GTK_NOTEBOOK
LEAF_NODE	12:36	12:36	14	GTK_NOTEBOOK
LEAF_NODE	12:48	12:48	13	(
ARGUMENT	12:49	12:49	13	priv -> error_scrollbook -> notebook
FIELD	12:49	12:73	14	priv -> error_scrollbook -> notebook
LEAF_NODE	12:49	12:49	15	priv
LEAF_NODE	12:53	12:53	15	->
LEAF_NODE	12:55	12:55	15	error_scrollbook
LEAF_NODE	12:71	12:71	15	->
LEAF_NODE	12:73	12:73	15	notebook
LEAF_NODE	12:81	12:81	13	)
LEAF_NODE	12:82	12:82	11	)
LEAF_NODE	12:83	12:83	7	;
LEAF_NODE	13:1	13:1	5	}
SELECTION	14:1	14:66	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	( list = purple_accounts_get_all_active ( ) ) != NULL || errors
EXPR	14:5	14:5	5	( list = purple_accounts_get_all_active ( ) ) != NULL || errors
OR	14:5	14:58	6	( list = purple_accounts_get_all_active ( ) ) != NULL || errors
EXPR	14:5	14:50	7	( list = purple_accounts_get_all_active ( ) ) != NULL
LEAF_NODE	14:5	14:5	8	(
ASSIGN	14:6	14:13	8	list = purple_accounts_get_all_active ( )
LVAL	14:6	14:6	9	list
FIELD	14:6	14:6	10	list
LEAF_NODE	14:6	14:6	11	list
ASSIGN_OP	14:11	14:11	9	=
LEAF_NODE	14:11	14:11	10	=
RVAL	14:13	14:13	9	purple_accounts_get_all_active ( )
FUNCTION_CALL	14:13	14:44	10	purple_accounts_get_all_active ( )
CALLEE	14:13	14:13	11	purple_accounts_get_all_active
LEAF_NODE	14:13	14:13	12	purple_accounts_get_all_active
LEAF_NODE	14:43	14:43	11	(
LEAF_NODE	14:44	14:44	11	)
LEAF_NODE	14:45	14:45	8	)
EQ_OPERATOR	14:47	14:47	8	!=
LEAF_NODE	14:47	14:47	9	!=
FIELD	14:50	14:50	8	NULL
LEAF_NODE	14:50	14:50	9	NULL
LEAF_NODE	14:55	14:55	7	||
EXPR	14:58	14:58	7	errors
FIELD	14:58	14:58	8	errors
LEAF_NODE	14:58	14:58	9	errors
LEAF_NODE	14:64	14:64	4	)
STATEMENTS	14:66	17:1	4	
LEAF_NODE	14:66	14:66	5	{
STATEMENTS	15:2	16:2	5	
EXPR_STATEMENT	15:2	15:68	6	gtk_notebook_set_current_page ( GTK_NOTEBOOK ( gtkblist -> notebook ) , 1 ) ;
EXPR	15:2	15:2	7	gtk_notebook_set_current_page ( GTK_NOTEBOOK ( gtkblist -> notebook ) , 1 )
FUNCTION_CALL	15:2	15:67	8	gtk_notebook_set_current_page ( GTK_NOTEBOOK ( gtkblist -> notebook ) , 1 )
CALLEE	15:2	15:2	9	gtk_notebook_set_current_page
LEAF_NODE	15:2	15:2	10	gtk_notebook_set_current_page
LEAF_NODE	15:31	15:31	9	(
ARGUMENT	15:32	15:32	9	GTK_NOTEBOOK ( gtkblist -> notebook )
FUNCTION_CALL	15:32	15:63	10	GTK_NOTEBOOK ( gtkblist -> notebook )
CALLEE	15:32	15:32	11	GTK_NOTEBOOK
LEAF_NODE	15:32	15:32	12	GTK_NOTEBOOK
LEAF_NODE	15:44	15:44	11	(
ARGUMENT	15:45	15:45	11	gtkblist -> notebook
FIELD	15:45	15:55	12	gtkblist -> notebook
LEAF_NODE	15:45	15:45	13	gtkblist
LEAF_NODE	15:53	15:53	13	->
LEAF_NODE	15:55	15:55	13	notebook
LEAF_NODE	15:63	15:63	11	)
LEAF_NODE	15:64	15:64	9	,
ARGUMENT	15:66	15:66	9	1
FIELD	15:66	15:66	10	1
LEAF_NODE	15:66	15:66	11	1
LEAF_NODE	15:67	15:67	9	)
LEAF_NODE	15:68	15:68	7	;
EXPR_STATEMENT	16:2	16:19	6	g_list_free ( list ) ;
EXPR	16:2	16:2	7	g_list_free ( list )
FUNCTION_CALL	16:2	16:18	8	g_list_free ( list )
CALLEE	16:2	16:2	9	g_list_free
LEAF_NODE	16:2	16:2	10	g_list_free
LEAF_NODE	16:13	16:13	9	(
ARGUMENT	16:14	16:14	9	list
FIELD	16:14	16:14	10	list
LEAF_NODE	16:14	16:14	11	list
LEAF_NODE	16:18	16:18	9	)
LEAF_NODE	16:19	16:19	7	;
LEAF_NODE	17:1	17:1	5	}
SELECTION	17:3	18:2	3	
KEYWORD	17:3	17:3	4	else
LEAF_NODE	17:3	17:3	5	else
STATEMENTS	18:2	18:2	4	
EXPR_STATEMENT	18:2	18:68	5	gtk_notebook_set_current_page ( GTK_NOTEBOOK ( gtkblist -> notebook ) , 0 ) ;
EXPR	18:2	18:2	6	gtk_notebook_set_current_page ( GTK_NOTEBOOK ( gtkblist -> notebook ) , 0 )
FUNCTION_CALL	18:2	18:67	7	gtk_notebook_set_current_page ( GTK_NOTEBOOK ( gtkblist -> notebook ) , 0 )
CALLEE	18:2	18:2	8	gtk_notebook_set_current_page
LEAF_NODE	18:2	18:2	9	gtk_notebook_set_current_page
LEAF_NODE	18:31	18:31	8	(
ARGUMENT	18:32	18:32	8	GTK_NOTEBOOK ( gtkblist -> notebook )
FUNCTION_CALL	18:32	18:63	9	GTK_NOTEBOOK ( gtkblist -> notebook )
CALLEE	18:32	18:32	10	GTK_NOTEBOOK
LEAF_NODE	18:32	18:32	11	GTK_NOTEBOOK
LEAF_NODE	18:44	18:44	10	(
ARGUMENT	18:45	18:45	10	gtkblist -> notebook
FIELD	18:45	18:55	11	gtkblist -> notebook
LEAF_NODE	18:45	18:45	12	gtkblist
LEAF_NODE	18:53	18:53	12	->
LEAF_NODE	18:55	18:55	12	notebook
LEAF_NODE	18:63	18:63	10	)
LEAF_NODE	18:64	18:64	8	,
ARGUMENT	18:66	18:66	8	0
FIELD	18:66	18:66	9	0
LEAF_NODE	18:66	18:66	10	0
LEAF_NODE	18:67	18:67	8	)
LEAF_NODE	18:68	18:68	6	;
JUMP_STATEMENT	19:1	19:13	3	return FALSE ;
KEYWORD	19:1	19:1	4	return
LEAF_NODE	19:1	19:1	5	return
DESTINATION	19:8	19:8	4	FALSE
EXPR	19:8	19:8	5	FALSE
FIELD	19:8	19:8	6	FALSE
LEAF_NODE	19:8	19:8	7	FALSE
LEAF_NODE	19:13	19:13	4	;
LEAF_NODE	20:0	20:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	27:0	1	
RETURN_TYPE	1:0	1:7	2	static size_t
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	size_t
LEAF_NODE	1:7	1:7	4	size_t
FUNCTION_NAME	2:0	2:0	2	uint64_pack
LEAF_NODE	2:0	2:0	3	uint64_pack
PARAMETER_LIST	2:11	2:40	2	( uint64_t value , uint8_t * out )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:21	3	uint64_t value
TYPE	2:12	2:12	4	uint64_t
TYPE_NAME	2:12	2:12	5	uint64_t
LEAF_NODE	2:12	2:12	6	uint64_t
NAME	2:21	2:21	4	value
LEAF_NODE	2:21	2:21	5	value
LEAF_NODE	2:26	2:26	3	,
PARAMETER_DECL	2:28	2:37	3	uint8_t * out
TYPE	2:28	2:36	4	uint8_t *
TYPE_NAME	2:28	2:28	5	uint8_t
LEAF_NODE	2:28	2:28	6	uint8_t
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	out
LEAF_NODE	2:37	2:37	5	out
LEAF_NODE	2:40	2:40	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	26:1	2	
SIMPLE_DECL	4:1	4:39	3	uint32_t hi ; hi = ( uint32_t ) ( value >> 32 ) ;
VAR_DECL	4:1	4:10	4	uint32_t hi ; hi = ( uint32_t ) ( value >> 32 )
TYPE	4:1	4:1	5	uint32_t
TYPE_NAME	4:1	4:1	6	uint32_t
LEAF_NODE	4:1	4:1	7	uint32_t
NAME	4:10	4:10	5	hi
LEAF_NODE	4:10	4:10	6	hi
LEAF_NODE	0:0	0:0	5	;
INIT	4:10	4:10	5	hi = ( uint32_t ) ( value >> 32 )
ASSIGN	4:10	4:15	6	hi = ( uint32_t ) ( value >> 32 )
LVAL	4:10	4:10	7	hi
NAME	4:10	4:10	8	hi
LEAF_NODE	4:10	4:10	9	hi
ASSIGN_OP	4:13	4:13	7	=
LEAF_NODE	4:13	4:13	8	=
RVAL	4:15	4:38	7	( uint32_t ) ( value >> 32 )
LEAF_NODE	4:15	4:15	8	(
TYPE_NAME	4:16	4:16	8	uint32_t
LEAF_NODE	4:16	4:16	9	uint32_t
LEAF_NODE	4:24	4:24	8	)
LEAF_NODE	4:26	4:26	8	(
FIELD	4:27	4:27	8	value
LEAF_NODE	4:27	4:27	9	value
LEAF_NODE	4:33	4:33	8	>>
FIELD	4:36	4:36	8	32
LEAF_NODE	4:36	4:36	9	32
LEAF_NODE	4:38	4:38	8	)
LEAF_NODE	4:39	4:39	4	;
SIMPLE_DECL	5:1	5:31	3	uint32_t lo ; lo = ( uint32_t ) value ;
VAR_DECL	5:1	5:10	4	uint32_t lo ; lo = ( uint32_t ) value
TYPE	5:1	5:1	5	uint32_t
TYPE_NAME	5:1	5:1	6	uint32_t
LEAF_NODE	5:1	5:1	7	uint32_t
NAME	5:10	5:10	5	lo
LEAF_NODE	5:10	5:10	6	lo
LEAF_NODE	0:0	0:0	5	;
INIT	5:10	5:10	5	lo = ( uint32_t ) value
ASSIGN	5:10	5:15	6	lo = ( uint32_t ) value
LVAL	5:10	5:10	7	lo
NAME	5:10	5:10	8	lo
LEAF_NODE	5:10	5:10	9	lo
ASSIGN_OP	5:13	5:13	7	=
LEAF_NODE	5:13	5:13	8	=
RVAL	5:15	5:26	7	( uint32_t ) value
LEAF_NODE	5:15	5:15	8	(
TYPE_NAME	5:16	5:16	8	uint32_t
LEAF_NODE	5:16	5:16	9	uint32_t
LEAF_NODE	5:24	5:24	8	)
FIELD	5:26	5:26	8	value
LEAF_NODE	5:26	5:26	9	value
LEAF_NODE	5:31	5:31	4	;
LEAF_NODE	6:1	6:1	3	unsigned
EXPR_STATEMENT	6:10	6:12	3	rv ;
EXPR	6:10	6:10	4	rv
FIELD	6:10	6:10	5	rv
LEAF_NODE	6:10	6:10	6	rv
LEAF_NODE	6:12	6:12	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	hi == 0
EXPR	7:5	7:11	5	hi == 0
FIELD	7:5	7:5	6	hi
LEAF_NODE	7:5	7:5	7	hi
EQ_OPERATOR	7:8	7:8	6	==
LEAF_NODE	7:8	7:8	7	==
FIELD	7:11	7:11	6	0
LEAF_NODE	7:11	7:11	7	0
LEAF_NODE	7:12	7:12	4	)
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:40	5	return uint32_pack ( ( uint32_t ) lo , out ) ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
DESTINATION	8:9	8:9	6	uint32_pack ( ( uint32_t ) lo , out )
EXPR	8:9	8:9	7	uint32_pack ( ( uint32_t ) lo , out )
FUNCTION_CALL	8:9	8:39	8	uint32_pack ( ( uint32_t ) lo , out )
CALLEE	8:9	8:9	9	uint32_pack
LEAF_NODE	8:9	8:9	10	uint32_pack
LEAF_NODE	8:20	8:20	9	(
ARGUMENT	8:21	8:32	9	( uint32_t ) lo
LEAF_NODE	8:21	8:21	10	(
TYPE_NAME	8:22	8:22	10	uint32_t
LEAF_NODE	8:22	8:22	11	uint32_t
LEAF_NODE	8:30	8:30	10	)
FIELD	8:32	8:32	10	lo
LEAF_NODE	8:32	8:32	11	lo
LEAF_NODE	8:34	8:34	9	,
ARGUMENT	8:36	8:36	9	out
FIELD	8:36	8:36	10	out
LEAF_NODE	8:36	8:36	11	out
LEAF_NODE	8:39	8:39	9	)
LEAF_NODE	8:40	8:40	6	;
LEAF_NODE	9:1	9:1	3	out
LEAF_NODE	9:4	9:4	3	[
LEAF_NODE	9:5	9:5	3	0
LEAF_NODE	9:6	9:6	3	]
LEAF_NODE	9:8	9:8	3	=
LEAF_NODE	9:10	9:10	3	(
LEAF_NODE	9:11	9:11	3	lo
LEAF_NODE	9:13	9:13	3	)
LEAF_NODE	9:15	9:15	3	|
EXPR_STATEMENT	9:17	9:21	3	0x80 ;
EXPR	9:17	9:17	4	0x80
FIELD	9:17	9:17	5	0x80
LEAF_NODE	9:17	9:17	6	0x80
LEAF_NODE	9:21	9:21	4	;
EXPR_STATEMENT	10:1	10:26	3	out [ 1 ] = ( lo >> 7 ) | 0x80 ;
EXPR	10:1	10:1	4	out [ 1 ] = ( lo >> 7 ) | 0x80
ASSIGN	10:1	10:10	5	out [ 1 ] = ( lo >> 7 ) | 0x80
LVAL	10:1	10:1	6	out [ 1 ]
FIELD	10:1	10:6	7	out [ 1 ]
LEAF_NODE	10:1	10:1	8	out
LEAF_NODE	10:4	10:4	8	[
EXPR	10:5	10:5	8	1
FIELD	10:5	10:5	9	1
LEAF_NODE	10:5	10:5	10	1
LEAF_NODE	10:6	10:6	8	]
ASSIGN_OP	10:8	10:8	6	=
LEAF_NODE	10:8	10:8	7	=
RVAL	10:10	10:10	6	( lo >> 7 ) | 0x80
BIT_OR	10:10	10:22	7	( lo >> 7 ) | 0x80
BIT_OR_ELEM	10:10	10:18	8	( lo >> 7 )
LEAF_NODE	10:10	10:10	9	(
FIELD	10:11	10:11	9	lo
LEAF_NODE	10:11	10:11	10	lo
LEAF_NODE	10:14	10:14	9	>>
FIELD	10:17	10:17	9	7
LEAF_NODE	10:17	10:17	10	7
LEAF_NODE	10:18	10:18	9	)
LEAF_NODE	10:20	10:20	8	|
BIT_OR_ELEM	10:22	10:22	8	0x80
FIELD	10:22	10:22	9	0x80
LEAF_NODE	10:22	10:22	10	0x80
LEAF_NODE	10:26	10:26	4	;
EXPR_STATEMENT	11:1	11:27	3	out [ 2 ] = ( lo >> 14 ) | 0x80 ;
EXPR	11:1	11:1	4	out [ 2 ] = ( lo >> 14 ) | 0x80
ASSIGN	11:1	11:10	5	out [ 2 ] = ( lo >> 14 ) | 0x80
LVAL	11:1	11:1	6	out [ 2 ]
FIELD	11:1	11:6	7	out [ 2 ]
LEAF_NODE	11:1	11:1	8	out
LEAF_NODE	11:4	11:4	8	[
EXPR	11:5	11:5	8	2
FIELD	11:5	11:5	9	2
LEAF_NODE	11:5	11:5	10	2
LEAF_NODE	11:6	11:6	8	]
ASSIGN_OP	11:8	11:8	6	=
LEAF_NODE	11:8	11:8	7	=
RVAL	11:10	11:10	6	( lo >> 14 ) | 0x80
BIT_OR	11:10	11:23	7	( lo >> 14 ) | 0x80
BIT_OR_ELEM	11:10	11:19	8	( lo >> 14 )
LEAF_NODE	11:10	11:10	9	(
FIELD	11:11	11:11	9	lo
LEAF_NODE	11:11	11:11	10	lo
LEAF_NODE	11:14	11:14	9	>>
FIELD	11:17	11:17	9	14
LEAF_NODE	11:17	11:17	10	14
LEAF_NODE	11:19	11:19	9	)
LEAF_NODE	11:21	11:21	8	|
BIT_OR_ELEM	11:23	11:23	8	0x80
FIELD	11:23	11:23	9	0x80
LEAF_NODE	11:23	11:23	10	0x80
LEAF_NODE	11:27	11:27	4	;
EXPR_STATEMENT	12:1	12:27	3	out [ 3 ] = ( lo >> 21 ) | 0x80 ;
EXPR	12:1	12:1	4	out [ 3 ] = ( lo >> 21 ) | 0x80
ASSIGN	12:1	12:10	5	out [ 3 ] = ( lo >> 21 ) | 0x80
LVAL	12:1	12:1	6	out [ 3 ]
FIELD	12:1	12:6	7	out [ 3 ]
LEAF_NODE	12:1	12:1	8	out
LEAF_NODE	12:4	12:4	8	[
EXPR	12:5	12:5	8	3
FIELD	12:5	12:5	9	3
LEAF_NODE	12:5	12:5	10	3
LEAF_NODE	12:6	12:6	8	]
ASSIGN_OP	12:8	12:8	6	=
LEAF_NODE	12:8	12:8	7	=
RVAL	12:10	12:10	6	( lo >> 21 ) | 0x80
BIT_OR	12:10	12:23	7	( lo >> 21 ) | 0x80
BIT_OR_ELEM	12:10	12:19	8	( lo >> 21 )
LEAF_NODE	12:10	12:10	9	(
FIELD	12:11	12:11	9	lo
LEAF_NODE	12:11	12:11	10	lo
LEAF_NODE	12:14	12:14	9	>>
FIELD	12:17	12:17	9	21
LEAF_NODE	12:17	12:17	10	21
LEAF_NODE	12:19	12:19	9	)
LEAF_NODE	12:21	12:21	8	|
BIT_OR_ELEM	12:23	12:23	8	0x80
FIELD	12:23	12:23	9	0x80
LEAF_NODE	12:23	12:23	10	0x80
LEAF_NODE	12:27	12:27	4	;
SELECTION	13:1	13:13	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	hi < 8
EXPR	13:5	13:10	5	hi < 8
FIELD	13:5	13:5	6	hi
LEAF_NODE	13:5	13:5	7	hi
REL_OPERATOR	13:8	13:8	6	<
LEAF_NODE	13:8	13:8	7	<
FIELD	13:10	13:10	6	8
LEAF_NODE	13:10	13:10	7	8
LEAF_NODE	13:11	13:11	4	)
STATEMENTS	13:13	16:1	4	
LEAF_NODE	13:13	13:13	5	{
STATEMENTS	14:2	15:2	5	
EXPR_STATEMENT	14:2	14:33	6	out [ 4 ] = ( hi << 4 ) | ( lo >> 28 ) ;
EXPR	14:2	14:2	7	out [ 4 ] = ( hi << 4 ) | ( lo >> 28 )
ASSIGN	14:2	14:11	8	out [ 4 ] = ( hi << 4 ) | ( lo >> 28 )
LVAL	14:2	14:2	9	out [ 4 ]
FIELD	14:2	14:7	10	out [ 4 ]
LEAF_NODE	14:2	14:2	11	out
LEAF_NODE	14:5	14:5	11	[
EXPR	14:6	14:6	11	4
FIELD	14:6	14:6	12	4
LEAF_NODE	14:6	14:6	13	4
LEAF_NODE	14:7	14:7	11	]
ASSIGN_OP	14:9	14:9	9	=
LEAF_NODE	14:9	14:9	10	=
RVAL	14:11	14:11	9	( hi << 4 ) | ( lo >> 28 )
BIT_OR	14:11	14:23	10	( hi << 4 ) | ( lo >> 28 )
BIT_OR_ELEM	14:11	14:19	11	( hi << 4 )
LEAF_NODE	14:11	14:11	12	(
FIELD	14:12	14:12	12	hi
LEAF_NODE	14:12	14:12	13	hi
LEAF_NODE	14:15	14:15	12	<<
FIELD	14:18	14:18	12	4
LEAF_NODE	14:18	14:18	13	4
LEAF_NODE	14:19	14:19	12	)
LEAF_NODE	14:21	14:21	11	|
BIT_OR_ELEM	14:23	14:32	11	( lo >> 28 )
LEAF_NODE	14:23	14:23	12	(
FIELD	14:24	14:24	12	lo
LEAF_NODE	14:24	14:24	13	lo
LEAF_NODE	14:27	14:27	12	>>
FIELD	14:30	14:30	12	28
LEAF_NODE	14:30	14:30	13	28
LEAF_NODE	14:32	14:32	12	)
LEAF_NODE	14:33	14:33	7	;
JUMP_STATEMENT	15:2	15:10	6	return 5 ;
KEYWORD	15:2	15:2	7	return
LEAF_NODE	15:2	15:2	8	return
DESTINATION	15:9	15:9	7	5
EXPR	15:9	15:9	8	5
FIELD	15:9	15:9	9	5
LEAF_NODE	15:9	15:9	10	5
LEAF_NODE	15:10	15:10	7	;
LEAF_NODE	16:1	16:1	5	}
SELECTION	16:3	16:8	3	
KEYWORD	16:3	16:3	4	else
LEAF_NODE	16:3	16:3	5	else
STATEMENTS	16:8	19:1	4	
LEAF_NODE	16:8	16:8	5	{
STATEMENTS	17:2	18:2	5	
EXPR_STATEMENT	17:2	17:46	6	out [ 4 ] = ( ( hi & 7 ) << 4 ) | ( lo >> 28 ) | 0x80 ;
EXPR	17:2	17:2	7	out [ 4 ] = ( ( hi & 7 ) << 4 ) | ( lo >> 28 ) | 0x80
ASSIGN	17:2	17:11	8	out [ 4 ] = ( ( hi & 7 ) << 4 ) | ( lo >> 28 ) | 0x80
LVAL	17:2	17:2	9	out [ 4 ]
FIELD	17:2	17:7	10	out [ 4 ]
LEAF_NODE	17:2	17:2	11	out
LEAF_NODE	17:5	17:5	11	[
EXPR	17:6	17:6	11	4
FIELD	17:6	17:6	12	4
LEAF_NODE	17:6	17:6	13	4
LEAF_NODE	17:7	17:7	11	]
ASSIGN_OP	17:9	17:9	9	=
LEAF_NODE	17:9	17:9	10	=
RVAL	17:11	17:11	9	( ( hi & 7 ) << 4 ) | ( lo >> 28 ) | 0x80
BIT_OR	17:11	17:29	10	( ( hi & 7 ) << 4 ) | ( lo >> 28 ) | 0x80
BIT_OR_ELEM	17:11	17:25	11	( ( hi & 7 ) << 4 )
LEAF_NODE	17:11	17:11	12	(
LEAF_NODE	17:12	17:12	12	(
FIELD	17:13	17:13	12	hi
LEAF_NODE	17:13	17:13	13	hi
LEAF_NODE	17:16	17:16	12	&
FIELD	17:18	17:18	12	7
LEAF_NODE	17:18	17:18	13	7
LEAF_NODE	17:19	17:19	12	)
LEAF_NODE	17:21	17:21	12	<<
FIELD	17:24	17:24	12	4
LEAF_NODE	17:24	17:24	13	4
LEAF_NODE	17:25	17:25	12	)
LEAF_NODE	17:27	17:27	11	|
BIT_OR_ELEM	17:29	17:29	11	( lo >> 28 ) | 0x80
BIT_OR	17:29	17:42	12	( lo >> 28 ) | 0x80
BIT_OR_ELEM	17:29	17:38	13	( lo >> 28 )
LEAF_NODE	17:29	17:29	14	(
FIELD	17:30	17:30	14	lo
LEAF_NODE	17:30	17:30	15	lo
LEAF_NODE	17:33	17:33	14	>>
FIELD	17:36	17:36	14	28
LEAF_NODE	17:36	17:36	15	28
LEAF_NODE	17:38	17:38	14	)
LEAF_NODE	17:40	17:40	13	|
BIT_OR_ELEM	17:42	17:42	13	0x80
FIELD	17:42	17:42	14	0x80
LEAF_NODE	17:42	17:42	15	0x80
LEAF_NODE	17:46	17:46	7	;
EXPR_STATEMENT	18:2	18:10	6	hi >>= 3 ;
EXPR	18:2	18:2	7	hi >>= 3
ASSIGN	18:2	18:9	8	hi >>= 3
LVAL	18:2	18:2	9	hi
FIELD	18:2	18:2	10	hi
LEAF_NODE	18:2	18:2	11	hi
ASSIGN_OP	18:5	18:5	9	>>=
LEAF_NODE	18:5	18:5	10	>>=
RVAL	18:9	18:9	9	3
FIELD	18:9	18:9	10	3
LEAF_NODE	18:9	18:9	11	3
LEAF_NODE	18:10	18:10	7	;
LEAF_NODE	19:1	19:1	5	}
EXPR_STATEMENT	20:1	20:7	3	rv = 5 ;
EXPR	20:1	20:1	4	rv = 5
ASSIGN	20:1	20:6	5	rv = 5
LVAL	20:1	20:1	6	rv
FIELD	20:1	20:1	7	rv
LEAF_NODE	20:1	20:1	8	rv
ASSIGN_OP	20:4	20:4	6	=
LEAF_NODE	20:4	20:4	7	=
RVAL	20:6	20:6	6	5
FIELD	20:6	20:6	7	5
LEAF_NODE	20:6	20:6	8	5
LEAF_NODE	20:7	20:7	4	;
ITERATION	21:1	21:19	3	
KEYWORD	21:1	21:1	4	while
LEAF_NODE	21:1	21:1	5	while
LEAF_NODE	21:7	21:7	4	(
CONDITION	21:8	21:8	4	hi >= 128
EXPR	21:8	21:14	5	hi >= 128
FIELD	21:8	21:8	6	hi
LEAF_NODE	21:8	21:8	7	hi
REL_OPERATOR	21:11	21:11	6	>=
LEAF_NODE	21:11	21:11	7	>=
FIELD	21:14	21:14	6	128
LEAF_NODE	21:14	21:14	7	128
LEAF_NODE	21:17	21:17	4	)
STATEMENTS	21:19	24:1	4	
LEAF_NODE	21:19	21:19	5	{
STATEMENTS	22:2	23:2	5	
EXPR_STATEMENT	22:2	22:23	6	out [ rv ++ ] = hi | 0x80 ;
EXPR	22:2	22:2	7	out [ rv ++ ] = hi | 0x80
ASSIGN	22:2	22:14	8	out [ rv ++ ] = hi | 0x80
LVAL	22:2	22:2	9	out [ rv ++ ]
FIELD	22:2	22:10	10	out [ rv ++ ]
LEAF_NODE	22:2	22:2	11	out
LEAF_NODE	22:5	22:5	11	[
EXPR	22:6	22:6	11	rv ++
FIELD	22:6	22:8	12	rv ++
LEAF_NODE	22:6	22:6	13	rv
LEAF_NODE	22:8	22:8	13	++
LEAF_NODE	22:10	22:10	11	]
ASSIGN_OP	22:12	22:12	9	=
LEAF_NODE	22:12	22:12	10	=
RVAL	22:14	22:14	9	hi | 0x80
BIT_OR	22:14	22:19	10	hi | 0x80
BIT_OR_ELEM	22:14	22:14	11	hi
FIELD	22:14	22:14	12	hi
LEAF_NODE	22:14	22:14	13	hi
LEAF_NODE	22:17	22:17	11	|
BIT_OR_ELEM	22:19	22:19	11	0x80
FIELD	22:19	22:19	12	0x80
LEAF_NODE	22:19	22:19	13	0x80
LEAF_NODE	22:23	22:23	7	;
EXPR_STATEMENT	23:2	23:10	6	hi >>= 7 ;
EXPR	23:2	23:2	7	hi >>= 7
ASSIGN	23:2	23:9	8	hi >>= 7
LVAL	23:2	23:2	9	hi
FIELD	23:2	23:2	10	hi
LEAF_NODE	23:2	23:2	11	hi
ASSIGN_OP	23:5	23:5	9	>>=
LEAF_NODE	23:5	23:5	10	>>=
RVAL	23:9	23:9	9	7
FIELD	23:9	23:9	10	7
LEAF_NODE	23:9	23:9	11	7
LEAF_NODE	23:10	23:10	7	;
LEAF_NODE	24:1	24:1	5	}
EXPR_STATEMENT	25:1	25:15	3	out [ rv ++ ] = hi ;
EXPR	25:1	25:1	4	out [ rv ++ ] = hi
ASSIGN	25:1	25:13	5	out [ rv ++ ] = hi
LVAL	25:1	25:1	6	out [ rv ++ ]
FIELD	25:1	25:9	7	out [ rv ++ ]
LEAF_NODE	25:1	25:1	8	out
LEAF_NODE	25:4	25:4	8	[
EXPR	25:5	25:5	8	rv ++
FIELD	25:5	25:7	9	rv ++
LEAF_NODE	25:5	25:5	10	rv
LEAF_NODE	25:7	25:7	10	++
LEAF_NODE	25:9	25:9	8	]
ASSIGN_OP	25:11	25:11	6	=
LEAF_NODE	25:11	25:11	7	=
RVAL	25:13	25:13	6	hi
FIELD	25:13	25:13	7	hi
LEAF_NODE	25:13	25:13	8	hi
LEAF_NODE	25:15	25:15	4	;
JUMP_STATEMENT	26:1	26:10	3	return rv ;
KEYWORD	26:1	26:1	4	return
LEAF_NODE	26:1	26:1	5	return
DESTINATION	26:8	26:8	4	rv
EXPR	26:8	26:8	5	rv
FIELD	26:8	26:8	6	rv
LEAF_NODE	26:8	26:8	7	rv
LEAF_NODE	26:10	26:10	4	;
LEAF_NODE	27:0	27:0	2	}

SOURCE_FILE	2:0	10:0	0	
FUNCTION_DEF	2:0	8:0	1	
RETURN_TYPE	2:0	2:0	2	size_t
TYPE_NAME	2:0	2:0	3	size_t
LEAF_NODE	2:0	2:0	4	size_t
FUNCTION_NAME	2:7	2:7	2	gg110_magic_notification__pack
LEAF_NODE	2:7	2:7	3	gg110_magic_notification__pack
PARAMETER_LIST	3:21	4:40	2	( const GG110MagicNotification * message , uint8_t * out )
LEAF_NODE	3:21	3:21	3	(
PARAMETER_DECL	3:22	3:52	3	const GG110MagicNotification * message
TYPE	3:22	3:51	4	const GG110MagicNotification *
TYPE_NAME	3:22	3:28	5	const GG110MagicNotification
LEAF_NODE	3:22	3:22	6	const
LEAF_NODE	3:28	3:28	6	GG110MagicNotification
POINTER	3:51	3:51	5	*
LEAF_NODE	3:51	3:51	6	*
NAME	3:52	3:52	4	message
LEAF_NODE	3:52	3:52	5	message
LEAF_NODE	3:59	3:59	3	,
PARAMETER_DECL	4:22	4:37	3	uint8_t * out
TYPE	4:22	4:36	4	uint8_t *
TYPE_NAME	4:22	4:22	5	uint8_t
LEAF_NODE	4:22	4:22	6	uint8_t
POINTER	4:36	4:36	5	*
LEAF_NODE	4:36	4:36	6	*
NAME	4:37	4:37	4	out
LEAF_NODE	4:37	4:37	5	out
LEAF_NODE	4:40	4:40	3	)
LEAF_NODE	5:0	5:0	2	{
STATEMENTS	6:2	7:2	2	
EXPR_STATEMENT	6:2	6:75	3	assert ( message -> base . descriptor == & gg110_magic_notification__descriptor ) ;
EXPR	6:2	6:2	4	assert ( message -> base . descriptor == & gg110_magic_notification__descriptor )
FUNCTION_CALL	6:2	6:74	5	assert ( message -> base . descriptor == & gg110_magic_notification__descriptor )
CALLEE	6:2	6:2	6	assert
LEAF_NODE	6:2	6:2	7	assert
LEAF_NODE	6:8	6:8	6	(
ARGUMENT	6:9	6:37	6	message -> base . descriptor == & gg110_magic_notification__descriptor
FIELD	6:9	6:23	7	message -> base . descriptor
LEAF_NODE	6:9	6:9	8	message
LEAF_NODE	6:16	6:16	8	->
LEAF_NODE	6:18	6:18	8	base
LEAF_NODE	6:22	6:22	8	.
LEAF_NODE	6:23	6:23	8	descriptor
EQ_OPERATOR	6:34	6:34	7	==
LEAF_NODE	6:34	6:34	8	==
UNARY_EXPR	6:37	6:38	7	& gg110_magic_notification__descriptor
UNARY_OPERATOR	6:37	6:37	8	&
LEAF_NODE	6:37	6:37	9	&
FIELD	6:38	6:38	8	gg110_magic_notification__descriptor
LEAF_NODE	6:38	6:38	9	gg110_magic_notification__descriptor
LEAF_NODE	6:74	6:74	6	)
LEAF_NODE	6:75	6:75	4	;
JUMP_STATEMENT	7:2	7:72	3	return protobuf_c_message_pack ( ( const ProtobufCMessage * ) message , out ) ;
KEYWORD	7:2	7:2	4	return
LEAF_NODE	7:2	7:2	5	return
DESTINATION	7:9	7:9	4	protobuf_c_message_pack ( ( const ProtobufCMessage * ) message , out )
EXPR	7:9	7:9	5	protobuf_c_message_pack ( ( const ProtobufCMessage * ) message , out )
FUNCTION_CALL	7:9	7:71	6	protobuf_c_message_pack ( ( const ProtobufCMessage * ) message , out )
CALLEE	7:9	7:9	7	protobuf_c_message_pack
LEAF_NODE	7:9	7:9	8	protobuf_c_message_pack
LEAF_NODE	7:33	7:33	7	(
ARGUMENT	7:34	7:59	7	( const ProtobufCMessage * ) message
LEAF_NODE	7:34	7:34	8	(
TYPE_NAME	7:35	7:41	8	const ProtobufCMessage
LEAF_NODE	7:35	7:35	9	const
LEAF_NODE	7:41	7:41	9	ProtobufCMessage
LEAF_NODE	7:57	7:57	8	*
LEAF_NODE	7:58	7:58	8	)
FIELD	7:59	7:59	8	message
LEAF_NODE	7:59	7:59	9	message
LEAF_NODE	7:66	7:66	7	,
ARGUMENT	7:68	7:68	7	out
FIELD	7:68	7:68	8	out
LEAF_NODE	7:68	7:68	9	out
LEAF_NODE	7:71	7:71	7	)
LEAF_NODE	7:72	7:72	4	;
LEAF_NODE	8:0	8:0	2	}
FUNCTION_DEF	10:0	16:0	1	
RETURN_TYPE	10:0	10:0	2	size_t
TYPE_NAME	10:0	10:0	3	size_t
LEAF_NODE	10:0	10:0	4	size_t
FUNCTION_NAME	10:7	10:7	2	gg110_magic_notification__pack_to_buffer
LEAF_NODE	10:7	10:7	3	gg110_magic_notification__pack_to_buffer
PARAMETER_LIST	11:21	12:45	2	( const GG110MagicNotification * message , ProtobufCBuffer * buffer )
LEAF_NODE	11:21	11:21	3	(
PARAMETER_DECL	11:22	11:52	3	const GG110MagicNotification * message
TYPE	11:22	11:51	4	const GG110MagicNotification *
TYPE_NAME	11:22	11:28	5	const GG110MagicNotification
LEAF_NODE	11:22	11:22	6	const
LEAF_NODE	11:28	11:28	6	GG110MagicNotification
POINTER	11:51	11:51	5	*
LEAF_NODE	11:51	11:51	6	*
NAME	11:52	11:52	4	message
LEAF_NODE	11:52	11:52	5	message
LEAF_NODE	11:59	11:59	3	,
PARAMETER_DECL	12:22	12:39	3	ProtobufCBuffer * buffer
TYPE	12:22	12:38	4	ProtobufCBuffer *
TYPE_NAME	12:22	12:22	5	ProtobufCBuffer
LEAF_NODE	12:22	12:22	6	ProtobufCBuffer
POINTER	12:38	12:38	5	*
LEAF_NODE	12:38	12:38	6	*
NAME	12:39	12:39	4	buffer
LEAF_NODE	12:39	12:39	5	buffer
LEAF_NODE	12:45	12:45	3	)
LEAF_NODE	13:0	13:0	2	{
STATEMENTS	14:2	15:2	2	
EXPR_STATEMENT	14:2	14:75	3	assert ( message -> base . descriptor == & gg110_magic_notification__descriptor ) ;
EXPR	14:2	14:2	4	assert ( message -> base . descriptor == & gg110_magic_notification__descriptor )
FUNCTION_CALL	14:2	14:74	5	assert ( message -> base . descriptor == & gg110_magic_notification__descriptor )
CALLEE	14:2	14:2	6	assert
LEAF_NODE	14:2	14:2	7	assert
LEAF_NODE	14:8	14:8	6	(
ARGUMENT	14:9	14:37	6	message -> base . descriptor == & gg110_magic_notification__descriptor
FIELD	14:9	14:23	7	message -> base . descriptor
LEAF_NODE	14:9	14:9	8	message
LEAF_NODE	14:16	14:16	8	->
LEAF_NODE	14:18	14:18	8	base
LEAF_NODE	14:22	14:22	8	.
LEAF_NODE	14:23	14:23	8	descriptor
EQ_OPERATOR	14:34	14:34	7	==
LEAF_NODE	14:34	14:34	8	==
UNARY_EXPR	14:37	14:38	7	& gg110_magic_notification__descriptor
UNARY_OPERATOR	14:37	14:37	8	&
LEAF_NODE	14:37	14:37	9	&
FIELD	14:38	14:38	8	gg110_magic_notification__descriptor
LEAF_NODE	14:38	14:38	9	gg110_magic_notification__descriptor
LEAF_NODE	14:74	14:74	6	)
LEAF_NODE	14:75	14:75	4	;
JUMP_STATEMENT	15:2	15:85	3	return protobuf_c_message_pack_to_buffer ( ( const ProtobufCMessage * ) message , buffer ) ;
KEYWORD	15:2	15:2	4	return
LEAF_NODE	15:2	15:2	5	return
DESTINATION	15:9	15:9	4	protobuf_c_message_pack_to_buffer ( ( const ProtobufCMessage * ) message , buffer )
EXPR	15:9	15:9	5	protobuf_c_message_pack_to_buffer ( ( const ProtobufCMessage * ) message , buffer )
FUNCTION_CALL	15:9	15:84	6	protobuf_c_message_pack_to_buffer ( ( const ProtobufCMessage * ) message , buffer )
CALLEE	15:9	15:9	7	protobuf_c_message_pack_to_buffer
LEAF_NODE	15:9	15:9	8	protobuf_c_message_pack_to_buffer
LEAF_NODE	15:43	15:43	7	(
ARGUMENT	15:44	15:69	7	( const ProtobufCMessage * ) message
LEAF_NODE	15:44	15:44	8	(
TYPE_NAME	15:45	15:51	8	const ProtobufCMessage
LEAF_NODE	15:45	15:45	9	const
LEAF_NODE	15:51	15:51	9	ProtobufCMessage
LEAF_NODE	15:67	15:67	8	*
LEAF_NODE	15:68	15:68	8	)
FIELD	15:69	15:69	8	message
LEAF_NODE	15:69	15:69	9	message
LEAF_NODE	15:76	15:76	7	,
ARGUMENT	15:78	15:78	7	buffer
FIELD	15:78	15:78	8	buffer
LEAF_NODE	15:78	15:78	9	buffer
LEAF_NODE	15:84	15:84	7	)
LEAF_NODE	15:85	15:85	4	;
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	gg_notify
LEAF_NODE	2:4	2:4	3	gg_notify
PARAMETER_LIST	2:13	2:65	2	( struct gg_session * sess , uin_t * userlist , int count )
LEAF_NODE	2:13	2:13	3	(
PARAMETER_DECL	2:14	2:33	3	struct gg_session * sess
TYPE	2:14	2:32	4	struct gg_session *
TYPE_NAME	2:14	2:21	5	struct gg_session
LEAF_NODE	2:14	2:14	6	struct
LEAF_NODE	2:21	2:21	6	gg_session
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	sess
LEAF_NODE	2:33	2:33	5	sess
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:46	3	uin_t * userlist
TYPE	2:39	2:45	4	uin_t *
TYPE_NAME	2:39	2:39	5	uin_t
LEAF_NODE	2:39	2:39	6	uin_t
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	userlist
LEAF_NODE	2:46	2:46	5	userlist
LEAF_NODE	2:54	2:54	3	,
PARAMETER_DECL	2:56	2:60	3	int count
TYPE	2:56	2:56	4	int
TYPE_NAME	2:56	2:56	5	int
LEAF_NODE	2:56	2:56	6	int
NAME	2:60	2:60	4	count
LEAF_NODE	2:60	2:60	5	count
LEAF_NODE	2:65	2:65	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:49	3	return gg_notify_ex ( sess , userlist , NULL , count ) ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	gg_notify_ex ( sess , userlist , NULL , count )
EXPR	4:8	4:8	5	gg_notify_ex ( sess , userlist , NULL , count )
FUNCTION_CALL	4:8	4:48	6	gg_notify_ex ( sess , userlist , NULL , count )
CALLEE	4:8	4:8	7	gg_notify_ex
LEAF_NODE	4:8	4:8	8	gg_notify_ex
LEAF_NODE	4:20	4:20	7	(
ARGUMENT	4:21	4:21	7	sess
FIELD	4:21	4:21	8	sess
LEAF_NODE	4:21	4:21	9	sess
LEAF_NODE	4:25	4:25	7	,
ARGUMENT	4:27	4:27	7	userlist
FIELD	4:27	4:27	8	userlist
LEAF_NODE	4:27	4:27	9	userlist
LEAF_NODE	4:35	4:35	7	,
ARGUMENT	4:37	4:37	7	NULL
FIELD	4:37	4:37	8	NULL
LEAF_NODE	4:37	4:37	9	NULL
LEAF_NODE	4:41	4:41	7	,
ARGUMENT	4:43	4:43	7	count
FIELD	4:43	4:43	8	count
LEAF_NODE	4:43	4:43	9	count
LEAF_NODE	4:48	4:48	7	)
LEAF_NODE	4:49	4:49	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	2:0	21:0	0	
FUNCTION_DEF	2:0	19:0	1	
RETURN_TYPE	2:0	2:17	2	static GdkPixbuf *
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	GdkPixbuf
LEAF_NODE	2:7	2:7	4	GdkPixbuf
LEAF_NODE	2:17	2:17	3	*
FUNCTION_NAME	2:19	2:19	2	_pidgin_blist_get_cached_emblem
LEAF_NODE	2:19	2:19	3	_pidgin_blist_get_cached_emblem
PARAMETER_LIST	2:50	2:62	2	( gchar * path )
LEAF_NODE	2:50	2:50	3	(
PARAMETER_DECL	2:51	2:58	3	gchar * path
TYPE	2:51	2:57	4	gchar *
TYPE_NAME	2:51	2:51	5	gchar
LEAF_NODE	2:51	2:51	6	gchar
POINTER	2:57	2:57	5	*
LEAF_NODE	2:57	2:57	6	*
NAME	2:58	2:58	4	path
LEAF_NODE	2:58	2:58	5	path
LEAF_NODE	2:62	2:62	3	)
LEAF_NODE	2:64	2:64	2	{
STATEMENTS	3:1	18:1	2	
SIMPLE_DECL	3:1	3:58	3	GdkPixbuf * pb ; pb = g_hash_table_lookup ( cached_emblems , path ) ;
VAR_DECL	3:1	3:12	4	GdkPixbuf * pb ; pb = g_hash_table_lookup ( cached_emblems , path )
TYPE	3:1	3:11	5	GdkPixbuf *
TYPE_NAME	3:1	3:1	6	GdkPixbuf
LEAF_NODE	3:1	3:1	7	GdkPixbuf
POINTER	3:11	3:11	6	*
LEAF_NODE	3:11	3:11	7	*
NAME	3:12	3:12	5	pb
LEAF_NODE	3:12	3:12	6	pb
LEAF_NODE	0:0	0:0	5	;
INIT	3:12	3:12	5	pb = g_hash_table_lookup ( cached_emblems , path )
ASSIGN	3:12	3:17	6	pb = g_hash_table_lookup ( cached_emblems , path )
LVAL	3:12	3:12	7	pb
NAME	3:12	3:12	8	pb
LEAF_NODE	3:12	3:12	9	pb
ASSIGN_OP	3:15	3:15	7	=
LEAF_NODE	3:15	3:15	8	=
RVAL	3:17	3:17	7	g_hash_table_lookup ( cached_emblems , path )
FUNCTION_CALL	3:17	3:57	8	g_hash_table_lookup ( cached_emblems , path )
CALLEE	3:17	3:17	9	g_hash_table_lookup
LEAF_NODE	3:17	3:17	10	g_hash_table_lookup
LEAF_NODE	3:36	3:36	9	(
ARGUMENT	3:37	3:37	9	cached_emblems
FIELD	3:37	3:37	10	cached_emblems
LEAF_NODE	3:37	3:37	11	cached_emblems
LEAF_NODE	3:51	3:51	9	,
ARGUMENT	3:53	3:53	9	path
FIELD	3:53	3:53	10	path
LEAF_NODE	3:53	3:53	11	path
LEAF_NODE	3:57	3:57	9	)
LEAF_NODE	3:58	3:58	4	;
SELECTION	4:1	4:17	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	pb != NULL
EXPR	4:5	4:11	5	pb != NULL
FIELD	4:5	4:5	6	pb
LEAF_NODE	4:5	4:5	7	pb
EQ_OPERATOR	4:8	4:8	6	!=
LEAF_NODE	4:8	4:8	7	!=
FIELD	4:11	4:11	6	NULL
LEAF_NODE	4:11	4:11	7	NULL
LEAF_NODE	4:15	4:15	4	)
STATEMENTS	4:17	8:1	4	
LEAF_NODE	4:17	4:17	5	{
STATEMENTS	6:2	7:2	5	
EXPR_STATEMENT	6:2	6:18	6	g_object_ref ( pb ) ;
EXPR	6:2	6:2	7	g_object_ref ( pb )
FUNCTION_CALL	6:2	6:17	8	g_object_ref ( pb )
CALLEE	6:2	6:2	9	g_object_ref
LEAF_NODE	6:2	6:2	10	g_object_ref
LEAF_NODE	6:14	6:14	9	(
ARGUMENT	6:15	6:15	9	pb
FIELD	6:15	6:15	10	pb
LEAF_NODE	6:15	6:15	11	pb
LEAF_NODE	6:17	6:17	9	)
LEAF_NODE	6:18	6:18	7	;
EXPR_STATEMENT	7:2	7:14	6	g_free ( path ) ;
EXPR	7:2	7:2	7	g_free ( path )
FUNCTION_CALL	7:2	7:13	8	g_free ( path )
CALLEE	7:2	7:2	9	g_free
LEAF_NODE	7:2	7:2	10	g_free
LEAF_NODE	7:8	7:8	9	(
ARGUMENT	7:9	7:9	9	path
FIELD	7:9	7:9	10	path
LEAF_NODE	7:9	7:9	11	path
LEAF_NODE	7:13	7:13	9	)
LEAF_NODE	7:14	7:14	7	;
LEAF_NODE	8:1	8:1	5	}
SELECTION	8:3	8:8	3	
KEYWORD	8:3	8:3	4	else
LEAF_NODE	8:3	8:3	5	else
STATEMENTS	8:8	17:1	4	
LEAF_NODE	8:8	8:8	5	{
STATEMENTS	9:2	15:4	5	
EXPR_STATEMENT	9:2	9:40	6	pb = pidgin_pixbuf_new_from_file ( path ) ;
EXPR	9:2	9:2	7	pb = pidgin_pixbuf_new_from_file ( path )
ASSIGN	9:2	9:7	8	pb = pidgin_pixbuf_new_from_file ( path )
LVAL	9:2	9:2	9	pb
FIELD	9:2	9:2	10	pb
LEAF_NODE	9:2	9:2	11	pb
ASSIGN_OP	9:5	9:5	9	=
LEAF_NODE	9:5	9:5	10	=
RVAL	9:7	9:7	9	pidgin_pixbuf_new_from_file ( path )
FUNCTION_CALL	9:7	9:39	10	pidgin_pixbuf_new_from_file ( path )
CALLEE	9:7	9:7	11	pidgin_pixbuf_new_from_file
LEAF_NODE	9:7	9:7	12	pidgin_pixbuf_new_from_file
LEAF_NODE	9:34	9:34	11	(
ARGUMENT	9:35	9:35	11	path
FIELD	9:35	9:35	12	path
LEAF_NODE	9:35	9:35	13	path
LEAF_NODE	9:39	9:39	11	)
LEAF_NODE	9:40	9:40	7	;
SELECTION	10:2	10:18	6	
KEYWORD	10:2	10:2	7	if
LEAF_NODE	10:2	10:2	8	if
LEAF_NODE	10:5	10:5	7	(
CONDITION	10:6	10:6	7	pb != NULL
EXPR	10:6	10:12	8	pb != NULL
FIELD	10:6	10:6	9	pb
LEAF_NODE	10:6	10:6	10	pb
EQ_OPERATOR	10:9	10:9	9	!=
LEAF_NODE	10:9	10:9	10	!=
FIELD	10:12	10:12	9	NULL
LEAF_NODE	10:12	10:12	10	NULL
LEAF_NODE	10:16	10:16	7	)
STATEMENTS	10:18	15:2	7	
LEAF_NODE	10:18	10:18	8	{
STATEMENTS	13:3	14:3	8	
EXPR_STATEMENT	13:3	13:64	9	g_object_weak_ref ( G_OBJECT ( pb ) , _cleanup_cached_emblem , path ) ;
EXPR	13:3	13:3	10	g_object_weak_ref ( G_OBJECT ( pb ) , _cleanup_cached_emblem , path )
FUNCTION_CALL	13:3	13:63	11	g_object_weak_ref ( G_OBJECT ( pb ) , _cleanup_cached_emblem , path )
CALLEE	13:3	13:3	12	g_object_weak_ref
LEAF_NODE	13:3	13:3	13	g_object_weak_ref
LEAF_NODE	13:20	13:20	12	(
ARGUMENT	13:21	13:21	12	G_OBJECT ( pb )
FUNCTION_CALL	13:21	13:32	13	G_OBJECT ( pb )
CALLEE	13:21	13:21	14	G_OBJECT
LEAF_NODE	13:21	13:21	15	G_OBJECT
LEAF_NODE	13:29	13:29	14	(
ARGUMENT	13:30	13:30	14	pb
FIELD	13:30	13:30	15	pb
LEAF_NODE	13:30	13:30	16	pb
LEAF_NODE	13:32	13:32	14	)
LEAF_NODE	13:33	13:33	12	,
ARGUMENT	13:35	13:35	12	_cleanup_cached_emblem
FIELD	13:35	13:35	13	_cleanup_cached_emblem
LEAF_NODE	13:35	13:35	14	_cleanup_cached_emblem
LEAF_NODE	13:57	13:57	12	,
ARGUMENT	13:59	13:59	12	path
FIELD	13:59	13:59	13	path
LEAF_NODE	13:59	13:59	14	path
LEAF_NODE	13:63	13:63	12	)
LEAF_NODE	13:64	13:64	10	;
EXPR_STATEMENT	14:3	14:48	9	g_hash_table_insert ( cached_emblems , path , pb ) ;
EXPR	14:3	14:3	10	g_hash_table_insert ( cached_emblems , path , pb )
FUNCTION_CALL	14:3	14:47	11	g_hash_table_insert ( cached_emblems , path , pb )
CALLEE	14:3	14:3	12	g_hash_table_insert
LEAF_NODE	14:3	14:3	13	g_hash_table_insert
LEAF_NODE	14:22	14:22	12	(
ARGUMENT	14:23	14:23	12	cached_emblems
FIELD	14:23	14:23	13	cached_emblems
LEAF_NODE	14:23	14:23	14	cached_emblems
LEAF_NODE	14:37	14:37	12	,
ARGUMENT	14:39	14:39	12	path
FIELD	14:39	14:39	13	path
LEAF_NODE	14:39	14:39	14	path
LEAF_NODE	14:43	14:43	12	,
ARGUMENT	14:45	14:45	12	pb
FIELD	14:45	14:45	13	pb
LEAF_NODE	14:45	14:45	14	pb
LEAF_NODE	14:47	14:47	12	)
LEAF_NODE	14:48	14:48	10	;
LEAF_NODE	15:2	15:2	8	}
SELECTION	15:4	16:3	6	
KEYWORD	15:4	15:4	7	else
LEAF_NODE	15:4	15:4	8	else
STATEMENTS	16:3	16:3	7	
EXPR_STATEMENT	16:3	16:15	8	g_free ( path ) ;
EXPR	16:3	16:3	9	g_free ( path )
FUNCTION_CALL	16:3	16:14	10	g_free ( path )
CALLEE	16:3	16:3	11	g_free
LEAF_NODE	16:3	16:3	12	g_free
LEAF_NODE	16:9	16:9	11	(
ARGUMENT	16:10	16:10	11	path
FIELD	16:10	16:10	12	path
LEAF_NODE	16:10	16:10	13	path
LEAF_NODE	16:14	16:14	11	)
LEAF_NODE	16:15	16:15	9	;
LEAF_NODE	17:1	17:1	5	}
JUMP_STATEMENT	18:1	18:10	3	return pb ;
KEYWORD	18:1	18:1	4	return
LEAF_NODE	18:1	18:1	5	return
DESTINATION	18:8	18:8	4	pb
EXPR	18:8	18:8	5	pb
FIELD	18:8	18:8	6	pb
LEAF_NODE	18:8	18:8	7	pb
LEAF_NODE	18:10	18:10	4	;
LEAF_NODE	19:0	19:0	2	}
FUNCTION_DEF	21:0	38:0	1	
RETURN_TYPE	21:0	21:17	2	static GdkPixbuf *
LEAF_NODE	21:0	21:0	3	static
TYPE_NAME	21:7	21:7	3	GdkPixbuf
LEAF_NODE	21:7	21:7	4	GdkPixbuf
LEAF_NODE	21:17	21:17	3	*
FUNCTION_NAME	21:19	21:19	2	_pidgin_blist_get_cached_emblem
LEAF_NODE	21:19	21:19	3	_pidgin_blist_get_cached_emblem
PARAMETER_LIST	21:50	21:62	2	( gchar * path )
LEAF_NODE	21:50	21:50	3	(
PARAMETER_DECL	21:51	21:58	3	gchar * path
TYPE	21:51	21:57	4	gchar *
TYPE_NAME	21:51	21:51	5	gchar
LEAF_NODE	21:51	21:51	6	gchar
POINTER	21:57	21:57	5	*
LEAF_NODE	21:57	21:57	6	*
NAME	21:58	21:58	4	path
LEAF_NODE	21:58	21:58	5	path
LEAF_NODE	21:62	21:62	3	)
LEAF_NODE	21:64	21:64	2	{
STATEMENTS	22:1	37:1	2	
SIMPLE_DECL	22:1	22:58	3	GdkPixbuf * pb ; pb = g_hash_table_lookup ( cached_emblems , path ) ;
VAR_DECL	22:1	22:12	4	GdkPixbuf * pb ; pb = g_hash_table_lookup ( cached_emblems , path )
TYPE	22:1	22:11	5	GdkPixbuf *
TYPE_NAME	22:1	22:1	6	GdkPixbuf
LEAF_NODE	22:1	22:1	7	GdkPixbuf
POINTER	22:11	22:11	6	*
LEAF_NODE	22:11	22:11	7	*
NAME	22:12	22:12	5	pb
LEAF_NODE	22:12	22:12	6	pb
LEAF_NODE	0:0	0:0	5	;
INIT	22:12	22:12	5	pb = g_hash_table_lookup ( cached_emblems , path )
ASSIGN	22:12	22:17	6	pb = g_hash_table_lookup ( cached_emblems , path )
LVAL	22:12	22:12	7	pb
NAME	22:12	22:12	8	pb
LEAF_NODE	22:12	22:12	9	pb
ASSIGN_OP	22:15	22:15	7	=
LEAF_NODE	22:15	22:15	8	=
RVAL	22:17	22:17	7	g_hash_table_lookup ( cached_emblems , path )
FUNCTION_CALL	22:17	22:57	8	g_hash_table_lookup ( cached_emblems , path )
CALLEE	22:17	22:17	9	g_hash_table_lookup
LEAF_NODE	22:17	22:17	10	g_hash_table_lookup
LEAF_NODE	22:36	22:36	9	(
ARGUMENT	22:37	22:37	9	cached_emblems
FIELD	22:37	22:37	10	cached_emblems
LEAF_NODE	22:37	22:37	11	cached_emblems
LEAF_NODE	22:51	22:51	9	,
ARGUMENT	22:53	22:53	9	path
FIELD	22:53	22:53	10	path
LEAF_NODE	22:53	22:53	11	path
LEAF_NODE	22:57	22:57	9	)
LEAF_NODE	22:58	22:58	4	;
SELECTION	23:1	23:17	3	
KEYWORD	23:1	23:1	4	if
LEAF_NODE	23:1	23:1	5	if
LEAF_NODE	23:4	23:4	4	(
CONDITION	23:5	23:5	4	pb != NULL
EXPR	23:5	23:11	5	pb != NULL
FIELD	23:5	23:5	6	pb
LEAF_NODE	23:5	23:5	7	pb
EQ_OPERATOR	23:8	23:8	6	!=
LEAF_NODE	23:8	23:8	7	!=
FIELD	23:11	23:11	6	NULL
LEAF_NODE	23:11	23:11	7	NULL
LEAF_NODE	23:15	23:15	4	)
STATEMENTS	23:17	27:1	4	
LEAF_NODE	23:17	23:17	5	{
STATEMENTS	25:2	26:2	5	
EXPR_STATEMENT	25:2	25:18	6	g_object_ref ( pb ) ;
EXPR	25:2	25:2	7	g_object_ref ( pb )
FUNCTION_CALL	25:2	25:17	8	g_object_ref ( pb )
CALLEE	25:2	25:2	9	g_object_ref
LEAF_NODE	25:2	25:2	10	g_object_ref
LEAF_NODE	25:14	25:14	9	(
ARGUMENT	25:15	25:15	9	pb
FIELD	25:15	25:15	10	pb
LEAF_NODE	25:15	25:15	11	pb
LEAF_NODE	25:17	25:17	9	)
LEAF_NODE	25:18	25:18	7	;
EXPR_STATEMENT	26:2	26:14	6	g_free ( path ) ;
EXPR	26:2	26:2	7	g_free ( path )
FUNCTION_CALL	26:2	26:13	8	g_free ( path )
CALLEE	26:2	26:2	9	g_free
LEAF_NODE	26:2	26:2	10	g_free
LEAF_NODE	26:8	26:8	9	(
ARGUMENT	26:9	26:9	9	path
FIELD	26:9	26:9	10	path
LEAF_NODE	26:9	26:9	11	path
LEAF_NODE	26:13	26:13	9	)
LEAF_NODE	26:14	26:14	7	;
LEAF_NODE	27:1	27:1	5	}
SELECTION	27:3	27:8	3	
KEYWORD	27:3	27:3	4	else
LEAF_NODE	27:3	27:3	5	else
STATEMENTS	27:8	36:1	4	
LEAF_NODE	27:8	27:8	5	{
STATEMENTS	28:2	34:4	5	
EXPR_STATEMENT	28:2	28:40	6	pb = pidgin_pixbuf_new_from_file ( path ) ;
EXPR	28:2	28:2	7	pb = pidgin_pixbuf_new_from_file ( path )
ASSIGN	28:2	28:7	8	pb = pidgin_pixbuf_new_from_file ( path )
LVAL	28:2	28:2	9	pb
FIELD	28:2	28:2	10	pb
LEAF_NODE	28:2	28:2	11	pb
ASSIGN_OP	28:5	28:5	9	=
LEAF_NODE	28:5	28:5	10	=
RVAL	28:7	28:7	9	pidgin_pixbuf_new_from_file ( path )
FUNCTION_CALL	28:7	28:39	10	pidgin_pixbuf_new_from_file ( path )
CALLEE	28:7	28:7	11	pidgin_pixbuf_new_from_file
LEAF_NODE	28:7	28:7	12	pidgin_pixbuf_new_from_file
LEAF_NODE	28:34	28:34	11	(
ARGUMENT	28:35	28:35	11	path
FIELD	28:35	28:35	12	path
LEAF_NODE	28:35	28:35	13	path
LEAF_NODE	28:39	28:39	11	)
LEAF_NODE	28:40	28:40	7	;
SELECTION	29:2	29:18	6	
KEYWORD	29:2	29:2	7	if
LEAF_NODE	29:2	29:2	8	if
LEAF_NODE	29:5	29:5	7	(
CONDITION	29:6	29:6	7	pb != NULL
EXPR	29:6	29:12	8	pb != NULL
FIELD	29:6	29:6	9	pb
LEAF_NODE	29:6	29:6	10	pb
EQ_OPERATOR	29:9	29:9	9	!=
LEAF_NODE	29:9	29:9	10	!=
FIELD	29:12	29:12	9	NULL
LEAF_NODE	29:12	29:12	10	NULL
LEAF_NODE	29:16	29:16	7	)
STATEMENTS	29:18	34:2	7	
LEAF_NODE	29:18	29:18	8	{
STATEMENTS	32:3	33:3	8	
EXPR_STATEMENT	32:3	32:64	9	g_object_weak_ref ( G_OBJECT ( pb ) , _cleanup_cached_emblem , path ) ;
EXPR	32:3	32:3	10	g_object_weak_ref ( G_OBJECT ( pb ) , _cleanup_cached_emblem , path )
FUNCTION_CALL	32:3	32:63	11	g_object_weak_ref ( G_OBJECT ( pb ) , _cleanup_cached_emblem , path )
CALLEE	32:3	32:3	12	g_object_weak_ref
LEAF_NODE	32:3	32:3	13	g_object_weak_ref
LEAF_NODE	32:20	32:20	12	(
ARGUMENT	32:21	32:21	12	G_OBJECT ( pb )
FUNCTION_CALL	32:21	32:32	13	G_OBJECT ( pb )
CALLEE	32:21	32:21	14	G_OBJECT
LEAF_NODE	32:21	32:21	15	G_OBJECT
LEAF_NODE	32:29	32:29	14	(
ARGUMENT	32:30	32:30	14	pb
FIELD	32:30	32:30	15	pb
LEAF_NODE	32:30	32:30	16	pb
LEAF_NODE	32:32	32:32	14	)
LEAF_NODE	32:33	32:33	12	,
ARGUMENT	32:35	32:35	12	_cleanup_cached_emblem
FIELD	32:35	32:35	13	_cleanup_cached_emblem
LEAF_NODE	32:35	32:35	14	_cleanup_cached_emblem
LEAF_NODE	32:57	32:57	12	,
ARGUMENT	32:59	32:59	12	path
FIELD	32:59	32:59	13	path
LEAF_NODE	32:59	32:59	14	path
LEAF_NODE	32:63	32:63	12	)
LEAF_NODE	32:64	32:64	10	;
EXPR_STATEMENT	33:3	33:48	9	g_hash_table_insert ( cached_emblems , path , pb ) ;
EXPR	33:3	33:3	10	g_hash_table_insert ( cached_emblems , path , pb )
FUNCTION_CALL	33:3	33:47	11	g_hash_table_insert ( cached_emblems , path , pb )
CALLEE	33:3	33:3	12	g_hash_table_insert
LEAF_NODE	33:3	33:3	13	g_hash_table_insert
LEAF_NODE	33:22	33:22	12	(
ARGUMENT	33:23	33:23	12	cached_emblems
FIELD	33:23	33:23	13	cached_emblems
LEAF_NODE	33:23	33:23	14	cached_emblems
LEAF_NODE	33:37	33:37	12	,
ARGUMENT	33:39	33:39	12	path
FIELD	33:39	33:39	13	path
LEAF_NODE	33:39	33:39	14	path
LEAF_NODE	33:43	33:43	12	,
ARGUMENT	33:45	33:45	12	pb
FIELD	33:45	33:45	13	pb
LEAF_NODE	33:45	33:45	14	pb
LEAF_NODE	33:47	33:47	12	)
LEAF_NODE	33:48	33:48	10	;
LEAF_NODE	34:2	34:2	8	}
SELECTION	34:4	35:3	6	
KEYWORD	34:4	34:4	7	else
LEAF_NODE	34:4	34:4	8	else
STATEMENTS	35:3	35:3	7	
EXPR_STATEMENT	35:3	35:15	8	g_free ( path ) ;
EXPR	35:3	35:3	9	g_free ( path )
FUNCTION_CALL	35:3	35:14	10	g_free ( path )
CALLEE	35:3	35:3	11	g_free
LEAF_NODE	35:3	35:3	12	g_free
LEAF_NODE	35:9	35:9	11	(
ARGUMENT	35:10	35:10	11	path
FIELD	35:10	35:10	12	path
LEAF_NODE	35:10	35:10	13	path
LEAF_NODE	35:14	35:14	11	)
LEAF_NODE	35:15	35:15	9	;
LEAF_NODE	36:1	36:1	5	}
JUMP_STATEMENT	37:1	37:10	3	return pb ;
KEYWORD	37:1	37:1	4	return
LEAF_NODE	37:1	37:1	5	return
DESTINATION	37:8	37:8	4	pb
EXPR	37:8	37:8	5	pb
FIELD	37:8	37:8	6	pb
LEAF_NODE	37:8	37:8	7	pb
LEAF_NODE	37:10	37:10	4	;
LEAF_NODE	38:0	38:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	handle_present
LEAF_NODE	2:0	2:0	3	handle_present
PARAMETER_LIST	2:14	2:39	2	( PurpleConversation * conv )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:35	3	PurpleConversation * conv
TYPE	2:15	2:34	4	PurpleConversation *
TYPE_NAME	2:15	2:15	5	PurpleConversation
LEAF_NODE	2:15	2:15	6	PurpleConversation
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	conv
LEAF_NODE	2:35	2:35	5	conv
LEAF_NODE	2:39	2:39	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	pidgin_conv_is_hidden ( PIDGIN_CONVERSATION ( conv ) )
EXPR	4:5	4:5	5	pidgin_conv_is_hidden ( PIDGIN_CONVERSATION ( conv ) )
FUNCTION_CALL	4:5	4:52	6	pidgin_conv_is_hidden ( PIDGIN_CONVERSATION ( conv ) )
CALLEE	4:5	4:5	7	pidgin_conv_is_hidden
LEAF_NODE	4:5	4:5	8	pidgin_conv_is_hidden
LEAF_NODE	4:26	4:26	7	(
ARGUMENT	4:27	4:27	7	PIDGIN_CONVERSATION ( conv )
FUNCTION_CALL	4:27	4:51	8	PIDGIN_CONVERSATION ( conv )
CALLEE	4:27	4:27	9	PIDGIN_CONVERSATION
LEAF_NODE	4:27	4:27	10	PIDGIN_CONVERSATION
LEAF_NODE	4:46	4:46	9	(
ARGUMENT	4:47	4:47	9	conv
FIELD	4:47	4:47	10	conv
LEAF_NODE	4:47	4:47	11	conv
LEAF_NODE	4:51	4:51	9	)
LEAF_NODE	4:52	4:52	7	)
LEAF_NODE	4:53	4:53	4	)
STATEMENTS	5:2	5:2	4	
JUMP_STATEMENT	5:2	5:8	5	return DESTINATION ;
KEYWORD	5:2	5:2	6	return
LEAF_NODE	5:2	5:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	5:8	5:8	6	;
EXPR_STATEMENT	6:1	6:34	3	purple_conversation_present ( conv ) ;
EXPR	6:1	6:1	4	purple_conversation_present ( conv )
FUNCTION_CALL	6:1	6:33	5	purple_conversation_present ( conv )
CALLEE	6:1	6:1	6	purple_conversation_present
LEAF_NODE	6:1	6:1	7	purple_conversation_present
LEAF_NODE	6:28	6:28	6	(
ARGUMENT	6:29	6:29	6	conv
FIELD	6:29	6:29	7	conv
LEAF_NODE	6:29	6:29	8	conv
LEAF_NODE	6:33	6:33	6	)
LEAF_NODE	6:34	6:34	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	prefs_themes_init
LEAF_NODE	2:0	2:0	3	prefs_themes_init
PARAMETER_LIST	2:17	2:22	2	( void )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:18	3	void
LEAF_NODE	2:18	2:18	4	void
LEAF_NODE	2:22	2:22	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
EXPR_STATEMENT	4:1	4:90	3	prefs_sound_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING ) ;
EXPR	4:1	4:1	4	prefs_sound_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
ASSIGN	4:1	4:22	5	prefs_sound_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
LVAL	4:1	4:1	6	prefs_sound_themes
FIELD	4:1	4:1	7	prefs_sound_themes
LEAF_NODE	4:1	4:1	8	prefs_sound_themes
ASSIGN_OP	4:20	4:20	6	=
LEAF_NODE	4:20	4:20	7	=
RVAL	4:22	4:22	6	gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
FUNCTION_CALL	4:22	4:89	7	gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
CALLEE	4:22	4:22	8	gtk_list_store_new
LEAF_NODE	4:22	4:22	9	gtk_list_store_new
LEAF_NODE	4:40	4:40	8	(
ARGUMENT	4:41	4:41	8	3
FIELD	4:41	4:41	9	3
LEAF_NODE	4:41	4:41	10	3
LEAF_NODE	4:42	4:42	8	,
ARGUMENT	4:44	4:44	8	GDK_TYPE_PIXBUF
FIELD	4:44	4:44	9	GDK_TYPE_PIXBUF
LEAF_NODE	4:44	4:44	10	GDK_TYPE_PIXBUF
LEAF_NODE	4:59	4:59	8	,
ARGUMENT	4:61	4:61	8	G_TYPE_STRING
FIELD	4:61	4:61	9	G_TYPE_STRING
LEAF_NODE	4:61	4:61	10	G_TYPE_STRING
LEAF_NODE	4:74	4:74	8	,
ARGUMENT	4:76	4:76	8	G_TYPE_STRING
FIELD	4:76	4:76	9	G_TYPE_STRING
LEAF_NODE	4:76	4:76	10	G_TYPE_STRING
LEAF_NODE	4:89	4:89	8	)
LEAF_NODE	4:90	4:90	4	;
EXPR_STATEMENT	5:1	5:90	3	prefs_blist_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING ) ;
EXPR	5:1	5:1	4	prefs_blist_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
ASSIGN	5:1	5:22	5	prefs_blist_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
LVAL	5:1	5:1	6	prefs_blist_themes
FIELD	5:1	5:1	7	prefs_blist_themes
LEAF_NODE	5:1	5:1	8	prefs_blist_themes
ASSIGN_OP	5:20	5:20	6	=
LEAF_NODE	5:20	5:20	7	=
RVAL	5:22	5:22	6	gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
FUNCTION_CALL	5:22	5:89	7	gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
CALLEE	5:22	5:22	8	gtk_list_store_new
LEAF_NODE	5:22	5:22	9	gtk_list_store_new
LEAF_NODE	5:40	5:40	8	(
ARGUMENT	5:41	5:41	8	3
FIELD	5:41	5:41	9	3
LEAF_NODE	5:41	5:41	10	3
LEAF_NODE	5:42	5:42	8	,
ARGUMENT	5:44	5:44	8	GDK_TYPE_PIXBUF
FIELD	5:44	5:44	9	GDK_TYPE_PIXBUF
LEAF_NODE	5:44	5:44	10	GDK_TYPE_PIXBUF
LEAF_NODE	5:59	5:59	8	,
ARGUMENT	5:61	5:61	8	G_TYPE_STRING
FIELD	5:61	5:61	9	G_TYPE_STRING
LEAF_NODE	5:61	5:61	10	G_TYPE_STRING
LEAF_NODE	5:74	5:74	8	,
ARGUMENT	5:76	5:76	8	G_TYPE_STRING
FIELD	5:76	5:76	9	G_TYPE_STRING
LEAF_NODE	5:76	5:76	10	G_TYPE_STRING
LEAF_NODE	5:89	5:89	8	)
LEAF_NODE	5:90	5:90	4	;
EXPR_STATEMENT	6:1	6:96	3	prefs_status_icon_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING ) ;
EXPR	6:1	6:1	4	prefs_status_icon_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
ASSIGN	6:1	6:28	5	prefs_status_icon_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
LVAL	6:1	6:1	6	prefs_status_icon_themes
FIELD	6:1	6:1	7	prefs_status_icon_themes
LEAF_NODE	6:1	6:1	8	prefs_status_icon_themes
ASSIGN_OP	6:26	6:26	6	=
LEAF_NODE	6:26	6:26	7	=
RVAL	6:28	6:28	6	gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
FUNCTION_CALL	6:28	6:95	7	gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
CALLEE	6:28	6:28	8	gtk_list_store_new
LEAF_NODE	6:28	6:28	9	gtk_list_store_new
LEAF_NODE	6:46	6:46	8	(
ARGUMENT	6:47	6:47	8	3
FIELD	6:47	6:47	9	3
LEAF_NODE	6:47	6:47	10	3
LEAF_NODE	6:48	6:48	8	,
ARGUMENT	6:50	6:50	8	GDK_TYPE_PIXBUF
FIELD	6:50	6:50	9	GDK_TYPE_PIXBUF
LEAF_NODE	6:50	6:50	10	GDK_TYPE_PIXBUF
LEAF_NODE	6:65	6:65	8	,
ARGUMENT	6:67	6:67	8	G_TYPE_STRING
FIELD	6:67	6:67	9	G_TYPE_STRING
LEAF_NODE	6:67	6:67	10	G_TYPE_STRING
LEAF_NODE	6:80	6:80	8	,
ARGUMENT	6:82	6:82	8	G_TYPE_STRING
FIELD	6:82	6:82	9	G_TYPE_STRING
LEAF_NODE	6:82	6:82	10	G_TYPE_STRING
LEAF_NODE	6:95	6:95	8	)
LEAF_NODE	6:96	6:96	4	;
EXPR_STATEMENT	7:1	7:91	3	prefs_smiley_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING ) ;
EXPR	7:1	7:1	4	prefs_smiley_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
ASSIGN	7:1	7:23	5	prefs_smiley_themes = gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
LVAL	7:1	7:1	6	prefs_smiley_themes
FIELD	7:1	7:1	7	prefs_smiley_themes
LEAF_NODE	7:1	7:1	8	prefs_smiley_themes
ASSIGN_OP	7:21	7:21	6	=
LEAF_NODE	7:21	7:21	7	=
RVAL	7:23	7:23	6	gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
FUNCTION_CALL	7:23	7:90	7	gtk_list_store_new ( 3 , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_STRING )
CALLEE	7:23	7:23	8	gtk_list_store_new
LEAF_NODE	7:23	7:23	9	gtk_list_store_new
LEAF_NODE	7:41	7:41	8	(
ARGUMENT	7:42	7:42	8	3
FIELD	7:42	7:42	9	3
LEAF_NODE	7:42	7:42	10	3
LEAF_NODE	7:43	7:43	8	,
ARGUMENT	7:45	7:45	8	GDK_TYPE_PIXBUF
FIELD	7:45	7:45	9	GDK_TYPE_PIXBUF
LEAF_NODE	7:45	7:45	10	GDK_TYPE_PIXBUF
LEAF_NODE	7:60	7:60	8	,
ARGUMENT	7:62	7:62	8	G_TYPE_STRING
FIELD	7:62	7:62	9	G_TYPE_STRING
LEAF_NODE	7:62	7:62	10	G_TYPE_STRING
LEAF_NODE	7:75	7:75	8	,
ARGUMENT	7:77	7:77	8	G_TYPE_STRING
FIELD	7:77	7:77	9	G_TYPE_STRING
LEAF_NODE	7:77	7:77	10	G_TYPE_STRING
LEAF_NODE	7:90	7:90	8	)
LEAF_NODE	7:91	7:91	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	14:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	aim_tlvlist_add_frozentlvlist
LEAF_NODE	2:4	2:4	3	aim_tlvlist_add_frozentlvlist
PARAMETER_LIST	2:33	2:79	2	( GSList * * list , guint16 type , GSList * * tlvlist )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:43	3	GSList * * list
TYPE	2:34	2:41	4	GSList * *
TYPE_NAME	2:34	2:34	5	GSList
LEAF_NODE	2:34	2:34	6	GSList
POINTER	2:41	2:42	5	* *
LEAF_NODE	2:41	2:41	6	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	list
LEAF_NODE	2:43	2:43	5	list
LEAF_NODE	2:47	2:47	3	,
PARAMETER_DECL	2:49	2:57	3	guint16 type
TYPE	2:49	2:49	4	guint16
TYPE_NAME	2:49	2:49	5	guint16
LEAF_NODE	2:49	2:49	6	guint16
NAME	2:57	2:57	4	type
LEAF_NODE	2:57	2:57	5	type
LEAF_NODE	2:61	2:61	3	,
PARAMETER_DECL	2:63	2:72	3	GSList * * tlvlist
TYPE	2:63	2:70	4	GSList * *
TYPE_NAME	2:63	2:63	5	GSList
LEAF_NODE	2:63	2:63	6	GSList
POINTER	2:70	2:71	5	* *
LEAF_NODE	2:70	2:70	6	*
LEAF_NODE	2:71	2:71	6	*
NAME	2:72	2:72	4	tlvlist
LEAF_NODE	2:72	2:72	5	tlvlist
LEAF_NODE	2:79	2:79	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	13:1	2	
SIMPLE_DECL	4:1	4:11	3	int buflen ;
VAR_DECL	4:1	4:5	4	int buflen
TYPE	4:1	4:1	5	int
TYPE_NAME	4:1	4:1	6	int
LEAF_NODE	4:1	4:1	7	int
NAME	4:5	4:5	5	buflen
LEAF_NODE	4:5	4:5	6	buflen
LEAF_NODE	4:11	4:11	4	;
SIMPLE_DECL	5:1	5:14	3	ByteStream bs ;
VAR_DECL	5:1	5:12	4	ByteStream bs
TYPE	5:1	5:1	5	ByteStream
TYPE_NAME	5:1	5:1	6	ByteStream
LEAF_NODE	5:1	5:1	7	ByteStream
NAME	5:12	5:12	5	bs
LEAF_NODE	5:12	5:12	6	bs
LEAF_NODE	5:14	5:14	4	;
EXPR_STATEMENT	6:1	6:36	3	buflen = aim_tlvlist_size ( * tlvlist ) ;
EXPR	6:1	6:1	4	buflen = aim_tlvlist_size ( * tlvlist )
ASSIGN	6:1	6:10	5	buflen = aim_tlvlist_size ( * tlvlist )
LVAL	6:1	6:1	6	buflen
FIELD	6:1	6:1	7	buflen
LEAF_NODE	6:1	6:1	8	buflen
ASSIGN_OP	6:8	6:8	6	=
LEAF_NODE	6:8	6:8	7	=
RVAL	6:10	6:10	6	aim_tlvlist_size ( * tlvlist )
FUNCTION_CALL	6:10	6:35	7	aim_tlvlist_size ( * tlvlist )
CALLEE	6:10	6:10	8	aim_tlvlist_size
LEAF_NODE	6:10	6:10	9	aim_tlvlist_size
LEAF_NODE	6:26	6:26	8	(
ARGUMENT	6:27	6:27	8	* tlvlist
UNARY_EXPR	6:27	6:28	9	* tlvlist
UNARY_OPERATOR	6:27	6:27	10	*
LEAF_NODE	6:27	6:27	11	*
FIELD	6:28	6:28	10	tlvlist
LEAF_NODE	6:28	6:28	11	tlvlist
LEAF_NODE	6:35	6:35	8	)
LEAF_NODE	6:36	6:36	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	buflen <= 0
EXPR	7:5	7:15	5	buflen <= 0
FIELD	7:5	7:5	6	buflen
LEAF_NODE	7:5	7:5	7	buflen
REL_OPERATOR	7:12	7:12	6	<=
LEAF_NODE	7:12	7:12	7	<=
FIELD	7:15	7:15	6	0
LEAF_NODE	7:15	7:15	7	0
LEAF_NODE	7:16	7:16	4	)
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:10	5	return 0 ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
DESTINATION	8:9	8:9	6	0
EXPR	8:9	8:9	7	0
FIELD	8:9	8:9	8	0
LEAF_NODE	8:9	8:9	9	0
LEAF_NODE	8:10	8:10	6	;
EXPR_STATEMENT	9:1	9:29	3	byte_stream_new ( & bs , buflen ) ;
EXPR	9:1	9:1	4	byte_stream_new ( & bs , buflen )
FUNCTION_CALL	9:1	9:28	5	byte_stream_new ( & bs , buflen )
CALLEE	9:1	9:1	6	byte_stream_new
LEAF_NODE	9:1	9:1	7	byte_stream_new
LEAF_NODE	9:16	9:16	6	(
ARGUMENT	9:17	9:17	6	& bs
UNARY_EXPR	9:17	9:18	7	& bs
UNARY_OPERATOR	9:17	9:17	8	&
LEAF_NODE	9:17	9:17	9	&
FIELD	9:18	9:18	8	bs
LEAF_NODE	9:18	9:18	9	bs
LEAF_NODE	9:20	9:20	6	,
ARGUMENT	9:22	9:22	6	buflen
FIELD	9:22	9:22	7	buflen
LEAF_NODE	9:22	9:22	8	buflen
LEAF_NODE	9:28	9:28	6	)
LEAF_NODE	9:29	9:29	4	;
EXPR_STATEMENT	10:1	10:32	3	aim_tlvlist_write ( & bs , tlvlist ) ;
EXPR	10:1	10:1	4	aim_tlvlist_write ( & bs , tlvlist )
FUNCTION_CALL	10:1	10:31	5	aim_tlvlist_write ( & bs , tlvlist )
CALLEE	10:1	10:1	6	aim_tlvlist_write
LEAF_NODE	10:1	10:1	7	aim_tlvlist_write
LEAF_NODE	10:18	10:18	6	(
ARGUMENT	10:19	10:19	6	& bs
UNARY_EXPR	10:19	10:20	7	& bs
UNARY_OPERATOR	10:19	10:19	8	&
LEAF_NODE	10:19	10:19	9	&
FIELD	10:20	10:20	8	bs
LEAF_NODE	10:20	10:20	9	bs
LEAF_NODE	10:22	10:22	6	,
ARGUMENT	10:24	10:24	6	tlvlist
FIELD	10:24	10:24	7	tlvlist
LEAF_NODE	10:24	10:24	8	tlvlist
LEAF_NODE	10:31	10:31	6	)
LEAF_NODE	10:32	10:32	4	;
EXPR_STATEMENT	11:1	11:66	3	aim_tlvlist_add_raw ( list , type , byte_stream_curpos ( & bs ) , bs . data ) ;
EXPR	11:1	11:1	4	aim_tlvlist_add_raw ( list , type , byte_stream_curpos ( & bs ) , bs . data )
FUNCTION_CALL	11:1	11:65	5	aim_tlvlist_add_raw ( list , type , byte_stream_curpos ( & bs ) , bs . data )
CALLEE	11:1	11:1	6	aim_tlvlist_add_raw
LEAF_NODE	11:1	11:1	7	aim_tlvlist_add_raw
LEAF_NODE	11:20	11:20	6	(
ARGUMENT	11:21	11:21	6	list
FIELD	11:21	11:21	7	list
LEAF_NODE	11:21	11:21	8	list
LEAF_NODE	11:25	11:25	6	,
ARGUMENT	11:27	11:27	6	type
FIELD	11:27	11:27	7	type
LEAF_NODE	11:27	11:27	8	type
LEAF_NODE	11:31	11:31	6	,
ARGUMENT	11:33	11:33	6	byte_stream_curpos ( & bs )
FUNCTION_CALL	11:33	11:55	7	byte_stream_curpos ( & bs )
CALLEE	11:33	11:33	8	byte_stream_curpos
LEAF_NODE	11:33	11:33	9	byte_stream_curpos
LEAF_NODE	11:51	11:51	8	(
ARGUMENT	11:52	11:52	8	& bs
UNARY_EXPR	11:52	11:53	9	& bs
UNARY_OPERATOR	11:52	11:52	10	&
LEAF_NODE	11:52	11:52	11	&
FIELD	11:53	11:53	10	bs
LEAF_NODE	11:53	11:53	11	bs
LEAF_NODE	11:55	11:55	8	)
LEAF_NODE	11:56	11:56	6	,
ARGUMENT	11:58	11:58	6	bs . data
FIELD	11:58	11:61	7	bs . data
LEAF_NODE	11:58	11:58	8	bs
LEAF_NODE	11:60	11:60	8	.
LEAF_NODE	11:61	11:61	8	data
LEAF_NODE	11:65	11:65	6	)
LEAF_NODE	11:66	11:66	4	;
EXPR_STATEMENT	12:1	12:25	3	byte_stream_destroy ( & bs ) ;
EXPR	12:1	12:1	4	byte_stream_destroy ( & bs )
FUNCTION_CALL	12:1	12:24	5	byte_stream_destroy ( & bs )
CALLEE	12:1	12:1	6	byte_stream_destroy
LEAF_NODE	12:1	12:1	7	byte_stream_destroy
LEAF_NODE	12:20	12:20	6	(
ARGUMENT	12:21	12:21	6	& bs
UNARY_EXPR	12:21	12:22	7	& bs
UNARY_OPERATOR	12:21	12:21	8	&
LEAF_NODE	12:21	12:21	9	&
FIELD	12:22	12:22	8	bs
LEAF_NODE	12:22	12:22	9	bs
LEAF_NODE	12:24	12:24	6	)
LEAF_NODE	12:25	12:25	4	;
JUMP_STATEMENT	13:1	13:14	3	return buflen ;
KEYWORD	13:1	13:1	4	return
LEAF_NODE	13:1	13:1	5	return
DESTINATION	13:8	13:8	4	buflen
EXPR	13:8	13:8	5	buflen
FIELD	13:8	13:8	6	buflen
LEAF_NODE	13:8	13:8	7	buflen
LEAF_NODE	13:14	13:14	4	;
LEAF_NODE	14:0	14:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	23:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	gnt_wm_give_focus
LEAF_NODE	2:0	2:0	3	gnt_wm_give_focus
PARAMETER_LIST	2:17	2:46	2	( GntWM * wm , GntWidget * widget )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:25	3	GntWM * wm
TYPE	2:18	2:24	4	GntWM *
TYPE_NAME	2:18	2:18	5	GntWM
LEAF_NODE	2:18	2:18	6	GntWM
POINTER	2:24	2:24	5	*
LEAF_NODE	2:24	2:24	6	*
NAME	2:25	2:25	4	wm
LEAF_NODE	2:25	2:25	5	wm
LEAF_NODE	2:27	2:27	3	,
PARAMETER_DECL	2:29	2:40	3	GntWidget * widget
TYPE	2:29	2:39	4	GntWidget *
TYPE_NAME	2:29	2:29	5	GntWidget
LEAF_NODE	2:29	2:29	6	GntWidget
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	widget
LEAF_NODE	2:40	2:40	5	widget
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	22:1	2	
SIMPLE_DECL	4:1	4:55	3	GntNode * node ; node = g_hash_table_lookup ( wm -> nodes , widget ) ;
VAR_DECL	4:1	4:10	4	GntNode * node ; node = g_hash_table_lookup ( wm -> nodes , widget )
TYPE	4:1	4:9	5	GntNode *
TYPE_NAME	4:1	4:1	6	GntNode
LEAF_NODE	4:1	4:1	7	GntNode
POINTER	4:9	4:9	6	*
LEAF_NODE	4:9	4:9	7	*
NAME	4:10	4:10	5	node
LEAF_NODE	4:10	4:10	6	node
LEAF_NODE	0:0	0:0	5	;
INIT	4:10	4:10	5	node = g_hash_table_lookup ( wm -> nodes , widget )
ASSIGN	4:10	4:17	6	node = g_hash_table_lookup ( wm -> nodes , widget )
LVAL	4:10	4:10	7	node
NAME	4:10	4:10	8	node
LEAF_NODE	4:10	4:10	9	node
ASSIGN_OP	4:15	4:15	7	=
LEAF_NODE	4:15	4:15	8	=
RVAL	4:17	4:17	7	g_hash_table_lookup ( wm -> nodes , widget )
FUNCTION_CALL	4:17	4:54	8	g_hash_table_lookup ( wm -> nodes , widget )
CALLEE	4:17	4:17	9	g_hash_table_lookup
LEAF_NODE	4:17	4:17	10	g_hash_table_lookup
LEAF_NODE	4:36	4:36	9	(
ARGUMENT	4:37	4:37	9	wm -> nodes
FIELD	4:37	4:41	10	wm -> nodes
LEAF_NODE	4:37	4:37	11	wm
LEAF_NODE	4:39	4:39	11	->
LEAF_NODE	4:41	4:41	11	nodes
LEAF_NODE	4:46	4:46	9	,
ARGUMENT	4:48	4:48	9	widget
FIELD	4:48	4:48	10	widget
LEAF_NODE	4:48	4:48	11	widget
LEAF_NODE	4:54	4:54	9	)
LEAF_NODE	4:55	4:55	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	! node
EXPR	5:5	5:5	5	! node
UNARY_EXPR	5:5	5:6	6	! node
UNARY_OPERATOR	5:5	5:5	7	!
LEAF_NODE	5:5	5:5	8	!
FIELD	5:6	5:6	7	node
LEAF_NODE	5:6	5:6	8	node
LEAF_NODE	5:10	5:10	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:8	5	return DESTINATION ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	6:8	6:8	6	;
SELECTION	7:1	8:38	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	widget != wm -> _list . window && ! GNT_IS_MENU ( widget ) && wm -> cws -> ordered -> data != widget
EXPR	7:5	7:5	5	widget != wm -> _list . window && ! GNT_IS_MENU ( widget ) && wm -> cws -> ordered -> data != widget
AND	7:5	7:35	6	widget != wm -> _list . window && ! GNT_IS_MENU ( widget ) && wm -> cws -> ordered -> data != widget
EXPR	7:5	7:15	7	widget != wm -> _list . window
FIELD	7:5	7:5	8	widget
LEAF_NODE	7:5	7:5	9	widget
EQ_OPERATOR	7:12	7:12	8	!=
LEAF_NODE	7:12	7:12	9	!=
FIELD	7:15	7:25	8	wm -> _list . window
LEAF_NODE	7:15	7:15	9	wm
LEAF_NODE	7:17	7:17	9	->
LEAF_NODE	7:19	7:19	9	_list
LEAF_NODE	7:24	7:24	9	.
LEAF_NODE	7:25	7:25	9	window
LEAF_NODE	7:32	7:32	7	&&
EXPR	7:35	7:35	7	! GNT_IS_MENU ( widget ) && wm -> cws -> ordered -> data != widget
AND	7:35	8:4	8	! GNT_IS_MENU ( widget ) && wm -> cws -> ordered -> data != widget
EXPR	7:35	7:35	9	! GNT_IS_MENU ( widget )
UNARY_EXPR	7:35	7:36	10	! GNT_IS_MENU ( widget )
UNARY_OPERATOR	7:35	7:35	11	!
LEAF_NODE	7:35	7:35	12	!
FUNCTION_CALL	7:36	7:54	11	GNT_IS_MENU ( widget )
CALLEE	7:36	7:36	12	GNT_IS_MENU
LEAF_NODE	7:36	7:36	13	GNT_IS_MENU
LEAF_NODE	7:47	7:47	12	(
ARGUMENT	7:48	7:48	12	widget
FIELD	7:48	7:48	13	widget
LEAF_NODE	7:48	7:48	14	widget
LEAF_NODE	7:54	7:54	12	)
LEAF_NODE	7:56	7:56	9	&&
EXPR	8:4	8:30	9	wm -> cws -> ordered -> data != widget
FIELD	8:4	8:22	10	wm -> cws -> ordered -> data
LEAF_NODE	8:4	8:4	11	wm
LEAF_NODE	8:6	8:6	11	->
LEAF_NODE	8:8	8:8	11	cws
LEAF_NODE	8:11	8:11	11	->
LEAF_NODE	8:13	8:13	11	ordered
LEAF_NODE	8:20	8:20	11	->
LEAF_NODE	8:22	8:22	11	data
EQ_OPERATOR	8:27	8:27	10	!=
LEAF_NODE	8:27	8:27	11	!=
FIELD	8:30	8:30	10	widget
LEAF_NODE	8:30	8:30	11	widget
LEAF_NODE	8:36	8:36	4	)
STATEMENTS	8:38	12:1	4	
LEAF_NODE	8:38	8:38	5	{
STATEMENTS	9:2	11:2	5	
SIMPLE_DECL	9:2	9:39	6	GntWidget * w ; w = wm -> cws -> ordered -> data ;
VAR_DECL	9:2	9:13	7	GntWidget * w ; w = wm -> cws -> ordered -> data
TYPE	9:2	9:12	8	GntWidget *
TYPE_NAME	9:2	9:2	9	GntWidget
LEAF_NODE	9:2	9:2	10	GntWidget
POINTER	9:12	9:12	9	*
LEAF_NODE	9:12	9:12	10	*
NAME	9:13	9:13	8	w
LEAF_NODE	9:13	9:13	9	w
LEAF_NODE	0:0	0:0	8	;
INIT	9:13	9:13	8	w = wm -> cws -> ordered -> data
ASSIGN	9:13	9:17	9	w = wm -> cws -> ordered -> data
LVAL	9:13	9:13	10	w
NAME	9:13	9:13	11	w
LEAF_NODE	9:13	9:13	12	w
ASSIGN_OP	9:15	9:15	10	=
LEAF_NODE	9:15	9:15	11	=
RVAL	9:17	9:17	10	wm -> cws -> ordered -> data
FIELD	9:17	9:35	11	wm -> cws -> ordered -> data
LEAF_NODE	9:17	9:17	12	wm
LEAF_NODE	9:19	9:19	12	->
LEAF_NODE	9:21	9:21	12	cws
LEAF_NODE	9:24	9:24	12	->
LEAF_NODE	9:26	9:26	12	ordered
LEAF_NODE	9:33	9:33	12	->
LEAF_NODE	9:35	9:35	12	data
LEAF_NODE	9:39	9:39	7	;
EXPR_STATEMENT	10:2	10:68	6	wm -> cws -> ordered = g_list_bring_to_front ( wm -> cws -> ordered , widget ) ;
EXPR	10:2	10:2	7	wm -> cws -> ordered = g_list_bring_to_front ( wm -> cws -> ordered , widget )
ASSIGN	10:2	10:21	8	wm -> cws -> ordered = g_list_bring_to_front ( wm -> cws -> ordered , widget )
LVAL	10:2	10:2	9	wm -> cws -> ordered
FIELD	10:2	10:11	10	wm -> cws -> ordered
LEAF_NODE	10:2	10:2	11	wm
LEAF_NODE	10:4	10:4	11	->
LEAF_NODE	10:6	10:6	11	cws
LEAF_NODE	10:9	10:9	11	->
LEAF_NODE	10:11	10:11	11	ordered
ASSIGN_OP	10:19	10:19	9	=
LEAF_NODE	10:19	10:19	10	=
RVAL	10:21	10:21	9	g_list_bring_to_front ( wm -> cws -> ordered , widget )
FUNCTION_CALL	10:21	10:67	10	g_list_bring_to_front ( wm -> cws -> ordered , widget )
CALLEE	10:21	10:21	11	g_list_bring_to_front
LEAF_NODE	10:21	10:21	12	g_list_bring_to_front
LEAF_NODE	10:42	10:42	11	(
ARGUMENT	10:43	10:43	11	wm -> cws -> ordered
FIELD	10:43	10:52	12	wm -> cws -> ordered
LEAF_NODE	10:43	10:43	13	wm
LEAF_NODE	10:45	10:45	13	->
LEAF_NODE	10:47	10:47	13	cws
LEAF_NODE	10:50	10:50	13	->
LEAF_NODE	10:52	10:52	13	ordered
LEAF_NODE	10:59	10:59	11	,
ARGUMENT	10:61	10:61	11	widget
FIELD	10:61	10:61	12	widget
LEAF_NODE	10:61	10:61	13	widget
LEAF_NODE	10:67	10:67	11	)
LEAF_NODE	10:68	10:68	7	;
EXPR_STATEMENT	11:2	11:32	6	gnt_widget_set_focus ( w , FALSE ) ;
EXPR	11:2	11:2	7	gnt_widget_set_focus ( w , FALSE )
FUNCTION_CALL	11:2	11:31	8	gnt_widget_set_focus ( w , FALSE )
CALLEE	11:2	11:2	9	gnt_widget_set_focus
LEAF_NODE	11:2	11:2	10	gnt_widget_set_focus
LEAF_NODE	11:22	11:22	9	(
ARGUMENT	11:23	11:23	9	w
FIELD	11:23	11:23	10	w
LEAF_NODE	11:23	11:23	11	w
LEAF_NODE	11:24	11:24	9	,
ARGUMENT	11:26	11:26	9	FALSE
FIELD	11:26	11:26	10	FALSE
LEAF_NODE	11:26	11:26	11	FALSE
LEAF_NODE	11:31	11:31	9	)
LEAF_NODE	11:32	11:32	7	;
LEAF_NODE	12:1	12:1	5	}
EXPR_STATEMENT	13:1	13:35	3	gnt_widget_set_focus ( widget , TRUE ) ;
EXPR	13:1	13:1	4	gnt_widget_set_focus ( widget , TRUE )
FUNCTION_CALL	13:1	13:34	5	gnt_widget_set_focus ( widget , TRUE )
CALLEE	13:1	13:1	6	gnt_widget_set_focus
LEAF_NODE	13:1	13:1	7	gnt_widget_set_focus
LEAF_NODE	13:21	13:21	6	(
ARGUMENT	13:22	13:22	6	widget
FIELD	13:22	13:22	7	widget
LEAF_NODE	13:22	13:22	8	widget
LEAF_NODE	13:28	13:28	6	,
ARGUMENT	13:30	13:30	6	TRUE
FIELD	13:30	13:30	7	TRUE
LEAF_NODE	13:30	13:30	8	TRUE
LEAF_NODE	13:34	13:34	6	)
LEAF_NODE	13:35	13:35	4	;
EXPR_STATEMENT	14:1	14:50	3	GNT_WIDGET_UNSET_FLAGS ( widget , GNT_WIDGET_URGENT ) ;
EXPR	14:1	14:1	4	GNT_WIDGET_UNSET_FLAGS ( widget , GNT_WIDGET_URGENT )
FUNCTION_CALL	14:1	14:49	5	GNT_WIDGET_UNSET_FLAGS ( widget , GNT_WIDGET_URGENT )
CALLEE	14:1	14:1	6	GNT_WIDGET_UNSET_FLAGS
LEAF_NODE	14:1	14:1	7	GNT_WIDGET_UNSET_FLAGS
LEAF_NODE	14:23	14:23	6	(
ARGUMENT	14:24	14:24	6	widget
FIELD	14:24	14:24	7	widget
LEAF_NODE	14:24	14:24	8	widget
LEAF_NODE	14:30	14:30	6	,
ARGUMENT	14:32	14:32	6	GNT_WIDGET_URGENT
FIELD	14:32	14:32	7	GNT_WIDGET_URGENT
LEAF_NODE	14:32	14:32	8	GNT_WIDGET_URGENT
LEAF_NODE	14:49	14:49	6	)
LEAF_NODE	14:50	14:50	4	;
EXPR_STATEMENT	15:1	15:24	3	gnt_widget_draw ( widget ) ;
EXPR	15:1	15:1	4	gnt_widget_draw ( widget )
FUNCTION_CALL	15:1	15:23	5	gnt_widget_draw ( widget )
CALLEE	15:1	15:1	6	gnt_widget_draw
LEAF_NODE	15:1	15:1	7	gnt_widget_draw
LEAF_NODE	15:16	15:16	6	(
ARGUMENT	15:17	15:17	6	widget
FIELD	15:17	15:17	7	widget
LEAF_NODE	15:17	15:17	8	widget
LEAF_NODE	15:23	15:23	6	)
LEAF_NODE	15:24	15:24	4	;
EXPR_STATEMENT	16:1	16:23	3	top_panel ( node -> panel ) ;
EXPR	16:1	16:1	4	top_panel ( node -> panel )
FUNCTION_CALL	16:1	16:22	5	top_panel ( node -> panel )
CALLEE	16:1	16:1	6	top_panel
LEAF_NODE	16:1	16:1	7	top_panel
LEAF_NODE	16:10	16:10	6	(
ARGUMENT	16:11	16:11	6	node -> panel
FIELD	16:11	16:17	7	node -> panel
LEAF_NODE	16:11	16:11	8	node
LEAF_NODE	16:15	16:15	8	->
LEAF_NODE	16:17	16:17	8	panel
LEAF_NODE	16:22	16:22	6	)
LEAF_NODE	16:23	16:23	4	;
SELECTION	17:1	17:23	3	
KEYWORD	17:1	17:1	4	if
LEAF_NODE	17:1	17:1	5	if
LEAF_NODE	17:4	17:4	4	(
CONDITION	17:5	17:5	4	wm -> _list . window
EXPR	17:5	17:5	5	wm -> _list . window
FIELD	17:5	17:15	6	wm -> _list . window
LEAF_NODE	17:5	17:5	7	wm
LEAF_NODE	17:7	17:7	7	->
LEAF_NODE	17:9	17:9	7	_list
LEAF_NODE	17:14	17:14	7	.
LEAF_NODE	17:15	17:15	7	window
LEAF_NODE	17:21	17:21	4	)
STATEMENTS	17:23	20:1	4	
LEAF_NODE	17:23	17:23	5	{
STATEMENTS	18:2	19:2	5	
SIMPLE_DECL	18:2	18:64	6	GntNode * nd ; nd = g_hash_table_lookup ( wm -> nodes , wm -> _list . window ) ;
VAR_DECL	18:2	18:11	7	GntNode * nd ; nd = g_hash_table_lookup ( wm -> nodes , wm -> _list . window )
TYPE	18:2	18:10	8	GntNode *
TYPE_NAME	18:2	18:2	9	GntNode
LEAF_NODE	18:2	18:2	10	GntNode
POINTER	18:10	18:10	9	*
LEAF_NODE	18:10	18:10	10	*
NAME	18:11	18:11	8	nd
LEAF_NODE	18:11	18:11	9	nd
LEAF_NODE	0:0	0:0	8	;
INIT	18:11	18:11	8	nd = g_hash_table_lookup ( wm -> nodes , wm -> _list . window )
ASSIGN	18:11	18:16	9	nd = g_hash_table_lookup ( wm -> nodes , wm -> _list . window )
LVAL	18:11	18:11	10	nd
NAME	18:11	18:11	11	nd
LEAF_NODE	18:11	18:11	12	nd
ASSIGN_OP	18:14	18:14	10	=
LEAF_NODE	18:14	18:14	11	=
RVAL	18:16	18:16	10	g_hash_table_lookup ( wm -> nodes , wm -> _list . window )
FUNCTION_CALL	18:16	18:63	11	g_hash_table_lookup ( wm -> nodes , wm -> _list . window )
CALLEE	18:16	18:16	12	g_hash_table_lookup
LEAF_NODE	18:16	18:16	13	g_hash_table_lookup
LEAF_NODE	18:35	18:35	12	(
ARGUMENT	18:36	18:36	12	wm -> nodes
FIELD	18:36	18:40	13	wm -> nodes
LEAF_NODE	18:36	18:36	14	wm
LEAF_NODE	18:38	18:38	14	->
LEAF_NODE	18:40	18:40	14	nodes
LEAF_NODE	18:45	18:45	12	,
ARGUMENT	18:47	18:47	12	wm -> _list . window
FIELD	18:47	18:57	13	wm -> _list . window
LEAF_NODE	18:47	18:47	14	wm
LEAF_NODE	18:49	18:49	14	->
LEAF_NODE	18:51	18:51	14	_list
LEAF_NODE	18:56	18:56	14	.
LEAF_NODE	18:57	18:57	14	window
LEAF_NODE	18:63	18:63	12	)
LEAF_NODE	18:64	18:64	7	;
EXPR_STATEMENT	19:2	19:22	6	top_panel ( nd -> panel ) ;
EXPR	19:2	19:2	7	top_panel ( nd -> panel )
FUNCTION_CALL	19:2	19:21	8	top_panel ( nd -> panel )
CALLEE	19:2	19:2	9	top_panel
LEAF_NODE	19:2	19:2	10	top_panel
LEAF_NODE	19:11	19:11	9	(
ARGUMENT	19:12	19:12	9	nd -> panel
FIELD	19:12	19:16	10	nd -> panel
LEAF_NODE	19:12	19:12	11	nd
LEAF_NODE	19:14	19:14	11	->
LEAF_NODE	19:16	19:16	11	panel
LEAF_NODE	19:21	19:21	9	)
LEAF_NODE	19:22	19:22	7	;
LEAF_NODE	20:1	20:1	5	}
EXPR_STATEMENT	21:1	21:36	3	gnt_ws_draw_taskbar ( wm -> cws , FALSE ) ;
EXPR	21:1	21:1	4	gnt_ws_draw_taskbar ( wm -> cws , FALSE )
FUNCTION_CALL	21:1	21:35	5	gnt_ws_draw_taskbar ( wm -> cws , FALSE )
CALLEE	21:1	21:1	6	gnt_ws_draw_taskbar
LEAF_NODE	21:1	21:1	7	gnt_ws_draw_taskbar
LEAF_NODE	21:20	21:20	6	(
ARGUMENT	21:21	21:21	6	wm -> cws
FIELD	21:21	21:25	7	wm -> cws
LEAF_NODE	21:21	21:21	8	wm
LEAF_NODE	21:23	21:23	8	->
LEAF_NODE	21:25	21:25	8	cws
LEAF_NODE	21:28	21:28	6	,
ARGUMENT	21:30	21:30	6	FALSE
FIELD	21:30	21:30	7	FALSE
LEAF_NODE	21:30	21:30	8	FALSE
LEAF_NODE	21:35	21:35	6	)
LEAF_NODE	21:36	21:36	4	;
EXPR_STATEMENT	22:1	22:18	3	update_screen ( wm ) ;
EXPR	22:1	22:1	4	update_screen ( wm )
FUNCTION_CALL	22:1	22:17	5	update_screen ( wm )
CALLEE	22:1	22:1	6	update_screen
LEAF_NODE	22:1	22:1	7	update_screen
LEAF_NODE	22:14	22:14	6	(
ARGUMENT	22:15	22:15	6	wm
FIELD	22:15	22:15	7	wm
LEAF_NODE	22:15	22:15	8	wm
LEAF_NODE	22:17	22:17	6	)
LEAF_NODE	22:18	22:18	4	;
LEAF_NODE	23:0	23:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	17:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	pidgin_status_box_get_property
LEAF_NODE	2:0	2:0	3	pidgin_status_box_get_property
PARAMETER_LIST	2:30	3:64	2	( GObject * object , guint param_id , GValue * value , GParamSpec * psec )
LEAF_NODE	2:30	2:30	3	(
PARAMETER_DECL	2:31	2:40	3	GObject * object
TYPE	2:31	2:39	4	GObject *
TYPE_NAME	2:31	2:31	5	GObject
LEAF_NODE	2:31	2:31	6	GObject
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	object
LEAF_NODE	2:40	2:40	5	object
LEAF_NODE	2:46	2:46	3	,
PARAMETER_DECL	2:48	2:54	3	guint param_id
TYPE	2:48	2:48	4	guint
TYPE_NAME	2:48	2:48	5	guint
LEAF_NODE	2:48	2:48	6	guint
NAME	2:54	2:54	4	param_id
LEAF_NODE	2:54	2:54	5	param_id
LEAF_NODE	2:62	2:62	3	,
PARAMETER_DECL	3:33	3:41	3	GValue * value
TYPE	3:33	3:40	4	GValue *
TYPE_NAME	3:33	3:33	5	GValue
LEAF_NODE	3:33	3:33	6	GValue
POINTER	3:40	3:40	5	*
LEAF_NODE	3:40	3:40	6	*
NAME	3:41	3:41	4	value
LEAF_NODE	3:41	3:41	5	value
LEAF_NODE	3:46	3:46	3	,
PARAMETER_DECL	3:48	3:60	3	GParamSpec * psec
TYPE	3:48	3:59	4	GParamSpec *
TYPE_NAME	3:48	3:48	5	GParamSpec
LEAF_NODE	3:48	3:48	6	GParamSpec
POINTER	3:59	3:59	5	*
LEAF_NODE	3:59	3:59	6	*
NAME	3:60	3:60	4	psec
LEAF_NODE	3:60	3:60	5	psec
LEAF_NODE	3:64	3:64	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	6:1	2	
SIMPLE_DECL	5:1	5:55	3	PidginStatusBox * statusbox ; statusbox = PIDGIN_STATUS_BOX ( object ) ;
VAR_DECL	5:1	5:18	4	PidginStatusBox * statusbox ; statusbox = PIDGIN_STATUS_BOX ( object )
TYPE	5:1	5:17	5	PidginStatusBox *
TYPE_NAME	5:1	5:1	6	PidginStatusBox
LEAF_NODE	5:1	5:1	7	PidginStatusBox
POINTER	5:17	5:17	6	*
LEAF_NODE	5:17	5:17	7	*
NAME	5:18	5:18	5	statusbox
LEAF_NODE	5:18	5:18	6	statusbox
LEAF_NODE	0:0	0:0	5	;
INIT	5:18	5:18	5	statusbox = PIDGIN_STATUS_BOX ( object )
ASSIGN	5:18	5:30	6	statusbox = PIDGIN_STATUS_BOX ( object )
LVAL	5:18	5:18	7	statusbox
NAME	5:18	5:18	8	statusbox
LEAF_NODE	5:18	5:18	9	statusbox
ASSIGN_OP	5:28	5:28	7	=
LEAF_NODE	5:28	5:28	8	=
RVAL	5:30	5:30	7	PIDGIN_STATUS_BOX ( object )
FUNCTION_CALL	5:30	5:54	8	PIDGIN_STATUS_BOX ( object )
CALLEE	5:30	5:30	9	PIDGIN_STATUS_BOX
LEAF_NODE	5:30	5:30	10	PIDGIN_STATUS_BOX
LEAF_NODE	5:47	5:47	9	(
ARGUMENT	5:48	5:48	9	object
FIELD	5:48	5:48	10	object
LEAF_NODE	5:48	5:48	11	object
LEAF_NODE	5:54	5:54	9	)
LEAF_NODE	5:55	5:55	4	;
SELECTION	6:1	6:19	3	
KEYWORD	6:1	6:1	4	switch
LEAF_NODE	6:1	6:1	5	switch
LEAF_NODE	6:8	6:8	4	(
CONDITION	6:9	6:9	4	param_id
EXPR	6:9	6:9	5	param_id
FIELD	6:9	6:9	6	param_id
LEAF_NODE	6:9	6:9	7	param_id
LEAF_NODE	6:17	6:17	4	)
STATEMENTS	6:19	16:1	4	
LEAF_NODE	6:19	6:19	5	{
STATEMENTS	7:1	15:2	5	
LABEL	7:1	7:18	6	case PROP_ACCOUNT :
LEAF_NODE	7:1	7:1	7	case
LEAF_NODE	7:6	7:6	7	PROP_ACCOUNT
LEAF_NODE	7:18	7:18	7	:
EXPR_STATEMENT	8:2	8:48	6	g_value_set_pointer ( value , statusbox -> account ) ;
EXPR	8:2	8:2	7	g_value_set_pointer ( value , statusbox -> account )
FUNCTION_CALL	8:2	8:47	8	g_value_set_pointer ( value , statusbox -> account )
CALLEE	8:2	8:2	9	g_value_set_pointer
LEAF_NODE	8:2	8:2	10	g_value_set_pointer
LEAF_NODE	8:21	8:21	9	(
ARGUMENT	8:22	8:22	9	value
FIELD	8:22	8:22	10	value
LEAF_NODE	8:22	8:22	11	value
LEAF_NODE	8:27	8:27	9	,
ARGUMENT	8:29	8:29	9	statusbox -> account
FIELD	8:29	8:40	10	statusbox -> account
LEAF_NODE	8:29	8:29	11	statusbox
LEAF_NODE	8:38	8:38	11	->
LEAF_NODE	8:40	8:40	11	account
LEAF_NODE	8:47	8:47	9	)
LEAF_NODE	8:48	8:48	7	;
JUMP_STATEMENT	9:2	9:7	6	break DESTINATION ;
KEYWORD	9:2	9:2	7	break
LEAF_NODE	9:2	9:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	9:7	9:7	7	;
LABEL	10:1	10:19	6	case PROP_ICON_SEL :
LEAF_NODE	10:1	10:1	7	case
LEAF_NODE	10:6	10:6	7	PROP_ICON_SEL
LEAF_NODE	10:19	10:19	7	:
EXPR_STATEMENT	11:2	11:57	6	g_value_set_boolean ( value , statusbox -> icon_box != NULL ) ;
EXPR	11:2	11:2	7	g_value_set_boolean ( value , statusbox -> icon_box != NULL )
FUNCTION_CALL	11:2	11:56	8	g_value_set_boolean ( value , statusbox -> icon_box != NULL )
CALLEE	11:2	11:2	9	g_value_set_boolean
LEAF_NODE	11:2	11:2	10	g_value_set_boolean
LEAF_NODE	11:21	11:21	9	(
ARGUMENT	11:22	11:22	9	value
FIELD	11:22	11:22	10	value
LEAF_NODE	11:22	11:22	11	value
LEAF_NODE	11:27	11:27	9	,
ARGUMENT	11:29	11:52	9	statusbox -> icon_box != NULL
FIELD	11:29	11:40	10	statusbox -> icon_box
LEAF_NODE	11:29	11:29	11	statusbox
LEAF_NODE	11:38	11:38	11	->
LEAF_NODE	11:40	11:40	11	icon_box
EQ_OPERATOR	11:49	11:49	10	!=
LEAF_NODE	11:49	11:49	11	!=
FIELD	11:52	11:52	10	NULL
LEAF_NODE	11:52	11:52	11	NULL
LEAF_NODE	11:56	11:56	9	)
LEAF_NODE	11:57	11:57	7	;
JUMP_STATEMENT	12:2	12:7	6	break DESTINATION ;
KEYWORD	12:2	12:2	7	break
LEAF_NODE	12:2	12:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	12:7	12:7	7	;
LABEL	13:1	13:8	6	default :
LEAF_NODE	13:1	13:1	7	default
LEAF_NODE	13:8	13:8	7	:
EXPR_STATEMENT	14:2	14:59	6	G_OBJECT_WARN_INVALID_PROPERTY_ID ( object , param_id , psec ) ;
EXPR	14:2	14:2	7	G_OBJECT_WARN_INVALID_PROPERTY_ID ( object , param_id , psec )
FUNCTION_CALL	14:2	14:58	8	G_OBJECT_WARN_INVALID_PROPERTY_ID ( object , param_id , psec )
CALLEE	14:2	14:2	9	G_OBJECT_WARN_INVALID_PROPERTY_ID
LEAF_NODE	14:2	14:2	10	G_OBJECT_WARN_INVALID_PROPERTY_ID
LEAF_NODE	14:35	14:35	9	(
ARGUMENT	14:36	14:36	9	object
FIELD	14:36	14:36	10	object
LEAF_NODE	14:36	14:36	11	object
LEAF_NODE	14:42	14:42	9	,
ARGUMENT	14:44	14:44	9	param_id
FIELD	14:44	14:44	10	param_id
LEAF_NODE	14:44	14:44	11	param_id
LEAF_NODE	14:52	14:52	9	,
ARGUMENT	14:54	14:54	9	psec
FIELD	14:54	14:54	10	psec
LEAF_NODE	14:54	14:54	11	psec
LEAF_NODE	14:58	14:58	9	)
LEAF_NODE	14:59	14:59	7	;
JUMP_STATEMENT	15:2	15:7	6	break DESTINATION ;
KEYWORD	15:2	15:2	7	break
LEAF_NODE	15:2	15:2	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	15:7	15:7	7	;
LEAF_NODE	16:1	16:1	5	}
LEAF_NODE	17:0	17:0	2	}

SOURCE_FILE	1:0	2:0	0	
SIMPLE_DECL	1:0	1:38	1	void gnt_keys_print_combinations ; gnt_keys_print_combinations gnt_keys_print_combinations ( void ) ;
VAR_DECL	1:0	1:5	2	void gnt_keys_print_combinations ; gnt_keys_print_combinations gnt_keys_print_combinations ( void )
TYPE	1:0	1:0	3	void
TYPE_NAME	1:0	1:0	4	void
LEAF_NODE	1:0	1:0	5	void
NAME	1:5	1:5	3	gnt_keys_print_combinations
LEAF_NODE	1:5	1:5	4	gnt_keys_print_combinations
LEAF_NODE	0:0	0:0	3	;
INIT	1:5	1:5	3	gnt_keys_print_combinations gnt_keys_print_combinations ( void )
ASSIGN	1:5	1:32	4	gnt_keys_print_combinations gnt_keys_print_combinations ( void )
LVAL	1:5	1:5	5	gnt_keys_print_combinations
NAME	1:5	1:5	6	gnt_keys_print_combinations
LEAF_NODE	1:5	1:5	7	gnt_keys_print_combinations
ASSIGN_OP	1:5	1:5	5	gnt_keys_print_combinations
NAME	1:5	1:5	6	gnt_keys_print_combinations
LEAF_NODE	1:5	1:5	7	gnt_keys_print_combinations
RVAL	1:32	1:37	5	( void )
LEAF_NODE	1:32	1:32	6	(
EXPR	1:33	1:33	6	void
FIELD	1:33	1:33	7	void
LEAF_NODE	1:33	1:33	8	void
LEAF_NODE	1:37	1:37	6	)
LEAF_NODE	1:38	1:38	2	;
FUNCTION_DEF	2:0	7:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	gnt_keys_print_combinations
LEAF_NODE	2:5	2:5	3	gnt_keys_print_combinations
PARAMETER_LIST	2:32	2:33	2	( )
LEAF_NODE	2:32	2:32	3	(
LEAF_NODE	2:33	2:33	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
EXPR_STATEMENT	4:1	4:25	3	g_printerr ( "--------\n" ) ;
EXPR	4:1	4:1	4	g_printerr ( "--------\n" )
FUNCTION_CALL	4:1	4:24	5	g_printerr ( "--------\n" )
CALLEE	4:1	4:1	6	g_printerr
LEAF_NODE	4:1	4:1	7	g_printerr
LEAF_NODE	4:11	4:11	6	(
ARGUMENT	4:12	4:12	6	"--------\n"
FIELD	4:12	4:12	7	"--------\n"
LEAF_NODE	4:12	4:12	8	"--------\n"
LEAF_NODE	4:24	4:24	6	)
LEAF_NODE	4:25	4:25	4	;
EXPR_STATEMENT	5:1	5:21	3	print_path ( & root , 1 ) ;
EXPR	5:1	5:1	4	print_path ( & root , 1 )
FUNCTION_CALL	5:1	5:20	5	print_path ( & root , 1 )
CALLEE	5:1	5:1	6	print_path
LEAF_NODE	5:1	5:1	7	print_path
LEAF_NODE	5:11	5:11	6	(
ARGUMENT	5:12	5:12	6	& root
UNARY_EXPR	5:12	5:13	7	& root
UNARY_OPERATOR	5:12	5:12	8	&
LEAF_NODE	5:12	5:12	9	&
FIELD	5:13	5:13	8	root
LEAF_NODE	5:13	5:13	9	root
LEAF_NODE	5:17	5:17	6	,
ARGUMENT	5:19	5:19	6	1
FIELD	5:19	5:19	7	1
LEAF_NODE	5:19	5:19	8	1
LEAF_NODE	5:20	5:20	6	)
LEAF_NODE	5:21	5:21	4	;
EXPR_STATEMENT	6:1	6:25	3	g_printerr ( "--------\n" ) ;
EXPR	6:1	6:1	4	g_printerr ( "--------\n" )
FUNCTION_CALL	6:1	6:24	5	g_printerr ( "--------\n" )
CALLEE	6:1	6:1	6	g_printerr
LEAF_NODE	6:1	6:1	7	g_printerr
LEAF_NODE	6:11	6:11	6	(
ARGUMENT	6:12	6:12	6	"--------\n"
FIELD	6:12	6:12	7	"--------\n"
LEAF_NODE	6:12	6:12	8	"--------\n"
LEAF_NODE	6:24	6:24	6	)
LEAF_NODE	6:25	6:25	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	21:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	delete_cert_cb
LEAF_NODE	2:0	2:0	3	delete_cert_cb
PARAMETER_LIST	2:14	2:47	2	( GntWidget * button , gpointer null )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:26	3	GntWidget * button
TYPE	2:15	2:25	4	GntWidget *
TYPE_NAME	2:15	2:15	5	GntWidget
LEAF_NODE	2:15	2:15	6	GntWidget
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	button
LEAF_NODE	2:26	2:26	5	button
LEAF_NODE	2:32	2:32	3	,
PARAMETER_DECL	2:34	2:43	3	gpointer null
TYPE	2:34	2:34	4	gpointer
TYPE_NAME	2:34	2:34	5	gpointer
LEAF_NODE	2:34	2:34	6	gpointer
NAME	2:43	2:43	4	null
LEAF_NODE	2:43	2:43	5	null
LEAF_NODE	2:47	2:47	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	20:1	2	
SIMPLE_DECL	4:1	4:15	3	gchar * primary ;
VAR_DECL	4:1	4:8	4	gchar * primary
TYPE	4:1	4:7	5	gchar *
TYPE_NAME	4:1	4:1	6	gchar
LEAF_NODE	4:1	4:1	7	gchar
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	primary
LEAF_NODE	4:8	4:8	6	primary
LEAF_NODE	4:15	4:15	4	;
SIMPLE_DECL	5:1	5:16	3	const char * key ;
VAR_DECL	5:1	5:13	4	const char * key
TYPE	5:1	5:12	5	const char *
TYPE_NAME	5:1	5:7	6	const char
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	char
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	key
LEAF_NODE	5:13	5:13	6	key
LEAF_NODE	5:16	5:16	4	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	! certmgr . window
EXPR	6:5	6:5	5	! certmgr . window
UNARY_EXPR	6:5	6:6	6	! certmgr . window
UNARY_OPERATOR	6:5	6:5	7	!
LEAF_NODE	6:5	6:5	8	!
FIELD	6:6	6:14	7	certmgr . window
LEAF_NODE	6:6	6:6	8	certmgr
LEAF_NODE	6:13	6:13	8	.
LEAF_NODE	6:14	6:14	8	window
LEAF_NODE	6:20	6:20	4	)
STATEMENTS	7:2	7:2	4	
JUMP_STATEMENT	7:2	7:8	5	return DESTINATION ;
KEYWORD	7:2	7:2	6	return
LEAF_NODE	7:2	7:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	7:8	7:8	6	;
EXPR_STATEMENT	8:1	8:58	3	key = gnt_tree_get_selection_data ( GNT_TREE ( certmgr . tree ) ) ;
EXPR	8:1	8:1	4	key = gnt_tree_get_selection_data ( GNT_TREE ( certmgr . tree ) )
ASSIGN	8:1	8:7	5	key = gnt_tree_get_selection_data ( GNT_TREE ( certmgr . tree ) )
LVAL	8:1	8:1	6	key
FIELD	8:1	8:1	7	key
LEAF_NODE	8:1	8:1	8	key
ASSIGN_OP	8:5	8:5	6	=
LEAF_NODE	8:5	8:5	7	=
RVAL	8:7	8:7	6	gnt_tree_get_selection_data ( GNT_TREE ( certmgr . tree ) )
FUNCTION_CALL	8:7	8:57	7	gnt_tree_get_selection_data ( GNT_TREE ( certmgr . tree ) )
CALLEE	8:7	8:7	8	gnt_tree_get_selection_data
LEAF_NODE	8:7	8:7	9	gnt_tree_get_selection_data
LEAF_NODE	8:34	8:34	8	(
ARGUMENT	8:35	8:35	8	GNT_TREE ( certmgr . tree )
FUNCTION_CALL	8:35	8:56	9	GNT_TREE ( certmgr . tree )
CALLEE	8:35	8:35	10	GNT_TREE
LEAF_NODE	8:35	8:35	11	GNT_TREE
LEAF_NODE	8:43	8:43	10	(
ARGUMENT	8:44	8:44	10	certmgr . tree
FIELD	8:44	8:52	11	certmgr . tree
LEAF_NODE	8:44	8:44	12	certmgr
LEAF_NODE	8:51	8:51	12	.
LEAF_NODE	8:52	8:52	12	tree
LEAF_NODE	8:56	8:56	10	)
LEAF_NODE	8:57	8:57	8	)
LEAF_NODE	8:58	8:58	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	! key
EXPR	9:5	9:5	5	! key
UNARY_EXPR	9:5	9:6	6	! key
UNARY_OPERATOR	9:5	9:5	7	!
LEAF_NODE	9:5	9:5	8	!
FIELD	9:6	9:6	7	key
LEAF_NODE	9:6	9:6	8	key
LEAF_NODE	9:9	9:9	4	)
STATEMENTS	10:2	10:2	4	
JUMP_STATEMENT	10:2	10:8	5	return DESTINATION ;
KEYWORD	10:2	10:2	6	return
LEAF_NODE	10:2	10:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	10:8	10:8	6	;
EXPR_STATEMENT	11:1	11:71	3	primary = g_strdup_printf ( _ ( "Really delete certificate for %s?" ) , key ) ;
EXPR	11:1	11:1	4	primary = g_strdup_printf ( _ ( "Really delete certificate for %s?" ) , key )
ASSIGN	11:1	11:11	5	primary = g_strdup_printf ( _ ( "Really delete certificate for %s?" ) , key )
LVAL	11:1	11:1	6	primary
FIELD	11:1	11:1	7	primary
LEAF_NODE	11:1	11:1	8	primary
ASSIGN_OP	11:9	11:9	6	=
LEAF_NODE	11:9	11:9	7	=
RVAL	11:11	11:11	6	g_strdup_printf ( _ ( "Really delete certificate for %s?" ) , key )
FUNCTION_CALL	11:11	11:70	7	g_strdup_printf ( _ ( "Really delete certificate for %s?" ) , key )
CALLEE	11:11	11:11	8	g_strdup_printf
LEAF_NODE	11:11	11:11	9	g_strdup_printf
LEAF_NODE	11:26	11:26	8	(
ARGUMENT	11:27	11:27	8	_ ( "Really delete certificate for %s?" )
FUNCTION_CALL	11:27	11:64	9	_ ( "Really delete certificate for %s?" )
CALLEE	11:27	11:27	10	_
LEAF_NODE	11:27	11:27	11	_
LEAF_NODE	11:28	11:28	10	(
ARGUMENT	11:29	11:29	10	"Really delete certificate for %s?"
FIELD	11:29	11:29	11	"Really delete certificate for %s?"
LEAF_NODE	11:29	11:29	12	"Really delete certificate for %s?"
LEAF_NODE	11:64	11:64	10	)
LEAF_NODE	11:65	11:65	8	,
ARGUMENT	11:67	11:67	8	key
FIELD	11:67	11:67	9	key
LEAF_NODE	11:67	11:67	10	key
LEAF_NODE	11:70	11:70	8	)
LEAF_NODE	11:71	11:71	4	;
EXPR_STATEMENT	12:1	12:46	3	purple_request_close_with_handle ( ( void * ) key ) ;
EXPR	12:1	12:1	4	purple_request_close_with_handle ( ( void * ) key )
FUNCTION_CALL	12:1	12:45	5	purple_request_close_with_handle ( ( void * ) key )
CALLEE	12:1	12:1	6	purple_request_close_with_handle
LEAF_NODE	12:1	12:1	7	purple_request_close_with_handle
LEAF_NODE	12:33	12:33	6	(
ARGUMENT	12:34	12:42	6	( void * ) key
LEAF_NODE	12:34	12:34	7	(
TYPE_NAME	12:35	12:35	7	void
LEAF_NODE	12:35	12:35	8	void
LEAF_NODE	12:40	12:40	7	*
LEAF_NODE	12:41	12:41	7	)
FIELD	12:42	12:42	7	key
LEAF_NODE	12:42	12:42	8	key
LEAF_NODE	12:45	12:45	6	)
LEAF_NODE	12:46	12:46	4	;
EXPR_STATEMENT	13:1	19:10	3	purple_request_yes_no ( ( void * ) key , _ ( "Confirm certificate delete" ) , primary , NULL , 0 , NULL , NULL , NULL , g_strdup ( key ) , tls_peers_mgmt_delete_confirm_cb , g_free ) ;
EXPR	13:1	13:1	4	purple_request_yes_no ( ( void * ) key , _ ( "Confirm certificate delete" ) , primary , NULL , 0 , NULL , NULL , NULL , g_strdup ( key ) , tls_peers_mgmt_delete_confirm_cb , g_free )
FUNCTION_CALL	13:1	19:9	5	purple_request_yes_no ( ( void * ) key , _ ( "Confirm certificate delete" ) , primary , NULL , 0 , NULL , NULL , NULL , g_strdup ( key ) , tls_peers_mgmt_delete_confirm_cb , g_free )
CALLEE	13:1	13:1	6	purple_request_yes_no
LEAF_NODE	13:1	13:1	7	purple_request_yes_no
LEAF_NODE	13:22	13:22	6	(
ARGUMENT	13:23	13:31	6	( void * ) key
LEAF_NODE	13:23	13:23	7	(
TYPE_NAME	13:24	13:24	7	void
LEAF_NODE	13:24	13:24	8	void
LEAF_NODE	13:29	13:29	7	*
LEAF_NODE	13:30	13:30	7	)
FIELD	13:31	13:31	7	key
LEAF_NODE	13:31	13:31	8	key
LEAF_NODE	13:34	13:34	6	,
ARGUMENT	13:36	13:36	6	_ ( "Confirm certificate delete" )
FUNCTION_CALL	13:36	13:66	7	_ ( "Confirm certificate delete" )
CALLEE	13:36	13:36	8	_
LEAF_NODE	13:36	13:36	9	_
LEAF_NODE	13:37	13:37	8	(
ARGUMENT	13:38	13:38	8	"Confirm certificate delete"
FIELD	13:38	13:38	9	"Confirm certificate delete"
LEAF_NODE	13:38	13:38	10	"Confirm certificate delete"
LEAF_NODE	13:66	13:66	8	)
LEAF_NODE	13:67	13:67	6	,
ARGUMENT	14:3	14:3	6	primary
FIELD	14:3	14:3	7	primary
LEAF_NODE	14:3	14:3	8	primary
LEAF_NODE	14:10	14:10	6	,
ARGUMENT	14:12	14:12	6	NULL
FIELD	14:12	14:12	7	NULL
LEAF_NODE	14:12	14:12	8	NULL
LEAF_NODE	14:16	14:16	6	,
ARGUMENT	15:3	15:3	6	0
FIELD	15:3	15:3	7	0
LEAF_NODE	15:3	15:3	8	0
LEAF_NODE	15:4	15:4	6	,
ARGUMENT	16:3	16:3	6	NULL
FIELD	16:3	16:3	7	NULL
LEAF_NODE	16:3	16:3	8	NULL
LEAF_NODE	16:7	16:7	6	,
ARGUMENT	16:9	16:9	6	NULL
FIELD	16:9	16:9	7	NULL
LEAF_NODE	16:9	16:9	8	NULL
LEAF_NODE	16:13	16:13	6	,
ARGUMENT	16:15	16:15	6	NULL
FIELD	16:15	16:15	7	NULL
LEAF_NODE	16:15	16:15	8	NULL
LEAF_NODE	16:19	16:19	6	,
ARGUMENT	17:3	17:3	6	g_strdup ( key )
FUNCTION_CALL	17:3	17:15	7	g_strdup ( key )
CALLEE	17:3	17:3	8	g_strdup
LEAF_NODE	17:3	17:3	9	g_strdup
LEAF_NODE	17:11	17:11	8	(
ARGUMENT	17:12	17:12	8	key
FIELD	17:12	17:12	9	key
LEAF_NODE	17:12	17:12	10	key
LEAF_NODE	17:15	17:15	8	)
LEAF_NODE	17:16	17:16	6	,
ARGUMENT	18:3	18:3	6	tls_peers_mgmt_delete_confirm_cb
FIELD	18:3	18:3	7	tls_peers_mgmt_delete_confirm_cb
LEAF_NODE	18:3	18:3	8	tls_peers_mgmt_delete_confirm_cb
LEAF_NODE	18:35	18:35	6	,
ARGUMENT	19:3	19:3	6	g_free
FIELD	19:3	19:3	7	g_free
LEAF_NODE	19:3	19:3	8	g_free
LEAF_NODE	19:9	19:9	6	)
LEAF_NODE	19:10	19:10	4	;
EXPR_STATEMENT	20:1	20:16	3	g_free ( primary ) ;
EXPR	20:1	20:1	4	g_free ( primary )
FUNCTION_CALL	20:1	20:15	5	g_free ( primary )
CALLEE	20:1	20:1	6	g_free
LEAF_NODE	20:1	20:1	7	g_free
LEAF_NODE	20:7	20:7	6	(
ARGUMENT	20:8	20:8	6	primary
FIELD	20:8	20:8	7	primary
LEAF_NODE	20:8	20:8	8	primary
LEAF_NODE	20:15	20:15	6	)
LEAF_NODE	20:16	20:16	4	;
LEAF_NODE	21:0	21:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	70:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	finch_xfer_dialog_new
LEAF_NODE	2:0	2:0	3	finch_xfer_dialog_new
PARAMETER_LIST	2:21	2:26	2	( void )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:22	3	void
LEAF_NODE	2:22	2:22	4	void
LEAF_NODE	2:26	2:26	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	69:1	2	
SIMPLE_DECL	4:1	4:12	3	GList * iter ;
VAR_DECL	4:1	4:8	4	GList * iter
TYPE	4:1	4:7	5	GList *
TYPE_NAME	4:1	4:1	6	GList
LEAF_NODE	4:1	4:1	7	GList
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	iter
LEAF_NODE	4:8	4:8	6	iter
LEAF_NODE	4:12	4:12	4	;
SIMPLE_DECL	5:1	5:18	3	GntWidget * window ;
VAR_DECL	5:1	5:12	4	GntWidget * window
TYPE	5:1	5:11	5	GntWidget *
TYPE_NAME	5:1	5:1	6	GntWidget
LEAF_NODE	5:1	5:1	7	GntWidget
POINTER	5:11	5:11	6	*
LEAF_NODE	5:11	5:11	7	*
NAME	5:12	5:12	5	window
LEAF_NODE	5:12	5:12	6	window
LEAF_NODE	5:18	5:18	4	;
SIMPLE_DECL	6:1	6:16	3	GntWidget * bbox ;
VAR_DECL	6:1	6:12	4	GntWidget * bbox
TYPE	6:1	6:11	5	GntWidget *
TYPE_NAME	6:1	6:1	6	GntWidget
LEAF_NODE	6:1	6:1	7	GntWidget
POINTER	6:11	6:11	6	*
LEAF_NODE	6:11	6:11	7	*
NAME	6:12	6:12	5	bbox
LEAF_NODE	6:12	6:12	6	bbox
LEAF_NODE	6:16	6:16	4	;
SIMPLE_DECL	7:1	7:18	3	GntWidget * button ;
VAR_DECL	7:1	7:12	4	GntWidget * button
TYPE	7:1	7:11	5	GntWidget *
TYPE_NAME	7:1	7:1	6	GntWidget
LEAF_NODE	7:1	7:1	7	GntWidget
POINTER	7:11	7:11	6	*
LEAF_NODE	7:11	7:11	7	*
NAME	7:12	7:12	5	button
LEAF_NODE	7:12	7:12	6	button
LEAF_NODE	7:18	7:18	4	;
SIMPLE_DECL	8:1	8:20	3	GntWidget * checkbox ;
VAR_DECL	8:1	8:12	4	GntWidget * checkbox
TYPE	8:1	8:11	5	GntWidget *
TYPE_NAME	8:1	8:1	6	GntWidget
LEAF_NODE	8:1	8:1	7	GntWidget
POINTER	8:11	8:11	6	*
LEAF_NODE	8:11	8:11	7	*
NAME	8:12	8:12	5	checkbox
LEAF_NODE	8:12	8:12	6	checkbox
LEAF_NODE	8:20	8:20	4	;
SIMPLE_DECL	9:1	9:16	3	GntWidget * tree ;
VAR_DECL	9:1	9:12	4	GntWidget * tree
TYPE	9:1	9:11	5	GntWidget *
TYPE_NAME	9:1	9:1	6	GntWidget
LEAF_NODE	9:1	9:1	7	GntWidget
POINTER	9:11	9:11	6	*
LEAF_NODE	9:11	9:11	7	*
NAME	9:12	9:12	5	tree
LEAF_NODE	9:12	9:12	6	tree
LEAF_NODE	9:16	9:16	4	;
LEAF_NODE	10:1	10:1	3	int
LEAF_NODE	10:5	10:5	3	widths
LEAF_NODE	10:11	10:11	3	[
LEAF_NODE	10:12	10:12	3	]
LEAF_NODE	10:14	10:14	3	=
LEAF_NODE	10:16	10:16	3	{
STATEMENTS	10:17	10:37	3	
LEAF_NODE	10:17	10:17	4	8
LEAF_NODE	10:18	10:18	4	,
LEAF_NODE	10:20	10:20	4	12
LEAF_NODE	10:22	10:22	4	,
LEAF_NODE	10:24	10:24	4	8
LEAF_NODE	10:25	10:25	4	,
LEAF_NODE	10:27	10:27	4	8
LEAF_NODE	10:28	10:28	4	,
LEAF_NODE	10:30	10:30	4	8
LEAF_NODE	10:31	10:31	4	,
LEAF_NODE	10:33	10:33	4	8
LEAF_NODE	10:34	10:34	4	,
LEAF_NODE	10:36	10:36	4	-
LEAF_NODE	10:37	10:37	4	1
LEAF_NODE	10:38	10:38	3	}
LEAF_NODE	10:39	10:39	3	;
SELECTION	11:1	12:2	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	! xfer_dialog
EXPR	11:5	11:5	5	! xfer_dialog
UNARY_EXPR	11:5	11:6	6	! xfer_dialog
UNARY_OPERATOR	11:5	11:5	7	!
LEAF_NODE	11:5	11:5	8	!
FIELD	11:6	11:6	7	xfer_dialog
LEAF_NODE	11:6	11:6	8	xfer_dialog
LEAF_NODE	11:17	11:17	4	)
STATEMENTS	12:2	12:2	4	
EXPR_STATEMENT	12:2	12:46	5	xfer_dialog = g_new0 ( PurpleGntXferDialog , 1 ) ;
EXPR	12:2	12:2	6	xfer_dialog = g_new0 ( PurpleGntXferDialog , 1 )
ASSIGN	12:2	12:16	7	xfer_dialog = g_new0 ( PurpleGntXferDialog , 1 )
LVAL	12:2	12:2	8	xfer_dialog
FIELD	12:2	12:2	9	xfer_dialog
LEAF_NODE	12:2	12:2	10	xfer_dialog
ASSIGN_OP	12:14	12:14	8	=
LEAF_NODE	12:14	12:14	9	=
RVAL	12:16	12:16	8	g_new0 ( PurpleGntXferDialog , 1 )
FUNCTION_CALL	12:16	12:45	9	g_new0 ( PurpleGntXferDialog , 1 )
CALLEE	12:16	12:16	10	g_new0
LEAF_NODE	12:16	12:16	11	g_new0
LEAF_NODE	12:22	12:22	10	(
ARGUMENT	12:23	12:23	10	PurpleGntXferDialog
FIELD	12:23	12:23	11	PurpleGntXferDialog
LEAF_NODE	12:23	12:23	12	PurpleGntXferDialog
LEAF_NODE	12:42	12:42	10	,
ARGUMENT	12:44	12:44	10	1
FIELD	12:44	12:44	11	1
LEAF_NODE	12:44	12:44	12	1
LEAF_NODE	12:45	12:45	10	)
LEAF_NODE	12:46	12:46	6	;
EXPR_STATEMENT	13:1	14:56	3	xfer_dialog -> keep_open = purple_prefs_get_bool ( "/finch/filetransfer/keep_open" ) ;
EXPR	13:1	13:1	4	xfer_dialog -> keep_open = purple_prefs_get_bool ( "/finch/filetransfer/keep_open" )
ASSIGN	13:1	14:2	5	xfer_dialog -> keep_open = purple_prefs_get_bool ( "/finch/filetransfer/keep_open" )
LVAL	13:1	13:1	6	xfer_dialog -> keep_open
FIELD	13:1	13:14	7	xfer_dialog -> keep_open
LEAF_NODE	13:1	13:1	8	xfer_dialog
LEAF_NODE	13:12	13:12	8	->
LEAF_NODE	13:14	13:14	8	keep_open
ASSIGN_OP	13:24	13:24	6	=
LEAF_NODE	13:24	13:24	7	=
RVAL	14:2	14:2	6	purple_prefs_get_bool ( "/finch/filetransfer/keep_open" )
FUNCTION_CALL	14:2	14:55	7	purple_prefs_get_bool ( "/finch/filetransfer/keep_open" )
CALLEE	14:2	14:2	8	purple_prefs_get_bool
LEAF_NODE	14:2	14:2	9	purple_prefs_get_bool
LEAF_NODE	14:23	14:23	8	(
ARGUMENT	14:24	14:24	8	"/finch/filetransfer/keep_open"
FIELD	14:24	14:24	9	"/finch/filetransfer/keep_open"
LEAF_NODE	14:24	14:24	10	"/finch/filetransfer/keep_open"
LEAF_NODE	14:55	14:55	8	)
LEAF_NODE	14:56	14:56	4	;
EXPR_STATEMENT	15:1	16:61	3	xfer_dialog -> auto_clear = purple_prefs_get_bool ( "/finch/filetransfer/clear_finished" ) ;
EXPR	15:1	15:1	4	xfer_dialog -> auto_clear = purple_prefs_get_bool ( "/finch/filetransfer/clear_finished" )
ASSIGN	15:1	16:2	5	xfer_dialog -> auto_clear = purple_prefs_get_bool ( "/finch/filetransfer/clear_finished" )
LVAL	15:1	15:1	6	xfer_dialog -> auto_clear
FIELD	15:1	15:14	7	xfer_dialog -> auto_clear
LEAF_NODE	15:1	15:1	8	xfer_dialog
LEAF_NODE	15:12	15:12	8	->
LEAF_NODE	15:14	15:14	8	auto_clear
ASSIGN_OP	15:25	15:25	6	=
LEAF_NODE	15:25	15:25	7	=
RVAL	16:2	16:2	6	purple_prefs_get_bool ( "/finch/filetransfer/clear_finished" )
FUNCTION_CALL	16:2	16:60	7	purple_prefs_get_bool ( "/finch/filetransfer/clear_finished" )
CALLEE	16:2	16:2	8	purple_prefs_get_bool
LEAF_NODE	16:2	16:2	9	purple_prefs_get_bool
LEAF_NODE	16:23	16:23	8	(
ARGUMENT	16:24	16:24	8	"/finch/filetransfer/clear_finished"
FIELD	16:24	16:24	9	"/finch/filetransfer/clear_finished"
LEAF_NODE	16:24	16:24	10	"/finch/filetransfer/clear_finished"
LEAF_NODE	16:60	16:60	8	)
LEAF_NODE	16:61	16:61	4	;
EXPR_STATEMENT	18:1	18:51	3	xfer_dialog -> window = window = gnt_vbox_new ( FALSE ) ;
EXPR	18:1	18:1	4	xfer_dialog -> window = window = gnt_vbox_new ( FALSE )
ASSIGN	18:1	18:23	5	xfer_dialog -> window = window = gnt_vbox_new ( FALSE )
LVAL	18:1	18:1	6	xfer_dialog -> window
FIELD	18:1	18:14	7	xfer_dialog -> window
LEAF_NODE	18:1	18:1	8	xfer_dialog
LEAF_NODE	18:12	18:12	8	->
LEAF_NODE	18:14	18:14	8	window
ASSIGN_OP	18:21	18:21	6	=
LEAF_NODE	18:21	18:21	7	=
RVAL	18:23	18:23	6	window = gnt_vbox_new ( FALSE )
ASSIGN	18:23	18:32	7	window = gnt_vbox_new ( FALSE )
LVAL	18:23	18:23	8	window
FIELD	18:23	18:23	9	window
LEAF_NODE	18:23	18:23	10	window
ASSIGN_OP	18:30	18:30	8	=
LEAF_NODE	18:30	18:30	9	=
RVAL	18:32	18:32	8	gnt_vbox_new ( FALSE )
FUNCTION_CALL	18:32	18:50	9	gnt_vbox_new ( FALSE )
CALLEE	18:32	18:32	10	gnt_vbox_new
LEAF_NODE	18:32	18:32	11	gnt_vbox_new
LEAF_NODE	18:44	18:44	10	(
ARGUMENT	18:45	18:45	10	FALSE
FIELD	18:45	18:45	11	FALSE
LEAF_NODE	18:45	18:45	12	FALSE
LEAF_NODE	18:50	18:50	10	)
LEAF_NODE	18:51	18:51	4	;
EXPR_STATEMENT	19:1	19:91	3	g_signal_connect ( G_OBJECT ( window ) , "destroy" , G_CALLBACK ( finch_xfer_dialog_destroy ) , NULL ) ;
EXPR	19:1	19:1	4	g_signal_connect ( G_OBJECT ( window ) , "destroy" , G_CALLBACK ( finch_xfer_dialog_destroy ) , NULL )
FUNCTION_CALL	19:1	19:90	5	g_signal_connect ( G_OBJECT ( window ) , "destroy" , G_CALLBACK ( finch_xfer_dialog_destroy ) , NULL )
CALLEE	19:1	19:1	6	g_signal_connect
LEAF_NODE	19:1	19:1	7	g_signal_connect
LEAF_NODE	19:17	19:17	6	(
ARGUMENT	19:18	19:18	6	G_OBJECT ( window )
FUNCTION_CALL	19:18	19:33	7	G_OBJECT ( window )
CALLEE	19:18	19:18	8	G_OBJECT
LEAF_NODE	19:18	19:18	9	G_OBJECT
LEAF_NODE	19:26	19:26	8	(
ARGUMENT	19:27	19:27	8	window
FIELD	19:27	19:27	9	window
LEAF_NODE	19:27	19:27	10	window
LEAF_NODE	19:33	19:33	8	)
LEAF_NODE	19:34	19:34	6	,
ARGUMENT	19:36	19:36	6	"destroy"
FIELD	19:36	19:36	7	"destroy"
LEAF_NODE	19:36	19:36	8	"destroy"
LEAF_NODE	19:45	19:45	6	,
ARGUMENT	19:47	19:47	6	G_CALLBACK ( finch_xfer_dialog_destroy )
FUNCTION_CALL	19:47	19:83	7	G_CALLBACK ( finch_xfer_dialog_destroy )
CALLEE	19:47	19:47	8	G_CALLBACK
LEAF_NODE	19:47	19:47	9	G_CALLBACK
LEAF_NODE	19:57	19:57	8	(
ARGUMENT	19:58	19:58	8	finch_xfer_dialog_destroy
FIELD	19:58	19:58	9	finch_xfer_dialog_destroy
LEAF_NODE	19:58	19:58	10	finch_xfer_dialog_destroy
LEAF_NODE	19:83	19:83	8	)
LEAF_NODE	19:84	19:84	6	,
ARGUMENT	19:86	19:86	6	NULL
FIELD	19:86	19:86	7	NULL
LEAF_NODE	19:86	19:86	8	NULL
LEAF_NODE	19:90	19:90	6	)
LEAF_NODE	19:91	19:91	4	;
EXPR_STATEMENT	20:1	20:44	3	gnt_box_set_toplevel ( GNT_BOX ( window ) , TRUE ) ;
EXPR	20:1	20:1	4	gnt_box_set_toplevel ( GNT_BOX ( window ) , TRUE )
FUNCTION_CALL	20:1	20:43	5	gnt_box_set_toplevel ( GNT_BOX ( window ) , TRUE )
CALLEE	20:1	20:1	6	gnt_box_set_toplevel
LEAF_NODE	20:1	20:1	7	gnt_box_set_toplevel
LEAF_NODE	20:21	20:21	6	(
ARGUMENT	20:22	20:22	6	GNT_BOX ( window )
FUNCTION_CALL	20:22	20:36	7	GNT_BOX ( window )
CALLEE	20:22	20:22	8	GNT_BOX
LEAF_NODE	20:22	20:22	9	GNT_BOX
LEAF_NODE	20:29	20:29	8	(
ARGUMENT	20:30	20:30	8	window
FIELD	20:30	20:30	9	window
LEAF_NODE	20:30	20:30	10	window
LEAF_NODE	20:36	20:36	8	)
LEAF_NODE	20:37	20:37	6	,
ARGUMENT	20:39	20:39	6	TRUE
FIELD	20:39	20:39	7	TRUE
LEAF_NODE	20:39	20:39	8	TRUE
LEAF_NODE	20:43	20:43	6	)
LEAF_NODE	20:44	20:44	4	;
EXPR_STATEMENT	21:1	21:56	3	gnt_box_set_title ( GNT_BOX ( window ) , _ ( "File Transfers" ) ) ;
EXPR	21:1	21:1	4	gnt_box_set_title ( GNT_BOX ( window ) , _ ( "File Transfers" ) )
FUNCTION_CALL	21:1	21:55	5	gnt_box_set_title ( GNT_BOX ( window ) , _ ( "File Transfers" ) )
CALLEE	21:1	21:1	6	gnt_box_set_title
LEAF_NODE	21:1	21:1	7	gnt_box_set_title
LEAF_NODE	21:18	21:18	6	(
ARGUMENT	21:19	21:19	6	GNT_BOX ( window )
FUNCTION_CALL	21:19	21:33	7	GNT_BOX ( window )
CALLEE	21:19	21:19	8	GNT_BOX
LEAF_NODE	21:19	21:19	9	GNT_BOX
LEAF_NODE	21:26	21:26	8	(
ARGUMENT	21:27	21:27	8	window
FIELD	21:27	21:27	9	window
LEAF_NODE	21:27	21:27	10	window
LEAF_NODE	21:33	21:33	8	)
LEAF_NODE	21:34	21:34	6	,
ARGUMENT	21:36	21:36	6	_ ( "File Transfers" )
FUNCTION_CALL	21:36	21:54	7	_ ( "File Transfers" )
CALLEE	21:36	21:36	8	_
LEAF_NODE	21:36	21:36	9	_
LEAF_NODE	21:37	21:37	8	(
ARGUMENT	21:38	21:38	8	"File Transfers"
FIELD	21:38	21:38	9	"File Transfers"
LEAF_NODE	21:38	21:38	10	"File Transfers"
LEAF_NODE	21:54	21:54	8	)
LEAF_NODE	21:55	21:55	6	)
LEAF_NODE	21:56	21:56	4	;
EXPR_STATEMENT	22:1	22:40	3	gnt_box_set_fill ( GNT_BOX ( window ) , TRUE ) ;
EXPR	22:1	22:1	4	gnt_box_set_fill ( GNT_BOX ( window ) , TRUE )
FUNCTION_CALL	22:1	22:39	5	gnt_box_set_fill ( GNT_BOX ( window ) , TRUE )
CALLEE	22:1	22:1	6	gnt_box_set_fill
LEAF_NODE	22:1	22:1	7	gnt_box_set_fill
LEAF_NODE	22:17	22:17	6	(
ARGUMENT	22:18	22:18	6	GNT_BOX ( window )
FUNCTION_CALL	22:18	22:32	7	GNT_BOX ( window )
CALLEE	22:18	22:18	8	GNT_BOX
LEAF_NODE	22:18	22:18	9	GNT_BOX
LEAF_NODE	22:25	22:25	8	(
ARGUMENT	22:26	22:26	8	window
FIELD	22:26	22:26	9	window
LEAF_NODE	22:26	22:26	10	window
LEAF_NODE	22:32	22:32	8	)
LEAF_NODE	22:33	22:33	6	,
ARGUMENT	22:35	22:35	6	TRUE
FIELD	22:35	22:35	7	TRUE
LEAF_NODE	22:35	22:35	8	TRUE
LEAF_NODE	22:39	22:39	6	)
LEAF_NODE	22:40	22:40	4	;
EXPR_STATEMENT	23:1	23:54	3	gnt_box_set_alignment ( GNT_BOX ( window ) , GNT_ALIGN_MID ) ;
EXPR	23:1	23:1	4	gnt_box_set_alignment ( GNT_BOX ( window ) , GNT_ALIGN_MID )
FUNCTION_CALL	23:1	23:53	5	gnt_box_set_alignment ( GNT_BOX ( window ) , GNT_ALIGN_MID )
CALLEE	23:1	23:1	6	gnt_box_set_alignment
LEAF_NODE	23:1	23:1	7	gnt_box_set_alignment
LEAF_NODE	23:22	23:22	6	(
ARGUMENT	23:23	23:23	6	GNT_BOX ( window )
FUNCTION_CALL	23:23	23:37	7	GNT_BOX ( window )
CALLEE	23:23	23:23	8	GNT_BOX
LEAF_NODE	23:23	23:23	9	GNT_BOX
LEAF_NODE	23:30	23:30	8	(
ARGUMENT	23:31	23:31	8	window
FIELD	23:31	23:31	9	window
LEAF_NODE	23:31	23:31	10	window
LEAF_NODE	23:37	23:37	8	)
LEAF_NODE	23:38	23:38	6	,
ARGUMENT	23:40	23:40	6	GNT_ALIGN_MID
FIELD	23:40	23:40	7	GNT_ALIGN_MID
LEAF_NODE	23:40	23:40	8	GNT_ALIGN_MID
LEAF_NODE	23:53	23:53	6	)
LEAF_NODE	23:54	23:54	4	;
EXPR_STATEMENT	24:1	24:66	3	xfer_dialog -> tree = tree = gnt_tree_new_with_columns ( NUM_COLUMNS ) ;
EXPR	24:1	24:1	4	xfer_dialog -> tree = tree = gnt_tree_new_with_columns ( NUM_COLUMNS )
ASSIGN	24:1	24:21	5	xfer_dialog -> tree = tree = gnt_tree_new_with_columns ( NUM_COLUMNS )
LVAL	24:1	24:1	6	xfer_dialog -> tree
FIELD	24:1	24:14	7	xfer_dialog -> tree
LEAF_NODE	24:1	24:1	8	xfer_dialog
LEAF_NODE	24:12	24:12	8	->
LEAF_NODE	24:14	24:14	8	tree
ASSIGN_OP	24:19	24:19	6	=
LEAF_NODE	24:19	24:19	7	=
RVAL	24:21	24:21	6	tree = gnt_tree_new_with_columns ( NUM_COLUMNS )
ASSIGN	24:21	24:28	7	tree = gnt_tree_new_with_columns ( NUM_COLUMNS )
LVAL	24:21	24:21	8	tree
FIELD	24:21	24:21	9	tree
LEAF_NODE	24:21	24:21	10	tree
ASSIGN_OP	24:26	24:26	8	=
LEAF_NODE	24:26	24:26	9	=
RVAL	24:28	24:28	8	gnt_tree_new_with_columns ( NUM_COLUMNS )
FUNCTION_CALL	24:28	24:65	9	gnt_tree_new_with_columns ( NUM_COLUMNS )
CALLEE	24:28	24:28	10	gnt_tree_new_with_columns
LEAF_NODE	24:28	24:28	11	gnt_tree_new_with_columns
LEAF_NODE	24:53	24:53	10	(
ARGUMENT	24:54	24:54	10	NUM_COLUMNS
FIELD	24:54	24:54	11	NUM_COLUMNS
LEAF_NODE	24:54	24:54	12	NUM_COLUMNS
LEAF_NODE	24:65	24:65	10	)
LEAF_NODE	24:66	24:66	4	;
EXPR_STATEMENT	25:1	25:125	3	gnt_tree_set_column_titles ( GNT_TREE ( tree ) , _ ( "Progress" ) , _ ( "Filename" ) , _ ( "Size" ) , _ ( "Speed" ) , _ ( "Remaining" ) , _ ( "Status" ) ) ;
EXPR	25:1	25:1	4	gnt_tree_set_column_titles ( GNT_TREE ( tree ) , _ ( "Progress" ) , _ ( "Filename" ) , _ ( "Size" ) , _ ( "Speed" ) , _ ( "Remaining" ) , _ ( "Status" ) )
FUNCTION_CALL	25:1	25:124	5	gnt_tree_set_column_titles ( GNT_TREE ( tree ) , _ ( "Progress" ) , _ ( "Filename" ) , _ ( "Size" ) , _ ( "Speed" ) , _ ( "Remaining" ) , _ ( "Status" ) )
CALLEE	25:1	25:1	6	gnt_tree_set_column_titles
LEAF_NODE	25:1	25:1	7	gnt_tree_set_column_titles
LEAF_NODE	25:27	25:27	6	(
ARGUMENT	25:28	25:28	6	GNT_TREE ( tree )
FUNCTION_CALL	25:28	25:41	7	GNT_TREE ( tree )
CALLEE	25:28	25:28	8	GNT_TREE
LEAF_NODE	25:28	25:28	9	GNT_TREE
LEAF_NODE	25:36	25:36	8	(
ARGUMENT	25:37	25:37	8	tree
FIELD	25:37	25:37	9	tree
LEAF_NODE	25:37	25:37	10	tree
LEAF_NODE	25:41	25:41	8	)
LEAF_NODE	25:42	25:42	6	,
ARGUMENT	25:44	25:44	6	_ ( "Progress" )
FUNCTION_CALL	25:44	25:56	7	_ ( "Progress" )
CALLEE	25:44	25:44	8	_
LEAF_NODE	25:44	25:44	9	_
LEAF_NODE	25:45	25:45	8	(
ARGUMENT	25:46	25:46	8	"Progress"
FIELD	25:46	25:46	9	"Progress"
LEAF_NODE	25:46	25:46	10	"Progress"
LEAF_NODE	25:56	25:56	8	)
LEAF_NODE	25:57	25:57	6	,
ARGUMENT	25:59	25:59	6	_ ( "Filename" )
FUNCTION_CALL	25:59	25:71	7	_ ( "Filename" )
CALLEE	25:59	25:59	8	_
LEAF_NODE	25:59	25:59	9	_
LEAF_NODE	25:60	25:60	8	(
ARGUMENT	25:61	25:61	8	"Filename"
FIELD	25:61	25:61	9	"Filename"
LEAF_NODE	25:61	25:61	10	"Filename"
LEAF_NODE	25:71	25:71	8	)
LEAF_NODE	25:72	25:72	6	,
ARGUMENT	25:74	25:74	6	_ ( "Size" )
FUNCTION_CALL	25:74	25:82	7	_ ( "Size" )
CALLEE	25:74	25:74	8	_
LEAF_NODE	25:74	25:74	9	_
LEAF_NODE	25:75	25:75	8	(
ARGUMENT	25:76	25:76	8	"Size"
FIELD	25:76	25:76	9	"Size"
LEAF_NODE	25:76	25:76	10	"Size"
LEAF_NODE	25:82	25:82	8	)
LEAF_NODE	25:83	25:83	6	,
ARGUMENT	25:85	25:85	6	_ ( "Speed" )
FUNCTION_CALL	25:85	25:94	7	_ ( "Speed" )
CALLEE	25:85	25:85	8	_
LEAF_NODE	25:85	25:85	9	_
LEAF_NODE	25:86	25:86	8	(
ARGUMENT	25:87	25:87	8	"Speed"
FIELD	25:87	25:87	9	"Speed"
LEAF_NODE	25:87	25:87	10	"Speed"
LEAF_NODE	25:94	25:94	8	)
LEAF_NODE	25:95	25:95	6	,
ARGUMENT	25:97	25:97	6	_ ( "Remaining" )
FUNCTION_CALL	25:97	25:110	7	_ ( "Remaining" )
CALLEE	25:97	25:97	8	_
LEAF_NODE	25:97	25:97	9	_
LEAF_NODE	25:98	25:98	8	(
ARGUMENT	25:99	25:99	8	"Remaining"
FIELD	25:99	25:99	9	"Remaining"
LEAF_NODE	25:99	25:99	10	"Remaining"
LEAF_NODE	25:110	25:110	8	)
LEAF_NODE	25:111	25:111	6	,
ARGUMENT	25:113	25:113	6	_ ( "Status" )
FUNCTION_CALL	25:113	25:123	7	_ ( "Status" )
CALLEE	25:113	25:113	8	_
LEAF_NODE	25:113	25:113	9	_
LEAF_NODE	25:114	25:114	8	(
ARGUMENT	25:115	25:115	8	"Status"
FIELD	25:115	25:115	9	"Status"
LEAF_NODE	25:115	25:115	10	"Status"
LEAF_NODE	25:123	25:123	8	)
LEAF_NODE	25:124	25:124	6	)
LEAF_NODE	25:125	25:125	4	;
EXPR_STATEMENT	26:1	26:56	3	gnt_tree_set_column_width_ratio ( GNT_TREE ( tree ) , widths ) ;
EXPR	26:1	26:1	4	gnt_tree_set_column_width_ratio ( GNT_TREE ( tree ) , widths )
FUNCTION_CALL	26:1	26:55	5	gnt_tree_set_column_width_ratio ( GNT_TREE ( tree ) , widths )
CALLEE	26:1	26:1	6	gnt_tree_set_column_width_ratio
LEAF_NODE	26:1	26:1	7	gnt_tree_set_column_width_ratio
LEAF_NODE	26:32	26:32	6	(
ARGUMENT	26:33	26:33	6	GNT_TREE ( tree )
FUNCTION_CALL	26:33	26:46	7	GNT_TREE ( tree )
CALLEE	26:33	26:33	8	GNT_TREE
LEAF_NODE	26:33	26:33	9	GNT_TREE
LEAF_NODE	26:41	26:41	8	(
ARGUMENT	26:42	26:42	8	tree
FIELD	26:42	26:42	9	tree
LEAF_NODE	26:42	26:42	10	tree
LEAF_NODE	26:46	26:46	8	)
LEAF_NODE	26:47	26:47	6	,
ARGUMENT	26:49	26:49	6	widths
FIELD	26:49	26:49	7	widths
LEAF_NODE	26:49	26:49	8	widths
LEAF_NODE	26:55	26:55	6	)
LEAF_NODE	26:56	26:56	4	;
EXPR_STATEMENT	27:1	27:70	3	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_PROGRESS , FALSE ) ;
EXPR	27:1	27:1	4	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_PROGRESS , FALSE )
FUNCTION_CALL	27:1	27:69	5	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_PROGRESS , FALSE )
CALLEE	27:1	27:1	6	gnt_tree_set_column_resizable
LEAF_NODE	27:1	27:1	7	gnt_tree_set_column_resizable
LEAF_NODE	27:30	27:30	6	(
ARGUMENT	27:31	27:31	6	GNT_TREE ( tree )
FUNCTION_CALL	27:31	27:44	7	GNT_TREE ( tree )
CALLEE	27:31	27:31	8	GNT_TREE
LEAF_NODE	27:31	27:31	9	GNT_TREE
LEAF_NODE	27:39	27:39	8	(
ARGUMENT	27:40	27:40	8	tree
FIELD	27:40	27:40	9	tree
LEAF_NODE	27:40	27:40	10	tree
LEAF_NODE	27:44	27:44	8	)
LEAF_NODE	27:45	27:45	6	,
ARGUMENT	27:47	27:47	6	COLUMN_PROGRESS
FIELD	27:47	27:47	7	COLUMN_PROGRESS
LEAF_NODE	27:47	27:47	8	COLUMN_PROGRESS
LEAF_NODE	27:62	27:62	6	,
ARGUMENT	27:64	27:64	6	FALSE
FIELD	27:64	27:64	7	FALSE
LEAF_NODE	27:64	27:64	8	FALSE
LEAF_NODE	27:69	27:69	6	)
LEAF_NODE	27:70	27:70	4	;
EXPR_STATEMENT	28:1	28:66	3	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_SIZE , FALSE ) ;
EXPR	28:1	28:1	4	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_SIZE , FALSE )
FUNCTION_CALL	28:1	28:65	5	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_SIZE , FALSE )
CALLEE	28:1	28:1	6	gnt_tree_set_column_resizable
LEAF_NODE	28:1	28:1	7	gnt_tree_set_column_resizable
LEAF_NODE	28:30	28:30	6	(
ARGUMENT	28:31	28:31	6	GNT_TREE ( tree )
FUNCTION_CALL	28:31	28:44	7	GNT_TREE ( tree )
CALLEE	28:31	28:31	8	GNT_TREE
LEAF_NODE	28:31	28:31	9	GNT_TREE
LEAF_NODE	28:39	28:39	8	(
ARGUMENT	28:40	28:40	8	tree
FIELD	28:40	28:40	9	tree
LEAF_NODE	28:40	28:40	10	tree
LEAF_NODE	28:44	28:44	8	)
LEAF_NODE	28:45	28:45	6	,
ARGUMENT	28:47	28:47	6	COLUMN_SIZE
FIELD	28:47	28:47	7	COLUMN_SIZE
LEAF_NODE	28:47	28:47	8	COLUMN_SIZE
LEAF_NODE	28:58	28:58	6	,
ARGUMENT	28:60	28:60	6	FALSE
FIELD	28:60	28:60	7	FALSE
LEAF_NODE	28:60	28:60	8	FALSE
LEAF_NODE	28:65	28:65	6	)
LEAF_NODE	28:66	28:66	4	;
EXPR_STATEMENT	29:1	29:67	3	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_SPEED , FALSE ) ;
EXPR	29:1	29:1	4	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_SPEED , FALSE )
FUNCTION_CALL	29:1	29:66	5	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_SPEED , FALSE )
CALLEE	29:1	29:1	6	gnt_tree_set_column_resizable
LEAF_NODE	29:1	29:1	7	gnt_tree_set_column_resizable
LEAF_NODE	29:30	29:30	6	(
ARGUMENT	29:31	29:31	6	GNT_TREE ( tree )
FUNCTION_CALL	29:31	29:44	7	GNT_TREE ( tree )
CALLEE	29:31	29:31	8	GNT_TREE
LEAF_NODE	29:31	29:31	9	GNT_TREE
LEAF_NODE	29:39	29:39	8	(
ARGUMENT	29:40	29:40	8	tree
FIELD	29:40	29:40	9	tree
LEAF_NODE	29:40	29:40	10	tree
LEAF_NODE	29:44	29:44	8	)
LEAF_NODE	29:45	29:45	6	,
ARGUMENT	29:47	29:47	6	COLUMN_SPEED
FIELD	29:47	29:47	7	COLUMN_SPEED
LEAF_NODE	29:47	29:47	8	COLUMN_SPEED
LEAF_NODE	29:59	29:59	6	,
ARGUMENT	29:61	29:61	6	FALSE
FIELD	29:61	29:61	7	FALSE
LEAF_NODE	29:61	29:61	8	FALSE
LEAF_NODE	29:66	29:66	6	)
LEAF_NODE	29:67	29:67	4	;
EXPR_STATEMENT	30:1	30:71	3	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_REMAINING , FALSE ) ;
EXPR	30:1	30:1	4	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_REMAINING , FALSE )
FUNCTION_CALL	30:1	30:70	5	gnt_tree_set_column_resizable ( GNT_TREE ( tree ) , COLUMN_REMAINING , FALSE )
CALLEE	30:1	30:1	6	gnt_tree_set_column_resizable
LEAF_NODE	30:1	30:1	7	gnt_tree_set_column_resizable
LEAF_NODE	30:30	30:30	6	(
ARGUMENT	30:31	30:31	6	GNT_TREE ( tree )
FUNCTION_CALL	30:31	30:44	7	GNT_TREE ( tree )
CALLEE	30:31	30:31	8	GNT_TREE
LEAF_NODE	30:31	30:31	9	GNT_TREE
LEAF_NODE	30:39	30:39	8	(
ARGUMENT	30:40	30:40	8	tree
FIELD	30:40	30:40	9	tree
LEAF_NODE	30:40	30:40	10	tree
LEAF_NODE	30:44	30:44	8	)
LEAF_NODE	30:45	30:45	6	,
ARGUMENT	30:47	30:47	6	COLUMN_REMAINING
FIELD	30:47	30:47	7	COLUMN_REMAINING
LEAF_NODE	30:47	30:47	8	COLUMN_REMAINING
LEAF_NODE	30:63	30:63	6	,
ARGUMENT	30:65	30:65	6	FALSE
FIELD	30:65	30:65	7	FALSE
LEAF_NODE	30:65	30:65	8	FALSE
LEAF_NODE	30:70	30:70	6	)
LEAF_NODE	30:71	30:71	4	;
EXPR_STATEMENT	31:1	31:34	3	gnt_widget_set_size ( tree , 70 , - 1 ) ;
EXPR	31:1	31:1	4	gnt_widget_set_size ( tree , 70 , - 1 )
FUNCTION_CALL	31:1	31:33	5	gnt_widget_set_size ( tree , 70 , - 1 )
CALLEE	31:1	31:1	6	gnt_widget_set_size
LEAF_NODE	31:1	31:1	7	gnt_widget_set_size
LEAF_NODE	31:20	31:20	6	(
ARGUMENT	31:21	31:21	6	tree
FIELD	31:21	31:21	7	tree
LEAF_NODE	31:21	31:21	8	tree
LEAF_NODE	31:25	31:25	6	,
ARGUMENT	31:27	31:27	6	70
FIELD	31:27	31:27	7	70
LEAF_NODE	31:27	31:27	8	70
LEAF_NODE	31:29	31:29	6	,
ARGUMENT	31:31	31:31	6	- 1
UNARY_EXPR	31:31	31:32	7	- 1
UNARY_OPERATOR	31:31	31:31	8	-
LEAF_NODE	31:31	31:31	9	-
FIELD	31:32	31:32	8	1
LEAF_NODE	31:32	31:32	9	1
LEAF_NODE	31:33	31:33	6	)
LEAF_NODE	31:34	31:34	4	;
EXPR_STATEMENT	32:1	32:46	3	gnt_tree_set_show_title ( GNT_TREE ( tree ) , TRUE ) ;
EXPR	32:1	32:1	4	gnt_tree_set_show_title ( GNT_TREE ( tree ) , TRUE )
FUNCTION_CALL	32:1	32:45	5	gnt_tree_set_show_title ( GNT_TREE ( tree ) , TRUE )
CALLEE	32:1	32:1	6	gnt_tree_set_show_title
LEAF_NODE	32:1	32:1	7	gnt_tree_set_show_title
LEAF_NODE	32:24	32:24	6	(
ARGUMENT	32:25	32:25	6	GNT_TREE ( tree )
FUNCTION_CALL	32:25	32:38	7	GNT_TREE ( tree )
CALLEE	32:25	32:25	8	GNT_TREE
LEAF_NODE	32:25	32:25	9	GNT_TREE
LEAF_NODE	32:33	32:33	8	(
ARGUMENT	32:34	32:34	8	tree
FIELD	32:34	32:34	9	tree
LEAF_NODE	32:34	32:34	10	tree
LEAF_NODE	32:38	32:38	8	)
LEAF_NODE	32:39	32:39	6	,
ARGUMENT	32:41	32:41	6	TRUE
FIELD	32:41	32:41	7	TRUE
LEAF_NODE	32:41	32:41	8	TRUE
LEAF_NODE	32:45	32:45	6	)
LEAF_NODE	32:46	32:46	4	;
EXPR_STATEMENT	33:1	33:42	3	gnt_box_add_widget ( GNT_BOX ( window ) , tree ) ;
EXPR	33:1	33:1	4	gnt_box_add_widget ( GNT_BOX ( window ) , tree )
FUNCTION_CALL	33:1	33:41	5	gnt_box_add_widget ( GNT_BOX ( window ) , tree )
CALLEE	33:1	33:1	6	gnt_box_add_widget
LEAF_NODE	33:1	33:1	7	gnt_box_add_widget
LEAF_NODE	33:19	33:19	6	(
ARGUMENT	33:20	33:20	6	GNT_BOX ( window )
FUNCTION_CALL	33:20	33:34	7	GNT_BOX ( window )
CALLEE	33:20	33:20	8	GNT_BOX
LEAF_NODE	33:20	33:20	9	GNT_BOX
LEAF_NODE	33:27	33:27	8	(
ARGUMENT	33:28	33:28	8	window
FIELD	33:28	33:28	9	window
LEAF_NODE	33:28	33:28	10	window
LEAF_NODE	33:34	33:34	8	)
LEAF_NODE	33:35	33:35	6	,
ARGUMENT	33:37	33:37	6	tree
FIELD	33:37	33:37	7	tree
LEAF_NODE	33:37	33:37	8	tree
LEAF_NODE	33:41	33:41	6	)
LEAF_NODE	33:42	33:42	4	;
EXPR_STATEMENT	34:1	34:80	3	checkbox = gnt_check_box_new ( _ ( "Close this window when all transfers finish" ) ) ;
EXPR	34:1	34:1	4	checkbox = gnt_check_box_new ( _ ( "Close this window when all transfers finish" ) )
ASSIGN	34:1	34:12	5	checkbox = gnt_check_box_new ( _ ( "Close this window when all transfers finish" ) )
LVAL	34:1	34:1	6	checkbox
FIELD	34:1	34:1	7	checkbox
LEAF_NODE	34:1	34:1	8	checkbox
ASSIGN_OP	34:10	34:10	6	=
LEAF_NODE	34:10	34:10	7	=
RVAL	34:12	34:12	6	gnt_check_box_new ( _ ( "Close this window when all transfers finish" ) )
FUNCTION_CALL	34:12	34:79	7	gnt_check_box_new ( _ ( "Close this window when all transfers finish" ) )
CALLEE	34:12	34:12	8	gnt_check_box_new
LEAF_NODE	34:12	34:12	9	gnt_check_box_new
LEAF_NODE	34:29	34:29	8	(
ARGUMENT	34:31	34:31	8	_ ( "Close this window when all transfers finish" )
FUNCTION_CALL	34:31	34:78	9	_ ( "Close this window when all transfers finish" )
CALLEE	34:31	34:31	10	_
LEAF_NODE	34:31	34:31	11	_
LEAF_NODE	34:32	34:32	10	(
ARGUMENT	34:33	34:33	10	"Close this window when all transfers finish"
FIELD	34:33	34:33	11	"Close this window when all transfers finish"
LEAF_NODE	34:33	34:33	12	"Close this window when all transfers finish"
LEAF_NODE	34:78	34:78	10	)
LEAF_NODE	34:79	34:79	8	)
LEAF_NODE	34:80	34:80	4	;
EXPR_STATEMENT	35:1	36:33	3	gnt_check_box_set_checked ( GNT_CHECK_BOX ( checkbox ) , ! xfer_dialog -> keep_open ) ;
EXPR	35:1	35:1	4	gnt_check_box_set_checked ( GNT_CHECK_BOX ( checkbox ) , ! xfer_dialog -> keep_open )
FUNCTION_CALL	35:1	36:32	5	gnt_check_box_set_checked ( GNT_CHECK_BOX ( checkbox ) , ! xfer_dialog -> keep_open )
CALLEE	35:1	35:1	6	gnt_check_box_set_checked
LEAF_NODE	35:1	35:1	7	gnt_check_box_set_checked
LEAF_NODE	35:26	35:26	6	(
ARGUMENT	35:27	35:27	6	GNT_CHECK_BOX ( checkbox )
FUNCTION_CALL	35:27	35:49	7	GNT_CHECK_BOX ( checkbox )
CALLEE	35:27	35:27	8	GNT_CHECK_BOX
LEAF_NODE	35:27	35:27	9	GNT_CHECK_BOX
LEAF_NODE	35:40	35:40	8	(
ARGUMENT	35:41	35:41	8	checkbox
FIELD	35:41	35:41	9	checkbox
LEAF_NODE	35:41	35:41	10	checkbox
LEAF_NODE	35:49	35:49	8	)
LEAF_NODE	35:50	35:50	6	,
ARGUMENT	36:9	36:9	6	! xfer_dialog -> keep_open
UNARY_EXPR	36:9	36:10	7	! xfer_dialog -> keep_open
UNARY_OPERATOR	36:9	36:9	8	!
LEAF_NODE	36:9	36:9	9	!
FIELD	36:10	36:23	8	xfer_dialog -> keep_open
LEAF_NODE	36:10	36:10	9	xfer_dialog
LEAF_NODE	36:21	36:21	9	->
LEAF_NODE	36:23	36:23	9	keep_open
LEAF_NODE	36:32	36:32	6	)
LEAF_NODE	36:33	36:33	4	;
EXPR_STATEMENT	37:1	38:44	3	g_signal_connect ( G_OBJECT ( checkbox ) , "toggled" , G_CALLBACK ( toggle_keep_open_cb ) , NULL ) ;
EXPR	37:1	37:1	4	g_signal_connect ( G_OBJECT ( checkbox ) , "toggled" , G_CALLBACK ( toggle_keep_open_cb ) , NULL )
FUNCTION_CALL	37:1	38:43	5	g_signal_connect ( G_OBJECT ( checkbox ) , "toggled" , G_CALLBACK ( toggle_keep_open_cb ) , NULL )
CALLEE	37:1	37:1	6	g_signal_connect
LEAF_NODE	37:1	37:1	7	g_signal_connect
LEAF_NODE	37:17	37:17	6	(
ARGUMENT	37:18	37:18	6	G_OBJECT ( checkbox )
FUNCTION_CALL	37:18	37:35	7	G_OBJECT ( checkbox )
CALLEE	37:18	37:18	8	G_OBJECT
LEAF_NODE	37:18	37:18	9	G_OBJECT
LEAF_NODE	37:26	37:26	8	(
ARGUMENT	37:27	37:27	8	checkbox
FIELD	37:27	37:27	9	checkbox
LEAF_NODE	37:27	37:27	10	checkbox
LEAF_NODE	37:35	37:35	8	)
LEAF_NODE	37:36	37:36	6	,
ARGUMENT	37:38	37:38	6	"toggled"
FIELD	37:38	37:38	7	"toggled"
LEAF_NODE	37:38	37:38	8	"toggled"
LEAF_NODE	37:47	37:47	6	,
ARGUMENT	38:6	38:6	6	G_CALLBACK ( toggle_keep_open_cb )
FUNCTION_CALL	38:6	38:36	7	G_CALLBACK ( toggle_keep_open_cb )
CALLEE	38:6	38:6	8	G_CALLBACK
LEAF_NODE	38:6	38:6	9	G_CALLBACK
LEAF_NODE	38:16	38:16	8	(
ARGUMENT	38:17	38:17	8	toggle_keep_open_cb
FIELD	38:17	38:17	9	toggle_keep_open_cb
LEAF_NODE	38:17	38:17	10	toggle_keep_open_cb
LEAF_NODE	38:36	38:36	8	)
LEAF_NODE	38:37	38:37	6	,
ARGUMENT	38:39	38:39	6	NULL
FIELD	38:39	38:39	7	NULL
LEAF_NODE	38:39	38:39	8	NULL
LEAF_NODE	38:43	38:43	6	)
LEAF_NODE	38:44	38:44	4	;
EXPR_STATEMENT	39:1	39:46	3	gnt_box_add_widget ( GNT_BOX ( window ) , checkbox ) ;
EXPR	39:1	39:1	4	gnt_box_add_widget ( GNT_BOX ( window ) , checkbox )
FUNCTION_CALL	39:1	39:45	5	gnt_box_add_widget ( GNT_BOX ( window ) , checkbox )
CALLEE	39:1	39:1	6	gnt_box_add_widget
LEAF_NODE	39:1	39:1	7	gnt_box_add_widget
LEAF_NODE	39:19	39:19	6	(
ARGUMENT	39:20	39:20	6	GNT_BOX ( window )
FUNCTION_CALL	39:20	39:34	7	GNT_BOX ( window )
CALLEE	39:20	39:20	8	GNT_BOX
LEAF_NODE	39:20	39:20	9	GNT_BOX
LEAF_NODE	39:27	39:27	8	(
ARGUMENT	39:28	39:28	8	window
FIELD	39:28	39:28	9	window
LEAF_NODE	39:28	39:28	10	window
LEAF_NODE	39:34	39:34	8	)
LEAF_NODE	39:35	39:35	6	,
ARGUMENT	39:37	39:37	6	checkbox
FIELD	39:37	39:37	7	checkbox
LEAF_NODE	39:37	39:37	8	checkbox
LEAF_NODE	39:45	39:45	6	)
LEAF_NODE	39:46	39:46	4	;
EXPR_STATEMENT	40:1	40:60	3	checkbox = gnt_check_box_new ( _ ( "Clear finished transfers" ) ) ;
EXPR	40:1	40:1	4	checkbox = gnt_check_box_new ( _ ( "Clear finished transfers" ) )
ASSIGN	40:1	40:12	5	checkbox = gnt_check_box_new ( _ ( "Clear finished transfers" ) )
LVAL	40:1	40:1	6	checkbox
FIELD	40:1	40:1	7	checkbox
LEAF_NODE	40:1	40:1	8	checkbox
ASSIGN_OP	40:10	40:10	6	=
LEAF_NODE	40:10	40:10	7	=
RVAL	40:12	40:12	6	gnt_check_box_new ( _ ( "Clear finished transfers" ) )
FUNCTION_CALL	40:12	40:59	7	gnt_check_box_new ( _ ( "Clear finished transfers" ) )
CALLEE	40:12	40:12	8	gnt_check_box_new
LEAF_NODE	40:12	40:12	9	gnt_check_box_new
LEAF_NODE	40:29	40:29	8	(
ARGUMENT	40:30	40:30	8	_ ( "Clear finished transfers" )
FUNCTION_CALL	40:30	40:58	9	_ ( "Clear finished transfers" )
CALLEE	40:30	40:30	10	_
LEAF_NODE	40:30	40:30	11	_
LEAF_NODE	40:31	40:31	10	(
ARGUMENT	40:32	40:32	10	"Clear finished transfers"
FIELD	40:32	40:32	11	"Clear finished transfers"
LEAF_NODE	40:32	40:32	12	"Clear finished transfers"
LEAF_NODE	40:58	40:58	10	)
LEAF_NODE	40:59	40:59	8	)
LEAF_NODE	40:60	40:60	4	;
EXPR_STATEMENT	41:1	42:33	3	gnt_check_box_set_checked ( GNT_CHECK_BOX ( checkbox ) , xfer_dialog -> auto_clear ) ;
EXPR	41:1	41:1	4	gnt_check_box_set_checked ( GNT_CHECK_BOX ( checkbox ) , xfer_dialog -> auto_clear )
FUNCTION_CALL	41:1	42:32	5	gnt_check_box_set_checked ( GNT_CHECK_BOX ( checkbox ) , xfer_dialog -> auto_clear )
CALLEE	41:1	41:1	6	gnt_check_box_set_checked
LEAF_NODE	41:1	41:1	7	gnt_check_box_set_checked
LEAF_NODE	41:26	41:26	6	(
ARGUMENT	41:27	41:27	6	GNT_CHECK_BOX ( checkbox )
FUNCTION_CALL	41:27	41:49	7	GNT_CHECK_BOX ( checkbox )
CALLEE	41:27	41:27	8	GNT_CHECK_BOX
LEAF_NODE	41:27	41:27	9	GNT_CHECK_BOX
LEAF_NODE	41:40	41:40	8	(
ARGUMENT	41:41	41:41	8	checkbox
FIELD	41:41	41:41	9	checkbox
LEAF_NODE	41:41	41:41	10	checkbox
LEAF_NODE	41:49	41:49	8	)
LEAF_NODE	41:50	41:50	6	,
ARGUMENT	42:9	42:9	6	xfer_dialog -> auto_clear
FIELD	42:9	42:22	7	xfer_dialog -> auto_clear
LEAF_NODE	42:9	42:9	8	xfer_dialog
LEAF_NODE	42:20	42:20	8	->
LEAF_NODE	42:22	42:22	8	auto_clear
LEAF_NODE	42:32	42:32	6	)
LEAF_NODE	42:33	42:33	4	;
EXPR_STATEMENT	43:1	44:49	3	g_signal_connect ( G_OBJECT ( checkbox ) , "toggled" , G_CALLBACK ( toggle_clear_finished_cb ) , NULL ) ;
EXPR	43:1	43:1	4	g_signal_connect ( G_OBJECT ( checkbox ) , "toggled" , G_CALLBACK ( toggle_clear_finished_cb ) , NULL )
FUNCTION_CALL	43:1	44:48	5	g_signal_connect ( G_OBJECT ( checkbox ) , "toggled" , G_CALLBACK ( toggle_clear_finished_cb ) , NULL )
CALLEE	43:1	43:1	6	g_signal_connect
LEAF_NODE	43:1	43:1	7	g_signal_connect
LEAF_NODE	43:17	43:17	6	(
ARGUMENT	43:18	43:18	6	G_OBJECT ( checkbox )
FUNCTION_CALL	43:18	43:35	7	G_OBJECT ( checkbox )
CALLEE	43:18	43:18	8	G_OBJECT
LEAF_NODE	43:18	43:18	9	G_OBJECT
LEAF_NODE	43:26	43:26	8	(
ARGUMENT	43:27	43:27	8	checkbox
FIELD	43:27	43:27	9	checkbox
LEAF_NODE	43:27	43:27	10	checkbox
LEAF_NODE	43:35	43:35	8	)
LEAF_NODE	43:36	43:36	6	,
ARGUMENT	43:38	43:38	6	"toggled"
FIELD	43:38	43:38	7	"toggled"
LEAF_NODE	43:38	43:38	8	"toggled"
LEAF_NODE	43:47	43:47	6	,
ARGUMENT	44:6	44:6	6	G_CALLBACK ( toggle_clear_finished_cb )
FUNCTION_CALL	44:6	44:41	7	G_CALLBACK ( toggle_clear_finished_cb )
CALLEE	44:6	44:6	8	G_CALLBACK
LEAF_NODE	44:6	44:6	9	G_CALLBACK
LEAF_NODE	44:16	44:16	8	(
ARGUMENT	44:17	44:17	8	toggle_clear_finished_cb
FIELD	44:17	44:17	9	toggle_clear_finished_cb
LEAF_NODE	44:17	44:17	10	toggle_clear_finished_cb
LEAF_NODE	44:41	44:41	8	)
LEAF_NODE	44:42	44:42	6	,
ARGUMENT	44:44	44:44	6	NULL
FIELD	44:44	44:44	7	NULL
LEAF_NODE	44:44	44:44	8	NULL
LEAF_NODE	44:48	44:48	6	)
LEAF_NODE	44:49	44:49	4	;
EXPR_STATEMENT	45:1	45:46	3	gnt_box_add_widget ( GNT_BOX ( window ) , checkbox ) ;
EXPR	45:1	45:1	4	gnt_box_add_widget ( GNT_BOX ( window ) , checkbox )
FUNCTION_CALL	45:1	45:45	5	gnt_box_add_widget ( GNT_BOX ( window ) , checkbox )
CALLEE	45:1	45:1	6	gnt_box_add_widget
LEAF_NODE	45:1	45:1	7	gnt_box_add_widget
LEAF_NODE	45:19	45:19	6	(
ARGUMENT	45:20	45:20	6	GNT_BOX ( window )
FUNCTION_CALL	45:20	45:34	7	GNT_BOX ( window )
CALLEE	45:20	45:20	8	GNT_BOX
LEAF_NODE	45:20	45:20	9	GNT_BOX
LEAF_NODE	45:27	45:27	8	(
ARGUMENT	45:28	45:28	8	window
FIELD	45:28	45:28	9	window
LEAF_NODE	45:28	45:28	10	window
LEAF_NODE	45:34	45:34	8	)
LEAF_NODE	45:35	45:35	6	,
ARGUMENT	45:37	45:37	6	checkbox
FIELD	45:37	45:37	7	checkbox
LEAF_NODE	45:37	45:37	8	checkbox
LEAF_NODE	45:45	45:45	6	)
LEAF_NODE	45:46	45:46	4	;
EXPR_STATEMENT	46:1	46:27	3	bbox = gnt_hbox_new ( FALSE ) ;
EXPR	46:1	46:1	4	bbox = gnt_hbox_new ( FALSE )
ASSIGN	46:1	46:8	5	bbox = gnt_hbox_new ( FALSE )
LVAL	46:1	46:1	6	bbox
FIELD	46:1	46:1	7	bbox
LEAF_NODE	46:1	46:1	8	bbox
ASSIGN_OP	46:6	46:6	6	=
LEAF_NODE	46:6	46:6	7	=
RVAL	46:8	46:8	6	gnt_hbox_new ( FALSE )
FUNCTION_CALL	46:8	46:26	7	gnt_hbox_new ( FALSE )
CALLEE	46:8	46:8	8	gnt_hbox_new
LEAF_NODE	46:8	46:8	9	gnt_hbox_new
LEAF_NODE	46:20	46:20	8	(
ARGUMENT	46:21	46:21	8	FALSE
FIELD	46:21	46:21	9	FALSE
LEAF_NODE	46:21	46:21	10	FALSE
LEAF_NODE	46:26	46:26	8	)
LEAF_NODE	46:27	46:27	4	;
EXPR_STATEMENT	47:1	47:66	3	xfer_dialog -> remove_button = button = gnt_button_new ( _ ( "Remove" ) ) ;
EXPR	47:1	47:1	4	xfer_dialog -> remove_button = button = gnt_button_new ( _ ( "Remove" ) )
ASSIGN	47:1	47:30	5	xfer_dialog -> remove_button = button = gnt_button_new ( _ ( "Remove" ) )
LVAL	47:1	47:1	6	xfer_dialog -> remove_button
FIELD	47:1	47:14	7	xfer_dialog -> remove_button
LEAF_NODE	47:1	47:1	8	xfer_dialog
LEAF_NODE	47:12	47:12	8	->
LEAF_NODE	47:14	47:14	8	remove_button
ASSIGN_OP	47:28	47:28	6	=
LEAF_NODE	47:28	47:28	7	=
RVAL	47:30	47:30	6	button = gnt_button_new ( _ ( "Remove" ) )
ASSIGN	47:30	47:39	7	button = gnt_button_new ( _ ( "Remove" ) )
LVAL	47:30	47:30	8	button
FIELD	47:30	47:30	9	button
LEAF_NODE	47:30	47:30	10	button
ASSIGN_OP	47:37	47:37	8	=
LEAF_NODE	47:37	47:37	9	=
RVAL	47:39	47:39	8	gnt_button_new ( _ ( "Remove" ) )
FUNCTION_CALL	47:39	47:65	9	gnt_button_new ( _ ( "Remove" ) )
CALLEE	47:39	47:39	10	gnt_button_new
LEAF_NODE	47:39	47:39	11	gnt_button_new
LEAF_NODE	47:53	47:53	10	(
ARGUMENT	47:54	47:54	10	_ ( "Remove" )
FUNCTION_CALL	47:54	47:64	11	_ ( "Remove" )
CALLEE	47:54	47:54	12	_
LEAF_NODE	47:54	47:54	13	_
LEAF_NODE	47:55	47:55	12	(
ARGUMENT	47:56	47:56	12	"Remove"
FIELD	47:56	47:56	13	"Remove"
LEAF_NODE	47:56	47:56	14	"Remove"
LEAF_NODE	47:64	47:64	12	)
LEAF_NODE	47:65	47:65	10	)
LEAF_NODE	47:66	47:66	4	;
EXPR_STATEMENT	48:1	49:41	3	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( remove_button_cb ) , NULL ) ;
EXPR	48:1	48:1	4	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( remove_button_cb ) , NULL )
FUNCTION_CALL	48:1	49:40	5	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( remove_button_cb ) , NULL )
CALLEE	48:1	48:1	6	g_signal_connect
LEAF_NODE	48:1	48:1	7	g_signal_connect
LEAF_NODE	48:17	48:17	6	(
ARGUMENT	48:18	48:18	6	G_OBJECT ( button )
FUNCTION_CALL	48:18	48:33	7	G_OBJECT ( button )
CALLEE	48:18	48:18	8	G_OBJECT
LEAF_NODE	48:18	48:18	9	G_OBJECT
LEAF_NODE	48:26	48:26	8	(
ARGUMENT	48:27	48:27	8	button
FIELD	48:27	48:27	9	button
LEAF_NODE	48:27	48:27	10	button
LEAF_NODE	48:33	48:33	8	)
LEAF_NODE	48:34	48:34	6	,
ARGUMENT	48:36	48:36	6	"activate"
FIELD	48:36	48:36	7	"activate"
LEAF_NODE	48:36	48:36	8	"activate"
LEAF_NODE	48:46	48:46	6	,
ARGUMENT	49:6	49:6	6	G_CALLBACK ( remove_button_cb )
FUNCTION_CALL	49:6	49:33	7	G_CALLBACK ( remove_button_cb )
CALLEE	49:6	49:6	8	G_CALLBACK
LEAF_NODE	49:6	49:6	9	G_CALLBACK
LEAF_NODE	49:16	49:16	8	(
ARGUMENT	49:17	49:17	8	remove_button_cb
FIELD	49:17	49:17	9	remove_button_cb
LEAF_NODE	49:17	49:17	10	remove_button_cb
LEAF_NODE	49:33	49:33	8	)
LEAF_NODE	49:34	49:34	6	,
ARGUMENT	49:36	49:36	6	NULL
FIELD	49:36	49:36	7	NULL
LEAF_NODE	49:36	49:36	8	NULL
LEAF_NODE	49:40	49:40	6	)
LEAF_NODE	49:41	49:41	4	;
EXPR_STATEMENT	50:1	50:42	3	gnt_box_add_widget ( GNT_BOX ( bbox ) , button ) ;
EXPR	50:1	50:1	4	gnt_box_add_widget ( GNT_BOX ( bbox ) , button )
FUNCTION_CALL	50:1	50:41	5	gnt_box_add_widget ( GNT_BOX ( bbox ) , button )
CALLEE	50:1	50:1	6	gnt_box_add_widget
LEAF_NODE	50:1	50:1	7	gnt_box_add_widget
LEAF_NODE	50:19	50:19	6	(
ARGUMENT	50:20	50:20	6	GNT_BOX ( bbox )
FUNCTION_CALL	50:20	50:32	7	GNT_BOX ( bbox )
CALLEE	50:20	50:20	8	GNT_BOX
LEAF_NODE	50:20	50:20	9	GNT_BOX
LEAF_NODE	50:27	50:27	8	(
ARGUMENT	50:28	50:28	8	bbox
FIELD	50:28	50:28	9	bbox
LEAF_NODE	50:28	50:28	10	bbox
LEAF_NODE	50:32	50:32	8	)
LEAF_NODE	50:33	50:33	6	,
ARGUMENT	50:35	50:35	6	button
FIELD	50:35	50:35	7	button
LEAF_NODE	50:35	50:35	8	button
LEAF_NODE	50:41	50:41	6	)
LEAF_NODE	50:42	50:42	4	;
EXPR_STATEMENT	51:1	51:62	3	xfer_dialog -> stop_button = button = gnt_button_new ( _ ( "Stop" ) ) ;
EXPR	51:1	51:1	4	xfer_dialog -> stop_button = button = gnt_button_new ( _ ( "Stop" ) )
ASSIGN	51:1	51:28	5	xfer_dialog -> stop_button = button = gnt_button_new ( _ ( "Stop" ) )
LVAL	51:1	51:1	6	xfer_dialog -> stop_button
FIELD	51:1	51:14	7	xfer_dialog -> stop_button
LEAF_NODE	51:1	51:1	8	xfer_dialog
LEAF_NODE	51:12	51:12	8	->
LEAF_NODE	51:14	51:14	8	stop_button
ASSIGN_OP	51:26	51:26	6	=
LEAF_NODE	51:26	51:26	7	=
RVAL	51:28	51:28	6	button = gnt_button_new ( _ ( "Stop" ) )
ASSIGN	51:28	51:37	7	button = gnt_button_new ( _ ( "Stop" ) )
LVAL	51:28	51:28	8	button
FIELD	51:28	51:28	9	button
LEAF_NODE	51:28	51:28	10	button
ASSIGN_OP	51:35	51:35	8	=
LEAF_NODE	51:35	51:35	9	=
RVAL	51:37	51:37	8	gnt_button_new ( _ ( "Stop" ) )
FUNCTION_CALL	51:37	51:61	9	gnt_button_new ( _ ( "Stop" ) )
CALLEE	51:37	51:37	10	gnt_button_new
LEAF_NODE	51:37	51:37	11	gnt_button_new
LEAF_NODE	51:51	51:51	10	(
ARGUMENT	51:52	51:52	10	_ ( "Stop" )
FUNCTION_CALL	51:52	51:60	11	_ ( "Stop" )
CALLEE	51:52	51:52	12	_
LEAF_NODE	51:52	51:52	13	_
LEAF_NODE	51:53	51:53	12	(
ARGUMENT	51:54	51:54	12	"Stop"
FIELD	51:54	51:54	13	"Stop"
LEAF_NODE	51:54	51:54	14	"Stop"
LEAF_NODE	51:60	51:60	12	)
LEAF_NODE	51:61	51:61	10	)
LEAF_NODE	51:62	51:62	4	;
EXPR_STATEMENT	52:1	53:39	3	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( stop_button_cb ) , NULL ) ;
EXPR	52:1	52:1	4	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( stop_button_cb ) , NULL )
FUNCTION_CALL	52:1	53:38	5	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( stop_button_cb ) , NULL )
CALLEE	52:1	52:1	6	g_signal_connect
LEAF_NODE	52:1	52:1	7	g_signal_connect
LEAF_NODE	52:17	52:17	6	(
ARGUMENT	52:18	52:18	6	G_OBJECT ( button )
FUNCTION_CALL	52:18	52:33	7	G_OBJECT ( button )
CALLEE	52:18	52:18	8	G_OBJECT
LEAF_NODE	52:18	52:18	9	G_OBJECT
LEAF_NODE	52:26	52:26	8	(
ARGUMENT	52:27	52:27	8	button
FIELD	52:27	52:27	9	button
LEAF_NODE	52:27	52:27	10	button
LEAF_NODE	52:33	52:33	8	)
LEAF_NODE	52:34	52:34	6	,
ARGUMENT	52:36	52:36	6	"activate"
FIELD	52:36	52:36	7	"activate"
LEAF_NODE	52:36	52:36	8	"activate"
LEAF_NODE	52:46	52:46	6	,
ARGUMENT	53:6	53:6	6	G_CALLBACK ( stop_button_cb )
FUNCTION_CALL	53:6	53:31	7	G_CALLBACK ( stop_button_cb )
CALLEE	53:6	53:6	8	G_CALLBACK
LEAF_NODE	53:6	53:6	9	G_CALLBACK
LEAF_NODE	53:16	53:16	8	(
ARGUMENT	53:17	53:17	8	stop_button_cb
FIELD	53:17	53:17	9	stop_button_cb
LEAF_NODE	53:17	53:17	10	stop_button_cb
LEAF_NODE	53:31	53:31	8	)
LEAF_NODE	53:32	53:32	6	,
ARGUMENT	53:34	53:34	6	NULL
FIELD	53:34	53:34	7	NULL
LEAF_NODE	53:34	53:34	8	NULL
LEAF_NODE	53:38	53:38	6	)
LEAF_NODE	53:39	53:39	4	;
EXPR_STATEMENT	54:1	54:42	3	gnt_box_add_widget ( GNT_BOX ( bbox ) , button ) ;
EXPR	54:1	54:1	4	gnt_box_add_widget ( GNT_BOX ( bbox ) , button )
FUNCTION_CALL	54:1	54:41	5	gnt_box_add_widget ( GNT_BOX ( bbox ) , button )
CALLEE	54:1	54:1	6	gnt_box_add_widget
LEAF_NODE	54:1	54:1	7	gnt_box_add_widget
LEAF_NODE	54:19	54:19	6	(
ARGUMENT	54:20	54:20	6	GNT_BOX ( bbox )
FUNCTION_CALL	54:20	54:32	7	GNT_BOX ( bbox )
CALLEE	54:20	54:20	8	GNT_BOX
LEAF_NODE	54:20	54:20	9	GNT_BOX
LEAF_NODE	54:27	54:27	8	(
ARGUMENT	54:28	54:28	8	bbox
FIELD	54:28	54:28	9	bbox
LEAF_NODE	54:28	54:28	10	bbox
LEAF_NODE	54:32	54:32	8	)
LEAF_NODE	54:33	54:33	6	,
ARGUMENT	54:35	54:35	6	button
FIELD	54:35	54:35	7	button
LEAF_NODE	54:35	54:35	8	button
LEAF_NODE	54:41	54:41	6	)
LEAF_NODE	54:42	54:42	4	;
EXPR_STATEMENT	55:1	55:64	3	xfer_dialog -> close_button = button = gnt_button_new ( _ ( "Close" ) ) ;
EXPR	55:1	55:1	4	xfer_dialog -> close_button = button = gnt_button_new ( _ ( "Close" ) )
ASSIGN	55:1	55:29	5	xfer_dialog -> close_button = button = gnt_button_new ( _ ( "Close" ) )
LVAL	55:1	55:1	6	xfer_dialog -> close_button
FIELD	55:1	55:14	7	xfer_dialog -> close_button
LEAF_NODE	55:1	55:1	8	xfer_dialog
LEAF_NODE	55:12	55:12	8	->
LEAF_NODE	55:14	55:14	8	close_button
ASSIGN_OP	55:27	55:27	6	=
LEAF_NODE	55:27	55:27	7	=
RVAL	55:29	55:29	6	button = gnt_button_new ( _ ( "Close" ) )
ASSIGN	55:29	55:38	7	button = gnt_button_new ( _ ( "Close" ) )
LVAL	55:29	55:29	8	button
FIELD	55:29	55:29	9	button
LEAF_NODE	55:29	55:29	10	button
ASSIGN_OP	55:36	55:36	8	=
LEAF_NODE	55:36	55:36	9	=
RVAL	55:38	55:38	8	gnt_button_new ( _ ( "Close" ) )
FUNCTION_CALL	55:38	55:63	9	gnt_button_new ( _ ( "Close" ) )
CALLEE	55:38	55:38	10	gnt_button_new
LEAF_NODE	55:38	55:38	11	gnt_button_new
LEAF_NODE	55:52	55:52	10	(
ARGUMENT	55:53	55:53	10	_ ( "Close" )
FUNCTION_CALL	55:53	55:62	11	_ ( "Close" )
CALLEE	55:53	55:53	12	_
LEAF_NODE	55:53	55:53	13	_
LEAF_NODE	55:54	55:54	12	(
ARGUMENT	55:55	55:55	12	"Close"
FIELD	55:55	55:55	13	"Close"
LEAF_NODE	55:55	55:55	14	"Close"
LEAF_NODE	55:62	55:62	12	)
LEAF_NODE	55:63	55:63	10	)
LEAF_NODE	55:64	55:64	4	;
EXPR_STATEMENT	56:1	57:50	3	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( finch_xfer_dialog_destroy ) , NULL ) ;
EXPR	56:1	56:1	4	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( finch_xfer_dialog_destroy ) , NULL )
FUNCTION_CALL	56:1	57:49	5	g_signal_connect ( G_OBJECT ( button ) , "activate" , G_CALLBACK ( finch_xfer_dialog_destroy ) , NULL )
CALLEE	56:1	56:1	6	g_signal_connect
LEAF_NODE	56:1	56:1	7	g_signal_connect
LEAF_NODE	56:17	56:17	6	(
ARGUMENT	56:18	56:18	6	G_OBJECT ( button )
FUNCTION_CALL	56:18	56:33	7	G_OBJECT ( button )
CALLEE	56:18	56:18	8	G_OBJECT
LEAF_NODE	56:18	56:18	9	G_OBJECT
LEAF_NODE	56:26	56:26	8	(
ARGUMENT	56:27	56:27	8	button
FIELD	56:27	56:27	9	button
LEAF_NODE	56:27	56:27	10	button
LEAF_NODE	56:33	56:33	8	)
LEAF_NODE	56:34	56:34	6	,
ARGUMENT	56:36	56:36	6	"activate"
FIELD	56:36	56:36	7	"activate"
LEAF_NODE	56:36	56:36	8	"activate"
LEAF_NODE	56:46	56:46	6	,
ARGUMENT	57:6	57:6	6	G_CALLBACK ( finch_xfer_dialog_destroy )
FUNCTION_CALL	57:6	57:42	7	G_CALLBACK ( finch_xfer_dialog_destroy )
CALLEE	57:6	57:6	8	G_CALLBACK
LEAF_NODE	57:6	57:6	9	G_CALLBACK
LEAF_NODE	57:16	57:16	8	(
ARGUMENT	57:17	57:17	8	finch_xfer_dialog_destroy
FIELD	57:17	57:17	9	finch_xfer_dialog_destroy
LEAF_NODE	57:17	57:17	10	finch_xfer_dialog_destroy
LEAF_NODE	57:42	57:42	8	)
LEAF_NODE	57:43	57:43	6	,
ARGUMENT	57:45	57:45	6	NULL
FIELD	57:45	57:45	7	NULL
LEAF_NODE	57:45	57:45	8	NULL
LEAF_NODE	57:49	57:49	6	)
LEAF_NODE	57:50	57:50	4	;
EXPR_STATEMENT	58:1	58:42	3	gnt_box_add_widget ( GNT_BOX ( bbox ) , button ) ;
EXPR	58:1	58:1	4	gnt_box_add_widget ( GNT_BOX ( bbox ) , button )
FUNCTION_CALL	58:1	58:41	5	gnt_box_add_widget ( GNT_BOX ( bbox ) , button )
CALLEE	58:1	58:1	6	gnt_box_add_widget
LEAF_NODE	58:1	58:1	7	gnt_box_add_widget
LEAF_NODE	58:19	58:19	6	(
ARGUMENT	58:20	58:20	6	GNT_BOX ( bbox )
FUNCTION_CALL	58:20	58:32	7	GNT_BOX ( bbox )
CALLEE	58:20	58:20	8	GNT_BOX
LEAF_NODE	58:20	58:20	9	GNT_BOX
LEAF_NODE	58:27	58:27	8	(
ARGUMENT	58:28	58:28	8	bbox
FIELD	58:28	58:28	9	bbox
LEAF_NODE	58:28	58:28	10	bbox
LEAF_NODE	58:32	58:32	8	)
LEAF_NODE	58:33	58:33	6	,
ARGUMENT	58:35	58:35	6	button
FIELD	58:35	58:35	7	button
LEAF_NODE	58:35	58:35	8	button
LEAF_NODE	58:41	58:41	6	)
LEAF_NODE	58:42	58:42	4	;
EXPR_STATEMENT	59:1	59:42	3	gnt_box_add_widget ( GNT_BOX ( window ) , bbox ) ;
EXPR	59:1	59:1	4	gnt_box_add_widget ( GNT_BOX ( window ) , bbox )
FUNCTION_CALL	59:1	59:41	5	gnt_box_add_widget ( GNT_BOX ( window ) , bbox )
CALLEE	59:1	59:1	6	gnt_box_add_widget
LEAF_NODE	59:1	59:1	7	gnt_box_add_widget
LEAF_NODE	59:19	59:19	6	(
ARGUMENT	59:20	59:20	6	GNT_BOX ( window )
FUNCTION_CALL	59:20	59:34	7	GNT_BOX ( window )
CALLEE	59:20	59:20	8	GNT_BOX
LEAF_NODE	59:20	59:20	9	GNT_BOX
LEAF_NODE	59:27	59:27	8	(
ARGUMENT	59:28	59:28	8	window
FIELD	59:28	59:28	9	window
LEAF_NODE	59:28	59:28	10	window
LEAF_NODE	59:34	59:34	8	)
LEAF_NODE	59:35	59:35	6	,
ARGUMENT	59:37	59:37	6	bbox
FIELD	59:37	59:37	7	bbox
LEAF_NODE	59:37	59:37	8	bbox
LEAF_NODE	59:41	59:41	6	)
LEAF_NODE	59:42	59:42	4	;
ITERATION	60:1	60:62	3	
KEYWORD	60:1	60:1	4	for
LEAF_NODE	60:1	60:1	5	for
LEAF_NODE	60:5	60:5	4	(
FOR_INIT	60:6	60:35	4	iter = purple_xfers_get_all ( ) ;
EXPR	60:6	60:6	5	iter = purple_xfers_get_all ( )
ASSIGN	60:6	60:13	6	iter = purple_xfers_get_all ( )
LVAL	60:6	60:6	7	iter
FIELD	60:6	60:6	8	iter
LEAF_NODE	60:6	60:6	9	iter
ASSIGN_OP	60:11	60:11	7	=
LEAF_NODE	60:11	60:11	8	=
RVAL	60:13	60:13	7	purple_xfers_get_all ( )
FUNCTION_CALL	60:13	60:34	8	purple_xfers_get_all ( )
CALLEE	60:13	60:13	9	purple_xfers_get_all
LEAF_NODE	60:13	60:13	10	purple_xfers_get_all
LEAF_NODE	60:33	60:33	9	(
LEAF_NODE	60:34	60:34	9	)
LEAF_NODE	60:35	60:35	5	;
CONDITION	60:37	60:37	4	iter
EXPR	60:37	60:37	5	iter
FIELD	60:37	60:37	6	iter
LEAF_NODE	60:37	60:37	7	iter
LEAF_NODE	60:41	60:41	4	;
FOR_EXPR	60:43	60:43	4	iter = iter -> next
EXPR	60:43	60:43	5	iter = iter -> next
ASSIGN	60:43	60:50	6	iter = iter -> next
LVAL	60:43	60:43	7	iter
FIELD	60:43	60:43	8	iter
LEAF_NODE	60:43	60:43	9	iter
ASSIGN_OP	60:48	60:48	7	=
LEAF_NODE	60:48	60:48	8	=
RVAL	60:50	60:50	7	iter -> next
FIELD	60:50	60:56	8	iter -> next
LEAF_NODE	60:50	60:50	9	iter
LEAF_NODE	60:54	60:54	9	->
LEAF_NODE	60:56	60:56	9	next
LEAF_NODE	60:60	60:60	4	)
STATEMENTS	60:62	68:1	4	
LEAF_NODE	60:62	60:62	5	{
STATEMENTS	61:2	63:2	5	
SIMPLE_DECL	61:2	61:45	6	PurpleXfer * xfer ; xfer = ( PurpleXfer * ) iter -> data ;
VAR_DECL	61:2	61:14	7	PurpleXfer * xfer ; xfer = ( PurpleXfer * ) iter -> data
TYPE	61:2	61:13	8	PurpleXfer *
TYPE_NAME	61:2	61:2	9	PurpleXfer
LEAF_NODE	61:2	61:2	10	PurpleXfer
POINTER	61:13	61:13	9	*
LEAF_NODE	61:13	61:13	10	*
NAME	61:14	61:14	8	xfer
LEAF_NODE	61:14	61:14	9	xfer
LEAF_NODE	0:0	0:0	8	;
INIT	61:14	61:14	8	xfer = ( PurpleXfer * ) iter -> data
ASSIGN	61:14	61:21	9	xfer = ( PurpleXfer * ) iter -> data
LVAL	61:14	61:14	10	xfer
NAME	61:14	61:14	11	xfer
LEAF_NODE	61:14	61:14	12	xfer
ASSIGN_OP	61:19	61:19	10	=
LEAF_NODE	61:19	61:19	11	=
RVAL	61:21	61:35	10	( PurpleXfer * ) iter -> data
LEAF_NODE	61:21	61:21	11	(
TYPE_NAME	61:22	61:22	11	PurpleXfer
LEAF_NODE	61:22	61:22	12	PurpleXfer
LEAF_NODE	61:33	61:33	11	*
LEAF_NODE	61:34	61:34	11	)
FIELD	61:35	61:41	11	iter -> data
LEAF_NODE	61:35	61:35	12	iter
LEAF_NODE	61:39	61:39	12	->
LEAF_NODE	61:41	61:41	12	data
LEAF_NODE	61:45	61:45	7	;
SIMPLE_DECL	62:2	62:45	6	PurpleGntXferUiData * data ; data = FINCHXFER ( xfer ) ;
VAR_DECL	62:2	62:23	7	PurpleGntXferUiData * data ; data = FINCHXFER ( xfer )
TYPE	62:2	62:22	8	PurpleGntXferUiData *
TYPE_NAME	62:2	62:2	9	PurpleGntXferUiData
LEAF_NODE	62:2	62:2	10	PurpleGntXferUiData
POINTER	62:22	62:22	9	*
LEAF_NODE	62:22	62:22	10	*
NAME	62:23	62:23	8	data
LEAF_NODE	62:23	62:23	9	data
LEAF_NODE	0:0	0:0	8	;
INIT	62:23	62:23	8	data = FINCHXFER ( xfer )
ASSIGN	62:23	62:30	9	data = FINCHXFER ( xfer )
LVAL	62:23	62:23	10	data
NAME	62:23	62:23	11	data
LEAF_NODE	62:23	62:23	12	data
ASSIGN_OP	62:28	62:28	10	=
LEAF_NODE	62:28	62:28	11	=
RVAL	62:30	62:30	10	FINCHXFER ( xfer )
FUNCTION_CALL	62:30	62:44	11	FINCHXFER ( xfer )
CALLEE	62:30	62:30	12	FINCHXFER
LEAF_NODE	62:30	62:30	13	FINCHXFER
LEAF_NODE	62:39	62:39	12	(
ARGUMENT	62:40	62:40	12	xfer
FIELD	62:40	62:40	13	xfer
LEAF_NODE	62:40	62:40	14	xfer
LEAF_NODE	62:44	62:44	12	)
LEAF_NODE	62:45	62:45	7	;
SELECTION	63:2	63:21	6	
KEYWORD	63:2	63:2	7	if
LEAF_NODE	63:2	63:2	8	if
LEAF_NODE	63:5	63:5	7	(
CONDITION	63:6	63:6	7	data -> in_list
EXPR	63:6	63:6	8	data -> in_list
FIELD	63:6	63:12	9	data -> in_list
LEAF_NODE	63:6	63:6	10	data
LEAF_NODE	63:10	63:10	10	->
LEAF_NODE	63:12	63:12	10	in_list
LEAF_NODE	63:19	63:19	7	)
STATEMENTS	63:21	67:2	7	
LEAF_NODE	63:21	63:21	8	{
STATEMENTS	64:3	66:3	8	
EXPR_STATEMENT	64:3	64:35	9	finch_xfer_dialog_add_xfer ( xfer ) ;
EXPR	64:3	64:3	10	finch_xfer_dialog_add_xfer ( xfer )
FUNCTION_CALL	64:3	64:34	11	finch_xfer_dialog_add_xfer ( xfer )
CALLEE	64:3	64:3	12	finch_xfer_dialog_add_xfer
LEAF_NODE	64:3	64:3	13	finch_xfer_dialog_add_xfer
LEAF_NODE	64:29	64:29	12	(
ARGUMENT	64:30	64:30	12	xfer
FIELD	64:30	64:30	13	xfer
LEAF_NODE	64:30	64:30	14	xfer
LEAF_NODE	64:34	64:34	12	)
LEAF_NODE	64:35	64:35	10	;
EXPR_STATEMENT	65:3	65:38	9	finch_xfer_dialog_update_xfer ( xfer ) ;
EXPR	65:3	65:3	10	finch_xfer_dialog_update_xfer ( xfer )
FUNCTION_CALL	65:3	65:37	11	finch_xfer_dialog_update_xfer ( xfer )
CALLEE	65:3	65:3	12	finch_xfer_dialog_update_xfer
LEAF_NODE	65:3	65:3	13	finch_xfer_dialog_update_xfer
LEAF_NODE	65:32	65:32	12	(
ARGUMENT	65:33	65:33	12	xfer
FIELD	65:33	65:33	13	xfer
LEAF_NODE	65:33	65:33	14	xfer
LEAF_NODE	65:37	65:37	12	)
LEAF_NODE	65:38	65:38	10	;
EXPR_STATEMENT	66:3	66:46	9	gnt_tree_set_selected ( GNT_TREE ( tree ) , xfer ) ;
EXPR	66:3	66:3	10	gnt_tree_set_selected ( GNT_TREE ( tree ) , xfer )
FUNCTION_CALL	66:3	66:45	11	gnt_tree_set_selected ( GNT_TREE ( tree ) , xfer )
CALLEE	66:3	66:3	12	gnt_tree_set_selected
LEAF_NODE	66:3	66:3	13	gnt_tree_set_selected
LEAF_NODE	66:24	66:24	12	(
ARGUMENT	66:25	66:25	12	GNT_TREE ( tree )
FUNCTION_CALL	66:25	66:38	13	GNT_TREE ( tree )
CALLEE	66:25	66:25	14	GNT_TREE
LEAF_NODE	66:25	66:25	15	GNT_TREE
LEAF_NODE	66:33	66:33	14	(
ARGUMENT	66:34	66:34	14	tree
FIELD	66:34	66:34	15	tree
LEAF_NODE	66:34	66:34	16	tree
LEAF_NODE	66:38	66:38	14	)
LEAF_NODE	66:39	66:39	12	,
ARGUMENT	66:41	66:41	12	xfer
FIELD	66:41	66:41	13	xfer
LEAF_NODE	66:41	66:41	14	xfer
LEAF_NODE	66:45	66:45	12	)
LEAF_NODE	66:46	66:46	10	;
LEAF_NODE	67:2	67:2	8	}
LEAF_NODE	68:1	68:1	5	}
EXPR_STATEMENT	69:1	69:37	3	gnt_widget_show ( xfer_dialog -> window ) ;
EXPR	69:1	69:1	4	gnt_widget_show ( xfer_dialog -> window )
FUNCTION_CALL	69:1	69:36	5	gnt_widget_show ( xfer_dialog -> window )
CALLEE	69:1	69:1	6	gnt_widget_show
LEAF_NODE	69:1	69:1	7	gnt_widget_show
LEAF_NODE	69:16	69:16	6	(
ARGUMENT	69:17	69:17	6	xfer_dialog -> window
FIELD	69:17	69:30	7	xfer_dialog -> window
LEAF_NODE	69:17	69:17	8	xfer_dialog
LEAF_NODE	69:28	69:28	8	->
LEAF_NODE	69:30	69:30	8	window
LEAF_NODE	69:36	69:36	6	)
LEAF_NODE	69:37	69:37	4	;
LEAF_NODE	70:0	70:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	30:0	1	
RETURN_TYPE	2:0	2:7	2	static int
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	int
LEAF_NODE	2:7	2:7	4	int
FUNCTION_NAME	2:11	2:11	2	gg_file_hash_sha1_part
LEAF_NODE	2:11	2:11	3	gg_file_hash_sha1_part
PARAMETER_LIST	2:33	2:77	2	( int fd , SHA_CTX * ctx , off_t pos , size_t len )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:38	3	int fd
TYPE	2:34	2:34	4	int
TYPE_NAME	2:34	2:34	5	int
LEAF_NODE	2:34	2:34	6	int
NAME	2:38	2:38	4	fd
LEAF_NODE	2:38	2:38	5	fd
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:51	3	SHA_CTX * ctx
TYPE	2:42	2:50	4	SHA_CTX *
TYPE_NAME	2:42	2:42	5	SHA_CTX
LEAF_NODE	2:42	2:42	6	SHA_CTX
POINTER	2:50	2:50	5	*
LEAF_NODE	2:50	2:50	6	*
NAME	2:51	2:51	4	ctx
LEAF_NODE	2:51	2:51	5	ctx
LEAF_NODE	2:54	2:54	3	,
PARAMETER_DECL	2:56	2:62	3	off_t pos
TYPE	2:56	2:56	4	off_t
TYPE_NAME	2:56	2:56	5	off_t
LEAF_NODE	2:56	2:56	6	off_t
NAME	2:62	2:62	4	pos
LEAF_NODE	2:62	2:62	5	pos
LEAF_NODE	2:65	2:65	3	,
PARAMETER_DECL	2:67	2:74	3	size_t len
TYPE	2:67	2:67	4	size_t
TYPE_NAME	2:67	2:67	5	size_t
LEAF_NODE	2:67	2:67	6	size_t
NAME	2:74	2:74	4	len
LEAF_NODE	2:74	2:74	5	len
LEAF_NODE	2:77	2:77	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	29:1	2	
SIMPLE_DECL	4:1	4:24	3	unsigned char [ 4096 ] buf ;
VAR_DECL	4:1	4:15	4	unsigned char [ 4096 ] buf
TYPE	4:1	4:18	5	unsigned char [ 4096 ]
TYPE_NAME	4:1	4:10	6	unsigned char
LEAF_NODE	4:1	4:1	7	unsigned
LEAF_NODE	4:10	4:10	7	char
TYPE_SUFFIX	4:18	4:23	6	[ 4096 ]
LEAF_NODE	4:18	4:18	7	[
FIELD	4:19	4:19	7	4096
LEAF_NODE	4:19	4:19	8	4096
LEAF_NODE	4:23	4:23	7	]
NAME	4:15	4:15	5	buf
LEAF_NODE	4:15	4:15	6	buf
LEAF_NODE	4:24	4:24	4	;
SIMPLE_DECL	5:1	5:17	3	size_t chunk_len ;
VAR_DECL	5:1	5:8	4	size_t chunk_len
TYPE	5:1	5:1	5	size_t
TYPE_NAME	5:1	5:1	6	size_t
LEAF_NODE	5:1	5:1	7	size_t
NAME	5:8	5:8	5	chunk_len
LEAF_NODE	5:8	5:8	6	chunk_len
LEAF_NODE	5:17	5:17	4	;
SIMPLE_DECL	6:1	6:12	3	int res ; res = 0 ;
VAR_DECL	6:1	6:5	4	int res ; res = 0
TYPE	6:1	6:1	5	int
TYPE_NAME	6:1	6:1	6	int
LEAF_NODE	6:1	6:1	7	int
NAME	6:5	6:5	5	res
LEAF_NODE	6:5	6:5	6	res
LEAF_NODE	0:0	0:0	5	;
INIT	6:5	6:5	5	res = 0
ASSIGN	6:5	6:11	6	res = 0
LVAL	6:5	6:5	7	res
NAME	6:5	6:5	8	res
LEAF_NODE	6:5	6:5	9	res
ASSIGN_OP	6:9	6:9	7	=
LEAF_NODE	6:9	6:9	8	=
RVAL	6:11	6:11	7	0
FIELD	6:11	6:11	8	0
LEAF_NODE	6:11	6:11	9	0
LEAF_NODE	6:12	6:12	4	;
ITERATION	7:1	7:17	3	
KEYWORD	7:1	7:1	4	while
LEAF_NODE	7:1	7:1	5	while
LEAF_NODE	7:7	7:7	4	(
CONDITION	7:8	7:8	4	len > 0
EXPR	7:8	7:14	5	len > 0
FIELD	7:8	7:8	6	len
LEAF_NODE	7:8	7:8	7	len
REL_OPERATOR	7:12	7:12	6	>
LEAF_NODE	7:12	7:12	7	>
FIELD	7:14	7:14	6	0
LEAF_NODE	7:14	7:14	7	0
LEAF_NODE	7:15	7:15	4	)
STATEMENTS	7:17	28:1	4	
LEAF_NODE	7:17	7:17	5	{
STATEMENTS	8:2	20:2	5	
SELECTION	8:2	8:46	6	
KEYWORD	8:2	8:2	7	if
LEAF_NODE	8:2	8:2	8	if
LEAF_NODE	8:5	8:5	7	(
CONDITION	8:6	8:6	7	lseek ( fd , pos , SEEK_SET ) == ( off_t ) - 1
EXPR	8:6	8:42	8	lseek ( fd , pos , SEEK_SET ) == ( off_t ) - 1
FUNCTION_CALL	8:6	8:29	9	lseek ( fd , pos , SEEK_SET )
CALLEE	8:6	8:6	10	lseek
LEAF_NODE	8:6	8:6	11	lseek
LEAF_NODE	8:11	8:11	10	(
ARGUMENT	8:12	8:12	10	fd
FIELD	8:12	8:12	11	fd
LEAF_NODE	8:12	8:12	12	fd
LEAF_NODE	8:14	8:14	10	,
ARGUMENT	8:16	8:16	10	pos
FIELD	8:16	8:16	11	pos
LEAF_NODE	8:16	8:16	12	pos
LEAF_NODE	8:19	8:19	10	,
ARGUMENT	8:21	8:21	10	SEEK_SET
FIELD	8:21	8:21	11	SEEK_SET
LEAF_NODE	8:21	8:21	12	SEEK_SET
LEAF_NODE	8:29	8:29	10	)
EQ_OPERATOR	8:31	8:31	9	==
LEAF_NODE	8:31	8:31	10	==
LEAF_NODE	8:34	8:34	9	(
TYPE_NAME	8:35	8:35	9	off_t
LEAF_NODE	8:35	8:35	10	off_t
LEAF_NODE	8:40	8:40	9	)
UNARY_EXPR	8:42	8:43	9	- 1
UNARY_OPERATOR	8:42	8:42	10	-
LEAF_NODE	8:42	8:42	11	-
FIELD	8:43	8:43	10	1
LEAF_NODE	8:43	8:43	11	1
LEAF_NODE	8:44	8:44	7	)
STATEMENTS	8:46	11:2	7	
LEAF_NODE	8:46	8:46	8	{
STATEMENTS	9:3	10:3	8	
EXPR_STATEMENT	9:3	9:11	9	res = - 1 ;
EXPR	9:3	9:3	10	res = - 1
ASSIGN	9:3	9:9	11	res = - 1
LVAL	9:3	9:3	12	res
FIELD	9:3	9:3	13	res
LEAF_NODE	9:3	9:3	14	res
ASSIGN_OP	9:7	9:7	12	=
LEAF_NODE	9:7	9:7	13	=
RVAL	9:9	9:9	12	- 1
UNARY_EXPR	9:9	9:10	13	- 1
UNARY_OPERATOR	9:9	9:9	14	-
LEAF_NODE	9:9	9:9	15	-
FIELD	9:10	9:10	14	1
LEAF_NODE	9:10	9:10	15	1
LEAF_NODE	9:11	9:11	10	;
JUMP_STATEMENT	10:3	10:8	9	break DESTINATION ;
KEYWORD	10:3	10:3	10	break
LEAF_NODE	10:3	10:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	10:8	10:8	10	;
LEAF_NODE	11:2	11:2	8	}
EXPR_STATEMENT	12:2	12:17	6	chunk_len = len ;
EXPR	12:2	12:2	7	chunk_len = len
ASSIGN	12:2	12:14	8	chunk_len = len
LVAL	12:2	12:2	9	chunk_len
FIELD	12:2	12:2	10	chunk_len
LEAF_NODE	12:2	12:2	11	chunk_len
ASSIGN_OP	12:12	12:12	9	=
LEAF_NODE	12:12	12:12	10	=
RVAL	12:14	12:14	9	len
FIELD	12:14	12:14	10	len
LEAF_NODE	12:14	12:14	11	len
LEAF_NODE	12:17	12:17	7	;
SELECTION	13:2	14:3	6	
KEYWORD	13:2	13:2	7	if
LEAF_NODE	13:2	13:2	8	if
LEAF_NODE	13:5	13:5	7	(
CONDITION	13:6	13:6	7	chunk_len > sizeof ( buf )
EXPR	13:6	13:18	8	chunk_len > sizeof ( buf )
FIELD	13:6	13:6	9	chunk_len
LEAF_NODE	13:6	13:6	10	chunk_len
REL_OPERATOR	13:16	13:16	9	>
LEAF_NODE	13:16	13:16	10	>
FUNCTION_CALL	13:18	13:28	9	sizeof ( buf )
CALLEE	13:18	13:18	10	sizeof
LEAF_NODE	13:18	13:18	11	sizeof
LEAF_NODE	13:24	13:24	10	(
ARGUMENT	13:25	13:25	10	buf
FIELD	13:25	13:25	11	buf
LEAF_NODE	13:25	13:25	12	buf
LEAF_NODE	13:28	13:28	10	)
LEAF_NODE	13:29	13:29	7	)
STATEMENTS	14:3	14:3	7	
EXPR_STATEMENT	14:3	14:26	8	chunk_len = sizeof ( buf ) ;
EXPR	14:3	14:3	9	chunk_len = sizeof ( buf )
ASSIGN	14:3	14:15	10	chunk_len = sizeof ( buf )
LVAL	14:3	14:3	11	chunk_len
FIELD	14:3	14:3	12	chunk_len
LEAF_NODE	14:3	14:3	13	chunk_len
ASSIGN_OP	14:13	14:13	11	=
LEAF_NODE	14:13	14:13	12	=
RVAL	14:15	14:15	11	sizeof ( buf )
FUNCTION_CALL	14:15	14:25	12	sizeof ( buf )
CALLEE	14:15	14:15	13	sizeof
LEAF_NODE	14:15	14:15	14	sizeof
LEAF_NODE	14:21	14:21	13	(
ARGUMENT	14:22	14:22	13	buf
FIELD	14:22	14:22	14	buf
LEAF_NODE	14:22	14:22	15	buf
LEAF_NODE	14:25	14:25	13	)
LEAF_NODE	14:26	14:26	9	;
EXPR_STATEMENT	15:2	15:32	6	res = read ( fd , buf , chunk_len ) ;
EXPR	15:2	15:2	7	res = read ( fd , buf , chunk_len )
ASSIGN	15:2	15:8	8	res = read ( fd , buf , chunk_len )
LVAL	15:2	15:2	9	res
FIELD	15:2	15:2	10	res
LEAF_NODE	15:2	15:2	11	res
ASSIGN_OP	15:6	15:6	9	=
LEAF_NODE	15:6	15:6	10	=
RVAL	15:8	15:8	9	read ( fd , buf , chunk_len )
FUNCTION_CALL	15:8	15:31	10	read ( fd , buf , chunk_len )
CALLEE	15:8	15:8	11	read
LEAF_NODE	15:8	15:8	12	read
LEAF_NODE	15:12	15:12	11	(
ARGUMENT	15:13	15:13	11	fd
FIELD	15:13	15:13	12	fd
LEAF_NODE	15:13	15:13	13	fd
LEAF_NODE	15:15	15:15	11	,
ARGUMENT	15:17	15:17	11	buf
FIELD	15:17	15:17	12	buf
LEAF_NODE	15:17	15:17	13	buf
LEAF_NODE	15:20	15:20	11	,
ARGUMENT	15:22	15:22	11	chunk_len
FIELD	15:22	15:22	12	chunk_len
LEAF_NODE	15:22	15:22	13	chunk_len
LEAF_NODE	15:31	15:31	11	)
LEAF_NODE	15:32	15:32	7	;
SELECTION	16:2	17:3	6	
KEYWORD	16:2	16:2	7	if
LEAF_NODE	16:2	16:2	8	if
LEAF_NODE	16:5	16:5	7	(
CONDITION	16:6	16:6	7	res == - 1 && errno != EINTR
EXPR	16:6	16:6	8	res == - 1 && errno != EINTR
AND	16:6	16:19	9	res == - 1 && errno != EINTR
EXPR	16:6	16:13	10	res == - 1
FIELD	16:6	16:6	11	res
LEAF_NODE	16:6	16:6	12	res
EQ_OPERATOR	16:10	16:10	11	==
LEAF_NODE	16:10	16:10	12	==
UNARY_EXPR	16:13	16:14	11	- 1
UNARY_OPERATOR	16:13	16:13	12	-
LEAF_NODE	16:13	16:13	13	-
FIELD	16:14	16:14	12	1
LEAF_NODE	16:14	16:14	13	1
LEAF_NODE	16:16	16:16	10	&&
EXPR	16:19	16:28	10	errno != EINTR
FIELD	16:19	16:19	11	errno
LEAF_NODE	16:19	16:19	12	errno
EQ_OPERATOR	16:25	16:25	11	!=
LEAF_NODE	16:25	16:25	12	!=
FIELD	16:28	16:28	11	EINTR
LEAF_NODE	16:28	16:28	12	EINTR
LEAF_NODE	16:33	16:33	7	)
STATEMENTS	17:3	17:3	7	
JUMP_STATEMENT	17:3	17:8	8	break DESTINATION ;
KEYWORD	17:3	17:3	9	break
LEAF_NODE	17:3	17:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	17:8	17:8	9	;
SELECTION	18:2	19:3	6	
KEYWORD	18:2	18:2	7	if
LEAF_NODE	18:2	18:2	8	if
LEAF_NODE	18:5	18:5	7	(
CONDITION	18:6	18:6	7	res == 0
EXPR	18:6	18:13	8	res == 0
FIELD	18:6	18:6	9	res
LEAF_NODE	18:6	18:6	10	res
EQ_OPERATOR	18:10	18:10	9	==
LEAF_NODE	18:10	18:10	10	==
FIELD	18:13	18:13	9	0
LEAF_NODE	18:13	18:13	10	0
LEAF_NODE	18:14	18:14	7	)
STATEMENTS	19:3	19:3	7	
JUMP_STATEMENT	19:3	19:8	8	break DESTINATION ;
KEYWORD	19:3	19:3	9	break
LEAF_NODE	19:3	19:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	19:8	19:8	9	;
SELECTION	20:2	20:17	6	
KEYWORD	20:2	20:2	7	if
LEAF_NODE	20:2	20:2	8	if
LEAF_NODE	20:5	20:5	7	(
CONDITION	20:6	20:6	7	res != - 1
EXPR	20:6	20:13	8	res != - 1
FIELD	20:6	20:6	9	res
LEAF_NODE	20:6	20:6	10	res
EQ_OPERATOR	20:10	20:10	9	!=
LEAF_NODE	20:10	20:10	10	!=
UNARY_EXPR	20:13	20:14	9	- 1
UNARY_OPERATOR	20:13	20:13	10	-
LEAF_NODE	20:13	20:13	11	-
FIELD	20:14	20:14	10	1
LEAF_NODE	20:14	20:14	11	1
LEAF_NODE	20:15	20:15	7	)
STATEMENTS	20:17	27:2	7	
LEAF_NODE	20:17	20:17	8	{
STATEMENTS	21:3	26:3	8	
SELECTION	21:3	21:36	9	
KEYWORD	21:3	21:3	10	if
LEAF_NODE	21:3	21:3	11	if
LEAF_NODE	21:6	21:6	10	(
CONDITION	21:7	21:7	10	! SHA1_Update ( ctx , buf , res )
EXPR	21:7	21:7	11	! SHA1_Update ( ctx , buf , res )
UNARY_EXPR	21:7	21:8	12	! SHA1_Update ( ctx , buf , res )
UNARY_OPERATOR	21:7	21:7	13	!
LEAF_NODE	21:7	21:7	14	!
FUNCTION_CALL	21:8	21:33	13	SHA1_Update ( ctx , buf , res )
CALLEE	21:8	21:8	14	SHA1_Update
LEAF_NODE	21:8	21:8	15	SHA1_Update
LEAF_NODE	21:19	21:19	14	(
ARGUMENT	21:20	21:20	14	ctx
FIELD	21:20	21:20	15	ctx
LEAF_NODE	21:20	21:20	16	ctx
LEAF_NODE	21:23	21:23	14	,
ARGUMENT	21:25	21:25	14	buf
FIELD	21:25	21:25	15	buf
LEAF_NODE	21:25	21:25	16	buf
LEAF_NODE	21:28	21:28	14	,
ARGUMENT	21:30	21:30	14	res
FIELD	21:30	21:30	15	res
LEAF_NODE	21:30	21:30	16	res
LEAF_NODE	21:33	21:33	14	)
LEAF_NODE	21:34	21:34	10	)
STATEMENTS	21:36	24:3	10	
LEAF_NODE	21:36	21:36	11	{
STATEMENTS	22:4	23:4	11	
EXPR_STATEMENT	22:4	22:12	12	res = - 1 ;
EXPR	22:4	22:4	13	res = - 1
ASSIGN	22:4	22:10	14	res = - 1
LVAL	22:4	22:4	15	res
FIELD	22:4	22:4	16	res
LEAF_NODE	22:4	22:4	17	res
ASSIGN_OP	22:8	22:8	15	=
LEAF_NODE	22:8	22:8	16	=
RVAL	22:10	22:10	15	- 1
UNARY_EXPR	22:10	22:11	16	- 1
UNARY_OPERATOR	22:10	22:10	17	-
LEAF_NODE	22:10	22:10	18	-
FIELD	22:11	22:11	17	1
LEAF_NODE	22:11	22:11	18	1
LEAF_NODE	22:12	22:12	13	;
JUMP_STATEMENT	23:4	23:9	12	break DESTINATION ;
KEYWORD	23:4	23:4	13	break
LEAF_NODE	23:4	23:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	23:9	23:9	13	;
LEAF_NODE	24:3	24:3	11	}
EXPR_STATEMENT	25:3	25:13	9	pos += res ;
EXPR	25:3	25:3	10	pos += res
ASSIGN	25:3	25:10	11	pos += res
LVAL	25:3	25:3	12	pos
FIELD	25:3	25:3	13	pos
LEAF_NODE	25:3	25:3	14	pos
ASSIGN_OP	25:7	25:7	12	+=
LEAF_NODE	25:7	25:7	13	+=
RVAL	25:10	25:10	12	res
FIELD	25:10	25:10	13	res
LEAF_NODE	25:10	25:10	14	res
LEAF_NODE	25:13	25:13	10	;
EXPR_STATEMENT	26:3	26:13	9	len -= res ;
EXPR	26:3	26:3	10	len -= res
ASSIGN	26:3	26:10	11	len -= res
LVAL	26:3	26:3	12	len
FIELD	26:3	26:3	13	len
LEAF_NODE	26:3	26:3	14	len
ASSIGN_OP	26:7	26:7	12	-=
LEAF_NODE	26:7	26:7	13	-=
RVAL	26:10	26:10	12	res
FIELD	26:10	26:10	13	res
LEAF_NODE	26:10	26:10	14	res
LEAF_NODE	26:13	26:13	10	;
LEAF_NODE	27:2	27:2	8	}
LEAF_NODE	28:1	28:1	5	}
JUMP_STATEMENT	29:1	29:11	3	return res ;
KEYWORD	29:1	29:1	4	return
LEAF_NODE	29:1	29:1	5	return
DESTINATION	29:8	29:8	4	res
EXPR	29:8	29:8	5	res
FIELD	29:8	29:8	6	res
LEAF_NODE	29:8	29:8	7	res
LEAF_NODE	29:11	29:11	4	;
LEAF_NODE	30:0	30:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:7	2	static int
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	int
LEAF_NODE	1:7	1:7	4	int
FUNCTION_NAME	2:0	2:0	2	prefs_notebook_add_page
LEAF_NODE	2:0	2:0	3	prefs_notebook_add_page
PARAMETER_LIST	2:23	2:66	2	( const char * text , GtkWidget * page , int ind )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:36	3	const char * text
TYPE	2:24	2:35	4	const char *
TYPE_NAME	2:24	2:30	5	const char
LEAF_NODE	2:24	2:24	6	const
LEAF_NODE	2:30	2:30	6	char
POINTER	2:35	2:35	5	*
LEAF_NODE	2:35	2:35	6	*
NAME	2:36	2:36	4	text
LEAF_NODE	2:36	2:36	5	text
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:53	3	GtkWidget * page
TYPE	2:42	2:52	4	GtkWidget *
TYPE_NAME	2:42	2:42	5	GtkWidget
LEAF_NODE	2:42	2:42	6	GtkWidget
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	page
LEAF_NODE	2:53	2:53	5	page
LEAF_NODE	2:57	2:57	3	,
PARAMETER_DECL	2:59	2:63	3	int ind
TYPE	2:59	2:59	4	int
TYPE_NAME	2:59	2:59	5	int
LEAF_NODE	2:59	2:59	6	int
NAME	2:63	2:63	4	ind
LEAF_NODE	2:63	2:63	5	ind
LEAF_NODE	2:66	2:66	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:88	3	return gtk_notebook_append_page ( GTK_NOTEBOOK ( prefsnotebook ) , page , gtk_label_new ( text ) ) ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	gtk_notebook_append_page ( GTK_NOTEBOOK ( prefsnotebook ) , page , gtk_label_new ( text ) )
EXPR	4:8	4:8	5	gtk_notebook_append_page ( GTK_NOTEBOOK ( prefsnotebook ) , page , gtk_label_new ( text ) )
FUNCTION_CALL	4:8	4:87	6	gtk_notebook_append_page ( GTK_NOTEBOOK ( prefsnotebook ) , page , gtk_label_new ( text ) )
CALLEE	4:8	4:8	7	gtk_notebook_append_page
LEAF_NODE	4:8	4:8	8	gtk_notebook_append_page
LEAF_NODE	4:32	4:32	7	(
ARGUMENT	4:33	4:33	7	GTK_NOTEBOOK ( prefsnotebook )
FUNCTION_CALL	4:33	4:59	8	GTK_NOTEBOOK ( prefsnotebook )
CALLEE	4:33	4:33	9	GTK_NOTEBOOK
LEAF_NODE	4:33	4:33	10	GTK_NOTEBOOK
LEAF_NODE	4:45	4:45	9	(
ARGUMENT	4:46	4:46	9	prefsnotebook
FIELD	4:46	4:46	10	prefsnotebook
LEAF_NODE	4:46	4:46	11	prefsnotebook
LEAF_NODE	4:59	4:59	9	)
LEAF_NODE	4:60	4:60	7	,
ARGUMENT	4:62	4:62	7	page
FIELD	4:62	4:62	8	page
LEAF_NODE	4:62	4:62	9	page
LEAF_NODE	4:66	4:66	7	,
ARGUMENT	4:68	4:68	7	gtk_label_new ( text )
FUNCTION_CALL	4:68	4:86	8	gtk_label_new ( text )
CALLEE	4:68	4:68	9	gtk_label_new
LEAF_NODE	4:68	4:68	10	gtk_label_new
LEAF_NODE	4:81	4:81	9	(
ARGUMENT	4:82	4:82	9	text
FIELD	4:82	4:82	10	text
LEAF_NODE	4:82	4:82	11	text
LEAF_NODE	4:86	4:86	9	)
LEAF_NODE	4:87	4:87	7	)
LEAF_NODE	4:88	4:88	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	gnt_slider_map
LEAF_NODE	2:0	2:0	3	gnt_slider_map
PARAMETER_LIST	2:14	2:32	2	( GntWidget * widget )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:26	3	GntWidget * widget
TYPE	2:15	2:25	4	GntWidget *
TYPE_NAME	2:15	2:15	5	GntWidget
LEAF_NODE	2:15	2:15	6	GntWidget
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	widget
LEAF_NODE	2:26	2:26	5	widget
LEAF_NODE	2:32	2:32	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	widget -> priv . width == 0 || widget -> priv . height == 0
EXPR	4:5	4:5	5	widget -> priv . width == 0 || widget -> priv . height == 0
OR	4:5	4:32	6	widget -> priv . width == 0 || widget -> priv . height == 0
EXPR	4:5	4:27	7	widget -> priv . width == 0
FIELD	4:5	4:18	8	widget -> priv . width
LEAF_NODE	4:5	4:5	9	widget
LEAF_NODE	4:11	4:11	9	->
LEAF_NODE	4:13	4:13	9	priv
LEAF_NODE	4:17	4:17	9	.
LEAF_NODE	4:18	4:18	9	width
EQ_OPERATOR	4:24	4:24	8	==
LEAF_NODE	4:24	4:24	9	==
FIELD	4:27	4:27	8	0
LEAF_NODE	4:27	4:27	9	0
LEAF_NODE	4:29	4:29	7	||
EXPR	4:32	4:55	7	widget -> priv . height == 0
FIELD	4:32	4:45	8	widget -> priv . height
LEAF_NODE	4:32	4:32	9	widget
LEAF_NODE	4:38	4:38	9	->
LEAF_NODE	4:40	4:40	9	priv
LEAF_NODE	4:44	4:44	9	.
LEAF_NODE	4:45	4:45	9	height
EQ_OPERATOR	4:52	4:52	8	==
LEAF_NODE	4:52	4:52	9	==
FIELD	4:55	4:55	8	0
LEAF_NODE	4:55	4:55	9	0
LEAF_NODE	4:56	4:56	4	)
STATEMENTS	5:2	5:2	4	
EXPR_STATEMENT	5:2	5:33	5	gnt_widget_size_request ( widget ) ;
EXPR	5:2	5:2	6	gnt_widget_size_request ( widget )
FUNCTION_CALL	5:2	5:32	7	gnt_widget_size_request ( widget )
CALLEE	5:2	5:2	8	gnt_widget_size_request
LEAF_NODE	5:2	5:2	9	gnt_widget_size_request
LEAF_NODE	5:25	5:25	8	(
ARGUMENT	5:26	5:26	8	widget
FIELD	5:26	5:26	9	widget
LEAF_NODE	5:26	5:26	10	widget
LEAF_NODE	5:32	5:32	8	)
LEAF_NODE	5:33	5:33	6	;
EXPR_STATEMENT	6:1	6:9	3	GNTDEBUG ;
EXPR	6:1	6:1	4	GNTDEBUG
FIELD	6:1	6:1	5	GNTDEBUG
LEAF_NODE	6:1	6:1	6	GNTDEBUG
LEAF_NODE	6:9	6:9	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	52:0	1	
RETURN_TYPE	2:0	2:0	2	gboolean
TYPE_NAME	2:0	2:0	3	gboolean
LEAF_NODE	2:0	2:0	4	gboolean
FUNCTION_NAME	2:9	2:9	2	gnt_style_read_menu_accels
LEAF_NODE	2:9	2:9	3	gnt_style_read_menu_accels
PARAMETER_LIST	2:35	2:71	2	( const char * name , GHashTable * table )
LEAF_NODE	2:35	2:35	3	(
PARAMETER_DECL	2:36	2:48	3	const char * name
TYPE	2:36	2:47	4	const char *
TYPE_NAME	2:36	2:42	5	const char
LEAF_NODE	2:36	2:36	6	const
LEAF_NODE	2:42	2:42	6	char
POINTER	2:47	2:47	5	*
LEAF_NODE	2:47	2:47	6	*
NAME	2:48	2:48	4	name
LEAF_NODE	2:48	2:48	5	name
LEAF_NODE	2:52	2:52	3	,
PARAMETER_DECL	2:54	2:66	3	GHashTable * table
TYPE	2:54	2:65	4	GHashTable *
TYPE_NAME	2:54	2:54	5	GHashTable
LEAF_NODE	2:54	2:54	6	GHashTable
POINTER	2:65	2:65	5	*
LEAF_NODE	2:65	2:65	6	*
NAME	2:66	2:66	4	table
LEAF_NODE	2:66	2:66	5	table
LEAF_NODE	2:71	2:71	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	5:1	51:1	2	
SIMPLE_DECL	5:1	5:12	3	char * kname ;
VAR_DECL	5:1	5:7	4	char * kname
TYPE	5:1	5:6	5	char *
TYPE_NAME	5:1	5:1	6	char
LEAF_NODE	5:1	5:1	7	char
POINTER	5:6	5:6	6	*
LEAF_NODE	5:6	5:6	7	*
NAME	5:7	5:7	5	kname
LEAF_NODE	5:7	5:7	6	kname
LEAF_NODE	5:12	5:12	4	;
SIMPLE_DECL	6:1	6:21	3	GError * error ; error = NULL ;
VAR_DECL	6:1	6:9	4	GError * error ; error = NULL
TYPE	6:1	6:8	5	GError *
TYPE_NAME	6:1	6:1	6	GError
LEAF_NODE	6:1	6:1	7	GError
POINTER	6:8	6:8	6	*
LEAF_NODE	6:8	6:8	7	*
NAME	6:9	6:9	5	error
LEAF_NODE	6:9	6:9	6	error
LEAF_NODE	0:0	0:0	5	;
INIT	6:9	6:9	5	error = NULL
ASSIGN	6:9	6:17	6	error = NULL
LVAL	6:9	6:9	7	error
NAME	6:9	6:9	8	error
LEAF_NODE	6:9	6:9	9	error
ASSIGN_OP	6:15	6:15	7	=
LEAF_NODE	6:15	6:15	8	=
RVAL	6:17	6:17	7	NULL
FIELD	6:17	6:17	8	NULL
LEAF_NODE	6:17	6:17	9	NULL
LEAF_NODE	6:21	6:21	4	;
SIMPLE_DECL	7:1	7:21	3	gboolean ret ; ret = FALSE ;
VAR_DECL	7:1	7:10	4	gboolean ret ; ret = FALSE
TYPE	7:1	7:1	5	gboolean
TYPE_NAME	7:1	7:1	6	gboolean
LEAF_NODE	7:1	7:1	7	gboolean
NAME	7:10	7:10	5	ret
LEAF_NODE	7:10	7:10	6	ret
LEAF_NODE	0:0	0:0	5	;
INIT	7:10	7:10	5	ret = FALSE
ASSIGN	7:10	7:16	6	ret = FALSE
LVAL	7:10	7:10	7	ret
NAME	7:10	7:10	8	ret
LEAF_NODE	7:10	7:10	9	ret
ASSIGN_OP	7:14	7:14	7	=
LEAF_NODE	7:14	7:14	8	=
RVAL	7:16	7:16	7	FALSE
FIELD	7:16	7:16	8	FALSE
LEAF_NODE	7:16	7:16	9	FALSE
LEAF_NODE	7:21	7:21	4	;
EXPR_STATEMENT	8:1	8:42	3	kname = g_strdup_printf ( "%s::menu" , name ) ;
EXPR	8:1	8:1	4	kname = g_strdup_printf ( "%s::menu" , name )
ASSIGN	8:1	8:9	5	kname = g_strdup_printf ( "%s::menu" , name )
LVAL	8:1	8:1	6	kname
FIELD	8:1	8:1	7	kname
LEAF_NODE	8:1	8:1	8	kname
ASSIGN_OP	8:7	8:7	6	=
LEAF_NODE	8:7	8:7	7	=
RVAL	8:9	8:9	6	g_strdup_printf ( "%s::menu" , name )
FUNCTION_CALL	8:9	8:41	7	g_strdup_printf ( "%s::menu" , name )
CALLEE	8:9	8:9	8	g_strdup_printf
LEAF_NODE	8:9	8:9	9	g_strdup_printf
LEAF_NODE	8:24	8:24	8	(
ARGUMENT	8:25	8:25	8	"%s::menu"
FIELD	8:25	8:25	9	"%s::menu"
LEAF_NODE	8:25	8:25	10	"%s::menu"
LEAF_NODE	8:35	8:35	8	,
ARGUMENT	8:37	8:37	8	name
FIELD	8:37	8:37	9	name
LEAF_NODE	8:37	8:37	10	name
LEAF_NODE	8:41	8:41	8	)
LEAF_NODE	8:42	8:42	4	;
SELECTION	9:1	10:1	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	g_key_file_has_group ( gkfile , kname )
EXPR	9:5	9:5	5	g_key_file_has_group ( gkfile , kname )
FUNCTION_CALL	9:5	9:39	6	g_key_file_has_group ( gkfile , kname )
CALLEE	9:5	9:5	7	g_key_file_has_group
LEAF_NODE	9:5	9:5	8	g_key_file_has_group
LEAF_NODE	9:25	9:25	7	(
ARGUMENT	9:26	9:26	7	gkfile
FIELD	9:26	9:26	8	gkfile
LEAF_NODE	9:26	9:26	9	gkfile
LEAF_NODE	9:32	9:32	7	,
ARGUMENT	9:34	9:34	7	kname
FIELD	9:34	9:34	8	kname
LEAF_NODE	9:34	9:34	9	kname
LEAF_NODE	9:39	9:39	7	)
LEAF_NODE	9:40	9:40	4	)
STATEMENTS	10:1	47:1	4	
LEAF_NODE	10:1	10:1	5	{
STATEMENTS	11:2	46:2	5	
SIMPLE_DECL	11:2	11:15	6	gsize len ; len = 0 ;
VAR_DECL	11:2	11:8	7	gsize len ; len = 0
TYPE	11:2	11:2	8	gsize
TYPE_NAME	11:2	11:2	9	gsize
LEAF_NODE	11:2	11:2	10	gsize
NAME	11:8	11:8	8	len
LEAF_NODE	11:8	11:8	9	len
LEAF_NODE	0:0	0:0	8	;
INIT	11:8	11:8	8	len = 0
ASSIGN	11:8	11:14	9	len = 0
LVAL	11:8	11:8	10	len
NAME	11:8	11:8	11	len
LEAF_NODE	11:8	11:8	12	len
ASSIGN_OP	11:12	11:12	10	=
LEAF_NODE	11:12	11:12	11	=
RVAL	11:14	11:14	10	0
FIELD	11:14	11:14	11	0
LEAF_NODE	11:14	11:14	12	0
LEAF_NODE	11:15	11:15	7	;
SIMPLE_DECL	12:2	12:13	6	char * keys ;
VAR_DECL	12:2	12:9	7	char * keys
TYPE	12:2	12:8	8	char *
TYPE_NAME	12:2	12:2	9	char
LEAF_NODE	12:2	12:2	10	char
POINTER	12:8	12:8	9	*
LEAF_NODE	12:8	12:8	10	*
NAME	12:9	12:9	8	keys
LEAF_NODE	12:9	12:9	9	keys
LEAF_NODE	12:13	12:13	7	;
EXPR_STATEMENT	13:2	13:57	6	keys = g_key_file_get_keys ( gkfile , kname , & len , & error ) ;
EXPR	13:2	13:2	7	keys = g_key_file_get_keys ( gkfile , kname , & len , & error )
ASSIGN	13:2	13:9	8	keys = g_key_file_get_keys ( gkfile , kname , & len , & error )
LVAL	13:2	13:2	9	keys
FIELD	13:2	13:2	10	keys
LEAF_NODE	13:2	13:2	11	keys
ASSIGN_OP	13:7	13:7	9	=
LEAF_NODE	13:7	13:7	10	=
RVAL	13:9	13:9	9	g_key_file_get_keys ( gkfile , kname , & len , & error )
FUNCTION_CALL	13:9	13:56	10	g_key_file_get_keys ( gkfile , kname , & len , & error )
CALLEE	13:9	13:9	11	g_key_file_get_keys
LEAF_NODE	13:9	13:9	12	g_key_file_get_keys
LEAF_NODE	13:28	13:28	11	(
ARGUMENT	13:29	13:29	11	gkfile
FIELD	13:29	13:29	12	gkfile
LEAF_NODE	13:29	13:29	13	gkfile
LEAF_NODE	13:35	13:35	11	,
ARGUMENT	13:37	13:37	11	kname
FIELD	13:37	13:37	12	kname
LEAF_NODE	13:37	13:37	13	kname
LEAF_NODE	13:42	13:42	11	,
ARGUMENT	13:44	13:44	11	& len
UNARY_EXPR	13:44	13:45	12	& len
UNARY_OPERATOR	13:44	13:44	13	&
LEAF_NODE	13:44	13:44	14	&
FIELD	13:45	13:45	13	len
LEAF_NODE	13:45	13:45	14	len
LEAF_NODE	13:48	13:48	11	,
ARGUMENT	13:50	13:50	11	& error
UNARY_EXPR	13:50	13:51	12	& error
UNARY_OPERATOR	13:50	13:50	13	&
LEAF_NODE	13:50	13:50	14	&
FIELD	13:51	13:51	13	error
LEAF_NODE	13:51	13:51	14	error
LEAF_NODE	13:56	13:56	11	)
LEAF_NODE	13:57	13:57	7	;
SELECTION	14:2	15:2	6	
KEYWORD	14:2	14:2	7	if
LEAF_NODE	14:2	14:2	8	if
LEAF_NODE	14:5	14:5	7	(
CONDITION	14:6	14:6	7	error
EXPR	14:6	14:6	8	error
FIELD	14:6	14:6	9	error
LEAF_NODE	14:6	14:6	10	error
LEAF_NODE	14:11	14:11	7	)
STATEMENTS	15:2	20:2	7	
LEAF_NODE	15:2	15:2	8	{
STATEMENTS	16:3	19:3	8	
EXPR_STATEMENT	16:3	16:36	9	gnt_warning ( "%s" , error -> message ) ;
EXPR	16:3	16:3	10	gnt_warning ( "%s" , error -> message )
FUNCTION_CALL	16:3	16:35	11	gnt_warning ( "%s" , error -> message )
CALLEE	16:3	16:3	12	gnt_warning
LEAF_NODE	16:3	16:3	13	gnt_warning
LEAF_NODE	16:14	16:14	12	(
ARGUMENT	16:15	16:15	12	"%s"
FIELD	16:15	16:15	13	"%s"
LEAF_NODE	16:15	16:15	14	"%s"
LEAF_NODE	16:19	16:19	12	,
ARGUMENT	16:21	16:21	12	error -> message
FIELD	16:21	16:28	13	error -> message
LEAF_NODE	16:21	16:21	14	error
LEAF_NODE	16:26	16:26	14	->
LEAF_NODE	16:28	16:28	14	message
LEAF_NODE	16:35	16:35	12	)
LEAF_NODE	16:36	16:36	10	;
EXPR_STATEMENT	17:3	17:22	9	g_error_free ( error ) ;
EXPR	17:3	17:3	10	g_error_free ( error )
FUNCTION_CALL	17:3	17:21	11	g_error_free ( error )
CALLEE	17:3	17:3	12	g_error_free
LEAF_NODE	17:3	17:3	13	g_error_free
LEAF_NODE	17:15	17:15	12	(
ARGUMENT	17:16	17:16	12	error
FIELD	17:16	17:16	13	error
LEAF_NODE	17:16	17:16	14	error
LEAF_NODE	17:21	17:21	12	)
LEAF_NODE	17:22	17:22	10	;
EXPR_STATEMENT	18:3	18:16	9	g_free ( kname ) ;
EXPR	18:3	18:3	10	g_free ( kname )
FUNCTION_CALL	18:3	18:15	11	g_free ( kname )
CALLEE	18:3	18:3	12	g_free
LEAF_NODE	18:3	18:3	13	g_free
LEAF_NODE	18:9	18:9	12	(
ARGUMENT	18:10	18:10	12	kname
FIELD	18:10	18:10	13	kname
LEAF_NODE	18:10	18:10	14	kname
LEAF_NODE	18:15	18:15	12	)
LEAF_NODE	18:16	18:16	10	;
JUMP_STATEMENT	19:3	19:13	9	return ret ;
KEYWORD	19:3	19:3	10	return
LEAF_NODE	19:3	19:3	11	return
DESTINATION	19:10	19:10	10	ret
EXPR	19:10	19:10	11	ret
FIELD	19:10	19:10	12	ret
LEAF_NODE	19:10	19:10	13	ret
LEAF_NODE	19:13	19:13	10	;
LEAF_NODE	20:2	20:2	8	}
ITERATION	21:2	22:2	6	
KEYWORD	21:2	21:2	7	while
LEAF_NODE	21:2	21:2	8	while
LEAF_NODE	21:8	21:8	7	(
CONDITION	21:9	21:9	7	len --
EXPR	21:9	21:9	8	len --
FIELD	21:9	21:12	9	len --
LEAF_NODE	21:9	21:9	10	len
LEAF_NODE	21:12	21:12	10	--
LEAF_NODE	21:14	21:14	7	)
STATEMENTS	22:2	45:2	7	
LEAF_NODE	22:2	22:2	8	{
STATEMENTS	23:3	44:3	8	
SIMPLE_DECL	23:3	23:21	9	char * key , char * menuid ;
INIT_DECL_LIST	23:3	23:3	10	char * key , char * menuid
VAR_DECL	23:3	23:9	11	char * key
TYPE	23:3	23:8	12	char *
TYPE_NAME	23:3	23:3	13	char
LEAF_NODE	23:3	23:3	14	char
POINTER	23:8	23:8	13	*
LEAF_NODE	23:8	23:8	14	*
NAME	23:9	23:9	12	key
LEAF_NODE	23:9	23:9	13	key
LEAF_NODE	23:12	23:12	11	,
VAR_DECL	23:3	23:15	11	char * menuid
TYPE	23:3	23:14	12	char *
TYPE_NAME	23:3	23:3	13	char
LEAF_NODE	23:3	23:3	14	char
POINTER	23:14	23:14	13	*
LEAF_NODE	23:14	23:14	14	*
NAME	23:15	23:15	12	menuid
LEAF_NODE	23:15	23:15	13	menuid
LEAF_NODE	23:21	23:21	10	;
EXPR_STATEMENT	24:3	24:28	9	key = g_strdup ( keys [ len ] ) ;
EXPR	24:3	24:3	10	key = g_strdup ( keys [ len ] )
ASSIGN	24:3	24:9	11	key = g_strdup ( keys [ len ] )
LVAL	24:3	24:3	12	key
FIELD	24:3	24:3	13	key
LEAF_NODE	24:3	24:3	14	key
ASSIGN_OP	24:7	24:7	12	=
LEAF_NODE	24:7	24:7	13	=
RVAL	24:9	24:9	12	g_strdup ( keys [ len ] )
FUNCTION_CALL	24:9	24:27	13	g_strdup ( keys [ len ] )
CALLEE	24:9	24:9	14	g_strdup
LEAF_NODE	24:9	24:9	15	g_strdup
LEAF_NODE	24:17	24:17	14	(
ARGUMENT	24:18	24:18	14	keys [ len ]
FIELD	24:18	24:26	15	keys [ len ]
LEAF_NODE	24:18	24:18	16	keys
LEAF_NODE	24:22	24:22	16	[
EXPR	24:23	24:23	16	len
FIELD	24:23	24:23	17	len
LEAF_NODE	24:23	24:23	18	len
LEAF_NODE	24:26	24:26	16	]
LEAF_NODE	24:27	24:27	14	)
LEAF_NODE	24:28	24:28	10	;
EXPR_STATEMENT	25:3	25:67	9	menuid = g_key_file_get_string ( gkfile , kname , keys [ len ] , & error ) ;
EXPR	25:3	25:3	10	menuid = g_key_file_get_string ( gkfile , kname , keys [ len ] , & error )
ASSIGN	25:3	25:12	11	menuid = g_key_file_get_string ( gkfile , kname , keys [ len ] , & error )
LVAL	25:3	25:3	12	menuid
FIELD	25:3	25:3	13	menuid
LEAF_NODE	25:3	25:3	14	menuid
ASSIGN_OP	25:10	25:10	12	=
LEAF_NODE	25:10	25:10	13	=
RVAL	25:12	25:12	12	g_key_file_get_string ( gkfile , kname , keys [ len ] , & error )
FUNCTION_CALL	25:12	25:66	13	g_key_file_get_string ( gkfile , kname , keys [ len ] , & error )
CALLEE	25:12	25:12	14	g_key_file_get_string
LEAF_NODE	25:12	25:12	15	g_key_file_get_string
LEAF_NODE	25:33	25:33	14	(
ARGUMENT	25:34	25:34	14	gkfile
FIELD	25:34	25:34	15	gkfile
LEAF_NODE	25:34	25:34	16	gkfile
LEAF_NODE	25:40	25:40	14	,
ARGUMENT	25:42	25:42	14	kname
FIELD	25:42	25:42	15	kname
LEAF_NODE	25:42	25:42	16	kname
LEAF_NODE	25:47	25:47	14	,
ARGUMENT	25:49	25:49	14	keys [ len ]
FIELD	25:49	25:57	15	keys [ len ]
LEAF_NODE	25:49	25:49	16	keys
LEAF_NODE	25:53	25:53	16	[
EXPR	25:54	25:54	16	len
FIELD	25:54	25:54	17	len
LEAF_NODE	25:54	25:54	18	len
LEAF_NODE	25:57	25:57	16	]
LEAF_NODE	25:58	25:58	14	,
ARGUMENT	25:60	25:60	14	& error
UNARY_EXPR	25:60	25:61	15	& error
UNARY_OPERATOR	25:60	25:60	16	&
LEAF_NODE	25:60	25:60	17	&
FIELD	25:61	25:61	16	error
LEAF_NODE	25:61	25:61	17	error
LEAF_NODE	25:66	25:66	14	)
LEAF_NODE	25:67	25:67	10	;
SELECTION	26:3	27:3	9	
KEYWORD	26:3	26:3	10	if
LEAF_NODE	26:3	26:3	11	if
LEAF_NODE	26:6	26:6	10	(
CONDITION	26:7	26:7	10	error
EXPR	26:7	26:7	11	error
FIELD	26:7	26:7	12	error
LEAF_NODE	26:7	26:7	13	error
LEAF_NODE	26:12	26:12	10	)
STATEMENTS	27:3	31:3	10	
LEAF_NODE	27:3	27:3	11	{
STATEMENTS	28:4	30:4	11	
EXPR_STATEMENT	28:4	28:37	12	gnt_warning ( "%s" , error -> message ) ;
EXPR	28:4	28:4	13	gnt_warning ( "%s" , error -> message )
FUNCTION_CALL	28:4	28:36	14	gnt_warning ( "%s" , error -> message )
CALLEE	28:4	28:4	15	gnt_warning
LEAF_NODE	28:4	28:4	16	gnt_warning
LEAF_NODE	28:15	28:15	15	(
ARGUMENT	28:16	28:16	15	"%s"
FIELD	28:16	28:16	16	"%s"
LEAF_NODE	28:16	28:16	17	"%s"
LEAF_NODE	28:20	28:20	15	,
ARGUMENT	28:22	28:22	15	error -> message
FIELD	28:22	28:29	16	error -> message
LEAF_NODE	28:22	28:22	17	error
LEAF_NODE	28:27	28:27	17	->
LEAF_NODE	28:29	28:29	17	message
LEAF_NODE	28:36	28:36	15	)
LEAF_NODE	28:37	28:37	13	;
EXPR_STATEMENT	29:4	29:23	12	g_error_free ( error ) ;
EXPR	29:4	29:4	13	g_error_free ( error )
FUNCTION_CALL	29:4	29:22	14	g_error_free ( error )
CALLEE	29:4	29:4	15	g_error_free
LEAF_NODE	29:4	29:4	16	g_error_free
LEAF_NODE	29:16	29:16	15	(
ARGUMENT	29:17	29:17	15	error
FIELD	29:17	29:17	16	error
LEAF_NODE	29:17	29:17	17	error
LEAF_NODE	29:22	29:22	15	)
LEAF_NODE	29:23	29:23	13	;
EXPR_STATEMENT	30:4	30:16	12	error = NULL ;
EXPR	30:4	30:4	13	error = NULL
ASSIGN	30:4	30:12	14	error = NULL
LVAL	30:4	30:4	15	error
FIELD	30:4	30:4	16	error
LEAF_NODE	30:4	30:4	17	error
ASSIGN_OP	30:10	30:10	15	=
LEAF_NODE	30:10	30:10	16	=
RVAL	30:12	30:12	15	NULL
FIELD	30:12	30:12	16	NULL
LEAF_NODE	30:12	30:12	17	NULL
LEAF_NODE	30:16	30:16	13	;
LEAF_NODE	31:3	31:3	11	}
SELECTION	32:3	33:3	9	
KEYWORD	32:3	32:3	10	else
LEAF_NODE	32:3	32:3	11	else
STATEMENTS	33:3	42:3	10	
LEAF_NODE	33:3	33:3	11	{
STATEMENTS	34:4	37:6	11	
SIMPLE_DECL	34:4	34:40	12	const char * keycode ; keycode = parse_key ( key ) ;
VAR_DECL	34:4	34:16	13	const char * keycode ; keycode = parse_key ( key )
TYPE	34:4	34:15	14	const char *
TYPE_NAME	34:4	34:10	15	const char
LEAF_NODE	34:4	34:4	16	const
LEAF_NODE	34:10	34:10	16	char
POINTER	34:15	34:15	15	*
LEAF_NODE	34:15	34:15	16	*
NAME	34:16	34:16	14	keycode
LEAF_NODE	34:16	34:16	15	keycode
LEAF_NODE	0:0	0:0	14	;
INIT	34:16	34:16	14	keycode = parse_key ( key )
ASSIGN	34:16	34:26	15	keycode = parse_key ( key )
LVAL	34:16	34:16	16	keycode
NAME	34:16	34:16	17	keycode
LEAF_NODE	34:16	34:16	18	keycode
ASSIGN_OP	34:24	34:24	16	=
LEAF_NODE	34:24	34:24	17	=
RVAL	34:26	34:26	16	parse_key ( key )
FUNCTION_CALL	34:26	34:39	17	parse_key ( key )
CALLEE	34:26	34:26	18	parse_key
LEAF_NODE	34:26	34:26	19	parse_key
LEAF_NODE	34:35	34:35	18	(
ARGUMENT	34:36	34:36	18	key
FIELD	34:36	34:36	19	key
LEAF_NODE	34:36	34:36	20	key
LEAF_NODE	34:39	34:39	18	)
LEAF_NODE	34:40	34:40	13	;
SELECTION	35:4	35:25	12	
KEYWORD	35:4	35:4	13	if
LEAF_NODE	35:4	35:4	14	if
LEAF_NODE	35:7	35:7	13	(
CONDITION	35:8	35:8	13	keycode == NULL
EXPR	35:8	35:19	14	keycode == NULL
FIELD	35:8	35:8	15	keycode
LEAF_NODE	35:8	35:8	16	keycode
EQ_OPERATOR	35:16	35:16	15	==
LEAF_NODE	35:16	35:16	16	==
FIELD	35:19	35:19	15	NULL
LEAF_NODE	35:19	35:19	16	NULL
LEAF_NODE	35:23	35:23	13	)
STATEMENTS	35:25	37:4	13	
LEAF_NODE	35:25	35:25	14	{
STATEMENTS	36:5	36:5	14	
EXPR_STATEMENT	36:5	36:47	15	gnt_warning ( "Invalid key-binding %s" , key ) ;
EXPR	36:5	36:5	16	gnt_warning ( "Invalid key-binding %s" , key )
FUNCTION_CALL	36:5	36:46	17	gnt_warning ( "Invalid key-binding %s" , key )
CALLEE	36:5	36:5	18	gnt_warning
LEAF_NODE	36:5	36:5	19	gnt_warning
LEAF_NODE	36:16	36:16	18	(
ARGUMENT	36:17	36:17	18	"Invalid key-binding %s"
FIELD	36:17	36:17	19	"Invalid key-binding %s"
LEAF_NODE	36:17	36:17	20	"Invalid key-binding %s"
LEAF_NODE	36:41	36:41	18	,
ARGUMENT	36:43	36:43	18	key
FIELD	36:43	36:43	19	key
LEAF_NODE	36:43	36:43	20	key
LEAF_NODE	36:46	36:46	18	)
LEAF_NODE	36:47	36:47	16	;
LEAF_NODE	37:4	37:4	14	}
SELECTION	37:6	37:11	12	
KEYWORD	37:6	37:6	13	else
LEAF_NODE	37:6	37:6	14	else
STATEMENTS	37:11	41:4	13	
LEAF_NODE	37:11	37:11	14	{
STATEMENTS	38:5	40:5	14	
EXPR_STATEMENT	38:5	38:15	15	ret = TRUE ;
EXPR	38:5	38:5	16	ret = TRUE
ASSIGN	38:5	38:11	17	ret = TRUE
LVAL	38:5	38:5	18	ret
FIELD	38:5	38:5	19	ret
LEAF_NODE	38:5	38:5	20	ret
ASSIGN_OP	38:9	38:9	18	=
LEAF_NODE	38:9	38:9	19	=
RVAL	38:11	38:11	18	TRUE
FIELD	38:11	38:11	19	TRUE
LEAF_NODE	38:11	38:11	20	TRUE
LEAF_NODE	38:15	38:15	16	;
EXPR_STATEMENT	39:5	39:59	15	g_hash_table_replace ( table , g_strdup ( keycode ) , menuid ) ;
EXPR	39:5	39:5	16	g_hash_table_replace ( table , g_strdup ( keycode ) , menuid )
FUNCTION_CALL	39:5	39:58	17	g_hash_table_replace ( table , g_strdup ( keycode ) , menuid )
CALLEE	39:5	39:5	18	g_hash_table_replace
LEAF_NODE	39:5	39:5	19	g_hash_table_replace
LEAF_NODE	39:25	39:25	18	(
ARGUMENT	39:26	39:26	18	table
FIELD	39:26	39:26	19	table
LEAF_NODE	39:26	39:26	20	table
LEAF_NODE	39:31	39:31	18	,
ARGUMENT	39:33	39:33	18	g_strdup ( keycode )
FUNCTION_CALL	39:33	39:49	19	g_strdup ( keycode )
CALLEE	39:33	39:33	20	g_strdup
LEAF_NODE	39:33	39:33	21	g_strdup
LEAF_NODE	39:41	39:41	20	(
ARGUMENT	39:42	39:42	20	keycode
FIELD	39:42	39:42	21	keycode
LEAF_NODE	39:42	39:42	22	keycode
LEAF_NODE	39:49	39:49	20	)
LEAF_NODE	39:50	39:50	18	,
ARGUMENT	39:52	39:52	18	menuid
FIELD	39:52	39:52	19	menuid
LEAF_NODE	39:52	39:52	20	menuid
LEAF_NODE	39:58	39:58	18	)
LEAF_NODE	39:59	39:59	16	;
EXPR_STATEMENT	40:5	40:18	15	menuid = NULL ;
EXPR	40:5	40:5	16	menuid = NULL
ASSIGN	40:5	40:14	17	menuid = NULL
LVAL	40:5	40:5	18	menuid
FIELD	40:5	40:5	19	menuid
LEAF_NODE	40:5	40:5	20	menuid
ASSIGN_OP	40:12	40:12	18	=
LEAF_NODE	40:12	40:12	19	=
RVAL	40:14	40:14	18	NULL
FIELD	40:14	40:14	19	NULL
LEAF_NODE	40:14	40:14	20	NULL
LEAF_NODE	40:18	40:18	16	;
LEAF_NODE	41:4	41:4	14	}
LEAF_NODE	42:3	42:3	11	}
EXPR_STATEMENT	43:3	43:14	9	g_free ( key ) ;
EXPR	43:3	43:3	10	g_free ( key )
FUNCTION_CALL	43:3	43:13	11	g_free ( key )
CALLEE	43:3	43:3	12	g_free
LEAF_NODE	43:3	43:3	13	g_free
LEAF_NODE	43:9	43:9	12	(
ARGUMENT	43:10	43:10	12	key
FIELD	43:10	43:10	13	key
LEAF_NODE	43:10	43:10	14	key
LEAF_NODE	43:13	43:13	12	)
LEAF_NODE	43:14	43:14	10	;
EXPR_STATEMENT	44:3	44:17	9	g_free ( menuid ) ;
EXPR	44:3	44:3	10	g_free ( menuid )
FUNCTION_CALL	44:3	44:16	11	g_free ( menuid )
CALLEE	44:3	44:3	12	g_free
LEAF_NODE	44:3	44:3	13	g_free
LEAF_NODE	44:9	44:9	12	(
ARGUMENT	44:10	44:10	12	menuid
FIELD	44:10	44:10	13	menuid
LEAF_NODE	44:10	44:10	14	menuid
LEAF_NODE	44:16	44:16	12	)
LEAF_NODE	44:17	44:17	10	;
LEAF_NODE	45:2	45:2	8	}
EXPR_STATEMENT	46:2	46:18	6	g_strfreev ( keys ) ;
EXPR	46:2	46:2	7	g_strfreev ( keys )
FUNCTION_CALL	46:2	46:17	8	g_strfreev ( keys )
CALLEE	46:2	46:2	9	g_strfreev
LEAF_NODE	46:2	46:2	10	g_strfreev
LEAF_NODE	46:12	46:12	9	(
ARGUMENT	46:13	46:13	9	keys
FIELD	46:13	46:13	10	keys
LEAF_NODE	46:13	46:13	11	keys
LEAF_NODE	46:17	46:17	9	)
LEAF_NODE	46:18	46:18	7	;
LEAF_NODE	47:1	47:1	5	}
EXPR_STATEMENT	48:1	48:14	3	g_free ( kname ) ;
EXPR	48:1	48:1	4	g_free ( kname )
FUNCTION_CALL	48:1	48:13	5	g_free ( kname )
CALLEE	48:1	48:1	6	g_free
LEAF_NODE	48:1	48:1	7	g_free
LEAF_NODE	48:7	48:7	6	(
ARGUMENT	48:8	48:8	6	kname
FIELD	48:8	48:8	7	kname
LEAF_NODE	48:8	48:8	8	kname
LEAF_NODE	48:13	48:13	6	)
LEAF_NODE	48:14	48:14	4	;
JUMP_STATEMENT	49:1	49:11	3	return ret ;
KEYWORD	49:1	49:1	4	return
LEAF_NODE	49:1	49:1	5	return
DESTINATION	49:8	49:8	4	ret
EXPR	49:8	49:8	5	ret
FIELD	49:8	49:8	6	ret
LEAF_NODE	49:8	49:8	7	ret
LEAF_NODE	49:11	49:11	4	;
JUMP_STATEMENT	51:1	51:13	3	return FALSE ;
KEYWORD	51:1	51:1	4	return
LEAF_NODE	51:1	51:1	5	return
DESTINATION	51:8	51:8	4	FALSE
EXPR	51:8	51:8	5	FALSE
FIELD	51:8	51:8	6	FALSE
LEAF_NODE	51:8	51:8	7	FALSE
LEAF_NODE	51:13	51:13	4	;
LEAF_NODE	52:0	52:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	27:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	check_for_buddynote
LEAF_NODE	2:0	2:0	3	check_for_buddynote
PARAMETER_LIST	2:19	2:33	2	( gpointer data )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:29	3	gpointer data
TYPE	2:20	2:20	4	gpointer
TYPE_NAME	2:20	2:20	5	gpointer
LEAF_NODE	2:20	2:20	6	gpointer
NAME	2:29	2:29	4	data
LEAF_NODE	2:29	2:29	5	data
LEAF_NODE	2:33	2:33	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	26:1	2	
SIMPLE_DECL	4:1	4:31	3	PurplePlugin * buddynote ; buddynote = NULL ;
VAR_DECL	4:1	4:15	4	PurplePlugin * buddynote ; buddynote = NULL
TYPE	4:1	4:14	5	PurplePlugin *
TYPE_NAME	4:1	4:1	6	PurplePlugin
LEAF_NODE	4:1	4:1	7	PurplePlugin
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	buddynote
LEAF_NODE	4:15	4:15	6	buddynote
LEAF_NODE	0:0	0:0	5	;
INIT	4:15	4:15	5	buddynote = NULL
ASSIGN	4:15	4:27	6	buddynote = NULL
LVAL	4:15	4:15	7	buddynote
NAME	4:15	4:15	8	buddynote
LEAF_NODE	4:15	4:15	9	buddynote
ASSIGN_OP	4:25	4:25	7	=
LEAF_NODE	4:25	4:25	8	=
RVAL	4:27	4:27	7	NULL
FIELD	4:27	4:27	8	NULL
LEAF_NODE	4:27	4:27	9	NULL
LEAF_NODE	4:31	4:31	4	;
SIMPLE_DECL	5:1	5:44	3	PurplePlugin * plugin ; plugin = ( PurplePlugin * ) data ;
VAR_DECL	5:1	5:15	4	PurplePlugin * plugin ; plugin = ( PurplePlugin * ) data
TYPE	5:1	5:14	5	PurplePlugin *
TYPE_NAME	5:1	5:1	6	PurplePlugin
LEAF_NODE	5:1	5:1	7	PurplePlugin
POINTER	5:14	5:14	6	*
LEAF_NODE	5:14	5:14	7	*
NAME	5:15	5:15	5	plugin
LEAF_NODE	5:15	5:15	6	plugin
LEAF_NODE	0:0	0:0	5	;
INIT	5:15	5:15	5	plugin = ( PurplePlugin * ) data
ASSIGN	5:15	5:24	6	plugin = ( PurplePlugin * ) data
LVAL	5:15	5:15	7	plugin
NAME	5:15	5:15	8	plugin
LEAF_NODE	5:15	5:15	9	plugin
ASSIGN_OP	5:22	5:22	7	=
LEAF_NODE	5:22	5:22	8	=
RVAL	5:24	5:40	7	( PurplePlugin * ) data
LEAF_NODE	5:24	5:24	8	(
TYPE_NAME	5:25	5:25	8	PurplePlugin
LEAF_NODE	5:25	5:25	9	PurplePlugin
LEAF_NODE	5:38	5:38	8	*
LEAF_NODE	5:39	5:39	8	)
FIELD	5:40	5:40	8	data
LEAF_NODE	5:40	5:40	9	data
LEAF_NODE	5:44	5:44	4	;
EXPR_STATEMENT	6:1	6:70	3	buddynote = purple_plugins_find_with_id ( "core-plugin_pack-buddynote" ) ;
EXPR	6:1	6:1	4	buddynote = purple_plugins_find_with_id ( "core-plugin_pack-buddynote" )
ASSIGN	6:1	6:13	5	buddynote = purple_plugins_find_with_id ( "core-plugin_pack-buddynote" )
LVAL	6:1	6:1	6	buddynote
FIELD	6:1	6:1	7	buddynote
LEAF_NODE	6:1	6:1	8	buddynote
ASSIGN_OP	6:11	6:11	6	=
LEAF_NODE	6:11	6:11	7	=
RVAL	6:13	6:13	6	purple_plugins_find_with_id ( "core-plugin_pack-buddynote" )
FUNCTION_CALL	6:13	6:69	7	purple_plugins_find_with_id ( "core-plugin_pack-buddynote" )
CALLEE	6:13	6:13	8	purple_plugins_find_with_id
LEAF_NODE	6:13	6:13	9	purple_plugins_find_with_id
LEAF_NODE	6:40	6:40	8	(
ARGUMENT	6:41	6:41	8	"core-plugin_pack-buddynote"
FIELD	6:41	6:41	9	"core-plugin_pack-buddynote"
LEAF_NODE	6:41	6:41	10	"core-plugin_pack-buddynote"
LEAF_NODE	6:69	6:69	8	)
LEAF_NODE	6:70	6:70	4	;
SELECTION	7:1	7:24	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	buddynote == NULL
EXPR	7:5	7:18	5	buddynote == NULL
FIELD	7:5	7:5	6	buddynote
LEAF_NODE	7:5	7:5	7	buddynote
EQ_OPERATOR	7:15	7:15	6	==
LEAF_NODE	7:15	7:15	7	==
FIELD	7:18	7:18	6	NULL
LEAF_NODE	7:18	7:18	7	NULL
LEAF_NODE	7:22	7:22	4	)
STATEMENTS	7:24	9:1	4	
LEAF_NODE	7:24	7:24	5	{
STATEMENTS	8:2	8:2	5	
EXPR_STATEMENT	8:2	8:60	6	buddynote = purple_plugins_find_with_basename ( "buddynote" ) ;
EXPR	8:2	8:2	7	buddynote = purple_plugins_find_with_basename ( "buddynote" )
ASSIGN	8:2	8:14	8	buddynote = purple_plugins_find_with_basename ( "buddynote" )
LVAL	8:2	8:2	9	buddynote
FIELD	8:2	8:2	10	buddynote
LEAF_NODE	8:2	8:2	11	buddynote
ASSIGN_OP	8:12	8:12	9	=
LEAF_NODE	8:12	8:12	10	=
RVAL	8:14	8:14	9	purple_plugins_find_with_basename ( "buddynote" )
FUNCTION_CALL	8:14	8:59	10	purple_plugins_find_with_basename ( "buddynote" )
CALLEE	8:14	8:14	11	purple_plugins_find_with_basename
LEAF_NODE	8:14	8:14	12	purple_plugins_find_with_basename
LEAF_NODE	8:47	8:47	11	(
ARGUMENT	8:48	8:48	11	"buddynote"
FIELD	8:48	8:48	12	"buddynote"
LEAF_NODE	8:48	8:48	13	"buddynote"
LEAF_NODE	8:59	8:59	11	)
LEAF_NODE	8:60	8:60	7	;
LEAF_NODE	9:1	9:1	5	}
SELECTION	10:1	10:24	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	buddynote != NULL
EXPR	10:5	10:18	5	buddynote != NULL
FIELD	10:5	10:5	6	buddynote
LEAF_NODE	10:5	10:5	7	buddynote
EQ_OPERATOR	10:15	10:15	6	!=
LEAF_NODE	10:15	10:15	7	!=
FIELD	10:18	10:18	6	NULL
LEAF_NODE	10:18	10:18	7	NULL
LEAF_NODE	10:22	10:22	4	)
STATEMENTS	10:24	23:1	4	
LEAF_NODE	10:24	10:24	5	{
STATEMENTS	11:2	18:2	5	
SIMPLE_DECL	11:2	11:44	6	PurplePluginInfo * bninfo ; bninfo = buddynote -> info ;
VAR_DECL	11:2	11:20	7	PurplePluginInfo * bninfo ; bninfo = buddynote -> info
TYPE	11:2	11:19	8	PurplePluginInfo *
TYPE_NAME	11:2	11:2	9	PurplePluginInfo
LEAF_NODE	11:2	11:2	10	PurplePluginInfo
POINTER	11:19	11:19	9	*
LEAF_NODE	11:19	11:19	10	*
NAME	11:20	11:20	8	bninfo
LEAF_NODE	11:20	11:20	9	bninfo
LEAF_NODE	0:0	0:0	8	;
INIT	11:20	11:20	8	bninfo = buddynote -> info
ASSIGN	11:20	11:29	9	bninfo = buddynote -> info
LVAL	11:20	11:20	10	bninfo
NAME	11:20	11:20	11	bninfo
LEAF_NODE	11:20	11:20	12	bninfo
ASSIGN_OP	11:27	11:27	10	=
LEAF_NODE	11:27	11:27	11	=
RVAL	11:29	11:29	10	buddynote -> info
FIELD	11:29	11:40	11	buddynote -> info
LEAF_NODE	11:29	11:29	12	buddynote
LEAF_NODE	11:38	11:38	12	->
LEAF_NODE	11:40	11:40	12	info
LEAF_NODE	11:44	11:44	7	;
EXPR_STATEMENT	12:2	12:46	6	bninfo -> flags = PURPLE_PLUGIN_FLAG_INVISIBLE ;
EXPR	12:2	12:2	7	bninfo -> flags = PURPLE_PLUGIN_FLAG_INVISIBLE
ASSIGN	12:2	12:18	8	bninfo -> flags = PURPLE_PLUGIN_FLAG_INVISIBLE
LVAL	12:2	12:2	9	bninfo -> flags
FIELD	12:2	12:10	10	bninfo -> flags
LEAF_NODE	12:2	12:2	11	bninfo
LEAF_NODE	12:8	12:8	11	->
LEAF_NODE	12:10	12:10	11	flags
ASSIGN_OP	12:16	12:16	9	=
LEAF_NODE	12:16	12:16	10	=
RVAL	12:18	12:18	9	PURPLE_PLUGIN_FLAG_INVISIBLE
FIELD	12:18	12:18	10	PURPLE_PLUGIN_FLAG_INVISIBLE
LEAF_NODE	12:18	12:18	11	PURPLE_PLUGIN_FLAG_INVISIBLE
LEAF_NODE	12:46	12:46	7	;
SELECTION	18:2	19:40	6	
KEYWORD	18:2	18:2	7	if
LEAF_NODE	18:2	18:2	8	if
LEAF_NODE	18:5	18:5	7	(
CONDITION	18:6	18:6	7	purple_plugin_is_loaded ( buddynote ) && ! purple_plugin_is_loaded ( plugin )
EXPR	18:6	18:6	8	purple_plugin_is_loaded ( buddynote ) && ! purple_plugin_is_loaded ( plugin )
AND	18:6	19:6	9	purple_plugin_is_loaded ( buddynote ) && ! purple_plugin_is_loaded ( plugin )
EXPR	18:6	18:6	10	purple_plugin_is_loaded ( buddynote )
FUNCTION_CALL	18:6	18:39	11	purple_plugin_is_loaded ( buddynote )
CALLEE	18:6	18:6	12	purple_plugin_is_loaded
LEAF_NODE	18:6	18:6	13	purple_plugin_is_loaded
LEAF_NODE	18:29	18:29	12	(
ARGUMENT	18:30	18:30	12	buddynote
FIELD	18:30	18:30	13	buddynote
LEAF_NODE	18:30	18:30	14	buddynote
LEAF_NODE	18:39	18:39	12	)
LEAF_NODE	18:41	18:41	10	&&
EXPR	19:6	19:6	10	! purple_plugin_is_loaded ( plugin )
UNARY_EXPR	19:6	19:7	11	! purple_plugin_is_loaded ( plugin )
UNARY_OPERATOR	19:6	19:6	12	!
LEAF_NODE	19:6	19:6	13	!
FUNCTION_CALL	19:7	19:37	12	purple_plugin_is_loaded ( plugin )
CALLEE	19:7	19:7	13	purple_plugin_is_loaded
LEAF_NODE	19:7	19:7	14	purple_plugin_is_loaded
LEAF_NODE	19:30	19:30	13	(
ARGUMENT	19:31	19:31	13	plugin
FIELD	19:31	19:31	14	plugin
LEAF_NODE	19:31	19:31	15	plugin
LEAF_NODE	19:37	19:37	13	)
LEAF_NODE	19:38	19:38	7	)
STATEMENTS	19:40	22:2	7	
LEAF_NODE	19:40	19:40	8	{
STATEMENTS	20:3	21:3	8	
EXPR_STATEMENT	20:3	20:29	9	purple_plugin_load ( plugin ) ;
EXPR	20:3	20:3	10	purple_plugin_load ( plugin )
FUNCTION_CALL	20:3	20:28	11	purple_plugin_load ( plugin )
CALLEE	20:3	20:3	12	purple_plugin_load
LEAF_NODE	20:3	20:3	13	purple_plugin_load
LEAF_NODE	20:21	20:21	12	(
ARGUMENT	20:22	20:22	12	plugin
FIELD	20:22	20:22	13	plugin
LEAF_NODE	20:22	20:22	14	plugin
LEAF_NODE	20:28	20:28	12	)
LEAF_NODE	20:29	20:29	10	;
EXPR_STATEMENT	21:3	21:24	9	pidgin_plugins_save ( ) ;
EXPR	21:3	21:3	10	pidgin_plugins_save ( )
FUNCTION_CALL	21:3	21:23	11	pidgin_plugins_save ( )
CALLEE	21:3	21:3	12	pidgin_plugins_save
LEAF_NODE	21:3	21:3	13	pidgin_plugins_save
LEAF_NODE	21:22	21:22	12	(
LEAF_NODE	21:23	21:23	12	)
LEAF_NODE	21:24	21:24	10	;
LEAF_NODE	22:2	22:2	8	}
LEAF_NODE	23:1	23:1	5	}
SELECTION	23:3	23:8	3	
KEYWORD	23:3	23:3	4	else
LEAF_NODE	23:3	23:3	5	else
STATEMENTS	23:8	25:1	4	
LEAF_NODE	23:8	23:8	5	{
STATEMENTS	24:2	24:2	5	
EXPR_STATEMENT	24:2	24:43	6	info . flags = PURPLE_PLUGIN_FLAG_INVISIBLE ;
EXPR	24:2	24:2	7	info . flags = PURPLE_PLUGIN_FLAG_INVISIBLE
ASSIGN	24:2	24:15	8	info . flags = PURPLE_PLUGIN_FLAG_INVISIBLE
LVAL	24:2	24:2	9	info . flags
FIELD	24:2	24:7	10	info . flags
LEAF_NODE	24:2	24:2	11	info
LEAF_NODE	24:6	24:6	11	.
LEAF_NODE	24:7	24:7	11	flags
ASSIGN_OP	24:13	24:13	9	=
LEAF_NODE	24:13	24:13	10	=
RVAL	24:15	24:15	9	PURPLE_PLUGIN_FLAG_INVISIBLE
FIELD	24:15	24:15	10	PURPLE_PLUGIN_FLAG_INVISIBLE
LEAF_NODE	24:15	24:15	11	PURPLE_PLUGIN_FLAG_INVISIBLE
LEAF_NODE	24:43	24:43	7	;
LEAF_NODE	25:1	25:1	5	}
JUMP_STATEMENT	26:1	26:13	3	return FALSE ;
KEYWORD	26:1	26:1	4	return
LEAF_NODE	26:1	26:1	5	return
DESTINATION	26:8	26:8	4	FALSE
EXPR	26:8	26:8	5	FALSE
FIELD	26:8	26:8	6	FALSE
LEAF_NODE	26:8	26:8	7	FALSE
LEAF_NODE	26:13	26:13	4	;
LEAF_NODE	27:0	27:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	19:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	row_activated_cb
LEAF_NODE	2:12	2:12	3	row_activated_cb
PARAMETER_LIST	2:28	3:42	2	( GtkTreeView * tv , GtkTreePath * path , GtkTreeViewColumn * arg2 , PurpleRoomlist * list )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:42	3	GtkTreeView * tv
TYPE	2:29	2:41	4	GtkTreeView *
TYPE_NAME	2:29	2:29	5	GtkTreeView
LEAF_NODE	2:29	2:29	6	GtkTreeView
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	tv
LEAF_NODE	2:42	2:42	5	tv
LEAF_NODE	2:44	2:44	3	,
PARAMETER_DECL	2:46	2:59	3	GtkTreePath * path
TYPE	2:46	2:58	4	GtkTreePath *
TYPE_NAME	2:46	2:46	5	GtkTreePath
LEAF_NODE	2:46	2:46	6	GtkTreePath
POINTER	2:58	2:58	5	*
LEAF_NODE	2:58	2:58	6	*
NAME	2:59	2:59	4	path
LEAF_NODE	2:59	2:59	5	path
LEAF_NODE	2:63	2:63	3	,
PARAMETER_DECL	2:65	2:84	3	GtkTreeViewColumn * arg2
TYPE	2:65	2:83	4	GtkTreeViewColumn *
TYPE_NAME	2:65	2:65	5	GtkTreeViewColumn
LEAF_NODE	2:65	2:65	6	GtkTreeViewColumn
POINTER	2:83	2:83	5	*
LEAF_NODE	2:83	2:83	6	*
NAME	2:84	2:84	4	arg2
LEAF_NODE	2:84	2:84	5	arg2
LEAF_NODE	2:88	2:88	3	,
PARAMETER_DECL	3:22	3:38	3	PurpleRoomlist * list
TYPE	3:22	3:37	4	PurpleRoomlist *
TYPE_NAME	3:22	3:22	5	PurpleRoomlist
LEAF_NODE	3:22	3:22	6	PurpleRoomlist
POINTER	3:37	3:37	5	*
LEAF_NODE	3:37	3:37	6	*
NAME	3:38	3:38	4	list
LEAF_NODE	3:38	3:38	5	list
LEAF_NODE	3:42	3:42	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	18:1	2	
SIMPLE_DECL	5:1	5:36	3	PidginRoomlist * grl ; grl = list -> ui_data ;
VAR_DECL	5:1	5:17	4	PidginRoomlist * grl ; grl = list -> ui_data
TYPE	5:1	5:16	5	PidginRoomlist *
TYPE_NAME	5:1	5:1	6	PidginRoomlist
LEAF_NODE	5:1	5:1	7	PidginRoomlist
POINTER	5:16	5:16	6	*
LEAF_NODE	5:16	5:16	7	*
NAME	5:17	5:17	5	grl
LEAF_NODE	5:17	5:17	6	grl
LEAF_NODE	0:0	0:0	5	;
INIT	5:17	5:17	5	grl = list -> ui_data
ASSIGN	5:17	5:23	6	grl = list -> ui_data
LVAL	5:17	5:17	7	grl
NAME	5:17	5:17	8	grl
LEAF_NODE	5:17	5:17	9	grl
ASSIGN_OP	5:21	5:21	7	=
LEAF_NODE	5:21	5:21	8	=
RVAL	5:23	5:23	7	list -> ui_data
FIELD	5:23	5:29	8	list -> ui_data
LEAF_NODE	5:23	5:23	9	list
LEAF_NODE	5:27	5:27	9	->
LEAF_NODE	5:29	5:29	9	ui_data
LEAF_NODE	5:36	5:36	4	;
SIMPLE_DECL	6:1	6:17	3	GtkTreeIter iter ;
VAR_DECL	6:1	6:13	4	GtkTreeIter iter
TYPE	6:1	6:1	5	GtkTreeIter
TYPE_NAME	6:1	6:1	6	GtkTreeIter
LEAF_NODE	6:1	6:1	7	GtkTreeIter
NAME	6:13	6:13	5	iter
LEAF_NODE	6:13	6:13	6	iter
LEAF_NODE	6:17	6:17	4	;
SIMPLE_DECL	7:1	7:25	3	PurpleRoomlistRoom * room ;
VAR_DECL	7:1	7:21	4	PurpleRoomlistRoom * room
TYPE	7:1	7:20	5	PurpleRoomlistRoom *
TYPE_NAME	7:1	7:1	6	PurpleRoomlistRoom
LEAF_NODE	7:1	7:1	7	PurpleRoomlistRoom
POINTER	7:20	7:20	6	*
LEAF_NODE	7:20	7:20	7	*
NAME	7:21	7:21	5	room
LEAF_NODE	7:21	7:21	6	room
LEAF_NODE	7:25	7:25	4	;
SIMPLE_DECL	8:1	8:11	3	GValue val ;
VAR_DECL	8:1	8:8	4	GValue val
TYPE	8:1	8:1	5	GValue
TYPE_NAME	8:1	8:1	6	GValue
LEAF_NODE	8:1	8:1	7	GValue
NAME	8:8	8:8	5	val
LEAF_NODE	8:8	8:8	6	val
LEAF_NODE	8:11	8:11	4	;
SIMPLE_DECL	9:1	9:26	3	struct _menu_cb_info info ;
VAR_DECL	9:1	9:22	4	struct _menu_cb_info info
TYPE	9:1	9:1	5	struct _menu_cb_info
TYPE_NAME	9:1	9:8	6	struct _menu_cb_info
LEAF_NODE	9:1	9:1	7	struct
LEAF_NODE	9:8	9:8	7	_menu_cb_info
NAME	9:22	9:22	5	info
LEAF_NODE	9:22	9:22	6	info
LEAF_NODE	9:26	9:26	4	;
EXPR_STATEMENT	10:1	10:65	3	gtk_tree_model_get_iter ( GTK_TREE_MODEL ( grl -> model ) , & iter , path ) ;
EXPR	10:1	10:1	4	gtk_tree_model_get_iter ( GTK_TREE_MODEL ( grl -> model ) , & iter , path )
FUNCTION_CALL	10:1	10:64	5	gtk_tree_model_get_iter ( GTK_TREE_MODEL ( grl -> model ) , & iter , path )
CALLEE	10:1	10:1	6	gtk_tree_model_get_iter
LEAF_NODE	10:1	10:1	7	gtk_tree_model_get_iter
LEAF_NODE	10:24	10:24	6	(
ARGUMENT	10:25	10:25	6	GTK_TREE_MODEL ( grl -> model )
FUNCTION_CALL	10:25	10:50	7	GTK_TREE_MODEL ( grl -> model )
CALLEE	10:25	10:25	8	GTK_TREE_MODEL
LEAF_NODE	10:25	10:25	9	GTK_TREE_MODEL
LEAF_NODE	10:39	10:39	8	(
ARGUMENT	10:40	10:40	8	grl -> model
FIELD	10:40	10:45	9	grl -> model
LEAF_NODE	10:40	10:40	10	grl
LEAF_NODE	10:43	10:43	10	->
LEAF_NODE	10:45	10:45	10	model
LEAF_NODE	10:50	10:50	8	)
LEAF_NODE	10:51	10:51	6	,
ARGUMENT	10:53	10:53	6	& iter
UNARY_EXPR	10:53	10:54	7	& iter
UNARY_OPERATOR	10:53	10:53	8	&
LEAF_NODE	10:53	10:53	9	&
FIELD	10:54	10:54	8	iter
LEAF_NODE	10:54	10:54	9	iter
LEAF_NODE	10:58	10:58	6	,
ARGUMENT	10:60	10:60	6	path
FIELD	10:60	10:60	7	path
LEAF_NODE	10:60	10:60	8	path
LEAF_NODE	10:64	10:64	6	)
LEAF_NODE	10:65	10:65	4	;
EXPR_STATEMENT	11:1	11:15	3	val . g_type = 0 ;
EXPR	11:1	11:1	4	val . g_type = 0
ASSIGN	11:1	11:14	5	val . g_type = 0
LVAL	11:1	11:1	6	val . g_type
FIELD	11:1	11:5	7	val . g_type
LEAF_NODE	11:1	11:1	8	val
LEAF_NODE	11:4	11:4	8	.
LEAF_NODE	11:5	11:5	8	g_type
ASSIGN_OP	11:12	11:12	6	=
LEAF_NODE	11:12	11:12	7	=
RVAL	11:14	11:14	6	0
FIELD	11:14	11:14	7	0
LEAF_NODE	11:14	11:14	8	0
LEAF_NODE	11:15	11:15	4	;
EXPR_STATEMENT	12:1	12:79	3	gtk_tree_model_get_value ( GTK_TREE_MODEL ( grl -> model ) , & iter , ROOM_COLUMN , & val ) ;
EXPR	12:1	12:1	4	gtk_tree_model_get_value ( GTK_TREE_MODEL ( grl -> model ) , & iter , ROOM_COLUMN , & val )
FUNCTION_CALL	12:1	12:78	5	gtk_tree_model_get_value ( GTK_TREE_MODEL ( grl -> model ) , & iter , ROOM_COLUMN , & val )
CALLEE	12:1	12:1	6	gtk_tree_model_get_value
LEAF_NODE	12:1	12:1	7	gtk_tree_model_get_value
LEAF_NODE	12:25	12:25	6	(
ARGUMENT	12:26	12:26	6	GTK_TREE_MODEL ( grl -> model )
FUNCTION_CALL	12:26	12:51	7	GTK_TREE_MODEL ( grl -> model )
CALLEE	12:26	12:26	8	GTK_TREE_MODEL
LEAF_NODE	12:26	12:26	9	GTK_TREE_MODEL
LEAF_NODE	12:40	12:40	8	(
ARGUMENT	12:41	12:41	8	grl -> model
FIELD	12:41	12:46	9	grl -> model
LEAF_NODE	12:41	12:41	10	grl
LEAF_NODE	12:44	12:44	10	->
LEAF_NODE	12:46	12:46	10	model
LEAF_NODE	12:51	12:51	8	)
LEAF_NODE	12:52	12:52	6	,
ARGUMENT	12:54	12:54	6	& iter
UNARY_EXPR	12:54	12:55	7	& iter
UNARY_OPERATOR	12:54	12:54	8	&
LEAF_NODE	12:54	12:54	9	&
FIELD	12:55	12:55	8	iter
LEAF_NODE	12:55	12:55	9	iter
LEAF_NODE	12:59	12:59	6	,
ARGUMENT	12:61	12:61	6	ROOM_COLUMN
FIELD	12:61	12:61	7	ROOM_COLUMN
LEAF_NODE	12:61	12:61	8	ROOM_COLUMN
LEAF_NODE	12:72	12:72	6	,
ARGUMENT	12:74	12:74	6	& val
UNARY_EXPR	12:74	12:75	7	& val
UNARY_OPERATOR	12:74	12:74	8	&
LEAF_NODE	12:74	12:74	9	&
FIELD	12:75	12:75	8	val
LEAF_NODE	12:75	12:75	9	val
LEAF_NODE	12:78	12:78	6	)
LEAF_NODE	12:79	12:79	4	;
EXPR_STATEMENT	13:1	13:33	3	room = g_value_get_pointer ( & val ) ;
EXPR	13:1	13:1	4	room = g_value_get_pointer ( & val )
ASSIGN	13:1	13:8	5	room = g_value_get_pointer ( & val )
LVAL	13:1	13:1	6	room
FIELD	13:1	13:1	7	room
LEAF_NODE	13:1	13:1	8	room
ASSIGN_OP	13:6	13:6	6	=
LEAF_NODE	13:6	13:6	7	=
RVAL	13:8	13:8	6	g_value_get_pointer ( & val )
FUNCTION_CALL	13:8	13:32	7	g_value_get_pointer ( & val )
CALLEE	13:8	13:8	8	g_value_get_pointer
LEAF_NODE	13:8	13:8	9	g_value_get_pointer
LEAF_NODE	13:27	13:27	8	(
ARGUMENT	13:28	13:28	8	& val
UNARY_EXPR	13:28	13:29	9	& val
UNARY_OPERATOR	13:28	13:28	10	&
LEAF_NODE	13:28	13:28	11	&
FIELD	13:29	13:29	10	val
LEAF_NODE	13:29	13:29	11	val
LEAF_NODE	13:32	13:32	8	)
LEAF_NODE	13:33	13:33	4	;
SELECTION	14:1	15:2	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	! room || ! ( room -> type & PURPLE_ROOMLIST_ROOMTYPE_ROOM )
EXPR	14:5	14:5	5	! room || ! ( room -> type & PURPLE_ROOMLIST_ROOMTYPE_ROOM )
OR	14:5	14:14	6	! room || ! ( room -> type & PURPLE_ROOMLIST_ROOMTYPE_ROOM )
EXPR	14:5	14:5	7	! room
UNARY_EXPR	14:5	14:6	8	! room
UNARY_OPERATOR	14:5	14:5	9	!
LEAF_NODE	14:5	14:5	10	!
FIELD	14:6	14:6	9	room
LEAF_NODE	14:6	14:6	10	room
LEAF_NODE	14:11	14:11	7	||
EXPR	14:14	14:14	7	! ( room -> type & PURPLE_ROOMLIST_ROOMTYPE_ROOM )
UNARY_EXPR	14:14	14:58	8	! ( room -> type & PURPLE_ROOMLIST_ROOMTYPE_ROOM )
UNARY_OPERATOR	14:14	14:14	9	!
LEAF_NODE	14:14	14:14	10	!
LEAF_NODE	14:15	14:15	9	(
FIELD	14:16	14:22	9	room -> type
LEAF_NODE	14:16	14:16	10	room
LEAF_NODE	14:20	14:20	10	->
LEAF_NODE	14:22	14:22	10	type
LEAF_NODE	14:27	14:27	9	&
FIELD	14:29	14:29	9	PURPLE_ROOMLIST_ROOMTYPE_ROOM
LEAF_NODE	14:29	14:29	10	PURPLE_ROOMLIST_ROOMTYPE_ROOM
LEAF_NODE	14:58	14:58	9	)
LEAF_NODE	14:59	14:59	4	)
STATEMENTS	15:2	15:2	4	
JUMP_STATEMENT	15:2	15:8	5	return DESTINATION ;
KEYWORD	15:2	15:2	6	return
LEAF_NODE	15:2	15:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	15:8	15:8	6	;
EXPR_STATEMENT	16:1	16:17	3	info . list = list ;
EXPR	16:1	16:1	4	info . list = list
ASSIGN	16:1	16:13	5	info . list = list
LVAL	16:1	16:1	6	info . list
FIELD	16:1	16:6	7	info . list
LEAF_NODE	16:1	16:1	8	info
LEAF_NODE	16:5	16:5	8	.
LEAF_NODE	16:6	16:6	8	list
ASSIGN_OP	16:11	16:11	6	=
LEAF_NODE	16:11	16:11	7	=
RVAL	16:13	16:13	6	list
FIELD	16:13	16:13	7	list
LEAF_NODE	16:13	16:13	8	list
LEAF_NODE	16:17	16:17	4	;
EXPR_STATEMENT	17:1	17:17	3	info . room = room ;
EXPR	17:1	17:1	4	info . room = room
ASSIGN	17:1	17:13	5	info . room = room
LVAL	17:1	17:1	6	info . room
FIELD	17:1	17:6	7	info . room
LEAF_NODE	17:1	17:1	8	info
LEAF_NODE	17:5	17:5	8	.
LEAF_NODE	17:6	17:6	8	room
ASSIGN_OP	17:11	17:11	6	=
LEAF_NODE	17:11	17:11	7	=
RVAL	17:13	17:13	6	room
FIELD	17:13	17:13	7	room
LEAF_NODE	17:13	17:13	8	room
LEAF_NODE	17:17	17:17	4	;
EXPR_STATEMENT	18:1	18:34	3	do_join_cb ( GTK_WIDGET ( tv ) , & info ) ;
EXPR	18:1	18:1	4	do_join_cb ( GTK_WIDGET ( tv ) , & info )
FUNCTION_CALL	18:1	18:33	5	do_join_cb ( GTK_WIDGET ( tv ) , & info )
CALLEE	18:1	18:1	6	do_join_cb
LEAF_NODE	18:1	18:1	7	do_join_cb
LEAF_NODE	18:11	18:11	6	(
ARGUMENT	18:12	18:12	6	GTK_WIDGET ( tv )
FUNCTION_CALL	18:12	18:25	7	GTK_WIDGET ( tv )
CALLEE	18:12	18:12	8	GTK_WIDGET
LEAF_NODE	18:12	18:12	9	GTK_WIDGET
LEAF_NODE	18:22	18:22	8	(
ARGUMENT	18:23	18:23	8	tv
FIELD	18:23	18:23	9	tv
LEAF_NODE	18:23	18:23	10	tv
LEAF_NODE	18:25	18:25	8	)
LEAF_NODE	18:26	18:26	6	,
ARGUMENT	18:28	18:28	6	& info
UNARY_EXPR	18:28	18:29	7	& info
UNARY_OPERATOR	18:28	18:28	8	&
LEAF_NODE	18:28	18:28	9	&
FIELD	18:29	18:29	8	info
LEAF_NODE	18:29	18:29	9	info
LEAF_NODE	18:33	18:33	6	)
LEAF_NODE	18:34	18:34	4	;
LEAF_NODE	19:0	19:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	18:0	1	
RETURN_TYPE	1:0	1:0	2	int
TYPE_NAME	1:0	1:0	3	int
LEAF_NODE	1:0	1:0	4	int
FUNCTION_NAME	2:0	2:0	2	purple_imgstore_add_with_id
LEAF_NODE	2:0	2:0	3	purple_imgstore_add_with_id
PARAMETER_LIST	2:27	2:76	2	( gpointer data , size_t size , const char * filename )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:37	3	gpointer data
TYPE	2:28	2:28	4	gpointer
TYPE_NAME	2:28	2:28	5	gpointer
LEAF_NODE	2:28	2:28	6	gpointer
NAME	2:37	2:37	4	data
LEAF_NODE	2:37	2:37	5	data
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:50	3	size_t size
TYPE	2:43	2:43	4	size_t
TYPE_NAME	2:43	2:43	5	size_t
LEAF_NODE	2:43	2:43	6	size_t
NAME	2:50	2:50	4	size
LEAF_NODE	2:50	2:50	5	size
LEAF_NODE	2:54	2:54	3	,
PARAMETER_DECL	2:56	2:68	3	const char * filename
TYPE	2:56	2:67	4	const char *
TYPE_NAME	2:56	2:62	5	const char
LEAF_NODE	2:56	2:56	6	const
LEAF_NODE	2:62	2:62	6	char
POINTER	2:67	2:67	5	*
LEAF_NODE	2:67	2:67	6	*
NAME	2:68	2:68	4	filename
LEAF_NODE	2:68	2:68	5	filename
LEAF_NODE	2:76	2:76	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	17:1	2	
SIMPLE_DECL	4:1	4:67	3	PurpleStoredImage * img ; img = purple_imgstore_add ( data , size , filename ) ;
VAR_DECL	4:1	4:20	4	PurpleStoredImage * img ; img = purple_imgstore_add ( data , size , filename )
TYPE	4:1	4:19	5	PurpleStoredImage *
TYPE_NAME	4:1	4:1	6	PurpleStoredImage
LEAF_NODE	4:1	4:1	7	PurpleStoredImage
POINTER	4:19	4:19	6	*
LEAF_NODE	4:19	4:19	7	*
NAME	4:20	4:20	5	img
LEAF_NODE	4:20	4:20	6	img
LEAF_NODE	0:0	0:0	5	;
INIT	4:20	4:20	5	img = purple_imgstore_add ( data , size , filename )
ASSIGN	4:20	4:26	6	img = purple_imgstore_add ( data , size , filename )
LVAL	4:20	4:20	7	img
NAME	4:20	4:20	8	img
LEAF_NODE	4:20	4:20	9	img
ASSIGN_OP	4:24	4:24	7	=
LEAF_NODE	4:24	4:24	8	=
RVAL	4:26	4:26	7	purple_imgstore_add ( data , size , filename )
FUNCTION_CALL	4:26	4:66	8	purple_imgstore_add ( data , size , filename )
CALLEE	4:26	4:26	9	purple_imgstore_add
LEAF_NODE	4:26	4:26	10	purple_imgstore_add
LEAF_NODE	4:45	4:45	9	(
ARGUMENT	4:46	4:46	9	data
FIELD	4:46	4:46	10	data
LEAF_NODE	4:46	4:46	11	data
LEAF_NODE	4:50	4:50	9	,
ARGUMENT	4:52	4:52	9	size
FIELD	4:52	4:52	10	size
LEAF_NODE	4:52	4:52	11	size
LEAF_NODE	4:56	4:56	9	,
ARGUMENT	4:58	4:58	9	filename
FIELD	4:58	4:58	10	filename
LEAF_NODE	4:58	4:58	11	filename
LEAF_NODE	4:66	4:66	9	)
LEAF_NODE	4:67	4:67	4	;
SELECTION	5:1	5:11	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	! img
EXPR	5:5	5:5	5	! img
UNARY_EXPR	5:5	5:6	6	! img
UNARY_OPERATOR	5:5	5:5	7	!
LEAF_NODE	5:5	5:5	8	!
FIELD	5:6	5:6	7	img
LEAF_NODE	5:6	5:6	8	img
LEAF_NODE	5:9	5:9	4	)
STATEMENTS	5:11	7:1	4	
LEAF_NODE	5:11	5:11	5	{
STATEMENTS	6:2	6:2	5	
JUMP_STATEMENT	6:2	6:10	6	return 0 ;
KEYWORD	6:2	6:2	7	return
LEAF_NODE	6:2	6:2	8	return
DESTINATION	6:9	6:9	7	0
EXPR	6:9	6:9	8	0
FIELD	6:9	6:9	9	0
LEAF_NODE	6:9	6:9	10	0
LEAF_NODE	6:10	6:10	7	;
LEAF_NODE	7:1	7:1	5	}
ITERATION	13:1	13:4	3	
KEYWORD	13:1	13:1	4	do
LEAF_NODE	13:1	13:1	5	do
LEAF_NODE	15:9	15:9	4	(
CONDITION	15:10	15:10	4	img -> id == 0 || g_hash_table_lookup ( imgstore , & ( img -> id ) ) != NULL
EXPR	15:10	15:10	5	img -> id == 0 || g_hash_table_lookup ( imgstore , & ( img -> id ) ) != NULL
OR	15:10	15:26	6	img -> id == 0 || g_hash_table_lookup ( imgstore , & ( img -> id ) ) != NULL
EXPR	15:10	15:21	7	img -> id == 0
FIELD	15:10	15:15	8	img -> id
LEAF_NODE	15:10	15:10	9	img
LEAF_NODE	15:13	15:13	9	->
LEAF_NODE	15:15	15:15	9	id
EQ_OPERATOR	15:18	15:18	8	==
LEAF_NODE	15:18	15:18	9	==
FIELD	15:21	15:21	8	0
LEAF_NODE	15:21	15:21	9	0
LEAF_NODE	15:23	15:23	7	||
EXPR	15:26	15:71	7	g_hash_table_lookup ( imgstore , & ( img -> id ) ) != NULL
FUNCTION_CALL	15:26	15:66	8	g_hash_table_lookup ( imgstore , & ( img -> id ) )
CALLEE	15:26	15:26	9	g_hash_table_lookup
LEAF_NODE	15:26	15:26	10	g_hash_table_lookup
LEAF_NODE	15:45	15:45	9	(
ARGUMENT	15:46	15:46	9	imgstore
FIELD	15:46	15:46	10	imgstore
LEAF_NODE	15:46	15:46	11	imgstore
LEAF_NODE	15:54	15:54	9	,
ARGUMENT	15:56	15:56	9	& ( img -> id )
UNARY_EXPR	15:56	15:65	10	& ( img -> id )
UNARY_OPERATOR	15:56	15:56	11	&
LEAF_NODE	15:56	15:56	12	&
LEAF_NODE	15:57	15:57	11	(
FIELD	15:58	15:63	11	img -> id
LEAF_NODE	15:58	15:58	12	img
LEAF_NODE	15:61	15:61	12	->
LEAF_NODE	15:63	15:63	12	id
LEAF_NODE	15:65	15:65	11	)
LEAF_NODE	15:66	15:66	9	)
EQ_OPERATOR	15:68	15:68	8	!=
LEAF_NODE	15:68	15:68	9	!=
FIELD	15:71	15:71	8	NULL
LEAF_NODE	15:71	15:71	9	NULL
LEAF_NODE	15:75	15:75	4	)
STATEMENTS	13:4	15:1	4	
LEAF_NODE	13:4	13:4	5	{
STATEMENTS	14:2	14:2	5	
EXPR_STATEMENT	14:2	14:20	6	img -> id = ++ nextid ;
EXPR	14:2	14:2	7	img -> id = ++ nextid
ASSIGN	14:2	14:12	8	img -> id = ++ nextid
LVAL	14:2	14:2	9	img -> id
FIELD	14:2	14:7	10	img -> id
LEAF_NODE	14:2	14:2	11	img
LEAF_NODE	14:5	14:5	11	->
LEAF_NODE	14:7	14:7	11	id
ASSIGN_OP	14:10	14:10	9	=
LEAF_NODE	14:10	14:10	10	=
RVAL	14:12	14:14	9	++ nextid
LEAF_NODE	14:12	14:12	10	++
FIELD	14:14	14:14	10	nextid
LEAF_NODE	14:14	14:14	11	nextid
LEAF_NODE	14:20	14:20	7	;
LEAF_NODE	15:1	15:1	5	}
LEAF_NODE	15:76	15:76	3	;
EXPR_STATEMENT	16:1	16:47	3	g_hash_table_insert ( imgstore , & ( img -> id ) , img ) ;
EXPR	16:1	16:1	4	g_hash_table_insert ( imgstore , & ( img -> id ) , img )
FUNCTION_CALL	16:1	16:46	5	g_hash_table_insert ( imgstore , & ( img -> id ) , img )
CALLEE	16:1	16:1	6	g_hash_table_insert
LEAF_NODE	16:1	16:1	7	g_hash_table_insert
LEAF_NODE	16:20	16:20	6	(
ARGUMENT	16:21	16:21	6	imgstore
FIELD	16:21	16:21	7	imgstore
LEAF_NODE	16:21	16:21	8	imgstore
LEAF_NODE	16:29	16:29	6	,
ARGUMENT	16:31	16:31	6	& ( img -> id )
UNARY_EXPR	16:31	16:40	7	& ( img -> id )
UNARY_OPERATOR	16:31	16:31	8	&
LEAF_NODE	16:31	16:31	9	&
LEAF_NODE	16:32	16:32	8	(
FIELD	16:33	16:38	8	img -> id
LEAF_NODE	16:33	16:33	9	img
LEAF_NODE	16:36	16:36	9	->
LEAF_NODE	16:38	16:38	9	id
LEAF_NODE	16:40	16:40	8	)
LEAF_NODE	16:41	16:41	6	,
ARGUMENT	16:43	16:43	6	img
FIELD	16:43	16:43	7	img
LEAF_NODE	16:43	16:43	8	img
LEAF_NODE	16:46	16:46	6	)
LEAF_NODE	16:47	16:47	4	;
JUMP_STATEMENT	17:1	17:15	3	return img -> id ;
KEYWORD	17:1	17:1	4	return
LEAF_NODE	17:1	17:1	5	return
DESTINATION	17:8	17:8	4	img -> id
EXPR	17:8	17:8	5	img -> id
FIELD	17:8	17:13	6	img -> id
LEAF_NODE	17:8	17:8	7	img
LEAF_NODE	17:11	17:11	7	->
LEAF_NODE	17:13	17:13	7	id
LEAF_NODE	17:15	17:15	4	;
LEAF_NODE	18:0	18:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	plugin_unload
LEAF_NODE	2:0	2:0	3	plugin_unload
PARAMETER_LIST	2:13	2:34	2	( PurplePlugin * plugin )
LEAF_NODE	2:13	2:13	3	(
PARAMETER_DECL	2:14	2:28	3	PurplePlugin * plugin
TYPE	2:14	2:27	4	PurplePlugin *
TYPE_NAME	2:14	2:14	5	PurplePlugin
LEAF_NODE	2:14	2:14	6	PurplePlugin
POINTER	2:27	2:27	5	*
LEAF_NODE	2:27	2:27	6	*
NAME	2:28	2:28	4	plugin
LEAF_NODE	2:28	2:28	5	plugin
LEAF_NODE	2:34	2:34	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:50	3	g_signal_remove_emission_hook ( signal_id , hook_id ) ;
EXPR	4:1	4:1	4	g_signal_remove_emission_hook ( signal_id , hook_id )
FUNCTION_CALL	4:1	4:49	5	g_signal_remove_emission_hook ( signal_id , hook_id )
CALLEE	4:1	4:1	6	g_signal_remove_emission_hook
LEAF_NODE	4:1	4:1	7	g_signal_remove_emission_hook
LEAF_NODE	4:30	4:30	6	(
ARGUMENT	4:31	4:31	6	signal_id
FIELD	4:31	4:31	7	signal_id
LEAF_NODE	4:31	4:31	8	signal_id
LEAF_NODE	4:40	4:40	6	,
ARGUMENT	4:42	4:42	6	hook_id
FIELD	4:42	4:42	7	hook_id
LEAF_NODE	4:42	4:42	8	hook_id
LEAF_NODE	4:49	4:49	6	)
LEAF_NODE	4:50	4:50	4	;
JUMP_STATEMENT	5:1	5:12	3	return TRUE ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	TRUE
EXPR	5:8	5:8	5	TRUE
FIELD	5:8	5:8	6	TRUE
LEAF_NODE	5:8	5:8	7	TRUE
LEAF_NODE	5:12	5:12	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	20:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	gnt_tree_set_column_visible
LEAF_NODE	2:5	2:5	3	gnt_tree_set_column_visible
PARAMETER_LIST	2:32	2:69	2	( GntTree * tree , int col , gboolean vis )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:42	3	GntTree * tree
TYPE	2:33	2:41	4	GntTree *
TYPE_NAME	2:33	2:33	5	GntTree
LEAF_NODE	2:33	2:33	6	GntTree
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	tree
LEAF_NODE	2:42	2:42	5	tree
LEAF_NODE	2:46	2:46	3	,
PARAMETER_DECL	2:48	2:52	3	int col
TYPE	2:48	2:48	4	int
TYPE_NAME	2:48	2:48	5	int
LEAF_NODE	2:48	2:48	6	int
NAME	2:52	2:52	4	col
LEAF_NODE	2:52	2:52	5	col
LEAF_NODE	2:55	2:55	3	,
PARAMETER_DECL	2:57	2:66	3	gboolean vis
TYPE	2:57	2:57	4	gboolean
TYPE_NAME	2:57	2:57	5	gboolean
LEAF_NODE	2:57	2:57	6	gboolean
NAME	2:66	2:66	4	vis
LEAF_NODE	2:66	2:66	5	vis
LEAF_NODE	2:69	2:69	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	18:1	2	
EXPR_STATEMENT	4:1	4:35	3	g_return_if_fail ( col < tree -> ncol ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( col < tree -> ncol )
FUNCTION_CALL	4:1	4:34	5	g_return_if_fail ( col < tree -> ncol )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:24	6	col < tree -> ncol
FIELD	4:18	4:18	7	col
LEAF_NODE	4:18	4:18	8	col
REL_OPERATOR	4:22	4:22	7	<
LEAF_NODE	4:22	4:22	8	<
FIELD	4:24	4:30	7	tree -> ncol
LEAF_NODE	4:24	4:24	8	tree
LEAF_NODE	4:28	4:28	8	->
LEAF_NODE	4:30	4:30	8	ncol
LEAF_NODE	4:34	4:34	6	)
LEAF_NODE	4:35	4:35	4	;
EXPR_STATEMENT	5:1	5:60	3	set_column_flag ( tree , col , GNT_TREE_COLUMN_INVISIBLE , ! vis ) ;
EXPR	5:1	5:1	4	set_column_flag ( tree , col , GNT_TREE_COLUMN_INVISIBLE , ! vis )
FUNCTION_CALL	5:1	5:59	5	set_column_flag ( tree , col , GNT_TREE_COLUMN_INVISIBLE , ! vis )
CALLEE	5:1	5:1	6	set_column_flag
LEAF_NODE	5:1	5:1	7	set_column_flag
LEAF_NODE	5:16	5:16	6	(
ARGUMENT	5:17	5:17	6	tree
FIELD	5:17	5:17	7	tree
LEAF_NODE	5:17	5:17	8	tree
LEAF_NODE	5:21	5:21	6	,
ARGUMENT	5:23	5:23	6	col
FIELD	5:23	5:23	7	col
LEAF_NODE	5:23	5:23	8	col
LEAF_NODE	5:26	5:26	6	,
ARGUMENT	5:28	5:28	6	GNT_TREE_COLUMN_INVISIBLE
FIELD	5:28	5:28	7	GNT_TREE_COLUMN_INVISIBLE
LEAF_NODE	5:28	5:28	8	GNT_TREE_COLUMN_INVISIBLE
LEAF_NODE	5:53	5:53	6	,
ARGUMENT	5:55	5:55	6	! vis
UNARY_EXPR	5:55	5:56	7	! vis
UNARY_OPERATOR	5:55	5:55	8	!
LEAF_NODE	5:55	5:55	9	!
FIELD	5:56	5:56	8	vis
LEAF_NODE	5:56	5:56	9	vis
LEAF_NODE	5:59	5:59	6	)
LEAF_NODE	5:60	5:60	4	;
SELECTION	6:1	6:10	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	vis
EXPR	6:5	6:5	5	vis
FIELD	6:5	6:5	6	vis
LEAF_NODE	6:5	6:5	7	vis
LEAF_NODE	6:8	6:8	4	)
STATEMENTS	6:10	10:1	4	
LEAF_NODE	6:10	6:10	5	{
STATEMENTS	8:2	8:2	5	
SELECTION	8:2	9:3	6	
KEYWORD	8:2	8:2	7	if
LEAF_NODE	8:2	8:2	8	if
LEAF_NODE	8:5	8:5	7	(
CONDITION	8:6	8:6	7	tree -> priv -> lastvisible < col
EXPR	8:6	8:32	8	tree -> priv -> lastvisible < col
FIELD	8:6	8:18	9	tree -> priv -> lastvisible
LEAF_NODE	8:6	8:6	10	tree
LEAF_NODE	8:10	8:10	10	->
LEAF_NODE	8:12	8:12	10	priv
LEAF_NODE	8:16	8:16	10	->
LEAF_NODE	8:18	8:18	10	lastvisible
REL_OPERATOR	8:30	8:30	9	<
LEAF_NODE	8:30	8:30	10	<
FIELD	8:32	8:32	9	col
LEAF_NODE	8:32	8:32	10	col
LEAF_NODE	8:35	8:35	7	)
STATEMENTS	9:3	9:3	7	
EXPR_STATEMENT	9:3	9:32	8	tree -> priv -> lastvisible = col ;
EXPR	9:3	9:3	9	tree -> priv -> lastvisible = col
ASSIGN	9:3	9:29	10	tree -> priv -> lastvisible = col
LVAL	9:3	9:3	11	tree -> priv -> lastvisible
FIELD	9:3	9:15	12	tree -> priv -> lastvisible
LEAF_NODE	9:3	9:3	13	tree
LEAF_NODE	9:7	9:7	13	->
LEAF_NODE	9:9	9:9	13	priv
LEAF_NODE	9:13	9:13	13	->
LEAF_NODE	9:15	9:15	13	lastvisible
ASSIGN_OP	9:27	9:27	11	=
LEAF_NODE	9:27	9:27	12	=
RVAL	9:29	9:29	11	col
FIELD	9:29	9:29	12	col
LEAF_NODE	9:29	9:29	13	col
LEAF_NODE	9:32	9:32	9	;
LEAF_NODE	10:1	10:1	5	}
SELECTION	10:3	10:8	3	
KEYWORD	10:3	10:3	4	else
LEAF_NODE	10:3	10:3	5	else
STATEMENTS	10:8	17:1	4	
LEAF_NODE	10:8	10:8	5	{
STATEMENTS	11:2	11:2	5	
SELECTION	11:2	12:3	6	
KEYWORD	11:2	11:2	7	if
LEAF_NODE	11:2	11:2	8	if
LEAF_NODE	11:5	11:5	7	(
CONDITION	11:6	11:6	7	tree -> priv -> lastvisible == col
EXPR	11:6	11:33	8	tree -> priv -> lastvisible == col
FIELD	11:6	11:18	9	tree -> priv -> lastvisible
LEAF_NODE	11:6	11:6	10	tree
LEAF_NODE	11:10	11:10	10	->
LEAF_NODE	11:12	11:12	10	priv
LEAF_NODE	11:16	11:16	10	->
LEAF_NODE	11:18	11:18	10	lastvisible
EQ_OPERATOR	11:30	11:30	9	==
LEAF_NODE	11:30	11:30	10	==
FIELD	11:33	11:33	9	col
LEAF_NODE	11:33	11:33	10	col
LEAF_NODE	11:36	11:36	7	)
STATEMENTS	12:3	12:3	7	
ITERATION	12:3	12:35	8	
KEYWORD	12:3	12:3	9	while
LEAF_NODE	12:3	12:3	10	while
LEAF_NODE	12:9	12:9	9	(
CONDITION	12:10	12:10	9	tree -> priv -> lastvisible
EXPR	12:10	12:10	10	tree -> priv -> lastvisible
FIELD	12:10	12:22	11	tree -> priv -> lastvisible
LEAF_NODE	12:10	12:10	12	tree
LEAF_NODE	12:14	12:14	12	->
LEAF_NODE	12:16	12:16	12	priv
LEAF_NODE	12:20	12:20	12	->
LEAF_NODE	12:22	12:22	12	lastvisible
LEAF_NODE	12:33	12:33	9	)
STATEMENTS	12:35	16:3	9	
LEAF_NODE	12:35	12:35	10	{
STATEMENTS	13:4	14:4	10	
EXPR_STATEMENT	13:4	13:29	11	tree -> priv -> lastvisible -- ;
EXPR	13:4	13:4	12	tree -> priv -> lastvisible --
FIELD	13:4	13:27	13	tree -> priv -> lastvisible --
LEAF_NODE	13:4	13:4	14	tree
LEAF_NODE	13:8	13:8	14	->
LEAF_NODE	13:10	13:10	14	priv
LEAF_NODE	13:14	13:14	14	->
LEAF_NODE	13:16	13:16	14	lastvisible
LEAF_NODE	13:27	13:27	14	--
LEAF_NODE	13:29	13:29	12	;
SELECTION	14:4	15:5	11	
KEYWORD	14:4	14:4	12	if
LEAF_NODE	14:4	14:4	13	if
LEAF_NODE	14:7	14:7	12	(
CONDITION	14:8	14:8	12	! COLUMN_INVISIBLE ( tree , tree -> priv -> lastvisible )
EXPR	14:8	14:8	13	! COLUMN_INVISIBLE ( tree , tree -> priv -> lastvisible )
UNARY_EXPR	14:8	14:9	14	! COLUMN_INVISIBLE ( tree , tree -> priv -> lastvisible )
UNARY_OPERATOR	14:8	14:8	15	!
LEAF_NODE	14:8	14:8	16	!
FUNCTION_CALL	14:9	14:55	15	COLUMN_INVISIBLE ( tree , tree -> priv -> lastvisible )
CALLEE	14:9	14:9	16	COLUMN_INVISIBLE
LEAF_NODE	14:9	14:9	17	COLUMN_INVISIBLE
LEAF_NODE	14:25	14:25	16	(
ARGUMENT	14:26	14:26	16	tree
FIELD	14:26	14:26	17	tree
LEAF_NODE	14:26	14:26	18	tree
LEAF_NODE	14:30	14:30	16	,
ARGUMENT	14:32	14:32	16	tree -> priv -> lastvisible
FIELD	14:32	14:44	17	tree -> priv -> lastvisible
LEAF_NODE	14:32	14:32	18	tree
LEAF_NODE	14:36	14:36	18	->
LEAF_NODE	14:38	14:38	18	priv
LEAF_NODE	14:42	14:42	18	->
LEAF_NODE	14:44	14:44	18	lastvisible
LEAF_NODE	14:55	14:55	16	)
LEAF_NODE	14:56	14:56	12	)
STATEMENTS	15:5	15:5	12	
JUMP_STATEMENT	15:5	15:10	13	break DESTINATION ;
KEYWORD	15:5	15:5	14	break
LEAF_NODE	15:5	15:5	15	break
LEAF_NODE	0:0	0:0	14	DESTINATION
LEAF_NODE	15:10	15:10	14	;
LEAF_NODE	16:3	16:3	10	}
LEAF_NODE	17:1	17:1	5	}
SELECTION	18:1	19:2	3	
KEYWORD	18:1	18:1	4	if
LEAF_NODE	18:1	18:1	5	if
LEAF_NODE	18:4	18:4	4	(
CONDITION	18:5	18:5	4	GNT_WIDGET_IS_FLAG_SET ( GNT_WIDGET ( tree ) , GNT_WIDGET_MAPPED )
EXPR	18:5	18:5	5	GNT_WIDGET_IS_FLAG_SET ( GNT_WIDGET ( tree ) , GNT_WIDGET_MAPPED )
FUNCTION_CALL	18:5	18:63	6	GNT_WIDGET_IS_FLAG_SET ( GNT_WIDGET ( tree ) , GNT_WIDGET_MAPPED )
CALLEE	18:5	18:5	7	GNT_WIDGET_IS_FLAG_SET
LEAF_NODE	18:5	18:5	8	GNT_WIDGET_IS_FLAG_SET
LEAF_NODE	18:27	18:27	7	(
ARGUMENT	18:28	18:28	7	GNT_WIDGET ( tree )
FUNCTION_CALL	18:28	18:43	8	GNT_WIDGET ( tree )
CALLEE	18:28	18:28	9	GNT_WIDGET
LEAF_NODE	18:28	18:28	10	GNT_WIDGET
LEAF_NODE	18:38	18:38	9	(
ARGUMENT	18:39	18:39	9	tree
FIELD	18:39	18:39	10	tree
LEAF_NODE	18:39	18:39	11	tree
LEAF_NODE	18:43	18:43	9	)
LEAF_NODE	18:44	18:44	7	,
ARGUMENT	18:46	18:46	7	GNT_WIDGET_MAPPED
FIELD	18:46	18:46	8	GNT_WIDGET_MAPPED
LEAF_NODE	18:46	18:46	9	GNT_WIDGET_MAPPED
LEAF_NODE	18:63	18:63	7	)
LEAF_NODE	18:64	18:64	4	)
STATEMENTS	19:2	19:2	4	
EXPR_STATEMENT	19:2	19:24	5	readjust_columns ( tree ) ;
EXPR	19:2	19:2	6	readjust_columns ( tree )
FUNCTION_CALL	19:2	19:23	7	readjust_columns ( tree )
CALLEE	19:2	19:2	8	readjust_columns
LEAF_NODE	19:2	19:2	9	readjust_columns
LEAF_NODE	19:18	19:18	8	(
ARGUMENT	19:19	19:19	8	tree
FIELD	19:19	19:19	9	tree
LEAF_NODE	19:19	19:19	10	tree
LEAF_NODE	19:23	19:23	8	)
LEAF_NODE	19:24	19:24	6	;
LEAF_NODE	20:0	20:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	11:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	show_submenu
LEAF_NODE	2:0	2:0	3	show_submenu
PARAMETER_LIST	2:12	2:26	2	( GntMenu * menu )
LEAF_NODE	2:12	2:12	3	(
PARAMETER_DECL	2:13	2:22	3	GntMenu * menu
TYPE	2:13	2:21	4	GntMenu *
TYPE_NAME	2:13	2:13	5	GntMenu
LEAF_NODE	2:13	2:13	6	GntMenu
POINTER	2:21	2:21	5	*
LEAF_NODE	2:21	2:21	6	*
NAME	2:22	2:22	4	menu
LEAF_NODE	2:22	2:22	5	menu
LEAF_NODE	2:26	2:26	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	10:1	2	
SIMPLE_DECL	4:1	4:18	3	GntMenuItem * item ;
VAR_DECL	4:1	4:14	4	GntMenuItem * item
TYPE	4:1	4:13	5	GntMenuItem *
TYPE_NAME	4:1	4:1	6	GntMenuItem
LEAF_NODE	4:1	4:1	7	GntMenuItem
POINTER	4:13	4:13	6	*
LEAF_NODE	4:13	4:13	7	*
NAME	4:14	4:14	5	item
LEAF_NODE	4:14	4:14	6	item
LEAF_NODE	4:18	4:18	4	;
SELECTION	5:1	6:3	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	menu -> type != GNT_MENU_TOPLEVEL
EXPR	5:5	5:19	5	menu -> type != GNT_MENU_TOPLEVEL
FIELD	5:5	5:11	6	menu -> type
LEAF_NODE	5:5	5:5	7	menu
LEAF_NODE	5:9	5:9	7	->
LEAF_NODE	5:11	5:11	7	type
EQ_OPERATOR	5:16	5:16	6	!=
LEAF_NODE	5:16	5:16	7	!=
FIELD	5:19	5:19	6	GNT_MENU_TOPLEVEL
LEAF_NODE	5:19	5:19	7	GNT_MENU_TOPLEVEL
LEAF_NODE	5:36	5:36	4	)
STATEMENTS	6:3	6:3	4	
JUMP_STATEMENT	6:3	6:9	5	return DESTINATION ;
KEYWORD	6:3	6:3	6	return
LEAF_NODE	6:3	6:3	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	6:9	6:9	6	;
EXPR_STATEMENT	7:1	7:51	3	item = g_list_nth_data ( menu -> list , menu -> selected ) ;
EXPR	7:1	7:1	4	item = g_list_nth_data ( menu -> list , menu -> selected )
ASSIGN	7:1	7:8	5	item = g_list_nth_data ( menu -> list , menu -> selected )
LVAL	7:1	7:1	6	item
FIELD	7:1	7:1	7	item
LEAF_NODE	7:1	7:1	8	item
ASSIGN_OP	7:6	7:6	6	=
LEAF_NODE	7:6	7:6	7	=
RVAL	7:8	7:8	6	g_list_nth_data ( menu -> list , menu -> selected )
FUNCTION_CALL	7:8	7:50	7	g_list_nth_data ( menu -> list , menu -> selected )
CALLEE	7:8	7:8	8	g_list_nth_data
LEAF_NODE	7:8	7:8	9	g_list_nth_data
LEAF_NODE	7:23	7:23	8	(
ARGUMENT	7:24	7:24	8	menu -> list
FIELD	7:24	7:30	9	menu -> list
LEAF_NODE	7:24	7:24	10	menu
LEAF_NODE	7:28	7:28	10	->
LEAF_NODE	7:30	7:30	10	list
LEAF_NODE	7:34	7:34	8	,
ARGUMENT	7:36	7:36	8	menu -> selected
FIELD	7:36	7:42	9	menu -> selected
LEAF_NODE	7:36	7:36	10	menu
LEAF_NODE	7:40	7:40	10	->
LEAF_NODE	7:42	7:42	10	selected
LEAF_NODE	7:50	7:50	8	)
LEAF_NODE	7:51	7:51	4	;
SELECTION	8:1	9:2	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	! item || ! item -> submenu
EXPR	8:5	8:5	5	! item || ! item -> submenu
OR	8:5	8:14	6	! item || ! item -> submenu
EXPR	8:5	8:5	7	! item
UNARY_EXPR	8:5	8:6	8	! item
UNARY_OPERATOR	8:5	8:5	9	!
LEAF_NODE	8:5	8:5	10	!
FIELD	8:6	8:6	9	item
LEAF_NODE	8:6	8:6	10	item
LEAF_NODE	8:11	8:11	7	||
EXPR	8:14	8:14	7	! item -> submenu
UNARY_EXPR	8:14	8:15	8	! item -> submenu
UNARY_OPERATOR	8:14	8:14	9	!
LEAF_NODE	8:14	8:14	10	!
FIELD	8:15	8:21	9	item -> submenu
LEAF_NODE	8:15	8:15	10	item
LEAF_NODE	8:19	8:19	10	->
LEAF_NODE	8:21	8:21	10	submenu
LEAF_NODE	8:28	8:28	4	)
STATEMENTS	9:2	9:2	4	
JUMP_STATEMENT	9:2	9:8	5	return DESTINATION ;
KEYWORD	9:2	9:2	6	return
LEAF_NODE	9:2	9:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	9:8	9:8	6	;
EXPR_STATEMENT	10:1	10:30	3	menuitem_activate ( menu , item ) ;
EXPR	10:1	10:1	4	menuitem_activate ( menu , item )
FUNCTION_CALL	10:1	10:29	5	menuitem_activate ( menu , item )
CALLEE	10:1	10:1	6	menuitem_activate
LEAF_NODE	10:1	10:1	7	menuitem_activate
LEAF_NODE	10:18	10:18	6	(
ARGUMENT	10:19	10:19	6	menu
FIELD	10:19	10:19	7	menu
LEAF_NODE	10:19	10:19	8	menu
LEAF_NODE	10:23	10:23	6	,
ARGUMENT	10:25	10:25	6	item
FIELD	10:25	10:25	7	item
LEAF_NODE	10:25	10:25	8	item
LEAF_NODE	10:29	10:29	6	)
LEAF_NODE	10:30	10:30	4	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	26:0	1	
RETURN_TYPE	1:0	1:17	2	static GtkWidget *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	GtkWidget
LEAF_NODE	1:7	1:7	4	GtkWidget
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	create_account_label
LEAF_NODE	2:0	2:0	3	create_account_label
PARAMETER_LIST	2:20	2:43	2	( PurpleAccount * account )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:36	3	PurpleAccount * account
TYPE	2:21	2:35	4	PurpleAccount *
TYPE_NAME	2:21	2:21	5	PurpleAccount
LEAF_NODE	2:21	2:21	6	PurpleAccount
POINTER	2:35	2:35	5	*
LEAF_NODE	2:35	2:35	6	*
NAME	2:36	2:36	4	account
LEAF_NODE	2:36	2:36	5	account
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	25:1	2	
SIMPLE_DECL	4:1	4:24	3	GtkWidget * hbox , GtkWidget * label ;
INIT_DECL_LIST	4:1	4:1	4	GtkWidget * hbox , GtkWidget * label
VAR_DECL	4:1	4:12	5	GtkWidget * hbox
TYPE	4:1	4:11	6	GtkWidget *
TYPE_NAME	4:1	4:1	7	GtkWidget
LEAF_NODE	4:1	4:1	8	GtkWidget
POINTER	4:11	4:11	7	*
LEAF_NODE	4:11	4:11	8	*
NAME	4:12	4:12	6	hbox
LEAF_NODE	4:12	4:12	7	hbox
LEAF_NODE	4:16	4:16	5	,
VAR_DECL	4:1	4:19	5	GtkWidget * label
TYPE	4:1	4:18	6	GtkWidget *
TYPE_NAME	4:1	4:1	7	GtkWidget
LEAF_NODE	4:1	4:1	8	GtkWidget
POINTER	4:18	4:18	7	*
LEAF_NODE	4:18	4:18	8	*
NAME	4:19	4:19	6	label
LEAF_NODE	4:19	4:19	7	label
LEAF_NODE	4:24	4:24	4	;
SIMPLE_DECL	5:1	5:60	3	const char * username ; username = purple_account_get_username ( account ) ;
VAR_DECL	5:1	5:13	4	const char * username ; username = purple_account_get_username ( account )
TYPE	5:1	5:12	5	const char *
TYPE_NAME	5:1	5:7	6	const char
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	char
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	username
LEAF_NODE	5:13	5:13	6	username
LEAF_NODE	0:0	0:0	5	;
INIT	5:13	5:13	5	username = purple_account_get_username ( account )
ASSIGN	5:13	5:24	6	username = purple_account_get_username ( account )
LVAL	5:13	5:13	7	username
NAME	5:13	5:13	8	username
LEAF_NODE	5:13	5:13	9	username
ASSIGN_OP	5:22	5:22	7	=
LEAF_NODE	5:22	5:22	8	=
RVAL	5:24	5:24	7	purple_account_get_username ( account )
FUNCTION_CALL	5:24	5:59	8	purple_account_get_username ( account )
CALLEE	5:24	5:24	9	purple_account_get_username
LEAF_NODE	5:24	5:24	10	purple_account_get_username
LEAF_NODE	5:51	5:51	9	(
ARGUMENT	5:52	5:52	9	account
FIELD	5:52	5:52	10	account
LEAF_NODE	5:52	5:52	11	account
LEAF_NODE	5:59	5:59	9	)
LEAF_NODE	5:60	5:60	4	;
SIMPLE_DECL	6:1	6:13	3	char * markup ;
VAR_DECL	6:1	6:7	4	char * markup
TYPE	6:1	6:6	5	char *
TYPE_NAME	6:1	6:1	6	char
LEAF_NODE	6:1	6:1	7	char
POINTER	6:6	6:6	6	*
LEAF_NODE	6:6	6:6	7	*
NAME	6:7	6:7	5	markup
LEAF_NODE	6:7	6:7	6	markup
LEAF_NODE	6:13	6:13	4	;
EXPR_STATEMENT	7:1	7:30	3	hbox = gtk_hbox_new ( FALSE , 6 ) ;
EXPR	7:1	7:1	4	hbox = gtk_hbox_new ( FALSE , 6 )
ASSIGN	7:1	7:8	5	hbox = gtk_hbox_new ( FALSE , 6 )
LVAL	7:1	7:1	6	hbox
FIELD	7:1	7:1	7	hbox
LEAF_NODE	7:1	7:1	8	hbox
ASSIGN_OP	7:6	7:6	6	=
LEAF_NODE	7:6	7:6	7	=
RVAL	7:8	7:8	6	gtk_hbox_new ( FALSE , 6 )
FUNCTION_CALL	7:8	7:29	7	gtk_hbox_new ( FALSE , 6 )
CALLEE	7:8	7:8	8	gtk_hbox_new
LEAF_NODE	7:8	7:8	9	gtk_hbox_new
LEAF_NODE	7:20	7:20	8	(
ARGUMENT	7:21	7:21	8	FALSE
FIELD	7:21	7:21	9	FALSE
LEAF_NODE	7:21	7:21	10	FALSE
LEAF_NODE	7:26	7:26	8	,
ARGUMENT	7:28	7:28	8	6
FIELD	7:28	7:28	9	6
LEAF_NODE	7:28	7:28	10	6
LEAF_NODE	7:29	7:29	8	)
LEAF_NODE	7:30	7:30	4	;
EXPR_STATEMENT	8:1	8:68	3	g_object_set_data ( G_OBJECT ( hbox ) , OBJECT_DATA_KEY_ACCOUNT , account ) ;
EXPR	8:1	8:1	4	g_object_set_data ( G_OBJECT ( hbox ) , OBJECT_DATA_KEY_ACCOUNT , account )
FUNCTION_CALL	8:1	8:67	5	g_object_set_data ( G_OBJECT ( hbox ) , OBJECT_DATA_KEY_ACCOUNT , account )
CALLEE	8:1	8:1	6	g_object_set_data
LEAF_NODE	8:1	8:1	7	g_object_set_data
LEAF_NODE	8:18	8:18	6	(
ARGUMENT	8:19	8:19	6	G_OBJECT ( hbox )
FUNCTION_CALL	8:19	8:32	7	G_OBJECT ( hbox )
CALLEE	8:19	8:19	8	G_OBJECT
LEAF_NODE	8:19	8:19	9	G_OBJECT
LEAF_NODE	8:27	8:27	8	(
ARGUMENT	8:28	8:28	8	hbox
FIELD	8:28	8:28	9	hbox
LEAF_NODE	8:28	8:28	10	hbox
LEAF_NODE	8:32	8:32	8	)
LEAF_NODE	8:33	8:33	6	,
ARGUMENT	8:35	8:35	6	OBJECT_DATA_KEY_ACCOUNT
FIELD	8:35	8:35	7	OBJECT_DATA_KEY_ACCOUNT
LEAF_NODE	8:35	8:35	8	OBJECT_DATA_KEY_ACCOUNT
LEAF_NODE	8:58	8:58	6	,
ARGUMENT	8:60	8:60	6	account
FIELD	8:60	8:60	7	account
LEAF_NODE	8:60	8:60	8	account
LEAF_NODE	8:67	8:67	6	)
LEAF_NODE	8:68	8:68	4	;
EXPR_STATEMENT	9:1	9:36	3	pack_prpl_icon_start ( hbox , account ) ;
EXPR	9:1	9:1	4	pack_prpl_icon_start ( hbox , account )
FUNCTION_CALL	9:1	9:35	5	pack_prpl_icon_start ( hbox , account )
CALLEE	9:1	9:1	6	pack_prpl_icon_start
LEAF_NODE	9:1	9:1	7	pack_prpl_icon_start
LEAF_NODE	9:21	9:21	6	(
ARGUMENT	9:22	9:22	6	hbox
FIELD	9:22	9:22	7	hbox
LEAF_NODE	9:22	9:22	8	hbox
LEAF_NODE	9:26	9:26	6	,
ARGUMENT	9:28	9:28	6	account
FIELD	9:28	9:28	7	account
LEAF_NODE	9:28	9:28	8	account
LEAF_NODE	9:35	9:35	6	)
LEAF_NODE	9:36	9:36	4	;
EXPR_STATEMENT	10:1	10:28	3	label = gtk_label_new ( NULL ) ;
EXPR	10:1	10:1	4	label = gtk_label_new ( NULL )
ASSIGN	10:1	10:9	5	label = gtk_label_new ( NULL )
LVAL	10:1	10:1	6	label
FIELD	10:1	10:1	7	label
LEAF_NODE	10:1	10:1	8	label
ASSIGN_OP	10:7	10:7	6	=
LEAF_NODE	10:7	10:7	7	=
RVAL	10:9	10:9	6	gtk_label_new ( NULL )
FUNCTION_CALL	10:9	10:27	7	gtk_label_new ( NULL )
CALLEE	10:9	10:9	8	gtk_label_new
LEAF_NODE	10:9	10:9	9	gtk_label_new
LEAF_NODE	10:22	10:22	8	(
ARGUMENT	10:23	10:23	8	NULL
FIELD	10:23	10:23	9	NULL
LEAF_NODE	10:23	10:23	10	NULL
LEAF_NODE	10:27	10:27	8	)
LEAF_NODE	10:28	10:28	4	;
EXPR_STATEMENT	11:1	11:71	3	markup = g_strdup_printf ( "<span size=\"smaller\">%s</span>" , username ) ;
EXPR	11:1	11:1	4	markup = g_strdup_printf ( "<span size=\"smaller\">%s</span>" , username )
ASSIGN	11:1	11:10	5	markup = g_strdup_printf ( "<span size=\"smaller\">%s</span>" , username )
LVAL	11:1	11:1	6	markup
FIELD	11:1	11:1	7	markup
LEAF_NODE	11:1	11:1	8	markup
ASSIGN_OP	11:8	11:8	6	=
LEAF_NODE	11:8	11:8	7	=
RVAL	11:10	11:10	6	g_strdup_printf ( "<span size=\"smaller\">%s</span>" , username )
FUNCTION_CALL	11:10	11:70	7	g_strdup_printf ( "<span size=\"smaller\">%s</span>" , username )
CALLEE	11:10	11:10	8	g_strdup_printf
LEAF_NODE	11:10	11:10	9	g_strdup_printf
LEAF_NODE	11:25	11:25	8	(
ARGUMENT	11:26	11:26	8	"<span size=\"smaller\">%s</span>"
FIELD	11:26	11:26	9	"<span size=\"smaller\">%s</span>"
LEAF_NODE	11:26	11:26	10	"<span size=\"smaller\">%s</span>"
LEAF_NODE	11:60	11:60	8	,
ARGUMENT	11:62	11:62	8	username
FIELD	11:62	11:62	9	username
LEAF_NODE	11:62	11:62	10	username
LEAF_NODE	11:70	11:70	8	)
LEAF_NODE	11:71	11:71	4	;
EXPR_STATEMENT	12:1	12:47	3	gtk_label_set_markup ( GTK_LABEL ( label ) , markup ) ;
EXPR	12:1	12:1	4	gtk_label_set_markup ( GTK_LABEL ( label ) , markup )
FUNCTION_CALL	12:1	12:46	5	gtk_label_set_markup ( GTK_LABEL ( label ) , markup )
CALLEE	12:1	12:1	6	gtk_label_set_markup
LEAF_NODE	12:1	12:1	7	gtk_label_set_markup
LEAF_NODE	12:21	12:21	6	(
ARGUMENT	12:22	12:22	6	GTK_LABEL ( label )
FUNCTION_CALL	12:22	12:37	7	GTK_LABEL ( label )
CALLEE	12:22	12:22	8	GTK_LABEL
LEAF_NODE	12:22	12:22	9	GTK_LABEL
LEAF_NODE	12:31	12:31	8	(
ARGUMENT	12:32	12:32	8	label
FIELD	12:32	12:32	9	label
LEAF_NODE	12:32	12:32	10	label
LEAF_NODE	12:37	12:37	8	)
LEAF_NODE	12:38	12:38	6	,
ARGUMENT	12:40	12:40	6	markup
FIELD	12:40	12:40	7	markup
LEAF_NODE	12:40	12:40	8	markup
LEAF_NODE	12:46	12:46	6	)
LEAF_NODE	12:47	12:47	4	;
EXPR_STATEMENT	13:1	13:15	3	g_free ( markup ) ;
EXPR	13:1	13:1	4	g_free ( markup )
FUNCTION_CALL	13:1	13:14	5	g_free ( markup )
CALLEE	13:1	13:1	6	g_free
LEAF_NODE	13:1	13:1	7	g_free
LEAF_NODE	13:7	13:7	6	(
ARGUMENT	13:8	13:8	6	markup
FIELD	13:8	13:8	7	markup
LEAF_NODE	13:8	13:8	8	markup
LEAF_NODE	13:14	13:14	6	)
LEAF_NODE	13:15	13:15	4	;
EXPR_STATEMENT	14:1	14:46	3	gtk_misc_set_alignment ( GTK_MISC ( label ) , 0 , 0 ) ;
EXPR	14:1	14:1	4	gtk_misc_set_alignment ( GTK_MISC ( label ) , 0 , 0 )
FUNCTION_CALL	14:1	14:45	5	gtk_misc_set_alignment ( GTK_MISC ( label ) , 0 , 0 )
CALLEE	14:1	14:1	6	gtk_misc_set_alignment
LEAF_NODE	14:1	14:1	7	gtk_misc_set_alignment
LEAF_NODE	14:23	14:23	6	(
ARGUMENT	14:24	14:24	6	GTK_MISC ( label )
FUNCTION_CALL	14:24	14:38	7	GTK_MISC ( label )
CALLEE	14:24	14:24	8	GTK_MISC
LEAF_NODE	14:24	14:24	9	GTK_MISC
LEAF_NODE	14:32	14:32	8	(
ARGUMENT	14:33	14:33	8	label
FIELD	14:33	14:33	9	label
LEAF_NODE	14:33	14:33	10	label
LEAF_NODE	14:38	14:38	8	)
LEAF_NODE	14:39	14:39	6	,
ARGUMENT	14:41	14:41	6	0
FIELD	14:41	14:41	7	0
LEAF_NODE	14:41	14:41	8	0
LEAF_NODE	14:42	14:42	6	,
ARGUMENT	14:44	14:44	6	0
FIELD	14:44	14:44	7	0
LEAF_NODE	14:44	14:44	8	0
LEAF_NODE	14:45	14:45	6	)
LEAF_NODE	14:46	14:46	4	;
EXPR_STATEMENT	15:1	15:70	3	g_object_set ( G_OBJECT ( label ) , "ellipsize" , PANGO_ELLIPSIZE_END , NULL ) ;
EXPR	15:1	15:1	4	g_object_set ( G_OBJECT ( label ) , "ellipsize" , PANGO_ELLIPSIZE_END , NULL )
FUNCTION_CALL	15:1	15:69	5	g_object_set ( G_OBJECT ( label ) , "ellipsize" , PANGO_ELLIPSIZE_END , NULL )
CALLEE	15:1	15:1	6	g_object_set
LEAF_NODE	15:1	15:1	7	g_object_set
LEAF_NODE	15:13	15:13	6	(
ARGUMENT	15:14	15:14	6	G_OBJECT ( label )
FUNCTION_CALL	15:14	15:28	7	G_OBJECT ( label )
CALLEE	15:14	15:14	8	G_OBJECT
LEAF_NODE	15:14	15:14	9	G_OBJECT
LEAF_NODE	15:22	15:22	8	(
ARGUMENT	15:23	15:23	8	label
FIELD	15:23	15:23	9	label
LEAF_NODE	15:23	15:23	10	label
LEAF_NODE	15:28	15:28	8	)
LEAF_NODE	15:29	15:29	6	,
ARGUMENT	15:31	15:31	6	"ellipsize"
FIELD	15:31	15:31	7	"ellipsize"
LEAF_NODE	15:31	15:31	8	"ellipsize"
LEAF_NODE	15:42	15:42	6	,
ARGUMENT	15:44	15:44	6	PANGO_ELLIPSIZE_END
FIELD	15:44	15:44	7	PANGO_ELLIPSIZE_END
LEAF_NODE	15:44	15:44	8	PANGO_ELLIPSIZE_END
LEAF_NODE	15:63	15:63	6	,
ARGUMENT	15:65	15:65	6	NULL
FIELD	15:65	15:65	7	NULL
LEAF_NODE	15:65	15:65	8	NULL
LEAF_NODE	15:69	15:69	6	)
LEAF_NODE	15:70	15:70	4	;
LEAF_NODE	17:1	17:1	3	{
STATEMENTS	18:2	20:2	3	
SIMPLE_DECL	18:2	19:57	4	char * description ; description = purple_account_get_current_error ( account ) -> description ;
VAR_DECL	18:2	18:8	5	char * description ; description = purple_account_get_current_error ( account ) -> description
TYPE	18:2	18:7	6	char *
TYPE_NAME	18:2	18:2	7	char
LEAF_NODE	18:2	18:2	8	char
POINTER	18:7	18:7	7	*
LEAF_NODE	18:7	18:7	8	*
NAME	18:8	18:8	6	description
LEAF_NODE	18:8	18:8	7	description
LEAF_NODE	0:0	0:0	6	;
INIT	18:8	18:8	6	description = purple_account_get_current_error ( account ) -> description
ASSIGN	18:8	19:3	7	description = purple_account_get_current_error ( account ) -> description
LVAL	18:8	18:8	8	description
NAME	18:8	18:8	9	description
LEAF_NODE	18:8	18:8	10	description
ASSIGN_OP	18:20	18:20	8	=
LEAF_NODE	18:20	18:20	9	=
RVAL	19:3	19:46	8	purple_account_get_current_error ( account ) -> description
FUNCTION_CALL	19:3	19:43	9	purple_account_get_current_error ( account )
CALLEE	19:3	19:3	10	purple_account_get_current_error
LEAF_NODE	19:3	19:3	11	purple_account_get_current_error
LEAF_NODE	19:35	19:35	10	(
ARGUMENT	19:36	19:36	10	account
FIELD	19:36	19:36	11	account
LEAF_NODE	19:36	19:36	12	account
LEAF_NODE	19:43	19:43	10	)
LEAF_NODE	19:44	19:44	9	->
LEAF_NODE	19:46	19:46	9	description
LEAF_NODE	19:57	19:57	5	;
SELECTION	20:2	21:3	4	
KEYWORD	20:2	20:2	5	if
LEAF_NODE	20:2	20:2	6	if
LEAF_NODE	20:5	20:5	5	(
CONDITION	20:6	20:6	5	description != NULL && * description != '\0'
EXPR	20:6	20:6	6	description != NULL && * description != '\0'
AND	20:6	20:29	7	description != NULL && * description != '\0'
EXPR	20:6	20:21	8	description != NULL
FIELD	20:6	20:6	9	description
LEAF_NODE	20:6	20:6	10	description
EQ_OPERATOR	20:18	20:18	9	!=
LEAF_NODE	20:18	20:18	10	!=
FIELD	20:21	20:21	9	NULL
LEAF_NODE	20:21	20:21	10	NULL
LEAF_NODE	20:26	20:26	8	&&
EXPR	20:29	20:45	8	* description != '\0'
UNARY_EXPR	20:29	20:30	9	* description
UNARY_OPERATOR	20:29	20:29	10	*
LEAF_NODE	20:29	20:29	11	*
FIELD	20:30	20:30	10	description
LEAF_NODE	20:30	20:30	11	description
EQ_OPERATOR	20:42	20:42	9	!=
LEAF_NODE	20:42	20:42	10	!=
FIELD	20:45	20:45	9	'\0'
LEAF_NODE	20:45	20:45	10	'\0'
LEAF_NODE	20:49	20:49	5	)
STATEMENTS	21:3	21:3	5	
EXPR_STATEMENT	21:3	21:50	6	gtk_widget_set_tooltip_text ( label , description ) ;
EXPR	21:3	21:3	7	gtk_widget_set_tooltip_text ( label , description )
FUNCTION_CALL	21:3	21:49	8	gtk_widget_set_tooltip_text ( label , description )
CALLEE	21:3	21:3	9	gtk_widget_set_tooltip_text
LEAF_NODE	21:3	21:3	10	gtk_widget_set_tooltip_text
LEAF_NODE	21:30	21:30	9	(
ARGUMENT	21:31	21:31	9	label
FIELD	21:31	21:31	10	label
LEAF_NODE	21:31	21:31	11	label
LEAF_NODE	21:36	21:36	9	,
ARGUMENT	21:38	21:38	9	description
FIELD	21:38	21:38	10	description
LEAF_NODE	21:38	21:38	11	description
LEAF_NODE	21:49	21:49	9	)
LEAF_NODE	21:50	21:50	7	;
LEAF_NODE	22:1	22:1	3	}
EXPR_STATEMENT	24:1	24:56	3	gtk_box_pack_start ( GTK_BOX ( hbox ) , label , TRUE , TRUE , 0 ) ;
EXPR	24:1	24:1	4	gtk_box_pack_start ( GTK_BOX ( hbox ) , label , TRUE , TRUE , 0 )
FUNCTION_CALL	24:1	24:55	5	gtk_box_pack_start ( GTK_BOX ( hbox ) , label , TRUE , TRUE , 0 )
CALLEE	24:1	24:1	6	gtk_box_pack_start
LEAF_NODE	24:1	24:1	7	gtk_box_pack_start
LEAF_NODE	24:19	24:19	6	(
ARGUMENT	24:20	24:20	6	GTK_BOX ( hbox )
FUNCTION_CALL	24:20	24:32	7	GTK_BOX ( hbox )
CALLEE	24:20	24:20	8	GTK_BOX
LEAF_NODE	24:20	24:20	9	GTK_BOX
LEAF_NODE	24:27	24:27	8	(
ARGUMENT	24:28	24:28	8	hbox
FIELD	24:28	24:28	9	hbox
LEAF_NODE	24:28	24:28	10	hbox
LEAF_NODE	24:32	24:32	8	)
LEAF_NODE	24:33	24:33	6	,
ARGUMENT	24:35	24:35	6	label
FIELD	24:35	24:35	7	label
LEAF_NODE	24:35	24:35	8	label
LEAF_NODE	24:40	24:40	6	,
ARGUMENT	24:42	24:42	6	TRUE
FIELD	24:42	24:42	7	TRUE
LEAF_NODE	24:42	24:42	8	TRUE
LEAF_NODE	24:46	24:46	6	,
ARGUMENT	24:48	24:48	6	TRUE
FIELD	24:48	24:48	7	TRUE
LEAF_NODE	24:48	24:48	8	TRUE
LEAF_NODE	24:52	24:52	6	,
ARGUMENT	24:54	24:54	6	0
FIELD	24:54	24:54	7	0
LEAF_NODE	24:54	24:54	8	0
LEAF_NODE	24:55	24:55	6	)
LEAF_NODE	24:56	24:56	4	;
JUMP_STATEMENT	25:1	25:12	3	return hbox ;
KEYWORD	25:1	25:1	4	return
LEAF_NODE	25:1	25:1	5	return
DESTINATION	25:8	25:8	4	hbox
EXPR	25:8	25:8	5	hbox
FIELD	25:8	25:8	6	hbox
LEAF_NODE	25:8	25:8	7	hbox
LEAF_NODE	25:12	25:12	4	;
LEAF_NODE	26:0	26:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	160:0	1	
RETURN_TYPE	2:0	2:5	2	char *
TYPE_NAME	2:0	2:0	3	char
LEAF_NODE	2:0	2:0	4	char
LEAF_NODE	2:5	2:5	3	*
FUNCTION_NAME	2:6	2:6	2	jabber_parse_error
LEAF_NODE	2:6	2:6	3	jabber_parse_error
PARAMETER_LIST	2:24	4:54	2	( JabberStream * js , xmlnode * packet , PurpleConnectionError * reason )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:39	3	JabberStream * js
TYPE	2:25	2:38	4	JabberStream *
TYPE_NAME	2:25	2:25	5	JabberStream
LEAF_NODE	2:25	2:25	6	JabberStream
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	js
LEAF_NODE	2:39	2:39	5	js
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	3:25	3:34	3	xmlnode * packet
TYPE	3:25	3:33	4	xmlnode *
TYPE_NAME	3:25	3:25	5	xmlnode
LEAF_NODE	3:25	3:25	6	xmlnode
POINTER	3:33	3:33	5	*
LEAF_NODE	3:33	3:33	6	*
NAME	3:34	3:34	4	packet
LEAF_NODE	3:34	3:34	5	packet
LEAF_NODE	3:40	3:40	3	,
PARAMETER_DECL	4:25	4:48	3	PurpleConnectionError * reason
TYPE	4:25	4:47	4	PurpleConnectionError *
TYPE_NAME	4:25	4:25	5	PurpleConnectionError
LEAF_NODE	4:25	4:25	6	PurpleConnectionError
POINTER	4:47	4:47	5	*
LEAF_NODE	4:47	4:47	6	*
NAME	4:48	4:48	4	reason
LEAF_NODE	4:48	4:48	5	reason
LEAF_NODE	4:54	4:54	3	)
LEAF_NODE	5:0	5:0	2	{
STATEMENTS	6:1	157:3	2	
SIMPLE_DECL	6:1	6:15	3	xmlnode * error ;
VAR_DECL	6:1	6:10	4	xmlnode * error
TYPE	6:1	6:9	5	xmlnode *
TYPE_NAME	6:1	6:1	6	xmlnode
LEAF_NODE	6:1	6:1	7	xmlnode
POINTER	6:9	6:9	6	*
LEAF_NODE	6:9	6:9	7	*
NAME	6:10	6:10	5	error
LEAF_NODE	6:10	6:10	6	error
LEAF_NODE	6:15	6:15	4	;
SIMPLE_DECL	7:1	7:38	3	const char * code ; code = NULL , const char * text ; text = NULL ;
INIT_DECL_LIST	7:1	7:1	4	const char * code ; code = NULL , const char * text ; text = NULL
VAR_DECL	7:1	7:13	5	const char * code ; code = NULL
TYPE	7:1	7:12	6	const char *
TYPE_NAME	7:1	7:7	7	const char
LEAF_NODE	7:1	7:1	8	const
LEAF_NODE	7:7	7:7	8	char
POINTER	7:12	7:12	7	*
LEAF_NODE	7:12	7:12	8	*
NAME	7:13	7:13	6	code
LEAF_NODE	7:13	7:13	7	code
LEAF_NODE	0:0	0:0	6	;
INIT	7:13	7:13	6	code = NULL
ASSIGN	7:13	7:20	7	code = NULL
LVAL	7:13	7:13	8	code
NAME	7:13	7:13	9	code
LEAF_NODE	7:13	7:13	10	code
ASSIGN_OP	7:18	7:18	8	=
LEAF_NODE	7:18	7:18	9	=
RVAL	7:20	7:20	8	NULL
FIELD	7:20	7:20	9	NULL
LEAF_NODE	7:20	7:20	10	NULL
LEAF_NODE	7:24	7:24	5	,
VAR_DECL	7:1	7:27	5	const char * text ; text = NULL
TYPE	7:1	7:26	6	const char *
TYPE_NAME	7:1	7:7	7	const char
LEAF_NODE	7:1	7:1	8	const
LEAF_NODE	7:7	7:7	8	char
POINTER	7:26	7:26	7	*
LEAF_NODE	7:26	7:26	8	*
NAME	7:27	7:27	6	text
LEAF_NODE	7:27	7:27	7	text
LEAF_NODE	0:0	0:0	6	;
INIT	7:27	7:27	6	text = NULL
ASSIGN	7:27	7:34	7	text = NULL
LVAL	7:27	7:27	8	text
NAME	7:27	7:27	9	text
LEAF_NODE	7:27	7:27	10	text
ASSIGN_OP	7:32	7:32	8	=
LEAF_NODE	7:32	7:32	9	=
RVAL	7:34	7:34	8	NULL
FIELD	7:34	7:34	9	NULL
LEAF_NODE	7:34	7:34	10	NULL
LEAF_NODE	7:38	7:38	4	;
SIMPLE_DECL	8:1	8:50	3	const char * xmlns ; xmlns = xmlnode_get_namespace ( packet ) ;
VAR_DECL	8:1	8:13	4	const char * xmlns ; xmlns = xmlnode_get_namespace ( packet )
TYPE	8:1	8:12	5	const char *
TYPE_NAME	8:1	8:7	6	const char
LEAF_NODE	8:1	8:1	7	const
LEAF_NODE	8:7	8:7	7	char
POINTER	8:12	8:12	6	*
LEAF_NODE	8:12	8:12	7	*
NAME	8:13	8:13	5	xmlns
LEAF_NODE	8:13	8:13	6	xmlns
LEAF_NODE	0:0	0:0	5	;
INIT	8:13	8:13	5	xmlns = xmlnode_get_namespace ( packet )
ASSIGN	8:13	8:21	6	xmlns = xmlnode_get_namespace ( packet )
LVAL	8:13	8:13	7	xmlns
NAME	8:13	8:13	8	xmlns
LEAF_NODE	8:13	8:13	9	xmlns
ASSIGN_OP	8:19	8:19	7	=
LEAF_NODE	8:19	8:19	8	=
RVAL	8:21	8:21	7	xmlnode_get_namespace ( packet )
FUNCTION_CALL	8:21	8:49	8	xmlnode_get_namespace ( packet )
CALLEE	8:21	8:21	9	xmlnode_get_namespace
LEAF_NODE	8:21	8:21	10	xmlnode_get_namespace
LEAF_NODE	8:42	8:42	9	(
ARGUMENT	8:43	8:43	9	packet
FIELD	8:43	8:43	10	packet
LEAF_NODE	8:43	8:43	11	packet
LEAF_NODE	8:49	8:49	9	)
LEAF_NODE	8:50	8:50	4	;
SIMPLE_DECL	9:1	9:19	3	char * cdata ; cdata = NULL ;
VAR_DECL	9:1	9:7	4	char * cdata ; cdata = NULL
TYPE	9:1	9:6	5	char *
TYPE_NAME	9:1	9:1	6	char
LEAF_NODE	9:1	9:1	7	char
POINTER	9:6	9:6	6	*
LEAF_NODE	9:6	9:6	7	*
NAME	9:7	9:7	5	cdata
LEAF_NODE	9:7	9:7	6	cdata
LEAF_NODE	0:0	0:0	5	;
INIT	9:7	9:7	5	cdata = NULL
ASSIGN	9:7	9:15	6	cdata = NULL
LVAL	9:7	9:7	7	cdata
NAME	9:7	9:7	8	cdata
LEAF_NODE	9:7	9:7	9	cdata
ASSIGN_OP	9:13	9:13	7	=
LEAF_NODE	9:13	9:13	8	=
RVAL	9:15	9:15	7	NULL
FIELD	9:15	9:15	8	NULL
LEAF_NODE	9:15	9:15	9	NULL
LEAF_NODE	9:19	9:19	4	;
SELECTION	12:1	12:50	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:3	12:3	4	(
CONDITION	12:4	12:4	4	( error = xmlnode_get_child ( packet , "error" ) )
EXPR	12:4	12:47	5	( error = xmlnode_get_child ( packet , "error" ) )
LEAF_NODE	12:4	12:4	6	(
ASSIGN	12:5	12:13	6	error = xmlnode_get_child ( packet , "error" )
LVAL	12:5	12:5	7	error
FIELD	12:5	12:5	8	error
LEAF_NODE	12:5	12:5	9	error
ASSIGN_OP	12:11	12:11	7	=
LEAF_NODE	12:11	12:11	8	=
RVAL	12:13	12:13	7	xmlnode_get_child ( packet , "error" )
FUNCTION_CALL	12:13	12:46	8	xmlnode_get_child ( packet , "error" )
CALLEE	12:13	12:13	9	xmlnode_get_child
LEAF_NODE	12:13	12:13	10	xmlnode_get_child
LEAF_NODE	12:30	12:30	9	(
ARGUMENT	12:31	12:31	9	packet
FIELD	12:31	12:31	10	packet
LEAF_NODE	12:31	12:31	11	packet
LEAF_NODE	12:37	12:37	9	,
ARGUMENT	12:39	12:39	9	"error"
FIELD	12:39	12:39	10	"error"
LEAF_NODE	12:39	12:39	11	"error"
LEAF_NODE	12:46	12:46	9	)
LEAF_NODE	12:47	12:47	6	)
LEAF_NODE	12:48	12:48	4	)
STATEMENTS	12:50	67:1	4	
LEAF_NODE	12:50	12:50	5	{
STATEMENTS	13:2	64:4	5	
SIMPLE_DECL	13:2	13:79	6	xmlnode * t ; t = xmlnode_get_child_with_namespace ( error , "text" , NS_XMPP_STANZAS ) ;
VAR_DECL	13:2	13:11	7	xmlnode * t ; t = xmlnode_get_child_with_namespace ( error , "text" , NS_XMPP_STANZAS )
TYPE	13:2	13:10	8	xmlnode *
TYPE_NAME	13:2	13:2	9	xmlnode
LEAF_NODE	13:2	13:2	10	xmlnode
POINTER	13:10	13:10	9	*
LEAF_NODE	13:10	13:10	10	*
NAME	13:11	13:11	8	t
LEAF_NODE	13:11	13:11	9	t
LEAF_NODE	0:0	0:0	8	;
INIT	13:11	13:11	8	t = xmlnode_get_child_with_namespace ( error , "text" , NS_XMPP_STANZAS )
ASSIGN	13:11	13:15	9	t = xmlnode_get_child_with_namespace ( error , "text" , NS_XMPP_STANZAS )
LVAL	13:11	13:11	10	t
NAME	13:11	13:11	11	t
LEAF_NODE	13:11	13:11	12	t
ASSIGN_OP	13:13	13:13	10	=
LEAF_NODE	13:13	13:13	11	=
RVAL	13:15	13:15	10	xmlnode_get_child_with_namespace ( error , "text" , NS_XMPP_STANZAS )
FUNCTION_CALL	13:15	13:78	11	xmlnode_get_child_with_namespace ( error , "text" , NS_XMPP_STANZAS )
CALLEE	13:15	13:15	12	xmlnode_get_child_with_namespace
LEAF_NODE	13:15	13:15	13	xmlnode_get_child_with_namespace
LEAF_NODE	13:47	13:47	12	(
ARGUMENT	13:48	13:48	12	error
FIELD	13:48	13:48	13	error
LEAF_NODE	13:48	13:48	14	error
LEAF_NODE	13:53	13:53	12	,
ARGUMENT	13:55	13:55	12	"text"
FIELD	13:55	13:55	13	"text"
LEAF_NODE	13:55	13:55	14	"text"
LEAF_NODE	13:61	13:61	12	,
ARGUMENT	13:63	13:63	12	NS_XMPP_STANZAS
FIELD	13:63	13:63	13	NS_XMPP_STANZAS
LEAF_NODE	13:63	13:63	14	NS_XMPP_STANZAS
LEAF_NODE	13:78	13:78	12	)
LEAF_NODE	13:79	13:79	7	;
SELECTION	14:2	15:3	6	
KEYWORD	14:2	14:2	7	if
LEAF_NODE	14:2	14:2	8	if
LEAF_NODE	14:5	14:5	7	(
CONDITION	14:6	14:6	7	t
EXPR	14:6	14:6	8	t
FIELD	14:6	14:6	9	t
LEAF_NODE	14:6	14:6	10	t
LEAF_NODE	14:7	14:7	7	)
STATEMENTS	15:3	15:3	7	
EXPR_STATEMENT	15:3	15:30	8	cdata = xmlnode_get_data ( t ) ;
EXPR	15:3	15:3	9	cdata = xmlnode_get_data ( t )
ASSIGN	15:3	15:11	10	cdata = xmlnode_get_data ( t )
LVAL	15:3	15:3	11	cdata
FIELD	15:3	15:3	12	cdata
LEAF_NODE	15:3	15:3	13	cdata
ASSIGN_OP	15:9	15:9	11	=
LEAF_NODE	15:9	15:9	12	=
RVAL	15:11	15:11	11	xmlnode_get_data ( t )
FUNCTION_CALL	15:11	15:29	12	xmlnode_get_data ( t )
CALLEE	15:11	15:11	13	xmlnode_get_data
LEAF_NODE	15:11	15:11	14	xmlnode_get_data
LEAF_NODE	15:27	15:27	13	(
ARGUMENT	15:28	15:28	13	t
FIELD	15:28	15:28	14	t
LEAF_NODE	15:28	15:28	15	t
LEAF_NODE	15:29	15:29	13	)
LEAF_NODE	15:30	15:30	9	;
EXPR_STATEMENT	17:2	17:33	6	cdata = xmlnode_get_data ( error ) ;
EXPR	17:2	17:2	7	cdata = xmlnode_get_data ( error )
ASSIGN	17:2	17:10	8	cdata = xmlnode_get_data ( error )
LVAL	17:2	17:2	9	cdata
FIELD	17:2	17:2	10	cdata
LEAF_NODE	17:2	17:2	11	cdata
ASSIGN_OP	17:8	17:8	9	=
LEAF_NODE	17:8	17:8	10	=
RVAL	17:10	17:10	9	xmlnode_get_data ( error )
FUNCTION_CALL	17:10	17:32	10	xmlnode_get_data ( error )
CALLEE	17:10	17:10	11	xmlnode_get_data
LEAF_NODE	17:10	17:10	12	xmlnode_get_data
LEAF_NODE	17:26	17:26	11	(
ARGUMENT	17:27	17:27	11	error
FIELD	17:27	17:27	12	error
LEAF_NODE	17:27	17:27	13	error
LEAF_NODE	17:32	17:32	11	)
LEAF_NODE	17:33	17:33	7	;
EXPR_STATEMENT	19:2	19:42	6	code = xmlnode_get_attrib ( error , "code" ) ;
EXPR	19:2	19:2	7	code = xmlnode_get_attrib ( error , "code" )
ASSIGN	19:2	19:9	8	code = xmlnode_get_attrib ( error , "code" )
LVAL	19:2	19:2	9	code
FIELD	19:2	19:2	10	code
LEAF_NODE	19:2	19:2	11	code
ASSIGN_OP	19:7	19:7	9	=
LEAF_NODE	19:7	19:7	10	=
RVAL	19:9	19:9	9	xmlnode_get_attrib ( error , "code" )
FUNCTION_CALL	19:9	19:41	10	xmlnode_get_attrib ( error , "code" )
CALLEE	19:9	19:9	11	xmlnode_get_attrib
LEAF_NODE	19:9	19:9	12	xmlnode_get_attrib
LEAF_NODE	19:27	19:27	11	(
ARGUMENT	19:28	19:28	11	error
FIELD	19:28	19:28	12	error
LEAF_NODE	19:28	19:28	13	error
LEAF_NODE	19:33	19:33	11	,
ARGUMENT	19:35	19:35	11	"code"
FIELD	19:35	19:35	12	"code"
LEAF_NODE	19:35	19:35	13	"code"
LEAF_NODE	19:41	19:41	11	)
LEAF_NODE	19:42	19:42	7	;
SELECTION	21:2	21:46	6	
KEYWORD	21:2	21:2	7	if
LEAF_NODE	21:2	21:2	8	if
LEAF_NODE	21:4	21:4	7	(
CONDITION	21:5	21:5	7	xmlnode_get_child ( error , "bad-request" )
EXPR	21:5	21:5	8	xmlnode_get_child ( error , "bad-request" )
FUNCTION_CALL	21:5	21:43	9	xmlnode_get_child ( error , "bad-request" )
CALLEE	21:5	21:5	10	xmlnode_get_child
LEAF_NODE	21:5	21:5	11	xmlnode_get_child
LEAF_NODE	21:22	21:22	10	(
ARGUMENT	21:23	21:23	10	error
FIELD	21:23	21:23	11	error
LEAF_NODE	21:23	21:23	12	error
LEAF_NODE	21:28	21:28	10	,
ARGUMENT	21:30	21:30	10	"bad-request"
FIELD	21:30	21:30	11	"bad-request"
LEAF_NODE	21:30	21:30	12	"bad-request"
LEAF_NODE	21:43	21:43	10	)
LEAF_NODE	21:44	21:44	7	)
STATEMENTS	21:46	23:2	7	
LEAF_NODE	21:46	21:46	8	{
STATEMENTS	22:3	22:3	8	
EXPR_STATEMENT	22:3	22:26	9	text = _ ( "Bad Request" ) ;
EXPR	22:3	22:3	10	text = _ ( "Bad Request" )
ASSIGN	22:3	22:10	11	text = _ ( "Bad Request" )
LVAL	22:3	22:3	12	text
FIELD	22:3	22:3	13	text
LEAF_NODE	22:3	22:3	14	text
ASSIGN_OP	22:8	22:8	12	=
LEAF_NODE	22:8	22:8	13	=
RVAL	22:10	22:10	12	_ ( "Bad Request" )
FUNCTION_CALL	22:10	22:25	13	_ ( "Bad Request" )
CALLEE	22:10	22:10	14	_
LEAF_NODE	22:10	22:10	15	_
LEAF_NODE	22:11	22:11	14	(
ARGUMENT	22:12	22:12	14	"Bad Request"
FIELD	22:12	22:12	15	"Bad Request"
LEAF_NODE	22:12	22:12	16	"Bad Request"
LEAF_NODE	22:25	22:25	14	)
LEAF_NODE	22:26	22:26	10	;
LEAF_NODE	23:2	23:2	8	}
SELECTION	23:4	23:9	6	
KEYWORD	23:4	23:4	7	else
LEAF_NODE	23:4	23:4	8	else
STATEMENTS	23:9	23:9	7	
SELECTION	23:9	23:50	8	
KEYWORD	23:9	23:9	9	if
LEAF_NODE	23:9	23:9	10	if
LEAF_NODE	23:11	23:11	9	(
CONDITION	23:12	23:12	9	xmlnode_get_child ( error , "conflict" )
EXPR	23:12	23:12	10	xmlnode_get_child ( error , "conflict" )
FUNCTION_CALL	23:12	23:47	11	xmlnode_get_child ( error , "conflict" )
CALLEE	23:12	23:12	12	xmlnode_get_child
LEAF_NODE	23:12	23:12	13	xmlnode_get_child
LEAF_NODE	23:29	23:29	12	(
ARGUMENT	23:30	23:30	12	error
FIELD	23:30	23:30	13	error
LEAF_NODE	23:30	23:30	14	error
LEAF_NODE	23:35	23:35	12	,
ARGUMENT	23:37	23:37	12	"conflict"
FIELD	23:37	23:37	13	"conflict"
LEAF_NODE	23:37	23:37	14	"conflict"
LEAF_NODE	23:47	23:47	12	)
LEAF_NODE	23:48	23:48	9	)
STATEMENTS	23:50	26:2	9	
LEAF_NODE	23:50	23:50	10	{
STATEMENTS	24:3	25:3	10	
EXPR_STATEMENT	24:3	24:50	11	SET_REASON ( PURPLE_CONNECTION_ERROR_NAME_IN_USE ) ;
EXPR	24:3	24:3	12	SET_REASON ( PURPLE_CONNECTION_ERROR_NAME_IN_USE )
FUNCTION_CALL	24:3	24:49	13	SET_REASON ( PURPLE_CONNECTION_ERROR_NAME_IN_USE )
CALLEE	24:3	24:3	14	SET_REASON
LEAF_NODE	24:3	24:3	15	SET_REASON
LEAF_NODE	24:13	24:13	14	(
ARGUMENT	24:14	24:14	14	PURPLE_CONNECTION_ERROR_NAME_IN_USE
FIELD	24:14	24:14	15	PURPLE_CONNECTION_ERROR_NAME_IN_USE
LEAF_NODE	24:14	24:14	16	PURPLE_CONNECTION_ERROR_NAME_IN_USE
LEAF_NODE	24:49	24:49	14	)
LEAF_NODE	24:50	24:50	12	;
EXPR_STATEMENT	25:3	25:23	11	text = _ ( "Conflict" ) ;
EXPR	25:3	25:3	12	text = _ ( "Conflict" )
ASSIGN	25:3	25:10	13	text = _ ( "Conflict" )
LVAL	25:3	25:3	14	text
FIELD	25:3	25:3	15	text
LEAF_NODE	25:3	25:3	16	text
ASSIGN_OP	25:8	25:8	14	=
LEAF_NODE	25:8	25:8	15	=
RVAL	25:10	25:10	14	_ ( "Conflict" )
FUNCTION_CALL	25:10	25:22	15	_ ( "Conflict" )
CALLEE	25:10	25:10	16	_
LEAF_NODE	25:10	25:10	17	_
LEAF_NODE	25:11	25:11	16	(
ARGUMENT	25:12	25:12	16	"Conflict"
FIELD	25:12	25:12	17	"Conflict"
LEAF_NODE	25:12	25:12	18	"Conflict"
LEAF_NODE	25:22	25:22	16	)
LEAF_NODE	25:23	25:23	12	;
LEAF_NODE	26:2	26:2	10	}
SELECTION	26:4	26:9	6	
KEYWORD	26:4	26:4	7	else
LEAF_NODE	26:4	26:4	8	else
STATEMENTS	26:9	26:9	7	
SELECTION	26:9	26:65	8	
KEYWORD	26:9	26:9	9	if
LEAF_NODE	26:9	26:9	10	if
LEAF_NODE	26:11	26:11	9	(
CONDITION	26:12	26:12	9	xmlnode_get_child ( error , "feature-not-implemented" )
EXPR	26:12	26:12	10	xmlnode_get_child ( error , "feature-not-implemented" )
FUNCTION_CALL	26:12	26:62	11	xmlnode_get_child ( error , "feature-not-implemented" )
CALLEE	26:12	26:12	12	xmlnode_get_child
LEAF_NODE	26:12	26:12	13	xmlnode_get_child
LEAF_NODE	26:29	26:29	12	(
ARGUMENT	26:30	26:30	12	error
FIELD	26:30	26:30	13	error
LEAF_NODE	26:30	26:30	14	error
LEAF_NODE	26:35	26:35	12	,
ARGUMENT	26:37	26:37	12	"feature-not-implemented"
FIELD	26:37	26:37	13	"feature-not-implemented"
LEAF_NODE	26:37	26:37	14	"feature-not-implemented"
LEAF_NODE	26:62	26:62	12	)
LEAF_NODE	26:63	26:63	9	)
STATEMENTS	26:65	28:2	9	
LEAF_NODE	26:65	26:65	10	{
STATEMENTS	27:3	27:3	10	
EXPR_STATEMENT	27:3	27:38	11	text = _ ( "Feature Not Implemented" ) ;
EXPR	27:3	27:3	12	text = _ ( "Feature Not Implemented" )
ASSIGN	27:3	27:10	13	text = _ ( "Feature Not Implemented" )
LVAL	27:3	27:3	14	text
FIELD	27:3	27:3	15	text
LEAF_NODE	27:3	27:3	16	text
ASSIGN_OP	27:8	27:8	14	=
LEAF_NODE	27:8	27:8	15	=
RVAL	27:10	27:10	14	_ ( "Feature Not Implemented" )
FUNCTION_CALL	27:10	27:37	15	_ ( "Feature Not Implemented" )
CALLEE	27:10	27:10	16	_
LEAF_NODE	27:10	27:10	17	_
LEAF_NODE	27:11	27:11	16	(
ARGUMENT	27:12	27:12	16	"Feature Not Implemented"
FIELD	27:12	27:12	17	"Feature Not Implemented"
LEAF_NODE	27:12	27:12	18	"Feature Not Implemented"
LEAF_NODE	27:37	27:37	16	)
LEAF_NODE	27:38	27:38	12	;
LEAF_NODE	28:2	28:2	10	}
SELECTION	28:4	28:9	6	
KEYWORD	28:4	28:4	7	else
LEAF_NODE	28:4	28:4	8	else
STATEMENTS	28:9	28:9	7	
SELECTION	28:9	28:51	8	
KEYWORD	28:9	28:9	9	if
LEAF_NODE	28:9	28:9	10	if
LEAF_NODE	28:11	28:11	9	(
CONDITION	28:12	28:12	9	xmlnode_get_child ( error , "forbidden" )
EXPR	28:12	28:12	10	xmlnode_get_child ( error , "forbidden" )
FUNCTION_CALL	28:12	28:48	11	xmlnode_get_child ( error , "forbidden" )
CALLEE	28:12	28:12	12	xmlnode_get_child
LEAF_NODE	28:12	28:12	13	xmlnode_get_child
LEAF_NODE	28:29	28:29	12	(
ARGUMENT	28:30	28:30	12	error
FIELD	28:30	28:30	13	error
LEAF_NODE	28:30	28:30	14	error
LEAF_NODE	28:35	28:35	12	,
ARGUMENT	28:37	28:37	12	"forbidden"
FIELD	28:37	28:37	13	"forbidden"
LEAF_NODE	28:37	28:37	14	"forbidden"
LEAF_NODE	28:48	28:48	12	)
LEAF_NODE	28:49	28:49	9	)
STATEMENTS	28:51	30:2	9	
LEAF_NODE	28:51	28:51	10	{
STATEMENTS	29:3	29:3	10	
EXPR_STATEMENT	29:3	29:24	11	text = _ ( "Forbidden" ) ;
EXPR	29:3	29:3	12	text = _ ( "Forbidden" )
ASSIGN	29:3	29:10	13	text = _ ( "Forbidden" )
LVAL	29:3	29:3	14	text
FIELD	29:3	29:3	15	text
LEAF_NODE	29:3	29:3	16	text
ASSIGN_OP	29:8	29:8	14	=
LEAF_NODE	29:8	29:8	15	=
RVAL	29:10	29:10	14	_ ( "Forbidden" )
FUNCTION_CALL	29:10	29:23	15	_ ( "Forbidden" )
CALLEE	29:10	29:10	16	_
LEAF_NODE	29:10	29:10	17	_
LEAF_NODE	29:11	29:11	16	(
ARGUMENT	29:12	29:12	16	"Forbidden"
FIELD	29:12	29:12	17	"Forbidden"
LEAF_NODE	29:12	29:12	18	"Forbidden"
LEAF_NODE	29:23	29:23	16	)
LEAF_NODE	29:24	29:24	12	;
LEAF_NODE	30:2	30:2	10	}
SELECTION	30:4	30:9	6	
KEYWORD	30:4	30:4	7	else
LEAF_NODE	30:4	30:4	8	else
STATEMENTS	30:9	30:9	7	
SELECTION	30:9	30:46	8	
KEYWORD	30:9	30:9	9	if
LEAF_NODE	30:9	30:9	10	if
LEAF_NODE	30:11	30:11	9	(
CONDITION	30:12	30:12	9	xmlnode_get_child ( error , "gone" )
EXPR	30:12	30:12	10	xmlnode_get_child ( error , "gone" )
FUNCTION_CALL	30:12	30:43	11	xmlnode_get_child ( error , "gone" )
CALLEE	30:12	30:12	12	xmlnode_get_child
LEAF_NODE	30:12	30:12	13	xmlnode_get_child
LEAF_NODE	30:29	30:29	12	(
ARGUMENT	30:30	30:30	12	error
FIELD	30:30	30:30	13	error
LEAF_NODE	30:30	30:30	14	error
LEAF_NODE	30:35	30:35	12	,
ARGUMENT	30:37	30:37	12	"gone"
FIELD	30:37	30:37	13	"gone"
LEAF_NODE	30:37	30:37	14	"gone"
LEAF_NODE	30:43	30:43	12	)
LEAF_NODE	30:44	30:44	9	)
STATEMENTS	30:46	32:2	9	
LEAF_NODE	30:46	30:46	10	{
STATEMENTS	31:3	31:3	10	
EXPR_STATEMENT	31:3	31:19	11	text = _ ( "Gone" ) ;
EXPR	31:3	31:3	12	text = _ ( "Gone" )
ASSIGN	31:3	31:10	13	text = _ ( "Gone" )
LVAL	31:3	31:3	14	text
FIELD	31:3	31:3	15	text
LEAF_NODE	31:3	31:3	16	text
ASSIGN_OP	31:8	31:8	14	=
LEAF_NODE	31:8	31:8	15	=
RVAL	31:10	31:10	14	_ ( "Gone" )
FUNCTION_CALL	31:10	31:18	15	_ ( "Gone" )
CALLEE	31:10	31:10	16	_
LEAF_NODE	31:10	31:10	17	_
LEAF_NODE	31:11	31:11	16	(
ARGUMENT	31:12	31:12	16	"Gone"
FIELD	31:12	31:12	17	"Gone"
LEAF_NODE	31:12	31:12	18	"Gone"
LEAF_NODE	31:18	31:18	16	)
LEAF_NODE	31:19	31:19	12	;
LEAF_NODE	32:2	32:2	10	}
SELECTION	32:4	32:9	6	
KEYWORD	32:4	32:4	7	else
LEAF_NODE	32:4	32:4	8	else
STATEMENTS	32:9	32:9	7	
SELECTION	32:9	32:63	8	
KEYWORD	32:9	32:9	9	if
LEAF_NODE	32:9	32:9	10	if
LEAF_NODE	32:11	32:11	9	(
CONDITION	32:12	32:12	9	xmlnode_get_child ( error , "internal-server-error" )
EXPR	32:12	32:12	10	xmlnode_get_child ( error , "internal-server-error" )
FUNCTION_CALL	32:12	32:60	11	xmlnode_get_child ( error , "internal-server-error" )
CALLEE	32:12	32:12	12	xmlnode_get_child
LEAF_NODE	32:12	32:12	13	xmlnode_get_child
LEAF_NODE	32:29	32:29	12	(
ARGUMENT	32:30	32:30	12	error
FIELD	32:30	32:30	13	error
LEAF_NODE	32:30	32:30	14	error
LEAF_NODE	32:35	32:35	12	,
ARGUMENT	32:37	32:37	12	"internal-server-error"
FIELD	32:37	32:37	13	"internal-server-error"
LEAF_NODE	32:37	32:37	14	"internal-server-error"
LEAF_NODE	32:60	32:60	12	)
LEAF_NODE	32:61	32:61	9	)
STATEMENTS	32:63	34:2	9	
LEAF_NODE	32:63	32:63	10	{
STATEMENTS	33:3	33:3	10	
EXPR_STATEMENT	33:3	33:36	11	text = _ ( "Internal Server Error" ) ;
EXPR	33:3	33:3	12	text = _ ( "Internal Server Error" )
ASSIGN	33:3	33:10	13	text = _ ( "Internal Server Error" )
LVAL	33:3	33:3	14	text
FIELD	33:3	33:3	15	text
LEAF_NODE	33:3	33:3	16	text
ASSIGN_OP	33:8	33:8	14	=
LEAF_NODE	33:8	33:8	15	=
RVAL	33:10	33:10	14	_ ( "Internal Server Error" )
FUNCTION_CALL	33:10	33:35	15	_ ( "Internal Server Error" )
CALLEE	33:10	33:10	16	_
LEAF_NODE	33:10	33:10	17	_
LEAF_NODE	33:11	33:11	16	(
ARGUMENT	33:12	33:12	16	"Internal Server Error"
FIELD	33:12	33:12	17	"Internal Server Error"
LEAF_NODE	33:12	33:12	18	"Internal Server Error"
LEAF_NODE	33:35	33:35	16	)
LEAF_NODE	33:36	33:36	12	;
LEAF_NODE	34:2	34:2	10	}
SELECTION	34:4	34:9	6	
KEYWORD	34:4	34:4	7	else
LEAF_NODE	34:4	34:4	8	else
STATEMENTS	34:9	34:9	7	
SELECTION	34:9	34:56	8	
KEYWORD	34:9	34:9	9	if
LEAF_NODE	34:9	34:9	10	if
LEAF_NODE	34:11	34:11	9	(
CONDITION	34:12	34:12	9	xmlnode_get_child ( error , "item-not-found" )
EXPR	34:12	34:12	10	xmlnode_get_child ( error , "item-not-found" )
FUNCTION_CALL	34:12	34:53	11	xmlnode_get_child ( error , "item-not-found" )
CALLEE	34:12	34:12	12	xmlnode_get_child
LEAF_NODE	34:12	34:12	13	xmlnode_get_child
LEAF_NODE	34:29	34:29	12	(
ARGUMENT	34:30	34:30	12	error
FIELD	34:30	34:30	13	error
LEAF_NODE	34:30	34:30	14	error
LEAF_NODE	34:35	34:35	12	,
ARGUMENT	34:37	34:37	12	"item-not-found"
FIELD	34:37	34:37	13	"item-not-found"
LEAF_NODE	34:37	34:37	14	"item-not-found"
LEAF_NODE	34:53	34:53	12	)
LEAF_NODE	34:54	34:54	9	)
STATEMENTS	34:56	36:2	9	
LEAF_NODE	34:56	34:56	10	{
STATEMENTS	35:3	35:3	10	
EXPR_STATEMENT	35:3	35:29	11	text = _ ( "Item Not Found" ) ;
EXPR	35:3	35:3	12	text = _ ( "Item Not Found" )
ASSIGN	35:3	35:10	13	text = _ ( "Item Not Found" )
LVAL	35:3	35:3	14	text
FIELD	35:3	35:3	15	text
LEAF_NODE	35:3	35:3	16	text
ASSIGN_OP	35:8	35:8	14	=
LEAF_NODE	35:8	35:8	15	=
RVAL	35:10	35:10	14	_ ( "Item Not Found" )
FUNCTION_CALL	35:10	35:28	15	_ ( "Item Not Found" )
CALLEE	35:10	35:10	16	_
LEAF_NODE	35:10	35:10	17	_
LEAF_NODE	35:11	35:11	16	(
ARGUMENT	35:12	35:12	16	"Item Not Found"
FIELD	35:12	35:12	17	"Item Not Found"
LEAF_NODE	35:12	35:12	18	"Item Not Found"
LEAF_NODE	35:28	35:28	16	)
LEAF_NODE	35:29	35:29	12	;
LEAF_NODE	36:2	36:2	10	}
SELECTION	36:4	36:9	6	
KEYWORD	36:4	36:4	7	else
LEAF_NODE	36:4	36:4	8	else
STATEMENTS	36:9	36:9	7	
SELECTION	36:9	36:55	8	
KEYWORD	36:9	36:9	9	if
LEAF_NODE	36:9	36:9	10	if
LEAF_NODE	36:11	36:11	9	(
CONDITION	36:12	36:12	9	xmlnode_get_child ( error , "jid-malformed" )
EXPR	36:12	36:12	10	xmlnode_get_child ( error , "jid-malformed" )
FUNCTION_CALL	36:12	36:52	11	xmlnode_get_child ( error , "jid-malformed" )
CALLEE	36:12	36:12	12	xmlnode_get_child
LEAF_NODE	36:12	36:12	13	xmlnode_get_child
LEAF_NODE	36:29	36:29	12	(
ARGUMENT	36:30	36:30	12	error
FIELD	36:30	36:30	13	error
LEAF_NODE	36:30	36:30	14	error
LEAF_NODE	36:35	36:35	12	,
ARGUMENT	36:37	36:37	12	"jid-malformed"
FIELD	36:37	36:37	13	"jid-malformed"
LEAF_NODE	36:37	36:37	14	"jid-malformed"
LEAF_NODE	36:52	36:52	12	)
LEAF_NODE	36:53	36:53	9	)
STATEMENTS	36:55	38:2	9	
LEAF_NODE	36:55	36:55	10	{
STATEMENTS	37:3	37:3	10	
EXPR_STATEMENT	37:3	37:32	11	text = _ ( "Malformed XMPP ID" ) ;
EXPR	37:3	37:3	12	text = _ ( "Malformed XMPP ID" )
ASSIGN	37:3	37:10	13	text = _ ( "Malformed XMPP ID" )
LVAL	37:3	37:3	14	text
FIELD	37:3	37:3	15	text
LEAF_NODE	37:3	37:3	16	text
ASSIGN_OP	37:8	37:8	14	=
LEAF_NODE	37:8	37:8	15	=
RVAL	37:10	37:10	14	_ ( "Malformed XMPP ID" )
FUNCTION_CALL	37:10	37:31	15	_ ( "Malformed XMPP ID" )
CALLEE	37:10	37:10	16	_
LEAF_NODE	37:10	37:10	17	_
LEAF_NODE	37:11	37:11	16	(
ARGUMENT	37:12	37:12	16	"Malformed XMPP ID"
FIELD	37:12	37:12	17	"Malformed XMPP ID"
LEAF_NODE	37:12	37:12	18	"Malformed XMPP ID"
LEAF_NODE	37:31	37:31	16	)
LEAF_NODE	37:32	37:32	12	;
LEAF_NODE	38:2	38:2	10	}
SELECTION	38:4	38:9	6	
KEYWORD	38:4	38:4	7	else
LEAF_NODE	38:4	38:4	8	else
STATEMENTS	38:9	38:9	7	
SELECTION	38:9	38:56	8	
KEYWORD	38:9	38:9	9	if
LEAF_NODE	38:9	38:9	10	if
LEAF_NODE	38:11	38:11	9	(
CONDITION	38:12	38:12	9	xmlnode_get_child ( error , "not-acceptable" )
EXPR	38:12	38:12	10	xmlnode_get_child ( error , "not-acceptable" )
FUNCTION_CALL	38:12	38:53	11	xmlnode_get_child ( error , "not-acceptable" )
CALLEE	38:12	38:12	12	xmlnode_get_child
LEAF_NODE	38:12	38:12	13	xmlnode_get_child
LEAF_NODE	38:29	38:29	12	(
ARGUMENT	38:30	38:30	12	error
FIELD	38:30	38:30	13	error
LEAF_NODE	38:30	38:30	14	error
LEAF_NODE	38:35	38:35	12	,
ARGUMENT	38:37	38:37	12	"not-acceptable"
FIELD	38:37	38:37	13	"not-acceptable"
LEAF_NODE	38:37	38:37	14	"not-acceptable"
LEAF_NODE	38:53	38:53	12	)
LEAF_NODE	38:54	38:54	9	)
STATEMENTS	38:56	40:2	9	
LEAF_NODE	38:56	38:56	10	{
STATEMENTS	39:3	39:3	10	
EXPR_STATEMENT	39:3	39:29	11	text = _ ( "Not Acceptable" ) ;
EXPR	39:3	39:3	12	text = _ ( "Not Acceptable" )
ASSIGN	39:3	39:10	13	text = _ ( "Not Acceptable" )
LVAL	39:3	39:3	14	text
FIELD	39:3	39:3	15	text
LEAF_NODE	39:3	39:3	16	text
ASSIGN_OP	39:8	39:8	14	=
LEAF_NODE	39:8	39:8	15	=
RVAL	39:10	39:10	14	_ ( "Not Acceptable" )
FUNCTION_CALL	39:10	39:28	15	_ ( "Not Acceptable" )
CALLEE	39:10	39:10	16	_
LEAF_NODE	39:10	39:10	17	_
LEAF_NODE	39:11	39:11	16	(
ARGUMENT	39:12	39:12	16	"Not Acceptable"
FIELD	39:12	39:12	17	"Not Acceptable"
LEAF_NODE	39:12	39:12	18	"Not Acceptable"
LEAF_NODE	39:28	39:28	16	)
LEAF_NODE	39:29	39:29	12	;
LEAF_NODE	40:2	40:2	10	}
SELECTION	40:4	40:9	6	
KEYWORD	40:4	40:4	7	else
LEAF_NODE	40:4	40:4	8	else
STATEMENTS	40:9	40:9	7	
SELECTION	40:9	40:53	8	
KEYWORD	40:9	40:9	9	if
LEAF_NODE	40:9	40:9	10	if
LEAF_NODE	40:11	40:11	9	(
CONDITION	40:12	40:12	9	xmlnode_get_child ( error , "not-allowed" )
EXPR	40:12	40:12	10	xmlnode_get_child ( error , "not-allowed" )
FUNCTION_CALL	40:12	40:50	11	xmlnode_get_child ( error , "not-allowed" )
CALLEE	40:12	40:12	12	xmlnode_get_child
LEAF_NODE	40:12	40:12	13	xmlnode_get_child
LEAF_NODE	40:29	40:29	12	(
ARGUMENT	40:30	40:30	12	error
FIELD	40:30	40:30	13	error
LEAF_NODE	40:30	40:30	14	error
LEAF_NODE	40:35	40:35	12	,
ARGUMENT	40:37	40:37	12	"not-allowed"
FIELD	40:37	40:37	13	"not-allowed"
LEAF_NODE	40:37	40:37	14	"not-allowed"
LEAF_NODE	40:50	40:50	12	)
LEAF_NODE	40:51	40:51	9	)
STATEMENTS	40:53	42:2	9	
LEAF_NODE	40:53	40:53	10	{
STATEMENTS	41:3	41:3	10	
EXPR_STATEMENT	41:3	41:26	11	text = _ ( "Not Allowed" ) ;
EXPR	41:3	41:3	12	text = _ ( "Not Allowed" )
ASSIGN	41:3	41:10	13	text = _ ( "Not Allowed" )
LVAL	41:3	41:3	14	text
FIELD	41:3	41:3	15	text
LEAF_NODE	41:3	41:3	16	text
ASSIGN_OP	41:8	41:8	14	=
LEAF_NODE	41:8	41:8	15	=
RVAL	41:10	41:10	14	_ ( "Not Allowed" )
FUNCTION_CALL	41:10	41:25	15	_ ( "Not Allowed" )
CALLEE	41:10	41:10	16	_
LEAF_NODE	41:10	41:10	17	_
LEAF_NODE	41:11	41:11	16	(
ARGUMENT	41:12	41:12	16	"Not Allowed"
FIELD	41:12	41:12	17	"Not Allowed"
LEAF_NODE	41:12	41:12	18	"Not Allowed"
LEAF_NODE	41:25	41:25	16	)
LEAF_NODE	41:26	41:26	12	;
LEAF_NODE	42:2	42:2	10	}
SELECTION	42:4	42:9	6	
KEYWORD	42:4	42:4	7	else
LEAF_NODE	42:4	42:4	8	else
STATEMENTS	42:9	42:9	7	
SELECTION	42:9	42:56	8	
KEYWORD	42:9	42:9	9	if
LEAF_NODE	42:9	42:9	10	if
LEAF_NODE	42:11	42:11	9	(
CONDITION	42:12	42:12	9	xmlnode_get_child ( error , "not-authorized" )
EXPR	42:12	42:12	10	xmlnode_get_child ( error , "not-authorized" )
FUNCTION_CALL	42:12	42:53	11	xmlnode_get_child ( error , "not-authorized" )
CALLEE	42:12	42:12	12	xmlnode_get_child
LEAF_NODE	42:12	42:12	13	xmlnode_get_child
LEAF_NODE	42:29	42:29	12	(
ARGUMENT	42:30	42:30	12	error
FIELD	42:30	42:30	13	error
LEAF_NODE	42:30	42:30	14	error
LEAF_NODE	42:35	42:35	12	,
ARGUMENT	42:37	42:37	12	"not-authorized"
FIELD	42:37	42:37	13	"not-authorized"
LEAF_NODE	42:37	42:37	14	"not-authorized"
LEAF_NODE	42:53	42:53	12	)
LEAF_NODE	42:54	42:54	9	)
STATEMENTS	42:56	44:2	9	
LEAF_NODE	42:56	42:56	10	{
STATEMENTS	43:3	43:3	10	
EXPR_STATEMENT	43:3	43:29	11	text = _ ( "Not Authorized" ) ;
EXPR	43:3	43:3	12	text = _ ( "Not Authorized" )
ASSIGN	43:3	43:10	13	text = _ ( "Not Authorized" )
LVAL	43:3	43:3	14	text
FIELD	43:3	43:3	15	text
LEAF_NODE	43:3	43:3	16	text
ASSIGN_OP	43:8	43:8	14	=
LEAF_NODE	43:8	43:8	15	=
RVAL	43:10	43:10	14	_ ( "Not Authorized" )
FUNCTION_CALL	43:10	43:28	15	_ ( "Not Authorized" )
CALLEE	43:10	43:10	16	_
LEAF_NODE	43:10	43:10	17	_
LEAF_NODE	43:11	43:11	16	(
ARGUMENT	43:12	43:12	16	"Not Authorized"
FIELD	43:12	43:12	17	"Not Authorized"
LEAF_NODE	43:12	43:12	18	"Not Authorized"
LEAF_NODE	43:28	43:28	16	)
LEAF_NODE	43:29	43:29	12	;
LEAF_NODE	44:2	44:2	10	}
SELECTION	44:4	44:9	6	
KEYWORD	44:4	44:4	7	else
LEAF_NODE	44:4	44:4	8	else
STATEMENTS	44:9	44:9	7	
SELECTION	44:9	44:58	8	
KEYWORD	44:9	44:9	9	if
LEAF_NODE	44:9	44:9	10	if
LEAF_NODE	44:11	44:11	9	(
CONDITION	44:12	44:12	9	xmlnode_get_child ( error , "payment-required" )
EXPR	44:12	44:12	10	xmlnode_get_child ( error , "payment-required" )
FUNCTION_CALL	44:12	44:55	11	xmlnode_get_child ( error , "payment-required" )
CALLEE	44:12	44:12	12	xmlnode_get_child
LEAF_NODE	44:12	44:12	13	xmlnode_get_child
LEAF_NODE	44:29	44:29	12	(
ARGUMENT	44:30	44:30	12	error
FIELD	44:30	44:30	13	error
LEAF_NODE	44:30	44:30	14	error
LEAF_NODE	44:35	44:35	12	,
ARGUMENT	44:37	44:37	12	"payment-required"
FIELD	44:37	44:37	13	"payment-required"
LEAF_NODE	44:37	44:37	14	"payment-required"
LEAF_NODE	44:55	44:55	12	)
LEAF_NODE	44:56	44:56	9	)
STATEMENTS	44:58	46:2	9	
LEAF_NODE	44:58	44:58	10	{
STATEMENTS	45:3	45:3	10	
EXPR_STATEMENT	45:3	45:31	11	text = _ ( "Payment Required" ) ;
EXPR	45:3	45:3	12	text = _ ( "Payment Required" )
ASSIGN	45:3	45:10	13	text = _ ( "Payment Required" )
LVAL	45:3	45:3	14	text
FIELD	45:3	45:3	15	text
LEAF_NODE	45:3	45:3	16	text
ASSIGN_OP	45:8	45:8	14	=
LEAF_NODE	45:8	45:8	15	=
RVAL	45:10	45:10	14	_ ( "Payment Required" )
FUNCTION_CALL	45:10	45:30	15	_ ( "Payment Required" )
CALLEE	45:10	45:10	16	_
LEAF_NODE	45:10	45:10	17	_
LEAF_NODE	45:11	45:11	16	(
ARGUMENT	45:12	45:12	16	"Payment Required"
FIELD	45:12	45:12	17	"Payment Required"
LEAF_NODE	45:12	45:12	18	"Payment Required"
LEAF_NODE	45:30	45:30	16	)
LEAF_NODE	45:31	45:31	12	;
LEAF_NODE	46:2	46:2	10	}
SELECTION	46:4	46:9	6	
KEYWORD	46:4	46:4	7	else
LEAF_NODE	46:4	46:4	8	else
STATEMENTS	46:9	46:9	7	
SELECTION	46:9	46:63	8	
KEYWORD	46:9	46:9	9	if
LEAF_NODE	46:9	46:9	10	if
LEAF_NODE	46:11	46:11	9	(
CONDITION	46:12	46:12	9	xmlnode_get_child ( error , "recipient-unavailable" )
EXPR	46:12	46:12	10	xmlnode_get_child ( error , "recipient-unavailable" )
FUNCTION_CALL	46:12	46:60	11	xmlnode_get_child ( error , "recipient-unavailable" )
CALLEE	46:12	46:12	12	xmlnode_get_child
LEAF_NODE	46:12	46:12	13	xmlnode_get_child
LEAF_NODE	46:29	46:29	12	(
ARGUMENT	46:30	46:30	12	error
FIELD	46:30	46:30	13	error
LEAF_NODE	46:30	46:30	14	error
LEAF_NODE	46:35	46:35	12	,
ARGUMENT	46:37	46:37	12	"recipient-unavailable"
FIELD	46:37	46:37	13	"recipient-unavailable"
LEAF_NODE	46:37	46:37	14	"recipient-unavailable"
LEAF_NODE	46:60	46:60	12	)
LEAF_NODE	46:61	46:61	9	)
STATEMENTS	46:63	48:2	9	
LEAF_NODE	46:63	46:63	10	{
STATEMENTS	47:3	47:3	10	
EXPR_STATEMENT	47:3	47:36	11	text = _ ( "Recipient Unavailable" ) ;
EXPR	47:3	47:3	12	text = _ ( "Recipient Unavailable" )
ASSIGN	47:3	47:10	13	text = _ ( "Recipient Unavailable" )
LVAL	47:3	47:3	14	text
FIELD	47:3	47:3	15	text
LEAF_NODE	47:3	47:3	16	text
ASSIGN_OP	47:8	47:8	14	=
LEAF_NODE	47:8	47:8	15	=
RVAL	47:10	47:10	14	_ ( "Recipient Unavailable" )
FUNCTION_CALL	47:10	47:35	15	_ ( "Recipient Unavailable" )
CALLEE	47:10	47:10	16	_
LEAF_NODE	47:10	47:10	17	_
LEAF_NODE	47:11	47:11	16	(
ARGUMENT	47:12	47:12	16	"Recipient Unavailable"
FIELD	47:12	47:12	17	"Recipient Unavailable"
LEAF_NODE	47:12	47:12	18	"Recipient Unavailable"
LEAF_NODE	47:35	47:35	16	)
LEAF_NODE	47:36	47:36	12	;
LEAF_NODE	48:2	48:2	10	}
SELECTION	48:4	48:9	6	
KEYWORD	48:4	48:4	7	else
LEAF_NODE	48:4	48:4	8	else
STATEMENTS	48:9	48:9	7	
SELECTION	48:9	48:50	8	
KEYWORD	48:9	48:9	9	if
LEAF_NODE	48:9	48:9	10	if
LEAF_NODE	48:11	48:11	9	(
CONDITION	48:12	48:12	9	xmlnode_get_child ( error , "redirect" )
EXPR	48:12	48:12	10	xmlnode_get_child ( error , "redirect" )
FUNCTION_CALL	48:12	48:47	11	xmlnode_get_child ( error , "redirect" )
CALLEE	48:12	48:12	12	xmlnode_get_child
LEAF_NODE	48:12	48:12	13	xmlnode_get_child
LEAF_NODE	48:29	48:29	12	(
ARGUMENT	48:30	48:30	12	error
FIELD	48:30	48:30	13	error
LEAF_NODE	48:30	48:30	14	error
LEAF_NODE	48:35	48:35	12	,
ARGUMENT	48:37	48:37	12	"redirect"
FIELD	48:37	48:37	13	"redirect"
LEAF_NODE	48:37	48:37	14	"redirect"
LEAF_NODE	48:47	48:47	12	)
LEAF_NODE	48:48	48:48	9	)
STATEMENTS	48:50	50:2	9	
LEAF_NODE	48:50	48:50	10	{
LEAF_NODE	0:0	0:0	10	STATEMENTS
LEAF_NODE	50:2	50:2	10	}
SELECTION	50:4	50:9	6	
KEYWORD	50:4	50:4	7	else
LEAF_NODE	50:4	50:4	8	else
STATEMENTS	50:9	50:9	7	
SELECTION	50:9	50:63	8	
KEYWORD	50:9	50:9	9	if
LEAF_NODE	50:9	50:9	10	if
LEAF_NODE	50:11	50:11	9	(
CONDITION	50:12	50:12	9	xmlnode_get_child ( error , "registration-required" )
EXPR	50:12	50:12	10	xmlnode_get_child ( error , "registration-required" )
FUNCTION_CALL	50:12	50:60	11	xmlnode_get_child ( error , "registration-required" )
CALLEE	50:12	50:12	12	xmlnode_get_child
LEAF_NODE	50:12	50:12	13	xmlnode_get_child
LEAF_NODE	50:29	50:29	12	(
ARGUMENT	50:30	50:30	12	error
FIELD	50:30	50:30	13	error
LEAF_NODE	50:30	50:30	14	error
LEAF_NODE	50:35	50:35	12	,
ARGUMENT	50:37	50:37	12	"registration-required"
FIELD	50:37	50:37	13	"registration-required"
LEAF_NODE	50:37	50:37	14	"registration-required"
LEAF_NODE	50:60	50:60	12	)
LEAF_NODE	50:61	50:61	9	)
STATEMENTS	50:63	52:2	9	
LEAF_NODE	50:63	50:63	10	{
STATEMENTS	51:3	51:3	10	
EXPR_STATEMENT	51:3	51:36	11	text = _ ( "Registration Required" ) ;
EXPR	51:3	51:3	12	text = _ ( "Registration Required" )
ASSIGN	51:3	51:10	13	text = _ ( "Registration Required" )
LVAL	51:3	51:3	14	text
FIELD	51:3	51:3	15	text
LEAF_NODE	51:3	51:3	16	text
ASSIGN_OP	51:8	51:8	14	=
LEAF_NODE	51:8	51:8	15	=
RVAL	51:10	51:10	14	_ ( "Registration Required" )
FUNCTION_CALL	51:10	51:35	15	_ ( "Registration Required" )
CALLEE	51:10	51:10	16	_
LEAF_NODE	51:10	51:10	17	_
LEAF_NODE	51:11	51:11	16	(
ARGUMENT	51:12	51:12	16	"Registration Required"
FIELD	51:12	51:12	17	"Registration Required"
LEAF_NODE	51:12	51:12	18	"Registration Required"
LEAF_NODE	51:35	51:35	16	)
LEAF_NODE	51:36	51:36	12	;
LEAF_NODE	52:2	52:2	10	}
SELECTION	52:4	52:9	6	
KEYWORD	52:4	52:4	7	else
LEAF_NODE	52:4	52:4	8	else
STATEMENTS	52:9	52:9	7	
SELECTION	52:9	52:65	8	
KEYWORD	52:9	52:9	9	if
LEAF_NODE	52:9	52:9	10	if
LEAF_NODE	52:11	52:11	9	(
CONDITION	52:12	52:12	9	xmlnode_get_child ( error , "remote-server-not-found" )
EXPR	52:12	52:12	10	xmlnode_get_child ( error , "remote-server-not-found" )
FUNCTION_CALL	52:12	52:62	11	xmlnode_get_child ( error , "remote-server-not-found" )
CALLEE	52:12	52:12	12	xmlnode_get_child
LEAF_NODE	52:12	52:12	13	xmlnode_get_child
LEAF_NODE	52:29	52:29	12	(
ARGUMENT	52:30	52:30	12	error
FIELD	52:30	52:30	13	error
LEAF_NODE	52:30	52:30	14	error
LEAF_NODE	52:35	52:35	12	,
ARGUMENT	52:37	52:37	12	"remote-server-not-found"
FIELD	52:37	52:37	13	"remote-server-not-found"
LEAF_NODE	52:37	52:37	14	"remote-server-not-found"
LEAF_NODE	52:62	52:62	12	)
LEAF_NODE	52:63	52:63	9	)
STATEMENTS	52:65	54:2	9	
LEAF_NODE	52:65	52:65	10	{
STATEMENTS	53:3	53:3	10	
EXPR_STATEMENT	53:3	53:38	11	text = _ ( "Remote Server Not Found" ) ;
EXPR	53:3	53:3	12	text = _ ( "Remote Server Not Found" )
ASSIGN	53:3	53:10	13	text = _ ( "Remote Server Not Found" )
LVAL	53:3	53:3	14	text
FIELD	53:3	53:3	15	text
LEAF_NODE	53:3	53:3	16	text
ASSIGN_OP	53:8	53:8	14	=
LEAF_NODE	53:8	53:8	15	=
RVAL	53:10	53:10	14	_ ( "Remote Server Not Found" )
FUNCTION_CALL	53:10	53:37	15	_ ( "Remote Server Not Found" )
CALLEE	53:10	53:10	16	_
LEAF_NODE	53:10	53:10	17	_
LEAF_NODE	53:11	53:11	16	(
ARGUMENT	53:12	53:12	16	"Remote Server Not Found"
FIELD	53:12	53:12	17	"Remote Server Not Found"
LEAF_NODE	53:12	53:12	18	"Remote Server Not Found"
LEAF_NODE	53:37	53:37	16	)
LEAF_NODE	53:38	53:38	12	;
LEAF_NODE	54:2	54:2	10	}
SELECTION	54:4	54:9	6	
KEYWORD	54:4	54:4	7	else
LEAF_NODE	54:4	54:4	8	else
STATEMENTS	54:9	54:9	7	
SELECTION	54:9	54:63	8	
KEYWORD	54:9	54:9	9	if
LEAF_NODE	54:9	54:9	10	if
LEAF_NODE	54:11	54:11	9	(
CONDITION	54:12	54:12	9	xmlnode_get_child ( error , "remote-server-timeout" )
EXPR	54:12	54:12	10	xmlnode_get_child ( error , "remote-server-timeout" )
FUNCTION_CALL	54:12	54:60	11	xmlnode_get_child ( error , "remote-server-timeout" )
CALLEE	54:12	54:12	12	xmlnode_get_child
LEAF_NODE	54:12	54:12	13	xmlnode_get_child
LEAF_NODE	54:29	54:29	12	(
ARGUMENT	54:30	54:30	12	error
FIELD	54:30	54:30	13	error
LEAF_NODE	54:30	54:30	14	error
LEAF_NODE	54:35	54:35	12	,
ARGUMENT	54:37	54:37	12	"remote-server-timeout"
FIELD	54:37	54:37	13	"remote-server-timeout"
LEAF_NODE	54:37	54:37	14	"remote-server-timeout"
LEAF_NODE	54:60	54:60	12	)
LEAF_NODE	54:61	54:61	9	)
STATEMENTS	54:63	56:2	9	
LEAF_NODE	54:63	54:63	10	{
STATEMENTS	55:3	55:3	10	
EXPR_STATEMENT	55:3	55:36	11	text = _ ( "Remote Server Timeout" ) ;
EXPR	55:3	55:3	12	text = _ ( "Remote Server Timeout" )
ASSIGN	55:3	55:10	13	text = _ ( "Remote Server Timeout" )
LVAL	55:3	55:3	14	text
FIELD	55:3	55:3	15	text
LEAF_NODE	55:3	55:3	16	text
ASSIGN_OP	55:8	55:8	14	=
LEAF_NODE	55:8	55:8	15	=
RVAL	55:10	55:10	14	_ ( "Remote Server Timeout" )
FUNCTION_CALL	55:10	55:35	15	_ ( "Remote Server Timeout" )
CALLEE	55:10	55:10	16	_
LEAF_NODE	55:10	55:10	17	_
LEAF_NODE	55:11	55:11	16	(
ARGUMENT	55:12	55:12	16	"Remote Server Timeout"
FIELD	55:12	55:12	17	"Remote Server Timeout"
LEAF_NODE	55:12	55:12	18	"Remote Server Timeout"
LEAF_NODE	55:35	55:35	16	)
LEAF_NODE	55:36	55:36	12	;
LEAF_NODE	56:2	56:2	10	}
SELECTION	56:4	56:9	6	
KEYWORD	56:4	56:4	7	else
LEAF_NODE	56:4	56:4	8	else
STATEMENTS	56:9	56:9	7	
SELECTION	56:9	56:61	8	
KEYWORD	56:9	56:9	9	if
LEAF_NODE	56:9	56:9	10	if
LEAF_NODE	56:11	56:11	9	(
CONDITION	56:12	56:12	9	xmlnode_get_child ( error , "resource-constraint" )
EXPR	56:12	56:12	10	xmlnode_get_child ( error , "resource-constraint" )
FUNCTION_CALL	56:12	56:58	11	xmlnode_get_child ( error , "resource-constraint" )
CALLEE	56:12	56:12	12	xmlnode_get_child
LEAF_NODE	56:12	56:12	13	xmlnode_get_child
LEAF_NODE	56:29	56:29	12	(
ARGUMENT	56:30	56:30	12	error
FIELD	56:30	56:30	13	error
LEAF_NODE	56:30	56:30	14	error
LEAF_NODE	56:35	56:35	12	,
ARGUMENT	56:37	56:37	12	"resource-constraint"
FIELD	56:37	56:37	13	"resource-constraint"
LEAF_NODE	56:37	56:37	14	"resource-constraint"
LEAF_NODE	56:58	56:58	12	)
LEAF_NODE	56:59	56:59	9	)
STATEMENTS	56:61	58:2	9	
LEAF_NODE	56:61	56:61	10	{
STATEMENTS	57:3	57:3	10	
EXPR_STATEMENT	57:3	57:32	11	text = _ ( "Server Overloaded" ) ;
EXPR	57:3	57:3	12	text = _ ( "Server Overloaded" )
ASSIGN	57:3	57:10	13	text = _ ( "Server Overloaded" )
LVAL	57:3	57:3	14	text
FIELD	57:3	57:3	15	text
LEAF_NODE	57:3	57:3	16	text
ASSIGN_OP	57:8	57:8	14	=
LEAF_NODE	57:8	57:8	15	=
RVAL	57:10	57:10	14	_ ( "Server Overloaded" )
FUNCTION_CALL	57:10	57:31	15	_ ( "Server Overloaded" )
CALLEE	57:10	57:10	16	_
LEAF_NODE	57:10	57:10	17	_
LEAF_NODE	57:11	57:11	16	(
ARGUMENT	57:12	57:12	16	"Server Overloaded"
FIELD	57:12	57:12	17	"Server Overloaded"
LEAF_NODE	57:12	57:12	18	"Server Overloaded"
LEAF_NODE	57:31	57:31	16	)
LEAF_NODE	57:32	57:32	12	;
LEAF_NODE	58:2	58:2	10	}
SELECTION	58:4	58:9	6	
KEYWORD	58:4	58:4	7	else
LEAF_NODE	58:4	58:4	8	else
STATEMENTS	58:9	58:9	7	
SELECTION	58:9	58:61	8	
KEYWORD	58:9	58:9	9	if
LEAF_NODE	58:9	58:9	10	if
LEAF_NODE	58:11	58:11	9	(
CONDITION	58:12	58:12	9	xmlnode_get_child ( error , "service-unavailable" )
EXPR	58:12	58:12	10	xmlnode_get_child ( error , "service-unavailable" )
FUNCTION_CALL	58:12	58:58	11	xmlnode_get_child ( error , "service-unavailable" )
CALLEE	58:12	58:12	12	xmlnode_get_child
LEAF_NODE	58:12	58:12	13	xmlnode_get_child
LEAF_NODE	58:29	58:29	12	(
ARGUMENT	58:30	58:30	12	error
FIELD	58:30	58:30	13	error
LEAF_NODE	58:30	58:30	14	error
LEAF_NODE	58:35	58:35	12	,
ARGUMENT	58:37	58:37	12	"service-unavailable"
FIELD	58:37	58:37	13	"service-unavailable"
LEAF_NODE	58:37	58:37	14	"service-unavailable"
LEAF_NODE	58:58	58:58	12	)
LEAF_NODE	58:59	58:59	9	)
STATEMENTS	58:61	60:2	9	
LEAF_NODE	58:61	58:61	10	{
STATEMENTS	59:3	59:3	10	
EXPR_STATEMENT	59:3	59:34	11	text = _ ( "Service Unavailable" ) ;
EXPR	59:3	59:3	12	text = _ ( "Service Unavailable" )
ASSIGN	59:3	59:10	13	text = _ ( "Service Unavailable" )
LVAL	59:3	59:3	14	text
FIELD	59:3	59:3	15	text
LEAF_NODE	59:3	59:3	16	text
ASSIGN_OP	59:8	59:8	14	=
LEAF_NODE	59:8	59:8	15	=
RVAL	59:10	59:10	14	_ ( "Service Unavailable" )
FUNCTION_CALL	59:10	59:33	15	_ ( "Service Unavailable" )
CALLEE	59:10	59:10	16	_
LEAF_NODE	59:10	59:10	17	_
LEAF_NODE	59:11	59:11	16	(
ARGUMENT	59:12	59:12	16	"Service Unavailable"
FIELD	59:12	59:12	17	"Service Unavailable"
LEAF_NODE	59:12	59:12	18	"Service Unavailable"
LEAF_NODE	59:33	59:33	16	)
LEAF_NODE	59:34	59:34	12	;
LEAF_NODE	60:2	60:2	10	}
SELECTION	60:4	60:9	6	
KEYWORD	60:4	60:4	7	else
LEAF_NODE	60:4	60:4	8	else
STATEMENTS	60:9	60:9	7	
SELECTION	60:9	60:63	8	
KEYWORD	60:9	60:9	9	if
LEAF_NODE	60:9	60:9	10	if
LEAF_NODE	60:11	60:11	9	(
CONDITION	60:12	60:12	9	xmlnode_get_child ( error , "subscription-required" )
EXPR	60:12	60:12	10	xmlnode_get_child ( error , "subscription-required" )
FUNCTION_CALL	60:12	60:60	11	xmlnode_get_child ( error , "subscription-required" )
CALLEE	60:12	60:12	12	xmlnode_get_child
LEAF_NODE	60:12	60:12	13	xmlnode_get_child
LEAF_NODE	60:29	60:29	12	(
ARGUMENT	60:30	60:30	12	error
FIELD	60:30	60:30	13	error
LEAF_NODE	60:30	60:30	14	error
LEAF_NODE	60:35	60:35	12	,
ARGUMENT	60:37	60:37	12	"subscription-required"
FIELD	60:37	60:37	13	"subscription-required"
LEAF_NODE	60:37	60:37	14	"subscription-required"
LEAF_NODE	60:60	60:60	12	)
LEAF_NODE	60:61	60:61	9	)
STATEMENTS	60:63	62:2	9	
LEAF_NODE	60:63	60:63	10	{
STATEMENTS	61:3	61:3	10	
EXPR_STATEMENT	61:3	61:36	11	text = _ ( "Subscription Required" ) ;
EXPR	61:3	61:3	12	text = _ ( "Subscription Required" )
ASSIGN	61:3	61:10	13	text = _ ( "Subscription Required" )
LVAL	61:3	61:3	14	text
FIELD	61:3	61:3	15	text
LEAF_NODE	61:3	61:3	16	text
ASSIGN_OP	61:8	61:8	14	=
LEAF_NODE	61:8	61:8	15	=
RVAL	61:10	61:10	14	_ ( "Subscription Required" )
FUNCTION_CALL	61:10	61:35	15	_ ( "Subscription Required" )
CALLEE	61:10	61:10	16	_
LEAF_NODE	61:10	61:10	17	_
LEAF_NODE	61:11	61:11	16	(
ARGUMENT	61:12	61:12	16	"Subscription Required"
FIELD	61:12	61:12	17	"Subscription Required"
LEAF_NODE	61:12	61:12	18	"Subscription Required"
LEAF_NODE	61:35	61:35	16	)
LEAF_NODE	61:36	61:36	12	;
LEAF_NODE	62:2	62:2	10	}
SELECTION	62:4	62:9	6	
KEYWORD	62:4	62:4	7	else
LEAF_NODE	62:4	62:4	8	else
STATEMENTS	62:9	62:9	7	
SELECTION	62:9	62:60	8	
KEYWORD	62:9	62:9	9	if
LEAF_NODE	62:9	62:9	10	if
LEAF_NODE	62:11	62:11	9	(
CONDITION	62:12	62:12	9	xmlnode_get_child ( error , "unexpected-request" )
EXPR	62:12	62:12	10	xmlnode_get_child ( error , "unexpected-request" )
FUNCTION_CALL	62:12	62:57	11	xmlnode_get_child ( error , "unexpected-request" )
CALLEE	62:12	62:12	12	xmlnode_get_child
LEAF_NODE	62:12	62:12	13	xmlnode_get_child
LEAF_NODE	62:29	62:29	12	(
ARGUMENT	62:30	62:30	12	error
FIELD	62:30	62:30	13	error
LEAF_NODE	62:30	62:30	14	error
LEAF_NODE	62:35	62:35	12	,
ARGUMENT	62:37	62:37	12	"unexpected-request"
FIELD	62:37	62:37	13	"unexpected-request"
LEAF_NODE	62:37	62:37	14	"unexpected-request"
LEAF_NODE	62:57	62:57	12	)
LEAF_NODE	62:58	62:58	9	)
STATEMENTS	62:60	64:2	9	
LEAF_NODE	62:60	62:60	10	{
STATEMENTS	63:3	63:3	10	
EXPR_STATEMENT	63:3	63:33	11	text = _ ( "Unexpected Request" ) ;
EXPR	63:3	63:3	12	text = _ ( "Unexpected Request" )
ASSIGN	63:3	63:10	13	text = _ ( "Unexpected Request" )
LVAL	63:3	63:3	14	text
FIELD	63:3	63:3	15	text
LEAF_NODE	63:3	63:3	16	text
ASSIGN_OP	63:8	63:8	14	=
LEAF_NODE	63:8	63:8	15	=
RVAL	63:10	63:10	14	_ ( "Unexpected Request" )
FUNCTION_CALL	63:10	63:32	15	_ ( "Unexpected Request" )
CALLEE	63:10	63:10	16	_
LEAF_NODE	63:10	63:10	17	_
LEAF_NODE	63:11	63:11	16	(
ARGUMENT	63:12	63:12	16	"Unexpected Request"
FIELD	63:12	63:12	17	"Unexpected Request"
LEAF_NODE	63:12	63:12	18	"Unexpected Request"
LEAF_NODE	63:32	63:32	16	)
LEAF_NODE	63:33	63:33	12	;
LEAF_NODE	64:2	64:2	10	}
SELECTION	64:4	64:9	6	
KEYWORD	64:4	64:4	7	else
LEAF_NODE	64:4	64:4	8	else
STATEMENTS	64:9	64:9	7	
SELECTION	64:9	64:61	8	
KEYWORD	64:9	64:9	9	if
LEAF_NODE	64:9	64:9	10	if
LEAF_NODE	64:11	64:11	9	(
CONDITION	64:12	64:12	9	xmlnode_get_child ( error , "undefined-condition" )
EXPR	64:12	64:12	10	xmlnode_get_child ( error , "undefined-condition" )
FUNCTION_CALL	64:12	64:58	11	xmlnode_get_child ( error , "undefined-condition" )
CALLEE	64:12	64:12	12	xmlnode_get_child
LEAF_NODE	64:12	64:12	13	xmlnode_get_child
LEAF_NODE	64:29	64:29	12	(
ARGUMENT	64:30	64:30	12	error
FIELD	64:30	64:30	13	error
LEAF_NODE	64:30	64:30	14	error
LEAF_NODE	64:35	64:35	12	,
ARGUMENT	64:37	64:37	12	"undefined-condition"
FIELD	64:37	64:37	13	"undefined-condition"
LEAF_NODE	64:37	64:37	14	"undefined-condition"
LEAF_NODE	64:58	64:58	12	)
LEAF_NODE	64:59	64:59	9	)
STATEMENTS	64:61	66:2	9	
LEAF_NODE	64:61	64:61	10	{
STATEMENTS	65:3	65:3	10	
EXPR_STATEMENT	65:3	65:28	11	text = _ ( "Unknown Error" ) ;
EXPR	65:3	65:3	12	text = _ ( "Unknown Error" )
ASSIGN	65:3	65:10	13	text = _ ( "Unknown Error" )
LVAL	65:3	65:3	14	text
FIELD	65:3	65:3	15	text
LEAF_NODE	65:3	65:3	16	text
ASSIGN_OP	65:8	65:8	14	=
LEAF_NODE	65:8	65:8	15	=
RVAL	65:10	65:10	14	_ ( "Unknown Error" )
FUNCTION_CALL	65:10	65:27	15	_ ( "Unknown Error" )
CALLEE	65:10	65:10	16	_
LEAF_NODE	65:10	65:10	17	_
LEAF_NODE	65:11	65:11	16	(
ARGUMENT	65:12	65:12	16	"Unknown Error"
FIELD	65:12	65:12	17	"Unknown Error"
LEAF_NODE	65:12	65:12	18	"Unknown Error"
LEAF_NODE	65:27	65:27	16	)
LEAF_NODE	65:28	65:28	12	;
LEAF_NODE	66:2	66:2	10	}
LEAF_NODE	67:1	67:1	5	}
SELECTION	67:3	67:8	3	
KEYWORD	67:3	67:3	4	else
LEAF_NODE	67:3	67:3	5	else
STATEMENTS	67:8	67:8	4	
SELECTION	67:8	67:50	5	
KEYWORD	67:8	67:8	6	if
LEAF_NODE	67:8	67:8	7	if
LEAF_NODE	67:10	67:10	6	(
CONDITION	67:11	67:11	6	xmlns && ! strcmp ( xmlns , NS_XMPP_SASL )
EXPR	67:11	67:11	7	xmlns && ! strcmp ( xmlns , NS_XMPP_SASL )
AND	67:11	67:20	8	xmlns && ! strcmp ( xmlns , NS_XMPP_SASL )
EXPR	67:11	67:11	9	xmlns
FIELD	67:11	67:11	10	xmlns
LEAF_NODE	67:11	67:11	11	xmlns
LEAF_NODE	67:17	67:17	9	&&
EXPR	67:20	67:20	9	! strcmp ( xmlns , NS_XMPP_SASL )
UNARY_EXPR	67:20	67:21	10	! strcmp ( xmlns , NS_XMPP_SASL )
UNARY_OPERATOR	67:20	67:20	11	!
LEAF_NODE	67:20	67:20	12	!
FUNCTION_CALL	67:21	67:47	11	strcmp ( xmlns , NS_XMPP_SASL )
CALLEE	67:21	67:21	12	strcmp
LEAF_NODE	67:21	67:21	13	strcmp
LEAF_NODE	67:27	67:27	12	(
ARGUMENT	67:28	67:28	12	xmlns
FIELD	67:28	67:28	13	xmlns
LEAF_NODE	67:28	67:28	14	xmlns
LEAF_NODE	67:33	67:33	12	,
ARGUMENT	67:35	67:35	12	NS_XMPP_SASL
FIELD	67:35	67:35	13	NS_XMPP_SASL
LEAF_NODE	67:35	67:35	14	NS_XMPP_SASL
LEAF_NODE	67:47	67:47	12	)
LEAF_NODE	67:48	67:48	6	)
STATEMENTS	67:50	93:1	6	
LEAF_NODE	67:50	67:50	7	{
STATEMENTS	69:2	89:4	7	
EXPR_STATEMENT	69:2	69:51	8	SET_REASON ( PURPLE_CONNECTION_ERROR_NETWORK_ERROR ) ;
EXPR	69:2	69:2	9	SET_REASON ( PURPLE_CONNECTION_ERROR_NETWORK_ERROR )
FUNCTION_CALL	69:2	69:50	10	SET_REASON ( PURPLE_CONNECTION_ERROR_NETWORK_ERROR )
CALLEE	69:2	69:2	11	SET_REASON
LEAF_NODE	69:2	69:2	12	SET_REASON
LEAF_NODE	69:12	69:12	11	(
ARGUMENT	69:13	69:13	11	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
FIELD	69:13	69:13	12	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	69:13	69:13	13	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	69:50	69:50	11	)
LEAF_NODE	69:51	69:51	9	;
SELECTION	70:2	70:43	8	
KEYWORD	70:2	70:2	9	if
LEAF_NODE	70:2	70:2	10	if
LEAF_NODE	70:4	70:4	9	(
CONDITION	70:5	70:5	9	xmlnode_get_child ( packet , "aborted" )
EXPR	70:5	70:5	10	xmlnode_get_child ( packet , "aborted" )
FUNCTION_CALL	70:5	70:40	11	xmlnode_get_child ( packet , "aborted" )
CALLEE	70:5	70:5	12	xmlnode_get_child
LEAF_NODE	70:5	70:5	13	xmlnode_get_child
LEAF_NODE	70:22	70:22	12	(
ARGUMENT	70:23	70:23	12	packet
FIELD	70:23	70:23	13	packet
LEAF_NODE	70:23	70:23	14	packet
LEAF_NODE	70:29	70:29	12	,
ARGUMENT	70:31	70:31	12	"aborted"
FIELD	70:31	70:31	13	"aborted"
LEAF_NODE	70:31	70:31	14	"aborted"
LEAF_NODE	70:40	70:40	12	)
LEAF_NODE	70:41	70:41	9	)
STATEMENTS	70:43	72:2	9	
LEAF_NODE	70:43	70:43	10	{
STATEMENTS	71:3	71:3	10	
EXPR_STATEMENT	71:3	71:36	11	text = _ ( "Authorization Aborted" ) ;
EXPR	71:3	71:3	12	text = _ ( "Authorization Aborted" )
ASSIGN	71:3	71:10	13	text = _ ( "Authorization Aborted" )
LVAL	71:3	71:3	14	text
FIELD	71:3	71:3	15	text
LEAF_NODE	71:3	71:3	16	text
ASSIGN_OP	71:8	71:8	14	=
LEAF_NODE	71:8	71:8	15	=
RVAL	71:10	71:10	14	_ ( "Authorization Aborted" )
FUNCTION_CALL	71:10	71:35	15	_ ( "Authorization Aborted" )
CALLEE	71:10	71:10	16	_
LEAF_NODE	71:10	71:10	17	_
LEAF_NODE	71:11	71:11	16	(
ARGUMENT	71:12	71:12	16	"Authorization Aborted"
FIELD	71:12	71:12	17	"Authorization Aborted"
LEAF_NODE	71:12	71:12	18	"Authorization Aborted"
LEAF_NODE	71:35	71:35	16	)
LEAF_NODE	71:36	71:36	12	;
LEAF_NODE	72:2	72:2	10	}
SELECTION	72:4	72:9	8	
KEYWORD	72:4	72:4	9	else
LEAF_NODE	72:4	72:4	10	else
STATEMENTS	72:9	72:9	9	
SELECTION	72:9	72:61	10	
KEYWORD	72:9	72:9	11	if
LEAF_NODE	72:9	72:9	12	if
LEAF_NODE	72:11	72:11	11	(
CONDITION	72:12	72:12	11	xmlnode_get_child ( packet , "incorrect-encoding" )
EXPR	72:12	72:12	12	xmlnode_get_child ( packet , "incorrect-encoding" )
FUNCTION_CALL	72:12	72:58	13	xmlnode_get_child ( packet , "incorrect-encoding" )
CALLEE	72:12	72:12	14	xmlnode_get_child
LEAF_NODE	72:12	72:12	15	xmlnode_get_child
LEAF_NODE	72:29	72:29	14	(
ARGUMENT	72:30	72:30	14	packet
FIELD	72:30	72:30	15	packet
LEAF_NODE	72:30	72:30	16	packet
LEAF_NODE	72:36	72:36	14	,
ARGUMENT	72:38	72:38	14	"incorrect-encoding"
FIELD	72:38	72:38	15	"incorrect-encoding"
LEAF_NODE	72:38	72:38	16	"incorrect-encoding"
LEAF_NODE	72:58	72:58	14	)
LEAF_NODE	72:59	72:59	11	)
STATEMENTS	72:61	74:2	11	
LEAF_NODE	72:61	72:61	12	{
STATEMENTS	73:3	73:3	12	
EXPR_STATEMENT	73:3	73:50	13	text = _ ( "Incorrect encoding in authorization" ) ;
EXPR	73:3	73:3	14	text = _ ( "Incorrect encoding in authorization" )
ASSIGN	73:3	73:10	15	text = _ ( "Incorrect encoding in authorization" )
LVAL	73:3	73:3	16	text
FIELD	73:3	73:3	17	text
LEAF_NODE	73:3	73:3	18	text
ASSIGN_OP	73:8	73:8	16	=
LEAF_NODE	73:8	73:8	17	=
RVAL	73:10	73:10	16	_ ( "Incorrect encoding in authorization" )
FUNCTION_CALL	73:10	73:49	17	_ ( "Incorrect encoding in authorization" )
CALLEE	73:10	73:10	18	_
LEAF_NODE	73:10	73:10	19	_
LEAF_NODE	73:11	73:11	18	(
ARGUMENT	73:12	73:12	18	"Incorrect encoding in authorization"
FIELD	73:12	73:12	19	"Incorrect encoding in authorization"
LEAF_NODE	73:12	73:12	20	"Incorrect encoding in authorization"
LEAF_NODE	73:49	73:49	18	)
LEAF_NODE	73:50	73:50	14	;
LEAF_NODE	74:2	74:2	12	}
SELECTION	74:4	74:9	8	
KEYWORD	74:4	74:4	9	else
LEAF_NODE	74:4	74:4	10	else
STATEMENTS	74:9	74:9	9	
SELECTION	74:9	74:58	10	
KEYWORD	74:9	74:9	11	if
LEAF_NODE	74:9	74:9	12	if
LEAF_NODE	74:11	74:11	11	(
CONDITION	74:12	74:12	11	xmlnode_get_child ( packet , "invalid-authzid" )
EXPR	74:12	74:12	12	xmlnode_get_child ( packet , "invalid-authzid" )
FUNCTION_CALL	74:12	74:55	13	xmlnode_get_child ( packet , "invalid-authzid" )
CALLEE	74:12	74:12	14	xmlnode_get_child
LEAF_NODE	74:12	74:12	15	xmlnode_get_child
LEAF_NODE	74:29	74:29	14	(
ARGUMENT	74:30	74:30	14	packet
FIELD	74:30	74:30	15	packet
LEAF_NODE	74:30	74:30	16	packet
LEAF_NODE	74:36	74:36	14	,
ARGUMENT	74:38	74:38	14	"invalid-authzid"
FIELD	74:38	74:38	15	"invalid-authzid"
LEAF_NODE	74:38	74:38	16	"invalid-authzid"
LEAF_NODE	74:55	74:55	14	)
LEAF_NODE	74:56	74:56	11	)
STATEMENTS	74:58	76:2	11	
LEAF_NODE	74:58	74:58	12	{
STATEMENTS	75:3	75:3	12	
EXPR_STATEMENT	75:3	75:30	13	text = _ ( "Invalid authzid" ) ;
EXPR	75:3	75:3	14	text = _ ( "Invalid authzid" )
ASSIGN	75:3	75:10	15	text = _ ( "Invalid authzid" )
LVAL	75:3	75:3	16	text
FIELD	75:3	75:3	17	text
LEAF_NODE	75:3	75:3	18	text
ASSIGN_OP	75:8	75:8	16	=
LEAF_NODE	75:8	75:8	17	=
RVAL	75:10	75:10	16	_ ( "Invalid authzid" )
FUNCTION_CALL	75:10	75:29	17	_ ( "Invalid authzid" )
CALLEE	75:10	75:10	18	_
LEAF_NODE	75:10	75:10	19	_
LEAF_NODE	75:11	75:11	18	(
ARGUMENT	75:12	75:12	18	"Invalid authzid"
FIELD	75:12	75:12	19	"Invalid authzid"
LEAF_NODE	75:12	75:12	20	"Invalid authzid"
LEAF_NODE	75:29	75:29	18	)
LEAF_NODE	75:30	75:30	14	;
LEAF_NODE	76:2	76:2	12	}
SELECTION	76:4	76:9	8	
KEYWORD	76:4	76:4	9	else
LEAF_NODE	76:4	76:4	10	else
STATEMENTS	76:9	76:9	9	
SELECTION	76:9	76:60	10	
KEYWORD	76:9	76:9	11	if
LEAF_NODE	76:9	76:9	12	if
LEAF_NODE	76:11	76:11	11	(
CONDITION	76:12	76:12	11	xmlnode_get_child ( packet , "invalid-mechanism" )
EXPR	76:12	76:12	12	xmlnode_get_child ( packet , "invalid-mechanism" )
FUNCTION_CALL	76:12	76:57	13	xmlnode_get_child ( packet , "invalid-mechanism" )
CALLEE	76:12	76:12	14	xmlnode_get_child
LEAF_NODE	76:12	76:12	15	xmlnode_get_child
LEAF_NODE	76:29	76:29	14	(
ARGUMENT	76:30	76:30	14	packet
FIELD	76:30	76:30	15	packet
LEAF_NODE	76:30	76:30	16	packet
LEAF_NODE	76:36	76:36	14	,
ARGUMENT	76:38	76:38	14	"invalid-mechanism"
FIELD	76:38	76:38	15	"invalid-mechanism"
LEAF_NODE	76:38	76:38	16	"invalid-mechanism"
LEAF_NODE	76:57	76:57	14	)
LEAF_NODE	76:58	76:58	11	)
STATEMENTS	76:60	78:2	11	
LEAF_NODE	76:60	76:60	12	{
STATEMENTS	77:3	77:3	12	
EXPR_STATEMENT	77:3	77:46	13	text = _ ( "Invalid Authorization Mechanism" ) ;
EXPR	77:3	77:3	14	text = _ ( "Invalid Authorization Mechanism" )
ASSIGN	77:3	77:10	15	text = _ ( "Invalid Authorization Mechanism" )
LVAL	77:3	77:3	16	text
FIELD	77:3	77:3	17	text
LEAF_NODE	77:3	77:3	18	text
ASSIGN_OP	77:8	77:8	16	=
LEAF_NODE	77:8	77:8	17	=
RVAL	77:10	77:10	16	_ ( "Invalid Authorization Mechanism" )
FUNCTION_CALL	77:10	77:45	17	_ ( "Invalid Authorization Mechanism" )
CALLEE	77:10	77:10	18	_
LEAF_NODE	77:10	77:10	19	_
LEAF_NODE	77:11	77:11	18	(
ARGUMENT	77:12	77:12	18	"Invalid Authorization Mechanism"
FIELD	77:12	77:12	19	"Invalid Authorization Mechanism"
LEAF_NODE	77:12	77:12	20	"Invalid Authorization Mechanism"
LEAF_NODE	77:45	77:45	18	)
LEAF_NODE	77:46	77:46	14	;
LEAF_NODE	78:2	78:2	12	}
SELECTION	78:4	78:9	8	
KEYWORD	78:4	78:4	9	else
LEAF_NODE	78:4	78:4	10	else
STATEMENTS	78:9	78:9	9	
SELECTION	78:9	78:61	10	
KEYWORD	78:9	78:9	11	if
LEAF_NODE	78:9	78:9	12	if
LEAF_NODE	78:11	78:11	11	(
CONDITION	78:12	78:12	11	xmlnode_get_child ( packet , "mechanism-too-weak" )
EXPR	78:12	78:12	12	xmlnode_get_child ( packet , "mechanism-too-weak" )
FUNCTION_CALL	78:12	78:58	13	xmlnode_get_child ( packet , "mechanism-too-weak" )
CALLEE	78:12	78:12	14	xmlnode_get_child
LEAF_NODE	78:12	78:12	15	xmlnode_get_child
LEAF_NODE	78:29	78:29	14	(
ARGUMENT	78:30	78:30	14	packet
FIELD	78:30	78:30	15	packet
LEAF_NODE	78:30	78:30	16	packet
LEAF_NODE	78:36	78:36	14	,
ARGUMENT	78:38	78:38	14	"mechanism-too-weak"
FIELD	78:38	78:38	15	"mechanism-too-weak"
LEAF_NODE	78:38	78:38	16	"mechanism-too-weak"
LEAF_NODE	78:58	78:58	14	)
LEAF_NODE	78:59	78:59	11	)
STATEMENTS	78:61	81:2	11	
LEAF_NODE	78:61	78:61	12	{
STATEMENTS	79:3	80:3	12	
EXPR_STATEMENT	79:3	79:64	13	SET_REASON ( PURPLE_CONNECTION_ERROR_AUTHENTICATION_IMPOSSIBLE ) ;
EXPR	79:3	79:3	14	SET_REASON ( PURPLE_CONNECTION_ERROR_AUTHENTICATION_IMPOSSIBLE )
FUNCTION_CALL	79:3	79:63	15	SET_REASON ( PURPLE_CONNECTION_ERROR_AUTHENTICATION_IMPOSSIBLE )
CALLEE	79:3	79:3	16	SET_REASON
LEAF_NODE	79:3	79:3	17	SET_REASON
LEAF_NODE	79:13	79:13	16	(
ARGUMENT	79:14	79:14	16	PURPLE_CONNECTION_ERROR_AUTHENTICATION_IMPOSSIBLE
FIELD	79:14	79:14	17	PURPLE_CONNECTION_ERROR_AUTHENTICATION_IMPOSSIBLE
LEAF_NODE	79:14	79:14	18	PURPLE_CONNECTION_ERROR_AUTHENTICATION_IMPOSSIBLE
LEAF_NODE	79:63	79:63	16	)
LEAF_NODE	79:64	79:64	14	;
EXPR_STATEMENT	80:3	80:47	13	text = _ ( "Authorization mechanism too weak" ) ;
EXPR	80:3	80:3	14	text = _ ( "Authorization mechanism too weak" )
ASSIGN	80:3	80:10	15	text = _ ( "Authorization mechanism too weak" )
LVAL	80:3	80:3	16	text
FIELD	80:3	80:3	17	text
LEAF_NODE	80:3	80:3	18	text
ASSIGN_OP	80:8	80:8	16	=
LEAF_NODE	80:8	80:8	17	=
RVAL	80:10	80:10	16	_ ( "Authorization mechanism too weak" )
FUNCTION_CALL	80:10	80:46	17	_ ( "Authorization mechanism too weak" )
CALLEE	80:10	80:10	18	_
LEAF_NODE	80:10	80:10	19	_
LEAF_NODE	80:11	80:11	18	(
ARGUMENT	80:12	80:12	18	"Authorization mechanism too weak"
FIELD	80:12	80:12	19	"Authorization mechanism too weak"
LEAF_NODE	80:12	80:12	20	"Authorization mechanism too weak"
LEAF_NODE	80:46	80:46	18	)
LEAF_NODE	80:47	80:47	14	;
LEAF_NODE	81:2	81:2	12	}
SELECTION	81:4	81:9	8	
KEYWORD	81:4	81:4	9	else
LEAF_NODE	81:4	81:4	10	else
STATEMENTS	81:9	81:9	9	
SELECTION	81:9	81:57	10	
KEYWORD	81:9	81:9	11	if
LEAF_NODE	81:9	81:9	12	if
LEAF_NODE	81:11	81:11	11	(
CONDITION	81:12	81:12	11	xmlnode_get_child ( packet , "not-authorized" )
EXPR	81:12	81:12	12	xmlnode_get_child ( packet , "not-authorized" )
FUNCTION_CALL	81:12	81:54	13	xmlnode_get_child ( packet , "not-authorized" )
CALLEE	81:12	81:12	14	xmlnode_get_child
LEAF_NODE	81:12	81:12	15	xmlnode_get_child
LEAF_NODE	81:29	81:29	14	(
ARGUMENT	81:30	81:30	14	packet
FIELD	81:30	81:30	15	packet
LEAF_NODE	81:30	81:30	16	packet
LEAF_NODE	81:36	81:36	14	,
ARGUMENT	81:38	81:38	14	"not-authorized"
FIELD	81:38	81:38	15	"not-authorized"
LEAF_NODE	81:38	81:38	16	"not-authorized"
LEAF_NODE	81:54	81:54	14	)
LEAF_NODE	81:55	81:55	11	)
STATEMENTS	81:57	87:2	11	
LEAF_NODE	81:57	81:57	12	{
STATEMENTS	82:3	86:3	12	
EXPR_STATEMENT	82:3	82:60	13	SET_REASON ( PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED ) ;
EXPR	82:3	82:3	14	SET_REASON ( PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED )
FUNCTION_CALL	82:3	82:59	15	SET_REASON ( PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED )
CALLEE	82:3	82:3	16	SET_REASON
LEAF_NODE	82:3	82:3	17	SET_REASON
LEAF_NODE	82:13	82:13	16	(
ARGUMENT	82:14	82:14	16	PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED
FIELD	82:14	82:14	17	PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED
LEAF_NODE	82:14	82:14	18	PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED
LEAF_NODE	82:59	82:59	16	)
LEAF_NODE	82:60	82:60	14	;
SELECTION	84:3	85:4	13	
KEYWORD	84:3	84:3	14	if
LEAF_NODE	84:3	84:3	15	if
LEAF_NODE	84:6	84:6	14	(
CONDITION	84:7	84:7	14	! purple_account_get_remember_password ( js -> gc -> account )
EXPR	84:7	84:7	15	! purple_account_get_remember_password ( js -> gc -> account )
UNARY_EXPR	84:7	84:8	16	! purple_account_get_remember_password ( js -> gc -> account )
UNARY_OPERATOR	84:7	84:7	17	!
LEAF_NODE	84:7	84:7	18	!
FUNCTION_CALL	84:8	84:60	17	purple_account_get_remember_password ( js -> gc -> account )
CALLEE	84:8	84:8	18	purple_account_get_remember_password
LEAF_NODE	84:8	84:8	19	purple_account_get_remember_password
LEAF_NODE	84:44	84:44	18	(
ARGUMENT	84:45	84:45	18	js -> gc -> account
FIELD	84:45	84:53	19	js -> gc -> account
LEAF_NODE	84:45	84:45	20	js
LEAF_NODE	84:47	84:47	20	->
LEAF_NODE	84:49	84:49	20	gc
LEAF_NODE	84:51	84:51	20	->
LEAF_NODE	84:53	84:53	20	account
LEAF_NODE	84:60	84:60	18	)
LEAF_NODE	84:61	84:61	14	)
STATEMENTS	85:4	85:4	14	
EXPR_STATEMENT	85:4	85:54	15	purple_account_set_password ( js -> gc -> account , NULL ) ;
EXPR	85:4	85:4	16	purple_account_set_password ( js -> gc -> account , NULL )
FUNCTION_CALL	85:4	85:53	17	purple_account_set_password ( js -> gc -> account , NULL )
CALLEE	85:4	85:4	18	purple_account_set_password
LEAF_NODE	85:4	85:4	19	purple_account_set_password
LEAF_NODE	85:31	85:31	18	(
ARGUMENT	85:32	85:32	18	js -> gc -> account
FIELD	85:32	85:40	19	js -> gc -> account
LEAF_NODE	85:32	85:32	20	js
LEAF_NODE	85:34	85:34	20	->
LEAF_NODE	85:36	85:36	20	gc
LEAF_NODE	85:38	85:38	20	->
LEAF_NODE	85:40	85:40	20	account
LEAF_NODE	85:47	85:47	18	,
ARGUMENT	85:49	85:49	18	NULL
FIELD	85:49	85:49	19	NULL
LEAF_NODE	85:49	85:49	20	NULL
LEAF_NODE	85:53	85:53	18	)
LEAF_NODE	85:54	85:54	16	;
EXPR_STATEMENT	86:3	86:29	13	text = _ ( "Not Authorized" ) ;
EXPR	86:3	86:3	14	text = _ ( "Not Authorized" )
ASSIGN	86:3	86:10	15	text = _ ( "Not Authorized" )
LVAL	86:3	86:3	16	text
FIELD	86:3	86:3	17	text
LEAF_NODE	86:3	86:3	18	text
ASSIGN_OP	86:8	86:8	16	=
LEAF_NODE	86:8	86:8	17	=
RVAL	86:10	86:10	16	_ ( "Not Authorized" )
FUNCTION_CALL	86:10	86:28	17	_ ( "Not Authorized" )
CALLEE	86:10	86:10	18	_
LEAF_NODE	86:10	86:10	19	_
LEAF_NODE	86:11	86:11	18	(
ARGUMENT	86:12	86:12	18	"Not Authorized"
FIELD	86:12	86:12	19	"Not Authorized"
LEAF_NODE	86:12	86:12	20	"Not Authorized"
LEAF_NODE	86:28	86:28	18	)
LEAF_NODE	86:29	86:29	14	;
LEAF_NODE	87:2	87:2	12	}
SELECTION	87:4	87:9	8	
KEYWORD	87:4	87:4	9	else
LEAF_NODE	87:4	87:4	10	else
STATEMENTS	87:9	87:9	9	
SELECTION	87:9	87:65	10	
KEYWORD	87:9	87:9	11	if
LEAF_NODE	87:9	87:9	12	if
LEAF_NODE	87:11	87:11	11	(
CONDITION	87:12	87:12	11	xmlnode_get_child ( packet , "temporary-auth-failure" )
EXPR	87:12	87:12	12	xmlnode_get_child ( packet , "temporary-auth-failure" )
FUNCTION_CALL	87:12	87:62	13	xmlnode_get_child ( packet , "temporary-auth-failure" )
CALLEE	87:12	87:12	14	xmlnode_get_child
LEAF_NODE	87:12	87:12	15	xmlnode_get_child
LEAF_NODE	87:29	87:29	14	(
ARGUMENT	87:30	87:30	14	packet
FIELD	87:30	87:30	15	packet
LEAF_NODE	87:30	87:30	16	packet
LEAF_NODE	87:36	87:36	14	,
ARGUMENT	87:38	87:38	14	"temporary-auth-failure"
FIELD	87:38	87:38	15	"temporary-auth-failure"
LEAF_NODE	87:38	87:38	16	"temporary-auth-failure"
LEAF_NODE	87:62	87:62	14	)
LEAF_NODE	87:63	87:63	11	)
STATEMENTS	87:65	89:2	11	
LEAF_NODE	87:65	87:65	12	{
STATEMENTS	88:3	88:3	12	
EXPR_STATEMENT	88:3	88:47	13	text = _ ( "Temporary Authentication Failure" ) ;
EXPR	88:3	88:3	14	text = _ ( "Temporary Authentication Failure" )
ASSIGN	88:3	88:10	15	text = _ ( "Temporary Authentication Failure" )
LVAL	88:3	88:3	16	text
FIELD	88:3	88:3	17	text
LEAF_NODE	88:3	88:3	18	text
ASSIGN_OP	88:8	88:8	16	=
LEAF_NODE	88:8	88:8	17	=
RVAL	88:10	88:10	16	_ ( "Temporary Authentication Failure" )
FUNCTION_CALL	88:10	88:46	17	_ ( "Temporary Authentication Failure" )
CALLEE	88:10	88:10	18	_
LEAF_NODE	88:10	88:10	19	_
LEAF_NODE	88:11	88:11	18	(
ARGUMENT	88:12	88:12	18	"Temporary Authentication Failure"
FIELD	88:12	88:12	19	"Temporary Authentication Failure"
LEAF_NODE	88:12	88:12	20	"Temporary Authentication Failure"
LEAF_NODE	88:46	88:46	18	)
LEAF_NODE	88:47	88:47	14	;
LEAF_NODE	89:2	89:2	12	}
SELECTION	89:4	89:9	8	
KEYWORD	89:4	89:4	9	else
LEAF_NODE	89:4	89:4	10	else
STATEMENTS	89:9	92:2	9	
LEAF_NODE	89:9	89:9	10	{
STATEMENTS	90:3	91:3	10	
EXPR_STATEMENT	90:3	90:60	11	SET_REASON ( PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED ) ;
EXPR	90:3	90:3	12	SET_REASON ( PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED )
FUNCTION_CALL	90:3	90:59	13	SET_REASON ( PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED )
CALLEE	90:3	90:3	14	SET_REASON
LEAF_NODE	90:3	90:3	15	SET_REASON
LEAF_NODE	90:13	90:13	14	(
ARGUMENT	90:14	90:14	14	PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED
FIELD	90:14	90:14	15	PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED
LEAF_NODE	90:14	90:14	16	PURPLE_CONNECTION_ERROR_AUTHENTICATION_FAILED
LEAF_NODE	90:59	90:59	14	)
LEAF_NODE	90:60	90:60	12	;
EXPR_STATEMENT	91:3	91:37	11	text = _ ( "Authentication Failure" ) ;
EXPR	91:3	91:3	12	text = _ ( "Authentication Failure" )
ASSIGN	91:3	91:10	13	text = _ ( "Authentication Failure" )
LVAL	91:3	91:3	14	text
FIELD	91:3	91:3	15	text
LEAF_NODE	91:3	91:3	16	text
ASSIGN_OP	91:8	91:8	14	=
LEAF_NODE	91:8	91:8	15	=
RVAL	91:10	91:10	14	_ ( "Authentication Failure" )
FUNCTION_CALL	91:10	91:36	15	_ ( "Authentication Failure" )
CALLEE	91:10	91:10	16	_
LEAF_NODE	91:10	91:10	17	_
LEAF_NODE	91:11	91:11	16	(
ARGUMENT	91:12	91:12	16	"Authentication Failure"
FIELD	91:12	91:12	17	"Authentication Failure"
LEAF_NODE	91:12	91:12	18	"Authentication Failure"
LEAF_NODE	91:36	91:36	16	)
LEAF_NODE	91:37	91:37	12	;
LEAF_NODE	92:2	92:2	10	}
LEAF_NODE	93:1	93:1	7	}
SELECTION	93:3	93:8	3	
KEYWORD	93:3	93:3	4	else
LEAF_NODE	93:3	93:3	5	else
STATEMENTS	93:8	93:8	4	
SELECTION	93:8	95:38	5	
KEYWORD	93:8	93:8	6	if
LEAF_NODE	93:8	93:8	7	if
LEAF_NODE	93:10	93:10	6	(
CONDITION	93:11	93:11	6	! strcmp ( packet -> name , "stream:error" ) || ( ! strcmp ( packet -> name , "error" ) && xmlns && ! strcmp ( xmlns , NS_XMPP_STREAMS ) )
EXPR	93:11	93:11	7	! strcmp ( packet -> name , "stream:error" ) || ( ! strcmp ( packet -> name , "error" ) && xmlns && ! strcmp ( xmlns , NS_XMPP_STREAMS ) )
OR	93:11	94:4	8	! strcmp ( packet -> name , "stream:error" ) || ( ! strcmp ( packet -> name , "error" ) && xmlns && ! strcmp ( xmlns , NS_XMPP_STREAMS ) )
EXPR	93:11	93:11	9	! strcmp ( packet -> name , "stream:error" )
UNARY_EXPR	93:11	93:12	10	! strcmp ( packet -> name , "stream:error" )
UNARY_OPERATOR	93:11	93:11	11	!
LEAF_NODE	93:11	93:11	12	!
FUNCTION_CALL	93:12	93:47	11	strcmp ( packet -> name , "stream:error" )
CALLEE	93:12	93:12	12	strcmp
LEAF_NODE	93:12	93:12	13	strcmp
LEAF_NODE	93:18	93:18	12	(
ARGUMENT	93:19	93:19	12	packet -> name
FIELD	93:19	93:27	13	packet -> name
LEAF_NODE	93:19	93:19	14	packet
LEAF_NODE	93:25	93:25	14	->
LEAF_NODE	93:27	93:27	14	name
LEAF_NODE	93:31	93:31	12	,
ARGUMENT	93:33	93:33	12	"stream:error"
FIELD	93:33	93:33	13	"stream:error"
LEAF_NODE	93:33	93:33	14	"stream:error"
LEAF_NODE	93:47	93:47	12	)
LEAF_NODE	93:49	93:49	9	||
EXPR	94:4	95:35	9	( ! strcmp ( packet -> name , "error" ) && xmlns && ! strcmp ( xmlns , NS_XMPP_STREAMS ) )
LEAF_NODE	94:4	94:4	10	(
AND	94:5	94:39	10	! strcmp ( packet -> name , "error" ) && xmlns && ! strcmp ( xmlns , NS_XMPP_STREAMS )
EXPR	94:5	94:5	11	! strcmp ( packet -> name , "error" )
UNARY_EXPR	94:5	94:6	12	! strcmp ( packet -> name , "error" )
UNARY_OPERATOR	94:5	94:5	13	!
LEAF_NODE	94:5	94:5	14	!
FUNCTION_CALL	94:6	94:34	13	strcmp ( packet -> name , "error" )
CALLEE	94:6	94:6	14	strcmp
LEAF_NODE	94:6	94:6	15	strcmp
LEAF_NODE	94:12	94:12	14	(
ARGUMENT	94:13	94:13	14	packet -> name
FIELD	94:13	94:21	15	packet -> name
LEAF_NODE	94:13	94:13	16	packet
LEAF_NODE	94:19	94:19	16	->
LEAF_NODE	94:21	94:21	16	name
LEAF_NODE	94:25	94:25	14	,
ARGUMENT	94:27	94:27	14	"error"
FIELD	94:27	94:27	15	"error"
LEAF_NODE	94:27	94:27	16	"error"
LEAF_NODE	94:34	94:34	14	)
LEAF_NODE	94:36	94:36	11	&&
EXPR	94:39	94:39	11	xmlns && ! strcmp ( xmlns , NS_XMPP_STREAMS )
AND	94:39	95:4	12	xmlns && ! strcmp ( xmlns , NS_XMPP_STREAMS )
EXPR	94:39	94:39	13	xmlns
FIELD	94:39	94:39	14	xmlns
LEAF_NODE	94:39	94:39	15	xmlns
LEAF_NODE	94:45	94:45	13	&&
EXPR	95:4	95:4	13	! strcmp ( xmlns , NS_XMPP_STREAMS )
UNARY_EXPR	95:4	95:5	14	! strcmp ( xmlns , NS_XMPP_STREAMS )
UNARY_OPERATOR	95:4	95:4	15	!
LEAF_NODE	95:4	95:4	16	!
FUNCTION_CALL	95:5	95:34	15	strcmp ( xmlns , NS_XMPP_STREAMS )
CALLEE	95:5	95:5	16	strcmp
LEAF_NODE	95:5	95:5	17	strcmp
LEAF_NODE	95:11	95:11	16	(
ARGUMENT	95:12	95:12	16	xmlns
FIELD	95:12	95:12	17	xmlns
LEAF_NODE	95:12	95:12	18	xmlns
LEAF_NODE	95:17	95:17	16	,
ARGUMENT	95:19	95:19	16	NS_XMPP_STREAMS
FIELD	95:19	95:19	17	NS_XMPP_STREAMS
LEAF_NODE	95:19	95:19	18	NS_XMPP_STREAMS
LEAF_NODE	95:34	95:34	16	)
LEAF_NODE	95:35	95:35	10	)
LEAF_NODE	95:36	95:36	6	)
STATEMENTS	95:38	150:1	6	
LEAF_NODE	95:38	95:38	7	{
STATEMENTS	97:2	147:4	7	
EXPR_STATEMENT	97:2	97:51	8	SET_REASON ( PURPLE_CONNECTION_ERROR_NETWORK_ERROR ) ;
EXPR	97:2	97:2	9	SET_REASON ( PURPLE_CONNECTION_ERROR_NETWORK_ERROR )
FUNCTION_CALL	97:2	97:50	10	SET_REASON ( PURPLE_CONNECTION_ERROR_NETWORK_ERROR )
CALLEE	97:2	97:2	11	SET_REASON
LEAF_NODE	97:2	97:2	12	SET_REASON
LEAF_NODE	97:12	97:12	11	(
ARGUMENT	97:13	97:13	11	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
FIELD	97:13	97:13	12	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	97:13	97:13	13	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	97:50	97:50	11	)
LEAF_NODE	97:51	97:51	9	;
SELECTION	98:2	98:46	8	
KEYWORD	98:2	98:2	9	if
LEAF_NODE	98:2	98:2	10	if
LEAF_NODE	98:4	98:4	9	(
CONDITION	98:5	98:5	9	xmlnode_get_child ( packet , "bad-format" )
EXPR	98:5	98:5	10	xmlnode_get_child ( packet , "bad-format" )
FUNCTION_CALL	98:5	98:43	11	xmlnode_get_child ( packet , "bad-format" )
CALLEE	98:5	98:5	12	xmlnode_get_child
LEAF_NODE	98:5	98:5	13	xmlnode_get_child
LEAF_NODE	98:22	98:22	12	(
ARGUMENT	98:23	98:23	12	packet
FIELD	98:23	98:23	13	packet
LEAF_NODE	98:23	98:23	14	packet
LEAF_NODE	98:29	98:29	12	,
ARGUMENT	98:31	98:31	12	"bad-format"
FIELD	98:31	98:31	13	"bad-format"
LEAF_NODE	98:31	98:31	14	"bad-format"
LEAF_NODE	98:43	98:43	12	)
LEAF_NODE	98:44	98:44	9	)
STATEMENTS	98:46	100:2	9	
LEAF_NODE	98:46	98:46	10	{
STATEMENTS	99:3	99:3	10	
EXPR_STATEMENT	99:3	99:25	11	text = _ ( "Bad Format" ) ;
EXPR	99:3	99:3	12	text = _ ( "Bad Format" )
ASSIGN	99:3	99:10	13	text = _ ( "Bad Format" )
LVAL	99:3	99:3	14	text
FIELD	99:3	99:3	15	text
LEAF_NODE	99:3	99:3	16	text
ASSIGN_OP	99:8	99:8	14	=
LEAF_NODE	99:8	99:8	15	=
RVAL	99:10	99:10	14	_ ( "Bad Format" )
FUNCTION_CALL	99:10	99:24	15	_ ( "Bad Format" )
CALLEE	99:10	99:10	16	_
LEAF_NODE	99:10	99:10	17	_
LEAF_NODE	99:11	99:11	16	(
ARGUMENT	99:12	99:12	16	"Bad Format"
FIELD	99:12	99:12	17	"Bad Format"
LEAF_NODE	99:12	99:12	18	"Bad Format"
LEAF_NODE	99:24	99:24	16	)
LEAF_NODE	99:25	99:25	12	;
LEAF_NODE	100:2	100:2	10	}
SELECTION	100:4	100:9	8	
KEYWORD	100:4	100:4	9	else
LEAF_NODE	100:4	100:4	10	else
STATEMENTS	100:9	100:9	9	
SELECTION	100:9	100:63	10	
KEYWORD	100:9	100:9	11	if
LEAF_NODE	100:9	100:9	12	if
LEAF_NODE	100:11	100:11	11	(
CONDITION	100:12	100:12	11	xmlnode_get_child ( packet , "bad-namespace-prefix" )
EXPR	100:12	100:12	12	xmlnode_get_child ( packet , "bad-namespace-prefix" )
FUNCTION_CALL	100:12	100:60	13	xmlnode_get_child ( packet , "bad-namespace-prefix" )
CALLEE	100:12	100:12	14	xmlnode_get_child
LEAF_NODE	100:12	100:12	15	xmlnode_get_child
LEAF_NODE	100:29	100:29	14	(
ARGUMENT	100:30	100:30	14	packet
FIELD	100:30	100:30	15	packet
LEAF_NODE	100:30	100:30	16	packet
LEAF_NODE	100:36	100:36	14	,
ARGUMENT	100:38	100:38	14	"bad-namespace-prefix"
FIELD	100:38	100:38	15	"bad-namespace-prefix"
LEAF_NODE	100:38	100:38	16	"bad-namespace-prefix"
LEAF_NODE	100:60	100:60	14	)
LEAF_NODE	100:61	100:61	11	)
STATEMENTS	100:63	102:2	11	
LEAF_NODE	100:63	100:63	12	{
STATEMENTS	101:3	101:3	12	
EXPR_STATEMENT	101:3	101:35	13	text = _ ( "Bad Namespace Prefix" ) ;
EXPR	101:3	101:3	14	text = _ ( "Bad Namespace Prefix" )
ASSIGN	101:3	101:10	15	text = _ ( "Bad Namespace Prefix" )
LVAL	101:3	101:3	16	text
FIELD	101:3	101:3	17	text
LEAF_NODE	101:3	101:3	18	text
ASSIGN_OP	101:8	101:8	16	=
LEAF_NODE	101:8	101:8	17	=
RVAL	101:10	101:10	16	_ ( "Bad Namespace Prefix" )
FUNCTION_CALL	101:10	101:34	17	_ ( "Bad Namespace Prefix" )
CALLEE	101:10	101:10	18	_
LEAF_NODE	101:10	101:10	19	_
LEAF_NODE	101:11	101:11	18	(
ARGUMENT	101:12	101:12	18	"Bad Namespace Prefix"
FIELD	101:12	101:12	19	"Bad Namespace Prefix"
LEAF_NODE	101:12	101:12	20	"Bad Namespace Prefix"
LEAF_NODE	101:34	101:34	18	)
LEAF_NODE	101:35	101:35	14	;
LEAF_NODE	102:2	102:2	12	}
SELECTION	102:4	102:9	8	
KEYWORD	102:4	102:4	9	else
LEAF_NODE	102:4	102:4	10	else
STATEMENTS	102:9	102:9	9	
SELECTION	102:9	102:51	10	
KEYWORD	102:9	102:9	11	if
LEAF_NODE	102:9	102:9	12	if
LEAF_NODE	102:11	102:11	11	(
CONDITION	102:12	102:12	11	xmlnode_get_child ( packet , "conflict" )
EXPR	102:12	102:12	12	xmlnode_get_child ( packet , "conflict" )
FUNCTION_CALL	102:12	102:48	13	xmlnode_get_child ( packet , "conflict" )
CALLEE	102:12	102:12	14	xmlnode_get_child
LEAF_NODE	102:12	102:12	15	xmlnode_get_child
LEAF_NODE	102:29	102:29	14	(
ARGUMENT	102:30	102:30	14	packet
FIELD	102:30	102:30	15	packet
LEAF_NODE	102:30	102:30	16	packet
LEAF_NODE	102:36	102:36	14	,
ARGUMENT	102:38	102:38	14	"conflict"
FIELD	102:38	102:38	15	"conflict"
LEAF_NODE	102:38	102:38	16	"conflict"
LEAF_NODE	102:48	102:48	14	)
LEAF_NODE	102:49	102:49	11	)
STATEMENTS	102:51	105:2	11	
LEAF_NODE	102:51	102:51	12	{
STATEMENTS	103:3	104:3	12	
EXPR_STATEMENT	103:3	103:50	13	SET_REASON ( PURPLE_CONNECTION_ERROR_NAME_IN_USE ) ;
EXPR	103:3	103:3	14	SET_REASON ( PURPLE_CONNECTION_ERROR_NAME_IN_USE )
FUNCTION_CALL	103:3	103:49	15	SET_REASON ( PURPLE_CONNECTION_ERROR_NAME_IN_USE )
CALLEE	103:3	103:3	16	SET_REASON
LEAF_NODE	103:3	103:3	17	SET_REASON
LEAF_NODE	103:13	103:13	16	(
ARGUMENT	103:14	103:14	16	PURPLE_CONNECTION_ERROR_NAME_IN_USE
FIELD	103:14	103:14	17	PURPLE_CONNECTION_ERROR_NAME_IN_USE
LEAF_NODE	103:14	103:14	18	PURPLE_CONNECTION_ERROR_NAME_IN_USE
LEAF_NODE	103:49	103:49	16	)
LEAF_NODE	103:50	103:50	14	;
EXPR_STATEMENT	104:3	104:32	13	text = _ ( "Resource Conflict" ) ;
EXPR	104:3	104:3	14	text = _ ( "Resource Conflict" )
ASSIGN	104:3	104:10	15	text = _ ( "Resource Conflict" )
LVAL	104:3	104:3	16	text
FIELD	104:3	104:3	17	text
LEAF_NODE	104:3	104:3	18	text
ASSIGN_OP	104:8	104:8	16	=
LEAF_NODE	104:8	104:8	17	=
RVAL	104:10	104:10	16	_ ( "Resource Conflict" )
FUNCTION_CALL	104:10	104:31	17	_ ( "Resource Conflict" )
CALLEE	104:10	104:10	18	_
LEAF_NODE	104:10	104:10	19	_
LEAF_NODE	104:11	104:11	18	(
ARGUMENT	104:12	104:12	18	"Resource Conflict"
FIELD	104:12	104:12	19	"Resource Conflict"
LEAF_NODE	104:12	104:12	20	"Resource Conflict"
LEAF_NODE	104:31	104:31	18	)
LEAF_NODE	104:32	104:32	14	;
LEAF_NODE	105:2	105:2	12	}
SELECTION	105:4	105:9	8	
KEYWORD	105:4	105:4	9	else
LEAF_NODE	105:4	105:4	10	else
STATEMENTS	105:9	105:9	9	
SELECTION	105:9	105:61	10	
KEYWORD	105:9	105:9	11	if
LEAF_NODE	105:9	105:9	12	if
LEAF_NODE	105:11	105:11	11	(
CONDITION	105:12	105:12	11	xmlnode_get_child ( packet , "connection-timeout" )
EXPR	105:12	105:12	12	xmlnode_get_child ( packet , "connection-timeout" )
FUNCTION_CALL	105:12	105:58	13	xmlnode_get_child ( packet , "connection-timeout" )
CALLEE	105:12	105:12	14	xmlnode_get_child
LEAF_NODE	105:12	105:12	15	xmlnode_get_child
LEAF_NODE	105:29	105:29	14	(
ARGUMENT	105:30	105:30	14	packet
FIELD	105:30	105:30	15	packet
LEAF_NODE	105:30	105:30	16	packet
LEAF_NODE	105:36	105:36	14	,
ARGUMENT	105:38	105:38	14	"connection-timeout"
FIELD	105:38	105:38	15	"connection-timeout"
LEAF_NODE	105:38	105:38	16	"connection-timeout"
LEAF_NODE	105:58	105:58	14	)
LEAF_NODE	105:59	105:59	11	)
STATEMENTS	105:61	107:2	11	
LEAF_NODE	105:61	105:61	12	{
STATEMENTS	106:3	106:3	12	
EXPR_STATEMENT	106:3	106:33	13	text = _ ( "Connection Timeout" ) ;
EXPR	106:3	106:3	14	text = _ ( "Connection Timeout" )
ASSIGN	106:3	106:10	15	text = _ ( "Connection Timeout" )
LVAL	106:3	106:3	16	text
FIELD	106:3	106:3	17	text
LEAF_NODE	106:3	106:3	18	text
ASSIGN_OP	106:8	106:8	16	=
LEAF_NODE	106:8	106:8	17	=
RVAL	106:10	106:10	16	_ ( "Connection Timeout" )
FUNCTION_CALL	106:10	106:32	17	_ ( "Connection Timeout" )
CALLEE	106:10	106:10	18	_
LEAF_NODE	106:10	106:10	19	_
LEAF_NODE	106:11	106:11	18	(
ARGUMENT	106:12	106:12	18	"Connection Timeout"
FIELD	106:12	106:12	19	"Connection Timeout"
LEAF_NODE	106:12	106:12	20	"Connection Timeout"
LEAF_NODE	106:32	106:32	18	)
LEAF_NODE	106:33	106:33	14	;
LEAF_NODE	107:2	107:2	12	}
SELECTION	107:4	107:9	8	
KEYWORD	107:4	107:4	9	else
LEAF_NODE	107:4	107:4	10	else
STATEMENTS	107:9	107:9	9	
SELECTION	107:9	107:52	10	
KEYWORD	107:9	107:9	11	if
LEAF_NODE	107:9	107:9	12	if
LEAF_NODE	107:11	107:11	11	(
CONDITION	107:12	107:12	11	xmlnode_get_child ( packet , "host-gone" )
EXPR	107:12	107:12	12	xmlnode_get_child ( packet , "host-gone" )
FUNCTION_CALL	107:12	107:49	13	xmlnode_get_child ( packet , "host-gone" )
CALLEE	107:12	107:12	14	xmlnode_get_child
LEAF_NODE	107:12	107:12	15	xmlnode_get_child
LEAF_NODE	107:29	107:29	14	(
ARGUMENT	107:30	107:30	14	packet
FIELD	107:30	107:30	15	packet
LEAF_NODE	107:30	107:30	16	packet
LEAF_NODE	107:36	107:36	14	,
ARGUMENT	107:38	107:38	14	"host-gone"
FIELD	107:38	107:38	15	"host-gone"
LEAF_NODE	107:38	107:38	16	"host-gone"
LEAF_NODE	107:49	107:49	14	)
LEAF_NODE	107:50	107:50	11	)
STATEMENTS	107:52	109:2	11	
LEAF_NODE	107:52	107:52	12	{
STATEMENTS	108:3	108:3	12	
EXPR_STATEMENT	108:3	108:24	13	text = _ ( "Host Gone" ) ;
EXPR	108:3	108:3	14	text = _ ( "Host Gone" )
ASSIGN	108:3	108:10	15	text = _ ( "Host Gone" )
LVAL	108:3	108:3	16	text
FIELD	108:3	108:3	17	text
LEAF_NODE	108:3	108:3	18	text
ASSIGN_OP	108:8	108:8	16	=
LEAF_NODE	108:8	108:8	17	=
RVAL	108:10	108:10	16	_ ( "Host Gone" )
FUNCTION_CALL	108:10	108:23	17	_ ( "Host Gone" )
CALLEE	108:10	108:10	18	_
LEAF_NODE	108:10	108:10	19	_
LEAF_NODE	108:11	108:11	18	(
ARGUMENT	108:12	108:12	18	"Host Gone"
FIELD	108:12	108:12	19	"Host Gone"
LEAF_NODE	108:12	108:12	20	"Host Gone"
LEAF_NODE	108:23	108:23	18	)
LEAF_NODE	108:24	108:24	14	;
LEAF_NODE	109:2	109:2	12	}
SELECTION	109:4	109:9	8	
KEYWORD	109:4	109:4	9	else
LEAF_NODE	109:4	109:4	10	else
STATEMENTS	109:9	109:9	9	
SELECTION	109:9	109:55	10	
KEYWORD	109:9	109:9	11	if
LEAF_NODE	109:9	109:9	12	if
LEAF_NODE	109:11	109:11	11	(
CONDITION	109:12	109:12	11	xmlnode_get_child ( packet , "host-unknown" )
EXPR	109:12	109:12	12	xmlnode_get_child ( packet , "host-unknown" )
FUNCTION_CALL	109:12	109:52	13	xmlnode_get_child ( packet , "host-unknown" )
CALLEE	109:12	109:12	14	xmlnode_get_child
LEAF_NODE	109:12	109:12	15	xmlnode_get_child
LEAF_NODE	109:29	109:29	14	(
ARGUMENT	109:30	109:30	14	packet
FIELD	109:30	109:30	15	packet
LEAF_NODE	109:30	109:30	16	packet
LEAF_NODE	109:36	109:36	14	,
ARGUMENT	109:38	109:38	14	"host-unknown"
FIELD	109:38	109:38	15	"host-unknown"
LEAF_NODE	109:38	109:38	16	"host-unknown"
LEAF_NODE	109:52	109:52	14	)
LEAF_NODE	109:53	109:53	11	)
STATEMENTS	109:55	111:2	11	
LEAF_NODE	109:55	109:55	12	{
STATEMENTS	110:3	110:3	12	
EXPR_STATEMENT	110:3	110:27	13	text = _ ( "Host Unknown" ) ;
EXPR	110:3	110:3	14	text = _ ( "Host Unknown" )
ASSIGN	110:3	110:10	15	text = _ ( "Host Unknown" )
LVAL	110:3	110:3	16	text
FIELD	110:3	110:3	17	text
LEAF_NODE	110:3	110:3	18	text
ASSIGN_OP	110:8	110:8	16	=
LEAF_NODE	110:8	110:8	17	=
RVAL	110:10	110:10	16	_ ( "Host Unknown" )
FUNCTION_CALL	110:10	110:26	17	_ ( "Host Unknown" )
CALLEE	110:10	110:10	18	_
LEAF_NODE	110:10	110:10	19	_
LEAF_NODE	110:11	110:11	18	(
ARGUMENT	110:12	110:12	18	"Host Unknown"
FIELD	110:12	110:12	19	"Host Unknown"
LEAF_NODE	110:12	110:12	20	"Host Unknown"
LEAF_NODE	110:26	110:26	18	)
LEAF_NODE	110:27	110:27	14	;
LEAF_NODE	111:2	111:2	12	}
SELECTION	111:4	111:9	8	
KEYWORD	111:4	111:4	9	else
LEAF_NODE	111:4	111:4	10	else
STATEMENTS	111:9	111:9	9	
SELECTION	111:9	111:62	10	
KEYWORD	111:9	111:9	11	if
LEAF_NODE	111:9	111:9	12	if
LEAF_NODE	111:11	111:11	11	(
CONDITION	111:12	111:12	11	xmlnode_get_child ( packet , "improper-addressing" )
EXPR	111:12	111:12	12	xmlnode_get_child ( packet , "improper-addressing" )
FUNCTION_CALL	111:12	111:59	13	xmlnode_get_child ( packet , "improper-addressing" )
CALLEE	111:12	111:12	14	xmlnode_get_child
LEAF_NODE	111:12	111:12	15	xmlnode_get_child
LEAF_NODE	111:29	111:29	14	(
ARGUMENT	111:30	111:30	14	packet
FIELD	111:30	111:30	15	packet
LEAF_NODE	111:30	111:30	16	packet
LEAF_NODE	111:36	111:36	14	,
ARGUMENT	111:38	111:38	14	"improper-addressing"
FIELD	111:38	111:38	15	"improper-addressing"
LEAF_NODE	111:38	111:38	16	"improper-addressing"
LEAF_NODE	111:59	111:59	14	)
LEAF_NODE	111:60	111:60	11	)
STATEMENTS	111:62	113:2	11	
LEAF_NODE	111:62	111:62	12	{
STATEMENTS	112:3	112:3	12	
EXPR_STATEMENT	112:3	112:34	13	text = _ ( "Improper Addressing" ) ;
EXPR	112:3	112:3	14	text = _ ( "Improper Addressing" )
ASSIGN	112:3	112:10	15	text = _ ( "Improper Addressing" )
LVAL	112:3	112:3	16	text
FIELD	112:3	112:3	17	text
LEAF_NODE	112:3	112:3	18	text
ASSIGN_OP	112:8	112:8	16	=
LEAF_NODE	112:8	112:8	17	=
RVAL	112:10	112:10	16	_ ( "Improper Addressing" )
FUNCTION_CALL	112:10	112:33	17	_ ( "Improper Addressing" )
CALLEE	112:10	112:10	18	_
LEAF_NODE	112:10	112:10	19	_
LEAF_NODE	112:11	112:11	18	(
ARGUMENT	112:12	112:12	18	"Improper Addressing"
FIELD	112:12	112:12	19	"Improper Addressing"
LEAF_NODE	112:12	112:12	20	"Improper Addressing"
LEAF_NODE	112:33	112:33	18	)
LEAF_NODE	112:34	112:34	14	;
LEAF_NODE	113:2	113:2	12	}
SELECTION	113:4	113:9	8	
KEYWORD	113:4	113:4	9	else
LEAF_NODE	113:4	113:4	10	else
STATEMENTS	113:9	113:9	9	
SELECTION	113:9	113:64	10	
KEYWORD	113:9	113:9	11	if
LEAF_NODE	113:9	113:9	12	if
LEAF_NODE	113:11	113:11	11	(
CONDITION	113:12	113:12	11	xmlnode_get_child ( packet , "internal-server-error" )
EXPR	113:12	113:12	12	xmlnode_get_child ( packet , "internal-server-error" )
FUNCTION_CALL	113:12	113:61	13	xmlnode_get_child ( packet , "internal-server-error" )
CALLEE	113:12	113:12	14	xmlnode_get_child
LEAF_NODE	113:12	113:12	15	xmlnode_get_child
LEAF_NODE	113:29	113:29	14	(
ARGUMENT	113:30	113:30	14	packet
FIELD	113:30	113:30	15	packet
LEAF_NODE	113:30	113:30	16	packet
LEAF_NODE	113:36	113:36	14	,
ARGUMENT	113:38	113:38	14	"internal-server-error"
FIELD	113:38	113:38	15	"internal-server-error"
LEAF_NODE	113:38	113:38	16	"internal-server-error"
LEAF_NODE	113:61	113:61	14	)
LEAF_NODE	113:62	113:62	11	)
STATEMENTS	113:64	115:2	11	
LEAF_NODE	113:64	113:64	12	{
STATEMENTS	114:3	114:3	12	
EXPR_STATEMENT	114:3	114:36	13	text = _ ( "Internal Server Error" ) ;
EXPR	114:3	114:3	14	text = _ ( "Internal Server Error" )
ASSIGN	114:3	114:10	15	text = _ ( "Internal Server Error" )
LVAL	114:3	114:3	16	text
FIELD	114:3	114:3	17	text
LEAF_NODE	114:3	114:3	18	text
ASSIGN_OP	114:8	114:8	16	=
LEAF_NODE	114:8	114:8	17	=
RVAL	114:10	114:10	16	_ ( "Internal Server Error" )
FUNCTION_CALL	114:10	114:35	17	_ ( "Internal Server Error" )
CALLEE	114:10	114:10	18	_
LEAF_NODE	114:10	114:10	19	_
LEAF_NODE	114:11	114:11	18	(
ARGUMENT	114:12	114:12	18	"Internal Server Error"
FIELD	114:12	114:12	19	"Internal Server Error"
LEAF_NODE	114:12	114:12	20	"Internal Server Error"
LEAF_NODE	114:35	114:35	18	)
LEAF_NODE	114:36	114:36	14	;
LEAF_NODE	115:2	115:2	12	}
SELECTION	115:4	115:9	8	
KEYWORD	115:4	115:4	9	else
LEAF_NODE	115:4	115:4	10	else
STATEMENTS	115:9	115:9	9	
SELECTION	115:9	115:53	10	
KEYWORD	115:9	115:9	11	if
LEAF_NODE	115:9	115:9	12	if
LEAF_NODE	115:11	115:11	11	(
CONDITION	115:12	115:12	11	xmlnode_get_child ( packet , "invalid-id" )
EXPR	115:12	115:12	12	xmlnode_get_child ( packet , "invalid-id" )
FUNCTION_CALL	115:12	115:50	13	xmlnode_get_child ( packet , "invalid-id" )
CALLEE	115:12	115:12	14	xmlnode_get_child
LEAF_NODE	115:12	115:12	15	xmlnode_get_child
LEAF_NODE	115:29	115:29	14	(
ARGUMENT	115:30	115:30	14	packet
FIELD	115:30	115:30	15	packet
LEAF_NODE	115:30	115:30	16	packet
LEAF_NODE	115:36	115:36	14	,
ARGUMENT	115:38	115:38	14	"invalid-id"
FIELD	115:38	115:38	15	"invalid-id"
LEAF_NODE	115:38	115:38	16	"invalid-id"
LEAF_NODE	115:50	115:50	14	)
LEAF_NODE	115:51	115:51	11	)
STATEMENTS	115:53	117:2	11	
LEAF_NODE	115:53	115:53	12	{
STATEMENTS	116:3	116:3	12	
EXPR_STATEMENT	116:3	116:25	13	text = _ ( "Invalid ID" ) ;
EXPR	116:3	116:3	14	text = _ ( "Invalid ID" )
ASSIGN	116:3	116:10	15	text = _ ( "Invalid ID" )
LVAL	116:3	116:3	16	text
FIELD	116:3	116:3	17	text
LEAF_NODE	116:3	116:3	18	text
ASSIGN_OP	116:8	116:8	16	=
LEAF_NODE	116:8	116:8	17	=
RVAL	116:10	116:10	16	_ ( "Invalid ID" )
FUNCTION_CALL	116:10	116:24	17	_ ( "Invalid ID" )
CALLEE	116:10	116:10	18	_
LEAF_NODE	116:10	116:10	19	_
LEAF_NODE	116:11	116:11	18	(
ARGUMENT	116:12	116:12	18	"Invalid ID"
FIELD	116:12	116:12	19	"Invalid ID"
LEAF_NODE	116:12	116:12	20	"Invalid ID"
LEAF_NODE	116:24	116:24	18	)
LEAF_NODE	116:25	116:25	14	;
LEAF_NODE	117:2	117:2	12	}
SELECTION	117:4	117:9	8	
KEYWORD	117:4	117:4	9	else
LEAF_NODE	117:4	117:4	10	else
STATEMENTS	117:9	117:9	9	
SELECTION	117:9	117:60	10	
KEYWORD	117:9	117:9	11	if
LEAF_NODE	117:9	117:9	12	if
LEAF_NODE	117:11	117:11	11	(
CONDITION	117:12	117:12	11	xmlnode_get_child ( packet , "invalid-namespace" )
EXPR	117:12	117:12	12	xmlnode_get_child ( packet , "invalid-namespace" )
FUNCTION_CALL	117:12	117:57	13	xmlnode_get_child ( packet , "invalid-namespace" )
CALLEE	117:12	117:12	14	xmlnode_get_child
LEAF_NODE	117:12	117:12	15	xmlnode_get_child
LEAF_NODE	117:29	117:29	14	(
ARGUMENT	117:30	117:30	14	packet
FIELD	117:30	117:30	15	packet
LEAF_NODE	117:30	117:30	16	packet
LEAF_NODE	117:36	117:36	14	,
ARGUMENT	117:38	117:38	14	"invalid-namespace"
FIELD	117:38	117:38	15	"invalid-namespace"
LEAF_NODE	117:38	117:38	16	"invalid-namespace"
LEAF_NODE	117:57	117:57	14	)
LEAF_NODE	117:58	117:58	11	)
STATEMENTS	117:60	119:2	11	
LEAF_NODE	117:60	117:60	12	{
STATEMENTS	118:3	118:3	12	
EXPR_STATEMENT	118:3	118:32	13	text = _ ( "Invalid Namespace" ) ;
EXPR	118:3	118:3	14	text = _ ( "Invalid Namespace" )
ASSIGN	118:3	118:10	15	text = _ ( "Invalid Namespace" )
LVAL	118:3	118:3	16	text
FIELD	118:3	118:3	17	text
LEAF_NODE	118:3	118:3	18	text
ASSIGN_OP	118:8	118:8	16	=
LEAF_NODE	118:8	118:8	17	=
RVAL	118:10	118:10	16	_ ( "Invalid Namespace" )
FUNCTION_CALL	118:10	118:31	17	_ ( "Invalid Namespace" )
CALLEE	118:10	118:10	18	_
LEAF_NODE	118:10	118:10	19	_
LEAF_NODE	118:11	118:11	18	(
ARGUMENT	118:12	118:12	18	"Invalid Namespace"
FIELD	118:12	118:12	19	"Invalid Namespace"
LEAF_NODE	118:12	118:12	20	"Invalid Namespace"
LEAF_NODE	118:31	118:31	18	)
LEAF_NODE	118:32	118:32	14	;
LEAF_NODE	119:2	119:2	12	}
SELECTION	119:4	119:9	8	
KEYWORD	119:4	119:4	9	else
LEAF_NODE	119:4	119:4	10	else
STATEMENTS	119:9	119:9	9	
SELECTION	119:9	119:54	10	
KEYWORD	119:9	119:9	11	if
LEAF_NODE	119:9	119:9	12	if
LEAF_NODE	119:11	119:11	11	(
CONDITION	119:12	119:12	11	xmlnode_get_child ( packet , "invalid-xml" )
EXPR	119:12	119:12	12	xmlnode_get_child ( packet , "invalid-xml" )
FUNCTION_CALL	119:12	119:51	13	xmlnode_get_child ( packet , "invalid-xml" )
CALLEE	119:12	119:12	14	xmlnode_get_child
LEAF_NODE	119:12	119:12	15	xmlnode_get_child
LEAF_NODE	119:29	119:29	14	(
ARGUMENT	119:30	119:30	14	packet
FIELD	119:30	119:30	15	packet
LEAF_NODE	119:30	119:30	16	packet
LEAF_NODE	119:36	119:36	14	,
ARGUMENT	119:38	119:38	14	"invalid-xml"
FIELD	119:38	119:38	15	"invalid-xml"
LEAF_NODE	119:38	119:38	16	"invalid-xml"
LEAF_NODE	119:51	119:51	14	)
LEAF_NODE	119:52	119:52	11	)
STATEMENTS	119:54	121:2	11	
LEAF_NODE	119:54	119:54	12	{
STATEMENTS	120:3	120:3	12	
EXPR_STATEMENT	120:3	120:26	13	text = _ ( "Invalid XML" ) ;
EXPR	120:3	120:3	14	text = _ ( "Invalid XML" )
ASSIGN	120:3	120:10	15	text = _ ( "Invalid XML" )
LVAL	120:3	120:3	16	text
FIELD	120:3	120:3	17	text
LEAF_NODE	120:3	120:3	18	text
ASSIGN_OP	120:8	120:8	16	=
LEAF_NODE	120:8	120:8	17	=
RVAL	120:10	120:10	16	_ ( "Invalid XML" )
FUNCTION_CALL	120:10	120:25	17	_ ( "Invalid XML" )
CALLEE	120:10	120:10	18	_
LEAF_NODE	120:10	120:10	19	_
LEAF_NODE	120:11	120:11	18	(
ARGUMENT	120:12	120:12	18	"Invalid XML"
FIELD	120:12	120:12	19	"Invalid XML"
LEAF_NODE	120:12	120:12	20	"Invalid XML"
LEAF_NODE	120:25	120:25	18	)
LEAF_NODE	120:26	120:26	14	;
LEAF_NODE	121:2	121:2	12	}
SELECTION	121:4	121:9	8	
KEYWORD	121:4	121:4	9	else
LEAF_NODE	121:4	121:4	10	else
STATEMENTS	121:9	121:9	9	
SELECTION	121:9	121:60	10	
KEYWORD	121:9	121:9	11	if
LEAF_NODE	121:9	121:9	12	if
LEAF_NODE	121:11	121:11	11	(
CONDITION	121:12	121:12	11	xmlnode_get_child ( packet , "nonmatching-hosts" )
EXPR	121:12	121:12	12	xmlnode_get_child ( packet , "nonmatching-hosts" )
FUNCTION_CALL	121:12	121:57	13	xmlnode_get_child ( packet , "nonmatching-hosts" )
CALLEE	121:12	121:12	14	xmlnode_get_child
LEAF_NODE	121:12	121:12	15	xmlnode_get_child
LEAF_NODE	121:29	121:29	14	(
ARGUMENT	121:30	121:30	14	packet
FIELD	121:30	121:30	15	packet
LEAF_NODE	121:30	121:30	16	packet
LEAF_NODE	121:36	121:36	14	,
ARGUMENT	121:38	121:38	14	"nonmatching-hosts"
FIELD	121:38	121:38	15	"nonmatching-hosts"
LEAF_NODE	121:38	121:38	16	"nonmatching-hosts"
LEAF_NODE	121:57	121:57	14	)
LEAF_NODE	121:58	121:58	11	)
STATEMENTS	121:60	123:2	11	
LEAF_NODE	121:60	121:60	12	{
STATEMENTS	122:3	122:3	12	
EXPR_STATEMENT	122:3	122:33	13	text = _ ( "Non-matching Hosts" ) ;
EXPR	122:3	122:3	14	text = _ ( "Non-matching Hosts" )
ASSIGN	122:3	122:10	15	text = _ ( "Non-matching Hosts" )
LVAL	122:3	122:3	16	text
FIELD	122:3	122:3	17	text
LEAF_NODE	122:3	122:3	18	text
ASSIGN_OP	122:8	122:8	16	=
LEAF_NODE	122:8	122:8	17	=
RVAL	122:10	122:10	16	_ ( "Non-matching Hosts" )
FUNCTION_CALL	122:10	122:32	17	_ ( "Non-matching Hosts" )
CALLEE	122:10	122:10	18	_
LEAF_NODE	122:10	122:10	19	_
LEAF_NODE	122:11	122:11	18	(
ARGUMENT	122:12	122:12	18	"Non-matching Hosts"
FIELD	122:12	122:12	19	"Non-matching Hosts"
LEAF_NODE	122:12	122:12	20	"Non-matching Hosts"
LEAF_NODE	122:32	122:32	18	)
LEAF_NODE	122:33	122:33	14	;
LEAF_NODE	123:2	123:2	12	}
SELECTION	123:4	123:9	8	
KEYWORD	123:4	123:4	9	else
LEAF_NODE	123:4	123:4	10	else
STATEMENTS	123:9	123:9	9	
SELECTION	123:9	123:57	10	
KEYWORD	123:9	123:9	11	if
LEAF_NODE	123:9	123:9	12	if
LEAF_NODE	123:11	123:11	11	(
CONDITION	123:12	123:12	11	xmlnode_get_child ( packet , "not-authorized" )
EXPR	123:12	123:12	12	xmlnode_get_child ( packet , "not-authorized" )
FUNCTION_CALL	123:12	123:54	13	xmlnode_get_child ( packet , "not-authorized" )
CALLEE	123:12	123:12	14	xmlnode_get_child
LEAF_NODE	123:12	123:12	15	xmlnode_get_child
LEAF_NODE	123:29	123:29	14	(
ARGUMENT	123:30	123:30	14	packet
FIELD	123:30	123:30	15	packet
LEAF_NODE	123:30	123:30	16	packet
LEAF_NODE	123:36	123:36	14	,
ARGUMENT	123:38	123:38	14	"not-authorized"
FIELD	123:38	123:38	15	"not-authorized"
LEAF_NODE	123:38	123:38	16	"not-authorized"
LEAF_NODE	123:54	123:54	14	)
LEAF_NODE	123:55	123:55	11	)
STATEMENTS	123:57	125:2	11	
LEAF_NODE	123:57	123:57	12	{
STATEMENTS	124:3	124:3	12	
EXPR_STATEMENT	124:3	124:29	13	text = _ ( "Not Authorized" ) ;
EXPR	124:3	124:3	14	text = _ ( "Not Authorized" )
ASSIGN	124:3	124:10	15	text = _ ( "Not Authorized" )
LVAL	124:3	124:3	16	text
FIELD	124:3	124:3	17	text
LEAF_NODE	124:3	124:3	18	text
ASSIGN_OP	124:8	124:8	16	=
LEAF_NODE	124:8	124:8	17	=
RVAL	124:10	124:10	16	_ ( "Not Authorized" )
FUNCTION_CALL	124:10	124:28	17	_ ( "Not Authorized" )
CALLEE	124:10	124:10	18	_
LEAF_NODE	124:10	124:10	19	_
LEAF_NODE	124:11	124:11	18	(
ARGUMENT	124:12	124:12	18	"Not Authorized"
FIELD	124:12	124:12	19	"Not Authorized"
LEAF_NODE	124:12	124:12	20	"Not Authorized"
LEAF_NODE	124:28	124:28	18	)
LEAF_NODE	124:29	124:29	14	;
LEAF_NODE	125:2	125:2	12	}
SELECTION	125:4	125:9	8	
KEYWORD	125:4	125:4	9	else
LEAF_NODE	125:4	125:4	10	else
STATEMENTS	125:9	125:9	9	
SELECTION	125:9	125:59	10	
KEYWORD	125:9	125:9	11	if
LEAF_NODE	125:9	125:9	12	if
LEAF_NODE	125:11	125:11	11	(
CONDITION	125:12	125:12	11	xmlnode_get_child ( packet , "policy-violation" )
EXPR	125:12	125:12	12	xmlnode_get_child ( packet , "policy-violation" )
FUNCTION_CALL	125:12	125:56	13	xmlnode_get_child ( packet , "policy-violation" )
CALLEE	125:12	125:12	14	xmlnode_get_child
LEAF_NODE	125:12	125:12	15	xmlnode_get_child
LEAF_NODE	125:29	125:29	14	(
ARGUMENT	125:30	125:30	14	packet
FIELD	125:30	125:30	15	packet
LEAF_NODE	125:30	125:30	16	packet
LEAF_NODE	125:36	125:36	14	,
ARGUMENT	125:38	125:38	14	"policy-violation"
FIELD	125:38	125:38	15	"policy-violation"
LEAF_NODE	125:38	125:38	16	"policy-violation"
LEAF_NODE	125:56	125:56	14	)
LEAF_NODE	125:57	125:57	11	)
STATEMENTS	125:59	127:2	11	
LEAF_NODE	125:59	125:59	12	{
STATEMENTS	126:3	126:3	12	
EXPR_STATEMENT	126:3	126:31	13	text = _ ( "Policy Violation" ) ;
EXPR	126:3	126:3	14	text = _ ( "Policy Violation" )
ASSIGN	126:3	126:10	15	text = _ ( "Policy Violation" )
LVAL	126:3	126:3	16	text
FIELD	126:3	126:3	17	text
LEAF_NODE	126:3	126:3	18	text
ASSIGN_OP	126:8	126:8	16	=
LEAF_NODE	126:8	126:8	17	=
RVAL	126:10	126:10	16	_ ( "Policy Violation" )
FUNCTION_CALL	126:10	126:30	17	_ ( "Policy Violation" )
CALLEE	126:10	126:10	18	_
LEAF_NODE	126:10	126:10	19	_
LEAF_NODE	126:11	126:11	18	(
ARGUMENT	126:12	126:12	18	"Policy Violation"
FIELD	126:12	126:12	19	"Policy Violation"
LEAF_NODE	126:12	126:12	20	"Policy Violation"
LEAF_NODE	126:30	126:30	18	)
LEAF_NODE	126:31	126:31	14	;
LEAF_NODE	127:2	127:2	12	}
SELECTION	127:4	127:9	8	
KEYWORD	127:4	127:4	9	else
LEAF_NODE	127:4	127:4	10	else
STATEMENTS	127:9	127:9	9	
SELECTION	127:9	127:67	10	
KEYWORD	127:9	127:9	11	if
LEAF_NODE	127:9	127:9	12	if
LEAF_NODE	127:11	127:11	11	(
CONDITION	127:12	127:12	11	xmlnode_get_child ( packet , "remote-connection-failed" )
EXPR	127:12	127:12	12	xmlnode_get_child ( packet , "remote-connection-failed" )
FUNCTION_CALL	127:12	127:64	13	xmlnode_get_child ( packet , "remote-connection-failed" )
CALLEE	127:12	127:12	14	xmlnode_get_child
LEAF_NODE	127:12	127:12	15	xmlnode_get_child
LEAF_NODE	127:29	127:29	14	(
ARGUMENT	127:30	127:30	14	packet
FIELD	127:30	127:30	15	packet
LEAF_NODE	127:30	127:30	16	packet
LEAF_NODE	127:36	127:36	14	,
ARGUMENT	127:38	127:38	14	"remote-connection-failed"
FIELD	127:38	127:38	15	"remote-connection-failed"
LEAF_NODE	127:38	127:38	16	"remote-connection-failed"
LEAF_NODE	127:64	127:64	14	)
LEAF_NODE	127:65	127:65	11	)
STATEMENTS	127:67	129:2	11	
LEAF_NODE	127:67	127:67	12	{
STATEMENTS	128:3	128:3	12	
EXPR_STATEMENT	128:3	128:39	13	text = _ ( "Remote Connection Failed" ) ;
EXPR	128:3	128:3	14	text = _ ( "Remote Connection Failed" )
ASSIGN	128:3	128:10	15	text = _ ( "Remote Connection Failed" )
LVAL	128:3	128:3	16	text
FIELD	128:3	128:3	17	text
LEAF_NODE	128:3	128:3	18	text
ASSIGN_OP	128:8	128:8	16	=
LEAF_NODE	128:8	128:8	17	=
RVAL	128:10	128:10	16	_ ( "Remote Connection Failed" )
FUNCTION_CALL	128:10	128:38	17	_ ( "Remote Connection Failed" )
CALLEE	128:10	128:10	18	_
LEAF_NODE	128:10	128:10	19	_
LEAF_NODE	128:11	128:11	18	(
ARGUMENT	128:12	128:12	18	"Remote Connection Failed"
FIELD	128:12	128:12	19	"Remote Connection Failed"
LEAF_NODE	128:12	128:12	20	"Remote Connection Failed"
LEAF_NODE	128:38	128:38	18	)
LEAF_NODE	128:39	128:39	14	;
LEAF_NODE	129:2	129:2	12	}
SELECTION	129:4	129:9	8	
KEYWORD	129:4	129:4	9	else
LEAF_NODE	129:4	129:4	10	else
STATEMENTS	129:9	129:9	9	
SELECTION	129:9	129:62	10	
KEYWORD	129:9	129:9	11	if
LEAF_NODE	129:9	129:9	12	if
LEAF_NODE	129:11	129:11	11	(
CONDITION	129:12	129:12	11	xmlnode_get_child ( packet , "resource-constraint" )
EXPR	129:12	129:12	12	xmlnode_get_child ( packet , "resource-constraint" )
FUNCTION_CALL	129:12	129:59	13	xmlnode_get_child ( packet , "resource-constraint" )
CALLEE	129:12	129:12	14	xmlnode_get_child
LEAF_NODE	129:12	129:12	15	xmlnode_get_child
LEAF_NODE	129:29	129:29	14	(
ARGUMENT	129:30	129:30	14	packet
FIELD	129:30	129:30	15	packet
LEAF_NODE	129:30	129:30	16	packet
LEAF_NODE	129:36	129:36	14	,
ARGUMENT	129:38	129:38	14	"resource-constraint"
FIELD	129:38	129:38	15	"resource-constraint"
LEAF_NODE	129:38	129:38	16	"resource-constraint"
LEAF_NODE	129:59	129:59	14	)
LEAF_NODE	129:60	129:60	11	)
STATEMENTS	129:62	131:2	11	
LEAF_NODE	129:62	129:62	12	{
STATEMENTS	130:3	130:3	12	
EXPR_STATEMENT	130:3	130:34	13	text = _ ( "Resource Constraint" ) ;
EXPR	130:3	130:3	14	text = _ ( "Resource Constraint" )
ASSIGN	130:3	130:10	15	text = _ ( "Resource Constraint" )
LVAL	130:3	130:3	16	text
FIELD	130:3	130:3	17	text
LEAF_NODE	130:3	130:3	18	text
ASSIGN_OP	130:8	130:8	16	=
LEAF_NODE	130:8	130:8	17	=
RVAL	130:10	130:10	16	_ ( "Resource Constraint" )
FUNCTION_CALL	130:10	130:33	17	_ ( "Resource Constraint" )
CALLEE	130:10	130:10	18	_
LEAF_NODE	130:10	130:10	19	_
LEAF_NODE	130:11	130:11	18	(
ARGUMENT	130:12	130:12	18	"Resource Constraint"
FIELD	130:12	130:12	19	"Resource Constraint"
LEAF_NODE	130:12	130:12	20	"Resource Constraint"
LEAF_NODE	130:33	130:33	18	)
LEAF_NODE	130:34	130:34	14	;
LEAF_NODE	131:2	131:2	12	}
SELECTION	131:4	131:9	8	
KEYWORD	131:4	131:4	9	else
LEAF_NODE	131:4	131:4	10	else
STATEMENTS	131:9	131:9	9	
SELECTION	131:9	131:57	10	
KEYWORD	131:9	131:9	11	if
LEAF_NODE	131:9	131:9	12	if
LEAF_NODE	131:11	131:11	11	(
CONDITION	131:12	131:12	11	xmlnode_get_child ( packet , "restricted-xml" )
EXPR	131:12	131:12	12	xmlnode_get_child ( packet , "restricted-xml" )
FUNCTION_CALL	131:12	131:54	13	xmlnode_get_child ( packet , "restricted-xml" )
CALLEE	131:12	131:12	14	xmlnode_get_child
LEAF_NODE	131:12	131:12	15	xmlnode_get_child
LEAF_NODE	131:29	131:29	14	(
ARGUMENT	131:30	131:30	14	packet
FIELD	131:30	131:30	15	packet
LEAF_NODE	131:30	131:30	16	packet
LEAF_NODE	131:36	131:36	14	,
ARGUMENT	131:38	131:38	14	"restricted-xml"
FIELD	131:38	131:38	15	"restricted-xml"
LEAF_NODE	131:38	131:38	16	"restricted-xml"
LEAF_NODE	131:54	131:54	14	)
LEAF_NODE	131:55	131:55	11	)
STATEMENTS	131:57	133:2	11	
LEAF_NODE	131:57	131:57	12	{
STATEMENTS	132:3	132:3	12	
EXPR_STATEMENT	132:3	132:29	13	text = _ ( "Restricted XML" ) ;
EXPR	132:3	132:3	14	text = _ ( "Restricted XML" )
ASSIGN	132:3	132:10	15	text = _ ( "Restricted XML" )
LVAL	132:3	132:3	16	text
FIELD	132:3	132:3	17	text
LEAF_NODE	132:3	132:3	18	text
ASSIGN_OP	132:8	132:8	16	=
LEAF_NODE	132:8	132:8	17	=
RVAL	132:10	132:10	16	_ ( "Restricted XML" )
FUNCTION_CALL	132:10	132:28	17	_ ( "Restricted XML" )
CALLEE	132:10	132:10	18	_
LEAF_NODE	132:10	132:10	19	_
LEAF_NODE	132:11	132:11	18	(
ARGUMENT	132:12	132:12	18	"Restricted XML"
FIELD	132:12	132:12	19	"Restricted XML"
LEAF_NODE	132:12	132:12	20	"Restricted XML"
LEAF_NODE	132:28	132:28	18	)
LEAF_NODE	132:29	132:29	14	;
LEAF_NODE	133:2	133:2	12	}
SELECTION	133:4	133:9	8	
KEYWORD	133:4	133:4	9	else
LEAF_NODE	133:4	133:4	10	else
STATEMENTS	133:9	133:9	9	
SELECTION	133:9	133:57	10	
KEYWORD	133:9	133:9	11	if
LEAF_NODE	133:9	133:9	12	if
LEAF_NODE	133:11	133:11	11	(
CONDITION	133:12	133:12	11	xmlnode_get_child ( packet , "see-other-host" )
EXPR	133:12	133:12	12	xmlnode_get_child ( packet , "see-other-host" )
FUNCTION_CALL	133:12	133:54	13	xmlnode_get_child ( packet , "see-other-host" )
CALLEE	133:12	133:12	14	xmlnode_get_child
LEAF_NODE	133:12	133:12	15	xmlnode_get_child
LEAF_NODE	133:29	133:29	14	(
ARGUMENT	133:30	133:30	14	packet
FIELD	133:30	133:30	15	packet
LEAF_NODE	133:30	133:30	16	packet
LEAF_NODE	133:36	133:36	14	,
ARGUMENT	133:38	133:38	14	"see-other-host"
FIELD	133:38	133:38	15	"see-other-host"
LEAF_NODE	133:38	133:38	16	"see-other-host"
LEAF_NODE	133:54	133:54	14	)
LEAF_NODE	133:55	133:55	11	)
STATEMENTS	133:57	135:2	11	
LEAF_NODE	133:57	133:57	12	{
STATEMENTS	134:3	134:3	12	
EXPR_STATEMENT	134:3	134:29	13	text = _ ( "See Other Host" ) ;
EXPR	134:3	134:3	14	text = _ ( "See Other Host" )
ASSIGN	134:3	134:10	15	text = _ ( "See Other Host" )
LVAL	134:3	134:3	16	text
FIELD	134:3	134:3	17	text
LEAF_NODE	134:3	134:3	18	text
ASSIGN_OP	134:8	134:8	16	=
LEAF_NODE	134:8	134:8	17	=
RVAL	134:10	134:10	16	_ ( "See Other Host" )
FUNCTION_CALL	134:10	134:28	17	_ ( "See Other Host" )
CALLEE	134:10	134:10	18	_
LEAF_NODE	134:10	134:10	19	_
LEAF_NODE	134:11	134:11	18	(
ARGUMENT	134:12	134:12	18	"See Other Host"
FIELD	134:12	134:12	19	"See Other Host"
LEAF_NODE	134:12	134:12	20	"See Other Host"
LEAF_NODE	134:28	134:28	18	)
LEAF_NODE	134:29	134:29	14	;
LEAF_NODE	135:2	135:2	12	}
SELECTION	135:4	135:9	8	
KEYWORD	135:4	135:4	9	else
LEAF_NODE	135:4	135:4	10	else
STATEMENTS	135:9	135:9	9	
SELECTION	135:9	135:58	10	
KEYWORD	135:9	135:9	11	if
LEAF_NODE	135:9	135:9	12	if
LEAF_NODE	135:11	135:11	11	(
CONDITION	135:12	135:12	11	xmlnode_get_child ( packet , "system-shutdown" )
EXPR	135:12	135:12	12	xmlnode_get_child ( packet , "system-shutdown" )
FUNCTION_CALL	135:12	135:55	13	xmlnode_get_child ( packet , "system-shutdown" )
CALLEE	135:12	135:12	14	xmlnode_get_child
LEAF_NODE	135:12	135:12	15	xmlnode_get_child
LEAF_NODE	135:29	135:29	14	(
ARGUMENT	135:30	135:30	14	packet
FIELD	135:30	135:30	15	packet
LEAF_NODE	135:30	135:30	16	packet
LEAF_NODE	135:36	135:36	14	,
ARGUMENT	135:38	135:38	14	"system-shutdown"
FIELD	135:38	135:38	15	"system-shutdown"
LEAF_NODE	135:38	135:38	16	"system-shutdown"
LEAF_NODE	135:55	135:55	14	)
LEAF_NODE	135:56	135:56	11	)
STATEMENTS	135:58	137:2	11	
LEAF_NODE	135:58	135:58	12	{
STATEMENTS	136:3	136:3	12	
EXPR_STATEMENT	136:3	136:30	13	text = _ ( "System Shutdown" ) ;
EXPR	136:3	136:3	14	text = _ ( "System Shutdown" )
ASSIGN	136:3	136:10	15	text = _ ( "System Shutdown" )
LVAL	136:3	136:3	16	text
FIELD	136:3	136:3	17	text
LEAF_NODE	136:3	136:3	18	text
ASSIGN_OP	136:8	136:8	16	=
LEAF_NODE	136:8	136:8	17	=
RVAL	136:10	136:10	16	_ ( "System Shutdown" )
FUNCTION_CALL	136:10	136:29	17	_ ( "System Shutdown" )
CALLEE	136:10	136:10	18	_
LEAF_NODE	136:10	136:10	19	_
LEAF_NODE	136:11	136:11	18	(
ARGUMENT	136:12	136:12	18	"System Shutdown"
FIELD	136:12	136:12	19	"System Shutdown"
LEAF_NODE	136:12	136:12	20	"System Shutdown"
LEAF_NODE	136:29	136:29	18	)
LEAF_NODE	136:30	136:30	14	;
LEAF_NODE	137:2	137:2	12	}
SELECTION	137:4	137:9	8	
KEYWORD	137:4	137:4	9	else
LEAF_NODE	137:4	137:4	10	else
STATEMENTS	137:9	137:9	9	
SELECTION	137:9	137:62	10	
KEYWORD	137:9	137:9	11	if
LEAF_NODE	137:9	137:9	12	if
LEAF_NODE	137:11	137:11	11	(
CONDITION	137:12	137:12	11	xmlnode_get_child ( packet , "undefined-condition" )
EXPR	137:12	137:12	12	xmlnode_get_child ( packet , "undefined-condition" )
FUNCTION_CALL	137:12	137:59	13	xmlnode_get_child ( packet , "undefined-condition" )
CALLEE	137:12	137:12	14	xmlnode_get_child
LEAF_NODE	137:12	137:12	15	xmlnode_get_child
LEAF_NODE	137:29	137:29	14	(
ARGUMENT	137:30	137:30	14	packet
FIELD	137:30	137:30	15	packet
LEAF_NODE	137:30	137:30	16	packet
LEAF_NODE	137:36	137:36	14	,
ARGUMENT	137:38	137:38	14	"undefined-condition"
FIELD	137:38	137:38	15	"undefined-condition"
LEAF_NODE	137:38	137:38	16	"undefined-condition"
LEAF_NODE	137:59	137:59	14	)
LEAF_NODE	137:60	137:60	11	)
STATEMENTS	137:62	139:2	11	
LEAF_NODE	137:62	137:62	12	{
STATEMENTS	138:3	138:3	12	
EXPR_STATEMENT	138:3	138:34	13	text = _ ( "Undefined Condition" ) ;
EXPR	138:3	138:3	14	text = _ ( "Undefined Condition" )
ASSIGN	138:3	138:10	15	text = _ ( "Undefined Condition" )
LVAL	138:3	138:3	16	text
FIELD	138:3	138:3	17	text
LEAF_NODE	138:3	138:3	18	text
ASSIGN_OP	138:8	138:8	16	=
LEAF_NODE	138:8	138:8	17	=
RVAL	138:10	138:10	16	_ ( "Undefined Condition" )
FUNCTION_CALL	138:10	138:33	17	_ ( "Undefined Condition" )
CALLEE	138:10	138:10	18	_
LEAF_NODE	138:10	138:10	19	_
LEAF_NODE	138:11	138:11	18	(
ARGUMENT	138:12	138:12	18	"Undefined Condition"
FIELD	138:12	138:12	19	"Undefined Condition"
LEAF_NODE	138:12	138:12	20	"Undefined Condition"
LEAF_NODE	138:33	138:33	18	)
LEAF_NODE	138:34	138:34	14	;
LEAF_NODE	139:2	139:2	12	}
SELECTION	139:4	139:9	8	
KEYWORD	139:4	139:4	9	else
LEAF_NODE	139:4	139:4	10	else
STATEMENTS	139:9	139:9	9	
SELECTION	139:9	139:63	10	
KEYWORD	139:9	139:9	11	if
LEAF_NODE	139:9	139:9	12	if
LEAF_NODE	139:11	139:11	11	(
CONDITION	139:12	139:12	11	xmlnode_get_child ( packet , "unsupported-encoding" )
EXPR	139:12	139:12	12	xmlnode_get_child ( packet , "unsupported-encoding" )
FUNCTION_CALL	139:12	139:60	13	xmlnode_get_child ( packet , "unsupported-encoding" )
CALLEE	139:12	139:12	14	xmlnode_get_child
LEAF_NODE	139:12	139:12	15	xmlnode_get_child
LEAF_NODE	139:29	139:29	14	(
ARGUMENT	139:30	139:30	14	packet
FIELD	139:30	139:30	15	packet
LEAF_NODE	139:30	139:30	16	packet
LEAF_NODE	139:36	139:36	14	,
ARGUMENT	139:38	139:38	14	"unsupported-encoding"
FIELD	139:38	139:38	15	"unsupported-encoding"
LEAF_NODE	139:38	139:38	16	"unsupported-encoding"
LEAF_NODE	139:60	139:60	14	)
LEAF_NODE	139:61	139:61	11	)
STATEMENTS	139:63	141:2	11	
LEAF_NODE	139:63	139:63	12	{
STATEMENTS	140:3	140:3	12	
EXPR_STATEMENT	140:3	140:35	13	text = _ ( "Unsupported Encoding" ) ;
EXPR	140:3	140:3	14	text = _ ( "Unsupported Encoding" )
ASSIGN	140:3	140:10	15	text = _ ( "Unsupported Encoding" )
LVAL	140:3	140:3	16	text
FIELD	140:3	140:3	17	text
LEAF_NODE	140:3	140:3	18	text
ASSIGN_OP	140:8	140:8	16	=
LEAF_NODE	140:8	140:8	17	=
RVAL	140:10	140:10	16	_ ( "Unsupported Encoding" )
FUNCTION_CALL	140:10	140:34	17	_ ( "Unsupported Encoding" )
CALLEE	140:10	140:10	18	_
LEAF_NODE	140:10	140:10	19	_
LEAF_NODE	140:11	140:11	18	(
ARGUMENT	140:12	140:12	18	"Unsupported Encoding"
FIELD	140:12	140:12	19	"Unsupported Encoding"
LEAF_NODE	140:12	140:12	20	"Unsupported Encoding"
LEAF_NODE	140:34	140:34	18	)
LEAF_NODE	140:35	140:35	14	;
LEAF_NODE	141:2	141:2	12	}
SELECTION	141:4	141:9	8	
KEYWORD	141:4	141:4	9	else
LEAF_NODE	141:4	141:4	10	else
STATEMENTS	141:9	141:9	9	
SELECTION	141:9	141:66	10	
KEYWORD	141:9	141:9	11	if
LEAF_NODE	141:9	141:9	12	if
LEAF_NODE	141:11	141:11	11	(
CONDITION	141:12	141:12	11	xmlnode_get_child ( packet , "unsupported-stanza-type" )
EXPR	141:12	141:12	12	xmlnode_get_child ( packet , "unsupported-stanza-type" )
FUNCTION_CALL	141:12	141:63	13	xmlnode_get_child ( packet , "unsupported-stanza-type" )
CALLEE	141:12	141:12	14	xmlnode_get_child
LEAF_NODE	141:12	141:12	15	xmlnode_get_child
LEAF_NODE	141:29	141:29	14	(
ARGUMENT	141:30	141:30	14	packet
FIELD	141:30	141:30	15	packet
LEAF_NODE	141:30	141:30	16	packet
LEAF_NODE	141:36	141:36	14	,
ARGUMENT	141:38	141:38	14	"unsupported-stanza-type"
FIELD	141:38	141:38	15	"unsupported-stanza-type"
LEAF_NODE	141:38	141:38	16	"unsupported-stanza-type"
LEAF_NODE	141:63	141:63	14	)
LEAF_NODE	141:64	141:64	11	)
STATEMENTS	141:66	143:2	11	
LEAF_NODE	141:66	141:66	12	{
STATEMENTS	142:3	142:3	12	
EXPR_STATEMENT	142:3	142:38	13	text = _ ( "Unsupported Stanza Type" ) ;
EXPR	142:3	142:3	14	text = _ ( "Unsupported Stanza Type" )
ASSIGN	142:3	142:10	15	text = _ ( "Unsupported Stanza Type" )
LVAL	142:3	142:3	16	text
FIELD	142:3	142:3	17	text
LEAF_NODE	142:3	142:3	18	text
ASSIGN_OP	142:8	142:8	16	=
LEAF_NODE	142:8	142:8	17	=
RVAL	142:10	142:10	16	_ ( "Unsupported Stanza Type" )
FUNCTION_CALL	142:10	142:37	17	_ ( "Unsupported Stanza Type" )
CALLEE	142:10	142:10	18	_
LEAF_NODE	142:10	142:10	19	_
LEAF_NODE	142:11	142:11	18	(
ARGUMENT	142:12	142:12	18	"Unsupported Stanza Type"
FIELD	142:12	142:12	19	"Unsupported Stanza Type"
LEAF_NODE	142:12	142:12	20	"Unsupported Stanza Type"
LEAF_NODE	142:37	142:37	18	)
LEAF_NODE	142:38	142:38	14	;
LEAF_NODE	143:2	143:2	12	}
SELECTION	143:4	143:9	8	
KEYWORD	143:4	143:4	9	else
LEAF_NODE	143:4	143:4	10	else
STATEMENTS	143:9	143:9	9	
SELECTION	143:9	143:62	10	
KEYWORD	143:9	143:9	11	if
LEAF_NODE	143:9	143:9	12	if
LEAF_NODE	143:11	143:11	11	(
CONDITION	143:12	143:12	11	xmlnode_get_child ( packet , "unsupported-version" )
EXPR	143:12	143:12	12	xmlnode_get_child ( packet , "unsupported-version" )
FUNCTION_CALL	143:12	143:59	13	xmlnode_get_child ( packet , "unsupported-version" )
CALLEE	143:12	143:12	14	xmlnode_get_child
LEAF_NODE	143:12	143:12	15	xmlnode_get_child
LEAF_NODE	143:29	143:29	14	(
ARGUMENT	143:30	143:30	14	packet
FIELD	143:30	143:30	15	packet
LEAF_NODE	143:30	143:30	16	packet
LEAF_NODE	143:36	143:36	14	,
ARGUMENT	143:38	143:38	14	"unsupported-version"
FIELD	143:38	143:38	15	"unsupported-version"
LEAF_NODE	143:38	143:38	16	"unsupported-version"
LEAF_NODE	143:59	143:59	14	)
LEAF_NODE	143:60	143:60	11	)
STATEMENTS	143:62	145:2	11	
LEAF_NODE	143:62	143:62	12	{
STATEMENTS	144:3	144:3	12	
EXPR_STATEMENT	144:3	144:34	13	text = _ ( "Unsupported Version" ) ;
EXPR	144:3	144:3	14	text = _ ( "Unsupported Version" )
ASSIGN	144:3	144:10	15	text = _ ( "Unsupported Version" )
LVAL	144:3	144:3	16	text
FIELD	144:3	144:3	17	text
LEAF_NODE	144:3	144:3	18	text
ASSIGN_OP	144:8	144:8	16	=
LEAF_NODE	144:8	144:8	17	=
RVAL	144:10	144:10	16	_ ( "Unsupported Version" )
FUNCTION_CALL	144:10	144:33	17	_ ( "Unsupported Version" )
CALLEE	144:10	144:10	18	_
LEAF_NODE	144:10	144:10	19	_
LEAF_NODE	144:11	144:11	18	(
ARGUMENT	144:12	144:12	18	"Unsupported Version"
FIELD	144:12	144:12	19	"Unsupported Version"
LEAF_NODE	144:12	144:12	20	"Unsupported Version"
LEAF_NODE	144:33	144:33	18	)
LEAF_NODE	144:34	144:34	14	;
LEAF_NODE	145:2	145:2	12	}
SELECTION	145:4	145:9	8	
KEYWORD	145:4	145:4	9	else
LEAF_NODE	145:4	145:4	10	else
STATEMENTS	145:9	145:9	9	
SELECTION	145:9	145:62	10	
KEYWORD	145:9	145:9	11	if
LEAF_NODE	145:9	145:9	12	if
LEAF_NODE	145:11	145:11	11	(
CONDITION	145:12	145:12	11	xmlnode_get_child ( packet , "xml-not-well-formed" )
EXPR	145:12	145:12	12	xmlnode_get_child ( packet , "xml-not-well-formed" )
FUNCTION_CALL	145:12	145:59	13	xmlnode_get_child ( packet , "xml-not-well-formed" )
CALLEE	145:12	145:12	14	xmlnode_get_child
LEAF_NODE	145:12	145:12	15	xmlnode_get_child
LEAF_NODE	145:29	145:29	14	(
ARGUMENT	145:30	145:30	14	packet
FIELD	145:30	145:30	15	packet
LEAF_NODE	145:30	145:30	16	packet
LEAF_NODE	145:36	145:36	14	,
ARGUMENT	145:38	145:38	14	"xml-not-well-formed"
FIELD	145:38	145:38	15	"xml-not-well-formed"
LEAF_NODE	145:38	145:38	16	"xml-not-well-formed"
LEAF_NODE	145:59	145:59	14	)
LEAF_NODE	145:60	145:60	11	)
STATEMENTS	145:62	147:2	11	
LEAF_NODE	145:62	145:62	12	{
STATEMENTS	146:3	146:3	12	
EXPR_STATEMENT	146:3	146:34	13	text = _ ( "XML Not Well Formed" ) ;
EXPR	146:3	146:3	14	text = _ ( "XML Not Well Formed" )
ASSIGN	146:3	146:10	15	text = _ ( "XML Not Well Formed" )
LVAL	146:3	146:3	16	text
FIELD	146:3	146:3	17	text
LEAF_NODE	146:3	146:3	18	text
ASSIGN_OP	146:8	146:8	16	=
LEAF_NODE	146:8	146:8	17	=
RVAL	146:10	146:10	16	_ ( "XML Not Well Formed" )
FUNCTION_CALL	146:10	146:33	17	_ ( "XML Not Well Formed" )
CALLEE	146:10	146:10	18	_
LEAF_NODE	146:10	146:10	19	_
LEAF_NODE	146:11	146:11	18	(
ARGUMENT	146:12	146:12	18	"XML Not Well Formed"
FIELD	146:12	146:12	19	"XML Not Well Formed"
LEAF_NODE	146:12	146:12	20	"XML Not Well Formed"
LEAF_NODE	146:33	146:33	18	)
LEAF_NODE	146:34	146:34	14	;
LEAF_NODE	147:2	147:2	12	}
SELECTION	147:4	147:9	8	
KEYWORD	147:4	147:4	9	else
LEAF_NODE	147:4	147:4	10	else
STATEMENTS	147:9	149:2	9	
LEAF_NODE	147:9	147:9	10	{
STATEMENTS	148:3	148:3	10	
EXPR_STATEMENT	148:3	148:27	11	text = _ ( "Stream Error" ) ;
EXPR	148:3	148:3	12	text = _ ( "Stream Error" )
ASSIGN	148:3	148:10	13	text = _ ( "Stream Error" )
LVAL	148:3	148:3	14	text
FIELD	148:3	148:3	15	text
LEAF_NODE	148:3	148:3	16	text
ASSIGN_OP	148:8	148:8	14	=
LEAF_NODE	148:8	148:8	15	=
RVAL	148:10	148:10	14	_ ( "Stream Error" )
FUNCTION_CALL	148:10	148:26	15	_ ( "Stream Error" )
CALLEE	148:10	148:10	16	_
LEAF_NODE	148:10	148:10	17	_
LEAF_NODE	148:11	148:11	16	(
ARGUMENT	148:12	148:12	16	"Stream Error"
FIELD	148:12	148:12	17	"Stream Error"
LEAF_NODE	148:12	148:12	18	"Stream Error"
LEAF_NODE	148:26	148:26	16	)
LEAF_NODE	148:27	148:27	12	;
LEAF_NODE	149:2	149:2	10	}
LEAF_NODE	150:1	150:1	7	}
SELECTION	152:1	152:19	3	
KEYWORD	152:1	152:1	4	if
LEAF_NODE	152:1	152:1	5	if
LEAF_NODE	152:3	152:3	4	(
CONDITION	152:4	152:4	4	text || cdata
EXPR	152:4	152:4	5	text || cdata
OR	152:4	152:12	6	text || cdata
EXPR	152:4	152:4	7	text
FIELD	152:4	152:4	8	text
LEAF_NODE	152:4	152:4	9	text
LEAF_NODE	152:9	152:9	7	||
EXPR	152:12	152:12	7	cdata
FIELD	152:12	152:12	8	cdata
LEAF_NODE	152:12	152:12	9	cdata
LEAF_NODE	152:17	152:17	4	)
STATEMENTS	152:19	157:1	4	
LEAF_NODE	152:19	152:19	5	{
STATEMENTS	153:2	156:2	5	
SIMPLE_DECL	153:2	154:42	6	char * ret ; ret = g_strdup_printf ( "%s%s%s" , code ? code : "" , code ? ": " : "" , text ? text : cdata ) ;
VAR_DECL	153:2	153:8	7	char * ret ; ret = g_strdup_printf ( "%s%s%s" , code ? code : "" , code ? ": " : "" , text ? text : cdata )
TYPE	153:2	153:7	8	char *
TYPE_NAME	153:2	153:2	9	char
LEAF_NODE	153:2	153:2	10	char
POINTER	153:7	153:7	9	*
LEAF_NODE	153:7	153:7	10	*
NAME	153:8	153:8	8	ret
LEAF_NODE	153:8	153:8	9	ret
LEAF_NODE	0:0	0:0	8	;
INIT	153:8	153:8	8	ret = g_strdup_printf ( "%s%s%s" , code ? code : "" , code ? ": " : "" , text ? text : cdata )
ASSIGN	153:8	153:14	9	ret = g_strdup_printf ( "%s%s%s" , code ? code : "" , code ? ": " : "" , text ? text : cdata )
LVAL	153:8	153:8	10	ret
NAME	153:8	153:8	11	ret
LEAF_NODE	153:8	153:8	12	ret
ASSIGN_OP	153:12	153:12	10	=
LEAF_NODE	153:12	153:12	11	=
RVAL	153:14	153:14	10	g_strdup_printf ( "%s%s%s" , code ? code : "" , code ? ": " : "" , text ? text : cdata )
FUNCTION_CALL	153:14	154:41	11	g_strdup_printf ( "%s%s%s" , code ? code : "" , code ? ": " : "" , text ? text : cdata )
CALLEE	153:14	153:14	12	g_strdup_printf
LEAF_NODE	153:14	153:14	13	g_strdup_printf
LEAF_NODE	153:29	153:29	12	(
ARGUMENT	153:30	153:30	12	"%s%s%s"
FIELD	153:30	153:30	13	"%s%s%s"
LEAF_NODE	153:30	153:30	14	"%s%s%s"
LEAF_NODE	153:38	153:38	12	,
ARGUMENT	153:40	153:40	12	code ? code : ""
COND_EXPR	153:40	153:54	13	code ? code : ""
CONDITION	153:40	153:40	14	code
FIELD	153:40	153:40	15	code
LEAF_NODE	153:40	153:40	16	code
LEAF_NODE	153:45	153:45	14	?
EXPR	153:47	153:47	14	code
FIELD	153:47	153:47	15	code
LEAF_NODE	153:47	153:47	16	code
LEAF_NODE	153:52	153:52	14	:
FIELD	153:54	153:54	14	""
LEAF_NODE	153:54	153:54	15	""
LEAF_NODE	153:56	153:56	12	,
ARGUMENT	154:4	154:4	12	code ? ": " : ""
COND_EXPR	154:4	154:18	13	code ? ": " : ""
CONDITION	154:4	154:4	14	code
FIELD	154:4	154:4	15	code
LEAF_NODE	154:4	154:4	16	code
LEAF_NODE	154:9	154:9	14	?
EXPR	154:11	154:11	14	": "
FIELD	154:11	154:11	15	": "
LEAF_NODE	154:11	154:11	16	": "
LEAF_NODE	154:16	154:16	14	:
FIELD	154:18	154:18	14	""
LEAF_NODE	154:18	154:18	15	""
LEAF_NODE	154:20	154:20	12	,
ARGUMENT	154:22	154:22	12	text ? text : cdata
COND_EXPR	154:22	154:36	13	text ? text : cdata
CONDITION	154:22	154:22	14	text
FIELD	154:22	154:22	15	text
LEAF_NODE	154:22	154:22	16	text
LEAF_NODE	154:27	154:27	14	?
EXPR	154:29	154:29	14	text
FIELD	154:29	154:29	15	text
LEAF_NODE	154:29	154:29	16	text
LEAF_NODE	154:34	154:34	14	:
FIELD	154:36	154:36	14	cdata
LEAF_NODE	154:36	154:36	15	cdata
LEAF_NODE	154:41	154:41	12	)
LEAF_NODE	154:42	154:42	7	;
EXPR_STATEMENT	155:2	155:15	6	g_free ( cdata ) ;
EXPR	155:2	155:2	7	g_free ( cdata )
FUNCTION_CALL	155:2	155:14	8	g_free ( cdata )
CALLEE	155:2	155:2	9	g_free
LEAF_NODE	155:2	155:2	10	g_free
LEAF_NODE	155:8	155:8	9	(
ARGUMENT	155:9	155:9	9	cdata
FIELD	155:9	155:9	10	cdata
LEAF_NODE	155:9	155:9	11	cdata
LEAF_NODE	155:14	155:14	9	)
LEAF_NODE	155:15	155:15	7	;
JUMP_STATEMENT	156:2	156:12	6	return ret ;
KEYWORD	156:2	156:2	7	return
LEAF_NODE	156:2	156:2	8	return
DESTINATION	156:9	156:9	7	ret
EXPR	156:9	156:9	8	ret
FIELD	156:9	156:9	9	ret
LEAF_NODE	156:9	156:9	10	ret
LEAF_NODE	156:12	156:12	7	;
LEAF_NODE	157:1	157:1	5	}
SELECTION	157:3	157:8	3	
KEYWORD	157:3	157:3	4	else
LEAF_NODE	157:3	157:3	5	else
STATEMENTS	157:8	159:1	4	
LEAF_NODE	157:8	157:8	5	{
STATEMENTS	158:2	158:2	5	
JUMP_STATEMENT	158:2	158:13	6	return NULL ;
KEYWORD	158:2	158:2	7	return
LEAF_NODE	158:2	158:2	8	return
DESTINATION	158:9	158:9	7	NULL
EXPR	158:9	158:9	8	NULL
FIELD	158:9	158:9	9	NULL
LEAF_NODE	158:9	158:9	10	NULL
LEAF_NODE	158:13	158:13	7	;
LEAF_NODE	159:1	159:1	5	}
LEAF_NODE	160:0	160:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_request_field_string_set_value
LEAF_NODE	2:0	2:0	3	purple_request_field_string_set_value
PARAMETER_LIST	2:37	2:82	2	( PurpleRequestField * field , const char * value )
LEAF_NODE	2:37	2:37	3	(
PARAMETER_DECL	2:38	2:58	3	PurpleRequestField * field
TYPE	2:38	2:57	4	PurpleRequestField *
TYPE_NAME	2:38	2:38	5	PurpleRequestField
LEAF_NODE	2:38	2:38	6	PurpleRequestField
POINTER	2:57	2:57	5	*
LEAF_NODE	2:57	2:57	6	*
NAME	2:58	2:58	4	field
LEAF_NODE	2:58	2:58	5	field
LEAF_NODE	2:63	2:63	3	,
PARAMETER_DECL	2:65	2:77	3	const char * value
TYPE	2:65	2:76	4	const char *
TYPE_NAME	2:65	2:71	5	const char
LEAF_NODE	2:65	2:65	6	const
LEAF_NODE	2:71	2:71	6	char
POINTER	2:76	2:76	5	*
LEAF_NODE	2:76	2:76	6	*
NAME	2:77	2:77	4	value
LEAF_NODE	2:77	2:77	5	value
LEAF_NODE	2:82	2:82	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
EXPR_STATEMENT	4:1	4:32	3	g_return_if_fail ( field != NULL ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( field != NULL )
FUNCTION_CALL	4:1	4:31	5	g_return_if_fail ( field != NULL )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:27	6	field != NULL
FIELD	4:18	4:18	7	field
LEAF_NODE	4:18	4:18	8	field
EQ_OPERATOR	4:24	4:24	7	!=
LEAF_NODE	4:24	4:24	8	!=
FIELD	4:27	4:27	7	NULL
LEAF_NODE	4:27	4:27	8	NULL
LEAF_NODE	4:31	4:31	6	)
LEAF_NODE	4:32	4:32	4	;
EXPR_STATEMENT	5:1	5:61	3	g_return_if_fail ( field -> type == PURPLE_REQUEST_FIELD_STRING ) ;
EXPR	5:1	5:1	4	g_return_if_fail ( field -> type == PURPLE_REQUEST_FIELD_STRING )
FUNCTION_CALL	5:1	5:60	5	g_return_if_fail ( field -> type == PURPLE_REQUEST_FIELD_STRING )
CALLEE	5:1	5:1	6	g_return_if_fail
LEAF_NODE	5:1	5:1	7	g_return_if_fail
LEAF_NODE	5:17	5:17	6	(
ARGUMENT	5:18	5:33	6	field -> type == PURPLE_REQUEST_FIELD_STRING
FIELD	5:18	5:25	7	field -> type
LEAF_NODE	5:18	5:18	8	field
LEAF_NODE	5:23	5:23	8	->
LEAF_NODE	5:25	5:25	8	type
EQ_OPERATOR	5:30	5:30	7	==
LEAF_NODE	5:30	5:30	8	==
FIELD	5:33	5:33	7	PURPLE_REQUEST_FIELD_STRING
LEAF_NODE	5:33	5:33	8	PURPLE_REQUEST_FIELD_STRING
LEAF_NODE	5:60	5:60	6	)
LEAF_NODE	5:61	5:61	4	;
EXPR_STATEMENT	6:1	6:30	3	g_free ( field -> u . string . value ) ;
EXPR	6:1	6:1	4	g_free ( field -> u . string . value )
FUNCTION_CALL	6:1	6:29	5	g_free ( field -> u . string . value )
CALLEE	6:1	6:1	6	g_free
LEAF_NODE	6:1	6:1	7	g_free
LEAF_NODE	6:7	6:7	6	(
ARGUMENT	6:8	6:8	6	field -> u . string . value
FIELD	6:8	6:24	7	field -> u . string . value
LEAF_NODE	6:8	6:8	8	field
LEAF_NODE	6:13	6:13	8	->
LEAF_NODE	6:15	6:15	8	u
LEAF_NODE	6:16	6:16	8	.
LEAF_NODE	6:17	6:17	8	string
LEAF_NODE	6:23	6:23	8	.
LEAF_NODE	6:24	6:24	8	value
LEAF_NODE	6:29	6:29	6	)
LEAF_NODE	6:30	6:30	4	;
EXPR_STATEMENT	7:1	7:40	3	field -> u . string . value = g_strdup ( value ) ;
EXPR	7:1	7:1	4	field -> u . string . value = g_strdup ( value )
ASSIGN	7:1	7:25	5	field -> u . string . value = g_strdup ( value )
LVAL	7:1	7:1	6	field -> u . string . value
FIELD	7:1	7:17	7	field -> u . string . value
LEAF_NODE	7:1	7:1	8	field
LEAF_NODE	7:6	7:6	8	->
LEAF_NODE	7:8	7:8	8	u
LEAF_NODE	7:9	7:9	8	.
LEAF_NODE	7:10	7:10	8	string
LEAF_NODE	7:16	7:16	8	.
LEAF_NODE	7:17	7:17	8	value
ASSIGN_OP	7:23	7:23	6	=
LEAF_NODE	7:23	7:23	7	=
RVAL	7:25	7:25	6	g_strdup ( value )
FUNCTION_CALL	7:25	7:39	7	g_strdup ( value )
CALLEE	7:25	7:25	8	g_strdup
LEAF_NODE	7:25	7:25	9	g_strdup
LEAF_NODE	7:33	7:33	8	(
ARGUMENT	7:34	7:34	8	value
FIELD	7:34	7:34	9	value
LEAF_NODE	7:34	7:34	10	value
LEAF_NODE	7:39	7:39	8	)
LEAF_NODE	7:40	7:40	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	18:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	gnt_keys_find_combination
LEAF_NODE	2:4	2:4	3	gnt_keys_find_combination
PARAMETER_LIST	2:29	2:46	2	( const char * path )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:42	3	const char * path
TYPE	2:30	2:41	4	const char *
TYPE_NAME	2:30	2:36	5	const char
LEAF_NODE	2:30	2:30	6	const
LEAF_NODE	2:36	2:36	6	char
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	path
LEAF_NODE	2:42	2:42	5	path
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	17:1	2	
SIMPLE_DECL	4:1	4:14	3	int depth ; depth = 0 ;
VAR_DECL	4:1	4:5	4	int depth ; depth = 0
TYPE	4:1	4:1	5	int
TYPE_NAME	4:1	4:1	6	int
LEAF_NODE	4:1	4:1	7	int
NAME	4:5	4:5	5	depth
LEAF_NODE	4:5	4:5	6	depth
LEAF_NODE	0:0	0:0	5	;
INIT	4:5	4:5	5	depth = 0
ASSIGN	4:5	4:13	6	depth = 0
LVAL	4:5	4:5	7	depth
NAME	4:5	4:5	8	depth
LEAF_NODE	4:5	4:5	9	depth
ASSIGN_OP	4:11	4:11	7	=
LEAF_NODE	4:11	4:11	8	=
RVAL	4:13	4:13	7	0
FIELD	4:13	4:13	8	0
LEAF_NODE	4:13	4:13	9	0
LEAF_NODE	4:14	4:14	4	;
SIMPLE_DECL	5:1	5:24	3	struct _node * n ; n = & root ;
VAR_DECL	5:1	5:15	4	struct _node * n ; n = & root
TYPE	5:1	5:14	5	struct _node *
TYPE_NAME	5:1	5:8	6	struct _node
LEAF_NODE	5:1	5:1	7	struct
LEAF_NODE	5:8	5:8	7	_node
POINTER	5:14	5:14	6	*
LEAF_NODE	5:14	5:14	7	*
NAME	5:15	5:15	5	n
LEAF_NODE	5:15	5:15	6	n
LEAF_NODE	0:0	0:0	5	;
INIT	5:15	5:15	5	n = & root
ASSIGN	5:15	5:19	6	n = & root
LVAL	5:15	5:15	7	n
NAME	5:15	5:15	8	n
LEAF_NODE	5:15	5:15	9	n
ASSIGN_OP	5:17	5:17	7	=
LEAF_NODE	5:17	5:17	8	=
RVAL	5:19	5:19	7	& root
UNARY_EXPR	5:19	5:20	8	& root
UNARY_OPERATOR	5:19	5:19	9	&
LEAF_NODE	5:19	5:19	10	&
FIELD	5:20	5:20	9	root
LEAF_NODE	5:20	5:20	10	root
LEAF_NODE	5:24	5:24	4	;
EXPR_STATEMENT	6:1	6:22	3	root . flags &= ~IS_END ;
EXPR	6:1	6:1	4	root . flags &= ~IS_END
ASSIGN	6:1	6:15	5	root . flags &= ~IS_END
LVAL	6:1	6:1	6	root . flags
FIELD	6:1	6:6	7	root . flags
LEAF_NODE	6:1	6:1	8	root
LEAF_NODE	6:5	6:5	8	.
LEAF_NODE	6:6	6:6	8	flags
ASSIGN_OP	6:12	6:12	6	&=
LEAF_NODE	6:12	6:12	7	&=
RVAL	6:15	6:15	6	~IS_END
FIELD	6:15	6:15	7	~IS_END
LEAF_NODE	6:15	6:15	8	~IS_END
LEAF_NODE	6:22	6:22	4	;
ITERATION	7:1	7:72	3	
KEYWORD	7:1	7:1	4	while
LEAF_NODE	7:1	7:1	5	while
LEAF_NODE	7:7	7:7	4	(
CONDITION	7:8	7:8	4	* path && n -> next [ ( unsigned char ) * path ] && ! ( n -> flags & IS_END )
EXPR	7:8	7:8	5	* path && n -> next [ ( unsigned char ) * path ] && ! ( n -> flags & IS_END )
AND	7:8	7:17	6	* path && n -> next [ ( unsigned char ) * path ] && ! ( n -> flags & IS_END )
EXPR	7:8	7:8	7	* path
UNARY_EXPR	7:8	7:9	8	* path
UNARY_OPERATOR	7:8	7:8	9	*
LEAF_NODE	7:8	7:8	10	*
FIELD	7:9	7:9	9	path
LEAF_NODE	7:9	7:9	10	path
LEAF_NODE	7:14	7:14	7	&&
EXPR	7:17	7:17	7	n -> next [ ( unsigned char ) * path ] && ! ( n -> flags & IS_END )
AND	7:17	7:50	8	n -> next [ ( unsigned char ) * path ] && ! ( n -> flags & IS_END )
EXPR	7:17	7:17	9	n -> next [ ( unsigned char ) * path ]
FIELD	7:17	7:45	10	n -> next [ ( unsigned char ) * path ]
LEAF_NODE	7:17	7:17	11	n
LEAF_NODE	7:18	7:18	11	->
LEAF_NODE	7:20	7:20	11	next
LEAF_NODE	7:24	7:24	11	[
EXPR	7:25	7:40	11	( unsigned char ) * path
LEAF_NODE	7:25	7:25	12	(
TYPE_NAME	7:26	7:35	12	unsigned char
LEAF_NODE	7:26	7:26	13	unsigned
LEAF_NODE	7:35	7:35	13	char
LEAF_NODE	7:39	7:39	12	)
UNARY_EXPR	7:40	7:41	12	* path
UNARY_OPERATOR	7:40	7:40	13	*
LEAF_NODE	7:40	7:40	14	*
FIELD	7:41	7:41	13	path
LEAF_NODE	7:41	7:41	14	path
LEAF_NODE	7:45	7:45	11	]
LEAF_NODE	7:47	7:47	9	&&
EXPR	7:50	7:50	9	! ( n -> flags & IS_END )
UNARY_EXPR	7:50	7:69	10	! ( n -> flags & IS_END )
UNARY_OPERATOR	7:50	7:50	11	!
LEAF_NODE	7:50	7:50	12	!
LEAF_NODE	7:51	7:51	11	(
FIELD	7:52	7:55	11	n -> flags
LEAF_NODE	7:52	7:52	12	n
LEAF_NODE	7:53	7:53	12	->
LEAF_NODE	7:55	7:55	12	flags
LEAF_NODE	7:61	7:61	11	&
FIELD	7:63	7:63	11	IS_END
LEAF_NODE	7:63	7:63	12	IS_END
LEAF_NODE	7:69	7:69	11	)
LEAF_NODE	7:70	7:70	4	)
STATEMENTS	7:72	14:1	4	
LEAF_NODE	7:72	7:72	5	{
STATEMENTS	8:2	13:2	5	
SELECTION	8:2	11:3	6	
KEYWORD	8:2	8:2	7	if
LEAF_NODE	8:2	8:2	8	if
LEAF_NODE	8:5	8:5	7	(
CONDITION	8:6	8:6	7	! g_ascii_isspace ( * path ) && ! g_ascii_iscntrl ( * path ) && ! g_ascii_isgraph ( * path )
EXPR	8:6	8:6	8	! g_ascii_isspace ( * path ) && ! g_ascii_iscntrl ( * path ) && ! g_ascii_isgraph ( * path )
AND	8:6	9:4	9	! g_ascii_isspace ( * path ) && ! g_ascii_iscntrl ( * path ) && ! g_ascii_isgraph ( * path )
EXPR	8:6	8:6	10	! g_ascii_isspace ( * path )
UNARY_EXPR	8:6	8:7	11	! g_ascii_isspace ( * path )
UNARY_OPERATOR	8:6	8:6	12	!
LEAF_NODE	8:6	8:6	13	!
FUNCTION_CALL	8:7	8:28	12	g_ascii_isspace ( * path )
CALLEE	8:7	8:7	13	g_ascii_isspace
LEAF_NODE	8:7	8:7	14	g_ascii_isspace
LEAF_NODE	8:22	8:22	13	(
ARGUMENT	8:23	8:23	13	* path
UNARY_EXPR	8:23	8:24	14	* path
UNARY_OPERATOR	8:23	8:23	15	*
LEAF_NODE	8:23	8:23	16	*
FIELD	8:24	8:24	15	path
LEAF_NODE	8:24	8:24	16	path
LEAF_NODE	8:28	8:28	13	)
LEAF_NODE	8:30	8:30	10	&&
EXPR	9:4	9:4	10	! g_ascii_iscntrl ( * path ) && ! g_ascii_isgraph ( * path )
AND	9:4	10:4	11	! g_ascii_iscntrl ( * path ) && ! g_ascii_isgraph ( * path )
EXPR	9:4	9:4	12	! g_ascii_iscntrl ( * path )
UNARY_EXPR	9:4	9:5	13	! g_ascii_iscntrl ( * path )
UNARY_OPERATOR	9:4	9:4	14	!
LEAF_NODE	9:4	9:4	15	!
FUNCTION_CALL	9:5	9:26	14	g_ascii_iscntrl ( * path )
CALLEE	9:5	9:5	15	g_ascii_iscntrl
LEAF_NODE	9:5	9:5	16	g_ascii_iscntrl
LEAF_NODE	9:20	9:20	15	(
ARGUMENT	9:21	9:21	15	* path
UNARY_EXPR	9:21	9:22	16	* path
UNARY_OPERATOR	9:21	9:21	17	*
LEAF_NODE	9:21	9:21	18	*
FIELD	9:22	9:22	17	path
LEAF_NODE	9:22	9:22	18	path
LEAF_NODE	9:26	9:26	15	)
LEAF_NODE	9:28	9:28	12	&&
EXPR	10:4	10:4	12	! g_ascii_isgraph ( * path )
UNARY_EXPR	10:4	10:5	13	! g_ascii_isgraph ( * path )
UNARY_OPERATOR	10:4	10:4	14	!
LEAF_NODE	10:4	10:4	15	!
FUNCTION_CALL	10:5	10:26	14	g_ascii_isgraph ( * path )
CALLEE	10:5	10:5	15	g_ascii_isgraph
LEAF_NODE	10:5	10:5	16	g_ascii_isgraph
LEAF_NODE	10:20	10:20	15	(
ARGUMENT	10:21	10:21	15	* path
UNARY_EXPR	10:21	10:22	16	* path
UNARY_OPERATOR	10:21	10:21	17	*
LEAF_NODE	10:21	10:21	18	*
FIELD	10:22	10:22	17	path
LEAF_NODE	10:22	10:22	18	path
LEAF_NODE	10:26	10:26	15	)
LEAF_NODE	10:27	10:27	7	)
STATEMENTS	11:3	11:3	7	
JUMP_STATEMENT	11:3	11:11	8	return 0 ;
KEYWORD	11:3	11:3	9	return
LEAF_NODE	11:3	11:3	10	return
DESTINATION	11:10	11:10	9	0
EXPR	11:10	11:10	10	0
FIELD	11:10	11:10	11	0
LEAF_NODE	11:10	11:10	12	0
LEAF_NODE	11:11	11:11	9	;
EXPR_STATEMENT	12:2	12:37	6	n = n -> next [ ( unsigned char ) * path ++ ] ;
EXPR	12:2	12:2	7	n = n -> next [ ( unsigned char ) * path ++ ]
ASSIGN	12:2	12:6	8	n = n -> next [ ( unsigned char ) * path ++ ]
LVAL	12:2	12:2	9	n
FIELD	12:2	12:2	10	n
LEAF_NODE	12:2	12:2	11	n
ASSIGN_OP	12:4	12:4	9	=
LEAF_NODE	12:4	12:4	10	=
RVAL	12:6	12:6	9	n -> next [ ( unsigned char ) * path ++ ]
FIELD	12:6	12:36	10	n -> next [ ( unsigned char ) * path ++ ]
LEAF_NODE	12:6	12:6	11	n
LEAF_NODE	12:7	12:7	11	->
LEAF_NODE	12:9	12:9	11	next
LEAF_NODE	12:13	12:13	11	[
EXPR	12:14	12:29	11	( unsigned char ) * path ++
LEAF_NODE	12:14	12:14	12	(
TYPE_NAME	12:15	12:24	12	unsigned char
LEAF_NODE	12:15	12:15	13	unsigned
LEAF_NODE	12:24	12:24	13	char
LEAF_NODE	12:28	12:28	12	)
UNARY_EXPR	12:29	12:30	12	* path ++
UNARY_OPERATOR	12:29	12:29	13	*
LEAF_NODE	12:29	12:29	14	*
FIELD	12:30	12:34	13	path ++
LEAF_NODE	12:30	12:30	14	path
LEAF_NODE	12:34	12:34	14	++
LEAF_NODE	12:36	12:36	11	]
LEAF_NODE	12:37	12:37	7	;
EXPR_STATEMENT	13:2	13:9	6	depth ++ ;
EXPR	13:2	13:2	7	depth ++
FIELD	13:2	13:7	8	depth ++
LEAF_NODE	13:2	13:2	9	depth
LEAF_NODE	13:7	13:7	9	++
LEAF_NODE	13:9	13:9	7	;
LEAF_NODE	14:1	14:1	5	}
SELECTION	15:1	16:2	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:4	15:4	4	(
CONDITION	15:5	15:5	4	! ( n -> flags & IS_END )
EXPR	15:5	15:5	5	! ( n -> flags & IS_END )
UNARY_EXPR	15:5	15:24	6	! ( n -> flags & IS_END )
UNARY_OPERATOR	15:5	15:5	7	!
LEAF_NODE	15:5	15:5	8	!
LEAF_NODE	15:6	15:6	7	(
FIELD	15:7	15:10	7	n -> flags
LEAF_NODE	15:7	15:7	8	n
LEAF_NODE	15:8	15:8	8	->
LEAF_NODE	15:10	15:10	8	flags
LEAF_NODE	15:16	15:16	7	&
FIELD	15:18	15:18	7	IS_END
LEAF_NODE	15:18	15:18	8	IS_END
LEAF_NODE	15:24	15:24	7	)
LEAF_NODE	15:25	15:25	4	)
STATEMENTS	16:2	16:2	4	
EXPR_STATEMENT	16:2	16:11	5	depth = 0 ;
EXPR	16:2	16:2	6	depth = 0
ASSIGN	16:2	16:10	7	depth = 0
LVAL	16:2	16:2	8	depth
FIELD	16:2	16:2	9	depth
LEAF_NODE	16:2	16:2	10	depth
ASSIGN_OP	16:8	16:8	8	=
LEAF_NODE	16:8	16:8	9	=
RVAL	16:10	16:10	8	0
FIELD	16:10	16:10	9	0
LEAF_NODE	16:10	16:10	10	0
LEAF_NODE	16:11	16:11	6	;
JUMP_STATEMENT	17:1	17:13	3	return depth ;
KEYWORD	17:1	17:1	4	return
LEAF_NODE	17:1	17:1	5	return
DESTINATION	17:8	17:8	4	depth
EXPR	17:8	17:8	5	depth
FIELD	17:8	17:8	6	depth
LEAF_NODE	17:8	17:8	7	depth
LEAF_NODE	17:13	17:13	4	;
LEAF_NODE	18:0	18:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	11:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	jabber_si_xfer_cancel_recv
LEAF_NODE	2:12	2:12	3	jabber_si_xfer_cancel_recv
PARAMETER_LIST	2:38	2:55	2	( PurpleXfer * xfer )
LEAF_NODE	2:38	2:38	3	(
PARAMETER_DECL	2:39	2:51	3	PurpleXfer * xfer
TYPE	2:39	2:50	4	PurpleXfer *
TYPE_NAME	2:39	2:39	5	PurpleXfer
LEAF_NODE	2:39	2:39	6	PurpleXfer
POINTER	2:50	2:50	5	*
LEAF_NODE	2:50	2:50	6	*
NAME	2:51	2:51	4	xfer
LEAF_NODE	2:51	2:51	5	xfer
LEAF_NODE	2:55	2:55	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	10:1	2	
SIMPLE_DECL	4:1	4:48	3	JabberSIXfer * jsx ; jsx = ( JabberSIXfer * ) xfer -> data ;
VAR_DECL	4:1	4:15	4	JabberSIXfer * jsx ; jsx = ( JabberSIXfer * ) xfer -> data
TYPE	4:1	4:14	5	JabberSIXfer *
TYPE_NAME	4:1	4:1	6	JabberSIXfer
LEAF_NODE	4:1	4:1	7	JabberSIXfer
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	jsx
LEAF_NODE	4:15	4:15	6	jsx
LEAF_NODE	0:0	0:0	5	;
INIT	4:15	4:15	5	jsx = ( JabberSIXfer * ) xfer -> data
ASSIGN	4:15	4:21	6	jsx = ( JabberSIXfer * ) xfer -> data
LVAL	4:15	4:15	7	jsx
NAME	4:15	4:15	8	jsx
LEAF_NODE	4:15	4:15	9	jsx
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:38	7	( JabberSIXfer * ) xfer -> data
LEAF_NODE	4:21	4:21	8	(
TYPE_NAME	4:22	4:22	8	JabberSIXfer
LEAF_NODE	4:22	4:22	9	JabberSIXfer
LEAF_NODE	4:35	4:35	8	*
LEAF_NODE	4:36	4:36	8	)
FIELD	4:38	4:44	8	xfer -> data
LEAF_NODE	4:38	4:38	9	xfer
LEAF_NODE	4:42	4:42	9	->
LEAF_NODE	4:44	4:44	9	data
LEAF_NODE	4:48	4:48	4	;
SELECTION	6:1	6:23	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	jsx -> ibb_session
EXPR	6:5	6:5	5	jsx -> ibb_session
FIELD	6:5	6:10	6	jsx -> ibb_session
LEAF_NODE	6:5	6:5	7	jsx
LEAF_NODE	6:8	6:8	7	->
LEAF_NODE	6:10	6:10	7	ibb_session
LEAF_NODE	6:21	6:21	4	)
STATEMENTS	6:23	8:1	4	
LEAF_NODE	6:23	6:23	5	{
STATEMENTS	7:2	7:2	5	
EXPR_STATEMENT	7:2	7:44	6	jabber_ibb_session_close ( jsx -> ibb_session ) ;
EXPR	7:2	7:2	7	jabber_ibb_session_close ( jsx -> ibb_session )
FUNCTION_CALL	7:2	7:43	8	jabber_ibb_session_close ( jsx -> ibb_session )
CALLEE	7:2	7:2	9	jabber_ibb_session_close
LEAF_NODE	7:2	7:2	10	jabber_ibb_session_close
LEAF_NODE	7:26	7:26	9	(
ARGUMENT	7:27	7:27	9	jsx -> ibb_session
FIELD	7:27	7:32	10	jsx -> ibb_session
LEAF_NODE	7:27	7:27	11	jsx
LEAF_NODE	7:30	7:30	11	->
LEAF_NODE	7:32	7:32	11	ibb_session
LEAF_NODE	7:43	7:43	9	)
LEAF_NODE	7:44	7:44	7	;
LEAF_NODE	8:1	8:1	5	}
EXPR_STATEMENT	9:1	9:26	3	jabber_si_xfer_free ( xfer ) ;
EXPR	9:1	9:1	4	jabber_si_xfer_free ( xfer )
FUNCTION_CALL	9:1	9:25	5	jabber_si_xfer_free ( xfer )
CALLEE	9:1	9:1	6	jabber_si_xfer_free
LEAF_NODE	9:1	9:1	7	jabber_si_xfer_free
LEAF_NODE	9:20	9:20	6	(
ARGUMENT	9:21	9:21	6	xfer
FIELD	9:21	9:21	7	xfer
LEAF_NODE	9:21	9:21	8	xfer
LEAF_NODE	9:25	9:25	6	)
LEAF_NODE	9:26	9:26	4	;
EXPR_STATEMENT	10:1	10:63	3	purple_debug_info ( "jabber" , "in jabber_si_xfer_cancel_recv\n" ) ;
EXPR	10:1	10:1	4	purple_debug_info ( "jabber" , "in jabber_si_xfer_cancel_recv\n" )
FUNCTION_CALL	10:1	10:62	5	purple_debug_info ( "jabber" , "in jabber_si_xfer_cancel_recv\n" )
CALLEE	10:1	10:1	6	purple_debug_info
LEAF_NODE	10:1	10:1	7	purple_debug_info
LEAF_NODE	10:18	10:18	6	(
ARGUMENT	10:19	10:19	6	"jabber"
FIELD	10:19	10:19	7	"jabber"
LEAF_NODE	10:19	10:19	8	"jabber"
LEAF_NODE	10:27	10:27	6	,
ARGUMENT	10:29	10:29	6	"in jabber_si_xfer_cancel_recv\n"
FIELD	10:29	10:29	7	"in jabber_si_xfer_cancel_recv\n"
LEAF_NODE	10:29	10:29	8	"in jabber_si_xfer_cancel_recv\n"
LEAF_NODE	10:62	10:62	6	)
LEAF_NODE	10:63	10:63	4	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	4:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	finch_request_uninit
LEAF_NODE	2:5	2:5	3	finch_request_uninit
PARAMETER_LIST	2:25	2:26	2	( )
LEAF_NODE	2:25	2:25	3	(
LEAF_NODE	2:26	2:26	3	)
LEAF_NODE	3:0	3:0	2	{
LEAF_NODE	0:0	0:0	2	STATEMENTS
LEAF_NODE	4:0	4:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	13:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	run_python
LEAF_NODE	2:0	2:0	3	run_python
PARAMETER_LIST	2:10	2:42	2	( GntBindable * bindable , GList * n )
LEAF_NODE	2:10	2:10	3	(
PARAMETER_DECL	2:11	2:24	3	GntBindable * bindable
TYPE	2:11	2:23	4	GntBindable *
TYPE_NAME	2:11	2:11	5	GntBindable
LEAF_NODE	2:11	2:11	6	GntBindable
POINTER	2:23	2:23	5	*
LEAF_NODE	2:23	2:23	6	*
NAME	2:24	2:24	4	bindable
LEAF_NODE	2:24	2:24	5	bindable
LEAF_NODE	2:32	2:32	3	,
PARAMETER_DECL	2:34	2:41	3	GList * n
TYPE	2:34	2:40	4	GList *
TYPE_NAME	2:34	2:34	5	GList
LEAF_NODE	2:34	2:34	6	GList
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	n
LEAF_NODE	2:41	2:41	5	n
LEAF_NODE	2:42	2:42	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	12:1	2	
SIMPLE_DECL	4:1	4:39	3	GntWidget * window ; window = gnt_file_sel_new ( ) ;
VAR_DECL	4:1	4:12	4	GntWidget * window ; window = gnt_file_sel_new ( )
TYPE	4:1	4:11	5	GntWidget *
TYPE_NAME	4:1	4:1	6	GntWidget
LEAF_NODE	4:1	4:1	7	GntWidget
POINTER	4:11	4:11	6	*
LEAF_NODE	4:11	4:11	7	*
NAME	4:12	4:12	5	window
LEAF_NODE	4:12	4:12	6	window
LEAF_NODE	0:0	0:0	5	;
INIT	4:12	4:12	5	window = gnt_file_sel_new ( )
ASSIGN	4:12	4:21	6	window = gnt_file_sel_new ( )
LVAL	4:12	4:12	7	window
NAME	4:12	4:12	8	window
LEAF_NODE	4:12	4:12	9	window
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:21	7	gnt_file_sel_new ( )
FUNCTION_CALL	4:21	4:38	8	gnt_file_sel_new ( )
CALLEE	4:21	4:21	9	gnt_file_sel_new
LEAF_NODE	4:21	4:21	10	gnt_file_sel_new
LEAF_NODE	4:37	4:37	9	(
LEAF_NODE	4:38	4:38	9	)
LEAF_NODE	4:39	4:39	4	;
SIMPLE_DECL	5:1	5:39	3	GntFileSel * sel ; sel = GNT_FILE_SEL ( window ) ;
VAR_DECL	5:1	5:13	4	GntFileSel * sel ; sel = GNT_FILE_SEL ( window )
TYPE	5:1	5:12	5	GntFileSel *
TYPE_NAME	5:1	5:1	6	GntFileSel
LEAF_NODE	5:1	5:1	7	GntFileSel
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	sel
LEAF_NODE	5:13	5:13	6	sel
LEAF_NODE	0:0	0:0	5	;
INIT	5:13	5:13	5	sel = GNT_FILE_SEL ( window )
ASSIGN	5:13	5:19	6	sel = GNT_FILE_SEL ( window )
LVAL	5:13	5:13	7	sel
NAME	5:13	5:13	8	sel
LEAF_NODE	5:13	5:13	9	sel
ASSIGN_OP	5:17	5:17	7	=
LEAF_NODE	5:17	5:17	8	=
RVAL	5:19	5:19	7	GNT_FILE_SEL ( window )
FUNCTION_CALL	5:19	5:38	8	GNT_FILE_SEL ( window )
CALLEE	5:19	5:19	9	GNT_FILE_SEL
LEAF_NODE	5:19	5:19	10	GNT_FILE_SEL
LEAF_NODE	5:31	5:31	9	(
ARGUMENT	5:32	5:32	9	window
FIELD	5:32	5:32	10	window
LEAF_NODE	5:32	5:32	11	window
LEAF_NODE	5:38	5:38	9	)
LEAF_NODE	5:39	5:39	4	;
EXPR_STATEMENT	6:1	6:55	3	g_object_set ( G_OBJECT ( window ) , "vertical" , TRUE , NULL ) ;
EXPR	6:1	6:1	4	g_object_set ( G_OBJECT ( window ) , "vertical" , TRUE , NULL )
FUNCTION_CALL	6:1	6:54	5	g_object_set ( G_OBJECT ( window ) , "vertical" , TRUE , NULL )
CALLEE	6:1	6:1	6	g_object_set
LEAF_NODE	6:1	6:1	7	g_object_set
LEAF_NODE	6:13	6:13	6	(
ARGUMENT	6:14	6:14	6	G_OBJECT ( window )
FUNCTION_CALL	6:14	6:29	7	G_OBJECT ( window )
CALLEE	6:14	6:14	8	G_OBJECT
LEAF_NODE	6:14	6:14	9	G_OBJECT
LEAF_NODE	6:22	6:22	8	(
ARGUMENT	6:23	6:23	8	window
FIELD	6:23	6:23	9	window
LEAF_NODE	6:23	6:23	10	window
LEAF_NODE	6:29	6:29	8	)
LEAF_NODE	6:30	6:30	6	,
ARGUMENT	6:32	6:32	6	"vertical"
FIELD	6:32	6:32	7	"vertical"
LEAF_NODE	6:32	6:32	8	"vertical"
LEAF_NODE	6:42	6:42	6	,
ARGUMENT	6:44	6:44	6	TRUE
FIELD	6:44	6:44	7	TRUE
LEAF_NODE	6:44	6:44	8	TRUE
LEAF_NODE	6:48	6:48	6	,
ARGUMENT	6:50	6:50	6	NULL
FIELD	6:50	6:50	7	NULL
LEAF_NODE	6:50	6:50	8	NULL
LEAF_NODE	6:54	6:54	6	)
LEAF_NODE	6:55	6:55	4	;
EXPR_STATEMENT	7:1	7:103	3	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new ( "Please select the python script you want to run." ) ) ;
EXPR	7:1	7:1	4	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new ( "Please select the python script you want to run." ) )
FUNCTION_CALL	7:1	7:102	5	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new ( "Please select the python script you want to run." ) )
CALLEE	7:1	7:1	6	gnt_box_add_widget
LEAF_NODE	7:1	7:1	7	gnt_box_add_widget
LEAF_NODE	7:19	7:19	6	(
ARGUMENT	7:20	7:20	6	GNT_BOX ( window )
FUNCTION_CALL	7:20	7:34	7	GNT_BOX ( window )
CALLEE	7:20	7:20	8	GNT_BOX
LEAF_NODE	7:20	7:20	9	GNT_BOX
LEAF_NODE	7:27	7:27	8	(
ARGUMENT	7:28	7:28	8	window
FIELD	7:28	7:28	9	window
LEAF_NODE	7:28	7:28	10	window
LEAF_NODE	7:34	7:34	8	)
LEAF_NODE	7:35	7:35	6	,
ARGUMENT	7:37	7:37	6	gnt_label_new ( "Please select the python script you want to run." )
FUNCTION_CALL	7:37	7:101	7	gnt_label_new ( "Please select the python script you want to run." )
CALLEE	7:37	7:37	8	gnt_label_new
LEAF_NODE	7:37	7:37	9	gnt_label_new
LEAF_NODE	7:50	7:50	8	(
ARGUMENT	7:51	7:51	8	"Please select the python script you want to run."
FIELD	7:51	7:51	9	"Please select the python script you want to run."
LEAF_NODE	7:51	7:51	10	"Please select the python script you want to run."
LEAF_NODE	7:101	7:101	8	)
LEAF_NODE	7:102	7:102	6	)
LEAF_NODE	7:103	7:103	4	;
EXPR_STATEMENT	8:1	8:62	3	gnt_box_set_title ( GNT_BOX ( window ) , "Select Python Script..." ) ;
EXPR	8:1	8:1	4	gnt_box_set_title ( GNT_BOX ( window ) , "Select Python Script..." )
FUNCTION_CALL	8:1	8:61	5	gnt_box_set_title ( GNT_BOX ( window ) , "Select Python Script..." )
CALLEE	8:1	8:1	6	gnt_box_set_title
LEAF_NODE	8:1	8:1	7	gnt_box_set_title
LEAF_NODE	8:18	8:18	6	(
ARGUMENT	8:19	8:19	6	GNT_BOX ( window )
FUNCTION_CALL	8:19	8:33	7	GNT_BOX ( window )
CALLEE	8:19	8:19	8	GNT_BOX
LEAF_NODE	8:19	8:19	9	GNT_BOX
LEAF_NODE	8:26	8:26	8	(
ARGUMENT	8:27	8:27	8	window
FIELD	8:27	8:27	9	window
LEAF_NODE	8:27	8:27	10	window
LEAF_NODE	8:33	8:33	8	)
LEAF_NODE	8:34	8:34	6	,
ARGUMENT	8:36	8:36	6	"Select Python Script..."
FIELD	8:36	8:36	7	"Select Python Script..."
LEAF_NODE	8:36	8:36	8	"Select Python Script..."
LEAF_NODE	8:61	8:61	6	)
LEAF_NODE	8:62	8:62	4	;
EXPR_STATEMENT	9:1	9:91	3	g_signal_connect ( G_OBJECT ( sel ) , "file_selected" , G_CALLBACK ( python_script_selected ) , NULL ) ;
EXPR	9:1	9:1	4	g_signal_connect ( G_OBJECT ( sel ) , "file_selected" , G_CALLBACK ( python_script_selected ) , NULL )
FUNCTION_CALL	9:1	9:90	5	g_signal_connect ( G_OBJECT ( sel ) , "file_selected" , G_CALLBACK ( python_script_selected ) , NULL )
CALLEE	9:1	9:1	6	g_signal_connect
LEAF_NODE	9:1	9:1	7	g_signal_connect
LEAF_NODE	9:17	9:17	6	(
ARGUMENT	9:18	9:18	6	G_OBJECT ( sel )
FUNCTION_CALL	9:18	9:30	7	G_OBJECT ( sel )
CALLEE	9:18	9:18	8	G_OBJECT
LEAF_NODE	9:18	9:18	9	G_OBJECT
LEAF_NODE	9:26	9:26	8	(
ARGUMENT	9:27	9:27	8	sel
FIELD	9:27	9:27	9	sel
LEAF_NODE	9:27	9:27	10	sel
LEAF_NODE	9:30	9:30	8	)
LEAF_NODE	9:31	9:31	6	,
ARGUMENT	9:33	9:33	6	"file_selected"
FIELD	9:33	9:33	7	"file_selected"
LEAF_NODE	9:33	9:33	8	"file_selected"
LEAF_NODE	9:48	9:48	6	,
ARGUMENT	9:50	9:50	6	G_CALLBACK ( python_script_selected )
FUNCTION_CALL	9:50	9:83	7	G_CALLBACK ( python_script_selected )
CALLEE	9:50	9:50	8	G_CALLBACK
LEAF_NODE	9:50	9:50	9	G_CALLBACK
LEAF_NODE	9:60	9:60	8	(
ARGUMENT	9:61	9:61	8	python_script_selected
FIELD	9:61	9:61	9	python_script_selected
LEAF_NODE	9:61	9:61	10	python_script_selected
LEAF_NODE	9:83	9:83	8	)
LEAF_NODE	9:84	9:84	6	,
ARGUMENT	9:86	9:86	6	NULL
FIELD	9:86	9:86	7	NULL
LEAF_NODE	9:86	9:86	8	NULL
LEAF_NODE	9:90	9:90	6	)
LEAF_NODE	9:91	9:91	4	;
EXPR_STATEMENT	10:1	10:97	3	g_signal_connect_swapped ( G_OBJECT ( sel -> cancel ) , "activate" , G_CALLBACK ( gnt_widget_destroy ) , sel ) ;
EXPR	10:1	10:1	4	g_signal_connect_swapped ( G_OBJECT ( sel -> cancel ) , "activate" , G_CALLBACK ( gnt_widget_destroy ) , sel )
FUNCTION_CALL	10:1	10:96	5	g_signal_connect_swapped ( G_OBJECT ( sel -> cancel ) , "activate" , G_CALLBACK ( gnt_widget_destroy ) , sel )
CALLEE	10:1	10:1	6	g_signal_connect_swapped
LEAF_NODE	10:1	10:1	7	g_signal_connect_swapped
LEAF_NODE	10:25	10:25	6	(
ARGUMENT	10:26	10:26	6	G_OBJECT ( sel -> cancel )
FUNCTION_CALL	10:26	10:46	7	G_OBJECT ( sel -> cancel )
CALLEE	10:26	10:26	8	G_OBJECT
LEAF_NODE	10:26	10:26	9	G_OBJECT
LEAF_NODE	10:34	10:34	8	(
ARGUMENT	10:35	10:35	8	sel -> cancel
FIELD	10:35	10:40	9	sel -> cancel
LEAF_NODE	10:35	10:35	10	sel
LEAF_NODE	10:38	10:38	10	->
LEAF_NODE	10:40	10:40	10	cancel
LEAF_NODE	10:46	10:46	8	)
LEAF_NODE	10:47	10:47	6	,
ARGUMENT	10:49	10:49	6	"activate"
FIELD	10:49	10:49	7	"activate"
LEAF_NODE	10:49	10:49	8	"activate"
LEAF_NODE	10:59	10:59	6	,
ARGUMENT	10:61	10:61	6	G_CALLBACK ( gnt_widget_destroy )
FUNCTION_CALL	10:61	10:90	7	G_CALLBACK ( gnt_widget_destroy )
CALLEE	10:61	10:61	8	G_CALLBACK
LEAF_NODE	10:61	10:61	9	G_CALLBACK
LEAF_NODE	10:71	10:71	8	(
ARGUMENT	10:72	10:72	8	gnt_widget_destroy
FIELD	10:72	10:72	9	gnt_widget_destroy
LEAF_NODE	10:72	10:72	10	gnt_widget_destroy
LEAF_NODE	10:90	10:90	8	)
LEAF_NODE	10:91	10:91	6	,
ARGUMENT	10:93	10:93	6	sel
FIELD	10:93	10:93	7	sel
LEAF_NODE	10:93	10:93	8	sel
LEAF_NODE	10:96	10:96	6	)
LEAF_NODE	10:97	10:97	4	;
EXPR_STATEMENT	11:1	11:24	3	gnt_widget_show ( window ) ;
EXPR	11:1	11:1	4	gnt_widget_show ( window )
FUNCTION_CALL	11:1	11:23	5	gnt_widget_show ( window )
CALLEE	11:1	11:1	6	gnt_widget_show
LEAF_NODE	11:1	11:1	7	gnt_widget_show
LEAF_NODE	11:16	11:16	6	(
ARGUMENT	11:17	11:17	6	window
FIELD	11:17	11:17	7	window
LEAF_NODE	11:17	11:17	8	window
LEAF_NODE	11:23	11:23	6	)
LEAF_NODE	11:24	11:24	4	;
JUMP_STATEMENT	12:1	12:12	3	return TRUE ;
KEYWORD	12:1	12:1	4	return
LEAF_NODE	12:1	12:1	5	return
DESTINATION	12:8	12:8	4	TRUE
EXPR	12:8	12:8	5	TRUE
FIELD	12:8	12:8	6	TRUE
LEAF_NODE	12:8	12:8	7	TRUE
LEAF_NODE	12:12	12:12	4	;
LEAF_NODE	13:0	13:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	searchresults_close_cb
LEAF_NODE	2:0	2:0	3	searchresults_close_cb
PARAMETER_LIST	2:22	2:95	2	( PidginNotifySearchResultsData * data , GdkEvent * event , gpointer user_data )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:54	3	PidginNotifySearchResultsData * data
TYPE	2:23	2:53	4	PidginNotifySearchResultsData *
TYPE_NAME	2:23	2:23	5	PidginNotifySearchResultsData
LEAF_NODE	2:23	2:23	6	PidginNotifySearchResultsData
POINTER	2:53	2:53	5	*
LEAF_NODE	2:53	2:53	6	*
NAME	2:54	2:54	4	data
LEAF_NODE	2:54	2:54	5	data
LEAF_NODE	2:58	2:58	3	,
PARAMETER_DECL	2:60	2:70	3	GdkEvent * event
TYPE	2:60	2:69	4	GdkEvent *
TYPE_NAME	2:60	2:60	5	GdkEvent
LEAF_NODE	2:60	2:60	6	GdkEvent
POINTER	2:69	2:69	5	*
LEAF_NODE	2:69	2:69	6	*
NAME	2:70	2:70	4	event
LEAF_NODE	2:70	2:70	5	event
LEAF_NODE	2:75	2:75	3	,
PARAMETER_DECL	2:77	2:86	3	gpointer user_data
TYPE	2:77	2:77	4	gpointer
TYPE_NAME	2:77	2:77	5	gpointer
LEAF_NODE	2:77	2:77	6	gpointer
NAME	2:86	2:86	4	user_data
LEAF_NODE	2:86	2:86	5	user_data
LEAF_NODE	2:95	2:95	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:55	3	purple_notify_close ( PURPLE_NOTIFY_SEARCHRESULTS , data ) ;
EXPR	4:1	4:1	4	purple_notify_close ( PURPLE_NOTIFY_SEARCHRESULTS , data )
FUNCTION_CALL	4:1	4:54	5	purple_notify_close ( PURPLE_NOTIFY_SEARCHRESULTS , data )
CALLEE	4:1	4:1	6	purple_notify_close
LEAF_NODE	4:1	4:1	7	purple_notify_close
LEAF_NODE	4:20	4:20	6	(
ARGUMENT	4:21	4:21	6	PURPLE_NOTIFY_SEARCHRESULTS
FIELD	4:21	4:21	7	PURPLE_NOTIFY_SEARCHRESULTS
LEAF_NODE	4:21	4:21	8	PURPLE_NOTIFY_SEARCHRESULTS
LEAF_NODE	4:48	4:48	6	,
ARGUMENT	4:50	4:50	6	data
FIELD	4:50	4:50	7	data
LEAF_NODE	4:50	4:50	8	data
LEAF_NODE	4:54	4:54	6	)
LEAF_NODE	4:55	4:55	4	;
JUMP_STATEMENT	5:1	5:13	3	return FALSE ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	FALSE
EXPR	5:8	5:8	5	FALSE
FIELD	5:8	5:8	6	FALSE
LEAF_NODE	5:8	5:8	7	FALSE
LEAF_NODE	5:13	5:13	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	39:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	add_buddy_cb
LEAF_NODE	2:0	2:0	3	add_buddy_cb
PARAMETER_LIST	2:12	2:55	2	( void * data , PurpleRequestFields * allfields )
LEAF_NODE	2:12	2:12	3	(
PARAMETER_DECL	2:13	2:19	3	void * data
TYPE	2:13	2:18	4	void *
TYPE_NAME	2:13	2:13	5	void
LEAF_NODE	2:13	2:13	6	void
POINTER	2:18	2:18	5	*
LEAF_NODE	2:18	2:18	6	*
NAME	2:19	2:19	4	data
LEAF_NODE	2:19	2:19	5	data
LEAF_NODE	2:23	2:23	3	,
PARAMETER_DECL	2:25	2:46	3	PurpleRequestFields * allfields
TYPE	2:25	2:45	4	PurpleRequestFields *
TYPE_NAME	2:25	2:25	5	PurpleRequestFields
LEAF_NODE	2:25	2:25	6	PurpleRequestFields
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	allfields
LEAF_NODE	2:46	2:46	5	allfields
LEAF_NODE	2:55	2:55	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	38:1	2	
SIMPLE_DECL	4:1	4:81	3	const char * username ; username = purple_request_fields_get_string ( allfields , "screenname" ) ;
VAR_DECL	4:1	4:13	4	const char * username ; username = purple_request_fields_get_string ( allfields , "screenname" )
TYPE	4:1	4:12	5	const char *
TYPE_NAME	4:1	4:7	6	const char
LEAF_NODE	4:1	4:1	7	const
LEAF_NODE	4:7	4:7	7	char
POINTER	4:12	4:12	6	*
LEAF_NODE	4:12	4:12	7	*
NAME	4:13	4:13	5	username
LEAF_NODE	4:13	4:13	6	username
LEAF_NODE	0:0	0:0	5	;
INIT	4:13	4:13	5	username = purple_request_fields_get_string ( allfields , "screenname" )
ASSIGN	4:13	4:24	6	username = purple_request_fields_get_string ( allfields , "screenname" )
LVAL	4:13	4:13	7	username
NAME	4:13	4:13	8	username
LEAF_NODE	4:13	4:13	9	username
ASSIGN_OP	4:22	4:22	7	=
LEAF_NODE	4:22	4:22	8	=
RVAL	4:24	4:24	7	purple_request_fields_get_string ( allfields , "screenname" )
FUNCTION_CALL	4:24	4:80	8	purple_request_fields_get_string ( allfields , "screenname" )
CALLEE	4:24	4:24	9	purple_request_fields_get_string
LEAF_NODE	4:24	4:24	10	purple_request_fields_get_string
LEAF_NODE	4:56	4:56	9	(
ARGUMENT	4:57	4:57	9	allfields
FIELD	4:57	4:57	10	allfields
LEAF_NODE	4:57	4:57	11	allfields
LEAF_NODE	4:66	4:66	9	,
ARGUMENT	4:68	4:68	9	"screenname"
FIELD	4:68	4:68	10	"screenname"
LEAF_NODE	4:68	4:68	11	"screenname"
LEAF_NODE	4:80	4:80	9	)
LEAF_NODE	4:81	4:81	4	;
SIMPLE_DECL	5:1	5:73	3	const char * alias ; alias = purple_request_fields_get_string ( allfields , "alias" ) ;
VAR_DECL	5:1	5:13	4	const char * alias ; alias = purple_request_fields_get_string ( allfields , "alias" )
TYPE	5:1	5:12	5	const char *
TYPE_NAME	5:1	5:7	6	const char
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	char
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	alias
LEAF_NODE	5:13	5:13	6	alias
LEAF_NODE	0:0	0:0	5	;
INIT	5:13	5:13	5	alias = purple_request_fields_get_string ( allfields , "alias" )
ASSIGN	5:13	5:21	6	alias = purple_request_fields_get_string ( allfields , "alias" )
LVAL	5:13	5:13	7	alias
NAME	5:13	5:13	8	alias
LEAF_NODE	5:13	5:13	9	alias
ASSIGN_OP	5:19	5:19	7	=
LEAF_NODE	5:19	5:19	8	=
RVAL	5:21	5:21	7	purple_request_fields_get_string ( allfields , "alias" )
FUNCTION_CALL	5:21	5:72	8	purple_request_fields_get_string ( allfields , "alias" )
CALLEE	5:21	5:21	9	purple_request_fields_get_string
LEAF_NODE	5:21	5:21	10	purple_request_fields_get_string
LEAF_NODE	5:53	5:53	9	(
ARGUMENT	5:54	5:54	9	allfields
FIELD	5:54	5:54	10	allfields
LEAF_NODE	5:54	5:54	11	allfields
LEAF_NODE	5:63	5:63	9	,
ARGUMENT	5:65	5:65	9	"alias"
FIELD	5:65	5:65	10	"alias"
LEAF_NODE	5:65	5:65	11	"alias"
LEAF_NODE	5:72	5:72	9	)
LEAF_NODE	5:73	5:73	4	;
SIMPLE_DECL	6:1	6:73	3	const char * group ; group = purple_request_fields_get_string ( allfields , "group" ) ;
VAR_DECL	6:1	6:13	4	const char * group ; group = purple_request_fields_get_string ( allfields , "group" )
TYPE	6:1	6:12	5	const char *
TYPE_NAME	6:1	6:7	6	const char
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	char
POINTER	6:12	6:12	6	*
LEAF_NODE	6:12	6:12	7	*
NAME	6:13	6:13	5	group
LEAF_NODE	6:13	6:13	6	group
LEAF_NODE	0:0	0:0	5	;
INIT	6:13	6:13	5	group = purple_request_fields_get_string ( allfields , "group" )
ASSIGN	6:13	6:21	6	group = purple_request_fields_get_string ( allfields , "group" )
LVAL	6:13	6:13	7	group
NAME	6:13	6:13	8	group
LEAF_NODE	6:13	6:13	9	group
ASSIGN_OP	6:19	6:19	7	=
LEAF_NODE	6:19	6:19	8	=
RVAL	6:21	6:21	7	purple_request_fields_get_string ( allfields , "group" )
FUNCTION_CALL	6:21	6:72	8	purple_request_fields_get_string ( allfields , "group" )
CALLEE	6:21	6:21	9	purple_request_fields_get_string
LEAF_NODE	6:21	6:21	10	purple_request_fields_get_string
LEAF_NODE	6:53	6:53	9	(
ARGUMENT	6:54	6:54	9	allfields
FIELD	6:54	6:54	10	allfields
LEAF_NODE	6:54	6:54	11	allfields
LEAF_NODE	6:63	6:63	9	,
ARGUMENT	6:65	6:65	9	"group"
FIELD	6:65	6:65	10	"group"
LEAF_NODE	6:65	6:65	11	"group"
LEAF_NODE	6:72	6:72	9	)
LEAF_NODE	6:73	6:73	4	;
SIMPLE_DECL	7:1	7:75	3	const char * invite ; invite = purple_request_fields_get_string ( allfields , "invite" ) ;
VAR_DECL	7:1	7:13	4	const char * invite ; invite = purple_request_fields_get_string ( allfields , "invite" )
TYPE	7:1	7:12	5	const char *
TYPE_NAME	7:1	7:7	6	const char
LEAF_NODE	7:1	7:1	7	const
LEAF_NODE	7:7	7:7	7	char
POINTER	7:12	7:12	6	*
LEAF_NODE	7:12	7:12	7	*
NAME	7:13	7:13	5	invite
LEAF_NODE	7:13	7:13	6	invite
LEAF_NODE	0:0	0:0	5	;
INIT	7:13	7:13	5	invite = purple_request_fields_get_string ( allfields , "invite" )
ASSIGN	7:13	7:22	6	invite = purple_request_fields_get_string ( allfields , "invite" )
LVAL	7:13	7:13	7	invite
NAME	7:13	7:13	8	invite
LEAF_NODE	7:13	7:13	9	invite
ASSIGN_OP	7:20	7:20	7	=
LEAF_NODE	7:20	7:20	8	=
RVAL	7:22	7:22	7	purple_request_fields_get_string ( allfields , "invite" )
FUNCTION_CALL	7:22	7:74	8	purple_request_fields_get_string ( allfields , "invite" )
CALLEE	7:22	7:22	9	purple_request_fields_get_string
LEAF_NODE	7:22	7:22	10	purple_request_fields_get_string
LEAF_NODE	7:54	7:54	9	(
ARGUMENT	7:55	7:55	9	allfields
FIELD	7:55	7:55	10	allfields
LEAF_NODE	7:55	7:55	11	allfields
LEAF_NODE	7:64	7:64	9	,
ARGUMENT	7:66	7:66	9	"invite"
FIELD	7:66	7:66	10	"invite"
LEAF_NODE	7:66	7:66	11	"invite"
LEAF_NODE	7:74	7:74	9	)
LEAF_NODE	7:75	7:75	4	;
SIMPLE_DECL	8:1	8:81	3	PurpleAccount * account ; account = purple_request_fields_get_account ( allfields , "account" ) ;
VAR_DECL	8:1	8:16	4	PurpleAccount * account ; account = purple_request_fields_get_account ( allfields , "account" )
TYPE	8:1	8:15	5	PurpleAccount *
TYPE_NAME	8:1	8:1	6	PurpleAccount
LEAF_NODE	8:1	8:1	7	PurpleAccount
POINTER	8:15	8:15	6	*
LEAF_NODE	8:15	8:15	7	*
NAME	8:16	8:16	5	account
LEAF_NODE	8:16	8:16	6	account
LEAF_NODE	0:0	0:0	5	;
INIT	8:16	8:16	5	account = purple_request_fields_get_account ( allfields , "account" )
ASSIGN	8:16	8:26	6	account = purple_request_fields_get_account ( allfields , "account" )
LVAL	8:16	8:16	7	account
NAME	8:16	8:16	8	account
LEAF_NODE	8:16	8:16	9	account
ASSIGN_OP	8:24	8:24	7	=
LEAF_NODE	8:24	8:24	8	=
RVAL	8:26	8:26	7	purple_request_fields_get_account ( allfields , "account" )
FUNCTION_CALL	8:26	8:80	8	purple_request_fields_get_account ( allfields , "account" )
CALLEE	8:26	8:26	9	purple_request_fields_get_account
LEAF_NODE	8:26	8:26	10	purple_request_fields_get_account
LEAF_NODE	8:59	8:59	9	(
ARGUMENT	8:60	8:60	9	allfields
FIELD	8:60	8:60	10	allfields
LEAF_NODE	8:60	8:60	11	allfields
LEAF_NODE	8:69	8:69	9	,
ARGUMENT	8:71	8:71	9	"account"
FIELD	8:71	8:71	10	"account"
LEAF_NODE	8:71	8:71	11	"account"
LEAF_NODE	8:80	8:80	9	)
LEAF_NODE	8:81	8:81	4	;
SIMPLE_DECL	9:1	9:25	3	const char * error ; error = NULL ;
VAR_DECL	9:1	9:13	4	const char * error ; error = NULL
TYPE	9:1	9:12	5	const char *
TYPE_NAME	9:1	9:7	6	const char
LEAF_NODE	9:1	9:1	7	const
LEAF_NODE	9:7	9:7	7	char
POINTER	9:12	9:12	6	*
LEAF_NODE	9:12	9:12	7	*
NAME	9:13	9:13	5	error
LEAF_NODE	9:13	9:13	6	error
LEAF_NODE	0:0	0:0	5	;
INIT	9:13	9:13	5	error = NULL
ASSIGN	9:13	9:21	6	error = NULL
LVAL	9:13	9:13	7	error
NAME	9:13	9:13	8	error
LEAF_NODE	9:13	9:13	9	error
ASSIGN_OP	9:19	9:19	7	=
LEAF_NODE	9:19	9:19	8	=
RVAL	9:21	9:21	7	NULL
FIELD	9:21	9:21	8	NULL
LEAF_NODE	9:21	9:21	9	NULL
LEAF_NODE	9:25	9:25	4	;
SIMPLE_DECL	10:1	10:17	3	PurpleGroup * grp ;
VAR_DECL	10:1	10:14	4	PurpleGroup * grp
TYPE	10:1	10:13	5	PurpleGroup *
TYPE_NAME	10:1	10:1	6	PurpleGroup
LEAF_NODE	10:1	10:1	7	PurpleGroup
POINTER	10:13	10:13	6	*
LEAF_NODE	10:13	10:13	7	*
NAME	10:14	10:14	5	grp
LEAF_NODE	10:14	10:14	6	grp
LEAF_NODE	10:17	10:17	4	;
SIMPLE_DECL	11:1	11:19	3	PurpleBuddy * buddy ;
VAR_DECL	11:1	11:14	4	PurpleBuddy * buddy
TYPE	11:1	11:13	5	PurpleBuddy *
TYPE_NAME	11:1	11:1	6	PurpleBuddy
LEAF_NODE	11:1	11:1	7	PurpleBuddy
POINTER	11:13	11:13	6	*
LEAF_NODE	11:13	11:13	7	*
NAME	11:14	11:14	5	buddy
LEAF_NODE	11:14	11:14	6	buddy
LEAF_NODE	11:19	11:19	4	;
SELECTION	12:1	13:2	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:4	12:4	4	(
CONDITION	12:5	12:5	4	! username
EXPR	12:5	12:5	5	! username
UNARY_EXPR	12:5	12:6	6	! username
UNARY_OPERATOR	12:5	12:5	7	!
LEAF_NODE	12:5	12:5	8	!
FIELD	12:6	12:6	7	username
LEAF_NODE	12:6	12:6	8	username
LEAF_NODE	12:14	12:14	4	)
STATEMENTS	13:2	13:2	4	
EXPR_STATEMENT	13:2	13:57	5	error = _ ( "You must provide a username for the buddy." ) ;
EXPR	13:2	13:2	6	error = _ ( "You must provide a username for the buddy." )
ASSIGN	13:2	13:10	7	error = _ ( "You must provide a username for the buddy." )
LVAL	13:2	13:2	8	error
FIELD	13:2	13:2	9	error
LEAF_NODE	13:2	13:2	10	error
ASSIGN_OP	13:8	13:8	8	=
LEAF_NODE	13:8	13:8	9	=
RVAL	13:10	13:10	8	_ ( "You must provide a username for the buddy." )
FUNCTION_CALL	13:10	13:56	9	_ ( "You must provide a username for the buddy." )
CALLEE	13:10	13:10	10	_
LEAF_NODE	13:10	13:10	11	_
LEAF_NODE	13:11	13:11	10	(
ARGUMENT	13:12	13:12	10	"You must provide a username for the buddy."
FIELD	13:12	13:12	11	"You must provide a username for the buddy."
LEAF_NODE	13:12	13:12	12	"You must provide a username for the buddy."
LEAF_NODE	13:56	13:56	10	)
LEAF_NODE	13:57	13:57	6	;
SELECTION	14:1	14:6	3	
KEYWORD	14:1	14:1	4	else
LEAF_NODE	14:1	14:1	5	else
STATEMENTS	14:6	14:6	4	
SELECTION	14:6	15:2	5	
KEYWORD	14:6	14:6	6	if
LEAF_NODE	14:6	14:6	7	if
LEAF_NODE	14:9	14:9	6	(
CONDITION	14:10	14:10	6	! group
EXPR	14:10	14:10	7	! group
UNARY_EXPR	14:10	14:11	8	! group
UNARY_OPERATOR	14:10	14:10	9	!
LEAF_NODE	14:10	14:10	10	!
FIELD	14:11	14:11	9	group
LEAF_NODE	14:11	14:11	10	group
LEAF_NODE	14:16	14:16	6	)
STATEMENTS	15:2	15:2	6	
EXPR_STATEMENT	15:2	15:40	7	error = _ ( "You must provide a group." ) ;
EXPR	15:2	15:2	8	error = _ ( "You must provide a group." )
ASSIGN	15:2	15:10	9	error = _ ( "You must provide a group." )
LVAL	15:2	15:2	10	error
FIELD	15:2	15:2	11	error
LEAF_NODE	15:2	15:2	12	error
ASSIGN_OP	15:8	15:8	10	=
LEAF_NODE	15:8	15:8	11	=
RVAL	15:10	15:10	10	_ ( "You must provide a group." )
FUNCTION_CALL	15:10	15:39	11	_ ( "You must provide a group." )
CALLEE	15:10	15:10	12	_
LEAF_NODE	15:10	15:10	13	_
LEAF_NODE	15:11	15:11	12	(
ARGUMENT	15:12	15:12	12	"You must provide a group."
FIELD	15:12	15:12	13	"You must provide a group."
LEAF_NODE	15:12	15:12	14	"You must provide a group."
LEAF_NODE	15:39	15:39	12	)
LEAF_NODE	15:40	15:40	8	;
SELECTION	16:1	16:6	3	
KEYWORD	16:1	16:1	4	else
LEAF_NODE	16:1	16:1	5	else
STATEMENTS	16:6	16:6	4	
SELECTION	16:6	17:2	5	
KEYWORD	16:6	16:6	6	if
LEAF_NODE	16:6	16:6	7	if
LEAF_NODE	16:9	16:9	6	(
CONDITION	16:10	16:10	6	! account
EXPR	16:10	16:10	7	! account
UNARY_EXPR	16:10	16:11	8	! account
UNARY_OPERATOR	16:10	16:10	9	!
LEAF_NODE	16:10	16:10	10	!
FIELD	16:11	16:11	9	account
LEAF_NODE	16:11	16:11	10	account
LEAF_NODE	16:18	16:18	6	)
STATEMENTS	17:2	17:2	6	
EXPR_STATEMENT	17:2	17:42	7	error = _ ( "You must select an account." ) ;
EXPR	17:2	17:2	8	error = _ ( "You must select an account." )
ASSIGN	17:2	17:10	9	error = _ ( "You must select an account." )
LVAL	17:2	17:2	10	error
FIELD	17:2	17:2	11	error
LEAF_NODE	17:2	17:2	12	error
ASSIGN_OP	17:8	17:8	10	=
LEAF_NODE	17:8	17:8	11	=
RVAL	17:10	17:10	10	_ ( "You must select an account." )
FUNCTION_CALL	17:10	17:41	11	_ ( "You must select an account." )
CALLEE	17:10	17:10	12	_
LEAF_NODE	17:10	17:10	13	_
LEAF_NODE	17:11	17:11	12	(
ARGUMENT	17:12	17:12	12	"You must select an account."
FIELD	17:12	17:12	13	"You must select an account."
LEAF_NODE	17:12	17:12	14	"You must select an account."
LEAF_NODE	17:41	17:41	12	)
LEAF_NODE	17:42	17:42	8	;
SELECTION	18:1	18:6	3	
KEYWORD	18:1	18:1	4	else
LEAF_NODE	18:1	18:1	5	else
STATEMENTS	18:6	18:6	4	
SELECTION	18:6	19:2	5	
KEYWORD	18:6	18:6	6	if
LEAF_NODE	18:6	18:6	7	if
LEAF_NODE	18:9	18:9	6	(
CONDITION	18:10	18:10	6	! purple_account_is_connected ( account )
EXPR	18:10	18:10	7	! purple_account_is_connected ( account )
UNARY_EXPR	18:10	18:11	8	! purple_account_is_connected ( account )
UNARY_OPERATOR	18:10	18:10	9	!
LEAF_NODE	18:10	18:10	10	!
FUNCTION_CALL	18:11	18:46	9	purple_account_is_connected ( account )
CALLEE	18:11	18:11	10	purple_account_is_connected
LEAF_NODE	18:11	18:11	11	purple_account_is_connected
LEAF_NODE	18:38	18:38	10	(
ARGUMENT	18:39	18:39	10	account
FIELD	18:39	18:39	11	account
LEAF_NODE	18:39	18:39	12	account
LEAF_NODE	18:46	18:46	10	)
LEAF_NODE	18:47	18:47	6	)
STATEMENTS	19:2	19:2	6	
EXPR_STATEMENT	19:2	19:50	7	error = _ ( "The selected account is not online." ) ;
EXPR	19:2	19:2	8	error = _ ( "The selected account is not online." )
ASSIGN	19:2	19:10	9	error = _ ( "The selected account is not online." )
LVAL	19:2	19:2	10	error
FIELD	19:2	19:2	11	error
LEAF_NODE	19:2	19:2	12	error
ASSIGN_OP	19:8	19:8	10	=
LEAF_NODE	19:8	19:8	11	=
RVAL	19:10	19:10	10	_ ( "The selected account is not online." )
FUNCTION_CALL	19:10	19:49	11	_ ( "The selected account is not online." )
CALLEE	19:10	19:10	12	_
LEAF_NODE	19:10	19:10	13	_
LEAF_NODE	19:11	19:11	12	(
ARGUMENT	19:12	19:12	12	"The selected account is not online."
FIELD	19:12	19:12	13	"The selected account is not online."
LEAF_NODE	19:12	19:12	14	"The selected account is not online."
LEAF_NODE	19:49	19:49	12	)
LEAF_NODE	19:50	19:50	8	;
SELECTION	20:1	21:1	3	
KEYWORD	20:1	20:1	4	if
LEAF_NODE	20:1	20:1	5	if
LEAF_NODE	20:4	20:4	4	(
CONDITION	20:5	20:5	4	error
EXPR	20:5	20:5	5	error
FIELD	20:5	20:5	6	error
LEAF_NODE	20:5	20:5	7	error
LEAF_NODE	20:10	20:10	4	)
STATEMENTS	21:1	25:1	4	
LEAF_NODE	21:1	21:1	5	{
STATEMENTS	22:2	24:2	5	
EXPR_STATEMENT	22:2	22:58	6	finch_request_add_buddy ( account , username , group , alias ) ;
EXPR	22:2	22:2	7	finch_request_add_buddy ( account , username , group , alias )
FUNCTION_CALL	22:2	22:57	8	finch_request_add_buddy ( account , username , group , alias )
CALLEE	22:2	22:2	9	finch_request_add_buddy
LEAF_NODE	22:2	22:2	10	finch_request_add_buddy
LEAF_NODE	22:25	22:25	9	(
ARGUMENT	22:26	22:26	9	account
FIELD	22:26	22:26	10	account
LEAF_NODE	22:26	22:26	11	account
LEAF_NODE	22:33	22:33	9	,
ARGUMENT	22:35	22:35	9	username
FIELD	22:35	22:35	10	username
LEAF_NODE	22:35	22:35	11	username
LEAF_NODE	22:43	22:43	9	,
ARGUMENT	22:45	22:45	9	group
FIELD	22:45	22:45	10	group
LEAF_NODE	22:45	22:45	11	group
LEAF_NODE	22:50	22:50	9	,
ARGUMENT	22:52	22:52	9	alias
FIELD	22:52	22:52	10	alias
LEAF_NODE	22:52	22:52	11	alias
LEAF_NODE	22:57	22:57	9	)
LEAF_NODE	22:58	22:58	7	;
EXPR_STATEMENT	23:2	23:71	6	purple_notify_error ( NULL , _ ( "Error" ) , _ ( "Error adding buddy" ) , error ) ;
EXPR	23:2	23:2	7	purple_notify_error ( NULL , _ ( "Error" ) , _ ( "Error adding buddy" ) , error )
FUNCTION_CALL	23:2	23:70	8	purple_notify_error ( NULL , _ ( "Error" ) , _ ( "Error adding buddy" ) , error )
CALLEE	23:2	23:2	9	purple_notify_error
LEAF_NODE	23:2	23:2	10	purple_notify_error
LEAF_NODE	23:21	23:21	9	(
ARGUMENT	23:22	23:22	9	NULL
FIELD	23:22	23:22	10	NULL
LEAF_NODE	23:22	23:22	11	NULL
LEAF_NODE	23:26	23:26	9	,
ARGUMENT	23:28	23:28	9	_ ( "Error" )
FUNCTION_CALL	23:28	23:37	10	_ ( "Error" )
CALLEE	23:28	23:28	11	_
LEAF_NODE	23:28	23:28	12	_
LEAF_NODE	23:29	23:29	11	(
ARGUMENT	23:30	23:30	11	"Error"
FIELD	23:30	23:30	12	"Error"
LEAF_NODE	23:30	23:30	13	"Error"
LEAF_NODE	23:37	23:37	11	)
LEAF_NODE	23:38	23:38	9	,
ARGUMENT	23:40	23:40	9	_ ( "Error adding buddy" )
FUNCTION_CALL	23:40	23:62	10	_ ( "Error adding buddy" )
CALLEE	23:40	23:40	11	_
LEAF_NODE	23:40	23:40	12	_
LEAF_NODE	23:41	23:41	11	(
ARGUMENT	23:42	23:42	11	"Error adding buddy"
FIELD	23:42	23:42	12	"Error adding buddy"
LEAF_NODE	23:42	23:42	13	"Error adding buddy"
LEAF_NODE	23:62	23:62	11	)
LEAF_NODE	23:63	23:63	9	,
ARGUMENT	23:65	23:65	9	error
FIELD	23:65	23:65	10	error
LEAF_NODE	23:65	23:65	11	error
LEAF_NODE	23:70	23:70	9	)
LEAF_NODE	23:71	23:71	7	;
JUMP_STATEMENT	24:2	24:8	6	return DESTINATION ;
KEYWORD	24:2	24:2	7	return
LEAF_NODE	24:2	24:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	24:8	24:8	7	;
LEAF_NODE	25:1	25:1	5	}
EXPR_STATEMENT	26:1	26:31	3	grp = purple_find_group ( group ) ;
EXPR	26:1	26:1	4	grp = purple_find_group ( group )
ASSIGN	26:1	26:7	5	grp = purple_find_group ( group )
LVAL	26:1	26:1	6	grp
FIELD	26:1	26:1	7	grp
LEAF_NODE	26:1	26:1	8	grp
ASSIGN_OP	26:5	26:5	6	=
LEAF_NODE	26:5	26:5	7	=
RVAL	26:7	26:7	6	purple_find_group ( group )
FUNCTION_CALL	26:7	26:30	7	purple_find_group ( group )
CALLEE	26:7	26:7	8	purple_find_group
LEAF_NODE	26:7	26:7	9	purple_find_group
LEAF_NODE	26:24	26:24	8	(
ARGUMENT	26:25	26:25	8	group
FIELD	26:25	26:25	9	group
LEAF_NODE	26:25	26:25	10	group
LEAF_NODE	26:30	26:30	8	)
LEAF_NODE	26:31	26:31	4	;
SELECTION	27:1	28:1	3	
KEYWORD	27:1	27:1	4	if
LEAF_NODE	27:1	27:1	5	if
LEAF_NODE	27:4	27:4	4	(
CONDITION	27:5	27:5	4	! grp
EXPR	27:5	27:5	5	! grp
UNARY_EXPR	27:5	27:6	6	! grp
UNARY_OPERATOR	27:5	27:5	7	!
LEAF_NODE	27:5	27:5	8	!
FIELD	27:6	27:6	7	grp
LEAF_NODE	27:6	27:6	8	grp
LEAF_NODE	27:9	27:9	4	)
STATEMENTS	28:1	31:1	4	
LEAF_NODE	28:1	28:1	5	{
STATEMENTS	29:2	30:2	5	
EXPR_STATEMENT	29:2	29:31	6	grp = purple_group_new ( group ) ;
EXPR	29:2	29:2	7	grp = purple_group_new ( group )
ASSIGN	29:2	29:8	8	grp = purple_group_new ( group )
LVAL	29:2	29:2	9	grp
FIELD	29:2	29:2	10	grp
LEAF_NODE	29:2	29:2	11	grp
ASSIGN_OP	29:6	29:6	9	=
LEAF_NODE	29:6	29:6	10	=
RVAL	29:8	29:8	9	purple_group_new ( group )
FUNCTION_CALL	29:8	29:30	10	purple_group_new ( group )
CALLEE	29:8	29:8	11	purple_group_new
LEAF_NODE	29:8	29:8	12	purple_group_new
LEAF_NODE	29:24	29:24	11	(
ARGUMENT	29:25	29:25	11	group
FIELD	29:25	29:25	12	group
LEAF_NODE	29:25	29:25	13	group
LEAF_NODE	29:30	29:30	11	)
LEAF_NODE	29:31	29:31	7	;
EXPR_STATEMENT	30:2	30:35	6	purple_blist_add_group ( grp , NULL ) ;
EXPR	30:2	30:2	7	purple_blist_add_group ( grp , NULL )
FUNCTION_CALL	30:2	30:34	8	purple_blist_add_group ( grp , NULL )
CALLEE	30:2	30:2	9	purple_blist_add_group
LEAF_NODE	30:2	30:2	10	purple_blist_add_group
LEAF_NODE	30:24	30:24	9	(
ARGUMENT	30:25	30:25	9	grp
FIELD	30:25	30:25	10	grp
LEAF_NODE	30:25	30:25	11	grp
LEAF_NODE	30:28	30:28	9	,
ARGUMENT	30:30	30:30	9	NULL
FIELD	30:30	30:30	10	NULL
LEAF_NODE	30:30	30:30	11	NULL
LEAF_NODE	30:34	30:34	9	)
LEAF_NODE	30:35	30:35	7	;
LEAF_NODE	31:1	31:1	5	}
SELECTION	33:1	34:1	3	
KEYWORD	33:1	33:1	4	if
LEAF_NODE	33:1	33:1	5	if
LEAF_NODE	33:4	33:4	4	(
CONDITION	33:5	33:5	4	( buddy = purple_find_buddy_in_group ( account , username , grp ) ) == NULL
EXPR	33:5	33:69	5	( buddy = purple_find_buddy_in_group ( account , username , grp ) ) == NULL
LEAF_NODE	33:5	33:5	6	(
ASSIGN	33:6	33:14	6	buddy = purple_find_buddy_in_group ( account , username , grp )
LVAL	33:6	33:6	7	buddy
FIELD	33:6	33:6	8	buddy
LEAF_NODE	33:6	33:6	9	buddy
ASSIGN_OP	33:12	33:12	7	=
LEAF_NODE	33:12	33:12	8	=
RVAL	33:14	33:14	7	purple_find_buddy_in_group ( account , username , grp )
FUNCTION_CALL	33:14	33:63	8	purple_find_buddy_in_group ( account , username , grp )
CALLEE	33:14	33:14	9	purple_find_buddy_in_group
LEAF_NODE	33:14	33:14	10	purple_find_buddy_in_group
LEAF_NODE	33:40	33:40	9	(
ARGUMENT	33:41	33:41	9	account
FIELD	33:41	33:41	10	account
LEAF_NODE	33:41	33:41	11	account
LEAF_NODE	33:48	33:48	9	,
ARGUMENT	33:50	33:50	9	username
FIELD	33:50	33:50	10	username
LEAF_NODE	33:50	33:50	11	username
LEAF_NODE	33:58	33:58	9	,
ARGUMENT	33:60	33:60	9	grp
FIELD	33:60	33:60	10	grp
LEAF_NODE	33:60	33:60	11	grp
LEAF_NODE	33:63	33:63	9	)
LEAF_NODE	33:64	33:64	6	)
EQ_OPERATOR	33:66	33:66	6	==
LEAF_NODE	33:66	33:66	7	==
FIELD	33:69	33:69	6	NULL
LEAF_NODE	33:69	33:69	7	NULL
LEAF_NODE	33:73	33:73	4	)
STATEMENTS	34:1	37:1	4	
LEAF_NODE	34:1	34:1	5	{
STATEMENTS	35:2	36:2	5	
EXPR_STATEMENT	35:2	35:52	6	buddy = purple_buddy_new ( account , username , alias ) ;
EXPR	35:2	35:2	7	buddy = purple_buddy_new ( account , username , alias )
ASSIGN	35:2	35:10	8	buddy = purple_buddy_new ( account , username , alias )
LVAL	35:2	35:2	9	buddy
FIELD	35:2	35:2	10	buddy
LEAF_NODE	35:2	35:2	11	buddy
ASSIGN_OP	35:8	35:8	9	=
LEAF_NODE	35:8	35:8	10	=
RVAL	35:10	35:10	9	purple_buddy_new ( account , username , alias )
FUNCTION_CALL	35:10	35:51	10	purple_buddy_new ( account , username , alias )
CALLEE	35:10	35:10	11	purple_buddy_new
LEAF_NODE	35:10	35:10	12	purple_buddy_new
LEAF_NODE	35:26	35:26	11	(
ARGUMENT	35:27	35:27	11	account
FIELD	35:27	35:27	12	account
LEAF_NODE	35:27	35:27	13	account
LEAF_NODE	35:34	35:34	11	,
ARGUMENT	35:36	35:36	11	username
FIELD	35:36	35:36	12	username
LEAF_NODE	35:36	35:36	13	username
LEAF_NODE	35:44	35:44	11	,
ARGUMENT	35:46	35:46	11	alias
FIELD	35:46	35:46	12	alias
LEAF_NODE	35:46	35:46	13	alias
LEAF_NODE	35:51	35:51	11	)
LEAF_NODE	35:52	35:52	7	;
EXPR_STATEMENT	36:2	36:48	6	purple_blist_add_buddy ( buddy , NULL , grp , NULL ) ;
EXPR	36:2	36:2	7	purple_blist_add_buddy ( buddy , NULL , grp , NULL )
FUNCTION_CALL	36:2	36:47	8	purple_blist_add_buddy ( buddy , NULL , grp , NULL )
CALLEE	36:2	36:2	9	purple_blist_add_buddy
LEAF_NODE	36:2	36:2	10	purple_blist_add_buddy
LEAF_NODE	36:24	36:24	9	(
ARGUMENT	36:25	36:25	9	buddy
FIELD	36:25	36:25	10	buddy
LEAF_NODE	36:25	36:25	11	buddy
LEAF_NODE	36:30	36:30	9	,
ARGUMENT	36:32	36:32	9	NULL
FIELD	36:32	36:32	10	NULL
LEAF_NODE	36:32	36:32	11	NULL
LEAF_NODE	36:36	36:36	9	,
ARGUMENT	36:38	36:38	9	grp
FIELD	36:38	36:38	10	grp
LEAF_NODE	36:38	36:38	11	grp
LEAF_NODE	36:41	36:41	9	,
ARGUMENT	36:43	36:43	9	NULL
FIELD	36:43	36:43	10	NULL
LEAF_NODE	36:43	36:43	11	NULL
LEAF_NODE	36:47	36:47	9	)
LEAF_NODE	36:48	36:48	7	;
LEAF_NODE	37:1	37:1	5	}
EXPR_STATEMENT	38:1	38:61	3	purple_account_add_buddy_with_invite ( account , buddy , invite ) ;
EXPR	38:1	38:1	4	purple_account_add_buddy_with_invite ( account , buddy , invite )
FUNCTION_CALL	38:1	38:60	5	purple_account_add_buddy_with_invite ( account , buddy , invite )
CALLEE	38:1	38:1	6	purple_account_add_buddy_with_invite
LEAF_NODE	38:1	38:1	7	purple_account_add_buddy_with_invite
LEAF_NODE	38:37	38:37	6	(
ARGUMENT	38:38	38:38	6	account
FIELD	38:38	38:38	7	account
LEAF_NODE	38:38	38:38	8	account
LEAF_NODE	38:45	38:45	6	,
ARGUMENT	38:47	38:47	6	buddy
FIELD	38:47	38:47	7	buddy
LEAF_NODE	38:47	38:47	8	buddy
LEAF_NODE	38:52	38:52	6	,
ARGUMENT	38:54	38:54	6	invite
FIELD	38:54	38:54	7	invite
LEAF_NODE	38:54	38:54	8	invite
LEAF_NODE	38:60	38:60	6	)
LEAF_NODE	38:61	38:61	4	;
LEAF_NODE	39:0	39:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	138:0	1	
RETURN_TYPE	2:0	2:7	2	static gboolean
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	gboolean
LEAF_NODE	2:7	2:7	4	gboolean
FUNCTION_NAME	2:16	2:16	2	parse_start_oscar_session_response
LEAF_NODE	2:16	2:16	3	parse_start_oscar_session_response
PARAMETER_LIST	2:50	2:185	2	( PurpleConnection * gc , const gchar * response , gsize response_len , char * * host , unsigned short * port , char * * cookie , char * * tls_certname )
LEAF_NODE	2:50	2:50	3	(
PARAMETER_DECL	2:51	2:69	3	PurpleConnection * gc
TYPE	2:51	2:68	4	PurpleConnection *
TYPE_NAME	2:51	2:51	5	PurpleConnection
LEAF_NODE	2:51	2:51	6	PurpleConnection
POINTER	2:68	2:68	5	*
LEAF_NODE	2:68	2:68	6	*
NAME	2:69	2:69	4	gc
LEAF_NODE	2:69	2:69	5	gc
LEAF_NODE	2:71	2:71	3	,
PARAMETER_DECL	2:73	2:86	3	const gchar * response
TYPE	2:73	2:85	4	const gchar *
TYPE_NAME	2:73	2:79	5	const gchar
LEAF_NODE	2:73	2:73	6	const
LEAF_NODE	2:79	2:79	6	gchar
POINTER	2:85	2:85	5	*
LEAF_NODE	2:85	2:85	6	*
NAME	2:86	2:86	4	response
LEAF_NODE	2:86	2:86	5	response
LEAF_NODE	2:94	2:94	3	,
PARAMETER_DECL	2:96	2:102	3	gsize response_len
TYPE	2:96	2:96	4	gsize
TYPE_NAME	2:96	2:96	5	gsize
LEAF_NODE	2:96	2:96	6	gsize
NAME	2:102	2:102	4	response_len
LEAF_NODE	2:102	2:102	5	response_len
LEAF_NODE	2:114	2:114	3	,
PARAMETER_DECL	2:116	2:123	3	char * * host
TYPE	2:116	2:121	4	char * *
TYPE_NAME	2:116	2:116	5	char
LEAF_NODE	2:116	2:116	6	char
POINTER	2:121	2:122	5	* *
LEAF_NODE	2:121	2:121	6	*
LEAF_NODE	2:122	2:122	6	*
NAME	2:123	2:123	4	host
LEAF_NODE	2:123	2:123	5	host
LEAF_NODE	2:127	2:127	3	,
PARAMETER_DECL	2:129	2:145	3	unsigned short * port
TYPE	2:129	2:144	4	unsigned short *
TYPE_NAME	2:129	2:138	5	unsigned short
LEAF_NODE	2:129	2:129	6	unsigned
LEAF_NODE	2:138	2:138	6	short
POINTER	2:144	2:144	5	*
LEAF_NODE	2:144	2:144	6	*
NAME	2:145	2:145	4	port
LEAF_NODE	2:145	2:145	5	port
LEAF_NODE	2:149	2:149	3	,
PARAMETER_DECL	2:151	2:158	3	char * * cookie
TYPE	2:151	2:156	4	char * *
TYPE_NAME	2:151	2:151	5	char
LEAF_NODE	2:151	2:151	6	char
POINTER	2:156	2:157	5	* *
LEAF_NODE	2:156	2:156	6	*
LEAF_NODE	2:157	2:157	6	*
NAME	2:158	2:158	4	cookie
LEAF_NODE	2:158	2:158	5	cookie
LEAF_NODE	2:164	2:164	3	,
PARAMETER_DECL	2:166	2:173	3	char * * tls_certname
TYPE	2:166	2:171	4	char * *
TYPE_NAME	2:166	2:166	5	char
LEAF_NODE	2:166	2:166	6	char
POINTER	2:171	2:172	5	* *
LEAF_NODE	2:171	2:171	6	*
LEAF_NODE	2:172	2:172	6	*
NAME	2:173	2:173	4	tls_certname
LEAF_NODE	2:173	2:173	5	tls_certname
LEAF_NODE	2:185	2:185	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	137:1	2	
SIMPLE_DECL	4:1	4:56	3	OscarData * od ; od = purple_connection_get_protocol_data ( gc ) ;
VAR_DECL	4:1	4:12	4	OscarData * od ; od = purple_connection_get_protocol_data ( gc )
TYPE	4:1	4:11	5	OscarData *
TYPE_NAME	4:1	4:1	6	OscarData
LEAF_NODE	4:1	4:1	7	OscarData
POINTER	4:11	4:11	6	*
LEAF_NODE	4:11	4:11	7	*
NAME	4:12	4:12	5	od
LEAF_NODE	4:12	4:12	6	od
LEAF_NODE	0:0	0:0	5	;
INIT	4:12	4:12	5	od = purple_connection_get_protocol_data ( gc )
ASSIGN	4:12	4:17	6	od = purple_connection_get_protocol_data ( gc )
LVAL	4:12	4:12	7	od
NAME	4:12	4:12	8	od
LEAF_NODE	4:12	4:12	9	od
ASSIGN_OP	4:15	4:15	7	=
LEAF_NODE	4:15	4:15	8	=
RVAL	4:17	4:17	7	purple_connection_get_protocol_data ( gc )
FUNCTION_CALL	4:17	4:55	8	purple_connection_get_protocol_data ( gc )
CALLEE	4:17	4:17	9	purple_connection_get_protocol_data
LEAF_NODE	4:17	4:17	10	purple_connection_get_protocol_data
LEAF_NODE	4:52	4:52	9	(
ARGUMENT	4:53	4:53	9	gc
FIELD	4:53	4:53	10	gc
LEAF_NODE	4:53	4:53	11	gc
LEAF_NODE	4:55	4:55	9	)
LEAF_NODE	4:56	4:56	4	;
SIMPLE_DECL	5:1	5:46	3	xmlnode * response_node , xmlnode * tmp_node , xmlnode * data_node ;
INIT_DECL_LIST	5:1	5:1	4	xmlnode * response_node , xmlnode * tmp_node , xmlnode * data_node
VAR_DECL	5:1	5:10	5	xmlnode * response_node
TYPE	5:1	5:9	6	xmlnode *
TYPE_NAME	5:1	5:1	7	xmlnode
LEAF_NODE	5:1	5:1	8	xmlnode
POINTER	5:9	5:9	7	*
LEAF_NODE	5:9	5:9	8	*
NAME	5:10	5:10	6	response_node
LEAF_NODE	5:10	5:10	7	response_node
LEAF_NODE	5:23	5:23	5	,
INIT_DECL_LIST	5:1	5:1	5	xmlnode * tmp_node , xmlnode * data_node
VAR_DECL	5:1	5:26	6	xmlnode * tmp_node
TYPE	5:1	5:25	7	xmlnode *
TYPE_NAME	5:1	5:1	8	xmlnode
LEAF_NODE	5:1	5:1	9	xmlnode
POINTER	5:25	5:25	8	*
LEAF_NODE	5:25	5:25	9	*
NAME	5:26	5:26	7	tmp_node
LEAF_NODE	5:26	5:26	8	tmp_node
LEAF_NODE	5:34	5:34	6	,
VAR_DECL	5:1	5:37	6	xmlnode * data_node
TYPE	5:1	5:36	7	xmlnode *
TYPE_NAME	5:1	5:1	8	xmlnode
LEAF_NODE	5:1	5:1	9	xmlnode
POINTER	5:36	5:36	8	*
LEAF_NODE	5:36	5:36	9	*
NAME	5:37	5:37	7	data_node
LEAF_NODE	5:37	5:37	8	data_node
LEAF_NODE	5:46	5:46	4	;
SIMPLE_DECL	6:1	6:84	3	xmlnode * host_node ; host_node = NULL , xmlnode * port_node ; port_node = NULL , xmlnode * cookie_node ; cookie_node = NULL , xmlnode * tls_node ; tls_node = NULL ;
INIT_DECL_LIST	6:1	6:1	4	xmlnode * host_node ; host_node = NULL , xmlnode * port_node ; port_node = NULL , xmlnode * cookie_node ; cookie_node = NULL , xmlnode * tls_node ; tls_node = NULL
VAR_DECL	6:1	6:10	5	xmlnode * host_node ; host_node = NULL
TYPE	6:1	6:9	6	xmlnode *
TYPE_NAME	6:1	6:1	7	xmlnode
LEAF_NODE	6:1	6:1	8	xmlnode
POINTER	6:9	6:9	7	*
LEAF_NODE	6:9	6:9	8	*
NAME	6:10	6:10	6	host_node
LEAF_NODE	6:10	6:10	7	host_node
LEAF_NODE	0:0	0:0	6	;
INIT	6:10	6:10	6	host_node = NULL
ASSIGN	6:10	6:22	7	host_node = NULL
LVAL	6:10	6:10	8	host_node
NAME	6:10	6:10	9	host_node
LEAF_NODE	6:10	6:10	10	host_node
ASSIGN_OP	6:20	6:20	8	=
LEAF_NODE	6:20	6:20	9	=
RVAL	6:22	6:22	8	NULL
FIELD	6:22	6:22	9	NULL
LEAF_NODE	6:22	6:22	10	NULL
LEAF_NODE	6:26	6:26	5	,
INIT_DECL_LIST	6:1	6:1	5	xmlnode * port_node ; port_node = NULL , xmlnode * cookie_node ; cookie_node = NULL , xmlnode * tls_node ; tls_node = NULL
VAR_DECL	6:1	6:29	6	xmlnode * port_node ; port_node = NULL
TYPE	6:1	6:28	7	xmlnode *
TYPE_NAME	6:1	6:1	8	xmlnode
LEAF_NODE	6:1	6:1	9	xmlnode
POINTER	6:28	6:28	8	*
LEAF_NODE	6:28	6:28	9	*
NAME	6:29	6:29	7	port_node
LEAF_NODE	6:29	6:29	8	port_node
LEAF_NODE	0:0	0:0	7	;
INIT	6:29	6:29	7	port_node = NULL
ASSIGN	6:29	6:41	8	port_node = NULL
LVAL	6:29	6:29	9	port_node
NAME	6:29	6:29	10	port_node
LEAF_NODE	6:29	6:29	11	port_node
ASSIGN_OP	6:39	6:39	9	=
LEAF_NODE	6:39	6:39	10	=
RVAL	6:41	6:41	9	NULL
FIELD	6:41	6:41	10	NULL
LEAF_NODE	6:41	6:41	11	NULL
LEAF_NODE	6:45	6:45	6	,
INIT_DECL_LIST	6:1	6:1	6	xmlnode * cookie_node ; cookie_node = NULL , xmlnode * tls_node ; tls_node = NULL
VAR_DECL	6:1	6:48	7	xmlnode * cookie_node ; cookie_node = NULL
TYPE	6:1	6:47	8	xmlnode *
TYPE_NAME	6:1	6:1	9	xmlnode
LEAF_NODE	6:1	6:1	10	xmlnode
POINTER	6:47	6:47	9	*
LEAF_NODE	6:47	6:47	10	*
NAME	6:48	6:48	8	cookie_node
LEAF_NODE	6:48	6:48	9	cookie_node
LEAF_NODE	0:0	0:0	8	;
INIT	6:48	6:48	8	cookie_node = NULL
ASSIGN	6:48	6:62	9	cookie_node = NULL
LVAL	6:48	6:48	10	cookie_node
NAME	6:48	6:48	11	cookie_node
LEAF_NODE	6:48	6:48	12	cookie_node
ASSIGN_OP	6:60	6:60	10	=
LEAF_NODE	6:60	6:60	11	=
RVAL	6:62	6:62	10	NULL
FIELD	6:62	6:62	11	NULL
LEAF_NODE	6:62	6:62	12	NULL
LEAF_NODE	6:66	6:66	7	,
VAR_DECL	6:1	6:69	7	xmlnode * tls_node ; tls_node = NULL
TYPE	6:1	6:68	8	xmlnode *
TYPE_NAME	6:1	6:1	9	xmlnode
LEAF_NODE	6:1	6:1	10	xmlnode
POINTER	6:68	6:68	9	*
LEAF_NODE	6:68	6:68	10	*
NAME	6:69	6:69	8	tls_node
LEAF_NODE	6:69	6:69	9	tls_node
LEAF_NODE	0:0	0:0	8	;
INIT	6:69	6:69	8	tls_node = NULL
ASSIGN	6:69	6:80	9	tls_node = NULL
LVAL	6:69	6:69	10	tls_node
NAME	6:69	6:69	11	tls_node
LEAF_NODE	6:69	6:69	12	tls_node
ASSIGN_OP	6:78	6:78	10	=
LEAF_NODE	6:78	6:78	11	=
RVAL	6:80	6:80	10	NULL
FIELD	6:80	6:80	11	NULL
LEAF_NODE	6:80	6:80	12	NULL
LEAF_NODE	6:84	6:84	4	;
SIMPLE_DECL	7:1	7:10	3	char * tmp ;
VAR_DECL	7:1	7:7	4	char * tmp
TYPE	7:1	7:6	5	char *
TYPE_NAME	7:1	7:1	6	char
LEAF_NODE	7:1	7:1	7	char
POINTER	7:6	7:6	6	*
LEAF_NODE	7:6	7:6	7	*
NAME	7:7	7:7	5	tmp
LEAF_NODE	7:7	7:7	6	tmp
LEAF_NODE	7:10	7:10	4	;
SIMPLE_DECL	8:1	8:11	3	guint code ;
VAR_DECL	8:1	8:7	4	guint code
TYPE	8:1	8:1	5	guint
TYPE_NAME	8:1	8:1	6	guint
LEAF_NODE	8:1	8:1	7	guint
NAME	8:7	8:7	5	code
LEAF_NODE	8:7	8:7	6	code
LEAF_NODE	8:11	8:11	4	;
SIMPLE_DECL	9:1	9:132	3	const gchar * encryption_type ; encryption_type = purple_account_get_string ( purple_connection_get_account ( gc ) , "encryption" , OSCAR_DEFAULT_ENCRYPTION ) ;
VAR_DECL	9:1	9:14	4	const gchar * encryption_type ; encryption_type = purple_account_get_string ( purple_connection_get_account ( gc ) , "encryption" , OSCAR_DEFAULT_ENCRYPTION )
TYPE	9:1	9:13	5	const gchar *
TYPE_NAME	9:1	9:7	6	const gchar
LEAF_NODE	9:1	9:1	7	const
LEAF_NODE	9:7	9:7	7	gchar
POINTER	9:13	9:13	6	*
LEAF_NODE	9:13	9:13	7	*
NAME	9:14	9:14	5	encryption_type
LEAF_NODE	9:14	9:14	6	encryption_type
LEAF_NODE	0:0	0:0	5	;
INIT	9:14	9:14	5	encryption_type = purple_account_get_string ( purple_connection_get_account ( gc ) , "encryption" , OSCAR_DEFAULT_ENCRYPTION )
ASSIGN	9:14	9:32	6	encryption_type = purple_account_get_string ( purple_connection_get_account ( gc ) , "encryption" , OSCAR_DEFAULT_ENCRYPTION )
LVAL	9:14	9:14	7	encryption_type
NAME	9:14	9:14	8	encryption_type
LEAF_NODE	9:14	9:14	9	encryption_type
ASSIGN_OP	9:30	9:30	7	=
LEAF_NODE	9:30	9:30	8	=
RVAL	9:32	9:32	7	purple_account_get_string ( purple_connection_get_account ( gc ) , "encryption" , OSCAR_DEFAULT_ENCRYPTION )
FUNCTION_CALL	9:32	9:131	8	purple_account_get_string ( purple_connection_get_account ( gc ) , "encryption" , OSCAR_DEFAULT_ENCRYPTION )
CALLEE	9:32	9:32	9	purple_account_get_string
LEAF_NODE	9:32	9:32	10	purple_account_get_string
LEAF_NODE	9:57	9:57	9	(
ARGUMENT	9:58	9:58	9	purple_connection_get_account ( gc )
FUNCTION_CALL	9:58	9:90	10	purple_connection_get_account ( gc )
CALLEE	9:58	9:58	11	purple_connection_get_account
LEAF_NODE	9:58	9:58	12	purple_connection_get_account
LEAF_NODE	9:87	9:87	11	(
ARGUMENT	9:88	9:88	11	gc
FIELD	9:88	9:88	12	gc
LEAF_NODE	9:88	9:88	13	gc
LEAF_NODE	9:90	9:90	11	)
LEAF_NODE	9:91	9:91	9	,
ARGUMENT	9:93	9:93	9	"encryption"
FIELD	9:93	9:93	10	"encryption"
LEAF_NODE	9:93	9:93	11	"encryption"
LEAF_NODE	9:105	9:105	9	,
ARGUMENT	9:107	9:107	9	OSCAR_DEFAULT_ENCRYPTION
FIELD	9:107	9:107	10	OSCAR_DEFAULT_ENCRYPTION
LEAF_NODE	9:107	9:107	11	OSCAR_DEFAULT_ENCRYPTION
LEAF_NODE	9:131	9:131	9	)
LEAF_NODE	9:132	9:132	4	;
EXPR_STATEMENT	11:1	11:57	3	response_node = xmlnode_from_str ( response , response_len ) ;
EXPR	11:1	11:1	4	response_node = xmlnode_from_str ( response , response_len )
ASSIGN	11:1	11:17	5	response_node = xmlnode_from_str ( response , response_len )
LVAL	11:1	11:1	6	response_node
FIELD	11:1	11:1	7	response_node
LEAF_NODE	11:1	11:1	8	response_node
ASSIGN_OP	11:15	11:15	6	=
LEAF_NODE	11:15	11:15	7	=
RVAL	11:17	11:17	6	xmlnode_from_str ( response , response_len )
FUNCTION_CALL	11:17	11:56	7	xmlnode_from_str ( response , response_len )
CALLEE	11:17	11:17	8	xmlnode_from_str
LEAF_NODE	11:17	11:17	9	xmlnode_from_str
LEAF_NODE	11:33	11:33	8	(
ARGUMENT	11:34	11:34	8	response
FIELD	11:34	11:34	9	response
LEAF_NODE	11:34	11:34	10	response
LEAF_NODE	11:42	11:42	8	,
ARGUMENT	11:44	11:44	8	response_len
FIELD	11:44	11:44	9	response_len
LEAF_NODE	11:44	11:44	10	response_len
LEAF_NODE	11:56	11:56	8	)
LEAF_NODE	11:57	11:57	4	;
SELECTION	12:1	13:1	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:4	12:4	4	(
CONDITION	12:5	12:5	4	response_node == NULL
EXPR	12:5	12:22	5	response_node == NULL
FIELD	12:5	12:5	6	response_node
LEAF_NODE	12:5	12:5	7	response_node
EQ_OPERATOR	12:19	12:19	6	==
LEAF_NODE	12:19	12:19	7	==
FIELD	12:22	12:22	6	NULL
LEAF_NODE	12:22	12:22	7	NULL
LEAF_NODE	12:26	12:26	4	)
STATEMENTS	13:1	24:1	4	
LEAF_NODE	13:1	13:1	5	{
STATEMENTS	14:2	23:2	5	
SIMPLE_DECL	14:2	14:11	6	char * msg ;
VAR_DECL	14:2	14:8	7	char * msg
TYPE	14:2	14:7	8	char *
TYPE_NAME	14:2	14:2	9	char
LEAF_NODE	14:2	14:2	10	char
POINTER	14:7	14:7	9	*
LEAF_NODE	14:7	14:7	10	*
NAME	14:8	14:8	8	msg
LEAF_NODE	14:8	14:8	9	msg
LEAF_NODE	14:11	14:11	7	;
LEAF_NODE	15:2	15:2	6	purple_debug_error
LEAF_NODE	15:20	15:20	6	(
LEAF_NODE	15:21	15:21	6	"oscar"
LEAF_NODE	15:28	15:28	6	,
LEAF_NODE	15:30	15:30	6	"startOSCARSession could not parse "
LEAF_NODE	16:4	16:4	6	"response as XML: %s\n"
LEAF_NODE	16:27	16:27	6	,
LEAF_NODE	16:29	16:29	6	response
LEAF_NODE	16:37	16:37	6	)
LEAF_NODE	16:38	16:38	6	;
EXPR_STATEMENT	18:2	19:36	6	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) ) ;
EXPR	18:2	18:2	7	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
ASSIGN	18:2	18:8	8	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
LVAL	18:2	18:2	9	msg
FIELD	18:2	18:2	10	msg
LEAF_NODE	18:2	18:2	11	msg
ASSIGN_OP	18:6	18:6	9	=
LEAF_NODE	18:6	18:6	10	=
RVAL	18:8	18:8	9	generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
FUNCTION_CALL	18:8	19:35	10	generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
CALLEE	18:8	18:8	11	generate_error_message
LEAF_NODE	18:8	18:8	12	generate_error_message
LEAF_NODE	18:30	18:30	11	(
ARGUMENT	18:31	18:31	11	response_node
FIELD	18:31	18:31	12	response_node
LEAF_NODE	18:31	18:31	13	response_node
LEAF_NODE	18:44	18:44	11	,
ARGUMENT	19:4	19:4	11	get_start_oscar_session_url ( od )
FUNCTION_CALL	19:4	19:34	12	get_start_oscar_session_url ( od )
CALLEE	19:4	19:4	13	get_start_oscar_session_url
LEAF_NODE	19:4	19:4	14	get_start_oscar_session_url
LEAF_NODE	19:31	19:31	13	(
ARGUMENT	19:32	19:32	13	od
FIELD	19:32	19:32	14	od
LEAF_NODE	19:32	19:32	15	od
LEAF_NODE	19:34	19:34	13	)
LEAF_NODE	19:35	19:35	11	)
LEAF_NODE	19:36	19:36	7	;
EXPR_STATEMENT	20:2	21:47	6	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg ) ;
EXPR	20:2	20:2	7	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg )
FUNCTION_CALL	20:2	21:46	8	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg )
CALLEE	20:2	20:2	9	purple_connection_error_reason
LEAF_NODE	20:2	20:2	10	purple_connection_error_reason
LEAF_NODE	20:32	20:32	9	(
ARGUMENT	20:33	20:33	9	gc
FIELD	20:33	20:33	10	gc
LEAF_NODE	20:33	20:33	11	gc
LEAF_NODE	20:35	20:35	9	,
ARGUMENT	21:4	21:4	9	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
FIELD	21:4	21:4	10	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	21:4	21:4	11	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	21:41	21:41	9	,
ARGUMENT	21:43	21:43	9	msg
FIELD	21:43	21:43	10	msg
LEAF_NODE	21:43	21:43	11	msg
LEAF_NODE	21:46	21:46	9	)
LEAF_NODE	21:47	21:47	7	;
EXPR_STATEMENT	22:2	22:13	6	g_free ( msg ) ;
EXPR	22:2	22:2	7	g_free ( msg )
FUNCTION_CALL	22:2	22:12	8	g_free ( msg )
CALLEE	22:2	22:2	9	g_free
LEAF_NODE	22:2	22:2	10	g_free
LEAF_NODE	22:8	22:8	9	(
ARGUMENT	22:9	22:9	9	msg
FIELD	22:9	22:9	10	msg
LEAF_NODE	22:9	22:9	11	msg
LEAF_NODE	22:12	22:12	9	)
LEAF_NODE	22:13	22:13	7	;
JUMP_STATEMENT	23:2	23:14	6	return FALSE ;
KEYWORD	23:2	23:2	7	return
LEAF_NODE	23:2	23:2	8	return
DESTINATION	23:9	23:9	7	FALSE
EXPR	23:9	23:9	8	FALSE
FIELD	23:9	23:9	9	FALSE
LEAF_NODE	23:9	23:9	10	FALSE
LEAF_NODE	23:14	23:14	7	;
LEAF_NODE	24:1	24:1	5	}
EXPR_STATEMENT	26:1	26:58	3	tmp_node = xmlnode_get_child ( response_node , "statusCode" ) ;
EXPR	26:1	26:1	4	tmp_node = xmlnode_get_child ( response_node , "statusCode" )
ASSIGN	26:1	26:12	5	tmp_node = xmlnode_get_child ( response_node , "statusCode" )
LVAL	26:1	26:1	6	tmp_node
FIELD	26:1	26:1	7	tmp_node
LEAF_NODE	26:1	26:1	8	tmp_node
ASSIGN_OP	26:10	26:10	6	=
LEAF_NODE	26:10	26:10	7	=
RVAL	26:12	26:12	6	xmlnode_get_child ( response_node , "statusCode" )
FUNCTION_CALL	26:12	26:57	7	xmlnode_get_child ( response_node , "statusCode" )
CALLEE	26:12	26:12	8	xmlnode_get_child
LEAF_NODE	26:12	26:12	9	xmlnode_get_child
LEAF_NODE	26:29	26:29	8	(
ARGUMENT	26:30	26:30	8	response_node
FIELD	26:30	26:30	9	response_node
LEAF_NODE	26:30	26:30	10	response_node
LEAF_NODE	26:43	26:43	8	,
ARGUMENT	26:45	26:45	8	"statusCode"
FIELD	26:45	26:45	9	"statusCode"
LEAF_NODE	26:45	26:45	10	"statusCode"
LEAF_NODE	26:57	26:57	8	)
LEAF_NODE	26:58	26:58	4	;
EXPR_STATEMENT	27:1	27:53	3	data_node = xmlnode_get_child ( response_node , "data" ) ;
EXPR	27:1	27:1	4	data_node = xmlnode_get_child ( response_node , "data" )
ASSIGN	27:1	27:13	5	data_node = xmlnode_get_child ( response_node , "data" )
LVAL	27:1	27:1	6	data_node
FIELD	27:1	27:1	7	data_node
LEAF_NODE	27:1	27:1	8	data_node
ASSIGN_OP	27:11	27:11	6	=
LEAF_NODE	27:11	27:11	7	=
RVAL	27:13	27:13	6	xmlnode_get_child ( response_node , "data" )
FUNCTION_CALL	27:13	27:52	7	xmlnode_get_child ( response_node , "data" )
CALLEE	27:13	27:13	8	xmlnode_get_child
LEAF_NODE	27:13	27:13	9	xmlnode_get_child
LEAF_NODE	27:30	27:30	8	(
ARGUMENT	27:31	27:31	8	response_node
FIELD	27:31	27:31	9	response_node
LEAF_NODE	27:31	27:31	10	response_node
LEAF_NODE	27:44	27:44	8	,
ARGUMENT	27:46	27:46	8	"data"
FIELD	27:46	27:46	9	"data"
LEAF_NODE	27:46	27:46	10	"data"
LEAF_NODE	27:52	27:52	8	)
LEAF_NODE	27:53	27:53	4	;
SELECTION	28:1	28:24	3	
KEYWORD	28:1	28:1	4	if
LEAF_NODE	28:1	28:1	5	if
LEAF_NODE	28:4	28:4	4	(
CONDITION	28:5	28:5	4	data_node != NULL
EXPR	28:5	28:18	5	data_node != NULL
FIELD	28:5	28:5	6	data_node
LEAF_NODE	28:5	28:5	7	data_node
EQ_OPERATOR	28:15	28:15	6	!=
LEAF_NODE	28:15	28:15	7	!=
FIELD	28:18	28:18	6	NULL
LEAF_NODE	28:18	28:18	7	NULL
LEAF_NODE	28:22	28:22	4	)
STATEMENTS	28:24	32:1	4	
LEAF_NODE	28:24	28:24	5	{
STATEMENTS	29:2	31:2	5	
EXPR_STATEMENT	29:2	29:50	6	host_node = xmlnode_get_child ( data_node , "host" ) ;
EXPR	29:2	29:2	7	host_node = xmlnode_get_child ( data_node , "host" )
ASSIGN	29:2	29:14	8	host_node = xmlnode_get_child ( data_node , "host" )
LVAL	29:2	29:2	9	host_node
FIELD	29:2	29:2	10	host_node
LEAF_NODE	29:2	29:2	11	host_node
ASSIGN_OP	29:12	29:12	9	=
LEAF_NODE	29:12	29:12	10	=
RVAL	29:14	29:14	9	xmlnode_get_child ( data_node , "host" )
FUNCTION_CALL	29:14	29:49	10	xmlnode_get_child ( data_node , "host" )
CALLEE	29:14	29:14	11	xmlnode_get_child
LEAF_NODE	29:14	29:14	12	xmlnode_get_child
LEAF_NODE	29:31	29:31	11	(
ARGUMENT	29:32	29:32	11	data_node
FIELD	29:32	29:32	12	data_node
LEAF_NODE	29:32	29:32	13	data_node
LEAF_NODE	29:41	29:41	11	,
ARGUMENT	29:43	29:43	11	"host"
FIELD	29:43	29:43	12	"host"
LEAF_NODE	29:43	29:43	13	"host"
LEAF_NODE	29:49	29:49	11	)
LEAF_NODE	29:50	29:50	7	;
EXPR_STATEMENT	30:2	30:50	6	port_node = xmlnode_get_child ( data_node , "port" ) ;
EXPR	30:2	30:2	7	port_node = xmlnode_get_child ( data_node , "port" )
ASSIGN	30:2	30:14	8	port_node = xmlnode_get_child ( data_node , "port" )
LVAL	30:2	30:2	9	port_node
FIELD	30:2	30:2	10	port_node
LEAF_NODE	30:2	30:2	11	port_node
ASSIGN_OP	30:12	30:12	9	=
LEAF_NODE	30:12	30:12	10	=
RVAL	30:14	30:14	9	xmlnode_get_child ( data_node , "port" )
FUNCTION_CALL	30:14	30:49	10	xmlnode_get_child ( data_node , "port" )
CALLEE	30:14	30:14	11	xmlnode_get_child
LEAF_NODE	30:14	30:14	12	xmlnode_get_child
LEAF_NODE	30:31	30:31	11	(
ARGUMENT	30:32	30:32	11	data_node
FIELD	30:32	30:32	12	data_node
LEAF_NODE	30:32	30:32	13	data_node
LEAF_NODE	30:41	30:41	11	,
ARGUMENT	30:43	30:43	11	"port"
FIELD	30:43	30:43	12	"port"
LEAF_NODE	30:43	30:43	13	"port"
LEAF_NODE	30:49	30:49	11	)
LEAF_NODE	30:50	30:50	7	;
EXPR_STATEMENT	31:2	31:54	6	cookie_node = xmlnode_get_child ( data_node , "cookie" ) ;
EXPR	31:2	31:2	7	cookie_node = xmlnode_get_child ( data_node , "cookie" )
ASSIGN	31:2	31:16	8	cookie_node = xmlnode_get_child ( data_node , "cookie" )
LVAL	31:2	31:2	9	cookie_node
FIELD	31:2	31:2	10	cookie_node
LEAF_NODE	31:2	31:2	11	cookie_node
ASSIGN_OP	31:14	31:14	9	=
LEAF_NODE	31:14	31:14	10	=
RVAL	31:16	31:16	9	xmlnode_get_child ( data_node , "cookie" )
FUNCTION_CALL	31:16	31:53	10	xmlnode_get_child ( data_node , "cookie" )
CALLEE	31:16	31:16	11	xmlnode_get_child
LEAF_NODE	31:16	31:16	12	xmlnode_get_child
LEAF_NODE	31:33	31:33	11	(
ARGUMENT	31:34	31:34	11	data_node
FIELD	31:34	31:34	12	data_node
LEAF_NODE	31:34	31:34	13	data_node
LEAF_NODE	31:43	31:43	11	,
ARGUMENT	31:45	31:45	11	"cookie"
FIELD	31:45	31:45	12	"cookie"
LEAF_NODE	31:45	31:45	13	"cookie"
LEAF_NODE	31:53	31:53	11	)
LEAF_NODE	31:54	31:54	7	;
LEAF_NODE	32:1	32:1	5	}
SELECTION	34:1	34:79	3	
KEYWORD	34:1	34:1	4	if
LEAF_NODE	34:1	34:1	5	if
LEAF_NODE	34:4	34:4	4	(
CONDITION	34:5	34:5	4	tmp_node == NULL || ( tmp = xmlnode_get_data_unescaped ( tmp_node ) ) == NULL
EXPR	34:5	34:5	5	tmp_node == NULL || ( tmp = xmlnode_get_data_unescaped ( tmp_node ) ) == NULL
OR	34:5	34:25	6	tmp_node == NULL || ( tmp = xmlnode_get_data_unescaped ( tmp_node ) ) == NULL
EXPR	34:5	34:17	7	tmp_node == NULL
FIELD	34:5	34:5	8	tmp_node
LEAF_NODE	34:5	34:5	9	tmp_node
EQ_OPERATOR	34:14	34:14	8	==
LEAF_NODE	34:14	34:14	9	==
FIELD	34:17	34:17	8	NULL
LEAF_NODE	34:17	34:17	9	NULL
LEAF_NODE	34:22	34:22	7	||
EXPR	34:25	34:73	7	( tmp = xmlnode_get_data_unescaped ( tmp_node ) ) == NULL
LEAF_NODE	34:25	34:25	8	(
ASSIGN	34:26	34:32	8	tmp = xmlnode_get_data_unescaped ( tmp_node )
LVAL	34:26	34:26	9	tmp
FIELD	34:26	34:26	10	tmp
LEAF_NODE	34:26	34:26	11	tmp
ASSIGN_OP	34:30	34:30	9	=
LEAF_NODE	34:30	34:30	10	=
RVAL	34:32	34:32	9	xmlnode_get_data_unescaped ( tmp_node )
FUNCTION_CALL	34:32	34:67	10	xmlnode_get_data_unescaped ( tmp_node )
CALLEE	34:32	34:32	11	xmlnode_get_data_unescaped
LEAF_NODE	34:32	34:32	12	xmlnode_get_data_unescaped
LEAF_NODE	34:58	34:58	11	(
ARGUMENT	34:59	34:59	11	tmp_node
FIELD	34:59	34:59	12	tmp_node
LEAF_NODE	34:59	34:59	13	tmp_node
LEAF_NODE	34:67	34:67	11	)
LEAF_NODE	34:68	34:68	8	)
EQ_OPERATOR	34:70	34:70	8	==
LEAF_NODE	34:70	34:70	9	==
FIELD	34:73	34:73	8	NULL
LEAF_NODE	34:73	34:73	9	NULL
LEAF_NODE	34:77	34:77	4	)
STATEMENTS	34:79	45:1	4	
LEAF_NODE	34:79	34:79	5	{
STATEMENTS	35:2	44:2	5	
SIMPLE_DECL	35:2	35:11	6	char * msg ;
VAR_DECL	35:2	35:8	7	char * msg
TYPE	35:2	35:7	8	char *
TYPE_NAME	35:2	35:2	9	char
LEAF_NODE	35:2	35:2	10	char
POINTER	35:7	35:7	9	*
LEAF_NODE	35:7	35:7	10	*
NAME	35:8	35:8	8	msg
LEAF_NODE	35:8	35:8	9	msg
LEAF_NODE	35:11	35:11	7	;
LEAF_NODE	36:2	36:2	6	purple_debug_error
LEAF_NODE	36:20	36:20	6	(
LEAF_NODE	36:21	36:21	6	"oscar"
LEAF_NODE	36:28	36:28	6	,
LEAF_NODE	36:30	36:30	6	"startOSCARSession response was "
LEAF_NODE	37:4	37:4	6	"missing statusCode: %s\n"
LEAF_NODE	37:30	37:30	6	,
LEAF_NODE	37:32	37:32	6	response
LEAF_NODE	37:40	37:40	6	)
LEAF_NODE	37:41	37:41	6	;
EXPR_STATEMENT	38:2	39:36	6	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) ) ;
EXPR	38:2	38:2	7	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
ASSIGN	38:2	38:8	8	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
LVAL	38:2	38:2	9	msg
FIELD	38:2	38:2	10	msg
LEAF_NODE	38:2	38:2	11	msg
ASSIGN_OP	38:6	38:6	9	=
LEAF_NODE	38:6	38:6	10	=
RVAL	38:8	38:8	9	generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
FUNCTION_CALL	38:8	39:35	10	generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
CALLEE	38:8	38:8	11	generate_error_message
LEAF_NODE	38:8	38:8	12	generate_error_message
LEAF_NODE	38:30	38:30	11	(
ARGUMENT	38:31	38:31	11	response_node
FIELD	38:31	38:31	12	response_node
LEAF_NODE	38:31	38:31	13	response_node
LEAF_NODE	38:44	38:44	11	,
ARGUMENT	39:4	39:4	11	get_start_oscar_session_url ( od )
FUNCTION_CALL	39:4	39:34	12	get_start_oscar_session_url ( od )
CALLEE	39:4	39:4	13	get_start_oscar_session_url
LEAF_NODE	39:4	39:4	14	get_start_oscar_session_url
LEAF_NODE	39:31	39:31	13	(
ARGUMENT	39:32	39:32	13	od
FIELD	39:32	39:32	14	od
LEAF_NODE	39:32	39:32	15	od
LEAF_NODE	39:34	39:34	13	)
LEAF_NODE	39:35	39:35	11	)
LEAF_NODE	39:36	39:36	7	;
EXPR_STATEMENT	40:2	41:47	6	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg ) ;
EXPR	40:2	40:2	7	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg )
FUNCTION_CALL	40:2	41:46	8	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg )
CALLEE	40:2	40:2	9	purple_connection_error_reason
LEAF_NODE	40:2	40:2	10	purple_connection_error_reason
LEAF_NODE	40:32	40:32	9	(
ARGUMENT	40:33	40:33	9	gc
FIELD	40:33	40:33	10	gc
LEAF_NODE	40:33	40:33	11	gc
LEAF_NODE	40:35	40:35	9	,
ARGUMENT	41:4	41:4	9	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
FIELD	41:4	41:4	10	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	41:4	41:4	11	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	41:41	41:41	9	,
ARGUMENT	41:43	41:43	9	msg
FIELD	41:43	41:43	10	msg
LEAF_NODE	41:43	41:43	11	msg
LEAF_NODE	41:46	41:46	9	)
LEAF_NODE	41:47	41:47	7	;
EXPR_STATEMENT	42:2	42:13	6	g_free ( msg ) ;
EXPR	42:2	42:2	7	g_free ( msg )
FUNCTION_CALL	42:2	42:12	8	g_free ( msg )
CALLEE	42:2	42:2	9	g_free
LEAF_NODE	42:2	42:2	10	g_free
LEAF_NODE	42:8	42:8	9	(
ARGUMENT	42:9	42:9	9	msg
FIELD	42:9	42:9	10	msg
LEAF_NODE	42:9	42:9	11	msg
LEAF_NODE	42:12	42:12	9	)
LEAF_NODE	42:13	42:13	7	;
EXPR_STATEMENT	43:2	43:29	6	xmlnode_free ( response_node ) ;
EXPR	43:2	43:2	7	xmlnode_free ( response_node )
FUNCTION_CALL	43:2	43:28	8	xmlnode_free ( response_node )
CALLEE	43:2	43:2	9	xmlnode_free
LEAF_NODE	43:2	43:2	10	xmlnode_free
LEAF_NODE	43:14	43:14	9	(
ARGUMENT	43:15	43:15	9	response_node
FIELD	43:15	43:15	10	response_node
LEAF_NODE	43:15	43:15	11	response_node
LEAF_NODE	43:28	43:28	9	)
LEAF_NODE	43:29	43:29	7	;
JUMP_STATEMENT	44:2	44:14	6	return FALSE ;
KEYWORD	44:2	44:2	7	return
LEAF_NODE	44:2	44:2	8	return
DESTINATION	44:9	44:9	7	FALSE
EXPR	44:9	44:9	8	FALSE
FIELD	44:9	44:9	9	FALSE
LEAF_NODE	44:9	44:9	10	FALSE
LEAF_NODE	44:14	44:14	7	;
LEAF_NODE	45:1	45:1	5	}
EXPR_STATEMENT	47:1	47:17	3	code = atoi ( tmp ) ;
EXPR	47:1	47:1	4	code = atoi ( tmp )
ASSIGN	47:1	47:8	5	code = atoi ( tmp )
LVAL	47:1	47:1	6	code
FIELD	47:1	47:1	7	code
LEAF_NODE	47:1	47:1	8	code
ASSIGN_OP	47:6	47:6	6	=
LEAF_NODE	47:6	47:6	7	=
RVAL	47:8	47:8	6	atoi ( tmp )
FUNCTION_CALL	47:8	47:16	7	atoi ( tmp )
CALLEE	47:8	47:8	8	atoi
LEAF_NODE	47:8	47:8	9	atoi
LEAF_NODE	47:12	47:12	8	(
ARGUMENT	47:13	47:13	8	tmp
FIELD	47:13	47:13	9	tmp
LEAF_NODE	47:13	47:13	10	tmp
LEAF_NODE	47:16	47:16	8	)
LEAF_NODE	47:17	47:17	4	;
SELECTION	48:1	49:1	3	
KEYWORD	48:1	48:1	4	if
LEAF_NODE	48:1	48:1	5	if
LEAF_NODE	48:4	48:4	4	(
CONDITION	48:5	48:5	4	code != 200
EXPR	48:5	48:13	5	code != 200
FIELD	48:5	48:5	6	code
LEAF_NODE	48:5	48:5	7	code
EQ_OPERATOR	48:10	48:10	6	!=
LEAF_NODE	48:10	48:10	7	!=
FIELD	48:13	48:13	6	200
LEAF_NODE	48:13	48:13	7	200
LEAF_NODE	48:16	48:16	4	)
STATEMENTS	49:1	81:1	4	
LEAF_NODE	49:1	49:1	5	{
STATEMENTS	50:2	80:2	5	
SIMPLE_DECL	50:2	50:29	6	xmlnode * status_detail_node ;
VAR_DECL	50:2	50:11	7	xmlnode * status_detail_node
TYPE	50:2	50:10	8	xmlnode *
TYPE_NAME	50:2	50:2	9	xmlnode
LEAF_NODE	50:2	50:2	10	xmlnode
POINTER	50:10	50:10	9	*
LEAF_NODE	50:10	50:10	10	*
NAME	50:11	50:11	8	status_detail_node
LEAF_NODE	50:11	50:11	9	status_detail_node
LEAF_NODE	50:29	50:29	7	;
SIMPLE_DECL	51:2	51:25	6	guint status_detail ; status_detail = 0 ;
VAR_DECL	51:2	51:8	7	guint status_detail ; status_detail = 0
TYPE	51:2	51:2	8	guint
TYPE_NAME	51:2	51:2	9	guint
LEAF_NODE	51:2	51:2	10	guint
NAME	51:8	51:8	8	status_detail
LEAF_NODE	51:8	51:8	9	status_detail
LEAF_NODE	0:0	0:0	8	;
INIT	51:8	51:8	8	status_detail = 0
ASSIGN	51:8	51:24	9	status_detail = 0
LVAL	51:8	51:8	10	status_detail
NAME	51:8	51:8	11	status_detail
LEAF_NODE	51:8	51:8	12	status_detail
ASSIGN_OP	51:22	51:22	10	=
LEAF_NODE	51:22	51:22	11	=
RVAL	51:24	51:24	10	0
FIELD	51:24	51:24	11	0
LEAF_NODE	51:24	51:24	12	0
LEAF_NODE	51:25	51:25	7	;
EXPR_STATEMENT	52:2	53:60	6	status_detail_node = xmlnode_get_child ( response_node , "statusDetailCode" ) ;
EXPR	52:2	52:2	7	status_detail_node = xmlnode_get_child ( response_node , "statusDetailCode" )
ASSIGN	52:2	52:23	8	status_detail_node = xmlnode_get_child ( response_node , "statusDetailCode" )
LVAL	52:2	52:2	9	status_detail_node
FIELD	52:2	52:2	10	status_detail_node
LEAF_NODE	52:2	52:2	11	status_detail_node
ASSIGN_OP	52:21	52:21	9	=
LEAF_NODE	52:21	52:21	10	=
RVAL	52:23	52:23	9	xmlnode_get_child ( response_node , "statusDetailCode" )
FUNCTION_CALL	52:23	53:59	10	xmlnode_get_child ( response_node , "statusDetailCode" )
CALLEE	52:23	52:23	11	xmlnode_get_child
LEAF_NODE	52:23	52:23	12	xmlnode_get_child
LEAF_NODE	52:40	52:40	11	(
ARGUMENT	52:41	52:41	11	response_node
FIELD	52:41	52:41	12	response_node
LEAF_NODE	52:41	52:41	13	response_node
LEAF_NODE	52:54	52:54	11	,
ARGUMENT	53:41	53:41	11	"statusDetailCode"
FIELD	53:41	53:41	12	"statusDetailCode"
LEAF_NODE	53:41	53:41	13	"statusDetailCode"
LEAF_NODE	53:59	53:59	11	)
LEAF_NODE	53:60	53:60	7	;
SELECTION	54:2	54:26	6	
KEYWORD	54:2	54:2	7	if
LEAF_NODE	54:2	54:2	8	if
LEAF_NODE	54:5	54:5	7	(
CONDITION	54:6	54:6	7	status_detail_node
EXPR	54:6	54:6	8	status_detail_node
FIELD	54:6	54:6	9	status_detail_node
LEAF_NODE	54:6	54:6	10	status_detail_node
LEAF_NODE	54:24	54:24	7	)
STATEMENTS	54:26	60:2	7	
LEAF_NODE	54:26	54:26	8	{
STATEMENTS	55:3	56:3	8	
SIMPLE_DECL	55:3	55:53	9	gchar * data ; data = xmlnode_get_data ( status_detail_node ) ;
VAR_DECL	55:3	55:10	10	gchar * data ; data = xmlnode_get_data ( status_detail_node )
TYPE	55:3	55:9	11	gchar *
TYPE_NAME	55:3	55:3	12	gchar
LEAF_NODE	55:3	55:3	13	gchar
POINTER	55:9	55:9	12	*
LEAF_NODE	55:9	55:9	13	*
NAME	55:10	55:10	11	data
LEAF_NODE	55:10	55:10	12	data
LEAF_NODE	0:0	0:0	11	;
INIT	55:10	55:10	11	data = xmlnode_get_data ( status_detail_node )
ASSIGN	55:10	55:17	12	data = xmlnode_get_data ( status_detail_node )
LVAL	55:10	55:10	13	data
NAME	55:10	55:10	14	data
LEAF_NODE	55:10	55:10	15	data
ASSIGN_OP	55:15	55:15	13	=
LEAF_NODE	55:15	55:15	14	=
RVAL	55:17	55:17	13	xmlnode_get_data ( status_detail_node )
FUNCTION_CALL	55:17	55:52	14	xmlnode_get_data ( status_detail_node )
CALLEE	55:17	55:17	15	xmlnode_get_data
LEAF_NODE	55:17	55:17	16	xmlnode_get_data
LEAF_NODE	55:33	55:33	15	(
ARGUMENT	55:34	55:34	15	status_detail_node
FIELD	55:34	55:34	16	status_detail_node
LEAF_NODE	55:34	55:34	17	status_detail_node
LEAF_NODE	55:52	55:52	15	)
LEAF_NODE	55:53	55:53	10	;
SELECTION	56:3	56:13	9	
KEYWORD	56:3	56:3	10	if
LEAF_NODE	56:3	56:3	11	if
LEAF_NODE	56:6	56:6	10	(
CONDITION	56:7	56:7	10	data
EXPR	56:7	56:7	11	data
FIELD	56:7	56:7	12	data
LEAF_NODE	56:7	56:7	13	data
LEAF_NODE	56:11	56:11	10	)
STATEMENTS	56:13	59:3	10	
LEAF_NODE	56:13	56:13	11	{
STATEMENTS	57:4	58:4	11	
EXPR_STATEMENT	57:4	57:30	12	status_detail = atoi ( data ) ;
EXPR	57:4	57:4	13	status_detail = atoi ( data )
ASSIGN	57:4	57:20	14	status_detail = atoi ( data )
LVAL	57:4	57:4	15	status_detail
FIELD	57:4	57:4	16	status_detail
LEAF_NODE	57:4	57:4	17	status_detail
ASSIGN_OP	57:18	57:18	15	=
LEAF_NODE	57:18	57:18	16	=
RVAL	57:20	57:20	15	atoi ( data )
FUNCTION_CALL	57:20	57:29	16	atoi ( data )
CALLEE	57:20	57:20	17	atoi
LEAF_NODE	57:20	57:20	18	atoi
LEAF_NODE	57:24	57:24	17	(
ARGUMENT	57:25	57:25	17	data
FIELD	57:25	57:25	18	data
LEAF_NODE	57:25	57:25	19	data
LEAF_NODE	57:29	57:29	17	)
LEAF_NODE	57:30	57:30	13	;
EXPR_STATEMENT	58:4	58:16	12	g_free ( data ) ;
EXPR	58:4	58:4	13	g_free ( data )
FUNCTION_CALL	58:4	58:15	14	g_free ( data )
CALLEE	58:4	58:4	15	g_free
LEAF_NODE	58:4	58:4	16	g_free
LEAF_NODE	58:10	58:10	15	(
ARGUMENT	58:11	58:11	15	data
FIELD	58:11	58:11	16	data
LEAF_NODE	58:11	58:11	17	data
LEAF_NODE	58:15	58:15	15	)
LEAF_NODE	58:16	58:16	13	;
LEAF_NODE	59:3	59:3	11	}
LEAF_NODE	60:2	60:2	8	}
LEAF_NODE	61:2	61:2	6	purple_debug_error
LEAF_NODE	61:20	61:20	6	(
LEAF_NODE	61:21	61:21	6	"oscar"
LEAF_NODE	61:28	61:28	6	,
LEAF_NODE	61:30	61:30	6	"startOSCARSession response statusCode "
LEAF_NODE	62:4	62:4	6	"was %s: %s\n"
LEAF_NODE	62:18	62:18	6	,
LEAF_NODE	62:20	62:20	6	tmp
LEAF_NODE	62:23	62:23	6	,
LEAF_NODE	62:25	62:25	6	response
LEAF_NODE	62:33	62:33	6	)
LEAF_NODE	62:34	62:34	6	;
SELECTION	63:2	64:3	6	
KEYWORD	63:2	63:2	7	if
LEAF_NODE	63:2	63:2	8	if
LEAF_NODE	63:5	63:5	7	(
CONDITION	63:6	63:6	7	( code == 401 && status_detail != 1014 ) || code == 607
EXPR	63:6	63:6	8	( code == 401 && status_detail != 1014 ) || code == 607
OR	63:6	63:48	9	( code == 401 && status_detail != 1014 ) || code == 607
EXPR	63:6	63:43	10	( code == 401 && status_detail != 1014 )
LEAF_NODE	63:6	63:6	11	(
AND	63:7	63:22	11	code == 401 && status_detail != 1014
EXPR	63:7	63:15	12	code == 401
FIELD	63:7	63:7	13	code
LEAF_NODE	63:7	63:7	14	code
EQ_OPERATOR	63:12	63:12	13	==
LEAF_NODE	63:12	63:12	14	==
FIELD	63:15	63:15	13	401
LEAF_NODE	63:15	63:15	14	401
LEAF_NODE	63:19	63:19	12	&&
EXPR	63:22	63:39	12	status_detail != 1014
FIELD	63:22	63:22	13	status_detail
LEAF_NODE	63:22	63:22	14	status_detail
EQ_OPERATOR	63:36	63:36	13	!=
LEAF_NODE	63:36	63:36	14	!=
FIELD	63:39	63:39	13	1014
LEAF_NODE	63:39	63:39	14	1014
LEAF_NODE	63:43	63:43	11	)
LEAF_NODE	63:45	63:45	10	||
EXPR	63:48	63:56	10	code == 607
FIELD	63:48	63:48	11	code
LEAF_NODE	63:48	63:48	12	code
EQ_OPERATOR	63:53	63:53	11	==
LEAF_NODE	63:53	63:53	12	==
FIELD	63:56	63:56	11	607
LEAF_NODE	63:56	63:56	12	607
LEAF_NODE	63:59	63:59	7	)
STATEMENTS	64:3	64:3	7	
LEAF_NODE	64:3	64:3	8	purple_connection_error_reason
LEAF_NODE	64:33	64:33	6	(
LEAF_NODE	64:34	64:34	6	gc
LEAF_NODE	64:36	64:36	6	,
LEAF_NODE	65:5	65:5	6	PURPLE_CONNECTION_ERROR_OTHER_ERROR
LEAF_NODE	65:40	65:40	6	,
LEAF_NODE	66:5	66:5	6	_
LEAF_NODE	66:6	66:6	6	(
LEAF_NODE	66:7	66:7	6	"You have been connecting and disconnecting too "
LEAF_NODE	67:7	67:7	6	"frequently. Wait ten minutes and try again. If "
LEAF_NODE	68:7	68:7	6	"you continue to try, you will need to wait even "
LEAF_NODE	69:7	69:7	6	"longer."
LEAF_NODE	69:16	69:16	6	)
LEAF_NODE	69:17	69:17	6	)
LEAF_NODE	69:18	69:18	6	;
SELECTION	70:2	70:7	6	
KEYWORD	70:2	70:2	7	else
LEAF_NODE	70:2	70:2	8	else
STATEMENTS	70:7	77:2	7	
LEAF_NODE	70:7	70:7	8	{
STATEMENTS	71:3	76:3	8	
SIMPLE_DECL	71:3	71:12	9	char * msg ;
VAR_DECL	71:3	71:9	10	char * msg
TYPE	71:3	71:8	11	char *
TYPE_NAME	71:3	71:3	12	char
LEAF_NODE	71:3	71:3	13	char
POINTER	71:8	71:8	12	*
LEAF_NODE	71:8	71:8	13	*
NAME	71:9	71:9	11	msg
LEAF_NODE	71:9	71:9	12	msg
LEAF_NODE	71:12	71:12	10	;
EXPR_STATEMENT	72:3	73:37	9	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) ) ;
EXPR	72:3	72:3	10	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
ASSIGN	72:3	72:9	11	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
LVAL	72:3	72:3	12	msg
FIELD	72:3	72:3	13	msg
LEAF_NODE	72:3	72:3	14	msg
ASSIGN_OP	72:7	72:7	12	=
LEAF_NODE	72:7	72:7	13	=
RVAL	72:9	72:9	12	generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
FUNCTION_CALL	72:9	73:36	13	generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
CALLEE	72:9	72:9	14	generate_error_message
LEAF_NODE	72:9	72:9	15	generate_error_message
LEAF_NODE	72:31	72:31	14	(
ARGUMENT	72:32	72:32	14	response_node
FIELD	72:32	72:32	15	response_node
LEAF_NODE	72:32	72:32	16	response_node
LEAF_NODE	72:45	72:45	14	,
ARGUMENT	73:5	73:5	14	get_start_oscar_session_url ( od )
FUNCTION_CALL	73:5	73:35	15	get_start_oscar_session_url ( od )
CALLEE	73:5	73:5	16	get_start_oscar_session_url
LEAF_NODE	73:5	73:5	17	get_start_oscar_session_url
LEAF_NODE	73:32	73:32	16	(
ARGUMENT	73:33	73:33	16	od
FIELD	73:33	73:33	17	od
LEAF_NODE	73:33	73:33	18	od
LEAF_NODE	73:35	73:35	16	)
LEAF_NODE	73:36	73:36	14	)
LEAF_NODE	73:37	73:37	10	;
EXPR_STATEMENT	74:3	75:46	9	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_OTHER_ERROR , msg ) ;
EXPR	74:3	74:3	10	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_OTHER_ERROR , msg )
FUNCTION_CALL	74:3	75:45	11	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_OTHER_ERROR , msg )
CALLEE	74:3	74:3	12	purple_connection_error_reason
LEAF_NODE	74:3	74:3	13	purple_connection_error_reason
LEAF_NODE	74:33	74:33	12	(
ARGUMENT	74:34	74:34	12	gc
FIELD	74:34	74:34	13	gc
LEAF_NODE	74:34	74:34	14	gc
LEAF_NODE	74:36	74:36	12	,
ARGUMENT	75:5	75:5	12	PURPLE_CONNECTION_ERROR_OTHER_ERROR
FIELD	75:5	75:5	13	PURPLE_CONNECTION_ERROR_OTHER_ERROR
LEAF_NODE	75:5	75:5	14	PURPLE_CONNECTION_ERROR_OTHER_ERROR
LEAF_NODE	75:40	75:40	12	,
ARGUMENT	75:42	75:42	12	msg
FIELD	75:42	75:42	13	msg
LEAF_NODE	75:42	75:42	14	msg
LEAF_NODE	75:45	75:45	12	)
LEAF_NODE	75:46	75:46	10	;
EXPR_STATEMENT	76:3	76:14	9	g_free ( msg ) ;
EXPR	76:3	76:3	10	g_free ( msg )
FUNCTION_CALL	76:3	76:13	11	g_free ( msg )
CALLEE	76:3	76:3	12	g_free
LEAF_NODE	76:3	76:3	13	g_free
LEAF_NODE	76:9	76:9	12	(
ARGUMENT	76:10	76:10	12	msg
FIELD	76:10	76:10	13	msg
LEAF_NODE	76:10	76:10	14	msg
LEAF_NODE	76:13	76:13	12	)
LEAF_NODE	76:14	76:14	10	;
LEAF_NODE	77:2	77:2	8	}
EXPR_STATEMENT	78:2	78:13	6	g_free ( tmp ) ;
EXPR	78:2	78:2	7	g_free ( tmp )
FUNCTION_CALL	78:2	78:12	8	g_free ( tmp )
CALLEE	78:2	78:2	9	g_free
LEAF_NODE	78:2	78:2	10	g_free
LEAF_NODE	78:8	78:8	9	(
ARGUMENT	78:9	78:9	9	tmp
FIELD	78:9	78:9	10	tmp
LEAF_NODE	78:9	78:9	11	tmp
LEAF_NODE	78:12	78:12	9	)
LEAF_NODE	78:13	78:13	7	;
EXPR_STATEMENT	79:2	79:29	6	xmlnode_free ( response_node ) ;
EXPR	79:2	79:2	7	xmlnode_free ( response_node )
FUNCTION_CALL	79:2	79:28	8	xmlnode_free ( response_node )
CALLEE	79:2	79:2	9	xmlnode_free
LEAF_NODE	79:2	79:2	10	xmlnode_free
LEAF_NODE	79:14	79:14	9	(
ARGUMENT	79:15	79:15	9	response_node
FIELD	79:15	79:15	10	response_node
LEAF_NODE	79:15	79:15	11	response_node
LEAF_NODE	79:28	79:28	9	)
LEAF_NODE	79:29	79:29	7	;
JUMP_STATEMENT	80:2	80:14	6	return FALSE ;
KEYWORD	80:2	80:2	7	return
LEAF_NODE	80:2	80:2	8	return
DESTINATION	80:9	80:9	7	FALSE
EXPR	80:9	80:9	8	FALSE
FIELD	80:9	80:9	9	FALSE
LEAF_NODE	80:9	80:9	10	FALSE
LEAF_NODE	80:14	80:14	7	;
LEAF_NODE	81:1	81:1	5	}
EXPR_STATEMENT	82:1	82:12	3	g_free ( tmp ) ;
EXPR	82:1	82:1	4	g_free ( tmp )
FUNCTION_CALL	82:1	82:11	5	g_free ( tmp )
CALLEE	82:1	82:1	6	g_free
LEAF_NODE	82:1	82:1	7	g_free
LEAF_NODE	82:7	82:7	6	(
ARGUMENT	82:8	82:8	6	tmp
FIELD	82:8	82:8	7	tmp
LEAF_NODE	82:8	82:8	8	tmp
LEAF_NODE	82:11	82:11	6	)
LEAF_NODE	82:12	82:12	4	;
SELECTION	84:1	85:1	3	
KEYWORD	84:1	84:1	4	if
LEAF_NODE	84:1	84:1	5	if
LEAF_NODE	84:4	84:4	4	(
CONDITION	84:5	84:5	4	data_node == NULL || host_node == NULL || port_node == NULL || cookie_node == NULL
EXPR	84:5	84:5	5	data_node == NULL || host_node == NULL || port_node == NULL || cookie_node == NULL
OR	84:5	84:26	6	data_node == NULL || host_node == NULL || port_node == NULL || cookie_node == NULL
EXPR	84:5	84:18	7	data_node == NULL
FIELD	84:5	84:5	8	data_node
LEAF_NODE	84:5	84:5	9	data_node
EQ_OPERATOR	84:15	84:15	8	==
LEAF_NODE	84:15	84:15	9	==
FIELD	84:18	84:18	8	NULL
LEAF_NODE	84:18	84:18	9	NULL
LEAF_NODE	84:23	84:23	7	||
EXPR	84:26	84:26	7	host_node == NULL || port_node == NULL || cookie_node == NULL
OR	84:26	84:47	8	host_node == NULL || port_node == NULL || cookie_node == NULL
EXPR	84:26	84:39	9	host_node == NULL
FIELD	84:26	84:26	10	host_node
LEAF_NODE	84:26	84:26	11	host_node
EQ_OPERATOR	84:36	84:36	10	==
LEAF_NODE	84:36	84:36	11	==
FIELD	84:39	84:39	10	NULL
LEAF_NODE	84:39	84:39	11	NULL
LEAF_NODE	84:44	84:44	9	||
EXPR	84:47	84:47	9	port_node == NULL || cookie_node == NULL
OR	84:47	84:68	10	port_node == NULL || cookie_node == NULL
EXPR	84:47	84:60	11	port_node == NULL
FIELD	84:47	84:47	12	port_node
LEAF_NODE	84:47	84:47	13	port_node
EQ_OPERATOR	84:57	84:57	12	==
LEAF_NODE	84:57	84:57	13	==
FIELD	84:60	84:60	12	NULL
LEAF_NODE	84:60	84:60	13	NULL
LEAF_NODE	84:65	84:65	11	||
EXPR	84:68	84:83	11	cookie_node == NULL
FIELD	84:68	84:68	12	cookie_node
LEAF_NODE	84:68	84:68	13	cookie_node
EQ_OPERATOR	84:80	84:80	12	==
LEAF_NODE	84:80	84:80	13	==
FIELD	84:83	84:83	12	NULL
LEAF_NODE	84:83	84:83	13	NULL
LEAF_NODE	84:87	84:87	4	)
STATEMENTS	85:1	96:1	4	
LEAF_NODE	85:1	85:1	5	{
STATEMENTS	86:2	95:2	5	
SIMPLE_DECL	86:2	86:11	6	char * msg ;
VAR_DECL	86:2	86:8	7	char * msg
TYPE	86:2	86:7	8	char *
TYPE_NAME	86:2	86:2	9	char
LEAF_NODE	86:2	86:2	10	char
POINTER	86:7	86:7	9	*
LEAF_NODE	86:7	86:7	10	*
NAME	86:8	86:8	8	msg
LEAF_NODE	86:8	86:8	9	msg
LEAF_NODE	86:11	86:11	7	;
LEAF_NODE	87:2	87:2	6	purple_debug_error
LEAF_NODE	87:20	87:20	6	(
LEAF_NODE	87:21	87:21	6	"oscar"
LEAF_NODE	87:28	87:28	6	,
LEAF_NODE	87:30	87:30	6	"startOSCARSession response was missing "
LEAF_NODE	88:4	88:4	6	"something: %s\n"
LEAF_NODE	88:21	88:21	6	,
LEAF_NODE	88:23	88:23	6	response
LEAF_NODE	88:31	88:31	6	)
LEAF_NODE	88:32	88:32	6	;
EXPR_STATEMENT	89:2	90:36	6	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) ) ;
EXPR	89:2	89:2	7	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
ASSIGN	89:2	89:8	8	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
LVAL	89:2	89:2	9	msg
FIELD	89:2	89:2	10	msg
LEAF_NODE	89:2	89:2	11	msg
ASSIGN_OP	89:6	89:6	9	=
LEAF_NODE	89:6	89:6	10	=
RVAL	89:8	89:8	9	generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
FUNCTION_CALL	89:8	90:35	10	generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
CALLEE	89:8	89:8	11	generate_error_message
LEAF_NODE	89:8	89:8	12	generate_error_message
LEAF_NODE	89:30	89:30	11	(
ARGUMENT	89:31	89:31	11	response_node
FIELD	89:31	89:31	12	response_node
LEAF_NODE	89:31	89:31	13	response_node
LEAF_NODE	89:44	89:44	11	,
ARGUMENT	90:4	90:4	11	get_start_oscar_session_url ( od )
FUNCTION_CALL	90:4	90:34	12	get_start_oscar_session_url ( od )
CALLEE	90:4	90:4	13	get_start_oscar_session_url
LEAF_NODE	90:4	90:4	14	get_start_oscar_session_url
LEAF_NODE	90:31	90:31	13	(
ARGUMENT	90:32	90:32	13	od
FIELD	90:32	90:32	14	od
LEAF_NODE	90:32	90:32	15	od
LEAF_NODE	90:34	90:34	13	)
LEAF_NODE	90:35	90:35	11	)
LEAF_NODE	90:36	90:36	7	;
EXPR_STATEMENT	91:2	92:47	6	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg ) ;
EXPR	91:2	91:2	7	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg )
FUNCTION_CALL	91:2	92:46	8	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg )
CALLEE	91:2	91:2	9	purple_connection_error_reason
LEAF_NODE	91:2	91:2	10	purple_connection_error_reason
LEAF_NODE	91:32	91:32	9	(
ARGUMENT	91:33	91:33	9	gc
FIELD	91:33	91:33	10	gc
LEAF_NODE	91:33	91:33	11	gc
LEAF_NODE	91:35	91:35	9	,
ARGUMENT	92:4	92:4	9	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
FIELD	92:4	92:4	10	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	92:4	92:4	11	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	92:41	92:41	9	,
ARGUMENT	92:43	92:43	9	msg
FIELD	92:43	92:43	10	msg
LEAF_NODE	92:43	92:43	11	msg
LEAF_NODE	92:46	92:46	9	)
LEAF_NODE	92:47	92:47	7	;
EXPR_STATEMENT	93:2	93:13	6	g_free ( msg ) ;
EXPR	93:2	93:2	7	g_free ( msg )
FUNCTION_CALL	93:2	93:12	8	g_free ( msg )
CALLEE	93:2	93:2	9	g_free
LEAF_NODE	93:2	93:2	10	g_free
LEAF_NODE	93:8	93:8	9	(
ARGUMENT	93:9	93:9	9	msg
FIELD	93:9	93:9	10	msg
LEAF_NODE	93:9	93:9	11	msg
LEAF_NODE	93:12	93:12	9	)
LEAF_NODE	93:13	93:13	7	;
EXPR_STATEMENT	94:2	94:29	6	xmlnode_free ( response_node ) ;
EXPR	94:2	94:2	7	xmlnode_free ( response_node )
FUNCTION_CALL	94:2	94:28	8	xmlnode_free ( response_node )
CALLEE	94:2	94:2	9	xmlnode_free
LEAF_NODE	94:2	94:2	10	xmlnode_free
LEAF_NODE	94:14	94:14	9	(
ARGUMENT	94:15	94:15	9	response_node
FIELD	94:15	94:15	10	response_node
LEAF_NODE	94:15	94:15	11	response_node
LEAF_NODE	94:28	94:28	9	)
LEAF_NODE	94:29	94:29	7	;
JUMP_STATEMENT	95:2	95:14	6	return FALSE ;
KEYWORD	95:2	95:2	7	return
LEAF_NODE	95:2	95:2	8	return
DESTINATION	95:9	95:9	7	FALSE
EXPR	95:9	95:9	8	FALSE
FIELD	95:9	95:9	9	FALSE
LEAF_NODE	95:9	95:9	10	FALSE
LEAF_NODE	95:14	95:14	7	;
LEAF_NODE	96:1	96:1	5	}
SELECTION	97:1	97:56	3	
KEYWORD	97:1	97:1	4	if
LEAF_NODE	97:1	97:1	5	if
LEAF_NODE	97:4	97:4	4	(
CONDITION	97:5	97:5	4	strcmp ( encryption_type , OSCAR_NO_ENCRYPTION ) != 0
EXPR	97:5	97:53	5	strcmp ( encryption_type , OSCAR_NO_ENCRYPTION ) != 0
FUNCTION_CALL	97:5	97:48	6	strcmp ( encryption_type , OSCAR_NO_ENCRYPTION )
CALLEE	97:5	97:5	7	strcmp
LEAF_NODE	97:5	97:5	8	strcmp
LEAF_NODE	97:11	97:11	7	(
ARGUMENT	97:12	97:12	7	encryption_type
FIELD	97:12	97:12	8	encryption_type
LEAF_NODE	97:12	97:12	9	encryption_type
LEAF_NODE	97:27	97:27	7	,
ARGUMENT	97:29	97:29	7	OSCAR_NO_ENCRYPTION
FIELD	97:29	97:29	8	OSCAR_NO_ENCRYPTION
LEAF_NODE	97:29	97:29	9	OSCAR_NO_ENCRYPTION
LEAF_NODE	97:48	97:48	7	)
EQ_OPERATOR	97:50	97:50	6	!=
LEAF_NODE	97:50	97:50	7	!=
FIELD	97:53	97:53	6	0
LEAF_NODE	97:53	97:53	7	0
LEAF_NODE	97:54	97:54	4	)
STATEMENTS	97:56	114:1	4	
LEAF_NODE	97:56	97:56	5	{
STATEMENTS	98:2	101:4	5	
EXPR_STATEMENT	98:2	98:56	6	tls_node = xmlnode_get_child ( data_node , "tlsCertName" ) ;
EXPR	98:2	98:2	7	tls_node = xmlnode_get_child ( data_node , "tlsCertName" )
ASSIGN	98:2	98:13	8	tls_node = xmlnode_get_child ( data_node , "tlsCertName" )
LVAL	98:2	98:2	9	tls_node
FIELD	98:2	98:2	10	tls_node
LEAF_NODE	98:2	98:2	11	tls_node
ASSIGN_OP	98:11	98:11	9	=
LEAF_NODE	98:11	98:11	10	=
RVAL	98:13	98:13	9	xmlnode_get_child ( data_node , "tlsCertName" )
FUNCTION_CALL	98:13	98:55	10	xmlnode_get_child ( data_node , "tlsCertName" )
CALLEE	98:13	98:13	11	xmlnode_get_child
LEAF_NODE	98:13	98:13	12	xmlnode_get_child
LEAF_NODE	98:30	98:30	11	(
ARGUMENT	98:31	98:31	11	data_node
FIELD	98:31	98:31	12	data_node
LEAF_NODE	98:31	98:31	13	data_node
LEAF_NODE	98:40	98:40	11	,
ARGUMENT	98:42	98:42	11	"tlsCertName"
FIELD	98:42	98:42	12	"tlsCertName"
LEAF_NODE	98:42	98:42	13	"tlsCertName"
LEAF_NODE	98:55	98:55	11	)
LEAF_NODE	98:56	98:56	7	;
SELECTION	99:2	99:24	6	
KEYWORD	99:2	99:2	7	if
LEAF_NODE	99:2	99:2	8	if
LEAF_NODE	99:5	99:5	7	(
CONDITION	99:6	99:6	7	tls_node != NULL
EXPR	99:6	99:18	8	tls_node != NULL
FIELD	99:6	99:6	9	tls_node
LEAF_NODE	99:6	99:6	10	tls_node
EQ_OPERATOR	99:15	99:15	9	!=
LEAF_NODE	99:15	99:15	10	!=
FIELD	99:18	99:18	9	NULL
LEAF_NODE	99:18	99:18	10	NULL
LEAF_NODE	99:22	99:22	7	)
STATEMENTS	99:24	101:2	7	
LEAF_NODE	99:24	99:24	8	{
STATEMENTS	100:3	100:3	8	
EXPR_STATEMENT	100:3	100:55	9	* tls_certname = xmlnode_get_data_unescaped ( tls_node ) ;
EXPR	100:3	100:3	10	* tls_certname = xmlnode_get_data_unescaped ( tls_node )
ASSIGN	100:3	100:19	11	* tls_certname = xmlnode_get_data_unescaped ( tls_node )
LVAL	100:3	100:3	12	* tls_certname
UNARY_EXPR	100:3	100:4	13	* tls_certname
UNARY_OPERATOR	100:3	100:3	14	*
LEAF_NODE	100:3	100:3	15	*
FIELD	100:4	100:4	14	tls_certname
LEAF_NODE	100:4	100:4	15	tls_certname
ASSIGN_OP	100:17	100:17	12	=
LEAF_NODE	100:17	100:17	13	=
RVAL	100:19	100:19	12	xmlnode_get_data_unescaped ( tls_node )
FUNCTION_CALL	100:19	100:54	13	xmlnode_get_data_unescaped ( tls_node )
CALLEE	100:19	100:19	14	xmlnode_get_data_unescaped
LEAF_NODE	100:19	100:19	15	xmlnode_get_data_unescaped
LEAF_NODE	100:45	100:45	14	(
ARGUMENT	100:46	100:46	14	tls_node
FIELD	100:46	100:46	15	tls_node
LEAF_NODE	100:46	100:46	16	tls_node
LEAF_NODE	100:54	100:54	14	)
LEAF_NODE	100:55	100:55	10	;
LEAF_NODE	101:2	101:2	8	}
SELECTION	101:4	101:9	6	
KEYWORD	101:4	101:4	7	else
LEAF_NODE	101:4	101:4	8	else
STATEMENTS	101:9	113:2	7	
LEAF_NODE	101:9	101:9	8	{
STATEMENTS	102:3	104:5	8	
SELECTION	102:3	102:69	9	
KEYWORD	102:3	102:3	10	if
LEAF_NODE	102:3	102:3	11	if
LEAF_NODE	102:6	102:6	10	(
CONDITION	102:7	102:7	10	strcmp ( encryption_type , OSCAR_OPPORTUNISTIC_ENCRYPTION ) == 0
EXPR	102:7	102:66	11	strcmp ( encryption_type , OSCAR_OPPORTUNISTIC_ENCRYPTION ) == 0
FUNCTION_CALL	102:7	102:61	12	strcmp ( encryption_type , OSCAR_OPPORTUNISTIC_ENCRYPTION )
CALLEE	102:7	102:7	13	strcmp
LEAF_NODE	102:7	102:7	14	strcmp
LEAF_NODE	102:13	102:13	13	(
ARGUMENT	102:14	102:14	13	encryption_type
FIELD	102:14	102:14	14	encryption_type
LEAF_NODE	102:14	102:14	15	encryption_type
LEAF_NODE	102:29	102:29	13	,
ARGUMENT	102:31	102:31	13	OSCAR_OPPORTUNISTIC_ENCRYPTION
FIELD	102:31	102:31	14	OSCAR_OPPORTUNISTIC_ENCRYPTION
LEAF_NODE	102:31	102:31	15	OSCAR_OPPORTUNISTIC_ENCRYPTION
LEAF_NODE	102:61	102:61	13	)
EQ_OPERATOR	102:63	102:63	12	==
LEAF_NODE	102:63	102:63	13	==
FIELD	102:66	102:66	12	0
LEAF_NODE	102:66	102:66	13	0
LEAF_NODE	102:67	102:67	10	)
STATEMENTS	102:69	104:3	10	
LEAF_NODE	102:69	102:69	11	{
STATEMENTS	103:4	103:4	11	
EXPR_STATEMENT	103:4	103:107	12	purple_debug_warning ( "oscar" , "We haven't received a tlsCertName to use. We will not do SSL to BOS.\n" ) ;
EXPR	103:4	103:4	13	purple_debug_warning ( "oscar" , "We haven't received a tlsCertName to use. We will not do SSL to BOS.\n" )
FUNCTION_CALL	103:4	103:106	14	purple_debug_warning ( "oscar" , "We haven't received a tlsCertName to use. We will not do SSL to BOS.\n" )
CALLEE	103:4	103:4	15	purple_debug_warning
LEAF_NODE	103:4	103:4	16	purple_debug_warning
LEAF_NODE	103:24	103:24	15	(
ARGUMENT	103:25	103:25	15	"oscar"
FIELD	103:25	103:25	16	"oscar"
LEAF_NODE	103:25	103:25	17	"oscar"
LEAF_NODE	103:32	103:32	15	,
ARGUMENT	103:34	103:34	15	"We haven't received a tlsCertName to use. We will not do SSL to BOS.\n"
FIELD	103:34	103:34	16	"We haven't received a tlsCertName to use. We will not do SSL to BOS.\n"
LEAF_NODE	103:34	103:34	17	"We haven't received a tlsCertName to use. We will not do SSL to BOS.\n"
LEAF_NODE	103:106	103:106	15	)
LEAF_NODE	103:107	103:107	13	;
LEAF_NODE	104:3	104:3	11	}
SELECTION	104:5	104:10	9	
KEYWORD	104:5	104:5	10	else
LEAF_NODE	104:5	104:5	11	else
STATEMENTS	104:10	112:3	10	
LEAF_NODE	104:10	104:10	11	{
STATEMENTS	105:4	111:4	11	
EXPR_STATEMENT	105:4	105:92	12	purple_debug_error ( "oscar" , "startOSCARSession was missing tlsCertName: %s\n" , response ) ;
EXPR	105:4	105:4	13	purple_debug_error ( "oscar" , "startOSCARSession was missing tlsCertName: %s\n" , response )
FUNCTION_CALL	105:4	105:91	14	purple_debug_error ( "oscar" , "startOSCARSession was missing tlsCertName: %s\n" , response )
CALLEE	105:4	105:4	15	purple_debug_error
LEAF_NODE	105:4	105:4	16	purple_debug_error
LEAF_NODE	105:22	105:22	15	(
ARGUMENT	105:23	105:23	15	"oscar"
FIELD	105:23	105:23	16	"oscar"
LEAF_NODE	105:23	105:23	17	"oscar"
LEAF_NODE	105:30	105:30	15	,
ARGUMENT	105:32	105:32	15	"startOSCARSession was missing tlsCertName: %s\n"
FIELD	105:32	105:32	16	"startOSCARSession was missing tlsCertName: %s\n"
LEAF_NODE	105:32	105:32	17	"startOSCARSession was missing tlsCertName: %s\n"
LEAF_NODE	105:81	105:81	15	,
ARGUMENT	105:83	105:83	15	response
FIELD	105:83	105:83	16	response
LEAF_NODE	105:83	105:83	17	response
LEAF_NODE	105:91	105:91	15	)
LEAF_NODE	105:92	105:92	13	;
EXPR_STATEMENT	106:4	109:103	12	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NO_SSL_SUPPORT , _ ( "You required encryption in your account settings, but one of the servers doesn't support it." ) ) ;
EXPR	106:4	106:4	13	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NO_SSL_SUPPORT , _ ( "You required encryption in your account settings, but one of the servers doesn't support it." ) )
FUNCTION_CALL	106:4	109:102	14	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NO_SSL_SUPPORT , _ ( "You required encryption in your account settings, but one of the servers doesn't support it." ) )
CALLEE	106:4	106:4	15	purple_connection_error_reason
LEAF_NODE	106:4	106:4	16	purple_connection_error_reason
LEAF_NODE	106:34	106:34	15	(
ARGUMENT	107:5	107:5	15	gc
FIELD	107:5	107:5	16	gc
LEAF_NODE	107:5	107:5	17	gc
LEAF_NODE	107:7	107:7	15	,
ARGUMENT	108:5	108:5	15	PURPLE_CONNECTION_ERROR_NO_SSL_SUPPORT
FIELD	108:5	108:5	16	PURPLE_CONNECTION_ERROR_NO_SSL_SUPPORT
LEAF_NODE	108:5	108:5	17	PURPLE_CONNECTION_ERROR_NO_SSL_SUPPORT
LEAF_NODE	108:43	108:43	15	,
ARGUMENT	109:5	109:5	15	_ ( "You required encryption in your account settings, but one of the servers doesn't support it." )
FUNCTION_CALL	109:5	109:101	16	_ ( "You required encryption in your account settings, but one of the servers doesn't support it." )
CALLEE	109:5	109:5	17	_
LEAF_NODE	109:5	109:5	18	_
LEAF_NODE	109:6	109:6	17	(
ARGUMENT	109:7	109:7	17	"You required encryption in your account settings, but one of the servers doesn't support it."
FIELD	109:7	109:7	18	"You required encryption in your account settings, but one of the servers doesn't support it."
LEAF_NODE	109:7	109:7	19	"You required encryption in your account settings, but one of the servers doesn't support it."
LEAF_NODE	109:101	109:101	17	)
LEAF_NODE	109:102	109:102	15	)
LEAF_NODE	109:103	109:103	13	;
EXPR_STATEMENT	110:4	110:31	12	xmlnode_free ( response_node ) ;
EXPR	110:4	110:4	13	xmlnode_free ( response_node )
FUNCTION_CALL	110:4	110:30	14	xmlnode_free ( response_node )
CALLEE	110:4	110:4	15	xmlnode_free
LEAF_NODE	110:4	110:4	16	xmlnode_free
LEAF_NODE	110:16	110:16	15	(
ARGUMENT	110:17	110:17	15	response_node
FIELD	110:17	110:17	16	response_node
LEAF_NODE	110:17	110:17	17	response_node
LEAF_NODE	110:30	110:30	15	)
LEAF_NODE	110:31	110:31	13	;
JUMP_STATEMENT	111:4	111:16	12	return FALSE ;
KEYWORD	111:4	111:4	13	return
LEAF_NODE	111:4	111:4	14	return
DESTINATION	111:11	111:11	13	FALSE
EXPR	111:11	111:11	14	FALSE
FIELD	111:11	111:11	15	FALSE
LEAF_NODE	111:11	111:11	16	FALSE
LEAF_NODE	111:16	111:16	13	;
LEAF_NODE	112:3	112:3	11	}
LEAF_NODE	113:2	113:2	8	}
LEAF_NODE	114:1	114:1	5	}
EXPR_STATEMENT	116:1	116:46	3	* host = xmlnode_get_data_unescaped ( host_node ) ;
EXPR	116:1	116:1	4	* host = xmlnode_get_data_unescaped ( host_node )
ASSIGN	116:1	116:9	5	* host = xmlnode_get_data_unescaped ( host_node )
LVAL	116:1	116:1	6	* host
UNARY_EXPR	116:1	116:2	7	* host
UNARY_OPERATOR	116:1	116:1	8	*
LEAF_NODE	116:1	116:1	9	*
FIELD	116:2	116:2	8	host
LEAF_NODE	116:2	116:2	9	host
ASSIGN_OP	116:7	116:7	6	=
LEAF_NODE	116:7	116:7	7	=
RVAL	116:9	116:9	6	xmlnode_get_data_unescaped ( host_node )
FUNCTION_CALL	116:9	116:45	7	xmlnode_get_data_unescaped ( host_node )
CALLEE	116:9	116:9	8	xmlnode_get_data_unescaped
LEAF_NODE	116:9	116:9	9	xmlnode_get_data_unescaped
LEAF_NODE	116:35	116:35	8	(
ARGUMENT	116:36	116:36	8	host_node
FIELD	116:36	116:36	9	host_node
LEAF_NODE	116:36	116:36	10	host_node
LEAF_NODE	116:45	116:45	8	)
LEAF_NODE	116:46	116:46	4	;
EXPR_STATEMENT	117:1	117:44	3	tmp = xmlnode_get_data_unescaped ( port_node ) ;
EXPR	117:1	117:1	4	tmp = xmlnode_get_data_unescaped ( port_node )
ASSIGN	117:1	117:7	5	tmp = xmlnode_get_data_unescaped ( port_node )
LVAL	117:1	117:1	6	tmp
FIELD	117:1	117:1	7	tmp
LEAF_NODE	117:1	117:1	8	tmp
ASSIGN_OP	117:5	117:5	6	=
LEAF_NODE	117:5	117:5	7	=
RVAL	117:7	117:7	6	xmlnode_get_data_unescaped ( port_node )
FUNCTION_CALL	117:7	117:43	7	xmlnode_get_data_unescaped ( port_node )
CALLEE	117:7	117:7	8	xmlnode_get_data_unescaped
LEAF_NODE	117:7	117:7	9	xmlnode_get_data_unescaped
LEAF_NODE	117:33	117:33	8	(
ARGUMENT	117:34	117:34	8	port_node
FIELD	117:34	117:34	9	port_node
LEAF_NODE	117:34	117:34	10	port_node
LEAF_NODE	117:43	117:43	8	)
LEAF_NODE	117:44	117:44	4	;
EXPR_STATEMENT	118:1	118:50	3	* cookie = xmlnode_get_data_unescaped ( cookie_node ) ;
EXPR	118:1	118:1	4	* cookie = xmlnode_get_data_unescaped ( cookie_node )
ASSIGN	118:1	118:11	5	* cookie = xmlnode_get_data_unescaped ( cookie_node )
LVAL	118:1	118:1	6	* cookie
UNARY_EXPR	118:1	118:2	7	* cookie
UNARY_OPERATOR	118:1	118:1	8	*
LEAF_NODE	118:1	118:1	9	*
FIELD	118:2	118:2	8	cookie
LEAF_NODE	118:2	118:2	9	cookie
ASSIGN_OP	118:9	118:9	6	=
LEAF_NODE	118:9	118:9	7	=
RVAL	118:11	118:11	6	xmlnode_get_data_unescaped ( cookie_node )
FUNCTION_CALL	118:11	118:49	7	xmlnode_get_data_unescaped ( cookie_node )
CALLEE	118:11	118:11	8	xmlnode_get_data_unescaped
LEAF_NODE	118:11	118:11	9	xmlnode_get_data_unescaped
LEAF_NODE	118:37	118:37	8	(
ARGUMENT	118:38	118:38	8	cookie_node
FIELD	118:38	118:38	9	cookie_node
LEAF_NODE	118:38	118:38	10	cookie_node
LEAF_NODE	118:49	118:49	8	)
LEAF_NODE	118:50	118:50	4	;
SELECTION	119:1	120:1	3	
KEYWORD	119:1	119:1	4	if
LEAF_NODE	119:1	119:1	5	if
LEAF_NODE	119:4	119:4	4	(
CONDITION	119:5	119:5	4	* host == NULL || * * host == '\0' || tmp == NULL || * tmp == '\0' || * cookie == NULL || * * cookie == '\0'
EXPR	119:5	119:5	5	* host == NULL || * * host == '\0' || tmp == NULL || * tmp == '\0' || * cookie == NULL || * * cookie == '\0'
OR	119:5	119:22	6	* host == NULL || * * host == '\0' || tmp == NULL || * tmp == '\0' || * cookie == NULL || * * cookie == '\0'
EXPR	119:5	119:14	7	* host == NULL
UNARY_EXPR	119:5	119:6	8	* host
UNARY_OPERATOR	119:5	119:5	9	*
LEAF_NODE	119:5	119:5	10	*
FIELD	119:6	119:6	9	host
LEAF_NODE	119:6	119:6	10	host
EQ_OPERATOR	119:11	119:11	8	==
LEAF_NODE	119:11	119:11	9	==
FIELD	119:14	119:14	8	NULL
LEAF_NODE	119:14	119:14	9	NULL
LEAF_NODE	119:19	119:19	7	||
EXPR	119:22	119:22	7	* * host == '\0' || tmp == NULL || * tmp == '\0' || * cookie == NULL || * * cookie == '\0'
OR	119:22	119:40	8	* * host == '\0' || tmp == NULL || * tmp == '\0' || * cookie == NULL || * * cookie == '\0'
EXPR	119:22	119:32	9	* * host == '\0'
UNARY_EXPR	119:22	119:24	10	* * host
UNARY_OPERATOR	119:22	119:22	11	*
LEAF_NODE	119:22	119:22	12	*
UNARY_OPERATOR	119:23	119:23	11	*
LEAF_NODE	119:23	119:23	12	*
FIELD	119:24	119:24	11	host
LEAF_NODE	119:24	119:24	12	host
EQ_OPERATOR	119:29	119:29	10	==
LEAF_NODE	119:29	119:29	11	==
FIELD	119:32	119:32	10	'\0'
LEAF_NODE	119:32	119:32	11	'\0'
LEAF_NODE	119:37	119:37	9	||
EXPR	119:40	119:40	9	tmp == NULL || * tmp == '\0' || * cookie == NULL || * * cookie == '\0'
OR	119:40	119:55	10	tmp == NULL || * tmp == '\0' || * cookie == NULL || * * cookie == '\0'
EXPR	119:40	119:47	11	tmp == NULL
FIELD	119:40	119:40	12	tmp
LEAF_NODE	119:40	119:40	13	tmp
EQ_OPERATOR	119:44	119:44	12	==
LEAF_NODE	119:44	119:44	13	==
FIELD	119:47	119:47	12	NULL
LEAF_NODE	119:47	119:47	13	NULL
LEAF_NODE	119:52	119:52	11	||
EXPR	119:55	119:55	11	* tmp == '\0' || * cookie == NULL || * * cookie == '\0'
OR	119:55	119:71	12	* tmp == '\0' || * cookie == NULL || * * cookie == '\0'
EXPR	119:55	119:63	13	* tmp == '\0'
UNARY_EXPR	119:55	119:56	14	* tmp
UNARY_OPERATOR	119:55	119:55	15	*
LEAF_NODE	119:55	119:55	16	*
FIELD	119:56	119:56	15	tmp
LEAF_NODE	119:56	119:56	16	tmp
EQ_OPERATOR	119:60	119:60	14	==
LEAF_NODE	119:60	119:60	15	==
FIELD	119:63	119:63	14	'\0'
LEAF_NODE	119:63	119:63	15	'\0'
LEAF_NODE	119:68	119:68	13	||
EXPR	119:71	119:71	13	* cookie == NULL || * * cookie == '\0'
OR	119:71	119:90	14	* cookie == NULL || * * cookie == '\0'
EXPR	119:71	119:82	15	* cookie == NULL
UNARY_EXPR	119:71	119:72	16	* cookie
UNARY_OPERATOR	119:71	119:71	17	*
LEAF_NODE	119:71	119:71	18	*
FIELD	119:72	119:72	17	cookie
LEAF_NODE	119:72	119:72	18	cookie
EQ_OPERATOR	119:79	119:79	16	==
LEAF_NODE	119:79	119:79	17	==
FIELD	119:82	119:82	16	NULL
LEAF_NODE	119:82	119:82	17	NULL
LEAF_NODE	119:87	119:87	15	||
EXPR	119:90	119:102	15	* * cookie == '\0'
UNARY_EXPR	119:90	119:92	16	* * cookie
UNARY_OPERATOR	119:90	119:90	17	*
LEAF_NODE	119:90	119:90	18	*
UNARY_OPERATOR	119:91	119:91	17	*
LEAF_NODE	119:91	119:91	18	*
FIELD	119:92	119:92	17	cookie
LEAF_NODE	119:92	119:92	18	cookie
EQ_OPERATOR	119:99	119:99	16	==
LEAF_NODE	119:99	119:99	17	==
FIELD	119:102	119:102	16	'\0'
LEAF_NODE	119:102	119:102	17	'\0'
LEAF_NODE	119:106	119:106	4	)
STATEMENTS	120:1	134:1	4	
LEAF_NODE	120:1	120:1	5	{
STATEMENTS	121:2	133:2	5	
SIMPLE_DECL	121:2	121:11	6	char * msg ;
VAR_DECL	121:2	121:8	7	char * msg
TYPE	121:2	121:7	8	char *
TYPE_NAME	121:2	121:2	9	char
LEAF_NODE	121:2	121:2	10	char
POINTER	121:7	121:7	9	*
LEAF_NODE	121:7	121:7	10	*
NAME	121:8	121:8	8	msg
LEAF_NODE	121:8	121:8	9	msg
LEAF_NODE	121:11	121:11	7	;
LEAF_NODE	122:2	122:2	6	purple_debug_error
LEAF_NODE	122:20	122:20	6	(
LEAF_NODE	122:21	122:21	6	"oscar"
LEAF_NODE	122:28	122:28	6	,
LEAF_NODE	122:30	122:30	6	"startOSCARSession response was missing "
LEAF_NODE	123:4	123:4	6	"something: %s\n"
LEAF_NODE	123:21	123:21	6	,
LEAF_NODE	123:23	123:23	6	response
LEAF_NODE	123:31	123:31	6	)
LEAF_NODE	123:32	123:32	6	;
EXPR_STATEMENT	124:2	125:36	6	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) ) ;
EXPR	124:2	124:2	7	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
ASSIGN	124:2	124:8	8	msg = generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
LVAL	124:2	124:2	9	msg
FIELD	124:2	124:2	10	msg
LEAF_NODE	124:2	124:2	11	msg
ASSIGN_OP	124:6	124:6	9	=
LEAF_NODE	124:6	124:6	10	=
RVAL	124:8	124:8	9	generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
FUNCTION_CALL	124:8	125:35	10	generate_error_message ( response_node , get_start_oscar_session_url ( od ) )
CALLEE	124:8	124:8	11	generate_error_message
LEAF_NODE	124:8	124:8	12	generate_error_message
LEAF_NODE	124:30	124:30	11	(
ARGUMENT	124:31	124:31	11	response_node
FIELD	124:31	124:31	12	response_node
LEAF_NODE	124:31	124:31	13	response_node
LEAF_NODE	124:44	124:44	11	,
ARGUMENT	125:4	125:4	11	get_start_oscar_session_url ( od )
FUNCTION_CALL	125:4	125:34	12	get_start_oscar_session_url ( od )
CALLEE	125:4	125:4	13	get_start_oscar_session_url
LEAF_NODE	125:4	125:4	14	get_start_oscar_session_url
LEAF_NODE	125:31	125:31	13	(
ARGUMENT	125:32	125:32	13	od
FIELD	125:32	125:32	14	od
LEAF_NODE	125:32	125:32	15	od
LEAF_NODE	125:34	125:34	13	)
LEAF_NODE	125:35	125:35	11	)
LEAF_NODE	125:36	125:36	7	;
EXPR_STATEMENT	126:2	127:47	6	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg ) ;
EXPR	126:2	126:2	7	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg )
FUNCTION_CALL	126:2	127:46	8	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , msg )
CALLEE	126:2	126:2	9	purple_connection_error_reason
LEAF_NODE	126:2	126:2	10	purple_connection_error_reason
LEAF_NODE	126:32	126:32	9	(
ARGUMENT	126:33	126:33	9	gc
FIELD	126:33	126:33	10	gc
LEAF_NODE	126:33	126:33	11	gc
LEAF_NODE	126:35	126:35	9	,
ARGUMENT	127:4	127:4	9	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
FIELD	127:4	127:4	10	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	127:4	127:4	11	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	127:41	127:41	9	,
ARGUMENT	127:43	127:43	9	msg
FIELD	127:43	127:43	10	msg
LEAF_NODE	127:43	127:43	11	msg
LEAF_NODE	127:46	127:46	9	)
LEAF_NODE	127:47	127:47	7	;
EXPR_STATEMENT	128:2	128:13	6	g_free ( msg ) ;
EXPR	128:2	128:2	7	g_free ( msg )
FUNCTION_CALL	128:2	128:12	8	g_free ( msg )
CALLEE	128:2	128:2	9	g_free
LEAF_NODE	128:2	128:2	10	g_free
LEAF_NODE	128:8	128:8	9	(
ARGUMENT	128:9	128:9	9	msg
FIELD	128:9	128:9	10	msg
LEAF_NODE	128:9	128:9	11	msg
LEAF_NODE	128:12	128:12	9	)
LEAF_NODE	128:13	128:13	7	;
EXPR_STATEMENT	129:2	129:15	6	g_free ( * host ) ;
EXPR	129:2	129:2	7	g_free ( * host )
FUNCTION_CALL	129:2	129:14	8	g_free ( * host )
CALLEE	129:2	129:2	9	g_free
LEAF_NODE	129:2	129:2	10	g_free
LEAF_NODE	129:8	129:8	9	(
ARGUMENT	129:9	129:9	9	* host
UNARY_EXPR	129:9	129:10	10	* host
UNARY_OPERATOR	129:9	129:9	11	*
LEAF_NODE	129:9	129:9	12	*
FIELD	129:10	129:10	11	host
LEAF_NODE	129:10	129:10	12	host
LEAF_NODE	129:14	129:14	9	)
LEAF_NODE	129:15	129:15	7	;
EXPR_STATEMENT	130:2	130:13	6	g_free ( tmp ) ;
EXPR	130:2	130:2	7	g_free ( tmp )
FUNCTION_CALL	130:2	130:12	8	g_free ( tmp )
CALLEE	130:2	130:2	9	g_free
LEAF_NODE	130:2	130:2	10	g_free
LEAF_NODE	130:8	130:8	9	(
ARGUMENT	130:9	130:9	9	tmp
FIELD	130:9	130:9	10	tmp
LEAF_NODE	130:9	130:9	11	tmp
LEAF_NODE	130:12	130:12	9	)
LEAF_NODE	130:13	130:13	7	;
EXPR_STATEMENT	131:2	131:17	6	g_free ( * cookie ) ;
EXPR	131:2	131:2	7	g_free ( * cookie )
FUNCTION_CALL	131:2	131:16	8	g_free ( * cookie )
CALLEE	131:2	131:2	9	g_free
LEAF_NODE	131:2	131:2	10	g_free
LEAF_NODE	131:8	131:8	9	(
ARGUMENT	131:9	131:9	9	* cookie
UNARY_EXPR	131:9	131:10	10	* cookie
UNARY_OPERATOR	131:9	131:9	11	*
LEAF_NODE	131:9	131:9	12	*
FIELD	131:10	131:10	11	cookie
LEAF_NODE	131:10	131:10	12	cookie
LEAF_NODE	131:16	131:16	9	)
LEAF_NODE	131:17	131:17	7	;
EXPR_STATEMENT	132:2	132:29	6	xmlnode_free ( response_node ) ;
EXPR	132:2	132:2	7	xmlnode_free ( response_node )
FUNCTION_CALL	132:2	132:28	8	xmlnode_free ( response_node )
CALLEE	132:2	132:2	9	xmlnode_free
LEAF_NODE	132:2	132:2	10	xmlnode_free
LEAF_NODE	132:14	132:14	9	(
ARGUMENT	132:15	132:15	9	response_node
FIELD	132:15	132:15	10	response_node
LEAF_NODE	132:15	132:15	11	response_node
LEAF_NODE	132:28	132:28	9	)
LEAF_NODE	132:29	132:29	7	;
JUMP_STATEMENT	133:2	133:14	6	return FALSE ;
KEYWORD	133:2	133:2	7	return
LEAF_NODE	133:2	133:2	8	return
DESTINATION	133:9	133:9	7	FALSE
EXPR	133:9	133:9	8	FALSE
FIELD	133:9	133:9	9	FALSE
LEAF_NODE	133:9	133:9	10	FALSE
LEAF_NODE	133:14	133:14	7	;
LEAF_NODE	134:1	134:1	5	}
EXPR_STATEMENT	135:1	135:18	3	* port = atoi ( tmp ) ;
EXPR	135:1	135:1	4	* port = atoi ( tmp )
ASSIGN	135:1	135:9	5	* port = atoi ( tmp )
LVAL	135:1	135:1	6	* port
UNARY_EXPR	135:1	135:2	7	* port
UNARY_OPERATOR	135:1	135:1	8	*
LEAF_NODE	135:1	135:1	9	*
FIELD	135:2	135:2	8	port
LEAF_NODE	135:2	135:2	9	port
ASSIGN_OP	135:7	135:7	6	=
LEAF_NODE	135:7	135:7	7	=
RVAL	135:9	135:9	6	atoi ( tmp )
FUNCTION_CALL	135:9	135:17	7	atoi ( tmp )
CALLEE	135:9	135:9	8	atoi
LEAF_NODE	135:9	135:9	9	atoi
LEAF_NODE	135:13	135:13	8	(
ARGUMENT	135:14	135:14	8	tmp
FIELD	135:14	135:14	9	tmp
LEAF_NODE	135:14	135:14	10	tmp
LEAF_NODE	135:17	135:17	8	)
LEAF_NODE	135:18	135:18	4	;
EXPR_STATEMENT	136:1	136:12	3	g_free ( tmp ) ;
EXPR	136:1	136:1	4	g_free ( tmp )
FUNCTION_CALL	136:1	136:11	5	g_free ( tmp )
CALLEE	136:1	136:1	6	g_free
LEAF_NODE	136:1	136:1	7	g_free
LEAF_NODE	136:7	136:7	6	(
ARGUMENT	136:8	136:8	6	tmp
FIELD	136:8	136:8	7	tmp
LEAF_NODE	136:8	136:8	8	tmp
LEAF_NODE	136:11	136:11	6	)
LEAF_NODE	136:12	136:12	4	;
JUMP_STATEMENT	137:1	137:12	3	return TRUE ;
KEYWORD	137:1	137:1	4	return
LEAF_NODE	137:1	137:1	5	return
DESTINATION	137:8	137:8	4	TRUE
EXPR	137:8	137:8	5	TRUE
FIELD	137:8	137:8	6	TRUE
LEAF_NODE	137:8	137:8	7	TRUE
LEAF_NODE	137:12	137:12	4	;
LEAF_NODE	138:0	138:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	pounces_manager_modify_cb
LEAF_NODE	2:0	2:0	3	pounces_manager_modify_cb
PARAMETER_LIST	2:25	2:63	2	( GtkButton * button , gpointer user_data )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:37	3	GtkButton * button
TYPE	2:26	2:36	4	GtkButton *
TYPE_NAME	2:26	2:26	5	GtkButton
LEAF_NODE	2:26	2:26	6	GtkButton
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	button
LEAF_NODE	2:37	2:37	5	button
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:54	3	gpointer user_data
TYPE	2:45	2:45	4	gpointer
TYPE_NAME	2:45	2:45	5	gpointer
LEAF_NODE	2:45	2:45	6	gpointer
NAME	2:54	2:54	4	user_data
LEAF_NODE	2:54	2:54	5	user_data
LEAF_NODE	2:63	2:63	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:35	3	PouncesManager * dialog ; dialog = user_data ;
VAR_DECL	4:1	4:17	4	PouncesManager * dialog ; dialog = user_data
TYPE	4:1	4:16	5	PouncesManager *
TYPE_NAME	4:1	4:1	6	PouncesManager
LEAF_NODE	4:1	4:1	7	PouncesManager
POINTER	4:16	4:16	6	*
LEAF_NODE	4:16	4:16	7	*
NAME	4:17	4:17	5	dialog
LEAF_NODE	4:17	4:17	6	dialog
LEAF_NODE	0:0	0:0	5	;
INIT	4:17	4:17	5	dialog = user_data
ASSIGN	4:17	4:26	6	dialog = user_data
LVAL	4:17	4:17	7	dialog
NAME	4:17	4:17	8	dialog
LEAF_NODE	4:17	4:17	9	dialog
ASSIGN_OP	4:24	4:24	7	=
LEAF_NODE	4:24	4:24	8	=
RVAL	4:26	4:26	7	user_data
FIELD	4:26	4:26	8	user_data
LEAF_NODE	4:26	4:26	9	user_data
LEAF_NODE	4:35	4:35	4	;
SIMPLE_DECL	5:1	5:28	3	GtkTreeSelection * selection ;
VAR_DECL	5:1	5:19	4	GtkTreeSelection * selection
TYPE	5:1	5:18	5	GtkTreeSelection *
TYPE_NAME	5:1	5:1	6	GtkTreeSelection
LEAF_NODE	5:1	5:1	7	GtkTreeSelection
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	selection
LEAF_NODE	5:19	5:19	6	selection
LEAF_NODE	5:28	5:28	4	;
EXPR_STATEMENT	6:1	6:73	3	selection = gtk_tree_view_get_selection ( GTK_TREE_VIEW ( dialog -> treeview ) ) ;
EXPR	6:1	6:1	4	selection = gtk_tree_view_get_selection ( GTK_TREE_VIEW ( dialog -> treeview ) )
ASSIGN	6:1	6:13	5	selection = gtk_tree_view_get_selection ( GTK_TREE_VIEW ( dialog -> treeview ) )
LVAL	6:1	6:1	6	selection
FIELD	6:1	6:1	7	selection
LEAF_NODE	6:1	6:1	8	selection
ASSIGN_OP	6:11	6:11	6	=
LEAF_NODE	6:11	6:11	7	=
RVAL	6:13	6:13	6	gtk_tree_view_get_selection ( GTK_TREE_VIEW ( dialog -> treeview ) )
FUNCTION_CALL	6:13	6:72	7	gtk_tree_view_get_selection ( GTK_TREE_VIEW ( dialog -> treeview ) )
CALLEE	6:13	6:13	8	gtk_tree_view_get_selection
LEAF_NODE	6:13	6:13	9	gtk_tree_view_get_selection
LEAF_NODE	6:40	6:40	8	(
ARGUMENT	6:41	6:41	8	GTK_TREE_VIEW ( dialog -> treeview )
FUNCTION_CALL	6:41	6:71	9	GTK_TREE_VIEW ( dialog -> treeview )
CALLEE	6:41	6:41	10	GTK_TREE_VIEW
LEAF_NODE	6:41	6:41	11	GTK_TREE_VIEW
LEAF_NODE	6:54	6:54	10	(
ARGUMENT	6:55	6:55	10	dialog -> treeview
FIELD	6:55	6:63	11	dialog -> treeview
LEAF_NODE	6:55	6:55	12	dialog
LEAF_NODE	6:61	6:61	12	->
LEAF_NODE	6:63	6:63	12	treeview
LEAF_NODE	6:71	6:71	10	)
LEAF_NODE	6:72	6:72	8	)
LEAF_NODE	6:73	6:73	4	;
EXPR_STATEMENT	7:1	7:90	3	gtk_tree_selection_selected_foreach ( selection , pounces_manager_modify_foreach , user_data ) ;
EXPR	7:1	7:1	4	gtk_tree_selection_selected_foreach ( selection , pounces_manager_modify_foreach , user_data )
FUNCTION_CALL	7:1	7:89	5	gtk_tree_selection_selected_foreach ( selection , pounces_manager_modify_foreach , user_data )
CALLEE	7:1	7:1	6	gtk_tree_selection_selected_foreach
LEAF_NODE	7:1	7:1	7	gtk_tree_selection_selected_foreach
LEAF_NODE	7:36	7:36	6	(
ARGUMENT	7:37	7:37	6	selection
FIELD	7:37	7:37	7	selection
LEAF_NODE	7:37	7:37	8	selection
LEAF_NODE	7:46	7:46	6	,
ARGUMENT	7:48	7:48	6	pounces_manager_modify_foreach
FIELD	7:48	7:48	7	pounces_manager_modify_foreach
LEAF_NODE	7:48	7:48	8	pounces_manager_modify_foreach
LEAF_NODE	7:78	7:78	6	,
ARGUMENT	7:80	7:80	6	user_data
FIELD	7:80	7:80	7	user_data
LEAF_NODE	7:80	7:80	8	user_data
LEAF_NODE	7:89	7:89	6	)
LEAF_NODE	7:90	7:90	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	149:0	1	
RETURN_TYPE	2:0	2:7	2	static int
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	int
LEAF_NODE	2:7	2:7	4	int
FUNCTION_NAME	2:11	2:11	2	gg_session_handle_recv_msg_80
LEAF_NODE	2:11	2:11	3	gg_session_handle_recv_msg_80
PARAMETER_LIST	2:40	3:54	2	( struct gg_session * sess , uint32_t type , const char * packet , size_t length , struct gg_event * e )
LEAF_NODE	2:40	2:40	3	(
PARAMETER_DECL	2:41	2:60	3	struct gg_session * sess
TYPE	2:41	2:59	4	struct gg_session *
TYPE_NAME	2:41	2:48	5	struct gg_session
LEAF_NODE	2:41	2:41	6	struct
LEAF_NODE	2:48	2:48	6	gg_session
POINTER	2:59	2:59	5	*
LEAF_NODE	2:59	2:59	6	*
NAME	2:60	2:60	4	sess
LEAF_NODE	2:60	2:60	5	sess
LEAF_NODE	2:64	2:64	3	,
PARAMETER_DECL	2:66	2:75	3	uint32_t type
TYPE	2:66	2:66	4	uint32_t
TYPE_NAME	2:66	2:66	5	uint32_t
LEAF_NODE	2:66	2:66	6	uint32_t
NAME	2:75	2:75	4	type
LEAF_NODE	2:75	2:75	5	type
LEAF_NODE	2:79	2:79	3	,
PARAMETER_DECL	3:1	3:13	3	const char * packet
TYPE	3:1	3:12	4	const char *
TYPE_NAME	3:1	3:7	5	const char
LEAF_NODE	3:1	3:1	6	const
LEAF_NODE	3:7	3:7	6	char
POINTER	3:12	3:12	5	*
LEAF_NODE	3:12	3:12	6	*
NAME	3:13	3:13	4	packet
LEAF_NODE	3:13	3:13	5	packet
LEAF_NODE	3:19	3:19	3	,
PARAMETER_DECL	3:21	3:28	3	size_t length
TYPE	3:21	3:21	4	size_t
TYPE_NAME	3:21	3:21	5	size_t
LEAF_NODE	3:21	3:21	6	size_t
NAME	3:28	3:28	4	length
LEAF_NODE	3:28	3:28	5	length
LEAF_NODE	3:34	3:34	3	,
PARAMETER_DECL	3:36	3:53	3	struct gg_event * e
TYPE	3:36	3:52	4	struct gg_event *
TYPE_NAME	3:36	3:43	5	struct gg_event
LEAF_NODE	3:36	3:36	6	struct
LEAF_NODE	3:43	3:43	6	gg_event
POINTER	3:52	3:52	5	*
LEAF_NODE	3:52	3:52	6	*
NAME	3:53	3:53	4	e
LEAF_NODE	3:53	3:53	5	e
LEAF_NODE	3:54	3:54	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	148:1	2	
SIMPLE_DECL	5:1	5:69	3	const struct gg_recv_msg80 * r ; r = ( const struct gg_recv_msg80 * ) packet ;
VAR_DECL	5:1	5:29	4	const struct gg_recv_msg80 * r ; r = ( const struct gg_recv_msg80 * ) packet
TYPE	5:1	5:28	5	const struct gg_recv_msg80 *
TYPE_NAME	5:1	5:14	6	const struct gg_recv_msg80
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	struct
LEAF_NODE	5:14	5:14	7	gg_recv_msg80
POINTER	5:28	5:28	6	*
LEAF_NODE	5:28	5:28	7	*
NAME	5:29	5:29	5	r
LEAF_NODE	5:29	5:29	6	r
LEAF_NODE	0:0	0:0	5	;
INIT	5:29	5:29	5	r = ( const struct gg_recv_msg80 * ) packet
ASSIGN	5:29	5:33	6	r = ( const struct gg_recv_msg80 * ) packet
LVAL	5:29	5:29	7	r
NAME	5:29	5:29	8	r
LEAF_NODE	5:29	5:29	9	r
ASSIGN_OP	5:31	5:31	7	=
LEAF_NODE	5:31	5:31	8	=
RVAL	5:33	5:63	7	( const struct gg_recv_msg80 * ) packet
LEAF_NODE	5:33	5:33	8	(
TYPE_NAME	5:34	5:47	8	const struct gg_recv_msg80
LEAF_NODE	5:34	5:34	9	const
LEAF_NODE	5:40	5:40	9	struct
LEAF_NODE	5:47	5:47	9	gg_recv_msg80
LEAF_NODE	5:60	5:60	8	*
LEAF_NODE	5:61	5:61	8	)
FIELD	5:63	5:63	8	packet
LEAF_NODE	5:63	5:63	9	packet
LEAF_NODE	5:69	5:69	4	;
SIMPLE_DECL	6:1	6:22	3	uint32_t offset_plain ;
VAR_DECL	6:1	6:10	4	uint32_t offset_plain
TYPE	6:1	6:1	5	uint32_t
TYPE_NAME	6:1	6:1	6	uint32_t
LEAF_NODE	6:1	6:1	7	uint32_t
NAME	6:10	6:10	5	offset_plain
LEAF_NODE	6:10	6:10	6	offset_plain
LEAF_NODE	6:22	6:22	4	;
SIMPLE_DECL	7:1	7:21	3	uint32_t offset_attr ;
VAR_DECL	7:1	7:10	4	uint32_t offset_attr
TYPE	7:1	7:1	5	uint32_t
TYPE_NAME	7:1	7:1	6	uint32_t
LEAF_NODE	7:1	7:1	7	uint32_t
NAME	7:10	7:10	5	offset_attr
LEAF_NODE	7:10	7:10	6	offset_attr
LEAF_NODE	7:21	7:21	4	;
LEAF_NODE	8:1	8:1	3	gg_debug_session
LEAF_NODE	8:17	8:17	3	(
LEAF_NODE	8:18	8:18	3	sess
LEAF_NODE	8:22	8:22	3	,
LEAF_NODE	8:24	8:24	3	GG_DEBUG_FUNCTION
LEAF_NODE	8:41	8:41	3	,
LEAF_NODE	9:2	9:2	3	"** gg_handle_recv_msg80(%p, %"
LEAF_NODE	9:34	9:34	3	GG_SIZE_FMT
LEAF_NODE	9:46	9:46	3	", %p);\n"
LEAF_NODE	9:56	9:56	3	,
LEAF_NODE	10:2	10:2	3	packet
LEAF_NODE	10:8	10:8	3	,
LEAF_NODE	10:10	10:10	3	length
LEAF_NODE	10:16	10:16	3	,
LEAF_NODE	10:18	10:18	3	e
LEAF_NODE	10:19	10:19	3	)
LEAF_NODE	10:20	10:20	3	;
SELECTION	11:1	12:2	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	sess == NULL
EXPR	11:5	11:13	5	sess == NULL
FIELD	11:5	11:5	6	sess
LEAF_NODE	11:5	11:5	7	sess
EQ_OPERATOR	11:10	11:10	6	==
LEAF_NODE	11:10	11:10	7	==
FIELD	11:13	11:13	6	NULL
LEAF_NODE	11:13	11:13	7	NULL
LEAF_NODE	11:17	11:17	4	)
STATEMENTS	12:2	12:2	4	
JUMP_STATEMENT	12:2	12:11	5	goto fail ;
KEYWORD	12:2	12:2	6	goto
LEAF_NODE	12:2	12:2	7	goto
DESTINATION	12:7	12:7	6	fail
LEAF_NODE	12:7	12:7	7	fail
LEAF_NODE	12:11	12:11	6	;
SELECTION	13:1	13:38	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	r -> seq == 0 && r -> msgclass == 0
EXPR	13:5	13:5	5	r -> seq == 0 && r -> msgclass == 0
AND	13:5	13:20	6	r -> seq == 0 && r -> msgclass == 0
EXPR	13:5	13:15	7	r -> seq == 0
FIELD	13:5	13:8	8	r -> seq
LEAF_NODE	13:5	13:5	9	r
LEAF_NODE	13:6	13:6	9	->
LEAF_NODE	13:8	13:8	9	seq
EQ_OPERATOR	13:12	13:12	8	==
LEAF_NODE	13:12	13:12	9	==
FIELD	13:15	13:15	8	0
LEAF_NODE	13:15	13:15	9	0
LEAF_NODE	13:17	13:17	7	&&
EXPR	13:20	13:35	7	r -> msgclass == 0
FIELD	13:20	13:23	8	r -> msgclass
LEAF_NODE	13:20	13:20	9	r
LEAF_NODE	13:21	13:21	9	->
LEAF_NODE	13:23	13:23	9	msgclass
EQ_OPERATOR	13:32	13:32	8	==
LEAF_NODE	13:32	13:32	9	==
FIELD	13:35	13:35	8	0
LEAF_NODE	13:35	13:35	9	0
LEAF_NODE	13:36	13:36	4	)
STATEMENTS	13:38	16:1	4	
LEAF_NODE	13:38	13:38	5	{
STATEMENTS	14:2	15:2	5	
EXPR_STATEMENT	14:2	14:103	6	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_handle_recv_msg80() oops, silently ignoring the bait\n" ) ;
EXPR	14:2	14:2	7	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_handle_recv_msg80() oops, silently ignoring the bait\n" )
FUNCTION_CALL	14:2	14:102	8	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_handle_recv_msg80() oops, silently ignoring the bait\n" )
CALLEE	14:2	14:2	9	gg_debug_session
LEAF_NODE	14:2	14:2	10	gg_debug_session
LEAF_NODE	14:18	14:18	9	(
ARGUMENT	14:19	14:19	9	sess
FIELD	14:19	14:19	10	sess
LEAF_NODE	14:19	14:19	11	sess
LEAF_NODE	14:23	14:23	9	,
ARGUMENT	14:25	14:25	9	GG_DEBUG_MISC
FIELD	14:25	14:25	10	GG_DEBUG_MISC
LEAF_NODE	14:25	14:25	11	GG_DEBUG_MISC
LEAF_NODE	14:38	14:38	9	,
ARGUMENT	14:40	14:40	9	"// gg_handle_recv_msg80() oops, silently ignoring the bait\n"
FIELD	14:40	14:40	10	"// gg_handle_recv_msg80() oops, silently ignoring the bait\n"
LEAF_NODE	14:40	14:40	11	"// gg_handle_recv_msg80() oops, silently ignoring the bait\n"
LEAF_NODE	14:102	14:102	9	)
LEAF_NODE	14:103	14:103	7	;
JUMP_STATEMENT	15:2	15:16	6	goto malformed ;
KEYWORD	15:2	15:2	7	goto
LEAF_NODE	15:2	15:2	8	goto
DESTINATION	15:7	15:7	7	malformed
LEAF_NODE	15:7	15:7	8	malformed
LEAF_NODE	15:16	15:16	7	;
LEAF_NODE	16:1	16:1	5	}
EXPR_STATEMENT	17:1	17:41	3	offset_plain = gg_fix32 ( r -> offset_plain ) ;
EXPR	17:1	17:1	4	offset_plain = gg_fix32 ( r -> offset_plain )
ASSIGN	17:1	17:16	5	offset_plain = gg_fix32 ( r -> offset_plain )
LVAL	17:1	17:1	6	offset_plain
FIELD	17:1	17:1	7	offset_plain
LEAF_NODE	17:1	17:1	8	offset_plain
ASSIGN_OP	17:14	17:14	6	=
LEAF_NODE	17:14	17:14	7	=
RVAL	17:16	17:16	6	gg_fix32 ( r -> offset_plain )
FUNCTION_CALL	17:16	17:40	7	gg_fix32 ( r -> offset_plain )
CALLEE	17:16	17:16	8	gg_fix32
LEAF_NODE	17:16	17:16	9	gg_fix32
LEAF_NODE	17:24	17:24	8	(
ARGUMENT	17:25	17:25	8	r -> offset_plain
FIELD	17:25	17:28	9	r -> offset_plain
LEAF_NODE	17:25	17:25	10	r
LEAF_NODE	17:26	17:26	10	->
LEAF_NODE	17:28	17:28	10	offset_plain
LEAF_NODE	17:40	17:40	8	)
LEAF_NODE	17:41	17:41	4	;
EXPR_STATEMENT	18:1	18:39	3	offset_attr = gg_fix32 ( r -> offset_attr ) ;
EXPR	18:1	18:1	4	offset_attr = gg_fix32 ( r -> offset_attr )
ASSIGN	18:1	18:15	5	offset_attr = gg_fix32 ( r -> offset_attr )
LVAL	18:1	18:1	6	offset_attr
FIELD	18:1	18:1	7	offset_attr
LEAF_NODE	18:1	18:1	8	offset_attr
ASSIGN_OP	18:13	18:13	6	=
LEAF_NODE	18:13	18:13	7	=
RVAL	18:15	18:15	6	gg_fix32 ( r -> offset_attr )
FUNCTION_CALL	18:15	18:38	7	gg_fix32 ( r -> offset_attr )
CALLEE	18:15	18:15	8	gg_fix32
LEAF_NODE	18:15	18:15	9	gg_fix32
LEAF_NODE	18:23	18:23	8	(
ARGUMENT	18:24	18:24	8	r -> offset_attr
FIELD	18:24	18:27	9	r -> offset_attr
LEAF_NODE	18:24	18:24	10	r
LEAF_NODE	18:25	18:25	10	->
LEAF_NODE	18:27	18:27	10	offset_attr
LEAF_NODE	18:38	18:38	8	)
LEAF_NODE	18:39	18:39	4	;
LEAF_NODE	19:1	19:1	3	if
LEAF_NODE	19:4	19:4	3	(
LEAF_NODE	19:5	19:5	3	offset_plain
LEAF_NODE	19:18	19:18	3	<
LEAF_NODE	19:20	19:20	3	sizeof
LEAF_NODE	19:26	19:26	3	(
LEAF_NODE	19:27	19:27	3	struct
LEAF_NODE	19:34	19:34	3	gg_recv_msg80
LEAF_NODE	19:47	19:47	3	)
LEAF_NODE	19:49	19:49	3	||
LEAF_NODE	19:52	19:52	3	offset_plain
LEAF_NODE	19:65	19:65	3	>=
LEAF_NODE	19:68	19:68	3	length
LEAF_NODE	19:74	19:74	3	)
LEAF_NODE	19:76	19:76	3	{
STATEMENTS	20:2	23:2	3	
LEAF_NODE	20:2	20:2	4	gg_debug_session
LEAF_NODE	20:18	20:18	4	(
LEAF_NODE	20:19	20:19	4	sess
LEAF_NODE	20:23	20:23	4	,
LEAF_NODE	20:25	20:25	4	GG_DEBUG_MISC
LEAF_NODE	20:38	20:38	4	,
LEAF_NODE	21:3	21:3	4	"// gg_handle_recv_msg80() malformed packet, "
LEAF_NODE	22:3	22:3	4	"message out of bounds (0)\n"
LEAF_NODE	22:32	22:32	4	)
LEAF_NODE	22:33	22:33	4	;
JUMP_STATEMENT	23:2	23:16	4	goto malformed ;
KEYWORD	23:2	23:2	5	goto
LEAF_NODE	23:2	23:2	6	goto
DESTINATION	23:7	23:7	5	malformed
LEAF_NODE	23:7	23:7	6	malformed
LEAF_NODE	23:16	23:16	5	;
LEAF_NODE	24:1	24:1	3	}
LEAF_NODE	25:1	25:1	3	if
LEAF_NODE	25:4	25:4	3	(
LEAF_NODE	25:5	25:5	3	offset_attr
LEAF_NODE	25:17	25:17	3	<
LEAF_NODE	25:19	25:19	3	sizeof
LEAF_NODE	25:25	25:25	3	(
LEAF_NODE	25:26	25:26	3	struct
LEAF_NODE	25:33	25:33	3	gg_recv_msg80
LEAF_NODE	25:46	25:46	3	)
LEAF_NODE	25:48	25:48	3	||
LEAF_NODE	25:51	25:51	3	offset_attr
LEAF_NODE	25:63	25:63	3	>
LEAF_NODE	25:65	25:65	3	length
LEAF_NODE	25:71	25:71	3	)
LEAF_NODE	25:73	25:73	3	{
STATEMENTS	26:2	29:2	3	
LEAF_NODE	26:2	26:2	4	gg_debug_session
LEAF_NODE	26:18	26:18	4	(
LEAF_NODE	26:19	26:19	4	sess
LEAF_NODE	26:23	26:23	4	,
LEAF_NODE	26:25	26:25	4	GG_DEBUG_MISC
LEAF_NODE	26:38	26:38	4	,
LEAF_NODE	27:3	27:3	4	"// gg_handle_recv_msg80() malformed packet, "
LEAF_NODE	28:3	28:3	4	"attr out of bounds (1)\n"
LEAF_NODE	28:29	28:29	4	)
LEAF_NODE	28:30	28:30	4	;
EXPR_STATEMENT	29:2	29:17	4	offset_attr = 0 ;
EXPR	29:2	29:2	5	offset_attr = 0
ASSIGN	29:2	29:16	6	offset_attr = 0
LVAL	29:2	29:2	7	offset_attr
FIELD	29:2	29:2	8	offset_attr
LEAF_NODE	29:2	29:2	9	offset_attr
ASSIGN_OP	29:14	29:14	7	=
LEAF_NODE	29:14	29:14	8	=
RVAL	29:16	29:16	7	0
FIELD	29:16	29:16	8	0
LEAF_NODE	29:16	29:16	9	0
LEAF_NODE	29:17	29:17	5	;
LEAF_NODE	30:1	30:1	3	}
SELECTION	32:1	33:2	3	
KEYWORD	32:1	32:1	4	if
LEAF_NODE	32:1	32:1	5	if
LEAF_NODE	32:4	32:4	4	(
CONDITION	32:5	32:5	4	offset_attr == length
EXPR	32:5	32:20	5	offset_attr == length
FIELD	32:5	32:5	6	offset_attr
LEAF_NODE	32:5	32:5	7	offset_attr
EQ_OPERATOR	32:17	32:17	6	==
LEAF_NODE	32:17	32:17	7	==
FIELD	32:20	32:20	6	length
LEAF_NODE	32:20	32:20	7	length
LEAF_NODE	32:26	32:26	4	)
STATEMENTS	33:2	33:2	4	
EXPR_STATEMENT	33:2	33:17	5	offset_attr = 0 ;
EXPR	33:2	33:2	6	offset_attr = 0
ASSIGN	33:2	33:16	7	offset_attr = 0
LVAL	33:2	33:2	8	offset_attr
FIELD	33:2	33:2	9	offset_attr
LEAF_NODE	33:2	33:2	10	offset_attr
ASSIGN_OP	33:14	33:14	8	=
LEAF_NODE	33:14	33:14	9	=
RVAL	33:16	33:16	8	0
FIELD	33:16	33:16	9	0
LEAF_NODE	33:16	33:16	10	0
LEAF_NODE	33:17	33:17	6	;
SELECTION	34:1	34:70	3	
KEYWORD	34:1	34:1	4	if
LEAF_NODE	34:1	34:1	5	if
LEAF_NODE	34:4	34:4	4	(
CONDITION	34:5	34:5	4	memchr ( packet + offset_plain , 0 , length - offset_plain ) == NULL
EXPR	34:5	34:64	5	memchr ( packet + offset_plain , 0 , length - offset_plain ) == NULL
FUNCTION_CALL	34:5	34:59	6	memchr ( packet + offset_plain , 0 , length - offset_plain )
CALLEE	34:5	34:5	7	memchr
LEAF_NODE	34:5	34:5	8	memchr
LEAF_NODE	34:11	34:11	7	(
ARGUMENT	34:12	34:21	7	packet + offset_plain
FIELD	34:12	34:12	8	packet
LEAF_NODE	34:12	34:12	9	packet
LEAF_NODE	34:19	34:19	8	+
FIELD	34:21	34:21	8	offset_plain
LEAF_NODE	34:21	34:21	9	offset_plain
LEAF_NODE	34:33	34:33	7	,
ARGUMENT	34:35	34:35	7	0
FIELD	34:35	34:35	8	0
LEAF_NODE	34:35	34:35	9	0
LEAF_NODE	34:36	34:36	7	,
ARGUMENT	34:38	34:47	7	length - offset_plain
FIELD	34:38	34:38	8	length
LEAF_NODE	34:38	34:38	9	length
LEAF_NODE	34:45	34:45	8	-
FIELD	34:47	34:47	8	offset_plain
LEAF_NODE	34:47	34:47	9	offset_plain
LEAF_NODE	34:59	34:59	7	)
EQ_OPERATOR	34:61	34:61	6	==
LEAF_NODE	34:61	34:61	7	==
FIELD	34:64	34:64	6	NULL
LEAF_NODE	34:64	34:64	7	NULL
LEAF_NODE	34:68	34:68	4	)
STATEMENTS	34:70	39:1	4	
LEAF_NODE	34:70	34:70	5	{
STATEMENTS	35:2	38:2	5	
LEAF_NODE	35:2	35:2	6	gg_debug_session
LEAF_NODE	35:18	35:18	6	(
LEAF_NODE	35:19	35:19	6	sess
LEAF_NODE	35:23	35:23	6	,
LEAF_NODE	35:25	35:25	6	GG_DEBUG_MISC
LEAF_NODE	35:38	35:38	6	,
LEAF_NODE	36:3	36:3	6	"// gg_handle_recv_msg80() malformed packet, "
LEAF_NODE	37:3	37:3	6	"message out of bounds (2)\n"
LEAF_NODE	37:32	37:32	6	)
LEAF_NODE	37:33	37:33	6	;
JUMP_STATEMENT	38:2	38:16	6	goto malformed ;
KEYWORD	38:2	38:2	7	goto
LEAF_NODE	38:2	38:2	8	goto
DESTINATION	38:7	38:7	7	malformed
LEAF_NODE	38:7	38:7	8	malformed
LEAF_NODE	38:16	38:16	7	;
LEAF_NODE	39:1	39:1	5	}
LEAF_NODE	40:1	40:1	3	if
LEAF_NODE	40:4	40:4	3	(
LEAF_NODE	40:5	40:5	3	offset_plain
LEAF_NODE	40:18	40:18	3	>
LEAF_NODE	40:20	40:20	3	sizeof
LEAF_NODE	40:26	40:26	3	(
LEAF_NODE	40:27	40:27	3	struct
LEAF_NODE	40:34	40:34	3	gg_recv_msg80
LEAF_NODE	40:47	40:47	3	)
LEAF_NODE	40:49	40:49	3	&&
LEAF_NODE	40:52	40:52	3	memchr
LEAF_NODE	40:58	40:58	3	(
LEAF_NODE	40:59	40:59	3	packet
LEAF_NODE	40:66	40:66	3	+
LEAF_NODE	41:2	41:2	3	sizeof
LEAF_NODE	41:8	41:8	3	(
LEAF_NODE	41:9	41:9	3	struct
LEAF_NODE	41:16	41:16	3	gg_recv_msg80
LEAF_NODE	41:29	41:29	3	)
LEAF_NODE	41:30	41:30	3	,
LEAF_NODE	41:32	41:32	3	0
LEAF_NODE	41:33	41:33	3	,
LEAF_NODE	41:35	41:35	3	offset_plain
LEAF_NODE	41:48	41:48	3	-
LEAF_NODE	42:2	42:2	3	sizeof
LEAF_NODE	42:8	42:8	3	(
LEAF_NODE	42:9	42:9	3	struct
LEAF_NODE	42:16	42:16	3	gg_recv_msg80
LEAF_NODE	42:29	42:29	3	)
LEAF_NODE	42:30	42:30	3	)
LEAF_NODE	42:32	42:32	3	==
LEAF_NODE	42:35	42:35	3	NULL
LEAF_NODE	42:39	42:39	3	)
LEAF_NODE	43:1	43:1	3	{
STATEMENTS	44:2	47:2	3	
LEAF_NODE	44:2	44:2	4	gg_debug_session
LEAF_NODE	44:18	44:18	4	(
LEAF_NODE	44:19	44:19	4	sess
LEAF_NODE	44:23	44:23	4	,
LEAF_NODE	44:25	44:25	4	GG_DEBUG_MISC
LEAF_NODE	44:38	44:38	4	,
LEAF_NODE	45:3	45:3	4	"// gg_handle_recv_msg80() malformed packet, "
LEAF_NODE	46:3	46:3	4	"message out of bounds (3)\n"
LEAF_NODE	46:32	46:32	4	)
LEAF_NODE	46:33	46:33	4	;
JUMP_STATEMENT	47:2	47:16	4	goto malformed ;
KEYWORD	47:2	47:2	5	goto
LEAF_NODE	47:2	47:2	6	goto
DESTINATION	47:7	47:7	5	malformed
LEAF_NODE	47:7	47:7	6	malformed
LEAF_NODE	47:16	47:16	5	;
LEAF_NODE	48:1	48:1	3	}
EXPR_STATEMENT	49:1	49:77	3	e -> type = ( type != GG_RECV_OWN_MSG ) ? GG_EVENT_MSG : GG_EVENT_MULTILOGON_MSG ;
EXPR	49:1	49:1	4	e -> type = ( type != GG_RECV_OWN_MSG ) ? GG_EVENT_MSG : GG_EVENT_MULTILOGON_MSG
ASSIGN	49:1	49:11	5	e -> type = ( type != GG_RECV_OWN_MSG ) ? GG_EVENT_MSG : GG_EVENT_MULTILOGON_MSG
LVAL	49:1	49:1	6	e -> type
FIELD	49:1	49:4	7	e -> type
LEAF_NODE	49:1	49:1	8	e
LEAF_NODE	49:2	49:2	8	->
LEAF_NODE	49:4	49:4	8	type
ASSIGN_OP	49:9	49:9	6	=
LEAF_NODE	49:9	49:9	7	=
RVAL	49:11	49:11	6	( type != GG_RECV_OWN_MSG ) ? GG_EVENT_MSG : GG_EVENT_MULTILOGON_MSG
COND_EXPR	49:11	49:54	7	( type != GG_RECV_OWN_MSG ) ? GG_EVENT_MSG : GG_EVENT_MULTILOGON_MSG
CONDITION	49:11	49:35	8	( type != GG_RECV_OWN_MSG )
LEAF_NODE	49:11	49:11	9	(
FIELD	49:12	49:12	9	type
LEAF_NODE	49:12	49:12	10	type
EQ_OPERATOR	49:17	49:17	9	!=
LEAF_NODE	49:17	49:17	10	!=
FIELD	49:20	49:20	9	GG_RECV_OWN_MSG
LEAF_NODE	49:20	49:20	10	GG_RECV_OWN_MSG
LEAF_NODE	49:35	49:35	9	)
LEAF_NODE	49:37	49:37	8	?
EXPR	49:39	49:39	8	GG_EVENT_MSG
FIELD	49:39	49:39	9	GG_EVENT_MSG
LEAF_NODE	49:39	49:39	10	GG_EVENT_MSG
LEAF_NODE	49:52	49:52	8	:
FIELD	49:54	49:54	8	GG_EVENT_MULTILOGON_MSG
LEAF_NODE	49:54	49:54	9	GG_EVENT_MULTILOGON_MSG
LEAF_NODE	49:77	49:77	4	;
EXPR_STATEMENT	50:1	50:46	3	e -> event . msg . msgclass = gg_fix32 ( r -> msgclass ) ;
EXPR	50:1	50:1	4	e -> event . msg . msgclass = gg_fix32 ( r -> msgclass )
ASSIGN	50:1	50:25	5	e -> event . msg . msgclass = gg_fix32 ( r -> msgclass )
LVAL	50:1	50:1	6	e -> event . msg . msgclass
FIELD	50:1	50:14	7	e -> event . msg . msgclass
LEAF_NODE	50:1	50:1	8	e
LEAF_NODE	50:2	50:2	8	->
LEAF_NODE	50:4	50:4	8	event
LEAF_NODE	50:9	50:9	8	.
LEAF_NODE	50:10	50:10	8	msg
LEAF_NODE	50:13	50:13	8	.
LEAF_NODE	50:14	50:14	8	msgclass
ASSIGN_OP	50:23	50:23	6	=
LEAF_NODE	50:23	50:23	7	=
RVAL	50:25	50:25	6	gg_fix32 ( r -> msgclass )
FUNCTION_CALL	50:25	50:45	7	gg_fix32 ( r -> msgclass )
CALLEE	50:25	50:25	8	gg_fix32
LEAF_NODE	50:25	50:25	9	gg_fix32
LEAF_NODE	50:33	50:33	8	(
ARGUMENT	50:34	50:34	8	r -> msgclass
FIELD	50:34	50:37	9	r -> msgclass
LEAF_NODE	50:34	50:34	10	r
LEAF_NODE	50:35	50:35	10	->
LEAF_NODE	50:37	50:37	10	msgclass
LEAF_NODE	50:45	50:45	8	)
LEAF_NODE	50:46	50:46	4	;
EXPR_STATEMENT	51:1	51:42	3	e -> event . msg . sender = gg_fix32 ( r -> sender ) ;
EXPR	51:1	51:1	4	e -> event . msg . sender = gg_fix32 ( r -> sender )
ASSIGN	51:1	51:23	5	e -> event . msg . sender = gg_fix32 ( r -> sender )
LVAL	51:1	51:1	6	e -> event . msg . sender
FIELD	51:1	51:14	7	e -> event . msg . sender
LEAF_NODE	51:1	51:1	8	e
LEAF_NODE	51:2	51:2	8	->
LEAF_NODE	51:4	51:4	8	event
LEAF_NODE	51:9	51:9	8	.
LEAF_NODE	51:10	51:10	8	msg
LEAF_NODE	51:13	51:13	8	.
LEAF_NODE	51:14	51:14	8	sender
ASSIGN_OP	51:21	51:21	6	=
LEAF_NODE	51:21	51:21	7	=
RVAL	51:23	51:23	6	gg_fix32 ( r -> sender )
FUNCTION_CALL	51:23	51:41	7	gg_fix32 ( r -> sender )
CALLEE	51:23	51:23	8	gg_fix32
LEAF_NODE	51:23	51:23	9	gg_fix32
LEAF_NODE	51:31	51:31	8	(
ARGUMENT	51:32	51:32	8	r -> sender
FIELD	51:32	51:35	9	r -> sender
LEAF_NODE	51:32	51:32	10	r
LEAF_NODE	51:33	51:33	10	->
LEAF_NODE	51:35	51:35	10	sender
LEAF_NODE	51:41	51:41	8	)
LEAF_NODE	51:42	51:42	4	;
EXPR_STATEMENT	52:1	52:38	3	e -> event . msg . time = gg_fix32 ( r -> time ) ;
EXPR	52:1	52:1	4	e -> event . msg . time = gg_fix32 ( r -> time )
ASSIGN	52:1	52:21	5	e -> event . msg . time = gg_fix32 ( r -> time )
LVAL	52:1	52:1	6	e -> event . msg . time
FIELD	52:1	52:14	7	e -> event . msg . time
LEAF_NODE	52:1	52:1	8	e
LEAF_NODE	52:2	52:2	8	->
LEAF_NODE	52:4	52:4	8	event
LEAF_NODE	52:9	52:9	8	.
LEAF_NODE	52:10	52:10	8	msg
LEAF_NODE	52:13	52:13	8	.
LEAF_NODE	52:14	52:14	8	time
ASSIGN_OP	52:19	52:19	6	=
LEAF_NODE	52:19	52:19	7	=
RVAL	52:21	52:21	6	gg_fix32 ( r -> time )
FUNCTION_CALL	52:21	52:37	7	gg_fix32 ( r -> time )
CALLEE	52:21	52:21	8	gg_fix32
LEAF_NODE	52:21	52:21	9	gg_fix32
LEAF_NODE	52:29	52:29	8	(
ARGUMENT	52:30	52:30	8	r -> time
FIELD	52:30	52:33	9	r -> time
LEAF_NODE	52:30	52:30	10	r
LEAF_NODE	52:31	52:31	10	->
LEAF_NODE	52:33	52:33	10	time
LEAF_NODE	52:37	52:37	8	)
LEAF_NODE	52:38	52:38	4	;
EXPR_STATEMENT	53:1	53:36	3	e -> event . msg . seq = gg_fix32 ( r -> seq ) ;
EXPR	53:1	53:1	4	e -> event . msg . seq = gg_fix32 ( r -> seq )
ASSIGN	53:1	53:20	5	e -> event . msg . seq = gg_fix32 ( r -> seq )
LVAL	53:1	53:1	6	e -> event . msg . seq
FIELD	53:1	53:14	7	e -> event . msg . seq
LEAF_NODE	53:1	53:1	8	e
LEAF_NODE	53:2	53:2	8	->
LEAF_NODE	53:4	53:4	8	event
LEAF_NODE	53:9	53:9	8	.
LEAF_NODE	53:10	53:10	8	msg
LEAF_NODE	53:13	53:13	8	.
LEAF_NODE	53:14	53:14	8	seq
ASSIGN_OP	53:18	53:18	6	=
LEAF_NODE	53:18	53:18	7	=
RVAL	53:20	53:20	6	gg_fix32 ( r -> seq )
FUNCTION_CALL	53:20	53:35	7	gg_fix32 ( r -> seq )
CALLEE	53:20	53:20	8	gg_fix32
LEAF_NODE	53:20	53:20	9	gg_fix32
LEAF_NODE	53:28	53:28	8	(
ARGUMENT	53:29	53:29	8	r -> seq
FIELD	53:29	53:32	9	r -> seq
LEAF_NODE	53:29	53:29	10	r
LEAF_NODE	53:30	53:30	10	->
LEAF_NODE	53:32	53:32	10	seq
LEAF_NODE	53:35	53:35	8	)
LEAF_NODE	53:36	53:36	4	;
SELECTION	54:1	54:23	3	
KEYWORD	54:1	54:1	4	if
LEAF_NODE	54:1	54:1	5	if
LEAF_NODE	54:4	54:4	4	(
CONDITION	54:5	54:5	4	offset_attr != 0
EXPR	54:5	54:20	5	offset_attr != 0
FIELD	54:5	54:5	6	offset_attr
LEAF_NODE	54:5	54:5	7	offset_attr
EQ_OPERATOR	54:17	54:17	6	!=
LEAF_NODE	54:17	54:17	7	!=
FIELD	54:20	54:20	6	0
LEAF_NODE	54:20	54:20	7	0
LEAF_NODE	54:21	54:21	4	)
STATEMENTS	54:23	66:1	4	
LEAF_NODE	54:23	54:23	5	{
STATEMENTS	55:2	55:2	5	
SELECTION	55:2	57:2	6	
KEYWORD	55:2	55:2	7	switch
LEAF_NODE	55:2	55:2	8	switch
LEAF_NODE	55:9	55:9	7	(
CONDITION	55:10	55:10	7	gg_handle_recv_msg_options ( sess , e , gg_fix32 ( r -> sender ) , packet + offset_attr , packet + length , type )
EXPR	55:10	55:10	8	gg_handle_recv_msg_options ( sess , e , gg_fix32 ( r -> sender ) , packet + offset_attr , packet + length , type )
FUNCTION_CALL	55:10	56:46	9	gg_handle_recv_msg_options ( sess , e , gg_fix32 ( r -> sender ) , packet + offset_attr , packet + length , type )
CALLEE	55:10	55:10	10	gg_handle_recv_msg_options
LEAF_NODE	55:10	55:10	11	gg_handle_recv_msg_options
LEAF_NODE	55:36	55:36	10	(
ARGUMENT	55:37	55:37	10	sess
FIELD	55:37	55:37	11	sess
LEAF_NODE	55:37	55:37	12	sess
LEAF_NODE	55:41	55:41	10	,
ARGUMENT	55:43	55:43	10	e
FIELD	55:43	55:43	11	e
LEAF_NODE	55:43	55:43	12	e
LEAF_NODE	55:44	55:44	10	,
ARGUMENT	55:46	55:46	10	gg_fix32 ( r -> sender )
FUNCTION_CALL	55:46	55:64	11	gg_fix32 ( r -> sender )
CALLEE	55:46	55:46	12	gg_fix32
LEAF_NODE	55:46	55:46	13	gg_fix32
LEAF_NODE	55:54	55:54	12	(
ARGUMENT	55:55	55:55	12	r -> sender
FIELD	55:55	55:58	13	r -> sender
LEAF_NODE	55:55	55:55	14	r
LEAF_NODE	55:56	55:56	14	->
LEAF_NODE	55:58	55:58	14	sender
LEAF_NODE	55:64	55:64	12	)
LEAF_NODE	55:65	55:65	10	,
ARGUMENT	56:3	56:12	10	packet + offset_attr
FIELD	56:3	56:3	11	packet
LEAF_NODE	56:3	56:3	12	packet
LEAF_NODE	56:10	56:10	11	+
FIELD	56:12	56:12	11	offset_attr
LEAF_NODE	56:12	56:12	12	offset_attr
LEAF_NODE	56:23	56:23	10	,
ARGUMENT	56:25	56:34	10	packet + length
FIELD	56:25	56:25	11	packet
LEAF_NODE	56:25	56:25	12	packet
LEAF_NODE	56:32	56:32	11	+
FIELD	56:34	56:34	11	length
LEAF_NODE	56:34	56:34	12	length
LEAF_NODE	56:40	56:40	10	,
ARGUMENT	56:42	56:42	10	type
FIELD	56:42	56:42	11	type
LEAF_NODE	56:42	56:42	12	type
LEAF_NODE	56:46	56:46	10	)
LEAF_NODE	56:47	56:47	7	)
STATEMENTS	57:2	65:2	7	
LEAF_NODE	57:2	57:2	8	{
STATEMENTS	58:3	64:4	8	
LEAF_NODE	58:3	58:3	9	case
LEAF_NODE	58:8	58:8	9	-
LABEL	58:9	58:10	9	1 :
LEAF_NODE	58:9	58:9	10	1
LEAF_NODE	58:10	58:10	10	:
EXPR_STATEMENT	59:4	59:51	9	gg_session_send_msg_ack ( sess , gg_fix32 ( r -> seq ) ) ;
EXPR	59:4	59:4	10	gg_session_send_msg_ack ( sess , gg_fix32 ( r -> seq ) )
FUNCTION_CALL	59:4	59:50	11	gg_session_send_msg_ack ( sess , gg_fix32 ( r -> seq ) )
CALLEE	59:4	59:4	12	gg_session_send_msg_ack
LEAF_NODE	59:4	59:4	13	gg_session_send_msg_ack
LEAF_NODE	59:27	59:27	12	(
ARGUMENT	59:28	59:28	12	sess
FIELD	59:28	59:28	13	sess
LEAF_NODE	59:28	59:28	14	sess
LEAF_NODE	59:32	59:32	12	,
ARGUMENT	59:34	59:34	12	gg_fix32 ( r -> seq )
FUNCTION_CALL	59:34	59:49	13	gg_fix32 ( r -> seq )
CALLEE	59:34	59:34	14	gg_fix32
LEAF_NODE	59:34	59:34	15	gg_fix32
LEAF_NODE	59:42	59:42	14	(
ARGUMENT	59:43	59:43	14	r -> seq
FIELD	59:43	59:46	15	r -> seq
LEAF_NODE	59:43	59:43	16	r
LEAF_NODE	59:44	59:44	16	->
LEAF_NODE	59:46	59:46	16	seq
LEAF_NODE	59:49	59:49	14	)
LEAF_NODE	59:50	59:50	12	)
LEAF_NODE	59:51	59:51	10	;
JUMP_STATEMENT	60:4	60:12	9	return 0 ;
KEYWORD	60:4	60:4	10	return
LEAF_NODE	60:4	60:4	11	return
DESTINATION	60:11	60:11	10	0
EXPR	60:11	60:11	11	0
FIELD	60:11	60:11	12	0
LEAF_NODE	60:11	60:11	13	0
LEAF_NODE	60:12	60:12	10	;
LEAF_NODE	61:3	61:3	9	case
LEAF_NODE	61:8	61:8	9	-
LABEL	61:9	61:10	9	2 :
LEAF_NODE	61:9	61:9	10	2
LEAF_NODE	61:10	61:10	10	:
JUMP_STATEMENT	62:4	62:13	9	goto fail ;
KEYWORD	62:4	62:4	10	goto
LEAF_NODE	62:4	62:4	11	goto
DESTINATION	62:9	62:9	10	fail
LEAF_NODE	62:9	62:9	11	fail
LEAF_NODE	62:13	62:13	10	;
LEAF_NODE	63:3	63:3	9	case
LEAF_NODE	63:8	63:8	9	-
LABEL	63:9	63:10	9	3 :
LEAF_NODE	63:9	63:9	10	3
LEAF_NODE	63:10	63:10	10	:
JUMP_STATEMENT	64:4	64:18	9	goto malformed ;
KEYWORD	64:4	64:4	10	goto
LEAF_NODE	64:4	64:4	11	goto
DESTINATION	64:9	64:9	10	malformed
LEAF_NODE	64:9	64:9	11	malformed
LEAF_NODE	64:18	64:18	10	;
LEAF_NODE	65:2	65:2	8	}
LEAF_NODE	66:1	66:1	5	}
SELECTION	67:1	67:43	3	
KEYWORD	67:1	67:1	4	if
LEAF_NODE	67:1	67:1	5	if
LEAF_NODE	67:4	67:4	4	(
CONDITION	67:5	67:5	4	sess -> encoding == GG_ENCODING_CP1250
EXPR	67:5	67:23	5	sess -> encoding == GG_ENCODING_CP1250
FIELD	67:5	67:11	6	sess -> encoding
LEAF_NODE	67:5	67:5	7	sess
LEAF_NODE	67:9	67:9	7	->
LEAF_NODE	67:11	67:11	7	encoding
EQ_OPERATOR	67:20	67:20	6	==
LEAF_NODE	67:20	67:20	7	==
FIELD	67:23	67:23	6	GG_ENCODING_CP1250
LEAF_NODE	67:23	67:23	7	GG_ENCODING_CP1250
LEAF_NODE	67:41	67:41	4	)
STATEMENTS	67:43	73:1	4	
LEAF_NODE	67:43	67:43	5	{
STATEMENTS	68:2	69:2	5	
EXPR_STATEMENT	68:2	68:71	6	e -> event . msg . message = ( unsigned char * ) strdup ( packet + offset_plain ) ;
EXPR	68:2	68:2	7	e -> event . msg . message = ( unsigned char * ) strdup ( packet + offset_plain )
ASSIGN	68:2	68:25	8	e -> event . msg . message = ( unsigned char * ) strdup ( packet + offset_plain )
LVAL	68:2	68:2	9	e -> event . msg . message
FIELD	68:2	68:15	10	e -> event . msg . message
LEAF_NODE	68:2	68:2	11	e
LEAF_NODE	68:3	68:3	11	->
LEAF_NODE	68:5	68:5	11	event
LEAF_NODE	68:10	68:10	11	.
LEAF_NODE	68:11	68:11	11	msg
LEAF_NODE	68:14	68:14	11	.
LEAF_NODE	68:15	68:15	11	message
ASSIGN_OP	68:23	68:23	9	=
LEAF_NODE	68:23	68:23	10	=
RVAL	68:25	68:42	9	( unsigned char * ) strdup ( packet + offset_plain )
LEAF_NODE	68:25	68:25	10	(
TYPE_NAME	68:26	68:35	10	unsigned char
LEAF_NODE	68:26	68:26	11	unsigned
LEAF_NODE	68:35	68:35	11	char
LEAF_NODE	68:39	68:39	10	*
LEAF_NODE	68:40	68:40	10	)
FUNCTION_CALL	68:42	68:70	10	strdup ( packet + offset_plain )
CALLEE	68:42	68:42	11	strdup
LEAF_NODE	68:42	68:42	12	strdup
LEAF_NODE	68:48	68:48	11	(
ARGUMENT	68:49	68:58	11	packet + offset_plain
FIELD	68:49	68:49	12	packet
LEAF_NODE	68:49	68:49	13	packet
LEAF_NODE	68:56	68:56	12	+
FIELD	68:58	68:58	12	offset_plain
LEAF_NODE	68:58	68:58	13	offset_plain
LEAF_NODE	68:70	68:70	11	)
LEAF_NODE	68:71	68:71	7	;
SELECTION	69:2	69:36	6	
KEYWORD	69:2	69:2	7	if
LEAF_NODE	69:2	69:2	8	if
LEAF_NODE	69:5	69:5	7	(
CONDITION	69:6	69:6	7	e -> event . msg . message == NULL
EXPR	69:6	69:30	8	e -> event . msg . message == NULL
FIELD	69:6	69:19	9	e -> event . msg . message
LEAF_NODE	69:6	69:6	10	e
LEAF_NODE	69:7	69:7	10	->
LEAF_NODE	69:9	69:9	10	event
LEAF_NODE	69:14	69:14	10	.
LEAF_NODE	69:15	69:15	10	msg
LEAF_NODE	69:18	69:18	10	.
LEAF_NODE	69:19	69:19	10	message
EQ_OPERATOR	69:27	69:27	9	==
LEAF_NODE	69:27	69:27	10	==
FIELD	69:30	69:30	9	NULL
LEAF_NODE	69:30	69:30	10	NULL
LEAF_NODE	69:34	69:34	7	)
STATEMENTS	69:36	72:2	7	
LEAF_NODE	69:36	69:36	8	{
STATEMENTS	70:3	71:3	8	
EXPR_STATEMENT	70:3	70:94	9	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_session_handle_recv_msg_80() out of memory\n" ) ;
EXPR	70:3	70:3	10	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_session_handle_recv_msg_80() out of memory\n" )
FUNCTION_CALL	70:3	70:93	11	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_session_handle_recv_msg_80() out of memory\n" )
CALLEE	70:3	70:3	12	gg_debug_session
LEAF_NODE	70:3	70:3	13	gg_debug_session
LEAF_NODE	70:19	70:19	12	(
ARGUMENT	70:20	70:20	12	sess
FIELD	70:20	70:20	13	sess
LEAF_NODE	70:20	70:20	14	sess
LEAF_NODE	70:24	70:24	12	,
ARGUMENT	70:26	70:26	12	GG_DEBUG_MISC
FIELD	70:26	70:26	13	GG_DEBUG_MISC
LEAF_NODE	70:26	70:26	14	GG_DEBUG_MISC
LEAF_NODE	70:39	70:39	12	,
ARGUMENT	70:41	70:41	12	"// gg_session_handle_recv_msg_80() out of memory\n"
FIELD	70:41	70:41	13	"// gg_session_handle_recv_msg_80() out of memory\n"
LEAF_NODE	70:41	70:41	14	"// gg_session_handle_recv_msg_80() out of memory\n"
LEAF_NODE	70:93	70:93	12	)
LEAF_NODE	70:94	70:94	10	;
JUMP_STATEMENT	71:3	71:12	9	goto fail ;
KEYWORD	71:3	71:3	10	goto
LEAF_NODE	71:3	71:3	11	goto
DESTINATION	71:8	71:8	10	fail
LEAF_NODE	71:8	71:8	11	fail
LEAF_NODE	71:12	71:12	10	;
LEAF_NODE	72:2	72:2	8	}
LEAF_NODE	73:1	73:1	5	}
SELECTION	73:3	73:8	3	
KEYWORD	73:3	73:3	4	else
LEAF_NODE	73:3	73:3	5	else
STATEMENTS	73:8	110:1	4	
LEAF_NODE	73:8	73:8	5	{
STATEMENTS	74:2	99:4	5	
LEAF_NODE	74:2	74:2	6	if
LEAF_NODE	74:5	74:5	6	(
LEAF_NODE	74:6	74:6	6	offset_plain
LEAF_NODE	74:19	74:19	6	>
LEAF_NODE	74:21	74:21	6	sizeof
LEAF_NODE	74:27	74:27	6	(
LEAF_NODE	74:28	74:28	6	struct
LEAF_NODE	74:35	74:35	6	gg_recv_msg80
LEAF_NODE	74:48	74:48	6	)
LEAF_NODE	74:49	74:49	6	)
LEAF_NODE	74:51	74:51	6	{
STATEMENTS	75:3	98:21	6	
SIMPLE_DECL	75:3	75:22	7	size_t len , size_t fmt_len ;
INIT_DECL_LIST	75:3	75:3	8	size_t len , size_t fmt_len
VAR_DECL	75:3	75:10	9	size_t len
TYPE	75:3	75:3	10	size_t
TYPE_NAME	75:3	75:3	11	size_t
LEAF_NODE	75:3	75:3	12	size_t
NAME	75:10	75:10	10	len
LEAF_NODE	75:10	75:10	11	len
LEAF_NODE	75:13	75:13	9	,
VAR_DECL	75:3	75:15	9	size_t fmt_len
TYPE	75:3	75:3	10	size_t
TYPE_NAME	75:3	75:3	11	size_t
LEAF_NODE	75:3	75:3	12	size_t
NAME	75:15	75:15	10	fmt_len
LEAF_NODE	75:15	75:15	11	fmt_len
LEAF_NODE	75:22	75:22	8	;
LEAF_NODE	76:3	76:3	7	len
LEAF_NODE	76:7	76:7	7	=
LEAF_NODE	76:9	76:9	7	gg_message_html_to_text
LEAF_NODE	76:32	76:32	7	(
LEAF_NODE	76:33	76:33	7	NULL
LEAF_NODE	76:37	76:37	7	,
LEAF_NODE	76:39	76:39	7	NULL
LEAF_NODE	76:43	76:43	7	,
LEAF_NODE	76:45	76:45	7	&
LEAF_NODE	76:46	76:46	7	fmt_len
LEAF_NODE	76:53	76:53	7	,
LEAF_NODE	77:4	77:4	7	packet
LEAF_NODE	77:11	77:11	7	+
LEAF_NODE	77:13	77:13	7	sizeof
LEAF_NODE	77:19	77:19	7	(
LEAF_NODE	77:20	77:20	7	struct
LEAF_NODE	77:27	77:27	7	gg_recv_msg80
LEAF_NODE	77:40	77:40	7	)
LEAF_NODE	77:41	77:41	7	,
LEAF_NODE	78:4	78:4	7	GG_ENCODING_UTF8
LEAF_NODE	78:20	78:20	7	)
LEAF_NODE	78:21	78:21	7	;
EXPR_STATEMENT	79:3	79:41	7	e -> event . msg . message = malloc ( len + 1 ) ;
EXPR	79:3	79:3	8	e -> event . msg . message = malloc ( len + 1 )
ASSIGN	79:3	79:26	9	e -> event . msg . message = malloc ( len + 1 )
LVAL	79:3	79:3	10	e -> event . msg . message
FIELD	79:3	79:16	11	e -> event . msg . message
LEAF_NODE	79:3	79:3	12	e
LEAF_NODE	79:4	79:4	12	->
LEAF_NODE	79:6	79:6	12	event
LEAF_NODE	79:11	79:11	12	.
LEAF_NODE	79:12	79:12	12	msg
LEAF_NODE	79:15	79:15	12	.
LEAF_NODE	79:16	79:16	12	message
ASSIGN_OP	79:24	79:24	10	=
LEAF_NODE	79:24	79:24	11	=
RVAL	79:26	79:26	10	malloc ( len + 1 )
FUNCTION_CALL	79:26	79:40	11	malloc ( len + 1 )
CALLEE	79:26	79:26	12	malloc
LEAF_NODE	79:26	79:26	13	malloc
LEAF_NODE	79:32	79:32	12	(
ARGUMENT	79:33	79:39	12	len + 1
FIELD	79:33	79:33	13	len
LEAF_NODE	79:33	79:33	14	len
LEAF_NODE	79:37	79:37	13	+
FIELD	79:39	79:39	13	1
LEAF_NODE	79:39	79:39	14	1
LEAF_NODE	79:40	79:40	12	)
LEAF_NODE	79:41	79:41	8	;
SELECTION	80:3	80:37	7	
KEYWORD	80:3	80:3	8	if
LEAF_NODE	80:3	80:3	9	if
LEAF_NODE	80:6	80:6	8	(
CONDITION	80:7	80:7	8	e -> event . msg . message == NULL
EXPR	80:7	80:31	9	e -> event . msg . message == NULL
FIELD	80:7	80:20	10	e -> event . msg . message
LEAF_NODE	80:7	80:7	11	e
LEAF_NODE	80:8	80:8	11	->
LEAF_NODE	80:10	80:10	11	event
LEAF_NODE	80:15	80:15	11	.
LEAF_NODE	80:16	80:16	11	msg
LEAF_NODE	80:19	80:19	11	.
LEAF_NODE	80:20	80:20	11	message
EQ_OPERATOR	80:28	80:28	10	==
LEAF_NODE	80:28	80:28	11	==
FIELD	80:31	80:31	10	NULL
LEAF_NODE	80:31	80:31	11	NULL
LEAF_NODE	80:35	80:35	8	)
STATEMENTS	80:37	85:3	8	
LEAF_NODE	80:37	80:37	9	{
STATEMENTS	81:4	84:4	9	
LEAF_NODE	81:4	81:4	10	gg_debug_session
LEAF_NODE	81:20	81:20	10	(
LEAF_NODE	81:21	81:21	10	sess
LEAF_NODE	81:25	81:25	10	,
LEAF_NODE	81:27	81:27	10	GG_DEBUG_MISC
LEAF_NODE	81:40	81:40	10	,
LEAF_NODE	82:5	82:5	10	"// gg_session_handle_recv_msg_80() "
LEAF_NODE	83:5	83:5	10	"out of memory\n"
LEAF_NODE	83:22	83:22	10	)
LEAF_NODE	83:23	83:23	10	;
JUMP_STATEMENT	84:4	84:13	10	goto fail ;
KEYWORD	84:4	84:4	11	goto
LEAF_NODE	84:4	84:4	12	goto
DESTINATION	84:9	84:9	11	fail
LEAF_NODE	84:9	84:9	12	fail
LEAF_NODE	84:13	84:13	11	;
LEAF_NODE	85:3	85:3	9	}
EXPR_STATEMENT	86:3	86:29	7	free ( e -> event . msg . formats ) ;
EXPR	86:3	86:3	8	free ( e -> event . msg . formats )
FUNCTION_CALL	86:3	86:28	9	free ( e -> event . msg . formats )
CALLEE	86:3	86:3	10	free
LEAF_NODE	86:3	86:3	11	free
LEAF_NODE	86:7	86:7	10	(
ARGUMENT	86:8	86:8	10	e -> event . msg . formats
FIELD	86:8	86:21	11	e -> event . msg . formats
LEAF_NODE	86:8	86:8	12	e
LEAF_NODE	86:9	86:9	12	->
LEAF_NODE	86:11	86:11	12	event
LEAF_NODE	86:16	86:16	12	.
LEAF_NODE	86:17	86:17	12	msg
LEAF_NODE	86:20	86:20	12	.
LEAF_NODE	86:21	86:21	12	formats
LEAF_NODE	86:28	86:28	10	)
LEAF_NODE	86:29	86:29	8	;
EXPR_STATEMENT	87:3	87:40	7	e -> event . msg . formats_length = fmt_len ;
EXPR	87:3	87:3	8	e -> event . msg . formats_length = fmt_len
ASSIGN	87:3	87:33	9	e -> event . msg . formats_length = fmt_len
LVAL	87:3	87:3	10	e -> event . msg . formats_length
FIELD	87:3	87:16	11	e -> event . msg . formats_length
LEAF_NODE	87:3	87:3	12	e
LEAF_NODE	87:4	87:4	12	->
LEAF_NODE	87:6	87:6	12	event
LEAF_NODE	87:11	87:11	12	.
LEAF_NODE	87:12	87:12	12	msg
LEAF_NODE	87:15	87:15	12	.
LEAF_NODE	87:16	87:16	12	formats_length
ASSIGN_OP	87:31	87:31	10	=
LEAF_NODE	87:31	87:31	11	=
RVAL	87:33	87:33	10	fmt_len
FIELD	87:33	87:33	11	fmt_len
LEAF_NODE	87:33	87:33	12	fmt_len
LEAF_NODE	87:40	87:40	8	;
EXPR_STATEMENT	88:3	88:41	7	e -> event . msg . formats = malloc ( fmt_len ) ;
EXPR	88:3	88:3	8	e -> event . msg . formats = malloc ( fmt_len )
ASSIGN	88:3	88:26	9	e -> event . msg . formats = malloc ( fmt_len )
LVAL	88:3	88:3	10	e -> event . msg . formats
FIELD	88:3	88:16	11	e -> event . msg . formats
LEAF_NODE	88:3	88:3	12	e
LEAF_NODE	88:4	88:4	12	->
LEAF_NODE	88:6	88:6	12	event
LEAF_NODE	88:11	88:11	12	.
LEAF_NODE	88:12	88:12	12	msg
LEAF_NODE	88:15	88:15	12	.
LEAF_NODE	88:16	88:16	12	formats
ASSIGN_OP	88:24	88:24	10	=
LEAF_NODE	88:24	88:24	11	=
RVAL	88:26	88:26	10	malloc ( fmt_len )
FUNCTION_CALL	88:26	88:40	11	malloc ( fmt_len )
CALLEE	88:26	88:26	12	malloc
LEAF_NODE	88:26	88:26	13	malloc
LEAF_NODE	88:32	88:32	12	(
ARGUMENT	88:33	88:33	12	fmt_len
FIELD	88:33	88:33	13	fmt_len
LEAF_NODE	88:33	88:33	14	fmt_len
LEAF_NODE	88:40	88:40	12	)
LEAF_NODE	88:41	88:41	8	;
SELECTION	89:3	89:37	7	
KEYWORD	89:3	89:3	8	if
LEAF_NODE	89:3	89:3	9	if
LEAF_NODE	89:6	89:6	8	(
CONDITION	89:7	89:7	8	e -> event . msg . formats == NULL
EXPR	89:7	89:31	9	e -> event . msg . formats == NULL
FIELD	89:7	89:20	10	e -> event . msg . formats
LEAF_NODE	89:7	89:7	11	e
LEAF_NODE	89:8	89:8	11	->
LEAF_NODE	89:10	89:10	11	event
LEAF_NODE	89:15	89:15	11	.
LEAF_NODE	89:16	89:16	11	msg
LEAF_NODE	89:19	89:19	11	.
LEAF_NODE	89:20	89:20	11	formats
EQ_OPERATOR	89:28	89:28	10	==
LEAF_NODE	89:28	89:28	11	==
FIELD	89:31	89:31	10	NULL
LEAF_NODE	89:31	89:31	11	NULL
LEAF_NODE	89:35	89:35	8	)
STATEMENTS	89:37	94:3	8	
LEAF_NODE	89:37	89:37	9	{
STATEMENTS	90:4	93:4	9	
LEAF_NODE	90:4	90:4	10	gg_debug_session
LEAF_NODE	90:20	90:20	10	(
LEAF_NODE	90:21	90:21	10	sess
LEAF_NODE	90:25	90:25	10	,
LEAF_NODE	90:27	90:27	10	GG_DEBUG_MISC
LEAF_NODE	90:40	90:40	10	,
LEAF_NODE	91:5	91:5	10	"// gg_session_handle_recv_msg_80() "
LEAF_NODE	92:5	92:5	10	"out of memory\n"
LEAF_NODE	92:22	92:22	10	)
LEAF_NODE	92:23	92:23	10	;
JUMP_STATEMENT	93:4	93:13	10	goto fail ;
KEYWORD	93:4	93:4	11	goto
LEAF_NODE	93:4	93:4	12	goto
DESTINATION	93:9	93:9	11	fail
LEAF_NODE	93:9	93:9	12	fail
LEAF_NODE	93:13	93:13	11	;
LEAF_NODE	94:3	94:3	9	}
LEAF_NODE	95:3	95:3	7	gg_message_html_to_text
LEAF_NODE	95:26	95:26	7	(
LEAF_NODE	95:27	95:27	7	(
LEAF_NODE	95:28	95:28	7	char
LEAF_NODE	95:32	95:32	7	*
LEAF_NODE	95:33	95:33	7	)
LEAF_NODE	95:34	95:34	7	e
LEAF_NODE	95:35	95:35	7	->
LEAF_NODE	95:37	95:37	7	event
LEAF_NODE	95:42	95:42	7	.
LEAF_NODE	95:43	95:43	7	msg
LEAF_NODE	95:46	95:46	7	.
LEAF_NODE	95:47	95:47	7	message
LEAF_NODE	95:54	95:54	7	,
LEAF_NODE	96:4	96:4	7	e
LEAF_NODE	96:5	96:5	7	->
LEAF_NODE	96:7	96:7	7	event
LEAF_NODE	96:12	96:12	7	.
LEAF_NODE	96:13	96:13	7	msg
LEAF_NODE	96:16	96:16	7	.
LEAF_NODE	96:17	96:17	7	formats
LEAF_NODE	96:24	96:24	7	,
LEAF_NODE	96:26	96:26	7	NULL
LEAF_NODE	96:30	96:30	7	,
LEAF_NODE	97:4	97:4	7	packet
LEAF_NODE	97:11	97:11	7	+
LEAF_NODE	97:13	97:13	7	sizeof
LEAF_NODE	97:19	97:19	7	(
LEAF_NODE	97:20	97:20	7	struct
LEAF_NODE	97:27	97:27	7	gg_recv_msg80
LEAF_NODE	97:40	97:40	7	)
LEAF_NODE	97:41	97:41	7	,
LEAF_NODE	98:4	98:4	7	GG_ENCODING_UTF8
LEAF_NODE	98:20	98:20	7	)
LEAF_NODE	98:21	98:21	7	;
LEAF_NODE	99:2	99:2	6	}
SELECTION	99:4	99:9	6	
KEYWORD	99:4	99:4	7	else
LEAF_NODE	99:4	99:4	8	else
STATEMENTS	99:9	109:2	7	
LEAF_NODE	99:9	99:9	8	{
STATEMENTS	100:3	103:3	8	
EXPR_STATEMENT	100:3	102:27	9	e -> event . msg . message = ( unsigned char * ) gg_encoding_convert ( packet + offset_plain , GG_ENCODING_CP1250 , sess -> encoding , - 1 , - 1 ) ;
EXPR	100:3	100:3	10	e -> event . msg . message = ( unsigned char * ) gg_encoding_convert ( packet + offset_plain , GG_ENCODING_CP1250 , sess -> encoding , - 1 , - 1 )
ASSIGN	100:3	100:26	11	e -> event . msg . message = ( unsigned char * ) gg_encoding_convert ( packet + offset_plain , GG_ENCODING_CP1250 , sess -> encoding , - 1 , - 1 )
LVAL	100:3	100:3	12	e -> event . msg . message
FIELD	100:3	100:16	13	e -> event . msg . message
LEAF_NODE	100:3	100:3	14	e
LEAF_NODE	100:4	100:4	14	->
LEAF_NODE	100:6	100:6	14	event
LEAF_NODE	100:11	100:11	14	.
LEAF_NODE	100:12	100:12	14	msg
LEAF_NODE	100:15	100:15	14	.
LEAF_NODE	100:16	100:16	14	message
ASSIGN_OP	100:24	100:24	12	=
LEAF_NODE	100:24	100:24	13	=
RVAL	100:26	100:42	12	( unsigned char * ) gg_encoding_convert ( packet + offset_plain , GG_ENCODING_CP1250 , sess -> encoding , - 1 , - 1 )
LEAF_NODE	100:26	100:26	13	(
TYPE_NAME	100:27	100:36	13	unsigned char
LEAF_NODE	100:27	100:27	14	unsigned
LEAF_NODE	100:36	100:36	14	char
LEAF_NODE	100:40	100:40	13	*
LEAF_NODE	100:41	100:41	13	)
FUNCTION_CALL	100:42	102:26	13	gg_encoding_convert ( packet + offset_plain , GG_ENCODING_CP1250 , sess -> encoding , - 1 , - 1 )
CALLEE	100:42	100:42	14	gg_encoding_convert
LEAF_NODE	100:42	100:42	15	gg_encoding_convert
LEAF_NODE	100:61	100:61	14	(
ARGUMENT	101:4	101:13	14	packet + offset_plain
FIELD	101:4	101:4	15	packet
LEAF_NODE	101:4	101:4	16	packet
LEAF_NODE	101:11	101:11	15	+
FIELD	101:13	101:13	15	offset_plain
LEAF_NODE	101:13	101:13	16	offset_plain
LEAF_NODE	101:25	101:25	14	,
ARGUMENT	101:27	101:27	14	GG_ENCODING_CP1250
FIELD	101:27	101:27	15	GG_ENCODING_CP1250
LEAF_NODE	101:27	101:27	16	GG_ENCODING_CP1250
LEAF_NODE	101:45	101:45	14	,
ARGUMENT	102:4	102:4	14	sess -> encoding
FIELD	102:4	102:10	15	sess -> encoding
LEAF_NODE	102:4	102:4	16	sess
LEAF_NODE	102:8	102:8	16	->
LEAF_NODE	102:10	102:10	16	encoding
LEAF_NODE	102:18	102:18	14	,
ARGUMENT	102:20	102:20	14	- 1
UNARY_EXPR	102:20	102:21	15	- 1
UNARY_OPERATOR	102:20	102:20	16	-
LEAF_NODE	102:20	102:20	17	-
FIELD	102:21	102:21	16	1
LEAF_NODE	102:21	102:21	17	1
LEAF_NODE	102:22	102:22	14	,
ARGUMENT	102:24	102:24	14	- 1
UNARY_EXPR	102:24	102:25	15	- 1
UNARY_OPERATOR	102:24	102:24	16	-
LEAF_NODE	102:24	102:24	17	-
FIELD	102:25	102:25	16	1
LEAF_NODE	102:25	102:25	17	1
LEAF_NODE	102:26	102:26	14	)
LEAF_NODE	102:27	102:27	10	;
SELECTION	103:3	103:37	9	
KEYWORD	103:3	103:3	10	if
LEAF_NODE	103:3	103:3	11	if
LEAF_NODE	103:6	103:6	10	(
CONDITION	103:7	103:7	10	e -> event . msg . message == NULL
EXPR	103:7	103:31	11	e -> event . msg . message == NULL
FIELD	103:7	103:20	12	e -> event . msg . message
LEAF_NODE	103:7	103:7	13	e
LEAF_NODE	103:8	103:8	13	->
LEAF_NODE	103:10	103:10	13	event
LEAF_NODE	103:15	103:15	13	.
LEAF_NODE	103:16	103:16	13	msg
LEAF_NODE	103:19	103:19	13	.
LEAF_NODE	103:20	103:20	13	message
EQ_OPERATOR	103:28	103:28	12	==
LEAF_NODE	103:28	103:28	13	==
FIELD	103:31	103:31	12	NULL
LEAF_NODE	103:31	103:31	13	NULL
LEAF_NODE	103:35	103:35	10	)
STATEMENTS	103:37	108:3	10	
LEAF_NODE	103:37	103:37	11	{
STATEMENTS	104:4	107:4	11	
LEAF_NODE	104:4	104:4	12	gg_debug_session
LEAF_NODE	104:20	104:20	12	(
LEAF_NODE	104:21	104:21	12	sess
LEAF_NODE	104:25	104:25	12	,
LEAF_NODE	104:27	104:27	12	GG_DEBUG_MISC
LEAF_NODE	104:40	104:40	12	,
LEAF_NODE	105:5	105:5	12	"// gg_session_handle_recv_msg_80() "
LEAF_NODE	106:5	106:5	12	"out of memory\n"
LEAF_NODE	106:22	106:22	12	)
LEAF_NODE	106:23	106:23	12	;
JUMP_STATEMENT	107:4	107:13	12	goto fail ;
KEYWORD	107:4	107:4	13	goto
LEAF_NODE	107:4	107:4	14	goto
DESTINATION	107:9	107:9	13	fail
LEAF_NODE	107:9	107:9	14	fail
LEAF_NODE	107:13	107:13	13	;
LEAF_NODE	108:3	108:3	11	}
LEAF_NODE	109:2	109:2	8	}
LEAF_NODE	110:1	110:1	5	}
LEAF_NODE	111:1	111:1	3	if
LEAF_NODE	111:4	111:4	3	(
LEAF_NODE	111:5	111:5	3	offset_plain
LEAF_NODE	111:18	111:18	3	>
LEAF_NODE	111:20	111:20	3	sizeof
LEAF_NODE	111:26	111:26	3	(
LEAF_NODE	111:27	111:27	3	struct
LEAF_NODE	111:34	111:34	3	gg_recv_msg80
LEAF_NODE	111:47	111:47	3	)
LEAF_NODE	111:48	111:48	3	)
LEAF_NODE	111:50	111:50	3	{
STATEMENTS	112:2	115:2	3	
LEAF_NODE	112:2	112:2	4	e
LEAF_NODE	112:3	112:3	4	->
LEAF_NODE	112:5	112:5	4	event
LEAF_NODE	112:10	112:10	4	.
LEAF_NODE	112:11	112:11	4	msg
LEAF_NODE	112:14	112:14	4	.
LEAF_NODE	112:15	112:15	4	xhtml_message
LEAF_NODE	112:29	112:29	4	=
LEAF_NODE	112:31	112:31	4	gg_encoding_convert
LEAF_NODE	112:50	112:50	4	(
LEAF_NODE	113:3	113:3	4	packet
LEAF_NODE	113:10	113:10	4	+
LEAF_NODE	113:12	113:12	4	sizeof
LEAF_NODE	113:18	113:18	4	(
LEAF_NODE	113:19	113:19	4	struct
LEAF_NODE	113:26	113:26	4	gg_recv_msg80
LEAF_NODE	113:39	113:39	4	)
LEAF_NODE	113:40	113:40	4	,
LEAF_NODE	113:42	113:42	4	GG_ENCODING_UTF8
LEAF_NODE	113:58	113:58	4	,
LEAF_NODE	114:3	114:3	4	sess
LEAF_NODE	114:7	114:7	4	->
LEAF_NODE	114:9	114:9	4	encoding
LEAF_NODE	114:17	114:17	4	,
LEAF_NODE	114:19	114:19	4	-
LEAF_NODE	114:20	114:20	4	1
LEAF_NODE	114:21	114:21	4	,
LEAF_NODE	114:23	114:23	4	-
LEAF_NODE	114:24	114:24	4	1
LEAF_NODE	114:25	114:25	4	)
LEAF_NODE	114:26	114:26	4	;
SELECTION	115:2	115:42	4	
KEYWORD	115:2	115:2	5	if
LEAF_NODE	115:2	115:2	6	if
LEAF_NODE	115:5	115:5	5	(
CONDITION	115:6	115:6	5	e -> event . msg . xhtml_message == NULL
EXPR	115:6	115:36	6	e -> event . msg . xhtml_message == NULL
FIELD	115:6	115:19	7	e -> event . msg . xhtml_message
LEAF_NODE	115:6	115:6	8	e
LEAF_NODE	115:7	115:7	8	->
LEAF_NODE	115:9	115:9	8	event
LEAF_NODE	115:14	115:14	8	.
LEAF_NODE	115:15	115:15	8	msg
LEAF_NODE	115:18	115:18	8	.
LEAF_NODE	115:19	115:19	8	xhtml_message
EQ_OPERATOR	115:33	115:33	7	==
LEAF_NODE	115:33	115:33	8	==
FIELD	115:36	115:36	7	NULL
LEAF_NODE	115:36	115:36	8	NULL
LEAF_NODE	115:40	115:40	5	)
STATEMENTS	115:42	118:2	5	
LEAF_NODE	115:42	115:42	6	{
STATEMENTS	116:3	117:3	6	
EXPR_STATEMENT	116:3	116:94	7	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_session_handle_recv_msg_80() out of memory\n" ) ;
EXPR	116:3	116:3	8	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_session_handle_recv_msg_80() out of memory\n" )
FUNCTION_CALL	116:3	116:93	9	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_session_handle_recv_msg_80() out of memory\n" )
CALLEE	116:3	116:3	10	gg_debug_session
LEAF_NODE	116:3	116:3	11	gg_debug_session
LEAF_NODE	116:19	116:19	10	(
ARGUMENT	116:20	116:20	10	sess
FIELD	116:20	116:20	11	sess
LEAF_NODE	116:20	116:20	12	sess
LEAF_NODE	116:24	116:24	10	,
ARGUMENT	116:26	116:26	10	GG_DEBUG_MISC
FIELD	116:26	116:26	11	GG_DEBUG_MISC
LEAF_NODE	116:26	116:26	12	GG_DEBUG_MISC
LEAF_NODE	116:39	116:39	10	,
ARGUMENT	116:41	116:41	10	"// gg_session_handle_recv_msg_80() out of memory\n"
FIELD	116:41	116:41	11	"// gg_session_handle_recv_msg_80() out of memory\n"
LEAF_NODE	116:41	116:41	12	"// gg_session_handle_recv_msg_80() out of memory\n"
LEAF_NODE	116:93	116:93	10	)
LEAF_NODE	116:94	116:94	8	;
JUMP_STATEMENT	117:3	117:12	7	goto fail ;
KEYWORD	117:3	117:3	8	goto
LEAF_NODE	117:3	117:3	9	goto
DESTINATION	117:8	117:8	8	fail
LEAF_NODE	117:8	117:8	9	fail
LEAF_NODE	117:12	117:12	8	;
LEAF_NODE	118:2	118:2	6	}
LEAF_NODE	119:1	119:1	3	}
SELECTION	119:3	119:8	3	
KEYWORD	119:3	119:3	4	else
LEAF_NODE	119:3	119:3	5	else
STATEMENTS	119:8	132:1	4	
LEAF_NODE	119:8	119:8	5	{
STATEMENTS	120:2	129:2	5	
SIMPLE_DECL	120:2	120:12	6	size_t len ;
VAR_DECL	120:2	120:9	7	size_t len
TYPE	120:2	120:2	8	size_t
TYPE_NAME	120:2	120:2	9	size_t
LEAF_NODE	120:2	120:2	10	size_t
NAME	120:9	120:9	8	len
LEAF_NODE	120:9	120:9	9	len
LEAF_NODE	120:12	120:12	7	;
EXPR_STATEMENT	121:2	123:53	6	len = gg_message_text_to_html ( NULL , ( char * ) e -> event . msg . message , sess -> encoding , e -> event . msg . formats , e -> event . msg . formats_length ) ;
EXPR	121:2	121:2	7	len = gg_message_text_to_html ( NULL , ( char * ) e -> event . msg . message , sess -> encoding , e -> event . msg . formats , e -> event . msg . formats_length )
ASSIGN	121:2	121:8	8	len = gg_message_text_to_html ( NULL , ( char * ) e -> event . msg . message , sess -> encoding , e -> event . msg . formats , e -> event . msg . formats_length )
LVAL	121:2	121:2	9	len
FIELD	121:2	121:2	10	len
LEAF_NODE	121:2	121:2	11	len
ASSIGN_OP	121:6	121:6	9	=
LEAF_NODE	121:6	121:6	10	=
RVAL	121:8	121:8	9	gg_message_text_to_html ( NULL , ( char * ) e -> event . msg . message , sess -> encoding , e -> event . msg . formats , e -> event . msg . formats_length )
FUNCTION_CALL	121:8	123:52	10	gg_message_text_to_html ( NULL , ( char * ) e -> event . msg . message , sess -> encoding , e -> event . msg . formats , e -> event . msg . formats_length )
CALLEE	121:8	121:8	11	gg_message_text_to_html
LEAF_NODE	121:8	121:8	12	gg_message_text_to_html
LEAF_NODE	121:31	121:31	11	(
ARGUMENT	121:32	121:32	11	NULL
FIELD	121:32	121:32	12	NULL
LEAF_NODE	121:32	121:32	13	NULL
LEAF_NODE	121:36	121:36	11	,
ARGUMENT	122:3	122:10	11	( char * ) e -> event . msg . message
LEAF_NODE	122:3	122:3	12	(
TYPE_NAME	122:4	122:4	12	char
LEAF_NODE	122:4	122:4	13	char
LEAF_NODE	122:8	122:8	12	*
LEAF_NODE	122:9	122:9	12	)
FIELD	122:10	122:23	12	e -> event . msg . message
LEAF_NODE	122:10	122:10	13	e
LEAF_NODE	122:11	122:11	13	->
LEAF_NODE	122:13	122:13	13	event
LEAF_NODE	122:18	122:18	13	.
LEAF_NODE	122:19	122:19	13	msg
LEAF_NODE	122:22	122:22	13	.
LEAF_NODE	122:23	122:23	13	message
LEAF_NODE	122:30	122:30	11	,
ARGUMENT	122:32	122:32	11	sess -> encoding
FIELD	122:32	122:38	12	sess -> encoding
LEAF_NODE	122:32	122:32	13	sess
LEAF_NODE	122:36	122:36	13	->
LEAF_NODE	122:38	122:38	13	encoding
LEAF_NODE	122:46	122:46	11	,
ARGUMENT	123:3	123:3	11	e -> event . msg . formats
FIELD	123:3	123:16	12	e -> event . msg . formats
LEAF_NODE	123:3	123:3	13	e
LEAF_NODE	123:4	123:4	13	->
LEAF_NODE	123:6	123:6	13	event
LEAF_NODE	123:11	123:11	13	.
LEAF_NODE	123:12	123:12	13	msg
LEAF_NODE	123:15	123:15	13	.
LEAF_NODE	123:16	123:16	13	formats
LEAF_NODE	123:23	123:23	11	,
ARGUMENT	123:25	123:25	11	e -> event . msg . formats_length
FIELD	123:25	123:38	12	e -> event . msg . formats_length
LEAF_NODE	123:25	123:25	13	e
LEAF_NODE	123:26	123:26	13	->
LEAF_NODE	123:28	123:28	13	event
LEAF_NODE	123:33	123:33	13	.
LEAF_NODE	123:34	123:34	13	msg
LEAF_NODE	123:37	123:37	13	.
LEAF_NODE	123:38	123:38	13	formats_length
LEAF_NODE	123:52	123:52	11	)
LEAF_NODE	123:53	123:53	7	;
EXPR_STATEMENT	124:2	124:46	6	e -> event . msg . xhtml_message = malloc ( len + 1 ) ;
EXPR	124:2	124:2	7	e -> event . msg . xhtml_message = malloc ( len + 1 )
ASSIGN	124:2	124:31	8	e -> event . msg . xhtml_message = malloc ( len + 1 )
LVAL	124:2	124:2	9	e -> event . msg . xhtml_message
FIELD	124:2	124:15	10	e -> event . msg . xhtml_message
LEAF_NODE	124:2	124:2	11	e
LEAF_NODE	124:3	124:3	11	->
LEAF_NODE	124:5	124:5	11	event
LEAF_NODE	124:10	124:10	11	.
LEAF_NODE	124:11	124:11	11	msg
LEAF_NODE	124:14	124:14	11	.
LEAF_NODE	124:15	124:15	11	xhtml_message
ASSIGN_OP	124:29	124:29	9	=
LEAF_NODE	124:29	124:29	10	=
RVAL	124:31	124:31	9	malloc ( len + 1 )
FUNCTION_CALL	124:31	124:45	10	malloc ( len + 1 )
CALLEE	124:31	124:31	11	malloc
LEAF_NODE	124:31	124:31	12	malloc
LEAF_NODE	124:37	124:37	11	(
ARGUMENT	124:38	124:44	11	len + 1
FIELD	124:38	124:38	12	len
LEAF_NODE	124:38	124:38	13	len
LEAF_NODE	124:42	124:42	12	+
FIELD	124:44	124:44	12	1
LEAF_NODE	124:44	124:44	13	1
LEAF_NODE	124:45	124:45	11	)
LEAF_NODE	124:46	124:46	7	;
SELECTION	125:2	125:42	6	
KEYWORD	125:2	125:2	7	if
LEAF_NODE	125:2	125:2	8	if
LEAF_NODE	125:5	125:5	7	(
CONDITION	125:6	125:6	7	e -> event . msg . xhtml_message == NULL
EXPR	125:6	125:36	8	e -> event . msg . xhtml_message == NULL
FIELD	125:6	125:19	9	e -> event . msg . xhtml_message
LEAF_NODE	125:6	125:6	10	e
LEAF_NODE	125:7	125:7	10	->
LEAF_NODE	125:9	125:9	10	event
LEAF_NODE	125:14	125:14	10	.
LEAF_NODE	125:15	125:15	10	msg
LEAF_NODE	125:18	125:18	10	.
LEAF_NODE	125:19	125:19	10	xhtml_message
EQ_OPERATOR	125:33	125:33	9	==
LEAF_NODE	125:33	125:33	10	==
FIELD	125:36	125:36	9	NULL
LEAF_NODE	125:36	125:36	10	NULL
LEAF_NODE	125:40	125:40	7	)
STATEMENTS	125:42	128:2	7	
LEAF_NODE	125:42	125:42	8	{
STATEMENTS	126:3	127:3	8	
EXPR_STATEMENT	126:3	126:94	9	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_session_handle_recv_msg_80() out of memory\n" ) ;
EXPR	126:3	126:3	10	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_session_handle_recv_msg_80() out of memory\n" )
FUNCTION_CALL	126:3	126:93	11	gg_debug_session ( sess , GG_DEBUG_MISC , "// gg_session_handle_recv_msg_80() out of memory\n" )
CALLEE	126:3	126:3	12	gg_debug_session
LEAF_NODE	126:3	126:3	13	gg_debug_session
LEAF_NODE	126:19	126:19	12	(
ARGUMENT	126:20	126:20	12	sess
FIELD	126:20	126:20	13	sess
LEAF_NODE	126:20	126:20	14	sess
LEAF_NODE	126:24	126:24	12	,
ARGUMENT	126:26	126:26	12	GG_DEBUG_MISC
FIELD	126:26	126:26	13	GG_DEBUG_MISC
LEAF_NODE	126:26	126:26	14	GG_DEBUG_MISC
LEAF_NODE	126:39	126:39	12	,
ARGUMENT	126:41	126:41	12	"// gg_session_handle_recv_msg_80() out of memory\n"
FIELD	126:41	126:41	13	"// gg_session_handle_recv_msg_80() out of memory\n"
LEAF_NODE	126:41	126:41	14	"// gg_session_handle_recv_msg_80() out of memory\n"
LEAF_NODE	126:93	126:93	12	)
LEAF_NODE	126:94	126:94	10	;
JUMP_STATEMENT	127:3	127:12	9	goto fail ;
KEYWORD	127:3	127:3	10	goto
LEAF_NODE	127:3	127:3	11	goto
DESTINATION	127:8	127:8	10	fail
LEAF_NODE	127:8	127:8	11	fail
LEAF_NODE	127:12	127:12	10	;
LEAF_NODE	128:2	128:2	8	}
EXPR_STATEMENT	129:2	131:53	6	gg_message_text_to_html ( e -> event . msg . xhtml_message , ( char * ) e -> event . msg . message , sess -> encoding , e -> event . msg . formats , e -> event . msg . formats_length ) ;
EXPR	129:2	129:2	7	gg_message_text_to_html ( e -> event . msg . xhtml_message , ( char * ) e -> event . msg . message , sess -> encoding , e -> event . msg . formats , e -> event . msg . formats_length )
FUNCTION_CALL	129:2	131:52	8	gg_message_text_to_html ( e -> event . msg . xhtml_message , ( char * ) e -> event . msg . message , sess -> encoding , e -> event . msg . formats , e -> event . msg . formats_length )
CALLEE	129:2	129:2	9	gg_message_text_to_html
LEAF_NODE	129:2	129:2	10	gg_message_text_to_html
LEAF_NODE	129:25	129:25	9	(
ARGUMENT	129:26	129:26	9	e -> event . msg . xhtml_message
FIELD	129:26	129:39	10	e -> event . msg . xhtml_message
LEAF_NODE	129:26	129:26	11	e
LEAF_NODE	129:27	129:27	11	->
LEAF_NODE	129:29	129:29	11	event
LEAF_NODE	129:34	129:34	11	.
LEAF_NODE	129:35	129:35	11	msg
LEAF_NODE	129:38	129:38	11	.
LEAF_NODE	129:39	129:39	11	xhtml_message
LEAF_NODE	129:52	129:52	9	,
ARGUMENT	130:3	130:10	9	( char * ) e -> event . msg . message
LEAF_NODE	130:3	130:3	10	(
TYPE_NAME	130:4	130:4	10	char
LEAF_NODE	130:4	130:4	11	char
LEAF_NODE	130:8	130:8	10	*
LEAF_NODE	130:9	130:9	10	)
FIELD	130:10	130:23	10	e -> event . msg . message
LEAF_NODE	130:10	130:10	11	e
LEAF_NODE	130:11	130:11	11	->
LEAF_NODE	130:13	130:13	11	event
LEAF_NODE	130:18	130:18	11	.
LEAF_NODE	130:19	130:19	11	msg
LEAF_NODE	130:22	130:22	11	.
LEAF_NODE	130:23	130:23	11	message
LEAF_NODE	130:30	130:30	9	,
ARGUMENT	130:32	130:32	9	sess -> encoding
FIELD	130:32	130:38	10	sess -> encoding
LEAF_NODE	130:32	130:32	11	sess
LEAF_NODE	130:36	130:36	11	->
LEAF_NODE	130:38	130:38	11	encoding
LEAF_NODE	130:46	130:46	9	,
ARGUMENT	131:3	131:3	9	e -> event . msg . formats
FIELD	131:3	131:16	10	e -> event . msg . formats
LEAF_NODE	131:3	131:3	11	e
LEAF_NODE	131:4	131:4	11	->
LEAF_NODE	131:6	131:6	11	event
LEAF_NODE	131:11	131:11	11	.
LEAF_NODE	131:12	131:12	11	msg
LEAF_NODE	131:15	131:15	11	.
LEAF_NODE	131:16	131:16	11	formats
LEAF_NODE	131:23	131:23	9	,
ARGUMENT	131:25	131:25	9	e -> event . msg . formats_length
FIELD	131:25	131:38	10	e -> event . msg . formats_length
LEAF_NODE	131:25	131:25	11	e
LEAF_NODE	131:26	131:26	11	->
LEAF_NODE	131:28	131:28	11	event
LEAF_NODE	131:33	131:33	11	.
LEAF_NODE	131:34	131:34	11	msg
LEAF_NODE	131:37	131:37	11	.
LEAF_NODE	131:38	131:38	11	formats_length
LEAF_NODE	131:52	131:52	9	)
LEAF_NODE	131:53	131:53	7	;
LEAF_NODE	132:1	132:1	5	}
EXPR_STATEMENT	133:1	133:48	3	gg_session_send_msg_ack ( sess , gg_fix32 ( r -> seq ) ) ;
EXPR	133:1	133:1	4	gg_session_send_msg_ack ( sess , gg_fix32 ( r -> seq ) )
FUNCTION_CALL	133:1	133:47	5	gg_session_send_msg_ack ( sess , gg_fix32 ( r -> seq ) )
CALLEE	133:1	133:1	6	gg_session_send_msg_ack
LEAF_NODE	133:1	133:1	7	gg_session_send_msg_ack
LEAF_NODE	133:24	133:24	6	(
ARGUMENT	133:25	133:25	6	sess
FIELD	133:25	133:25	7	sess
LEAF_NODE	133:25	133:25	8	sess
LEAF_NODE	133:29	133:29	6	,
ARGUMENT	133:31	133:31	6	gg_fix32 ( r -> seq )
FUNCTION_CALL	133:31	133:46	7	gg_fix32 ( r -> seq )
CALLEE	133:31	133:31	8	gg_fix32
LEAF_NODE	133:31	133:31	9	gg_fix32
LEAF_NODE	133:39	133:39	8	(
ARGUMENT	133:40	133:40	8	r -> seq
FIELD	133:40	133:43	9	r -> seq
LEAF_NODE	133:40	133:40	10	r
LEAF_NODE	133:41	133:41	10	->
LEAF_NODE	133:43	133:43	10	seq
LEAF_NODE	133:46	133:46	8	)
LEAF_NODE	133:47	133:47	6	)
LEAF_NODE	133:48	133:48	4	;
JUMP_STATEMENT	134:1	134:9	3	return 0 ;
KEYWORD	134:1	134:1	4	return
LEAF_NODE	134:1	134:1	5	return
DESTINATION	134:8	134:8	4	0
EXPR	134:8	134:8	5	0
FIELD	134:8	134:8	6	0
LEAF_NODE	134:8	134:8	7	0
LEAF_NODE	134:9	134:9	4	;
LABEL	135:0	135:4	3	fail :
LEAF_NODE	135:0	135:0	4	fail
LEAF_NODE	135:4	135:4	4	:
EXPR_STATEMENT	136:1	136:27	3	free ( e -> event . msg . message ) ;
EXPR	136:1	136:1	4	free ( e -> event . msg . message )
FUNCTION_CALL	136:1	136:26	5	free ( e -> event . msg . message )
CALLEE	136:1	136:1	6	free
LEAF_NODE	136:1	136:1	7	free
LEAF_NODE	136:5	136:5	6	(
ARGUMENT	136:6	136:6	6	e -> event . msg . message
FIELD	136:6	136:19	7	e -> event . msg . message
LEAF_NODE	136:6	136:6	8	e
LEAF_NODE	136:7	136:7	8	->
LEAF_NODE	136:9	136:9	8	event
LEAF_NODE	136:14	136:14	8	.
LEAF_NODE	136:15	136:15	8	msg
LEAF_NODE	136:18	136:18	8	.
LEAF_NODE	136:19	136:19	8	message
LEAF_NODE	136:26	136:26	6	)
LEAF_NODE	136:27	136:27	4	;
EXPR_STATEMENT	137:1	137:33	3	free ( e -> event . msg . xhtml_message ) ;
EXPR	137:1	137:1	4	free ( e -> event . msg . xhtml_message )
FUNCTION_CALL	137:1	137:32	5	free ( e -> event . msg . xhtml_message )
CALLEE	137:1	137:1	6	free
LEAF_NODE	137:1	137:1	7	free
LEAF_NODE	137:5	137:5	6	(
ARGUMENT	137:6	137:6	6	e -> event . msg . xhtml_message
FIELD	137:6	137:19	7	e -> event . msg . xhtml_message
LEAF_NODE	137:6	137:6	8	e
LEAF_NODE	137:7	137:7	8	->
LEAF_NODE	137:9	137:9	8	event
LEAF_NODE	137:14	137:14	8	.
LEAF_NODE	137:15	137:15	8	msg
LEAF_NODE	137:18	137:18	8	.
LEAF_NODE	137:19	137:19	8	xhtml_message
LEAF_NODE	137:32	137:32	6	)
LEAF_NODE	137:33	137:33	4	;
EXPR_STATEMENT	138:1	138:30	3	free ( e -> event . msg . recipients ) ;
EXPR	138:1	138:1	4	free ( e -> event . msg . recipients )
FUNCTION_CALL	138:1	138:29	5	free ( e -> event . msg . recipients )
CALLEE	138:1	138:1	6	free
LEAF_NODE	138:1	138:1	7	free
LEAF_NODE	138:5	138:5	6	(
ARGUMENT	138:6	138:6	6	e -> event . msg . recipients
FIELD	138:6	138:19	7	e -> event . msg . recipients
LEAF_NODE	138:6	138:6	8	e
LEAF_NODE	138:7	138:7	8	->
LEAF_NODE	138:9	138:9	8	event
LEAF_NODE	138:14	138:14	8	.
LEAF_NODE	138:15	138:15	8	msg
LEAF_NODE	138:18	138:18	8	.
LEAF_NODE	138:19	138:19	8	recipients
LEAF_NODE	138:29	138:29	6	)
LEAF_NODE	138:30	138:30	4	;
EXPR_STATEMENT	139:1	139:27	3	free ( e -> event . msg . formats ) ;
EXPR	139:1	139:1	4	free ( e -> event . msg . formats )
FUNCTION_CALL	139:1	139:26	5	free ( e -> event . msg . formats )
CALLEE	139:1	139:1	6	free
LEAF_NODE	139:1	139:1	7	free
LEAF_NODE	139:5	139:5	6	(
ARGUMENT	139:6	139:6	6	e -> event . msg . formats
FIELD	139:6	139:19	7	e -> event . msg . formats
LEAF_NODE	139:6	139:6	8	e
LEAF_NODE	139:7	139:7	8	->
LEAF_NODE	139:9	139:9	8	event
LEAF_NODE	139:14	139:14	8	.
LEAF_NODE	139:15	139:15	8	msg
LEAF_NODE	139:18	139:18	8	.
LEAF_NODE	139:19	139:19	8	formats
LEAF_NODE	139:26	139:26	6	)
LEAF_NODE	139:27	139:27	4	;
JUMP_STATEMENT	140:1	140:10	3	return - 1 ;
KEYWORD	140:1	140:1	4	return
LEAF_NODE	140:1	140:1	5	return
DESTINATION	140:8	140:8	4	- 1
EXPR	140:8	140:8	5	- 1
UNARY_EXPR	140:8	140:9	6	- 1
UNARY_OPERATOR	140:8	140:8	7	-
LEAF_NODE	140:8	140:8	8	-
FIELD	140:9	140:9	7	1
LEAF_NODE	140:9	140:9	8	1
LEAF_NODE	140:10	140:10	4	;
LABEL	141:0	141:9	3	malformed :
LEAF_NODE	141:0	141:0	4	malformed
LEAF_NODE	141:9	141:9	4	:
EXPR_STATEMENT	142:1	142:24	3	e -> type = GG_EVENT_NONE ;
EXPR	142:1	142:1	4	e -> type = GG_EVENT_NONE
ASSIGN	142:1	142:11	5	e -> type = GG_EVENT_NONE
LVAL	142:1	142:1	6	e -> type
FIELD	142:1	142:4	7	e -> type
LEAF_NODE	142:1	142:1	8	e
LEAF_NODE	142:2	142:2	8	->
LEAF_NODE	142:4	142:4	8	type
ASSIGN_OP	142:9	142:9	6	=
LEAF_NODE	142:9	142:9	7	=
RVAL	142:11	142:11	6	GG_EVENT_NONE
FIELD	142:11	142:11	7	GG_EVENT_NONE
LEAF_NODE	142:11	142:11	8	GG_EVENT_NONE
LEAF_NODE	142:24	142:24	4	;
EXPR_STATEMENT	143:1	143:27	3	free ( e -> event . msg . message ) ;
EXPR	143:1	143:1	4	free ( e -> event . msg . message )
FUNCTION_CALL	143:1	143:26	5	free ( e -> event . msg . message )
CALLEE	143:1	143:1	6	free
LEAF_NODE	143:1	143:1	7	free
LEAF_NODE	143:5	143:5	6	(
ARGUMENT	143:6	143:6	6	e -> event . msg . message
FIELD	143:6	143:19	7	e -> event . msg . message
LEAF_NODE	143:6	143:6	8	e
LEAF_NODE	143:7	143:7	8	->
LEAF_NODE	143:9	143:9	8	event
LEAF_NODE	143:14	143:14	8	.
LEAF_NODE	143:15	143:15	8	msg
LEAF_NODE	143:18	143:18	8	.
LEAF_NODE	143:19	143:19	8	message
LEAF_NODE	143:26	143:26	6	)
LEAF_NODE	143:27	143:27	4	;
EXPR_STATEMENT	144:1	144:33	3	free ( e -> event . msg . xhtml_message ) ;
EXPR	144:1	144:1	4	free ( e -> event . msg . xhtml_message )
FUNCTION_CALL	144:1	144:32	5	free ( e -> event . msg . xhtml_message )
CALLEE	144:1	144:1	6	free
LEAF_NODE	144:1	144:1	7	free
LEAF_NODE	144:5	144:5	6	(
ARGUMENT	144:6	144:6	6	e -> event . msg . xhtml_message
FIELD	144:6	144:19	7	e -> event . msg . xhtml_message
LEAF_NODE	144:6	144:6	8	e
LEAF_NODE	144:7	144:7	8	->
LEAF_NODE	144:9	144:9	8	event
LEAF_NODE	144:14	144:14	8	.
LEAF_NODE	144:15	144:15	8	msg
LEAF_NODE	144:18	144:18	8	.
LEAF_NODE	144:19	144:19	8	xhtml_message
LEAF_NODE	144:32	144:32	6	)
LEAF_NODE	144:33	144:33	4	;
EXPR_STATEMENT	145:1	145:30	3	free ( e -> event . msg . recipients ) ;
EXPR	145:1	145:1	4	free ( e -> event . msg . recipients )
FUNCTION_CALL	145:1	145:29	5	free ( e -> event . msg . recipients )
CALLEE	145:1	145:1	6	free
LEAF_NODE	145:1	145:1	7	free
LEAF_NODE	145:5	145:5	6	(
ARGUMENT	145:6	145:6	6	e -> event . msg . recipients
FIELD	145:6	145:19	7	e -> event . msg . recipients
LEAF_NODE	145:6	145:6	8	e
LEAF_NODE	145:7	145:7	8	->
LEAF_NODE	145:9	145:9	8	event
LEAF_NODE	145:14	145:14	8	.
LEAF_NODE	145:15	145:15	8	msg
LEAF_NODE	145:18	145:18	8	.
LEAF_NODE	145:19	145:19	8	recipients
LEAF_NODE	145:29	145:29	6	)
LEAF_NODE	145:30	145:30	4	;
EXPR_STATEMENT	146:1	146:27	3	free ( e -> event . msg . formats ) ;
EXPR	146:1	146:1	4	free ( e -> event . msg . formats )
FUNCTION_CALL	146:1	146:26	5	free ( e -> event . msg . formats )
CALLEE	146:1	146:1	6	free
LEAF_NODE	146:1	146:1	7	free
LEAF_NODE	146:5	146:5	6	(
ARGUMENT	146:6	146:6	6	e -> event . msg . formats
FIELD	146:6	146:19	7	e -> event . msg . formats
LEAF_NODE	146:6	146:6	8	e
LEAF_NODE	146:7	146:7	8	->
LEAF_NODE	146:9	146:9	8	event
LEAF_NODE	146:14	146:14	8	.
LEAF_NODE	146:15	146:15	8	msg
LEAF_NODE	146:18	146:18	8	.
LEAF_NODE	146:19	146:19	8	formats
LEAF_NODE	146:26	146:26	6	)
LEAF_NODE	146:27	146:27	4	;
EXPR_STATEMENT	147:1	147:48	3	gg_session_send_msg_ack ( sess , gg_fix32 ( r -> seq ) ) ;
EXPR	147:1	147:1	4	gg_session_send_msg_ack ( sess , gg_fix32 ( r -> seq ) )
FUNCTION_CALL	147:1	147:47	5	gg_session_send_msg_ack ( sess , gg_fix32 ( r -> seq ) )
CALLEE	147:1	147:1	6	gg_session_send_msg_ack
LEAF_NODE	147:1	147:1	7	gg_session_send_msg_ack
LEAF_NODE	147:24	147:24	6	(
ARGUMENT	147:25	147:25	6	sess
FIELD	147:25	147:25	7	sess
LEAF_NODE	147:25	147:25	8	sess
LEAF_NODE	147:29	147:29	6	,
ARGUMENT	147:31	147:31	6	gg_fix32 ( r -> seq )
FUNCTION_CALL	147:31	147:46	7	gg_fix32 ( r -> seq )
CALLEE	147:31	147:31	8	gg_fix32
LEAF_NODE	147:31	147:31	9	gg_fix32
LEAF_NODE	147:39	147:39	8	(
ARGUMENT	147:40	147:40	8	r -> seq
FIELD	147:40	147:43	9	r -> seq
LEAF_NODE	147:40	147:40	10	r
LEAF_NODE	147:41	147:41	10	->
LEAF_NODE	147:43	147:43	10	seq
LEAF_NODE	147:46	147:46	8	)
LEAF_NODE	147:47	147:47	6	)
LEAF_NODE	147:48	147:48	4	;
JUMP_STATEMENT	148:1	148:9	3	return 0 ;
KEYWORD	148:1	148:1	4	return
LEAF_NODE	148:1	148:1	5	return
DESTINATION	148:8	148:8	4	0
EXPR	148:8	148:8	5	0
FIELD	148:8	148:8	6	0
LEAF_NODE	148:8	148:8	7	0
LEAF_NODE	148:9	148:9	4	;
LEAF_NODE	149:0	149:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	buddy_idle_changed_cb
LEAF_NODE	2:0	2:0	3	buddy_idle_changed_cb
PARAMETER_LIST	2:21	2:74	2	( PurpleBuddy * buddy , gboolean old_idle , gboolean idle )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:35	3	PurpleBuddy * buddy
TYPE	2:22	2:34	4	PurpleBuddy *
TYPE_NAME	2:22	2:22	5	PurpleBuddy
LEAF_NODE	2:22	2:22	6	PurpleBuddy
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	buddy
LEAF_NODE	2:35	2:35	5	buddy
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:51	3	gboolean old_idle
TYPE	2:42	2:42	4	gboolean
TYPE_NAME	2:42	2:42	5	gboolean
LEAF_NODE	2:42	2:42	6	gboolean
NAME	2:51	2:51	4	old_idle
LEAF_NODE	2:51	2:51	5	old_idle
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	2:61	2:70	3	gboolean idle
TYPE	2:61	2:61	4	gboolean
TYPE_NAME	2:61	2:61	5	gboolean
LEAF_NODE	2:61	2:61	6	gboolean
NAME	2:70	2:70	4	idle
LEAF_NODE	2:70	2:70	5	idle
LEAF_NODE	2:74	2:74	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SIMPLE_DECL	4:1	4:57	3	PurpleAccount * account ; account = purple_buddy_get_account ( buddy ) ;
VAR_DECL	4:1	4:16	4	PurpleAccount * account ; account = purple_buddy_get_account ( buddy )
TYPE	4:1	4:15	5	PurpleAccount *
TYPE_NAME	4:1	4:1	6	PurpleAccount
LEAF_NODE	4:1	4:1	7	PurpleAccount
POINTER	4:15	4:15	6	*
LEAF_NODE	4:15	4:15	7	*
NAME	4:16	4:16	5	account
LEAF_NODE	4:16	4:16	6	account
LEAF_NODE	0:0	0:0	5	;
INIT	4:16	4:16	5	account = purple_buddy_get_account ( buddy )
ASSIGN	4:16	4:26	6	account = purple_buddy_get_account ( buddy )
LVAL	4:16	4:16	7	account
NAME	4:16	4:16	8	account
LEAF_NODE	4:16	4:16	9	account
ASSIGN_OP	4:24	4:24	7	=
LEAF_NODE	4:24	4:24	8	=
RVAL	4:26	4:26	7	purple_buddy_get_account ( buddy )
FUNCTION_CALL	4:26	4:56	8	purple_buddy_get_account ( buddy )
CALLEE	4:26	4:26	9	purple_buddy_get_account
LEAF_NODE	4:26	4:26	10	purple_buddy_get_account
LEAF_NODE	4:50	4:50	9	(
ARGUMENT	4:51	4:51	9	buddy
FIELD	4:51	4:51	10	buddy
LEAF_NODE	4:51	4:51	11	buddy
LEAF_NODE	4:56	4:56	9	)
LEAF_NODE	4:57	4:57	4	;
SIMPLE_DECL	5:1	5:49	3	const gchar * name ; name = purple_buddy_get_name ( buddy ) ;
VAR_DECL	5:1	5:14	4	const gchar * name ; name = purple_buddy_get_name ( buddy )
TYPE	5:1	5:13	5	const gchar *
TYPE_NAME	5:1	5:7	6	const gchar
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	gchar
POINTER	5:13	5:13	6	*
LEAF_NODE	5:13	5:13	7	*
NAME	5:14	5:14	5	name
LEAF_NODE	5:14	5:14	6	name
LEAF_NODE	0:0	0:0	5	;
INIT	5:14	5:14	5	name = purple_buddy_get_name ( buddy )
ASSIGN	5:14	5:21	6	name = purple_buddy_get_name ( buddy )
LVAL	5:14	5:14	7	name
NAME	5:14	5:14	8	name
LEAF_NODE	5:14	5:14	9	name
ASSIGN_OP	5:19	5:19	7	=
LEAF_NODE	5:19	5:19	8	=
RVAL	5:21	5:21	7	purple_buddy_get_name ( buddy )
FUNCTION_CALL	5:21	5:48	8	purple_buddy_get_name ( buddy )
CALLEE	5:21	5:21	9	purple_buddy_get_name
LEAF_NODE	5:21	5:21	10	purple_buddy_get_name
LEAF_NODE	5:42	5:42	9	(
ARGUMENT	5:43	5:43	9	buddy
FIELD	5:43	5:43	10	buddy
LEAF_NODE	5:43	5:43	11	buddy
LEAF_NODE	5:48	5:48	9	)
LEAF_NODE	5:49	5:49	4	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	idle && ! old_idle
EXPR	6:5	6:5	5	idle && ! old_idle
AND	6:5	6:13	6	idle && ! old_idle
EXPR	6:5	6:5	7	idle
FIELD	6:5	6:5	8	idle
LEAF_NODE	6:5	6:5	9	idle
LEAF_NODE	6:10	6:10	7	&&
EXPR	6:13	6:13	7	! old_idle
UNARY_EXPR	6:13	6:14	8	! old_idle
UNARY_OPERATOR	6:13	6:13	9	!
LEAF_NODE	6:13	6:13	10	!
FIELD	6:14	6:14	9	old_idle
LEAF_NODE	6:14	6:14	10	old_idle
LEAF_NODE	6:22	6:22	4	)
STATEMENTS	7:2	7:2	4	
EXPR_STATEMENT	7:2	7:58	5	purple_pounce_execute ( account , name , PURPLE_POUNCE_IDLE ) ;
EXPR	7:2	7:2	6	purple_pounce_execute ( account , name , PURPLE_POUNCE_IDLE )
FUNCTION_CALL	7:2	7:57	7	purple_pounce_execute ( account , name , PURPLE_POUNCE_IDLE )
CALLEE	7:2	7:2	8	purple_pounce_execute
LEAF_NODE	7:2	7:2	9	purple_pounce_execute
LEAF_NODE	7:23	7:23	8	(
ARGUMENT	7:24	7:24	8	account
FIELD	7:24	7:24	9	account
LEAF_NODE	7:24	7:24	10	account
LEAF_NODE	7:31	7:31	8	,
ARGUMENT	7:33	7:33	8	name
FIELD	7:33	7:33	9	name
LEAF_NODE	7:33	7:33	10	name
LEAF_NODE	7:37	7:37	8	,
ARGUMENT	7:39	7:39	8	PURPLE_POUNCE_IDLE
FIELD	7:39	7:39	9	PURPLE_POUNCE_IDLE
LEAF_NODE	7:39	7:39	10	PURPLE_POUNCE_IDLE
LEAF_NODE	7:57	7:57	8	)
LEAF_NODE	7:58	7:58	6	;
SELECTION	8:1	8:6	3	
KEYWORD	8:1	8:1	4	else
LEAF_NODE	8:1	8:1	5	else
STATEMENTS	8:6	8:6	4	
SELECTION	8:6	9:2	5	
KEYWORD	8:6	8:6	6	if
LEAF_NODE	8:6	8:6	7	if
LEAF_NODE	8:9	8:9	6	(
CONDITION	8:10	8:10	6	! idle && old_idle
EXPR	8:10	8:10	7	! idle && old_idle
AND	8:10	8:19	8	! idle && old_idle
EXPR	8:10	8:10	9	! idle
UNARY_EXPR	8:10	8:11	10	! idle
UNARY_OPERATOR	8:10	8:10	11	!
LEAF_NODE	8:10	8:10	12	!
FIELD	8:11	8:11	11	idle
LEAF_NODE	8:11	8:11	12	idle
LEAF_NODE	8:16	8:16	9	&&
EXPR	8:19	8:19	9	old_idle
FIELD	8:19	8:19	10	old_idle
LEAF_NODE	8:19	8:19	11	old_idle
LEAF_NODE	8:27	8:27	6	)
STATEMENTS	9:2	9:2	6	
EXPR_STATEMENT	9:2	9:65	7	purple_pounce_execute ( account , name , PURPLE_POUNCE_IDLE_RETURN ) ;
EXPR	9:2	9:2	8	purple_pounce_execute ( account , name , PURPLE_POUNCE_IDLE_RETURN )
FUNCTION_CALL	9:2	9:64	9	purple_pounce_execute ( account , name , PURPLE_POUNCE_IDLE_RETURN )
CALLEE	9:2	9:2	10	purple_pounce_execute
LEAF_NODE	9:2	9:2	11	purple_pounce_execute
LEAF_NODE	9:23	9:23	10	(
ARGUMENT	9:24	9:24	10	account
FIELD	9:24	9:24	11	account
LEAF_NODE	9:24	9:24	12	account
LEAF_NODE	9:31	9:31	10	,
ARGUMENT	9:33	9:33	10	name
FIELD	9:33	9:33	11	name
LEAF_NODE	9:33	9:33	12	name
LEAF_NODE	9:37	9:37	10	,
ARGUMENT	9:39	9:39	10	PURPLE_POUNCE_IDLE_RETURN
FIELD	9:39	9:39	11	PURPLE_POUNCE_IDLE_RETURN
LEAF_NODE	9:39	9:39	12	PURPLE_POUNCE_IDLE_RETURN
LEAF_NODE	9:64	9:64	10	)
LEAF_NODE	9:65	9:65	8	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	finch_media_finalize
LEAF_NODE	2:0	2:0	3	finch_media_finalize
PARAMETER_LIST	2:21	2:36	2	( GObject * media )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:31	3	GObject * media
TYPE	2:22	2:30	4	GObject *
TYPE_NAME	2:22	2:22	5	GObject
LEAF_NODE	2:22	2:22	6	GObject
POINTER	2:30	2:30	5	*
LEAF_NODE	2:30	2:30	6	*
NAME	2:31	2:31	4	media
LEAF_NODE	2:31	2:31	5	media
LEAF_NODE	2:36	2:36	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SIMPLE_DECL	4:1	4:42	3	FinchMedia * gntmedia ; gntmedia = FINCH_MEDIA ( media ) ;
VAR_DECL	4:1	4:13	4	FinchMedia * gntmedia ; gntmedia = FINCH_MEDIA ( media )
TYPE	4:1	4:12	5	FinchMedia *
TYPE_NAME	4:1	4:1	6	FinchMedia
LEAF_NODE	4:1	4:1	7	FinchMedia
POINTER	4:12	4:12	6	*
LEAF_NODE	4:12	4:12	7	*
NAME	4:13	4:13	5	gntmedia
LEAF_NODE	4:13	4:13	6	gntmedia
LEAF_NODE	0:0	0:0	5	;
INIT	4:13	4:13	5	gntmedia = FINCH_MEDIA ( media )
ASSIGN	4:13	4:24	6	gntmedia = FINCH_MEDIA ( media )
LVAL	4:13	4:13	7	gntmedia
NAME	4:13	4:13	8	gntmedia
LEAF_NODE	4:13	4:13	9	gntmedia
ASSIGN_OP	4:22	4:22	7	=
LEAF_NODE	4:22	4:22	8	=
RVAL	4:24	4:24	7	FINCH_MEDIA ( media )
FUNCTION_CALL	4:24	4:41	8	FINCH_MEDIA ( media )
CALLEE	4:24	4:24	9	FINCH_MEDIA
LEAF_NODE	4:24	4:24	10	FINCH_MEDIA
LEAF_NODE	4:35	4:35	9	(
ARGUMENT	4:36	4:36	9	media
FIELD	4:36	4:36	10	media
LEAF_NODE	4:36	4:36	11	media
LEAF_NODE	4:41	4:41	9	)
LEAF_NODE	4:42	4:42	4	;
EXPR_STATEMENT	5:1	5:56	3	purple_debug_info ( "gntmedia" , "finch_media_finalize\n" ) ;
EXPR	5:1	5:1	4	purple_debug_info ( "gntmedia" , "finch_media_finalize\n" )
FUNCTION_CALL	5:1	5:55	5	purple_debug_info ( "gntmedia" , "finch_media_finalize\n" )
CALLEE	5:1	5:1	6	purple_debug_info
LEAF_NODE	5:1	5:1	7	purple_debug_info
LEAF_NODE	5:18	5:18	6	(
ARGUMENT	5:19	5:19	6	"gntmedia"
FIELD	5:19	5:19	7	"gntmedia"
LEAF_NODE	5:19	5:19	8	"gntmedia"
LEAF_NODE	5:29	5:29	6	,
ARGUMENT	5:31	5:31	6	"finch_media_finalize\n"
FIELD	5:31	5:31	7	"finch_media_finalize\n"
LEAF_NODE	5:31	5:31	8	"finch_media_finalize\n"
LEAF_NODE	5:55	5:55	6	)
LEAF_NODE	5:56	5:56	4	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	gntmedia -> priv -> media
EXPR	6:5	6:5	5	gntmedia -> priv -> media
FIELD	6:5	6:21	6	gntmedia -> priv -> media
LEAF_NODE	6:5	6:5	7	gntmedia
LEAF_NODE	6:13	6:13	7	->
LEAF_NODE	6:15	6:15	7	priv
LEAF_NODE	6:19	6:19	7	->
LEAF_NODE	6:21	6:21	7	media
LEAF_NODE	6:26	6:26	4	)
STATEMENTS	7:2	7:2	4	
EXPR_STATEMENT	7:2	7:39	5	g_object_unref ( gntmedia -> priv -> media ) ;
EXPR	7:2	7:2	6	g_object_unref ( gntmedia -> priv -> media )
FUNCTION_CALL	7:2	7:38	7	g_object_unref ( gntmedia -> priv -> media )
CALLEE	7:2	7:2	8	g_object_unref
LEAF_NODE	7:2	7:2	9	g_object_unref
LEAF_NODE	7:16	7:16	8	(
ARGUMENT	7:17	7:17	8	gntmedia -> priv -> media
FIELD	7:17	7:33	9	gntmedia -> priv -> media
LEAF_NODE	7:17	7:17	10	gntmedia
LEAF_NODE	7:25	7:25	10	->
LEAF_NODE	7:27	7:27	10	priv
LEAF_NODE	7:31	7:31	10	->
LEAF_NODE	7:33	7:33	10	media
LEAF_NODE	7:38	7:38	8	)
LEAF_NODE	7:39	7:39	6	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	27:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	gnt_entry_draw
LEAF_NODE	2:0	2:0	3	gnt_entry_draw
PARAMETER_LIST	2:14	2:32	2	( GntWidget * widget )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:26	3	GntWidget * widget
TYPE	2:15	2:25	4	GntWidget *
TYPE_NAME	2:15	2:15	5	GntWidget
LEAF_NODE	2:15	2:15	6	GntWidget
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	widget
LEAF_NODE	2:26	2:26	5	widget
LEAF_NODE	2:32	2:32	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	26:1	2	
SIMPLE_DECL	4:1	4:36	3	GntEntry * entry ; entry = GNT_ENTRY ( widget ) ;
VAR_DECL	4:1	4:11	4	GntEntry * entry ; entry = GNT_ENTRY ( widget )
TYPE	4:1	4:10	5	GntEntry *
TYPE_NAME	4:1	4:1	6	GntEntry
LEAF_NODE	4:1	4:1	7	GntEntry
POINTER	4:10	4:10	6	*
LEAF_NODE	4:10	4:10	7	*
NAME	4:11	4:11	5	entry
LEAF_NODE	4:11	4:11	6	entry
LEAF_NODE	0:0	0:0	5	;
INIT	4:11	4:11	5	entry = GNT_ENTRY ( widget )
ASSIGN	4:11	4:19	6	entry = GNT_ENTRY ( widget )
LVAL	4:11	4:11	7	entry
NAME	4:11	4:11	8	entry
LEAF_NODE	4:11	4:11	9	entry
ASSIGN_OP	4:17	4:17	7	=
LEAF_NODE	4:17	4:17	8	=
RVAL	4:19	4:19	7	GNT_ENTRY ( widget )
FUNCTION_CALL	4:19	4:35	8	GNT_ENTRY ( widget )
CALLEE	4:19	4:19	9	GNT_ENTRY
LEAF_NODE	4:19	4:19	10	GNT_ENTRY
LEAF_NODE	4:28	4:28	9	(
ARGUMENT	4:29	4:29	9	widget
FIELD	4:29	4:29	10	widget
LEAF_NODE	4:29	4:29	11	widget
LEAF_NODE	4:35	4:35	9	)
LEAF_NODE	4:36	4:36	4	;
SIMPLE_DECL	5:1	5:9	3	int stop ;
VAR_DECL	5:1	5:5	4	int stop
TYPE	5:1	5:1	5	int
TYPE_NAME	5:1	5:1	6	int
LEAF_NODE	5:1	5:1	7	int
NAME	5:5	5:5	5	stop
LEAF_NODE	5:5	5:5	6	stop
LEAF_NODE	5:9	5:9	4	;
SIMPLE_DECL	6:1	6:15	3	gboolean focus ;
VAR_DECL	6:1	6:10	4	gboolean focus
TYPE	6:1	6:1	5	gboolean
TYPE_NAME	6:1	6:1	6	gboolean
LEAF_NODE	6:1	6:1	7	gboolean
NAME	6:10	6:10	5	focus
LEAF_NODE	6:10	6:10	6	focus
LEAF_NODE	6:15	6:15	4	;
SIMPLE_DECL	7:1	7:11	3	int curpos ;
VAR_DECL	7:1	7:5	4	int curpos
TYPE	7:1	7:1	5	int
TYPE_NAME	7:1	7:1	6	int
LEAF_NODE	7:1	7:1	7	int
NAME	7:5	7:5	5	curpos
LEAF_NODE	7:5	7:5	6	curpos
LEAF_NODE	7:11	7:11	4	;
SELECTION	8:1	9:2	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	( focus = gnt_widget_has_focus ( widget ) )
EXPR	8:5	8:42	5	( focus = gnt_widget_has_focus ( widget ) )
LEAF_NODE	8:5	8:5	6	(
ASSIGN	8:6	8:14	6	focus = gnt_widget_has_focus ( widget )
LVAL	8:6	8:6	7	focus
FIELD	8:6	8:6	8	focus
LEAF_NODE	8:6	8:6	9	focus
ASSIGN_OP	8:12	8:12	7	=
LEAF_NODE	8:12	8:12	8	=
RVAL	8:14	8:14	7	gnt_widget_has_focus ( widget )
FUNCTION_CALL	8:14	8:41	8	gnt_widget_has_focus ( widget )
CALLEE	8:14	8:14	9	gnt_widget_has_focus
LEAF_NODE	8:14	8:14	10	gnt_widget_has_focus
LEAF_NODE	8:34	8:34	9	(
ARGUMENT	8:35	8:35	9	widget
FIELD	8:35	8:35	10	widget
LEAF_NODE	8:35	8:35	11	widget
LEAF_NODE	8:41	8:41	9	)
LEAF_NODE	8:42	8:42	6	)
LEAF_NODE	8:43	8:43	4	)
STATEMENTS	9:2	9:2	4	
EXPR_STATEMENT	9:2	9:72	5	wbkgdset ( widget -> window , '\0' | gnt_color_pair ( GNT_COLOR_TEXT_NORMAL ) ) ;
EXPR	9:2	9:2	6	wbkgdset ( widget -> window , '\0' | gnt_color_pair ( GNT_COLOR_TEXT_NORMAL ) )
FUNCTION_CALL	9:2	9:71	7	wbkgdset ( widget -> window , '\0' | gnt_color_pair ( GNT_COLOR_TEXT_NORMAL ) )
CALLEE	9:2	9:2	8	wbkgdset
LEAF_NODE	9:2	9:2	9	wbkgdset
LEAF_NODE	9:10	9:10	8	(
ARGUMENT	9:11	9:11	8	widget -> window
FIELD	9:11	9:19	9	widget -> window
LEAF_NODE	9:11	9:11	10	widget
LEAF_NODE	9:17	9:17	10	->
LEAF_NODE	9:19	9:19	10	window
LEAF_NODE	9:25	9:25	8	,
ARGUMENT	9:27	9:27	8	'\0' | gnt_color_pair ( GNT_COLOR_TEXT_NORMAL )
BIT_OR	9:27	9:34	9	'\0' | gnt_color_pair ( GNT_COLOR_TEXT_NORMAL )
BIT_OR_ELEM	9:27	9:27	10	'\0'
FIELD	9:27	9:27	11	'\0'
LEAF_NODE	9:27	9:27	12	'\0'
LEAF_NODE	9:32	9:32	10	|
BIT_OR_ELEM	9:34	9:34	10	gnt_color_pair ( GNT_COLOR_TEXT_NORMAL )
FUNCTION_CALL	9:34	9:70	11	gnt_color_pair ( GNT_COLOR_TEXT_NORMAL )
CALLEE	9:34	9:34	12	gnt_color_pair
LEAF_NODE	9:34	9:34	13	gnt_color_pair
LEAF_NODE	9:48	9:48	12	(
ARGUMENT	9:49	9:49	12	GNT_COLOR_TEXT_NORMAL
FIELD	9:49	9:49	13	GNT_COLOR_TEXT_NORMAL
LEAF_NODE	9:49	9:49	14	GNT_COLOR_TEXT_NORMAL
LEAF_NODE	9:70	9:70	12	)
LEAF_NODE	9:71	9:71	8	)
LEAF_NODE	9:72	9:72	6	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	else
LEAF_NODE	10:1	10:1	5	else
STATEMENTS	11:2	11:2	4	
EXPR_STATEMENT	11:2	11:72	5	wbkgdset ( widget -> window , '\0' | gnt_color_pair ( GNT_COLOR_HIGHLIGHT_D ) ) ;
EXPR	11:2	11:2	6	wbkgdset ( widget -> window , '\0' | gnt_color_pair ( GNT_COLOR_HIGHLIGHT_D ) )
FUNCTION_CALL	11:2	11:71	7	wbkgdset ( widget -> window , '\0' | gnt_color_pair ( GNT_COLOR_HIGHLIGHT_D ) )
CALLEE	11:2	11:2	8	wbkgdset
LEAF_NODE	11:2	11:2	9	wbkgdset
LEAF_NODE	11:10	11:10	8	(
ARGUMENT	11:11	11:11	8	widget -> window
FIELD	11:11	11:19	9	widget -> window
LEAF_NODE	11:11	11:11	10	widget
LEAF_NODE	11:17	11:17	10	->
LEAF_NODE	11:19	11:19	10	window
LEAF_NODE	11:25	11:25	8	,
ARGUMENT	11:27	11:27	8	'\0' | gnt_color_pair ( GNT_COLOR_HIGHLIGHT_D )
BIT_OR	11:27	11:34	9	'\0' | gnt_color_pair ( GNT_COLOR_HIGHLIGHT_D )
BIT_OR_ELEM	11:27	11:27	10	'\0'
FIELD	11:27	11:27	11	'\0'
LEAF_NODE	11:27	11:27	12	'\0'
LEAF_NODE	11:32	11:32	10	|
BIT_OR_ELEM	11:34	11:34	10	gnt_color_pair ( GNT_COLOR_HIGHLIGHT_D )
FUNCTION_CALL	11:34	11:70	11	gnt_color_pair ( GNT_COLOR_HIGHLIGHT_D )
CALLEE	11:34	11:34	12	gnt_color_pair
LEAF_NODE	11:34	11:34	13	gnt_color_pair
LEAF_NODE	11:48	11:48	12	(
ARGUMENT	11:49	11:49	12	GNT_COLOR_HIGHLIGHT_D
FIELD	11:49	11:49	13	GNT_COLOR_HIGHLIGHT_D
LEAF_NODE	11:49	11:49	14	GNT_COLOR_HIGHLIGHT_D
LEAF_NODE	11:70	11:70	12	)
LEAF_NODE	11:71	11:71	8	)
LEAF_NODE	11:72	11:72	6	;
SELECTION	12:1	13:1	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:4	12:4	4	(
CONDITION	12:5	12:5	4	entry -> masked
EXPR	12:5	12:5	5	entry -> masked
FIELD	12:5	12:12	6	entry -> masked
LEAF_NODE	12:5	12:5	7	entry
LEAF_NODE	12:10	12:10	7	->
LEAF_NODE	12:12	12:12	7	masked
LEAF_NODE	12:18	12:18	4	)
STATEMENTS	13:1	16:1	4	
LEAF_NODE	13:1	13:1	5	{
STATEMENTS	14:2	14:2	5	
EXPR_STATEMENT	14:2	15:56	6	mvwhline ( widget -> window , 0 , 0 , gnt_ascii_only ( ) ? '*' : ACS_BULLET , g_utf8_pointer_to_offset ( entry -> scroll , entry -> end ) ) ;
EXPR	14:2	14:2	7	mvwhline ( widget -> window , 0 , 0 , gnt_ascii_only ( ) ? '*' : ACS_BULLET , g_utf8_pointer_to_offset ( entry -> scroll , entry -> end ) )
FUNCTION_CALL	14:2	15:55	8	mvwhline ( widget -> window , 0 , 0 , gnt_ascii_only ( ) ? '*' : ACS_BULLET , g_utf8_pointer_to_offset ( entry -> scroll , entry -> end ) )
CALLEE	14:2	14:2	9	mvwhline
LEAF_NODE	14:2	14:2	10	mvwhline
LEAF_NODE	14:10	14:10	9	(
ARGUMENT	14:11	14:11	9	widget -> window
FIELD	14:11	14:19	10	widget -> window
LEAF_NODE	14:11	14:11	11	widget
LEAF_NODE	14:17	14:17	11	->
LEAF_NODE	14:19	14:19	11	window
LEAF_NODE	14:25	14:25	9	,
ARGUMENT	14:27	14:27	9	0
FIELD	14:27	14:27	10	0
LEAF_NODE	14:27	14:27	11	0
LEAF_NODE	14:28	14:28	9	,
ARGUMENT	14:30	14:30	9	0
FIELD	14:30	14:30	10	0
LEAF_NODE	14:30	14:30	11	0
LEAF_NODE	14:31	14:31	9	,
ARGUMENT	14:33	14:33	9	gnt_ascii_only ( ) ? '*' : ACS_BULLET
COND_EXPR	14:33	14:58	10	gnt_ascii_only ( ) ? '*' : ACS_BULLET
CONDITION	14:33	14:33	11	gnt_ascii_only ( )
FUNCTION_CALL	14:33	14:48	12	gnt_ascii_only ( )
CALLEE	14:33	14:33	13	gnt_ascii_only
LEAF_NODE	14:33	14:33	14	gnt_ascii_only
LEAF_NODE	14:47	14:47	13	(
LEAF_NODE	14:48	14:48	13	)
LEAF_NODE	14:50	14:50	11	?
EXPR	14:52	14:52	11	'*'
FIELD	14:52	14:52	12	'*'
LEAF_NODE	14:52	14:52	13	'*'
LEAF_NODE	14:56	14:56	11	:
FIELD	14:58	14:58	11	ACS_BULLET
LEAF_NODE	14:58	14:58	12	ACS_BULLET
LEAF_NODE	14:68	14:68	9	,
ARGUMENT	15:4	15:4	9	g_utf8_pointer_to_offset ( entry -> scroll , entry -> end )
FUNCTION_CALL	15:4	15:54	10	g_utf8_pointer_to_offset ( entry -> scroll , entry -> end )
CALLEE	15:4	15:4	11	g_utf8_pointer_to_offset
LEAF_NODE	15:4	15:4	12	g_utf8_pointer_to_offset
LEAF_NODE	15:28	15:28	11	(
ARGUMENT	15:29	15:29	11	entry -> scroll
FIELD	15:29	15:36	12	entry -> scroll
LEAF_NODE	15:29	15:29	13	entry
LEAF_NODE	15:34	15:34	13	->
LEAF_NODE	15:36	15:36	13	scroll
LEAF_NODE	15:42	15:42	11	,
ARGUMENT	15:44	15:44	11	entry -> end
FIELD	15:44	15:51	12	entry -> end
LEAF_NODE	15:44	15:44	13	entry
LEAF_NODE	15:49	15:49	13	->
LEAF_NODE	15:51	15:51	13	end
LEAF_NODE	15:54	15:54	11	)
LEAF_NODE	15:55	15:55	9	)
LEAF_NODE	15:56	15:56	7	;
LEAF_NODE	16:1	16:1	5	}
SELECTION	17:1	18:2	3	
KEYWORD	17:1	17:1	4	else
LEAF_NODE	17:1	17:1	5	else
STATEMENTS	18:2	18:2	4	
EXPR_STATEMENT	18:2	18:58	5	mvwprintw ( widget -> window , 0 , 0 , "%s" , C_ ( entry -> scroll ) ) ;
EXPR	18:2	18:2	6	mvwprintw ( widget -> window , 0 , 0 , "%s" , C_ ( entry -> scroll ) )
FUNCTION_CALL	18:2	18:57	7	mvwprintw ( widget -> window , 0 , 0 , "%s" , C_ ( entry -> scroll ) )
CALLEE	18:2	18:2	8	mvwprintw
LEAF_NODE	18:2	18:2	9	mvwprintw
LEAF_NODE	18:11	18:11	8	(
ARGUMENT	18:12	18:12	8	widget -> window
FIELD	18:12	18:20	9	widget -> window
LEAF_NODE	18:12	18:12	10	widget
LEAF_NODE	18:18	18:18	10	->
LEAF_NODE	18:20	18:20	10	window
LEAF_NODE	18:26	18:26	8	,
ARGUMENT	18:28	18:28	8	0
FIELD	18:28	18:28	9	0
LEAF_NODE	18:28	18:28	10	0
LEAF_NODE	18:29	18:29	8	,
ARGUMENT	18:31	18:31	8	0
FIELD	18:31	18:31	9	0
LEAF_NODE	18:31	18:31	10	0
LEAF_NODE	18:32	18:32	8	,
ARGUMENT	18:34	18:34	8	"%s"
FIELD	18:34	18:34	9	"%s"
LEAF_NODE	18:34	18:34	10	"%s"
LEAF_NODE	18:38	18:38	8	,
ARGUMENT	18:40	18:40	8	C_ ( entry -> scroll )
FUNCTION_CALL	18:40	18:56	9	C_ ( entry -> scroll )
CALLEE	18:40	18:40	10	C_
LEAF_NODE	18:40	18:40	11	C_
LEAF_NODE	18:42	18:42	10	(
ARGUMENT	18:43	18:43	10	entry -> scroll
FIELD	18:43	18:50	11	entry -> scroll
LEAF_NODE	18:43	18:43	12	entry
LEAF_NODE	18:48	18:48	12	->
LEAF_NODE	18:50	18:50	12	scroll
LEAF_NODE	18:56	18:56	10	)
LEAF_NODE	18:57	18:57	8	)
LEAF_NODE	18:58	18:58	6	;
EXPR_STATEMENT	19:1	19:58	3	stop = gnt_util_onscreen_width ( entry -> scroll , entry -> end ) ;
EXPR	19:1	19:1	4	stop = gnt_util_onscreen_width ( entry -> scroll , entry -> end )
ASSIGN	19:1	19:8	5	stop = gnt_util_onscreen_width ( entry -> scroll , entry -> end )
LVAL	19:1	19:1	6	stop
FIELD	19:1	19:1	7	stop
LEAF_NODE	19:1	19:1	8	stop
ASSIGN_OP	19:6	19:6	6	=
LEAF_NODE	19:6	19:6	7	=
RVAL	19:8	19:8	6	gnt_util_onscreen_width ( entry -> scroll , entry -> end )
FUNCTION_CALL	19:8	19:57	7	gnt_util_onscreen_width ( entry -> scroll , entry -> end )
CALLEE	19:8	19:8	8	gnt_util_onscreen_width
LEAF_NODE	19:8	19:8	9	gnt_util_onscreen_width
LEAF_NODE	19:31	19:31	8	(
ARGUMENT	19:32	19:32	8	entry -> scroll
FIELD	19:32	19:39	9	entry -> scroll
LEAF_NODE	19:32	19:32	10	entry
LEAF_NODE	19:37	19:37	10	->
LEAF_NODE	19:39	19:39	10	scroll
LEAF_NODE	19:45	19:45	8	,
ARGUMENT	19:47	19:47	8	entry -> end
FIELD	19:47	19:54	9	entry -> end
LEAF_NODE	19:47	19:47	10	entry
LEAF_NODE	19:52	19:52	10	->
LEAF_NODE	19:54	19:54	10	end
LEAF_NODE	19:57	19:57	8	)
LEAF_NODE	19:58	19:58	4	;
SELECTION	20:1	21:2	3	
KEYWORD	20:1	20:1	4	if
LEAF_NODE	20:1	20:1	5	if
LEAF_NODE	20:4	20:4	4	(
CONDITION	20:5	20:5	4	stop < widget -> priv . width
EXPR	20:5	20:12	5	stop < widget -> priv . width
FIELD	20:5	20:5	6	stop
LEAF_NODE	20:5	20:5	7	stop
REL_OPERATOR	20:10	20:10	6	<
LEAF_NODE	20:10	20:10	7	<
FIELD	20:12	20:25	6	widget -> priv . width
LEAF_NODE	20:12	20:12	7	widget
LEAF_NODE	20:18	20:18	7	->
LEAF_NODE	20:20	20:20	7	priv
LEAF_NODE	20:24	20:24	7	.
LEAF_NODE	20:25	20:25	7	width
LEAF_NODE	20:30	20:30	4	)
STATEMENTS	21:2	21:2	4	
EXPR_STATEMENT	21:2	21:74	5	mvwhline ( widget -> window , 0 , stop , ENTRY_CHAR , widget -> priv . width - stop ) ;
EXPR	21:2	21:2	6	mvwhline ( widget -> window , 0 , stop , ENTRY_CHAR , widget -> priv . width - stop )
FUNCTION_CALL	21:2	21:73	7	mvwhline ( widget -> window , 0 , stop , ENTRY_CHAR , widget -> priv . width - stop )
CALLEE	21:2	21:2	8	mvwhline
LEAF_NODE	21:2	21:2	9	mvwhline
LEAF_NODE	21:10	21:10	8	(
ARGUMENT	21:11	21:11	8	widget -> window
FIELD	21:11	21:19	9	widget -> window
LEAF_NODE	21:11	21:11	10	widget
LEAF_NODE	21:17	21:17	10	->
LEAF_NODE	21:19	21:19	10	window
LEAF_NODE	21:25	21:25	8	,
ARGUMENT	21:27	21:27	8	0
FIELD	21:27	21:27	9	0
LEAF_NODE	21:27	21:27	10	0
LEAF_NODE	21:28	21:28	8	,
ARGUMENT	21:30	21:30	8	stop
FIELD	21:30	21:30	9	stop
LEAF_NODE	21:30	21:30	10	stop
LEAF_NODE	21:34	21:34	8	,
ARGUMENT	21:36	21:36	8	ENTRY_CHAR
FIELD	21:36	21:36	9	ENTRY_CHAR
LEAF_NODE	21:36	21:36	10	ENTRY_CHAR
LEAF_NODE	21:46	21:46	8	,
ARGUMENT	21:48	21:69	8	widget -> priv . width - stop
FIELD	21:48	21:61	9	widget -> priv . width
LEAF_NODE	21:48	21:48	10	widget
LEAF_NODE	21:54	21:54	10	->
LEAF_NODE	21:56	21:56	10	priv
LEAF_NODE	21:60	21:60	10	.
LEAF_NODE	21:61	21:61	10	width
LEAF_NODE	21:67	21:67	9	-
FIELD	21:69	21:69	9	stop
LEAF_NODE	21:69	21:69	10	stop
LEAF_NODE	21:73	21:73	8	)
LEAF_NODE	21:74	21:74	6	;
EXPR_STATEMENT	22:1	22:63	3	curpos = gnt_util_onscreen_width ( entry -> scroll , entry -> cursor ) ;
EXPR	22:1	22:1	4	curpos = gnt_util_onscreen_width ( entry -> scroll , entry -> cursor )
ASSIGN	22:1	22:10	5	curpos = gnt_util_onscreen_width ( entry -> scroll , entry -> cursor )
LVAL	22:1	22:1	6	curpos
FIELD	22:1	22:1	7	curpos
LEAF_NODE	22:1	22:1	8	curpos
ASSIGN_OP	22:8	22:8	6	=
LEAF_NODE	22:8	22:8	7	=
RVAL	22:10	22:10	6	gnt_util_onscreen_width ( entry -> scroll , entry -> cursor )
FUNCTION_CALL	22:10	22:62	7	gnt_util_onscreen_width ( entry -> scroll , entry -> cursor )
CALLEE	22:10	22:10	8	gnt_util_onscreen_width
LEAF_NODE	22:10	22:10	9	gnt_util_onscreen_width
LEAF_NODE	22:33	22:33	8	(
ARGUMENT	22:34	22:34	8	entry -> scroll
FIELD	22:34	22:41	9	entry -> scroll
LEAF_NODE	22:34	22:34	10	entry
LEAF_NODE	22:39	22:39	10	->
LEAF_NODE	22:41	22:41	10	scroll
LEAF_NODE	22:47	22:47	8	,
ARGUMENT	22:49	22:49	8	entry -> cursor
FIELD	22:49	22:56	9	entry -> cursor
LEAF_NODE	22:49	22:49	10	entry
LEAF_NODE	22:54	22:54	10	->
LEAF_NODE	22:56	22:56	10	cursor
LEAF_NODE	22:62	22:62	8	)
LEAF_NODE	22:63	22:63	4	;
SELECTION	23:1	24:2	3	
KEYWORD	23:1	23:1	4	if
LEAF_NODE	23:1	23:1	5	if
LEAF_NODE	23:4	23:4	4	(
CONDITION	23:5	23:5	4	focus
EXPR	23:5	23:5	5	focus
FIELD	23:5	23:5	6	focus
LEAF_NODE	23:5	23:5	7	focus
LEAF_NODE	23:10	23:10	4	)
STATEMENTS	24:2	24:2	4	
EXPR_STATEMENT	24:2	24:80	5	mvwchgat ( widget -> window , 0 , curpos , 1 , A_REVERSE , GNT_COLOR_TEXT_NORMAL , NULL ) ;
EXPR	24:2	24:2	6	mvwchgat ( widget -> window , 0 , curpos , 1 , A_REVERSE , GNT_COLOR_TEXT_NORMAL , NULL )
FUNCTION_CALL	24:2	24:79	7	mvwchgat ( widget -> window , 0 , curpos , 1 , A_REVERSE , GNT_COLOR_TEXT_NORMAL , NULL )
CALLEE	24:2	24:2	8	mvwchgat
LEAF_NODE	24:2	24:2	9	mvwchgat
LEAF_NODE	24:10	24:10	8	(
ARGUMENT	24:11	24:11	8	widget -> window
FIELD	24:11	24:19	9	widget -> window
LEAF_NODE	24:11	24:11	10	widget
LEAF_NODE	24:17	24:17	10	->
LEAF_NODE	24:19	24:19	10	window
LEAF_NODE	24:25	24:25	8	,
ARGUMENT	24:27	24:27	8	0
FIELD	24:27	24:27	9	0
LEAF_NODE	24:27	24:27	10	0
LEAF_NODE	24:28	24:28	8	,
ARGUMENT	24:30	24:30	8	curpos
FIELD	24:30	24:30	9	curpos
LEAF_NODE	24:30	24:30	10	curpos
LEAF_NODE	24:36	24:36	8	,
ARGUMENT	24:38	24:38	8	1
FIELD	24:38	24:38	9	1
LEAF_NODE	24:38	24:38	10	1
LEAF_NODE	24:39	24:39	8	,
ARGUMENT	24:41	24:41	8	A_REVERSE
FIELD	24:41	24:41	9	A_REVERSE
LEAF_NODE	24:41	24:41	10	A_REVERSE
LEAF_NODE	24:50	24:50	8	,
ARGUMENT	24:52	24:52	8	GNT_COLOR_TEXT_NORMAL
FIELD	24:52	24:52	9	GNT_COLOR_TEXT_NORMAL
LEAF_NODE	24:52	24:52	10	GNT_COLOR_TEXT_NORMAL
LEAF_NODE	24:73	24:73	8	,
ARGUMENT	24:75	24:75	8	NULL
FIELD	24:75	24:75	9	NULL
LEAF_NODE	24:75	24:75	10	NULL
LEAF_NODE	24:79	24:79	8	)
LEAF_NODE	24:80	24:80	6	;
EXPR_STATEMENT	25:1	25:39	3	( void ) wmove ( widget -> window , 0 , curpos ) ;
EXPR	25:1	25:7	4	( void ) wmove ( widget -> window , 0 , curpos )
LEAF_NODE	25:1	25:1	5	(
TYPE_NAME	25:2	25:2	5	void
LEAF_NODE	25:2	25:2	6	void
LEAF_NODE	25:6	25:6	5	)
FUNCTION_CALL	25:7	25:38	5	wmove ( widget -> window , 0 , curpos )
CALLEE	25:7	25:7	6	wmove
LEAF_NODE	25:7	25:7	7	wmove
LEAF_NODE	25:12	25:12	6	(
ARGUMENT	25:13	25:13	6	widget -> window
FIELD	25:13	25:21	7	widget -> window
LEAF_NODE	25:13	25:13	8	widget
LEAF_NODE	25:19	25:19	8	->
LEAF_NODE	25:21	25:21	8	window
LEAF_NODE	25:27	25:27	6	,
ARGUMENT	25:29	25:29	6	0
FIELD	25:29	25:29	7	0
LEAF_NODE	25:29	25:29	8	0
LEAF_NODE	25:30	25:30	6	,
ARGUMENT	25:32	25:32	6	curpos
FIELD	25:32	25:32	7	curpos
LEAF_NODE	25:32	25:32	8	curpos
LEAF_NODE	25:38	25:38	6	)
LEAF_NODE	25:39	25:39	4	;
EXPR_STATEMENT	26:1	26:9	3	GNTDEBUG ;
EXPR	26:1	26:1	4	GNTDEBUG
FIELD	26:1	26:1	5	GNTDEBUG
LEAF_NODE	26:1	26:1	6	GNTDEBUG
LEAF_NODE	26:9	26:9	4	;
LEAF_NODE	27:0	27:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	161:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	silcpurple_attrs_cb
LEAF_NODE	2:0	2:0	3	silcpurple_attrs_cb
PARAMETER_LIST	2:19	2:69	2	( PurpleConnection * gc , PurpleRequestFields * fields )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:38	3	PurpleConnection * gc
TYPE	2:20	2:37	4	PurpleConnection *
TYPE_NAME	2:20	2:20	5	PurpleConnection
LEAF_NODE	2:20	2:20	6	PurpleConnection
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	gc
LEAF_NODE	2:38	2:38	5	gc
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:63	3	PurpleRequestFields * fields
TYPE	2:42	2:62	4	PurpleRequestFields *
TYPE_NAME	2:42	2:42	5	PurpleRequestFields
LEAF_NODE	2:42	2:42	6	PurpleRequestFields
POINTER	2:62	2:62	5	*
LEAF_NODE	2:62	2:62	6	*
NAME	2:63	2:63	4	fields
LEAF_NODE	2:63	2:63	5	fields
LEAF_NODE	2:69	2:69	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	157:1	2	
SIMPLE_DECL	4:1	4:31	3	SilcPurple sg ; sg = gc -> proto_data ;
VAR_DECL	4:1	4:12	4	SilcPurple sg ; sg = gc -> proto_data
TYPE	4:1	4:1	5	SilcPurple
TYPE_NAME	4:1	4:1	6	SilcPurple
LEAF_NODE	4:1	4:1	7	SilcPurple
NAME	4:12	4:12	5	sg
LEAF_NODE	4:12	4:12	6	sg
LEAF_NODE	0:0	0:0	5	;
INIT	4:12	4:12	5	sg = gc -> proto_data
ASSIGN	4:12	4:17	6	sg = gc -> proto_data
LVAL	4:12	4:12	7	sg
NAME	4:12	4:12	8	sg
LEAF_NODE	4:12	4:12	9	sg
ASSIGN_OP	4:15	4:15	7	=
LEAF_NODE	4:15	4:15	8	=
RVAL	4:17	4:17	7	gc -> proto_data
FIELD	4:17	4:21	8	gc -> proto_data
LEAF_NODE	4:17	4:17	9	gc
LEAF_NODE	4:19	4:19	9	->
LEAF_NODE	4:21	4:21	9	proto_data
LEAF_NODE	4:31	4:31	4	;
SIMPLE_DECL	5:1	5:31	3	SilcClient client ; client = sg -> client ;
VAR_DECL	5:1	5:12	4	SilcClient client ; client = sg -> client
TYPE	5:1	5:1	5	SilcClient
TYPE_NAME	5:1	5:1	6	SilcClient
LEAF_NODE	5:1	5:1	7	SilcClient
NAME	5:12	5:12	5	client
LEAF_NODE	5:12	5:12	6	client
LEAF_NODE	0:0	0:0	5	;
INIT	5:12	5:12	5	client = sg -> client
ASSIGN	5:12	5:21	6	client = sg -> client
LVAL	5:12	5:12	7	client
NAME	5:12	5:12	8	client
LEAF_NODE	5:12	5:12	9	client
ASSIGN_OP	5:19	5:19	7	=
LEAF_NODE	5:19	5:19	8	=
RVAL	5:21	5:21	7	sg -> client
FIELD	5:21	5:25	8	sg -> client
LEAF_NODE	5:21	5:21	9	sg
LEAF_NODE	5:23	5:23	9	->
LEAF_NODE	5:25	5:25	9	client
LEAF_NODE	5:31	5:31	4	;
SIMPLE_DECL	6:1	6:37	3	SilcClientConnection conn ; conn = sg -> conn ;
VAR_DECL	6:1	6:22	4	SilcClientConnection conn ; conn = sg -> conn
TYPE	6:1	6:1	5	SilcClientConnection
TYPE_NAME	6:1	6:1	6	SilcClientConnection
LEAF_NODE	6:1	6:1	7	SilcClientConnection
NAME	6:22	6:22	5	conn
LEAF_NODE	6:22	6:22	6	conn
LEAF_NODE	0:0	0:0	5	;
INIT	6:22	6:22	5	conn = sg -> conn
ASSIGN	6:22	6:29	6	conn = sg -> conn
LVAL	6:22	6:22	7	conn
NAME	6:22	6:22	8	conn
LEAF_NODE	6:22	6:22	9	conn
ASSIGN_OP	6:27	6:27	7	=
LEAF_NODE	6:27	6:27	8	=
RVAL	6:29	6:29	7	sg -> conn
FIELD	6:29	6:33	8	sg -> conn
LEAF_NODE	6:29	6:29	9	sg
LEAF_NODE	6:31	6:31	9	->
LEAF_NODE	6:33	6:33	9	conn
LEAF_NODE	6:37	6:37	4	;
SIMPLE_DECL	7:1	7:22	3	PurpleRequestField * f ;
VAR_DECL	7:1	7:21	4	PurpleRequestField * f
TYPE	7:1	7:20	5	PurpleRequestField *
TYPE_NAME	7:1	7:1	6	PurpleRequestField
LEAF_NODE	7:1	7:1	7	PurpleRequestField
POINTER	7:20	7:20	6	*
LEAF_NODE	7:20	7:20	7	*
NAME	7:21	7:21	5	f
LEAF_NODE	7:21	7:21	6	f
LEAF_NODE	7:22	7:22	4	;
SIMPLE_DECL	8:1	8:10	3	char * tmp ;
VAR_DECL	8:1	8:7	4	char * tmp
TYPE	8:1	8:6	5	char *
TYPE_NAME	8:1	8:1	6	char
LEAF_NODE	8:1	8:1	7	char
POINTER	8:6	8:6	6	*
LEAF_NODE	8:6	8:6	7	*
NAME	8:7	8:7	5	tmp
LEAF_NODE	8:7	8:7	6	tmp
LEAF_NODE	8:10	8:10	4	;
SIMPLE_DECL	9:1	9:25	3	SilcUInt32 tmp_len , SilcUInt32 mask ;
INIT_DECL_LIST	9:1	9:1	4	SilcUInt32 tmp_len , SilcUInt32 mask
VAR_DECL	9:1	9:12	5	SilcUInt32 tmp_len
TYPE	9:1	9:1	6	SilcUInt32
TYPE_NAME	9:1	9:1	7	SilcUInt32
LEAF_NODE	9:1	9:1	8	SilcUInt32
NAME	9:12	9:12	6	tmp_len
LEAF_NODE	9:12	9:12	7	tmp_len
LEAF_NODE	9:19	9:19	5	,
VAR_DECL	9:1	9:21	5	SilcUInt32 mask
TYPE	9:1	9:1	6	SilcUInt32
TYPE_NAME	9:1	9:1	7	SilcUInt32
LEAF_NODE	9:1	9:1	8	SilcUInt32
NAME	9:21	9:21	6	mask
LEAF_NODE	9:21	9:21	7	mask
LEAF_NODE	9:25	9:25	4	;
SIMPLE_DECL	10:1	10:32	3	SilcAttributeObjService service ;
VAR_DECL	10:1	10:25	4	SilcAttributeObjService service
TYPE	10:1	10:1	5	SilcAttributeObjService
TYPE_NAME	10:1	10:1	6	SilcAttributeObjService
LEAF_NODE	10:1	10:1	7	SilcAttributeObjService
NAME	10:25	10:25	5	service
LEAF_NODE	10:25	10:25	6	service
LEAF_NODE	10:32	10:32	4	;
SIMPLE_DECL	11:1	11:27	3	SilcAttributeObjDevice dev ;
VAR_DECL	11:1	11:24	4	SilcAttributeObjDevice dev
TYPE	11:1	11:1	5	SilcAttributeObjDevice
TYPE_NAME	11:1	11:1	6	SilcAttributeObjDevice
LEAF_NODE	11:1	11:1	7	SilcAttributeObjDevice
NAME	11:24	11:24	5	dev
LEAF_NODE	11:24	11:24	6	dev
LEAF_NODE	11:27	11:27	4	;
SIMPLE_DECL	12:1	12:22	3	SilcVCardStruct vcard ;
VAR_DECL	12:1	12:17	4	SilcVCardStruct vcard
TYPE	12:1	12:1	5	SilcVCardStruct
TYPE_NAME	12:1	12:1	6	SilcVCardStruct
LEAF_NODE	12:1	12:1	7	SilcVCardStruct
NAME	12:17	12:17	5	vcard
LEAF_NODE	12:17	12:17	6	vcard
LEAF_NODE	12:22	12:22	4	;
SIMPLE_DECL	13:1	13:16	3	const char * val ;
VAR_DECL	13:1	13:13	4	const char * val
TYPE	13:1	13:12	5	const char *
TYPE_NAME	13:1	13:7	6	const char
LEAF_NODE	13:1	13:1	7	const
LEAF_NODE	13:7	13:7	7	char
POINTER	13:12	13:12	6	*
LEAF_NODE	13:12	13:12	7	*
NAME	13:13	13:13	5	val
LEAF_NODE	13:13	13:13	6	val
LEAF_NODE	13:16	13:16	4	;
EXPR_STATEMENT	14:1	14:20	3	sg = gc -> proto_data ;
EXPR	14:1	14:1	4	sg = gc -> proto_data
ASSIGN	14:1	14:6	5	sg = gc -> proto_data
LVAL	14:1	14:1	6	sg
FIELD	14:1	14:1	7	sg
LEAF_NODE	14:1	14:1	8	sg
ASSIGN_OP	14:4	14:4	6	=
LEAF_NODE	14:4	14:4	7	=
RVAL	14:6	14:6	6	gc -> proto_data
FIELD	14:6	14:10	7	gc -> proto_data
LEAF_NODE	14:6	14:6	8	gc
LEAF_NODE	14:8	14:8	8	->
LEAF_NODE	14:10	14:10	8	proto_data
LEAF_NODE	14:20	14:20	4	;
SELECTION	15:1	16:2	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:4	15:4	4	(
CONDITION	15:5	15:5	4	! sg
EXPR	15:5	15:5	5	! sg
UNARY_EXPR	15:5	15:6	6	! sg
UNARY_OPERATOR	15:5	15:5	7	!
LEAF_NODE	15:5	15:5	8	!
FIELD	15:6	15:6	7	sg
LEAF_NODE	15:6	15:6	8	sg
LEAF_NODE	15:8	15:8	4	)
STATEMENTS	16:2	16:2	4	
JUMP_STATEMENT	16:2	16:8	5	return DESTINATION ;
KEYWORD	16:2	16:2	6	return
LEAF_NODE	16:2	16:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	16:8	16:8	6	;
EXPR_STATEMENT	17:1	17:37	3	memset ( & service , 0 , sizeof ( service ) ) ;
EXPR	17:1	17:1	4	memset ( & service , 0 , sizeof ( service ) )
FUNCTION_CALL	17:1	17:36	5	memset ( & service , 0 , sizeof ( service ) )
CALLEE	17:1	17:1	6	memset
LEAF_NODE	17:1	17:1	7	memset
LEAF_NODE	17:7	17:7	6	(
ARGUMENT	17:8	17:8	6	& service
UNARY_EXPR	17:8	17:9	7	& service
UNARY_OPERATOR	17:8	17:8	8	&
LEAF_NODE	17:8	17:8	9	&
FIELD	17:9	17:9	8	service
LEAF_NODE	17:9	17:9	9	service
LEAF_NODE	17:16	17:16	6	,
ARGUMENT	17:18	17:18	6	0
FIELD	17:18	17:18	7	0
LEAF_NODE	17:18	17:18	8	0
LEAF_NODE	17:19	17:19	6	,
ARGUMENT	17:21	17:21	6	sizeof ( service )
FUNCTION_CALL	17:21	17:35	7	sizeof ( service )
CALLEE	17:21	17:21	8	sizeof
LEAF_NODE	17:21	17:21	9	sizeof
LEAF_NODE	17:27	17:27	8	(
ARGUMENT	17:28	17:28	8	service
FIELD	17:28	17:28	9	service
LEAF_NODE	17:28	17:28	10	service
LEAF_NODE	17:35	17:35	8	)
LEAF_NODE	17:36	17:36	6	)
LEAF_NODE	17:37	17:37	4	;
EXPR_STATEMENT	18:1	18:29	3	memset ( & dev , 0 , sizeof ( dev ) ) ;
EXPR	18:1	18:1	4	memset ( & dev , 0 , sizeof ( dev ) )
FUNCTION_CALL	18:1	18:28	5	memset ( & dev , 0 , sizeof ( dev ) )
CALLEE	18:1	18:1	6	memset
LEAF_NODE	18:1	18:1	7	memset
LEAF_NODE	18:7	18:7	6	(
ARGUMENT	18:8	18:8	6	& dev
UNARY_EXPR	18:8	18:9	7	& dev
UNARY_OPERATOR	18:8	18:8	8	&
LEAF_NODE	18:8	18:8	9	&
FIELD	18:9	18:9	8	dev
LEAF_NODE	18:9	18:9	9	dev
LEAF_NODE	18:12	18:12	6	,
ARGUMENT	18:14	18:14	6	0
FIELD	18:14	18:14	7	0
LEAF_NODE	18:14	18:14	8	0
LEAF_NODE	18:15	18:15	6	,
ARGUMENT	18:17	18:17	6	sizeof ( dev )
FUNCTION_CALL	18:17	18:27	7	sizeof ( dev )
CALLEE	18:17	18:17	8	sizeof
LEAF_NODE	18:17	18:17	9	sizeof
LEAF_NODE	18:23	18:23	8	(
ARGUMENT	18:24	18:24	8	dev
FIELD	18:24	18:24	9	dev
LEAF_NODE	18:24	18:24	10	dev
LEAF_NODE	18:27	18:27	8	)
LEAF_NODE	18:28	18:28	6	)
LEAF_NODE	18:29	18:29	4	;
EXPR_STATEMENT	19:1	19:33	3	memset ( & vcard , 0 , sizeof ( vcard ) ) ;
EXPR	19:1	19:1	4	memset ( & vcard , 0 , sizeof ( vcard ) )
FUNCTION_CALL	19:1	19:32	5	memset ( & vcard , 0 , sizeof ( vcard ) )
CALLEE	19:1	19:1	6	memset
LEAF_NODE	19:1	19:1	7	memset
LEAF_NODE	19:7	19:7	6	(
ARGUMENT	19:8	19:8	6	& vcard
UNARY_EXPR	19:8	19:9	7	& vcard
UNARY_OPERATOR	19:8	19:8	8	&
LEAF_NODE	19:8	19:8	9	&
FIELD	19:9	19:9	8	vcard
LEAF_NODE	19:9	19:9	9	vcard
LEAF_NODE	19:14	19:14	6	,
ARGUMENT	19:16	19:16	6	0
FIELD	19:16	19:16	7	0
LEAF_NODE	19:16	19:16	8	0
LEAF_NODE	19:17	19:17	6	,
ARGUMENT	19:19	19:19	6	sizeof ( vcard )
FUNCTION_CALL	19:19	19:31	7	sizeof ( vcard )
CALLEE	19:19	19:19	8	sizeof
LEAF_NODE	19:19	19:19	9	sizeof
LEAF_NODE	19:25	19:25	8	(
ARGUMENT	19:26	19:26	8	vcard
FIELD	19:26	19:26	9	vcard
LEAF_NODE	19:26	19:26	10	vcard
LEAF_NODE	19:31	19:31	8	)
LEAF_NODE	19:32	19:32	6	)
LEAF_NODE	19:33	19:33	4	;
EXPR_STATEMENT	20:1	21:37	3	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_USER_INFO , NULL ) ;
EXPR	20:1	20:1	4	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_USER_INFO , NULL )
FUNCTION_CALL	20:1	21:36	5	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_USER_INFO , NULL )
CALLEE	20:1	20:1	6	silc_client_attribute_del
LEAF_NODE	20:1	20:1	7	silc_client_attribute_del
LEAF_NODE	20:26	20:26	6	(
ARGUMENT	20:27	20:27	6	client
FIELD	20:27	20:27	7	client
LEAF_NODE	20:27	20:27	8	client
LEAF_NODE	20:33	20:33	6	,
ARGUMENT	20:35	20:35	6	conn
FIELD	20:35	20:35	7	conn
LEAF_NODE	20:35	20:35	8	conn
LEAF_NODE	20:39	20:39	6	,
ARGUMENT	21:6	21:6	6	SILC_ATTRIBUTE_USER_INFO
FIELD	21:6	21:6	7	SILC_ATTRIBUTE_USER_INFO
LEAF_NODE	21:6	21:6	8	SILC_ATTRIBUTE_USER_INFO
LEAF_NODE	21:30	21:30	6	,
ARGUMENT	21:32	21:32	6	NULL
FIELD	21:32	21:32	7	NULL
LEAF_NODE	21:32	21:32	8	NULL
LEAF_NODE	21:36	21:36	6	)
LEAF_NODE	21:37	21:37	4	;
EXPR_STATEMENT	22:1	23:35	3	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_SERVICE , NULL ) ;
EXPR	22:1	22:1	4	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_SERVICE , NULL )
FUNCTION_CALL	22:1	23:34	5	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_SERVICE , NULL )
CALLEE	22:1	22:1	6	silc_client_attribute_del
LEAF_NODE	22:1	22:1	7	silc_client_attribute_del
LEAF_NODE	22:26	22:26	6	(
ARGUMENT	22:27	22:27	6	client
FIELD	22:27	22:27	7	client
LEAF_NODE	22:27	22:27	8	client
LEAF_NODE	22:33	22:33	6	,
ARGUMENT	22:35	22:35	6	conn
FIELD	22:35	22:35	7	conn
LEAF_NODE	22:35	22:35	8	conn
LEAF_NODE	22:39	22:39	6	,
ARGUMENT	23:6	23:6	6	SILC_ATTRIBUTE_SERVICE
FIELD	23:6	23:6	7	SILC_ATTRIBUTE_SERVICE
LEAF_NODE	23:6	23:6	8	SILC_ATTRIBUTE_SERVICE
LEAF_NODE	23:28	23:28	6	,
ARGUMENT	23:30	23:30	6	NULL
FIELD	23:30	23:30	7	NULL
LEAF_NODE	23:30	23:30	8	NULL
LEAF_NODE	23:34	23:34	6	)
LEAF_NODE	23:35	23:35	4	;
EXPR_STATEMENT	24:1	25:39	3	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_STATUS_MOOD , NULL ) ;
EXPR	24:1	24:1	4	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_STATUS_MOOD , NULL )
FUNCTION_CALL	24:1	25:38	5	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_STATUS_MOOD , NULL )
CALLEE	24:1	24:1	6	silc_client_attribute_del
LEAF_NODE	24:1	24:1	7	silc_client_attribute_del
LEAF_NODE	24:26	24:26	6	(
ARGUMENT	24:27	24:27	6	client
FIELD	24:27	24:27	7	client
LEAF_NODE	24:27	24:27	8	client
LEAF_NODE	24:33	24:33	6	,
ARGUMENT	24:35	24:35	6	conn
FIELD	24:35	24:35	7	conn
LEAF_NODE	24:35	24:35	8	conn
LEAF_NODE	24:39	24:39	6	,
ARGUMENT	25:6	25:6	6	SILC_ATTRIBUTE_STATUS_MOOD
FIELD	25:6	25:6	7	SILC_ATTRIBUTE_STATUS_MOOD
LEAF_NODE	25:6	25:6	8	SILC_ATTRIBUTE_STATUS_MOOD
LEAF_NODE	25:32	25:32	6	,
ARGUMENT	25:34	25:34	6	NULL
FIELD	25:34	25:34	7	NULL
LEAF_NODE	25:34	25:34	8	NULL
LEAF_NODE	25:38	25:38	6	)
LEAF_NODE	25:39	25:39	4	;
EXPR_STATEMENT	26:1	27:43	3	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_STATUS_FREETEXT , NULL ) ;
EXPR	26:1	26:1	4	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_STATUS_FREETEXT , NULL )
FUNCTION_CALL	26:1	27:42	5	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_STATUS_FREETEXT , NULL )
CALLEE	26:1	26:1	6	silc_client_attribute_del
LEAF_NODE	26:1	26:1	7	silc_client_attribute_del
LEAF_NODE	26:26	26:26	6	(
ARGUMENT	26:27	26:27	6	client
FIELD	26:27	26:27	7	client
LEAF_NODE	26:27	26:27	8	client
LEAF_NODE	26:33	26:33	6	,
ARGUMENT	26:35	26:35	6	conn
FIELD	26:35	26:35	7	conn
LEAF_NODE	26:35	26:35	8	conn
LEAF_NODE	26:39	26:39	6	,
ARGUMENT	27:6	27:6	6	SILC_ATTRIBUTE_STATUS_FREETEXT
FIELD	27:6	27:6	7	SILC_ATTRIBUTE_STATUS_FREETEXT
LEAF_NODE	27:6	27:6	8	SILC_ATTRIBUTE_STATUS_FREETEXT
LEAF_NODE	27:36	27:36	6	,
ARGUMENT	27:38	27:38	6	NULL
FIELD	27:38	27:38	7	NULL
LEAF_NODE	27:38	27:38	8	NULL
LEAF_NODE	27:42	27:42	6	)
LEAF_NODE	27:43	27:43	4	;
EXPR_STATEMENT	28:1	29:42	3	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_STATUS_MESSAGE , NULL ) ;
EXPR	28:1	28:1	4	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_STATUS_MESSAGE , NULL )
FUNCTION_CALL	28:1	29:41	5	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_STATUS_MESSAGE , NULL )
CALLEE	28:1	28:1	6	silc_client_attribute_del
LEAF_NODE	28:1	28:1	7	silc_client_attribute_del
LEAF_NODE	28:26	28:26	6	(
ARGUMENT	28:27	28:27	6	client
FIELD	28:27	28:27	7	client
LEAF_NODE	28:27	28:27	8	client
LEAF_NODE	28:33	28:33	6	,
ARGUMENT	28:35	28:35	6	conn
FIELD	28:35	28:35	7	conn
LEAF_NODE	28:35	28:35	8	conn
LEAF_NODE	28:39	28:39	6	,
ARGUMENT	29:6	29:6	6	SILC_ATTRIBUTE_STATUS_MESSAGE
FIELD	29:6	29:6	7	SILC_ATTRIBUTE_STATUS_MESSAGE
LEAF_NODE	29:6	29:6	8	SILC_ATTRIBUTE_STATUS_MESSAGE
LEAF_NODE	29:35	29:35	6	,
ARGUMENT	29:37	29:37	6	NULL
FIELD	29:37	29:37	7	NULL
LEAF_NODE	29:37	29:37	8	NULL
LEAF_NODE	29:41	29:41	6	)
LEAF_NODE	29:42	29:42	4	;
EXPR_STATEMENT	30:1	31:46	3	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_PREFERRED_LANGUAGE , NULL ) ;
EXPR	30:1	30:1	4	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_PREFERRED_LANGUAGE , NULL )
FUNCTION_CALL	30:1	31:45	5	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_PREFERRED_LANGUAGE , NULL )
CALLEE	30:1	30:1	6	silc_client_attribute_del
LEAF_NODE	30:1	30:1	7	silc_client_attribute_del
LEAF_NODE	30:26	30:26	6	(
ARGUMENT	30:27	30:27	6	client
FIELD	30:27	30:27	7	client
LEAF_NODE	30:27	30:27	8	client
LEAF_NODE	30:33	30:33	6	,
ARGUMENT	30:35	30:35	6	conn
FIELD	30:35	30:35	7	conn
LEAF_NODE	30:35	30:35	8	conn
LEAF_NODE	30:39	30:39	6	,
ARGUMENT	31:6	31:6	6	SILC_ATTRIBUTE_PREFERRED_LANGUAGE
FIELD	31:6	31:6	7	SILC_ATTRIBUTE_PREFERRED_LANGUAGE
LEAF_NODE	31:6	31:6	8	SILC_ATTRIBUTE_PREFERRED_LANGUAGE
LEAF_NODE	31:39	31:39	6	,
ARGUMENT	31:41	31:41	6	NULL
FIELD	31:41	31:41	7	NULL
LEAF_NODE	31:41	31:41	8	NULL
LEAF_NODE	31:45	31:45	6	)
LEAF_NODE	31:46	31:46	4	;
EXPR_STATEMENT	32:1	33:45	3	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_PREFERRED_CONTACT , NULL ) ;
EXPR	32:1	32:1	4	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_PREFERRED_CONTACT , NULL )
FUNCTION_CALL	32:1	33:44	5	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_PREFERRED_CONTACT , NULL )
CALLEE	32:1	32:1	6	silc_client_attribute_del
LEAF_NODE	32:1	32:1	7	silc_client_attribute_del
LEAF_NODE	32:26	32:26	6	(
ARGUMENT	32:27	32:27	6	client
FIELD	32:27	32:27	7	client
LEAF_NODE	32:27	32:27	8	client
LEAF_NODE	32:33	32:33	6	,
ARGUMENT	32:35	32:35	6	conn
FIELD	32:35	32:35	7	conn
LEAF_NODE	32:35	32:35	8	conn
LEAF_NODE	32:39	32:39	6	,
ARGUMENT	33:6	33:6	6	SILC_ATTRIBUTE_PREFERRED_CONTACT
FIELD	33:6	33:6	7	SILC_ATTRIBUTE_PREFERRED_CONTACT
LEAF_NODE	33:6	33:6	8	SILC_ATTRIBUTE_PREFERRED_CONTACT
LEAF_NODE	33:38	33:38	6	,
ARGUMENT	33:40	33:40	6	NULL
FIELD	33:40	33:40	7	NULL
LEAF_NODE	33:40	33:40	8	NULL
LEAF_NODE	33:44	33:44	6	)
LEAF_NODE	33:45	33:45	4	;
EXPR_STATEMENT	34:1	35:36	3	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_TIMEZONE , NULL ) ;
EXPR	34:1	34:1	4	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_TIMEZONE , NULL )
FUNCTION_CALL	34:1	35:35	5	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_TIMEZONE , NULL )
CALLEE	34:1	34:1	6	silc_client_attribute_del
LEAF_NODE	34:1	34:1	7	silc_client_attribute_del
LEAF_NODE	34:26	34:26	6	(
ARGUMENT	34:27	34:27	6	client
FIELD	34:27	34:27	7	client
LEAF_NODE	34:27	34:27	8	client
LEAF_NODE	34:33	34:33	6	,
ARGUMENT	34:35	34:35	6	conn
FIELD	34:35	34:35	7	conn
LEAF_NODE	34:35	34:35	8	conn
LEAF_NODE	34:39	34:39	6	,
ARGUMENT	35:6	35:6	6	SILC_ATTRIBUTE_TIMEZONE
FIELD	35:6	35:6	7	SILC_ATTRIBUTE_TIMEZONE
LEAF_NODE	35:6	35:6	8	SILC_ATTRIBUTE_TIMEZONE
LEAF_NODE	35:29	35:29	6	,
ARGUMENT	35:31	35:31	6	NULL
FIELD	35:31	35:31	7	NULL
LEAF_NODE	35:31	35:31	8	NULL
LEAF_NODE	35:35	35:35	6	)
LEAF_NODE	35:36	35:36	4	;
EXPR_STATEMENT	36:1	37:39	3	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_GEOLOCATION , NULL ) ;
EXPR	36:1	36:1	4	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_GEOLOCATION , NULL )
FUNCTION_CALL	36:1	37:38	5	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_GEOLOCATION , NULL )
CALLEE	36:1	36:1	6	silc_client_attribute_del
LEAF_NODE	36:1	36:1	7	silc_client_attribute_del
LEAF_NODE	36:26	36:26	6	(
ARGUMENT	36:27	36:27	6	client
FIELD	36:27	36:27	7	client
LEAF_NODE	36:27	36:27	8	client
LEAF_NODE	36:33	36:33	6	,
ARGUMENT	36:35	36:35	6	conn
FIELD	36:35	36:35	7	conn
LEAF_NODE	36:35	36:35	8	conn
LEAF_NODE	36:39	36:39	6	,
ARGUMENT	37:6	37:6	6	SILC_ATTRIBUTE_GEOLOCATION
FIELD	37:6	37:6	7	SILC_ATTRIBUTE_GEOLOCATION
LEAF_NODE	37:6	37:6	8	SILC_ATTRIBUTE_GEOLOCATION
LEAF_NODE	37:32	37:32	6	,
ARGUMENT	37:34	37:34	6	NULL
FIELD	37:34	37:34	7	NULL
LEAF_NODE	37:34	37:34	8	NULL
LEAF_NODE	37:38	37:38	6	)
LEAF_NODE	37:39	37:39	4	;
EXPR_STATEMENT	38:1	39:39	3	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_DEVICE_INFO , NULL ) ;
EXPR	38:1	38:1	4	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_DEVICE_INFO , NULL )
FUNCTION_CALL	38:1	39:38	5	silc_client_attribute_del ( client , conn , SILC_ATTRIBUTE_DEVICE_INFO , NULL )
CALLEE	38:1	38:1	6	silc_client_attribute_del
LEAF_NODE	38:1	38:1	7	silc_client_attribute_del
LEAF_NODE	38:26	38:26	6	(
ARGUMENT	38:27	38:27	6	client
FIELD	38:27	38:27	7	client
LEAF_NODE	38:27	38:27	8	client
LEAF_NODE	38:33	38:33	6	,
ARGUMENT	38:35	38:35	6	conn
FIELD	38:35	38:35	7	conn
LEAF_NODE	38:35	38:35	8	conn
LEAF_NODE	38:39	38:39	6	,
ARGUMENT	39:6	39:6	6	SILC_ATTRIBUTE_DEVICE_INFO
FIELD	39:6	39:6	7	SILC_ATTRIBUTE_DEVICE_INFO
LEAF_NODE	39:6	39:6	8	SILC_ATTRIBUTE_DEVICE_INFO
LEAF_NODE	39:32	39:32	6	,
ARGUMENT	39:34	39:34	6	NULL
FIELD	39:34	39:34	7	NULL
LEAF_NODE	39:34	39:34	8	NULL
LEAF_NODE	39:38	39:38	6	)
LEAF_NODE	39:39	39:39	4	;
EXPR_STATEMENT	41:1	41:9	3	mask = 0 ;
EXPR	41:1	41:1	4	mask = 0
ASSIGN	41:1	41:8	5	mask = 0
LVAL	41:1	41:1	6	mask
FIELD	41:1	41:1	7	mask
LEAF_NODE	41:1	41:1	8	mask
ASSIGN_OP	41:6	41:6	6	=
LEAF_NODE	41:6	41:6	7	=
RVAL	41:8	41:8	6	0
FIELD	41:8	41:8	7	0
LEAF_NODE	41:8	41:8	8	0
LEAF_NODE	41:9	41:9	4	;
EXPR_STATEMENT	42:1	42:59	3	f = purple_request_fields_get_field ( fields , "mood_normal" ) ;
EXPR	42:1	42:1	4	f = purple_request_fields_get_field ( fields , "mood_normal" )
ASSIGN	42:1	42:5	5	f = purple_request_fields_get_field ( fields , "mood_normal" )
LVAL	42:1	42:1	6	f
FIELD	42:1	42:1	7	f
LEAF_NODE	42:1	42:1	8	f
ASSIGN_OP	42:3	42:3	6	=
LEAF_NODE	42:3	42:3	7	=
RVAL	42:5	42:5	6	purple_request_fields_get_field ( fields , "mood_normal" )
FUNCTION_CALL	42:5	42:58	7	purple_request_fields_get_field ( fields , "mood_normal" )
CALLEE	42:5	42:5	8	purple_request_fields_get_field
LEAF_NODE	42:5	42:5	9	purple_request_fields_get_field
LEAF_NODE	42:36	42:36	8	(
ARGUMENT	42:37	42:37	8	fields
FIELD	42:37	42:37	9	fields
LEAF_NODE	42:37	42:37	10	fields
LEAF_NODE	42:43	42:43	8	,
ARGUMENT	42:45	42:45	8	"mood_normal"
FIELD	42:45	42:45	9	"mood_normal"
LEAF_NODE	42:45	42:45	10	"mood_normal"
LEAF_NODE	42:58	42:58	8	)
LEAF_NODE	42:59	42:59	4	;
SELECTION	43:1	44:2	3	
KEYWORD	43:1	43:1	4	if
LEAF_NODE	43:1	43:1	5	if
LEAF_NODE	43:4	43:4	4	(
CONDITION	43:5	43:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	43:5	43:5	5	f && purple_request_field_bool_get_value ( f )
AND	43:5	43:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	43:5	43:5	7	f
FIELD	43:5	43:5	8	f
LEAF_NODE	43:5	43:5	9	f
LEAF_NODE	43:7	43:7	7	&&
EXPR	43:10	43:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	43:10	43:47	8	purple_request_field_bool_get_value ( f )
CALLEE	43:10	43:10	9	purple_request_field_bool_get_value
LEAF_NODE	43:10	43:10	10	purple_request_field_bool_get_value
LEAF_NODE	43:45	43:45	9	(
ARGUMENT	43:46	43:46	9	f
FIELD	43:46	43:46	10	f
LEAF_NODE	43:46	43:46	11	f
LEAF_NODE	43:47	43:47	9	)
LEAF_NODE	43:48	43:48	4	)
STATEMENTS	44:2	44:2	4	
EXPR_STATEMENT	44:2	44:36	5	mask |= SILC_ATTRIBUTE_MOOD_NORMAL ;
EXPR	44:2	44:2	6	mask |= SILC_ATTRIBUTE_MOOD_NORMAL
ASSIGN	44:2	44:10	7	mask |= SILC_ATTRIBUTE_MOOD_NORMAL
LVAL	44:2	44:2	8	mask
FIELD	44:2	44:2	9	mask
LEAF_NODE	44:2	44:2	10	mask
ASSIGN_OP	44:7	44:7	8	|=
LEAF_NODE	44:7	44:7	9	|=
RVAL	44:10	44:10	8	SILC_ATTRIBUTE_MOOD_NORMAL
FIELD	44:10	44:10	9	SILC_ATTRIBUTE_MOOD_NORMAL
LEAF_NODE	44:10	44:10	10	SILC_ATTRIBUTE_MOOD_NORMAL
LEAF_NODE	44:36	44:36	6	;
EXPR_STATEMENT	45:1	45:58	3	f = purple_request_fields_get_field ( fields , "mood_happy" ) ;
EXPR	45:1	45:1	4	f = purple_request_fields_get_field ( fields , "mood_happy" )
ASSIGN	45:1	45:5	5	f = purple_request_fields_get_field ( fields , "mood_happy" )
LVAL	45:1	45:1	6	f
FIELD	45:1	45:1	7	f
LEAF_NODE	45:1	45:1	8	f
ASSIGN_OP	45:3	45:3	6	=
LEAF_NODE	45:3	45:3	7	=
RVAL	45:5	45:5	6	purple_request_fields_get_field ( fields , "mood_happy" )
FUNCTION_CALL	45:5	45:57	7	purple_request_fields_get_field ( fields , "mood_happy" )
CALLEE	45:5	45:5	8	purple_request_fields_get_field
LEAF_NODE	45:5	45:5	9	purple_request_fields_get_field
LEAF_NODE	45:36	45:36	8	(
ARGUMENT	45:37	45:37	8	fields
FIELD	45:37	45:37	9	fields
LEAF_NODE	45:37	45:37	10	fields
LEAF_NODE	45:43	45:43	8	,
ARGUMENT	45:45	45:45	8	"mood_happy"
FIELD	45:45	45:45	9	"mood_happy"
LEAF_NODE	45:45	45:45	10	"mood_happy"
LEAF_NODE	45:57	45:57	8	)
LEAF_NODE	45:58	45:58	4	;
SELECTION	46:1	47:2	3	
KEYWORD	46:1	46:1	4	if
LEAF_NODE	46:1	46:1	5	if
LEAF_NODE	46:4	46:4	4	(
CONDITION	46:5	46:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	46:5	46:5	5	f && purple_request_field_bool_get_value ( f )
AND	46:5	46:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	46:5	46:5	7	f
FIELD	46:5	46:5	8	f
LEAF_NODE	46:5	46:5	9	f
LEAF_NODE	46:7	46:7	7	&&
EXPR	46:10	46:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	46:10	46:47	8	purple_request_field_bool_get_value ( f )
CALLEE	46:10	46:10	9	purple_request_field_bool_get_value
LEAF_NODE	46:10	46:10	10	purple_request_field_bool_get_value
LEAF_NODE	46:45	46:45	9	(
ARGUMENT	46:46	46:46	9	f
FIELD	46:46	46:46	10	f
LEAF_NODE	46:46	46:46	11	f
LEAF_NODE	46:47	46:47	9	)
LEAF_NODE	46:48	46:48	4	)
STATEMENTS	47:2	47:2	4	
EXPR_STATEMENT	47:2	47:35	5	mask |= SILC_ATTRIBUTE_MOOD_HAPPY ;
EXPR	47:2	47:2	6	mask |= SILC_ATTRIBUTE_MOOD_HAPPY
ASSIGN	47:2	47:10	7	mask |= SILC_ATTRIBUTE_MOOD_HAPPY
LVAL	47:2	47:2	8	mask
FIELD	47:2	47:2	9	mask
LEAF_NODE	47:2	47:2	10	mask
ASSIGN_OP	47:7	47:7	8	|=
LEAF_NODE	47:7	47:7	9	|=
RVAL	47:10	47:10	8	SILC_ATTRIBUTE_MOOD_HAPPY
FIELD	47:10	47:10	9	SILC_ATTRIBUTE_MOOD_HAPPY
LEAF_NODE	47:10	47:10	10	SILC_ATTRIBUTE_MOOD_HAPPY
LEAF_NODE	47:35	47:35	6	;
EXPR_STATEMENT	48:1	48:56	3	f = purple_request_fields_get_field ( fields , "mood_sad" ) ;
EXPR	48:1	48:1	4	f = purple_request_fields_get_field ( fields , "mood_sad" )
ASSIGN	48:1	48:5	5	f = purple_request_fields_get_field ( fields , "mood_sad" )
LVAL	48:1	48:1	6	f
FIELD	48:1	48:1	7	f
LEAF_NODE	48:1	48:1	8	f
ASSIGN_OP	48:3	48:3	6	=
LEAF_NODE	48:3	48:3	7	=
RVAL	48:5	48:5	6	purple_request_fields_get_field ( fields , "mood_sad" )
FUNCTION_CALL	48:5	48:55	7	purple_request_fields_get_field ( fields , "mood_sad" )
CALLEE	48:5	48:5	8	purple_request_fields_get_field
LEAF_NODE	48:5	48:5	9	purple_request_fields_get_field
LEAF_NODE	48:36	48:36	8	(
ARGUMENT	48:37	48:37	8	fields
FIELD	48:37	48:37	9	fields
LEAF_NODE	48:37	48:37	10	fields
LEAF_NODE	48:43	48:43	8	,
ARGUMENT	48:45	48:45	8	"mood_sad"
FIELD	48:45	48:45	9	"mood_sad"
LEAF_NODE	48:45	48:45	10	"mood_sad"
LEAF_NODE	48:55	48:55	8	)
LEAF_NODE	48:56	48:56	4	;
SELECTION	49:1	50:2	3	
KEYWORD	49:1	49:1	4	if
LEAF_NODE	49:1	49:1	5	if
LEAF_NODE	49:4	49:4	4	(
CONDITION	49:5	49:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	49:5	49:5	5	f && purple_request_field_bool_get_value ( f )
AND	49:5	49:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	49:5	49:5	7	f
FIELD	49:5	49:5	8	f
LEAF_NODE	49:5	49:5	9	f
LEAF_NODE	49:7	49:7	7	&&
EXPR	49:10	49:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	49:10	49:47	8	purple_request_field_bool_get_value ( f )
CALLEE	49:10	49:10	9	purple_request_field_bool_get_value
LEAF_NODE	49:10	49:10	10	purple_request_field_bool_get_value
LEAF_NODE	49:45	49:45	9	(
ARGUMENT	49:46	49:46	9	f
FIELD	49:46	49:46	10	f
LEAF_NODE	49:46	49:46	11	f
LEAF_NODE	49:47	49:47	9	)
LEAF_NODE	49:48	49:48	4	)
STATEMENTS	50:2	50:2	4	
EXPR_STATEMENT	50:2	50:33	5	mask |= SILC_ATTRIBUTE_MOOD_SAD ;
EXPR	50:2	50:2	6	mask |= SILC_ATTRIBUTE_MOOD_SAD
ASSIGN	50:2	50:10	7	mask |= SILC_ATTRIBUTE_MOOD_SAD
LVAL	50:2	50:2	8	mask
FIELD	50:2	50:2	9	mask
LEAF_NODE	50:2	50:2	10	mask
ASSIGN_OP	50:7	50:7	8	|=
LEAF_NODE	50:7	50:7	9	|=
RVAL	50:10	50:10	8	SILC_ATTRIBUTE_MOOD_SAD
FIELD	50:10	50:10	9	SILC_ATTRIBUTE_MOOD_SAD
LEAF_NODE	50:10	50:10	10	SILC_ATTRIBUTE_MOOD_SAD
LEAF_NODE	50:33	50:33	6	;
EXPR_STATEMENT	51:1	51:58	3	f = purple_request_fields_get_field ( fields , "mood_angry" ) ;
EXPR	51:1	51:1	4	f = purple_request_fields_get_field ( fields , "mood_angry" )
ASSIGN	51:1	51:5	5	f = purple_request_fields_get_field ( fields , "mood_angry" )
LVAL	51:1	51:1	6	f
FIELD	51:1	51:1	7	f
LEAF_NODE	51:1	51:1	8	f
ASSIGN_OP	51:3	51:3	6	=
LEAF_NODE	51:3	51:3	7	=
RVAL	51:5	51:5	6	purple_request_fields_get_field ( fields , "mood_angry" )
FUNCTION_CALL	51:5	51:57	7	purple_request_fields_get_field ( fields , "mood_angry" )
CALLEE	51:5	51:5	8	purple_request_fields_get_field
LEAF_NODE	51:5	51:5	9	purple_request_fields_get_field
LEAF_NODE	51:36	51:36	8	(
ARGUMENT	51:37	51:37	8	fields
FIELD	51:37	51:37	9	fields
LEAF_NODE	51:37	51:37	10	fields
LEAF_NODE	51:43	51:43	8	,
ARGUMENT	51:45	51:45	8	"mood_angry"
FIELD	51:45	51:45	9	"mood_angry"
LEAF_NODE	51:45	51:45	10	"mood_angry"
LEAF_NODE	51:57	51:57	8	)
LEAF_NODE	51:58	51:58	4	;
SELECTION	52:1	53:2	3	
KEYWORD	52:1	52:1	4	if
LEAF_NODE	52:1	52:1	5	if
LEAF_NODE	52:4	52:4	4	(
CONDITION	52:5	52:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	52:5	52:5	5	f && purple_request_field_bool_get_value ( f )
AND	52:5	52:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	52:5	52:5	7	f
FIELD	52:5	52:5	8	f
LEAF_NODE	52:5	52:5	9	f
LEAF_NODE	52:7	52:7	7	&&
EXPR	52:10	52:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	52:10	52:47	8	purple_request_field_bool_get_value ( f )
CALLEE	52:10	52:10	9	purple_request_field_bool_get_value
LEAF_NODE	52:10	52:10	10	purple_request_field_bool_get_value
LEAF_NODE	52:45	52:45	9	(
ARGUMENT	52:46	52:46	9	f
FIELD	52:46	52:46	10	f
LEAF_NODE	52:46	52:46	11	f
LEAF_NODE	52:47	52:47	9	)
LEAF_NODE	52:48	52:48	4	)
STATEMENTS	53:2	53:2	4	
EXPR_STATEMENT	53:2	53:35	5	mask |= SILC_ATTRIBUTE_MOOD_ANGRY ;
EXPR	53:2	53:2	6	mask |= SILC_ATTRIBUTE_MOOD_ANGRY
ASSIGN	53:2	53:10	7	mask |= SILC_ATTRIBUTE_MOOD_ANGRY
LVAL	53:2	53:2	8	mask
FIELD	53:2	53:2	9	mask
LEAF_NODE	53:2	53:2	10	mask
ASSIGN_OP	53:7	53:7	8	|=
LEAF_NODE	53:7	53:7	9	|=
RVAL	53:10	53:10	8	SILC_ATTRIBUTE_MOOD_ANGRY
FIELD	53:10	53:10	9	SILC_ATTRIBUTE_MOOD_ANGRY
LEAF_NODE	53:10	53:10	10	SILC_ATTRIBUTE_MOOD_ANGRY
LEAF_NODE	53:35	53:35	6	;
EXPR_STATEMENT	54:1	54:60	3	f = purple_request_fields_get_field ( fields , "mood_jealous" ) ;
EXPR	54:1	54:1	4	f = purple_request_fields_get_field ( fields , "mood_jealous" )
ASSIGN	54:1	54:5	5	f = purple_request_fields_get_field ( fields , "mood_jealous" )
LVAL	54:1	54:1	6	f
FIELD	54:1	54:1	7	f
LEAF_NODE	54:1	54:1	8	f
ASSIGN_OP	54:3	54:3	6	=
LEAF_NODE	54:3	54:3	7	=
RVAL	54:5	54:5	6	purple_request_fields_get_field ( fields , "mood_jealous" )
FUNCTION_CALL	54:5	54:59	7	purple_request_fields_get_field ( fields , "mood_jealous" )
CALLEE	54:5	54:5	8	purple_request_fields_get_field
LEAF_NODE	54:5	54:5	9	purple_request_fields_get_field
LEAF_NODE	54:36	54:36	8	(
ARGUMENT	54:37	54:37	8	fields
FIELD	54:37	54:37	9	fields
LEAF_NODE	54:37	54:37	10	fields
LEAF_NODE	54:43	54:43	8	,
ARGUMENT	54:45	54:45	8	"mood_jealous"
FIELD	54:45	54:45	9	"mood_jealous"
LEAF_NODE	54:45	54:45	10	"mood_jealous"
LEAF_NODE	54:59	54:59	8	)
LEAF_NODE	54:60	54:60	4	;
SELECTION	55:1	56:2	3	
KEYWORD	55:1	55:1	4	if
LEAF_NODE	55:1	55:1	5	if
LEAF_NODE	55:4	55:4	4	(
CONDITION	55:5	55:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	55:5	55:5	5	f && purple_request_field_bool_get_value ( f )
AND	55:5	55:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	55:5	55:5	7	f
FIELD	55:5	55:5	8	f
LEAF_NODE	55:5	55:5	9	f
LEAF_NODE	55:7	55:7	7	&&
EXPR	55:10	55:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	55:10	55:47	8	purple_request_field_bool_get_value ( f )
CALLEE	55:10	55:10	9	purple_request_field_bool_get_value
LEAF_NODE	55:10	55:10	10	purple_request_field_bool_get_value
LEAF_NODE	55:45	55:45	9	(
ARGUMENT	55:46	55:46	9	f
FIELD	55:46	55:46	10	f
LEAF_NODE	55:46	55:46	11	f
LEAF_NODE	55:47	55:47	9	)
LEAF_NODE	55:48	55:48	4	)
STATEMENTS	56:2	56:2	4	
EXPR_STATEMENT	56:2	56:37	5	mask |= SILC_ATTRIBUTE_MOOD_JEALOUS ;
EXPR	56:2	56:2	6	mask |= SILC_ATTRIBUTE_MOOD_JEALOUS
ASSIGN	56:2	56:10	7	mask |= SILC_ATTRIBUTE_MOOD_JEALOUS
LVAL	56:2	56:2	8	mask
FIELD	56:2	56:2	9	mask
LEAF_NODE	56:2	56:2	10	mask
ASSIGN_OP	56:7	56:7	8	|=
LEAF_NODE	56:7	56:7	9	|=
RVAL	56:10	56:10	8	SILC_ATTRIBUTE_MOOD_JEALOUS
FIELD	56:10	56:10	9	SILC_ATTRIBUTE_MOOD_JEALOUS
LEAF_NODE	56:10	56:10	10	SILC_ATTRIBUTE_MOOD_JEALOUS
LEAF_NODE	56:37	56:37	6	;
EXPR_STATEMENT	57:1	57:60	3	f = purple_request_fields_get_field ( fields , "mood_ashamed" ) ;
EXPR	57:1	57:1	4	f = purple_request_fields_get_field ( fields , "mood_ashamed" )
ASSIGN	57:1	57:5	5	f = purple_request_fields_get_field ( fields , "mood_ashamed" )
LVAL	57:1	57:1	6	f
FIELD	57:1	57:1	7	f
LEAF_NODE	57:1	57:1	8	f
ASSIGN_OP	57:3	57:3	6	=
LEAF_NODE	57:3	57:3	7	=
RVAL	57:5	57:5	6	purple_request_fields_get_field ( fields , "mood_ashamed" )
FUNCTION_CALL	57:5	57:59	7	purple_request_fields_get_field ( fields , "mood_ashamed" )
CALLEE	57:5	57:5	8	purple_request_fields_get_field
LEAF_NODE	57:5	57:5	9	purple_request_fields_get_field
LEAF_NODE	57:36	57:36	8	(
ARGUMENT	57:37	57:37	8	fields
FIELD	57:37	57:37	9	fields
LEAF_NODE	57:37	57:37	10	fields
LEAF_NODE	57:43	57:43	8	,
ARGUMENT	57:45	57:45	8	"mood_ashamed"
FIELD	57:45	57:45	9	"mood_ashamed"
LEAF_NODE	57:45	57:45	10	"mood_ashamed"
LEAF_NODE	57:59	57:59	8	)
LEAF_NODE	57:60	57:60	4	;
SELECTION	58:1	59:2	3	
KEYWORD	58:1	58:1	4	if
LEAF_NODE	58:1	58:1	5	if
LEAF_NODE	58:4	58:4	4	(
CONDITION	58:5	58:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	58:5	58:5	5	f && purple_request_field_bool_get_value ( f )
AND	58:5	58:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	58:5	58:5	7	f
FIELD	58:5	58:5	8	f
LEAF_NODE	58:5	58:5	9	f
LEAF_NODE	58:7	58:7	7	&&
EXPR	58:10	58:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	58:10	58:47	8	purple_request_field_bool_get_value ( f )
CALLEE	58:10	58:10	9	purple_request_field_bool_get_value
LEAF_NODE	58:10	58:10	10	purple_request_field_bool_get_value
LEAF_NODE	58:45	58:45	9	(
ARGUMENT	58:46	58:46	9	f
FIELD	58:46	58:46	10	f
LEAF_NODE	58:46	58:46	11	f
LEAF_NODE	58:47	58:47	9	)
LEAF_NODE	58:48	58:48	4	)
STATEMENTS	59:2	59:2	4	
EXPR_STATEMENT	59:2	59:37	5	mask |= SILC_ATTRIBUTE_MOOD_ASHAMED ;
EXPR	59:2	59:2	6	mask |= SILC_ATTRIBUTE_MOOD_ASHAMED
ASSIGN	59:2	59:10	7	mask |= SILC_ATTRIBUTE_MOOD_ASHAMED
LVAL	59:2	59:2	8	mask
FIELD	59:2	59:2	9	mask
LEAF_NODE	59:2	59:2	10	mask
ASSIGN_OP	59:7	59:7	8	|=
LEAF_NODE	59:7	59:7	9	|=
RVAL	59:10	59:10	8	SILC_ATTRIBUTE_MOOD_ASHAMED
FIELD	59:10	59:10	9	SILC_ATTRIBUTE_MOOD_ASHAMED
LEAF_NODE	59:10	59:10	10	SILC_ATTRIBUTE_MOOD_ASHAMED
LEAF_NODE	59:37	59:37	6	;
EXPR_STATEMENT	60:1	60:63	3	f = purple_request_fields_get_field ( fields , "mood_invincible" ) ;
EXPR	60:1	60:1	4	f = purple_request_fields_get_field ( fields , "mood_invincible" )
ASSIGN	60:1	60:5	5	f = purple_request_fields_get_field ( fields , "mood_invincible" )
LVAL	60:1	60:1	6	f
FIELD	60:1	60:1	7	f
LEAF_NODE	60:1	60:1	8	f
ASSIGN_OP	60:3	60:3	6	=
LEAF_NODE	60:3	60:3	7	=
RVAL	60:5	60:5	6	purple_request_fields_get_field ( fields , "mood_invincible" )
FUNCTION_CALL	60:5	60:62	7	purple_request_fields_get_field ( fields , "mood_invincible" )
CALLEE	60:5	60:5	8	purple_request_fields_get_field
LEAF_NODE	60:5	60:5	9	purple_request_fields_get_field
LEAF_NODE	60:36	60:36	8	(
ARGUMENT	60:37	60:37	8	fields
FIELD	60:37	60:37	9	fields
LEAF_NODE	60:37	60:37	10	fields
LEAF_NODE	60:43	60:43	8	,
ARGUMENT	60:45	60:45	8	"mood_invincible"
FIELD	60:45	60:45	9	"mood_invincible"
LEAF_NODE	60:45	60:45	10	"mood_invincible"
LEAF_NODE	60:62	60:62	8	)
LEAF_NODE	60:63	60:63	4	;
SELECTION	61:1	62:2	3	
KEYWORD	61:1	61:1	4	if
LEAF_NODE	61:1	61:1	5	if
LEAF_NODE	61:4	61:4	4	(
CONDITION	61:5	61:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	61:5	61:5	5	f && purple_request_field_bool_get_value ( f )
AND	61:5	61:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	61:5	61:5	7	f
FIELD	61:5	61:5	8	f
LEAF_NODE	61:5	61:5	9	f
LEAF_NODE	61:7	61:7	7	&&
EXPR	61:10	61:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	61:10	61:47	8	purple_request_field_bool_get_value ( f )
CALLEE	61:10	61:10	9	purple_request_field_bool_get_value
LEAF_NODE	61:10	61:10	10	purple_request_field_bool_get_value
LEAF_NODE	61:45	61:45	9	(
ARGUMENT	61:46	61:46	9	f
FIELD	61:46	61:46	10	f
LEAF_NODE	61:46	61:46	11	f
LEAF_NODE	61:47	61:47	9	)
LEAF_NODE	61:48	61:48	4	)
STATEMENTS	62:2	62:2	4	
EXPR_STATEMENT	62:2	62:40	5	mask |= SILC_ATTRIBUTE_MOOD_INVINCIBLE ;
EXPR	62:2	62:2	6	mask |= SILC_ATTRIBUTE_MOOD_INVINCIBLE
ASSIGN	62:2	62:10	7	mask |= SILC_ATTRIBUTE_MOOD_INVINCIBLE
LVAL	62:2	62:2	8	mask
FIELD	62:2	62:2	9	mask
LEAF_NODE	62:2	62:2	10	mask
ASSIGN_OP	62:7	62:7	8	|=
LEAF_NODE	62:7	62:7	9	|=
RVAL	62:10	62:10	8	SILC_ATTRIBUTE_MOOD_INVINCIBLE
FIELD	62:10	62:10	9	SILC_ATTRIBUTE_MOOD_INVINCIBLE
LEAF_NODE	62:10	62:10	10	SILC_ATTRIBUTE_MOOD_INVINCIBLE
LEAF_NODE	62:40	62:40	6	;
EXPR_STATEMENT	63:1	63:59	3	f = purple_request_fields_get_field ( fields , "mood_inlove" ) ;
EXPR	63:1	63:1	4	f = purple_request_fields_get_field ( fields , "mood_inlove" )
ASSIGN	63:1	63:5	5	f = purple_request_fields_get_field ( fields , "mood_inlove" )
LVAL	63:1	63:1	6	f
FIELD	63:1	63:1	7	f
LEAF_NODE	63:1	63:1	8	f
ASSIGN_OP	63:3	63:3	6	=
LEAF_NODE	63:3	63:3	7	=
RVAL	63:5	63:5	6	purple_request_fields_get_field ( fields , "mood_inlove" )
FUNCTION_CALL	63:5	63:58	7	purple_request_fields_get_field ( fields , "mood_inlove" )
CALLEE	63:5	63:5	8	purple_request_fields_get_field
LEAF_NODE	63:5	63:5	9	purple_request_fields_get_field
LEAF_NODE	63:36	63:36	8	(
ARGUMENT	63:37	63:37	8	fields
FIELD	63:37	63:37	9	fields
LEAF_NODE	63:37	63:37	10	fields
LEAF_NODE	63:43	63:43	8	,
ARGUMENT	63:45	63:45	8	"mood_inlove"
FIELD	63:45	63:45	9	"mood_inlove"
LEAF_NODE	63:45	63:45	10	"mood_inlove"
LEAF_NODE	63:58	63:58	8	)
LEAF_NODE	63:59	63:59	4	;
SELECTION	64:1	65:2	3	
KEYWORD	64:1	64:1	4	if
LEAF_NODE	64:1	64:1	5	if
LEAF_NODE	64:4	64:4	4	(
CONDITION	64:5	64:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	64:5	64:5	5	f && purple_request_field_bool_get_value ( f )
AND	64:5	64:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	64:5	64:5	7	f
FIELD	64:5	64:5	8	f
LEAF_NODE	64:5	64:5	9	f
LEAF_NODE	64:7	64:7	7	&&
EXPR	64:10	64:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	64:10	64:47	8	purple_request_field_bool_get_value ( f )
CALLEE	64:10	64:10	9	purple_request_field_bool_get_value
LEAF_NODE	64:10	64:10	10	purple_request_field_bool_get_value
LEAF_NODE	64:45	64:45	9	(
ARGUMENT	64:46	64:46	9	f
FIELD	64:46	64:46	10	f
LEAF_NODE	64:46	64:46	11	f
LEAF_NODE	64:47	64:47	9	)
LEAF_NODE	64:48	64:48	4	)
STATEMENTS	65:2	65:2	4	
EXPR_STATEMENT	65:2	65:36	5	mask |= SILC_ATTRIBUTE_MOOD_INLOVE ;
EXPR	65:2	65:2	6	mask |= SILC_ATTRIBUTE_MOOD_INLOVE
ASSIGN	65:2	65:10	7	mask |= SILC_ATTRIBUTE_MOOD_INLOVE
LVAL	65:2	65:2	8	mask
FIELD	65:2	65:2	9	mask
LEAF_NODE	65:2	65:2	10	mask
ASSIGN_OP	65:7	65:7	8	|=
LEAF_NODE	65:7	65:7	9	|=
RVAL	65:10	65:10	8	SILC_ATTRIBUTE_MOOD_INLOVE
FIELD	65:10	65:10	9	SILC_ATTRIBUTE_MOOD_INLOVE
LEAF_NODE	65:10	65:10	10	SILC_ATTRIBUTE_MOOD_INLOVE
LEAF_NODE	65:36	65:36	6	;
EXPR_STATEMENT	66:1	66:59	3	f = purple_request_fields_get_field ( fields , "mood_sleepy" ) ;
EXPR	66:1	66:1	4	f = purple_request_fields_get_field ( fields , "mood_sleepy" )
ASSIGN	66:1	66:5	5	f = purple_request_fields_get_field ( fields , "mood_sleepy" )
LVAL	66:1	66:1	6	f
FIELD	66:1	66:1	7	f
LEAF_NODE	66:1	66:1	8	f
ASSIGN_OP	66:3	66:3	6	=
LEAF_NODE	66:3	66:3	7	=
RVAL	66:5	66:5	6	purple_request_fields_get_field ( fields , "mood_sleepy" )
FUNCTION_CALL	66:5	66:58	7	purple_request_fields_get_field ( fields , "mood_sleepy" )
CALLEE	66:5	66:5	8	purple_request_fields_get_field
LEAF_NODE	66:5	66:5	9	purple_request_fields_get_field
LEAF_NODE	66:36	66:36	8	(
ARGUMENT	66:37	66:37	8	fields
FIELD	66:37	66:37	9	fields
LEAF_NODE	66:37	66:37	10	fields
LEAF_NODE	66:43	66:43	8	,
ARGUMENT	66:45	66:45	8	"mood_sleepy"
FIELD	66:45	66:45	9	"mood_sleepy"
LEAF_NODE	66:45	66:45	10	"mood_sleepy"
LEAF_NODE	66:58	66:58	8	)
LEAF_NODE	66:59	66:59	4	;
SELECTION	67:1	68:2	3	
KEYWORD	67:1	67:1	4	if
LEAF_NODE	67:1	67:1	5	if
LEAF_NODE	67:4	67:4	4	(
CONDITION	67:5	67:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	67:5	67:5	5	f && purple_request_field_bool_get_value ( f )
AND	67:5	67:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	67:5	67:5	7	f
FIELD	67:5	67:5	8	f
LEAF_NODE	67:5	67:5	9	f
LEAF_NODE	67:7	67:7	7	&&
EXPR	67:10	67:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	67:10	67:47	8	purple_request_field_bool_get_value ( f )
CALLEE	67:10	67:10	9	purple_request_field_bool_get_value
LEAF_NODE	67:10	67:10	10	purple_request_field_bool_get_value
LEAF_NODE	67:45	67:45	9	(
ARGUMENT	67:46	67:46	9	f
FIELD	67:46	67:46	10	f
LEAF_NODE	67:46	67:46	11	f
LEAF_NODE	67:47	67:47	9	)
LEAF_NODE	67:48	67:48	4	)
STATEMENTS	68:2	68:2	4	
EXPR_STATEMENT	68:2	68:36	5	mask |= SILC_ATTRIBUTE_MOOD_SLEEPY ;
EXPR	68:2	68:2	6	mask |= SILC_ATTRIBUTE_MOOD_SLEEPY
ASSIGN	68:2	68:10	7	mask |= SILC_ATTRIBUTE_MOOD_SLEEPY
LVAL	68:2	68:2	8	mask
FIELD	68:2	68:2	9	mask
LEAF_NODE	68:2	68:2	10	mask
ASSIGN_OP	68:7	68:7	8	|=
LEAF_NODE	68:7	68:7	9	|=
RVAL	68:10	68:10	8	SILC_ATTRIBUTE_MOOD_SLEEPY
FIELD	68:10	68:10	9	SILC_ATTRIBUTE_MOOD_SLEEPY
LEAF_NODE	68:10	68:10	10	SILC_ATTRIBUTE_MOOD_SLEEPY
LEAF_NODE	68:36	68:36	6	;
EXPR_STATEMENT	69:1	69:58	3	f = purple_request_fields_get_field ( fields , "mood_bored" ) ;
EXPR	69:1	69:1	4	f = purple_request_fields_get_field ( fields , "mood_bored" )
ASSIGN	69:1	69:5	5	f = purple_request_fields_get_field ( fields , "mood_bored" )
LVAL	69:1	69:1	6	f
FIELD	69:1	69:1	7	f
LEAF_NODE	69:1	69:1	8	f
ASSIGN_OP	69:3	69:3	6	=
LEAF_NODE	69:3	69:3	7	=
RVAL	69:5	69:5	6	purple_request_fields_get_field ( fields , "mood_bored" )
FUNCTION_CALL	69:5	69:57	7	purple_request_fields_get_field ( fields , "mood_bored" )
CALLEE	69:5	69:5	8	purple_request_fields_get_field
LEAF_NODE	69:5	69:5	9	purple_request_fields_get_field
LEAF_NODE	69:36	69:36	8	(
ARGUMENT	69:37	69:37	8	fields
FIELD	69:37	69:37	9	fields
LEAF_NODE	69:37	69:37	10	fields
LEAF_NODE	69:43	69:43	8	,
ARGUMENT	69:45	69:45	8	"mood_bored"
FIELD	69:45	69:45	9	"mood_bored"
LEAF_NODE	69:45	69:45	10	"mood_bored"
LEAF_NODE	69:57	69:57	8	)
LEAF_NODE	69:58	69:58	4	;
SELECTION	70:1	71:2	3	
KEYWORD	70:1	70:1	4	if
LEAF_NODE	70:1	70:1	5	if
LEAF_NODE	70:4	70:4	4	(
CONDITION	70:5	70:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	70:5	70:5	5	f && purple_request_field_bool_get_value ( f )
AND	70:5	70:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	70:5	70:5	7	f
FIELD	70:5	70:5	8	f
LEAF_NODE	70:5	70:5	9	f
LEAF_NODE	70:7	70:7	7	&&
EXPR	70:10	70:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	70:10	70:47	8	purple_request_field_bool_get_value ( f )
CALLEE	70:10	70:10	9	purple_request_field_bool_get_value
LEAF_NODE	70:10	70:10	10	purple_request_field_bool_get_value
LEAF_NODE	70:45	70:45	9	(
ARGUMENT	70:46	70:46	9	f
FIELD	70:46	70:46	10	f
LEAF_NODE	70:46	70:46	11	f
LEAF_NODE	70:47	70:47	9	)
LEAF_NODE	70:48	70:48	4	)
STATEMENTS	71:2	71:2	4	
EXPR_STATEMENT	71:2	71:35	5	mask |= SILC_ATTRIBUTE_MOOD_BORED ;
EXPR	71:2	71:2	6	mask |= SILC_ATTRIBUTE_MOOD_BORED
ASSIGN	71:2	71:10	7	mask |= SILC_ATTRIBUTE_MOOD_BORED
LVAL	71:2	71:2	8	mask
FIELD	71:2	71:2	9	mask
LEAF_NODE	71:2	71:2	10	mask
ASSIGN_OP	71:7	71:7	8	|=
LEAF_NODE	71:7	71:7	9	|=
RVAL	71:10	71:10	8	SILC_ATTRIBUTE_MOOD_BORED
FIELD	71:10	71:10	9	SILC_ATTRIBUTE_MOOD_BORED
LEAF_NODE	71:10	71:10	10	SILC_ATTRIBUTE_MOOD_BORED
LEAF_NODE	71:35	71:35	6	;
EXPR_STATEMENT	72:1	72:60	3	f = purple_request_fields_get_field ( fields , "mood_excited" ) ;
EXPR	72:1	72:1	4	f = purple_request_fields_get_field ( fields , "mood_excited" )
ASSIGN	72:1	72:5	5	f = purple_request_fields_get_field ( fields , "mood_excited" )
LVAL	72:1	72:1	6	f
FIELD	72:1	72:1	7	f
LEAF_NODE	72:1	72:1	8	f
ASSIGN_OP	72:3	72:3	6	=
LEAF_NODE	72:3	72:3	7	=
RVAL	72:5	72:5	6	purple_request_fields_get_field ( fields , "mood_excited" )
FUNCTION_CALL	72:5	72:59	7	purple_request_fields_get_field ( fields , "mood_excited" )
CALLEE	72:5	72:5	8	purple_request_fields_get_field
LEAF_NODE	72:5	72:5	9	purple_request_fields_get_field
LEAF_NODE	72:36	72:36	8	(
ARGUMENT	72:37	72:37	8	fields
FIELD	72:37	72:37	9	fields
LEAF_NODE	72:37	72:37	10	fields
LEAF_NODE	72:43	72:43	8	,
ARGUMENT	72:45	72:45	8	"mood_excited"
FIELD	72:45	72:45	9	"mood_excited"
LEAF_NODE	72:45	72:45	10	"mood_excited"
LEAF_NODE	72:59	72:59	8	)
LEAF_NODE	72:60	72:60	4	;
SELECTION	73:1	74:2	3	
KEYWORD	73:1	73:1	4	if
LEAF_NODE	73:1	73:1	5	if
LEAF_NODE	73:4	73:4	4	(
CONDITION	73:5	73:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	73:5	73:5	5	f && purple_request_field_bool_get_value ( f )
AND	73:5	73:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	73:5	73:5	7	f
FIELD	73:5	73:5	8	f
LEAF_NODE	73:5	73:5	9	f
LEAF_NODE	73:7	73:7	7	&&
EXPR	73:10	73:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	73:10	73:47	8	purple_request_field_bool_get_value ( f )
CALLEE	73:10	73:10	9	purple_request_field_bool_get_value
LEAF_NODE	73:10	73:10	10	purple_request_field_bool_get_value
LEAF_NODE	73:45	73:45	9	(
ARGUMENT	73:46	73:46	9	f
FIELD	73:46	73:46	10	f
LEAF_NODE	73:46	73:46	11	f
LEAF_NODE	73:47	73:47	9	)
LEAF_NODE	73:48	73:48	4	)
STATEMENTS	74:2	74:2	4	
EXPR_STATEMENT	74:2	74:37	5	mask |= SILC_ATTRIBUTE_MOOD_EXCITED ;
EXPR	74:2	74:2	6	mask |= SILC_ATTRIBUTE_MOOD_EXCITED
ASSIGN	74:2	74:10	7	mask |= SILC_ATTRIBUTE_MOOD_EXCITED
LVAL	74:2	74:2	8	mask
FIELD	74:2	74:2	9	mask
LEAF_NODE	74:2	74:2	10	mask
ASSIGN_OP	74:7	74:7	8	|=
LEAF_NODE	74:7	74:7	9	|=
RVAL	74:10	74:10	8	SILC_ATTRIBUTE_MOOD_EXCITED
FIELD	74:10	74:10	9	SILC_ATTRIBUTE_MOOD_EXCITED
LEAF_NODE	74:10	74:10	10	SILC_ATTRIBUTE_MOOD_EXCITED
LEAF_NODE	74:37	74:37	6	;
EXPR_STATEMENT	75:1	75:60	3	f = purple_request_fields_get_field ( fields , "mood_anxious" ) ;
EXPR	75:1	75:1	4	f = purple_request_fields_get_field ( fields , "mood_anxious" )
ASSIGN	75:1	75:5	5	f = purple_request_fields_get_field ( fields , "mood_anxious" )
LVAL	75:1	75:1	6	f
FIELD	75:1	75:1	7	f
LEAF_NODE	75:1	75:1	8	f
ASSIGN_OP	75:3	75:3	6	=
LEAF_NODE	75:3	75:3	7	=
RVAL	75:5	75:5	6	purple_request_fields_get_field ( fields , "mood_anxious" )
FUNCTION_CALL	75:5	75:59	7	purple_request_fields_get_field ( fields , "mood_anxious" )
CALLEE	75:5	75:5	8	purple_request_fields_get_field
LEAF_NODE	75:5	75:5	9	purple_request_fields_get_field
LEAF_NODE	75:36	75:36	8	(
ARGUMENT	75:37	75:37	8	fields
FIELD	75:37	75:37	9	fields
LEAF_NODE	75:37	75:37	10	fields
LEAF_NODE	75:43	75:43	8	,
ARGUMENT	75:45	75:45	8	"mood_anxious"
FIELD	75:45	75:45	9	"mood_anxious"
LEAF_NODE	75:45	75:45	10	"mood_anxious"
LEAF_NODE	75:59	75:59	8	)
LEAF_NODE	75:60	75:60	4	;
SELECTION	76:1	77:2	3	
KEYWORD	76:1	76:1	4	if
LEAF_NODE	76:1	76:1	5	if
LEAF_NODE	76:4	76:4	4	(
CONDITION	76:5	76:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	76:5	76:5	5	f && purple_request_field_bool_get_value ( f )
AND	76:5	76:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	76:5	76:5	7	f
FIELD	76:5	76:5	8	f
LEAF_NODE	76:5	76:5	9	f
LEAF_NODE	76:7	76:7	7	&&
EXPR	76:10	76:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	76:10	76:47	8	purple_request_field_bool_get_value ( f )
CALLEE	76:10	76:10	9	purple_request_field_bool_get_value
LEAF_NODE	76:10	76:10	10	purple_request_field_bool_get_value
LEAF_NODE	76:45	76:45	9	(
ARGUMENT	76:46	76:46	9	f
FIELD	76:46	76:46	10	f
LEAF_NODE	76:46	76:46	11	f
LEAF_NODE	76:47	76:47	9	)
LEAF_NODE	76:48	76:48	4	)
STATEMENTS	77:2	77:2	4	
EXPR_STATEMENT	77:2	77:37	5	mask |= SILC_ATTRIBUTE_MOOD_ANXIOUS ;
EXPR	77:2	77:2	6	mask |= SILC_ATTRIBUTE_MOOD_ANXIOUS
ASSIGN	77:2	77:10	7	mask |= SILC_ATTRIBUTE_MOOD_ANXIOUS
LVAL	77:2	77:2	8	mask
FIELD	77:2	77:2	9	mask
LEAF_NODE	77:2	77:2	10	mask
ASSIGN_OP	77:7	77:7	8	|=
LEAF_NODE	77:7	77:7	9	|=
RVAL	77:10	77:10	8	SILC_ATTRIBUTE_MOOD_ANXIOUS
FIELD	77:10	77:10	9	SILC_ATTRIBUTE_MOOD_ANXIOUS
LEAF_NODE	77:10	77:10	10	SILC_ATTRIBUTE_MOOD_ANXIOUS
LEAF_NODE	77:37	77:37	6	;
EXPR_STATEMENT	78:1	81:25	3	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_STATUS_MOOD , SILC_32_TO_PTR ( mask ) , sizeof ( SilcUInt32 ) ) ;
EXPR	78:1	78:1	4	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_STATUS_MOOD , SILC_32_TO_PTR ( mask ) , sizeof ( SilcUInt32 ) )
FUNCTION_CALL	78:1	81:24	5	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_STATUS_MOOD , SILC_32_TO_PTR ( mask ) , sizeof ( SilcUInt32 ) )
CALLEE	78:1	78:1	6	silc_client_attribute_add
LEAF_NODE	78:1	78:1	7	silc_client_attribute_add
LEAF_NODE	78:26	78:26	6	(
ARGUMENT	78:27	78:27	6	client
FIELD	78:27	78:27	7	client
LEAF_NODE	78:27	78:27	8	client
LEAF_NODE	78:33	78:33	6	,
ARGUMENT	78:35	78:35	6	conn
FIELD	78:35	78:35	7	conn
LEAF_NODE	78:35	78:35	8	conn
LEAF_NODE	78:39	78:39	6	,
ARGUMENT	79:6	79:6	6	SILC_ATTRIBUTE_STATUS_MOOD
FIELD	79:6	79:6	7	SILC_ATTRIBUTE_STATUS_MOOD
LEAF_NODE	79:6	79:6	8	SILC_ATTRIBUTE_STATUS_MOOD
LEAF_NODE	79:32	79:32	6	,
ARGUMENT	80:6	80:6	6	SILC_32_TO_PTR ( mask )
FUNCTION_CALL	80:6	80:25	7	SILC_32_TO_PTR ( mask )
CALLEE	80:6	80:6	8	SILC_32_TO_PTR
LEAF_NODE	80:6	80:6	9	SILC_32_TO_PTR
LEAF_NODE	80:20	80:20	8	(
ARGUMENT	80:21	80:21	8	mask
FIELD	80:21	80:21	9	mask
LEAF_NODE	80:21	80:21	10	mask
LEAF_NODE	80:25	80:25	8	)
LEAF_NODE	80:26	80:26	6	,
ARGUMENT	81:6	81:6	6	sizeof ( SilcUInt32 )
FUNCTION_CALL	81:6	81:23	7	sizeof ( SilcUInt32 )
CALLEE	81:6	81:6	8	sizeof
LEAF_NODE	81:6	81:6	9	sizeof
LEAF_NODE	81:12	81:12	8	(
ARGUMENT	81:13	81:13	8	SilcUInt32
FIELD	81:13	81:13	9	SilcUInt32
LEAF_NODE	81:13	81:13	10	SilcUInt32
LEAF_NODE	81:23	81:23	8	)
LEAF_NODE	81:24	81:24	6	)
LEAF_NODE	81:25	81:25	4	;
EXPR_STATEMENT	83:1	83:9	3	mask = 0 ;
EXPR	83:1	83:1	4	mask = 0
ASSIGN	83:1	83:8	5	mask = 0
LVAL	83:1	83:1	6	mask
FIELD	83:1	83:1	7	mask
LEAF_NODE	83:1	83:1	8	mask
ASSIGN_OP	83:6	83:6	6	=
LEAF_NODE	83:6	83:6	7	=
RVAL	83:8	83:8	6	0
FIELD	83:8	83:8	7	0
LEAF_NODE	83:8	83:8	8	0
LEAF_NODE	83:9	83:9	4	;
EXPR_STATEMENT	84:1	84:60	3	f = purple_request_fields_get_field ( fields , "contact_chat" ) ;
EXPR	84:1	84:1	4	f = purple_request_fields_get_field ( fields , "contact_chat" )
ASSIGN	84:1	84:5	5	f = purple_request_fields_get_field ( fields , "contact_chat" )
LVAL	84:1	84:1	6	f
FIELD	84:1	84:1	7	f
LEAF_NODE	84:1	84:1	8	f
ASSIGN_OP	84:3	84:3	6	=
LEAF_NODE	84:3	84:3	7	=
RVAL	84:5	84:5	6	purple_request_fields_get_field ( fields , "contact_chat" )
FUNCTION_CALL	84:5	84:59	7	purple_request_fields_get_field ( fields , "contact_chat" )
CALLEE	84:5	84:5	8	purple_request_fields_get_field
LEAF_NODE	84:5	84:5	9	purple_request_fields_get_field
LEAF_NODE	84:36	84:36	8	(
ARGUMENT	84:37	84:37	8	fields
FIELD	84:37	84:37	9	fields
LEAF_NODE	84:37	84:37	10	fields
LEAF_NODE	84:43	84:43	8	,
ARGUMENT	84:45	84:45	8	"contact_chat"
FIELD	84:45	84:45	9	"contact_chat"
LEAF_NODE	84:45	84:45	10	"contact_chat"
LEAF_NODE	84:59	84:59	8	)
LEAF_NODE	84:60	84:60	4	;
SELECTION	85:1	86:2	3	
KEYWORD	85:1	85:1	4	if
LEAF_NODE	85:1	85:1	5	if
LEAF_NODE	85:4	85:4	4	(
CONDITION	85:5	85:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	85:5	85:5	5	f && purple_request_field_bool_get_value ( f )
AND	85:5	85:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	85:5	85:5	7	f
FIELD	85:5	85:5	8	f
LEAF_NODE	85:5	85:5	9	f
LEAF_NODE	85:7	85:7	7	&&
EXPR	85:10	85:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	85:10	85:47	8	purple_request_field_bool_get_value ( f )
CALLEE	85:10	85:10	9	purple_request_field_bool_get_value
LEAF_NODE	85:10	85:10	10	purple_request_field_bool_get_value
LEAF_NODE	85:45	85:45	9	(
ARGUMENT	85:46	85:46	9	f
FIELD	85:46	85:46	10	f
LEAF_NODE	85:46	85:46	11	f
LEAF_NODE	85:47	85:47	9	)
LEAF_NODE	85:48	85:48	4	)
STATEMENTS	86:2	86:2	4	
EXPR_STATEMENT	86:2	86:37	5	mask |= SILC_ATTRIBUTE_CONTACT_CHAT ;
EXPR	86:2	86:2	6	mask |= SILC_ATTRIBUTE_CONTACT_CHAT
ASSIGN	86:2	86:10	7	mask |= SILC_ATTRIBUTE_CONTACT_CHAT
LVAL	86:2	86:2	8	mask
FIELD	86:2	86:2	9	mask
LEAF_NODE	86:2	86:2	10	mask
ASSIGN_OP	86:7	86:7	8	|=
LEAF_NODE	86:7	86:7	9	|=
RVAL	86:10	86:10	8	SILC_ATTRIBUTE_CONTACT_CHAT
FIELD	86:10	86:10	9	SILC_ATTRIBUTE_CONTACT_CHAT
LEAF_NODE	86:10	86:10	10	SILC_ATTRIBUTE_CONTACT_CHAT
LEAF_NODE	86:37	86:37	6	;
EXPR_STATEMENT	87:1	87:61	3	f = purple_request_fields_get_field ( fields , "contact_email" ) ;
EXPR	87:1	87:1	4	f = purple_request_fields_get_field ( fields , "contact_email" )
ASSIGN	87:1	87:5	5	f = purple_request_fields_get_field ( fields , "contact_email" )
LVAL	87:1	87:1	6	f
FIELD	87:1	87:1	7	f
LEAF_NODE	87:1	87:1	8	f
ASSIGN_OP	87:3	87:3	6	=
LEAF_NODE	87:3	87:3	7	=
RVAL	87:5	87:5	6	purple_request_fields_get_field ( fields , "contact_email" )
FUNCTION_CALL	87:5	87:60	7	purple_request_fields_get_field ( fields , "contact_email" )
CALLEE	87:5	87:5	8	purple_request_fields_get_field
LEAF_NODE	87:5	87:5	9	purple_request_fields_get_field
LEAF_NODE	87:36	87:36	8	(
ARGUMENT	87:37	87:37	8	fields
FIELD	87:37	87:37	9	fields
LEAF_NODE	87:37	87:37	10	fields
LEAF_NODE	87:43	87:43	8	,
ARGUMENT	87:45	87:45	8	"contact_email"
FIELD	87:45	87:45	9	"contact_email"
LEAF_NODE	87:45	87:45	10	"contact_email"
LEAF_NODE	87:60	87:60	8	)
LEAF_NODE	87:61	87:61	4	;
SELECTION	88:1	89:2	3	
KEYWORD	88:1	88:1	4	if
LEAF_NODE	88:1	88:1	5	if
LEAF_NODE	88:4	88:4	4	(
CONDITION	88:5	88:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	88:5	88:5	5	f && purple_request_field_bool_get_value ( f )
AND	88:5	88:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	88:5	88:5	7	f
FIELD	88:5	88:5	8	f
LEAF_NODE	88:5	88:5	9	f
LEAF_NODE	88:7	88:7	7	&&
EXPR	88:10	88:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	88:10	88:47	8	purple_request_field_bool_get_value ( f )
CALLEE	88:10	88:10	9	purple_request_field_bool_get_value
LEAF_NODE	88:10	88:10	10	purple_request_field_bool_get_value
LEAF_NODE	88:45	88:45	9	(
ARGUMENT	88:46	88:46	9	f
FIELD	88:46	88:46	10	f
LEAF_NODE	88:46	88:46	11	f
LEAF_NODE	88:47	88:47	9	)
LEAF_NODE	88:48	88:48	4	)
STATEMENTS	89:2	89:2	4	
EXPR_STATEMENT	89:2	89:38	5	mask |= SILC_ATTRIBUTE_CONTACT_EMAIL ;
EXPR	89:2	89:2	6	mask |= SILC_ATTRIBUTE_CONTACT_EMAIL
ASSIGN	89:2	89:10	7	mask |= SILC_ATTRIBUTE_CONTACT_EMAIL
LVAL	89:2	89:2	8	mask
FIELD	89:2	89:2	9	mask
LEAF_NODE	89:2	89:2	10	mask
ASSIGN_OP	89:7	89:7	8	|=
LEAF_NODE	89:7	89:7	9	|=
RVAL	89:10	89:10	8	SILC_ATTRIBUTE_CONTACT_EMAIL
FIELD	89:10	89:10	9	SILC_ATTRIBUTE_CONTACT_EMAIL
LEAF_NODE	89:10	89:10	10	SILC_ATTRIBUTE_CONTACT_EMAIL
LEAF_NODE	89:38	89:38	6	;
EXPR_STATEMENT	90:1	90:60	3	f = purple_request_fields_get_field ( fields , "contact_call" ) ;
EXPR	90:1	90:1	4	f = purple_request_fields_get_field ( fields , "contact_call" )
ASSIGN	90:1	90:5	5	f = purple_request_fields_get_field ( fields , "contact_call" )
LVAL	90:1	90:1	6	f
FIELD	90:1	90:1	7	f
LEAF_NODE	90:1	90:1	8	f
ASSIGN_OP	90:3	90:3	6	=
LEAF_NODE	90:3	90:3	7	=
RVAL	90:5	90:5	6	purple_request_fields_get_field ( fields , "contact_call" )
FUNCTION_CALL	90:5	90:59	7	purple_request_fields_get_field ( fields , "contact_call" )
CALLEE	90:5	90:5	8	purple_request_fields_get_field
LEAF_NODE	90:5	90:5	9	purple_request_fields_get_field
LEAF_NODE	90:36	90:36	8	(
ARGUMENT	90:37	90:37	8	fields
FIELD	90:37	90:37	9	fields
LEAF_NODE	90:37	90:37	10	fields
LEAF_NODE	90:43	90:43	8	,
ARGUMENT	90:45	90:45	8	"contact_call"
FIELD	90:45	90:45	9	"contact_call"
LEAF_NODE	90:45	90:45	10	"contact_call"
LEAF_NODE	90:59	90:59	8	)
LEAF_NODE	90:60	90:60	4	;
SELECTION	91:1	92:2	3	
KEYWORD	91:1	91:1	4	if
LEAF_NODE	91:1	91:1	5	if
LEAF_NODE	91:4	91:4	4	(
CONDITION	91:5	91:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	91:5	91:5	5	f && purple_request_field_bool_get_value ( f )
AND	91:5	91:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	91:5	91:5	7	f
FIELD	91:5	91:5	8	f
LEAF_NODE	91:5	91:5	9	f
LEAF_NODE	91:7	91:7	7	&&
EXPR	91:10	91:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	91:10	91:47	8	purple_request_field_bool_get_value ( f )
CALLEE	91:10	91:10	9	purple_request_field_bool_get_value
LEAF_NODE	91:10	91:10	10	purple_request_field_bool_get_value
LEAF_NODE	91:45	91:45	9	(
ARGUMENT	91:46	91:46	9	f
FIELD	91:46	91:46	10	f
LEAF_NODE	91:46	91:46	11	f
LEAF_NODE	91:47	91:47	9	)
LEAF_NODE	91:48	91:48	4	)
STATEMENTS	92:2	92:2	4	
EXPR_STATEMENT	92:2	92:37	5	mask |= SILC_ATTRIBUTE_CONTACT_CALL ;
EXPR	92:2	92:2	6	mask |= SILC_ATTRIBUTE_CONTACT_CALL
ASSIGN	92:2	92:10	7	mask |= SILC_ATTRIBUTE_CONTACT_CALL
LVAL	92:2	92:2	8	mask
FIELD	92:2	92:2	9	mask
LEAF_NODE	92:2	92:2	10	mask
ASSIGN_OP	92:7	92:7	8	|=
LEAF_NODE	92:7	92:7	9	|=
RVAL	92:10	92:10	8	SILC_ATTRIBUTE_CONTACT_CALL
FIELD	92:10	92:10	9	SILC_ATTRIBUTE_CONTACT_CALL
LEAF_NODE	92:10	92:10	10	SILC_ATTRIBUTE_CONTACT_CALL
LEAF_NODE	92:37	92:37	6	;
EXPR_STATEMENT	93:1	93:59	3	f = purple_request_fields_get_field ( fields , "contact_sms" ) ;
EXPR	93:1	93:1	4	f = purple_request_fields_get_field ( fields , "contact_sms" )
ASSIGN	93:1	93:5	5	f = purple_request_fields_get_field ( fields , "contact_sms" )
LVAL	93:1	93:1	6	f
FIELD	93:1	93:1	7	f
LEAF_NODE	93:1	93:1	8	f
ASSIGN_OP	93:3	93:3	6	=
LEAF_NODE	93:3	93:3	7	=
RVAL	93:5	93:5	6	purple_request_fields_get_field ( fields , "contact_sms" )
FUNCTION_CALL	93:5	93:58	7	purple_request_fields_get_field ( fields , "contact_sms" )
CALLEE	93:5	93:5	8	purple_request_fields_get_field
LEAF_NODE	93:5	93:5	9	purple_request_fields_get_field
LEAF_NODE	93:36	93:36	8	(
ARGUMENT	93:37	93:37	8	fields
FIELD	93:37	93:37	9	fields
LEAF_NODE	93:37	93:37	10	fields
LEAF_NODE	93:43	93:43	8	,
ARGUMENT	93:45	93:45	8	"contact_sms"
FIELD	93:45	93:45	9	"contact_sms"
LEAF_NODE	93:45	93:45	10	"contact_sms"
LEAF_NODE	93:58	93:58	8	)
LEAF_NODE	93:59	93:59	4	;
SELECTION	94:1	95:2	3	
KEYWORD	94:1	94:1	4	if
LEAF_NODE	94:1	94:1	5	if
LEAF_NODE	94:4	94:4	4	(
CONDITION	94:5	94:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	94:5	94:5	5	f && purple_request_field_bool_get_value ( f )
AND	94:5	94:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	94:5	94:5	7	f
FIELD	94:5	94:5	8	f
LEAF_NODE	94:5	94:5	9	f
LEAF_NODE	94:7	94:7	7	&&
EXPR	94:10	94:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	94:10	94:47	8	purple_request_field_bool_get_value ( f )
CALLEE	94:10	94:10	9	purple_request_field_bool_get_value
LEAF_NODE	94:10	94:10	10	purple_request_field_bool_get_value
LEAF_NODE	94:45	94:45	9	(
ARGUMENT	94:46	94:46	9	f
FIELD	94:46	94:46	10	f
LEAF_NODE	94:46	94:46	11	f
LEAF_NODE	94:47	94:47	9	)
LEAF_NODE	94:48	94:48	4	)
STATEMENTS	95:2	95:2	4	
EXPR_STATEMENT	95:2	95:36	5	mask |= SILC_ATTRIBUTE_CONTACT_SMS ;
EXPR	95:2	95:2	6	mask |= SILC_ATTRIBUTE_CONTACT_SMS
ASSIGN	95:2	95:10	7	mask |= SILC_ATTRIBUTE_CONTACT_SMS
LVAL	95:2	95:2	8	mask
FIELD	95:2	95:2	9	mask
LEAF_NODE	95:2	95:2	10	mask
ASSIGN_OP	95:7	95:7	8	|=
LEAF_NODE	95:7	95:7	9	|=
RVAL	95:10	95:10	8	SILC_ATTRIBUTE_CONTACT_SMS
FIELD	95:10	95:10	9	SILC_ATTRIBUTE_CONTACT_SMS
LEAF_NODE	95:10	95:10	10	SILC_ATTRIBUTE_CONTACT_SMS
LEAF_NODE	95:36	95:36	6	;
EXPR_STATEMENT	96:1	96:59	3	f = purple_request_fields_get_field ( fields , "contact_mms" ) ;
EXPR	96:1	96:1	4	f = purple_request_fields_get_field ( fields , "contact_mms" )
ASSIGN	96:1	96:5	5	f = purple_request_fields_get_field ( fields , "contact_mms" )
LVAL	96:1	96:1	6	f
FIELD	96:1	96:1	7	f
LEAF_NODE	96:1	96:1	8	f
ASSIGN_OP	96:3	96:3	6	=
LEAF_NODE	96:3	96:3	7	=
RVAL	96:5	96:5	6	purple_request_fields_get_field ( fields , "contact_mms" )
FUNCTION_CALL	96:5	96:58	7	purple_request_fields_get_field ( fields , "contact_mms" )
CALLEE	96:5	96:5	8	purple_request_fields_get_field
LEAF_NODE	96:5	96:5	9	purple_request_fields_get_field
LEAF_NODE	96:36	96:36	8	(
ARGUMENT	96:37	96:37	8	fields
FIELD	96:37	96:37	9	fields
LEAF_NODE	96:37	96:37	10	fields
LEAF_NODE	96:43	96:43	8	,
ARGUMENT	96:45	96:45	8	"contact_mms"
FIELD	96:45	96:45	9	"contact_mms"
LEAF_NODE	96:45	96:45	10	"contact_mms"
LEAF_NODE	96:58	96:58	8	)
LEAF_NODE	96:59	96:59	4	;
SELECTION	97:1	98:2	3	
KEYWORD	97:1	97:1	4	if
LEAF_NODE	97:1	97:1	5	if
LEAF_NODE	97:4	97:4	4	(
CONDITION	97:5	97:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	97:5	97:5	5	f && purple_request_field_bool_get_value ( f )
AND	97:5	97:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	97:5	97:5	7	f
FIELD	97:5	97:5	8	f
LEAF_NODE	97:5	97:5	9	f
LEAF_NODE	97:7	97:7	7	&&
EXPR	97:10	97:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	97:10	97:47	8	purple_request_field_bool_get_value ( f )
CALLEE	97:10	97:10	9	purple_request_field_bool_get_value
LEAF_NODE	97:10	97:10	10	purple_request_field_bool_get_value
LEAF_NODE	97:45	97:45	9	(
ARGUMENT	97:46	97:46	9	f
FIELD	97:46	97:46	10	f
LEAF_NODE	97:46	97:46	11	f
LEAF_NODE	97:47	97:47	9	)
LEAF_NODE	97:48	97:48	4	)
STATEMENTS	98:2	98:2	4	
EXPR_STATEMENT	98:2	98:36	5	mask |= SILC_ATTRIBUTE_CONTACT_MMS ;
EXPR	98:2	98:2	6	mask |= SILC_ATTRIBUTE_CONTACT_MMS
ASSIGN	98:2	98:10	7	mask |= SILC_ATTRIBUTE_CONTACT_MMS
LVAL	98:2	98:2	8	mask
FIELD	98:2	98:2	9	mask
LEAF_NODE	98:2	98:2	10	mask
ASSIGN_OP	98:7	98:7	8	|=
LEAF_NODE	98:7	98:7	9	|=
RVAL	98:10	98:10	8	SILC_ATTRIBUTE_CONTACT_MMS
FIELD	98:10	98:10	9	SILC_ATTRIBUTE_CONTACT_MMS
LEAF_NODE	98:10	98:10	10	SILC_ATTRIBUTE_CONTACT_MMS
LEAF_NODE	98:36	98:36	6	;
EXPR_STATEMENT	99:1	99:61	3	f = purple_request_fields_get_field ( fields , "contact_video" ) ;
EXPR	99:1	99:1	4	f = purple_request_fields_get_field ( fields , "contact_video" )
ASSIGN	99:1	99:5	5	f = purple_request_fields_get_field ( fields , "contact_video" )
LVAL	99:1	99:1	6	f
FIELD	99:1	99:1	7	f
LEAF_NODE	99:1	99:1	8	f
ASSIGN_OP	99:3	99:3	6	=
LEAF_NODE	99:3	99:3	7	=
RVAL	99:5	99:5	6	purple_request_fields_get_field ( fields , "contact_video" )
FUNCTION_CALL	99:5	99:60	7	purple_request_fields_get_field ( fields , "contact_video" )
CALLEE	99:5	99:5	8	purple_request_fields_get_field
LEAF_NODE	99:5	99:5	9	purple_request_fields_get_field
LEAF_NODE	99:36	99:36	8	(
ARGUMENT	99:37	99:37	8	fields
FIELD	99:37	99:37	9	fields
LEAF_NODE	99:37	99:37	10	fields
LEAF_NODE	99:43	99:43	8	,
ARGUMENT	99:45	99:45	8	"contact_video"
FIELD	99:45	99:45	9	"contact_video"
LEAF_NODE	99:45	99:45	10	"contact_video"
LEAF_NODE	99:60	99:60	8	)
LEAF_NODE	99:61	99:61	4	;
SELECTION	100:1	101:2	3	
KEYWORD	100:1	100:1	4	if
LEAF_NODE	100:1	100:1	5	if
LEAF_NODE	100:4	100:4	4	(
CONDITION	100:5	100:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	100:5	100:5	5	f && purple_request_field_bool_get_value ( f )
AND	100:5	100:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	100:5	100:5	7	f
FIELD	100:5	100:5	8	f
LEAF_NODE	100:5	100:5	9	f
LEAF_NODE	100:7	100:7	7	&&
EXPR	100:10	100:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	100:10	100:47	8	purple_request_field_bool_get_value ( f )
CALLEE	100:10	100:10	9	purple_request_field_bool_get_value
LEAF_NODE	100:10	100:10	10	purple_request_field_bool_get_value
LEAF_NODE	100:45	100:45	9	(
ARGUMENT	100:46	100:46	9	f
FIELD	100:46	100:46	10	f
LEAF_NODE	100:46	100:46	11	f
LEAF_NODE	100:47	100:47	9	)
LEAF_NODE	100:48	100:48	4	)
STATEMENTS	101:2	101:2	4	
EXPR_STATEMENT	101:2	101:38	5	mask |= SILC_ATTRIBUTE_CONTACT_VIDEO ;
EXPR	101:2	101:2	6	mask |= SILC_ATTRIBUTE_CONTACT_VIDEO
ASSIGN	101:2	101:10	7	mask |= SILC_ATTRIBUTE_CONTACT_VIDEO
LVAL	101:2	101:2	8	mask
FIELD	101:2	101:2	9	mask
LEAF_NODE	101:2	101:2	10	mask
ASSIGN_OP	101:7	101:7	8	|=
LEAF_NODE	101:7	101:7	9	|=
RVAL	101:10	101:10	8	SILC_ATTRIBUTE_CONTACT_VIDEO
FIELD	101:10	101:10	9	SILC_ATTRIBUTE_CONTACT_VIDEO
LEAF_NODE	101:10	101:10	10	SILC_ATTRIBUTE_CONTACT_VIDEO
LEAF_NODE	101:38	101:38	6	;
SELECTION	102:1	103:2	3	
KEYWORD	102:1	102:1	4	if
LEAF_NODE	102:1	102:1	5	if
LEAF_NODE	102:4	102:4	4	(
CONDITION	102:5	102:5	4	mask
EXPR	102:5	102:5	5	mask
FIELD	102:5	102:5	6	mask
LEAF_NODE	102:5	102:5	7	mask
LEAF_NODE	102:9	102:9	4	)
STATEMENTS	103:2	103:2	4	
EXPR_STATEMENT	103:2	106:26	5	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_PREFERRED_CONTACT , SILC_32_TO_PTR ( mask ) , sizeof ( SilcUInt32 ) ) ;
EXPR	103:2	103:2	6	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_PREFERRED_CONTACT , SILC_32_TO_PTR ( mask ) , sizeof ( SilcUInt32 ) )
FUNCTION_CALL	103:2	106:25	7	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_PREFERRED_CONTACT , SILC_32_TO_PTR ( mask ) , sizeof ( SilcUInt32 ) )
CALLEE	103:2	103:2	8	silc_client_attribute_add
LEAF_NODE	103:2	103:2	9	silc_client_attribute_add
LEAF_NODE	103:27	103:27	8	(
ARGUMENT	103:28	103:28	8	client
FIELD	103:28	103:28	9	client
LEAF_NODE	103:28	103:28	10	client
LEAF_NODE	103:34	103:34	8	,
ARGUMENT	103:36	103:36	8	conn
FIELD	103:36	103:36	9	conn
LEAF_NODE	103:36	103:36	10	conn
LEAF_NODE	103:40	103:40	8	,
ARGUMENT	104:7	104:7	8	SILC_ATTRIBUTE_PREFERRED_CONTACT
FIELD	104:7	104:7	9	SILC_ATTRIBUTE_PREFERRED_CONTACT
LEAF_NODE	104:7	104:7	10	SILC_ATTRIBUTE_PREFERRED_CONTACT
LEAF_NODE	104:39	104:39	8	,
ARGUMENT	105:7	105:7	8	SILC_32_TO_PTR ( mask )
FUNCTION_CALL	105:7	105:26	9	SILC_32_TO_PTR ( mask )
CALLEE	105:7	105:7	10	SILC_32_TO_PTR
LEAF_NODE	105:7	105:7	11	SILC_32_TO_PTR
LEAF_NODE	105:21	105:21	10	(
ARGUMENT	105:22	105:22	10	mask
FIELD	105:22	105:22	11	mask
LEAF_NODE	105:22	105:22	12	mask
LEAF_NODE	105:26	105:26	10	)
LEAF_NODE	105:27	105:27	8	,
ARGUMENT	106:7	106:7	8	sizeof ( SilcUInt32 )
FUNCTION_CALL	106:7	106:24	9	sizeof ( SilcUInt32 )
CALLEE	106:7	106:7	10	sizeof
LEAF_NODE	106:7	106:7	11	sizeof
LEAF_NODE	106:13	106:13	10	(
ARGUMENT	106:14	106:14	10	SilcUInt32
FIELD	106:14	106:14	11	SilcUInt32
LEAF_NODE	106:14	106:14	12	SilcUInt32
LEAF_NODE	106:24	106:24	10	)
LEAF_NODE	106:25	106:25	8	)
LEAF_NODE	106:26	106:26	6	;
EXPR_STATEMENT	108:1	108:11	3	val = NULL ;
EXPR	108:1	108:1	4	val = NULL
ASSIGN	108:1	108:7	5	val = NULL
LVAL	108:1	108:1	6	val
FIELD	108:1	108:1	7	val
LEAF_NODE	108:1	108:1	8	val
ASSIGN_OP	108:5	108:5	6	=
LEAF_NODE	108:5	108:5	7	=
RVAL	108:7	108:7	6	NULL
FIELD	108:7	108:7	7	NULL
LEAF_NODE	108:7	108:7	8	NULL
LEAF_NODE	108:11	108:11	4	;
EXPR_STATEMENT	109:1	109:59	3	f = purple_request_fields_get_field ( fields , "status_text" ) ;
EXPR	109:1	109:1	4	f = purple_request_fields_get_field ( fields , "status_text" )
ASSIGN	109:1	109:5	5	f = purple_request_fields_get_field ( fields , "status_text" )
LVAL	109:1	109:1	6	f
FIELD	109:1	109:1	7	f
LEAF_NODE	109:1	109:1	8	f
ASSIGN_OP	109:3	109:3	6	=
LEAF_NODE	109:3	109:3	7	=
RVAL	109:5	109:5	6	purple_request_fields_get_field ( fields , "status_text" )
FUNCTION_CALL	109:5	109:58	7	purple_request_fields_get_field ( fields , "status_text" )
CALLEE	109:5	109:5	8	purple_request_fields_get_field
LEAF_NODE	109:5	109:5	9	purple_request_fields_get_field
LEAF_NODE	109:36	109:36	8	(
ARGUMENT	109:37	109:37	8	fields
FIELD	109:37	109:37	9	fields
LEAF_NODE	109:37	109:37	10	fields
LEAF_NODE	109:43	109:43	8	,
ARGUMENT	109:45	109:45	8	"status_text"
FIELD	109:45	109:45	9	"status_text"
LEAF_NODE	109:45	109:45	10	"status_text"
LEAF_NODE	109:58	109:58	8	)
LEAF_NODE	109:59	109:59	4	;
SELECTION	110:1	111:2	3	
KEYWORD	110:1	110:1	4	if
LEAF_NODE	110:1	110:1	5	if
LEAF_NODE	110:4	110:4	4	(
CONDITION	110:5	110:5	4	f
EXPR	110:5	110:5	5	f
FIELD	110:5	110:5	6	f
LEAF_NODE	110:5	110:5	7	f
LEAF_NODE	110:6	110:6	4	)
STATEMENTS	111:2	111:2	4	
EXPR_STATEMENT	111:2	111:48	5	val = purple_request_field_string_get_value ( f ) ;
EXPR	111:2	111:2	6	val = purple_request_field_string_get_value ( f )
ASSIGN	111:2	111:8	7	val = purple_request_field_string_get_value ( f )
LVAL	111:2	111:2	8	val
FIELD	111:2	111:2	9	val
LEAF_NODE	111:2	111:2	10	val
ASSIGN_OP	111:6	111:6	8	=
LEAF_NODE	111:6	111:6	9	=
RVAL	111:8	111:8	8	purple_request_field_string_get_value ( f )
FUNCTION_CALL	111:8	111:47	9	purple_request_field_string_get_value ( f )
CALLEE	111:8	111:8	10	purple_request_field_string_get_value
LEAF_NODE	111:8	111:8	11	purple_request_field_string_get_value
LEAF_NODE	111:45	111:45	10	(
ARGUMENT	111:46	111:46	10	f
FIELD	111:46	111:46	11	f
LEAF_NODE	111:46	111:46	12	f
LEAF_NODE	111:47	111:47	10	)
LEAF_NODE	111:48	111:48	6	;
SELECTION	112:1	113:2	3	
KEYWORD	112:1	112:1	4	if
LEAF_NODE	112:1	112:1	5	if
LEAF_NODE	112:4	112:4	4	(
CONDITION	112:5	112:5	4	val && * val
EXPR	112:5	112:5	5	val && * val
AND	112:5	112:12	6	val && * val
EXPR	112:5	112:5	7	val
FIELD	112:5	112:5	8	val
LEAF_NODE	112:5	112:5	9	val
LEAF_NODE	112:9	112:9	7	&&
EXPR	112:12	112:12	7	* val
UNARY_EXPR	112:12	112:13	8	* val
UNARY_OPERATOR	112:12	112:12	9	*
LEAF_NODE	112:12	112:12	10	*
FIELD	112:13	112:13	9	val
LEAF_NODE	112:13	112:13	10	val
LEAF_NODE	112:16	112:16	4	)
STATEMENTS	113:2	113:2	4	
EXPR_STATEMENT	113:2	115:32	5	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_STATUS_FREETEXT , ( void * ) val , strlen ( val ) ) ;
EXPR	113:2	113:2	6	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_STATUS_FREETEXT , ( void * ) val , strlen ( val ) )
FUNCTION_CALL	113:2	115:31	7	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_STATUS_FREETEXT , ( void * ) val , strlen ( val ) )
CALLEE	113:2	113:2	8	silc_client_attribute_add
LEAF_NODE	113:2	113:2	9	silc_client_attribute_add
LEAF_NODE	113:27	113:27	8	(
ARGUMENT	113:28	113:28	8	client
FIELD	113:28	113:28	9	client
LEAF_NODE	113:28	113:28	10	client
LEAF_NODE	113:34	113:34	8	,
ARGUMENT	113:36	113:36	8	conn
FIELD	113:36	113:36	9	conn
LEAF_NODE	113:36	113:36	10	conn
LEAF_NODE	113:40	113:40	8	,
ARGUMENT	114:7	114:7	8	SILC_ATTRIBUTE_STATUS_FREETEXT
FIELD	114:7	114:7	9	SILC_ATTRIBUTE_STATUS_FREETEXT
LEAF_NODE	114:7	114:7	10	SILC_ATTRIBUTE_STATUS_FREETEXT
LEAF_NODE	114:37	114:37	8	,
ARGUMENT	115:7	115:15	8	( void * ) val
LEAF_NODE	115:7	115:7	9	(
TYPE_NAME	115:8	115:8	9	void
LEAF_NODE	115:8	115:8	10	void
LEAF_NODE	115:13	115:13	9	*
LEAF_NODE	115:14	115:14	9	)
FIELD	115:15	115:15	9	val
LEAF_NODE	115:15	115:15	10	val
LEAF_NODE	115:18	115:18	8	,
ARGUMENT	115:20	115:20	8	strlen ( val )
FUNCTION_CALL	115:20	115:30	9	strlen ( val )
CALLEE	115:20	115:20	10	strlen
LEAF_NODE	115:20	115:20	11	strlen
LEAF_NODE	115:26	115:26	10	(
ARGUMENT	115:27	115:27	10	val
FIELD	115:27	115:27	11	val
LEAF_NODE	115:27	115:27	12	val
LEAF_NODE	115:30	115:30	10	)
LEAF_NODE	115:31	115:31	8	)
LEAF_NODE	115:32	115:32	6	;
EXPR_STATEMENT	117:1	117:11	3	val = NULL ;
EXPR	117:1	117:1	4	val = NULL
ASSIGN	117:1	117:7	5	val = NULL
LVAL	117:1	117:1	6	val
FIELD	117:1	117:1	7	val
LEAF_NODE	117:1	117:1	8	val
ASSIGN_OP	117:5	117:5	6	=
LEAF_NODE	117:5	117:5	7	=
RVAL	117:7	117:7	6	NULL
FIELD	117:7	117:7	7	NULL
LEAF_NODE	117:7	117:7	8	NULL
LEAF_NODE	117:11	117:11	4	;
EXPR_STATEMENT	118:1	118:53	3	f = purple_request_fields_get_field ( fields , "vcard" ) ;
EXPR	118:1	118:1	4	f = purple_request_fields_get_field ( fields , "vcard" )
ASSIGN	118:1	118:5	5	f = purple_request_fields_get_field ( fields , "vcard" )
LVAL	118:1	118:1	6	f
FIELD	118:1	118:1	7	f
LEAF_NODE	118:1	118:1	8	f
ASSIGN_OP	118:3	118:3	6	=
LEAF_NODE	118:3	118:3	7	=
RVAL	118:5	118:5	6	purple_request_fields_get_field ( fields , "vcard" )
FUNCTION_CALL	118:5	118:52	7	purple_request_fields_get_field ( fields , "vcard" )
CALLEE	118:5	118:5	8	purple_request_fields_get_field
LEAF_NODE	118:5	118:5	9	purple_request_fields_get_field
LEAF_NODE	118:36	118:36	8	(
ARGUMENT	118:37	118:37	8	fields
FIELD	118:37	118:37	9	fields
LEAF_NODE	118:37	118:37	10	fields
LEAF_NODE	118:43	118:43	8	,
ARGUMENT	118:45	118:45	8	"vcard"
FIELD	118:45	118:45	9	"vcard"
LEAF_NODE	118:45	118:45	10	"vcard"
LEAF_NODE	118:52	118:52	8	)
LEAF_NODE	118:53	118:53	4	;
SELECTION	119:1	120:2	3	
KEYWORD	119:1	119:1	4	if
LEAF_NODE	119:1	119:1	5	if
LEAF_NODE	119:4	119:4	4	(
CONDITION	119:5	119:5	4	f
EXPR	119:5	119:5	5	f
FIELD	119:5	119:5	6	f
LEAF_NODE	119:5	119:5	7	f
LEAF_NODE	119:6	119:6	4	)
STATEMENTS	120:2	120:2	4	
EXPR_STATEMENT	120:2	120:48	5	val = purple_request_field_string_get_value ( f ) ;
EXPR	120:2	120:2	6	val = purple_request_field_string_get_value ( f )
ASSIGN	120:2	120:8	7	val = purple_request_field_string_get_value ( f )
LVAL	120:2	120:2	8	val
FIELD	120:2	120:2	9	val
LEAF_NODE	120:2	120:2	10	val
ASSIGN_OP	120:6	120:6	8	=
LEAF_NODE	120:6	120:6	9	=
RVAL	120:8	120:8	8	purple_request_field_string_get_value ( f )
FUNCTION_CALL	120:8	120:47	9	purple_request_field_string_get_value ( f )
CALLEE	120:8	120:8	10	purple_request_field_string_get_value
LEAF_NODE	120:8	120:8	11	purple_request_field_string_get_value
LEAF_NODE	120:45	120:45	10	(
ARGUMENT	120:46	120:46	10	f
FIELD	120:46	120:46	11	f
LEAF_NODE	120:46	120:46	12	f
LEAF_NODE	120:47	120:47	10	)
LEAF_NODE	120:48	120:48	6	;
SELECTION	121:1	121:18	3	
KEYWORD	121:1	121:1	4	if
LEAF_NODE	121:1	121:1	5	if
LEAF_NODE	121:4	121:4	4	(
CONDITION	121:5	121:5	4	val && * val
EXPR	121:5	121:5	5	val && * val
AND	121:5	121:12	6	val && * val
EXPR	121:5	121:5	7	val
FIELD	121:5	121:5	8	val
LEAF_NODE	121:5	121:5	9	val
LEAF_NODE	121:9	121:9	7	&&
EXPR	121:12	121:12	7	* val
UNARY_EXPR	121:12	121:13	8	* val
UNARY_OPERATOR	121:12	121:12	9	*
LEAF_NODE	121:12	121:12	10	*
FIELD	121:13	121:13	9	val
LEAF_NODE	121:13	121:13	10	val
LEAF_NODE	121:16	121:16	4	)
STATEMENTS	121:18	134:1	4	
LEAF_NODE	121:18	121:18	5	{
STATEMENTS	122:2	133:2	5	
EXPR_STATEMENT	122:2	122:54	6	purple_account_set_string ( sg -> account , "vcard" , val ) ;
EXPR	122:2	122:2	7	purple_account_set_string ( sg -> account , "vcard" , val )
FUNCTION_CALL	122:2	122:53	8	purple_account_set_string ( sg -> account , "vcard" , val )
CALLEE	122:2	122:2	9	purple_account_set_string
LEAF_NODE	122:2	122:2	10	purple_account_set_string
LEAF_NODE	122:27	122:27	9	(
ARGUMENT	122:28	122:28	9	sg -> account
FIELD	122:28	122:32	10	sg -> account
LEAF_NODE	122:28	122:28	11	sg
LEAF_NODE	122:30	122:30	11	->
LEAF_NODE	122:32	122:32	11	account
LEAF_NODE	122:39	122:39	9	,
ARGUMENT	122:41	122:41	9	"vcard"
FIELD	122:41	122:41	10	"vcard"
LEAF_NODE	122:41	122:41	11	"vcard"
LEAF_NODE	122:48	122:48	9	,
ARGUMENT	122:50	122:50	9	val
FIELD	122:50	122:50	10	val
LEAF_NODE	122:50	122:50	11	val
LEAF_NODE	122:53	122:53	9	)
LEAF_NODE	122:54	122:54	7	;
EXPR_STATEMENT	123:2	123:41	6	tmp = silc_file_readfile ( val , & tmp_len ) ;
EXPR	123:2	123:2	7	tmp = silc_file_readfile ( val , & tmp_len )
ASSIGN	123:2	123:8	8	tmp = silc_file_readfile ( val , & tmp_len )
LVAL	123:2	123:2	9	tmp
FIELD	123:2	123:2	10	tmp
LEAF_NODE	123:2	123:2	11	tmp
ASSIGN_OP	123:6	123:6	9	=
LEAF_NODE	123:6	123:6	10	=
RVAL	123:8	123:8	9	silc_file_readfile ( val , & tmp_len )
FUNCTION_CALL	123:8	123:40	10	silc_file_readfile ( val , & tmp_len )
CALLEE	123:8	123:8	11	silc_file_readfile
LEAF_NODE	123:8	123:8	12	silc_file_readfile
LEAF_NODE	123:26	123:26	11	(
ARGUMENT	123:27	123:27	11	val
FIELD	123:27	123:27	12	val
LEAF_NODE	123:27	123:27	13	val
LEAF_NODE	123:30	123:30	11	,
ARGUMENT	123:32	123:32	11	& tmp_len
UNARY_EXPR	123:32	123:33	12	& tmp_len
UNARY_OPERATOR	123:32	123:32	13	&
LEAF_NODE	123:32	123:32	14	&
FIELD	123:33	123:33	13	tmp_len
LEAF_NODE	123:33	123:33	14	tmp_len
LEAF_NODE	123:40	123:40	11	)
LEAF_NODE	123:41	123:41	7	;
SELECTION	124:2	124:11	6	
KEYWORD	124:2	124:2	7	if
LEAF_NODE	124:2	124:2	8	if
LEAF_NODE	124:5	124:5	7	(
CONDITION	124:6	124:6	7	tmp
EXPR	124:6	124:6	8	tmp
FIELD	124:6	124:6	9	tmp
LEAF_NODE	124:6	124:6	10	tmp
LEAF_NODE	124:9	124:9	7	)
STATEMENTS	124:11	131:2	7	
LEAF_NODE	124:11	124:11	8	{
STATEMENTS	125:3	126:3	8	
EXPR_STATEMENT	125:3	125:19	9	tmp [ tmp_len ] = 0 ;
EXPR	125:3	125:3	10	tmp [ tmp_len ] = 0
ASSIGN	125:3	125:18	11	tmp [ tmp_len ] = 0
LVAL	125:3	125:3	12	tmp [ tmp_len ]
FIELD	125:3	125:14	13	tmp [ tmp_len ]
LEAF_NODE	125:3	125:3	14	tmp
LEAF_NODE	125:6	125:6	14	[
EXPR	125:7	125:7	14	tmp_len
FIELD	125:7	125:7	15	tmp_len
LEAF_NODE	125:7	125:7	16	tmp_len
LEAF_NODE	125:14	125:14	14	]
ASSIGN_OP	125:16	125:16	12	=
LEAF_NODE	125:16	125:16	13	=
RVAL	125:18	125:18	12	0
FIELD	125:18	125:18	13	0
LEAF_NODE	125:18	125:18	14	0
LEAF_NODE	125:19	125:19	10	;
SELECTION	126:3	127:4	9	
KEYWORD	126:3	126:3	10	if
LEAF_NODE	126:3	126:3	11	if
LEAF_NODE	126:6	126:6	10	(
CONDITION	126:7	126:7	10	silc_vcard_decode ( ( unsigned char * ) tmp , tmp_len , & vcard )
EXPR	126:7	126:7	11	silc_vcard_decode ( ( unsigned char * ) tmp , tmp_len , & vcard )
FUNCTION_CALL	126:7	126:62	12	silc_vcard_decode ( ( unsigned char * ) tmp , tmp_len , & vcard )
CALLEE	126:7	126:7	13	silc_vcard_decode
LEAF_NODE	126:7	126:7	14	silc_vcard_decode
LEAF_NODE	126:24	126:24	13	(
ARGUMENT	126:25	126:42	13	( unsigned char * ) tmp
LEAF_NODE	126:25	126:25	14	(
TYPE_NAME	126:26	126:35	14	unsigned char
LEAF_NODE	126:26	126:26	15	unsigned
LEAF_NODE	126:35	126:35	15	char
LEAF_NODE	126:40	126:40	14	*
LEAF_NODE	126:41	126:41	14	)
FIELD	126:42	126:42	14	tmp
LEAF_NODE	126:42	126:42	15	tmp
LEAF_NODE	126:45	126:45	13	,
ARGUMENT	126:47	126:47	13	tmp_len
FIELD	126:47	126:47	14	tmp_len
LEAF_NODE	126:47	126:47	15	tmp_len
LEAF_NODE	126:54	126:54	13	,
ARGUMENT	126:56	126:56	13	& vcard
UNARY_EXPR	126:56	126:57	14	& vcard
UNARY_OPERATOR	126:56	126:56	15	&
LEAF_NODE	126:56	126:56	16	&
FIELD	126:57	126:57	15	vcard
LEAF_NODE	126:57	126:57	16	vcard
LEAF_NODE	126:62	126:62	13	)
LEAF_NODE	126:63	126:63	10	)
STATEMENTS	127:4	127:4	10	
EXPR_STATEMENT	127:4	130:23	11	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_USER_INFO , ( void * ) & vcard , sizeof ( vcard ) ) ;
EXPR	127:4	127:4	12	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_USER_INFO , ( void * ) & vcard , sizeof ( vcard ) )
FUNCTION_CALL	127:4	130:22	13	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_USER_INFO , ( void * ) & vcard , sizeof ( vcard ) )
CALLEE	127:4	127:4	14	silc_client_attribute_add
LEAF_NODE	127:4	127:4	15	silc_client_attribute_add
LEAF_NODE	127:29	127:29	14	(
ARGUMENT	127:30	127:30	14	client
FIELD	127:30	127:30	15	client
LEAF_NODE	127:30	127:30	16	client
LEAF_NODE	127:36	127:36	14	,
ARGUMENT	127:38	127:38	14	conn
FIELD	127:38	127:38	15	conn
LEAF_NODE	127:38	127:38	16	conn
LEAF_NODE	127:42	127:42	14	,
ARGUMENT	128:9	128:9	14	SILC_ATTRIBUTE_USER_INFO
FIELD	128:9	128:9	15	SILC_ATTRIBUTE_USER_INFO
LEAF_NODE	128:9	128:9	16	SILC_ATTRIBUTE_USER_INFO
LEAF_NODE	128:33	128:33	14	,
ARGUMENT	129:9	129:17	14	( void * ) & vcard
LEAF_NODE	129:9	129:9	15	(
TYPE_NAME	129:10	129:10	15	void
LEAF_NODE	129:10	129:10	16	void
LEAF_NODE	129:15	129:15	15	*
LEAF_NODE	129:16	129:16	15	)
UNARY_EXPR	129:17	129:18	15	& vcard
UNARY_OPERATOR	129:17	129:17	16	&
LEAF_NODE	129:17	129:17	17	&
FIELD	129:18	129:18	16	vcard
LEAF_NODE	129:18	129:18	17	vcard
LEAF_NODE	129:23	129:23	14	,
ARGUMENT	130:9	130:9	14	sizeof ( vcard )
FUNCTION_CALL	130:9	130:21	15	sizeof ( vcard )
CALLEE	130:9	130:9	16	sizeof
LEAF_NODE	130:9	130:9	17	sizeof
LEAF_NODE	130:15	130:15	16	(
ARGUMENT	130:16	130:16	16	vcard
FIELD	130:16	130:16	17	vcard
LEAF_NODE	130:16	130:16	18	vcard
LEAF_NODE	130:21	130:21	16	)
LEAF_NODE	130:22	130:22	14	)
LEAF_NODE	130:23	130:23	12	;
LEAF_NODE	131:2	131:2	8	}
EXPR_STATEMENT	132:2	132:25	6	silc_vcard_free ( & vcard ) ;
EXPR	132:2	132:2	7	silc_vcard_free ( & vcard )
FUNCTION_CALL	132:2	132:24	8	silc_vcard_free ( & vcard )
CALLEE	132:2	132:2	9	silc_vcard_free
LEAF_NODE	132:2	132:2	10	silc_vcard_free
LEAF_NODE	132:17	132:17	9	(
ARGUMENT	132:18	132:18	9	& vcard
UNARY_EXPR	132:18	132:19	10	& vcard
UNARY_OPERATOR	132:18	132:18	11	&
LEAF_NODE	132:18	132:18	12	&
FIELD	132:19	132:19	11	vcard
LEAF_NODE	132:19	132:19	12	vcard
LEAF_NODE	132:24	132:24	9	)
LEAF_NODE	132:25	132:25	7	;
EXPR_STATEMENT	133:2	133:16	6	silc_free ( tmp ) ;
EXPR	133:2	133:2	7	silc_free ( tmp )
FUNCTION_CALL	133:2	133:15	8	silc_free ( tmp )
CALLEE	133:2	133:2	9	silc_free
LEAF_NODE	133:2	133:2	10	silc_free
LEAF_NODE	133:11	133:11	9	(
ARGUMENT	133:12	133:12	9	tmp
FIELD	133:12	133:12	10	tmp
LEAF_NODE	133:12	133:12	11	tmp
LEAF_NODE	133:15	133:15	9	)
LEAF_NODE	133:16	133:16	7	;
LEAF_NODE	134:1	134:1	5	}
SELECTION	134:3	134:8	3	
KEYWORD	134:3	134:3	4	else
LEAF_NODE	134:3	134:3	5	else
STATEMENTS	134:8	136:1	4	
LEAF_NODE	134:8	134:8	5	{
STATEMENTS	135:2	135:2	5	
EXPR_STATEMENT	135:2	135:53	6	purple_account_set_string ( sg -> account , "vcard" , "" ) ;
EXPR	135:2	135:2	7	purple_account_set_string ( sg -> account , "vcard" , "" )
FUNCTION_CALL	135:2	135:52	8	purple_account_set_string ( sg -> account , "vcard" , "" )
CALLEE	135:2	135:2	9	purple_account_set_string
LEAF_NODE	135:2	135:2	10	purple_account_set_string
LEAF_NODE	135:27	135:27	9	(
ARGUMENT	135:28	135:28	9	sg -> account
FIELD	135:28	135:32	10	sg -> account
LEAF_NODE	135:28	135:28	11	sg
LEAF_NODE	135:30	135:30	11	->
LEAF_NODE	135:32	135:32	11	account
LEAF_NODE	135:39	135:39	9	,
ARGUMENT	135:41	135:41	9	"vcard"
FIELD	135:41	135:41	10	"vcard"
LEAF_NODE	135:41	135:41	11	"vcard"
LEAF_NODE	135:48	135:48	9	,
ARGUMENT	135:50	135:50	9	""
FIELD	135:50	135:50	10	""
LEAF_NODE	135:50	135:50	11	""
LEAF_NODE	135:52	135:52	9	)
LEAF_NODE	135:53	135:53	7	;
LEAF_NODE	136:1	136:1	5	}
EXPR_STATEMENT	139:1	139:54	3	f = purple_request_fields_get_field ( fields , "device" ) ;
EXPR	139:1	139:1	4	f = purple_request_fields_get_field ( fields , "device" )
ASSIGN	139:1	139:5	5	f = purple_request_fields_get_field ( fields , "device" )
LVAL	139:1	139:1	6	f
FIELD	139:1	139:1	7	f
LEAF_NODE	139:1	139:1	8	f
ASSIGN_OP	139:3	139:3	6	=
LEAF_NODE	139:3	139:3	7	=
RVAL	139:5	139:5	6	purple_request_fields_get_field ( fields , "device" )
FUNCTION_CALL	139:5	139:53	7	purple_request_fields_get_field ( fields , "device" )
CALLEE	139:5	139:5	8	purple_request_fields_get_field
LEAF_NODE	139:5	139:5	9	purple_request_fields_get_field
LEAF_NODE	139:36	139:36	8	(
ARGUMENT	139:37	139:37	8	fields
FIELD	139:37	139:37	9	fields
LEAF_NODE	139:37	139:37	10	fields
LEAF_NODE	139:43	139:43	8	,
ARGUMENT	139:45	139:45	8	"device"
FIELD	139:45	139:45	9	"device"
LEAF_NODE	139:45	139:45	10	"device"
LEAF_NODE	139:53	139:53	8	)
LEAF_NODE	139:54	139:54	4	;
SELECTION	140:1	140:50	3	
KEYWORD	140:1	140:1	4	if
LEAF_NODE	140:1	140:1	5	if
LEAF_NODE	140:4	140:4	4	(
CONDITION	140:5	140:5	4	f && purple_request_field_bool_get_value ( f )
EXPR	140:5	140:5	5	f && purple_request_field_bool_get_value ( f )
AND	140:5	140:10	6	f && purple_request_field_bool_get_value ( f )
EXPR	140:5	140:5	7	f
FIELD	140:5	140:5	8	f
LEAF_NODE	140:5	140:5	9	f
LEAF_NODE	140:7	140:7	7	&&
EXPR	140:10	140:10	7	purple_request_field_bool_get_value ( f )
FUNCTION_CALL	140:10	140:47	8	purple_request_field_bool_get_value ( f )
CALLEE	140:10	140:10	9	purple_request_field_bool_get_value
LEAF_NODE	140:10	140:10	10	purple_request_field_bool_get_value
LEAF_NODE	140:45	140:45	9	(
ARGUMENT	140:46	140:46	9	f
FIELD	140:46	140:46	10	f
LEAF_NODE	140:46	140:46	11	f
LEAF_NODE	140:47	140:47	9	)
LEAF_NODE	140:48	140:48	4	)
STATEMENTS	140:50	150:1	4	
LEAF_NODE	140:50	140:50	5	{
STATEMENTS	141:2	142:2	5	
SIMPLE_DECL	141:2	141:18	6	struct utsname u ;
VAR_DECL	141:2	141:17	7	struct utsname u
TYPE	141:2	141:2	8	struct utsname
TYPE_NAME	141:2	141:9	9	struct utsname
LEAF_NODE	141:2	141:2	10	struct
LEAF_NODE	141:9	141:9	10	utsname
NAME	141:17	141:17	8	u
LEAF_NODE	141:17	141:17	9	u
LEAF_NODE	141:18	141:18	7	;
SELECTION	142:2	142:18	6	
KEYWORD	142:2	142:2	7	if
LEAF_NODE	142:2	142:2	8	if
LEAF_NODE	142:5	142:5	7	(
CONDITION	142:6	142:6	7	! uname ( & u )
EXPR	142:6	142:6	8	! uname ( & u )
UNARY_EXPR	142:6	142:7	9	! uname ( & u )
UNARY_OPERATOR	142:6	142:6	10	!
LEAF_NODE	142:6	142:6	11	!
FUNCTION_CALL	142:7	142:15	10	uname ( & u )
CALLEE	142:7	142:7	11	uname
LEAF_NODE	142:7	142:7	12	uname
LEAF_NODE	142:12	142:12	11	(
ARGUMENT	142:13	142:13	11	& u
UNARY_EXPR	142:13	142:14	12	& u
UNARY_OPERATOR	142:13	142:13	13	&
LEAF_NODE	142:13	142:13	14	&
FIELD	142:14	142:14	13	u
LEAF_NODE	142:14	142:14	14	u
LEAF_NODE	142:15	142:15	11	)
LEAF_NODE	142:16	142:16	7	)
STATEMENTS	142:18	149:2	7	
LEAF_NODE	142:18	142:18	8	{
STATEMENTS	143:3	146:3	8	
EXPR_STATEMENT	143:3	143:44	9	dev . type = SILC_ATTRIBUTE_DEVICE_COMPUTER ;
EXPR	143:3	143:3	10	dev . type = SILC_ATTRIBUTE_DEVICE_COMPUTER
ASSIGN	143:3	143:14	11	dev . type = SILC_ATTRIBUTE_DEVICE_COMPUTER
LVAL	143:3	143:3	12	dev . type
FIELD	143:3	143:7	13	dev . type
LEAF_NODE	143:3	143:3	14	dev
LEAF_NODE	143:6	143:6	14	.
LEAF_NODE	143:7	143:7	14	type
ASSIGN_OP	143:12	143:12	12	=
LEAF_NODE	143:12	143:12	13	=
RVAL	143:14	143:14	12	SILC_ATTRIBUTE_DEVICE_COMPUTER
FIELD	143:14	143:14	13	SILC_ATTRIBUTE_DEVICE_COMPUTER
LEAF_NODE	143:14	143:14	14	SILC_ATTRIBUTE_DEVICE_COMPUTER
LEAF_NODE	143:44	143:44	10	;
EXPR_STATEMENT	144:3	144:26	9	dev . version = u . release ;
EXPR	144:3	144:3	10	dev . version = u . release
ASSIGN	144:3	144:17	11	dev . version = u . release
LVAL	144:3	144:3	12	dev . version
FIELD	144:3	144:7	13	dev . version
LEAF_NODE	144:3	144:3	14	dev
LEAF_NODE	144:6	144:6	14	.
LEAF_NODE	144:7	144:7	14	version
ASSIGN_OP	144:15	144:15	12	=
LEAF_NODE	144:15	144:15	13	=
RVAL	144:17	144:17	12	u . release
FIELD	144:17	144:19	13	u . release
LEAF_NODE	144:17	144:17	14	u
LEAF_NODE	144:18	144:18	14	.
LEAF_NODE	144:19	144:19	14	release
LEAF_NODE	144:26	144:26	10	;
EXPR_STATEMENT	145:3	145:24	9	dev . model = u . sysname ;
EXPR	145:3	145:3	10	dev . model = u . sysname
ASSIGN	145:3	145:15	11	dev . model = u . sysname
LVAL	145:3	145:3	12	dev . model
FIELD	145:3	145:7	13	dev . model
LEAF_NODE	145:3	145:3	14	dev
LEAF_NODE	145:6	145:6	14	.
LEAF_NODE	145:7	145:7	14	model
ASSIGN_OP	145:13	145:13	12	=
LEAF_NODE	145:13	145:13	13	=
RVAL	145:15	145:15	12	u . sysname
FIELD	145:15	145:17	13	u . sysname
LEAF_NODE	145:15	145:15	14	u
LEAF_NODE	145:16	145:16	14	.
LEAF_NODE	145:17	145:17	14	sysname
LEAF_NODE	145:24	145:24	10	;
EXPR_STATEMENT	146:3	148:34	9	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_DEVICE_INFO , ( void * ) & dev , sizeof ( dev ) ) ;
EXPR	146:3	146:3	10	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_DEVICE_INFO , ( void * ) & dev , sizeof ( dev ) )
FUNCTION_CALL	146:3	148:33	11	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_DEVICE_INFO , ( void * ) & dev , sizeof ( dev ) )
CALLEE	146:3	146:3	12	silc_client_attribute_add
LEAF_NODE	146:3	146:3	13	silc_client_attribute_add
LEAF_NODE	146:28	146:28	12	(
ARGUMENT	146:29	146:29	12	client
FIELD	146:29	146:29	13	client
LEAF_NODE	146:29	146:29	14	client
LEAF_NODE	146:35	146:35	12	,
ARGUMENT	146:37	146:37	12	conn
FIELD	146:37	146:37	13	conn
LEAF_NODE	146:37	146:37	14	conn
LEAF_NODE	146:41	146:41	12	,
ARGUMENT	147:8	147:8	12	SILC_ATTRIBUTE_DEVICE_INFO
FIELD	147:8	147:8	13	SILC_ATTRIBUTE_DEVICE_INFO
LEAF_NODE	147:8	147:8	14	SILC_ATTRIBUTE_DEVICE_INFO
LEAF_NODE	147:34	147:34	12	,
ARGUMENT	148:8	148:16	12	( void * ) & dev
LEAF_NODE	148:8	148:8	13	(
TYPE_NAME	148:9	148:9	13	void
LEAF_NODE	148:9	148:9	14	void
LEAF_NODE	148:14	148:14	13	*
LEAF_NODE	148:15	148:15	13	)
UNARY_EXPR	148:16	148:17	13	& dev
UNARY_OPERATOR	148:16	148:16	14	&
LEAF_NODE	148:16	148:16	15	&
FIELD	148:17	148:17	14	dev
LEAF_NODE	148:17	148:17	15	dev
LEAF_NODE	148:20	148:20	12	,
ARGUMENT	148:22	148:22	12	sizeof ( dev )
FUNCTION_CALL	148:22	148:32	13	sizeof ( dev )
CALLEE	148:22	148:22	14	sizeof
LEAF_NODE	148:22	148:22	15	sizeof
LEAF_NODE	148:28	148:28	14	(
ARGUMENT	148:29	148:29	14	dev
FIELD	148:29	148:29	15	dev
LEAF_NODE	148:29	148:29	16	dev
LEAF_NODE	148:32	148:32	14	)
LEAF_NODE	148:33	148:33	12	)
LEAF_NODE	148:34	148:34	10	;
LEAF_NODE	149:2	149:2	8	}
LEAF_NODE	150:1	150:1	5	}
EXPR_STATEMENT	153:1	153:11	3	val = NULL ;
EXPR	153:1	153:1	4	val = NULL
ASSIGN	153:1	153:7	5	val = NULL
LVAL	153:1	153:1	6	val
FIELD	153:1	153:1	7	val
LEAF_NODE	153:1	153:1	8	val
ASSIGN_OP	153:5	153:5	6	=
LEAF_NODE	153:5	153:5	7	=
RVAL	153:7	153:7	6	NULL
FIELD	153:7	153:7	7	NULL
LEAF_NODE	153:7	153:7	8	NULL
LEAF_NODE	153:11	153:11	4	;
EXPR_STATEMENT	154:1	154:56	3	f = purple_request_fields_get_field ( fields , "timezone" ) ;
EXPR	154:1	154:1	4	f = purple_request_fields_get_field ( fields , "timezone" )
ASSIGN	154:1	154:5	5	f = purple_request_fields_get_field ( fields , "timezone" )
LVAL	154:1	154:1	6	f
FIELD	154:1	154:1	7	f
LEAF_NODE	154:1	154:1	8	f
ASSIGN_OP	154:3	154:3	6	=
LEAF_NODE	154:3	154:3	7	=
RVAL	154:5	154:5	6	purple_request_fields_get_field ( fields , "timezone" )
FUNCTION_CALL	154:5	154:55	7	purple_request_fields_get_field ( fields , "timezone" )
CALLEE	154:5	154:5	8	purple_request_fields_get_field
LEAF_NODE	154:5	154:5	9	purple_request_fields_get_field
LEAF_NODE	154:36	154:36	8	(
ARGUMENT	154:37	154:37	8	fields
FIELD	154:37	154:37	9	fields
LEAF_NODE	154:37	154:37	10	fields
LEAF_NODE	154:43	154:43	8	,
ARGUMENT	154:45	154:45	8	"timezone"
FIELD	154:45	154:45	9	"timezone"
LEAF_NODE	154:45	154:45	10	"timezone"
LEAF_NODE	154:55	154:55	8	)
LEAF_NODE	154:56	154:56	4	;
SELECTION	155:1	156:2	3	
KEYWORD	155:1	155:1	4	if
LEAF_NODE	155:1	155:1	5	if
LEAF_NODE	155:4	155:4	4	(
CONDITION	155:5	155:5	4	f
EXPR	155:5	155:5	5	f
FIELD	155:5	155:5	6	f
LEAF_NODE	155:5	155:5	7	f
LEAF_NODE	155:6	155:6	4	)
STATEMENTS	156:2	156:2	4	
EXPR_STATEMENT	156:2	156:48	5	val = purple_request_field_string_get_value ( f ) ;
EXPR	156:2	156:2	6	val = purple_request_field_string_get_value ( f )
ASSIGN	156:2	156:8	7	val = purple_request_field_string_get_value ( f )
LVAL	156:2	156:2	8	val
FIELD	156:2	156:2	9	val
LEAF_NODE	156:2	156:2	10	val
ASSIGN_OP	156:6	156:6	8	=
LEAF_NODE	156:6	156:6	9	=
RVAL	156:8	156:8	8	purple_request_field_string_get_value ( f )
FUNCTION_CALL	156:8	156:47	9	purple_request_field_string_get_value ( f )
CALLEE	156:8	156:8	10	purple_request_field_string_get_value
LEAF_NODE	156:8	156:8	11	purple_request_field_string_get_value
LEAF_NODE	156:45	156:45	10	(
ARGUMENT	156:46	156:46	10	f
FIELD	156:46	156:46	11	f
LEAF_NODE	156:46	156:46	12	f
LEAF_NODE	156:47	156:47	10	)
LEAF_NODE	156:48	156:48	6	;
SELECTION	157:1	158:2	3	
KEYWORD	157:1	157:1	4	if
LEAF_NODE	157:1	157:1	5	if
LEAF_NODE	157:4	157:4	4	(
CONDITION	157:5	157:5	4	val && * val
EXPR	157:5	157:5	5	val && * val
AND	157:5	157:12	6	val && * val
EXPR	157:5	157:5	7	val
FIELD	157:5	157:5	8	val
LEAF_NODE	157:5	157:5	9	val
LEAF_NODE	157:9	157:9	7	&&
EXPR	157:12	157:12	7	* val
UNARY_EXPR	157:12	157:13	8	* val
UNARY_OPERATOR	157:12	157:12	9	*
LEAF_NODE	157:12	157:12	10	*
FIELD	157:13	157:13	9	val
LEAF_NODE	157:13	157:13	10	val
LEAF_NODE	157:16	157:16	4	)
STATEMENTS	158:2	158:2	4	
EXPR_STATEMENT	158:2	160:32	5	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_TIMEZONE , ( void * ) val , strlen ( val ) ) ;
EXPR	158:2	158:2	6	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_TIMEZONE , ( void * ) val , strlen ( val ) )
FUNCTION_CALL	158:2	160:31	7	silc_client_attribute_add ( client , conn , SILC_ATTRIBUTE_TIMEZONE , ( void * ) val , strlen ( val ) )
CALLEE	158:2	158:2	8	silc_client_attribute_add
LEAF_NODE	158:2	158:2	9	silc_client_attribute_add
LEAF_NODE	158:27	158:27	8	(
ARGUMENT	158:28	158:28	8	client
FIELD	158:28	158:28	9	client
LEAF_NODE	158:28	158:28	10	client
LEAF_NODE	158:34	158:34	8	,
ARGUMENT	158:36	158:36	8	conn
FIELD	158:36	158:36	9	conn
LEAF_NODE	158:36	158:36	10	conn
LEAF_NODE	158:40	158:40	8	,
ARGUMENT	159:7	159:7	8	SILC_ATTRIBUTE_TIMEZONE
FIELD	159:7	159:7	9	SILC_ATTRIBUTE_TIMEZONE
LEAF_NODE	159:7	159:7	10	SILC_ATTRIBUTE_TIMEZONE
LEAF_NODE	159:30	159:30	8	,
ARGUMENT	160:7	160:15	8	( void * ) val
LEAF_NODE	160:7	160:7	9	(
TYPE_NAME	160:8	160:8	9	void
LEAF_NODE	160:8	160:8	10	void
LEAF_NODE	160:13	160:13	9	*
LEAF_NODE	160:14	160:14	9	)
FIELD	160:15	160:15	9	val
LEAF_NODE	160:15	160:15	10	val
LEAF_NODE	160:18	160:18	8	,
ARGUMENT	160:20	160:20	8	strlen ( val )
FUNCTION_CALL	160:20	160:30	9	strlen ( val )
CALLEE	160:20	160:20	10	strlen
LEAF_NODE	160:20	160:20	11	strlen
LEAF_NODE	160:26	160:26	10	(
ARGUMENT	160:27	160:27	10	val
FIELD	160:27	160:27	11	val
LEAF_NODE	160:27	160:27	12	val
LEAF_NODE	160:30	160:30	10	)
LEAF_NODE	160:31	160:31	8	)
LEAF_NODE	160:32	160:32	6	;
LEAF_NODE	161:0	161:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:14	2	static inline guint32
LEAF_NODE	2:0	2:0	3	static
LEAF_NODE	2:7	2:7	3	inline
TYPE_NAME	2:14	2:14	3	guint32
LEAF_NODE	2:14	2:14	4	guint32
FUNCTION_NAME	2:22	2:22	2	H
LEAF_NODE	2:22	2:22	3	H
PARAMETER_LIST	2:23	2:55	2	( guint32 x , guint32 y , guint32 z )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:32	3	guint32 x
TYPE	2:24	2:24	4	guint32
TYPE_NAME	2:24	2:24	5	guint32
LEAF_NODE	2:24	2:24	6	guint32
NAME	2:32	2:32	4	x
LEAF_NODE	2:32	2:32	5	x
LEAF_NODE	2:33	2:33	3	,
PARAMETER_DECL	2:35	2:43	3	guint32 y
TYPE	2:35	2:35	4	guint32
TYPE_NAME	2:35	2:35	5	guint32
LEAF_NODE	2:35	2:35	6	guint32
NAME	2:43	2:43	4	y
LEAF_NODE	2:43	2:43	5	y
LEAF_NODE	2:44	2:44	3	,
PARAMETER_DECL	2:46	2:54	3	guint32 z
TYPE	2:46	2:46	4	guint32
TYPE_NAME	2:46	2:46	5	guint32
LEAF_NODE	2:46	2:46	6	guint32
NAME	2:54	2:54	4	z
LEAF_NODE	2:54	2:54	5	z
LEAF_NODE	2:55	2:55	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:17	3	return x ^ y ^ z ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	x ^ y ^ z
EXPR	4:8	4:16	5	x ^ y ^ z
FIELD	4:8	4:8	6	x
LEAF_NODE	4:8	4:8	7	x
LEAF_NODE	4:10	4:10	6	^
FIELD	4:12	4:12	6	y
LEAF_NODE	4:12	4:12	7	y
LEAF_NODE	4:14	4:14	6	^
FIELD	4:16	4:16	6	z
LEAF_NODE	4:16	4:16	7	z
LEAF_NODE	4:17	4:17	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	4:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	init_plugin
LEAF_NODE	2:0	2:0	3	init_plugin
PARAMETER_LIST	2:11	2:32	2	( PurplePlugin * plugin )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:26	3	PurplePlugin * plugin
TYPE	2:12	2:25	4	PurplePlugin *
TYPE_NAME	2:12	2:12	5	PurplePlugin
LEAF_NODE	2:12	2:12	6	PurplePlugin
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	plugin
LEAF_NODE	2:26	2:26	5	plugin
LEAF_NODE	2:32	2:32	3	)
LEAF_NODE	3:0	3:0	2	{
LEAF_NODE	0:0	0:0	2	STATEMENTS
LEAF_NODE	4:0	4:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:0	2	gboolean
TYPE_NAME	1:0	1:0	3	gboolean
LEAF_NODE	1:0	1:0	4	gboolean
FUNCTION_NAME	2:0	2:0	2	purple_conv_chat_is_user_ignored
LEAF_NODE	2:0	2:0	3	purple_conv_chat_is_user_ignored
PARAMETER_LIST	2:32	2:77	2	( const PurpleConvChat * chat , const char * user )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:55	3	const PurpleConvChat * chat
TYPE	2:33	2:54	4	const PurpleConvChat *
TYPE_NAME	2:33	2:39	5	const PurpleConvChat
LEAF_NODE	2:33	2:33	6	const
LEAF_NODE	2:39	2:39	6	PurpleConvChat
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	chat
LEAF_NODE	2:55	2:55	5	chat
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	2:61	2:73	3	const char * user
TYPE	2:61	2:72	4	const char *
TYPE_NAME	2:61	2:67	5	const char
LEAF_NODE	2:61	2:61	6	const
LEAF_NODE	2:67	2:67	6	char
POINTER	2:72	2:72	5	*
LEAF_NODE	2:72	2:72	6	*
NAME	2:73	2:73	4	user
LEAF_NODE	2:73	2:73	5	user
LEAF_NODE	2:77	2:77	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
EXPR_STATEMENT	4:1	4:42	3	g_return_val_if_fail ( chat != NULL , FALSE ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( chat != NULL , FALSE )
FUNCTION_CALL	4:1	4:41	5	g_return_val_if_fail ( chat != NULL , FALSE )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:30	6	chat != NULL
FIELD	4:22	4:22	7	chat
LEAF_NODE	4:22	4:22	8	chat
EQ_OPERATOR	4:27	4:27	7	!=
LEAF_NODE	4:27	4:27	8	!=
FIELD	4:30	4:30	7	NULL
LEAF_NODE	4:30	4:30	8	NULL
LEAF_NODE	4:34	4:34	6	,
ARGUMENT	4:36	4:36	6	FALSE
FIELD	4:36	4:36	7	FALSE
LEAF_NODE	4:36	4:36	8	FALSE
LEAF_NODE	4:41	4:41	6	)
LEAF_NODE	4:42	4:42	4	;
EXPR_STATEMENT	5:1	5:42	3	g_return_val_if_fail ( user != NULL , FALSE ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( user != NULL , FALSE )
FUNCTION_CALL	5:1	5:41	5	g_return_val_if_fail ( user != NULL , FALSE )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:30	6	user != NULL
FIELD	5:22	5:22	7	user
LEAF_NODE	5:22	5:22	8	user
EQ_OPERATOR	5:27	5:27	7	!=
LEAF_NODE	5:27	5:27	8	!=
FIELD	5:30	5:30	7	NULL
LEAF_NODE	5:30	5:30	8	NULL
LEAF_NODE	5:34	5:34	6	,
ARGUMENT	5:36	5:36	6	FALSE
FIELD	5:36	5:36	7	FALSE
LEAF_NODE	5:36	5:36	8	FALSE
LEAF_NODE	5:41	5:41	6	)
LEAF_NODE	5:42	5:42	4	;
JUMP_STATEMENT	6:1	6:63	3	return ( purple_conv_chat_get_ignored_user ( chat , user ) != NULL ) ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	( purple_conv_chat_get_ignored_user ( chat , user ) != NULL )
EXPR	6:8	6:62	5	( purple_conv_chat_get_ignored_user ( chat , user ) != NULL )
LEAF_NODE	6:8	6:8	6	(
FUNCTION_CALL	6:9	6:53	6	purple_conv_chat_get_ignored_user ( chat , user )
CALLEE	6:9	6:9	7	purple_conv_chat_get_ignored_user
LEAF_NODE	6:9	6:9	8	purple_conv_chat_get_ignored_user
LEAF_NODE	6:42	6:42	7	(
ARGUMENT	6:43	6:43	7	chat
FIELD	6:43	6:43	8	chat
LEAF_NODE	6:43	6:43	9	chat
LEAF_NODE	6:47	6:47	7	,
ARGUMENT	6:49	6:49	7	user
FIELD	6:49	6:49	8	user
LEAF_NODE	6:49	6:49	9	user
LEAF_NODE	6:53	6:53	7	)
EQ_OPERATOR	6:55	6:55	6	!=
LEAF_NODE	6:55	6:55	7	!=
FIELD	6:58	6:58	6	NULL
LEAF_NODE	6:58	6:58	7	NULL
LEAF_NODE	6:62	6:62	6	)
LEAF_NODE	6:63	6:63	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	plugin_load
LEAF_NODE	2:0	2:0	3	plugin_load
PARAMETER_LIST	2:12	2:34	2	( PurplePlugin * plugin )
LEAF_NODE	2:12	2:12	3	(
PARAMETER_DECL	2:13	2:28	3	PurplePlugin * plugin
TYPE	2:13	2:26	4	PurplePlugin *
TYPE_NAME	2:13	2:13	5	PurplePlugin
LEAF_NODE	2:13	2:13	6	PurplePlugin
POINTER	2:26	2:26	5	*
LEAF_NODE	2:26	2:26	6	*
NAME	2:28	2:28	4	plugin
LEAF_NODE	2:28	2:28	5	plugin
LEAF_NODE	2:34	2:34	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
EXPR_STATEMENT	4:1	6:7	3	purple_notify_message ( plugin , PURPLE_NOTIFY_MSG_INFO , "Hello World!" , "This is the Hello World! plugin :)" , NULL , NULL , NULL ) ;
EXPR	4:1	4:1	4	purple_notify_message ( plugin , PURPLE_NOTIFY_MSG_INFO , "Hello World!" , "This is the Hello World! plugin :)" , NULL , NULL , NULL )
FUNCTION_CALL	4:1	6:6	5	purple_notify_message ( plugin , PURPLE_NOTIFY_MSG_INFO , "Hello World!" , "This is the Hello World! plugin :)" , NULL , NULL , NULL )
CALLEE	4:1	4:1	6	purple_notify_message
LEAF_NODE	4:1	4:1	7	purple_notify_message
LEAF_NODE	4:23	4:23	6	(
ARGUMENT	4:24	4:24	6	plugin
FIELD	4:24	4:24	7	plugin
LEAF_NODE	4:24	4:24	8	plugin
LEAF_NODE	4:30	4:30	6	,
ARGUMENT	4:32	4:32	6	PURPLE_NOTIFY_MSG_INFO
FIELD	4:32	4:32	7	PURPLE_NOTIFY_MSG_INFO
LEAF_NODE	4:32	4:32	8	PURPLE_NOTIFY_MSG_INFO
LEAF_NODE	4:54	4:54	6	,
ARGUMENT	4:56	4:56	6	"Hello World!"
FIELD	4:56	4:56	7	"Hello World!"
LEAF_NODE	4:56	4:56	8	"Hello World!"
LEAF_NODE	4:70	4:70	6	,
ARGUMENT	5:2	5:2	6	"This is the Hello World! plugin :)"
FIELD	5:2	5:2	7	"This is the Hello World! plugin :)"
LEAF_NODE	5:2	5:2	8	"This is the Hello World! plugin :)"
LEAF_NODE	5:38	5:38	6	,
ARGUMENT	5:40	5:40	6	NULL
FIELD	5:40	5:40	7	NULL
LEAF_NODE	5:40	5:40	8	NULL
LEAF_NODE	5:44	5:44	6	,
ARGUMENT	5:46	5:46	6	NULL
FIELD	5:46	5:46	7	NULL
LEAF_NODE	5:46	5:46	8	NULL
LEAF_NODE	5:50	5:50	6	,
ARGUMENT	6:2	6:2	6	NULL
FIELD	6:2	6:2	7	NULL
LEAF_NODE	6:2	6:2	8	NULL
LEAF_NODE	6:6	6:6	6	)
LEAF_NODE	6:7	6:7	4	;
EXPR_STATEMENT	7:1	7:27	3	helloworld_plugin = plugin ;
EXPR	7:1	7:1	4	helloworld_plugin = plugin
ASSIGN	7:1	7:21	5	helloworld_plugin = plugin
LVAL	7:1	7:1	6	helloworld_plugin
FIELD	7:1	7:1	7	helloworld_plugin
LEAF_NODE	7:1	7:1	8	helloworld_plugin
ASSIGN_OP	7:19	7:19	6	=
LEAF_NODE	7:19	7:19	7	=
RVAL	7:21	7:21	6	plugin
FIELD	7:21	7:21	7	plugin
LEAF_NODE	7:21	7:21	8	plugin
LEAF_NODE	7:27	7:27	4	;
JUMP_STATEMENT	8:1	8:12	3	return TRUE ;
KEYWORD	8:1	8:1	4	return
LEAF_NODE	8:1	8:1	5	return
DESTINATION	8:8	8:8	4	TRUE
EXPR	8:8	8:8	5	TRUE
FIELD	8:8	8:8	6	TRUE
LEAF_NODE	8:8	8:8	7	TRUE
LEAF_NODE	8:12	8:12	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:8	2	GntMenu *
TYPE_NAME	2:0	2:0	3	GntMenu
LEAF_NODE	2:0	2:0	4	GntMenu
LEAF_NODE	2:8	2:8	3	*
FUNCTION_NAME	2:9	2:9	2	gnt_menuitem_get_submenu
LEAF_NODE	2:9	2:9	3	gnt_menuitem_get_submenu
PARAMETER_LIST	2:33	2:51	2	( GntMenuItem * item )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:47	3	GntMenuItem * item
TYPE	2:34	2:46	4	GntMenuItem *
TYPE_NAME	2:34	2:34	5	GntMenuItem
LEAF_NODE	2:34	2:34	6	GntMenuItem
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	item
LEAF_NODE	2:47	2:47	5	item
LEAF_NODE	2:51	2:51	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:21	3	return item -> submenu ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	item -> submenu
EXPR	4:8	4:8	5	item -> submenu
FIELD	4:8	4:14	6	item -> submenu
LEAF_NODE	4:8	4:8	7	item
LEAF_NODE	4:12	4:12	7	->
LEAF_NODE	4:14	4:14	7	submenu
LEAF_NODE	4:21	4:21	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	byte_stream_curpos
LEAF_NODE	2:4	2:4	3	byte_stream_curpos
PARAMETER_LIST	2:22	2:37	2	( ByteStream * bs )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:35	3	ByteStream * bs
TYPE	2:23	2:34	4	ByteStream *
TYPE_NAME	2:23	2:23	5	ByteStream
LEAF_NODE	2:23	2:23	6	ByteStream
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	bs
LEAF_NODE	2:35	2:35	5	bs
LEAF_NODE	2:37	2:37	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:18	3	return bs -> offset ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	bs -> offset
EXPR	4:8	4:8	5	bs -> offset
FIELD	4:8	4:12	6	bs -> offset
LEAF_NODE	4:8	4:8	7	bs
LEAF_NODE	4:10	4:10	7	->
LEAF_NODE	4:12	4:12	7	offset
LEAF_NODE	4:18	4:18	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:13	2	GntClipboard *
TYPE_NAME	2:0	2:0	3	GntClipboard
LEAF_NODE	2:0	2:0	4	GntClipboard
LEAF_NODE	2:13	2:13	3	*
FUNCTION_NAME	2:14	2:14	2	gnt_get_clipboard
LEAF_NODE	2:14	2:14	3	gnt_get_clipboard
PARAMETER_LIST	2:31	2:32	2	( )
LEAF_NODE	2:31	2:31	3	(
LEAF_NODE	2:32	2:32	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:17	3	return clipboard ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	clipboard
EXPR	4:8	4:8	5	clipboard
FIELD	4:8	4:8	6	clipboard
LEAF_NODE	4:8	4:8	7	clipboard
LEAF_NODE	4:17	4:17	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	151:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	silcpurple_attrs
LEAF_NODE	2:0	2:0	3	silcpurple_attrs
PARAMETER_LIST	2:16	2:43	2	( PurplePluginAction * action )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:37	3	PurplePluginAction * action
TYPE	2:17	2:36	4	PurplePluginAction *
TYPE_NAME	2:17	2:17	5	PurplePluginAction
LEAF_NODE	2:17	2:17	6	PurplePluginAction
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	action
LEAF_NODE	2:37	2:37	5	action
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	150:32	2	
SIMPLE_DECL	4:1	4:60	3	PurpleConnection * gc ; gc = ( PurpleConnection * ) action -> context ;
VAR_DECL	4:1	4:19	4	PurpleConnection * gc ; gc = ( PurpleConnection * ) action -> context
TYPE	4:1	4:18	5	PurpleConnection *
TYPE_NAME	4:1	4:1	6	PurpleConnection
LEAF_NODE	4:1	4:1	7	PurpleConnection
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	gc
LEAF_NODE	4:19	4:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	4:19	4:19	5	gc = ( PurpleConnection * ) action -> context
ASSIGN	4:19	4:24	6	gc = ( PurpleConnection * ) action -> context
LVAL	4:19	4:19	7	gc
NAME	4:19	4:19	8	gc
LEAF_NODE	4:19	4:19	9	gc
ASSIGN_OP	4:22	4:22	7	=
LEAF_NODE	4:22	4:22	8	=
RVAL	4:24	4:45	7	( PurpleConnection * ) action -> context
LEAF_NODE	4:24	4:24	8	(
TYPE_NAME	4:25	4:25	8	PurpleConnection
LEAF_NODE	4:25	4:25	9	PurpleConnection
LEAF_NODE	4:42	4:42	8	*
LEAF_NODE	4:43	4:43	8	)
FIELD	4:45	4:53	8	action -> context
LEAF_NODE	4:45	4:45	9	action
LEAF_NODE	4:51	4:51	9	->
LEAF_NODE	4:53	4:53	9	context
LEAF_NODE	4:60	4:60	4	;
SIMPLE_DECL	5:1	5:31	3	SilcPurple sg ; sg = gc -> proto_data ;
VAR_DECL	5:1	5:12	4	SilcPurple sg ; sg = gc -> proto_data
TYPE	5:1	5:1	5	SilcPurple
TYPE_NAME	5:1	5:1	6	SilcPurple
LEAF_NODE	5:1	5:1	7	SilcPurple
NAME	5:12	5:12	5	sg
LEAF_NODE	5:12	5:12	6	sg
LEAF_NODE	0:0	0:0	5	;
INIT	5:12	5:12	5	sg = gc -> proto_data
ASSIGN	5:12	5:17	6	sg = gc -> proto_data
LVAL	5:12	5:12	7	sg
NAME	5:12	5:12	8	sg
LEAF_NODE	5:12	5:12	9	sg
ASSIGN_OP	5:15	5:15	7	=
LEAF_NODE	5:15	5:15	8	=
RVAL	5:17	5:17	7	gc -> proto_data
FIELD	5:17	5:21	8	gc -> proto_data
LEAF_NODE	5:17	5:17	9	gc
LEAF_NODE	5:19	5:19	9	->
LEAF_NODE	5:21	5:21	9	proto_data
LEAF_NODE	5:31	5:31	4	;
SIMPLE_DECL	6:1	6:31	3	SilcClient client ; client = sg -> client ;
VAR_DECL	6:1	6:12	4	SilcClient client ; client = sg -> client
TYPE	6:1	6:1	5	SilcClient
TYPE_NAME	6:1	6:1	6	SilcClient
LEAF_NODE	6:1	6:1	7	SilcClient
NAME	6:12	6:12	5	client
LEAF_NODE	6:12	6:12	6	client
LEAF_NODE	0:0	0:0	5	;
INIT	6:12	6:12	5	client = sg -> client
ASSIGN	6:12	6:21	6	client = sg -> client
LVAL	6:12	6:12	7	client
NAME	6:12	6:12	8	client
LEAF_NODE	6:12	6:12	9	client
ASSIGN_OP	6:19	6:19	7	=
LEAF_NODE	6:19	6:19	8	=
RVAL	6:21	6:21	7	sg -> client
FIELD	6:21	6:25	8	sg -> client
LEAF_NODE	6:21	6:21	9	sg
LEAF_NODE	6:23	6:23	9	->
LEAF_NODE	6:25	6:25	9	client
LEAF_NODE	6:31	6:31	4	;
SIMPLE_DECL	7:1	7:37	3	SilcClientConnection conn ; conn = sg -> conn ;
VAR_DECL	7:1	7:22	4	SilcClientConnection conn ; conn = sg -> conn
TYPE	7:1	7:1	5	SilcClientConnection
TYPE_NAME	7:1	7:1	6	SilcClientConnection
LEAF_NODE	7:1	7:1	7	SilcClientConnection
NAME	7:22	7:22	5	conn
LEAF_NODE	7:22	7:22	6	conn
LEAF_NODE	0:0	0:0	5	;
INIT	7:22	7:22	5	conn = sg -> conn
ASSIGN	7:22	7:29	6	conn = sg -> conn
LVAL	7:22	7:22	7	conn
NAME	7:22	7:22	8	conn
LEAF_NODE	7:22	7:22	9	conn
ASSIGN_OP	7:27	7:27	7	=
LEAF_NODE	7:27	7:27	8	=
RVAL	7:29	7:29	7	sg -> conn
FIELD	7:29	7:33	8	sg -> conn
LEAF_NODE	7:29	7:29	9	sg
LEAF_NODE	7:31	7:31	9	->
LEAF_NODE	7:33	7:33	9	conn
LEAF_NODE	7:37	7:37	4	;
SIMPLE_DECL	8:1	8:28	3	PurpleRequestFields * fields ;
VAR_DECL	8:1	8:22	4	PurpleRequestFields * fields
TYPE	8:1	8:21	5	PurpleRequestFields *
TYPE_NAME	8:1	8:1	6	PurpleRequestFields
LEAF_NODE	8:1	8:1	7	PurpleRequestFields
POINTER	8:21	8:21	6	*
LEAF_NODE	8:21	8:21	7	*
NAME	8:22	8:22	5	fields
LEAF_NODE	8:22	8:22	6	fields
LEAF_NODE	8:28	8:28	4	;
SIMPLE_DECL	9:1	9:27	3	PurpleRequestFieldGroup * g ;
VAR_DECL	9:1	9:26	4	PurpleRequestFieldGroup * g
TYPE	9:1	9:25	5	PurpleRequestFieldGroup *
TYPE_NAME	9:1	9:1	6	PurpleRequestFieldGroup
LEAF_NODE	9:1	9:1	7	PurpleRequestFieldGroup
POINTER	9:25	9:25	6	*
LEAF_NODE	9:25	9:25	7	*
NAME	9:26	9:26	5	g
LEAF_NODE	9:26	9:26	6	g
LEAF_NODE	9:27	9:27	4	;
SIMPLE_DECL	10:1	10:22	3	PurpleRequestField * f ;
VAR_DECL	10:1	10:21	4	PurpleRequestField * f
TYPE	10:1	10:20	5	PurpleRequestField *
TYPE_NAME	10:1	10:1	6	PurpleRequestField
LEAF_NODE	10:1	10:1	7	PurpleRequestField
POINTER	10:20	10:20	6	*
LEAF_NODE	10:20	10:20	7	*
NAME	10:21	10:21	5	f
LEAF_NODE	10:21	10:21	6	f
LEAF_NODE	10:22	10:22	4	;
SIMPLE_DECL	11:1	11:20	3	SilcHashTable attrs ;
VAR_DECL	11:1	11:15	4	SilcHashTable attrs
TYPE	11:1	11:1	5	SilcHashTable
TYPE_NAME	11:1	11:1	6	SilcHashTable
LEAF_NODE	11:1	11:1	7	SilcHashTable
NAME	11:15	11:15	5	attrs
LEAF_NODE	11:15	11:15	6	attrs
LEAF_NODE	11:20	11:20	4	;
SIMPLE_DECL	12:1	12:26	3	SilcAttributePayload attr ;
VAR_DECL	12:1	12:22	4	SilcAttributePayload attr
TYPE	12:1	12:1	5	SilcAttributePayload
TYPE_NAME	12:1	12:1	6	SilcAttributePayload
LEAF_NODE	12:1	12:1	7	SilcAttributePayload
NAME	12:22	12:22	5	attr
LEAF_NODE	12:22	12:22	6	attr
LEAF_NODE	12:26	12:26	4	;
SIMPLE_DECL	13:1	16:52	3	gboolean mnormal ; mnormal = TRUE , gboolean mhappy ; mhappy = FALSE , gboolean msad ; msad = FALSE , gboolean mangry ; mangry = FALSE , gboolean mjealous ; mjealous = FALSE , gboolean mashamed ; mashamed = FALSE , gboolean minvincible ; minvincible = FALSE , gboolean minlove ; minlove = FALSE , gboolean msleepy ; msleepy = FALSE , gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE ;
INIT_DECL_LIST	13:1	13:1	4	gboolean mnormal ; mnormal = TRUE , gboolean mhappy ; mhappy = FALSE , gboolean msad ; msad = FALSE , gboolean mangry ; mangry = FALSE , gboolean mjealous ; mjealous = FALSE , gboolean mashamed ; mashamed = FALSE , gboolean minvincible ; minvincible = FALSE , gboolean minlove ; minlove = FALSE , gboolean msleepy ; msleepy = FALSE , gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	13:10	5	gboolean mnormal ; mnormal = TRUE
TYPE	13:1	13:1	6	gboolean
TYPE_NAME	13:1	13:1	7	gboolean
LEAF_NODE	13:1	13:1	8	gboolean
NAME	13:10	13:10	6	mnormal
LEAF_NODE	13:10	13:10	7	mnormal
LEAF_NODE	0:0	0:0	6	;
INIT	13:10	13:10	6	mnormal = TRUE
ASSIGN	13:10	13:20	7	mnormal = TRUE
LVAL	13:10	13:10	8	mnormal
NAME	13:10	13:10	9	mnormal
LEAF_NODE	13:10	13:10	10	mnormal
ASSIGN_OP	13:18	13:18	8	=
LEAF_NODE	13:18	13:18	9	=
RVAL	13:20	13:20	8	TRUE
FIELD	13:20	13:20	9	TRUE
LEAF_NODE	13:20	13:20	10	TRUE
LEAF_NODE	13:24	13:24	5	,
INIT_DECL_LIST	13:1	13:1	5	gboolean mhappy ; mhappy = FALSE , gboolean msad ; msad = FALSE , gboolean mangry ; mangry = FALSE , gboolean mjealous ; mjealous = FALSE , gboolean mashamed ; mashamed = FALSE , gboolean minvincible ; minvincible = FALSE , gboolean minlove ; minlove = FALSE , gboolean msleepy ; msleepy = FALSE , gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	13:26	6	gboolean mhappy ; mhappy = FALSE
TYPE	13:1	13:1	7	gboolean
TYPE_NAME	13:1	13:1	8	gboolean
LEAF_NODE	13:1	13:1	9	gboolean
NAME	13:26	13:26	7	mhappy
LEAF_NODE	13:26	13:26	8	mhappy
LEAF_NODE	0:0	0:0	7	;
INIT	13:26	13:26	7	mhappy = FALSE
ASSIGN	13:26	13:35	8	mhappy = FALSE
LVAL	13:26	13:26	9	mhappy
NAME	13:26	13:26	10	mhappy
LEAF_NODE	13:26	13:26	11	mhappy
ASSIGN_OP	13:33	13:33	9	=
LEAF_NODE	13:33	13:33	10	=
RVAL	13:35	13:35	9	FALSE
FIELD	13:35	13:35	10	FALSE
LEAF_NODE	13:35	13:35	11	FALSE
LEAF_NODE	13:40	13:40	6	,
INIT_DECL_LIST	13:1	13:1	6	gboolean msad ; msad = FALSE , gboolean mangry ; mangry = FALSE , gboolean mjealous ; mjealous = FALSE , gboolean mashamed ; mashamed = FALSE , gboolean minvincible ; minvincible = FALSE , gboolean minlove ; minlove = FALSE , gboolean msleepy ; msleepy = FALSE , gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	13:42	7	gboolean msad ; msad = FALSE
TYPE	13:1	13:1	8	gboolean
TYPE_NAME	13:1	13:1	9	gboolean
LEAF_NODE	13:1	13:1	10	gboolean
NAME	13:42	13:42	8	msad
LEAF_NODE	13:42	13:42	9	msad
LEAF_NODE	0:0	0:0	8	;
INIT	13:42	13:42	8	msad = FALSE
ASSIGN	13:42	13:49	9	msad = FALSE
LVAL	13:42	13:42	10	msad
NAME	13:42	13:42	11	msad
LEAF_NODE	13:42	13:42	12	msad
ASSIGN_OP	13:47	13:47	10	=
LEAF_NODE	13:47	13:47	11	=
RVAL	13:49	13:49	10	FALSE
FIELD	13:49	13:49	11	FALSE
LEAF_NODE	13:49	13:49	12	FALSE
LEAF_NODE	13:54	13:54	7	,
INIT_DECL_LIST	13:1	13:1	7	gboolean mangry ; mangry = FALSE , gboolean mjealous ; mjealous = FALSE , gboolean mashamed ; mashamed = FALSE , gboolean minvincible ; minvincible = FALSE , gboolean minlove ; minlove = FALSE , gboolean msleepy ; msleepy = FALSE , gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	14:2	8	gboolean mangry ; mangry = FALSE
TYPE	13:1	13:1	9	gboolean
TYPE_NAME	13:1	13:1	10	gboolean
LEAF_NODE	13:1	13:1	11	gboolean
NAME	14:2	14:2	9	mangry
LEAF_NODE	14:2	14:2	10	mangry
LEAF_NODE	0:0	0:0	9	;
INIT	14:2	14:2	9	mangry = FALSE
ASSIGN	14:2	14:11	10	mangry = FALSE
LVAL	14:2	14:2	11	mangry
NAME	14:2	14:2	12	mangry
LEAF_NODE	14:2	14:2	13	mangry
ASSIGN_OP	14:9	14:9	11	=
LEAF_NODE	14:9	14:9	12	=
RVAL	14:11	14:11	11	FALSE
FIELD	14:11	14:11	12	FALSE
LEAF_NODE	14:11	14:11	13	FALSE
LEAF_NODE	14:16	14:16	8	,
INIT_DECL_LIST	13:1	13:1	8	gboolean mjealous ; mjealous = FALSE , gboolean mashamed ; mashamed = FALSE , gboolean minvincible ; minvincible = FALSE , gboolean minlove ; minlove = FALSE , gboolean msleepy ; msleepy = FALSE , gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	14:18	9	gboolean mjealous ; mjealous = FALSE
TYPE	13:1	13:1	10	gboolean
TYPE_NAME	13:1	13:1	11	gboolean
LEAF_NODE	13:1	13:1	12	gboolean
NAME	14:18	14:18	10	mjealous
LEAF_NODE	14:18	14:18	11	mjealous
LEAF_NODE	0:0	0:0	10	;
INIT	14:18	14:18	10	mjealous = FALSE
ASSIGN	14:18	14:29	11	mjealous = FALSE
LVAL	14:18	14:18	12	mjealous
NAME	14:18	14:18	13	mjealous
LEAF_NODE	14:18	14:18	14	mjealous
ASSIGN_OP	14:27	14:27	12	=
LEAF_NODE	14:27	14:27	13	=
RVAL	14:29	14:29	12	FALSE
FIELD	14:29	14:29	13	FALSE
LEAF_NODE	14:29	14:29	14	FALSE
LEAF_NODE	14:34	14:34	9	,
INIT_DECL_LIST	13:1	13:1	9	gboolean mashamed ; mashamed = FALSE , gboolean minvincible ; minvincible = FALSE , gboolean minlove ; minlove = FALSE , gboolean msleepy ; msleepy = FALSE , gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	14:36	10	gboolean mashamed ; mashamed = FALSE
TYPE	13:1	13:1	11	gboolean
TYPE_NAME	13:1	13:1	12	gboolean
LEAF_NODE	13:1	13:1	13	gboolean
NAME	14:36	14:36	11	mashamed
LEAF_NODE	14:36	14:36	12	mashamed
LEAF_NODE	0:0	0:0	11	;
INIT	14:36	14:36	11	mashamed = FALSE
ASSIGN	14:36	14:47	12	mashamed = FALSE
LVAL	14:36	14:36	13	mashamed
NAME	14:36	14:36	14	mashamed
LEAF_NODE	14:36	14:36	15	mashamed
ASSIGN_OP	14:45	14:45	13	=
LEAF_NODE	14:45	14:45	14	=
RVAL	14:47	14:47	13	FALSE
FIELD	14:47	14:47	14	FALSE
LEAF_NODE	14:47	14:47	15	FALSE
LEAF_NODE	14:52	14:52	10	,
INIT_DECL_LIST	13:1	13:1	10	gboolean minvincible ; minvincible = FALSE , gboolean minlove ; minlove = FALSE , gboolean msleepy ; msleepy = FALSE , gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	15:2	11	gboolean minvincible ; minvincible = FALSE
TYPE	13:1	13:1	12	gboolean
TYPE_NAME	13:1	13:1	13	gboolean
LEAF_NODE	13:1	13:1	14	gboolean
NAME	15:2	15:2	12	minvincible
LEAF_NODE	15:2	15:2	13	minvincible
LEAF_NODE	0:0	0:0	12	;
INIT	15:2	15:2	12	minvincible = FALSE
ASSIGN	15:2	15:16	13	minvincible = FALSE
LVAL	15:2	15:2	14	minvincible
NAME	15:2	15:2	15	minvincible
LEAF_NODE	15:2	15:2	16	minvincible
ASSIGN_OP	15:14	15:14	14	=
LEAF_NODE	15:14	15:14	15	=
RVAL	15:16	15:16	14	FALSE
FIELD	15:16	15:16	15	FALSE
LEAF_NODE	15:16	15:16	16	FALSE
LEAF_NODE	15:21	15:21	11	,
INIT_DECL_LIST	13:1	13:1	11	gboolean minlove ; minlove = FALSE , gboolean msleepy ; msleepy = FALSE , gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	15:23	12	gboolean minlove ; minlove = FALSE
TYPE	13:1	13:1	13	gboolean
TYPE_NAME	13:1	13:1	14	gboolean
LEAF_NODE	13:1	13:1	15	gboolean
NAME	15:23	15:23	13	minlove
LEAF_NODE	15:23	15:23	14	minlove
LEAF_NODE	0:0	0:0	13	;
INIT	15:23	15:23	13	minlove = FALSE
ASSIGN	15:23	15:33	14	minlove = FALSE
LVAL	15:23	15:23	15	minlove
NAME	15:23	15:23	16	minlove
LEAF_NODE	15:23	15:23	17	minlove
ASSIGN_OP	15:31	15:31	15	=
LEAF_NODE	15:31	15:31	16	=
RVAL	15:33	15:33	15	FALSE
FIELD	15:33	15:33	16	FALSE
LEAF_NODE	15:33	15:33	17	FALSE
LEAF_NODE	15:38	15:38	12	,
INIT_DECL_LIST	13:1	13:1	12	gboolean msleepy ; msleepy = FALSE , gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	15:40	13	gboolean msleepy ; msleepy = FALSE
TYPE	13:1	13:1	14	gboolean
TYPE_NAME	13:1	13:1	15	gboolean
LEAF_NODE	13:1	13:1	16	gboolean
NAME	15:40	15:40	14	msleepy
LEAF_NODE	15:40	15:40	15	msleepy
LEAF_NODE	0:0	0:0	14	;
INIT	15:40	15:40	14	msleepy = FALSE
ASSIGN	15:40	15:50	15	msleepy = FALSE
LVAL	15:40	15:40	16	msleepy
NAME	15:40	15:40	17	msleepy
LEAF_NODE	15:40	15:40	18	msleepy
ASSIGN_OP	15:48	15:48	16	=
LEAF_NODE	15:48	15:48	17	=
RVAL	15:50	15:50	16	FALSE
FIELD	15:50	15:50	17	FALSE
LEAF_NODE	15:50	15:50	18	FALSE
LEAF_NODE	15:55	15:55	13	,
INIT_DECL_LIST	13:1	13:1	13	gboolean mbored ; mbored = FALSE , gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	16:2	14	gboolean mbored ; mbored = FALSE
TYPE	13:1	13:1	15	gboolean
TYPE_NAME	13:1	13:1	16	gboolean
LEAF_NODE	13:1	13:1	17	gboolean
NAME	16:2	16:2	15	mbored
LEAF_NODE	16:2	16:2	16	mbored
LEAF_NODE	0:0	0:0	15	;
INIT	16:2	16:2	15	mbored = FALSE
ASSIGN	16:2	16:11	16	mbored = FALSE
LVAL	16:2	16:2	17	mbored
NAME	16:2	16:2	18	mbored
LEAF_NODE	16:2	16:2	19	mbored
ASSIGN_OP	16:9	16:9	17	=
LEAF_NODE	16:9	16:9	18	=
RVAL	16:11	16:11	17	FALSE
FIELD	16:11	16:11	18	FALSE
LEAF_NODE	16:11	16:11	19	FALSE
LEAF_NODE	16:16	16:16	14	,
INIT_DECL_LIST	13:1	13:1	14	gboolean mexcited ; mexcited = FALSE , gboolean manxious ; manxious = FALSE
VAR_DECL	13:1	16:18	15	gboolean mexcited ; mexcited = FALSE
TYPE	13:1	13:1	16	gboolean
TYPE_NAME	13:1	13:1	17	gboolean
LEAF_NODE	13:1	13:1	18	gboolean
NAME	16:18	16:18	16	mexcited
LEAF_NODE	16:18	16:18	17	mexcited
LEAF_NODE	0:0	0:0	16	;
INIT	16:18	16:18	16	mexcited = FALSE
ASSIGN	16:18	16:29	17	mexcited = FALSE
LVAL	16:18	16:18	18	mexcited
NAME	16:18	16:18	19	mexcited
LEAF_NODE	16:18	16:18	20	mexcited
ASSIGN_OP	16:27	16:27	18	=
LEAF_NODE	16:27	16:27	19	=
RVAL	16:29	16:29	18	FALSE
FIELD	16:29	16:29	19	FALSE
LEAF_NODE	16:29	16:29	20	FALSE
LEAF_NODE	16:34	16:34	15	,
VAR_DECL	13:1	16:36	15	gboolean manxious ; manxious = FALSE
TYPE	13:1	13:1	16	gboolean
TYPE_NAME	13:1	13:1	17	gboolean
LEAF_NODE	13:1	13:1	18	gboolean
NAME	16:36	16:36	16	manxious
LEAF_NODE	16:36	16:36	17	manxious
LEAF_NODE	0:0	0:0	16	;
INIT	16:36	16:36	16	manxious = FALSE
ASSIGN	16:36	16:47	17	manxious = FALSE
LVAL	16:36	16:36	18	manxious
NAME	16:36	16:36	19	manxious
LEAF_NODE	16:36	16:36	20	manxious
ASSIGN_OP	16:45	16:45	18	=
LEAF_NODE	16:45	16:45	19	=
RVAL	16:47	16:47	18	FALSE
FIELD	16:47	16:47	19	FALSE
LEAF_NODE	16:47	16:47	20	FALSE
LEAF_NODE	16:52	16:52	4	;
SIMPLE_DECL	17:1	18:44	3	gboolean cemail ; cemail = FALSE , gboolean ccall ; ccall = FALSE , gboolean csms ; csms = FALSE , gboolean cmms ; cmms = FALSE , gboolean cchat ; cchat = TRUE , gboolean cvideo ; cvideo = FALSE ;
INIT_DECL_LIST	17:1	17:1	4	gboolean cemail ; cemail = FALSE , gboolean ccall ; ccall = FALSE , gboolean csms ; csms = FALSE , gboolean cmms ; cmms = FALSE , gboolean cchat ; cchat = TRUE , gboolean cvideo ; cvideo = FALSE
VAR_DECL	17:1	17:10	5	gboolean cemail ; cemail = FALSE
TYPE	17:1	17:1	6	gboolean
TYPE_NAME	17:1	17:1	7	gboolean
LEAF_NODE	17:1	17:1	8	gboolean
NAME	17:10	17:10	6	cemail
LEAF_NODE	17:10	17:10	7	cemail
LEAF_NODE	0:0	0:0	6	;
INIT	17:10	17:10	6	cemail = FALSE
ASSIGN	17:10	17:19	7	cemail = FALSE
LVAL	17:10	17:10	8	cemail
NAME	17:10	17:10	9	cemail
LEAF_NODE	17:10	17:10	10	cemail
ASSIGN_OP	17:17	17:17	8	=
LEAF_NODE	17:17	17:17	9	=
RVAL	17:19	17:19	8	FALSE
FIELD	17:19	17:19	9	FALSE
LEAF_NODE	17:19	17:19	10	FALSE
LEAF_NODE	17:24	17:24	5	,
INIT_DECL_LIST	17:1	17:1	5	gboolean ccall ; ccall = FALSE , gboolean csms ; csms = FALSE , gboolean cmms ; cmms = FALSE , gboolean cchat ; cchat = TRUE , gboolean cvideo ; cvideo = FALSE
VAR_DECL	17:1	17:26	6	gboolean ccall ; ccall = FALSE
TYPE	17:1	17:1	7	gboolean
TYPE_NAME	17:1	17:1	8	gboolean
LEAF_NODE	17:1	17:1	9	gboolean
NAME	17:26	17:26	7	ccall
LEAF_NODE	17:26	17:26	8	ccall
LEAF_NODE	0:0	0:0	7	;
INIT	17:26	17:26	7	ccall = FALSE
ASSIGN	17:26	17:34	8	ccall = FALSE
LVAL	17:26	17:26	9	ccall
NAME	17:26	17:26	10	ccall
LEAF_NODE	17:26	17:26	11	ccall
ASSIGN_OP	17:32	17:32	9	=
LEAF_NODE	17:32	17:32	10	=
RVAL	17:34	17:34	9	FALSE
FIELD	17:34	17:34	10	FALSE
LEAF_NODE	17:34	17:34	11	FALSE
LEAF_NODE	17:39	17:39	6	,
INIT_DECL_LIST	17:1	17:1	6	gboolean csms ; csms = FALSE , gboolean cmms ; cmms = FALSE , gboolean cchat ; cchat = TRUE , gboolean cvideo ; cvideo = FALSE
VAR_DECL	17:1	17:41	7	gboolean csms ; csms = FALSE
TYPE	17:1	17:1	8	gboolean
TYPE_NAME	17:1	17:1	9	gboolean
LEAF_NODE	17:1	17:1	10	gboolean
NAME	17:41	17:41	8	csms
LEAF_NODE	17:41	17:41	9	csms
LEAF_NODE	0:0	0:0	8	;
INIT	17:41	17:41	8	csms = FALSE
ASSIGN	17:41	17:48	9	csms = FALSE
LVAL	17:41	17:41	10	csms
NAME	17:41	17:41	11	csms
LEAF_NODE	17:41	17:41	12	csms
ASSIGN_OP	17:46	17:46	10	=
LEAF_NODE	17:46	17:46	11	=
RVAL	17:48	17:48	10	FALSE
FIELD	17:48	17:48	11	FALSE
LEAF_NODE	17:48	17:48	12	FALSE
LEAF_NODE	17:53	17:53	7	,
INIT_DECL_LIST	17:1	17:1	7	gboolean cmms ; cmms = FALSE , gboolean cchat ; cchat = TRUE , gboolean cvideo ; cvideo = FALSE
VAR_DECL	17:1	18:2	8	gboolean cmms ; cmms = FALSE
TYPE	17:1	17:1	9	gboolean
TYPE_NAME	17:1	17:1	10	gboolean
LEAF_NODE	17:1	17:1	11	gboolean
NAME	18:2	18:2	9	cmms
LEAF_NODE	18:2	18:2	10	cmms
LEAF_NODE	0:0	0:0	9	;
INIT	18:2	18:2	9	cmms = FALSE
ASSIGN	18:2	18:9	10	cmms = FALSE
LVAL	18:2	18:2	11	cmms
NAME	18:2	18:2	12	cmms
LEAF_NODE	18:2	18:2	13	cmms
ASSIGN_OP	18:7	18:7	11	=
LEAF_NODE	18:7	18:7	12	=
RVAL	18:9	18:9	11	FALSE
FIELD	18:9	18:9	12	FALSE
LEAF_NODE	18:9	18:9	13	FALSE
LEAF_NODE	18:14	18:14	8	,
INIT_DECL_LIST	17:1	17:1	8	gboolean cchat ; cchat = TRUE , gboolean cvideo ; cvideo = FALSE
VAR_DECL	17:1	18:16	9	gboolean cchat ; cchat = TRUE
TYPE	17:1	17:1	10	gboolean
TYPE_NAME	17:1	17:1	11	gboolean
LEAF_NODE	17:1	17:1	12	gboolean
NAME	18:16	18:16	10	cchat
LEAF_NODE	18:16	18:16	11	cchat
LEAF_NODE	0:0	0:0	10	;
INIT	18:16	18:16	10	cchat = TRUE
ASSIGN	18:16	18:24	11	cchat = TRUE
LVAL	18:16	18:16	12	cchat
NAME	18:16	18:16	13	cchat
LEAF_NODE	18:16	18:16	14	cchat
ASSIGN_OP	18:22	18:22	12	=
LEAF_NODE	18:22	18:22	13	=
RVAL	18:24	18:24	12	TRUE
FIELD	18:24	18:24	13	TRUE
LEAF_NODE	18:24	18:24	14	TRUE
LEAF_NODE	18:28	18:28	9	,
VAR_DECL	17:1	18:30	9	gboolean cvideo ; cvideo = FALSE
TYPE	17:1	17:1	10	gboolean
TYPE_NAME	17:1	17:1	11	gboolean
LEAF_NODE	17:1	17:1	12	gboolean
NAME	18:30	18:30	10	cvideo
LEAF_NODE	18:30	18:30	11	cvideo
LEAF_NODE	0:0	0:0	10	;
INIT	18:30	18:30	10	cvideo = FALSE
ASSIGN	18:30	18:39	11	cvideo = FALSE
LVAL	18:30	18:30	12	cvideo
NAME	18:30	18:30	13	cvideo
LEAF_NODE	18:30	18:30	14	cvideo
ASSIGN_OP	18:37	18:37	12	=
LEAF_NODE	18:37	18:37	13	=
RVAL	18:39	18:39	12	FALSE
FIELD	18:39	18:39	13	FALSE
LEAF_NODE	18:39	18:39	14	FALSE
LEAF_NODE	18:44	18:44	4	;
SIMPLE_DECL	19:1	19:23	3	gboolean device ; device = TRUE ;
VAR_DECL	19:1	19:10	4	gboolean device ; device = TRUE
TYPE	19:1	19:1	5	gboolean
TYPE_NAME	19:1	19:1	6	gboolean
LEAF_NODE	19:1	19:1	7	gboolean
NAME	19:10	19:10	5	device
LEAF_NODE	19:10	19:10	6	device
LEAF_NODE	0:0	0:0	5	;
INIT	19:10	19:10	5	device = TRUE
ASSIGN	19:10	19:19	6	device = TRUE
LVAL	19:10	19:10	7	device
NAME	19:10	19:10	8	device
LEAF_NODE	19:10	19:10	9	device
ASSIGN_OP	19:17	19:17	7	=
LEAF_NODE	19:17	19:17	8	=
RVAL	19:19	19:19	7	TRUE
FIELD	19:19	19:19	8	TRUE
LEAF_NODE	19:19	19:19	9	TRUE
LEAF_NODE	19:23	19:23	4	;
SIMPLE_DECL	20:1	20:18	3	char [ 1024 ] status ;
VAR_DECL	20:1	20:6	4	char [ 1024 ] status
TYPE	20:1	20:12	5	char [ 1024 ]
TYPE_NAME	20:1	20:1	6	char
LEAF_NODE	20:1	20:1	7	char
TYPE_SUFFIX	20:12	20:17	6	[ 1024 ]
LEAF_NODE	20:12	20:12	7	[
FIELD	20:13	20:13	7	1024
LEAF_NODE	20:13	20:13	8	1024
LEAF_NODE	20:17	20:17	7	]
NAME	20:6	20:6	5	status
LEAF_NODE	20:6	20:6	6	status
LEAF_NODE	20:18	20:18	4	;
EXPR_STATEMENT	21:1	21:20	3	sg = gc -> proto_data ;
EXPR	21:1	21:1	4	sg = gc -> proto_data
ASSIGN	21:1	21:6	5	sg = gc -> proto_data
LVAL	21:1	21:1	6	sg
FIELD	21:1	21:1	7	sg
LEAF_NODE	21:1	21:1	8	sg
ASSIGN_OP	21:4	21:4	6	=
LEAF_NODE	21:4	21:4	7	=
RVAL	21:6	21:6	6	gc -> proto_data
FIELD	21:6	21:10	7	gc -> proto_data
LEAF_NODE	21:6	21:6	8	gc
LEAF_NODE	21:8	21:8	8	->
LEAF_NODE	21:10	21:10	8	proto_data
LEAF_NODE	21:20	21:20	4	;
SELECTION	22:1	23:2	3	
KEYWORD	22:1	22:1	4	if
LEAF_NODE	22:1	22:1	5	if
LEAF_NODE	22:4	22:4	4	(
CONDITION	22:5	22:5	4	! sg
EXPR	22:5	22:5	5	! sg
UNARY_EXPR	22:5	22:6	6	! sg
UNARY_OPERATOR	22:5	22:5	7	!
LEAF_NODE	22:5	22:5	8	!
FIELD	22:6	22:6	7	sg
LEAF_NODE	22:6	22:6	8	sg
LEAF_NODE	22:8	22:8	4	)
STATEMENTS	23:2	23:2	4	
JUMP_STATEMENT	23:2	23:8	5	return DESTINATION ;
KEYWORD	23:2	23:2	6	return
LEAF_NODE	23:2	23:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	23:8	23:8	6	;
EXPR_STATEMENT	24:1	24:34	3	memset ( status , 0 , sizeof ( status ) ) ;
EXPR	24:1	24:1	4	memset ( status , 0 , sizeof ( status ) )
FUNCTION_CALL	24:1	24:33	5	memset ( status , 0 , sizeof ( status ) )
CALLEE	24:1	24:1	6	memset
LEAF_NODE	24:1	24:1	7	memset
LEAF_NODE	24:7	24:7	6	(
ARGUMENT	24:8	24:8	6	status
FIELD	24:8	24:8	7	status
LEAF_NODE	24:8	24:8	8	status
LEAF_NODE	24:14	24:14	6	,
ARGUMENT	24:16	24:16	6	0
FIELD	24:16	24:16	7	0
LEAF_NODE	24:16	24:16	8	0
LEAF_NODE	24:17	24:17	6	,
ARGUMENT	24:19	24:19	6	sizeof ( status )
FUNCTION_CALL	24:19	24:32	7	sizeof ( status )
CALLEE	24:19	24:19	8	sizeof
LEAF_NODE	24:19	24:19	9	sizeof
LEAF_NODE	24:25	24:25	8	(
ARGUMENT	24:26	24:26	8	status
FIELD	24:26	24:26	9	status
LEAF_NODE	24:26	24:26	10	status
LEAF_NODE	24:32	24:32	8	)
LEAF_NODE	24:33	24:33	6	)
LEAF_NODE	24:34	24:34	4	;
EXPR_STATEMENT	25:1	25:49	3	attrs = silc_client_attributes_get ( client , conn ) ;
EXPR	25:1	25:1	4	attrs = silc_client_attributes_get ( client , conn )
ASSIGN	25:1	25:9	5	attrs = silc_client_attributes_get ( client , conn )
LVAL	25:1	25:1	6	attrs
FIELD	25:1	25:1	7	attrs
LEAF_NODE	25:1	25:1	8	attrs
ASSIGN_OP	25:7	25:7	6	=
LEAF_NODE	25:7	25:7	7	=
RVAL	25:9	25:9	6	silc_client_attributes_get ( client , conn )
FUNCTION_CALL	25:9	25:48	7	silc_client_attributes_get ( client , conn )
CALLEE	25:9	25:9	8	silc_client_attributes_get
LEAF_NODE	25:9	25:9	9	silc_client_attributes_get
LEAF_NODE	25:35	25:35	8	(
ARGUMENT	25:36	25:36	8	client
FIELD	25:36	25:36	9	client
LEAF_NODE	25:36	25:36	10	client
LEAF_NODE	25:42	25:42	8	,
ARGUMENT	25:44	25:44	8	conn
FIELD	25:44	25:44	9	conn
LEAF_NODE	25:44	25:44	10	conn
LEAF_NODE	25:48	25:48	8	)
LEAF_NODE	25:49	25:49	4	;
SELECTION	26:1	26:12	3	
KEYWORD	26:1	26:1	4	if
LEAF_NODE	26:1	26:1	5	if
LEAF_NODE	26:4	26:4	4	(
CONDITION	26:5	26:5	4	attrs
EXPR	26:5	26:5	5	attrs
FIELD	26:5	26:5	6	attrs
LEAF_NODE	26:5	26:5	7	attrs
LEAF_NODE	26:10	26:10	4	)
STATEMENTS	26:12	65:1	4	
LEAF_NODE	26:12	26:12	5	{
STATEMENTS	27:2	61:2	5	
SELECTION	27:2	29:28	6	
KEYWORD	27:2	27:2	7	if
LEAF_NODE	27:2	27:2	8	if
LEAF_NODE	27:5	27:5	7	(
CONDITION	27:6	27:6	7	silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_STATUS_MOOD ) , NULL , ( void * ) & attr )
EXPR	27:6	27:6	8	silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_STATUS_MOOD ) , NULL , ( void * ) & attr )
FUNCTION_CALL	27:6	29:25	9	silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_STATUS_MOOD ) , NULL , ( void * ) & attr )
CALLEE	27:6	27:6	10	silc_hash_table_find
LEAF_NODE	27:6	27:6	11	silc_hash_table_find
LEAF_NODE	27:26	27:26	10	(
ARGUMENT	27:27	27:27	10	attrs
FIELD	27:27	27:27	11	attrs
LEAF_NODE	27:27	27:27	12	attrs
LEAF_NODE	27:32	27:32	10	,
ARGUMENT	28:6	28:6	10	SILC_32_TO_PTR ( SILC_ATTRIBUTE_STATUS_MOOD )
FUNCTION_CALL	28:6	28:47	11	SILC_32_TO_PTR ( SILC_ATTRIBUTE_STATUS_MOOD )
CALLEE	28:6	28:6	12	SILC_32_TO_PTR
LEAF_NODE	28:6	28:6	13	SILC_32_TO_PTR
LEAF_NODE	28:20	28:20	12	(
ARGUMENT	28:21	28:21	12	SILC_ATTRIBUTE_STATUS_MOOD
FIELD	28:21	28:21	13	SILC_ATTRIBUTE_STATUS_MOOD
LEAF_NODE	28:21	28:21	14	SILC_ATTRIBUTE_STATUS_MOOD
LEAF_NODE	28:47	28:47	12	)
LEAF_NODE	28:48	28:48	10	,
ARGUMENT	29:6	29:6	10	NULL
FIELD	29:6	29:6	11	NULL
LEAF_NODE	29:6	29:6	12	NULL
LEAF_NODE	29:10	29:10	10	,
ARGUMENT	29:12	29:20	10	( void * ) & attr
LEAF_NODE	29:12	29:12	11	(
TYPE_NAME	29:13	29:13	11	void
LEAF_NODE	29:13	29:13	12	void
LEAF_NODE	29:18	29:18	11	*
LEAF_NODE	29:19	29:19	11	)
UNARY_EXPR	29:20	29:21	11	& attr
UNARY_OPERATOR	29:20	29:20	12	&
LEAF_NODE	29:20	29:20	13	&
FIELD	29:21	29:21	12	attr
LEAF_NODE	29:21	29:21	13	attr
LEAF_NODE	29:25	29:25	10	)
LEAF_NODE	29:26	29:26	7	)
STATEMENTS	29:28	44:2	7	
LEAF_NODE	29:28	29:28	8	{
STATEMENTS	30:3	43:3	8	
SIMPLE_DECL	30:3	30:22	9	SilcUInt32 mood ; mood = 0 ;
VAR_DECL	30:3	30:14	10	SilcUInt32 mood ; mood = 0
TYPE	30:3	30:3	11	SilcUInt32
TYPE_NAME	30:3	30:3	12	SilcUInt32
LEAF_NODE	30:3	30:3	13	SilcUInt32
NAME	30:14	30:14	11	mood
LEAF_NODE	30:14	30:14	12	mood
LEAF_NODE	0:0	0:0	11	;
INIT	30:14	30:14	11	mood = 0
ASSIGN	30:14	30:21	12	mood = 0
LVAL	30:14	30:14	13	mood
NAME	30:14	30:14	14	mood
LEAF_NODE	30:14	30:14	15	mood
ASSIGN_OP	30:19	30:19	13	=
LEAF_NODE	30:19	30:19	14	=
RVAL	30:21	30:21	13	0
FIELD	30:21	30:21	14	0
LEAF_NODE	30:21	30:21	15	0
LEAF_NODE	30:22	30:22	10	;
EXPR_STATEMENT	31:3	31:55	9	silc_attribute_get_object ( attr , & mood , sizeof ( mood ) ) ;
EXPR	31:3	31:3	10	silc_attribute_get_object ( attr , & mood , sizeof ( mood ) )
FUNCTION_CALL	31:3	31:54	11	silc_attribute_get_object ( attr , & mood , sizeof ( mood ) )
CALLEE	31:3	31:3	12	silc_attribute_get_object
LEAF_NODE	31:3	31:3	13	silc_attribute_get_object
LEAF_NODE	31:28	31:28	12	(
ARGUMENT	31:29	31:29	12	attr
FIELD	31:29	31:29	13	attr
LEAF_NODE	31:29	31:29	14	attr
LEAF_NODE	31:33	31:33	12	,
ARGUMENT	31:35	31:35	12	& mood
UNARY_EXPR	31:35	31:36	13	& mood
UNARY_OPERATOR	31:35	31:35	14	&
LEAF_NODE	31:35	31:35	15	&
FIELD	31:36	31:36	14	mood
LEAF_NODE	31:36	31:36	15	mood
LEAF_NODE	31:40	31:40	12	,
ARGUMENT	31:42	31:42	12	sizeof ( mood )
FUNCTION_CALL	31:42	31:53	13	sizeof ( mood )
CALLEE	31:42	31:42	14	sizeof
LEAF_NODE	31:42	31:42	15	sizeof
LEAF_NODE	31:48	31:48	14	(
ARGUMENT	31:49	31:49	14	mood
FIELD	31:49	31:49	15	mood
LEAF_NODE	31:49	31:49	16	mood
LEAF_NODE	31:53	31:53	14	)
LEAF_NODE	31:54	31:54	12	)
LEAF_NODE	31:55	31:55	10	;
EXPR_STATEMENT	32:3	32:18	9	mnormal = ! mood ;
EXPR	32:3	32:3	10	mnormal = ! mood
ASSIGN	32:3	32:13	11	mnormal = ! mood
LVAL	32:3	32:3	12	mnormal
FIELD	32:3	32:3	13	mnormal
LEAF_NODE	32:3	32:3	14	mnormal
ASSIGN_OP	32:11	32:11	12	=
LEAF_NODE	32:11	32:11	13	=
RVAL	32:13	32:13	12	! mood
UNARY_EXPR	32:13	32:14	13	! mood
UNARY_OPERATOR	32:13	32:13	14	!
LEAF_NODE	32:13	32:13	15	!
FIELD	32:14	32:14	14	mood
LEAF_NODE	32:14	32:14	15	mood
LEAF_NODE	32:18	32:18	10	;
EXPR_STATEMENT	33:3	33:46	9	mhappy = ( mood & SILC_ATTRIBUTE_MOOD_HAPPY ) ;
EXPR	33:3	33:3	10	mhappy = ( mood & SILC_ATTRIBUTE_MOOD_HAPPY )
ASSIGN	33:3	33:12	11	mhappy = ( mood & SILC_ATTRIBUTE_MOOD_HAPPY )
LVAL	33:3	33:3	12	mhappy
FIELD	33:3	33:3	13	mhappy
LEAF_NODE	33:3	33:3	14	mhappy
ASSIGN_OP	33:10	33:10	12	=
LEAF_NODE	33:10	33:10	13	=
RVAL	33:12	33:45	12	( mood & SILC_ATTRIBUTE_MOOD_HAPPY )
LEAF_NODE	33:12	33:12	13	(
FIELD	33:13	33:13	13	mood
LEAF_NODE	33:13	33:13	14	mood
LEAF_NODE	33:18	33:18	13	&
FIELD	33:20	33:20	13	SILC_ATTRIBUTE_MOOD_HAPPY
LEAF_NODE	33:20	33:20	14	SILC_ATTRIBUTE_MOOD_HAPPY
LEAF_NODE	33:45	33:45	13	)
LEAF_NODE	33:46	33:46	10	;
EXPR_STATEMENT	34:3	34:42	9	msad = ( mood & SILC_ATTRIBUTE_MOOD_SAD ) ;
EXPR	34:3	34:3	10	msad = ( mood & SILC_ATTRIBUTE_MOOD_SAD )
ASSIGN	34:3	34:10	11	msad = ( mood & SILC_ATTRIBUTE_MOOD_SAD )
LVAL	34:3	34:3	12	msad
FIELD	34:3	34:3	13	msad
LEAF_NODE	34:3	34:3	14	msad
ASSIGN_OP	34:8	34:8	12	=
LEAF_NODE	34:8	34:8	13	=
RVAL	34:10	34:41	12	( mood & SILC_ATTRIBUTE_MOOD_SAD )
LEAF_NODE	34:10	34:10	13	(
FIELD	34:11	34:11	13	mood
LEAF_NODE	34:11	34:11	14	mood
LEAF_NODE	34:16	34:16	13	&
FIELD	34:18	34:18	13	SILC_ATTRIBUTE_MOOD_SAD
LEAF_NODE	34:18	34:18	14	SILC_ATTRIBUTE_MOOD_SAD
LEAF_NODE	34:41	34:41	13	)
LEAF_NODE	34:42	34:42	10	;
EXPR_STATEMENT	35:3	35:46	9	mangry = ( mood & SILC_ATTRIBUTE_MOOD_ANGRY ) ;
EXPR	35:3	35:3	10	mangry = ( mood & SILC_ATTRIBUTE_MOOD_ANGRY )
ASSIGN	35:3	35:12	11	mangry = ( mood & SILC_ATTRIBUTE_MOOD_ANGRY )
LVAL	35:3	35:3	12	mangry
FIELD	35:3	35:3	13	mangry
LEAF_NODE	35:3	35:3	14	mangry
ASSIGN_OP	35:10	35:10	12	=
LEAF_NODE	35:10	35:10	13	=
RVAL	35:12	35:45	12	( mood & SILC_ATTRIBUTE_MOOD_ANGRY )
LEAF_NODE	35:12	35:12	13	(
FIELD	35:13	35:13	13	mood
LEAF_NODE	35:13	35:13	14	mood
LEAF_NODE	35:18	35:18	13	&
FIELD	35:20	35:20	13	SILC_ATTRIBUTE_MOOD_ANGRY
LEAF_NODE	35:20	35:20	14	SILC_ATTRIBUTE_MOOD_ANGRY
LEAF_NODE	35:45	35:45	13	)
LEAF_NODE	35:46	35:46	10	;
EXPR_STATEMENT	36:3	36:50	9	mjealous = ( mood & SILC_ATTRIBUTE_MOOD_JEALOUS ) ;
EXPR	36:3	36:3	10	mjealous = ( mood & SILC_ATTRIBUTE_MOOD_JEALOUS )
ASSIGN	36:3	36:14	11	mjealous = ( mood & SILC_ATTRIBUTE_MOOD_JEALOUS )
LVAL	36:3	36:3	12	mjealous
FIELD	36:3	36:3	13	mjealous
LEAF_NODE	36:3	36:3	14	mjealous
ASSIGN_OP	36:12	36:12	12	=
LEAF_NODE	36:12	36:12	13	=
RVAL	36:14	36:49	12	( mood & SILC_ATTRIBUTE_MOOD_JEALOUS )
LEAF_NODE	36:14	36:14	13	(
FIELD	36:15	36:15	13	mood
LEAF_NODE	36:15	36:15	14	mood
LEAF_NODE	36:20	36:20	13	&
FIELD	36:22	36:22	13	SILC_ATTRIBUTE_MOOD_JEALOUS
LEAF_NODE	36:22	36:22	14	SILC_ATTRIBUTE_MOOD_JEALOUS
LEAF_NODE	36:49	36:49	13	)
LEAF_NODE	36:50	36:50	10	;
EXPR_STATEMENT	37:3	37:50	9	mashamed = ( mood & SILC_ATTRIBUTE_MOOD_ASHAMED ) ;
EXPR	37:3	37:3	10	mashamed = ( mood & SILC_ATTRIBUTE_MOOD_ASHAMED )
ASSIGN	37:3	37:14	11	mashamed = ( mood & SILC_ATTRIBUTE_MOOD_ASHAMED )
LVAL	37:3	37:3	12	mashamed
FIELD	37:3	37:3	13	mashamed
LEAF_NODE	37:3	37:3	14	mashamed
ASSIGN_OP	37:12	37:12	12	=
LEAF_NODE	37:12	37:12	13	=
RVAL	37:14	37:49	12	( mood & SILC_ATTRIBUTE_MOOD_ASHAMED )
LEAF_NODE	37:14	37:14	13	(
FIELD	37:15	37:15	13	mood
LEAF_NODE	37:15	37:15	14	mood
LEAF_NODE	37:20	37:20	13	&
FIELD	37:22	37:22	13	SILC_ATTRIBUTE_MOOD_ASHAMED
LEAF_NODE	37:22	37:22	14	SILC_ATTRIBUTE_MOOD_ASHAMED
LEAF_NODE	37:49	37:49	13	)
LEAF_NODE	37:50	37:50	10	;
EXPR_STATEMENT	38:3	38:56	9	minvincible = ( mood & SILC_ATTRIBUTE_MOOD_INVINCIBLE ) ;
EXPR	38:3	38:3	10	minvincible = ( mood & SILC_ATTRIBUTE_MOOD_INVINCIBLE )
ASSIGN	38:3	38:17	11	minvincible = ( mood & SILC_ATTRIBUTE_MOOD_INVINCIBLE )
LVAL	38:3	38:3	12	minvincible
FIELD	38:3	38:3	13	minvincible
LEAF_NODE	38:3	38:3	14	minvincible
ASSIGN_OP	38:15	38:15	12	=
LEAF_NODE	38:15	38:15	13	=
RVAL	38:17	38:55	12	( mood & SILC_ATTRIBUTE_MOOD_INVINCIBLE )
LEAF_NODE	38:17	38:17	13	(
FIELD	38:18	38:18	13	mood
LEAF_NODE	38:18	38:18	14	mood
LEAF_NODE	38:23	38:23	13	&
FIELD	38:25	38:25	13	SILC_ATTRIBUTE_MOOD_INVINCIBLE
LEAF_NODE	38:25	38:25	14	SILC_ATTRIBUTE_MOOD_INVINCIBLE
LEAF_NODE	38:55	38:55	13	)
LEAF_NODE	38:56	38:56	10	;
EXPR_STATEMENT	39:3	39:48	9	minlove = ( mood & SILC_ATTRIBUTE_MOOD_INLOVE ) ;
EXPR	39:3	39:3	10	minlove = ( mood & SILC_ATTRIBUTE_MOOD_INLOVE )
ASSIGN	39:3	39:13	11	minlove = ( mood & SILC_ATTRIBUTE_MOOD_INLOVE )
LVAL	39:3	39:3	12	minlove
FIELD	39:3	39:3	13	minlove
LEAF_NODE	39:3	39:3	14	minlove
ASSIGN_OP	39:11	39:11	12	=
LEAF_NODE	39:11	39:11	13	=
RVAL	39:13	39:47	12	( mood & SILC_ATTRIBUTE_MOOD_INLOVE )
LEAF_NODE	39:13	39:13	13	(
FIELD	39:14	39:14	13	mood
LEAF_NODE	39:14	39:14	14	mood
LEAF_NODE	39:19	39:19	13	&
FIELD	39:21	39:21	13	SILC_ATTRIBUTE_MOOD_INLOVE
LEAF_NODE	39:21	39:21	14	SILC_ATTRIBUTE_MOOD_INLOVE
LEAF_NODE	39:47	39:47	13	)
LEAF_NODE	39:48	39:48	10	;
EXPR_STATEMENT	40:3	40:48	9	msleepy = ( mood & SILC_ATTRIBUTE_MOOD_SLEEPY ) ;
EXPR	40:3	40:3	10	msleepy = ( mood & SILC_ATTRIBUTE_MOOD_SLEEPY )
ASSIGN	40:3	40:13	11	msleepy = ( mood & SILC_ATTRIBUTE_MOOD_SLEEPY )
LVAL	40:3	40:3	12	msleepy
FIELD	40:3	40:3	13	msleepy
LEAF_NODE	40:3	40:3	14	msleepy
ASSIGN_OP	40:11	40:11	12	=
LEAF_NODE	40:11	40:11	13	=
RVAL	40:13	40:47	12	( mood & SILC_ATTRIBUTE_MOOD_SLEEPY )
LEAF_NODE	40:13	40:13	13	(
FIELD	40:14	40:14	13	mood
LEAF_NODE	40:14	40:14	14	mood
LEAF_NODE	40:19	40:19	13	&
FIELD	40:21	40:21	13	SILC_ATTRIBUTE_MOOD_SLEEPY
LEAF_NODE	40:21	40:21	14	SILC_ATTRIBUTE_MOOD_SLEEPY
LEAF_NODE	40:47	40:47	13	)
LEAF_NODE	40:48	40:48	10	;
EXPR_STATEMENT	41:3	41:46	9	mbored = ( mood & SILC_ATTRIBUTE_MOOD_BORED ) ;
EXPR	41:3	41:3	10	mbored = ( mood & SILC_ATTRIBUTE_MOOD_BORED )
ASSIGN	41:3	41:12	11	mbored = ( mood & SILC_ATTRIBUTE_MOOD_BORED )
LVAL	41:3	41:3	12	mbored
FIELD	41:3	41:3	13	mbored
LEAF_NODE	41:3	41:3	14	mbored
ASSIGN_OP	41:10	41:10	12	=
LEAF_NODE	41:10	41:10	13	=
RVAL	41:12	41:45	12	( mood & SILC_ATTRIBUTE_MOOD_BORED )
LEAF_NODE	41:12	41:12	13	(
FIELD	41:13	41:13	13	mood
LEAF_NODE	41:13	41:13	14	mood
LEAF_NODE	41:18	41:18	13	&
FIELD	41:20	41:20	13	SILC_ATTRIBUTE_MOOD_BORED
LEAF_NODE	41:20	41:20	14	SILC_ATTRIBUTE_MOOD_BORED
LEAF_NODE	41:45	41:45	13	)
LEAF_NODE	41:46	41:46	10	;
EXPR_STATEMENT	42:3	42:50	9	mexcited = ( mood & SILC_ATTRIBUTE_MOOD_EXCITED ) ;
EXPR	42:3	42:3	10	mexcited = ( mood & SILC_ATTRIBUTE_MOOD_EXCITED )
ASSIGN	42:3	42:14	11	mexcited = ( mood & SILC_ATTRIBUTE_MOOD_EXCITED )
LVAL	42:3	42:3	12	mexcited
FIELD	42:3	42:3	13	mexcited
LEAF_NODE	42:3	42:3	14	mexcited
ASSIGN_OP	42:12	42:12	12	=
LEAF_NODE	42:12	42:12	13	=
RVAL	42:14	42:49	12	( mood & SILC_ATTRIBUTE_MOOD_EXCITED )
LEAF_NODE	42:14	42:14	13	(
FIELD	42:15	42:15	13	mood
LEAF_NODE	42:15	42:15	14	mood
LEAF_NODE	42:20	42:20	13	&
FIELD	42:22	42:22	13	SILC_ATTRIBUTE_MOOD_EXCITED
LEAF_NODE	42:22	42:22	14	SILC_ATTRIBUTE_MOOD_EXCITED
LEAF_NODE	42:49	42:49	13	)
LEAF_NODE	42:50	42:50	10	;
EXPR_STATEMENT	43:3	43:50	9	manxious = ( mood & SILC_ATTRIBUTE_MOOD_ANXIOUS ) ;
EXPR	43:3	43:3	10	manxious = ( mood & SILC_ATTRIBUTE_MOOD_ANXIOUS )
ASSIGN	43:3	43:14	11	manxious = ( mood & SILC_ATTRIBUTE_MOOD_ANXIOUS )
LVAL	43:3	43:3	12	manxious
FIELD	43:3	43:3	13	manxious
LEAF_NODE	43:3	43:3	14	manxious
ASSIGN_OP	43:12	43:12	12	=
LEAF_NODE	43:12	43:12	13	=
RVAL	43:14	43:49	12	( mood & SILC_ATTRIBUTE_MOOD_ANXIOUS )
LEAF_NODE	43:14	43:14	13	(
FIELD	43:15	43:15	13	mood
LEAF_NODE	43:15	43:15	14	mood
LEAF_NODE	43:20	43:20	13	&
FIELD	43:22	43:22	13	SILC_ATTRIBUTE_MOOD_ANXIOUS
LEAF_NODE	43:22	43:22	14	SILC_ATTRIBUTE_MOOD_ANXIOUS
LEAF_NODE	43:49	43:49	13	)
LEAF_NODE	43:50	43:50	10	;
LEAF_NODE	44:2	44:2	8	}
SELECTION	45:2	47:28	6	
KEYWORD	45:2	45:2	7	if
LEAF_NODE	45:2	45:2	8	if
LEAF_NODE	45:5	45:5	7	(
CONDITION	45:6	45:6	7	silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_PREFERRED_CONTACT ) , NULL , ( void * ) & attr )
EXPR	45:6	45:6	8	silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_PREFERRED_CONTACT ) , NULL , ( void * ) & attr )
FUNCTION_CALL	45:6	47:25	9	silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_PREFERRED_CONTACT ) , NULL , ( void * ) & attr )
CALLEE	45:6	45:6	10	silc_hash_table_find
LEAF_NODE	45:6	45:6	11	silc_hash_table_find
LEAF_NODE	45:26	45:26	10	(
ARGUMENT	45:27	45:27	10	attrs
FIELD	45:27	45:27	11	attrs
LEAF_NODE	45:27	45:27	12	attrs
LEAF_NODE	45:32	45:32	10	,
ARGUMENT	46:6	46:6	10	SILC_32_TO_PTR ( SILC_ATTRIBUTE_PREFERRED_CONTACT )
FUNCTION_CALL	46:6	46:53	11	SILC_32_TO_PTR ( SILC_ATTRIBUTE_PREFERRED_CONTACT )
CALLEE	46:6	46:6	12	SILC_32_TO_PTR
LEAF_NODE	46:6	46:6	13	SILC_32_TO_PTR
LEAF_NODE	46:20	46:20	12	(
ARGUMENT	46:21	46:21	12	SILC_ATTRIBUTE_PREFERRED_CONTACT
FIELD	46:21	46:21	13	SILC_ATTRIBUTE_PREFERRED_CONTACT
LEAF_NODE	46:21	46:21	14	SILC_ATTRIBUTE_PREFERRED_CONTACT
LEAF_NODE	46:53	46:53	12	)
LEAF_NODE	46:54	46:54	10	,
ARGUMENT	47:6	47:6	10	NULL
FIELD	47:6	47:6	11	NULL
LEAF_NODE	47:6	47:6	12	NULL
LEAF_NODE	47:10	47:10	10	,
ARGUMENT	47:12	47:20	10	( void * ) & attr
LEAF_NODE	47:12	47:12	11	(
TYPE_NAME	47:13	47:13	11	void
LEAF_NODE	47:13	47:13	12	void
LEAF_NODE	47:18	47:18	11	*
LEAF_NODE	47:19	47:19	11	)
UNARY_EXPR	47:20	47:21	11	& attr
UNARY_OPERATOR	47:20	47:20	12	&
LEAF_NODE	47:20	47:20	13	&
FIELD	47:21	47:21	12	attr
LEAF_NODE	47:21	47:21	13	attr
LEAF_NODE	47:25	47:25	10	)
LEAF_NODE	47:26	47:26	7	)
STATEMENTS	47:28	56:2	7	
LEAF_NODE	47:28	47:28	8	{
STATEMENTS	48:3	55:3	8	
SIMPLE_DECL	48:3	48:25	9	SilcUInt32 contact ; contact = 0 ;
VAR_DECL	48:3	48:14	10	SilcUInt32 contact ; contact = 0
TYPE	48:3	48:3	11	SilcUInt32
TYPE_NAME	48:3	48:3	12	SilcUInt32
LEAF_NODE	48:3	48:3	13	SilcUInt32
NAME	48:14	48:14	11	contact
LEAF_NODE	48:14	48:14	12	contact
LEAF_NODE	0:0	0:0	11	;
INIT	48:14	48:14	11	contact = 0
ASSIGN	48:14	48:24	12	contact = 0
LVAL	48:14	48:14	13	contact
NAME	48:14	48:14	14	contact
LEAF_NODE	48:14	48:14	15	contact
ASSIGN_OP	48:22	48:22	13	=
LEAF_NODE	48:22	48:22	14	=
RVAL	48:24	48:24	13	0
FIELD	48:24	48:24	14	0
LEAF_NODE	48:24	48:24	15	0
LEAF_NODE	48:25	48:25	10	;
EXPR_STATEMENT	49:3	49:61	9	silc_attribute_get_object ( attr , & contact , sizeof ( contact ) ) ;
EXPR	49:3	49:3	10	silc_attribute_get_object ( attr , & contact , sizeof ( contact ) )
FUNCTION_CALL	49:3	49:60	11	silc_attribute_get_object ( attr , & contact , sizeof ( contact ) )
CALLEE	49:3	49:3	12	silc_attribute_get_object
LEAF_NODE	49:3	49:3	13	silc_attribute_get_object
LEAF_NODE	49:28	49:28	12	(
ARGUMENT	49:29	49:29	12	attr
FIELD	49:29	49:29	13	attr
LEAF_NODE	49:29	49:29	14	attr
LEAF_NODE	49:33	49:33	12	,
ARGUMENT	49:35	49:35	12	& contact
UNARY_EXPR	49:35	49:36	13	& contact
UNARY_OPERATOR	49:35	49:35	14	&
LEAF_NODE	49:35	49:35	15	&
FIELD	49:36	49:36	14	contact
LEAF_NODE	49:36	49:36	15	contact
LEAF_NODE	49:43	49:43	12	,
ARGUMENT	49:45	49:45	12	sizeof ( contact )
FUNCTION_CALL	49:45	49:59	13	sizeof ( contact )
CALLEE	49:45	49:45	14	sizeof
LEAF_NODE	49:45	49:45	15	sizeof
LEAF_NODE	49:51	49:51	14	(
ARGUMENT	49:52	49:52	14	contact
FIELD	49:52	49:52	15	contact
LEAF_NODE	49:52	49:52	16	contact
LEAF_NODE	49:59	49:59	14	)
LEAF_NODE	49:60	49:60	12	)
LEAF_NODE	49:61	49:61	10	;
EXPR_STATEMENT	50:3	50:52	9	cemail = ( contact & SILC_ATTRIBUTE_CONTACT_EMAIL ) ;
EXPR	50:3	50:3	10	cemail = ( contact & SILC_ATTRIBUTE_CONTACT_EMAIL )
ASSIGN	50:3	50:12	11	cemail = ( contact & SILC_ATTRIBUTE_CONTACT_EMAIL )
LVAL	50:3	50:3	12	cemail
FIELD	50:3	50:3	13	cemail
LEAF_NODE	50:3	50:3	14	cemail
ASSIGN_OP	50:10	50:10	12	=
LEAF_NODE	50:10	50:10	13	=
RVAL	50:12	50:51	12	( contact & SILC_ATTRIBUTE_CONTACT_EMAIL )
LEAF_NODE	50:12	50:12	13	(
FIELD	50:13	50:13	13	contact
LEAF_NODE	50:13	50:13	14	contact
LEAF_NODE	50:21	50:21	13	&
FIELD	50:23	50:23	13	SILC_ATTRIBUTE_CONTACT_EMAIL
LEAF_NODE	50:23	50:23	14	SILC_ATTRIBUTE_CONTACT_EMAIL
LEAF_NODE	50:51	50:51	13	)
LEAF_NODE	50:52	50:52	10	;
EXPR_STATEMENT	51:3	51:50	9	ccall = ( contact & SILC_ATTRIBUTE_CONTACT_CALL ) ;
EXPR	51:3	51:3	10	ccall = ( contact & SILC_ATTRIBUTE_CONTACT_CALL )
ASSIGN	51:3	51:11	11	ccall = ( contact & SILC_ATTRIBUTE_CONTACT_CALL )
LVAL	51:3	51:3	12	ccall
FIELD	51:3	51:3	13	ccall
LEAF_NODE	51:3	51:3	14	ccall
ASSIGN_OP	51:9	51:9	12	=
LEAF_NODE	51:9	51:9	13	=
RVAL	51:11	51:49	12	( contact & SILC_ATTRIBUTE_CONTACT_CALL )
LEAF_NODE	51:11	51:11	13	(
FIELD	51:12	51:12	13	contact
LEAF_NODE	51:12	51:12	14	contact
LEAF_NODE	51:20	51:20	13	&
FIELD	51:22	51:22	13	SILC_ATTRIBUTE_CONTACT_CALL
LEAF_NODE	51:22	51:22	14	SILC_ATTRIBUTE_CONTACT_CALL
LEAF_NODE	51:49	51:49	13	)
LEAF_NODE	51:50	51:50	10	;
EXPR_STATEMENT	52:3	52:48	9	csms = ( contact & SILC_ATTRIBUTE_CONTACT_SMS ) ;
EXPR	52:3	52:3	10	csms = ( contact & SILC_ATTRIBUTE_CONTACT_SMS )
ASSIGN	52:3	52:10	11	csms = ( contact & SILC_ATTRIBUTE_CONTACT_SMS )
LVAL	52:3	52:3	12	csms
FIELD	52:3	52:3	13	csms
LEAF_NODE	52:3	52:3	14	csms
ASSIGN_OP	52:8	52:8	12	=
LEAF_NODE	52:8	52:8	13	=
RVAL	52:10	52:47	12	( contact & SILC_ATTRIBUTE_CONTACT_SMS )
LEAF_NODE	52:10	52:10	13	(
FIELD	52:11	52:11	13	contact
LEAF_NODE	52:11	52:11	14	contact
LEAF_NODE	52:19	52:19	13	&
FIELD	52:21	52:21	13	SILC_ATTRIBUTE_CONTACT_SMS
LEAF_NODE	52:21	52:21	14	SILC_ATTRIBUTE_CONTACT_SMS
LEAF_NODE	52:47	52:47	13	)
LEAF_NODE	52:48	52:48	10	;
EXPR_STATEMENT	53:3	53:48	9	cmms = ( contact & SILC_ATTRIBUTE_CONTACT_MMS ) ;
EXPR	53:3	53:3	10	cmms = ( contact & SILC_ATTRIBUTE_CONTACT_MMS )
ASSIGN	53:3	53:10	11	cmms = ( contact & SILC_ATTRIBUTE_CONTACT_MMS )
LVAL	53:3	53:3	12	cmms
FIELD	53:3	53:3	13	cmms
LEAF_NODE	53:3	53:3	14	cmms
ASSIGN_OP	53:8	53:8	12	=
LEAF_NODE	53:8	53:8	13	=
RVAL	53:10	53:47	12	( contact & SILC_ATTRIBUTE_CONTACT_MMS )
LEAF_NODE	53:10	53:10	13	(
FIELD	53:11	53:11	13	contact
LEAF_NODE	53:11	53:11	14	contact
LEAF_NODE	53:19	53:19	13	&
FIELD	53:21	53:21	13	SILC_ATTRIBUTE_CONTACT_MMS
LEAF_NODE	53:21	53:21	14	SILC_ATTRIBUTE_CONTACT_MMS
LEAF_NODE	53:47	53:47	13	)
LEAF_NODE	53:48	53:48	10	;
EXPR_STATEMENT	54:3	54:50	9	cchat = ( contact & SILC_ATTRIBUTE_CONTACT_CHAT ) ;
EXPR	54:3	54:3	10	cchat = ( contact & SILC_ATTRIBUTE_CONTACT_CHAT )
ASSIGN	54:3	54:11	11	cchat = ( contact & SILC_ATTRIBUTE_CONTACT_CHAT )
LVAL	54:3	54:3	12	cchat
FIELD	54:3	54:3	13	cchat
LEAF_NODE	54:3	54:3	14	cchat
ASSIGN_OP	54:9	54:9	12	=
LEAF_NODE	54:9	54:9	13	=
RVAL	54:11	54:49	12	( contact & SILC_ATTRIBUTE_CONTACT_CHAT )
LEAF_NODE	54:11	54:11	13	(
FIELD	54:12	54:12	13	contact
LEAF_NODE	54:12	54:12	14	contact
LEAF_NODE	54:20	54:20	13	&
FIELD	54:22	54:22	13	SILC_ATTRIBUTE_CONTACT_CHAT
LEAF_NODE	54:22	54:22	14	SILC_ATTRIBUTE_CONTACT_CHAT
LEAF_NODE	54:49	54:49	13	)
LEAF_NODE	54:50	54:50	10	;
EXPR_STATEMENT	55:3	55:52	9	cvideo = ( contact & SILC_ATTRIBUTE_CONTACT_VIDEO ) ;
EXPR	55:3	55:3	10	cvideo = ( contact & SILC_ATTRIBUTE_CONTACT_VIDEO )
ASSIGN	55:3	55:12	11	cvideo = ( contact & SILC_ATTRIBUTE_CONTACT_VIDEO )
LVAL	55:3	55:3	12	cvideo
FIELD	55:3	55:3	13	cvideo
LEAF_NODE	55:3	55:3	14	cvideo
ASSIGN_OP	55:10	55:10	12	=
LEAF_NODE	55:10	55:10	13	=
RVAL	55:12	55:51	12	( contact & SILC_ATTRIBUTE_CONTACT_VIDEO )
LEAF_NODE	55:12	55:12	13	(
FIELD	55:13	55:13	13	contact
LEAF_NODE	55:13	55:13	14	contact
LEAF_NODE	55:21	55:21	13	&
FIELD	55:23	55:23	13	SILC_ATTRIBUTE_CONTACT_VIDEO
LEAF_NODE	55:23	55:23	14	SILC_ATTRIBUTE_CONTACT_VIDEO
LEAF_NODE	55:51	55:51	13	)
LEAF_NODE	55:52	55:52	10	;
LEAF_NODE	56:2	56:2	8	}
SELECTION	57:2	60:3	6	
KEYWORD	57:2	57:2	7	if
LEAF_NODE	57:2	57:2	8	if
LEAF_NODE	57:5	57:5	7	(
CONDITION	57:6	57:6	7	silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_STATUS_FREETEXT ) , NULL , ( void * ) & attr )
EXPR	57:6	57:6	8	silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_STATUS_FREETEXT ) , NULL , ( void * ) & attr )
FUNCTION_CALL	57:6	59:25	9	silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_STATUS_FREETEXT ) , NULL , ( void * ) & attr )
CALLEE	57:6	57:6	10	silc_hash_table_find
LEAF_NODE	57:6	57:6	11	silc_hash_table_find
LEAF_NODE	57:26	57:26	10	(
ARGUMENT	57:27	57:27	10	attrs
FIELD	57:27	57:27	11	attrs
LEAF_NODE	57:27	57:27	12	attrs
LEAF_NODE	57:32	57:32	10	,
ARGUMENT	58:6	58:6	10	SILC_32_TO_PTR ( SILC_ATTRIBUTE_STATUS_FREETEXT )
FUNCTION_CALL	58:6	58:51	11	SILC_32_TO_PTR ( SILC_ATTRIBUTE_STATUS_FREETEXT )
CALLEE	58:6	58:6	12	SILC_32_TO_PTR
LEAF_NODE	58:6	58:6	13	SILC_32_TO_PTR
LEAF_NODE	58:20	58:20	12	(
ARGUMENT	58:21	58:21	12	SILC_ATTRIBUTE_STATUS_FREETEXT
FIELD	58:21	58:21	13	SILC_ATTRIBUTE_STATUS_FREETEXT
LEAF_NODE	58:21	58:21	14	SILC_ATTRIBUTE_STATUS_FREETEXT
LEAF_NODE	58:51	58:51	12	)
LEAF_NODE	58:52	58:52	10	,
ARGUMENT	59:6	59:6	10	NULL
FIELD	59:6	59:6	11	NULL
LEAF_NODE	59:6	59:6	12	NULL
LEAF_NODE	59:10	59:10	10	,
ARGUMENT	59:12	59:20	10	( void * ) & attr
LEAF_NODE	59:12	59:12	11	(
TYPE_NAME	59:13	59:13	11	void
LEAF_NODE	59:13	59:13	12	void
LEAF_NODE	59:18	59:18	11	*
LEAF_NODE	59:19	59:19	11	)
UNARY_EXPR	59:20	59:21	11	& attr
UNARY_OPERATOR	59:20	59:20	12	&
LEAF_NODE	59:20	59:20	13	&
FIELD	59:21	59:21	12	attr
LEAF_NODE	59:21	59:21	13	attr
LEAF_NODE	59:25	59:25	10	)
LEAF_NODE	59:26	59:26	7	)
STATEMENTS	60:3	60:3	7	
EXPR_STATEMENT	60:3	60:59	8	silc_attribute_get_object ( attr , & status , sizeof ( status ) ) ;
EXPR	60:3	60:3	9	silc_attribute_get_object ( attr , & status , sizeof ( status ) )
FUNCTION_CALL	60:3	60:58	10	silc_attribute_get_object ( attr , & status , sizeof ( status ) )
CALLEE	60:3	60:3	11	silc_attribute_get_object
LEAF_NODE	60:3	60:3	12	silc_attribute_get_object
LEAF_NODE	60:28	60:28	11	(
ARGUMENT	60:29	60:29	11	attr
FIELD	60:29	60:29	12	attr
LEAF_NODE	60:29	60:29	13	attr
LEAF_NODE	60:33	60:33	11	,
ARGUMENT	60:35	60:35	11	& status
UNARY_EXPR	60:35	60:36	12	& status
UNARY_OPERATOR	60:35	60:35	13	&
LEAF_NODE	60:35	60:35	14	&
FIELD	60:36	60:36	13	status
LEAF_NODE	60:36	60:36	14	status
LEAF_NODE	60:42	60:42	11	,
ARGUMENT	60:44	60:44	11	sizeof ( status )
FUNCTION_CALL	60:44	60:57	12	sizeof ( status )
CALLEE	60:44	60:44	13	sizeof
LEAF_NODE	60:44	60:44	14	sizeof
LEAF_NODE	60:50	60:50	13	(
ARGUMENT	60:51	60:51	13	status
FIELD	60:51	60:51	14	status
LEAF_NODE	60:51	60:51	15	status
LEAF_NODE	60:57	60:57	13	)
LEAF_NODE	60:58	60:58	11	)
LEAF_NODE	60:59	60:59	9	;
SELECTION	61:2	64:3	6	
KEYWORD	61:2	61:2	7	if
LEAF_NODE	61:2	61:2	8	if
LEAF_NODE	61:5	61:5	7	(
CONDITION	61:6	61:6	7	! silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_DEVICE_INFO ) , NULL , ( void * ) & attr )
EXPR	61:6	61:6	8	! silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_DEVICE_INFO ) , NULL , ( void * ) & attr )
UNARY_EXPR	61:6	61:7	9	! silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_DEVICE_INFO ) , NULL , ( void * ) & attr )
UNARY_OPERATOR	61:6	61:6	10	!
LEAF_NODE	61:6	61:6	11	!
FUNCTION_CALL	61:7	63:26	10	silc_hash_table_find ( attrs , SILC_32_TO_PTR ( SILC_ATTRIBUTE_DEVICE_INFO ) , NULL , ( void * ) & attr )
CALLEE	61:7	61:7	11	silc_hash_table_find
LEAF_NODE	61:7	61:7	12	silc_hash_table_find
LEAF_NODE	61:27	61:27	11	(
ARGUMENT	61:28	61:28	11	attrs
FIELD	61:28	61:28	12	attrs
LEAF_NODE	61:28	61:28	13	attrs
LEAF_NODE	61:33	61:33	11	,
ARGUMENT	62:7	62:7	11	SILC_32_TO_PTR ( SILC_ATTRIBUTE_DEVICE_INFO )
FUNCTION_CALL	62:7	62:48	12	SILC_32_TO_PTR ( SILC_ATTRIBUTE_DEVICE_INFO )
CALLEE	62:7	62:7	13	SILC_32_TO_PTR
LEAF_NODE	62:7	62:7	14	SILC_32_TO_PTR
LEAF_NODE	62:21	62:21	13	(
ARGUMENT	62:22	62:22	13	SILC_ATTRIBUTE_DEVICE_INFO
FIELD	62:22	62:22	14	SILC_ATTRIBUTE_DEVICE_INFO
LEAF_NODE	62:22	62:22	15	SILC_ATTRIBUTE_DEVICE_INFO
LEAF_NODE	62:48	62:48	13	)
LEAF_NODE	62:49	62:49	11	,
ARGUMENT	63:7	63:7	11	NULL
FIELD	63:7	63:7	12	NULL
LEAF_NODE	63:7	63:7	13	NULL
LEAF_NODE	63:11	63:11	11	,
ARGUMENT	63:13	63:21	11	( void * ) & attr
LEAF_NODE	63:13	63:13	12	(
TYPE_NAME	63:14	63:14	12	void
LEAF_NODE	63:14	63:14	13	void
LEAF_NODE	63:19	63:19	12	*
LEAF_NODE	63:20	63:20	12	)
UNARY_EXPR	63:21	63:22	12	& attr
UNARY_OPERATOR	63:21	63:21	13	&
LEAF_NODE	63:21	63:21	14	&
FIELD	63:22	63:22	13	attr
LEAF_NODE	63:22	63:22	14	attr
LEAF_NODE	63:26	63:26	11	)
LEAF_NODE	63:27	63:27	7	)
STATEMENTS	64:3	64:3	7	
EXPR_STATEMENT	64:3	64:17	8	device = FALSE ;
EXPR	64:3	64:3	9	device = FALSE
ASSIGN	64:3	64:12	10	device = FALSE
LVAL	64:3	64:3	11	device
FIELD	64:3	64:3	12	device
LEAF_NODE	64:3	64:3	13	device
ASSIGN_OP	64:10	64:10	11	=
LEAF_NODE	64:10	64:10	12	=
RVAL	64:12	64:12	11	FALSE
FIELD	64:12	64:12	12	FALSE
LEAF_NODE	64:12	64:12	13	FALSE
LEAF_NODE	64:17	64:17	9	;
LEAF_NODE	65:1	65:1	5	}
EXPR_STATEMENT	66:1	66:37	3	fields = purple_request_fields_new ( ) ;
EXPR	66:1	66:1	4	fields = purple_request_fields_new ( )
ASSIGN	66:1	66:10	5	fields = purple_request_fields_new ( )
LVAL	66:1	66:1	6	fields
FIELD	66:1	66:1	7	fields
LEAF_NODE	66:1	66:1	8	fields
ASSIGN_OP	66:8	66:8	6	=
LEAF_NODE	66:8	66:8	7	=
RVAL	66:10	66:10	6	purple_request_fields_new ( )
FUNCTION_CALL	66:10	66:36	7	purple_request_fields_new ( )
CALLEE	66:10	66:10	8	purple_request_fields_new
LEAF_NODE	66:10	66:10	9	purple_request_fields_new
LEAF_NODE	66:35	66:35	8	(
LEAF_NODE	66:36	66:36	8	)
LEAF_NODE	66:37	66:37	4	;
EXPR_STATEMENT	67:1	67:41	3	g = purple_request_field_group_new ( NULL ) ;
EXPR	67:1	67:1	4	g = purple_request_field_group_new ( NULL )
ASSIGN	67:1	67:5	5	g = purple_request_field_group_new ( NULL )
LVAL	67:1	67:1	6	g
FIELD	67:1	67:1	7	g
LEAF_NODE	67:1	67:1	8	g
ASSIGN_OP	67:3	67:3	6	=
LEAF_NODE	67:3	67:3	7	=
RVAL	67:5	67:5	6	purple_request_field_group_new ( NULL )
FUNCTION_CALL	67:5	67:40	7	purple_request_field_group_new ( NULL )
CALLEE	67:5	67:5	8	purple_request_field_group_new
LEAF_NODE	67:5	67:5	9	purple_request_field_group_new
LEAF_NODE	67:35	67:35	8	(
ARGUMENT	67:36	67:36	8	NULL
FIELD	67:36	67:36	9	NULL
LEAF_NODE	67:36	67:36	10	NULL
LEAF_NODE	67:40	67:40	8	)
LEAF_NODE	67:41	67:41	4	;
EXPR_STATEMENT	68:1	68:65	3	f = purple_request_field_label_new ( "l3" , _ ( "Your Current Mood" ) ) ;
EXPR	68:1	68:1	4	f = purple_request_field_label_new ( "l3" , _ ( "Your Current Mood" ) )
ASSIGN	68:1	68:5	5	f = purple_request_field_label_new ( "l3" , _ ( "Your Current Mood" ) )
LVAL	68:1	68:1	6	f
FIELD	68:1	68:1	7	f
LEAF_NODE	68:1	68:1	8	f
ASSIGN_OP	68:3	68:3	6	=
LEAF_NODE	68:3	68:3	7	=
RVAL	68:5	68:5	6	purple_request_field_label_new ( "l3" , _ ( "Your Current Mood" ) )
FUNCTION_CALL	68:5	68:64	7	purple_request_field_label_new ( "l3" , _ ( "Your Current Mood" ) )
CALLEE	68:5	68:5	8	purple_request_field_label_new
LEAF_NODE	68:5	68:5	9	purple_request_field_label_new
LEAF_NODE	68:35	68:35	8	(
ARGUMENT	68:36	68:36	8	"l3"
FIELD	68:36	68:36	9	"l3"
LEAF_NODE	68:36	68:36	10	"l3"
LEAF_NODE	68:40	68:40	8	,
ARGUMENT	68:42	68:42	8	_ ( "Your Current Mood" )
FUNCTION_CALL	68:42	68:63	9	_ ( "Your Current Mood" )
CALLEE	68:42	68:42	10	_
LEAF_NODE	68:42	68:42	11	_
LEAF_NODE	68:43	68:43	10	(
ARGUMENT	68:44	68:44	10	"Your Current Mood"
FIELD	68:44	68:44	11	"Your Current Mood"
LEAF_NODE	68:44	68:44	12	"Your Current Mood"
LEAF_NODE	68:63	68:63	10	)
LEAF_NODE	68:64	68:64	8	)
LEAF_NODE	68:65	68:65	4	;
EXPR_STATEMENT	69:1	69:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	69:1	69:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	69:1	69:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	69:1	69:1	6	purple_request_field_group_add_field
LEAF_NODE	69:1	69:1	7	purple_request_field_group_add_field
LEAF_NODE	69:37	69:37	6	(
ARGUMENT	69:38	69:38	6	g
FIELD	69:38	69:38	7	g
LEAF_NODE	69:38	69:38	8	g
LEAF_NODE	69:39	69:39	6	,
ARGUMENT	69:41	69:41	6	f
FIELD	69:41	69:41	7	f
LEAF_NODE	69:41	69:41	8	f
LEAF_NODE	69:42	69:42	6	)
LEAF_NODE	69:43	69:43	4	;
EXPR_STATEMENT	70:1	70:71	3	f = purple_request_field_bool_new ( "mood_normal" , _ ( "Normal" ) , mnormal ) ;
EXPR	70:1	70:1	4	f = purple_request_field_bool_new ( "mood_normal" , _ ( "Normal" ) , mnormal )
ASSIGN	70:1	70:5	5	f = purple_request_field_bool_new ( "mood_normal" , _ ( "Normal" ) , mnormal )
LVAL	70:1	70:1	6	f
FIELD	70:1	70:1	7	f
LEAF_NODE	70:1	70:1	8	f
ASSIGN_OP	70:3	70:3	6	=
LEAF_NODE	70:3	70:3	7	=
RVAL	70:5	70:5	6	purple_request_field_bool_new ( "mood_normal" , _ ( "Normal" ) , mnormal )
FUNCTION_CALL	70:5	70:70	7	purple_request_field_bool_new ( "mood_normal" , _ ( "Normal" ) , mnormal )
CALLEE	70:5	70:5	8	purple_request_field_bool_new
LEAF_NODE	70:5	70:5	9	purple_request_field_bool_new
LEAF_NODE	70:34	70:34	8	(
ARGUMENT	70:35	70:35	8	"mood_normal"
FIELD	70:35	70:35	9	"mood_normal"
LEAF_NODE	70:35	70:35	10	"mood_normal"
LEAF_NODE	70:48	70:48	8	,
ARGUMENT	70:50	70:50	8	_ ( "Normal" )
FUNCTION_CALL	70:50	70:60	9	_ ( "Normal" )
CALLEE	70:50	70:50	10	_
LEAF_NODE	70:50	70:50	11	_
LEAF_NODE	70:51	70:51	10	(
ARGUMENT	70:52	70:52	10	"Normal"
FIELD	70:52	70:52	11	"Normal"
LEAF_NODE	70:52	70:52	12	"Normal"
LEAF_NODE	70:60	70:60	10	)
LEAF_NODE	70:61	70:61	8	,
ARGUMENT	70:63	70:63	8	mnormal
FIELD	70:63	70:63	9	mnormal
LEAF_NODE	70:63	70:63	10	mnormal
LEAF_NODE	70:70	70:70	8	)
LEAF_NODE	70:71	70:71	4	;
EXPR_STATEMENT	71:1	71:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	71:1	71:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	71:1	71:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	71:1	71:1	6	purple_request_field_group_add_field
LEAF_NODE	71:1	71:1	7	purple_request_field_group_add_field
LEAF_NODE	71:37	71:37	6	(
ARGUMENT	71:38	71:38	6	g
FIELD	71:38	71:38	7	g
LEAF_NODE	71:38	71:38	8	g
LEAF_NODE	71:39	71:39	6	,
ARGUMENT	71:41	71:41	6	f
FIELD	71:41	71:41	7	f
LEAF_NODE	71:41	71:41	8	f
LEAF_NODE	71:42	71:42	6	)
LEAF_NODE	71:43	71:43	4	;
EXPR_STATEMENT	72:1	72:68	3	f = purple_request_field_bool_new ( "mood_happy" , _ ( "Happy" ) , mhappy ) ;
EXPR	72:1	72:1	4	f = purple_request_field_bool_new ( "mood_happy" , _ ( "Happy" ) , mhappy )
ASSIGN	72:1	72:5	5	f = purple_request_field_bool_new ( "mood_happy" , _ ( "Happy" ) , mhappy )
LVAL	72:1	72:1	6	f
FIELD	72:1	72:1	7	f
LEAF_NODE	72:1	72:1	8	f
ASSIGN_OP	72:3	72:3	6	=
LEAF_NODE	72:3	72:3	7	=
RVAL	72:5	72:5	6	purple_request_field_bool_new ( "mood_happy" , _ ( "Happy" ) , mhappy )
FUNCTION_CALL	72:5	72:67	7	purple_request_field_bool_new ( "mood_happy" , _ ( "Happy" ) , mhappy )
CALLEE	72:5	72:5	8	purple_request_field_bool_new
LEAF_NODE	72:5	72:5	9	purple_request_field_bool_new
LEAF_NODE	72:34	72:34	8	(
ARGUMENT	72:35	72:35	8	"mood_happy"
FIELD	72:35	72:35	9	"mood_happy"
LEAF_NODE	72:35	72:35	10	"mood_happy"
LEAF_NODE	72:47	72:47	8	,
ARGUMENT	72:49	72:49	8	_ ( "Happy" )
FUNCTION_CALL	72:49	72:58	9	_ ( "Happy" )
CALLEE	72:49	72:49	10	_
LEAF_NODE	72:49	72:49	11	_
LEAF_NODE	72:50	72:50	10	(
ARGUMENT	72:51	72:51	10	"Happy"
FIELD	72:51	72:51	11	"Happy"
LEAF_NODE	72:51	72:51	12	"Happy"
LEAF_NODE	72:58	72:58	10	)
LEAF_NODE	72:59	72:59	8	,
ARGUMENT	72:61	72:61	8	mhappy
FIELD	72:61	72:61	9	mhappy
LEAF_NODE	72:61	72:61	10	mhappy
LEAF_NODE	72:67	72:67	8	)
LEAF_NODE	72:68	72:68	4	;
EXPR_STATEMENT	73:1	73:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	73:1	73:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	73:1	73:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	73:1	73:1	6	purple_request_field_group_add_field
LEAF_NODE	73:1	73:1	7	purple_request_field_group_add_field
LEAF_NODE	73:37	73:37	6	(
ARGUMENT	73:38	73:38	6	g
FIELD	73:38	73:38	7	g
LEAF_NODE	73:38	73:38	8	g
LEAF_NODE	73:39	73:39	6	,
ARGUMENT	73:41	73:41	6	f
FIELD	73:41	73:41	7	f
LEAF_NODE	73:41	73:41	8	f
LEAF_NODE	73:42	73:42	6	)
LEAF_NODE	73:43	73:43	4	;
EXPR_STATEMENT	74:1	74:62	3	f = purple_request_field_bool_new ( "mood_sad" , _ ( "Sad" ) , msad ) ;
EXPR	74:1	74:1	4	f = purple_request_field_bool_new ( "mood_sad" , _ ( "Sad" ) , msad )
ASSIGN	74:1	74:5	5	f = purple_request_field_bool_new ( "mood_sad" , _ ( "Sad" ) , msad )
LVAL	74:1	74:1	6	f
FIELD	74:1	74:1	7	f
LEAF_NODE	74:1	74:1	8	f
ASSIGN_OP	74:3	74:3	6	=
LEAF_NODE	74:3	74:3	7	=
RVAL	74:5	74:5	6	purple_request_field_bool_new ( "mood_sad" , _ ( "Sad" ) , msad )
FUNCTION_CALL	74:5	74:61	7	purple_request_field_bool_new ( "mood_sad" , _ ( "Sad" ) , msad )
CALLEE	74:5	74:5	8	purple_request_field_bool_new
LEAF_NODE	74:5	74:5	9	purple_request_field_bool_new
LEAF_NODE	74:34	74:34	8	(
ARGUMENT	74:35	74:35	8	"mood_sad"
FIELD	74:35	74:35	9	"mood_sad"
LEAF_NODE	74:35	74:35	10	"mood_sad"
LEAF_NODE	74:45	74:45	8	,
ARGUMENT	74:47	74:47	8	_ ( "Sad" )
FUNCTION_CALL	74:47	74:54	9	_ ( "Sad" )
CALLEE	74:47	74:47	10	_
LEAF_NODE	74:47	74:47	11	_
LEAF_NODE	74:48	74:48	10	(
ARGUMENT	74:49	74:49	10	"Sad"
FIELD	74:49	74:49	11	"Sad"
LEAF_NODE	74:49	74:49	12	"Sad"
LEAF_NODE	74:54	74:54	10	)
LEAF_NODE	74:55	74:55	8	,
ARGUMENT	74:57	74:57	8	msad
FIELD	74:57	74:57	9	msad
LEAF_NODE	74:57	74:57	10	msad
LEAF_NODE	74:61	74:61	8	)
LEAF_NODE	74:62	74:62	4	;
EXPR_STATEMENT	75:1	75:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	75:1	75:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	75:1	75:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	75:1	75:1	6	purple_request_field_group_add_field
LEAF_NODE	75:1	75:1	7	purple_request_field_group_add_field
LEAF_NODE	75:37	75:37	6	(
ARGUMENT	75:38	75:38	6	g
FIELD	75:38	75:38	7	g
LEAF_NODE	75:38	75:38	8	g
LEAF_NODE	75:39	75:39	6	,
ARGUMENT	75:41	75:41	6	f
FIELD	75:41	75:41	7	f
LEAF_NODE	75:41	75:41	8	f
LEAF_NODE	75:42	75:42	6	)
LEAF_NODE	75:43	75:43	4	;
EXPR_STATEMENT	76:1	76:68	3	f = purple_request_field_bool_new ( "mood_angry" , _ ( "Angry" ) , mangry ) ;
EXPR	76:1	76:1	4	f = purple_request_field_bool_new ( "mood_angry" , _ ( "Angry" ) , mangry )
ASSIGN	76:1	76:5	5	f = purple_request_field_bool_new ( "mood_angry" , _ ( "Angry" ) , mangry )
LVAL	76:1	76:1	6	f
FIELD	76:1	76:1	7	f
LEAF_NODE	76:1	76:1	8	f
ASSIGN_OP	76:3	76:3	6	=
LEAF_NODE	76:3	76:3	7	=
RVAL	76:5	76:5	6	purple_request_field_bool_new ( "mood_angry" , _ ( "Angry" ) , mangry )
FUNCTION_CALL	76:5	76:67	7	purple_request_field_bool_new ( "mood_angry" , _ ( "Angry" ) , mangry )
CALLEE	76:5	76:5	8	purple_request_field_bool_new
LEAF_NODE	76:5	76:5	9	purple_request_field_bool_new
LEAF_NODE	76:34	76:34	8	(
ARGUMENT	76:35	76:35	8	"mood_angry"
FIELD	76:35	76:35	9	"mood_angry"
LEAF_NODE	76:35	76:35	10	"mood_angry"
LEAF_NODE	76:47	76:47	8	,
ARGUMENT	76:49	76:49	8	_ ( "Angry" )
FUNCTION_CALL	76:49	76:58	9	_ ( "Angry" )
CALLEE	76:49	76:49	10	_
LEAF_NODE	76:49	76:49	11	_
LEAF_NODE	76:50	76:50	10	(
ARGUMENT	76:51	76:51	10	"Angry"
FIELD	76:51	76:51	11	"Angry"
LEAF_NODE	76:51	76:51	12	"Angry"
LEAF_NODE	76:58	76:58	10	)
LEAF_NODE	76:59	76:59	8	,
ARGUMENT	76:61	76:61	8	mangry
FIELD	76:61	76:61	9	mangry
LEAF_NODE	76:61	76:61	10	mangry
LEAF_NODE	76:67	76:67	8	)
LEAF_NODE	76:68	76:68	4	;
EXPR_STATEMENT	77:1	77:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	77:1	77:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	77:1	77:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	77:1	77:1	6	purple_request_field_group_add_field
LEAF_NODE	77:1	77:1	7	purple_request_field_group_add_field
LEAF_NODE	77:37	77:37	6	(
ARGUMENT	77:38	77:38	6	g
FIELD	77:38	77:38	7	g
LEAF_NODE	77:38	77:38	8	g
LEAF_NODE	77:39	77:39	6	,
ARGUMENT	77:41	77:41	6	f
FIELD	77:41	77:41	7	f
LEAF_NODE	77:41	77:41	8	f
LEAF_NODE	77:42	77:42	6	)
LEAF_NODE	77:43	77:43	4	;
EXPR_STATEMENT	78:1	78:74	3	f = purple_request_field_bool_new ( "mood_jealous" , _ ( "Jealous" ) , mjealous ) ;
EXPR	78:1	78:1	4	f = purple_request_field_bool_new ( "mood_jealous" , _ ( "Jealous" ) , mjealous )
ASSIGN	78:1	78:5	5	f = purple_request_field_bool_new ( "mood_jealous" , _ ( "Jealous" ) , mjealous )
LVAL	78:1	78:1	6	f
FIELD	78:1	78:1	7	f
LEAF_NODE	78:1	78:1	8	f
ASSIGN_OP	78:3	78:3	6	=
LEAF_NODE	78:3	78:3	7	=
RVAL	78:5	78:5	6	purple_request_field_bool_new ( "mood_jealous" , _ ( "Jealous" ) , mjealous )
FUNCTION_CALL	78:5	78:73	7	purple_request_field_bool_new ( "mood_jealous" , _ ( "Jealous" ) , mjealous )
CALLEE	78:5	78:5	8	purple_request_field_bool_new
LEAF_NODE	78:5	78:5	9	purple_request_field_bool_new
LEAF_NODE	78:34	78:34	8	(
ARGUMENT	78:35	78:35	8	"mood_jealous"
FIELD	78:35	78:35	9	"mood_jealous"
LEAF_NODE	78:35	78:35	10	"mood_jealous"
LEAF_NODE	78:49	78:49	8	,
ARGUMENT	78:51	78:51	8	_ ( "Jealous" )
FUNCTION_CALL	78:51	78:62	9	_ ( "Jealous" )
CALLEE	78:51	78:51	10	_
LEAF_NODE	78:51	78:51	11	_
LEAF_NODE	78:52	78:52	10	(
ARGUMENT	78:53	78:53	10	"Jealous"
FIELD	78:53	78:53	11	"Jealous"
LEAF_NODE	78:53	78:53	12	"Jealous"
LEAF_NODE	78:62	78:62	10	)
LEAF_NODE	78:63	78:63	8	,
ARGUMENT	78:65	78:65	8	mjealous
FIELD	78:65	78:65	9	mjealous
LEAF_NODE	78:65	78:65	10	mjealous
LEAF_NODE	78:73	78:73	8	)
LEAF_NODE	78:74	78:74	4	;
EXPR_STATEMENT	79:1	79:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	79:1	79:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	79:1	79:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	79:1	79:1	6	purple_request_field_group_add_field
LEAF_NODE	79:1	79:1	7	purple_request_field_group_add_field
LEAF_NODE	79:37	79:37	6	(
ARGUMENT	79:38	79:38	6	g
FIELD	79:38	79:38	7	g
LEAF_NODE	79:38	79:38	8	g
LEAF_NODE	79:39	79:39	6	,
ARGUMENT	79:41	79:41	6	f
FIELD	79:41	79:41	7	f
LEAF_NODE	79:41	79:41	8	f
LEAF_NODE	79:42	79:42	6	)
LEAF_NODE	79:43	79:43	4	;
EXPR_STATEMENT	80:1	80:74	3	f = purple_request_field_bool_new ( "mood_ashamed" , _ ( "Ashamed" ) , mashamed ) ;
EXPR	80:1	80:1	4	f = purple_request_field_bool_new ( "mood_ashamed" , _ ( "Ashamed" ) , mashamed )
ASSIGN	80:1	80:5	5	f = purple_request_field_bool_new ( "mood_ashamed" , _ ( "Ashamed" ) , mashamed )
LVAL	80:1	80:1	6	f
FIELD	80:1	80:1	7	f
LEAF_NODE	80:1	80:1	8	f
ASSIGN_OP	80:3	80:3	6	=
LEAF_NODE	80:3	80:3	7	=
RVAL	80:5	80:5	6	purple_request_field_bool_new ( "mood_ashamed" , _ ( "Ashamed" ) , mashamed )
FUNCTION_CALL	80:5	80:73	7	purple_request_field_bool_new ( "mood_ashamed" , _ ( "Ashamed" ) , mashamed )
CALLEE	80:5	80:5	8	purple_request_field_bool_new
LEAF_NODE	80:5	80:5	9	purple_request_field_bool_new
LEAF_NODE	80:34	80:34	8	(
ARGUMENT	80:35	80:35	8	"mood_ashamed"
FIELD	80:35	80:35	9	"mood_ashamed"
LEAF_NODE	80:35	80:35	10	"mood_ashamed"
LEAF_NODE	80:49	80:49	8	,
ARGUMENT	80:51	80:51	8	_ ( "Ashamed" )
FUNCTION_CALL	80:51	80:62	9	_ ( "Ashamed" )
CALLEE	80:51	80:51	10	_
LEAF_NODE	80:51	80:51	11	_
LEAF_NODE	80:52	80:52	10	(
ARGUMENT	80:53	80:53	10	"Ashamed"
FIELD	80:53	80:53	11	"Ashamed"
LEAF_NODE	80:53	80:53	12	"Ashamed"
LEAF_NODE	80:62	80:62	10	)
LEAF_NODE	80:63	80:63	8	,
ARGUMENT	80:65	80:65	8	mashamed
FIELD	80:65	80:65	9	mashamed
LEAF_NODE	80:65	80:65	10	mashamed
LEAF_NODE	80:73	80:73	8	)
LEAF_NODE	80:74	80:74	4	;
EXPR_STATEMENT	81:1	81:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	81:1	81:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	81:1	81:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	81:1	81:1	6	purple_request_field_group_add_field
LEAF_NODE	81:1	81:1	7	purple_request_field_group_add_field
LEAF_NODE	81:37	81:37	6	(
ARGUMENT	81:38	81:38	6	g
FIELD	81:38	81:38	7	g
LEAF_NODE	81:38	81:38	8	g
LEAF_NODE	81:39	81:39	6	,
ARGUMENT	81:41	81:41	6	f
FIELD	81:41	81:41	7	f
LEAF_NODE	81:41	81:41	8	f
LEAF_NODE	81:42	81:42	6	)
LEAF_NODE	81:43	81:43	4	;
EXPR_STATEMENT	82:1	82:83	3	f = purple_request_field_bool_new ( "mood_invincible" , _ ( "Invincible" ) , minvincible ) ;
EXPR	82:1	82:1	4	f = purple_request_field_bool_new ( "mood_invincible" , _ ( "Invincible" ) , minvincible )
ASSIGN	82:1	82:5	5	f = purple_request_field_bool_new ( "mood_invincible" , _ ( "Invincible" ) , minvincible )
LVAL	82:1	82:1	6	f
FIELD	82:1	82:1	7	f
LEAF_NODE	82:1	82:1	8	f
ASSIGN_OP	82:3	82:3	6	=
LEAF_NODE	82:3	82:3	7	=
RVAL	82:5	82:5	6	purple_request_field_bool_new ( "mood_invincible" , _ ( "Invincible" ) , minvincible )
FUNCTION_CALL	82:5	82:82	7	purple_request_field_bool_new ( "mood_invincible" , _ ( "Invincible" ) , minvincible )
CALLEE	82:5	82:5	8	purple_request_field_bool_new
LEAF_NODE	82:5	82:5	9	purple_request_field_bool_new
LEAF_NODE	82:34	82:34	8	(
ARGUMENT	82:35	82:35	8	"mood_invincible"
FIELD	82:35	82:35	9	"mood_invincible"
LEAF_NODE	82:35	82:35	10	"mood_invincible"
LEAF_NODE	82:52	82:52	8	,
ARGUMENT	82:54	82:54	8	_ ( "Invincible" )
FUNCTION_CALL	82:54	82:68	9	_ ( "Invincible" )
CALLEE	82:54	82:54	10	_
LEAF_NODE	82:54	82:54	11	_
LEAF_NODE	82:55	82:55	10	(
ARGUMENT	82:56	82:56	10	"Invincible"
FIELD	82:56	82:56	11	"Invincible"
LEAF_NODE	82:56	82:56	12	"Invincible"
LEAF_NODE	82:68	82:68	10	)
LEAF_NODE	82:69	82:69	8	,
ARGUMENT	82:71	82:71	8	minvincible
FIELD	82:71	82:71	9	minvincible
LEAF_NODE	82:71	82:71	10	minvincible
LEAF_NODE	82:82	82:82	8	)
LEAF_NODE	82:83	82:83	4	;
EXPR_STATEMENT	83:1	83:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	83:1	83:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	83:1	83:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	83:1	83:1	6	purple_request_field_group_add_field
LEAF_NODE	83:1	83:1	7	purple_request_field_group_add_field
LEAF_NODE	83:37	83:37	6	(
ARGUMENT	83:38	83:38	6	g
FIELD	83:38	83:38	7	g
LEAF_NODE	83:38	83:38	8	g
LEAF_NODE	83:39	83:39	6	,
ARGUMENT	83:41	83:41	6	f
FIELD	83:41	83:41	7	f
LEAF_NODE	83:41	83:41	8	f
LEAF_NODE	83:42	83:42	6	)
LEAF_NODE	83:43	83:43	4	;
EXPR_STATEMENT	84:1	84:72	3	f = purple_request_field_bool_new ( "mood_inlove" , _ ( "In love" ) , minlove ) ;
EXPR	84:1	84:1	4	f = purple_request_field_bool_new ( "mood_inlove" , _ ( "In love" ) , minlove )
ASSIGN	84:1	84:5	5	f = purple_request_field_bool_new ( "mood_inlove" , _ ( "In love" ) , minlove )
LVAL	84:1	84:1	6	f
FIELD	84:1	84:1	7	f
LEAF_NODE	84:1	84:1	8	f
ASSIGN_OP	84:3	84:3	6	=
LEAF_NODE	84:3	84:3	7	=
RVAL	84:5	84:5	6	purple_request_field_bool_new ( "mood_inlove" , _ ( "In love" ) , minlove )
FUNCTION_CALL	84:5	84:71	7	purple_request_field_bool_new ( "mood_inlove" , _ ( "In love" ) , minlove )
CALLEE	84:5	84:5	8	purple_request_field_bool_new
LEAF_NODE	84:5	84:5	9	purple_request_field_bool_new
LEAF_NODE	84:34	84:34	8	(
ARGUMENT	84:35	84:35	8	"mood_inlove"
FIELD	84:35	84:35	9	"mood_inlove"
LEAF_NODE	84:35	84:35	10	"mood_inlove"
LEAF_NODE	84:48	84:48	8	,
ARGUMENT	84:50	84:50	8	_ ( "In love" )
FUNCTION_CALL	84:50	84:61	9	_ ( "In love" )
CALLEE	84:50	84:50	10	_
LEAF_NODE	84:50	84:50	11	_
LEAF_NODE	84:51	84:51	10	(
ARGUMENT	84:52	84:52	10	"In love"
FIELD	84:52	84:52	11	"In love"
LEAF_NODE	84:52	84:52	12	"In love"
LEAF_NODE	84:61	84:61	10	)
LEAF_NODE	84:62	84:62	8	,
ARGUMENT	84:64	84:64	8	minlove
FIELD	84:64	84:64	9	minlove
LEAF_NODE	84:64	84:64	10	minlove
LEAF_NODE	84:71	84:71	8	)
LEAF_NODE	84:72	84:72	4	;
EXPR_STATEMENT	85:1	85:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	85:1	85:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	85:1	85:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	85:1	85:1	6	purple_request_field_group_add_field
LEAF_NODE	85:1	85:1	7	purple_request_field_group_add_field
LEAF_NODE	85:37	85:37	6	(
ARGUMENT	85:38	85:38	6	g
FIELD	85:38	85:38	7	g
LEAF_NODE	85:38	85:38	8	g
LEAF_NODE	85:39	85:39	6	,
ARGUMENT	85:41	85:41	6	f
FIELD	85:41	85:41	7	f
LEAF_NODE	85:41	85:41	8	f
LEAF_NODE	85:42	85:42	6	)
LEAF_NODE	85:43	85:43	4	;
EXPR_STATEMENT	86:1	86:71	3	f = purple_request_field_bool_new ( "mood_sleepy" , _ ( "Sleepy" ) , msleepy ) ;
EXPR	86:1	86:1	4	f = purple_request_field_bool_new ( "mood_sleepy" , _ ( "Sleepy" ) , msleepy )
ASSIGN	86:1	86:5	5	f = purple_request_field_bool_new ( "mood_sleepy" , _ ( "Sleepy" ) , msleepy )
LVAL	86:1	86:1	6	f
FIELD	86:1	86:1	7	f
LEAF_NODE	86:1	86:1	8	f
ASSIGN_OP	86:3	86:3	6	=
LEAF_NODE	86:3	86:3	7	=
RVAL	86:5	86:5	6	purple_request_field_bool_new ( "mood_sleepy" , _ ( "Sleepy" ) , msleepy )
FUNCTION_CALL	86:5	86:70	7	purple_request_field_bool_new ( "mood_sleepy" , _ ( "Sleepy" ) , msleepy )
CALLEE	86:5	86:5	8	purple_request_field_bool_new
LEAF_NODE	86:5	86:5	9	purple_request_field_bool_new
LEAF_NODE	86:34	86:34	8	(
ARGUMENT	86:35	86:35	8	"mood_sleepy"
FIELD	86:35	86:35	9	"mood_sleepy"
LEAF_NODE	86:35	86:35	10	"mood_sleepy"
LEAF_NODE	86:48	86:48	8	,
ARGUMENT	86:50	86:50	8	_ ( "Sleepy" )
FUNCTION_CALL	86:50	86:60	9	_ ( "Sleepy" )
CALLEE	86:50	86:50	10	_
LEAF_NODE	86:50	86:50	11	_
LEAF_NODE	86:51	86:51	10	(
ARGUMENT	86:52	86:52	10	"Sleepy"
FIELD	86:52	86:52	11	"Sleepy"
LEAF_NODE	86:52	86:52	12	"Sleepy"
LEAF_NODE	86:60	86:60	10	)
LEAF_NODE	86:61	86:61	8	,
ARGUMENT	86:63	86:63	8	msleepy
FIELD	86:63	86:63	9	msleepy
LEAF_NODE	86:63	86:63	10	msleepy
LEAF_NODE	86:70	86:70	8	)
LEAF_NODE	86:71	86:71	4	;
EXPR_STATEMENT	87:1	87:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	87:1	87:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	87:1	87:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	87:1	87:1	6	purple_request_field_group_add_field
LEAF_NODE	87:1	87:1	7	purple_request_field_group_add_field
LEAF_NODE	87:37	87:37	6	(
ARGUMENT	87:38	87:38	6	g
FIELD	87:38	87:38	7	g
LEAF_NODE	87:38	87:38	8	g
LEAF_NODE	87:39	87:39	6	,
ARGUMENT	87:41	87:41	6	f
FIELD	87:41	87:41	7	f
LEAF_NODE	87:41	87:41	8	f
LEAF_NODE	87:42	87:42	6	)
LEAF_NODE	87:43	87:43	4	;
EXPR_STATEMENT	88:1	88:68	3	f = purple_request_field_bool_new ( "mood_bored" , _ ( "Bored" ) , mbored ) ;
EXPR	88:1	88:1	4	f = purple_request_field_bool_new ( "mood_bored" , _ ( "Bored" ) , mbored )
ASSIGN	88:1	88:5	5	f = purple_request_field_bool_new ( "mood_bored" , _ ( "Bored" ) , mbored )
LVAL	88:1	88:1	6	f
FIELD	88:1	88:1	7	f
LEAF_NODE	88:1	88:1	8	f
ASSIGN_OP	88:3	88:3	6	=
LEAF_NODE	88:3	88:3	7	=
RVAL	88:5	88:5	6	purple_request_field_bool_new ( "mood_bored" , _ ( "Bored" ) , mbored )
FUNCTION_CALL	88:5	88:67	7	purple_request_field_bool_new ( "mood_bored" , _ ( "Bored" ) , mbored )
CALLEE	88:5	88:5	8	purple_request_field_bool_new
LEAF_NODE	88:5	88:5	9	purple_request_field_bool_new
LEAF_NODE	88:34	88:34	8	(
ARGUMENT	88:35	88:35	8	"mood_bored"
FIELD	88:35	88:35	9	"mood_bored"
LEAF_NODE	88:35	88:35	10	"mood_bored"
LEAF_NODE	88:47	88:47	8	,
ARGUMENT	88:49	88:49	8	_ ( "Bored" )
FUNCTION_CALL	88:49	88:58	9	_ ( "Bored" )
CALLEE	88:49	88:49	10	_
LEAF_NODE	88:49	88:49	11	_
LEAF_NODE	88:50	88:50	10	(
ARGUMENT	88:51	88:51	10	"Bored"
FIELD	88:51	88:51	11	"Bored"
LEAF_NODE	88:51	88:51	12	"Bored"
LEAF_NODE	88:58	88:58	10	)
LEAF_NODE	88:59	88:59	8	,
ARGUMENT	88:61	88:61	8	mbored
FIELD	88:61	88:61	9	mbored
LEAF_NODE	88:61	88:61	10	mbored
LEAF_NODE	88:67	88:67	8	)
LEAF_NODE	88:68	88:68	4	;
EXPR_STATEMENT	89:1	89:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	89:1	89:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	89:1	89:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	89:1	89:1	6	purple_request_field_group_add_field
LEAF_NODE	89:1	89:1	7	purple_request_field_group_add_field
LEAF_NODE	89:37	89:37	6	(
ARGUMENT	89:38	89:38	6	g
FIELD	89:38	89:38	7	g
LEAF_NODE	89:38	89:38	8	g
LEAF_NODE	89:39	89:39	6	,
ARGUMENT	89:41	89:41	6	f
FIELD	89:41	89:41	7	f
LEAF_NODE	89:41	89:41	8	f
LEAF_NODE	89:42	89:42	6	)
LEAF_NODE	89:43	89:43	4	;
EXPR_STATEMENT	90:1	90:74	3	f = purple_request_field_bool_new ( "mood_excited" , _ ( "Excited" ) , mexcited ) ;
EXPR	90:1	90:1	4	f = purple_request_field_bool_new ( "mood_excited" , _ ( "Excited" ) , mexcited )
ASSIGN	90:1	90:5	5	f = purple_request_field_bool_new ( "mood_excited" , _ ( "Excited" ) , mexcited )
LVAL	90:1	90:1	6	f
FIELD	90:1	90:1	7	f
LEAF_NODE	90:1	90:1	8	f
ASSIGN_OP	90:3	90:3	6	=
LEAF_NODE	90:3	90:3	7	=
RVAL	90:5	90:5	6	purple_request_field_bool_new ( "mood_excited" , _ ( "Excited" ) , mexcited )
FUNCTION_CALL	90:5	90:73	7	purple_request_field_bool_new ( "mood_excited" , _ ( "Excited" ) , mexcited )
CALLEE	90:5	90:5	8	purple_request_field_bool_new
LEAF_NODE	90:5	90:5	9	purple_request_field_bool_new
LEAF_NODE	90:34	90:34	8	(
ARGUMENT	90:35	90:35	8	"mood_excited"
FIELD	90:35	90:35	9	"mood_excited"
LEAF_NODE	90:35	90:35	10	"mood_excited"
LEAF_NODE	90:49	90:49	8	,
ARGUMENT	90:51	90:51	8	_ ( "Excited" )
FUNCTION_CALL	90:51	90:62	9	_ ( "Excited" )
CALLEE	90:51	90:51	10	_
LEAF_NODE	90:51	90:51	11	_
LEAF_NODE	90:52	90:52	10	(
ARGUMENT	90:53	90:53	10	"Excited"
FIELD	90:53	90:53	11	"Excited"
LEAF_NODE	90:53	90:53	12	"Excited"
LEAF_NODE	90:62	90:62	10	)
LEAF_NODE	90:63	90:63	8	,
ARGUMENT	90:65	90:65	8	mexcited
FIELD	90:65	90:65	9	mexcited
LEAF_NODE	90:65	90:65	10	mexcited
LEAF_NODE	90:73	90:73	8	)
LEAF_NODE	90:74	90:74	4	;
EXPR_STATEMENT	91:1	91:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	91:1	91:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	91:1	91:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	91:1	91:1	6	purple_request_field_group_add_field
LEAF_NODE	91:1	91:1	7	purple_request_field_group_add_field
LEAF_NODE	91:37	91:37	6	(
ARGUMENT	91:38	91:38	6	g
FIELD	91:38	91:38	7	g
LEAF_NODE	91:38	91:38	8	g
LEAF_NODE	91:39	91:39	6	,
ARGUMENT	91:41	91:41	6	f
FIELD	91:41	91:41	7	f
LEAF_NODE	91:41	91:41	8	f
LEAF_NODE	91:42	91:42	6	)
LEAF_NODE	91:43	91:43	4	;
EXPR_STATEMENT	92:1	92:74	3	f = purple_request_field_bool_new ( "mood_anxious" , _ ( "Anxious" ) , manxious ) ;
EXPR	92:1	92:1	4	f = purple_request_field_bool_new ( "mood_anxious" , _ ( "Anxious" ) , manxious )
ASSIGN	92:1	92:5	5	f = purple_request_field_bool_new ( "mood_anxious" , _ ( "Anxious" ) , manxious )
LVAL	92:1	92:1	6	f
FIELD	92:1	92:1	7	f
LEAF_NODE	92:1	92:1	8	f
ASSIGN_OP	92:3	92:3	6	=
LEAF_NODE	92:3	92:3	7	=
RVAL	92:5	92:5	6	purple_request_field_bool_new ( "mood_anxious" , _ ( "Anxious" ) , manxious )
FUNCTION_CALL	92:5	92:73	7	purple_request_field_bool_new ( "mood_anxious" , _ ( "Anxious" ) , manxious )
CALLEE	92:5	92:5	8	purple_request_field_bool_new
LEAF_NODE	92:5	92:5	9	purple_request_field_bool_new
LEAF_NODE	92:34	92:34	8	(
ARGUMENT	92:35	92:35	8	"mood_anxious"
FIELD	92:35	92:35	9	"mood_anxious"
LEAF_NODE	92:35	92:35	10	"mood_anxious"
LEAF_NODE	92:49	92:49	8	,
ARGUMENT	92:51	92:51	8	_ ( "Anxious" )
FUNCTION_CALL	92:51	92:62	9	_ ( "Anxious" )
CALLEE	92:51	92:51	10	_
LEAF_NODE	92:51	92:51	11	_
LEAF_NODE	92:52	92:52	10	(
ARGUMENT	92:53	92:53	10	"Anxious"
FIELD	92:53	92:53	11	"Anxious"
LEAF_NODE	92:53	92:53	12	"Anxious"
LEAF_NODE	92:62	92:62	10	)
LEAF_NODE	92:63	92:63	8	,
ARGUMENT	92:65	92:65	8	manxious
FIELD	92:65	92:65	9	manxious
LEAF_NODE	92:65	92:65	10	manxious
LEAF_NODE	92:73	92:73	8	)
LEAF_NODE	92:74	92:74	4	;
EXPR_STATEMENT	93:1	93:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	93:1	93:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	93:1	93:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	93:1	93:1	6	purple_request_field_group_add_field
LEAF_NODE	93:1	93:1	7	purple_request_field_group_add_field
LEAF_NODE	93:37	93:37	6	(
ARGUMENT	93:38	93:38	6	g
FIELD	93:38	93:38	7	g
LEAF_NODE	93:38	93:38	8	g
LEAF_NODE	93:39	93:39	6	,
ARGUMENT	93:41	93:41	6	f
FIELD	93:41	93:41	7	f
LEAF_NODE	93:41	93:41	8	f
LEAF_NODE	93:42	93:42	6	)
LEAF_NODE	93:43	93:43	4	;
EXPR_STATEMENT	94:1	94:80	3	f = purple_request_field_label_new ( "l4" , _ ( "\nYour Preferred Contact Methods" ) ) ;
EXPR	94:1	94:1	4	f = purple_request_field_label_new ( "l4" , _ ( "\nYour Preferred Contact Methods" ) )
ASSIGN	94:1	94:5	5	f = purple_request_field_label_new ( "l4" , _ ( "\nYour Preferred Contact Methods" ) )
LVAL	94:1	94:1	6	f
FIELD	94:1	94:1	7	f
LEAF_NODE	94:1	94:1	8	f
ASSIGN_OP	94:3	94:3	6	=
LEAF_NODE	94:3	94:3	7	=
RVAL	94:5	94:5	6	purple_request_field_label_new ( "l4" , _ ( "\nYour Preferred Contact Methods" ) )
FUNCTION_CALL	94:5	94:79	7	purple_request_field_label_new ( "l4" , _ ( "\nYour Preferred Contact Methods" ) )
CALLEE	94:5	94:5	8	purple_request_field_label_new
LEAF_NODE	94:5	94:5	9	purple_request_field_label_new
LEAF_NODE	94:35	94:35	8	(
ARGUMENT	94:36	94:36	8	"l4"
FIELD	94:36	94:36	9	"l4"
LEAF_NODE	94:36	94:36	10	"l4"
LEAF_NODE	94:40	94:40	8	,
ARGUMENT	94:42	94:42	8	_ ( "\nYour Preferred Contact Methods" )
FUNCTION_CALL	94:42	94:78	9	_ ( "\nYour Preferred Contact Methods" )
CALLEE	94:42	94:42	10	_
LEAF_NODE	94:42	94:42	11	_
LEAF_NODE	94:43	94:43	10	(
ARGUMENT	94:44	94:44	10	"\nYour Preferred Contact Methods"
FIELD	94:44	94:44	11	"\nYour Preferred Contact Methods"
LEAF_NODE	94:44	94:44	12	"\nYour Preferred Contact Methods"
LEAF_NODE	94:78	94:78	10	)
LEAF_NODE	94:79	94:79	8	)
LEAF_NODE	94:80	94:80	4	;
EXPR_STATEMENT	95:1	95:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	95:1	95:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	95:1	95:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	95:1	95:1	6	purple_request_field_group_add_field
LEAF_NODE	95:1	95:1	7	purple_request_field_group_add_field
LEAF_NODE	95:37	95:37	6	(
ARGUMENT	95:38	95:38	6	g
FIELD	95:38	95:38	7	g
LEAF_NODE	95:38	95:38	8	g
LEAF_NODE	95:39	95:39	6	,
ARGUMENT	95:41	95:41	6	f
FIELD	95:41	95:41	7	f
LEAF_NODE	95:41	95:41	8	f
LEAF_NODE	95:42	95:42	6	)
LEAF_NODE	95:43	95:43	4	;
EXPR_STATEMENT	96:1	96:68	3	f = purple_request_field_bool_new ( "contact_chat" , _ ( "Chat" ) , cchat ) ;
EXPR	96:1	96:1	4	f = purple_request_field_bool_new ( "contact_chat" , _ ( "Chat" ) , cchat )
ASSIGN	96:1	96:5	5	f = purple_request_field_bool_new ( "contact_chat" , _ ( "Chat" ) , cchat )
LVAL	96:1	96:1	6	f
FIELD	96:1	96:1	7	f
LEAF_NODE	96:1	96:1	8	f
ASSIGN_OP	96:3	96:3	6	=
LEAF_NODE	96:3	96:3	7	=
RVAL	96:5	96:5	6	purple_request_field_bool_new ( "contact_chat" , _ ( "Chat" ) , cchat )
FUNCTION_CALL	96:5	96:67	7	purple_request_field_bool_new ( "contact_chat" , _ ( "Chat" ) , cchat )
CALLEE	96:5	96:5	8	purple_request_field_bool_new
LEAF_NODE	96:5	96:5	9	purple_request_field_bool_new
LEAF_NODE	96:34	96:34	8	(
ARGUMENT	96:35	96:35	8	"contact_chat"
FIELD	96:35	96:35	9	"contact_chat"
LEAF_NODE	96:35	96:35	10	"contact_chat"
LEAF_NODE	96:49	96:49	8	,
ARGUMENT	96:51	96:51	8	_ ( "Chat" )
FUNCTION_CALL	96:51	96:59	9	_ ( "Chat" )
CALLEE	96:51	96:51	10	_
LEAF_NODE	96:51	96:51	11	_
LEAF_NODE	96:52	96:52	10	(
ARGUMENT	96:53	96:53	10	"Chat"
FIELD	96:53	96:53	11	"Chat"
LEAF_NODE	96:53	96:53	12	"Chat"
LEAF_NODE	96:59	96:59	10	)
LEAF_NODE	96:60	96:60	8	,
ARGUMENT	96:62	96:62	8	cchat
FIELD	96:62	96:62	9	cchat
LEAF_NODE	96:62	96:62	10	cchat
LEAF_NODE	96:67	96:67	8	)
LEAF_NODE	96:68	96:68	4	;
EXPR_STATEMENT	97:1	97:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	97:1	97:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	97:1	97:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	97:1	97:1	6	purple_request_field_group_add_field
LEAF_NODE	97:1	97:1	7	purple_request_field_group_add_field
LEAF_NODE	97:37	97:37	6	(
ARGUMENT	97:38	97:38	6	g
FIELD	97:38	97:38	7	g
LEAF_NODE	97:38	97:38	8	g
LEAF_NODE	97:39	97:39	6	,
ARGUMENT	97:41	97:41	6	f
FIELD	97:41	97:41	7	f
LEAF_NODE	97:41	97:41	8	f
LEAF_NODE	97:42	97:42	6	)
LEAF_NODE	97:43	97:43	4	;
EXPR_STATEMENT	98:1	98:71	3	f = purple_request_field_bool_new ( "contact_email" , _ ( "Email" ) , cemail ) ;
EXPR	98:1	98:1	4	f = purple_request_field_bool_new ( "contact_email" , _ ( "Email" ) , cemail )
ASSIGN	98:1	98:5	5	f = purple_request_field_bool_new ( "contact_email" , _ ( "Email" ) , cemail )
LVAL	98:1	98:1	6	f
FIELD	98:1	98:1	7	f
LEAF_NODE	98:1	98:1	8	f
ASSIGN_OP	98:3	98:3	6	=
LEAF_NODE	98:3	98:3	7	=
RVAL	98:5	98:5	6	purple_request_field_bool_new ( "contact_email" , _ ( "Email" ) , cemail )
FUNCTION_CALL	98:5	98:70	7	purple_request_field_bool_new ( "contact_email" , _ ( "Email" ) , cemail )
CALLEE	98:5	98:5	8	purple_request_field_bool_new
LEAF_NODE	98:5	98:5	9	purple_request_field_bool_new
LEAF_NODE	98:34	98:34	8	(
ARGUMENT	98:35	98:35	8	"contact_email"
FIELD	98:35	98:35	9	"contact_email"
LEAF_NODE	98:35	98:35	10	"contact_email"
LEAF_NODE	98:50	98:50	8	,
ARGUMENT	98:52	98:52	8	_ ( "Email" )
FUNCTION_CALL	98:52	98:61	9	_ ( "Email" )
CALLEE	98:52	98:52	10	_
LEAF_NODE	98:52	98:52	11	_
LEAF_NODE	98:53	98:53	10	(
ARGUMENT	98:54	98:54	10	"Email"
FIELD	98:54	98:54	11	"Email"
LEAF_NODE	98:54	98:54	12	"Email"
LEAF_NODE	98:61	98:61	10	)
LEAF_NODE	98:62	98:62	8	,
ARGUMENT	98:64	98:64	8	cemail
FIELD	98:64	98:64	9	cemail
LEAF_NODE	98:64	98:64	10	cemail
LEAF_NODE	98:70	98:70	8	)
LEAF_NODE	98:71	98:71	4	;
EXPR_STATEMENT	99:1	99:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	99:1	99:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	99:1	99:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	99:1	99:1	6	purple_request_field_group_add_field
LEAF_NODE	99:1	99:1	7	purple_request_field_group_add_field
LEAF_NODE	99:37	99:37	6	(
ARGUMENT	99:38	99:38	6	g
FIELD	99:38	99:38	7	g
LEAF_NODE	99:38	99:38	8	g
LEAF_NODE	99:39	99:39	6	,
ARGUMENT	99:41	99:41	6	f
FIELD	99:41	99:41	7	f
LEAF_NODE	99:41	99:41	8	f
LEAF_NODE	99:42	99:42	6	)
LEAF_NODE	99:43	99:43	4	;
EXPR_STATEMENT	100:1	100:69	3	f = purple_request_field_bool_new ( "contact_call" , _ ( "Phone" ) , ccall ) ;
EXPR	100:1	100:1	4	f = purple_request_field_bool_new ( "contact_call" , _ ( "Phone" ) , ccall )
ASSIGN	100:1	100:5	5	f = purple_request_field_bool_new ( "contact_call" , _ ( "Phone" ) , ccall )
LVAL	100:1	100:1	6	f
FIELD	100:1	100:1	7	f
LEAF_NODE	100:1	100:1	8	f
ASSIGN_OP	100:3	100:3	6	=
LEAF_NODE	100:3	100:3	7	=
RVAL	100:5	100:5	6	purple_request_field_bool_new ( "contact_call" , _ ( "Phone" ) , ccall )
FUNCTION_CALL	100:5	100:68	7	purple_request_field_bool_new ( "contact_call" , _ ( "Phone" ) , ccall )
CALLEE	100:5	100:5	8	purple_request_field_bool_new
LEAF_NODE	100:5	100:5	9	purple_request_field_bool_new
LEAF_NODE	100:34	100:34	8	(
ARGUMENT	100:35	100:35	8	"contact_call"
FIELD	100:35	100:35	9	"contact_call"
LEAF_NODE	100:35	100:35	10	"contact_call"
LEAF_NODE	100:49	100:49	8	,
ARGUMENT	100:51	100:51	8	_ ( "Phone" )
FUNCTION_CALL	100:51	100:60	9	_ ( "Phone" )
CALLEE	100:51	100:51	10	_
LEAF_NODE	100:51	100:51	11	_
LEAF_NODE	100:52	100:52	10	(
ARGUMENT	100:53	100:53	10	"Phone"
FIELD	100:53	100:53	11	"Phone"
LEAF_NODE	100:53	100:53	12	"Phone"
LEAF_NODE	100:60	100:60	10	)
LEAF_NODE	100:61	100:61	8	,
ARGUMENT	100:63	100:63	8	ccall
FIELD	100:63	100:63	9	ccall
LEAF_NODE	100:63	100:63	10	ccall
LEAF_NODE	100:68	100:68	8	)
LEAF_NODE	100:69	100:69	4	;
EXPR_STATEMENT	101:1	101:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	101:1	101:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	101:1	101:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	101:1	101:1	6	purple_request_field_group_add_field
LEAF_NODE	101:1	101:1	7	purple_request_field_group_add_field
LEAF_NODE	101:37	101:37	6	(
ARGUMENT	101:38	101:38	6	g
FIELD	101:38	101:38	7	g
LEAF_NODE	101:38	101:38	8	g
LEAF_NODE	101:39	101:39	6	,
ARGUMENT	101:41	101:41	6	f
FIELD	101:41	101:41	7	f
LEAF_NODE	101:41	101:41	8	f
LEAF_NODE	101:42	101:42	6	)
LEAF_NODE	101:43	101:43	4	;
EXPR_STATEMENT	102:1	102:65	3	f = purple_request_field_bool_new ( "contact_sms" , _ ( "SMS" ) , csms ) ;
EXPR	102:1	102:1	4	f = purple_request_field_bool_new ( "contact_sms" , _ ( "SMS" ) , csms )
ASSIGN	102:1	102:5	5	f = purple_request_field_bool_new ( "contact_sms" , _ ( "SMS" ) , csms )
LVAL	102:1	102:1	6	f
FIELD	102:1	102:1	7	f
LEAF_NODE	102:1	102:1	8	f
ASSIGN_OP	102:3	102:3	6	=
LEAF_NODE	102:3	102:3	7	=
RVAL	102:5	102:5	6	purple_request_field_bool_new ( "contact_sms" , _ ( "SMS" ) , csms )
FUNCTION_CALL	102:5	102:64	7	purple_request_field_bool_new ( "contact_sms" , _ ( "SMS" ) , csms )
CALLEE	102:5	102:5	8	purple_request_field_bool_new
LEAF_NODE	102:5	102:5	9	purple_request_field_bool_new
LEAF_NODE	102:34	102:34	8	(
ARGUMENT	102:35	102:35	8	"contact_sms"
FIELD	102:35	102:35	9	"contact_sms"
LEAF_NODE	102:35	102:35	10	"contact_sms"
LEAF_NODE	102:48	102:48	8	,
ARGUMENT	102:50	102:50	8	_ ( "SMS" )
FUNCTION_CALL	102:50	102:57	9	_ ( "SMS" )
CALLEE	102:50	102:50	10	_
LEAF_NODE	102:50	102:50	11	_
LEAF_NODE	102:51	102:51	10	(
ARGUMENT	102:52	102:52	10	"SMS"
FIELD	102:52	102:52	11	"SMS"
LEAF_NODE	102:52	102:52	12	"SMS"
LEAF_NODE	102:57	102:57	10	)
LEAF_NODE	102:58	102:58	8	,
ARGUMENT	102:60	102:60	8	csms
FIELD	102:60	102:60	9	csms
LEAF_NODE	102:60	102:60	10	csms
LEAF_NODE	102:64	102:64	8	)
LEAF_NODE	102:65	102:65	4	;
EXPR_STATEMENT	103:1	103:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	103:1	103:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	103:1	103:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	103:1	103:1	6	purple_request_field_group_add_field
LEAF_NODE	103:1	103:1	7	purple_request_field_group_add_field
LEAF_NODE	103:37	103:37	6	(
ARGUMENT	103:38	103:38	6	g
FIELD	103:38	103:38	7	g
LEAF_NODE	103:38	103:38	8	g
LEAF_NODE	103:39	103:39	6	,
ARGUMENT	103:41	103:41	6	f
FIELD	103:41	103:41	7	f
LEAF_NODE	103:41	103:41	8	f
LEAF_NODE	103:42	103:42	6	)
LEAF_NODE	103:43	103:43	4	;
EXPR_STATEMENT	104:1	104:65	3	f = purple_request_field_bool_new ( "contact_mms" , _ ( "MMS" ) , cmms ) ;
EXPR	104:1	104:1	4	f = purple_request_field_bool_new ( "contact_mms" , _ ( "MMS" ) , cmms )
ASSIGN	104:1	104:5	5	f = purple_request_field_bool_new ( "contact_mms" , _ ( "MMS" ) , cmms )
LVAL	104:1	104:1	6	f
FIELD	104:1	104:1	7	f
LEAF_NODE	104:1	104:1	8	f
ASSIGN_OP	104:3	104:3	6	=
LEAF_NODE	104:3	104:3	7	=
RVAL	104:5	104:5	6	purple_request_field_bool_new ( "contact_mms" , _ ( "MMS" ) , cmms )
FUNCTION_CALL	104:5	104:64	7	purple_request_field_bool_new ( "contact_mms" , _ ( "MMS" ) , cmms )
CALLEE	104:5	104:5	8	purple_request_field_bool_new
LEAF_NODE	104:5	104:5	9	purple_request_field_bool_new
LEAF_NODE	104:34	104:34	8	(
ARGUMENT	104:35	104:35	8	"contact_mms"
FIELD	104:35	104:35	9	"contact_mms"
LEAF_NODE	104:35	104:35	10	"contact_mms"
LEAF_NODE	104:48	104:48	8	,
ARGUMENT	104:50	104:50	8	_ ( "MMS" )
FUNCTION_CALL	104:50	104:57	9	_ ( "MMS" )
CALLEE	104:50	104:50	10	_
LEAF_NODE	104:50	104:50	11	_
LEAF_NODE	104:51	104:51	10	(
ARGUMENT	104:52	104:52	10	"MMS"
FIELD	104:52	104:52	11	"MMS"
LEAF_NODE	104:52	104:52	12	"MMS"
LEAF_NODE	104:57	104:57	10	)
LEAF_NODE	104:58	104:58	8	,
ARGUMENT	104:60	104:60	8	cmms
FIELD	104:60	104:60	9	cmms
LEAF_NODE	104:60	104:60	10	cmms
LEAF_NODE	104:64	104:64	8	)
LEAF_NODE	104:65	104:65	4	;
EXPR_STATEMENT	105:1	105:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	105:1	105:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	105:1	105:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	105:1	105:1	6	purple_request_field_group_add_field
LEAF_NODE	105:1	105:1	7	purple_request_field_group_add_field
LEAF_NODE	105:37	105:37	6	(
ARGUMENT	105:38	105:38	6	g
FIELD	105:38	105:38	7	g
LEAF_NODE	105:38	105:38	8	g
LEAF_NODE	105:39	105:39	6	,
ARGUMENT	105:41	105:41	6	f
FIELD	105:41	105:41	7	f
LEAF_NODE	105:41	105:41	8	f
LEAF_NODE	105:42	105:42	6	)
LEAF_NODE	105:43	105:43	4	;
EXPR_STATEMENT	106:1	106:84	3	f = purple_request_field_bool_new ( "contact_video" , _ ( "Video conferencing" ) , cvideo ) ;
EXPR	106:1	106:1	4	f = purple_request_field_bool_new ( "contact_video" , _ ( "Video conferencing" ) , cvideo )
ASSIGN	106:1	106:5	5	f = purple_request_field_bool_new ( "contact_video" , _ ( "Video conferencing" ) , cvideo )
LVAL	106:1	106:1	6	f
FIELD	106:1	106:1	7	f
LEAF_NODE	106:1	106:1	8	f
ASSIGN_OP	106:3	106:3	6	=
LEAF_NODE	106:3	106:3	7	=
RVAL	106:5	106:5	6	purple_request_field_bool_new ( "contact_video" , _ ( "Video conferencing" ) , cvideo )
FUNCTION_CALL	106:5	106:83	7	purple_request_field_bool_new ( "contact_video" , _ ( "Video conferencing" ) , cvideo )
CALLEE	106:5	106:5	8	purple_request_field_bool_new
LEAF_NODE	106:5	106:5	9	purple_request_field_bool_new
LEAF_NODE	106:34	106:34	8	(
ARGUMENT	106:35	106:35	8	"contact_video"
FIELD	106:35	106:35	9	"contact_video"
LEAF_NODE	106:35	106:35	10	"contact_video"
LEAF_NODE	106:50	106:50	8	,
ARGUMENT	106:52	106:52	8	_ ( "Video conferencing" )
FUNCTION_CALL	106:52	106:74	9	_ ( "Video conferencing" )
CALLEE	106:52	106:52	10	_
LEAF_NODE	106:52	106:52	11	_
LEAF_NODE	106:53	106:53	10	(
ARGUMENT	106:54	106:54	10	"Video conferencing"
FIELD	106:54	106:54	11	"Video conferencing"
LEAF_NODE	106:54	106:54	12	"Video conferencing"
LEAF_NODE	106:74	106:74	10	)
LEAF_NODE	106:75	106:75	8	,
ARGUMENT	106:77	106:77	8	cvideo
FIELD	106:77	106:77	9	cvideo
LEAF_NODE	106:77	106:77	10	cvideo
LEAF_NODE	106:83	106:83	8	)
LEAF_NODE	106:84	106:84	4	;
EXPR_STATEMENT	107:1	107:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	107:1	107:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	107:1	107:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	107:1	107:1	6	purple_request_field_group_add_field
LEAF_NODE	107:1	107:1	7	purple_request_field_group_add_field
LEAF_NODE	107:37	107:37	6	(
ARGUMENT	107:38	107:38	6	g
FIELD	107:38	107:38	7	g
LEAF_NODE	107:38	107:38	8	g
LEAF_NODE	107:39	107:39	6	,
ARGUMENT	107:41	107:41	6	f
FIELD	107:41	107:41	7	f
LEAF_NODE	107:41	107:41	8	f
LEAF_NODE	107:42	107:42	6	)
LEAF_NODE	107:43	107:43	4	;
EXPR_STATEMENT	108:1	108:43	3	purple_request_fields_add_group ( fields , g ) ;
EXPR	108:1	108:1	4	purple_request_fields_add_group ( fields , g )
FUNCTION_CALL	108:1	108:42	5	purple_request_fields_add_group ( fields , g )
CALLEE	108:1	108:1	6	purple_request_fields_add_group
LEAF_NODE	108:1	108:1	7	purple_request_fields_add_group
LEAF_NODE	108:32	108:32	6	(
ARGUMENT	108:33	108:33	6	fields
FIELD	108:33	108:33	7	fields
LEAF_NODE	108:33	108:33	8	fields
LEAF_NODE	108:39	108:39	6	,
ARGUMENT	108:41	108:41	6	g
FIELD	108:41	108:41	7	g
LEAF_NODE	108:41	108:41	8	g
LEAF_NODE	108:42	108:42	6	)
LEAF_NODE	108:43	108:43	4	;
EXPR_STATEMENT	109:1	109:41	3	g = purple_request_field_group_new ( NULL ) ;
EXPR	109:1	109:1	4	g = purple_request_field_group_new ( NULL )
ASSIGN	109:1	109:5	5	g = purple_request_field_group_new ( NULL )
LVAL	109:1	109:1	6	g
FIELD	109:1	109:1	7	g
LEAF_NODE	109:1	109:1	8	g
ASSIGN_OP	109:3	109:3	6	=
LEAF_NODE	109:3	109:3	7	=
RVAL	109:5	109:5	6	purple_request_field_group_new ( NULL )
FUNCTION_CALL	109:5	109:40	7	purple_request_field_group_new ( NULL )
CALLEE	109:5	109:5	8	purple_request_field_group_new
LEAF_NODE	109:5	109:5	9	purple_request_field_group_new
LEAF_NODE	109:35	109:35	8	(
ARGUMENT	109:36	109:36	8	NULL
FIELD	109:36	109:36	9	NULL
LEAF_NODE	109:36	109:36	10	NULL
LEAF_NODE	109:40	109:40	8	)
LEAF_NODE	109:41	109:41	4	;
EXPR_STATEMENT	110:1	111:39	3	f = purple_request_field_string_new ( "status_text" , _ ( "Your Current Status" ) , status [ 0 ] ? status : NULL , TRUE ) ;
EXPR	110:1	110:1	4	f = purple_request_field_string_new ( "status_text" , _ ( "Your Current Status" ) , status [ 0 ] ? status : NULL , TRUE )
ASSIGN	110:1	110:5	5	f = purple_request_field_string_new ( "status_text" , _ ( "Your Current Status" ) , status [ 0 ] ? status : NULL , TRUE )
LVAL	110:1	110:1	6	f
FIELD	110:1	110:1	7	f
LEAF_NODE	110:1	110:1	8	f
ASSIGN_OP	110:3	110:3	6	=
LEAF_NODE	110:3	110:3	7	=
RVAL	110:5	110:5	6	purple_request_field_string_new ( "status_text" , _ ( "Your Current Status" ) , status [ 0 ] ? status : NULL , TRUE )
FUNCTION_CALL	110:5	111:38	7	purple_request_field_string_new ( "status_text" , _ ( "Your Current Status" ) , status [ 0 ] ? status : NULL , TRUE )
CALLEE	110:5	110:5	8	purple_request_field_string_new
LEAF_NODE	110:5	110:5	9	purple_request_field_string_new
LEAF_NODE	110:36	110:36	8	(
ARGUMENT	110:37	110:37	8	"status_text"
FIELD	110:37	110:37	9	"status_text"
LEAF_NODE	110:37	110:37	10	"status_text"
LEAF_NODE	110:50	110:50	8	,
ARGUMENT	110:52	110:52	8	_ ( "Your Current Status" )
FUNCTION_CALL	110:52	110:75	9	_ ( "Your Current Status" )
CALLEE	110:52	110:52	10	_
LEAF_NODE	110:52	110:52	11	_
LEAF_NODE	110:53	110:53	10	(
ARGUMENT	110:54	110:54	10	"Your Current Status"
FIELD	110:54	110:54	11	"Your Current Status"
LEAF_NODE	110:54	110:54	12	"Your Current Status"
LEAF_NODE	110:75	110:75	10	)
LEAF_NODE	110:76	110:76	8	,
ARGUMENT	111:7	111:7	8	status [ 0 ] ? status : NULL
COND_EXPR	111:7	111:28	9	status [ 0 ] ? status : NULL
CONDITION	111:7	111:7	10	status [ 0 ]
FIELD	111:7	111:15	11	status [ 0 ]
LEAF_NODE	111:7	111:7	12	status
LEAF_NODE	111:13	111:13	12	[
EXPR	111:14	111:14	12	0
FIELD	111:14	111:14	13	0
LEAF_NODE	111:14	111:14	14	0
LEAF_NODE	111:15	111:15	12	]
LEAF_NODE	111:17	111:17	10	?
EXPR	111:19	111:19	10	status
FIELD	111:19	111:19	11	status
LEAF_NODE	111:19	111:19	12	status
LEAF_NODE	111:26	111:26	10	:
FIELD	111:28	111:28	10	NULL
LEAF_NODE	111:28	111:28	11	NULL
LEAF_NODE	111:32	111:32	8	,
ARGUMENT	111:34	111:34	8	TRUE
FIELD	111:34	111:34	9	TRUE
LEAF_NODE	111:34	111:34	10	TRUE
LEAF_NODE	111:38	111:38	8	)
LEAF_NODE	111:39	111:39	4	;
EXPR_STATEMENT	112:1	112:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	112:1	112:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	112:1	112:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	112:1	112:1	6	purple_request_field_group_add_field
LEAF_NODE	112:1	112:1	7	purple_request_field_group_add_field
LEAF_NODE	112:37	112:37	6	(
ARGUMENT	112:38	112:38	6	g
FIELD	112:38	112:38	7	g
LEAF_NODE	112:38	112:38	8	g
LEAF_NODE	112:39	112:39	6	,
ARGUMENT	112:41	112:41	6	f
FIELD	112:41	112:41	7	f
LEAF_NODE	112:41	112:41	8	f
LEAF_NODE	112:42	112:42	6	)
LEAF_NODE	112:43	112:43	4	;
EXPR_STATEMENT	113:1	113:43	3	purple_request_fields_add_group ( fields , g ) ;
EXPR	113:1	113:1	4	purple_request_fields_add_group ( fields , g )
FUNCTION_CALL	113:1	113:42	5	purple_request_fields_add_group ( fields , g )
CALLEE	113:1	113:1	6	purple_request_fields_add_group
LEAF_NODE	113:1	113:1	7	purple_request_fields_add_group
LEAF_NODE	113:32	113:32	6	(
ARGUMENT	113:33	113:33	6	fields
FIELD	113:33	113:33	7	fields
LEAF_NODE	113:33	113:33	8	fields
LEAF_NODE	113:39	113:39	6	,
ARGUMENT	113:41	113:41	6	g
FIELD	113:41	113:41	7	g
LEAF_NODE	113:41	113:41	8	g
LEAF_NODE	113:42	113:42	6	)
LEAF_NODE	113:43	113:43	4	;
EXPR_STATEMENT	114:1	114:41	3	g = purple_request_field_group_new ( NULL ) ;
EXPR	114:1	114:1	4	g = purple_request_field_group_new ( NULL )
ASSIGN	114:1	114:5	5	g = purple_request_field_group_new ( NULL )
LVAL	114:1	114:1	6	g
FIELD	114:1	114:1	7	g
LEAF_NODE	114:1	114:1	8	g
ASSIGN_OP	114:3	114:3	6	=
LEAF_NODE	114:3	114:3	7	=
RVAL	114:5	114:5	6	purple_request_field_group_new ( NULL )
FUNCTION_CALL	114:5	114:40	7	purple_request_field_group_new ( NULL )
CALLEE	114:5	114:5	8	purple_request_field_group_new
LEAF_NODE	114:5	114:5	9	purple_request_field_group_new
LEAF_NODE	114:35	114:35	8	(
ARGUMENT	114:36	114:36	8	NULL
FIELD	114:36	114:36	9	NULL
LEAF_NODE	114:36	114:36	10	NULL
LEAF_NODE	114:40	114:40	8	)
LEAF_NODE	114:41	114:41	4	;
EXPR_STATEMENT	116:1	116:63	3	f = purple_request_field_label_new ( "l2" , _ ( "Online Services" ) ) ;
EXPR	116:1	116:1	4	f = purple_request_field_label_new ( "l2" , _ ( "Online Services" ) )
ASSIGN	116:1	116:5	5	f = purple_request_field_label_new ( "l2" , _ ( "Online Services" ) )
LVAL	116:1	116:1	6	f
FIELD	116:1	116:1	7	f
LEAF_NODE	116:1	116:1	8	f
ASSIGN_OP	116:3	116:3	6	=
LEAF_NODE	116:3	116:3	7	=
RVAL	116:5	116:5	6	purple_request_field_label_new ( "l2" , _ ( "Online Services" ) )
FUNCTION_CALL	116:5	116:62	7	purple_request_field_label_new ( "l2" , _ ( "Online Services" ) )
CALLEE	116:5	116:5	8	purple_request_field_label_new
LEAF_NODE	116:5	116:5	9	purple_request_field_label_new
LEAF_NODE	116:35	116:35	8	(
ARGUMENT	116:36	116:36	8	"l2"
FIELD	116:36	116:36	9	"l2"
LEAF_NODE	116:36	116:36	10	"l2"
LEAF_NODE	116:40	116:40	8	,
ARGUMENT	116:42	116:42	8	_ ( "Online Services" )
FUNCTION_CALL	116:42	116:61	9	_ ( "Online Services" )
CALLEE	116:42	116:42	10	_
LEAF_NODE	116:42	116:42	11	_
LEAF_NODE	116:43	116:43	10	(
ARGUMENT	116:44	116:44	10	"Online Services"
FIELD	116:44	116:44	11	"Online Services"
LEAF_NODE	116:44	116:44	12	"Online Services"
LEAF_NODE	116:61	116:61	10	)
LEAF_NODE	116:62	116:62	8	)
LEAF_NODE	116:63	116:63	4	;
EXPR_STATEMENT	117:1	117:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	117:1	117:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	117:1	117:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	117:1	117:1	6	purple_request_field_group_add_field
LEAF_NODE	117:1	117:1	7	purple_request_field_group_add_field
LEAF_NODE	117:37	117:37	6	(
ARGUMENT	117:38	117:38	6	g
FIELD	117:38	117:38	7	g
LEAF_NODE	117:38	117:38	8	g
LEAF_NODE	117:39	117:39	6	,
ARGUMENT	117:41	117:41	6	f
FIELD	117:41	117:41	7	f
LEAF_NODE	117:41	117:41	8	f
LEAF_NODE	117:42	117:42	6	)
LEAF_NODE	117:43	117:43	4	;
EXPR_STATEMENT	118:1	120:10	3	f = purple_request_field_bool_new ( "services" , _ ( "Let others see what services you are using" ) , TRUE ) ;
EXPR	118:1	118:1	4	f = purple_request_field_bool_new ( "services" , _ ( "Let others see what services you are using" ) , TRUE )
ASSIGN	118:1	118:5	5	f = purple_request_field_bool_new ( "services" , _ ( "Let others see what services you are using" ) , TRUE )
LVAL	118:1	118:1	6	f
FIELD	118:1	118:1	7	f
LEAF_NODE	118:1	118:1	8	f
ASSIGN_OP	118:3	118:3	6	=
LEAF_NODE	118:3	118:3	7	=
RVAL	118:5	118:5	6	purple_request_field_bool_new ( "services" , _ ( "Let others see what services you are using" ) , TRUE )
FUNCTION_CALL	118:5	120:9	7	purple_request_field_bool_new ( "services" , _ ( "Let others see what services you are using" ) , TRUE )
CALLEE	118:5	118:5	8	purple_request_field_bool_new
LEAF_NODE	118:5	118:5	9	purple_request_field_bool_new
LEAF_NODE	118:34	118:34	8	(
ARGUMENT	118:35	118:35	8	"services"
FIELD	118:35	118:35	9	"services"
LEAF_NODE	118:35	118:35	10	"services"
LEAF_NODE	118:45	118:45	8	,
ARGUMENT	119:5	119:5	8	_ ( "Let others see what services you are using" )
FUNCTION_CALL	119:5	119:51	9	_ ( "Let others see what services you are using" )
CALLEE	119:5	119:5	10	_
LEAF_NODE	119:5	119:5	11	_
LEAF_NODE	119:6	119:6	10	(
ARGUMENT	119:7	119:7	10	"Let others see what services you are using"
FIELD	119:7	119:7	11	"Let others see what services you are using"
LEAF_NODE	119:7	119:7	12	"Let others see what services you are using"
LEAF_NODE	119:51	119:51	10	)
LEAF_NODE	119:52	119:52	8	,
ARGUMENT	120:5	120:5	8	TRUE
FIELD	120:5	120:5	9	TRUE
LEAF_NODE	120:5	120:5	10	TRUE
LEAF_NODE	120:9	120:9	8	)
LEAF_NODE	120:10	120:10	4	;
EXPR_STATEMENT	121:1	121:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	121:1	121:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	121:1	121:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	121:1	121:1	6	purple_request_field_group_add_field
LEAF_NODE	121:1	121:1	7	purple_request_field_group_add_field
LEAF_NODE	121:37	121:37	6	(
ARGUMENT	121:38	121:38	6	g
FIELD	121:38	121:38	7	g
LEAF_NODE	121:38	121:38	8	g
LEAF_NODE	121:39	121:39	6	,
ARGUMENT	121:41	121:41	6	f
FIELD	121:41	121:41	7	f
LEAF_NODE	121:41	121:41	8	f
LEAF_NODE	121:42	121:42	6	)
LEAF_NODE	121:43	121:43	4	;
EXPR_STATEMENT	124:1	126:12	3	f = purple_request_field_bool_new ( "device" , _ ( "Let others see what computer you are using" ) , device ) ;
EXPR	124:1	124:1	4	f = purple_request_field_bool_new ( "device" , _ ( "Let others see what computer you are using" ) , device )
ASSIGN	124:1	124:5	5	f = purple_request_field_bool_new ( "device" , _ ( "Let others see what computer you are using" ) , device )
LVAL	124:1	124:1	6	f
FIELD	124:1	124:1	7	f
LEAF_NODE	124:1	124:1	8	f
ASSIGN_OP	124:3	124:3	6	=
LEAF_NODE	124:3	124:3	7	=
RVAL	124:5	124:5	6	purple_request_field_bool_new ( "device" , _ ( "Let others see what computer you are using" ) , device )
FUNCTION_CALL	124:5	126:11	7	purple_request_field_bool_new ( "device" , _ ( "Let others see what computer you are using" ) , device )
CALLEE	124:5	124:5	8	purple_request_field_bool_new
LEAF_NODE	124:5	124:5	9	purple_request_field_bool_new
LEAF_NODE	124:34	124:34	8	(
ARGUMENT	124:35	124:35	8	"device"
FIELD	124:35	124:35	9	"device"
LEAF_NODE	124:35	124:35	10	"device"
LEAF_NODE	124:43	124:43	8	,
ARGUMENT	125:5	125:5	8	_ ( "Let others see what computer you are using" )
FUNCTION_CALL	125:5	125:51	9	_ ( "Let others see what computer you are using" )
CALLEE	125:5	125:5	10	_
LEAF_NODE	125:5	125:5	11	_
LEAF_NODE	125:6	125:6	10	(
ARGUMENT	125:7	125:7	10	"Let others see what computer you are using"
FIELD	125:7	125:7	11	"Let others see what computer you are using"
LEAF_NODE	125:7	125:7	12	"Let others see what computer you are using"
LEAF_NODE	125:51	125:51	10	)
LEAF_NODE	125:52	125:52	8	,
ARGUMENT	126:5	126:5	8	device
FIELD	126:5	126:5	9	device
LEAF_NODE	126:5	126:5	10	device
LEAF_NODE	126:11	126:11	8	)
LEAF_NODE	126:12	126:12	4	;
EXPR_STATEMENT	127:1	127:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	127:1	127:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	127:1	127:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	127:1	127:1	6	purple_request_field_group_add_field
LEAF_NODE	127:1	127:1	7	purple_request_field_group_add_field
LEAF_NODE	127:37	127:37	6	(
ARGUMENT	127:38	127:38	6	g
FIELD	127:38	127:38	7	g
LEAF_NODE	127:38	127:38	8	g
LEAF_NODE	127:39	127:39	6	,
ARGUMENT	127:41	127:41	6	f
FIELD	127:41	127:41	7	f
LEAF_NODE	127:41	127:41	8	f
LEAF_NODE	127:42	127:42	6	)
LEAF_NODE	127:43	127:43	4	;
EXPR_STATEMENT	129:1	129:43	3	purple_request_fields_add_group ( fields , g ) ;
EXPR	129:1	129:1	4	purple_request_fields_add_group ( fields , g )
FUNCTION_CALL	129:1	129:42	5	purple_request_fields_add_group ( fields , g )
CALLEE	129:1	129:1	6	purple_request_fields_add_group
LEAF_NODE	129:1	129:1	7	purple_request_fields_add_group
LEAF_NODE	129:32	129:32	6	(
ARGUMENT	129:33	129:33	6	fields
FIELD	129:33	129:33	7	fields
LEAF_NODE	129:33	129:33	8	fields
LEAF_NODE	129:39	129:39	6	,
ARGUMENT	129:41	129:41	6	g
FIELD	129:41	129:41	7	g
LEAF_NODE	129:41	129:41	8	g
LEAF_NODE	129:42	129:42	6	)
LEAF_NODE	129:43	129:43	4	;
EXPR_STATEMENT	130:1	130:41	3	g = purple_request_field_group_new ( NULL ) ;
EXPR	130:1	130:1	4	g = purple_request_field_group_new ( NULL )
ASSIGN	130:1	130:5	5	g = purple_request_field_group_new ( NULL )
LVAL	130:1	130:1	6	g
FIELD	130:1	130:1	7	g
LEAF_NODE	130:1	130:1	8	g
ASSIGN_OP	130:3	130:3	6	=
LEAF_NODE	130:3	130:3	7	=
RVAL	130:5	130:5	6	purple_request_field_group_new ( NULL )
FUNCTION_CALL	130:5	130:40	7	purple_request_field_group_new ( NULL )
CALLEE	130:5	130:5	8	purple_request_field_group_new
LEAF_NODE	130:5	130:5	9	purple_request_field_group_new
LEAF_NODE	130:35	130:35	8	(
ARGUMENT	130:36	130:36	8	NULL
FIELD	130:36	130:36	9	NULL
LEAF_NODE	130:36	130:36	10	NULL
LEAF_NODE	130:40	130:40	8	)
LEAF_NODE	130:41	130:41	4	;
EXPR_STATEMENT	131:1	133:13	3	f = purple_request_field_string_new ( "vcard" , _ ( "Your VCard File" ) , purple_account_get_string ( sg -> account , "vcard" , "" ) , FALSE ) ;
EXPR	131:1	131:1	4	f = purple_request_field_string_new ( "vcard" , _ ( "Your VCard File" ) , purple_account_get_string ( sg -> account , "vcard" , "" ) , FALSE )
ASSIGN	131:1	131:5	5	f = purple_request_field_string_new ( "vcard" , _ ( "Your VCard File" ) , purple_account_get_string ( sg -> account , "vcard" , "" ) , FALSE )
LVAL	131:1	131:1	6	f
FIELD	131:1	131:1	7	f
LEAF_NODE	131:1	131:1	8	f
ASSIGN_OP	131:3	131:3	6	=
LEAF_NODE	131:3	131:3	7	=
RVAL	131:5	131:5	6	purple_request_field_string_new ( "vcard" , _ ( "Your VCard File" ) , purple_account_get_string ( sg -> account , "vcard" , "" ) , FALSE )
FUNCTION_CALL	131:5	133:12	7	purple_request_field_string_new ( "vcard" , _ ( "Your VCard File" ) , purple_account_get_string ( sg -> account , "vcard" , "" ) , FALSE )
CALLEE	131:5	131:5	8	purple_request_field_string_new
LEAF_NODE	131:5	131:5	9	purple_request_field_string_new
LEAF_NODE	131:36	131:36	8	(
ARGUMENT	131:37	131:37	8	"vcard"
FIELD	131:37	131:37	9	"vcard"
LEAF_NODE	131:37	131:37	10	"vcard"
LEAF_NODE	131:44	131:44	8	,
ARGUMENT	131:46	131:46	8	_ ( "Your VCard File" )
FUNCTION_CALL	131:46	131:65	9	_ ( "Your VCard File" )
CALLEE	131:46	131:46	10	_
LEAF_NODE	131:46	131:46	11	_
LEAF_NODE	131:47	131:47	10	(
ARGUMENT	131:48	131:48	10	"Your VCard File"
FIELD	131:48	131:48	11	"Your VCard File"
LEAF_NODE	131:48	131:48	12	"Your VCard File"
LEAF_NODE	131:65	131:65	10	)
LEAF_NODE	131:66	131:66	8	,
ARGUMENT	132:7	132:7	8	purple_account_get_string ( sg -> account , "vcard" , "" )
FUNCTION_CALL	132:7	132:57	9	purple_account_get_string ( sg -> account , "vcard" , "" )
CALLEE	132:7	132:7	10	purple_account_get_string
LEAF_NODE	132:7	132:7	11	purple_account_get_string
LEAF_NODE	132:32	132:32	10	(
ARGUMENT	132:33	132:33	10	sg -> account
FIELD	132:33	132:37	11	sg -> account
LEAF_NODE	132:33	132:33	12	sg
LEAF_NODE	132:35	132:35	12	->
LEAF_NODE	132:37	132:37	12	account
LEAF_NODE	132:44	132:44	10	,
ARGUMENT	132:46	132:46	10	"vcard"
FIELD	132:46	132:46	11	"vcard"
LEAF_NODE	132:46	132:46	12	"vcard"
LEAF_NODE	132:53	132:53	10	,
ARGUMENT	132:55	132:55	10	""
FIELD	132:55	132:55	11	""
LEAF_NODE	132:55	132:55	12	""
LEAF_NODE	132:57	132:57	10	)
LEAF_NODE	132:58	132:58	8	,
ARGUMENT	133:7	133:7	8	FALSE
FIELD	133:7	133:7	9	FALSE
LEAF_NODE	133:7	133:7	10	FALSE
LEAF_NODE	133:12	133:12	8	)
LEAF_NODE	133:13	133:13	4	;
EXPR_STATEMENT	134:1	134:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	134:1	134:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	134:1	134:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	134:1	134:1	6	purple_request_field_group_add_field
LEAF_NODE	134:1	134:1	7	purple_request_field_group_add_field
LEAF_NODE	134:37	134:37	6	(
ARGUMENT	134:38	134:38	6	g
FIELD	134:38	134:38	7	g
LEAF_NODE	134:38	134:38	8	g
LEAF_NODE	134:39	134:39	6	,
ARGUMENT	134:41	134:41	6	f
FIELD	134:41	134:41	7	f
LEAF_NODE	134:41	134:41	8	f
LEAF_NODE	134:42	134:42	6	)
LEAF_NODE	134:43	134:43	4	;
EXPR_STATEMENT	136:1	136:82	3	f = purple_request_field_string_new ( "timezone" , _ ( "Timezone" ) , _tzname [ 0 ] , FALSE ) ;
EXPR	136:1	136:1	4	f = purple_request_field_string_new ( "timezone" , _ ( "Timezone" ) , _tzname [ 0 ] , FALSE )
ASSIGN	136:1	136:5	5	f = purple_request_field_string_new ( "timezone" , _ ( "Timezone" ) , _tzname [ 0 ] , FALSE )
LVAL	136:1	136:1	6	f
FIELD	136:1	136:1	7	f
LEAF_NODE	136:1	136:1	8	f
ASSIGN_OP	136:3	136:3	6	=
LEAF_NODE	136:3	136:3	7	=
RVAL	136:5	136:5	6	purple_request_field_string_new ( "timezone" , _ ( "Timezone" ) , _tzname [ 0 ] , FALSE )
FUNCTION_CALL	136:5	136:81	7	purple_request_field_string_new ( "timezone" , _ ( "Timezone" ) , _tzname [ 0 ] , FALSE )
CALLEE	136:5	136:5	8	purple_request_field_string_new
LEAF_NODE	136:5	136:5	9	purple_request_field_string_new
LEAF_NODE	136:36	136:36	8	(
ARGUMENT	136:37	136:37	8	"timezone"
FIELD	136:37	136:37	9	"timezone"
LEAF_NODE	136:37	136:37	10	"timezone"
LEAF_NODE	136:47	136:47	8	,
ARGUMENT	136:49	136:49	8	_ ( "Timezone" )
FUNCTION_CALL	136:49	136:61	9	_ ( "Timezone" )
CALLEE	136:49	136:49	10	_
LEAF_NODE	136:49	136:49	11	_
LEAF_NODE	136:50	136:50	10	(
ARGUMENT	136:51	136:51	10	"Timezone"
FIELD	136:51	136:51	11	"Timezone"
LEAF_NODE	136:51	136:51	12	"Timezone"
LEAF_NODE	136:61	136:61	10	)
LEAF_NODE	136:62	136:62	8	,
ARGUMENT	136:64	136:64	8	_tzname [ 0 ]
FIELD	136:64	136:73	9	_tzname [ 0 ]
LEAF_NODE	136:64	136:64	10	_tzname
LEAF_NODE	136:71	136:71	10	[
EXPR	136:72	136:72	10	0
FIELD	136:72	136:72	11	0
LEAF_NODE	136:72	136:72	12	0
LEAF_NODE	136:73	136:73	10	]
LEAF_NODE	136:74	136:74	8	,
ARGUMENT	136:76	136:76	8	FALSE
FIELD	136:76	136:76	9	FALSE
LEAF_NODE	136:76	136:76	10	FALSE
LEAF_NODE	136:81	136:81	8	)
LEAF_NODE	136:82	136:82	4	;
EXPR_STATEMENT	138:1	138:81	3	f = purple_request_field_string_new ( "timezone" , _ ( "Timezone" ) , tzname [ 0 ] , FALSE ) ;
EXPR	138:1	138:1	4	f = purple_request_field_string_new ( "timezone" , _ ( "Timezone" ) , tzname [ 0 ] , FALSE )
ASSIGN	138:1	138:5	5	f = purple_request_field_string_new ( "timezone" , _ ( "Timezone" ) , tzname [ 0 ] , FALSE )
LVAL	138:1	138:1	6	f
FIELD	138:1	138:1	7	f
LEAF_NODE	138:1	138:1	8	f
ASSIGN_OP	138:3	138:3	6	=
LEAF_NODE	138:3	138:3	7	=
RVAL	138:5	138:5	6	purple_request_field_string_new ( "timezone" , _ ( "Timezone" ) , tzname [ 0 ] , FALSE )
FUNCTION_CALL	138:5	138:80	7	purple_request_field_string_new ( "timezone" , _ ( "Timezone" ) , tzname [ 0 ] , FALSE )
CALLEE	138:5	138:5	8	purple_request_field_string_new
LEAF_NODE	138:5	138:5	9	purple_request_field_string_new
LEAF_NODE	138:36	138:36	8	(
ARGUMENT	138:37	138:37	8	"timezone"
FIELD	138:37	138:37	9	"timezone"
LEAF_NODE	138:37	138:37	10	"timezone"
LEAF_NODE	138:47	138:47	8	,
ARGUMENT	138:49	138:49	8	_ ( "Timezone" )
FUNCTION_CALL	138:49	138:61	9	_ ( "Timezone" )
CALLEE	138:49	138:49	10	_
LEAF_NODE	138:49	138:49	11	_
LEAF_NODE	138:50	138:50	10	(
ARGUMENT	138:51	138:51	10	"Timezone"
FIELD	138:51	138:51	11	"Timezone"
LEAF_NODE	138:51	138:51	12	"Timezone"
LEAF_NODE	138:61	138:61	10	)
LEAF_NODE	138:62	138:62	8	,
ARGUMENT	138:64	138:64	8	tzname [ 0 ]
FIELD	138:64	138:72	9	tzname [ 0 ]
LEAF_NODE	138:64	138:64	10	tzname
LEAF_NODE	138:70	138:70	10	[
EXPR	138:71	138:71	10	0
FIELD	138:71	138:71	11	0
LEAF_NODE	138:71	138:71	12	0
LEAF_NODE	138:72	138:72	10	]
LEAF_NODE	138:73	138:73	8	,
ARGUMENT	138:75	138:75	8	FALSE
FIELD	138:75	138:75	9	FALSE
LEAF_NODE	138:75	138:75	10	FALSE
LEAF_NODE	138:80	138:80	8	)
LEAF_NODE	138:81	138:81	4	;
EXPR_STATEMENT	140:1	140:43	3	purple_request_field_group_add_field ( g , f ) ;
EXPR	140:1	140:1	4	purple_request_field_group_add_field ( g , f )
FUNCTION_CALL	140:1	140:42	5	purple_request_field_group_add_field ( g , f )
CALLEE	140:1	140:1	6	purple_request_field_group_add_field
LEAF_NODE	140:1	140:1	7	purple_request_field_group_add_field
LEAF_NODE	140:37	140:37	6	(
ARGUMENT	140:38	140:38	6	g
FIELD	140:38	140:38	7	g
LEAF_NODE	140:38	140:38	8	g
LEAF_NODE	140:39	140:39	6	,
ARGUMENT	140:41	140:41	6	f
FIELD	140:41	140:41	7	f
LEAF_NODE	140:41	140:41	8	f
LEAF_NODE	140:42	140:42	6	)
LEAF_NODE	140:43	140:43	4	;
EXPR_STATEMENT	141:1	141:43	3	purple_request_fields_add_group ( fields , g ) ;
EXPR	141:1	141:1	4	purple_request_fields_add_group ( fields , g )
FUNCTION_CALL	141:1	141:42	5	purple_request_fields_add_group ( fields , g )
CALLEE	141:1	141:1	6	purple_request_fields_add_group
LEAF_NODE	141:1	141:1	7	purple_request_fields_add_group
LEAF_NODE	141:32	141:32	6	(
ARGUMENT	141:33	141:33	6	fields
FIELD	141:33	141:33	7	fields
LEAF_NODE	141:33	141:33	8	fields
LEAF_NODE	141:39	141:39	6	,
ARGUMENT	141:41	141:41	6	g
FIELD	141:41	141:41	7	g
LEAF_NODE	141:41	141:41	8	g
LEAF_NODE	141:42	141:42	6	)
LEAF_NODE	141:43	141:43	4	;
LEAF_NODE	142:1	142:1	3	purple_request_fields
LEAF_NODE	142:22	142:22	3	(
LEAF_NODE	142:23	142:23	3	gc
LEAF_NODE	142:25	142:25	3	,
LEAF_NODE	142:27	142:27	3	_
LEAF_NODE	142:28	142:28	3	(
LEAF_NODE	142:29	142:29	3	"User Online Status Attributes"
LEAF_NODE	142:60	142:60	3	)
LEAF_NODE	142:61	142:61	3	,
LEAF_NODE	143:7	143:7	3	_
LEAF_NODE	143:8	143:8	3	(
LEAF_NODE	143:9	143:9	3	"User Online Status Attributes"
LEAF_NODE	143:40	143:40	3	)
LEAF_NODE	143:41	143:41	3	,
LEAF_NODE	144:7	144:7	3	_
LEAF_NODE	144:8	144:8	3	(
LEAF_NODE	144:9	144:9	3	"You can let other users see your online status information "
LEAF_NODE	145:9	145:9	3	"and your personal information. Please fill the information "
LEAF_NODE	146:9	146:9	3	"you would like other users to see about yourself."
LEAF_NODE	146:60	146:60	3	)
LEAF_NODE	146:61	146:61	3	,
LEAF_NODE	147:7	147:7	3	fields
LEAF_NODE	147:13	147:13	3	,
LEAF_NODE	148:7	148:7	3	_
LEAF_NODE	148:8	148:8	3	(
LEAF_NODE	148:9	148:9	3	"OK"
LEAF_NODE	148:13	148:13	3	)
LEAF_NODE	148:14	148:14	3	,
LEAF_NODE	148:16	148:16	3	G_CALLBACK
LEAF_NODE	148:26	148:26	3	(
LEAF_NODE	148:27	148:27	3	silcpurple_attrs_cb
LEAF_NODE	148:46	148:46	3	)
LEAF_NODE	148:47	148:47	3	,
LEAF_NODE	149:7	149:7	3	_
LEAF_NODE	149:8	149:8	3	(
LEAF_NODE	149:9	149:9	3	"Cancel"
LEAF_NODE	149:17	149:17	3	)
LEAF_NODE	149:18	149:18	3	,
LEAF_NODE	149:20	149:20	3	G_CALLBACK
LEAF_NODE	149:30	149:30	3	(
LEAF_NODE	149:31	149:31	3	silcpurple_attrs_cancel
LEAF_NODE	149:54	149:54	3	)
LEAF_NODE	149:55	149:55	3	,
LEAF_NODE	150:4	150:4	3	gc
LEAF_NODE	150:6	150:6	3	->
LEAF_NODE	150:8	150:8	3	account
LEAF_NODE	150:15	150:15	3	,
LEAF_NODE	150:17	150:17	3	NULL
LEAF_NODE	150:21	150:21	3	,
LEAF_NODE	150:23	150:23	3	NULL
LEAF_NODE	150:27	150:27	3	,
LEAF_NODE	150:29	150:29	3	gc
LEAF_NODE	150:31	150:31	3	)
LEAF_NODE	150:32	150:32	3	;
LEAF_NODE	151:0	151:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	icon_box_leave_cb
LEAF_NODE	2:0	2:0	3	icon_box_leave_cb
PARAMETER_LIST	2:17	2:82	2	( GtkWidget * widget , GdkEventCrossing * event , PidginStatusBox * box )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:29	3	GtkWidget * widget
TYPE	2:18	2:28	4	GtkWidget *
TYPE_NAME	2:18	2:18	5	GtkWidget
LEAF_NODE	2:18	2:18	6	GtkWidget
POINTER	2:28	2:28	5	*
LEAF_NODE	2:28	2:28	6	*
NAME	2:29	2:29	4	widget
LEAF_NODE	2:29	2:29	5	widget
LEAF_NODE	2:35	2:35	3	,
PARAMETER_DECL	2:37	2:55	3	GdkEventCrossing * event
TYPE	2:37	2:54	4	GdkEventCrossing *
TYPE_NAME	2:37	2:37	5	GdkEventCrossing
LEAF_NODE	2:37	2:37	6	GdkEventCrossing
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	event
LEAF_NODE	2:55	2:55	5	event
LEAF_NODE	2:60	2:60	3	,
PARAMETER_DECL	2:62	2:79	3	PidginStatusBox * box
TYPE	2:62	2:78	4	PidginStatusBox *
TYPE_NAME	2:62	2:62	5	PidginStatusBox
LEAF_NODE	2:62	2:62	6	PidginStatusBox
POINTER	2:78	2:78	5	*
LEAF_NODE	2:78	2:78	6	*
NAME	2:79	2:79	4	box
LEAF_NODE	2:79	2:79	5	box
LEAF_NODE	2:82	2:82	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
EXPR_STATEMENT	4:1	4:57	3	gdk_window_set_cursor ( widget -> window , box -> arrow_cursor ) ;
EXPR	4:1	4:1	4	gdk_window_set_cursor ( widget -> window , box -> arrow_cursor )
FUNCTION_CALL	4:1	4:56	5	gdk_window_set_cursor ( widget -> window , box -> arrow_cursor )
CALLEE	4:1	4:1	6	gdk_window_set_cursor
LEAF_NODE	4:1	4:1	7	gdk_window_set_cursor
LEAF_NODE	4:22	4:22	6	(
ARGUMENT	4:23	4:23	6	widget -> window
FIELD	4:23	4:31	7	widget -> window
LEAF_NODE	4:23	4:23	8	widget
LEAF_NODE	4:29	4:29	8	->
LEAF_NODE	4:31	4:31	8	window
LEAF_NODE	4:37	4:37	6	,
ARGUMENT	4:39	4:39	6	box -> arrow_cursor
FIELD	4:39	4:44	7	box -> arrow_cursor
LEAF_NODE	4:39	4:39	8	box
LEAF_NODE	4:42	4:42	8	->
LEAF_NODE	4:44	4:44	8	arrow_cursor
LEAF_NODE	4:56	4:56	6	)
LEAF_NODE	4:57	4:57	4	;
EXPR_STATEMENT	5:1	5:66	3	gtk_image_set_from_pixbuf ( GTK_IMAGE ( box -> icon ) , box -> buddy_icon ) ;
EXPR	5:1	5:1	4	gtk_image_set_from_pixbuf ( GTK_IMAGE ( box -> icon ) , box -> buddy_icon )
FUNCTION_CALL	5:1	5:64	5	gtk_image_set_from_pixbuf ( GTK_IMAGE ( box -> icon ) , box -> buddy_icon )
CALLEE	5:1	5:1	6	gtk_image_set_from_pixbuf
LEAF_NODE	5:1	5:1	7	gtk_image_set_from_pixbuf
LEAF_NODE	5:26	5:26	6	(
ARGUMENT	5:27	5:27	6	GTK_IMAGE ( box -> icon )
FUNCTION_CALL	5:27	5:46	7	GTK_IMAGE ( box -> icon )
CALLEE	5:27	5:27	8	GTK_IMAGE
LEAF_NODE	5:27	5:27	9	GTK_IMAGE
LEAF_NODE	5:36	5:36	8	(
ARGUMENT	5:37	5:37	8	box -> icon
FIELD	5:37	5:42	9	box -> icon
LEAF_NODE	5:37	5:37	10	box
LEAF_NODE	5:40	5:40	10	->
LEAF_NODE	5:42	5:42	10	icon
LEAF_NODE	5:46	5:46	8	)
LEAF_NODE	5:47	5:47	6	,
ARGUMENT	5:49	5:49	6	box -> buddy_icon
FIELD	5:49	5:54	7	box -> buddy_icon
LEAF_NODE	5:49	5:49	8	box
LEAF_NODE	5:52	5:52	8	->
LEAF_NODE	5:54	5:54	8	buddy_icon
LEAF_NODE	5:64	5:64	6	)
LEAF_NODE	5:66	5:66	4	;
JUMP_STATEMENT	6:1	6:13	3	return FALSE ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	FALSE
EXPR	6:8	6:8	5	FALSE
FIELD	6:8	6:8	6	FALSE
LEAF_NODE	6:8	6:8	7	FALSE
LEAF_NODE	6:13	6:13	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:0	2	gint64
TYPE_NAME	1:0	1:0	3	gint64
LEAF_NODE	1:0	1:0	4	gint64
FUNCTION_NAME	2:0	2:0	2	purple_value_get_int64
LEAF_NODE	2:0	2:0	3	purple_value_get_int64
PARAMETER_LIST	2:22	2:47	2	( const PurpleValue * value )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:42	3	const PurpleValue * value
TYPE	2:23	2:41	4	const PurpleValue *
TYPE_NAME	2:23	2:29	5	const PurpleValue
LEAF_NODE	2:23	2:23	6	const
LEAF_NODE	2:29	2:29	6	PurpleValue
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	value
LEAF_NODE	2:42	2:42	5	value
LEAF_NODE	2:47	2:47	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:39	3	g_return_val_if_fail ( value != NULL , 0 ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( value != NULL , 0 )
FUNCTION_CALL	4:1	4:38	5	g_return_val_if_fail ( value != NULL , 0 )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:31	6	value != NULL
FIELD	4:22	4:22	7	value
LEAF_NODE	4:22	4:22	8	value
EQ_OPERATOR	4:28	4:28	7	!=
LEAF_NODE	4:28	4:28	8	!=
FIELD	4:31	4:31	7	NULL
LEAF_NODE	4:31	4:31	8	NULL
LEAF_NODE	4:35	4:35	6	,
ARGUMENT	4:37	4:37	6	0
FIELD	4:37	4:37	7	0
LEAF_NODE	4:37	4:37	8	0
LEAF_NODE	4:38	4:38	6	)
LEAF_NODE	4:39	4:39	4	;
JUMP_STATEMENT	5:1	5:30	3	return value -> data . int64_data ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	value -> data . int64_data
EXPR	5:8	5:8	5	value -> data . int64_data
FIELD	5:8	5:20	6	value -> data . int64_data
LEAF_NODE	5:8	5:8	7	value
LEAF_NODE	5:13	5:13	7	->
LEAF_NODE	5:15	5:15	7	data
LEAF_NODE	5:19	5:19	7	.
LEAF_NODE	5:20	5:20	7	int64_data
LEAF_NODE	5:30	5:30	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	19:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	xmpp_iq_received
LEAF_NODE	2:0	2:0	3	xmpp_iq_received
PARAMETER_LIST	2:16	3:46	2	( PurpleConnection * pc , const char * type , const char * id , const char * from , xmlnode * iq )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:35	3	PurpleConnection * pc
TYPE	2:17	2:34	4	PurpleConnection *
TYPE_NAME	2:17	2:17	5	PurpleConnection
LEAF_NODE	2:17	2:17	6	PurpleConnection
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	pc
LEAF_NODE	2:35	2:35	5	pc
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:51	3	const char * type
TYPE	2:39	2:50	4	const char *
TYPE_NAME	2:39	2:45	5	const char
LEAF_NODE	2:39	2:39	6	const
LEAF_NODE	2:45	2:45	6	char
POINTER	2:50	2:50	5	*
LEAF_NODE	2:50	2:50	6	*
NAME	2:51	2:51	4	type
LEAF_NODE	2:51	2:51	5	type
LEAF_NODE	2:55	2:55	3	,
PARAMETER_DECL	2:57	2:69	3	const char * id
TYPE	2:57	2:68	4	const char *
TYPE_NAME	2:57	2:63	5	const char
LEAF_NODE	2:57	2:57	6	const
LEAF_NODE	2:63	2:63	6	char
POINTER	2:68	2:68	5	*
LEAF_NODE	2:68	2:68	6	*
NAME	2:69	2:69	4	id
LEAF_NODE	2:69	2:69	5	id
LEAF_NODE	2:71	2:71	3	,
PARAMETER_DECL	3:17	3:29	3	const char * from
TYPE	3:17	3:28	4	const char *
TYPE_NAME	3:17	3:23	5	const char
LEAF_NODE	3:17	3:17	6	const
LEAF_NODE	3:23	3:23	6	char
POINTER	3:28	3:28	5	*
LEAF_NODE	3:28	3:28	6	*
NAME	3:29	3:29	4	from
LEAF_NODE	3:29	3:29	5	from
LEAF_NODE	3:33	3:33	3	,
PARAMETER_DECL	3:35	3:44	3	xmlnode * iq
TYPE	3:35	3:43	4	xmlnode *
TYPE_NAME	3:35	3:35	5	xmlnode
LEAF_NODE	3:35	3:35	6	xmlnode
POINTER	3:43	3:43	5	*
LEAF_NODE	3:43	3:43	6	*
NAME	3:44	3:44	4	iq
LEAF_NODE	3:44	3:44	5	iq
LEAF_NODE	3:46	3:46	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	18:1	2	
SIMPLE_DECL	5:1	5:32	3	struct xmpp_iq_cb_data * cb_data ;
VAR_DECL	5:1	5:25	4	struct xmpp_iq_cb_data * cb_data
TYPE	5:1	5:24	5	struct xmpp_iq_cb_data *
TYPE_NAME	5:1	5:8	6	struct xmpp_iq_cb_data
LEAF_NODE	5:1	5:1	7	struct
LEAF_NODE	5:8	5:8	7	xmpp_iq_cb_data
POINTER	5:24	5:24	6	*
LEAF_NODE	5:24	5:24	7	*
NAME	5:25	5:25	5	cb_data
LEAF_NODE	5:25	5:25	6	cb_data
LEAF_NODE	5:32	5:32	4	;
EXPR_STATEMENT	6:1	6:48	3	cb_data = g_hash_table_lookup ( iq_callbacks , id ) ;
EXPR	6:1	6:1	4	cb_data = g_hash_table_lookup ( iq_callbacks , id )
ASSIGN	6:1	6:11	5	cb_data = g_hash_table_lookup ( iq_callbacks , id )
LVAL	6:1	6:1	6	cb_data
FIELD	6:1	6:1	7	cb_data
LEAF_NODE	6:1	6:1	8	cb_data
ASSIGN_OP	6:9	6:9	6	=
LEAF_NODE	6:9	6:9	7	=
RVAL	6:11	6:11	6	g_hash_table_lookup ( iq_callbacks , id )
FUNCTION_CALL	6:11	6:47	7	g_hash_table_lookup ( iq_callbacks , id )
CALLEE	6:11	6:11	8	g_hash_table_lookup
LEAF_NODE	6:11	6:11	9	g_hash_table_lookup
LEAF_NODE	6:30	6:30	8	(
ARGUMENT	6:31	6:31	8	iq_callbacks
FIELD	6:31	6:31	9	iq_callbacks
LEAF_NODE	6:31	6:31	10	iq_callbacks
LEAF_NODE	6:43	6:43	8	,
ARGUMENT	6:45	6:45	8	id
FIELD	6:45	6:45	9	id
LEAF_NODE	6:45	6:45	10	id
LEAF_NODE	6:47	6:47	8	)
LEAF_NODE	6:48	6:48	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	! cb_data
EXPR	7:5	7:5	5	! cb_data
UNARY_EXPR	7:5	7:6	6	! cb_data
UNARY_OPERATOR	7:5	7:5	7	!
LEAF_NODE	7:5	7:5	8	!
FIELD	7:6	7:6	7	cb_data
LEAF_NODE	7:6	7:6	8	cb_data
LEAF_NODE	7:13	7:13	4	)
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:14	5	return FALSE ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
DESTINATION	8:9	8:9	6	FALSE
EXPR	8:9	8:9	7	FALSE
FIELD	8:9	8:9	8	FALSE
LEAF_NODE	8:9	8:9	9	FALSE
LEAF_NODE	8:14	8:14	6	;
EXPR_STATEMENT	9:1	9:63	3	cb_data -> cb ( cb_data -> pc , type , id , from , iq , cb_data -> context ) ;
EXPR	9:1	9:1	4	cb_data -> cb ( cb_data -> pc , type , id , from , iq , cb_data -> context )
FUNCTION_CALL	9:1	9:62	5	cb_data -> cb ( cb_data -> pc , type , id , from , iq , cb_data -> context )
CALLEE	9:1	9:10	6	cb_data -> cb
LEAF_NODE	9:1	9:1	7	cb_data
LEAF_NODE	9:8	9:8	7	->
LEAF_NODE	9:10	9:10	7	cb
LEAF_NODE	9:12	9:12	6	(
ARGUMENT	9:13	9:13	6	cb_data -> pc
FIELD	9:13	9:22	7	cb_data -> pc
LEAF_NODE	9:13	9:13	8	cb_data
LEAF_NODE	9:20	9:20	8	->
LEAF_NODE	9:22	9:22	8	pc
LEAF_NODE	9:24	9:24	6	,
ARGUMENT	9:26	9:26	6	type
FIELD	9:26	9:26	7	type
LEAF_NODE	9:26	9:26	8	type
LEAF_NODE	9:30	9:30	6	,
ARGUMENT	9:32	9:32	6	id
FIELD	9:32	9:32	7	id
LEAF_NODE	9:32	9:32	8	id
LEAF_NODE	9:34	9:34	6	,
ARGUMENT	9:36	9:36	6	from
FIELD	9:36	9:36	7	from
LEAF_NODE	9:36	9:36	8	from
LEAF_NODE	9:40	9:40	6	,
ARGUMENT	9:42	9:42	6	iq
FIELD	9:42	9:42	7	iq
LEAF_NODE	9:42	9:42	8	iq
LEAF_NODE	9:44	9:44	6	,
ARGUMENT	9:46	9:46	6	cb_data -> context
FIELD	9:46	9:55	7	cb_data -> context
LEAF_NODE	9:46	9:46	8	cb_data
LEAF_NODE	9:53	9:53	8	->
LEAF_NODE	9:55	9:55	8	context
LEAF_NODE	9:62	9:62	6	)
LEAF_NODE	9:63	9:63	4	;
EXPR_STATEMENT	10:1	10:38	3	g_hash_table_remove ( iq_callbacks , id ) ;
EXPR	10:1	10:1	4	g_hash_table_remove ( iq_callbacks , id )
FUNCTION_CALL	10:1	10:37	5	g_hash_table_remove ( iq_callbacks , id )
CALLEE	10:1	10:1	6	g_hash_table_remove
LEAF_NODE	10:1	10:1	7	g_hash_table_remove
LEAF_NODE	10:20	10:20	6	(
ARGUMENT	10:21	10:21	6	iq_callbacks
FIELD	10:21	10:21	7	iq_callbacks
LEAF_NODE	10:21	10:21	8	iq_callbacks
LEAF_NODE	10:33	10:33	6	,
ARGUMENT	10:35	10:35	6	id
FIELD	10:35	10:35	7	id
LEAF_NODE	10:35	10:35	8	id
LEAF_NODE	10:37	10:37	6	)
LEAF_NODE	10:38	10:38	4	;
SELECTION	11:1	11:43	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	g_hash_table_size ( iq_callbacks ) == 0
EXPR	11:5	11:40	5	g_hash_table_size ( iq_callbacks ) == 0
FUNCTION_CALL	11:5	11:35	6	g_hash_table_size ( iq_callbacks )
CALLEE	11:5	11:5	7	g_hash_table_size
LEAF_NODE	11:5	11:5	8	g_hash_table_size
LEAF_NODE	11:22	11:22	7	(
ARGUMENT	11:23	11:23	7	iq_callbacks
FIELD	11:23	11:23	8	iq_callbacks
LEAF_NODE	11:23	11:23	9	iq_callbacks
LEAF_NODE	11:35	11:35	7	)
EQ_OPERATOR	11:37	11:37	6	==
LEAF_NODE	11:37	11:37	7	==
FIELD	11:40	11:40	6	0
LEAF_NODE	11:40	11:40	7	0
LEAF_NODE	11:41	11:41	4	)
STATEMENTS	11:43	16:1	4	
LEAF_NODE	11:43	11:43	5	{
STATEMENTS	12:2	14:2	5	
SIMPLE_DECL	12:2	12:53	6	PurplePlugin * prpl ; prpl = purple_connection_get_prpl ( pc ) ;
VAR_DECL	12:2	12:16	7	PurplePlugin * prpl ; prpl = purple_connection_get_prpl ( pc )
TYPE	12:2	12:15	8	PurplePlugin *
TYPE_NAME	12:2	12:2	9	PurplePlugin
LEAF_NODE	12:2	12:2	10	PurplePlugin
POINTER	12:15	12:15	9	*
LEAF_NODE	12:15	12:15	10	*
NAME	12:16	12:16	8	prpl
LEAF_NODE	12:16	12:16	9	prpl
LEAF_NODE	0:0	0:0	8	;
INIT	12:16	12:16	8	prpl = purple_connection_get_prpl ( pc )
ASSIGN	12:16	12:23	9	prpl = purple_connection_get_prpl ( pc )
LVAL	12:16	12:16	10	prpl
NAME	12:16	12:16	11	prpl
LEAF_NODE	12:16	12:16	12	prpl
ASSIGN_OP	12:21	12:21	10	=
LEAF_NODE	12:21	12:21	11	=
RVAL	12:23	12:23	10	purple_connection_get_prpl ( pc )
FUNCTION_CALL	12:23	12:52	11	purple_connection_get_prpl ( pc )
CALLEE	12:23	12:23	12	purple_connection_get_prpl
LEAF_NODE	12:23	12:23	13	purple_connection_get_prpl
LEAF_NODE	12:49	12:49	12	(
ARGUMENT	12:50	12:50	12	pc
FIELD	12:50	12:50	13	pc
LEAF_NODE	12:50	12:50	14	pc
LEAF_NODE	12:52	12:52	12	)
LEAF_NODE	12:53	12:53	7	;
EXPR_STATEMENT	13:2	13:22	6	iq_listening = FALSE ;
EXPR	13:2	13:2	7	iq_listening = FALSE
ASSIGN	13:2	13:17	8	iq_listening = FALSE
LVAL	13:2	13:2	9	iq_listening
FIELD	13:2	13:2	10	iq_listening
LEAF_NODE	13:2	13:2	11	iq_listening
ASSIGN_OP	13:15	13:15	9	=
LEAF_NODE	13:15	13:15	10	=
RVAL	13:17	13:17	9	FALSE
FIELD	13:17	13:17	10	FALSE
LEAF_NODE	13:17	13:17	11	FALSE
LEAF_NODE	13:22	13:22	7	;
EXPR_STATEMENT	14:2	15:61	6	purple_signal_disconnect ( prpl , "jabber-receiving-iq" , my_plugin , PURPLE_CALLBACK ( xmpp_iq_received ) ) ;
EXPR	14:2	14:2	7	purple_signal_disconnect ( prpl , "jabber-receiving-iq" , my_plugin , PURPLE_CALLBACK ( xmpp_iq_received ) )
FUNCTION_CALL	14:2	15:60	8	purple_signal_disconnect ( prpl , "jabber-receiving-iq" , my_plugin , PURPLE_CALLBACK ( xmpp_iq_received ) )
CALLEE	14:2	14:2	9	purple_signal_disconnect
LEAF_NODE	14:2	14:2	10	purple_signal_disconnect
LEAF_NODE	14:26	14:26	9	(
ARGUMENT	14:27	14:27	9	prpl
FIELD	14:27	14:27	10	prpl
LEAF_NODE	14:27	14:27	11	prpl
LEAF_NODE	14:31	14:31	9	,
ARGUMENT	14:33	14:33	9	"jabber-receiving-iq"
FIELD	14:33	14:33	10	"jabber-receiving-iq"
LEAF_NODE	14:33	14:33	11	"jabber-receiving-iq"
LEAF_NODE	14:54	14:54	9	,
ARGUMENT	14:56	14:56	9	my_plugin
FIELD	14:56	14:56	10	my_plugin
LEAF_NODE	14:56	14:56	11	my_plugin
LEAF_NODE	14:65	14:65	9	,
ARGUMENT	15:27	15:27	9	PURPLE_CALLBACK ( xmpp_iq_received )
FUNCTION_CALL	15:27	15:59	10	PURPLE_CALLBACK ( xmpp_iq_received )
CALLEE	15:27	15:27	11	PURPLE_CALLBACK
LEAF_NODE	15:27	15:27	12	PURPLE_CALLBACK
LEAF_NODE	15:42	15:42	11	(
ARGUMENT	15:43	15:43	11	xmpp_iq_received
FIELD	15:43	15:43	12	xmpp_iq_received
LEAF_NODE	15:43	15:43	13	xmpp_iq_received
LEAF_NODE	15:59	15:59	11	)
LEAF_NODE	15:60	15:60	9	)
LEAF_NODE	15:61	15:61	7	;
LEAF_NODE	16:1	16:1	5	}
JUMP_STATEMENT	18:1	18:12	3	return TRUE ;
KEYWORD	18:1	18:1	4	return
LEAF_NODE	18:1	18:1	5	return
DESTINATION	18:8	18:8	4	TRUE
EXPR	18:8	18:8	5	TRUE
FIELD	18:8	18:8	6	TRUE
LEAF_NODE	18:8	18:8	7	TRUE
LEAF_NODE	18:12	18:12	4	;
LEAF_NODE	19:0	19:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:17	2	PidginXferDialog *
TYPE_NAME	1:0	1:0	3	PidginXferDialog
LEAF_NODE	1:0	1:0	4	PidginXferDialog
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	pidgin_get_xfer_dialog
LEAF_NODE	2:0	2:0	3	pidgin_get_xfer_dialog
PARAMETER_LIST	2:22	2:27	2	( void )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:23	3	void
LEAF_NODE	2:23	2:23	4	void
LEAF_NODE	2:27	2:27	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:19	3	return xfer_dialog ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	xfer_dialog
EXPR	4:8	4:8	5	xfer_dialog
FIELD	4:8	4:8	6	xfer_dialog
LEAF_NODE	4:8	4:8	7	xfer_dialog
LEAF_NODE	4:19	4:19	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	40:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	irc_close
LEAF_NODE	2:12	2:12	3	irc_close
PARAMETER_LIST	2:21	2:42	2	( PurpleConnection * gc )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:40	3	PurpleConnection * gc
TYPE	2:22	2:39	4	PurpleConnection *
TYPE_NAME	2:22	2:22	5	PurpleConnection
LEAF_NODE	2:22	2:22	6	PurpleConnection
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	gc
LEAF_NODE	2:40	2:40	5	gc
LEAF_NODE	2:42	2:42	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	39:1	2	
SIMPLE_DECL	4:1	4:38	3	struct irc_conn * irc ; irc = gc -> proto_data ;
VAR_DECL	4:1	4:18	4	struct irc_conn * irc ; irc = gc -> proto_data
TYPE	4:1	4:17	5	struct irc_conn *
TYPE_NAME	4:1	4:8	6	struct irc_conn
LEAF_NODE	4:1	4:1	7	struct
LEAF_NODE	4:8	4:8	7	irc_conn
POINTER	4:17	4:17	6	*
LEAF_NODE	4:17	4:17	7	*
NAME	4:18	4:18	5	irc
LEAF_NODE	4:18	4:18	6	irc
LEAF_NODE	0:0	0:0	5	;
INIT	4:18	4:18	5	irc = gc -> proto_data
ASSIGN	4:18	4:24	6	irc = gc -> proto_data
LVAL	4:18	4:18	7	irc
NAME	4:18	4:18	8	irc
LEAF_NODE	4:18	4:18	9	irc
ASSIGN_OP	4:22	4:22	7	=
LEAF_NODE	4:22	4:22	8	=
RVAL	4:24	4:24	7	gc -> proto_data
FIELD	4:24	4:28	8	gc -> proto_data
LEAF_NODE	4:24	4:24	9	gc
LEAF_NODE	4:26	4:26	9	->
LEAF_NODE	4:28	4:28	9	proto_data
LEAF_NODE	4:38	4:38	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	irc == NULL
EXPR	5:5	5:12	5	irc == NULL
FIELD	5:5	5:5	6	irc
LEAF_NODE	5:5	5:5	7	irc
EQ_OPERATOR	5:9	5:9	6	==
LEAF_NODE	5:9	5:9	7	==
FIELD	5:12	5:12	6	NULL
LEAF_NODE	5:12	5:12	7	NULL
LEAF_NODE	5:16	5:16	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:8	5	return DESTINATION ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	6:8	6:8	6	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	irc -> gsc || ( irc -> fd >= 0 )
EXPR	7:5	7:5	5	irc -> gsc || ( irc -> fd >= 0 )
OR	7:5	7:17	6	irc -> gsc || ( irc -> fd >= 0 )
EXPR	7:5	7:5	7	irc -> gsc
FIELD	7:5	7:10	8	irc -> gsc
LEAF_NODE	7:5	7:5	9	irc
LEAF_NODE	7:8	7:8	9	->
LEAF_NODE	7:10	7:10	9	gsc
LEAF_NODE	7:14	7:14	7	||
EXPR	7:17	7:30	7	( irc -> fd >= 0 )
LEAF_NODE	7:17	7:17	8	(
FIELD	7:18	7:23	8	irc -> fd
LEAF_NODE	7:18	7:18	9	irc
LEAF_NODE	7:21	7:21	9	->
LEAF_NODE	7:23	7:23	9	fd
REL_OPERATOR	7:26	7:26	8	>=
LEAF_NODE	7:26	7:26	9	>=
FIELD	7:29	7:29	8	0
LEAF_NODE	7:29	7:29	9	0
LEAF_NODE	7:30	7:30	8	)
LEAF_NODE	7:31	7:31	4	)
STATEMENTS	8:2	8:2	4	
EXPR_STATEMENT	8:2	8:39	5	irc_cmd_quit ( irc , "quit" , NULL , NULL ) ;
EXPR	8:2	8:2	6	irc_cmd_quit ( irc , "quit" , NULL , NULL )
FUNCTION_CALL	8:2	8:38	7	irc_cmd_quit ( irc , "quit" , NULL , NULL )
CALLEE	8:2	8:2	8	irc_cmd_quit
LEAF_NODE	8:2	8:2	9	irc_cmd_quit
LEAF_NODE	8:14	8:14	8	(
ARGUMENT	8:15	8:15	8	irc
FIELD	8:15	8:15	9	irc
LEAF_NODE	8:15	8:15	10	irc
LEAF_NODE	8:18	8:18	8	,
ARGUMENT	8:20	8:20	8	"quit"
FIELD	8:20	8:20	9	"quit"
LEAF_NODE	8:20	8:20	10	"quit"
LEAF_NODE	8:26	8:26	8	,
ARGUMENT	8:28	8:28	8	NULL
FIELD	8:28	8:28	9	NULL
LEAF_NODE	8:28	8:28	10	NULL
LEAF_NODE	8:32	8:32	8	,
ARGUMENT	8:34	8:34	8	NULL
FIELD	8:34	8:34	9	NULL
LEAF_NODE	8:34	8:34	10	NULL
LEAF_NODE	8:38	8:38	8	)
LEAF_NODE	8:39	8:39	6	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	gc -> inpa
EXPR	9:5	9:5	5	gc -> inpa
FIELD	9:5	9:9	6	gc -> inpa
LEAF_NODE	9:5	9:5	7	gc
LEAF_NODE	9:7	9:7	7	->
LEAF_NODE	9:9	9:9	7	inpa
LEAF_NODE	9:13	9:13	4	)
STATEMENTS	10:2	10:2	4	
EXPR_STATEMENT	10:2	10:31	5	purple_input_remove ( gc -> inpa ) ;
EXPR	10:2	10:2	6	purple_input_remove ( gc -> inpa )
FUNCTION_CALL	10:2	10:30	7	purple_input_remove ( gc -> inpa )
CALLEE	10:2	10:2	8	purple_input_remove
LEAF_NODE	10:2	10:2	9	purple_input_remove
LEAF_NODE	10:21	10:21	8	(
ARGUMENT	10:22	10:22	8	gc -> inpa
FIELD	10:22	10:26	9	gc -> inpa
LEAF_NODE	10:22	10:22	10	gc
LEAF_NODE	10:24	10:24	10	->
LEAF_NODE	10:26	10:26	10	inpa
LEAF_NODE	10:30	10:30	8	)
LEAF_NODE	10:31	10:31	6	;
EXPR_STATEMENT	11:1	11:19	3	g_free ( irc -> inbuf ) ;
EXPR	11:1	11:1	4	g_free ( irc -> inbuf )
FUNCTION_CALL	11:1	11:18	5	g_free ( irc -> inbuf )
CALLEE	11:1	11:1	6	g_free
LEAF_NODE	11:1	11:1	7	g_free
LEAF_NODE	11:7	11:7	6	(
ARGUMENT	11:8	11:8	6	irc -> inbuf
FIELD	11:8	11:13	7	irc -> inbuf
LEAF_NODE	11:8	11:8	8	irc
LEAF_NODE	11:11	11:11	8	->
LEAF_NODE	11:13	11:13	8	inbuf
LEAF_NODE	11:18	11:18	6	)
LEAF_NODE	11:19	11:19	4	;
SELECTION	12:1	12:15	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:4	12:4	4	(
CONDITION	12:5	12:5	4	irc -> gsc
EXPR	12:5	12:5	5	irc -> gsc
FIELD	12:5	12:10	6	irc -> gsc
LEAF_NODE	12:5	12:5	7	irc
LEAF_NODE	12:8	12:8	7	->
LEAF_NODE	12:10	12:10	7	gsc
LEAF_NODE	12:13	12:13	4	)
STATEMENTS	12:15	14:1	4	
LEAF_NODE	12:15	12:15	5	{
STATEMENTS	13:2	13:2	5	
EXPR_STATEMENT	13:2	13:28	6	purple_ssl_close ( irc -> gsc ) ;
EXPR	13:2	13:2	7	purple_ssl_close ( irc -> gsc )
FUNCTION_CALL	13:2	13:27	8	purple_ssl_close ( irc -> gsc )
CALLEE	13:2	13:2	9	purple_ssl_close
LEAF_NODE	13:2	13:2	10	purple_ssl_close
LEAF_NODE	13:18	13:18	9	(
ARGUMENT	13:19	13:19	9	irc -> gsc
FIELD	13:19	13:24	10	irc -> gsc
LEAF_NODE	13:19	13:19	11	irc
LEAF_NODE	13:22	13:22	11	->
LEAF_NODE	13:24	13:24	11	gsc
LEAF_NODE	13:27	13:27	9	)
LEAF_NODE	13:28	13:28	7	;
LEAF_NODE	14:1	14:1	5	}
SELECTION	14:3	14:8	3	
KEYWORD	14:3	14:3	4	else
LEAF_NODE	14:3	14:3	5	else
STATEMENTS	14:8	14:8	4	
SELECTION	14:8	14:26	5	
KEYWORD	14:8	14:8	6	if
LEAF_NODE	14:8	14:8	7	if
LEAF_NODE	14:11	14:11	6	(
CONDITION	14:12	14:12	6	irc -> fd >= 0
EXPR	14:12	14:23	7	irc -> fd >= 0
FIELD	14:12	14:17	8	irc -> fd
LEAF_NODE	14:12	14:12	9	irc
LEAF_NODE	14:15	14:15	9	->
LEAF_NODE	14:17	14:17	9	fd
REL_OPERATOR	14:20	14:20	8	>=
LEAF_NODE	14:20	14:20	9	>=
FIELD	14:23	14:23	8	0
LEAF_NODE	14:23	14:23	9	0
LEAF_NODE	14:24	14:24	6	)
STATEMENTS	14:26	16:1	6	
LEAF_NODE	14:26	14:26	7	{
STATEMENTS	15:2	15:2	7	
EXPR_STATEMENT	15:2	15:16	8	close ( irc -> fd ) ;
EXPR	15:2	15:2	9	close ( irc -> fd )
FUNCTION_CALL	15:2	15:15	10	close ( irc -> fd )
CALLEE	15:2	15:2	11	close
LEAF_NODE	15:2	15:2	12	close
LEAF_NODE	15:7	15:7	11	(
ARGUMENT	15:8	15:8	11	irc -> fd
FIELD	15:8	15:13	12	irc -> fd
LEAF_NODE	15:8	15:8	13	irc
LEAF_NODE	15:11	15:11	13	->
LEAF_NODE	15:13	15:13	13	fd
LEAF_NODE	15:15	15:15	11	)
LEAF_NODE	15:16	15:16	9	;
LEAF_NODE	16:1	16:1	7	}
SELECTION	17:1	18:2	3	
KEYWORD	17:1	17:1	4	if
LEAF_NODE	17:1	17:1	5	if
LEAF_NODE	17:4	17:4	4	(
CONDITION	17:5	17:5	4	irc -> timer
EXPR	17:5	17:5	5	irc -> timer
FIELD	17:5	17:10	6	irc -> timer
LEAF_NODE	17:5	17:5	7	irc
LEAF_NODE	17:8	17:8	7	->
LEAF_NODE	17:10	17:10	7	timer
LEAF_NODE	17:15	17:15	4	)
STATEMENTS	18:2	18:2	4	
EXPR_STATEMENT	18:2	18:35	5	purple_timeout_remove ( irc -> timer ) ;
EXPR	18:2	18:2	6	purple_timeout_remove ( irc -> timer )
FUNCTION_CALL	18:2	18:34	7	purple_timeout_remove ( irc -> timer )
CALLEE	18:2	18:2	8	purple_timeout_remove
LEAF_NODE	18:2	18:2	9	purple_timeout_remove
LEAF_NODE	18:23	18:23	8	(
ARGUMENT	18:24	18:24	8	irc -> timer
FIELD	18:24	18:29	9	irc -> timer
LEAF_NODE	18:24	18:24	10	irc
LEAF_NODE	18:27	18:27	10	->
LEAF_NODE	18:29	18:29	10	timer
LEAF_NODE	18:34	18:34	8	)
LEAF_NODE	18:35	18:35	6	;
EXPR_STATEMENT	19:1	19:32	3	g_hash_table_destroy ( irc -> cmds ) ;
EXPR	19:1	19:1	4	g_hash_table_destroy ( irc -> cmds )
FUNCTION_CALL	19:1	19:31	5	g_hash_table_destroy ( irc -> cmds )
CALLEE	19:1	19:1	6	g_hash_table_destroy
LEAF_NODE	19:1	19:1	7	g_hash_table_destroy
LEAF_NODE	19:21	19:21	6	(
ARGUMENT	19:22	19:22	6	irc -> cmds
FIELD	19:22	19:27	7	irc -> cmds
LEAF_NODE	19:22	19:22	8	irc
LEAF_NODE	19:25	19:25	8	->
LEAF_NODE	19:27	19:27	8	cmds
LEAF_NODE	19:31	19:31	6	)
LEAF_NODE	19:32	19:32	4	;
EXPR_STATEMENT	20:1	20:32	3	g_hash_table_destroy ( irc -> msgs ) ;
EXPR	20:1	20:1	4	g_hash_table_destroy ( irc -> msgs )
FUNCTION_CALL	20:1	20:31	5	g_hash_table_destroy ( irc -> msgs )
CALLEE	20:1	20:1	6	g_hash_table_destroy
LEAF_NODE	20:1	20:1	7	g_hash_table_destroy
LEAF_NODE	20:21	20:21	6	(
ARGUMENT	20:22	20:22	6	irc -> msgs
FIELD	20:22	20:27	7	irc -> msgs
LEAF_NODE	20:22	20:22	8	irc
LEAF_NODE	20:25	20:25	8	->
LEAF_NODE	20:27	20:27	8	msgs
LEAF_NODE	20:31	20:31	6	)
LEAF_NODE	20:32	20:32	4	;
EXPR_STATEMENT	21:1	21:35	3	g_hash_table_destroy ( irc -> buddies ) ;
EXPR	21:1	21:1	4	g_hash_table_destroy ( irc -> buddies )
FUNCTION_CALL	21:1	21:34	5	g_hash_table_destroy ( irc -> buddies )
CALLEE	21:1	21:1	6	g_hash_table_destroy
LEAF_NODE	21:1	21:1	7	g_hash_table_destroy
LEAF_NODE	21:21	21:21	6	(
ARGUMENT	21:22	21:22	6	irc -> buddies
FIELD	21:22	21:27	7	irc -> buddies
LEAF_NODE	21:22	21:22	8	irc
LEAF_NODE	21:25	21:25	8	->
LEAF_NODE	21:27	21:27	8	buddies
LEAF_NODE	21:34	21:34	6	)
LEAF_NODE	21:35	21:35	4	;
SELECTION	22:1	23:2	3	
KEYWORD	22:1	22:1	4	if
LEAF_NODE	22:1	22:1	5	if
LEAF_NODE	22:4	22:4	4	(
CONDITION	22:5	22:5	4	irc -> motd
EXPR	22:5	22:5	5	irc -> motd
FIELD	22:5	22:10	6	irc -> motd
LEAF_NODE	22:5	22:5	7	irc
LEAF_NODE	22:8	22:8	7	->
LEAF_NODE	22:10	22:10	7	motd
LEAF_NODE	22:14	22:14	4	)
STATEMENTS	23:2	23:2	4	
EXPR_STATEMENT	23:2	23:32	5	g_string_free ( irc -> motd , TRUE ) ;
EXPR	23:2	23:2	6	g_string_free ( irc -> motd , TRUE )
FUNCTION_CALL	23:2	23:31	7	g_string_free ( irc -> motd , TRUE )
CALLEE	23:2	23:2	8	g_string_free
LEAF_NODE	23:2	23:2	9	g_string_free
LEAF_NODE	23:15	23:15	8	(
ARGUMENT	23:16	23:16	8	irc -> motd
FIELD	23:16	23:21	9	irc -> motd
LEAF_NODE	23:16	23:16	10	irc
LEAF_NODE	23:19	23:19	10	->
LEAF_NODE	23:21	23:21	10	motd
LEAF_NODE	23:25	23:25	8	,
ARGUMENT	23:27	23:27	8	TRUE
FIELD	23:27	23:27	9	TRUE
LEAF_NODE	23:27	23:27	10	TRUE
LEAF_NODE	23:31	23:31	8	)
LEAF_NODE	23:32	23:32	6	;
EXPR_STATEMENT	24:1	24:20	3	g_free ( irc -> server ) ;
EXPR	24:1	24:1	4	g_free ( irc -> server )
FUNCTION_CALL	24:1	24:19	5	g_free ( irc -> server )
CALLEE	24:1	24:1	6	g_free
LEAF_NODE	24:1	24:1	7	g_free
LEAF_NODE	24:7	24:7	6	(
ARGUMENT	24:8	24:8	6	irc -> server
FIELD	24:8	24:13	7	irc -> server
LEAF_NODE	24:8	24:8	8	irc
LEAF_NODE	24:11	24:11	8	->
LEAF_NODE	24:13	24:13	8	server
LEAF_NODE	24:19	24:19	6	)
LEAF_NODE	24:20	24:20	4	;
SELECTION	25:1	26:2	3	
KEYWORD	25:1	25:1	4	if
LEAF_NODE	25:1	25:1	5	if
LEAF_NODE	25:4	25:4	4	(
CONDITION	25:5	25:5	4	irc -> writeh
EXPR	25:5	25:5	5	irc -> writeh
FIELD	25:5	25:10	6	irc -> writeh
LEAF_NODE	25:5	25:5	7	irc
LEAF_NODE	25:8	25:8	7	->
LEAF_NODE	25:10	25:10	7	writeh
LEAF_NODE	25:16	25:16	4	)
STATEMENTS	26:2	26:2	4	
EXPR_STATEMENT	26:2	26:34	5	purple_input_remove ( irc -> writeh ) ;
EXPR	26:2	26:2	6	purple_input_remove ( irc -> writeh )
FUNCTION_CALL	26:2	26:33	7	purple_input_remove ( irc -> writeh )
CALLEE	26:2	26:2	8	purple_input_remove
LEAF_NODE	26:2	26:2	9	purple_input_remove
LEAF_NODE	26:21	26:21	8	(
ARGUMENT	26:22	26:22	8	irc -> writeh
FIELD	26:22	26:27	9	irc -> writeh
LEAF_NODE	26:22	26:22	10	irc
LEAF_NODE	26:25	26:25	10	->
LEAF_NODE	26:27	26:27	10	writeh
LEAF_NODE	26:33	26:33	8	)
LEAF_NODE	26:34	26:34	6	;
EXPR_STATEMENT	27:1	27:40	3	purple_circ_buffer_destroy ( irc -> outbuf ) ;
EXPR	27:1	27:1	4	purple_circ_buffer_destroy ( irc -> outbuf )
FUNCTION_CALL	27:1	27:39	5	purple_circ_buffer_destroy ( irc -> outbuf )
CALLEE	27:1	27:1	6	purple_circ_buffer_destroy
LEAF_NODE	27:1	27:1	7	purple_circ_buffer_destroy
LEAF_NODE	27:27	27:27	6	(
ARGUMENT	27:28	27:28	6	irc -> outbuf
FIELD	27:28	27:33	7	irc -> outbuf
LEAF_NODE	27:28	27:28	8	irc
LEAF_NODE	27:31	27:31	8	->
LEAF_NODE	27:33	27:33	8	outbuf
LEAF_NODE	27:39	27:39	6	)
LEAF_NODE	27:40	27:40	4	;
EXPR_STATEMENT	28:1	28:24	3	g_free ( irc -> mode_chars ) ;
EXPR	28:1	28:1	4	g_free ( irc -> mode_chars )
FUNCTION_CALL	28:1	28:23	5	g_free ( irc -> mode_chars )
CALLEE	28:1	28:1	6	g_free
LEAF_NODE	28:1	28:1	7	g_free
LEAF_NODE	28:7	28:7	6	(
ARGUMENT	28:8	28:8	6	irc -> mode_chars
FIELD	28:8	28:13	7	irc -> mode_chars
LEAF_NODE	28:8	28:8	8	irc
LEAF_NODE	28:11	28:11	8	->
LEAF_NODE	28:13	28:13	8	mode_chars
LEAF_NODE	28:23	28:23	6	)
LEAF_NODE	28:24	28:24	4	;
EXPR_STATEMENT	29:1	29:21	3	g_free ( irc -> reqnick ) ;
EXPR	29:1	29:1	4	g_free ( irc -> reqnick )
FUNCTION_CALL	29:1	29:20	5	g_free ( irc -> reqnick )
CALLEE	29:1	29:1	6	g_free
LEAF_NODE	29:1	29:1	7	g_free
LEAF_NODE	29:7	29:7	6	(
ARGUMENT	29:8	29:8	6	irc -> reqnick
FIELD	29:8	29:13	7	irc -> reqnick
LEAF_NODE	29:8	29:8	8	irc
LEAF_NODE	29:11	29:11	8	->
LEAF_NODE	29:13	29:13	8	reqnick
LEAF_NODE	29:20	29:20	6	)
LEAF_NODE	29:21	29:21	4	;
SELECTION	31:1	31:21	3	
KEYWORD	31:1	31:1	4	if
LEAF_NODE	31:1	31:1	5	if
LEAF_NODE	31:4	31:4	4	(
CONDITION	31:5	31:5	4	irc -> sasl_conn
EXPR	31:5	31:5	5	irc -> sasl_conn
FIELD	31:5	31:10	6	irc -> sasl_conn
LEAF_NODE	31:5	31:5	7	irc
LEAF_NODE	31:8	31:8	7	->
LEAF_NODE	31:10	31:10	7	sasl_conn
LEAF_NODE	31:19	31:19	4	)
STATEMENTS	31:21	34:1	4	
LEAF_NODE	31:21	31:21	5	{
STATEMENTS	32:2	33:2	5	
EXPR_STATEMENT	32:2	32:31	6	sasl_dispose ( & irc -> sasl_conn ) ;
EXPR	32:2	32:2	7	sasl_dispose ( & irc -> sasl_conn )
FUNCTION_CALL	32:2	32:30	8	sasl_dispose ( & irc -> sasl_conn )
CALLEE	32:2	32:2	9	sasl_dispose
LEAF_NODE	32:2	32:2	10	sasl_dispose
LEAF_NODE	32:14	32:14	9	(
ARGUMENT	32:15	32:15	9	& irc -> sasl_conn
UNARY_EXPR	32:15	32:16	10	& irc -> sasl_conn
UNARY_OPERATOR	32:15	32:15	11	&
LEAF_NODE	32:15	32:15	12	&
FIELD	32:16	32:21	11	irc -> sasl_conn
LEAF_NODE	32:16	32:16	12	irc
LEAF_NODE	32:19	32:19	12	->
LEAF_NODE	32:21	32:21	12	sasl_conn
LEAF_NODE	32:30	32:30	9	)
LEAF_NODE	32:31	32:31	7	;
EXPR_STATEMENT	33:2	33:23	6	irc -> sasl_conn = NULL ;
EXPR	33:2	33:2	7	irc -> sasl_conn = NULL
ASSIGN	33:2	33:19	8	irc -> sasl_conn = NULL
LVAL	33:2	33:2	9	irc -> sasl_conn
FIELD	33:2	33:7	10	irc -> sasl_conn
LEAF_NODE	33:2	33:2	11	irc
LEAF_NODE	33:5	33:5	11	->
LEAF_NODE	33:7	33:7	11	sasl_conn
ASSIGN_OP	33:17	33:17	9	=
LEAF_NODE	33:17	33:17	10	=
RVAL	33:19	33:19	9	NULL
FIELD	33:19	33:19	10	NULL
LEAF_NODE	33:19	33:19	11	NULL
LEAF_NODE	33:23	33:23	7	;
LEAF_NODE	34:1	34:1	5	}
EXPR_STATEMENT	35:1	35:21	3	g_free ( irc -> sasl_cb ) ;
EXPR	35:1	35:1	4	g_free ( irc -> sasl_cb )
FUNCTION_CALL	35:1	35:20	5	g_free ( irc -> sasl_cb )
CALLEE	35:1	35:1	6	g_free
LEAF_NODE	35:1	35:1	7	g_free
LEAF_NODE	35:7	35:7	6	(
ARGUMENT	35:8	35:8	6	irc -> sasl_cb
FIELD	35:8	35:13	7	irc -> sasl_cb
LEAF_NODE	35:8	35:8	8	irc
LEAF_NODE	35:11	35:11	8	->
LEAF_NODE	35:13	35:13	8	sasl_cb
LEAF_NODE	35:20	35:20	6	)
LEAF_NODE	35:21	35:21	4	;
SELECTION	36:1	37:2	3	
KEYWORD	36:1	36:1	4	if
LEAF_NODE	36:1	36:1	5	if
LEAF_NODE	36:3	36:3	4	(
CONDITION	36:4	36:4	4	irc -> sasl_mechs
EXPR	36:4	36:4	5	irc -> sasl_mechs
FIELD	36:4	36:9	6	irc -> sasl_mechs
LEAF_NODE	36:4	36:4	7	irc
LEAF_NODE	36:7	36:7	7	->
LEAF_NODE	36:9	36:9	7	sasl_mechs
LEAF_NODE	36:19	36:19	4	)
STATEMENTS	37:2	37:2	4	
EXPR_STATEMENT	37:2	37:38	5	g_string_free ( irc -> sasl_mechs , TRUE ) ;
EXPR	37:2	37:2	6	g_string_free ( irc -> sasl_mechs , TRUE )
FUNCTION_CALL	37:2	37:37	7	g_string_free ( irc -> sasl_mechs , TRUE )
CALLEE	37:2	37:2	8	g_string_free
LEAF_NODE	37:2	37:2	9	g_string_free
LEAF_NODE	37:15	37:15	8	(
ARGUMENT	37:16	37:16	8	irc -> sasl_mechs
FIELD	37:16	37:21	9	irc -> sasl_mechs
LEAF_NODE	37:16	37:16	10	irc
LEAF_NODE	37:19	37:19	10	->
LEAF_NODE	37:21	37:21	10	sasl_mechs
LEAF_NODE	37:31	37:31	8	,
ARGUMENT	37:33	37:33	8	TRUE
FIELD	37:33	37:33	9	TRUE
LEAF_NODE	37:33	37:33	10	TRUE
LEAF_NODE	37:37	37:37	8	)
LEAF_NODE	37:38	37:38	6	;
EXPR_STATEMENT	39:1	39:12	3	g_free ( irc ) ;
EXPR	39:1	39:1	4	g_free ( irc )
FUNCTION_CALL	39:1	39:11	5	g_free ( irc )
CALLEE	39:1	39:1	6	g_free
LEAF_NODE	39:1	39:1	7	g_free
LEAF_NODE	39:7	39:7	6	(
ARGUMENT	39:8	39:8	6	irc
FIELD	39:8	39:8	7	irc
LEAF_NODE	39:8	39:8	8	irc
LEAF_NODE	39:11	39:11	6	)
LEAF_NODE	39:12	39:12	4	;
LEAF_NODE	40:0	40:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:7	2	static gboolean
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	gboolean
LEAF_NODE	2:7	2:7	4	gboolean
FUNCTION_NAME	2:16	2:16	2	account_filter_func
LEAF_NODE	2:16	2:16	3	account_filter_func
PARAMETER_LIST	2:35	2:58	2	( PurpleAccount * account )
LEAF_NODE	2:35	2:35	3	(
PARAMETER_DECL	2:36	2:51	3	PurpleAccount * account
TYPE	2:36	2:50	4	PurpleAccount *
TYPE_NAME	2:36	2:36	5	PurpleAccount
LEAF_NODE	2:36	2:36	6	PurpleAccount
POINTER	2:50	2:50	5	*
LEAF_NODE	2:50	2:50	6	*
NAME	2:51	2:51	4	account
LEAF_NODE	2:51	2:51	5	account
LEAF_NODE	2:58	2:58	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:80	3	return purple_strequal ( purple_account_get_protocol_id ( account ) , XMPP_PLUGIN_ID ) ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	purple_strequal ( purple_account_get_protocol_id ( account ) , XMPP_PLUGIN_ID )
EXPR	4:8	4:8	5	purple_strequal ( purple_account_get_protocol_id ( account ) , XMPP_PLUGIN_ID )
FUNCTION_CALL	4:8	4:79	6	purple_strequal ( purple_account_get_protocol_id ( account ) , XMPP_PLUGIN_ID )
CALLEE	4:8	4:8	7	purple_strequal
LEAF_NODE	4:8	4:8	8	purple_strequal
LEAF_NODE	4:23	4:23	7	(
ARGUMENT	4:24	4:24	7	purple_account_get_protocol_id ( account )
FUNCTION_CALL	4:24	4:62	8	purple_account_get_protocol_id ( account )
CALLEE	4:24	4:24	9	purple_account_get_protocol_id
LEAF_NODE	4:24	4:24	10	purple_account_get_protocol_id
LEAF_NODE	4:54	4:54	9	(
ARGUMENT	4:55	4:55	9	account
FIELD	4:55	4:55	10	account
LEAF_NODE	4:55	4:55	11	account
LEAF_NODE	4:62	4:62	9	)
LEAF_NODE	4:63	4:63	7	,
ARGUMENT	4:65	4:65	7	XMPP_PLUGIN_ID
FIELD	4:65	4:65	8	XMPP_PLUGIN_ID
LEAF_NODE	4:65	4:65	9	XMPP_PLUGIN_ID
LEAF_NODE	4:79	4:79	7	)
LEAF_NODE	4:80	4:80	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	do_got_own_avatar_0_12_cb
LEAF_NODE	2:0	2:0	3	do_got_own_avatar_0_12_cb
PARAMETER_LIST	2:25	2:76	2	( JabberStream * js , const char * from , xmlnode * items )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:40	3	JabberStream * js
TYPE	2:26	2:39	4	JabberStream *
TYPE_NAME	2:26	2:26	5	JabberStream
LEAF_NODE	2:26	2:26	6	JabberStream
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	js
LEAF_NODE	2:40	2:40	5	js
LEAF_NODE	2:42	2:42	3	,
PARAMETER_DECL	2:44	2:56	3	const char * from
TYPE	2:44	2:55	4	const char *
TYPE_NAME	2:44	2:50	5	const char
LEAF_NODE	2:44	2:44	6	const
LEAF_NODE	2:50	2:50	6	char
POINTER	2:55	2:55	5	*
LEAF_NODE	2:55	2:55	6	*
NAME	2:56	2:56	4	from
LEAF_NODE	2:56	2:56	5	from
LEAF_NODE	2:60	2:60	3	,
PARAMETER_DECL	2:62	2:71	3	xmlnode * items
TYPE	2:62	2:70	4	xmlnode *
TYPE_NAME	2:62	2:62	5	xmlnode
LEAF_NODE	2:62	2:62	6	xmlnode
POINTER	2:70	2:70	5	*
LEAF_NODE	2:70	2:70	6	*
NAME	2:71	2:71	4	items
LEAF_NODE	2:71	2:71	5	items
LEAF_NODE	2:76	2:76	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
SELECTION	4:1	6:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	items
EXPR	4:5	4:5	5	items
FIELD	4:5	4:5	6	items
LEAF_NODE	4:5	4:5	7	items
LEAF_NODE	4:10	4:10	4	)
STATEMENTS	6:2	6:2	4	
EXPR_STATEMENT	6:2	6:30	5	remove_avatar_0_12_nodes ( js ) ;
EXPR	6:2	6:2	6	remove_avatar_0_12_nodes ( js )
FUNCTION_CALL	6:2	6:29	7	remove_avatar_0_12_nodes ( js )
CALLEE	6:2	6:2	8	remove_avatar_0_12_nodes
LEAF_NODE	6:2	6:2	9	remove_avatar_0_12_nodes
LEAF_NODE	6:26	6:26	8	(
ARGUMENT	6:27	6:27	8	js
FIELD	6:27	6:27	9	js
LEAF_NODE	6:27	6:27	10	js
LEAF_NODE	6:29	6:29	8	)
LEAF_NODE	6:30	6:30	6	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:0	2	PurpleRoomlistRoomType
TYPE_NAME	2:0	2:0	3	PurpleRoomlistRoomType
LEAF_NODE	2:0	2:0	4	PurpleRoomlistRoomType
FUNCTION_NAME	2:23	2:23	2	purple_roomlist_room_get_type
LEAF_NODE	2:23	2:23	3	purple_roomlist_room_get_type
PARAMETER_LIST	2:52	2:77	2	( PurpleRoomlistRoom * room )
LEAF_NODE	2:52	2:52	3	(
PARAMETER_DECL	2:53	2:73	3	PurpleRoomlistRoom * room
TYPE	2:53	2:72	4	PurpleRoomlistRoom *
TYPE_NAME	2:53	2:53	5	PurpleRoomlistRoom
LEAF_NODE	2:53	2:53	6	PurpleRoomlistRoom
POINTER	2:72	2:72	5	*
LEAF_NODE	2:72	2:72	6	*
NAME	2:73	2:73	4	room
LEAF_NODE	2:73	2:73	5	room
LEAF_NODE	2:77	2:77	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:18	3	return room -> type ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	room -> type
EXPR	4:8	4:8	5	room -> type
FIELD	4:8	4:14	6	room -> type
LEAF_NODE	4:8	4:8	7	room
LEAF_NODE	4:12	4:12	7	->
LEAF_NODE	4:14	4:14	7	type
LEAF_NODE	4:18	4:18	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:0	2	unsigned int
TYPE_NAME	1:0	1:9	3	unsigned int
LEAF_NODE	1:0	1:0	4	unsigned
LEAF_NODE	1:9	1:9	4	int
FUNCTION_NAME	2:0	2:0	2	purple_value_get_uint
LEAF_NODE	2:0	2:0	3	purple_value_get_uint
PARAMETER_LIST	2:21	2:46	2	( const PurpleValue * value )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:41	3	const PurpleValue * value
TYPE	2:22	2:40	4	const PurpleValue *
TYPE_NAME	2:22	2:28	5	const PurpleValue
LEAF_NODE	2:22	2:22	6	const
LEAF_NODE	2:28	2:28	6	PurpleValue
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	value
LEAF_NODE	2:41	2:41	5	value
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:39	3	g_return_val_if_fail ( value != NULL , 0 ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( value != NULL , 0 )
FUNCTION_CALL	4:1	4:38	5	g_return_val_if_fail ( value != NULL , 0 )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:31	6	value != NULL
FIELD	4:22	4:22	7	value
LEAF_NODE	4:22	4:22	8	value
EQ_OPERATOR	4:28	4:28	7	!=
LEAF_NODE	4:28	4:28	8	!=
FIELD	4:31	4:31	7	NULL
LEAF_NODE	4:31	4:31	8	NULL
LEAF_NODE	4:35	4:35	6	,
ARGUMENT	4:37	4:37	6	0
FIELD	4:37	4:37	7	0
LEAF_NODE	4:37	4:37	8	0
LEAF_NODE	4:38	4:38	6	)
LEAF_NODE	4:39	4:39	4	;
JUMP_STATEMENT	5:1	5:28	3	return value -> data . int_data ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	value -> data . int_data
EXPR	5:8	5:8	5	value -> data . int_data
FIELD	5:8	5:20	6	value -> data . int_data
LEAF_NODE	5:8	5:8	7	value
LEAF_NODE	5:13	5:13	7	->
LEAF_NODE	5:15	5:15	7	data
LEAF_NODE	5:19	5:19	7	.
LEAF_NODE	5:20	5:20	7	int_data
LEAF_NODE	5:28	5:28	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	10:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	connection_free_all
LEAF_NODE	2:12	2:12	3	connection_free_all
PARAMETER_LIST	2:31	2:63	2	( struct simple_account_data * sip )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:60	3	struct simple_account_data * sip
TYPE	2:32	2:59	4	struct simple_account_data *
TYPE_NAME	2:32	2:39	5	struct simple_account_data
LEAF_NODE	2:32	2:32	6	struct
LEAF_NODE	2:39	2:39	6	simple_account_data
POINTER	2:59	2:59	5	*
LEAF_NODE	2:59	2:59	6	*
NAME	2:60	2:60	4	sip
LEAF_NODE	2:60	2:60	5	sip
LEAF_NODE	2:63	2:63	3	)
LEAF_NODE	2:65	2:65	2	{
STATEMENTS	3:1	5:1	2	
SIMPLE_DECL	3:1	3:34	3	struct sip_connection * ret ; ret = NULL ;
VAR_DECL	3:1	3:24	4	struct sip_connection * ret ; ret = NULL
TYPE	3:1	3:23	5	struct sip_connection *
TYPE_NAME	3:1	3:8	6	struct sip_connection
LEAF_NODE	3:1	3:1	7	struct
LEAF_NODE	3:8	3:8	7	sip_connection
POINTER	3:23	3:23	6	*
LEAF_NODE	3:23	3:23	7	*
NAME	3:24	3:24	5	ret
LEAF_NODE	3:24	3:24	6	ret
LEAF_NODE	0:0	0:0	5	;
INIT	3:24	3:24	5	ret = NULL
ASSIGN	3:24	3:30	6	ret = NULL
LVAL	3:24	3:24	7	ret
NAME	3:24	3:24	8	ret
LEAF_NODE	3:24	3:24	9	ret
ASSIGN_OP	3:28	3:28	7	=
LEAF_NODE	3:28	3:28	8	=
RVAL	3:30	3:30	7	NULL
FIELD	3:30	3:30	8	NULL
LEAF_NODE	3:30	3:30	9	NULL
LEAF_NODE	3:34	3:34	4	;
SIMPLE_DECL	4:1	4:31	3	GSList * entry ; entry = sip -> openconns ;
VAR_DECL	4:1	4:9	4	GSList * entry ; entry = sip -> openconns
TYPE	4:1	4:8	5	GSList *
TYPE_NAME	4:1	4:1	6	GSList
LEAF_NODE	4:1	4:1	7	GSList
POINTER	4:8	4:8	6	*
LEAF_NODE	4:8	4:8	7	*
NAME	4:9	4:9	5	entry
LEAF_NODE	4:9	4:9	6	entry
LEAF_NODE	0:0	0:0	5	;
INIT	4:9	4:9	5	entry = sip -> openconns
ASSIGN	4:9	4:17	6	entry = sip -> openconns
LVAL	4:9	4:9	7	entry
NAME	4:9	4:9	8	entry
LEAF_NODE	4:9	4:9	9	entry
ASSIGN_OP	4:15	4:15	7	=
LEAF_NODE	4:15	4:15	8	=
RVAL	4:17	4:17	7	sip -> openconns
FIELD	4:17	4:22	8	sip -> openconns
LEAF_NODE	4:17	4:17	9	sip
LEAF_NODE	4:20	4:20	9	->
LEAF_NODE	4:22	4:22	9	openconns
LEAF_NODE	4:31	4:31	4	;
ITERATION	5:1	5:14	3	
KEYWORD	5:1	5:1	4	while
LEAF_NODE	5:1	5:1	5	while
LEAF_NODE	5:6	5:6	4	(
CONDITION	5:7	5:7	4	entry
EXPR	5:7	5:7	5	entry
FIELD	5:7	5:7	6	entry
LEAF_NODE	5:7	5:7	7	entry
LEAF_NODE	5:12	5:12	4	)
STATEMENTS	5:14	9:1	4	
LEAF_NODE	5:14	5:14	5	{
STATEMENTS	6:2	8:2	5	
EXPR_STATEMENT	6:2	6:19	6	ret = entry -> data ;
EXPR	6:2	6:2	7	ret = entry -> data
ASSIGN	6:2	6:8	8	ret = entry -> data
LVAL	6:2	6:2	9	ret
FIELD	6:2	6:2	10	ret
LEAF_NODE	6:2	6:2	11	ret
ASSIGN_OP	6:6	6:6	9	=
LEAF_NODE	6:6	6:6	10	=
RVAL	6:8	6:8	9	entry -> data
FIELD	6:8	6:15	10	entry -> data
LEAF_NODE	6:8	6:8	11	entry
LEAF_NODE	6:13	6:13	11	->
LEAF_NODE	6:15	6:15	11	data
LEAF_NODE	6:19	6:19	7	;
EXPR_STATEMENT	7:2	7:33	6	connection_remove ( sip , ret -> fd ) ;
EXPR	7:2	7:2	7	connection_remove ( sip , ret -> fd )
FUNCTION_CALL	7:2	7:32	8	connection_remove ( sip , ret -> fd )
CALLEE	7:2	7:2	9	connection_remove
LEAF_NODE	7:2	7:2	10	connection_remove
LEAF_NODE	7:19	7:19	9	(
ARGUMENT	7:20	7:20	9	sip
FIELD	7:20	7:20	10	sip
LEAF_NODE	7:20	7:20	11	sip
LEAF_NODE	7:23	7:23	9	,
ARGUMENT	7:25	7:25	9	ret -> fd
FIELD	7:25	7:30	10	ret -> fd
LEAF_NODE	7:25	7:25	11	ret
LEAF_NODE	7:28	7:28	11	->
LEAF_NODE	7:30	7:30	11	fd
LEAF_NODE	7:32	7:32	9	)
LEAF_NODE	7:33	7:33	7	;
EXPR_STATEMENT	8:2	8:24	6	entry = sip -> openconns ;
EXPR	8:2	8:2	7	entry = sip -> openconns
ASSIGN	8:2	8:10	8	entry = sip -> openconns
LVAL	8:2	8:2	9	entry
FIELD	8:2	8:2	10	entry
LEAF_NODE	8:2	8:2	11	entry
ASSIGN_OP	8:8	8:8	9	=
LEAF_NODE	8:8	8:8	10	=
RVAL	8:10	8:10	9	sip -> openconns
FIELD	8:10	8:15	10	sip -> openconns
LEAF_NODE	8:10	8:10	11	sip
LEAF_NODE	8:13	8:13	11	->
LEAF_NODE	8:15	8:15	11	openconns
LEAF_NODE	8:24	8:24	7	;
LEAF_NODE	9:1	9:1	5	}
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	parse_caps
LEAF_NODE	2:0	2:0	3	parse_caps
PARAMETER_LIST	2:10	2:65	2	( JabberStream * js , JabberPresence * presence , xmlnode * c )
LEAF_NODE	2:10	2:10	3	(
PARAMETER_DECL	2:11	2:25	3	JabberStream * js
TYPE	2:11	2:24	4	JabberStream *
TYPE_NAME	2:11	2:11	5	JabberStream
LEAF_NODE	2:11	2:11	6	JabberStream
POINTER	2:24	2:24	5	*
LEAF_NODE	2:24	2:24	6	*
NAME	2:25	2:25	4	js
LEAF_NODE	2:25	2:25	5	js
LEAF_NODE	2:27	2:27	3	,
PARAMETER_DECL	2:29	2:45	3	JabberPresence * presence
TYPE	2:29	2:44	4	JabberPresence *
TYPE_NAME	2:29	2:29	5	JabberPresence
LEAF_NODE	2:29	2:29	6	JabberPresence
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	presence
LEAF_NODE	2:45	2:45	5	presence
LEAF_NODE	2:53	2:53	3	,
PARAMETER_DECL	2:55	2:64	3	xmlnode * c
TYPE	2:55	2:63	4	xmlnode *
TYPE_NAME	2:55	2:55	5	xmlnode
LEAF_NODE	2:55	2:55	6	xmlnode
POINTER	2:63	2:63	5	*
LEAF_NODE	2:63	2:63	6	*
NAME	2:64	2:64	4	c
LEAF_NODE	2:64	2:64	5	c
LEAF_NODE	2:65	2:65	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	8:1	8:1	2	
EXPR_STATEMENT	8:1	8:19	3	presence -> caps = c ;
EXPR	8:1	8:1	4	presence -> caps = c
ASSIGN	8:1	8:18	5	presence -> caps = c
LVAL	8:1	8:1	6	presence -> caps
FIELD	8:1	8:11	7	presence -> caps
LEAF_NODE	8:1	8:1	8	presence
LEAF_NODE	8:9	8:9	8	->
LEAF_NODE	8:11	8:11	8	caps
ASSIGN_OP	8:16	8:16	6	=
LEAF_NODE	8:16	8:16	7	=
RVAL	8:18	8:18	6	c
FIELD	8:18	8:18	7	c
LEAF_NODE	8:18	8:18	8	c
LEAF_NODE	8:19	8:19	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	54:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_account_request_change_password
LEAF_NODE	2:0	2:0	3	purple_account_request_change_password
PARAMETER_LIST	2:38	2:61	2	( PurpleAccount * account )
LEAF_NODE	2:38	2:38	3	(
PARAMETER_DECL	2:39	2:54	3	PurpleAccount * account
TYPE	2:39	2:53	4	PurpleAccount *
TYPE_NAME	2:39	2:39	5	PurpleAccount
LEAF_NODE	2:39	2:39	6	PurpleAccount
POINTER	2:53	2:53	5	*
LEAF_NODE	2:53	2:53	6	*
NAME	2:54	2:54	4	account
LEAF_NODE	2:54	2:54	5	account
LEAF_NODE	2:61	2:61	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	53:14	2	
SIMPLE_DECL	4:1	4:28	3	PurpleRequestFields * fields ;
VAR_DECL	4:1	4:22	4	PurpleRequestFields * fields
TYPE	4:1	4:21	5	PurpleRequestFields *
TYPE_NAME	4:1	4:1	6	PurpleRequestFields
LEAF_NODE	4:1	4:1	7	PurpleRequestFields
POINTER	4:21	4:21	6	*
LEAF_NODE	4:21	4:21	7	*
NAME	4:22	4:22	5	fields
LEAF_NODE	4:22	4:22	6	fields
LEAF_NODE	4:28	4:28	4	;
SIMPLE_DECL	5:1	5:31	3	PurpleRequestFieldGroup * group ;
VAR_DECL	5:1	5:26	4	PurpleRequestFieldGroup * group
TYPE	5:1	5:25	5	PurpleRequestFieldGroup *
TYPE_NAME	5:1	5:1	6	PurpleRequestFieldGroup
LEAF_NODE	5:1	5:1	7	PurpleRequestFieldGroup
POINTER	5:25	5:25	6	*
LEAF_NODE	5:25	5:25	7	*
NAME	5:26	5:26	5	group
LEAF_NODE	5:26	5:26	6	group
LEAF_NODE	5:31	5:31	4	;
SIMPLE_DECL	6:1	6:26	3	PurpleRequestField * field ;
VAR_DECL	6:1	6:21	4	PurpleRequestField * field
TYPE	6:1	6:20	5	PurpleRequestField *
TYPE_NAME	6:1	6:1	6	PurpleRequestField
LEAF_NODE	6:1	6:1	7	PurpleRequestField
POINTER	6:20	6:20	6	*
LEAF_NODE	6:20	6:20	7	*
NAME	6:21	6:21	5	field
LEAF_NODE	6:21	6:21	6	field
LEAF_NODE	6:26	6:26	4	;
SIMPLE_DECL	7:1	7:21	3	PurpleConnection * gc ;
VAR_DECL	7:1	7:19	4	PurpleConnection * gc
TYPE	7:1	7:18	5	PurpleConnection *
TYPE_NAME	7:1	7:1	6	PurpleConnection
LEAF_NODE	7:1	7:1	7	PurpleConnection
POINTER	7:18	7:18	6	*
LEAF_NODE	7:18	7:18	7	*
NAME	7:19	7:19	5	gc
LEAF_NODE	7:19	7:19	6	gc
LEAF_NODE	7:21	7:21	4	;
SIMPLE_DECL	8:1	8:26	3	PurplePlugin * prpl ; prpl = NULL ;
VAR_DECL	8:1	8:15	4	PurplePlugin * prpl ; prpl = NULL
TYPE	8:1	8:14	5	PurplePlugin *
TYPE_NAME	8:1	8:1	6	PurplePlugin
LEAF_NODE	8:1	8:1	7	PurplePlugin
POINTER	8:14	8:14	6	*
LEAF_NODE	8:14	8:14	7	*
NAME	8:15	8:15	5	prpl
LEAF_NODE	8:15	8:15	6	prpl
LEAF_NODE	0:0	0:0	5	;
INIT	8:15	8:15	5	prpl = NULL
ASSIGN	8:15	8:22	6	prpl = NULL
LVAL	8:15	8:15	7	prpl
NAME	8:15	8:15	8	prpl
LEAF_NODE	8:15	8:15	9	prpl
ASSIGN_OP	8:20	8:20	7	=
LEAF_NODE	8:20	8:20	8	=
RVAL	8:22	8:22	7	NULL
FIELD	8:22	8:22	8	NULL
LEAF_NODE	8:22	8:22	9	NULL
LEAF_NODE	8:26	8:26	4	;
SIMPLE_DECL	9:1	9:43	3	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL ;
VAR_DECL	9:1	9:27	4	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL
TYPE	9:1	9:26	5	PurplePluginProtocolInfo *
TYPE_NAME	9:1	9:1	6	PurplePluginProtocolInfo
LEAF_NODE	9:1	9:1	7	PurplePluginProtocolInfo
POINTER	9:26	9:26	6	*
LEAF_NODE	9:26	9:26	7	*
NAME	9:27	9:27	5	prpl_info
LEAF_NODE	9:27	9:27	6	prpl_info
LEAF_NODE	0:0	0:0	5	;
INIT	9:27	9:27	5	prpl_info = NULL
ASSIGN	9:27	9:39	6	prpl_info = NULL
LVAL	9:27	9:27	7	prpl_info
NAME	9:27	9:27	8	prpl_info
LEAF_NODE	9:27	9:27	9	prpl_info
ASSIGN_OP	9:37	9:37	7	=
LEAF_NODE	9:37	9:37	8	=
RVAL	9:39	9:39	7	NULL
FIELD	9:39	9:39	8	NULL
LEAF_NODE	9:39	9:39	9	NULL
LEAF_NODE	9:43	9:43	4	;
SIMPLE_DECL	10:1	10:18	3	char [ 256 ] primary ;
VAR_DECL	10:1	10:6	4	char [ 256 ] primary
TYPE	10:1	10:13	5	char [ 256 ]
TYPE_NAME	10:1	10:1	6	char
LEAF_NODE	10:1	10:1	7	char
TYPE_SUFFIX	10:13	10:17	6	[ 256 ]
LEAF_NODE	10:13	10:13	7	[
FIELD	10:14	10:14	7	256
LEAF_NODE	10:14	10:14	8	256
LEAF_NODE	10:17	10:17	7	]
NAME	10:6	10:6	5	primary
LEAF_NODE	10:6	10:6	6	primary
LEAF_NODE	10:18	10:18	4	;
EXPR_STATEMENT	11:1	11:34	3	g_return_if_fail ( account != NULL ) ;
EXPR	11:1	11:1	4	g_return_if_fail ( account != NULL )
FUNCTION_CALL	11:1	11:33	5	g_return_if_fail ( account != NULL )
CALLEE	11:1	11:1	6	g_return_if_fail
LEAF_NODE	11:1	11:1	7	g_return_if_fail
LEAF_NODE	11:17	11:17	6	(
ARGUMENT	11:18	11:29	6	account != NULL
FIELD	11:18	11:18	7	account
LEAF_NODE	11:18	11:18	8	account
EQ_OPERATOR	11:26	11:26	7	!=
LEAF_NODE	11:26	11:26	8	!=
FIELD	11:29	11:29	7	NULL
LEAF_NODE	11:29	11:29	8	NULL
LEAF_NODE	11:33	11:33	6	)
LEAF_NODE	11:34	11:34	4	;
EXPR_STATEMENT	12:1	12:55	3	g_return_if_fail ( purple_account_is_connected ( account ) ) ;
EXPR	12:1	12:1	4	g_return_if_fail ( purple_account_is_connected ( account ) )
FUNCTION_CALL	12:1	12:54	5	g_return_if_fail ( purple_account_is_connected ( account ) )
CALLEE	12:1	12:1	6	g_return_if_fail
LEAF_NODE	12:1	12:1	7	g_return_if_fail
LEAF_NODE	12:17	12:17	6	(
ARGUMENT	12:18	12:18	6	purple_account_is_connected ( account )
FUNCTION_CALL	12:18	12:53	7	purple_account_is_connected ( account )
CALLEE	12:18	12:18	8	purple_account_is_connected
LEAF_NODE	12:18	12:18	9	purple_account_is_connected
LEAF_NODE	12:45	12:45	8	(
ARGUMENT	12:46	12:46	8	account
FIELD	12:46	12:46	9	account
LEAF_NODE	12:46	12:46	10	account
LEAF_NODE	12:53	12:53	8	)
LEAF_NODE	12:54	12:54	6	)
LEAF_NODE	12:55	12:55	4	;
EXPR_STATEMENT	13:1	13:44	3	gc = purple_account_get_connection ( account ) ;
EXPR	13:1	13:1	4	gc = purple_account_get_connection ( account )
ASSIGN	13:1	13:6	5	gc = purple_account_get_connection ( account )
LVAL	13:1	13:1	6	gc
FIELD	13:1	13:1	7	gc
LEAF_NODE	13:1	13:1	8	gc
ASSIGN_OP	13:4	13:4	6	=
LEAF_NODE	13:4	13:4	7	=
RVAL	13:6	13:6	6	purple_account_get_connection ( account )
FUNCTION_CALL	13:6	13:43	7	purple_account_get_connection ( account )
CALLEE	13:6	13:6	8	purple_account_get_connection
LEAF_NODE	13:6	13:6	9	purple_account_get_connection
LEAF_NODE	13:35	13:35	8	(
ARGUMENT	13:36	13:36	8	account
FIELD	13:36	13:36	9	account
LEAF_NODE	13:36	13:36	10	account
LEAF_NODE	13:43	13:43	8	)
LEAF_NODE	13:44	13:44	4	;
SELECTION	14:1	15:2	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	gc != NULL
EXPR	14:5	14:11	5	gc != NULL
FIELD	14:5	14:5	6	gc
LEAF_NODE	14:5	14:5	7	gc
EQ_OPERATOR	14:8	14:8	6	!=
LEAF_NODE	14:8	14:8	7	!=
FIELD	14:11	14:11	6	NULL
LEAF_NODE	14:11	14:11	7	NULL
LEAF_NODE	14:15	14:15	4	)
STATEMENTS	15:2	15:2	4	
EXPR_STATEMENT	15:2	15:39	5	prpl = purple_connection_get_prpl ( gc ) ;
EXPR	15:2	15:2	6	prpl = purple_connection_get_prpl ( gc )
ASSIGN	15:2	15:9	7	prpl = purple_connection_get_prpl ( gc )
LVAL	15:2	15:2	8	prpl
FIELD	15:2	15:2	9	prpl
LEAF_NODE	15:2	15:2	10	prpl
ASSIGN_OP	15:7	15:7	8	=
LEAF_NODE	15:7	15:7	9	=
RVAL	15:9	15:9	8	purple_connection_get_prpl ( gc )
FUNCTION_CALL	15:9	15:38	9	purple_connection_get_prpl ( gc )
CALLEE	15:9	15:9	10	purple_connection_get_prpl
LEAF_NODE	15:9	15:9	11	purple_connection_get_prpl
LEAF_NODE	15:35	15:35	10	(
ARGUMENT	15:36	15:36	10	gc
FIELD	15:36	15:36	11	gc
LEAF_NODE	15:36	15:36	12	gc
LEAF_NODE	15:38	15:38	10	)
LEAF_NODE	15:39	15:39	6	;
SELECTION	16:1	17:2	3	
KEYWORD	16:1	16:1	4	if
LEAF_NODE	16:1	16:1	5	if
LEAF_NODE	16:4	16:4	4	(
CONDITION	16:5	16:5	4	prpl != NULL
EXPR	16:5	16:13	5	prpl != NULL
FIELD	16:5	16:5	6	prpl
LEAF_NODE	16:5	16:5	7	prpl
EQ_OPERATOR	16:10	16:10	6	!=
LEAF_NODE	16:10	16:10	7	!=
FIELD	16:13	16:13	6	NULL
LEAF_NODE	16:13	16:13	7	NULL
LEAF_NODE	16:17	16:17	4	)
STATEMENTS	17:2	17:2	4	
EXPR_STATEMENT	17:2	17:47	5	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl ) ;
EXPR	17:2	17:2	6	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
ASSIGN	17:2	17:14	7	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
LVAL	17:2	17:2	8	prpl_info
FIELD	17:2	17:2	9	prpl_info
LEAF_NODE	17:2	17:2	10	prpl_info
ASSIGN_OP	17:12	17:12	8	=
LEAF_NODE	17:12	17:12	9	=
RVAL	17:14	17:14	8	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
FUNCTION_CALL	17:14	17:46	9	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
CALLEE	17:14	17:14	10	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	17:14	17:14	11	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	17:41	17:41	10	(
ARGUMENT	17:42	17:42	10	prpl
FIELD	17:42	17:42	11	prpl
LEAF_NODE	17:42	17:42	12	prpl
LEAF_NODE	17:46	17:46	10	)
LEAF_NODE	17:47	17:47	6	;
EXPR_STATEMENT	18:1	18:37	3	fields = purple_request_fields_new ( ) ;
EXPR	18:1	18:1	4	fields = purple_request_fields_new ( )
ASSIGN	18:1	18:10	5	fields = purple_request_fields_new ( )
LVAL	18:1	18:1	6	fields
FIELD	18:1	18:1	7	fields
LEAF_NODE	18:1	18:1	8	fields
ASSIGN_OP	18:8	18:8	6	=
LEAF_NODE	18:8	18:8	7	=
RVAL	18:10	18:10	6	purple_request_fields_new ( )
FUNCTION_CALL	18:10	18:36	7	purple_request_fields_new ( )
CALLEE	18:10	18:10	8	purple_request_fields_new
LEAF_NODE	18:10	18:10	9	purple_request_fields_new
LEAF_NODE	18:35	18:35	8	(
LEAF_NODE	18:36	18:36	8	)
LEAF_NODE	18:37	18:37	4	;
EXPR_STATEMENT	19:1	19:45	3	group = purple_request_field_group_new ( NULL ) ;
EXPR	19:1	19:1	4	group = purple_request_field_group_new ( NULL )
ASSIGN	19:1	19:9	5	group = purple_request_field_group_new ( NULL )
LVAL	19:1	19:1	6	group
FIELD	19:1	19:1	7	group
LEAF_NODE	19:1	19:1	8	group
ASSIGN_OP	19:7	19:7	6	=
LEAF_NODE	19:7	19:7	7	=
RVAL	19:9	19:9	6	purple_request_field_group_new ( NULL )
FUNCTION_CALL	19:9	19:44	7	purple_request_field_group_new ( NULL )
CALLEE	19:9	19:9	8	purple_request_field_group_new
LEAF_NODE	19:9	19:9	9	purple_request_field_group_new
LEAF_NODE	19:39	19:39	8	(
ARGUMENT	19:40	19:40	8	NULL
FIELD	19:40	19:40	9	NULL
LEAF_NODE	19:40	19:40	10	NULL
LEAF_NODE	19:44	19:44	8	)
LEAF_NODE	19:45	19:45	4	;
EXPR_STATEMENT	20:1	20:47	3	purple_request_fields_add_group ( fields , group ) ;
EXPR	20:1	20:1	4	purple_request_fields_add_group ( fields , group )
FUNCTION_CALL	20:1	20:46	5	purple_request_fields_add_group ( fields , group )
CALLEE	20:1	20:1	6	purple_request_fields_add_group
LEAF_NODE	20:1	20:1	7	purple_request_fields_add_group
LEAF_NODE	20:32	20:32	6	(
ARGUMENT	20:33	20:33	6	fields
FIELD	20:33	20:33	7	fields
LEAF_NODE	20:33	20:33	8	fields
LEAF_NODE	20:39	20:39	6	,
ARGUMENT	20:41	20:41	6	group
FIELD	20:41	20:41	7	group
LEAF_NODE	20:41	20:41	8	group
LEAF_NODE	20:46	20:46	6	)
LEAF_NODE	20:47	20:47	4	;
EXPR_STATEMENT	21:1	22:24	3	field = purple_request_field_string_new ( "password" , _ ( "Original password" ) , NULL , FALSE ) ;
EXPR	21:1	21:1	4	field = purple_request_field_string_new ( "password" , _ ( "Original password" ) , NULL , FALSE )
ASSIGN	21:1	21:9	5	field = purple_request_field_string_new ( "password" , _ ( "Original password" ) , NULL , FALSE )
LVAL	21:1	21:1	6	field
FIELD	21:1	21:1	7	field
LEAF_NODE	21:1	21:1	8	field
ASSIGN_OP	21:7	21:7	6	=
LEAF_NODE	21:7	21:7	7	=
RVAL	21:9	21:9	6	purple_request_field_string_new ( "password" , _ ( "Original password" ) , NULL , FALSE )
FUNCTION_CALL	21:9	22:23	7	purple_request_field_string_new ( "password" , _ ( "Original password" ) , NULL , FALSE )
CALLEE	21:9	21:9	8	purple_request_field_string_new
LEAF_NODE	21:9	21:9	9	purple_request_field_string_new
LEAF_NODE	21:40	21:40	8	(
ARGUMENT	21:41	21:41	8	"password"
FIELD	21:41	21:41	9	"password"
LEAF_NODE	21:41	21:41	10	"password"
LEAF_NODE	21:51	21:51	8	,
ARGUMENT	21:53	21:53	8	_ ( "Original password" )
FUNCTION_CALL	21:53	21:74	9	_ ( "Original password" )
CALLEE	21:53	21:53	10	_
LEAF_NODE	21:53	21:53	11	_
LEAF_NODE	21:54	21:54	10	(
ARGUMENT	21:55	21:55	10	"Original password"
FIELD	21:55	21:55	11	"Original password"
LEAF_NODE	21:55	21:55	12	"Original password"
LEAF_NODE	21:74	21:74	10	)
LEAF_NODE	21:75	21:75	8	,
ARGUMENT	22:12	22:12	8	NULL
FIELD	22:12	22:12	9	NULL
LEAF_NODE	22:12	22:12	10	NULL
LEAF_NODE	22:16	22:16	8	,
ARGUMENT	22:18	22:18	8	FALSE
FIELD	22:18	22:18	9	FALSE
LEAF_NODE	22:18	22:18	10	FALSE
LEAF_NODE	22:23	22:23	8	)
LEAF_NODE	22:24	22:24	4	;
EXPR_STATEMENT	23:1	23:52	3	purple_request_field_string_set_masked ( field , TRUE ) ;
EXPR	23:1	23:1	4	purple_request_field_string_set_masked ( field , TRUE )
FUNCTION_CALL	23:1	23:51	5	purple_request_field_string_set_masked ( field , TRUE )
CALLEE	23:1	23:1	6	purple_request_field_string_set_masked
LEAF_NODE	23:1	23:1	7	purple_request_field_string_set_masked
LEAF_NODE	23:39	23:39	6	(
ARGUMENT	23:40	23:40	6	field
FIELD	23:40	23:40	7	field
LEAF_NODE	23:40	23:40	8	field
LEAF_NODE	23:45	23:45	6	,
ARGUMENT	23:47	23:47	6	TRUE
FIELD	23:47	23:47	7	TRUE
LEAF_NODE	23:47	23:47	8	TRUE
LEAF_NODE	23:51	23:51	6	)
LEAF_NODE	23:52	23:52	4	;
SELECTION	24:1	25:2	3	
KEYWORD	24:1	24:1	4	if
LEAF_NODE	24:1	24:1	5	if
LEAF_NODE	24:4	24:4	4	(
CONDITION	24:5	24:5	4	! prpl_info || ! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
EXPR	24:5	24:5	5	! prpl_info || ! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
OR	24:5	24:19	6	! prpl_info || ! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
EXPR	24:5	24:5	7	! prpl_info
UNARY_EXPR	24:5	24:6	8	! prpl_info
UNARY_OPERATOR	24:5	24:5	9	!
LEAF_NODE	24:5	24:5	10	!
FIELD	24:6	24:6	9	prpl_info
LEAF_NODE	24:6	24:6	10	prpl_info
LEAF_NODE	24:16	24:16	7	||
EXPR	24:19	24:19	7	! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
UNARY_EXPR	24:19	24:69	8	! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
UNARY_OPERATOR	24:19	24:19	9	!
LEAF_NODE	24:19	24:19	10	!
LEAF_NODE	24:20	24:20	9	(
FIELD	24:21	24:32	9	prpl_info -> options
LEAF_NODE	24:21	24:21	10	prpl_info
LEAF_NODE	24:30	24:30	10	->
LEAF_NODE	24:32	24:32	10	options
LEAF_NODE	24:40	24:40	9	&
FIELD	24:42	24:42	9	OPT_PROTO_PASSWORD_OPTIONAL
LEAF_NODE	24:42	24:42	10	OPT_PROTO_PASSWORD_OPTIONAL
LEAF_NODE	24:69	24:69	9	)
LEAF_NODE	24:70	24:70	4	)
STATEMENTS	25:2	25:2	4	
EXPR_STATEMENT	25:2	25:48	5	purple_request_field_set_required ( field , TRUE ) ;
EXPR	25:2	25:2	6	purple_request_field_set_required ( field , TRUE )
FUNCTION_CALL	25:2	25:47	7	purple_request_field_set_required ( field , TRUE )
CALLEE	25:2	25:2	8	purple_request_field_set_required
LEAF_NODE	25:2	25:2	9	purple_request_field_set_required
LEAF_NODE	25:35	25:35	8	(
ARGUMENT	25:36	25:36	8	field
FIELD	25:36	25:36	9	field
LEAF_NODE	25:36	25:36	10	field
LEAF_NODE	25:41	25:41	8	,
ARGUMENT	25:43	25:43	8	TRUE
FIELD	25:43	25:43	9	TRUE
LEAF_NODE	25:43	25:43	10	TRUE
LEAF_NODE	25:47	25:47	8	)
LEAF_NODE	25:48	25:48	6	;
EXPR_STATEMENT	26:1	26:51	3	purple_request_field_group_add_field ( group , field ) ;
EXPR	26:1	26:1	4	purple_request_field_group_add_field ( group , field )
FUNCTION_CALL	26:1	26:50	5	purple_request_field_group_add_field ( group , field )
CALLEE	26:1	26:1	6	purple_request_field_group_add_field
LEAF_NODE	26:1	26:1	7	purple_request_field_group_add_field
LEAF_NODE	26:37	26:37	6	(
ARGUMENT	26:38	26:38	6	group
FIELD	26:38	26:38	7	group
LEAF_NODE	26:38	26:38	8	group
LEAF_NODE	26:43	26:43	6	,
ARGUMENT	26:45	26:45	6	field
FIELD	26:45	26:45	7	field
LEAF_NODE	26:45	26:45	8	field
LEAF_NODE	26:50	26:50	6	)
LEAF_NODE	26:51	26:51	4	;
EXPR_STATEMENT	27:1	29:24	3	field = purple_request_field_string_new ( "new_password_1" , _ ( "New password" ) , NULL , FALSE ) ;
EXPR	27:1	27:1	4	field = purple_request_field_string_new ( "new_password_1" , _ ( "New password" ) , NULL , FALSE )
ASSIGN	27:1	27:9	5	field = purple_request_field_string_new ( "new_password_1" , _ ( "New password" ) , NULL , FALSE )
LVAL	27:1	27:1	6	field
FIELD	27:1	27:1	7	field
LEAF_NODE	27:1	27:1	8	field
ASSIGN_OP	27:7	27:7	6	=
LEAF_NODE	27:7	27:7	7	=
RVAL	27:9	27:9	6	purple_request_field_string_new ( "new_password_1" , _ ( "New password" ) , NULL , FALSE )
FUNCTION_CALL	27:9	29:23	7	purple_request_field_string_new ( "new_password_1" , _ ( "New password" ) , NULL , FALSE )
CALLEE	27:9	27:9	8	purple_request_field_string_new
LEAF_NODE	27:9	27:9	9	purple_request_field_string_new
LEAF_NODE	27:40	27:40	8	(
ARGUMENT	27:41	27:41	8	"new_password_1"
FIELD	27:41	27:41	9	"new_password_1"
LEAF_NODE	27:41	27:41	10	"new_password_1"
LEAF_NODE	27:57	27:57	8	,
ARGUMENT	28:12	28:12	8	_ ( "New password" )
FUNCTION_CALL	28:12	28:28	9	_ ( "New password" )
CALLEE	28:12	28:12	10	_
LEAF_NODE	28:12	28:12	11	_
LEAF_NODE	28:13	28:13	10	(
ARGUMENT	28:14	28:14	10	"New password"
FIELD	28:14	28:14	11	"New password"
LEAF_NODE	28:14	28:14	12	"New password"
LEAF_NODE	28:28	28:28	10	)
LEAF_NODE	28:29	28:29	8	,
ARGUMENT	29:12	29:12	8	NULL
FIELD	29:12	29:12	9	NULL
LEAF_NODE	29:12	29:12	10	NULL
LEAF_NODE	29:16	29:16	8	,
ARGUMENT	29:18	29:18	8	FALSE
FIELD	29:18	29:18	9	FALSE
LEAF_NODE	29:18	29:18	10	FALSE
LEAF_NODE	29:23	29:23	8	)
LEAF_NODE	29:24	29:24	4	;
EXPR_STATEMENT	30:1	30:52	3	purple_request_field_string_set_masked ( field , TRUE ) ;
EXPR	30:1	30:1	4	purple_request_field_string_set_masked ( field , TRUE )
FUNCTION_CALL	30:1	30:51	5	purple_request_field_string_set_masked ( field , TRUE )
CALLEE	30:1	30:1	6	purple_request_field_string_set_masked
LEAF_NODE	30:1	30:1	7	purple_request_field_string_set_masked
LEAF_NODE	30:39	30:39	6	(
ARGUMENT	30:40	30:40	6	field
FIELD	30:40	30:40	7	field
LEAF_NODE	30:40	30:40	8	field
LEAF_NODE	30:45	30:45	6	,
ARGUMENT	30:47	30:47	6	TRUE
FIELD	30:47	30:47	7	TRUE
LEAF_NODE	30:47	30:47	8	TRUE
LEAF_NODE	30:51	30:51	6	)
LEAF_NODE	30:52	30:52	4	;
SELECTION	31:1	32:2	3	
KEYWORD	31:1	31:1	4	if
LEAF_NODE	31:1	31:1	5	if
LEAF_NODE	31:4	31:4	4	(
CONDITION	31:5	31:5	4	! prpl_info || ! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
EXPR	31:5	31:5	5	! prpl_info || ! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
OR	31:5	31:19	6	! prpl_info || ! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
EXPR	31:5	31:5	7	! prpl_info
UNARY_EXPR	31:5	31:6	8	! prpl_info
UNARY_OPERATOR	31:5	31:5	9	!
LEAF_NODE	31:5	31:5	10	!
FIELD	31:6	31:6	9	prpl_info
LEAF_NODE	31:6	31:6	10	prpl_info
LEAF_NODE	31:16	31:16	7	||
EXPR	31:19	31:19	7	! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
UNARY_EXPR	31:19	31:69	8	! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
UNARY_OPERATOR	31:19	31:19	9	!
LEAF_NODE	31:19	31:19	10	!
LEAF_NODE	31:20	31:20	9	(
FIELD	31:21	31:32	9	prpl_info -> options
LEAF_NODE	31:21	31:21	10	prpl_info
LEAF_NODE	31:30	31:30	10	->
LEAF_NODE	31:32	31:32	10	options
LEAF_NODE	31:40	31:40	9	&
FIELD	31:42	31:42	9	OPT_PROTO_PASSWORD_OPTIONAL
LEAF_NODE	31:42	31:42	10	OPT_PROTO_PASSWORD_OPTIONAL
LEAF_NODE	31:69	31:69	9	)
LEAF_NODE	31:70	31:70	4	)
STATEMENTS	32:2	32:2	4	
EXPR_STATEMENT	32:2	32:48	5	purple_request_field_set_required ( field , TRUE ) ;
EXPR	32:2	32:2	6	purple_request_field_set_required ( field , TRUE )
FUNCTION_CALL	32:2	32:47	7	purple_request_field_set_required ( field , TRUE )
CALLEE	32:2	32:2	8	purple_request_field_set_required
LEAF_NODE	32:2	32:2	9	purple_request_field_set_required
LEAF_NODE	32:35	32:35	8	(
ARGUMENT	32:36	32:36	8	field
FIELD	32:36	32:36	9	field
LEAF_NODE	32:36	32:36	10	field
LEAF_NODE	32:41	32:41	8	,
ARGUMENT	32:43	32:43	8	TRUE
FIELD	32:43	32:43	9	TRUE
LEAF_NODE	32:43	32:43	10	TRUE
LEAF_NODE	32:47	32:47	8	)
LEAF_NODE	32:48	32:48	6	;
EXPR_STATEMENT	33:1	33:51	3	purple_request_field_group_add_field ( group , field ) ;
EXPR	33:1	33:1	4	purple_request_field_group_add_field ( group , field )
FUNCTION_CALL	33:1	33:50	5	purple_request_field_group_add_field ( group , field )
CALLEE	33:1	33:1	6	purple_request_field_group_add_field
LEAF_NODE	33:1	33:1	7	purple_request_field_group_add_field
LEAF_NODE	33:37	33:37	6	(
ARGUMENT	33:38	33:38	6	group
FIELD	33:38	33:38	7	group
LEAF_NODE	33:38	33:38	8	group
LEAF_NODE	33:43	33:43	6	,
ARGUMENT	33:45	33:45	6	field
FIELD	33:45	33:45	7	field
LEAF_NODE	33:45	33:45	8	field
LEAF_NODE	33:50	33:50	6	)
LEAF_NODE	33:51	33:51	4	;
EXPR_STATEMENT	34:1	36:24	3	field = purple_request_field_string_new ( "new_password_2" , _ ( "New password (again)" ) , NULL , FALSE ) ;
EXPR	34:1	34:1	4	field = purple_request_field_string_new ( "new_password_2" , _ ( "New password (again)" ) , NULL , FALSE )
ASSIGN	34:1	34:9	5	field = purple_request_field_string_new ( "new_password_2" , _ ( "New password (again)" ) , NULL , FALSE )
LVAL	34:1	34:1	6	field
FIELD	34:1	34:1	7	field
LEAF_NODE	34:1	34:1	8	field
ASSIGN_OP	34:7	34:7	6	=
LEAF_NODE	34:7	34:7	7	=
RVAL	34:9	34:9	6	purple_request_field_string_new ( "new_password_2" , _ ( "New password (again)" ) , NULL , FALSE )
FUNCTION_CALL	34:9	36:23	7	purple_request_field_string_new ( "new_password_2" , _ ( "New password (again)" ) , NULL , FALSE )
CALLEE	34:9	34:9	8	purple_request_field_string_new
LEAF_NODE	34:9	34:9	9	purple_request_field_string_new
LEAF_NODE	34:40	34:40	8	(
ARGUMENT	34:41	34:41	8	"new_password_2"
FIELD	34:41	34:41	9	"new_password_2"
LEAF_NODE	34:41	34:41	10	"new_password_2"
LEAF_NODE	34:57	34:57	8	,
ARGUMENT	35:12	35:12	8	_ ( "New password (again)" )
FUNCTION_CALL	35:12	35:36	9	_ ( "New password (again)" )
CALLEE	35:12	35:12	10	_
LEAF_NODE	35:12	35:12	11	_
LEAF_NODE	35:13	35:13	10	(
ARGUMENT	35:14	35:14	10	"New password (again)"
FIELD	35:14	35:14	11	"New password (again)"
LEAF_NODE	35:14	35:14	12	"New password (again)"
LEAF_NODE	35:36	35:36	10	)
LEAF_NODE	35:37	35:37	8	,
ARGUMENT	36:12	36:12	8	NULL
FIELD	36:12	36:12	9	NULL
LEAF_NODE	36:12	36:12	10	NULL
LEAF_NODE	36:16	36:16	8	,
ARGUMENT	36:18	36:18	8	FALSE
FIELD	36:18	36:18	9	FALSE
LEAF_NODE	36:18	36:18	10	FALSE
LEAF_NODE	36:23	36:23	8	)
LEAF_NODE	36:24	36:24	4	;
EXPR_STATEMENT	37:1	37:52	3	purple_request_field_string_set_masked ( field , TRUE ) ;
EXPR	37:1	37:1	4	purple_request_field_string_set_masked ( field , TRUE )
FUNCTION_CALL	37:1	37:51	5	purple_request_field_string_set_masked ( field , TRUE )
CALLEE	37:1	37:1	6	purple_request_field_string_set_masked
LEAF_NODE	37:1	37:1	7	purple_request_field_string_set_masked
LEAF_NODE	37:39	37:39	6	(
ARGUMENT	37:40	37:40	6	field
FIELD	37:40	37:40	7	field
LEAF_NODE	37:40	37:40	8	field
LEAF_NODE	37:45	37:45	6	,
ARGUMENT	37:47	37:47	6	TRUE
FIELD	37:47	37:47	7	TRUE
LEAF_NODE	37:47	37:47	8	TRUE
LEAF_NODE	37:51	37:51	6	)
LEAF_NODE	37:52	37:52	4	;
SELECTION	38:1	39:2	3	
KEYWORD	38:1	38:1	4	if
LEAF_NODE	38:1	38:1	5	if
LEAF_NODE	38:4	38:4	4	(
CONDITION	38:5	38:5	4	! prpl_info || ! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
EXPR	38:5	38:5	5	! prpl_info || ! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
OR	38:5	38:19	6	! prpl_info || ! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
EXPR	38:5	38:5	7	! prpl_info
UNARY_EXPR	38:5	38:6	8	! prpl_info
UNARY_OPERATOR	38:5	38:5	9	!
LEAF_NODE	38:5	38:5	10	!
FIELD	38:6	38:6	9	prpl_info
LEAF_NODE	38:6	38:6	10	prpl_info
LEAF_NODE	38:16	38:16	7	||
EXPR	38:19	38:19	7	! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
UNARY_EXPR	38:19	38:69	8	! ( prpl_info -> options & OPT_PROTO_PASSWORD_OPTIONAL )
UNARY_OPERATOR	38:19	38:19	9	!
LEAF_NODE	38:19	38:19	10	!
LEAF_NODE	38:20	38:20	9	(
FIELD	38:21	38:32	9	prpl_info -> options
LEAF_NODE	38:21	38:21	10	prpl_info
LEAF_NODE	38:30	38:30	10	->
LEAF_NODE	38:32	38:32	10	options
LEAF_NODE	38:40	38:40	9	&
FIELD	38:42	38:42	9	OPT_PROTO_PASSWORD_OPTIONAL
LEAF_NODE	38:42	38:42	10	OPT_PROTO_PASSWORD_OPTIONAL
LEAF_NODE	38:69	38:69	9	)
LEAF_NODE	38:70	38:70	4	)
STATEMENTS	39:2	39:2	4	
EXPR_STATEMENT	39:2	39:48	5	purple_request_field_set_required ( field , TRUE ) ;
EXPR	39:2	39:2	6	purple_request_field_set_required ( field , TRUE )
FUNCTION_CALL	39:2	39:47	7	purple_request_field_set_required ( field , TRUE )
CALLEE	39:2	39:2	8	purple_request_field_set_required
LEAF_NODE	39:2	39:2	9	purple_request_field_set_required
LEAF_NODE	39:35	39:35	8	(
ARGUMENT	39:36	39:36	8	field
FIELD	39:36	39:36	9	field
LEAF_NODE	39:36	39:36	10	field
LEAF_NODE	39:41	39:41	8	,
ARGUMENT	39:43	39:43	8	TRUE
FIELD	39:43	39:43	9	TRUE
LEAF_NODE	39:43	39:43	10	TRUE
LEAF_NODE	39:47	39:47	8	)
LEAF_NODE	39:48	39:48	6	;
EXPR_STATEMENT	40:1	40:51	3	purple_request_field_group_add_field ( group , field ) ;
EXPR	40:1	40:1	4	purple_request_field_group_add_field ( group , field )
FUNCTION_CALL	40:1	40:50	5	purple_request_field_group_add_field ( group , field )
CALLEE	40:1	40:1	6	purple_request_field_group_add_field
LEAF_NODE	40:1	40:1	7	purple_request_field_group_add_field
LEAF_NODE	40:37	40:37	6	(
ARGUMENT	40:38	40:38	6	group
FIELD	40:38	40:38	7	group
LEAF_NODE	40:38	40:38	8	group
LEAF_NODE	40:43	40:43	6	,
ARGUMENT	40:45	40:45	6	field
FIELD	40:45	40:45	7	field
LEAF_NODE	40:45	40:45	8	field
LEAF_NODE	40:50	40:50	6	)
LEAF_NODE	40:51	40:51	4	;
EXPR_STATEMENT	41:1	42:43	3	g_snprintf ( primary , sizeof ( primary ) , _ ( "Change password for %s" ) , purple_account_get_username ( account ) ) ;
EXPR	41:1	41:1	4	g_snprintf ( primary , sizeof ( primary ) , _ ( "Change password for %s" ) , purple_account_get_username ( account ) )
FUNCTION_CALL	41:1	42:42	5	g_snprintf ( primary , sizeof ( primary ) , _ ( "Change password for %s" ) , purple_account_get_username ( account ) )
CALLEE	41:1	41:1	6	g_snprintf
LEAF_NODE	41:1	41:1	7	g_snprintf
LEAF_NODE	41:11	41:11	6	(
ARGUMENT	41:12	41:12	6	primary
FIELD	41:12	41:12	7	primary
LEAF_NODE	41:12	41:12	8	primary
LEAF_NODE	41:19	41:19	6	,
ARGUMENT	41:21	41:21	6	sizeof ( primary )
FUNCTION_CALL	41:21	41:35	7	sizeof ( primary )
CALLEE	41:21	41:21	8	sizeof
LEAF_NODE	41:21	41:21	9	sizeof
LEAF_NODE	41:27	41:27	8	(
ARGUMENT	41:28	41:28	8	primary
FIELD	41:28	41:28	9	primary
LEAF_NODE	41:28	41:28	10	primary
LEAF_NODE	41:35	41:35	8	)
LEAF_NODE	41:36	41:36	6	,
ARGUMENT	41:38	41:38	6	_ ( "Change password for %s" )
FUNCTION_CALL	41:38	41:64	7	_ ( "Change password for %s" )
CALLEE	41:38	41:38	8	_
LEAF_NODE	41:38	41:38	9	_
LEAF_NODE	41:39	41:39	8	(
ARGUMENT	41:40	41:40	8	"Change password for %s"
FIELD	41:40	41:40	9	"Change password for %s"
LEAF_NODE	41:40	41:40	10	"Change password for %s"
LEAF_NODE	41:64	41:64	8	)
LEAF_NODE	41:65	41:65	6	,
ARGUMENT	42:6	42:6	6	purple_account_get_username ( account )
FUNCTION_CALL	42:6	42:41	7	purple_account_get_username ( account )
CALLEE	42:6	42:6	8	purple_account_get_username
LEAF_NODE	42:6	42:6	9	purple_account_get_username
LEAF_NODE	42:33	42:33	8	(
ARGUMENT	42:34	42:34	8	account
FIELD	42:34	42:34	9	account
LEAF_NODE	42:34	42:34	10	account
LEAF_NODE	42:41	42:41	8	)
LEAF_NODE	42:42	42:42	6	)
LEAF_NODE	42:43	42:43	4	;
LEAF_NODE	44:1	44:1	3	purple_request_fields
LEAF_NODE	44:22	44:22	3	(
LEAF_NODE	44:23	44:23	3	purple_account_get_connection
LEAF_NODE	44:52	44:52	3	(
LEAF_NODE	44:53	44:53	3	account
LEAF_NODE	44:60	44:60	3	)
LEAF_NODE	44:61	44:61	3	,
LEAF_NODE	45:6	45:6	3	NULL
LEAF_NODE	45:10	45:10	3	,
LEAF_NODE	46:6	46:6	3	primary
LEAF_NODE	46:13	46:13	3	,
LEAF_NODE	47:6	47:6	3	_
LEAF_NODE	47:7	47:7	3	(
LEAF_NODE	47:8	47:8	3	"Please enter your current password and your "
LEAF_NODE	48:8	48:8	3	"new password."
LEAF_NODE	48:23	48:23	3	)
LEAF_NODE	48:24	48:24	3	,
LEAF_NODE	49:6	49:6	3	fields
LEAF_NODE	49:12	49:12	3	,
LEAF_NODE	50:6	50:6	3	_
LEAF_NODE	50:7	50:7	3	(
LEAF_NODE	50:8	50:8	3	"OK"
LEAF_NODE	50:12	50:12	3	)
LEAF_NODE	50:13	50:13	3	,
LEAF_NODE	50:15	50:15	3	G_CALLBACK
LEAF_NODE	50:25	50:25	3	(
LEAF_NODE	50:26	50:26	3	change_password_cb
LEAF_NODE	50:44	50:44	3	)
LEAF_NODE	50:45	50:45	3	,
LEAF_NODE	51:6	51:6	3	_
LEAF_NODE	51:7	51:7	3	(
LEAF_NODE	51:8	51:8	3	"Cancel"
LEAF_NODE	51:16	51:16	3	)
LEAF_NODE	51:17	51:17	3	,
LEAF_NODE	51:19	51:19	3	NULL
LEAF_NODE	51:23	51:23	3	,
LEAF_NODE	52:6	52:6	3	account
LEAF_NODE	52:13	52:13	3	,
LEAF_NODE	52:15	52:15	3	NULL
LEAF_NODE	52:19	52:19	3	,
LEAF_NODE	52:21	52:21	3	NULL
LEAF_NODE	52:25	52:25	3	,
LEAF_NODE	53:6	53:6	3	account
LEAF_NODE	53:13	53:13	3	)
LEAF_NODE	53:14	53:14	3	;
LEAF_NODE	54:0	54:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_value_set_uint
LEAF_NODE	2:0	2:0	3	purple_value_set_uint
PARAMETER_LIST	2:21	2:59	2	( PurpleValue * value , unsigned int data )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:35	3	PurpleValue * value
TYPE	2:22	2:34	4	PurpleValue *
TYPE_NAME	2:22	2:22	5	PurpleValue
LEAF_NODE	2:22	2:22	6	PurpleValue
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	value
LEAF_NODE	2:35	2:35	5	value
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:55	3	unsigned int data
TYPE	2:42	2:42	4	unsigned int
TYPE_NAME	2:42	2:51	5	unsigned int
LEAF_NODE	2:42	2:42	6	unsigned
LEAF_NODE	2:51	2:51	6	int
NAME	2:55	2:55	4	data
LEAF_NODE	2:55	2:55	5	data
LEAF_NODE	2:59	2:59	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:32	3	g_return_if_fail ( value != NULL ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( value != NULL )
FUNCTION_CALL	4:1	4:31	5	g_return_if_fail ( value != NULL )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:27	6	value != NULL
FIELD	4:18	4:18	7	value
LEAF_NODE	4:18	4:18	8	value
EQ_OPERATOR	4:24	4:24	7	!=
LEAF_NODE	4:24	4:24	8	!=
FIELD	4:27	4:27	7	NULL
LEAF_NODE	4:27	4:27	8	NULL
LEAF_NODE	4:31	4:31	6	)
LEAF_NODE	4:32	4:32	4	;
EXPR_STATEMENT	5:1	5:28	3	value -> data . int_data = data ;
EXPR	5:1	5:1	4	value -> data . int_data = data
ASSIGN	5:1	5:24	5	value -> data . int_data = data
LVAL	5:1	5:1	6	value -> data . int_data
FIELD	5:1	5:13	7	value -> data . int_data
LEAF_NODE	5:1	5:1	8	value
LEAF_NODE	5:6	5:6	8	->
LEAF_NODE	5:8	5:8	8	data
LEAF_NODE	5:12	5:12	8	.
LEAF_NODE	5:13	5:13	8	int_data
ASSIGN_OP	5:22	5:22	6	=
LEAF_NODE	5:22	5:22	7	=
RVAL	5:24	5:24	6	data
FIELD	5:24	5:24	7	data
LEAF_NODE	5:24	5:24	8	data
LEAF_NODE	5:28	5:28	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	39:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	record_stroke_segment
LEAF_NODE	2:0	2:0	3	record_stroke_segment
PARAMETER_LIST	2:22	2:40	2	( GtkWidget * widget )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:34	3	GtkWidget * widget
TYPE	2:23	2:33	4	GtkWidget *
TYPE_NAME	2:23	2:23	5	GtkWidget
LEAF_NODE	2:23	2:23	6	GtkWidget
POINTER	2:33	2:33	5	*
LEAF_NODE	2:33	2:33	6	*
NAME	2:34	2:34	4	widget
LEAF_NODE	2:34	2:34	5	widget
LEAF_NODE	2:40	2:40	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:2	30:2	2	
SIMPLE_DECL	4:2	4:11	3	gint x , gint y ;
INIT_DECL_LIST	4:2	4:2	4	gint x , gint y
VAR_DECL	4:2	4:7	5	gint x
TYPE	4:2	4:2	6	gint
TYPE_NAME	4:2	4:2	7	gint
LEAF_NODE	4:2	4:2	8	gint
NAME	4:7	4:7	6	x
LEAF_NODE	4:7	4:7	7	x
LEAF_NODE	4:8	4:8	5	,
VAR_DECL	4:2	4:10	5	gint y
TYPE	4:2	4:2	6	gint
TYPE_NAME	4:2	4:2	7	gint
LEAF_NODE	4:2	4:2	8	gint
NAME	4:10	4:10	6	y
LEAF_NODE	4:10	4:10	7	y
LEAF_NODE	4:11	4:11	4	;
SIMPLE_DECL	5:2	5:33	3	struct gstroke_metrics * metrics ;
VAR_DECL	5:2	5:26	4	struct gstroke_metrics * metrics
TYPE	5:2	5:25	5	struct gstroke_metrics *
TYPE_NAME	5:2	5:9	6	struct gstroke_metrics
LEAF_NODE	5:2	5:2	7	struct
LEAF_NODE	5:9	5:9	7	gstroke_metrics
POINTER	5:25	5:25	6	*
LEAF_NODE	5:25	5:25	7	*
NAME	5:26	5:26	5	metrics
LEAF_NODE	5:26	5:26	6	metrics
LEAF_NODE	5:33	5:33	4	;
EXPR_STATEMENT	6:2	6:36	3	g_return_if_fail ( widget != NULL ) ;
EXPR	6:2	6:2	4	g_return_if_fail ( widget != NULL )
FUNCTION_CALL	6:2	6:35	5	g_return_if_fail ( widget != NULL )
CALLEE	6:2	6:2	6	g_return_if_fail
LEAF_NODE	6:2	6:2	7	g_return_if_fail
LEAF_NODE	6:18	6:18	6	(
ARGUMENT	6:20	6:30	6	widget != NULL
FIELD	6:20	6:20	7	widget
LEAF_NODE	6:20	6:20	8	widget
EQ_OPERATOR	6:27	6:27	7	!=
LEAF_NODE	6:27	6:27	8	!=
FIELD	6:30	6:30	7	NULL
LEAF_NODE	6:30	6:30	8	NULL
LEAF_NODE	6:35	6:35	6	)
LEAF_NODE	6:36	6:36	4	;
EXPR_STATEMENT	7:2	7:41	3	gtk_widget_get_pointer ( widget , & x , & y ) ;
EXPR	7:2	7:2	4	gtk_widget_get_pointer ( widget , & x , & y )
FUNCTION_CALL	7:2	7:40	5	gtk_widget_get_pointer ( widget , & x , & y )
CALLEE	7:2	7:2	6	gtk_widget_get_pointer
LEAF_NODE	7:2	7:2	7	gtk_widget_get_pointer
LEAF_NODE	7:25	7:25	6	(
ARGUMENT	7:26	7:26	6	widget
FIELD	7:26	7:26	7	widget
LEAF_NODE	7:26	7:26	8	widget
LEAF_NODE	7:32	7:32	6	,
ARGUMENT	7:34	7:34	6	& x
UNARY_EXPR	7:34	7:35	7	& x
UNARY_OPERATOR	7:34	7:34	8	&
LEAF_NODE	7:34	7:34	9	&
FIELD	7:35	7:35	8	x
LEAF_NODE	7:35	7:35	9	x
LEAF_NODE	7:36	7:36	6	,
ARGUMENT	7:38	7:38	6	& y
UNARY_EXPR	7:38	7:39	7	& y
UNARY_OPERATOR	7:38	7:38	8	&
LEAF_NODE	7:38	7:38	9	&
FIELD	7:39	7:39	8	y
LEAF_NODE	7:39	7:39	9	y
LEAF_NODE	7:40	7:40	6	)
LEAF_NODE	7:41	7:41	4	;
SELECTION	8:2	9:4	3	
KEYWORD	8:2	8:2	4	if
LEAF_NODE	8:2	8:2	5	if
LEAF_NODE	8:5	8:5	4	(
CONDITION	8:6	8:6	4	last_mouse_position . invalid
EXPR	8:6	8:6	5	last_mouse_position . invalid
FIELD	8:6	8:26	6	last_mouse_position . invalid
LEAF_NODE	8:6	8:6	7	last_mouse_position
LEAF_NODE	8:25	8:25	7	.
LEAF_NODE	8:26	8:26	7	invalid
LEAF_NODE	8:33	8:33	4	)
STATEMENTS	9:4	9:4	4	
EXPR_STATEMENT	9:4	9:39	5	last_mouse_position . invalid = FALSE ;
EXPR	9:4	9:4	6	last_mouse_position . invalid = FALSE
ASSIGN	9:4	9:34	7	last_mouse_position . invalid = FALSE
LVAL	9:4	9:4	8	last_mouse_position . invalid
FIELD	9:4	9:24	9	last_mouse_position . invalid
LEAF_NODE	9:4	9:4	10	last_mouse_position
LEAF_NODE	9:23	9:23	10	.
LEAF_NODE	9:24	9:24	10	invalid
ASSIGN_OP	9:32	9:32	8	=
LEAF_NODE	9:32	9:32	9	=
RVAL	9:34	9:34	8	FALSE
FIELD	9:34	9:34	9	FALSE
LEAF_NODE	9:34	9:34	10	FALSE
LEAF_NODE	9:39	9:39	6	;
SELECTION	10:2	10:7	3	
KEYWORD	10:2	10:2	4	else
LEAF_NODE	10:2	10:2	5	else
STATEMENTS	10:7	10:7	4	
SELECTION	10:7	11:4	5	
KEYWORD	10:7	10:7	6	if
LEAF_NODE	10:7	10:7	7	if
LEAF_NODE	10:10	10:10	6	(
CONDITION	10:11	10:11	6	gstroke_draw_strokes ( )
EXPR	10:11	10:11	7	gstroke_draw_strokes ( )
FUNCTION_CALL	10:11	10:32	8	gstroke_draw_strokes ( )
CALLEE	10:11	10:11	9	gstroke_draw_strokes
LEAF_NODE	10:11	10:11	10	gstroke_draw_strokes
LEAF_NODE	10:31	10:31	9	(
LEAF_NODE	10:32	10:32	9	)
LEAF_NODE	10:33	10:33	6	)
STATEMENTS	11:4	29:4	6	
LEAF_NODE	11:4	11:4	7	{
STATEMENTS	13:6	22:6	7	
EXPR_STATEMENT	13:6	16:22	8	XDrawLine ( gstroke_disp , gstroke_window , gstroke_gc , last_mouse_position . last_point . x , last_mouse_position . last_point . y , x , y ) ;
EXPR	13:6	13:6	9	XDrawLine ( gstroke_disp , gstroke_window , gstroke_gc , last_mouse_position . last_point . x , last_mouse_position . last_point . y , x , y )
FUNCTION_CALL	13:6	16:21	10	XDrawLine ( gstroke_disp , gstroke_window , gstroke_gc , last_mouse_position . last_point . x , last_mouse_position . last_point . y , x , y )
CALLEE	13:6	13:6	11	XDrawLine
LEAF_NODE	13:6	13:6	12	XDrawLine
LEAF_NODE	13:16	13:16	11	(
ARGUMENT	13:17	13:17	11	gstroke_disp
FIELD	13:17	13:17	12	gstroke_disp
LEAF_NODE	13:17	13:17	13	gstroke_disp
LEAF_NODE	13:29	13:29	11	,
ARGUMENT	13:31	13:31	11	gstroke_window
FIELD	13:31	13:31	12	gstroke_window
LEAF_NODE	13:31	13:31	13	gstroke_window
LEAF_NODE	13:45	13:45	11	,
ARGUMENT	13:47	13:47	11	gstroke_gc
FIELD	13:47	13:47	12	gstroke_gc
LEAF_NODE	13:47	13:47	13	gstroke_gc
LEAF_NODE	13:57	13:57	11	,
ARGUMENT	14:17	14:17	11	last_mouse_position . last_point . x
FIELD	14:17	14:48	12	last_mouse_position . last_point . x
LEAF_NODE	14:17	14:17	13	last_mouse_position
LEAF_NODE	14:36	14:36	13	.
LEAF_NODE	14:37	14:37	13	last_point
LEAF_NODE	14:47	14:47	13	.
LEAF_NODE	14:48	14:48	13	x
LEAF_NODE	14:49	14:49	11	,
ARGUMENT	15:17	15:17	11	last_mouse_position . last_point . y
FIELD	15:17	15:48	12	last_mouse_position . last_point . y
LEAF_NODE	15:17	15:17	13	last_mouse_position
LEAF_NODE	15:36	15:36	13	.
LEAF_NODE	15:37	15:37	13	last_point
LEAF_NODE	15:47	15:47	13	.
LEAF_NODE	15:48	15:48	13	y
LEAF_NODE	15:49	15:49	11	,
ARGUMENT	16:17	16:17	11	x
FIELD	16:17	16:17	12	x
LEAF_NODE	16:17	16:17	13	x
LEAF_NODE	16:18	16:18	11	,
ARGUMENT	16:20	16:20	11	y
FIELD	16:20	16:20	12	y
LEAF_NODE	16:20	16:20	13	y
LEAF_NODE	16:21	16:21	11	)
LEAF_NODE	16:22	16:22	9	;
EXPR_STATEMENT	22:6	27:23	8	gdk_draw_line ( gtk_widget_get_window ( widget ) , widget -> style -> fg_gc [ GTK_STATE_NORMAL ] , last_mouse_position . last_point . x , last_mouse_position . last_point . y , x , y ) ;
EXPR	22:6	22:6	9	gdk_draw_line ( gtk_widget_get_window ( widget ) , widget -> style -> fg_gc [ GTK_STATE_NORMAL ] , last_mouse_position . last_point . x , last_mouse_position . last_point . y , x , y )
FUNCTION_CALL	22:6	27:22	10	gdk_draw_line ( gtk_widget_get_window ( widget ) , widget -> style -> fg_gc [ GTK_STATE_NORMAL ] , last_mouse_position . last_point . x , last_mouse_position . last_point . y , x , y )
CALLEE	22:6	22:6	11	gdk_draw_line
LEAF_NODE	22:6	22:6	12	gdk_draw_line
LEAF_NODE	22:20	22:20	11	(
ARGUMENT	22:21	22:21	11	gtk_widget_get_window ( widget )
FUNCTION_CALL	22:21	22:49	12	gtk_widget_get_window ( widget )
CALLEE	22:21	22:21	13	gtk_widget_get_window
LEAF_NODE	22:21	22:21	14	gtk_widget_get_window
LEAF_NODE	22:42	22:42	13	(
ARGUMENT	22:43	22:43	13	widget
FIELD	22:43	22:43	14	widget
LEAF_NODE	22:43	22:43	15	widget
LEAF_NODE	22:49	22:49	13	)
LEAF_NODE	22:50	22:50	11	,
ARGUMENT	23:21	23:21	11	widget -> style -> fg_gc [ GTK_STATE_NORMAL ]
FIELD	23:21	23:58	12	widget -> style -> fg_gc [ GTK_STATE_NORMAL ]
LEAF_NODE	23:21	23:21	13	widget
LEAF_NODE	23:27	23:27	13	->
LEAF_NODE	23:29	23:29	13	style
LEAF_NODE	23:34	23:34	13	->
LEAF_NODE	23:36	23:36	13	fg_gc
LEAF_NODE	23:41	23:41	13	[
EXPR	23:42	23:42	13	GTK_STATE_NORMAL
FIELD	23:42	23:42	14	GTK_STATE_NORMAL
LEAF_NODE	23:42	23:42	15	GTK_STATE_NORMAL
LEAF_NODE	23:58	23:58	13	]
LEAF_NODE	23:59	23:59	11	,
ARGUMENT	24:21	24:21	11	last_mouse_position . last_point . x
FIELD	24:21	24:52	12	last_mouse_position . last_point . x
LEAF_NODE	24:21	24:21	13	last_mouse_position
LEAF_NODE	24:40	24:40	13	.
LEAF_NODE	24:41	24:41	13	last_point
LEAF_NODE	24:51	24:51	13	.
LEAF_NODE	24:52	24:52	13	x
LEAF_NODE	24:53	24:53	11	,
ARGUMENT	25:21	25:21	11	last_mouse_position . last_point . y
FIELD	25:21	25:52	12	last_mouse_position . last_point . y
LEAF_NODE	25:21	25:21	13	last_mouse_position
LEAF_NODE	25:40	25:40	13	.
LEAF_NODE	25:41	25:41	13	last_point
LEAF_NODE	25:51	25:51	13	.
LEAF_NODE	25:52	25:52	13	y
LEAF_NODE	25:53	25:53	11	,
ARGUMENT	26:21	26:21	11	x
FIELD	26:21	26:21	12	x
LEAF_NODE	26:21	26:21	13	x
LEAF_NODE	26:22	26:22	11	,
ARGUMENT	27:21	27:21	11	y
FIELD	27:21	27:21	12	y
LEAF_NODE	27:21	27:21	13	y
LEAF_NODE	27:22	27:22	11	)
LEAF_NODE	27:23	27:23	9	;
LEAF_NODE	29:4	29:4	7	}
SELECTION	30:2	32:4	3	
KEYWORD	30:2	30:2	4	if
LEAF_NODE	30:2	30:2	5	if
LEAF_NODE	30:5	30:5	4	(
CONDITION	30:6	30:6	4	last_mouse_position . last_point . x != x || last_mouse_position . last_point . y != y
EXPR	30:6	30:6	5	last_mouse_position . last_point . x != x || last_mouse_position . last_point . y != y
OR	30:6	31:9	6	last_mouse_position . last_point . x != x || last_mouse_position . last_point . y != y
EXPR	30:6	30:42	7	last_mouse_position . last_point . x != x
FIELD	30:6	30:37	8	last_mouse_position . last_point . x
LEAF_NODE	30:6	30:6	9	last_mouse_position
LEAF_NODE	30:25	30:25	9	.
LEAF_NODE	30:26	30:26	9	last_point
LEAF_NODE	30:36	30:36	9	.
LEAF_NODE	30:37	30:37	9	x
EQ_OPERATOR	30:39	30:39	8	!=
LEAF_NODE	30:39	30:39	9	!=
FIELD	30:42	30:42	8	x
LEAF_NODE	30:42	30:42	9	x
LEAF_NODE	31:6	31:6	7	||
EXPR	31:9	31:45	7	last_mouse_position . last_point . y != y
FIELD	31:9	31:40	8	last_mouse_position . last_point . y
LEAF_NODE	31:9	31:9	9	last_mouse_position
LEAF_NODE	31:28	31:28	9	.
LEAF_NODE	31:29	31:29	9	last_point
LEAF_NODE	31:39	31:39	9	.
LEAF_NODE	31:40	31:40	9	y
EQ_OPERATOR	31:42	31:42	8	!=
LEAF_NODE	31:42	31:42	9	!=
FIELD	31:45	31:45	8	y
LEAF_NODE	31:45	31:45	9	y
LEAF_NODE	31:46	31:46	4	)
STATEMENTS	32:4	38:4	4	
LEAF_NODE	32:4	32:4	5	{
STATEMENTS	33:6	37:6	5	
EXPR_STATEMENT	33:6	33:42	6	last_mouse_position . last_point . x = x ;
EXPR	33:6	33:6	7	last_mouse_position . last_point . x = x
ASSIGN	33:6	33:41	8	last_mouse_position . last_point . x = x
LVAL	33:6	33:6	9	last_mouse_position . last_point . x
FIELD	33:6	33:37	10	last_mouse_position . last_point . x
LEAF_NODE	33:6	33:6	11	last_mouse_position
LEAF_NODE	33:25	33:25	11	.
LEAF_NODE	33:26	33:26	11	last_point
LEAF_NODE	33:36	33:36	11	.
LEAF_NODE	33:37	33:37	11	x
ASSIGN_OP	33:39	33:39	9	=
LEAF_NODE	33:39	33:39	10	=
RVAL	33:41	33:41	9	x
FIELD	33:41	33:41	10	x
LEAF_NODE	33:41	33:41	11	x
LEAF_NODE	33:42	33:42	7	;
EXPR_STATEMENT	34:6	34:42	6	last_mouse_position . last_point . y = y ;
EXPR	34:6	34:6	7	last_mouse_position . last_point . y = y
ASSIGN	34:6	34:41	8	last_mouse_position . last_point . y = y
LVAL	34:6	34:6	9	last_mouse_position . last_point . y
FIELD	34:6	34:37	10	last_mouse_position . last_point . y
LEAF_NODE	34:6	34:6	11	last_mouse_position
LEAF_NODE	34:25	34:25	11	.
LEAF_NODE	34:26	34:26	11	last_point
LEAF_NODE	34:36	34:36	11	.
LEAF_NODE	34:37	34:37	11	y
ASSIGN_OP	34:39	34:39	9	=
LEAF_NODE	34:39	34:39	10	=
RVAL	34:41	34:41	9	y
FIELD	34:41	34:41	10	y
LEAF_NODE	34:41	34:41	11	y
LEAF_NODE	34:42	34:42	7	;
EXPR_STATEMENT	35:6	36:31	6	metrics = ( struct gstroke_metrics * ) g_object_get_data ( G_OBJECT ( widget ) , GSTROKE_METRICS ) ;
EXPR	35:6	35:6	7	metrics = ( struct gstroke_metrics * ) g_object_get_data ( G_OBJECT ( widget ) , GSTROKE_METRICS )
ASSIGN	35:6	35:16	8	metrics = ( struct gstroke_metrics * ) g_object_get_data ( G_OBJECT ( widget ) , GSTROKE_METRICS )
LVAL	35:6	35:6	9	metrics
FIELD	35:6	35:6	10	metrics
LEAF_NODE	35:6	35:6	11	metrics
ASSIGN_OP	35:14	35:14	9	=
LEAF_NODE	35:14	35:14	10	=
RVAL	35:16	35:42	9	( struct gstroke_metrics * ) g_object_get_data ( G_OBJECT ( widget ) , GSTROKE_METRICS )
LEAF_NODE	35:16	35:16	10	(
TYPE_NAME	35:17	35:24	10	struct gstroke_metrics
LEAF_NODE	35:17	35:17	11	struct
LEAF_NODE	35:24	35:24	11	gstroke_metrics
LEAF_NODE	35:40	35:40	10	*
LEAF_NODE	35:41	35:41	10	)
FUNCTION_CALL	35:42	36:30	10	g_object_get_data ( G_OBJECT ( widget ) , GSTROKE_METRICS )
CALLEE	35:42	35:42	11	g_object_get_data
LEAF_NODE	35:42	35:42	12	g_object_get_data
LEAF_NODE	35:59	35:59	11	(
ARGUMENT	35:60	35:60	11	G_OBJECT ( widget )
FUNCTION_CALL	35:60	35:75	12	G_OBJECT ( widget )
CALLEE	35:60	35:60	13	G_OBJECT
LEAF_NODE	35:60	35:60	14	G_OBJECT
LEAF_NODE	35:68	35:68	13	(
ARGUMENT	35:69	35:69	13	widget
FIELD	35:69	35:69	14	widget
LEAF_NODE	35:69	35:69	15	widget
LEAF_NODE	35:75	35:75	13	)
LEAF_NODE	35:76	35:76	11	,
ARGUMENT	36:15	36:15	11	GSTROKE_METRICS
FIELD	36:15	36:15	12	GSTROKE_METRICS
LEAF_NODE	36:15	36:15	13	GSTROKE_METRICS
LEAF_NODE	36:30	36:30	11	)
LEAF_NODE	36:31	36:31	7	;
EXPR_STATEMENT	37:6	37:37	6	_gstroke_record ( x , y , metrics ) ;
EXPR	37:6	37:6	7	_gstroke_record ( x , y , metrics )
FUNCTION_CALL	37:6	37:36	8	_gstroke_record ( x , y , metrics )
CALLEE	37:6	37:6	9	_gstroke_record
LEAF_NODE	37:6	37:6	10	_gstroke_record
LEAF_NODE	37:22	37:22	9	(
ARGUMENT	37:23	37:23	9	x
FIELD	37:23	37:23	10	x
LEAF_NODE	37:23	37:23	11	x
LEAF_NODE	37:24	37:24	9	,
ARGUMENT	37:26	37:26	9	y
FIELD	37:26	37:26	10	y
LEAF_NODE	37:26	37:26	11	y
LEAF_NODE	37:27	37:27	9	,
ARGUMENT	37:29	37:29	9	metrics
FIELD	37:29	37:29	10	metrics
LEAF_NODE	37:29	37:29	11	metrics
LEAF_NODE	37:36	37:36	9	)
LEAF_NODE	37:37	37:37	7	;
LEAF_NODE	38:4	38:4	5	}
LEAF_NODE	39:0	39:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	free_text_segment
LEAF_NODE	2:0	2:0	3	free_text_segment
PARAMETER_LIST	2:17	2:46	2	( gpointer data , gpointer null )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:27	3	gpointer data
TYPE	2:18	2:18	4	gpointer
TYPE_NAME	2:18	2:18	5	gpointer
LEAF_NODE	2:18	2:18	6	gpointer
NAME	2:27	2:27	4	data
LEAF_NODE	2:27	2:27	5	data
LEAF_NODE	2:31	2:31	3	,
PARAMETER_DECL	2:33	2:42	3	gpointer null
TYPE	2:33	2:33	4	gpointer
TYPE_NAME	2:33	2:33	5	gpointer
LEAF_NODE	2:33	2:33	6	gpointer
NAME	2:42	2:42	4	null
LEAF_NODE	2:42	2:42	5	null
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:27	3	GntTextSegment * seg ; seg = data ;
VAR_DECL	4:1	4:17	4	GntTextSegment * seg ; seg = data
TYPE	4:1	4:16	5	GntTextSegment *
TYPE_NAME	4:1	4:1	6	GntTextSegment
LEAF_NODE	4:1	4:1	7	GntTextSegment
POINTER	4:16	4:16	6	*
LEAF_NODE	4:16	4:16	7	*
NAME	4:17	4:17	5	seg
LEAF_NODE	4:17	4:17	6	seg
LEAF_NODE	0:0	0:0	5	;
INIT	4:17	4:17	5	seg = data
ASSIGN	4:17	4:23	6	seg = data
LVAL	4:17	4:17	7	seg
NAME	4:17	4:17	8	seg
LEAF_NODE	4:17	4:17	9	seg
ASSIGN_OP	4:21	4:21	7	=
LEAF_NODE	4:21	4:21	8	=
RVAL	4:23	4:23	7	data
FIELD	4:23	4:23	8	data
LEAF_NODE	4:23	4:23	9	data
LEAF_NODE	4:27	4:27	4	;
EXPR_STATEMENT	5:1	5:12	3	g_free ( seg ) ;
EXPR	5:1	5:1	4	g_free ( seg )
FUNCTION_CALL	5:1	5:11	5	g_free ( seg )
CALLEE	5:1	5:1	6	g_free
LEAF_NODE	5:1	5:1	7	g_free
LEAF_NODE	5:7	5:7	6	(
ARGUMENT	5:8	5:8	6	seg
FIELD	5:8	5:8	7	seg
LEAF_NODE	5:8	5:8	8	seg
LEAF_NODE	5:11	5:11	6	)
LEAF_NODE	5:12	5:12	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:0	2	time_t
TYPE_NAME	1:0	1:0	3	time_t
LEAF_NODE	1:0	1:0	4	time_t
FUNCTION_NAME	2:0	2:0	2	purple_savedstatus_get_creation_time
LEAF_NODE	2:0	2:0	3	purple_savedstatus_get_creation_time
PARAMETER_LIST	2:36	2:74	2	( const PurpleSavedStatus * saved_status )
LEAF_NODE	2:36	2:36	3	(
PARAMETER_DECL	2:37	2:62	3	const PurpleSavedStatus * saved_status
TYPE	2:37	2:61	4	const PurpleSavedStatus *
TYPE_NAME	2:37	2:43	5	const PurpleSavedStatus
LEAF_NODE	2:37	2:37	6	const
LEAF_NODE	2:43	2:43	6	PurpleSavedStatus
POINTER	2:61	2:61	5	*
LEAF_NODE	2:61	2:61	6	*
NAME	2:62	2:62	4	saved_status
LEAF_NODE	2:62	2:62	5	saved_status
LEAF_NODE	2:74	2:74	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:46	3	g_return_val_if_fail ( saved_status != NULL , 0 ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( saved_status != NULL , 0 )
FUNCTION_CALL	4:1	4:45	5	g_return_val_if_fail ( saved_status != NULL , 0 )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:38	6	saved_status != NULL
FIELD	4:22	4:22	7	saved_status
LEAF_NODE	4:22	4:22	8	saved_status
EQ_OPERATOR	4:35	4:35	7	!=
LEAF_NODE	4:35	4:35	8	!=
FIELD	4:38	4:38	7	NULL
LEAF_NODE	4:38	4:38	8	NULL
LEAF_NODE	4:42	4:42	6	,
ARGUMENT	4:44	4:44	6	0
FIELD	4:44	4:44	7	0
LEAF_NODE	4:44	4:44	8	0
LEAF_NODE	4:45	4:45	6	)
LEAF_NODE	4:46	4:46	4	;
JUMP_STATEMENT	5:1	5:35	3	return saved_status -> creation_time ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	saved_status -> creation_time
EXPR	5:8	5:8	5	saved_status -> creation_time
FIELD	5:8	5:22	6	saved_status -> creation_time
LEAF_NODE	5:8	5:8	7	saved_status
LEAF_NODE	5:20	5:20	7	->
LEAF_NODE	5:22	5:22	7	creation_time
LEAF_NODE	5:35	5:35	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	9:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	aim_ssi_reqrights
LEAF_NODE	2:4	2:4	3	aim_ssi_reqrights
PARAMETER_LIST	2:21	2:35	2	( OscarData * od )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:33	3	OscarData * od
TYPE	2:22	2:32	4	OscarData *
TYPE_NAME	2:22	2:22	5	OscarData
LEAF_NODE	2:22	2:22	6	OscarData
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	od
LEAF_NODE	2:33	2:33	5	od
LEAF_NODE	2:35	2:35	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SIMPLE_DECL	4:1	4:21	3	FlapConnection * conn ;
VAR_DECL	4:1	4:17	4	FlapConnection * conn
TYPE	4:1	4:16	5	FlapConnection *
TYPE_NAME	4:1	4:1	6	FlapConnection
LEAF_NODE	4:1	4:1	7	FlapConnection
POINTER	4:16	4:16	6	*
LEAF_NODE	4:16	4:16	7	*
NAME	4:17	4:17	5	conn
LEAF_NODE	4:17	4:17	6	conn
LEAF_NODE	4:21	4:21	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	! od || ! ( conn = flap_connection_findbygroup ( od , SNAC_FAMILY_FEEDBAG ) )
EXPR	5:5	5:5	5	! od || ! ( conn = flap_connection_findbygroup ( od , SNAC_FAMILY_FEEDBAG ) )
OR	5:5	5:12	6	! od || ! ( conn = flap_connection_findbygroup ( od , SNAC_FAMILY_FEEDBAG ) )
EXPR	5:5	5:5	7	! od
UNARY_EXPR	5:5	5:6	8	! od
UNARY_OPERATOR	5:5	5:5	9	!
LEAF_NODE	5:5	5:5	10	!
FIELD	5:6	5:6	9	od
LEAF_NODE	5:6	5:6	10	od
LEAF_NODE	5:9	5:9	7	||
EXPR	5:12	5:12	7	! ( conn = flap_connection_findbygroup ( od , SNAC_FAMILY_FEEDBAG ) )
UNARY_EXPR	5:12	5:73	8	! ( conn = flap_connection_findbygroup ( od , SNAC_FAMILY_FEEDBAG ) )
UNARY_OPERATOR	5:12	5:12	9	!
LEAF_NODE	5:12	5:12	10	!
LEAF_NODE	5:13	5:13	9	(
ASSIGN	5:14	5:21	9	conn = flap_connection_findbygroup ( od , SNAC_FAMILY_FEEDBAG )
LVAL	5:14	5:14	10	conn
FIELD	5:14	5:14	11	conn
LEAF_NODE	5:14	5:14	12	conn
ASSIGN_OP	5:19	5:19	10	=
LEAF_NODE	5:19	5:19	11	=
RVAL	5:21	5:21	10	flap_connection_findbygroup ( od , SNAC_FAMILY_FEEDBAG )
FUNCTION_CALL	5:21	5:72	11	flap_connection_findbygroup ( od , SNAC_FAMILY_FEEDBAG )
CALLEE	5:21	5:21	12	flap_connection_findbygroup
LEAF_NODE	5:21	5:21	13	flap_connection_findbygroup
LEAF_NODE	5:48	5:48	12	(
ARGUMENT	5:49	5:49	12	od
FIELD	5:49	5:49	13	od
LEAF_NODE	5:49	5:49	14	od
LEAF_NODE	5:51	5:51	12	,
ARGUMENT	5:53	5:53	12	SNAC_FAMILY_FEEDBAG
FIELD	5:53	5:53	13	SNAC_FAMILY_FEEDBAG
LEAF_NODE	5:53	5:53	14	SNAC_FAMILY_FEEDBAG
LEAF_NODE	5:72	5:72	12	)
LEAF_NODE	5:73	5:73	9	)
LEAF_NODE	5:74	5:74	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:16	5	return - EINVAL ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
DESTINATION	6:9	6:9	6	- EINVAL
EXPR	6:9	6:9	7	- EINVAL
UNARY_EXPR	6:9	6:10	8	- EINVAL
UNARY_OPERATOR	6:9	6:9	9	-
LEAF_NODE	6:9	6:9	10	-
FIELD	6:10	6:10	9	EINVAL
LEAF_NODE	6:10	6:10	10	EINVAL
LEAF_NODE	6:16	6:16	6	;
EXPR_STATEMENT	7:1	7:87	3	aim_genericreq_n_snacid ( od , conn , SNAC_FAMILY_FEEDBAG , SNAC_SUBTYPE_FEEDBAG_REQRIGHTS ) ;
EXPR	7:1	7:1	4	aim_genericreq_n_snacid ( od , conn , SNAC_FAMILY_FEEDBAG , SNAC_SUBTYPE_FEEDBAG_REQRIGHTS )
FUNCTION_CALL	7:1	7:86	5	aim_genericreq_n_snacid ( od , conn , SNAC_FAMILY_FEEDBAG , SNAC_SUBTYPE_FEEDBAG_REQRIGHTS )
CALLEE	7:1	7:1	6	aim_genericreq_n_snacid
LEAF_NODE	7:1	7:1	7	aim_genericreq_n_snacid
LEAF_NODE	7:24	7:24	6	(
ARGUMENT	7:25	7:25	6	od
FIELD	7:25	7:25	7	od
LEAF_NODE	7:25	7:25	8	od
LEAF_NODE	7:27	7:27	6	,
ARGUMENT	7:29	7:29	6	conn
FIELD	7:29	7:29	7	conn
LEAF_NODE	7:29	7:29	8	conn
LEAF_NODE	7:33	7:33	6	,
ARGUMENT	7:35	7:35	6	SNAC_FAMILY_FEEDBAG
FIELD	7:35	7:35	7	SNAC_FAMILY_FEEDBAG
LEAF_NODE	7:35	7:35	8	SNAC_FAMILY_FEEDBAG
LEAF_NODE	7:54	7:54	6	,
ARGUMENT	7:56	7:56	6	SNAC_SUBTYPE_FEEDBAG_REQRIGHTS
FIELD	7:56	7:56	7	SNAC_SUBTYPE_FEEDBAG_REQRIGHTS
LEAF_NODE	7:56	7:56	8	SNAC_SUBTYPE_FEEDBAG_REQRIGHTS
LEAF_NODE	7:86	7:86	6	)
LEAF_NODE	7:87	7:87	4	;
JUMP_STATEMENT	8:1	8:9	3	return 0 ;
KEYWORD	8:1	8:1	4	return
LEAF_NODE	8:1	8:1	5	return
DESTINATION	8:8	8:8	4	0
EXPR	8:8	8:8	5	0
FIELD	8:8	8:8	6	0
LEAF_NODE	8:8	8:8	7	0
LEAF_NODE	8:9	8:9	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	20:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	message_send_cb
LEAF_NODE	2:12	2:12	3	message_send_cb
PARAMETER_LIST	2:27	2:57	2	( GtkWidget * widget , gpointer p )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:39	3	GtkWidget * widget
TYPE	2:28	2:38	4	GtkWidget *
TYPE_NAME	2:28	2:28	5	GtkWidget
LEAF_NODE	2:28	2:28	6	GtkWidget
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	widget
LEAF_NODE	2:39	2:39	5	widget
LEAF_NODE	2:45	2:45	3	,
PARAMETER_DECL	2:47	2:56	3	gpointer p
TYPE	2:47	2:47	4	gpointer
TYPE_NAME	2:47	2:47	5	gpointer
LEAF_NODE	2:47	2:47	6	gpointer
NAME	2:56	2:56	4	p
LEAF_NODE	2:56	2:56	5	p
LEAF_NODE	2:57	2:57	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	19:1	2	
SIMPLE_DECL	4:1	4:23	3	GtkTextIter start , GtkTextIter end ;
INIT_DECL_LIST	4:1	4:1	4	GtkTextIter start , GtkTextIter end
VAR_DECL	4:1	4:13	5	GtkTextIter start
TYPE	4:1	4:1	6	GtkTextIter
TYPE_NAME	4:1	4:1	7	GtkTextIter
LEAF_NODE	4:1	4:1	8	GtkTextIter
NAME	4:13	4:13	6	start
LEAF_NODE	4:13	4:13	7	start
LEAF_NODE	4:18	4:18	5	,
VAR_DECL	4:1	4:20	5	GtkTextIter end
TYPE	4:1	4:1	6	GtkTextIter
TYPE_NAME	4:1	4:1	7	GtkTextIter
LEAF_NODE	4:1	4:1	8	GtkTextIter
NAME	4:20	4:20	6	end
LEAF_NODE	4:20	4:20	7	end
LEAF_NODE	4:23	4:23	4	;
SIMPLE_DECL	5:1	5:43	3	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL ;
VAR_DECL	5:1	5:27	4	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL
TYPE	5:1	5:26	5	PurplePluginProtocolInfo *
TYPE_NAME	5:1	5:1	6	PurplePluginProtocolInfo
LEAF_NODE	5:1	5:1	7	PurplePluginProtocolInfo
POINTER	5:26	5:26	6	*
LEAF_NODE	5:26	5:26	7	*
NAME	5:27	5:27	5	prpl_info
LEAF_NODE	5:27	5:27	6	prpl_info
LEAF_NODE	0:0	0:0	5	;
INIT	5:27	5:27	5	prpl_info = NULL
ASSIGN	5:27	5:39	6	prpl_info = NULL
LVAL	5:27	5:27	7	prpl_info
NAME	5:27	5:27	8	prpl_info
LEAF_NODE	5:27	5:27	9	prpl_info
ASSIGN_OP	5:37	5:37	7	=
LEAF_NODE	5:37	5:37	8	=
RVAL	5:39	5:39	7	NULL
FIELD	5:39	5:39	8	NULL
LEAF_NODE	5:39	5:39	9	NULL
LEAF_NODE	5:43	5:43	4	;
SIMPLE_DECL	6:1	6:21	3	PurpleConnection * gc ;
VAR_DECL	6:1	6:19	4	PurpleConnection * gc
TYPE	6:1	6:18	5	PurpleConnection *
TYPE_NAME	6:1	6:1	6	PurpleConnection
LEAF_NODE	6:1	6:1	7	PurpleConnection
POINTER	6:18	6:18	6	*
LEAF_NODE	6:18	6:18	7	*
NAME	6:19	6:19	5	gc
LEAF_NODE	6:19	6:19	6	gc
LEAF_NODE	6:21	6:21	4	;
SIMPLE_DECL	7:1	7:22	3	GtkTextBuffer * buffer ;
VAR_DECL	7:1	7:16	4	GtkTextBuffer * buffer
TYPE	7:1	7:15	5	GtkTextBuffer *
TYPE_NAME	7:1	7:1	6	GtkTextBuffer
LEAF_NODE	7:1	7:1	7	GtkTextBuffer
POINTER	7:15	7:15	6	*
LEAF_NODE	7:15	7:15	7	*
NAME	7:16	7:16	5	buffer
LEAF_NODE	7:16	7:16	6	buffer
LEAF_NODE	7:22	7:22	4	;
SIMPLE_DECL	8:1	8:11	3	char * text ;
VAR_DECL	8:1	8:7	4	char * text
TYPE	8:1	8:6	5	char *
TYPE_NAME	8:1	8:1	6	char
LEAF_NODE	8:1	8:1	7	char
POINTER	8:6	8:6	6	*
LEAF_NODE	8:6	8:6	7	*
NAME	8:7	8:7	5	text
LEAF_NODE	8:7	8:7	6	text
LEAF_NODE	8:11	8:11	4	;
EXPR_STATEMENT	9:1	9:17	3	gc = console -> gc ;
EXPR	9:1	9:1	4	gc = console -> gc
ASSIGN	9:1	9:6	5	gc = console -> gc
LVAL	9:1	9:1	6	gc
FIELD	9:1	9:1	7	gc
LEAF_NODE	9:1	9:1	8	gc
ASSIGN_OP	9:4	9:4	6	=
LEAF_NODE	9:4	9:4	7	=
RVAL	9:6	9:6	6	console -> gc
FIELD	9:6	9:15	7	console -> gc
LEAF_NODE	9:6	9:6	8	console
LEAF_NODE	9:13	9:13	8	->
LEAF_NODE	9:15	9:15	8	gc
LEAF_NODE	9:17	9:17	4	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	gc
EXPR	10:5	10:5	5	gc
FIELD	10:5	10:5	6	gc
LEAF_NODE	10:5	10:5	7	gc
LEAF_NODE	10:7	10:7	4	)
STATEMENTS	11:2	11:2	4	
EXPR_STATEMENT	11:2	11:51	5	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl ) ;
EXPR	11:2	11:2	6	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
ASSIGN	11:2	11:14	7	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
LVAL	11:2	11:2	8	prpl_info
FIELD	11:2	11:2	9	prpl_info
LEAF_NODE	11:2	11:2	10	prpl_info
ASSIGN_OP	11:12	11:12	8	=
LEAF_NODE	11:12	11:12	9	=
RVAL	11:14	11:14	8	PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
FUNCTION_CALL	11:14	11:50	9	PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
CALLEE	11:14	11:14	10	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	11:14	11:14	11	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	11:41	11:41	10	(
ARGUMENT	11:42	11:42	10	gc -> prpl
FIELD	11:42	11:46	11	gc -> prpl
LEAF_NODE	11:42	11:42	12	gc
LEAF_NODE	11:44	11:44	12	->
LEAF_NODE	11:46	11:46	12	prpl
LEAF_NODE	11:50	11:50	10	)
LEAF_NODE	11:51	11:51	6	;
EXPR_STATEMENT	12:1	12:65	3	buffer = gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( console -> entry ) ) ;
EXPR	12:1	12:1	4	buffer = gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( console -> entry ) )
ASSIGN	12:1	12:10	5	buffer = gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( console -> entry ) )
LVAL	12:1	12:1	6	buffer
FIELD	12:1	12:1	7	buffer
LEAF_NODE	12:1	12:1	8	buffer
ASSIGN_OP	12:8	12:8	6	=
LEAF_NODE	12:8	12:8	7	=
RVAL	12:10	12:10	6	gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( console -> entry ) )
FUNCTION_CALL	12:10	12:64	7	gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( console -> entry ) )
CALLEE	12:10	12:10	8	gtk_text_view_get_buffer
LEAF_NODE	12:10	12:10	9	gtk_text_view_get_buffer
LEAF_NODE	12:34	12:34	8	(
ARGUMENT	12:35	12:35	8	GTK_TEXT_VIEW ( console -> entry )
FUNCTION_CALL	12:35	12:63	9	GTK_TEXT_VIEW ( console -> entry )
CALLEE	12:35	12:35	10	GTK_TEXT_VIEW
LEAF_NODE	12:35	12:35	11	GTK_TEXT_VIEW
LEAF_NODE	12:48	12:48	10	(
ARGUMENT	12:49	12:49	10	console -> entry
FIELD	12:49	12:58	11	console -> entry
LEAF_NODE	12:49	12:49	12	console
LEAF_NODE	12:56	12:56	12	->
LEAF_NODE	12:58	12:58	12	entry
LEAF_NODE	12:63	12:63	10	)
LEAF_NODE	12:64	12:64	8	)
LEAF_NODE	12:65	12:65	4	;
EXPR_STATEMENT	13:1	13:47	3	gtk_text_buffer_get_start_iter ( buffer , & start ) ;
EXPR	13:1	13:1	4	gtk_text_buffer_get_start_iter ( buffer , & start )
FUNCTION_CALL	13:1	13:46	5	gtk_text_buffer_get_start_iter ( buffer , & start )
CALLEE	13:1	13:1	6	gtk_text_buffer_get_start_iter
LEAF_NODE	13:1	13:1	7	gtk_text_buffer_get_start_iter
LEAF_NODE	13:31	13:31	6	(
ARGUMENT	13:32	13:32	6	buffer
FIELD	13:32	13:32	7	buffer
LEAF_NODE	13:32	13:32	8	buffer
LEAF_NODE	13:38	13:38	6	,
ARGUMENT	13:40	13:40	6	& start
UNARY_EXPR	13:40	13:41	7	& start
UNARY_OPERATOR	13:40	13:40	8	&
LEAF_NODE	13:40	13:40	9	&
FIELD	13:41	13:41	8	start
LEAF_NODE	13:41	13:41	9	start
LEAF_NODE	13:46	13:46	6	)
LEAF_NODE	13:47	13:47	4	;
EXPR_STATEMENT	14:1	14:43	3	gtk_text_buffer_get_end_iter ( buffer , & end ) ;
EXPR	14:1	14:1	4	gtk_text_buffer_get_end_iter ( buffer , & end )
FUNCTION_CALL	14:1	14:42	5	gtk_text_buffer_get_end_iter ( buffer , & end )
CALLEE	14:1	14:1	6	gtk_text_buffer_get_end_iter
LEAF_NODE	14:1	14:1	7	gtk_text_buffer_get_end_iter
LEAF_NODE	14:29	14:29	6	(
ARGUMENT	14:30	14:30	6	buffer
FIELD	14:30	14:30	7	buffer
LEAF_NODE	14:30	14:30	8	buffer
LEAF_NODE	14:36	14:36	6	,
ARGUMENT	14:38	14:38	6	& end
UNARY_EXPR	14:38	14:39	7	& end
UNARY_OPERATOR	14:38	14:38	8	&
LEAF_NODE	14:38	14:38	9	&
FIELD	14:39	14:39	8	end
LEAF_NODE	14:39	14:39	9	end
LEAF_NODE	14:42	14:42	6	)
LEAF_NODE	14:43	14:43	4	;
EXPR_STATEMENT	15:1	15:69	3	text = gtk_imhtml_get_text ( GTK_IMHTML ( console -> entry ) , & start , & end ) ;
EXPR	15:1	15:1	4	text = gtk_imhtml_get_text ( GTK_IMHTML ( console -> entry ) , & start , & end )
ASSIGN	15:1	15:8	5	text = gtk_imhtml_get_text ( GTK_IMHTML ( console -> entry ) , & start , & end )
LVAL	15:1	15:1	6	text
FIELD	15:1	15:1	7	text
LEAF_NODE	15:1	15:1	8	text
ASSIGN_OP	15:6	15:6	6	=
LEAF_NODE	15:6	15:6	7	=
RVAL	15:8	15:8	6	gtk_imhtml_get_text ( GTK_IMHTML ( console -> entry ) , & start , & end )
FUNCTION_CALL	15:8	15:68	7	gtk_imhtml_get_text ( GTK_IMHTML ( console -> entry ) , & start , & end )
CALLEE	15:8	15:8	8	gtk_imhtml_get_text
LEAF_NODE	15:8	15:8	9	gtk_imhtml_get_text
LEAF_NODE	15:27	15:27	8	(
ARGUMENT	15:28	15:28	8	GTK_IMHTML ( console -> entry )
FUNCTION_CALL	15:28	15:53	9	GTK_IMHTML ( console -> entry )
CALLEE	15:28	15:28	10	GTK_IMHTML
LEAF_NODE	15:28	15:28	11	GTK_IMHTML
LEAF_NODE	15:38	15:38	10	(
ARGUMENT	15:39	15:39	10	console -> entry
FIELD	15:39	15:48	11	console -> entry
LEAF_NODE	15:39	15:39	12	console
LEAF_NODE	15:46	15:46	12	->
LEAF_NODE	15:48	15:48	12	entry
LEAF_NODE	15:53	15:53	10	)
LEAF_NODE	15:54	15:54	8	,
ARGUMENT	15:56	15:56	8	& start
UNARY_EXPR	15:56	15:57	9	& start
UNARY_OPERATOR	15:56	15:56	10	&
LEAF_NODE	15:56	15:56	11	&
FIELD	15:57	15:57	10	start
LEAF_NODE	15:57	15:57	11	start
LEAF_NODE	15:62	15:62	8	,
ARGUMENT	15:64	15:64	8	& end
UNARY_EXPR	15:64	15:65	9	& end
UNARY_OPERATOR	15:64	15:64	10	&
LEAF_NODE	15:64	15:64	11	&
FIELD	15:65	15:65	10	end
LEAF_NODE	15:65	15:65	11	end
LEAF_NODE	15:68	15:68	8	)
LEAF_NODE	15:69	15:69	4	;
SELECTION	16:1	17:2	3	
KEYWORD	16:1	16:1	4	if
LEAF_NODE	16:1	16:1	5	if
LEAF_NODE	16:4	16:4	4	(
CONDITION	16:5	16:5	4	prpl_info && prpl_info -> send_raw != NULL
EXPR	16:5	16:5	5	prpl_info && prpl_info -> send_raw != NULL
AND	16:5	16:18	6	prpl_info && prpl_info -> send_raw != NULL
EXPR	16:5	16:5	7	prpl_info
FIELD	16:5	16:5	8	prpl_info
LEAF_NODE	16:5	16:5	9	prpl_info
LEAF_NODE	16:15	16:15	7	&&
EXPR	16:18	16:41	7	prpl_info -> send_raw != NULL
FIELD	16:18	16:29	8	prpl_info -> send_raw
LEAF_NODE	16:18	16:18	9	prpl_info
LEAF_NODE	16:27	16:27	9	->
LEAF_NODE	16:29	16:29	9	send_raw
EQ_OPERATOR	16:38	16:38	8	!=
LEAF_NODE	16:38	16:38	9	!=
FIELD	16:41	16:41	8	NULL
LEAF_NODE	16:41	16:41	9	NULL
LEAF_NODE	16:45	16:45	4	)
STATEMENTS	17:2	17:2	4	
EXPR_STATEMENT	17:2	17:45	5	prpl_info -> send_raw ( gc , text , strlen ( text ) ) ;
EXPR	17:2	17:2	6	prpl_info -> send_raw ( gc , text , strlen ( text ) )
FUNCTION_CALL	17:2	17:44	7	prpl_info -> send_raw ( gc , text , strlen ( text ) )
CALLEE	17:2	17:13	8	prpl_info -> send_raw
LEAF_NODE	17:2	17:2	9	prpl_info
LEAF_NODE	17:11	17:11	9	->
LEAF_NODE	17:13	17:13	9	send_raw
LEAF_NODE	17:21	17:21	8	(
ARGUMENT	17:22	17:22	8	gc
FIELD	17:22	17:22	9	gc
LEAF_NODE	17:22	17:22	10	gc
LEAF_NODE	17:24	17:24	8	,
ARGUMENT	17:26	17:26	8	text
FIELD	17:26	17:26	9	text
LEAF_NODE	17:26	17:26	10	text
LEAF_NODE	17:30	17:30	8	,
ARGUMENT	17:32	17:32	8	strlen ( text )
FUNCTION_CALL	17:32	17:43	9	strlen ( text )
CALLEE	17:32	17:32	10	strlen
LEAF_NODE	17:32	17:32	11	strlen
LEAF_NODE	17:38	17:38	10	(
ARGUMENT	17:39	17:39	10	text
FIELD	17:39	17:39	11	text
LEAF_NODE	17:39	17:39	12	text
LEAF_NODE	17:43	17:43	10	)
LEAF_NODE	17:44	17:44	8	)
LEAF_NODE	17:45	17:45	6	;
EXPR_STATEMENT	18:1	18:13	3	g_free ( text ) ;
EXPR	18:1	18:1	4	g_free ( text )
FUNCTION_CALL	18:1	18:12	5	g_free ( text )
CALLEE	18:1	18:1	6	g_free
LEAF_NODE	18:1	18:1	7	g_free
LEAF_NODE	18:7	18:7	6	(
ARGUMENT	18:8	18:8	6	text
FIELD	18:8	18:8	7	text
LEAF_NODE	18:8	18:8	8	text
LEAF_NODE	18:12	18:12	6	)
LEAF_NODE	18:13	18:13	4	;
EXPR_STATEMENT	19:1	19:45	3	gtk_imhtml_clear ( GTK_IMHTML ( console -> entry ) ) ;
EXPR	19:1	19:1	4	gtk_imhtml_clear ( GTK_IMHTML ( console -> entry ) )
FUNCTION_CALL	19:1	19:44	5	gtk_imhtml_clear ( GTK_IMHTML ( console -> entry ) )
CALLEE	19:1	19:1	6	gtk_imhtml_clear
LEAF_NODE	19:1	19:1	7	gtk_imhtml_clear
LEAF_NODE	19:17	19:17	6	(
ARGUMENT	19:18	19:18	6	GTK_IMHTML ( console -> entry )
FUNCTION_CALL	19:18	19:43	7	GTK_IMHTML ( console -> entry )
CALLEE	19:18	19:18	8	GTK_IMHTML
LEAF_NODE	19:18	19:18	9	GTK_IMHTML
LEAF_NODE	19:28	19:28	8	(
ARGUMENT	19:29	19:29	8	console -> entry
FIELD	19:29	19:38	9	console -> entry
LEAF_NODE	19:29	19:29	10	console
LEAF_NODE	19:36	19:36	10	->
LEAF_NODE	19:38	19:38	10	entry
LEAF_NODE	19:43	19:43	8	)
LEAF_NODE	19:44	19:44	6	)
LEAF_NODE	19:45	19:45	4	;
LEAF_NODE	20:0	20:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	12:0	1	
RETURN_TYPE	1:0	1:9	2	JabberIq *
TYPE_NAME	1:0	1:0	3	JabberIq
LEAF_NODE	1:0	1:0	4	JabberIq
LEAF_NODE	1:9	1:9	3	*
FUNCTION_NAME	2:0	2:0	2	jingle_session_create_ack
LEAF_NODE	2:0	2:0	3	jingle_session_create_ack
PARAMETER_LIST	2:25	2:71	2	( JingleSession * session , const xmlnode * jingle )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:41	3	JingleSession * session
TYPE	2:26	2:40	4	JingleSession *
TYPE_NAME	2:26	2:26	5	JingleSession
LEAF_NODE	2:26	2:26	6	JingleSession
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	session
LEAF_NODE	2:41	2:41	5	session
LEAF_NODE	2:48	2:48	3	,
PARAMETER_DECL	2:50	2:65	3	const xmlnode * jingle
TYPE	2:50	2:64	4	const xmlnode *
TYPE_NAME	2:50	2:56	5	const xmlnode
LEAF_NODE	2:50	2:50	6	const
LEAF_NODE	2:56	2:56	6	xmlnode
POINTER	2:64	2:64	5	*
LEAF_NODE	2:64	2:64	6	*
NAME	2:65	2:65	4	jingle
LEAF_NODE	2:65	2:65	5	jingle
LEAF_NODE	2:71	2:71	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	11:1	2	
SIMPLE_DECL	4:1	6:20	3	JabberIq * result ; result = jabber_iq_new ( jingle_session_get_js ( session ) , JABBER_IQ_RESULT ) ;
VAR_DECL	4:1	4:11	4	JabberIq * result ; result = jabber_iq_new ( jingle_session_get_js ( session ) , JABBER_IQ_RESULT )
TYPE	4:1	4:10	5	JabberIq *
TYPE_NAME	4:1	4:1	6	JabberIq
LEAF_NODE	4:1	4:1	7	JabberIq
POINTER	4:10	4:10	6	*
LEAF_NODE	4:10	4:10	7	*
NAME	4:11	4:11	5	result
LEAF_NODE	4:11	4:11	6	result
LEAF_NODE	0:0	0:0	5	;
INIT	4:11	4:11	5	result = jabber_iq_new ( jingle_session_get_js ( session ) , JABBER_IQ_RESULT )
ASSIGN	4:11	4:20	6	result = jabber_iq_new ( jingle_session_get_js ( session ) , JABBER_IQ_RESULT )
LVAL	4:11	4:11	7	result
NAME	4:11	4:11	8	result
LEAF_NODE	4:11	4:11	9	result
ASSIGN_OP	4:18	4:18	7	=
LEAF_NODE	4:18	4:18	8	=
RVAL	4:20	4:20	7	jabber_iq_new ( jingle_session_get_js ( session ) , JABBER_IQ_RESULT )
FUNCTION_CALL	4:20	6:19	8	jabber_iq_new ( jingle_session_get_js ( session ) , JABBER_IQ_RESULT )
CALLEE	4:20	4:20	9	jabber_iq_new
LEAF_NODE	4:20	4:20	10	jabber_iq_new
LEAF_NODE	4:33	4:33	9	(
ARGUMENT	5:3	5:3	9	jingle_session_get_js ( session )
FUNCTION_CALL	5:3	5:32	10	jingle_session_get_js ( session )
CALLEE	5:3	5:3	11	jingle_session_get_js
LEAF_NODE	5:3	5:3	12	jingle_session_get_js
LEAF_NODE	5:24	5:24	11	(
ARGUMENT	5:25	5:25	11	session
FIELD	5:25	5:25	12	session
LEAF_NODE	5:25	5:25	13	session
LEAF_NODE	5:32	5:32	11	)
LEAF_NODE	5:33	5:33	9	,
ARGUMENT	6:3	6:3	9	JABBER_IQ_RESULT
FIELD	6:3	6:3	10	JABBER_IQ_RESULT
LEAF_NODE	6:3	6:3	11	JABBER_IQ_RESULT
LEAF_NODE	6:19	6:19	9	)
LEAF_NODE	6:20	6:20	4	;
SIMPLE_DECL	7:1	7:45	3	xmlnode * packet ; packet = xmlnode_get_parent ( jingle ) ;
VAR_DECL	7:1	7:10	4	xmlnode * packet ; packet = xmlnode_get_parent ( jingle )
TYPE	7:1	7:9	5	xmlnode *
TYPE_NAME	7:1	7:1	6	xmlnode
LEAF_NODE	7:1	7:1	7	xmlnode
POINTER	7:9	7:9	6	*
LEAF_NODE	7:9	7:9	7	*
NAME	7:10	7:10	5	packet
LEAF_NODE	7:10	7:10	6	packet
LEAF_NODE	0:0	0:0	5	;
INIT	7:10	7:10	5	packet = xmlnode_get_parent ( jingle )
ASSIGN	7:10	7:19	6	packet = xmlnode_get_parent ( jingle )
LVAL	7:10	7:10	7	packet
NAME	7:10	7:10	8	packet
LEAF_NODE	7:10	7:10	9	packet
ASSIGN_OP	7:17	7:17	7	=
LEAF_NODE	7:17	7:17	8	=
RVAL	7:19	7:19	7	xmlnode_get_parent ( jingle )
FUNCTION_CALL	7:19	7:44	8	xmlnode_get_parent ( jingle )
CALLEE	7:19	7:19	9	xmlnode_get_parent
LEAF_NODE	7:19	7:19	10	xmlnode_get_parent
LEAF_NODE	7:37	7:37	9	(
ARGUMENT	7:38	7:38	9	jingle
FIELD	7:38	7:38	10	jingle
LEAF_NODE	7:38	7:38	11	jingle
LEAF_NODE	7:44	7:44	9	)
LEAF_NODE	7:45	7:45	4	;
EXPR_STATEMENT	8:1	8:59	3	jabber_iq_set_id ( result , xmlnode_get_attrib ( packet , "id" ) ) ;
EXPR	8:1	8:1	4	jabber_iq_set_id ( result , xmlnode_get_attrib ( packet , "id" ) )
FUNCTION_CALL	8:1	8:58	5	jabber_iq_set_id ( result , xmlnode_get_attrib ( packet , "id" ) )
CALLEE	8:1	8:1	6	jabber_iq_set_id
LEAF_NODE	8:1	8:1	7	jabber_iq_set_id
LEAF_NODE	8:17	8:17	6	(
ARGUMENT	8:18	8:18	6	result
FIELD	8:18	8:18	7	result
LEAF_NODE	8:18	8:18	8	result
LEAF_NODE	8:24	8:24	6	,
ARGUMENT	8:26	8:26	6	xmlnode_get_attrib ( packet , "id" )
FUNCTION_CALL	8:26	8:57	7	xmlnode_get_attrib ( packet , "id" )
CALLEE	8:26	8:26	8	xmlnode_get_attrib
LEAF_NODE	8:26	8:26	9	xmlnode_get_attrib
LEAF_NODE	8:44	8:44	8	(
ARGUMENT	8:45	8:45	8	packet
FIELD	8:45	8:45	9	packet
LEAF_NODE	8:45	8:45	10	packet
LEAF_NODE	8:51	8:51	8	,
ARGUMENT	8:53	8:53	8	"id"
FIELD	8:53	8:53	9	"id"
LEAF_NODE	8:53	8:53	10	"id"
LEAF_NODE	8:57	8:57	8	)
LEAF_NODE	8:58	8:58	6	)
LEAF_NODE	8:59	8:59	4	;
EXPR_STATEMENT	9:1	9:75	3	xmlnode_set_attrib ( result -> node , "from" , xmlnode_get_attrib ( packet , "to" ) ) ;
EXPR	9:1	9:1	4	xmlnode_set_attrib ( result -> node , "from" , xmlnode_get_attrib ( packet , "to" ) )
FUNCTION_CALL	9:1	9:74	5	xmlnode_set_attrib ( result -> node , "from" , xmlnode_get_attrib ( packet , "to" ) )
CALLEE	9:1	9:1	6	xmlnode_set_attrib
LEAF_NODE	9:1	9:1	7	xmlnode_set_attrib
LEAF_NODE	9:19	9:19	6	(
ARGUMENT	9:20	9:20	6	result -> node
FIELD	9:20	9:28	7	result -> node
LEAF_NODE	9:20	9:20	8	result
LEAF_NODE	9:26	9:26	8	->
LEAF_NODE	9:28	9:28	8	node
LEAF_NODE	9:32	9:32	6	,
ARGUMENT	9:34	9:34	6	"from"
FIELD	9:34	9:34	7	"from"
LEAF_NODE	9:34	9:34	8	"from"
LEAF_NODE	9:40	9:40	6	,
ARGUMENT	9:42	9:42	6	xmlnode_get_attrib ( packet , "to" )
FUNCTION_CALL	9:42	9:73	7	xmlnode_get_attrib ( packet , "to" )
CALLEE	9:42	9:42	8	xmlnode_get_attrib
LEAF_NODE	9:42	9:42	9	xmlnode_get_attrib
LEAF_NODE	9:60	9:60	8	(
ARGUMENT	9:61	9:61	8	packet
FIELD	9:61	9:61	9	packet
LEAF_NODE	9:61	9:61	10	packet
LEAF_NODE	9:67	9:67	8	,
ARGUMENT	9:69	9:69	8	"to"
FIELD	9:69	9:69	9	"to"
LEAF_NODE	9:69	9:69	10	"to"
LEAF_NODE	9:73	9:73	8	)
LEAF_NODE	9:74	9:74	6	)
LEAF_NODE	9:75	9:75	4	;
EXPR_STATEMENT	10:1	10:75	3	xmlnode_set_attrib ( result -> node , "to" , xmlnode_get_attrib ( packet , "from" ) ) ;
EXPR	10:1	10:1	4	xmlnode_set_attrib ( result -> node , "to" , xmlnode_get_attrib ( packet , "from" ) )
FUNCTION_CALL	10:1	10:74	5	xmlnode_set_attrib ( result -> node , "to" , xmlnode_get_attrib ( packet , "from" ) )
CALLEE	10:1	10:1	6	xmlnode_set_attrib
LEAF_NODE	10:1	10:1	7	xmlnode_set_attrib
LEAF_NODE	10:19	10:19	6	(
ARGUMENT	10:20	10:20	6	result -> node
FIELD	10:20	10:28	7	result -> node
LEAF_NODE	10:20	10:20	8	result
LEAF_NODE	10:26	10:26	8	->
LEAF_NODE	10:28	10:28	8	node
LEAF_NODE	10:32	10:32	6	,
ARGUMENT	10:34	10:34	6	"to"
FIELD	10:34	10:34	7	"to"
LEAF_NODE	10:34	10:34	8	"to"
LEAF_NODE	10:38	10:38	6	,
ARGUMENT	10:40	10:40	6	xmlnode_get_attrib ( packet , "from" )
FUNCTION_CALL	10:40	10:73	7	xmlnode_get_attrib ( packet , "from" )
CALLEE	10:40	10:40	8	xmlnode_get_attrib
LEAF_NODE	10:40	10:40	9	xmlnode_get_attrib
LEAF_NODE	10:58	10:58	8	(
ARGUMENT	10:59	10:59	8	packet
FIELD	10:59	10:59	9	packet
LEAF_NODE	10:59	10:59	10	packet
LEAF_NODE	10:65	10:65	8	,
ARGUMENT	10:67	10:67	8	"from"
FIELD	10:67	10:67	9	"from"
LEAF_NODE	10:67	10:67	10	"from"
LEAF_NODE	10:73	10:73	8	)
LEAF_NODE	10:74	10:74	6	)
LEAF_NODE	10:75	10:75	4	;
JUMP_STATEMENT	11:1	11:14	3	return result ;
KEYWORD	11:1	11:1	4	return
LEAF_NODE	11:1	11:1	5	return
DESTINATION	11:8	11:8	4	result
EXPR	11:8	11:8	5	result
FIELD	11:8	11:8	6	result
LEAF_NODE	11:8	11:8	7	result
LEAF_NODE	11:14	11:14	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	16:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	_set_privacy_default_resp_cb
LEAF_NODE	2:0	2:0	3	_set_privacy_default_resp_cb
PARAMETER_LIST	2:28	3:47	2	( NMUser * user , NMERR_T ret_code , gpointer resp_data , gpointer user_data )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:37	3	NMUser * user
TYPE	2:29	2:36	4	NMUser *
TYPE_NAME	2:29	2:29	5	NMUser
LEAF_NODE	2:29	2:29	6	NMUser
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	user
LEAF_NODE	2:37	2:37	5	user
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:51	3	NMERR_T ret_code
TYPE	2:43	2:43	4	NMERR_T
TYPE_NAME	2:43	2:43	5	NMERR_T
LEAF_NODE	2:43	2:43	6	NMERR_T
NAME	2:51	2:51	4	ret_code
LEAF_NODE	2:51	2:51	5	ret_code
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	3:9	3:18	3	gpointer resp_data
TYPE	3:9	3:9	4	gpointer
TYPE_NAME	3:9	3:9	5	gpointer
LEAF_NODE	3:9	3:9	6	gpointer
NAME	3:18	3:18	4	resp_data
LEAF_NODE	3:18	3:18	5	resp_data
LEAF_NODE	3:27	3:27	3	,
PARAMETER_DECL	3:29	3:38	3	gpointer user_data
TYPE	3:29	3:29	4	gpointer
TYPE_NAME	3:29	3:29	5	gpointer
LEAF_NODE	3:29	3:29	6	gpointer
NAME	3:38	3:38	4	user_data
LEAF_NODE	3:38	3:38	5	user_data
LEAF_NODE	3:47	3:47	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	9:1	2	
SIMPLE_DECL	5:1	5:21	3	PurpleConnection * gc ;
VAR_DECL	5:1	5:19	4	PurpleConnection * gc
TYPE	5:1	5:18	5	PurpleConnection *
TYPE_NAME	5:1	5:1	6	PurpleConnection
LEAF_NODE	5:1	5:1	7	PurpleConnection
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	gc
LEAF_NODE	5:19	5:19	6	gc
LEAF_NODE	5:21	5:21	4	;
SIMPLE_DECL	6:1	6:10	3	char * err ;
VAR_DECL	6:1	6:7	4	char * err
TYPE	6:1	6:6	5	char *
TYPE_NAME	6:1	6:1	6	char
LEAF_NODE	6:1	6:1	7	char
POINTER	6:6	6:6	6	*
LEAF_NODE	6:6	6:6	7	*
NAME	6:7	6:7	5	err
LEAF_NODE	6:7	6:7	6	err
LEAF_NODE	6:10	6:10	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	user == NULL
EXPR	7:5	7:13	5	user == NULL
FIELD	7:5	7:5	6	user
LEAF_NODE	7:5	7:5	7	user
EQ_OPERATOR	7:10	7:10	6	==
LEAF_NODE	7:10	7:10	7	==
FIELD	7:13	7:13	6	NULL
LEAF_NODE	7:13	7:13	7	NULL
LEAF_NODE	7:17	7:17	4	)
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:8	5	return DESTINATION ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	8:8	8:8	6	;
SELECTION	9:1	9:24	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	ret_code != NM_OK
EXPR	9:5	9:17	5	ret_code != NM_OK
FIELD	9:5	9:5	6	ret_code
LEAF_NODE	9:5	9:5	7	ret_code
EQ_OPERATOR	9:14	9:14	6	!=
LEAF_NODE	9:14	9:14	7	!=
FIELD	9:17	9:17	6	NM_OK
LEAF_NODE	9:17	9:17	7	NM_OK
LEAF_NODE	9:22	9:22	4	)
STATEMENTS	9:24	15:1	4	
LEAF_NODE	9:24	9:24	5	{
STATEMENTS	10:2	14:2	5	
EXPR_STATEMENT	10:2	10:55	6	gc = purple_account_get_connection ( user -> client_data ) ;
EXPR	10:2	10:2	7	gc = purple_account_get_connection ( user -> client_data )
ASSIGN	10:2	10:7	8	gc = purple_account_get_connection ( user -> client_data )
LVAL	10:2	10:2	9	gc
FIELD	10:2	10:2	10	gc
LEAF_NODE	10:2	10:2	11	gc
ASSIGN_OP	10:5	10:5	9	=
LEAF_NODE	10:5	10:5	10	=
RVAL	10:7	10:7	9	purple_account_get_connection ( user -> client_data )
FUNCTION_CALL	10:7	10:54	10	purple_account_get_connection ( user -> client_data )
CALLEE	10:7	10:7	11	purple_account_get_connection
LEAF_NODE	10:7	10:7	12	purple_account_get_connection
LEAF_NODE	10:36	10:36	11	(
ARGUMENT	10:37	10:37	11	user -> client_data
FIELD	10:37	10:43	12	user -> client_data
LEAF_NODE	10:37	10:37	13	user
LEAF_NODE	10:41	10:41	13	->
LEAF_NODE	10:43	10:43	13	client_data
LEAF_NODE	10:54	10:54	11	)
LEAF_NODE	10:55	10:55	7	;
EXPR_STATEMENT	11:2	12:38	6	err = g_strdup_printf ( _ ( "Unable to change server side privacy settings (%s)." ) , nm_error_to_string ( ret_code ) ) ;
EXPR	11:2	11:2	7	err = g_strdup_printf ( _ ( "Unable to change server side privacy settings (%s)." ) , nm_error_to_string ( ret_code ) )
ASSIGN	11:2	11:8	8	err = g_strdup_printf ( _ ( "Unable to change server side privacy settings (%s)." ) , nm_error_to_string ( ret_code ) )
LVAL	11:2	11:2	9	err
FIELD	11:2	11:2	10	err
LEAF_NODE	11:2	11:2	11	err
ASSIGN_OP	11:6	11:6	9	=
LEAF_NODE	11:6	11:6	10	=
RVAL	11:8	11:8	9	g_strdup_printf ( _ ( "Unable to change server side privacy settings (%s)." ) , nm_error_to_string ( ret_code ) )
FUNCTION_CALL	11:8	12:37	10	g_strdup_printf ( _ ( "Unable to change server side privacy settings (%s)." ) , nm_error_to_string ( ret_code ) )
CALLEE	11:8	11:8	11	g_strdup_printf
LEAF_NODE	11:8	11:8	12	g_strdup_printf
LEAF_NODE	11:23	11:23	11	(
ARGUMENT	11:24	11:24	11	_ ( "Unable to change server side privacy settings (%s)." )
FUNCTION_CALL	11:24	11:79	12	_ ( "Unable to change server side privacy settings (%s)." )
CALLEE	11:24	11:24	13	_
LEAF_NODE	11:24	11:24	14	_
LEAF_NODE	11:25	11:25	13	(
ARGUMENT	11:26	11:26	13	"Unable to change server side privacy settings (%s)."
FIELD	11:26	11:26	14	"Unable to change server side privacy settings (%s)."
LEAF_NODE	11:26	11:26	15	"Unable to change server side privacy settings (%s)."
LEAF_NODE	11:79	11:79	13	)
LEAF_NODE	11:80	11:80	11	,
ARGUMENT	12:9	12:9	11	nm_error_to_string ( ret_code )
FUNCTION_CALL	12:9	12:36	12	nm_error_to_string ( ret_code )
CALLEE	12:9	12:9	13	nm_error_to_string
LEAF_NODE	12:9	12:9	14	nm_error_to_string
LEAF_NODE	12:27	12:27	13	(
ARGUMENT	12:28	12:28	13	ret_code
FIELD	12:28	12:28	14	ret_code
LEAF_NODE	12:28	12:28	15	ret_code
LEAF_NODE	12:36	12:36	13	)
LEAF_NODE	12:37	12:37	11	)
LEAF_NODE	12:38	12:38	7	;
EXPR_STATEMENT	13:2	13:42	6	purple_notify_error ( gc , NULL , err , NULL ) ;
EXPR	13:2	13:2	7	purple_notify_error ( gc , NULL , err , NULL )
FUNCTION_CALL	13:2	13:41	8	purple_notify_error ( gc , NULL , err , NULL )
CALLEE	13:2	13:2	9	purple_notify_error
LEAF_NODE	13:2	13:2	10	purple_notify_error
LEAF_NODE	13:21	13:21	9	(
ARGUMENT	13:22	13:22	9	gc
FIELD	13:22	13:22	10	gc
LEAF_NODE	13:22	13:22	11	gc
LEAF_NODE	13:24	13:24	9	,
ARGUMENT	13:26	13:26	9	NULL
FIELD	13:26	13:26	10	NULL
LEAF_NODE	13:26	13:26	11	NULL
LEAF_NODE	13:30	13:30	9	,
ARGUMENT	13:32	13:32	9	err
FIELD	13:32	13:32	10	err
LEAF_NODE	13:32	13:32	11	err
LEAF_NODE	13:35	13:35	9	,
ARGUMENT	13:37	13:37	9	NULL
FIELD	13:37	13:37	10	NULL
LEAF_NODE	13:37	13:37	11	NULL
LEAF_NODE	13:41	13:41	9	)
LEAF_NODE	13:42	13:42	7	;
EXPR_STATEMENT	14:2	14:13	6	g_free ( err ) ;
EXPR	14:2	14:2	7	g_free ( err )
FUNCTION_CALL	14:2	14:12	8	g_free ( err )
CALLEE	14:2	14:2	9	g_free
LEAF_NODE	14:2	14:2	10	g_free
LEAF_NODE	14:8	14:8	9	(
ARGUMENT	14:9	14:9	9	err
FIELD	14:9	14:9	10	err
LEAF_NODE	14:9	14:9	11	err
LEAF_NODE	14:12	14:12	9	)
LEAF_NODE	14:13	14:13	7	;
LEAF_NODE	15:1	15:1	5	}
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	8:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	purple_account_set_buddy_icon_path
LEAF_NODE	2:5	2:5	3	purple_account_set_buddy_icon_path
PARAMETER_LIST	2:39	2:80	2	( PurpleAccount * account , const char * path )
LEAF_NODE	2:39	2:39	3	(
PARAMETER_DECL	2:40	2:55	3	PurpleAccount * account
TYPE	2:40	2:54	4	PurpleAccount *
TYPE_NAME	2:40	2:40	5	PurpleAccount
LEAF_NODE	2:40	2:40	6	PurpleAccount
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	account
LEAF_NODE	2:55	2:55	5	account
LEAF_NODE	2:62	2:62	3	,
PARAMETER_DECL	2:64	2:76	3	const char * path
TYPE	2:64	2:75	4	const char *
TYPE_NAME	2:64	2:70	5	const char
LEAF_NODE	2:64	2:64	6	const
LEAF_NODE	2:70	2:70	6	char
POINTER	2:75	2:75	5	*
LEAF_NODE	2:75	2:75	6	*
NAME	2:76	2:76	4	path
LEAF_NODE	2:76	2:76	5	path
LEAF_NODE	2:80	2:80	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
EXPR_STATEMENT	4:1	4:34	3	g_return_if_fail ( account != NULL ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( account != NULL )
FUNCTION_CALL	4:1	4:33	5	g_return_if_fail ( account != NULL )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:29	6	account != NULL
FIELD	4:18	4:18	7	account
LEAF_NODE	4:18	4:18	8	account
EQ_OPERATOR	4:26	4:26	7	!=
LEAF_NODE	4:26	4:26	8	!=
FIELD	4:29	4:29	7	NULL
LEAF_NODE	4:29	4:29	8	NULL
LEAF_NODE	4:33	4:33	6	)
LEAF_NODE	4:34	4:34	4	;
EXPR_STATEMENT	5:1	5:33	3	g_free ( account -> buddy_icon_path ) ;
EXPR	5:1	5:1	4	g_free ( account -> buddy_icon_path )
FUNCTION_CALL	5:1	5:32	5	g_free ( account -> buddy_icon_path )
CALLEE	5:1	5:1	6	g_free
LEAF_NODE	5:1	5:1	7	g_free
LEAF_NODE	5:7	5:7	6	(
ARGUMENT	5:8	5:8	6	account -> buddy_icon_path
FIELD	5:8	5:17	7	account -> buddy_icon_path
LEAF_NODE	5:8	5:8	8	account
LEAF_NODE	5:15	5:15	8	->
LEAF_NODE	5:17	5:17	8	buddy_icon_path
LEAF_NODE	5:32	5:32	6	)
LEAF_NODE	5:33	5:33	4	;
EXPR_STATEMENT	6:1	6:42	3	account -> buddy_icon_path = g_strdup ( path ) ;
EXPR	6:1	6:1	4	account -> buddy_icon_path = g_strdup ( path )
ASSIGN	6:1	6:28	5	account -> buddy_icon_path = g_strdup ( path )
LVAL	6:1	6:1	6	account -> buddy_icon_path
FIELD	6:1	6:10	7	account -> buddy_icon_path
LEAF_NODE	6:1	6:1	8	account
LEAF_NODE	6:8	6:8	8	->
LEAF_NODE	6:10	6:10	8	buddy_icon_path
ASSIGN_OP	6:26	6:26	6	=
LEAF_NODE	6:26	6:26	7	=
RVAL	6:28	6:28	6	g_strdup ( path )
FUNCTION_CALL	6:28	6:41	7	g_strdup ( path )
CALLEE	6:28	6:28	8	g_strdup
LEAF_NODE	6:28	6:28	9	g_strdup
LEAF_NODE	6:36	6:36	8	(
ARGUMENT	6:37	6:37	8	path
FIELD	6:37	6:37	9	path
LEAF_NODE	6:37	6:37	10	path
LEAF_NODE	6:41	6:41	8	)
LEAF_NODE	6:42	6:42	4	;
EXPR_STATEMENT	7:1	7:25	3	schedule_accounts_save ( ) ;
EXPR	7:1	7:1	4	schedule_accounts_save ( )
FUNCTION_CALL	7:1	7:24	5	schedule_accounts_save ( )
CALLEE	7:1	7:1	6	schedule_accounts_save
LEAF_NODE	7:1	7:1	7	schedule_accounts_save
LEAF_NODE	7:23	7:23	6	(
LEAF_NODE	7:24	7:24	6	)
LEAF_NODE	7:25	7:25	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	ignore_keys_end
LEAF_NODE	2:0	2:0	3	ignore_keys_end
PARAMETER_LIST	2:15	2:47	2	( GntBindable * bindable , GList * n )
LEAF_NODE	2:15	2:15	3	(
PARAMETER_DECL	2:16	2:29	3	GntBindable * bindable
TYPE	2:16	2:28	4	GntBindable *
TYPE_NAME	2:16	2:16	5	GntBindable
LEAF_NODE	2:16	2:16	6	GntBindable
POINTER	2:28	2:28	5	*
LEAF_NODE	2:28	2:28	6	*
NAME	2:29	2:29	4	bindable
LEAF_NODE	2:29	2:29	5	bindable
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:46	3	GList * n
TYPE	2:39	2:45	4	GList *
TYPE_NAME	2:39	2:39	5	GList
LEAF_NODE	2:39	2:39	6	GList
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	n
LEAF_NODE	2:46	2:46	5	n
LEAF_NODE	2:47	2:47	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SELECTION	4:1	4:18	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	ignore_keys
EXPR	4:5	4:5	5	ignore_keys
FIELD	4:5	4:5	6	ignore_keys
LEAF_NODE	4:5	4:5	7	ignore_keys
LEAF_NODE	4:16	4:16	4	)
STATEMENTS	4:18	7:1	4	
LEAF_NODE	4:18	4:18	5	{
STATEMENTS	5:2	6:2	5	
EXPR_STATEMENT	5:2	5:21	6	ignore_keys = FALSE ;
EXPR	5:2	5:2	7	ignore_keys = FALSE
ASSIGN	5:2	5:16	8	ignore_keys = FALSE
LVAL	5:2	5:2	9	ignore_keys
FIELD	5:2	5:2	10	ignore_keys
LEAF_NODE	5:2	5:2	11	ignore_keys
ASSIGN_OP	5:14	5:14	9	=
LEAF_NODE	5:14	5:14	10	=
RVAL	5:16	5:16	9	FALSE
FIELD	5:16	5:16	10	FALSE
LEAF_NODE	5:16	5:16	11	FALSE
LEAF_NODE	5:21	5:21	7	;
JUMP_STATEMENT	6:2	6:13	6	return TRUE ;
KEYWORD	6:2	6:2	7	return
LEAF_NODE	6:2	6:2	8	return
DESTINATION	6:9	6:9	7	TRUE
EXPR	6:9	6:9	8	TRUE
FIELD	6:9	6:9	9	TRUE
LEAF_NODE	6:9	6:9	10	TRUE
LEAF_NODE	6:13	6:13	7	;
LEAF_NODE	7:1	7:1	5	}
JUMP_STATEMENT	8:1	8:13	3	return FALSE ;
KEYWORD	8:1	8:1	4	return
LEAF_NODE	8:1	8:1	5	return
DESTINATION	8:8	8:8	4	FALSE
EXPR	8:8	8:8	5	FALSE
FIELD	8:8	8:8	6	FALSE
LEAF_NODE	8:8	8:8	7	FALSE
LEAF_NODE	8:13	8:13	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	7:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	wpurple_inet_aton
LEAF_NODE	2:4	2:4	3	wpurple_inet_aton
PARAMETER_LIST	2:21	2:60	2	( const char * name , struct in_addr * addr )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:34	3	const char * name
TYPE	2:22	2:33	4	const char *
TYPE_NAME	2:22	2:28	5	const char
LEAF_NODE	2:22	2:22	6	const
LEAF_NODE	2:28	2:28	6	char
POINTER	2:33	2:33	5	*
LEAF_NODE	2:33	2:33	6	*
NAME	2:34	2:34	4	name
LEAF_NODE	2:34	2:34	5	name
LEAF_NODE	2:38	2:38	3	,
PARAMETER_DECL	2:40	2:56	3	struct in_addr * addr
TYPE	2:40	2:55	4	struct in_addr *
TYPE_NAME	2:40	2:47	5	struct in_addr
LEAF_NODE	2:40	2:40	6	struct
LEAF_NODE	2:47	2:47	6	in_addr
POINTER	2:55	2:55	5	*
LEAF_NODE	2:55	2:55	6	*
NAME	2:56	2:56	4	addr
LEAF_NODE	2:56	2:56	5	addr
LEAF_NODE	2:60	2:60	3	)
LEAF_NODE	2:62	2:62	2	{
STATEMENTS	3:1	5:1	2	
SELECTION	3:1	4:2	3	
KEYWORD	3:1	3:1	4	if
LEAF_NODE	3:1	3:1	5	if
LEAF_NODE	3:3	3:3	4	(
CONDITION	3:4	3:4	4	( addr -> s_addr = inet_addr ( name ) ) == INADDR_NONE
EXPR	3:4	3:40	5	( addr -> s_addr = inet_addr ( name ) ) == INADDR_NONE
LEAF_NODE	3:4	3:4	6	(
ASSIGN	3:5	3:20	6	addr -> s_addr = inet_addr ( name )
LVAL	3:5	3:5	7	addr -> s_addr
FIELD	3:5	3:11	8	addr -> s_addr
LEAF_NODE	3:5	3:5	9	addr
LEAF_NODE	3:9	3:9	9	->
LEAF_NODE	3:11	3:11	9	s_addr
ASSIGN_OP	3:18	3:18	7	=
LEAF_NODE	3:18	3:18	8	=
RVAL	3:20	3:20	7	inet_addr ( name )
FUNCTION_CALL	3:20	3:34	8	inet_addr ( name )
CALLEE	3:20	3:20	9	inet_addr
LEAF_NODE	3:20	3:20	10	inet_addr
LEAF_NODE	3:29	3:29	9	(
ARGUMENT	3:30	3:30	9	name
FIELD	3:30	3:30	10	name
LEAF_NODE	3:30	3:30	11	name
LEAF_NODE	3:34	3:34	9	)
LEAF_NODE	3:35	3:35	6	)
EQ_OPERATOR	3:37	3:37	6	==
LEAF_NODE	3:37	3:37	7	==
FIELD	3:40	3:40	6	INADDR_NONE
LEAF_NODE	3:40	3:40	7	INADDR_NONE
LEAF_NODE	3:51	3:51	4	)
STATEMENTS	4:2	4:2	4	
JUMP_STATEMENT	4:2	4:10	5	return 0 ;
KEYWORD	4:2	4:2	6	return
LEAF_NODE	4:2	4:2	7	return
DESTINATION	4:9	4:9	6	0
EXPR	4:9	4:9	7	0
FIELD	4:9	4:9	8	0
LEAF_NODE	4:9	4:9	9	0
LEAF_NODE	4:10	4:10	6	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	else
LEAF_NODE	5:1	5:1	5	else
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:10	5	return 1 ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
DESTINATION	6:9	6:9	6	1
EXPR	6:9	6:9	7	1
FIELD	6:9	6:9	8	1
LEAF_NODE	6:9	6:9	9	1
LEAF_NODE	6:10	6:10	6	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	10:0	1	
RETURN_TYPE	2:0	2:13	2	aim_module_t *
TYPE_NAME	2:0	2:0	3	aim_module_t
LEAF_NODE	2:0	2:0	4	aim_module_t
LEAF_NODE	2:13	2:13	3	*
FUNCTION_NAME	2:14	2:14	2	aim__findmodule
LEAF_NODE	2:14	2:14	3	aim__findmodule
PARAMETER_LIST	2:29	2:61	2	( OscarData * od , const char * name )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:41	3	OscarData * od
TYPE	2:30	2:40	4	OscarData *
TYPE_NAME	2:30	2:30	5	OscarData
LEAF_NODE	2:30	2:30	6	OscarData
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	od
LEAF_NODE	2:41	2:41	5	od
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:57	3	const char * name
TYPE	2:45	2:56	4	const char *
TYPE_NAME	2:45	2:51	5	const char
LEAF_NODE	2:45	2:45	6	const
LEAF_NODE	2:51	2:51	6	char
POINTER	2:56	2:56	5	*
LEAF_NODE	2:56	2:56	6	*
NAME	2:57	2:57	4	name
LEAF_NODE	2:57	2:57	5	name
LEAF_NODE	2:61	2:61	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:18	3	aim_module_t * cur ;
VAR_DECL	4:1	4:15	4	aim_module_t * cur
TYPE	4:1	4:14	5	aim_module_t *
TYPE_NAME	4:1	4:1	6	aim_module_t
LEAF_NODE	4:1	4:1	7	aim_module_t
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	cur
LEAF_NODE	4:15	4:15	6	cur
LEAF_NODE	4:18	4:18	4	;
ITERATION	5:1	5:64	3	
KEYWORD	5:1	5:1	4	for
LEAF_NODE	5:1	5:1	5	for
LEAF_NODE	5:5	5:5	4	(
FOR_INIT	5:6	5:40	4	cur = ( aim_module_t * ) od -> modlistv ;
EXPR	5:6	5:6	5	cur = ( aim_module_t * ) od -> modlistv
ASSIGN	5:6	5:12	6	cur = ( aim_module_t * ) od -> modlistv
LVAL	5:6	5:6	7	cur
FIELD	5:6	5:6	8	cur
LEAF_NODE	5:6	5:6	9	cur
ASSIGN_OP	5:10	5:10	7	=
LEAF_NODE	5:10	5:10	8	=
RVAL	5:12	5:28	7	( aim_module_t * ) od -> modlistv
LEAF_NODE	5:12	5:12	8	(
TYPE_NAME	5:13	5:13	8	aim_module_t
LEAF_NODE	5:13	5:13	9	aim_module_t
LEAF_NODE	5:26	5:26	8	*
LEAF_NODE	5:27	5:27	8	)
FIELD	5:28	5:32	8	od -> modlistv
LEAF_NODE	5:28	5:28	9	od
LEAF_NODE	5:30	5:30	9	->
LEAF_NODE	5:32	5:32	9	modlistv
LEAF_NODE	5:40	5:40	5	;
CONDITION	5:42	5:42	4	cur
EXPR	5:42	5:42	5	cur
FIELD	5:42	5:42	6	cur
LEAF_NODE	5:42	5:42	7	cur
LEAF_NODE	5:45	5:45	4	;
FOR_EXPR	5:47	5:47	4	cur = cur -> next
EXPR	5:47	5:47	5	cur = cur -> next
ASSIGN	5:47	5:53	6	cur = cur -> next
LVAL	5:47	5:47	7	cur
FIELD	5:47	5:47	8	cur
LEAF_NODE	5:47	5:47	9	cur
ASSIGN_OP	5:51	5:51	7	=
LEAF_NODE	5:51	5:51	8	=
RVAL	5:53	5:53	7	cur -> next
FIELD	5:53	5:58	8	cur -> next
LEAF_NODE	5:53	5:53	9	cur
LEAF_NODE	5:56	5:56	9	->
LEAF_NODE	5:58	5:58	9	next
LEAF_NODE	5:62	5:62	4	)
STATEMENTS	5:64	8:1	4	
LEAF_NODE	5:64	5:64	5	{
STATEMENTS	6:2	6:2	5	
SELECTION	6:2	7:3	6	
KEYWORD	6:2	6:2	7	if
LEAF_NODE	6:2	6:2	8	if
LEAF_NODE	6:5	6:5	7	(
CONDITION	6:6	6:6	7	strcmp ( name , cur -> name ) == 0
EXPR	6:6	6:33	8	strcmp ( name , cur -> name ) == 0
FUNCTION_CALL	6:6	6:28	9	strcmp ( name , cur -> name )
CALLEE	6:6	6:6	10	strcmp
LEAF_NODE	6:6	6:6	11	strcmp
LEAF_NODE	6:12	6:12	10	(
ARGUMENT	6:13	6:13	10	name
FIELD	6:13	6:13	11	name
LEAF_NODE	6:13	6:13	12	name
LEAF_NODE	6:17	6:17	10	,
ARGUMENT	6:19	6:19	10	cur -> name
FIELD	6:19	6:24	11	cur -> name
LEAF_NODE	6:19	6:19	12	cur
LEAF_NODE	6:22	6:22	12	->
LEAF_NODE	6:24	6:24	12	name
LEAF_NODE	6:28	6:28	10	)
EQ_OPERATOR	6:30	6:30	9	==
LEAF_NODE	6:30	6:30	10	==
FIELD	6:33	6:33	9	0
LEAF_NODE	6:33	6:33	10	0
LEAF_NODE	6:34	6:34	7	)
STATEMENTS	7:3	7:3	7	
JUMP_STATEMENT	7:3	7:13	8	return cur ;
KEYWORD	7:3	7:3	9	return
LEAF_NODE	7:3	7:3	10	return
DESTINATION	7:10	7:10	9	cur
EXPR	7:10	7:10	10	cur
FIELD	7:10	7:10	11	cur
LEAF_NODE	7:10	7:10	12	cur
LEAF_NODE	7:13	7:13	9	;
LEAF_NODE	8:1	8:1	5	}
JUMP_STATEMENT	9:1	9:12	3	return NULL ;
KEYWORD	9:1	9:1	4	return
LEAF_NODE	9:1	9:1	5	return
DESTINATION	9:8	9:8	4	NULL
EXPR	9:8	9:8	5	NULL
FIELD	9:8	9:8	6	NULL
LEAF_NODE	9:8	9:8	7	NULL
LEAF_NODE	9:12	9:12	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	flap_connection_established_bart
LEAF_NODE	2:0	2:0	3	flap_connection_established_bart
PARAMETER_LIST	2:32	2:68	2	( OscarData * od , FlapConnection * conn )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:44	3	OscarData * od
TYPE	2:33	2:43	4	OscarData *
TYPE_NAME	2:33	2:33	5	OscarData
LEAF_NODE	2:33	2:33	6	OscarData
POINTER	2:43	2:43	5	*
LEAF_NODE	2:43	2:43	6	*
NAME	2:44	2:44	4	od
LEAF_NODE	2:44	2:44	5	od
LEAF_NODE	2:46	2:46	3	,
PARAMETER_DECL	2:48	2:64	3	FlapConnection * conn
TYPE	2:48	2:63	4	FlapConnection *
TYPE_NAME	2:48	2:48	5	FlapConnection
LEAF_NODE	2:48	2:48	6	FlapConnection
POINTER	2:63	2:63	5	*
LEAF_NODE	2:63	2:63	6	*
NAME	2:64	2:64	4	conn
LEAF_NODE	2:64	2:64	5	conn
LEAF_NODE	2:68	2:68	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:30	3	PurpleConnection * gc ; gc = od -> gc ;
VAR_DECL	4:1	4:19	4	PurpleConnection * gc ; gc = od -> gc
TYPE	4:1	4:18	5	PurpleConnection *
TYPE_NAME	4:1	4:1	6	PurpleConnection
LEAF_NODE	4:1	4:1	7	PurpleConnection
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	gc
LEAF_NODE	4:19	4:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	4:19	4:19	5	gc = od -> gc
ASSIGN	4:19	4:24	6	gc = od -> gc
LVAL	4:19	4:19	7	gc
NAME	4:19	4:19	8	gc
LEAF_NODE	4:19	4:19	9	gc
ASSIGN_OP	4:22	4:22	7	=
LEAF_NODE	4:22	4:22	8	=
RVAL	4:24	4:24	7	od -> gc
FIELD	4:24	4:28	8	od -> gc
LEAF_NODE	4:24	4:24	9	od
LEAF_NODE	4:26	4:26	9	->
LEAF_NODE	4:28	4:28	9	gc
LEAF_NODE	4:30	4:30	4	;
EXPR_STATEMENT	5:1	5:30	3	aim_srv_clientready ( od , conn ) ;
EXPR	5:1	5:1	4	aim_srv_clientready ( od , conn )
FUNCTION_CALL	5:1	5:29	5	aim_srv_clientready ( od , conn )
CALLEE	5:1	5:1	6	aim_srv_clientready
LEAF_NODE	5:1	5:1	7	aim_srv_clientready
LEAF_NODE	5:20	5:20	6	(
ARGUMENT	5:21	5:21	6	od
FIELD	5:21	5:21	7	od
LEAF_NODE	5:21	5:21	8	od
LEAF_NODE	5:23	5:23	6	,
ARGUMENT	5:25	5:25	6	conn
FIELD	5:25	5:25	7	conn
LEAF_NODE	5:25	5:25	8	conn
LEAF_NODE	5:29	5:29	6	)
LEAF_NODE	5:30	5:30	4	;
EXPR_STATEMENT	6:1	6:27	3	od -> iconconnecting = FALSE ;
EXPR	6:1	6:1	4	od -> iconconnecting = FALSE
ASSIGN	6:1	6:22	5	od -> iconconnecting = FALSE
LVAL	6:1	6:1	6	od -> iconconnecting
FIELD	6:1	6:5	7	od -> iconconnecting
LEAF_NODE	6:1	6:1	8	od
LEAF_NODE	6:3	6:3	8	->
LEAF_NODE	6:5	6:5	8	iconconnecting
ASSIGN_OP	6:20	6:20	6	=
LEAF_NODE	6:20	6:20	7	=
RVAL	6:22	6:22	6	FALSE
FIELD	6:22	6:22	7	FALSE
LEAF_NODE	6:22	6:22	8	FALSE
LEAF_NODE	6:27	6:27	4	;
EXPR_STATEMENT	7:1	7:23	3	purple_icons_fetch ( gc ) ;
EXPR	7:1	7:1	4	purple_icons_fetch ( gc )
FUNCTION_CALL	7:1	7:22	5	purple_icons_fetch ( gc )
CALLEE	7:1	7:1	6	purple_icons_fetch
LEAF_NODE	7:1	7:1	7	purple_icons_fetch
LEAF_NODE	7:19	7:19	6	(
ARGUMENT	7:20	7:20	6	gc
FIELD	7:20	7:20	7	gc
LEAF_NODE	7:20	7:20	8	gc
LEAF_NODE	7:22	7:22	6	)
LEAF_NODE	7:23	7:23	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	34:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	novell_ssl_connected_cb
LEAF_NODE	2:0	2:0	3	novell_ssl_connected_cb
PARAMETER_LIST	2:23	3:31	2	( gpointer data , PurpleSslConnection * gsc , PurpleInputCondition cond )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:33	3	gpointer data
TYPE	2:24	2:24	4	gpointer
TYPE_NAME	2:24	2:24	5	gpointer
LEAF_NODE	2:24	2:24	6	gpointer
NAME	2:33	2:33	4	data
LEAF_NODE	2:33	2:33	5	data
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:61	3	PurpleSslConnection * gsc
TYPE	2:39	2:59	4	PurpleSslConnection *
TYPE_NAME	2:39	2:39	5	PurpleSslConnection
LEAF_NODE	2:39	2:39	6	PurpleSslConnection
POINTER	2:59	2:59	5	*
LEAF_NODE	2:59	2:59	6	*
NAME	2:61	2:61	4	gsc
LEAF_NODE	2:61	2:61	5	gsc
LEAF_NODE	2:64	2:64	3	,
PARAMETER_DECL	3:6	3:27	3	PurpleInputCondition cond
TYPE	3:6	3:6	4	PurpleInputCondition
TYPE_NAME	3:6	3:6	5	PurpleInputCondition
LEAF_NODE	3:6	3:6	6	PurpleInputCondition
NAME	3:27	3:27	4	cond
LEAF_NODE	3:27	3:27	5	cond
LEAF_NODE	3:31	3:31	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	33:1	2	
SIMPLE_DECL	5:1	5:28	3	PurpleConnection * gc ; gc = data ;
VAR_DECL	5:1	5:19	4	PurpleConnection * gc ; gc = data
TYPE	5:1	5:18	5	PurpleConnection *
TYPE_NAME	5:1	5:1	6	PurpleConnection
LEAF_NODE	5:1	5:1	7	PurpleConnection
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	gc
LEAF_NODE	5:19	5:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	5:19	5:19	5	gc = data
ASSIGN	5:19	5:24	6	gc = data
LVAL	5:19	5:19	7	gc
NAME	5:19	5:19	8	gc
LEAF_NODE	5:19	5:19	9	gc
ASSIGN_OP	5:22	5:22	7	=
LEAF_NODE	5:22	5:22	8	=
RVAL	5:24	5:24	7	data
FIELD	5:24	5:24	8	data
LEAF_NODE	5:24	5:24	9	data
LEAF_NODE	5:28	5:28	4	;
SIMPLE_DECL	6:1	6:13	3	NMUser * user ;
VAR_DECL	6:1	6:9	4	NMUser * user
TYPE	6:1	6:8	5	NMUser *
TYPE_NAME	6:1	6:1	6	NMUser
LEAF_NODE	6:1	6:1	7	NMUser
POINTER	6:8	6:8	6	*
LEAF_NODE	6:8	6:8	7	*
NAME	6:9	6:9	5	user
LEAF_NODE	6:9	6:9	6	user
LEAF_NODE	6:13	6:13	4	;
SIMPLE_DECL	7:1	7:13	3	NMConn * conn ;
VAR_DECL	7:1	7:9	4	NMConn * conn
TYPE	7:1	7:8	5	NMConn *
TYPE_NAME	7:1	7:1	6	NMConn
LEAF_NODE	7:1	7:1	7	NMConn
POINTER	7:8	7:8	6	*
LEAF_NODE	7:8	7:8	7	*
NAME	7:9	7:9	5	conn
LEAF_NODE	7:9	7:9	6	conn
LEAF_NODE	7:13	7:13	4	;
SIMPLE_DECL	8:1	8:15	3	NMERR_T rc ; rc = 0 ;
VAR_DECL	8:1	8:9	4	NMERR_T rc ; rc = 0
TYPE	8:1	8:1	5	NMERR_T
TYPE_NAME	8:1	8:1	6	NMERR_T
LEAF_NODE	8:1	8:1	7	NMERR_T
NAME	8:9	8:9	5	rc
LEAF_NODE	8:9	8:9	6	rc
LEAF_NODE	0:0	0:0	5	;
INIT	8:9	8:9	5	rc = 0
ASSIGN	8:9	8:14	6	rc = 0
LVAL	8:9	8:9	7	rc
NAME	8:9	8:9	8	rc
LEAF_NODE	8:9	8:9	9	rc
ASSIGN_OP	8:12	8:12	7	=
LEAF_NODE	8:12	8:12	8	=
RVAL	8:14	8:14	7	0
FIELD	8:14	8:14	8	0
LEAF_NODE	8:14	8:14	9	0
LEAF_NODE	8:15	8:15	4	;
SIMPLE_DECL	9:1	9:23	3	const char * pwd ; pwd = NULL ;
VAR_DECL	9:1	9:13	4	const char * pwd ; pwd = NULL
TYPE	9:1	9:12	5	const char *
TYPE_NAME	9:1	9:7	6	const char
LEAF_NODE	9:1	9:1	7	const
LEAF_NODE	9:7	9:7	7	char
POINTER	9:12	9:12	6	*
LEAF_NODE	9:12	9:12	7	*
NAME	9:13	9:13	5	pwd
LEAF_NODE	9:13	9:13	6	pwd
LEAF_NODE	0:0	0:0	5	;
INIT	9:13	9:13	5	pwd = NULL
ASSIGN	9:13	9:19	6	pwd = NULL
LVAL	9:13	9:13	7	pwd
NAME	9:13	9:13	8	pwd
LEAF_NODE	9:13	9:13	9	pwd
ASSIGN_OP	9:17	9:17	7	=
LEAF_NODE	9:17	9:17	8	=
RVAL	9:19	9:19	7	NULL
FIELD	9:19	9:19	8	NULL
LEAF_NODE	9:19	9:19	9	NULL
LEAF_NODE	9:23	9:23	4	;
SIMPLE_DECL	10:1	10:27	3	const char * my_addr ; my_addr = NULL ;
VAR_DECL	10:1	10:13	4	const char * my_addr ; my_addr = NULL
TYPE	10:1	10:12	5	const char *
TYPE_NAME	10:1	10:7	6	const char
LEAF_NODE	10:1	10:1	7	const
LEAF_NODE	10:7	10:7	7	char
POINTER	10:12	10:12	6	*
LEAF_NODE	10:12	10:12	7	*
NAME	10:13	10:13	5	my_addr
LEAF_NODE	10:13	10:13	6	my_addr
LEAF_NODE	0:0	0:0	5	;
INIT	10:13	10:13	5	my_addr = NULL
ASSIGN	10:13	10:23	6	my_addr = NULL
LVAL	10:13	10:13	7	my_addr
NAME	10:13	10:13	8	my_addr
LEAF_NODE	10:13	10:13	9	my_addr
ASSIGN_OP	10:21	10:21	7	=
LEAF_NODE	10:21	10:21	8	=
RVAL	10:23	10:23	7	NULL
FIELD	10:23	10:23	8	NULL
LEAF_NODE	10:23	10:23	9	NULL
LEAF_NODE	10:27	10:27	4	;
SIMPLE_DECL	11:1	11:16	3	char * ua ; ua = NULL ;
VAR_DECL	11:1	11:7	4	char * ua ; ua = NULL
TYPE	11:1	11:6	5	char *
TYPE_NAME	11:1	11:1	6	char
LEAF_NODE	11:1	11:1	7	char
POINTER	11:6	11:6	6	*
LEAF_NODE	11:6	11:6	7	*
NAME	11:7	11:7	5	ua
LEAF_NODE	11:7	11:7	6	ua
LEAF_NODE	0:0	0:0	5	;
INIT	11:7	11:7	5	ua = NULL
ASSIGN	11:7	11:12	6	ua = NULL
LVAL	11:7	11:7	7	ua
NAME	11:7	11:7	8	ua
LEAF_NODE	11:7	11:7	9	ua
ASSIGN_OP	11:10	11:10	7	=
LEAF_NODE	11:10	11:10	8	=
RVAL	11:12	11:12	7	NULL
FIELD	11:12	11:12	8	NULL
LEAF_NODE	11:12	11:12	9	NULL
LEAF_NODE	11:16	11:16	4	;
SELECTION	12:1	13:2	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:4	12:4	4	(
CONDITION	12:5	12:5	4	gc == NULL || gsc == NULL
EXPR	12:5	12:5	5	gc == NULL || gsc == NULL
OR	12:5	12:19	6	gc == NULL || gsc == NULL
EXPR	12:5	12:11	7	gc == NULL
FIELD	12:5	12:5	8	gc
LEAF_NODE	12:5	12:5	9	gc
EQ_OPERATOR	12:8	12:8	8	==
LEAF_NODE	12:8	12:8	9	==
FIELD	12:11	12:11	8	NULL
LEAF_NODE	12:11	12:11	9	NULL
LEAF_NODE	12:16	12:16	7	||
EXPR	12:19	12:26	7	gsc == NULL
FIELD	12:19	12:19	8	gsc
LEAF_NODE	12:19	12:19	9	gsc
EQ_OPERATOR	12:23	12:23	8	==
LEAF_NODE	12:23	12:23	9	==
FIELD	12:26	12:26	8	NULL
LEAF_NODE	12:26	12:26	9	NULL
LEAF_NODE	12:30	12:30	4	)
STATEMENTS	13:2	13:2	4	
JUMP_STATEMENT	13:2	13:8	5	return DESTINATION ;
KEYWORD	13:2	13:2	6	return
LEAF_NODE	13:2	13:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	13:8	13:8	6	;
EXPR_STATEMENT	14:1	14:22	3	user = gc -> proto_data ;
EXPR	14:1	14:1	4	user = gc -> proto_data
ASSIGN	14:1	14:8	5	user = gc -> proto_data
LVAL	14:1	14:1	6	user
FIELD	14:1	14:1	7	user
LEAF_NODE	14:1	14:1	8	user
ASSIGN_OP	14:6	14:6	6	=
LEAF_NODE	14:6	14:6	7	=
RVAL	14:8	14:8	6	gc -> proto_data
FIELD	14:8	14:12	7	gc -> proto_data
LEAF_NODE	14:8	14:8	8	gc
LEAF_NODE	14:10	14:10	8	->
LEAF_NODE	14:12	14:12	8	proto_data
LEAF_NODE	14:22	14:22	4	;
SELECTION	15:1	16:2	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:4	15:4	4	(
CONDITION	15:5	15:5	4	( user == NULL ) || ( conn = user -> conn ) == NULL
EXPR	15:5	15:5	5	( user == NULL ) || ( conn = user -> conn ) == NULL
OR	15:5	15:23	6	( user == NULL ) || ( conn = user -> conn ) == NULL
EXPR	15:5	15:18	7	( user == NULL )
LEAF_NODE	15:5	15:5	8	(
FIELD	15:6	15:6	8	user
LEAF_NODE	15:6	15:6	9	user
EQ_OPERATOR	15:11	15:11	8	==
LEAF_NODE	15:11	15:11	9	==
FIELD	15:14	15:14	8	NULL
LEAF_NODE	15:14	15:14	9	NULL
LEAF_NODE	15:18	15:18	8	)
LEAF_NODE	15:20	15:20	7	||
EXPR	15:23	15:46	7	( conn = user -> conn ) == NULL
LEAF_NODE	15:23	15:23	8	(
ASSIGN	15:24	15:31	8	conn = user -> conn
LVAL	15:24	15:24	9	conn
FIELD	15:24	15:24	10	conn
LEAF_NODE	15:24	15:24	11	conn
ASSIGN_OP	15:29	15:29	9	=
LEAF_NODE	15:29	15:29	10	=
RVAL	15:31	15:31	9	user -> conn
FIELD	15:31	15:37	10	user -> conn
LEAF_NODE	15:31	15:31	11	user
LEAF_NODE	15:35	15:35	11	->
LEAF_NODE	15:37	15:37	11	conn
LEAF_NODE	15:41	15:41	8	)
EQ_OPERATOR	15:43	15:43	8	==
LEAF_NODE	15:43	15:43	9	==
FIELD	15:46	15:46	8	NULL
LEAF_NODE	15:46	15:46	9	NULL
LEAF_NODE	15:50	15:50	4	)
STATEMENTS	16:2	16:2	4	
JUMP_STATEMENT	16:2	16:8	5	return DESTINATION ;
KEYWORD	16:2	16:2	6	return
LEAF_NODE	16:2	16:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	16:8	16:8	6	;
EXPR_STATEMENT	17:1	18:33	3	purple_connection_update_progress ( gc , _ ( "Authenticating..." ) , 2 , NOVELL_CONNECT_STEPS ) ;
EXPR	17:1	17:1	4	purple_connection_update_progress ( gc , _ ( "Authenticating..." ) , 2 , NOVELL_CONNECT_STEPS )
FUNCTION_CALL	17:1	18:32	5	purple_connection_update_progress ( gc , _ ( "Authenticating..." ) , 2 , NOVELL_CONNECT_STEPS )
CALLEE	17:1	17:1	6	purple_connection_update_progress
LEAF_NODE	17:1	17:1	7	purple_connection_update_progress
LEAF_NODE	17:34	17:34	6	(
ARGUMENT	17:35	17:35	6	gc
FIELD	17:35	17:35	7	gc
LEAF_NODE	17:35	17:35	8	gc
LEAF_NODE	17:37	17:37	6	,
ARGUMENT	17:39	17:39	6	_ ( "Authenticating..." )
FUNCTION_CALL	17:39	17:60	7	_ ( "Authenticating..." )
CALLEE	17:39	17:39	8	_
LEAF_NODE	17:39	17:39	9	_
LEAF_NODE	17:40	17:40	8	(
ARGUMENT	17:41	17:41	8	"Authenticating..."
FIELD	17:41	17:41	9	"Authenticating..."
LEAF_NODE	17:41	17:41	10	"Authenticating..."
LEAF_NODE	17:60	17:60	8	)
LEAF_NODE	17:61	17:61	6	,
ARGUMENT	18:9	18:9	6	2
FIELD	18:9	18:9	7	2
LEAF_NODE	18:9	18:9	8	2
LEAF_NODE	18:10	18:10	6	,
ARGUMENT	18:12	18:12	6	NOVELL_CONNECT_STEPS
FIELD	18:12	18:12	7	NOVELL_CONNECT_STEPS
LEAF_NODE	18:12	18:12	8	NOVELL_CONNECT_STEPS
LEAF_NODE	18:32	18:32	6	)
LEAF_NODE	18:33	18:33	4	;
EXPR_STATEMENT	19:1	19:44	3	my_addr = purple_network_get_my_ip ( gsc -> fd ) ;
EXPR	19:1	19:1	4	my_addr = purple_network_get_my_ip ( gsc -> fd )
ASSIGN	19:1	19:11	5	my_addr = purple_network_get_my_ip ( gsc -> fd )
LVAL	19:1	19:1	6	my_addr
FIELD	19:1	19:1	7	my_addr
LEAF_NODE	19:1	19:1	8	my_addr
ASSIGN_OP	19:9	19:9	6	=
LEAF_NODE	19:9	19:9	7	=
RVAL	19:11	19:11	6	purple_network_get_my_ip ( gsc -> fd )
FUNCTION_CALL	19:11	19:43	7	purple_network_get_my_ip ( gsc -> fd )
CALLEE	19:11	19:11	8	purple_network_get_my_ip
LEAF_NODE	19:11	19:11	9	purple_network_get_my_ip
LEAF_NODE	19:35	19:35	8	(
ARGUMENT	19:36	19:36	8	gsc -> fd
FIELD	19:36	19:41	9	gsc -> fd
LEAF_NODE	19:36	19:36	10	gsc
LEAF_NODE	19:39	19:39	10	->
LEAF_NODE	19:41	19:41	10	fd
LEAF_NODE	19:43	19:43	8	)
LEAF_NODE	19:44	19:44	4	;
EXPR_STATEMENT	20:1	20:41	3	pwd = purple_connection_get_password ( gc ) ;
EXPR	20:1	20:1	4	pwd = purple_connection_get_password ( gc )
ASSIGN	20:1	20:7	5	pwd = purple_connection_get_password ( gc )
LVAL	20:1	20:1	6	pwd
FIELD	20:1	20:1	7	pwd
LEAF_NODE	20:1	20:1	8	pwd
ASSIGN_OP	20:5	20:5	6	=
LEAF_NODE	20:5	20:5	7	=
RVAL	20:7	20:7	6	purple_connection_get_password ( gc )
FUNCTION_CALL	20:7	20:40	7	purple_connection_get_password ( gc )
CALLEE	20:7	20:7	8	purple_connection_get_password
LEAF_NODE	20:7	20:7	9	purple_connection_get_password
LEAF_NODE	20:37	20:37	8	(
ARGUMENT	20:38	20:38	8	gc
FIELD	20:38	20:38	9	gc
LEAF_NODE	20:38	20:38	10	gc
LEAF_NODE	20:40	20:40	8	)
LEAF_NODE	20:41	20:41	4	;
EXPR_STATEMENT	21:1	21:26	3	ua = _user_agent_string ( ) ;
EXPR	21:1	21:1	4	ua = _user_agent_string ( )
ASSIGN	21:1	21:6	5	ua = _user_agent_string ( )
LVAL	21:1	21:1	6	ua
FIELD	21:1	21:1	7	ua
LEAF_NODE	21:1	21:1	8	ua
ASSIGN_OP	21:4	21:4	6	=
LEAF_NODE	21:4	21:4	7	=
RVAL	21:6	21:6	6	_user_agent_string ( )
FUNCTION_CALL	21:6	21:25	7	_user_agent_string ( )
CALLEE	21:6	21:6	8	_user_agent_string
LEAF_NODE	21:6	21:6	9	_user_agent_string
LEAF_NODE	21:24	21:24	8	(
LEAF_NODE	21:25	21:25	8	)
LEAF_NODE	21:26	21:26	4	;
EXPR_STATEMENT	22:1	22:65	3	rc = nm_send_login ( user , pwd , my_addr , ua , _login_resp_cb , NULL ) ;
EXPR	22:1	22:1	4	rc = nm_send_login ( user , pwd , my_addr , ua , _login_resp_cb , NULL )
ASSIGN	22:1	22:6	5	rc = nm_send_login ( user , pwd , my_addr , ua , _login_resp_cb , NULL )
LVAL	22:1	22:1	6	rc
FIELD	22:1	22:1	7	rc
LEAF_NODE	22:1	22:1	8	rc
ASSIGN_OP	22:4	22:4	6	=
LEAF_NODE	22:4	22:4	7	=
RVAL	22:6	22:6	6	nm_send_login ( user , pwd , my_addr , ua , _login_resp_cb , NULL )
FUNCTION_CALL	22:6	22:64	7	nm_send_login ( user , pwd , my_addr , ua , _login_resp_cb , NULL )
CALLEE	22:6	22:6	8	nm_send_login
LEAF_NODE	22:6	22:6	9	nm_send_login
LEAF_NODE	22:19	22:19	8	(
ARGUMENT	22:20	22:20	8	user
FIELD	22:20	22:20	9	user
LEAF_NODE	22:20	22:20	10	user
LEAF_NODE	22:24	22:24	8	,
ARGUMENT	22:26	22:26	8	pwd
FIELD	22:26	22:26	9	pwd
LEAF_NODE	22:26	22:26	10	pwd
LEAF_NODE	22:29	22:29	8	,
ARGUMENT	22:31	22:31	8	my_addr
FIELD	22:31	22:31	9	my_addr
LEAF_NODE	22:31	22:31	10	my_addr
LEAF_NODE	22:38	22:38	8	,
ARGUMENT	22:40	22:40	8	ua
FIELD	22:40	22:40	9	ua
LEAF_NODE	22:40	22:40	10	ua
LEAF_NODE	22:42	22:42	8	,
ARGUMENT	22:44	22:44	8	_login_resp_cb
FIELD	22:44	22:44	9	_login_resp_cb
LEAF_NODE	22:44	22:44	10	_login_resp_cb
LEAF_NODE	22:58	22:58	8	,
ARGUMENT	22:60	22:60	8	NULL
FIELD	22:60	22:60	9	NULL
LEAF_NODE	22:60	22:60	10	NULL
LEAF_NODE	22:64	22:64	8	)
LEAF_NODE	22:65	22:65	4	;
SELECTION	23:1	23:18	3	
KEYWORD	23:1	23:1	4	if
LEAF_NODE	23:1	23:1	5	if
LEAF_NODE	23:4	23:4	4	(
CONDITION	23:5	23:5	4	rc == NM_OK
EXPR	23:5	23:11	5	rc == NM_OK
FIELD	23:5	23:5	6	rc
LEAF_NODE	23:5	23:5	7	rc
EQ_OPERATOR	23:8	23:8	6	==
LEAF_NODE	23:8	23:8	7	==
FIELD	23:11	23:11	6	NM_OK
LEAF_NODE	23:11	23:11	7	NM_OK
LEAF_NODE	23:16	23:16	4	)
STATEMENTS	23:18	26:1	4	
LEAF_NODE	23:18	23:18	5	{
STATEMENTS	24:2	25:2	5	
EXPR_STATEMENT	24:2	24:24	6	conn -> connected = TRUE ;
EXPR	24:2	24:2	7	conn -> connected = TRUE
ASSIGN	24:2	24:20	8	conn -> connected = TRUE
LVAL	24:2	24:2	9	conn -> connected
FIELD	24:2	24:8	10	conn -> connected
LEAF_NODE	24:2	24:2	11	conn
LEAF_NODE	24:6	24:6	11	->
LEAF_NODE	24:8	24:8	11	connected
ASSIGN_OP	24:18	24:18	9	=
LEAF_NODE	24:18	24:18	10	=
RVAL	24:20	24:20	9	TRUE
FIELD	24:20	24:20	10	TRUE
LEAF_NODE	24:20	24:20	11	TRUE
LEAF_NODE	24:24	24:24	7	;
EXPR_STATEMENT	25:2	25:51	6	purple_ssl_input_add ( gsc , novell_ssl_recv_cb , gc ) ;
EXPR	25:2	25:2	7	purple_ssl_input_add ( gsc , novell_ssl_recv_cb , gc )
FUNCTION_CALL	25:2	25:50	8	purple_ssl_input_add ( gsc , novell_ssl_recv_cb , gc )
CALLEE	25:2	25:2	9	purple_ssl_input_add
LEAF_NODE	25:2	25:2	10	purple_ssl_input_add
LEAF_NODE	25:22	25:22	9	(
ARGUMENT	25:23	25:23	9	gsc
FIELD	25:23	25:23	10	gsc
LEAF_NODE	25:23	25:23	11	gsc
LEAF_NODE	25:26	25:26	9	,
ARGUMENT	25:28	25:28	9	novell_ssl_recv_cb
FIELD	25:28	25:28	10	novell_ssl_recv_cb
LEAF_NODE	25:28	25:28	11	novell_ssl_recv_cb
LEAF_NODE	25:46	25:46	9	,
ARGUMENT	25:48	25:48	9	gc
FIELD	25:48	25:48	10	gc
LEAF_NODE	25:48	25:48	11	gc
LEAF_NODE	25:50	25:50	9	)
LEAF_NODE	25:51	25:51	7	;
LEAF_NODE	26:1	26:1	5	}
SELECTION	26:3	26:8	3	
KEYWORD	26:3	26:3	4	else
LEAF_NODE	26:3	26:3	5	else
STATEMENTS	26:8	30:1	4	
LEAF_NODE	26:8	26:8	5	{
STATEMENTS	27:2	27:2	5	
EXPR_STATEMENT	27:2	29:26	6	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , _ ( "Unable to connect" ) ) ;
EXPR	27:2	27:2	7	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , _ ( "Unable to connect" ) )
FUNCTION_CALL	27:2	29:25	8	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , _ ( "Unable to connect" ) )
CALLEE	27:2	27:2	9	purple_connection_error_reason
LEAF_NODE	27:2	27:2	10	purple_connection_error_reason
LEAF_NODE	27:32	27:32	9	(
ARGUMENT	27:33	27:33	9	gc
FIELD	27:33	27:33	10	gc
LEAF_NODE	27:33	27:33	11	gc
LEAF_NODE	27:35	27:35	9	,
ARGUMENT	28:3	28:3	9	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
FIELD	28:3	28:3	10	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	28:3	28:3	11	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	28:40	28:40	9	,
ARGUMENT	29:3	29:3	9	_ ( "Unable to connect" )
FUNCTION_CALL	29:3	29:24	10	_ ( "Unable to connect" )
CALLEE	29:3	29:3	11	_
LEAF_NODE	29:3	29:3	12	_
LEAF_NODE	29:4	29:4	11	(
ARGUMENT	29:5	29:5	11	"Unable to connect"
FIELD	29:5	29:5	12	"Unable to connect"
LEAF_NODE	29:5	29:5	13	"Unable to connect"
LEAF_NODE	29:24	29:24	11	)
LEAF_NODE	29:25	29:25	9	)
LEAF_NODE	29:26	29:26	7	;
LEAF_NODE	30:1	30:1	5	}
EXPR_STATEMENT	31:1	32:33	3	purple_connection_update_progress ( gc , _ ( "Waiting for response..." ) , 3 , NOVELL_CONNECT_STEPS ) ;
EXPR	31:1	31:1	4	purple_connection_update_progress ( gc , _ ( "Waiting for response..." ) , 3 , NOVELL_CONNECT_STEPS )
FUNCTION_CALL	31:1	32:32	5	purple_connection_update_progress ( gc , _ ( "Waiting for response..." ) , 3 , NOVELL_CONNECT_STEPS )
CALLEE	31:1	31:1	6	purple_connection_update_progress
LEAF_NODE	31:1	31:1	7	purple_connection_update_progress
LEAF_NODE	31:34	31:34	6	(
ARGUMENT	31:35	31:35	6	gc
FIELD	31:35	31:35	7	gc
LEAF_NODE	31:35	31:35	8	gc
LEAF_NODE	31:37	31:37	6	,
ARGUMENT	31:39	31:39	6	_ ( "Waiting for response..." )
FUNCTION_CALL	31:39	31:66	7	_ ( "Waiting for response..." )
CALLEE	31:39	31:39	8	_
LEAF_NODE	31:39	31:39	9	_
LEAF_NODE	31:40	31:40	8	(
ARGUMENT	31:41	31:41	8	"Waiting for response..."
FIELD	31:41	31:41	9	"Waiting for response..."
LEAF_NODE	31:41	31:41	10	"Waiting for response..."
LEAF_NODE	31:66	31:66	8	)
LEAF_NODE	31:67	31:67	6	,
ARGUMENT	32:9	32:9	6	3
FIELD	32:9	32:9	7	3
LEAF_NODE	32:9	32:9	8	3
LEAF_NODE	32:10	32:10	6	,
ARGUMENT	32:12	32:12	6	NOVELL_CONNECT_STEPS
FIELD	32:12	32:12	7	NOVELL_CONNECT_STEPS
LEAF_NODE	32:12	32:12	8	NOVELL_CONNECT_STEPS
LEAF_NODE	32:32	32:32	6	)
LEAF_NODE	32:33	32:33	4	;
EXPR_STATEMENT	33:1	33:11	3	g_free ( ua ) ;
EXPR	33:1	33:1	4	g_free ( ua )
FUNCTION_CALL	33:1	33:10	5	g_free ( ua )
CALLEE	33:1	33:1	6	g_free
LEAF_NODE	33:1	33:1	7	g_free
LEAF_NODE	33:7	33:7	6	(
ARGUMENT	33:8	33:8	6	ua
FIELD	33:8	33:8	7	ua
LEAF_NODE	33:8	33:8	8	ua
LEAF_NODE	33:10	33:10	6	)
LEAF_NODE	33:11	33:11	4	;
LEAF_NODE	34:0	34:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	31:0	1	
RETURN_TYPE	1:0	1:0	2	int
TYPE_NAME	1:0	1:0	3	int
LEAF_NODE	1:0	1:0	4	int
FUNCTION_NAME	2:0	2:0	2	aim_chat_join
LEAF_NODE	2:0	2:0	3	aim_chat_join
PARAMETER_LIST	2:13	2:85	2	( OscarData * od , guint16 exchange , const char * roomname , guint16 instance )
LEAF_NODE	2:13	2:13	3	(
PARAMETER_DECL	2:14	2:25	3	OscarData * od
TYPE	2:14	2:24	4	OscarData *
TYPE_NAME	2:14	2:14	5	OscarData
LEAF_NODE	2:14	2:14	6	OscarData
POINTER	2:24	2:24	5	*
LEAF_NODE	2:24	2:24	6	*
NAME	2:25	2:25	4	od
LEAF_NODE	2:25	2:25	5	od
LEAF_NODE	2:27	2:27	3	,
PARAMETER_DECL	2:29	2:37	3	guint16 exchange
TYPE	2:29	2:29	4	guint16
TYPE_NAME	2:29	2:29	5	guint16
LEAF_NODE	2:29	2:29	6	guint16
NAME	2:37	2:37	4	exchange
LEAF_NODE	2:37	2:37	5	exchange
LEAF_NODE	2:45	2:45	3	,
PARAMETER_DECL	2:47	2:59	3	const char * roomname
TYPE	2:47	2:58	4	const char *
TYPE_NAME	2:47	2:53	5	const char
LEAF_NODE	2:47	2:47	6	const
LEAF_NODE	2:53	2:53	6	char
POINTER	2:58	2:58	5	*
LEAF_NODE	2:58	2:58	6	*
NAME	2:59	2:59	4	roomname
LEAF_NODE	2:59	2:59	5	roomname
LEAF_NODE	2:67	2:67	3	,
PARAMETER_DECL	2:69	2:77	3	guint16 instance
TYPE	2:69	2:69	4	guint16
TYPE_NAME	2:69	2:69	5	guint16
LEAF_NODE	2:69	2:69	6	guint16
NAME	2:77	2:77	4	instance
LEAF_NODE	2:77	2:77	5	instance
LEAF_NODE	2:85	2:85	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	30:1	2	
SIMPLE_DECL	4:1	4:21	3	FlapConnection * conn ;
VAR_DECL	4:1	4:17	4	FlapConnection * conn
TYPE	4:1	4:16	5	FlapConnection *
TYPE_NAME	4:1	4:1	6	FlapConnection
LEAF_NODE	4:1	4:1	7	FlapConnection
POINTER	4:16	4:16	6	*
LEAF_NODE	4:16	4:16	7	*
NAME	4:17	4:17	5	conn
LEAF_NODE	4:17	4:17	6	conn
LEAF_NODE	4:21	4:21	4	;
SIMPLE_DECL	5:1	5:14	3	ByteStream bs ;
VAR_DECL	5:1	5:12	4	ByteStream bs
TYPE	5:1	5:1	5	ByteStream
TYPE_NAME	5:1	5:1	6	ByteStream
LEAF_NODE	5:1	5:1	7	ByteStream
NAME	5:12	5:12	5	bs
LEAF_NODE	5:12	5:12	6	bs
LEAF_NODE	5:14	5:14	4	;
SIMPLE_DECL	6:1	6:20	3	aim_snacid_t snacid ;
VAR_DECL	6:1	6:14	4	aim_snacid_t snacid
TYPE	6:1	6:1	5	aim_snacid_t
TYPE_NAME	6:1	6:1	6	aim_snacid_t
LEAF_NODE	6:1	6:1	7	aim_snacid_t
NAME	6:14	6:14	5	snacid
LEAF_NODE	6:14	6:14	6	snacid
LEAF_NODE	6:20	6:20	4	;
SIMPLE_DECL	7:1	7:23	3	GSList * tlvlist ; tlvlist = NULL ;
VAR_DECL	7:1	7:9	4	GSList * tlvlist ; tlvlist = NULL
TYPE	7:1	7:8	5	GSList *
TYPE_NAME	7:1	7:1	6	GSList
LEAF_NODE	7:1	7:1	7	GSList
POINTER	7:8	7:8	6	*
LEAF_NODE	7:8	7:8	7	*
NAME	7:9	7:9	5	tlvlist
LEAF_NODE	7:9	7:9	6	tlvlist
LEAF_NODE	0:0	0:0	5	;
INIT	7:9	7:9	5	tlvlist = NULL
ASSIGN	7:9	7:19	6	tlvlist = NULL
LVAL	7:9	7:9	7	tlvlist
NAME	7:9	7:9	8	tlvlist
LEAF_NODE	7:9	7:9	9	tlvlist
ASSIGN_OP	7:17	7:17	7	=
LEAF_NODE	7:17	7:17	8	=
RVAL	7:19	7:19	7	NULL
FIELD	7:19	7:19	8	NULL
LEAF_NODE	7:19	7:19	9	NULL
LEAF_NODE	7:23	7:23	4	;
SIMPLE_DECL	8:1	8:24	3	struct chatsnacinfo csi ;
VAR_DECL	8:1	8:21	4	struct chatsnacinfo csi
TYPE	8:1	8:1	5	struct chatsnacinfo
TYPE_NAME	8:1	8:8	6	struct chatsnacinfo
LEAF_NODE	8:1	8:1	7	struct
LEAF_NODE	8:8	8:8	7	chatsnacinfo
NAME	8:21	8:21	5	csi
LEAF_NODE	8:21	8:21	6	csi
LEAF_NODE	8:24	8:24	4	;
EXPR_STATEMENT	9:1	9:56	3	conn = flap_connection_findbygroup ( od , SNAC_FAMILY_BOS ) ;
EXPR	9:1	9:1	4	conn = flap_connection_findbygroup ( od , SNAC_FAMILY_BOS )
ASSIGN	9:1	9:8	5	conn = flap_connection_findbygroup ( od , SNAC_FAMILY_BOS )
LVAL	9:1	9:1	6	conn
FIELD	9:1	9:1	7	conn
LEAF_NODE	9:1	9:1	8	conn
ASSIGN_OP	9:6	9:6	6	=
LEAF_NODE	9:6	9:6	7	=
RVAL	9:8	9:8	6	flap_connection_findbygroup ( od , SNAC_FAMILY_BOS )
FUNCTION_CALL	9:8	9:55	7	flap_connection_findbygroup ( od , SNAC_FAMILY_BOS )
CALLEE	9:8	9:8	8	flap_connection_findbygroup
LEAF_NODE	9:8	9:8	9	flap_connection_findbygroup
LEAF_NODE	9:35	9:35	8	(
ARGUMENT	9:36	9:36	8	od
FIELD	9:36	9:36	9	od
LEAF_NODE	9:36	9:36	10	od
LEAF_NODE	9:38	9:38	8	,
ARGUMENT	9:40	9:40	8	SNAC_FAMILY_BOS
FIELD	9:40	9:40	9	SNAC_FAMILY_BOS
LEAF_NODE	9:40	9:40	10	SNAC_FAMILY_BOS
LEAF_NODE	9:55	9:55	8	)
LEAF_NODE	9:56	9:56	4	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	! conn || ! roomname || roomname [ 0 ] == '\0'
EXPR	10:5	10:5	5	! conn || ! roomname || roomname [ 0 ] == '\0'
OR	10:5	10:14	6	! conn || ! roomname || roomname [ 0 ] == '\0'
EXPR	10:5	10:5	7	! conn
UNARY_EXPR	10:5	10:6	8	! conn
UNARY_OPERATOR	10:5	10:5	9	!
LEAF_NODE	10:5	10:5	10	!
FIELD	10:6	10:6	9	conn
LEAF_NODE	10:6	10:6	10	conn
LEAF_NODE	10:11	10:11	7	||
EXPR	10:14	10:14	7	! roomname || roomname [ 0 ] == '\0'
OR	10:14	10:27	8	! roomname || roomname [ 0 ] == '\0'
EXPR	10:14	10:14	9	! roomname
UNARY_EXPR	10:14	10:15	10	! roomname
UNARY_OPERATOR	10:14	10:14	11	!
LEAF_NODE	10:14	10:14	12	!
FIELD	10:15	10:15	11	roomname
LEAF_NODE	10:15	10:15	12	roomname
LEAF_NODE	10:24	10:24	9	||
EXPR	10:27	10:42	9	roomname [ 0 ] == '\0'
FIELD	10:27	10:37	10	roomname [ 0 ]
LEAF_NODE	10:27	10:27	11	roomname
LEAF_NODE	10:35	10:35	11	[
EXPR	10:36	10:36	11	0
FIELD	10:36	10:36	12	0
LEAF_NODE	10:36	10:36	13	0
LEAF_NODE	10:37	10:37	11	]
EQ_OPERATOR	10:39	10:39	10	==
LEAF_NODE	10:39	10:39	11	==
FIELD	10:42	10:42	10	'\0'
LEAF_NODE	10:42	10:42	11	'\0'
LEAF_NODE	10:46	10:46	4	)
STATEMENTS	11:2	11:2	4	
JUMP_STATEMENT	11:2	11:16	5	return - EINVAL ;
KEYWORD	11:2	11:2	6	return
LEAF_NODE	11:2	11:2	7	return
DESTINATION	11:9	11:9	6	- EINVAL
EXPR	11:9	11:9	7	- EINVAL
UNARY_EXPR	11:9	11:10	8	- EINVAL
UNARY_OPERATOR	11:9	11:9	9	-
LEAF_NODE	11:9	11:9	10	-
FIELD	11:10	11:10	9	EINVAL
LEAF_NODE	11:10	11:10	10	EINVAL
LEAF_NODE	11:16	11:16	6	;
EXPR_STATEMENT	12:1	12:26	3	byte_stream_new ( & bs , 506 ) ;
EXPR	12:1	12:1	4	byte_stream_new ( & bs , 506 )
FUNCTION_CALL	12:1	12:25	5	byte_stream_new ( & bs , 506 )
CALLEE	12:1	12:1	6	byte_stream_new
LEAF_NODE	12:1	12:1	7	byte_stream_new
LEAF_NODE	12:16	12:16	6	(
ARGUMENT	12:17	12:17	6	& bs
UNARY_EXPR	12:17	12:18	7	& bs
UNARY_OPERATOR	12:17	12:17	8	&
LEAF_NODE	12:17	12:17	9	&
FIELD	12:18	12:18	8	bs
LEAF_NODE	12:18	12:18	9	bs
LEAF_NODE	12:20	12:20	6	,
ARGUMENT	12:22	12:22	6	506
FIELD	12:22	12:22	7	506
LEAF_NODE	12:22	12:22	8	506
LEAF_NODE	12:25	12:25	6	)
LEAF_NODE	12:26	12:26	4	;
EXPR_STATEMENT	13:1	13:29	3	memset ( & csi , 0 , sizeof ( csi ) ) ;
EXPR	13:1	13:1	4	memset ( & csi , 0 , sizeof ( csi ) )
FUNCTION_CALL	13:1	13:28	5	memset ( & csi , 0 , sizeof ( csi ) )
CALLEE	13:1	13:1	6	memset
LEAF_NODE	13:1	13:1	7	memset
LEAF_NODE	13:7	13:7	6	(
ARGUMENT	13:8	13:8	6	& csi
UNARY_EXPR	13:8	13:9	7	& csi
UNARY_OPERATOR	13:8	13:8	8	&
LEAF_NODE	13:8	13:8	9	&
FIELD	13:9	13:9	8	csi
LEAF_NODE	13:9	13:9	9	csi
LEAF_NODE	13:12	13:12	6	,
ARGUMENT	13:14	13:14	6	0
FIELD	13:14	13:14	7	0
LEAF_NODE	13:14	13:14	8	0
LEAF_NODE	13:15	13:15	6	,
ARGUMENT	13:17	13:17	6	sizeof ( csi )
FUNCTION_CALL	13:17	13:27	7	sizeof ( csi )
CALLEE	13:17	13:17	8	sizeof
LEAF_NODE	13:17	13:17	9	sizeof
LEAF_NODE	13:23	13:23	8	(
ARGUMENT	13:24	13:24	8	csi
FIELD	13:24	13:24	9	csi
LEAF_NODE	13:24	13:24	10	csi
LEAF_NODE	13:27	13:27	8	)
LEAF_NODE	13:28	13:28	6	)
LEAF_NODE	13:29	13:29	4	;
EXPR_STATEMENT	14:1	14:24	3	csi . exchange = exchange ;
EXPR	14:1	14:1	4	csi . exchange = exchange
ASSIGN	14:1	14:16	5	csi . exchange = exchange
LVAL	14:1	14:1	6	csi . exchange
FIELD	14:1	14:5	7	csi . exchange
LEAF_NODE	14:1	14:1	8	csi
LEAF_NODE	14:4	14:4	8	.
LEAF_NODE	14:5	14:5	8	exchange
ASSIGN_OP	14:14	14:14	6	=
LEAF_NODE	14:14	14:14	7	=
RVAL	14:16	14:16	6	exchange
FIELD	14:16	14:16	7	exchange
LEAF_NODE	14:16	14:16	8	exchange
LEAF_NODE	14:24	14:24	4	;
EXPR_STATEMENT	15:1	15:48	3	g_strlcpy ( csi . name , roomname , sizeof ( csi . name ) ) ;
EXPR	15:1	15:1	4	g_strlcpy ( csi . name , roomname , sizeof ( csi . name ) )
FUNCTION_CALL	15:1	15:47	5	g_strlcpy ( csi . name , roomname , sizeof ( csi . name ) )
CALLEE	15:1	15:1	6	g_strlcpy
LEAF_NODE	15:1	15:1	7	g_strlcpy
LEAF_NODE	15:10	15:10	6	(
ARGUMENT	15:11	15:11	6	csi . name
FIELD	15:11	15:15	7	csi . name
LEAF_NODE	15:11	15:11	8	csi
LEAF_NODE	15:14	15:14	8	.
LEAF_NODE	15:15	15:15	8	name
LEAF_NODE	15:19	15:19	6	,
ARGUMENT	15:21	15:21	6	roomname
FIELD	15:21	15:21	7	roomname
LEAF_NODE	15:21	15:21	8	roomname
LEAF_NODE	15:29	15:29	6	,
ARGUMENT	15:31	15:31	6	sizeof ( csi . name )
FUNCTION_CALL	15:31	15:46	7	sizeof ( csi . name )
CALLEE	15:31	15:31	8	sizeof
LEAF_NODE	15:31	15:31	9	sizeof
LEAF_NODE	15:37	15:37	8	(
ARGUMENT	15:38	15:38	8	csi . name
FIELD	15:38	15:42	9	csi . name
LEAF_NODE	15:38	15:38	10	csi
LEAF_NODE	15:41	15:41	10	.
LEAF_NODE	15:42	15:42	10	name
LEAF_NODE	15:46	15:46	8	)
LEAF_NODE	15:47	15:47	6	)
LEAF_NODE	15:48	15:48	4	;
EXPR_STATEMENT	16:1	16:24	3	csi . instance = instance ;
EXPR	16:1	16:1	4	csi . instance = instance
ASSIGN	16:1	16:16	5	csi . instance = instance
LVAL	16:1	16:1	6	csi . instance
FIELD	16:1	16:5	7	csi . instance
LEAF_NODE	16:1	16:1	8	csi
LEAF_NODE	16:4	16:4	8	.
LEAF_NODE	16:5	16:5	8	instance
ASSIGN_OP	16:14	16:14	6	=
LEAF_NODE	16:14	16:14	7	=
RVAL	16:16	16:16	6	instance
FIELD	16:16	16:16	7	instance
LEAF_NODE	16:16	16:16	8	instance
LEAF_NODE	16:24	16:24	4	;
EXPR_STATEMENT	20:1	20:31	3	byte_stream_put16 ( & bs , 0x000e ) ;
EXPR	20:1	20:1	4	byte_stream_put16 ( & bs , 0x000e )
FUNCTION_CALL	20:1	20:30	5	byte_stream_put16 ( & bs , 0x000e )
CALLEE	20:1	20:1	6	byte_stream_put16
LEAF_NODE	20:1	20:1	7	byte_stream_put16
LEAF_NODE	20:18	20:18	6	(
ARGUMENT	20:19	20:19	6	& bs
UNARY_EXPR	20:19	20:20	7	& bs
UNARY_OPERATOR	20:19	20:19	8	&
LEAF_NODE	20:19	20:19	9	&
FIELD	20:20	20:20	8	bs
LEAF_NODE	20:20	20:20	9	bs
LEAF_NODE	20:22	20:22	6	,
ARGUMENT	20:24	20:24	6	0x000e
FIELD	20:24	20:24	7	0x000e
LEAF_NODE	20:24	20:24	8	0x000e
LEAF_NODE	20:30	20:30	6	)
LEAF_NODE	20:31	20:31	4	;
EXPR_STATEMENT	21:1	21:73	3	aim_tlvlist_add_chatroom ( & tlvlist , 0x0001 , exchange , roomname , instance ) ;
EXPR	21:1	21:1	4	aim_tlvlist_add_chatroom ( & tlvlist , 0x0001 , exchange , roomname , instance )
FUNCTION_CALL	21:1	21:72	5	aim_tlvlist_add_chatroom ( & tlvlist , 0x0001 , exchange , roomname , instance )
CALLEE	21:1	21:1	6	aim_tlvlist_add_chatroom
LEAF_NODE	21:1	21:1	7	aim_tlvlist_add_chatroom
LEAF_NODE	21:25	21:25	6	(
ARGUMENT	21:26	21:26	6	& tlvlist
UNARY_EXPR	21:26	21:27	7	& tlvlist
UNARY_OPERATOR	21:26	21:26	8	&
LEAF_NODE	21:26	21:26	9	&
FIELD	21:27	21:27	8	tlvlist
LEAF_NODE	21:27	21:27	9	tlvlist
LEAF_NODE	21:34	21:34	6	,
ARGUMENT	21:36	21:36	6	0x0001
FIELD	21:36	21:36	7	0x0001
LEAF_NODE	21:36	21:36	8	0x0001
LEAF_NODE	21:42	21:42	6	,
ARGUMENT	21:44	21:44	6	exchange
FIELD	21:44	21:44	7	exchange
LEAF_NODE	21:44	21:44	8	exchange
LEAF_NODE	21:52	21:52	6	,
ARGUMENT	21:54	21:54	6	roomname
FIELD	21:54	21:54	7	roomname
LEAF_NODE	21:54	21:54	8	roomname
LEAF_NODE	21:62	21:62	6	,
ARGUMENT	21:64	21:64	6	instance
FIELD	21:64	21:64	7	instance
LEAF_NODE	21:64	21:64	8	instance
LEAF_NODE	21:72	21:72	6	)
LEAF_NODE	21:73	21:73	4	;
SELECTION	22:1	24:2	3	
KEYWORD	22:1	22:1	4	if
LEAF_NODE	22:1	22:1	5	if
LEAF_NODE	22:4	22:4	4	(
CONDITION	22:5	22:5	4	od -> use_ssl
EXPR	22:5	22:5	5	od -> use_ssl
FIELD	22:5	22:9	6	od -> use_ssl
LEAF_NODE	22:5	22:5	7	od
LEAF_NODE	22:7	22:7	7	->
LEAF_NODE	22:9	22:9	7	use_ssl
LEAF_NODE	22:16	22:16	4	)
STATEMENTS	24:2	24:2	4	
EXPR_STATEMENT	24:2	24:41	5	aim_tlvlist_add_noval ( & tlvlist , 0x008c ) ;
EXPR	24:2	24:2	6	aim_tlvlist_add_noval ( & tlvlist , 0x008c )
FUNCTION_CALL	24:2	24:40	7	aim_tlvlist_add_noval ( & tlvlist , 0x008c )
CALLEE	24:2	24:2	8	aim_tlvlist_add_noval
LEAF_NODE	24:2	24:2	9	aim_tlvlist_add_noval
LEAF_NODE	24:23	24:23	8	(
ARGUMENT	24:24	24:24	8	& tlvlist
UNARY_EXPR	24:24	24:25	9	& tlvlist
UNARY_OPERATOR	24:24	24:24	10	&
LEAF_NODE	24:24	24:24	11	&
FIELD	24:25	24:25	10	tlvlist
LEAF_NODE	24:25	24:25	11	tlvlist
LEAF_NODE	24:32	24:32	8	,
ARGUMENT	24:34	24:34	8	0x008c
FIELD	24:34	24:34	9	0x008c
LEAF_NODE	24:34	24:34	10	0x008c
LEAF_NODE	24:40	24:40	8	)
LEAF_NODE	24:41	24:41	6	;
EXPR_STATEMENT	25:1	25:33	3	aim_tlvlist_write ( & bs , & tlvlist ) ;
EXPR	25:1	25:1	4	aim_tlvlist_write ( & bs , & tlvlist )
FUNCTION_CALL	25:1	25:32	5	aim_tlvlist_write ( & bs , & tlvlist )
CALLEE	25:1	25:1	6	aim_tlvlist_write
LEAF_NODE	25:1	25:1	7	aim_tlvlist_write
LEAF_NODE	25:18	25:18	6	(
ARGUMENT	25:19	25:19	6	& bs
UNARY_EXPR	25:19	25:20	7	& bs
UNARY_OPERATOR	25:19	25:19	8	&
LEAF_NODE	25:19	25:19	9	&
FIELD	25:20	25:20	8	bs
LEAF_NODE	25:20	25:20	9	bs
LEAF_NODE	25:22	25:22	6	,
ARGUMENT	25:24	25:24	6	& tlvlist
UNARY_EXPR	25:24	25:25	7	& tlvlist
UNARY_OPERATOR	25:24	25:24	8	&
LEAF_NODE	25:24	25:24	9	&
FIELD	25:25	25:25	8	tlvlist
LEAF_NODE	25:25	25:25	9	tlvlist
LEAF_NODE	25:32	25:32	6	)
LEAF_NODE	25:33	25:33	4	;
EXPR_STATEMENT	26:1	26:26	3	aim_tlvlist_free ( tlvlist ) ;
EXPR	26:1	26:1	4	aim_tlvlist_free ( tlvlist )
FUNCTION_CALL	26:1	26:25	5	aim_tlvlist_free ( tlvlist )
CALLEE	26:1	26:1	6	aim_tlvlist_free
LEAF_NODE	26:1	26:1	7	aim_tlvlist_free
LEAF_NODE	26:17	26:17	6	(
ARGUMENT	26:18	26:18	6	tlvlist
FIELD	26:18	26:18	7	tlvlist
LEAF_NODE	26:18	26:18	8	tlvlist
LEAF_NODE	26:25	26:25	6	)
LEAF_NODE	26:26	26:26	4	;
EXPR_STATEMENT	27:1	27:84	3	snacid = aim_cachesnac ( od , SNAC_FAMILY_OSERVICE , 0x0004 , 0x0000 , & csi , sizeof ( csi ) ) ;
EXPR	27:1	27:1	4	snacid = aim_cachesnac ( od , SNAC_FAMILY_OSERVICE , 0x0004 , 0x0000 , & csi , sizeof ( csi ) )
ASSIGN	27:1	27:10	5	snacid = aim_cachesnac ( od , SNAC_FAMILY_OSERVICE , 0x0004 , 0x0000 , & csi , sizeof ( csi ) )
LVAL	27:1	27:1	6	snacid
FIELD	27:1	27:1	7	snacid
LEAF_NODE	27:1	27:1	8	snacid
ASSIGN_OP	27:8	27:8	6	=
LEAF_NODE	27:8	27:8	7	=
RVAL	27:10	27:10	6	aim_cachesnac ( od , SNAC_FAMILY_OSERVICE , 0x0004 , 0x0000 , & csi , sizeof ( csi ) )
FUNCTION_CALL	27:10	27:83	7	aim_cachesnac ( od , SNAC_FAMILY_OSERVICE , 0x0004 , 0x0000 , & csi , sizeof ( csi ) )
CALLEE	27:10	27:10	8	aim_cachesnac
LEAF_NODE	27:10	27:10	9	aim_cachesnac
LEAF_NODE	27:23	27:23	8	(
ARGUMENT	27:24	27:24	8	od
FIELD	27:24	27:24	9	od
LEAF_NODE	27:24	27:24	10	od
LEAF_NODE	27:26	27:26	8	,
ARGUMENT	27:28	27:28	8	SNAC_FAMILY_OSERVICE
FIELD	27:28	27:28	9	SNAC_FAMILY_OSERVICE
LEAF_NODE	27:28	27:28	10	SNAC_FAMILY_OSERVICE
LEAF_NODE	27:48	27:48	8	,
ARGUMENT	27:50	27:50	8	0x0004
FIELD	27:50	27:50	9	0x0004
LEAF_NODE	27:50	27:50	10	0x0004
LEAF_NODE	27:56	27:56	8	,
ARGUMENT	27:58	27:58	8	0x0000
FIELD	27:58	27:58	9	0x0000
LEAF_NODE	27:58	27:58	10	0x0000
LEAF_NODE	27:64	27:64	8	,
ARGUMENT	27:66	27:66	8	& csi
UNARY_EXPR	27:66	27:67	9	& csi
UNARY_OPERATOR	27:66	27:66	10	&
LEAF_NODE	27:66	27:66	11	&
FIELD	27:67	27:67	10	csi
LEAF_NODE	27:67	27:67	11	csi
LEAF_NODE	27:70	27:70	8	,
ARGUMENT	27:72	27:72	8	sizeof ( csi )
FUNCTION_CALL	27:72	27:82	9	sizeof ( csi )
CALLEE	27:72	27:72	10	sizeof
LEAF_NODE	27:72	27:72	11	sizeof
LEAF_NODE	27:78	27:78	10	(
ARGUMENT	27:79	27:79	10	csi
FIELD	27:79	27:79	11	csi
LEAF_NODE	27:79	27:79	12	csi
LEAF_NODE	27:82	27:82	10	)
LEAF_NODE	27:83	27:83	8	)
LEAF_NODE	27:84	27:84	4	;
EXPR_STATEMENT	28:1	28:79	3	flap_connection_send_snac ( od , conn , SNAC_FAMILY_OSERVICE , 0x0004 , snacid , & bs ) ;
EXPR	28:1	28:1	4	flap_connection_send_snac ( od , conn , SNAC_FAMILY_OSERVICE , 0x0004 , snacid , & bs )
FUNCTION_CALL	28:1	28:78	5	flap_connection_send_snac ( od , conn , SNAC_FAMILY_OSERVICE , 0x0004 , snacid , & bs )
CALLEE	28:1	28:1	6	flap_connection_send_snac
LEAF_NODE	28:1	28:1	7	flap_connection_send_snac
LEAF_NODE	28:26	28:26	6	(
ARGUMENT	28:27	28:27	6	od
FIELD	28:27	28:27	7	od
LEAF_NODE	28:27	28:27	8	od
LEAF_NODE	28:29	28:29	6	,
ARGUMENT	28:31	28:31	6	conn
FIELD	28:31	28:31	7	conn
LEAF_NODE	28:31	28:31	8	conn
LEAF_NODE	28:35	28:35	6	,
ARGUMENT	28:37	28:37	6	SNAC_FAMILY_OSERVICE
FIELD	28:37	28:37	7	SNAC_FAMILY_OSERVICE
LEAF_NODE	28:37	28:37	8	SNAC_FAMILY_OSERVICE
LEAF_NODE	28:57	28:57	6	,
ARGUMENT	28:59	28:59	6	0x0004
FIELD	28:59	28:59	7	0x0004
LEAF_NODE	28:59	28:59	8	0x0004
LEAF_NODE	28:65	28:65	6	,
ARGUMENT	28:67	28:67	6	snacid
FIELD	28:67	28:67	7	snacid
LEAF_NODE	28:67	28:67	8	snacid
LEAF_NODE	28:73	28:73	6	,
ARGUMENT	28:75	28:75	6	& bs
UNARY_EXPR	28:75	28:76	7	& bs
UNARY_OPERATOR	28:75	28:75	8	&
LEAF_NODE	28:75	28:75	9	&
FIELD	28:76	28:76	8	bs
LEAF_NODE	28:76	28:76	9	bs
LEAF_NODE	28:78	28:78	6	)
LEAF_NODE	28:79	28:79	4	;
EXPR_STATEMENT	29:1	29:25	3	byte_stream_destroy ( & bs ) ;
EXPR	29:1	29:1	4	byte_stream_destroy ( & bs )
FUNCTION_CALL	29:1	29:24	5	byte_stream_destroy ( & bs )
CALLEE	29:1	29:1	6	byte_stream_destroy
LEAF_NODE	29:1	29:1	7	byte_stream_destroy
LEAF_NODE	29:20	29:20	6	(
ARGUMENT	29:21	29:21	6	& bs
UNARY_EXPR	29:21	29:22	7	& bs
UNARY_OPERATOR	29:21	29:21	8	&
LEAF_NODE	29:21	29:21	9	&
FIELD	29:22	29:22	8	bs
LEAF_NODE	29:22	29:22	9	bs
LEAF_NODE	29:24	29:24	6	)
LEAF_NODE	29:25	29:25	4	;
JUMP_STATEMENT	30:1	30:9	3	return 0 ;
KEYWORD	30:1	30:1	4	return
LEAF_NODE	30:1	30:1	5	return
DESTINATION	30:8	30:8	4	0
EXPR	30:8	30:8	5	0
FIELD	30:8	30:8	6	0
LEAF_NODE	30:8	30:8	7	0
LEAF_NODE	30:9	30:9	4	;
LEAF_NODE	31:0	31:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:17	2	PurpleStatusType *
TYPE_NAME	1:0	1:0	3	PurpleStatusType
LEAF_NODE	1:0	1:0	4	PurpleStatusType
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	purple_status_get_type
LEAF_NODE	2:0	2:0	3	purple_status_get_type
PARAMETER_LIST	2:22	2:49	2	( const PurpleStatus * status )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:43	3	const PurpleStatus * status
TYPE	2:23	2:42	4	const PurpleStatus *
TYPE_NAME	2:23	2:29	5	const PurpleStatus
LEAF_NODE	2:23	2:23	6	const
LEAF_NODE	2:29	2:29	6	PurpleStatus
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	status
LEAF_NODE	2:43	2:43	5	status
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:43	3	g_return_val_if_fail ( status != NULL , NULL ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( status != NULL , NULL )
FUNCTION_CALL	4:1	4:42	5	g_return_val_if_fail ( status != NULL , NULL )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:32	6	status != NULL
FIELD	4:22	4:22	7	status
LEAF_NODE	4:22	4:22	8	status
EQ_OPERATOR	4:29	4:29	7	!=
LEAF_NODE	4:29	4:29	8	!=
FIELD	4:32	4:32	7	NULL
LEAF_NODE	4:32	4:32	8	NULL
LEAF_NODE	4:36	4:36	6	,
ARGUMENT	4:38	4:38	6	NULL
FIELD	4:38	4:38	7	NULL
LEAF_NODE	4:38	4:38	8	NULL
LEAF_NODE	4:42	4:42	6	)
LEAF_NODE	4:43	4:43	4	;
JUMP_STATEMENT	5:1	5:20	3	return status -> type ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	status -> type
EXPR	5:8	5:8	5	status -> type
FIELD	5:8	5:16	6	status -> type
LEAF_NODE	5:8	5:8	7	status
LEAF_NODE	5:14	5:14	7	->
LEAF_NODE	5:16	5:16	7	type
LEAF_NODE	5:20	5:20	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	31:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	pidgin_whiteboard_destroy
LEAF_NODE	2:12	2:12	3	pidgin_whiteboard_destroy
PARAMETER_LIST	2:37	2:58	2	( PurpleWhiteboard * wb )
LEAF_NODE	2:37	2:37	3	(
PARAMETER_DECL	2:38	2:56	3	PurpleWhiteboard * wb
TYPE	2:38	2:55	4	PurpleWhiteboard *
TYPE_NAME	2:38	2:38	5	PurpleWhiteboard
LEAF_NODE	2:38	2:38	6	PurpleWhiteboard
POINTER	2:55	2:55	5	*
LEAF_NODE	2:55	2:55	6	*
NAME	2:56	2:56	4	wb
LEAF_NODE	2:56	2:56	5	wb
LEAF_NODE	2:58	2:58	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	30:1	2	
SIMPLE_DECL	4:1	4:24	3	PidginWhiteboard * gtkwb ;
VAR_DECL	4:1	4:19	4	PidginWhiteboard * gtkwb
TYPE	4:1	4:18	5	PidginWhiteboard *
TYPE_NAME	4:1	4:1	6	PidginWhiteboard
LEAF_NODE	4:1	4:1	7	PidginWhiteboard
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	gtkwb
LEAF_NODE	4:19	4:19	6	gtkwb
LEAF_NODE	4:24	4:24	4	;
SIMPLE_DECL	5:1	5:25	3	GtkWidget * colour_dialog ;
VAR_DECL	5:1	5:12	4	GtkWidget * colour_dialog
TYPE	5:1	5:11	5	GtkWidget *
TYPE_NAME	5:1	5:1	6	GtkWidget
LEAF_NODE	5:1	5:1	7	GtkWidget
POINTER	5:11	5:11	6	*
LEAF_NODE	5:11	5:11	7	*
NAME	5:12	5:12	5	colour_dialog
LEAF_NODE	5:12	5:12	6	colour_dialog
LEAF_NODE	5:25	5:25	4	;
EXPR_STATEMENT	6:1	6:29	3	g_return_if_fail ( wb != NULL ) ;
EXPR	6:1	6:1	4	g_return_if_fail ( wb != NULL )
FUNCTION_CALL	6:1	6:28	5	g_return_if_fail ( wb != NULL )
CALLEE	6:1	6:1	6	g_return_if_fail
LEAF_NODE	6:1	6:1	7	g_return_if_fail
LEAF_NODE	6:17	6:17	6	(
ARGUMENT	6:18	6:24	6	wb != NULL
FIELD	6:18	6:18	7	wb
LEAF_NODE	6:18	6:18	8	wb
EQ_OPERATOR	6:21	6:21	7	!=
LEAF_NODE	6:21	6:21	8	!=
FIELD	6:24	6:24	7	NULL
LEAF_NODE	6:24	6:24	8	NULL
LEAF_NODE	6:28	6:28	6	)
LEAF_NODE	6:29	6:29	4	;
EXPR_STATEMENT	7:1	7:20	3	gtkwb = wb -> ui_data ;
EXPR	7:1	7:1	4	gtkwb = wb -> ui_data
ASSIGN	7:1	7:9	5	gtkwb = wb -> ui_data
LVAL	7:1	7:1	6	gtkwb
FIELD	7:1	7:1	7	gtkwb
LEAF_NODE	7:1	7:1	8	gtkwb
ASSIGN_OP	7:7	7:7	6	=
LEAF_NODE	7:7	7:7	7	=
RVAL	7:9	7:9	6	wb -> ui_data
FIELD	7:9	7:13	7	wb -> ui_data
LEAF_NODE	7:9	7:9	8	wb
LEAF_NODE	7:11	7:11	8	->
LEAF_NODE	7:13	7:13	8	ui_data
LEAF_NODE	7:20	7:20	4	;
EXPR_STATEMENT	8:1	8:32	3	g_return_if_fail ( gtkwb != NULL ) ;
EXPR	8:1	8:1	4	g_return_if_fail ( gtkwb != NULL )
FUNCTION_CALL	8:1	8:31	5	g_return_if_fail ( gtkwb != NULL )
CALLEE	8:1	8:1	6	g_return_if_fail
LEAF_NODE	8:1	8:1	7	g_return_if_fail
LEAF_NODE	8:17	8:17	6	(
ARGUMENT	8:18	8:27	6	gtkwb != NULL
FIELD	8:18	8:18	7	gtkwb
LEAF_NODE	8:18	8:18	8	gtkwb
EQ_OPERATOR	8:24	8:24	7	!=
LEAF_NODE	8:24	8:24	8	!=
FIELD	8:27	8:27	7	NULL
LEAF_NODE	8:27	8:27	8	NULL
LEAF_NODE	8:31	8:31	6	)
LEAF_NODE	8:32	8:32	4	;
SELECTION	11:1	12:1	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:3	11:3	4	(
CONDITION	11:4	11:4	4	gtkwb -> pixmap
EXPR	11:4	11:4	5	gtkwb -> pixmap
FIELD	11:4	11:11	6	gtkwb -> pixmap
LEAF_NODE	11:4	11:4	7	gtkwb
LEAF_NODE	11:9	11:9	7	->
LEAF_NODE	11:11	11:11	7	pixmap
LEAF_NODE	11:17	11:17	4	)
STATEMENTS	12:1	18:1	4	
LEAF_NODE	12:1	12:1	5	{
STATEMENTS	13:2	17:2	5	
SIMPLE_DECL	13:2	13:75	6	cairo_t * cr ; cr = g_object_get_data ( G_OBJECT ( gtkwb -> pixmap ) , "cairo-context" ) ;
VAR_DECL	13:2	13:11	7	cairo_t * cr ; cr = g_object_get_data ( G_OBJECT ( gtkwb -> pixmap ) , "cairo-context" )
TYPE	13:2	13:10	8	cairo_t *
TYPE_NAME	13:2	13:2	9	cairo_t
LEAF_NODE	13:2	13:2	10	cairo_t
POINTER	13:10	13:10	9	*
LEAF_NODE	13:10	13:10	10	*
NAME	13:11	13:11	8	cr
LEAF_NODE	13:11	13:11	9	cr
LEAF_NODE	0:0	0:0	8	;
INIT	13:11	13:11	8	cr = g_object_get_data ( G_OBJECT ( gtkwb -> pixmap ) , "cairo-context" )
ASSIGN	13:11	13:16	9	cr = g_object_get_data ( G_OBJECT ( gtkwb -> pixmap ) , "cairo-context" )
LVAL	13:11	13:11	10	cr
NAME	13:11	13:11	11	cr
LEAF_NODE	13:11	13:11	12	cr
ASSIGN_OP	13:14	13:14	10	=
LEAF_NODE	13:14	13:14	11	=
RVAL	13:16	13:16	10	g_object_get_data ( G_OBJECT ( gtkwb -> pixmap ) , "cairo-context" )
FUNCTION_CALL	13:16	13:74	11	g_object_get_data ( G_OBJECT ( gtkwb -> pixmap ) , "cairo-context" )
CALLEE	13:16	13:16	12	g_object_get_data
LEAF_NODE	13:16	13:16	13	g_object_get_data
LEAF_NODE	13:33	13:33	12	(
ARGUMENT	13:34	13:34	12	G_OBJECT ( gtkwb -> pixmap )
FUNCTION_CALL	13:34	13:56	13	G_OBJECT ( gtkwb -> pixmap )
CALLEE	13:34	13:34	14	G_OBJECT
LEAF_NODE	13:34	13:34	15	G_OBJECT
LEAF_NODE	13:42	13:42	14	(
ARGUMENT	13:43	13:43	14	gtkwb -> pixmap
FIELD	13:43	13:50	15	gtkwb -> pixmap
LEAF_NODE	13:43	13:43	16	gtkwb
LEAF_NODE	13:48	13:48	16	->
LEAF_NODE	13:50	13:50	16	pixmap
LEAF_NODE	13:56	13:56	14	)
LEAF_NODE	13:57	13:57	12	,
ARGUMENT	13:59	13:59	12	"cairo-context"
FIELD	13:59	13:59	13	"cairo-context"
LEAF_NODE	13:59	13:59	14	"cairo-context"
LEAF_NODE	13:74	13:74	12	)
LEAF_NODE	13:75	13:75	7	;
SELECTION	14:2	15:3	6	
KEYWORD	14:2	14:2	7	if
LEAF_NODE	14:2	14:2	8	if
LEAF_NODE	14:5	14:5	7	(
CONDITION	14:6	14:6	7	cr
EXPR	14:6	14:6	8	cr
FIELD	14:6	14:6	9	cr
LEAF_NODE	14:6	14:6	10	cr
LEAF_NODE	14:8	14:8	7	)
STATEMENTS	15:3	15:3	7	
EXPR_STATEMENT	15:3	15:20	8	cairo_destroy ( cr ) ;
EXPR	15:3	15:3	9	cairo_destroy ( cr )
FUNCTION_CALL	15:3	15:19	10	cairo_destroy ( cr )
CALLEE	15:3	15:3	11	cairo_destroy
LEAF_NODE	15:3	15:3	12	cairo_destroy
LEAF_NODE	15:16	15:16	11	(
ARGUMENT	15:17	15:17	11	cr
FIELD	15:17	15:17	12	cr
LEAF_NODE	15:17	15:17	13	cr
LEAF_NODE	15:19	15:19	11	)
LEAF_NODE	15:20	15:20	9	;
EXPR_STATEMENT	16:2	16:31	6	g_object_unref ( gtkwb -> pixmap ) ;
EXPR	16:2	16:2	7	g_object_unref ( gtkwb -> pixmap )
FUNCTION_CALL	16:2	16:30	8	g_object_unref ( gtkwb -> pixmap )
CALLEE	16:2	16:2	9	g_object_unref
LEAF_NODE	16:2	16:2	10	g_object_unref
LEAF_NODE	16:16	16:16	9	(
ARGUMENT	16:17	16:17	9	gtkwb -> pixmap
FIELD	16:17	16:24	10	gtkwb -> pixmap
LEAF_NODE	16:17	16:17	11	gtkwb
LEAF_NODE	16:22	16:22	11	->
LEAF_NODE	16:24	16:24	11	pixmap
LEAF_NODE	16:30	16:30	9	)
LEAF_NODE	16:31	16:31	7	;
EXPR_STATEMENT	17:2	17:22	6	gtkwb -> pixmap = NULL ;
EXPR	17:2	17:2	7	gtkwb -> pixmap = NULL
ASSIGN	17:2	17:18	8	gtkwb -> pixmap = NULL
LVAL	17:2	17:2	9	gtkwb -> pixmap
FIELD	17:2	17:9	10	gtkwb -> pixmap
LEAF_NODE	17:2	17:2	11	gtkwb
LEAF_NODE	17:7	17:7	11	->
LEAF_NODE	17:9	17:9	11	pixmap
ASSIGN_OP	17:16	17:16	9	=
LEAF_NODE	17:16	17:16	10	=
RVAL	17:18	17:18	9	NULL
FIELD	17:18	17:18	10	NULL
LEAF_NODE	17:18	17:18	11	NULL
LEAF_NODE	17:22	17:22	7	;
LEAF_NODE	18:1	18:1	5	}
EXPR_STATEMENT	19:1	19:76	3	colour_dialog = g_object_get_data ( G_OBJECT ( gtkwb -> window ) , "colour-dialog" ) ;
EXPR	19:1	19:1	4	colour_dialog = g_object_get_data ( G_OBJECT ( gtkwb -> window ) , "colour-dialog" )
ASSIGN	19:1	19:17	5	colour_dialog = g_object_get_data ( G_OBJECT ( gtkwb -> window ) , "colour-dialog" )
LVAL	19:1	19:1	6	colour_dialog
FIELD	19:1	19:1	7	colour_dialog
LEAF_NODE	19:1	19:1	8	colour_dialog
ASSIGN_OP	19:15	19:15	6	=
LEAF_NODE	19:15	19:15	7	=
RVAL	19:17	19:17	6	g_object_get_data ( G_OBJECT ( gtkwb -> window ) , "colour-dialog" )
FUNCTION_CALL	19:17	19:75	7	g_object_get_data ( G_OBJECT ( gtkwb -> window ) , "colour-dialog" )
CALLEE	19:17	19:17	8	g_object_get_data
LEAF_NODE	19:17	19:17	9	g_object_get_data
LEAF_NODE	19:34	19:34	8	(
ARGUMENT	19:35	19:35	8	G_OBJECT ( gtkwb -> window )
FUNCTION_CALL	19:35	19:57	9	G_OBJECT ( gtkwb -> window )
CALLEE	19:35	19:35	10	G_OBJECT
LEAF_NODE	19:35	19:35	11	G_OBJECT
LEAF_NODE	19:43	19:43	10	(
ARGUMENT	19:44	19:44	10	gtkwb -> window
FIELD	19:44	19:51	11	gtkwb -> window
LEAF_NODE	19:44	19:44	12	gtkwb
LEAF_NODE	19:49	19:49	12	->
LEAF_NODE	19:51	19:51	12	window
LEAF_NODE	19:57	19:57	10	)
LEAF_NODE	19:58	19:58	8	,
ARGUMENT	19:60	19:60	8	"colour-dialog"
FIELD	19:60	19:60	9	"colour-dialog"
LEAF_NODE	19:60	19:60	10	"colour-dialog"
LEAF_NODE	19:75	19:75	8	)
LEAF_NODE	19:76	19:76	4	;
SELECTION	20:1	20:20	3	
KEYWORD	20:1	20:1	4	if
LEAF_NODE	20:1	20:1	5	if
LEAF_NODE	20:4	20:4	4	(
CONDITION	20:5	20:5	4	colour_dialog
EXPR	20:5	20:5	5	colour_dialog
FIELD	20:5	20:5	6	colour_dialog
LEAF_NODE	20:5	20:5	7	colour_dialog
LEAF_NODE	20:18	20:18	4	)
STATEMENTS	20:20	23:1	4	
LEAF_NODE	20:20	20:20	5	{
STATEMENTS	21:2	22:2	5	
EXPR_STATEMENT	21:2	21:35	6	gtk_widget_destroy ( colour_dialog ) ;
EXPR	21:2	21:2	7	gtk_widget_destroy ( colour_dialog )
FUNCTION_CALL	21:2	21:34	8	gtk_widget_destroy ( colour_dialog )
CALLEE	21:2	21:2	9	gtk_widget_destroy
LEAF_NODE	21:2	21:2	10	gtk_widget_destroy
LEAF_NODE	21:20	21:20	9	(
ARGUMENT	21:21	21:21	9	colour_dialog
FIELD	21:21	21:21	10	colour_dialog
LEAF_NODE	21:21	21:21	11	colour_dialog
LEAF_NODE	21:34	21:34	9	)
LEAF_NODE	21:35	21:35	7	;
EXPR_STATEMENT	22:2	22:67	6	g_object_set_data ( G_OBJECT ( gtkwb -> window ) , "colour-dialog" , NULL ) ;
EXPR	22:2	22:2	7	g_object_set_data ( G_OBJECT ( gtkwb -> window ) , "colour-dialog" , NULL )
FUNCTION_CALL	22:2	22:66	8	g_object_set_data ( G_OBJECT ( gtkwb -> window ) , "colour-dialog" , NULL )
CALLEE	22:2	22:2	9	g_object_set_data
LEAF_NODE	22:2	22:2	10	g_object_set_data
LEAF_NODE	22:19	22:19	9	(
ARGUMENT	22:20	22:20	9	G_OBJECT ( gtkwb -> window )
FUNCTION_CALL	22:20	22:42	10	G_OBJECT ( gtkwb -> window )
CALLEE	22:20	22:20	11	G_OBJECT
LEAF_NODE	22:20	22:20	12	G_OBJECT
LEAF_NODE	22:28	22:28	11	(
ARGUMENT	22:29	22:29	11	gtkwb -> window
FIELD	22:29	22:36	12	gtkwb -> window
LEAF_NODE	22:29	22:29	13	gtkwb
LEAF_NODE	22:34	22:34	13	->
LEAF_NODE	22:36	22:36	13	window
LEAF_NODE	22:42	22:42	11	)
LEAF_NODE	22:43	22:43	9	,
ARGUMENT	22:45	22:45	9	"colour-dialog"
FIELD	22:45	22:45	10	"colour-dialog"
LEAF_NODE	22:45	22:45	11	"colour-dialog"
LEAF_NODE	22:60	22:60	9	,
ARGUMENT	22:62	22:62	9	NULL
FIELD	22:62	22:62	10	NULL
LEAF_NODE	22:62	22:62	11	NULL
LEAF_NODE	22:66	22:66	9	)
LEAF_NODE	22:67	22:67	7	;
LEAF_NODE	23:1	23:1	5	}
SELECTION	24:1	25:1	3	
KEYWORD	24:1	24:1	4	if
LEAF_NODE	24:1	24:1	5	if
LEAF_NODE	24:3	24:3	4	(
CONDITION	24:4	24:4	4	gtkwb -> window
EXPR	24:4	24:4	5	gtkwb -> window
FIELD	24:4	24:11	6	gtkwb -> window
LEAF_NODE	24:4	24:4	7	gtkwb
LEAF_NODE	24:9	24:9	7	->
LEAF_NODE	24:11	24:11	7	window
LEAF_NODE	24:17	24:17	4	)
STATEMENTS	25:1	28:1	4	
LEAF_NODE	25:1	25:1	5	{
STATEMENTS	26:2	27:2	5	
EXPR_STATEMENT	26:2	26:35	6	gtk_widget_destroy ( gtkwb -> window ) ;
EXPR	26:2	26:2	7	gtk_widget_destroy ( gtkwb -> window )
FUNCTION_CALL	26:2	26:34	8	gtk_widget_destroy ( gtkwb -> window )
CALLEE	26:2	26:2	9	gtk_widget_destroy
LEAF_NODE	26:2	26:2	10	gtk_widget_destroy
LEAF_NODE	26:20	26:20	9	(
ARGUMENT	26:21	26:21	9	gtkwb -> window
FIELD	26:21	26:28	10	gtkwb -> window
LEAF_NODE	26:21	26:21	11	gtkwb
LEAF_NODE	26:26	26:26	11	->
LEAF_NODE	26:28	26:28	11	window
LEAF_NODE	26:34	26:34	9	)
LEAF_NODE	26:35	26:35	7	;
EXPR_STATEMENT	27:2	27:22	6	gtkwb -> window = NULL ;
EXPR	27:2	27:2	7	gtkwb -> window = NULL
ASSIGN	27:2	27:18	8	gtkwb -> window = NULL
LVAL	27:2	27:2	9	gtkwb -> window
FIELD	27:2	27:9	10	gtkwb -> window
LEAF_NODE	27:2	27:2	11	gtkwb
LEAF_NODE	27:7	27:7	11	->
LEAF_NODE	27:9	27:9	11	window
ASSIGN_OP	27:16	27:16	9	=
LEAF_NODE	27:16	27:16	10	=
RVAL	27:18	27:18	9	NULL
FIELD	27:18	27:18	10	NULL
LEAF_NODE	27:18	27:18	11	NULL
LEAF_NODE	27:22	27:22	7	;
LEAF_NODE	28:1	28:1	5	}
EXPR_STATEMENT	29:1	29:14	3	g_free ( gtkwb ) ;
EXPR	29:1	29:1	4	g_free ( gtkwb )
FUNCTION_CALL	29:1	29:13	5	g_free ( gtkwb )
CALLEE	29:1	29:1	6	g_free
LEAF_NODE	29:1	29:1	7	g_free
LEAF_NODE	29:7	29:7	6	(
ARGUMENT	29:8	29:8	6	gtkwb
FIELD	29:8	29:8	7	gtkwb
LEAF_NODE	29:8	29:8	8	gtkwb
LEAF_NODE	29:13	29:13	6	)
LEAF_NODE	29:14	29:14	4	;
EXPR_STATEMENT	30:1	30:19	3	wb -> ui_data = NULL ;
EXPR	30:1	30:1	4	wb -> ui_data = NULL
ASSIGN	30:1	30:15	5	wb -> ui_data = NULL
LVAL	30:1	30:1	6	wb -> ui_data
FIELD	30:1	30:5	7	wb -> ui_data
LEAF_NODE	30:1	30:1	8	wb
LEAF_NODE	30:3	30:3	8	->
LEAF_NODE	30:5	30:5	8	ui_data
ASSIGN_OP	30:13	30:13	6	=
LEAF_NODE	30:13	30:13	7	=
RVAL	30:15	30:15	6	NULL
FIELD	30:15	30:15	7	NULL
LEAF_NODE	30:15	30:15	8	NULL
LEAF_NODE	30:19	30:19	4	;
LEAF_NODE	31:0	31:0	2	}

SOURCE_FILE	1:7	2:0	0	
SIMPLE_DECL	1:7	1:35	1	MonoImage * _api_image ; _api_image = NULL ;
VAR_DECL	1:7	1:18	2	MonoImage * _api_image ; _api_image = NULL
TYPE	1:7	1:17	3	MonoImage *
TYPE_NAME	1:7	1:7	4	MonoImage
LEAF_NODE	1:7	1:7	5	MonoImage
POINTER	1:17	1:17	4	*
LEAF_NODE	1:17	1:17	5	*
NAME	1:18	1:18	3	_api_image
LEAF_NODE	1:18	1:18	4	_api_image
LEAF_NODE	0:0	0:0	3	;
INIT	1:18	1:18	3	_api_image = NULL
ASSIGN	1:18	1:31	4	_api_image = NULL
LVAL	1:18	1:18	5	_api_image
NAME	1:18	1:18	6	_api_image
LEAF_NODE	1:18	1:18	7	_api_image
ASSIGN_OP	1:29	1:29	5	=
LEAF_NODE	1:29	1:29	6	=
RVAL	1:31	1:31	5	NULL
FIELD	1:31	1:31	6	NULL
LEAF_NODE	1:31	1:31	7	NULL
LEAF_NODE	1:35	1:35	2	;
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	ml_set_api_image
LEAF_NODE	2:5	2:5	3	ml_set_api_image
PARAMETER_LIST	2:21	2:38	2	( MonoImage * image )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:33	3	MonoImage * image
TYPE	2:22	2:32	4	MonoImage *
TYPE_NAME	2:22	2:22	5	MonoImage
LEAF_NODE	2:22	2:22	6	MonoImage
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	image
LEAF_NODE	2:33	2:33	5	image
LEAF_NODE	2:38	2:38	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	4:19	3	_api_image = image ;
EXPR	4:1	4:1	4	_api_image = image
ASSIGN	4:1	4:14	5	_api_image = image
LVAL	4:1	4:1	6	_api_image
FIELD	4:1	4:1	7	_api_image
LEAF_NODE	4:1	4:1	8	_api_image
ASSIGN_OP	4:12	4:12	6	=
LEAF_NODE	4:12	4:12	7	=
RVAL	4:14	4:14	6	image
FIELD	4:14	4:14	7	image
LEAF_NODE	4:14	4:14	8	image
LEAF_NODE	4:19	4:19	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	18:0	1	
RETURN_TYPE	1:0	1:13	2	static GList *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	GList
LEAF_NODE	1:7	1:7	4	GList
LEAF_NODE	1:13	1:13	3	*
FUNCTION_NAME	2:0	2:0	2	purple_media_get_streams
LEAF_NODE	2:0	2:0	3	purple_media_get_streams
PARAMETER_LIST	2:24	3:26	2	( PurpleMedia * media , const gchar * session , const gchar * participant )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:38	3	PurpleMedia * media
TYPE	2:25	2:37	4	PurpleMedia *
TYPE_NAME	2:25	2:25	5	PurpleMedia
LEAF_NODE	2:25	2:25	6	PurpleMedia
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	media
LEAF_NODE	2:38	2:38	5	media
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:58	3	const gchar * session
TYPE	2:45	2:57	4	const gchar *
TYPE_NAME	2:45	2:51	5	const gchar
LEAF_NODE	2:45	2:45	6	const
LEAF_NODE	2:51	2:51	6	gchar
POINTER	2:57	2:57	5	*
LEAF_NODE	2:57	2:57	6	*
NAME	2:58	2:58	4	session
LEAF_NODE	2:58	2:58	5	session
LEAF_NODE	2:65	2:65	3	,
PARAMETER_DECL	3:2	3:15	3	const gchar * participant
TYPE	3:2	3:14	4	const gchar *
TYPE_NAME	3:2	3:8	5	const gchar
LEAF_NODE	3:2	3:2	6	const
LEAF_NODE	3:8	3:8	6	gchar
POINTER	3:14	3:14	5	*
LEAF_NODE	3:14	3:14	6	*
NAME	3:15	3:15	4	participant
LEAF_NODE	3:15	3:15	5	participant
LEAF_NODE	3:26	3:26	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	17:1	2	
SIMPLE_DECL	5:1	5:15	3	GList * streams ;
VAR_DECL	5:1	5:8	4	GList * streams
TYPE	5:1	5:7	5	GList *
TYPE_NAME	5:1	5:1	6	GList
LEAF_NODE	5:1	5:1	7	GList
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	streams
LEAF_NODE	5:8	5:8	6	streams
LEAF_NODE	5:15	5:15	4	;
SIMPLE_DECL	6:1	6:18	3	GList * ret ; ret = NULL ;
VAR_DECL	6:1	6:8	4	GList * ret ; ret = NULL
TYPE	6:1	6:7	5	GList *
TYPE_NAME	6:1	6:1	6	GList
LEAF_NODE	6:1	6:1	7	GList
POINTER	6:7	6:7	6	*
LEAF_NODE	6:7	6:7	7	*
NAME	6:8	6:8	5	ret
LEAF_NODE	6:8	6:8	6	ret
LEAF_NODE	0:0	0:0	5	;
INIT	6:8	6:8	5	ret = NULL
ASSIGN	6:8	6:14	6	ret = NULL
LVAL	6:8	6:8	7	ret
NAME	6:8	6:8	8	ret
LEAF_NODE	6:8	6:8	9	ret
ASSIGN_OP	6:12	6:12	7	=
LEAF_NODE	6:12	6:12	8	=
RVAL	6:14	6:14	7	NULL
FIELD	6:14	6:14	8	NULL
LEAF_NODE	6:14	6:14	9	NULL
LEAF_NODE	6:18	6:18	4	;
EXPR_STATEMENT	7:1	7:51	3	g_return_val_if_fail ( PURPLE_IS_MEDIA ( media ) , NULL ) ;
EXPR	7:1	7:1	4	g_return_val_if_fail ( PURPLE_IS_MEDIA ( media ) , NULL )
FUNCTION_CALL	7:1	7:50	5	g_return_val_if_fail ( PURPLE_IS_MEDIA ( media ) , NULL )
CALLEE	7:1	7:1	6	g_return_val_if_fail
LEAF_NODE	7:1	7:1	7	g_return_val_if_fail
LEAF_NODE	7:21	7:21	6	(
ARGUMENT	7:22	7:22	6	PURPLE_IS_MEDIA ( media )
FUNCTION_CALL	7:22	7:43	7	PURPLE_IS_MEDIA ( media )
CALLEE	7:22	7:22	8	PURPLE_IS_MEDIA
LEAF_NODE	7:22	7:22	9	PURPLE_IS_MEDIA
LEAF_NODE	7:37	7:37	8	(
ARGUMENT	7:38	7:38	8	media
FIELD	7:38	7:38	9	media
LEAF_NODE	7:38	7:38	10	media
LEAF_NODE	7:43	7:43	8	)
LEAF_NODE	7:44	7:44	6	,
ARGUMENT	7:46	7:46	6	NULL
FIELD	7:46	7:46	7	NULL
LEAF_NODE	7:46	7:46	8	NULL
LEAF_NODE	7:50	7:50	6	)
LEAF_NODE	7:51	7:51	4	;
EXPR_STATEMENT	8:1	8:31	3	streams = media -> priv -> streams ;
EXPR	8:1	8:1	4	streams = media -> priv -> streams
ASSIGN	8:1	8:11	5	streams = media -> priv -> streams
LVAL	8:1	8:1	6	streams
FIELD	8:1	8:1	7	streams
LEAF_NODE	8:1	8:1	8	streams
ASSIGN_OP	8:9	8:9	6	=
LEAF_NODE	8:9	8:9	7	=
RVAL	8:11	8:11	6	media -> priv -> streams
FIELD	8:11	8:24	7	media -> priv -> streams
LEAF_NODE	8:11	8:11	8	media
LEAF_NODE	8:16	8:16	8	->
LEAF_NODE	8:18	8:18	8	priv
LEAF_NODE	8:22	8:22	8	->
LEAF_NODE	8:24	8:24	8	streams
LEAF_NODE	8:31	8:31	4	;
ITERATION	9:1	9:49	3	
KEYWORD	9:1	9:1	4	for
LEAF_NODE	9:1	9:1	5	for
LEAF_NODE	9:5	9:5	4	(
FOR_INIT	9:6	9:6	4	;
LEAF_NODE	9:6	9:6	5	;
CONDITION	9:8	9:8	4	streams
EXPR	9:8	9:8	5	streams
FIELD	9:8	9:8	6	streams
LEAF_NODE	9:8	9:8	7	streams
LEAF_NODE	9:15	9:15	4	;
FOR_EXPR	9:17	9:17	4	streams = g_list_next ( streams )
EXPR	9:17	9:17	5	streams = g_list_next ( streams )
ASSIGN	9:17	9:27	6	streams = g_list_next ( streams )
LVAL	9:17	9:17	7	streams
FIELD	9:17	9:17	8	streams
LEAF_NODE	9:17	9:17	9	streams
ASSIGN_OP	9:25	9:25	7	=
LEAF_NODE	9:25	9:25	8	=
RVAL	9:27	9:27	7	g_list_next ( streams )
FUNCTION_CALL	9:27	9:46	8	g_list_next ( streams )
CALLEE	9:27	9:27	9	g_list_next
LEAF_NODE	9:27	9:27	10	g_list_next
LEAF_NODE	9:38	9:38	9	(
ARGUMENT	9:39	9:39	9	streams
FIELD	9:39	9:39	10	streams
LEAF_NODE	9:39	9:39	11	streams
LEAF_NODE	9:46	9:46	9	)
LEAF_NODE	9:47	9:47	4	)
STATEMENTS	9:49	16:1	4	
LEAF_NODE	9:49	9:49	5	{
STATEMENTS	10:2	11:2	5	
SIMPLE_DECL	10:2	10:43	6	PurpleMediaStream * stream ; stream = streams -> data ;
VAR_DECL	10:2	10:21	7	PurpleMediaStream * stream ; stream = streams -> data
TYPE	10:2	10:20	8	PurpleMediaStream *
TYPE_NAME	10:2	10:2	9	PurpleMediaStream
LEAF_NODE	10:2	10:2	10	PurpleMediaStream
POINTER	10:20	10:20	9	*
LEAF_NODE	10:20	10:20	10	*
NAME	10:21	10:21	8	stream
LEAF_NODE	10:21	10:21	9	stream
LEAF_NODE	0:0	0:0	8	;
INIT	10:21	10:21	8	stream = streams -> data
ASSIGN	10:21	10:30	9	stream = streams -> data
LVAL	10:21	10:21	10	stream
NAME	10:21	10:21	11	stream
LEAF_NODE	10:21	10:21	12	stream
ASSIGN_OP	10:28	10:28	10	=
LEAF_NODE	10:28	10:28	11	=
RVAL	10:30	10:30	10	streams -> data
FIELD	10:30	10:39	11	streams -> data
LEAF_NODE	10:30	10:30	12	streams
LEAF_NODE	10:37	10:37	12	->
LEAF_NODE	10:39	10:39	12	data
LEAF_NODE	10:43	10:43	7	;
SELECTION	11:2	15:3	6	
KEYWORD	11:2	11:2	7	if
LEAF_NODE	11:2	11:2	8	if
LEAF_NODE	11:5	11:5	7	(
CONDITION	11:6	11:6	7	( session == NULL || ! strcmp ( stream -> session -> id , session ) ) && ( participant == NULL || ! strcmp ( stream -> participant , participant ) )
EXPR	11:6	11:6	8	( session == NULL || ! strcmp ( stream -> session -> id , session ) ) && ( participant == NULL || ! strcmp ( stream -> participant , participant ) )
AND	11:6	13:4	9	( session == NULL || ! strcmp ( stream -> session -> id , session ) ) && ( participant == NULL || ! strcmp ( stream -> participant , participant ) )
EXPR	11:6	12:41	10	( session == NULL || ! strcmp ( stream -> session -> id , session ) )
LEAF_NODE	11:6	11:6	11	(
OR	11:7	12:4	11	session == NULL || ! strcmp ( stream -> session -> id , session )
EXPR	11:7	11:18	12	session == NULL
FIELD	11:7	11:7	13	session
LEAF_NODE	11:7	11:7	14	session
EQ_OPERATOR	11:15	11:15	13	==
LEAF_NODE	11:15	11:15	14	==
FIELD	11:18	11:18	13	NULL
LEAF_NODE	11:18	11:18	14	NULL
LEAF_NODE	11:23	11:23	12	||
EXPR	12:4	12:4	12	! strcmp ( stream -> session -> id , session )
UNARY_EXPR	12:4	12:5	13	! strcmp ( stream -> session -> id , session )
UNARY_OPERATOR	12:4	12:4	14	!
LEAF_NODE	12:4	12:4	15	!
FUNCTION_CALL	12:5	12:40	14	strcmp ( stream -> session -> id , session )
CALLEE	12:5	12:5	15	strcmp
LEAF_NODE	12:5	12:5	16	strcmp
LEAF_NODE	12:11	12:11	15	(
ARGUMENT	12:12	12:12	15	stream -> session -> id
FIELD	12:12	12:29	16	stream -> session -> id
LEAF_NODE	12:12	12:12	17	stream
LEAF_NODE	12:18	12:18	17	->
LEAF_NODE	12:20	12:20	17	session
LEAF_NODE	12:27	12:27	17	->
LEAF_NODE	12:29	12:29	17	id
LEAF_NODE	12:31	12:31	15	,
ARGUMENT	12:33	12:33	15	session
FIELD	12:33	12:33	16	session
LEAF_NODE	12:33	12:33	17	session
LEAF_NODE	12:40	12:40	15	)
LEAF_NODE	12:41	12:41	11	)
LEAF_NODE	12:43	12:43	10	&&
EXPR	13:4	14:45	10	( participant == NULL || ! strcmp ( stream -> participant , participant ) )
LEAF_NODE	13:4	13:4	11	(
OR	13:5	14:4	11	participant == NULL || ! strcmp ( stream -> participant , participant )
EXPR	13:5	13:20	12	participant == NULL
FIELD	13:5	13:5	13	participant
LEAF_NODE	13:5	13:5	14	participant
EQ_OPERATOR	13:17	13:17	13	==
LEAF_NODE	13:17	13:17	14	==
FIELD	13:20	13:20	13	NULL
LEAF_NODE	13:20	13:20	14	NULL
LEAF_NODE	13:25	13:25	12	||
EXPR	14:4	14:4	12	! strcmp ( stream -> participant , participant )
UNARY_EXPR	14:4	14:5	13	! strcmp ( stream -> participant , participant )
UNARY_OPERATOR	14:4	14:4	14	!
LEAF_NODE	14:4	14:4	15	!
FUNCTION_CALL	14:5	14:44	14	strcmp ( stream -> participant , participant )
CALLEE	14:5	14:5	15	strcmp
LEAF_NODE	14:5	14:5	16	strcmp
LEAF_NODE	14:11	14:11	15	(
ARGUMENT	14:12	14:12	15	stream -> participant
FIELD	14:12	14:20	16	stream -> participant
LEAF_NODE	14:12	14:12	17	stream
LEAF_NODE	14:18	14:18	17	->
LEAF_NODE	14:20	14:20	17	participant
LEAF_NODE	14:31	14:31	15	,
ARGUMENT	14:33	14:33	15	participant
FIELD	14:33	14:33	16	participant
LEAF_NODE	14:33	14:33	17	participant
LEAF_NODE	14:44	14:44	15	)
LEAF_NODE	14:45	14:45	11	)
LEAF_NODE	14:46	14:46	7	)
STATEMENTS	15:3	15:3	7	
EXPR_STATEMENT	15:3	15:35	8	ret = g_list_append ( ret , stream ) ;
EXPR	15:3	15:3	9	ret = g_list_append ( ret , stream )
ASSIGN	15:3	15:9	10	ret = g_list_append ( ret , stream )
LVAL	15:3	15:3	11	ret
FIELD	15:3	15:3	12	ret
LEAF_NODE	15:3	15:3	13	ret
ASSIGN_OP	15:7	15:7	11	=
LEAF_NODE	15:7	15:7	12	=
RVAL	15:9	15:9	11	g_list_append ( ret , stream )
FUNCTION_CALL	15:9	15:34	12	g_list_append ( ret , stream )
CALLEE	15:9	15:9	13	g_list_append
LEAF_NODE	15:9	15:9	14	g_list_append
LEAF_NODE	15:22	15:22	13	(
ARGUMENT	15:23	15:23	13	ret
FIELD	15:23	15:23	14	ret
LEAF_NODE	15:23	15:23	15	ret
LEAF_NODE	15:26	15:26	13	,
ARGUMENT	15:28	15:28	13	stream
FIELD	15:28	15:28	14	stream
LEAF_NODE	15:28	15:28	15	stream
LEAF_NODE	15:34	15:34	13	)
LEAF_NODE	15:35	15:35	9	;
LEAF_NODE	16:1	16:1	5	}
JUMP_STATEMENT	17:1	17:11	3	return ret ;
KEYWORD	17:1	17:1	4	return
LEAF_NODE	17:1	17:1	5	return
DESTINATION	17:8	17:8	4	ret
EXPR	17:8	17:8	5	ret
FIELD	17:8	17:8	6	ret
LEAF_NODE	17:8	17:8	7	ret
LEAF_NODE	17:11	17:11	4	;
LEAF_NODE	18:0	18:0	2	}

SOURCE_FILE	2:0	13:0	0	
FUNCTION_DEF	2:0	11:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	blist_dock_cb
LEAF_NODE	2:12	2:12	3	blist_dock_cb
PARAMETER_LIST	2:25	2:38	2	( gboolean val )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:35	3	gboolean val
TYPE	2:26	2:26	4	gboolean
TYPE_NAME	2:26	2:26	5	gboolean
LEAF_NODE	2:26	2:26	6	gboolean
NAME	2:35	2:35	4	val
LEAF_NODE	2:35	2:35	5	val
LEAF_NODE	2:38	2:38	3	)
LEAF_NODE	2:40	2:40	2	{
STATEMENTS	3:1	7:3	2	
SELECTION	3:1	3:9	3	
KEYWORD	3:1	3:1	4	if
LEAF_NODE	3:1	3:1	5	if
LEAF_NODE	3:3	3:3	4	(
CONDITION	3:4	3:4	4	val
EXPR	3:4	3:4	5	val
FIELD	3:4	3:4	6	val
LEAF_NODE	3:4	3:4	7	val
LEAF_NODE	3:7	3:7	4	)
STATEMENTS	3:9	7:1	4	
LEAF_NODE	3:9	3:9	5	{
STATEMENTS	4:2	5:2	5	
EXPR_STATEMENT	4:2	4:61	6	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Docking...\n" ) ;
EXPR	4:2	4:2	7	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Docking...\n" )
FUNCTION_CALL	4:2	4:60	8	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Docking...\n" )
CALLEE	4:2	4:2	9	purple_debug_info
LEAF_NODE	4:2	4:2	10	purple_debug_info
LEAF_NODE	4:19	4:19	9	(
ARGUMENT	4:20	4:20	9	WINPREFS_PLUGIN_ID
FIELD	4:20	4:20	10	WINPREFS_PLUGIN_ID
LEAF_NODE	4:20	4:20	11	WINPREFS_PLUGIN_ID
LEAF_NODE	4:38	4:38	9	,
ARGUMENT	4:40	4:40	9	"Blist Docking...\n"
FIELD	4:40	4:40	10	"Blist Docking...\n"
LEAF_NODE	4:40	4:40	11	"Blist Docking...\n"
LEAF_NODE	4:60	4:60	9	)
LEAF_NODE	4:61	4:61	7	;
SELECTION	5:2	6:3	6	
KEYWORD	5:2	5:2	7	if
LEAF_NODE	5:2	5:2	8	if
LEAF_NODE	5:4	5:4	7	(
CONDITION	5:5	5:5	7	purple_prefs_get_int ( PREF_BLIST_ON_TOP ) != BLIST_TOP_NEVER
EXPR	5:5	5:48	8	purple_prefs_get_int ( PREF_BLIST_ON_TOP ) != BLIST_TOP_NEVER
FUNCTION_CALL	5:5	5:43	9	purple_prefs_get_int ( PREF_BLIST_ON_TOP )
CALLEE	5:5	5:5	10	purple_prefs_get_int
LEAF_NODE	5:5	5:5	11	purple_prefs_get_int
LEAF_NODE	5:25	5:25	10	(
ARGUMENT	5:26	5:26	10	PREF_BLIST_ON_TOP
FIELD	5:26	5:26	11	PREF_BLIST_ON_TOP
LEAF_NODE	5:26	5:26	12	PREF_BLIST_ON_TOP
LEAF_NODE	5:43	5:43	10	)
EQ_OPERATOR	5:45	5:45	9	!=
LEAF_NODE	5:45	5:45	10	!=
FIELD	5:48	5:48	9	BLIST_TOP_NEVER
LEAF_NODE	5:48	5:48	10	BLIST_TOP_NEVER
LEAF_NODE	5:63	5:63	7	)
STATEMENTS	6:3	6:3	7	
EXPR_STATEMENT	6:3	6:24	8	blist_set_ontop ( TRUE ) ;
EXPR	6:3	6:3	9	blist_set_ontop ( TRUE )
FUNCTION_CALL	6:3	6:23	10	blist_set_ontop ( TRUE )
CALLEE	6:3	6:3	11	blist_set_ontop
LEAF_NODE	6:3	6:3	12	blist_set_ontop
LEAF_NODE	6:18	6:18	11	(
ARGUMENT	6:19	6:19	11	TRUE
FIELD	6:19	6:19	12	TRUE
LEAF_NODE	6:19	6:19	13	TRUE
LEAF_NODE	6:23	6:23	11	)
LEAF_NODE	6:24	6:24	9	;
LEAF_NODE	7:1	7:1	5	}
SELECTION	7:3	7:8	3	
KEYWORD	7:3	7:3	4	else
LEAF_NODE	7:3	7:3	5	else
STATEMENTS	7:8	10:1	4	
LEAF_NODE	7:8	7:8	5	{
STATEMENTS	8:2	9:2	5	
EXPR_STATEMENT	8:2	8:63	6	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Undocking...\n" ) ;
EXPR	8:2	8:2	7	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Undocking...\n" )
FUNCTION_CALL	8:2	8:62	8	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Undocking...\n" )
CALLEE	8:2	8:2	9	purple_debug_info
LEAF_NODE	8:2	8:2	10	purple_debug_info
LEAF_NODE	8:19	8:19	9	(
ARGUMENT	8:20	8:20	9	WINPREFS_PLUGIN_ID
FIELD	8:20	8:20	10	WINPREFS_PLUGIN_ID
LEAF_NODE	8:20	8:20	11	WINPREFS_PLUGIN_ID
LEAF_NODE	8:38	8:38	9	,
ARGUMENT	8:40	8:40	9	"Blist Undocking...\n"
FIELD	8:40	8:40	10	"Blist Undocking...\n"
LEAF_NODE	8:40	8:40	11	"Blist Undocking...\n"
LEAF_NODE	8:62	8:62	9	)
LEAF_NODE	8:63	8:63	7	;
EXPR_STATEMENT	9:2	9:78	6	blist_set_ontop ( purple_prefs_get_int ( PREF_BLIST_ON_TOP ) == BLIST_TOP_ALWAYS ) ;
EXPR	9:2	9:2	7	blist_set_ontop ( purple_prefs_get_int ( PREF_BLIST_ON_TOP ) == BLIST_TOP_ALWAYS )
FUNCTION_CALL	9:2	9:77	8	blist_set_ontop ( purple_prefs_get_int ( PREF_BLIST_ON_TOP ) == BLIST_TOP_ALWAYS )
CALLEE	9:2	9:2	9	blist_set_ontop
LEAF_NODE	9:2	9:2	10	blist_set_ontop
LEAF_NODE	9:17	9:17	9	(
ARGUMENT	9:18	9:61	9	purple_prefs_get_int ( PREF_BLIST_ON_TOP ) == BLIST_TOP_ALWAYS
FUNCTION_CALL	9:18	9:56	10	purple_prefs_get_int ( PREF_BLIST_ON_TOP )
CALLEE	9:18	9:18	11	purple_prefs_get_int
LEAF_NODE	9:18	9:18	12	purple_prefs_get_int
LEAF_NODE	9:38	9:38	11	(
ARGUMENT	9:39	9:39	11	PREF_BLIST_ON_TOP
FIELD	9:39	9:39	12	PREF_BLIST_ON_TOP
LEAF_NODE	9:39	9:39	13	PREF_BLIST_ON_TOP
LEAF_NODE	9:56	9:56	11	)
EQ_OPERATOR	9:58	9:58	10	==
LEAF_NODE	9:58	9:58	11	==
FIELD	9:61	9:61	10	BLIST_TOP_ALWAYS
LEAF_NODE	9:61	9:61	11	BLIST_TOP_ALWAYS
LEAF_NODE	9:77	9:77	9	)
LEAF_NODE	9:78	9:78	7	;
LEAF_NODE	10:1	10:1	5	}
LEAF_NODE	11:0	11:0	2	}
FUNCTION_DEF	13:0	22:0	1	
RETURN_TYPE	13:0	13:7	2	static void
LEAF_NODE	13:0	13:0	3	static
TYPE_NAME	13:7	13:7	3	void
LEAF_NODE	13:7	13:7	4	void
FUNCTION_NAME	13:12	13:12	2	blist_dock_cb
LEAF_NODE	13:12	13:12	3	blist_dock_cb
PARAMETER_LIST	13:25	13:38	2	( gboolean val )
LEAF_NODE	13:25	13:25	3	(
PARAMETER_DECL	13:26	13:35	3	gboolean val
TYPE	13:26	13:26	4	gboolean
TYPE_NAME	13:26	13:26	5	gboolean
LEAF_NODE	13:26	13:26	6	gboolean
NAME	13:35	13:35	4	val
LEAF_NODE	13:35	13:35	5	val
LEAF_NODE	13:38	13:38	3	)
LEAF_NODE	13:40	13:40	2	{
STATEMENTS	14:1	18:3	2	
SELECTION	14:1	14:9	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:3	14:3	4	(
CONDITION	14:4	14:4	4	val
EXPR	14:4	14:4	5	val
FIELD	14:4	14:4	6	val
LEAF_NODE	14:4	14:4	7	val
LEAF_NODE	14:7	14:7	4	)
STATEMENTS	14:9	18:1	4	
LEAF_NODE	14:9	14:9	5	{
STATEMENTS	15:2	16:2	5	
EXPR_STATEMENT	15:2	15:61	6	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Docking...\n" ) ;
EXPR	15:2	15:2	7	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Docking...\n" )
FUNCTION_CALL	15:2	15:60	8	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Docking...\n" )
CALLEE	15:2	15:2	9	purple_debug_info
LEAF_NODE	15:2	15:2	10	purple_debug_info
LEAF_NODE	15:19	15:19	9	(
ARGUMENT	15:20	15:20	9	WINPREFS_PLUGIN_ID
FIELD	15:20	15:20	10	WINPREFS_PLUGIN_ID
LEAF_NODE	15:20	15:20	11	WINPREFS_PLUGIN_ID
LEAF_NODE	15:38	15:38	9	,
ARGUMENT	15:40	15:40	9	"Blist Docking...\n"
FIELD	15:40	15:40	10	"Blist Docking...\n"
LEAF_NODE	15:40	15:40	11	"Blist Docking...\n"
LEAF_NODE	15:60	15:60	9	)
LEAF_NODE	15:61	15:61	7	;
SELECTION	16:2	17:3	6	
KEYWORD	16:2	16:2	7	if
LEAF_NODE	16:2	16:2	8	if
LEAF_NODE	16:4	16:4	7	(
CONDITION	16:5	16:5	7	purple_prefs_get_int ( PREF_BLIST_ON_TOP ) != BLIST_TOP_NEVER
EXPR	16:5	16:48	8	purple_prefs_get_int ( PREF_BLIST_ON_TOP ) != BLIST_TOP_NEVER
FUNCTION_CALL	16:5	16:43	9	purple_prefs_get_int ( PREF_BLIST_ON_TOP )
CALLEE	16:5	16:5	10	purple_prefs_get_int
LEAF_NODE	16:5	16:5	11	purple_prefs_get_int
LEAF_NODE	16:25	16:25	10	(
ARGUMENT	16:26	16:26	10	PREF_BLIST_ON_TOP
FIELD	16:26	16:26	11	PREF_BLIST_ON_TOP
LEAF_NODE	16:26	16:26	12	PREF_BLIST_ON_TOP
LEAF_NODE	16:43	16:43	10	)
EQ_OPERATOR	16:45	16:45	9	!=
LEAF_NODE	16:45	16:45	10	!=
FIELD	16:48	16:48	9	BLIST_TOP_NEVER
LEAF_NODE	16:48	16:48	10	BLIST_TOP_NEVER
LEAF_NODE	16:63	16:63	7	)
STATEMENTS	17:3	17:3	7	
EXPR_STATEMENT	17:3	17:24	8	blist_set_ontop ( TRUE ) ;
EXPR	17:3	17:3	9	blist_set_ontop ( TRUE )
FUNCTION_CALL	17:3	17:23	10	blist_set_ontop ( TRUE )
CALLEE	17:3	17:3	11	blist_set_ontop
LEAF_NODE	17:3	17:3	12	blist_set_ontop
LEAF_NODE	17:18	17:18	11	(
ARGUMENT	17:19	17:19	11	TRUE
FIELD	17:19	17:19	12	TRUE
LEAF_NODE	17:19	17:19	13	TRUE
LEAF_NODE	17:23	17:23	11	)
LEAF_NODE	17:24	17:24	9	;
LEAF_NODE	18:1	18:1	5	}
SELECTION	18:3	18:8	3	
KEYWORD	18:3	18:3	4	else
LEAF_NODE	18:3	18:3	5	else
STATEMENTS	18:8	21:1	4	
LEAF_NODE	18:8	18:8	5	{
STATEMENTS	19:2	20:2	5	
EXPR_STATEMENT	19:2	19:63	6	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Undocking...\n" ) ;
EXPR	19:2	19:2	7	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Undocking...\n" )
FUNCTION_CALL	19:2	19:62	8	purple_debug_info ( WINPREFS_PLUGIN_ID , "Blist Undocking...\n" )
CALLEE	19:2	19:2	9	purple_debug_info
LEAF_NODE	19:2	19:2	10	purple_debug_info
LEAF_NODE	19:19	19:19	9	(
ARGUMENT	19:20	19:20	9	WINPREFS_PLUGIN_ID
FIELD	19:20	19:20	10	WINPREFS_PLUGIN_ID
LEAF_NODE	19:20	19:20	11	WINPREFS_PLUGIN_ID
LEAF_NODE	19:38	19:38	9	,
ARGUMENT	19:40	19:40	9	"Blist Undocking...\n"
FIELD	19:40	19:40	10	"Blist Undocking...\n"
LEAF_NODE	19:40	19:40	11	"Blist Undocking...\n"
LEAF_NODE	19:62	19:62	9	)
LEAF_NODE	19:63	19:63	7	;
EXPR_STATEMENT	20:2	20:78	6	blist_set_ontop ( purple_prefs_get_int ( PREF_BLIST_ON_TOP ) == BLIST_TOP_ALWAYS ) ;
EXPR	20:2	20:2	7	blist_set_ontop ( purple_prefs_get_int ( PREF_BLIST_ON_TOP ) == BLIST_TOP_ALWAYS )
FUNCTION_CALL	20:2	20:77	8	blist_set_ontop ( purple_prefs_get_int ( PREF_BLIST_ON_TOP ) == BLIST_TOP_ALWAYS )
CALLEE	20:2	20:2	9	blist_set_ontop
LEAF_NODE	20:2	20:2	10	blist_set_ontop
LEAF_NODE	20:17	20:17	9	(
ARGUMENT	20:18	20:61	9	purple_prefs_get_int ( PREF_BLIST_ON_TOP ) == BLIST_TOP_ALWAYS
FUNCTION_CALL	20:18	20:56	10	purple_prefs_get_int ( PREF_BLIST_ON_TOP )
CALLEE	20:18	20:18	11	purple_prefs_get_int
LEAF_NODE	20:18	20:18	12	purple_prefs_get_int
LEAF_NODE	20:38	20:38	11	(
ARGUMENT	20:39	20:39	11	PREF_BLIST_ON_TOP
FIELD	20:39	20:39	12	PREF_BLIST_ON_TOP
LEAF_NODE	20:39	20:39	13	PREF_BLIST_ON_TOP
LEAF_NODE	20:56	20:56	11	)
EQ_OPERATOR	20:58	20:58	10	==
LEAF_NODE	20:58	20:58	11	==
FIELD	20:61	20:61	10	BLIST_TOP_ALWAYS
LEAF_NODE	20:61	20:61	11	BLIST_TOP_ALWAYS
LEAF_NODE	20:77	20:77	9	)
LEAF_NODE	20:78	20:78	7	;
LEAF_NODE	21:1	21:1	5	}
LEAF_NODE	22:0	22:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	14:0	1	
RETURN_TYPE	1:0	1:7	2	static int
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	int
LEAF_NODE	1:7	1:7	4	int
FUNCTION_NAME	2:0	2:0	2	Z_AddField
LEAF_NODE	2:0	2:0	3	Z_AddField
PARAMETER_LIST	2:10	2:51	2	( char * * ptr , const char * field , char * end )
LEAF_NODE	2:10	2:10	3	(
PARAMETER_DECL	2:11	2:18	3	char * * ptr
TYPE	2:11	2:16	4	char * *
TYPE_NAME	2:11	2:11	5	char
LEAF_NODE	2:11	2:11	6	char
POINTER	2:16	2:17	5	* *
LEAF_NODE	2:16	2:16	6	*
LEAF_NODE	2:17	2:17	6	*
NAME	2:18	2:18	4	ptr
LEAF_NODE	2:18	2:18	5	ptr
LEAF_NODE	2:21	2:21	3	,
PARAMETER_DECL	2:23	2:35	3	const char * field
TYPE	2:23	2:34	4	const char *
TYPE_NAME	2:23	2:29	5	const char
LEAF_NODE	2:23	2:23	6	const
LEAF_NODE	2:29	2:29	6	char
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	field
LEAF_NODE	2:35	2:35	5	field
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:48	3	char * end
TYPE	2:42	2:47	4	char *
TYPE_NAME	2:42	2:42	5	char
LEAF_NODE	2:42	2:42	6	char
POINTER	2:47	2:47	5	*
LEAF_NODE	2:47	2:47	6	*
NAME	2:48	2:48	4	end
LEAF_NODE	2:48	2:48	5	end
LEAF_NODE	2:51	2:51	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:4	13:4	2	
LEAF_NODE	4:4	4:4	3	register
SIMPLE_DECL	4:13	4:20	3	int len ;
VAR_DECL	4:13	4:17	4	int len
TYPE	4:13	4:13	5	int
TYPE_NAME	4:13	4:13	6	int
LEAF_NODE	4:13	4:13	7	int
NAME	4:17	4:17	5	len
LEAF_NODE	4:17	4:17	6	len
LEAF_NODE	4:20	4:20	4	;
EXPR_STATEMENT	5:4	5:40	3	len = field ? strlen ( field ) + 1 : 1 ;
EXPR	5:4	5:4	4	len = field ? strlen ( field ) + 1 : 1
ASSIGN	5:4	5:10	5	len = field ? strlen ( field ) + 1 : 1
LVAL	5:4	5:4	6	len
FIELD	5:4	5:4	7	len
LEAF_NODE	5:4	5:4	8	len
ASSIGN_OP	5:8	5:8	6	=
LEAF_NODE	5:8	5:8	7	=
RVAL	5:10	5:10	6	field ? strlen ( field ) + 1 : 1
COND_EXPR	5:10	5:39	7	field ? strlen ( field ) + 1 : 1
CONDITION	5:10	5:10	8	field
FIELD	5:10	5:10	9	field
LEAF_NODE	5:10	5:10	10	field
LEAF_NODE	5:16	5:16	8	?
EXPR	5:18	5:35	8	strlen ( field ) + 1
FUNCTION_CALL	5:18	5:31	9	strlen ( field )
CALLEE	5:18	5:18	10	strlen
LEAF_NODE	5:18	5:18	11	strlen
LEAF_NODE	5:25	5:25	10	(
ARGUMENT	5:26	5:26	10	field
FIELD	5:26	5:26	11	field
LEAF_NODE	5:26	5:26	12	field
LEAF_NODE	5:31	5:31	10	)
LEAF_NODE	5:33	5:33	9	+
FIELD	5:35	5:35	9	1
LEAF_NODE	5:35	5:35	10	1
LEAF_NODE	5:37	5:37	8	:
FIELD	5:39	5:39	8	1
LEAF_NODE	5:39	5:39	9	1
LEAF_NODE	5:40	5:40	4	;
SELECTION	6:4	7:1	3	
KEYWORD	6:4	6:4	4	if
LEAF_NODE	6:4	6:4	5	if
LEAF_NODE	6:7	6:7	4	(
CONDITION	6:8	6:8	4	* ptr + len > end
EXPR	6:8	6:19	5	* ptr + len > end
UNARY_EXPR	6:8	6:9	6	* ptr
UNARY_OPERATOR	6:8	6:8	7	*
LEAF_NODE	6:8	6:8	8	*
FIELD	6:9	6:9	7	ptr
LEAF_NODE	6:9	6:9	8	ptr
LEAF_NODE	6:12	6:12	6	+
FIELD	6:13	6:13	6	len
LEAF_NODE	6:13	6:13	7	len
REL_OPERATOR	6:17	6:17	6	>
LEAF_NODE	6:17	6:17	7	>
FIELD	6:19	6:19	6	end
LEAF_NODE	6:19	6:19	7	end
LEAF_NODE	6:22	6:22	4	)
STATEMENTS	7:1	7:1	4	
JUMP_STATEMENT	7:1	7:9	5	return 1 ;
KEYWORD	7:1	7:1	6	return
LEAF_NODE	7:1	7:1	7	return
DESTINATION	7:8	7:8	6	1
EXPR	7:8	7:8	7	1
FIELD	7:8	7:8	8	1
LEAF_NODE	7:8	7:8	9	1
LEAF_NODE	7:9	7:9	6	;
SELECTION	8:4	9:8	3	
KEYWORD	8:4	8:4	4	if
LEAF_NODE	8:4	8:4	5	if
LEAF_NODE	8:7	8:7	4	(
CONDITION	8:8	8:8	4	field
EXPR	8:8	8:8	5	field
FIELD	8:8	8:8	6	field
LEAF_NODE	8:8	8:8	7	field
LEAF_NODE	8:13	8:13	4	)
STATEMENTS	9:8	9:8	4	
EXPR_STATEMENT	9:8	9:27	5	strcpy ( * ptr , field ) ;
EXPR	9:8	9:8	6	strcpy ( * ptr , field )
FUNCTION_CALL	9:8	9:26	7	strcpy ( * ptr , field )
CALLEE	9:8	9:8	8	strcpy
LEAF_NODE	9:8	9:8	9	strcpy
LEAF_NODE	9:14	9:14	8	(
ARGUMENT	9:15	9:15	8	* ptr
UNARY_EXPR	9:15	9:16	9	* ptr
UNARY_OPERATOR	9:15	9:15	10	*
LEAF_NODE	9:15	9:15	11	*
FIELD	9:16	9:16	10	ptr
LEAF_NODE	9:16	9:16	11	ptr
LEAF_NODE	9:19	9:19	8	,
ARGUMENT	9:21	9:21	8	field
FIELD	9:21	9:21	9	field
LEAF_NODE	9:21	9:21	10	field
LEAF_NODE	9:26	9:26	8	)
LEAF_NODE	9:27	9:27	6	;
SELECTION	10:4	11:6	3	
KEYWORD	10:4	10:4	4	else
LEAF_NODE	10:4	10:4	5	else
STATEMENTS	11:6	11:6	4	
EXPR_STATEMENT	11:6	11:18	5	* * ptr = '\0' ;
EXPR	11:6	11:6	6	* * ptr = '\0'
ASSIGN	11:6	11:14	7	* * ptr = '\0'
LVAL	11:6	11:6	8	* * ptr
UNARY_EXPR	11:6	11:8	9	* * ptr
UNARY_OPERATOR	11:6	11:6	10	*
LEAF_NODE	11:6	11:6	11	*
UNARY_OPERATOR	11:7	11:7	10	*
LEAF_NODE	11:7	11:7	11	*
FIELD	11:8	11:8	10	ptr
LEAF_NODE	11:8	11:8	11	ptr
ASSIGN_OP	11:12	11:12	8	=
LEAF_NODE	11:12	11:12	9	=
RVAL	11:14	11:14	8	'\0'
FIELD	11:14	11:14	9	'\0'
LEAF_NODE	11:14	11:14	10	'\0'
LEAF_NODE	11:18	11:18	6	;
EXPR_STATEMENT	12:4	12:15	3	* ptr += len ;
EXPR	12:4	12:4	4	* ptr += len
ASSIGN	12:4	12:12	5	* ptr += len
LVAL	12:4	12:4	6	* ptr
UNARY_EXPR	12:4	12:5	7	* ptr
UNARY_OPERATOR	12:4	12:4	8	*
LEAF_NODE	12:4	12:4	9	*
FIELD	12:5	12:5	8	ptr
LEAF_NODE	12:5	12:5	9	ptr
ASSIGN_OP	12:9	12:9	6	+=
LEAF_NODE	12:9	12:9	7	+=
RVAL	12:12	12:12	6	len
FIELD	12:12	12:12	7	len
LEAF_NODE	12:12	12:12	8	len
LEAF_NODE	12:15	12:15	4	;
JUMP_STATEMENT	13:4	13:12	3	return 0 ;
KEYWORD	13:4	13:4	4	return
LEAF_NODE	13:4	13:4	5	return
DESTINATION	13:11	13:11	4	0
EXPR	13:11	13:11	5	0
FIELD	13:11	13:11	6	0
LEAF_NODE	13:11	13:11	7	0
LEAF_NODE	13:12	13:12	4	;
LEAF_NODE	14:0	14:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	plugin_unload
LEAF_NODE	2:0	2:0	3	plugin_unload
PARAMETER_LIST	2:13	2:34	2	( PurplePlugin * plugin )
LEAF_NODE	2:13	2:13	3	(
PARAMETER_DECL	2:14	2:28	3	PurplePlugin * plugin
TYPE	2:14	2:27	4	PurplePlugin *
TYPE_NAME	2:14	2:14	5	PurplePlugin
LEAF_NODE	2:14	2:14	6	PurplePlugin
POINTER	2:27	2:27	5	*
LEAF_NODE	2:27	2:27	6	*
NAME	2:28	2:28	4	plugin
LEAF_NODE	2:28	2:28	5	plugin
LEAF_NODE	2:34	2:34	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	window
EXPR	4:5	4:5	5	window
FIELD	4:5	4:5	6	window
LEAF_NODE	4:5	4:5	7	window
LEAF_NODE	4:11	4:11	4	)
STATEMENTS	5:2	5:2	4	
EXPR_STATEMENT	5:2	5:28	5	gtk_widget_destroy ( window ) ;
EXPR	5:2	5:2	6	gtk_widget_destroy ( window )
FUNCTION_CALL	5:2	5:27	7	gtk_widget_destroy ( window )
CALLEE	5:2	5:2	8	gtk_widget_destroy
LEAF_NODE	5:2	5:2	9	gtk_widget_destroy
LEAF_NODE	5:20	5:20	8	(
ARGUMENT	5:21	5:21	8	window
FIELD	5:21	5:21	9	window
LEAF_NODE	5:21	5:21	10	window
LEAF_NODE	5:27	5:27	8	)
LEAF_NODE	5:28	5:28	6	;
EXPR_STATEMENT	6:1	6:14	3	window = NULL ;
EXPR	6:1	6:1	4	window = NULL
ASSIGN	6:1	6:10	5	window = NULL
LVAL	6:1	6:1	6	window
FIELD	6:1	6:1	7	window
LEAF_NODE	6:1	6:1	8	window
ASSIGN_OP	6:8	6:8	6	=
LEAF_NODE	6:8	6:8	7	=
RVAL	6:10	6:10	6	NULL
FIELD	6:10	6:10	7	NULL
LEAF_NODE	6:10	6:10	8	NULL
LEAF_NODE	6:14	6:14	4	;
JUMP_STATEMENT	7:1	7:12	3	return TRUE ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	TRUE
EXPR	7:8	7:8	5	TRUE
FIELD	7:8	7:8	6	TRUE
LEAF_NODE	7:8	7:8	7	TRUE
LEAF_NODE	7:12	7:12	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	104:0	1	
RETURN_TYPE	2:0	2:7	2	static gint
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	gint
LEAF_NODE	2:7	2:7	4	gint
FUNCTION_NAME	2:12	2:12	2	check_notify_tzc
LEAF_NODE	2:12	2:12	3	check_notify_tzc
PARAMETER_LIST	2:28	2:42	2	( gpointer data )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:38	3	gpointer data
TYPE	2:29	2:29	4	gpointer
TYPE_NAME	2:29	2:29	5	gpointer
LEAF_NODE	2:29	2:29	6	gpointer
NAME	2:38	2:38	4	data
LEAF_NODE	2:38	2:38	5	data
LEAF_NODE	2:42	2:42	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	103:1	2	
SIMPLE_DECL	4:1	4:48	3	PurpleConnection * gc ; gc = ( PurpleConnection * ) data ;
VAR_DECL	4:1	4:19	4	PurpleConnection * gc ; gc = ( PurpleConnection * ) data
TYPE	4:1	4:18	5	PurpleConnection *
TYPE_NAME	4:1	4:1	6	PurpleConnection
LEAF_NODE	4:1	4:1	7	PurpleConnection
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	gc
LEAF_NODE	4:19	4:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	4:19	4:19	5	gc = ( PurpleConnection * ) data
ASSIGN	4:19	4:24	6	gc = ( PurpleConnection * ) data
LVAL	4:19	4:19	7	gc
NAME	4:19	4:19	8	gc
LEAF_NODE	4:19	4:19	9	gc
ASSIGN_OP	4:22	4:22	7	=
LEAF_NODE	4:22	4:22	8	=
RVAL	4:24	4:44	7	( PurpleConnection * ) data
LEAF_NODE	4:24	4:24	8	(
TYPE_NAME	4:25	4:25	8	PurpleConnection
LEAF_NODE	4:25	4:25	9	PurpleConnection
LEAF_NODE	4:42	4:42	8	*
LEAF_NODE	4:43	4:43	8	)
FIELD	4:44	4:44	8	data
LEAF_NODE	4:44	4:44	9	data
LEAF_NODE	4:48	4:48	4	;
SIMPLE_DECL	5:1	5:40	3	zephyr_account * zephyr ; zephyr = gc -> proto_data ;
VAR_DECL	5:1	5:17	4	zephyr_account * zephyr ; zephyr = gc -> proto_data
TYPE	5:1	5:15	5	zephyr_account *
TYPE_NAME	5:1	5:1	6	zephyr_account
LEAF_NODE	5:1	5:1	7	zephyr_account
POINTER	5:15	5:15	6	*
LEAF_NODE	5:15	5:15	7	*
NAME	5:17	5:17	5	zephyr
LEAF_NODE	5:17	5:17	6	zephyr
LEAF_NODE	0:0	0:0	5	;
INIT	5:17	5:17	5	zephyr = gc -> proto_data
ASSIGN	5:17	5:26	6	zephyr = gc -> proto_data
LVAL	5:17	5:17	7	zephyr
NAME	5:17	5:17	8	zephyr
LEAF_NODE	5:17	5:17	9	zephyr
ASSIGN_OP	5:24	5:24	7	=
LEAF_NODE	5:24	5:24	8	=
RVAL	5:26	5:26	7	gc -> proto_data
FIELD	5:26	5:30	8	gc -> proto_data
LEAF_NODE	5:26	5:26	9	gc
LEAF_NODE	5:28	5:28	9	->
LEAF_NODE	5:30	5:30	9	proto_data
LEAF_NODE	5:40	5:40	4	;
SIMPLE_DECL	6:1	6:49	3	parse_tree * newparsetree ; newparsetree = read_from_tzc ( zephyr ) ;
VAR_DECL	6:1	6:13	4	parse_tree * newparsetree ; newparsetree = read_from_tzc ( zephyr )
TYPE	6:1	6:12	5	parse_tree *
TYPE_NAME	6:1	6:1	6	parse_tree
LEAF_NODE	6:1	6:1	7	parse_tree
POINTER	6:12	6:12	6	*
LEAF_NODE	6:12	6:12	7	*
NAME	6:13	6:13	5	newparsetree
LEAF_NODE	6:13	6:13	6	newparsetree
LEAF_NODE	0:0	0:0	5	;
INIT	6:13	6:13	5	newparsetree = read_from_tzc ( zephyr )
ASSIGN	6:13	6:28	6	newparsetree = read_from_tzc ( zephyr )
LVAL	6:13	6:13	7	newparsetree
NAME	6:13	6:13	8	newparsetree
LEAF_NODE	6:13	6:13	9	newparsetree
ASSIGN_OP	6:26	6:26	7	=
LEAF_NODE	6:26	6:26	8	=
RVAL	6:28	6:28	7	read_from_tzc ( zephyr )
FUNCTION_CALL	6:28	6:48	8	read_from_tzc ( zephyr )
CALLEE	6:28	6:28	9	read_from_tzc
LEAF_NODE	6:28	6:28	10	read_from_tzc
LEAF_NODE	6:41	6:41	9	(
ARGUMENT	6:42	6:42	9	zephyr
FIELD	6:42	6:42	10	zephyr
LEAF_NODE	6:42	6:42	11	zephyr
LEAF_NODE	6:48	6:48	9	)
LEAF_NODE	6:49	6:49	4	;
SELECTION	7:1	7:27	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	newparsetree != NULL
EXPR	7:5	7:21	5	newparsetree != NULL
FIELD	7:5	7:5	6	newparsetree
LEAF_NODE	7:5	7:5	7	newparsetree
EQ_OPERATOR	7:18	7:18	6	!=
LEAF_NODE	7:18	7:18	7	!=
FIELD	7:21	7:21	6	NULL
LEAF_NODE	7:21	7:21	7	NULL
LEAF_NODE	7:25	7:25	4	)
STATEMENTS	7:27	100:1	4	
LEAF_NODE	7:27	7:27	5	{
STATEMENTS	8:2	98:4	5	
SIMPLE_DECL	8:2	8:17	6	gchar * spewtype ;
VAR_DECL	8:2	8:9	7	gchar * spewtype
TYPE	8:2	8:8	8	gchar *
TYPE_NAME	8:2	8:2	9	gchar
LEAF_NODE	8:2	8:2	10	gchar
POINTER	8:8	8:8	9	*
LEAF_NODE	8:8	8:8	10	*
NAME	8:9	8:9	8	spewtype
LEAF_NODE	8:9	8:9	9	spewtype
LEAF_NODE	8:17	8:17	7	;
SELECTION	9:2	9:81	6	
KEYWORD	9:2	9:2	7	if
LEAF_NODE	9:2	9:2	8	if
LEAF_NODE	9:5	9:5	7	(
CONDITION	9:7	9:7	7	( spewtype = tree_child ( find_node ( newparsetree , "tzcspew" ) , 2 ) -> contents )
EXPR	9:7	9:77	8	( spewtype = tree_child ( find_node ( newparsetree , "tzcspew" ) , 2 ) -> contents )
LEAF_NODE	9:7	9:7	9	(
ASSIGN	9:8	9:20	9	spewtype = tree_child ( find_node ( newparsetree , "tzcspew" ) , 2 ) -> contents
LVAL	9:8	9:8	10	spewtype
FIELD	9:8	9:8	11	spewtype
LEAF_NODE	9:8	9:8	12	spewtype
ASSIGN_OP	9:17	9:17	10	=
LEAF_NODE	9:17	9:17	11	=
RVAL	9:20	9:69	10	tree_child ( find_node ( newparsetree , "tzcspew" ) , 2 ) -> contents
FUNCTION_CALL	9:20	9:66	11	tree_child ( find_node ( newparsetree , "tzcspew" ) , 2 )
CALLEE	9:20	9:20	12	tree_child
LEAF_NODE	9:20	9:20	13	tree_child
LEAF_NODE	9:30	9:30	12	(
ARGUMENT	9:31	9:31	12	find_node ( newparsetree , "tzcspew" )
FUNCTION_CALL	9:31	9:63	13	find_node ( newparsetree , "tzcspew" )
CALLEE	9:31	9:31	14	find_node
LEAF_NODE	9:31	9:31	15	find_node
LEAF_NODE	9:40	9:40	14	(
ARGUMENT	9:41	9:41	14	newparsetree
FIELD	9:41	9:41	15	newparsetree
LEAF_NODE	9:41	9:41	16	newparsetree
LEAF_NODE	9:53	9:53	14	,
ARGUMENT	9:54	9:54	14	"tzcspew"
FIELD	9:54	9:54	15	"tzcspew"
LEAF_NODE	9:54	9:54	16	"tzcspew"
LEAF_NODE	9:63	9:63	14	)
LEAF_NODE	9:64	9:64	12	,
ARGUMENT	9:65	9:65	12	2
FIELD	9:65	9:65	13	2
LEAF_NODE	9:65	9:65	14	2
LEAF_NODE	9:66	9:66	12	)
LEAF_NODE	9:67	9:67	11	->
LEAF_NODE	9:69	9:69	11	contents
LEAF_NODE	9:77	9:77	9	)
LEAF_NODE	9:79	9:79	7	)
STATEMENTS	9:81	98:2	7	
LEAF_NODE	9:81	9:81	8	{
STATEMENTS	10:3	95:3	8	
SELECTION	10:3	10:51	9	
KEYWORD	10:3	10:3	10	if
LEAF_NODE	10:3	10:3	11	if
LEAF_NODE	10:6	10:6	10	(
CONDITION	10:7	10:7	10	! g_ascii_strncasecmp ( spewtype , "message" , 7 )
EXPR	10:7	10:7	11	! g_ascii_strncasecmp ( spewtype , "message" , 7 )
UNARY_EXPR	10:7	10:8	12	! g_ascii_strncasecmp ( spewtype , "message" , 7 )
UNARY_OPERATOR	10:7	10:7	13	!
LEAF_NODE	10:7	10:7	14	!
FUNCTION_CALL	10:8	10:48	13	g_ascii_strncasecmp ( spewtype , "message" , 7 )
CALLEE	10:8	10:8	14	g_ascii_strncasecmp
LEAF_NODE	10:8	10:8	15	g_ascii_strncasecmp
LEAF_NODE	10:27	10:27	14	(
ARGUMENT	10:28	10:28	14	spewtype
FIELD	10:28	10:28	15	spewtype
LEAF_NODE	10:28	10:28	16	spewtype
LEAF_NODE	10:36	10:36	14	,
ARGUMENT	10:37	10:37	14	"message"
FIELD	10:37	10:37	15	"message"
LEAF_NODE	10:37	10:37	16	"message"
LEAF_NODE	10:46	10:46	14	,
ARGUMENT	10:47	10:47	14	7
FIELD	10:47	10:47	15	7
LEAF_NODE	10:47	10:47	16	7
LEAF_NODE	10:48	10:48	14	)
LEAF_NODE	10:49	10:49	10	)
STATEMENTS	10:51	40:3	10	
LEAF_NODE	10:51	10:51	11	{
STATEMENTS	11:4	33:4	11	
SIMPLE_DECL	11:4	11:20	12	ZNotice_t notice ;
VAR_DECL	11:4	11:14	13	ZNotice_t notice
TYPE	11:4	11:4	14	ZNotice_t
TYPE_NAME	11:4	11:4	15	ZNotice_t
LEAF_NODE	11:4	11:4	16	ZNotice_t
NAME	11:14	11:14	14	notice
LEAF_NODE	11:14	11:14	15	notice
LEAF_NODE	11:20	11:20	13	;
SIMPLE_DECL	12:4	12:73	12	parse_tree * msgnode ; msgnode = tree_child ( find_node ( newparsetree , "message" ) , 2 ) ;
VAR_DECL	12:4	12:16	13	parse_tree * msgnode ; msgnode = tree_child ( find_node ( newparsetree , "message" ) , 2 )
TYPE	12:4	12:15	14	parse_tree *
TYPE_NAME	12:4	12:4	15	parse_tree
LEAF_NODE	12:4	12:4	16	parse_tree
POINTER	12:15	12:15	15	*
LEAF_NODE	12:15	12:15	16	*
NAME	12:16	12:16	14	msgnode
LEAF_NODE	12:16	12:16	15	msgnode
LEAF_NODE	0:0	0:0	14	;
INIT	12:16	12:16	14	msgnode = tree_child ( find_node ( newparsetree , "message" ) , 2 )
ASSIGN	12:16	12:26	15	msgnode = tree_child ( find_node ( newparsetree , "message" ) , 2 )
LVAL	12:16	12:16	16	msgnode
NAME	12:16	12:16	17	msgnode
LEAF_NODE	12:16	12:16	18	msgnode
ASSIGN_OP	12:24	12:24	16	=
LEAF_NODE	12:24	12:24	17	=
RVAL	12:26	12:26	16	tree_child ( find_node ( newparsetree , "message" ) , 2 )
FUNCTION_CALL	12:26	12:72	17	tree_child ( find_node ( newparsetree , "message" ) , 2 )
CALLEE	12:26	12:26	18	tree_child
LEAF_NODE	12:26	12:26	19	tree_child
LEAF_NODE	12:36	12:36	18	(
ARGUMENT	12:37	12:37	18	find_node ( newparsetree , "message" )
FUNCTION_CALL	12:37	12:69	19	find_node ( newparsetree , "message" )
CALLEE	12:37	12:37	20	find_node
LEAF_NODE	12:37	12:37	21	find_node
LEAF_NODE	12:46	12:46	20	(
ARGUMENT	12:47	12:47	20	newparsetree
FIELD	12:47	12:47	21	newparsetree
LEAF_NODE	12:47	12:47	22	newparsetree
LEAF_NODE	12:59	12:59	20	,
ARGUMENT	12:60	12:60	20	"message"
FIELD	12:60	12:60	21	"message"
LEAF_NODE	12:60	12:60	22	"message"
LEAF_NODE	12:69	12:69	20	)
LEAF_NODE	12:70	12:70	18	,
ARGUMENT	12:71	12:71	18	2
FIELD	12:71	12:71	19	2
LEAF_NODE	12:71	12:71	20	2
LEAF_NODE	12:72	12:72	18	)
LEAF_NODE	12:73	12:73	13	;
SIMPLE_DECL	13:4	13:48	12	parse_tree * bodynode ; bodynode = tree_child ( msgnode , 1 ) ;
VAR_DECL	13:4	13:16	13	parse_tree * bodynode ; bodynode = tree_child ( msgnode , 1 )
TYPE	13:4	13:15	14	parse_tree *
TYPE_NAME	13:4	13:4	15	parse_tree
LEAF_NODE	13:4	13:4	16	parse_tree
POINTER	13:15	13:15	15	*
LEAF_NODE	13:15	13:15	16	*
NAME	13:16	13:16	14	bodynode
LEAF_NODE	13:16	13:16	15	bodynode
LEAF_NODE	0:0	0:0	14	;
INIT	13:16	13:16	14	bodynode = tree_child ( msgnode , 1 )
ASSIGN	13:16	13:27	15	bodynode = tree_child ( msgnode , 1 )
LVAL	13:16	13:16	16	bodynode
NAME	13:16	13:16	17	bodynode
LEAF_NODE	13:16	13:16	18	bodynode
ASSIGN_OP	13:25	13:25	16	=
LEAF_NODE	13:25	13:25	17	=
RVAL	13:27	13:27	16	tree_child ( msgnode , 1 )
FUNCTION_CALL	13:27	13:47	17	tree_child ( msgnode , 1 )
CALLEE	13:27	13:27	18	tree_child
LEAF_NODE	13:27	13:27	19	tree_child
LEAF_NODE	13:37	13:37	18	(
ARGUMENT	13:38	13:38	18	msgnode
FIELD	13:38	13:38	19	msgnode
LEAF_NODE	13:38	13:38	20	msgnode
LEAF_NODE	13:45	13:45	18	,
ARGUMENT	13:46	13:46	18	1
FIELD	13:46	13:46	19	1
LEAF_NODE	13:46	13:46	20	1
LEAF_NODE	13:47	13:47	18	)
LEAF_NODE	13:48	13:48	13	;
SIMPLE_DECL	15:4	15:60	12	char * msg ; msg = zephyr_tzc_deescape_str ( bodynode -> contents ) ;
VAR_DECL	15:4	15:10	13	char * msg ; msg = zephyr_tzc_deescape_str ( bodynode -> contents )
TYPE	15:4	15:9	14	char *
TYPE_NAME	15:4	15:4	15	char
LEAF_NODE	15:4	15:4	16	char
POINTER	15:9	15:9	15	*
LEAF_NODE	15:9	15:9	16	*
NAME	15:10	15:10	14	msg
LEAF_NODE	15:10	15:10	15	msg
LEAF_NODE	0:0	0:0	14	;
INIT	15:10	15:10	14	msg = zephyr_tzc_deescape_str ( bodynode -> contents )
ASSIGN	15:10	15:17	15	msg = zephyr_tzc_deescape_str ( bodynode -> contents )
LVAL	15:10	15:10	16	msg
NAME	15:10	15:10	17	msg
LEAF_NODE	15:10	15:10	18	msg
ASSIGN_OP	15:15	15:15	16	=
LEAF_NODE	15:15	15:15	17	=
RVAL	15:17	15:17	16	zephyr_tzc_deescape_str ( bodynode -> contents )
FUNCTION_CALL	15:17	15:59	17	zephyr_tzc_deescape_str ( bodynode -> contents )
CALLEE	15:17	15:17	18	zephyr_tzc_deescape_str
LEAF_NODE	15:17	15:17	19	zephyr_tzc_deescape_str
LEAF_NODE	15:40	15:40	18	(
ARGUMENT	15:41	15:41	18	bodynode -> contents
FIELD	15:41	15:51	19	bodynode -> contents
LEAF_NODE	15:41	15:41	20	bodynode
LEAF_NODE	15:49	15:49	20	->
LEAF_NODE	15:51	15:51	20	contents
LEAF_NODE	15:59	15:59	18	)
LEAF_NODE	15:60	15:60	13	;
SIMPLE_DECL	16:4	16:36	12	size_t bufsize ; bufsize = strlen ( msg ) + 3 ;
VAR_DECL	16:4	16:11	13	size_t bufsize ; bufsize = strlen ( msg ) + 3
TYPE	16:4	16:4	14	size_t
TYPE_NAME	16:4	16:4	15	size_t
LEAF_NODE	16:4	16:4	16	size_t
NAME	16:11	16:11	14	bufsize
LEAF_NODE	16:11	16:11	15	bufsize
LEAF_NODE	0:0	0:0	14	;
INIT	16:11	16:11	14	bufsize = strlen ( msg ) + 3
ASSIGN	16:11	16:21	15	bufsize = strlen ( msg ) + 3
LVAL	16:11	16:11	16	bufsize
NAME	16:11	16:11	17	bufsize
LEAF_NODE	16:11	16:11	18	bufsize
ASSIGN_OP	16:19	16:19	16	=
LEAF_NODE	16:19	16:19	17	=
RVAL	16:21	16:35	16	strlen ( msg ) + 3
FUNCTION_CALL	16:21	16:31	17	strlen ( msg )
CALLEE	16:21	16:21	18	strlen
LEAF_NODE	16:21	16:21	19	strlen
LEAF_NODE	16:27	16:27	18	(
ARGUMENT	16:28	16:28	18	msg
FIELD	16:28	16:28	19	msg
LEAF_NODE	16:28	16:28	20	msg
LEAF_NODE	16:31	16:31	18	)
LEAF_NODE	16:33	16:33	17	+
FIELD	16:35	16:35	17	3
LEAF_NODE	16:35	16:35	18	3
LEAF_NODE	16:36	16:36	13	;
SIMPLE_DECL	17:4	17:36	12	char * buf ; buf = g_new0 ( char , bufsize ) ;
VAR_DECL	17:4	17:10	13	char * buf ; buf = g_new0 ( char , bufsize )
TYPE	17:4	17:9	14	char *
TYPE_NAME	17:4	17:4	15	char
LEAF_NODE	17:4	17:4	16	char
POINTER	17:9	17:9	15	*
LEAF_NODE	17:9	17:9	16	*
NAME	17:10	17:10	14	buf
LEAF_NODE	17:10	17:10	15	buf
LEAF_NODE	0:0	0:0	14	;
INIT	17:10	17:10	14	buf = g_new0 ( char , bufsize )
ASSIGN	17:10	17:16	15	buf = g_new0 ( char , bufsize )
LVAL	17:10	17:10	16	buf
NAME	17:10	17:10	17	buf
LEAF_NODE	17:10	17:10	18	buf
ASSIGN_OP	17:14	17:14	16	=
LEAF_NODE	17:14	17:14	17	=
RVAL	17:16	17:16	16	g_new0 ( char , bufsize )
FUNCTION_CALL	17:16	17:35	17	g_new0 ( char , bufsize )
CALLEE	17:16	17:16	18	g_new0
LEAF_NODE	17:16	17:16	19	g_new0
LEAF_NODE	17:22	17:22	18	(
ARGUMENT	17:23	17:23	18	char
FIELD	17:23	17:23	19	char
LEAF_NODE	17:23	17:23	20	char
LEAF_NODE	17:27	17:27	18	,
ARGUMENT	17:28	17:28	18	bufsize
FIELD	17:28	17:28	19	bufsize
LEAF_NODE	17:28	17:28	20	bufsize
LEAF_NODE	17:35	17:35	18	)
LEAF_NODE	17:36	17:36	13	;
EXPR_STATEMENT	18:4	18:52	12	g_snprintf ( buf , 1 + strlen ( msg ) + 2 , " %c%s" , '\0' , msg ) ;
EXPR	18:4	18:4	13	g_snprintf ( buf , 1 + strlen ( msg ) + 2 , " %c%s" , '\0' , msg )
FUNCTION_CALL	18:4	18:51	14	g_snprintf ( buf , 1 + strlen ( msg ) + 2 , " %c%s" , '\0' , msg )
CALLEE	18:4	18:4	15	g_snprintf
LEAF_NODE	18:4	18:4	16	g_snprintf
LEAF_NODE	18:14	18:14	15	(
ARGUMENT	18:15	18:15	15	buf
FIELD	18:15	18:15	16	buf
LEAF_NODE	18:15	18:15	17	buf
LEAF_NODE	18:18	18:18	15	,
ARGUMENT	18:19	18:33	15	1 + strlen ( msg ) + 2
FIELD	18:19	18:19	16	1
LEAF_NODE	18:19	18:19	17	1
LEAF_NODE	18:20	18:20	16	+
FUNCTION_CALL	18:21	18:31	16	strlen ( msg )
CALLEE	18:21	18:21	17	strlen
LEAF_NODE	18:21	18:21	18	strlen
LEAF_NODE	18:27	18:27	17	(
ARGUMENT	18:28	18:28	17	msg
FIELD	18:28	18:28	18	msg
LEAF_NODE	18:28	18:28	19	msg
LEAF_NODE	18:31	18:31	17	)
LEAF_NODE	18:32	18:32	16	+
FIELD	18:33	18:33	16	2
LEAF_NODE	18:33	18:33	17	2
LEAF_NODE	18:34	18:34	15	,
ARGUMENT	18:35	18:35	15	" %c%s"
FIELD	18:35	18:35	16	" %c%s"
LEAF_NODE	18:35	18:35	17	" %c%s"
LEAF_NODE	18:42	18:42	15	,
ARGUMENT	18:43	18:43	15	'\0'
FIELD	18:43	18:43	16	'\0'
LEAF_NODE	18:43	18:43	17	'\0'
LEAF_NODE	18:47	18:47	15	,
ARGUMENT	18:48	18:48	15	msg
FIELD	18:48	18:48	16	msg
LEAF_NODE	18:48	18:48	17	msg
LEAF_NODE	18:51	18:51	15	)
LEAF_NODE	18:52	18:52	13	;
EXPR_STATEMENT	19:4	19:46	12	memset ( ( char * ) & notice , 0 , sizeof ( notice ) ) ;
EXPR	19:4	19:4	13	memset ( ( char * ) & notice , 0 , sizeof ( notice ) )
FUNCTION_CALL	19:4	19:45	14	memset ( ( char * ) & notice , 0 , sizeof ( notice ) )
CALLEE	19:4	19:4	15	memset
LEAF_NODE	19:4	19:4	16	memset
LEAF_NODE	19:10	19:10	15	(
ARGUMENT	19:11	19:19	15	( char * ) & notice
LEAF_NODE	19:11	19:11	16	(
TYPE_NAME	19:12	19:12	16	char
LEAF_NODE	19:12	19:12	17	char
LEAF_NODE	19:17	19:17	16	*
LEAF_NODE	19:18	19:18	16	)
UNARY_EXPR	19:19	19:20	16	& notice
UNARY_OPERATOR	19:19	19:19	17	&
LEAF_NODE	19:19	19:19	18	&
FIELD	19:20	19:20	17	notice
LEAF_NODE	19:20	19:20	18	notice
LEAF_NODE	19:26	19:26	15	,
ARGUMENT	19:28	19:28	15	0
FIELD	19:28	19:28	16	0
LEAF_NODE	19:28	19:28	17	0
LEAF_NODE	19:29	19:29	15	,
ARGUMENT	19:31	19:31	15	sizeof ( notice )
FUNCTION_CALL	19:31	19:44	16	sizeof ( notice )
CALLEE	19:31	19:31	17	sizeof
LEAF_NODE	19:31	19:31	18	sizeof
LEAF_NODE	19:37	19:37	17	(
ARGUMENT	19:38	19:38	17	notice
FIELD	19:38	19:38	18	notice
LEAF_NODE	19:38	19:38	19	notice
LEAF_NODE	19:44	19:44	17	)
LEAF_NODE	19:45	19:45	15	)
LEAF_NODE	19:46	19:46	13	;
EXPR_STATEMENT	20:4	20:25	12	notice . z_kind = ACKED ;
EXPR	20:4	20:4	13	notice . z_kind = ACKED
ASSIGN	20:4	20:20	14	notice . z_kind = ACKED
LVAL	20:4	20:4	15	notice . z_kind
FIELD	20:4	20:11	16	notice . z_kind
LEAF_NODE	20:4	20:4	17	notice
LEAF_NODE	20:10	20:10	17	.
LEAF_NODE	20:11	20:11	17	z_kind
ASSIGN_OP	20:18	20:18	15	=
LEAF_NODE	20:18	20:18	16	=
RVAL	20:20	20:20	15	ACKED
FIELD	20:20	20:20	16	ACKED
LEAF_NODE	20:20	20:20	17	ACKED
LEAF_NODE	20:25	20:25	13	;
EXPR_STATEMENT	21:4	21:21	12	notice . z_port = 0 ;
EXPR	21:4	21:4	13	notice . z_port = 0
ASSIGN	21:4	21:20	14	notice . z_port = 0
LVAL	21:4	21:4	15	notice . z_port
FIELD	21:4	21:11	16	notice . z_port
LEAF_NODE	21:4	21:4	17	notice
LEAF_NODE	21:10	21:10	17	.
LEAF_NODE	21:11	21:11	17	z_port
ASSIGN_OP	21:18	21:18	15	=
LEAF_NODE	21:18	21:18	16	=
RVAL	21:20	21:20	15	0
FIELD	21:20	21:20	16	0
LEAF_NODE	21:20	21:20	17	0
LEAF_NODE	21:21	21:21	13	;
EXPR_STATEMENT	22:4	22:78	12	notice . z_opcode = tree_child ( find_node ( newparsetree , "opcode" ) , 2 ) -> contents ;
EXPR	22:4	22:4	13	notice . z_opcode = tree_child ( find_node ( newparsetree , "opcode" ) , 2 ) -> contents
ASSIGN	22:4	22:22	14	notice . z_opcode = tree_child ( find_node ( newparsetree , "opcode" ) , 2 ) -> contents
LVAL	22:4	22:4	15	notice . z_opcode
FIELD	22:4	22:11	16	notice . z_opcode
LEAF_NODE	22:4	22:4	17	notice
LEAF_NODE	22:10	22:10	17	.
LEAF_NODE	22:11	22:11	17	z_opcode
ASSIGN_OP	22:20	22:20	15	=
LEAF_NODE	22:20	22:20	16	=
RVAL	22:22	22:70	15	tree_child ( find_node ( newparsetree , "opcode" ) , 2 ) -> contents
FUNCTION_CALL	22:22	22:67	16	tree_child ( find_node ( newparsetree , "opcode" ) , 2 )
CALLEE	22:22	22:22	17	tree_child
LEAF_NODE	22:22	22:22	18	tree_child
LEAF_NODE	22:32	22:32	17	(
ARGUMENT	22:33	22:33	17	find_node ( newparsetree , "opcode" )
FUNCTION_CALL	22:33	22:64	18	find_node ( newparsetree , "opcode" )
CALLEE	22:33	22:33	19	find_node
LEAF_NODE	22:33	22:33	20	find_node
LEAF_NODE	22:42	22:42	19	(
ARGUMENT	22:43	22:43	19	newparsetree
FIELD	22:43	22:43	20	newparsetree
LEAF_NODE	22:43	22:43	21	newparsetree
LEAF_NODE	22:55	22:55	19	,
ARGUMENT	22:56	22:56	19	"opcode"
FIELD	22:56	22:56	20	"opcode"
LEAF_NODE	22:56	22:56	21	"opcode"
LEAF_NODE	22:64	22:64	19	)
LEAF_NODE	22:65	22:65	17	,
ARGUMENT	22:66	22:66	17	2
FIELD	22:66	22:66	18	2
LEAF_NODE	22:66	22:66	19	2
LEAF_NODE	22:67	22:67	17	)
LEAF_NODE	22:68	22:68	16	->
LEAF_NODE	22:70	22:70	16	contents
LEAF_NODE	22:78	22:78	13	;
EXPR_STATEMENT	23:4	23:101	12	notice . z_class = zephyr_tzc_deescape_str ( tree_child ( find_node ( newparsetree , "class" ) , 2 ) -> contents ) ;
EXPR	23:4	23:4	13	notice . z_class = zephyr_tzc_deescape_str ( tree_child ( find_node ( newparsetree , "class" ) , 2 ) -> contents )
ASSIGN	23:4	23:21	14	notice . z_class = zephyr_tzc_deescape_str ( tree_child ( find_node ( newparsetree , "class" ) , 2 ) -> contents )
LVAL	23:4	23:4	15	notice . z_class
FIELD	23:4	23:11	16	notice . z_class
LEAF_NODE	23:4	23:4	17	notice
LEAF_NODE	23:10	23:10	17	.
LEAF_NODE	23:11	23:11	17	z_class
ASSIGN_OP	23:19	23:19	15	=
LEAF_NODE	23:19	23:19	16	=
RVAL	23:21	23:21	15	zephyr_tzc_deescape_str ( tree_child ( find_node ( newparsetree , "class" ) , 2 ) -> contents )
FUNCTION_CALL	23:21	23:100	16	zephyr_tzc_deescape_str ( tree_child ( find_node ( newparsetree , "class" ) , 2 ) -> contents )
CALLEE	23:21	23:21	17	zephyr_tzc_deescape_str
LEAF_NODE	23:21	23:21	18	zephyr_tzc_deescape_str
LEAF_NODE	23:44	23:44	17	(
ARGUMENT	23:45	23:92	17	tree_child ( find_node ( newparsetree , "class" ) , 2 ) -> contents
FUNCTION_CALL	23:45	23:89	18	tree_child ( find_node ( newparsetree , "class" ) , 2 )
CALLEE	23:45	23:45	19	tree_child
LEAF_NODE	23:45	23:45	20	tree_child
LEAF_NODE	23:55	23:55	19	(
ARGUMENT	23:56	23:56	19	find_node ( newparsetree , "class" )
FUNCTION_CALL	23:56	23:86	20	find_node ( newparsetree , "class" )
CALLEE	23:56	23:56	21	find_node
LEAF_NODE	23:56	23:56	22	find_node
LEAF_NODE	23:65	23:65	21	(
ARGUMENT	23:66	23:66	21	newparsetree
FIELD	23:66	23:66	22	newparsetree
LEAF_NODE	23:66	23:66	23	newparsetree
LEAF_NODE	23:78	23:78	21	,
ARGUMENT	23:79	23:79	21	"class"
FIELD	23:79	23:79	22	"class"
LEAF_NODE	23:79	23:79	23	"class"
LEAF_NODE	23:86	23:86	21	)
LEAF_NODE	23:87	23:87	19	,
ARGUMENT	23:88	23:88	19	2
FIELD	23:88	23:88	20	2
LEAF_NODE	23:88	23:88	21	2
LEAF_NODE	23:89	23:89	19	)
LEAF_NODE	23:90	23:90	18	->
LEAF_NODE	23:92	23:92	18	contents
LEAF_NODE	23:100	23:100	17	)
LEAF_NODE	23:101	23:101	13	;
EXPR_STATEMENT	24:4	24:84	12	notice . z_class_inst = tree_child ( find_node ( newparsetree , "instance" ) , 2 ) -> contents ;
EXPR	24:4	24:4	13	notice . z_class_inst = tree_child ( find_node ( newparsetree , "instance" ) , 2 ) -> contents
ASSIGN	24:4	24:26	14	notice . z_class_inst = tree_child ( find_node ( newparsetree , "instance" ) , 2 ) -> contents
LVAL	24:4	24:4	15	notice . z_class_inst
FIELD	24:4	24:11	16	notice . z_class_inst
LEAF_NODE	24:4	24:4	17	notice
LEAF_NODE	24:10	24:10	17	.
LEAF_NODE	24:11	24:11	17	z_class_inst
ASSIGN_OP	24:24	24:24	15	=
LEAF_NODE	24:24	24:24	16	=
RVAL	24:26	24:76	15	tree_child ( find_node ( newparsetree , "instance" ) , 2 ) -> contents
FUNCTION_CALL	24:26	24:73	16	tree_child ( find_node ( newparsetree , "instance" ) , 2 )
CALLEE	24:26	24:26	17	tree_child
LEAF_NODE	24:26	24:26	18	tree_child
LEAF_NODE	24:36	24:36	17	(
ARGUMENT	24:37	24:37	17	find_node ( newparsetree , "instance" )
FUNCTION_CALL	24:37	24:70	18	find_node ( newparsetree , "instance" )
CALLEE	24:37	24:37	19	find_node
LEAF_NODE	24:37	24:37	20	find_node
LEAF_NODE	24:46	24:46	19	(
ARGUMENT	24:47	24:47	19	newparsetree
FIELD	24:47	24:47	20	newparsetree
LEAF_NODE	24:47	24:47	21	newparsetree
LEAF_NODE	24:59	24:59	19	,
ARGUMENT	24:60	24:60	19	"instance"
FIELD	24:60	24:60	20	"instance"
LEAF_NODE	24:60	24:60	21	"instance"
LEAF_NODE	24:70	24:70	19	)
LEAF_NODE	24:71	24:71	17	,
ARGUMENT	24:72	24:72	17	2
FIELD	24:72	24:72	18	2
LEAF_NODE	24:72	24:72	19	2
LEAF_NODE	24:73	24:73	17	)
LEAF_NODE	24:74	24:74	16	->
LEAF_NODE	24:76	24:76	16	contents
LEAF_NODE	24:84	24:84	13	;
EXPR_STATEMENT	25:4	25:115	12	notice . z_recipient = local_zephyr_normalize ( zephyr , tree_child ( find_node ( newparsetree , "recipient" ) , 2 ) -> contents ) ;
EXPR	25:4	25:4	13	notice . z_recipient = local_zephyr_normalize ( zephyr , tree_child ( find_node ( newparsetree , "recipient" ) , 2 ) -> contents )
ASSIGN	25:4	25:25	14	notice . z_recipient = local_zephyr_normalize ( zephyr , tree_child ( find_node ( newparsetree , "recipient" ) , 2 ) -> contents )
LVAL	25:4	25:4	15	notice . z_recipient
FIELD	25:4	25:11	16	notice . z_recipient
LEAF_NODE	25:4	25:4	17	notice
LEAF_NODE	25:10	25:10	17	.
LEAF_NODE	25:11	25:11	17	z_recipient
ASSIGN_OP	25:23	25:23	15	=
LEAF_NODE	25:23	25:23	16	=
RVAL	25:25	25:25	15	local_zephyr_normalize ( zephyr , tree_child ( find_node ( newparsetree , "recipient" ) , 2 ) -> contents )
FUNCTION_CALL	25:25	25:114	16	local_zephyr_normalize ( zephyr , tree_child ( find_node ( newparsetree , "recipient" ) , 2 ) -> contents )
CALLEE	25:25	25:25	17	local_zephyr_normalize
LEAF_NODE	25:25	25:25	18	local_zephyr_normalize
LEAF_NODE	25:47	25:47	17	(
ARGUMENT	25:48	25:48	17	zephyr
FIELD	25:48	25:48	18	zephyr
LEAF_NODE	25:48	25:48	19	zephyr
LEAF_NODE	25:54	25:54	17	,
ARGUMENT	25:55	25:106	17	tree_child ( find_node ( newparsetree , "recipient" ) , 2 ) -> contents
FUNCTION_CALL	25:55	25:103	18	tree_child ( find_node ( newparsetree , "recipient" ) , 2 )
CALLEE	25:55	25:55	19	tree_child
LEAF_NODE	25:55	25:55	20	tree_child
LEAF_NODE	25:65	25:65	19	(
ARGUMENT	25:66	25:66	19	find_node ( newparsetree , "recipient" )
FUNCTION_CALL	25:66	25:100	20	find_node ( newparsetree , "recipient" )
CALLEE	25:66	25:66	21	find_node
LEAF_NODE	25:66	25:66	22	find_node
LEAF_NODE	25:75	25:75	21	(
ARGUMENT	25:76	25:76	21	newparsetree
FIELD	25:76	25:76	22	newparsetree
LEAF_NODE	25:76	25:76	23	newparsetree
LEAF_NODE	25:88	25:88	21	,
ARGUMENT	25:89	25:89	21	"recipient"
FIELD	25:89	25:89	22	"recipient"
LEAF_NODE	25:89	25:89	23	"recipient"
LEAF_NODE	25:100	25:100	21	)
LEAF_NODE	25:101	25:101	19	,
ARGUMENT	25:102	25:102	19	2
FIELD	25:102	25:102	20	2
LEAF_NODE	25:102	25:102	21	2
LEAF_NODE	25:103	25:103	19	)
LEAF_NODE	25:104	25:104	18	->
LEAF_NODE	25:106	25:106	18	contents
LEAF_NODE	25:114	25:114	17	)
LEAF_NODE	25:115	25:115	13	;
EXPR_STATEMENT	26:4	26:109	12	notice . z_sender = local_zephyr_normalize ( zephyr , tree_child ( find_node ( newparsetree , "sender" ) , 2 ) -> contents ) ;
EXPR	26:4	26:4	13	notice . z_sender = local_zephyr_normalize ( zephyr , tree_child ( find_node ( newparsetree , "sender" ) , 2 ) -> contents )
ASSIGN	26:4	26:22	14	notice . z_sender = local_zephyr_normalize ( zephyr , tree_child ( find_node ( newparsetree , "sender" ) , 2 ) -> contents )
LVAL	26:4	26:4	15	notice . z_sender
FIELD	26:4	26:11	16	notice . z_sender
LEAF_NODE	26:4	26:4	17	notice
LEAF_NODE	26:10	26:10	17	.
LEAF_NODE	26:11	26:11	17	z_sender
ASSIGN_OP	26:20	26:20	15	=
LEAF_NODE	26:20	26:20	16	=
RVAL	26:22	26:22	15	local_zephyr_normalize ( zephyr , tree_child ( find_node ( newparsetree , "sender" ) , 2 ) -> contents )
FUNCTION_CALL	26:22	26:108	16	local_zephyr_normalize ( zephyr , tree_child ( find_node ( newparsetree , "sender" ) , 2 ) -> contents )
CALLEE	26:22	26:22	17	local_zephyr_normalize
LEAF_NODE	26:22	26:22	18	local_zephyr_normalize
LEAF_NODE	26:44	26:44	17	(
ARGUMENT	26:45	26:45	17	zephyr
FIELD	26:45	26:45	18	zephyr
LEAF_NODE	26:45	26:45	19	zephyr
LEAF_NODE	26:51	26:51	17	,
ARGUMENT	26:52	26:100	17	tree_child ( find_node ( newparsetree , "sender" ) , 2 ) -> contents
FUNCTION_CALL	26:52	26:97	18	tree_child ( find_node ( newparsetree , "sender" ) , 2 )
CALLEE	26:52	26:52	19	tree_child
LEAF_NODE	26:52	26:52	20	tree_child
LEAF_NODE	26:62	26:62	19	(
ARGUMENT	26:63	26:63	19	find_node ( newparsetree , "sender" )
FUNCTION_CALL	26:63	26:94	20	find_node ( newparsetree , "sender" )
CALLEE	26:63	26:63	21	find_node
LEAF_NODE	26:63	26:63	22	find_node
LEAF_NODE	26:72	26:72	21	(
ARGUMENT	26:73	26:73	21	newparsetree
FIELD	26:73	26:73	22	newparsetree
LEAF_NODE	26:73	26:73	23	newparsetree
LEAF_NODE	26:85	26:85	21	,
ARGUMENT	26:86	26:86	21	"sender"
FIELD	26:86	26:86	22	"sender"
LEAF_NODE	26:86	26:86	23	"sender"
LEAF_NODE	26:94	26:94	21	)
LEAF_NODE	26:95	26:95	19	,
ARGUMENT	26:96	26:96	19	2
FIELD	26:96	26:96	20	2
LEAF_NODE	26:96	26:96	21	2
LEAF_NODE	26:97	26:97	19	)
LEAF_NODE	26:98	26:98	18	->
LEAF_NODE	26:100	26:100	18	contents
LEAF_NODE	26:108	26:108	17	)
LEAF_NODE	26:109	26:109	13	;
LEAF_NODE	27:4	27:4	12	notice
LEAF_NODE	27:10	27:10	12	.
LEAF_NODE	27:11	27:11	12	z_default_format
LEAF_NODE	27:28	27:28	12	=
LEAF_NODE	27:30	27:30	12	"Class $class, Instance $instance:\n"
LEAF_NODE	27:68	27:68	12	"To: @bold($recipient) at $time $date\n"
EXPR_STATEMENT	27:109	27:142	12	"From: @bold($1) <$sender>\n\n$2" ;
EXPR	27:109	27:109	13	"From: @bold($1) <$sender>\n\n$2"
FIELD	27:109	27:109	14	"From: @bold($1) <$sender>\n\n$2"
LEAF_NODE	27:109	27:109	15	"From: @bold($1) <$sender>\n\n$2"
LEAF_NODE	27:142	27:142	13	;
EXPR_STATEMENT	28:4	28:42	12	notice . z_message_len = strlen ( msg ) + 3 ;
EXPR	28:4	28:4	13	notice . z_message_len = strlen ( msg ) + 3
ASSIGN	28:4	28:27	14	notice . z_message_len = strlen ( msg ) + 3
LVAL	28:4	28:4	15	notice . z_message_len
FIELD	28:4	28:11	16	notice . z_message_len
LEAF_NODE	28:4	28:4	17	notice
LEAF_NODE	28:10	28:10	17	.
LEAF_NODE	28:11	28:11	17	z_message_len
ASSIGN_OP	28:25	28:25	15	=
LEAF_NODE	28:25	28:25	16	=
RVAL	28:27	28:41	15	strlen ( msg ) + 3
FUNCTION_CALL	28:27	28:37	16	strlen ( msg )
CALLEE	28:27	28:27	17	strlen
LEAF_NODE	28:27	28:27	18	strlen
LEAF_NODE	28:33	28:33	17	(
ARGUMENT	28:34	28:34	17	msg
FIELD	28:34	28:34	18	msg
LEAF_NODE	28:34	28:34	19	msg
LEAF_NODE	28:37	28:37	17	)
LEAF_NODE	28:39	28:39	16	+
FIELD	28:41	28:41	16	3
LEAF_NODE	28:41	28:41	17	3
LEAF_NODE	28:42	28:42	13	;
EXPR_STATEMENT	29:4	29:26	12	notice . z_message = buf ;
EXPR	29:4	29:4	13	notice . z_message = buf
ASSIGN	29:4	29:23	14	notice . z_message = buf
LVAL	29:4	29:4	15	notice . z_message
FIELD	29:4	29:11	16	notice . z_message
LEAF_NODE	29:4	29:4	17	notice
LEAF_NODE	29:10	29:10	17	.
LEAF_NODE	29:11	29:11	17	z_message
ASSIGN_OP	29:21	29:21	15	=
LEAF_NODE	29:21	29:21	16	=
RVAL	29:23	29:23	15	buf
FIELD	29:23	29:23	16	buf
LEAF_NODE	29:23	29:23	17	buf
LEAF_NODE	29:26	29:26	13	;
EXPR_STATEMENT	30:4	30:31	12	handle_message ( gc , & notice ) ;
EXPR	30:4	30:4	13	handle_message ( gc , & notice )
FUNCTION_CALL	30:4	30:30	14	handle_message ( gc , & notice )
CALLEE	30:4	30:4	15	handle_message
LEAF_NODE	30:4	30:4	16	handle_message
LEAF_NODE	30:18	30:18	15	(
ARGUMENT	30:19	30:19	15	gc
FIELD	30:19	30:19	16	gc
LEAF_NODE	30:19	30:19	17	gc
LEAF_NODE	30:21	30:21	15	,
ARGUMENT	30:23	30:23	15	& notice
UNARY_EXPR	30:23	30:24	16	& notice
UNARY_OPERATOR	30:23	30:23	17	&
LEAF_NODE	30:23	30:23	18	&
FIELD	30:24	30:24	17	notice
LEAF_NODE	30:24	30:24	18	notice
LEAF_NODE	30:30	30:30	15	)
LEAF_NODE	30:31	30:31	13	;
EXPR_STATEMENT	31:4	31:15	12	g_free ( msg ) ;
EXPR	31:4	31:4	13	g_free ( msg )
FUNCTION_CALL	31:4	31:14	14	g_free ( msg )
CALLEE	31:4	31:4	15	g_free
LEAF_NODE	31:4	31:4	16	g_free
LEAF_NODE	31:10	31:10	15	(
ARGUMENT	31:11	31:11	15	msg
FIELD	31:11	31:11	16	msg
LEAF_NODE	31:11	31:11	17	msg
LEAF_NODE	31:14	31:14	15	)
LEAF_NODE	31:15	31:15	13	;
EXPR_STATEMENT	33:4	33:15	12	g_free ( buf ) ;
EXPR	33:4	33:4	13	g_free ( buf )
FUNCTION_CALL	33:4	33:14	14	g_free ( buf )
CALLEE	33:4	33:4	15	g_free
LEAF_NODE	33:4	33:4	16	g_free
LEAF_NODE	33:10	33:10	15	(
ARGUMENT	33:11	33:11	15	buf
FIELD	33:11	33:11	16	buf
LEAF_NODE	33:11	33:11	17	buf
LEAF_NODE	33:14	33:14	15	)
LEAF_NODE	33:15	33:15	13	;
LEAF_NODE	40:3	40:3	11	}
SELECTION	41:3	41:8	9	
KEYWORD	41:3	41:3	10	else
LEAF_NODE	41:3	41:3	11	else
STATEMENTS	41:8	41:8	10	
SELECTION	41:8	41:58	11	
KEYWORD	41:8	41:8	12	if
LEAF_NODE	41:8	41:8	13	if
LEAF_NODE	41:11	41:11	12	(
CONDITION	41:12	41:12	12	! g_ascii_strncasecmp ( spewtype , "zlocation" , 9 )
EXPR	41:12	41:12	13	! g_ascii_strncasecmp ( spewtype , "zlocation" , 9 )
UNARY_EXPR	41:12	41:13	14	! g_ascii_strncasecmp ( spewtype , "zlocation" , 9 )
UNARY_OPERATOR	41:12	41:12	15	!
LEAF_NODE	41:12	41:12	16	!
FUNCTION_CALL	41:13	41:55	15	g_ascii_strncasecmp ( spewtype , "zlocation" , 9 )
CALLEE	41:13	41:13	16	g_ascii_strncasecmp
LEAF_NODE	41:13	41:13	17	g_ascii_strncasecmp
LEAF_NODE	41:32	41:32	16	(
ARGUMENT	41:33	41:33	16	spewtype
FIELD	41:33	41:33	17	spewtype
LEAF_NODE	41:33	41:33	18	spewtype
LEAF_NODE	41:41	41:41	16	,
ARGUMENT	41:42	41:42	16	"zlocation"
FIELD	41:42	41:42	17	"zlocation"
LEAF_NODE	41:42	41:42	18	"zlocation"
LEAF_NODE	41:53	41:53	16	,
ARGUMENT	41:54	41:54	16	9
FIELD	41:54	41:54	17	9
LEAF_NODE	41:54	41:54	18	9
LEAF_NODE	41:55	41:55	16	)
LEAF_NODE	41:56	41:56	12	)
STATEMENTS	41:58	90:3	12	
LEAF_NODE	41:58	41:58	13	{
STATEMENTS	44:4	84:6	13	
SIMPLE_DECL	44:4	44:14	14	char * user ;
VAR_DECL	44:4	44:10	15	char * user
TYPE	44:4	44:9	16	char *
TYPE_NAME	44:4	44:4	17	char
LEAF_NODE	44:4	44:4	18	char
POINTER	44:9	44:9	17	*
LEAF_NODE	44:9	44:9	18	*
NAME	44:10	44:10	16	user
LEAF_NODE	44:10	44:10	17	user
LEAF_NODE	44:14	44:14	15	;
SIMPLE_DECL	45:4	45:18	14	PurpleBuddy * b ;
VAR_DECL	45:4	45:17	15	PurpleBuddy * b
TYPE	45:4	45:16	16	PurpleBuddy *
TYPE_NAME	45:4	45:4	17	PurpleBuddy
LEAF_NODE	45:4	45:4	18	PurpleBuddy
POINTER	45:16	45:16	17	*
LEAF_NODE	45:16	45:16	18	*
NAME	45:17	45:17	16	b
LEAF_NODE	45:17	45:17	17	b
LEAF_NODE	45:18	45:18	15	;
SIMPLE_DECL	46:4	46:21	14	const char * bname ;
VAR_DECL	46:4	46:16	15	const char * bname
TYPE	46:4	46:15	16	const char *
TYPE_NAME	46:4	46:10	17	const char
LEAF_NODE	46:4	46:4	18	const
LEAF_NODE	46:10	46:10	18	char
POINTER	46:15	46:15	17	*
LEAF_NODE	46:15	46:15	18	*
NAME	46:16	46:16	16	bname
LEAF_NODE	46:16	46:16	17	bname
LEAF_NODE	46:21	46:21	15	;
SIMPLE_DECL	47:4	47:17	14	int nlocs ; nlocs = 0 ;
VAR_DECL	47:4	47:8	15	int nlocs ; nlocs = 0
TYPE	47:4	47:4	16	int
TYPE_NAME	47:4	47:4	17	int
LEAF_NODE	47:4	47:4	18	int
NAME	47:8	47:8	16	nlocs
LEAF_NODE	47:8	47:8	17	nlocs
LEAF_NODE	0:0	0:0	16	;
INIT	47:8	47:8	16	nlocs = 0
ASSIGN	47:8	47:16	17	nlocs = 0
LVAL	47:8	47:8	18	nlocs
NAME	47:8	47:8	19	nlocs
LEAF_NODE	47:8	47:8	20	nlocs
ASSIGN_OP	47:14	47:14	18	=
LEAF_NODE	47:14	47:14	19	=
RVAL	47:16	47:16	18	0
FIELD	47:16	47:16	19	0
LEAF_NODE	47:16	47:16	20	0
LEAF_NODE	47:17	47:17	15	;
SIMPLE_DECL	48:4	48:25	14	parse_tree * locations ;
VAR_DECL	48:4	48:16	15	parse_tree * locations
TYPE	48:4	48:15	16	parse_tree *
TYPE_NAME	48:4	48:4	17	parse_tree
LEAF_NODE	48:4	48:4	18	parse_tree
POINTER	48:15	48:15	17	*
LEAF_NODE	48:15	48:15	18	*
NAME	48:16	48:16	16	locations
LEAF_NODE	48:16	48:16	17	locations
LEAF_NODE	48:25	48:25	15	;
SIMPLE_DECL	49:4	49:17	14	gchar * locval ;
VAR_DECL	49:4	49:11	15	gchar * locval
TYPE	49:4	49:10	16	gchar *
TYPE_NAME	49:4	49:4	17	gchar
LEAF_NODE	49:4	49:4	18	gchar
POINTER	49:10	49:10	17	*
LEAF_NODE	49:10	49:10	18	*
NAME	49:11	49:11	16	locval
LEAF_NODE	49:11	49:11	17	locval
LEAF_NODE	49:17	49:17	15	;
EXPR_STATEMENT	50:4	50:65	14	user = tree_child ( find_node ( newparsetree , "user" ) , 2 ) -> contents ;
EXPR	50:4	50:4	15	user = tree_child ( find_node ( newparsetree , "user" ) , 2 ) -> contents
ASSIGN	50:4	50:11	16	user = tree_child ( find_node ( newparsetree , "user" ) , 2 ) -> contents
LVAL	50:4	50:4	17	user
FIELD	50:4	50:4	18	user
LEAF_NODE	50:4	50:4	19	user
ASSIGN_OP	50:9	50:9	17	=
LEAF_NODE	50:9	50:9	18	=
RVAL	50:11	50:57	17	tree_child ( find_node ( newparsetree , "user" ) , 2 ) -> contents
FUNCTION_CALL	50:11	50:54	18	tree_child ( find_node ( newparsetree , "user" ) , 2 )
CALLEE	50:11	50:11	19	tree_child
LEAF_NODE	50:11	50:11	20	tree_child
LEAF_NODE	50:21	50:21	19	(
ARGUMENT	50:22	50:22	19	find_node ( newparsetree , "user" )
FUNCTION_CALL	50:22	50:51	20	find_node ( newparsetree , "user" )
CALLEE	50:22	50:22	21	find_node
LEAF_NODE	50:22	50:22	22	find_node
LEAF_NODE	50:31	50:31	21	(
ARGUMENT	50:32	50:32	21	newparsetree
FIELD	50:32	50:32	22	newparsetree
LEAF_NODE	50:32	50:32	23	newparsetree
LEAF_NODE	50:44	50:44	21	,
ARGUMENT	50:45	50:45	21	"user"
FIELD	50:45	50:45	22	"user"
LEAF_NODE	50:45	50:45	23	"user"
LEAF_NODE	50:51	50:51	21	)
LEAF_NODE	50:52	50:52	19	,
ARGUMENT	50:53	50:53	19	2
FIELD	50:53	50:53	20	2
LEAF_NODE	50:53	50:53	21	2
LEAF_NODE	50:54	50:54	19	)
LEAF_NODE	50:55	50:55	18	->
LEAF_NODE	50:57	50:57	18	contents
LEAF_NODE	50:65	50:65	15	;
SELECTION	51:4	51:60	14	
KEYWORD	51:4	51:4	15	if
LEAF_NODE	51:4	51:4	16	if
LEAF_NODE	51:7	51:7	15	(
CONDITION	51:8	51:8	15	( b = purple_find_buddy ( gc -> account , user ) ) == NULL
EXPR	51:8	51:54	16	( b = purple_find_buddy ( gc -> account , user ) ) == NULL
LEAF_NODE	51:8	51:8	17	(
ASSIGN	51:9	51:13	17	b = purple_find_buddy ( gc -> account , user )
LVAL	51:9	51:9	18	b
FIELD	51:9	51:9	19	b
LEAF_NODE	51:9	51:9	20	b
ASSIGN_OP	51:11	51:11	18	=
LEAF_NODE	51:11	51:11	19	=
RVAL	51:13	51:13	18	purple_find_buddy ( gc -> account , user )
FUNCTION_CALL	51:13	51:48	19	purple_find_buddy ( gc -> account , user )
CALLEE	51:13	51:13	20	purple_find_buddy
LEAF_NODE	51:13	51:13	21	purple_find_buddy
LEAF_NODE	51:30	51:30	20	(
ARGUMENT	51:31	51:31	20	gc -> account
FIELD	51:31	51:35	21	gc -> account
LEAF_NODE	51:31	51:31	22	gc
LEAF_NODE	51:33	51:33	22	->
LEAF_NODE	51:35	51:35	22	account
LEAF_NODE	51:42	51:42	20	,
ARGUMENT	51:44	51:44	20	user
FIELD	51:44	51:44	21	user
LEAF_NODE	51:44	51:44	22	user
LEAF_NODE	51:48	51:48	20	)
LEAF_NODE	51:49	51:49	17	)
EQ_OPERATOR	51:51	51:51	17	==
LEAF_NODE	51:51	51:51	18	==
FIELD	51:54	51:54	17	NULL
LEAF_NODE	51:54	51:54	18	NULL
LEAF_NODE	51:58	51:58	15	)
STATEMENTS	51:60	55:4	15	
LEAF_NODE	51:60	51:60	16	{
STATEMENTS	52:5	54:5	16	
SIMPLE_DECL	52:5	52:65	17	gchar * stripped_user ; stripped_user = zephyr_strip_local_realm ( zephyr , user ) ;
VAR_DECL	52:5	52:12	18	gchar * stripped_user ; stripped_user = zephyr_strip_local_realm ( zephyr , user )
TYPE	52:5	52:11	19	gchar *
TYPE_NAME	52:5	52:5	20	gchar
LEAF_NODE	52:5	52:5	21	gchar
POINTER	52:11	52:11	20	*
LEAF_NODE	52:11	52:11	21	*
NAME	52:12	52:12	19	stripped_user
LEAF_NODE	52:12	52:12	20	stripped_user
LEAF_NODE	0:0	0:0	19	;
INIT	52:12	52:12	19	stripped_user = zephyr_strip_local_realm ( zephyr , user )
ASSIGN	52:12	52:28	20	stripped_user = zephyr_strip_local_realm ( zephyr , user )
LVAL	52:12	52:12	21	stripped_user
NAME	52:12	52:12	22	stripped_user
LEAF_NODE	52:12	52:12	23	stripped_user
ASSIGN_OP	52:26	52:26	21	=
LEAF_NODE	52:26	52:26	22	=
RVAL	52:28	52:28	21	zephyr_strip_local_realm ( zephyr , user )
FUNCTION_CALL	52:28	52:64	22	zephyr_strip_local_realm ( zephyr , user )
CALLEE	52:28	52:28	23	zephyr_strip_local_realm
LEAF_NODE	52:28	52:28	24	zephyr_strip_local_realm
LEAF_NODE	52:52	52:52	23	(
ARGUMENT	52:53	52:53	23	zephyr
FIELD	52:53	52:53	24	zephyr
LEAF_NODE	52:53	52:53	25	zephyr
LEAF_NODE	52:59	52:59	23	,
ARGUMENT	52:60	52:60	23	user
FIELD	52:60	52:60	24	user
LEAF_NODE	52:60	52:60	25	user
LEAF_NODE	52:64	52:64	23	)
LEAF_NODE	52:65	52:65	18	;
EXPR_STATEMENT	53:5	53:54	17	b = purple_find_buddy ( gc -> account , stripped_user ) ;
EXPR	53:5	53:5	18	b = purple_find_buddy ( gc -> account , stripped_user )
ASSIGN	53:5	53:9	19	b = purple_find_buddy ( gc -> account , stripped_user )
LVAL	53:5	53:5	20	b
FIELD	53:5	53:5	21	b
LEAF_NODE	53:5	53:5	22	b
ASSIGN_OP	53:7	53:7	20	=
LEAF_NODE	53:7	53:7	21	=
RVAL	53:9	53:9	20	purple_find_buddy ( gc -> account , stripped_user )
FUNCTION_CALL	53:9	53:53	21	purple_find_buddy ( gc -> account , stripped_user )
CALLEE	53:9	53:9	22	purple_find_buddy
LEAF_NODE	53:9	53:9	23	purple_find_buddy
LEAF_NODE	53:26	53:26	22	(
ARGUMENT	53:27	53:27	22	gc -> account
FIELD	53:27	53:31	23	gc -> account
LEAF_NODE	53:27	53:27	24	gc
LEAF_NODE	53:29	53:29	24	->
LEAF_NODE	53:31	53:31	24	account
LEAF_NODE	53:38	53:38	22	,
ARGUMENT	53:40	53:40	22	stripped_user
FIELD	53:40	53:40	23	stripped_user
LEAF_NODE	53:40	53:40	24	stripped_user
LEAF_NODE	53:53	53:53	22	)
LEAF_NODE	53:54	53:54	18	;
EXPR_STATEMENT	54:5	54:26	17	g_free ( stripped_user ) ;
EXPR	54:5	54:5	18	g_free ( stripped_user )
FUNCTION_CALL	54:5	54:25	19	g_free ( stripped_user )
CALLEE	54:5	54:5	20	g_free
LEAF_NODE	54:5	54:5	21	g_free
LEAF_NODE	54:11	54:11	20	(
ARGUMENT	54:12	54:12	20	stripped_user
FIELD	54:12	54:12	21	stripped_user
LEAF_NODE	54:12	54:12	22	stripped_user
LEAF_NODE	54:25	54:25	20	)
LEAF_NODE	54:26	54:26	18	;
LEAF_NODE	55:4	55:4	16	}
EXPR_STATEMENT	56:4	56:51	14	locations = find_node ( newparsetree , "locations" ) ;
EXPR	56:4	56:4	15	locations = find_node ( newparsetree , "locations" )
ASSIGN	56:4	56:16	16	locations = find_node ( newparsetree , "locations" )
LVAL	56:4	56:4	17	locations
FIELD	56:4	56:4	18	locations
LEAF_NODE	56:4	56:4	19	locations
ASSIGN_OP	56:14	56:14	17	=
LEAF_NODE	56:14	56:14	18	=
RVAL	56:16	56:16	17	find_node ( newparsetree , "locations" )
FUNCTION_CALL	56:16	56:50	18	find_node ( newparsetree , "locations" )
CALLEE	56:16	56:16	19	find_node
LEAF_NODE	56:16	56:16	20	find_node
LEAF_NODE	56:25	56:25	19	(
ARGUMENT	56:26	56:26	19	newparsetree
FIELD	56:26	56:26	20	newparsetree
LEAF_NODE	56:26	56:26	21	newparsetree
LEAF_NODE	56:38	56:38	19	,
ARGUMENT	56:39	56:39	19	"locations"
FIELD	56:39	56:39	20	"locations"
LEAF_NODE	56:39	56:39	21	"locations"
LEAF_NODE	56:50	56:50	19	)
LEAF_NODE	56:51	56:51	15	;
EXPR_STATEMENT	57:4	57:88	14	locval = tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 ) -> contents ;
EXPR	57:4	57:4	15	locval = tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 ) -> contents
ASSIGN	57:4	57:13	16	locval = tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 ) -> contents
LVAL	57:4	57:4	17	locval
FIELD	57:4	57:4	18	locval
LEAF_NODE	57:4	57:4	19	locval
ASSIGN_OP	57:11	57:11	17	=
LEAF_NODE	57:11	57:11	18	=
RVAL	57:13	57:80	17	tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 ) -> contents
FUNCTION_CALL	57:13	57:77	18	tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 )
CALLEE	57:13	57:13	19	tree_child
LEAF_NODE	57:13	57:13	20	tree_child
LEAF_NODE	57:23	57:23	19	(
ARGUMENT	57:24	57:24	19	tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 )
FUNCTION_CALL	57:24	57:74	20	tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 )
CALLEE	57:24	57:24	21	tree_child
LEAF_NODE	57:24	57:24	22	tree_child
LEAF_NODE	57:34	57:34	21	(
ARGUMENT	57:35	57:35	21	tree_child ( tree_child ( locations , 2 ) , 0 )
FUNCTION_CALL	57:35	57:71	22	tree_child ( tree_child ( locations , 2 ) , 0 )
CALLEE	57:35	57:35	23	tree_child
LEAF_NODE	57:35	57:35	24	tree_child
LEAF_NODE	57:45	57:45	23	(
ARGUMENT	57:46	57:46	23	tree_child ( locations , 2 )
FUNCTION_CALL	57:46	57:68	24	tree_child ( locations , 2 )
CALLEE	57:46	57:46	25	tree_child
LEAF_NODE	57:46	57:46	26	tree_child
LEAF_NODE	57:56	57:56	25	(
ARGUMENT	57:57	57:57	25	locations
FIELD	57:57	57:57	26	locations
LEAF_NODE	57:57	57:57	27	locations
LEAF_NODE	57:66	57:66	25	,
ARGUMENT	57:67	57:67	25	2
FIELD	57:67	57:67	26	2
LEAF_NODE	57:67	57:67	27	2
LEAF_NODE	57:68	57:68	25	)
LEAF_NODE	57:69	57:69	23	,
ARGUMENT	57:70	57:70	23	0
FIELD	57:70	57:70	24	0
LEAF_NODE	57:70	57:70	25	0
LEAF_NODE	57:71	57:71	23	)
LEAF_NODE	57:72	57:72	21	,
ARGUMENT	57:73	57:73	21	0
FIELD	57:73	57:73	22	0
LEAF_NODE	57:73	57:73	23	0
LEAF_NODE	57:74	57:74	21	)
LEAF_NODE	57:75	57:75	19	,
ARGUMENT	57:76	57:76	19	2
FIELD	57:76	57:76	20	2
LEAF_NODE	57:76	57:76	21	2
LEAF_NODE	57:77	57:77	19	)
LEAF_NODE	57:78	57:78	18	->
LEAF_NODE	57:80	57:80	18	contents
LEAF_NODE	57:88	57:88	15	;
SELECTION	58:4	58:77	14	
KEYWORD	58:4	58:4	15	if
LEAF_NODE	58:4	58:4	16	if
LEAF_NODE	58:7	58:7	15	(
CONDITION	58:8	58:8	15	! locval || ! g_ascii_strcasecmp ( locval , " " ) || ( strlen ( locval ) == 0 )
EXPR	58:8	58:8	16	! locval || ! g_ascii_strcasecmp ( locval , " " ) || ( strlen ( locval ) == 0 )
OR	58:8	58:19	17	! locval || ! g_ascii_strcasecmp ( locval , " " ) || ( strlen ( locval ) == 0 )
EXPR	58:8	58:8	18	! locval
UNARY_EXPR	58:8	58:9	19	! locval
UNARY_OPERATOR	58:8	58:8	20	!
LEAF_NODE	58:8	58:8	21	!
FIELD	58:9	58:9	20	locval
LEAF_NODE	58:9	58:9	21	locval
LEAF_NODE	58:16	58:16	18	||
EXPR	58:19	58:19	18	! g_ascii_strcasecmp ( locval , " " ) || ( strlen ( locval ) == 0 )
OR	58:19	58:54	19	! g_ascii_strcasecmp ( locval , " " ) || ( strlen ( locval ) == 0 )
EXPR	58:19	58:19	20	! g_ascii_strcasecmp ( locval , " " )
UNARY_EXPR	58:19	58:20	21	! g_ascii_strcasecmp ( locval , " " )
UNARY_OPERATOR	58:19	58:19	22	!
LEAF_NODE	58:19	58:19	23	!
FUNCTION_CALL	58:20	58:49	22	g_ascii_strcasecmp ( locval , " " )
CALLEE	58:20	58:20	23	g_ascii_strcasecmp
LEAF_NODE	58:20	58:20	24	g_ascii_strcasecmp
LEAF_NODE	58:38	58:38	23	(
ARGUMENT	58:39	58:39	23	locval
FIELD	58:39	58:39	24	locval
LEAF_NODE	58:39	58:39	25	locval
LEAF_NODE	58:45	58:45	23	,
ARGUMENT	58:46	58:46	23	" "
FIELD	58:46	58:46	24	" "
LEAF_NODE	58:46	58:46	25	" "
LEAF_NODE	58:49	58:49	23	)
LEAF_NODE	58:51	58:51	20	||
EXPR	58:54	58:74	20	( strlen ( locval ) == 0 )
LEAF_NODE	58:54	58:54	21	(
FUNCTION_CALL	58:55	58:68	21	strlen ( locval )
CALLEE	58:55	58:55	22	strlen
LEAF_NODE	58:55	58:55	23	strlen
LEAF_NODE	58:61	58:61	22	(
ARGUMENT	58:62	58:62	22	locval
FIELD	58:62	58:62	23	locval
LEAF_NODE	58:62	58:62	24	locval
LEAF_NODE	58:68	58:68	22	)
EQ_OPERATOR	58:70	58:70	21	==
LEAF_NODE	58:70	58:70	22	==
FIELD	58:73	58:73	21	0
LEAF_NODE	58:73	58:73	22	0
LEAF_NODE	58:74	58:74	21	)
LEAF_NODE	58:75	58:75	15	)
STATEMENTS	58:77	60:4	15	
LEAF_NODE	58:77	58:77	16	{
STATEMENTS	59:5	59:5	16	
EXPR_STATEMENT	59:5	59:14	17	nlocs = 0 ;
EXPR	59:5	59:5	18	nlocs = 0
ASSIGN	59:5	59:13	19	nlocs = 0
LVAL	59:5	59:5	20	nlocs
FIELD	59:5	59:5	21	nlocs
LEAF_NODE	59:5	59:5	22	nlocs
ASSIGN_OP	59:11	59:11	20	=
LEAF_NODE	59:11	59:11	21	=
RVAL	59:13	59:13	20	0
FIELD	59:13	59:13	21	0
LEAF_NODE	59:13	59:13	22	0
LEAF_NODE	59:14	59:14	18	;
LEAF_NODE	60:4	60:4	16	}
SELECTION	60:6	60:11	14	
KEYWORD	60:6	60:6	15	else
LEAF_NODE	60:6	60:6	16	else
STATEMENTS	60:11	62:4	15	
LEAF_NODE	60:11	60:11	16	{
STATEMENTS	61:5	61:5	16	
EXPR_STATEMENT	61:5	61:14	17	nlocs = 1 ;
EXPR	61:5	61:5	18	nlocs = 1
ASSIGN	61:5	61:13	19	nlocs = 1
LVAL	61:5	61:5	20	nlocs
FIELD	61:5	61:5	21	nlocs
LEAF_NODE	61:5	61:5	22	nlocs
ASSIGN_OP	61:11	61:11	20	=
LEAF_NODE	61:11	61:11	21	=
RVAL	61:13	61:13	20	1
FIELD	61:13	61:13	21	1
LEAF_NODE	61:13	61:13	22	1
LEAF_NODE	61:14	61:14	18	;
LEAF_NODE	62:4	62:4	16	}
EXPR_STATEMENT	63:4	63:47	14	bname = b ? purple_buddy_get_name ( b ) : NULL ;
EXPR	63:4	63:4	15	bname = b ? purple_buddy_get_name ( b ) : NULL
ASSIGN	63:4	63:12	16	bname = b ? purple_buddy_get_name ( b ) : NULL
LVAL	63:4	63:4	17	bname
FIELD	63:4	63:4	18	bname
LEAF_NODE	63:4	63:4	19	bname
ASSIGN_OP	63:10	63:10	17	=
LEAF_NODE	63:10	63:10	18	=
RVAL	63:12	63:12	17	b ? purple_buddy_get_name ( b ) : NULL
COND_EXPR	63:12	63:43	18	b ? purple_buddy_get_name ( b ) : NULL
CONDITION	63:12	63:12	19	b
FIELD	63:12	63:12	20	b
LEAF_NODE	63:12	63:12	21	b
LEAF_NODE	63:14	63:14	19	?
EXPR	63:16	63:16	19	purple_buddy_get_name ( b )
FUNCTION_CALL	63:16	63:39	20	purple_buddy_get_name ( b )
CALLEE	63:16	63:16	21	purple_buddy_get_name
LEAF_NODE	63:16	63:16	22	purple_buddy_get_name
LEAF_NODE	63:37	63:37	21	(
ARGUMENT	63:38	63:38	21	b
FIELD	63:38	63:38	22	b
LEAF_NODE	63:38	63:38	23	b
LEAF_NODE	63:39	63:39	21	)
LEAF_NODE	63:41	63:41	19	:
FIELD	63:43	63:43	19	NULL
LEAF_NODE	63:43	63:43	20	NULL
LEAF_NODE	63:47	63:47	15	;
SELECTION	64:4	64:131	14	
KEYWORD	64:4	64:4	15	if
LEAF_NODE	64:4	64:4	16	if
LEAF_NODE	64:7	64:7	15	(
CONDITION	64:8	64:8	15	( b && pending_zloc ( zephyr , bname ) ) || pending_zloc ( zephyr , user ) || pending_zloc ( zephyr , local_zephyr_normalize ( zephyr , user ) )
EXPR	64:8	64:8	16	( b && pending_zloc ( zephyr , bname ) ) || pending_zloc ( zephyr , user ) || pending_zloc ( zephyr , local_zephyr_normalize ( zephyr , user ) )
OR	64:8	64:45	17	( b && pending_zloc ( zephyr , bname ) ) || pending_zloc ( zephyr , user ) || pending_zloc ( zephyr , local_zephyr_normalize ( zephyr , user ) )
EXPR	64:8	64:40	18	( b && pending_zloc ( zephyr , bname ) )
LEAF_NODE	64:8	64:8	19	(
AND	64:9	64:14	19	b && pending_zloc ( zephyr , bname )
EXPR	64:9	64:9	20	b
FIELD	64:9	64:9	21	b
LEAF_NODE	64:9	64:9	22	b
LEAF_NODE	64:11	64:11	20	&&
EXPR	64:14	64:14	20	pending_zloc ( zephyr , bname )
FUNCTION_CALL	64:14	64:39	21	pending_zloc ( zephyr , bname )
CALLEE	64:14	64:14	22	pending_zloc
LEAF_NODE	64:14	64:14	23	pending_zloc
LEAF_NODE	64:26	64:26	22	(
ARGUMENT	64:27	64:27	22	zephyr
FIELD	64:27	64:27	23	zephyr
LEAF_NODE	64:27	64:27	24	zephyr
LEAF_NODE	64:33	64:33	22	,
ARGUMENT	64:34	64:34	22	bname
FIELD	64:34	64:34	23	bname
LEAF_NODE	64:34	64:34	24	bname
LEAF_NODE	64:39	64:39	22	)
LEAF_NODE	64:40	64:40	19	)
LEAF_NODE	64:42	64:42	18	||
EXPR	64:45	64:45	18	pending_zloc ( zephyr , user ) || pending_zloc ( zephyr , local_zephyr_normalize ( zephyr , user ) )
OR	64:45	64:74	19	pending_zloc ( zephyr , user ) || pending_zloc ( zephyr , local_zephyr_normalize ( zephyr , user ) )
EXPR	64:45	64:45	20	pending_zloc ( zephyr , user )
FUNCTION_CALL	64:45	64:69	21	pending_zloc ( zephyr , user )
CALLEE	64:45	64:45	22	pending_zloc
LEAF_NODE	64:45	64:45	23	pending_zloc
LEAF_NODE	64:57	64:57	22	(
ARGUMENT	64:58	64:58	22	zephyr
FIELD	64:58	64:58	23	zephyr
LEAF_NODE	64:58	64:58	24	zephyr
LEAF_NODE	64:64	64:64	22	,
ARGUMENT	64:65	64:65	22	user
FIELD	64:65	64:65	23	user
LEAF_NODE	64:65	64:65	24	user
LEAF_NODE	64:69	64:69	22	)
LEAF_NODE	64:71	64:71	20	||
EXPR	64:74	64:74	20	pending_zloc ( zephyr , local_zephyr_normalize ( zephyr , user ) )
FUNCTION_CALL	64:74	64:129	21	pending_zloc ( zephyr , local_zephyr_normalize ( zephyr , user ) )
CALLEE	64:74	64:74	22	pending_zloc
LEAF_NODE	64:74	64:74	23	pending_zloc
LEAF_NODE	64:86	64:86	22	(
ARGUMENT	64:87	64:87	22	zephyr
FIELD	64:87	64:87	23	zephyr
LEAF_NODE	64:87	64:87	24	zephyr
LEAF_NODE	64:93	64:93	22	,
ARGUMENT	64:94	64:94	22	local_zephyr_normalize ( zephyr , user )
FUNCTION_CALL	64:94	64:128	23	local_zephyr_normalize ( zephyr , user )
CALLEE	64:94	64:94	24	local_zephyr_normalize
LEAF_NODE	64:94	64:94	25	local_zephyr_normalize
LEAF_NODE	64:116	64:116	24	(
ARGUMENT	64:117	64:117	24	zephyr
FIELD	64:117	64:117	25	zephyr
LEAF_NODE	64:117	64:117	26	zephyr
LEAF_NODE	64:123	64:123	24	,
ARGUMENT	64:124	64:124	24	user
FIELD	64:124	64:124	25	user
LEAF_NODE	64:124	64:124	26	user
LEAF_NODE	64:128	64:128	24	)
LEAF_NODE	64:129	64:129	22	)
LEAF_NODE	64:130	64:130	15	)
STATEMENTS	64:131	84:4	15	
LEAF_NODE	64:131	64:131	16	{
STATEMENTS	65:5	83:5	16	
SIMPLE_DECL	65:5	65:68	17	PurpleNotifyUserInfo * user_info ; user_info = purple_notify_user_info_new ( ) ;
VAR_DECL	65:5	65:27	18	PurpleNotifyUserInfo * user_info ; user_info = purple_notify_user_info_new ( )
TYPE	65:5	65:26	19	PurpleNotifyUserInfo *
TYPE_NAME	65:5	65:5	20	PurpleNotifyUserInfo
LEAF_NODE	65:5	65:5	21	PurpleNotifyUserInfo
POINTER	65:26	65:26	20	*
LEAF_NODE	65:26	65:26	21	*
NAME	65:27	65:27	19	user_info
LEAF_NODE	65:27	65:27	20	user_info
LEAF_NODE	0:0	0:0	19	;
INIT	65:27	65:27	19	user_info = purple_notify_user_info_new ( )
ASSIGN	65:27	65:39	20	user_info = purple_notify_user_info_new ( )
LVAL	65:27	65:27	21	user_info
NAME	65:27	65:27	22	user_info
LEAF_NODE	65:27	65:27	23	user_info
ASSIGN_OP	65:37	65:37	21	=
LEAF_NODE	65:37	65:37	22	=
RVAL	65:39	65:39	21	purple_notify_user_info_new ( )
FUNCTION_CALL	65:39	65:67	22	purple_notify_user_info_new ( )
CALLEE	65:39	65:39	23	purple_notify_user_info_new
LEAF_NODE	65:39	65:39	24	purple_notify_user_info_new
LEAF_NODE	65:66	65:66	23	(
LEAF_NODE	65:67	65:67	23	)
LEAF_NODE	65:68	65:68	18	;
SIMPLE_DECL	66:5	66:14	17	char * tmp ;
VAR_DECL	66:5	66:11	18	char * tmp
TYPE	66:5	66:10	19	char *
TYPE_NAME	66:5	66:5	20	char
LEAF_NODE	66:5	66:5	21	char
POINTER	66:10	66:10	20	*
LEAF_NODE	66:10	66:10	21	*
NAME	66:11	66:11	19	tmp
LEAF_NODE	66:11	66:11	20	tmp
LEAF_NODE	66:14	66:14	18	;
SIMPLE_DECL	67:5	67:23	17	const char * balias ;
VAR_DECL	67:5	67:17	18	const char * balias
TYPE	67:5	67:16	19	const char *
TYPE_NAME	67:5	67:11	20	const char
LEAF_NODE	67:5	67:5	21	const
LEAF_NODE	67:11	67:11	21	char
POINTER	67:16	67:16	20	*
LEAF_NODE	67:16	67:16	21	*
NAME	67:17	67:17	19	balias
LEAF_NODE	67:17	67:17	20	balias
LEAF_NODE	67:23	67:23	18	;
EXPR_STATEMENT	68:5	68:79	17	purple_notify_user_info_add_pair ( user_info , _ ( "User" ) , ( b ? bname : user ) ) ;
EXPR	68:5	68:5	18	purple_notify_user_info_add_pair ( user_info , _ ( "User" ) , ( b ? bname : user ) )
FUNCTION_CALL	68:5	68:78	19	purple_notify_user_info_add_pair ( user_info , _ ( "User" ) , ( b ? bname : user ) )
CALLEE	68:5	68:5	20	purple_notify_user_info_add_pair
LEAF_NODE	68:5	68:5	21	purple_notify_user_info_add_pair
LEAF_NODE	68:37	68:37	20	(
ARGUMENT	68:38	68:38	20	user_info
FIELD	68:38	68:38	21	user_info
LEAF_NODE	68:38	68:38	22	user_info
LEAF_NODE	68:47	68:47	20	,
ARGUMENT	68:49	68:49	20	_ ( "User" )
FUNCTION_CALL	68:49	68:57	21	_ ( "User" )
CALLEE	68:49	68:49	22	_
LEAF_NODE	68:49	68:49	23	_
LEAF_NODE	68:50	68:50	22	(
ARGUMENT	68:51	68:51	22	"User"
FIELD	68:51	68:51	23	"User"
LEAF_NODE	68:51	68:51	24	"User"
LEAF_NODE	68:57	68:57	22	)
LEAF_NODE	68:58	68:58	20	,
ARGUMENT	68:60	68:77	20	( b ? bname : user )
LEAF_NODE	68:60	68:60	21	(
COND_EXPR	68:61	68:73	21	b ? bname : user
CONDITION	68:61	68:61	22	b
FIELD	68:61	68:61	23	b
LEAF_NODE	68:61	68:61	24	b
LEAF_NODE	68:63	68:63	22	?
EXPR	68:65	68:65	22	bname
FIELD	68:65	68:65	23	bname
LEAF_NODE	68:65	68:65	24	bname
LEAF_NODE	68:71	68:71	22	:
FIELD	68:73	68:73	22	user
LEAF_NODE	68:73	68:73	23	user
LEAF_NODE	68:77	68:77	21	)
LEAF_NODE	68:78	68:78	20	)
LEAF_NODE	68:79	68:79	18	;
EXPR_STATEMENT	69:5	69:62	17	balias = b ? purple_buddy_get_local_buddy_alias ( b ) : NULL ;
EXPR	69:5	69:5	18	balias = b ? purple_buddy_get_local_buddy_alias ( b ) : NULL
ASSIGN	69:5	69:14	19	balias = b ? purple_buddy_get_local_buddy_alias ( b ) : NULL
LVAL	69:5	69:5	20	balias
FIELD	69:5	69:5	21	balias
LEAF_NODE	69:5	69:5	22	balias
ASSIGN_OP	69:12	69:12	20	=
LEAF_NODE	69:12	69:12	21	=
RVAL	69:14	69:14	20	b ? purple_buddy_get_local_buddy_alias ( b ) : NULL
COND_EXPR	69:14	69:58	21	b ? purple_buddy_get_local_buddy_alias ( b ) : NULL
CONDITION	69:14	69:14	22	b
FIELD	69:14	69:14	23	b
LEAF_NODE	69:14	69:14	24	b
LEAF_NODE	69:16	69:16	22	?
EXPR	69:18	69:18	22	purple_buddy_get_local_buddy_alias ( b )
FUNCTION_CALL	69:18	69:54	23	purple_buddy_get_local_buddy_alias ( b )
CALLEE	69:18	69:18	24	purple_buddy_get_local_buddy_alias
LEAF_NODE	69:18	69:18	25	purple_buddy_get_local_buddy_alias
LEAF_NODE	69:52	69:52	24	(
ARGUMENT	69:53	69:53	24	b
FIELD	69:53	69:53	25	b
LEAF_NODE	69:53	69:53	26	b
LEAF_NODE	69:54	69:54	24	)
LEAF_NODE	69:56	69:56	22	:
FIELD	69:58	69:58	22	NULL
LEAF_NODE	69:58	69:58	23	NULL
LEAF_NODE	69:62	69:62	18	;
SELECTION	70:5	71:6	17	
KEYWORD	70:5	70:5	18	if
LEAF_NODE	70:5	70:5	19	if
LEAF_NODE	70:8	70:8	18	(
CONDITION	70:9	70:9	18	balias
EXPR	70:9	70:9	19	balias
FIELD	70:9	70:9	20	balias
LEAF_NODE	70:9	70:9	21	balias
LEAF_NODE	70:15	70:15	18	)
STATEMENTS	71:6	71:6	18	
EXPR_STATEMENT	71:6	71:69	19	purple_notify_user_info_add_pair ( user_info , _ ( "Alias" ) , balias ) ;
EXPR	71:6	71:6	20	purple_notify_user_info_add_pair ( user_info , _ ( "Alias" ) , balias )
FUNCTION_CALL	71:6	71:68	21	purple_notify_user_info_add_pair ( user_info , _ ( "Alias" ) , balias )
CALLEE	71:6	71:6	22	purple_notify_user_info_add_pair
LEAF_NODE	71:6	71:6	23	purple_notify_user_info_add_pair
LEAF_NODE	71:38	71:38	22	(
ARGUMENT	71:39	71:39	22	user_info
FIELD	71:39	71:39	23	user_info
LEAF_NODE	71:39	71:39	24	user_info
LEAF_NODE	71:48	71:48	22	,
ARGUMENT	71:50	71:50	22	_ ( "Alias" )
FUNCTION_CALL	71:50	71:59	23	_ ( "Alias" )
CALLEE	71:50	71:50	24	_
LEAF_NODE	71:50	71:50	25	_
LEAF_NODE	71:51	71:51	24	(
ARGUMENT	71:52	71:52	24	"Alias"
FIELD	71:52	71:52	25	"Alias"
LEAF_NODE	71:52	71:52	26	"Alias"
LEAF_NODE	71:59	71:59	24	)
LEAF_NODE	71:60	71:60	22	,
ARGUMENT	71:62	71:62	22	balias
FIELD	71:62	71:62	23	balias
LEAF_NODE	71:62	71:62	24	balias
LEAF_NODE	71:68	71:68	22	)
LEAF_NODE	71:69	71:69	20	;
SELECTION	72:5	72:17	17	
KEYWORD	72:5	72:5	18	if
LEAF_NODE	72:5	72:5	19	if
LEAF_NODE	72:8	72:8	18	(
CONDITION	72:9	72:9	18	! nlocs
EXPR	72:9	72:9	19	! nlocs
UNARY_EXPR	72:9	72:10	20	! nlocs
UNARY_OPERATOR	72:9	72:9	21	!
LEAF_NODE	72:9	72:9	22	!
FIELD	72:10	72:10	21	nlocs
LEAF_NODE	72:10	72:10	22	nlocs
LEAF_NODE	72:15	72:15	18	)
STATEMENTS	72:17	74:5	18	
LEAF_NODE	72:17	72:17	19	{
STATEMENTS	73:6	73:6	19	
EXPR_STATEMENT	73:6	73:85	20	purple_notify_user_info_add_pair ( user_info , NULL , _ ( "Hidden or not logged-in" ) ) ;
EXPR	73:6	73:6	21	purple_notify_user_info_add_pair ( user_info , NULL , _ ( "Hidden or not logged-in" ) )
FUNCTION_CALL	73:6	73:84	22	purple_notify_user_info_add_pair ( user_info , NULL , _ ( "Hidden or not logged-in" ) )
CALLEE	73:6	73:6	23	purple_notify_user_info_add_pair
LEAF_NODE	73:6	73:6	24	purple_notify_user_info_add_pair
LEAF_NODE	73:38	73:38	23	(
ARGUMENT	73:39	73:39	23	user_info
FIELD	73:39	73:39	24	user_info
LEAF_NODE	73:39	73:39	25	user_info
LEAF_NODE	73:48	73:48	23	,
ARGUMENT	73:50	73:50	23	NULL
FIELD	73:50	73:50	24	NULL
LEAF_NODE	73:50	73:50	25	NULL
LEAF_NODE	73:54	73:54	23	,
ARGUMENT	73:56	73:56	23	_ ( "Hidden or not logged-in" )
FUNCTION_CALL	73:56	73:83	24	_ ( "Hidden or not logged-in" )
CALLEE	73:56	73:56	25	_
LEAF_NODE	73:56	73:56	26	_
LEAF_NODE	73:57	73:57	25	(
ARGUMENT	73:58	73:58	25	"Hidden or not logged-in"
FIELD	73:58	73:58	26	"Hidden or not logged-in"
LEAF_NODE	73:58	73:58	27	"Hidden or not logged-in"
LEAF_NODE	73:83	73:83	25	)
LEAF_NODE	73:84	73:84	23	)
LEAF_NODE	73:85	73:85	21	;
LEAF_NODE	74:5	74:5	19	}
SELECTION	74:7	74:12	17	
KEYWORD	74:7	74:7	18	else
LEAF_NODE	74:7	74:7	19	else
STATEMENTS	74:12	80:5	18	
LEAF_NODE	74:12	74:12	19	{
STATEMENTS	75:6	79:6	19	
EXPR_STATEMENT	75:6	77:87	20	tmp = g_strdup_printf ( _ ( "<br>At %s since %s" ) , tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 ) -> contents , tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 2 ) , 2 ) -> contents ) ;
EXPR	75:6	75:6	21	tmp = g_strdup_printf ( _ ( "<br>At %s since %s" ) , tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 ) -> contents , tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 2 ) , 2 ) -> contents )
ASSIGN	75:6	75:12	22	tmp = g_strdup_printf ( _ ( "<br>At %s since %s" ) , tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 ) -> contents , tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 2 ) , 2 ) -> contents )
LVAL	75:6	75:6	23	tmp
FIELD	75:6	75:6	24	tmp
LEAF_NODE	75:6	75:6	25	tmp
ASSIGN_OP	75:10	75:10	23	=
LEAF_NODE	75:10	75:10	24	=
RVAL	75:12	75:12	23	g_strdup_printf ( _ ( "<br>At %s since %s" ) , tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 ) -> contents , tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 2 ) , 2 ) -> contents )
FUNCTION_CALL	75:12	77:86	24	g_strdup_printf ( _ ( "<br>At %s since %s" ) , tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 ) -> contents , tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 2 ) , 2 ) -> contents )
CALLEE	75:12	75:12	25	g_strdup_printf
LEAF_NODE	75:12	75:12	26	g_strdup_printf
LEAF_NODE	75:27	75:27	25	(
ARGUMENT	75:28	75:28	25	_ ( "<br>At %s since %s" )
FUNCTION_CALL	75:28	75:50	26	_ ( "<br>At %s since %s" )
CALLEE	75:28	75:28	27	_
LEAF_NODE	75:28	75:28	28	_
LEAF_NODE	75:29	75:29	27	(
ARGUMENT	75:30	75:30	27	"<br>At %s since %s"
FIELD	75:30	75:30	28	"<br>At %s since %s"
LEAF_NODE	75:30	75:30	29	"<br>At %s since %s"
LEAF_NODE	75:50	75:50	27	)
LEAF_NODE	75:51	75:51	25	,
ARGUMENT	76:11	76:78	25	tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 ) -> contents
FUNCTION_CALL	76:11	76:75	26	tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 ) , 2 )
CALLEE	76:11	76:11	27	tree_child
LEAF_NODE	76:11	76:11	28	tree_child
LEAF_NODE	76:21	76:21	27	(
ARGUMENT	76:22	76:22	27	tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 )
FUNCTION_CALL	76:22	76:72	28	tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 0 )
CALLEE	76:22	76:22	29	tree_child
LEAF_NODE	76:22	76:22	30	tree_child
LEAF_NODE	76:32	76:32	29	(
ARGUMENT	76:33	76:33	29	tree_child ( tree_child ( locations , 2 ) , 0 )
FUNCTION_CALL	76:33	76:69	30	tree_child ( tree_child ( locations , 2 ) , 0 )
CALLEE	76:33	76:33	31	tree_child
LEAF_NODE	76:33	76:33	32	tree_child
LEAF_NODE	76:43	76:43	31	(
ARGUMENT	76:44	76:44	31	tree_child ( locations , 2 )
FUNCTION_CALL	76:44	76:66	32	tree_child ( locations , 2 )
CALLEE	76:44	76:44	33	tree_child
LEAF_NODE	76:44	76:44	34	tree_child
LEAF_NODE	76:54	76:54	33	(
ARGUMENT	76:55	76:55	33	locations
FIELD	76:55	76:55	34	locations
LEAF_NODE	76:55	76:55	35	locations
LEAF_NODE	76:64	76:64	33	,
ARGUMENT	76:65	76:65	33	2
FIELD	76:65	76:65	34	2
LEAF_NODE	76:65	76:65	35	2
LEAF_NODE	76:66	76:66	33	)
LEAF_NODE	76:67	76:67	31	,
ARGUMENT	76:68	76:68	31	0
FIELD	76:68	76:68	32	0
LEAF_NODE	76:68	76:68	33	0
LEAF_NODE	76:69	76:69	31	)
LEAF_NODE	76:70	76:70	29	,
ARGUMENT	76:71	76:71	29	0
FIELD	76:71	76:71	30	0
LEAF_NODE	76:71	76:71	31	0
LEAF_NODE	76:72	76:72	29	)
LEAF_NODE	76:73	76:73	27	,
ARGUMENT	76:74	76:74	27	2
FIELD	76:74	76:74	28	2
LEAF_NODE	76:74	76:74	29	2
LEAF_NODE	76:75	76:75	27	)
LEAF_NODE	76:76	76:76	26	->
LEAF_NODE	76:78	76:78	26	contents
LEAF_NODE	76:86	76:86	25	,
ARGUMENT	77:11	77:78	25	tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 2 ) , 2 ) -> contents
FUNCTION_CALL	77:11	77:75	26	tree_child ( tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 2 ) , 2 )
CALLEE	77:11	77:11	27	tree_child
LEAF_NODE	77:11	77:11	28	tree_child
LEAF_NODE	77:21	77:21	27	(
ARGUMENT	77:22	77:22	27	tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 2 )
FUNCTION_CALL	77:22	77:72	28	tree_child ( tree_child ( tree_child ( locations , 2 ) , 0 ) , 2 )
CALLEE	77:22	77:22	29	tree_child
LEAF_NODE	77:22	77:22	30	tree_child
LEAF_NODE	77:32	77:32	29	(
ARGUMENT	77:33	77:33	29	tree_child ( tree_child ( locations , 2 ) , 0 )
FUNCTION_CALL	77:33	77:69	30	tree_child ( tree_child ( locations , 2 ) , 0 )
CALLEE	77:33	77:33	31	tree_child
LEAF_NODE	77:33	77:33	32	tree_child
LEAF_NODE	77:43	77:43	31	(
ARGUMENT	77:44	77:44	31	tree_child ( locations , 2 )
FUNCTION_CALL	77:44	77:66	32	tree_child ( locations , 2 )
CALLEE	77:44	77:44	33	tree_child
LEAF_NODE	77:44	77:44	34	tree_child
LEAF_NODE	77:54	77:54	33	(
ARGUMENT	77:55	77:55	33	locations
FIELD	77:55	77:55	34	locations
LEAF_NODE	77:55	77:55	35	locations
LEAF_NODE	77:64	77:64	33	,
ARGUMENT	77:65	77:65	33	2
FIELD	77:65	77:65	34	2
LEAF_NODE	77:65	77:65	35	2
LEAF_NODE	77:66	77:66	33	)
LEAF_NODE	77:67	77:67	31	,
ARGUMENT	77:68	77:68	31	0
FIELD	77:68	77:68	32	0
LEAF_NODE	77:68	77:68	33	0
LEAF_NODE	77:69	77:69	31	)
LEAF_NODE	77:70	77:70	29	,
ARGUMENT	77:71	77:71	29	2
FIELD	77:71	77:71	30	2
LEAF_NODE	77:71	77:71	31	2
LEAF_NODE	77:72	77:72	29	)
LEAF_NODE	77:73	77:73	27	,
ARGUMENT	77:74	77:74	27	2
FIELD	77:74	77:74	28	2
LEAF_NODE	77:74	77:74	29	2
LEAF_NODE	77:75	77:75	27	)
LEAF_NODE	77:76	77:76	26	->
LEAF_NODE	77:78	77:78	26	contents
LEAF_NODE	77:86	77:86	25	)
LEAF_NODE	77:87	77:87	21	;
EXPR_STATEMENT	78:6	78:69	20	purple_notify_user_info_add_pair ( user_info , _ ( "Location" ) , tmp ) ;
EXPR	78:6	78:6	21	purple_notify_user_info_add_pair ( user_info , _ ( "Location" ) , tmp )
FUNCTION_CALL	78:6	78:68	22	purple_notify_user_info_add_pair ( user_info , _ ( "Location" ) , tmp )
CALLEE	78:6	78:6	23	purple_notify_user_info_add_pair
LEAF_NODE	78:6	78:6	24	purple_notify_user_info_add_pair
LEAF_NODE	78:38	78:38	23	(
ARGUMENT	78:39	78:39	23	user_info
FIELD	78:39	78:39	24	user_info
LEAF_NODE	78:39	78:39	25	user_info
LEAF_NODE	78:48	78:48	23	,
ARGUMENT	78:50	78:50	23	_ ( "Location" )
FUNCTION_CALL	78:50	78:62	24	_ ( "Location" )
CALLEE	78:50	78:50	25	_
LEAF_NODE	78:50	78:50	26	_
LEAF_NODE	78:51	78:51	25	(
ARGUMENT	78:52	78:52	25	"Location"
FIELD	78:52	78:52	26	"Location"
LEAF_NODE	78:52	78:52	27	"Location"
LEAF_NODE	78:62	78:62	25	)
LEAF_NODE	78:63	78:63	23	,
ARGUMENT	78:65	78:65	23	tmp
FIELD	78:65	78:65	24	tmp
LEAF_NODE	78:65	78:65	25	tmp
LEAF_NODE	78:68	78:68	23	)
LEAF_NODE	78:69	78:69	21	;
EXPR_STATEMENT	79:6	79:17	20	g_free ( tmp ) ;
EXPR	79:6	79:6	21	g_free ( tmp )
FUNCTION_CALL	79:6	79:16	22	g_free ( tmp )
CALLEE	79:6	79:6	23	g_free
LEAF_NODE	79:6	79:6	24	g_free
LEAF_NODE	79:12	79:12	23	(
ARGUMENT	79:13	79:13	23	tmp
FIELD	79:13	79:13	24	tmp
LEAF_NODE	79:13	79:13	25	tmp
LEAF_NODE	79:16	79:16	23	)
LEAF_NODE	79:17	79:17	21	;
LEAF_NODE	80:5	80:5	19	}
EXPR_STATEMENT	81:5	82:34	17	purple_notify_userinfo ( gc , b ? bname : user , user_info , NULL , NULL ) ;
EXPR	81:5	81:5	18	purple_notify_userinfo ( gc , b ? bname : user , user_info , NULL , NULL )
FUNCTION_CALL	81:5	82:33	19	purple_notify_userinfo ( gc , b ? bname : user , user_info , NULL , NULL )
CALLEE	81:5	81:5	20	purple_notify_userinfo
LEAF_NODE	81:5	81:5	21	purple_notify_userinfo
LEAF_NODE	81:27	81:27	20	(
ARGUMENT	81:28	81:28	20	gc
FIELD	81:28	81:28	21	gc
LEAF_NODE	81:28	81:28	22	gc
LEAF_NODE	81:30	81:30	20	,
ARGUMENT	81:32	81:32	20	b ? bname : user
COND_EXPR	81:32	81:44	21	b ? bname : user
CONDITION	81:32	81:32	22	b
FIELD	81:32	81:32	23	b
LEAF_NODE	81:32	81:32	24	b
LEAF_NODE	81:34	81:34	22	?
EXPR	81:36	81:36	22	bname
FIELD	81:36	81:36	23	bname
LEAF_NODE	81:36	81:36	24	bname
LEAF_NODE	81:42	81:42	22	:
FIELD	81:44	81:44	22	user
LEAF_NODE	81:44	81:44	23	user
LEAF_NODE	81:48	81:48	20	,
ARGUMENT	82:12	82:12	20	user_info
FIELD	82:12	82:12	21	user_info
LEAF_NODE	82:12	82:12	22	user_info
LEAF_NODE	82:21	82:21	20	,
ARGUMENT	82:23	82:23	20	NULL
FIELD	82:23	82:23	21	NULL
LEAF_NODE	82:23	82:23	22	NULL
LEAF_NODE	82:27	82:27	20	,
ARGUMENT	82:29	82:29	20	NULL
FIELD	82:29	82:29	21	NULL
LEAF_NODE	82:29	82:29	22	NULL
LEAF_NODE	82:33	82:33	20	)
LEAF_NODE	82:34	82:34	18	;
EXPR_STATEMENT	83:5	83:47	17	purple_notify_user_info_destroy ( user_info ) ;
EXPR	83:5	83:5	18	purple_notify_user_info_destroy ( user_info )
FUNCTION_CALL	83:5	83:46	19	purple_notify_user_info_destroy ( user_info )
CALLEE	83:5	83:5	20	purple_notify_user_info_destroy
LEAF_NODE	83:5	83:5	21	purple_notify_user_info_destroy
LEAF_NODE	83:36	83:36	20	(
ARGUMENT	83:37	83:37	20	user_info
FIELD	83:37	83:37	21	user_info
LEAF_NODE	83:37	83:37	22	user_info
LEAF_NODE	83:46	83:46	20	)
LEAF_NODE	83:47	83:47	18	;
LEAF_NODE	84:4	84:4	16	}
SELECTION	84:6	84:11	14	
KEYWORD	84:6	84:6	15	else
LEAF_NODE	84:6	84:6	16	else
STATEMENTS	84:11	89:4	15	
LEAF_NODE	84:11	84:11	16	{
STATEMENTS	85:5	87:5	16	
SELECTION	85:5	86:6	17	
KEYWORD	85:5	85:5	18	if
LEAF_NODE	85:5	85:5	19	if
LEAF_NODE	85:8	85:8	18	(
CONDITION	85:9	85:9	18	nlocs > 0
EXPR	85:9	85:15	19	nlocs > 0
FIELD	85:9	85:9	20	nlocs
LEAF_NODE	85:9	85:9	21	nlocs
REL_OPERATOR	85:14	85:14	20	>
LEAF_NODE	85:14	85:14	21	>
FIELD	85:15	85:15	20	0
LEAF_NODE	85:15	85:15	21	0
LEAF_NODE	85:16	85:16	18	)
STATEMENTS	86:6	86:6	18	
EXPR_STATEMENT	86:6	86:83	19	purple_prpl_got_user_status ( gc -> account , b ? bname : user , "available" , NULL ) ;
EXPR	86:6	86:6	20	purple_prpl_got_user_status ( gc -> account , b ? bname : user , "available" , NULL )
FUNCTION_CALL	86:6	86:82	21	purple_prpl_got_user_status ( gc -> account , b ? bname : user , "available" , NULL )
CALLEE	86:6	86:6	22	purple_prpl_got_user_status
LEAF_NODE	86:6	86:6	23	purple_prpl_got_user_status
LEAF_NODE	86:33	86:33	22	(
ARGUMENT	86:34	86:34	22	gc -> account
FIELD	86:34	86:38	23	gc -> account
LEAF_NODE	86:34	86:34	24	gc
LEAF_NODE	86:36	86:36	24	->
LEAF_NODE	86:38	86:38	24	account
LEAF_NODE	86:45	86:45	22	,
ARGUMENT	86:47	86:47	22	b ? bname : user
COND_EXPR	86:47	86:59	23	b ? bname : user
CONDITION	86:47	86:47	24	b
FIELD	86:47	86:47	25	b
LEAF_NODE	86:47	86:47	26	b
LEAF_NODE	86:49	86:49	24	?
EXPR	86:51	86:51	24	bname
FIELD	86:51	86:51	25	bname
LEAF_NODE	86:51	86:51	26	bname
LEAF_NODE	86:57	86:57	24	:
FIELD	86:59	86:59	24	user
LEAF_NODE	86:59	86:59	25	user
LEAF_NODE	86:63	86:63	22	,
ARGUMENT	86:65	86:65	22	"available"
FIELD	86:65	86:65	23	"available"
LEAF_NODE	86:65	86:65	24	"available"
LEAF_NODE	86:76	86:76	22	,
ARGUMENT	86:78	86:78	22	NULL
FIELD	86:78	86:78	23	NULL
LEAF_NODE	86:78	86:78	24	NULL
LEAF_NODE	86:82	86:82	22	)
LEAF_NODE	86:83	86:83	20	;
SELECTION	87:5	88:6	17	
KEYWORD	87:5	87:5	18	else
LEAF_NODE	87:5	87:5	19	else
STATEMENTS	88:6	88:6	18	
EXPR_STATEMENT	88:6	88:81	19	purple_prpl_got_user_status ( gc -> account , b ? bname : user , "offline" , NULL ) ;
EXPR	88:6	88:6	20	purple_prpl_got_user_status ( gc -> account , b ? bname : user , "offline" , NULL )
FUNCTION_CALL	88:6	88:80	21	purple_prpl_got_user_status ( gc -> account , b ? bname : user , "offline" , NULL )
CALLEE	88:6	88:6	22	purple_prpl_got_user_status
LEAF_NODE	88:6	88:6	23	purple_prpl_got_user_status
LEAF_NODE	88:33	88:33	22	(
ARGUMENT	88:34	88:34	22	gc -> account
FIELD	88:34	88:38	23	gc -> account
LEAF_NODE	88:34	88:34	24	gc
LEAF_NODE	88:36	88:36	24	->
LEAF_NODE	88:38	88:38	24	account
LEAF_NODE	88:45	88:45	22	,
ARGUMENT	88:47	88:47	22	b ? bname : user
COND_EXPR	88:47	88:59	23	b ? bname : user
CONDITION	88:47	88:47	24	b
FIELD	88:47	88:47	25	b
LEAF_NODE	88:47	88:47	26	b
LEAF_NODE	88:49	88:49	24	?
EXPR	88:51	88:51	24	bname
FIELD	88:51	88:51	25	bname
LEAF_NODE	88:51	88:51	26	bname
LEAF_NODE	88:57	88:57	24	:
FIELD	88:59	88:59	24	user
LEAF_NODE	88:59	88:59	25	user
LEAF_NODE	88:63	88:63	22	,
ARGUMENT	88:65	88:65	22	"offline"
FIELD	88:65	88:65	23	"offline"
LEAF_NODE	88:65	88:65	24	"offline"
LEAF_NODE	88:74	88:74	22	,
ARGUMENT	88:76	88:76	22	NULL
FIELD	88:76	88:76	23	NULL
LEAF_NODE	88:76	88:76	24	NULL
LEAF_NODE	88:80	88:80	22	)
LEAF_NODE	88:81	88:81	20	;
LEAF_NODE	89:4	89:4	16	}
LEAF_NODE	90:3	90:3	13	}
SELECTION	91:3	91:8	9	
KEYWORD	91:3	91:3	10	else
LEAF_NODE	91:3	91:3	11	else
STATEMENTS	91:8	91:8	10	
SELECTION	91:8	91:60	11	
KEYWORD	91:8	91:8	12	if
LEAF_NODE	91:8	91:8	13	if
LEAF_NODE	91:11	91:11	12	(
CONDITION	91:12	91:12	12	! g_ascii_strncasecmp ( spewtype , "subscribed" , 10 )
EXPR	91:12	91:12	13	! g_ascii_strncasecmp ( spewtype , "subscribed" , 10 )
UNARY_EXPR	91:12	91:13	14	! g_ascii_strncasecmp ( spewtype , "subscribed" , 10 )
UNARY_OPERATOR	91:12	91:12	15	!
LEAF_NODE	91:12	91:12	16	!
FUNCTION_CALL	91:13	91:57	15	g_ascii_strncasecmp ( spewtype , "subscribed" , 10 )
CALLEE	91:13	91:13	16	g_ascii_strncasecmp
LEAF_NODE	91:13	91:13	17	g_ascii_strncasecmp
LEAF_NODE	91:32	91:32	16	(
ARGUMENT	91:33	91:33	16	spewtype
FIELD	91:33	91:33	17	spewtype
LEAF_NODE	91:33	91:33	18	spewtype
LEAF_NODE	91:41	91:41	16	,
ARGUMENT	91:42	91:42	16	"subscribed"
FIELD	91:42	91:42	17	"subscribed"
LEAF_NODE	91:42	91:42	18	"subscribed"
LEAF_NODE	91:54	91:54	16	,
ARGUMENT	91:55	91:55	16	10
FIELD	91:55	91:55	17	10
LEAF_NODE	91:55	91:55	18	10
LEAF_NODE	91:57	91:57	16	)
LEAF_NODE	91:58	91:58	12	)
STATEMENTS	91:60	92:3	12	
LEAF_NODE	91:60	91:60	13	{
LEAF_NODE	0:0	0:0	13	STATEMENTS
LEAF_NODE	92:3	92:3	13	}
SELECTION	93:3	93:8	9	
KEYWORD	93:3	93:3	10	else
LEAF_NODE	93:3	93:3	11	else
STATEMENTS	93:8	93:8	10	
SELECTION	93:8	93:54	11	
KEYWORD	93:8	93:8	12	if
LEAF_NODE	93:8	93:8	13	if
LEAF_NODE	93:11	93:11	12	(
CONDITION	93:12	93:12	12	! g_ascii_strncasecmp ( spewtype , "start" , 5 )
EXPR	93:12	93:12	13	! g_ascii_strncasecmp ( spewtype , "start" , 5 )
UNARY_EXPR	93:12	93:13	14	! g_ascii_strncasecmp ( spewtype , "start" , 5 )
UNARY_OPERATOR	93:12	93:12	15	!
LEAF_NODE	93:12	93:12	16	!
FUNCTION_CALL	93:13	93:51	15	g_ascii_strncasecmp ( spewtype , "start" , 5 )
CALLEE	93:13	93:13	16	g_ascii_strncasecmp
LEAF_NODE	93:13	93:13	17	g_ascii_strncasecmp
LEAF_NODE	93:32	93:32	16	(
ARGUMENT	93:33	93:33	16	spewtype
FIELD	93:33	93:33	17	spewtype
LEAF_NODE	93:33	93:33	18	spewtype
LEAF_NODE	93:41	93:41	16	,
ARGUMENT	93:42	93:42	16	"start"
FIELD	93:42	93:42	17	"start"
LEAF_NODE	93:42	93:42	18	"start"
LEAF_NODE	93:49	93:49	16	,
ARGUMENT	93:50	93:50	16	5
FIELD	93:50	93:50	17	5
LEAF_NODE	93:50	93:50	18	5
LEAF_NODE	93:51	93:51	16	)
LEAF_NODE	93:52	93:52	12	)
STATEMENTS	93:54	94:3	12	
LEAF_NODE	93:54	93:54	13	{
LEAF_NODE	0:0	0:0	13	STATEMENTS
LEAF_NODE	94:3	94:3	13	}
SELECTION	95:3	95:8	9	
KEYWORD	95:3	95:3	10	else
LEAF_NODE	95:3	95:3	11	else
STATEMENTS	95:8	95:8	10	
SELECTION	95:8	95:54	11	
KEYWORD	95:8	95:8	12	if
LEAF_NODE	95:8	95:8	13	if
LEAF_NODE	95:11	95:11	12	(
CONDITION	95:12	95:12	12	! g_ascii_strncasecmp ( spewtype , "error" , 5 )
EXPR	95:12	95:12	13	! g_ascii_strncasecmp ( spewtype , "error" , 5 )
UNARY_EXPR	95:12	95:13	14	! g_ascii_strncasecmp ( spewtype , "error" , 5 )
UNARY_OPERATOR	95:12	95:12	15	!
LEAF_NODE	95:12	95:12	16	!
FUNCTION_CALL	95:13	95:51	15	g_ascii_strncasecmp ( spewtype , "error" , 5 )
CALLEE	95:13	95:13	16	g_ascii_strncasecmp
LEAF_NODE	95:13	95:13	17	g_ascii_strncasecmp
LEAF_NODE	95:32	95:32	16	(
ARGUMENT	95:33	95:33	16	spewtype
FIELD	95:33	95:33	17	spewtype
LEAF_NODE	95:33	95:33	18	spewtype
LEAF_NODE	95:41	95:41	16	,
ARGUMENT	95:42	95:42	16	"error"
FIELD	95:42	95:42	17	"error"
LEAF_NODE	95:42	95:42	18	"error"
LEAF_NODE	95:49	95:49	16	,
ARGUMENT	95:50	95:50	16	5
FIELD	95:50	95:50	17	5
LEAF_NODE	95:50	95:50	18	5
LEAF_NODE	95:51	95:51	16	)
LEAF_NODE	95:52	95:52	12	)
STATEMENTS	95:54	97:3	12	
LEAF_NODE	95:54	95:54	13	{
LEAF_NODE	0:0	0:0	13	STATEMENTS
LEAF_NODE	97:3	97:3	13	}
LEAF_NODE	98:2	98:2	8	}
SELECTION	98:4	98:9	6	
KEYWORD	98:4	98:4	7	else
LEAF_NODE	98:4	98:4	8	else
STATEMENTS	98:9	99:2	7	
LEAF_NODE	98:9	98:9	8	{
LEAF_NODE	0:0	0:0	8	STATEMENTS
LEAF_NODE	99:2	99:2	8	}
LEAF_NODE	100:1	100:1	5	}
SELECTION	100:3	100:8	3	
KEYWORD	100:3	100:3	4	else
LEAF_NODE	100:3	100:3	5	else
STATEMENTS	100:8	101:1	4	
LEAF_NODE	100:8	100:8	5	{
LEAF_NODE	0:0	0:0	5	STATEMENTS
LEAF_NODE	101:1	101:1	5	}
EXPR_STATEMENT	102:1	102:30	3	free_parse_tree ( newparsetree ) ;
EXPR	102:1	102:1	4	free_parse_tree ( newparsetree )
FUNCTION_CALL	102:1	102:29	5	free_parse_tree ( newparsetree )
CALLEE	102:1	102:1	6	free_parse_tree
LEAF_NODE	102:1	102:1	7	free_parse_tree
LEAF_NODE	102:16	102:16	6	(
ARGUMENT	102:17	102:17	6	newparsetree
FIELD	102:17	102:17	7	newparsetree
LEAF_NODE	102:17	102:17	8	newparsetree
LEAF_NODE	102:29	102:29	6	)
LEAF_NODE	102:30	102:30	4	;
JUMP_STATEMENT	103:1	103:12	3	return TRUE ;
KEYWORD	103:1	103:1	4	return
LEAF_NODE	103:1	103:1	5	return
DESTINATION	103:8	103:8	4	TRUE
EXPR	103:8	103:8	5	TRUE
FIELD	103:8	103:8	6	TRUE
LEAF_NODE	103:8	103:8	7	TRUE
LEAF_NODE	103:12	103:12	4	;
LEAF_NODE	104:0	104:0	2	}

SOURCE_FILE	1:0	37:1	0	
FUNCTION_DEF	1:0	29:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	pidgin_mini_dialog_set_property
LEAF_NODE	2:0	2:0	3	pidgin_mini_dialog_set_property
PARAMETER_LIST	2:31	5:49	2	( GObject * object , guint property_id , const GValue * value , GParamSpec * pspec )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:41	3	GObject * object
TYPE	2:32	2:40	4	GObject *
TYPE_NAME	2:32	2:32	5	GObject
LEAF_NODE	2:32	2:32	6	GObject
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	object
LEAF_NODE	2:41	2:41	5	object
LEAF_NODE	2:47	2:47	3	,
PARAMETER_DECL	3:32	3:38	3	guint property_id
TYPE	3:32	3:32	4	guint
TYPE_NAME	3:32	3:32	5	guint
LEAF_NODE	3:32	3:32	6	guint
NAME	3:38	3:38	4	property_id
LEAF_NODE	3:38	3:38	5	property_id
LEAF_NODE	3:49	3:49	3	,
PARAMETER_DECL	4:32	4:46	3	const GValue * value
TYPE	4:32	4:45	4	const GValue *
TYPE_NAME	4:32	4:38	5	const GValue
LEAF_NODE	4:32	4:32	6	const
LEAF_NODE	4:38	4:38	6	GValue
POINTER	4:45	4:45	5	*
LEAF_NODE	4:45	4:45	6	*
NAME	4:46	4:46	4	value
LEAF_NODE	4:46	4:46	5	value
LEAF_NODE	4:51	4:51	3	,
PARAMETER_DECL	5:32	5:44	3	GParamSpec * pspec
TYPE	5:32	5:43	4	GParamSpec *
TYPE_NAME	5:32	5:32	5	GParamSpec
LEAF_NODE	5:32	5:32	6	GParamSpec
POINTER	5:43	5:43	5	*
LEAF_NODE	5:43	5:43	6	*
NAME	5:44	5:44	4	pspec
LEAF_NODE	5:44	5:44	5	pspec
LEAF_NODE	5:49	5:49	3	)
LEAF_NODE	6:0	6:0	2	{
STATEMENTS	7:1	9:1	2	
SIMPLE_DECL	7:1	7:52	3	PidginMiniDialog * self ; self = PIDGIN_MINI_DIALOG ( object ) ;
VAR_DECL	7:1	7:19	4	PidginMiniDialog * self ; self = PIDGIN_MINI_DIALOG ( object )
TYPE	7:1	7:18	5	PidginMiniDialog *
TYPE_NAME	7:1	7:1	6	PidginMiniDialog
LEAF_NODE	7:1	7:1	7	PidginMiniDialog
POINTER	7:18	7:18	6	*
LEAF_NODE	7:18	7:18	7	*
NAME	7:19	7:19	5	self
LEAF_NODE	7:19	7:19	6	self
LEAF_NODE	0:0	0:0	5	;
INIT	7:19	7:19	5	self = PIDGIN_MINI_DIALOG ( object )
ASSIGN	7:19	7:26	6	self = PIDGIN_MINI_DIALOG ( object )
LVAL	7:19	7:19	7	self
NAME	7:19	7:19	8	self
LEAF_NODE	7:19	7:19	9	self
ASSIGN_OP	7:24	7:24	7	=
LEAF_NODE	7:24	7:24	8	=
RVAL	7:26	7:26	7	PIDGIN_MINI_DIALOG ( object )
FUNCTION_CALL	7:26	7:51	8	PIDGIN_MINI_DIALOG ( object )
CALLEE	7:26	7:26	9	PIDGIN_MINI_DIALOG
LEAF_NODE	7:26	7:26	10	PIDGIN_MINI_DIALOG
LEAF_NODE	7:44	7:44	9	(
ARGUMENT	7:45	7:45	9	object
FIELD	7:45	7:45	10	object
LEAF_NODE	7:45	7:45	11	object
LEAF_NODE	7:51	7:51	9	)
LEAF_NODE	7:52	7:52	4	;
SIMPLE_DECL	8:1	8:69	3	PidginMiniDialogPrivate * priv ; priv = PIDGIN_MINI_DIALOG_GET_PRIVATE ( self ) ;
VAR_DECL	8:1	8:26	4	PidginMiniDialogPrivate * priv ; priv = PIDGIN_MINI_DIALOG_GET_PRIVATE ( self )
TYPE	8:1	8:25	5	PidginMiniDialogPrivate *
TYPE_NAME	8:1	8:1	6	PidginMiniDialogPrivate
LEAF_NODE	8:1	8:1	7	PidginMiniDialogPrivate
POINTER	8:25	8:25	6	*
LEAF_NODE	8:25	8:25	7	*
NAME	8:26	8:26	5	priv
LEAF_NODE	8:26	8:26	6	priv
LEAF_NODE	0:0	0:0	5	;
INIT	8:26	8:26	5	priv = PIDGIN_MINI_DIALOG_GET_PRIVATE ( self )
ASSIGN	8:26	8:33	6	priv = PIDGIN_MINI_DIALOG_GET_PRIVATE ( self )
LVAL	8:26	8:26	7	priv
NAME	8:26	8:26	8	priv
LEAF_NODE	8:26	8:26	9	priv
ASSIGN_OP	8:31	8:31	7	=
LEAF_NODE	8:31	8:31	8	=
RVAL	8:33	8:33	7	PIDGIN_MINI_DIALOG_GET_PRIVATE ( self )
FUNCTION_CALL	8:33	8:68	8	PIDGIN_MINI_DIALOG_GET_PRIVATE ( self )
CALLEE	8:33	8:33	9	PIDGIN_MINI_DIALOG_GET_PRIVATE
LEAF_NODE	8:33	8:33	10	PIDGIN_MINI_DIALOG_GET_PRIVATE
LEAF_NODE	8:63	8:63	9	(
ARGUMENT	8:64	8:64	9	self
FIELD	8:64	8:64	10	self
LEAF_NODE	8:64	8:64	11	self
LEAF_NODE	8:68	8:68	9	)
LEAF_NODE	8:69	8:69	4	;
SELECTION	9:1	9:22	3	
KEYWORD	9:1	9:1	4	switch
LEAF_NODE	9:1	9:1	5	switch
LEAF_NODE	9:8	9:8	4	(
CONDITION	9:9	9:9	4	property_id
EXPR	9:9	9:9	5	property_id
FIELD	9:9	9:9	6	property_id
LEAF_NODE	9:9	9:9	7	property_id
LEAF_NODE	9:20	9:20	4	)
STATEMENTS	9:22	28:1	4	
LEAF_NODE	9:22	9:22	5	{
STATEMENTS	10:2	27:3	5	
LABEL	10:2	10:17	6	case PROP_TITLE :
LEAF_NODE	10:2	10:2	7	case
LEAF_NODE	10:7	10:7	7	PROP_TITLE
LEAF_NODE	10:17	10:17	7	:
EXPR_STATEMENT	11:3	11:57	6	mini_dialog_set_title ( self , g_value_get_string ( value ) ) ;
EXPR	11:3	11:3	7	mini_dialog_set_title ( self , g_value_get_string ( value ) )
FUNCTION_CALL	11:3	11:56	8	mini_dialog_set_title ( self , g_value_get_string ( value ) )
CALLEE	11:3	11:3	9	mini_dialog_set_title
LEAF_NODE	11:3	11:3	10	mini_dialog_set_title
LEAF_NODE	11:24	11:24	9	(
ARGUMENT	11:25	11:25	9	self
FIELD	11:25	11:25	10	self
LEAF_NODE	11:25	11:25	11	self
LEAF_NODE	11:29	11:29	9	,
ARGUMENT	11:31	11:31	9	g_value_get_string ( value )
FUNCTION_CALL	11:31	11:55	10	g_value_get_string ( value )
CALLEE	11:31	11:31	11	g_value_get_string
LEAF_NODE	11:31	11:31	12	g_value_get_string
LEAF_NODE	11:49	11:49	11	(
ARGUMENT	11:50	11:50	11	value
FIELD	11:50	11:50	12	value
LEAF_NODE	11:50	11:50	13	value
LEAF_NODE	11:55	11:55	11	)
LEAF_NODE	11:56	11:56	9	)
LEAF_NODE	11:57	11:57	7	;
JUMP_STATEMENT	12:3	12:8	6	break DESTINATION ;
KEYWORD	12:3	12:3	7	break
LEAF_NODE	12:3	12:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	12:8	12:8	7	;
LABEL	13:2	13:23	6	case PROP_DESCRIPTION :
LEAF_NODE	13:2	13:2	7	case
LEAF_NODE	13:7	13:7	7	PROP_DESCRIPTION
LEAF_NODE	13:23	13:23	7	:
EXPR_STATEMENT	14:3	14:63	6	mini_dialog_set_description ( self , g_value_get_string ( value ) ) ;
EXPR	14:3	14:3	7	mini_dialog_set_description ( self , g_value_get_string ( value ) )
FUNCTION_CALL	14:3	14:62	8	mini_dialog_set_description ( self , g_value_get_string ( value ) )
CALLEE	14:3	14:3	9	mini_dialog_set_description
LEAF_NODE	14:3	14:3	10	mini_dialog_set_description
LEAF_NODE	14:30	14:30	9	(
ARGUMENT	14:31	14:31	9	self
FIELD	14:31	14:31	10	self
LEAF_NODE	14:31	14:31	11	self
LEAF_NODE	14:35	14:35	9	,
ARGUMENT	14:37	14:37	9	g_value_get_string ( value )
FUNCTION_CALL	14:37	14:61	10	g_value_get_string ( value )
CALLEE	14:37	14:37	11	g_value_get_string
LEAF_NODE	14:37	14:37	12	g_value_get_string
LEAF_NODE	14:55	14:55	11	(
ARGUMENT	14:56	14:56	11	value
FIELD	14:56	14:56	12	value
LEAF_NODE	14:56	14:56	13	value
LEAF_NODE	14:61	14:61	11	)
LEAF_NODE	14:62	14:62	9	)
LEAF_NODE	14:63	14:63	7	;
JUMP_STATEMENT	15:3	15:8	6	break DESTINATION ;
KEYWORD	15:3	15:3	7	break
LEAF_NODE	15:3	15:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	15:8	15:8	7	;
LABEL	16:2	16:21	6	case PROP_ICON_NAME :
LEAF_NODE	16:2	16:2	7	case
LEAF_NODE	16:7	16:7	7	PROP_ICON_NAME
LEAF_NODE	16:21	16:21	7	:
EXPR_STATEMENT	17:3	18:64	6	gtk_image_set_from_stock ( priv -> icon , g_value_get_string ( value ) , gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_EXTRA_SMALL ) ) ;
EXPR	17:3	17:3	7	gtk_image_set_from_stock ( priv -> icon , g_value_get_string ( value ) , gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_EXTRA_SMALL ) )
FUNCTION_CALL	17:3	18:63	8	gtk_image_set_from_stock ( priv -> icon , g_value_get_string ( value ) , gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_EXTRA_SMALL ) )
CALLEE	17:3	17:3	9	gtk_image_set_from_stock
LEAF_NODE	17:3	17:3	10	gtk_image_set_from_stock
LEAF_NODE	17:27	17:27	9	(
ARGUMENT	17:28	17:28	9	priv -> icon
FIELD	17:28	17:34	10	priv -> icon
LEAF_NODE	17:28	17:28	11	priv
LEAF_NODE	17:32	17:32	11	->
LEAF_NODE	17:34	17:34	11	icon
LEAF_NODE	17:38	17:38	9	,
ARGUMENT	17:40	17:40	9	g_value_get_string ( value )
FUNCTION_CALL	17:40	17:64	10	g_value_get_string ( value )
CALLEE	17:40	17:40	11	g_value_get_string
LEAF_NODE	17:40	17:40	12	g_value_get_string
LEAF_NODE	17:58	17:58	11	(
ARGUMENT	17:59	17:59	11	value
FIELD	17:59	17:59	12	value
LEAF_NODE	17:59	17:59	13	value
LEAF_NODE	17:64	17:64	11	)
LEAF_NODE	17:65	17:65	9	,
ARGUMENT	18:4	18:4	9	gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_EXTRA_SMALL )
FUNCTION_CALL	18:4	18:62	10	gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_EXTRA_SMALL )
CALLEE	18:4	18:4	11	gtk_icon_size_from_name
LEAF_NODE	18:4	18:4	12	gtk_icon_size_from_name
LEAF_NODE	18:27	18:27	11	(
ARGUMENT	18:28	18:28	11	PIDGIN_ICON_SIZE_TANGO_EXTRA_SMALL
FIELD	18:28	18:28	12	PIDGIN_ICON_SIZE_TANGO_EXTRA_SMALL
LEAF_NODE	18:28	18:28	13	PIDGIN_ICON_SIZE_TANGO_EXTRA_SMALL
LEAF_NODE	18:62	18:62	11	)
LEAF_NODE	18:63	18:63	9	)
LEAF_NODE	18:64	18:64	7	;
JUMP_STATEMENT	19:3	19:8	6	break DESTINATION ;
KEYWORD	19:3	19:3	7	break
LEAF_NODE	19:3	19:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	19:8	19:8	7	;
LABEL	20:2	20:23	6	case PROP_CUSTOM_ICON :
LEAF_NODE	20:2	20:2	7	case
LEAF_NODE	20:7	20:7	7	PROP_CUSTOM_ICON
LEAF_NODE	20:23	20:23	7	:
EXPR_STATEMENT	21:3	21:67	6	gtk_image_set_from_pixbuf ( priv -> icon , g_value_get_object ( value ) ) ;
EXPR	21:3	21:3	7	gtk_image_set_from_pixbuf ( priv -> icon , g_value_get_object ( value ) )
FUNCTION_CALL	21:3	21:66	8	gtk_image_set_from_pixbuf ( priv -> icon , g_value_get_object ( value ) )
CALLEE	21:3	21:3	9	gtk_image_set_from_pixbuf
LEAF_NODE	21:3	21:3	10	gtk_image_set_from_pixbuf
LEAF_NODE	21:28	21:28	9	(
ARGUMENT	21:29	21:29	9	priv -> icon
FIELD	21:29	21:35	10	priv -> icon
LEAF_NODE	21:29	21:29	11	priv
LEAF_NODE	21:33	21:33	11	->
LEAF_NODE	21:35	21:35	11	icon
LEAF_NODE	21:39	21:39	9	,
ARGUMENT	21:41	21:41	9	g_value_get_object ( value )
FUNCTION_CALL	21:41	21:65	10	g_value_get_object ( value )
CALLEE	21:41	21:41	11	g_value_get_object
LEAF_NODE	21:41	21:41	12	g_value_get_object
LEAF_NODE	21:59	21:59	11	(
ARGUMENT	21:60	21:60	11	value
FIELD	21:60	21:60	12	value
LEAF_NODE	21:60	21:60	13	value
LEAF_NODE	21:65	21:65	11	)
LEAF_NODE	21:66	21:66	9	)
LEAF_NODE	21:67	21:67	7	;
JUMP_STATEMENT	22:3	22:8	6	break DESTINATION ;
KEYWORD	22:3	22:3	7	break
LEAF_NODE	22:3	22:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	22:8	22:8	7	;
LABEL	23:2	23:37	6	case PROP_ENABLE_DESCRIPTION_MARKUP :
LEAF_NODE	23:2	23:2	7	case
LEAF_NODE	23:7	23:7	7	PROP_ENABLE_DESCRIPTION_MARKUP
LEAF_NODE	23:37	23:37	7	:
EXPR_STATEMENT	24:3	24:63	6	priv -> enable_description_markup = g_value_get_boolean ( value ) ;
EXPR	24:3	24:3	7	priv -> enable_description_markup = g_value_get_boolean ( value )
ASSIGN	24:3	24:37	8	priv -> enable_description_markup = g_value_get_boolean ( value )
LVAL	24:3	24:3	9	priv -> enable_description_markup
FIELD	24:3	24:9	10	priv -> enable_description_markup
LEAF_NODE	24:3	24:3	11	priv
LEAF_NODE	24:7	24:7	11	->
LEAF_NODE	24:9	24:9	11	enable_description_markup
ASSIGN_OP	24:35	24:35	9	=
LEAF_NODE	24:35	24:35	10	=
RVAL	24:37	24:37	9	g_value_get_boolean ( value )
FUNCTION_CALL	24:37	24:62	10	g_value_get_boolean ( value )
CALLEE	24:37	24:37	11	g_value_get_boolean
LEAF_NODE	24:37	24:37	12	g_value_get_boolean
LEAF_NODE	24:56	24:56	11	(
ARGUMENT	24:57	24:57	11	value
FIELD	24:57	24:57	12	value
LEAF_NODE	24:57	24:57	13	value
LEAF_NODE	24:62	24:62	11	)
LEAF_NODE	24:63	24:63	7	;
JUMP_STATEMENT	25:3	25:8	6	break DESTINATION ;
KEYWORD	25:3	25:3	7	break
LEAF_NODE	25:3	25:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	25:8	25:8	7	;
LABEL	26:2	26:9	6	default :
LEAF_NODE	26:2	26:2	7	default
LEAF_NODE	26:9	26:9	7	:
EXPR_STATEMENT	27:3	27:65	6	G_OBJECT_WARN_INVALID_PROPERTY_ID ( object , property_id , pspec ) ;
EXPR	27:3	27:3	7	G_OBJECT_WARN_INVALID_PROPERTY_ID ( object , property_id , pspec )
FUNCTION_CALL	27:3	27:64	8	G_OBJECT_WARN_INVALID_PROPERTY_ID ( object , property_id , pspec )
CALLEE	27:3	27:3	9	G_OBJECT_WARN_INVALID_PROPERTY_ID
LEAF_NODE	27:3	27:3	10	G_OBJECT_WARN_INVALID_PROPERTY_ID
LEAF_NODE	27:37	27:37	9	(
ARGUMENT	27:38	27:38	9	object
FIELD	27:38	27:38	10	object
LEAF_NODE	27:38	27:38	11	object
LEAF_NODE	27:44	27:44	9	,
ARGUMENT	27:46	27:46	9	property_id
FIELD	27:46	27:46	10	property_id
LEAF_NODE	27:46	27:46	11	property_id
LEAF_NODE	27:57	27:57	9	,
ARGUMENT	27:59	27:59	9	pspec
FIELD	27:59	27:59	10	pspec
LEAF_NODE	27:59	27:59	11	pspec
LEAF_NODE	27:64	27:64	9	)
LEAF_NODE	27:65	27:65	7	;
LEAF_NODE	28:1	28:1	5	}
LEAF_NODE	29:0	29:0	2	}
SIMPLE_DECL	36:1	36:52	1	PidginMiniDialog * self ; self = PIDGIN_MINI_DIALOG ( object ) ;
VAR_DECL	36:1	36:19	2	PidginMiniDialog * self ; self = PIDGIN_MINI_DIALOG ( object )
TYPE	36:1	36:18	3	PidginMiniDialog *
TYPE_NAME	36:1	36:1	4	PidginMiniDialog
LEAF_NODE	36:1	36:1	5	PidginMiniDialog
POINTER	36:18	36:18	4	*
LEAF_NODE	36:18	36:18	5	*
NAME	36:19	36:19	3	self
LEAF_NODE	36:19	36:19	4	self
LEAF_NODE	0:0	0:0	3	;
INIT	36:19	36:19	3	self = PIDGIN_MINI_DIALOG ( object )
ASSIGN	36:19	36:26	4	self = PIDGIN_MINI_DIALOG ( object )
LVAL	36:19	36:19	5	self
NAME	36:19	36:19	6	self
LEAF_NODE	36:19	36:19	7	self
ASSIGN_OP	36:24	36:24	5	=
LEAF_NODE	36:24	36:24	6	=
RVAL	36:26	36:26	5	PIDGIN_MINI_DIALOG ( object )
FUNCTION_CALL	36:26	36:51	6	PIDGIN_MINI_DIALOG ( object )
CALLEE	36:26	36:26	7	PIDGIN_MINI_DIALOG
LEAF_NODE	36:26	36:26	8	PIDGIN_MINI_DIALOG
LEAF_NODE	36:44	36:44	7	(
ARGUMENT	36:45	36:45	7	object
FIELD	36:45	36:45	8	object
LEAF_NODE	36:45	36:45	9	object
LEAF_NODE	36:51	36:51	7	)
LEAF_NODE	36:52	36:52	2	;
SIMPLE_DECL	37:1	37:69	1	PidginMiniDialogPrivate * priv ; priv = PIDGIN_MINI_DIALOG_GET_PRIVATE ( self ) ;
VAR_DECL	37:1	37:26	2	PidginMiniDialogPrivate * priv ; priv = PIDGIN_MINI_DIALOG_GET_PRIVATE ( self )
TYPE	37:1	37:25	3	PidginMiniDialogPrivate *
TYPE_NAME	37:1	37:1	4	PidginMiniDialogPrivate
LEAF_NODE	37:1	37:1	5	PidginMiniDialogPrivate
POINTER	37:25	37:25	4	*
LEAF_NODE	37:25	37:25	5	*
NAME	37:26	37:26	3	priv
LEAF_NODE	37:26	37:26	4	priv
LEAF_NODE	0:0	0:0	3	;
INIT	37:26	37:26	3	priv = PIDGIN_MINI_DIALOG_GET_PRIVATE ( self )
ASSIGN	37:26	37:33	4	priv = PIDGIN_MINI_DIALOG_GET_PRIVATE ( self )
LVAL	37:26	37:26	5	priv
NAME	37:26	37:26	6	priv
LEAF_NODE	37:26	37:26	7	priv
ASSIGN_OP	37:31	37:31	5	=
LEAF_NODE	37:31	37:31	6	=
RVAL	37:33	37:33	5	PIDGIN_MINI_DIALOG_GET_PRIVATE ( self )
FUNCTION_CALL	37:33	37:68	6	PIDGIN_MINI_DIALOG_GET_PRIVATE ( self )
CALLEE	37:33	37:33	7	PIDGIN_MINI_DIALOG_GET_PRIVATE
LEAF_NODE	37:33	37:33	8	PIDGIN_MINI_DIALOG_GET_PRIVATE
LEAF_NODE	37:63	37:63	7	(
ARGUMENT	37:64	37:64	7	self
FIELD	37:64	37:64	8	self
LEAF_NODE	37:64	37:64	9	self
LEAF_NODE	37:68	37:68	7	)
LEAF_NODE	37:69	37:69	2	;

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	43:0	1	
RETURN_TYPE	1:0	1:7	2	static protobuf_c_boolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	protobuf_c_boolean
LEAF_NODE	1:7	1:7	4	protobuf_c_boolean
FUNCTION_NAME	2:0	2:0	2	count_packed_elements
LEAF_NODE	2:0	2:0	3	count_packed_elements
PARAMETER_LIST	2:21	3:58	2	( ProtobufCType type , size_t len , const uint8_t * data , size_t * count_out )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:36	3	ProtobufCType type
TYPE	2:22	2:22	4	ProtobufCType
TYPE_NAME	2:22	2:22	5	ProtobufCType
LEAF_NODE	2:22	2:22	6	ProtobufCType
NAME	2:36	2:36	4	type
LEAF_NODE	2:36	2:36	5	type
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	3:8	3:15	3	size_t len
TYPE	3:8	3:8	4	size_t
TYPE_NAME	3:8	3:8	5	size_t
LEAF_NODE	3:8	3:8	6	size_t
NAME	3:15	3:15	4	len
LEAF_NODE	3:15	3:15	5	len
LEAF_NODE	3:18	3:18	3	,
PARAMETER_DECL	3:20	3:35	3	const uint8_t * data
TYPE	3:20	3:34	4	const uint8_t *
TYPE_NAME	3:20	3:26	5	const uint8_t
LEAF_NODE	3:20	3:20	6	const
LEAF_NODE	3:26	3:26	6	uint8_t
POINTER	3:34	3:34	5	*
LEAF_NODE	3:34	3:34	6	*
NAME	3:35	3:35	4	data
LEAF_NODE	3:35	3:35	5	data
LEAF_NODE	3:39	3:39	3	,
PARAMETER_DECL	3:41	3:49	3	size_t * count_out
TYPE	3:41	3:48	4	size_t *
TYPE_NAME	3:41	3:41	5	size_t
LEAF_NODE	3:41	3:41	6	size_t
POINTER	3:48	3:48	5	*
LEAF_NODE	3:48	3:48	6	*
NAME	3:49	3:49	4	count_out
LEAF_NODE	3:49	3:49	5	count_out
LEAF_NODE	3:58	3:58	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	5:1	2	
SELECTION	5:1	5:15	3	
KEYWORD	5:1	5:1	4	switch
LEAF_NODE	5:1	5:1	5	switch
LEAF_NODE	5:8	5:8	4	(
CONDITION	5:9	5:9	4	type
EXPR	5:9	5:9	5	type
FIELD	5:9	5:9	6	type
LEAF_NODE	5:9	5:9	7	type
LEAF_NODE	5:13	5:13	4	)
STATEMENTS	5:15	42:1	4	
LEAF_NODE	5:15	5:15	5	{
STATEMENTS	6:1	41:2	5	
LABEL	6:1	6:30	6	case PROTOBUF_C_TYPE_SFIXED32 :
LEAF_NODE	6:1	6:1	7	case
LEAF_NODE	6:6	6:6	7	PROTOBUF_C_TYPE_SFIXED32
LEAF_NODE	6:30	6:30	7	:
LABEL	7:1	7:29	6	case PROTOBUF_C_TYPE_FIXED32 :
LEAF_NODE	7:1	7:1	7	case
LEAF_NODE	7:6	7:6	7	PROTOBUF_C_TYPE_FIXED32
LEAF_NODE	7:29	7:29	7	:
LABEL	8:1	8:27	6	case PROTOBUF_C_TYPE_FLOAT :
LEAF_NODE	8:1	8:1	7	case
LEAF_NODE	8:6	8:6	7	PROTOBUF_C_TYPE_FLOAT
LEAF_NODE	8:27	8:27	7	:
SELECTION	9:2	9:20	6	
KEYWORD	9:2	9:2	7	if
LEAF_NODE	9:2	9:2	8	if
LEAF_NODE	9:5	9:5	7	(
CONDITION	9:6	9:6	7	len % 4 != 0
EXPR	9:6	9:17	8	len % 4 != 0
FIELD	9:6	9:6	9	len
LEAF_NODE	9:6	9:6	10	len
LEAF_NODE	9:10	9:10	9	%
FIELD	9:12	9:12	9	4
LEAF_NODE	9:12	9:12	10	4
EQ_OPERATOR	9:14	9:14	9	!=
LEAF_NODE	9:14	9:14	10	!=
FIELD	9:17	9:17	9	0
LEAF_NODE	9:17	9:17	10	0
LEAF_NODE	9:18	9:18	7	)
STATEMENTS	9:20	12:2	7	
LEAF_NODE	9:20	9:20	8	{
STATEMENTS	10:3	11:3	8	
EXPR_STATEMENT	10:3	10:90	9	PROTOBUF_C_UNPACK_ERROR ( "length must be a multiple of 4 for fixed-length 32-bit types" ) ;
EXPR	10:3	10:3	10	PROTOBUF_C_UNPACK_ERROR ( "length must be a multiple of 4 for fixed-length 32-bit types" )
FUNCTION_CALL	10:3	10:89	11	PROTOBUF_C_UNPACK_ERROR ( "length must be a multiple of 4 for fixed-length 32-bit types" )
CALLEE	10:3	10:3	12	PROTOBUF_C_UNPACK_ERROR
LEAF_NODE	10:3	10:3	13	PROTOBUF_C_UNPACK_ERROR
LEAF_NODE	10:26	10:26	12	(
ARGUMENT	10:27	10:27	12	"length must be a multiple of 4 for fixed-length 32-bit types"
FIELD	10:27	10:27	13	"length must be a multiple of 4 for fixed-length 32-bit types"
LEAF_NODE	10:27	10:27	14	"length must be a multiple of 4 for fixed-length 32-bit types"
LEAF_NODE	10:89	10:89	12	)
LEAF_NODE	10:90	10:90	10	;
JUMP_STATEMENT	11:3	11:15	9	return FALSE ;
KEYWORD	11:3	11:3	10	return
LEAF_NODE	11:3	11:3	11	return
DESTINATION	11:10	11:10	10	FALSE
EXPR	11:10	11:10	11	FALSE
FIELD	11:10	11:10	12	FALSE
LEAF_NODE	11:10	11:10	13	FALSE
LEAF_NODE	11:15	11:15	10	;
LEAF_NODE	12:2	12:2	8	}
EXPR_STATEMENT	13:2	13:22	6	* count_out = len / 4 ;
EXPR	13:2	13:2	7	* count_out = len / 4
ASSIGN	13:2	13:15	8	* count_out = len / 4
LVAL	13:2	13:2	9	* count_out
UNARY_EXPR	13:2	13:3	10	* count_out
UNARY_OPERATOR	13:2	13:2	11	*
LEAF_NODE	13:2	13:2	12	*
FIELD	13:3	13:3	11	count_out
LEAF_NODE	13:3	13:3	12	count_out
ASSIGN_OP	13:13	13:13	9	=
LEAF_NODE	13:13	13:13	10	=
RVAL	13:15	13:21	9	len / 4
FIELD	13:15	13:15	10	len
LEAF_NODE	13:15	13:15	11	len
LEAF_NODE	13:19	13:19	10	/
FIELD	13:21	13:21	10	4
LEAF_NODE	13:21	13:21	11	4
LEAF_NODE	13:22	13:22	7	;
JUMP_STATEMENT	14:2	14:13	6	return TRUE ;
KEYWORD	14:2	14:2	7	return
LEAF_NODE	14:2	14:2	8	return
DESTINATION	14:9	14:9	7	TRUE
EXPR	14:9	14:9	8	TRUE
FIELD	14:9	14:9	9	TRUE
LEAF_NODE	14:9	14:9	10	TRUE
LEAF_NODE	14:13	14:13	7	;
LABEL	15:1	15:30	6	case PROTOBUF_C_TYPE_SFIXED64 :
LEAF_NODE	15:1	15:1	7	case
LEAF_NODE	15:6	15:6	7	PROTOBUF_C_TYPE_SFIXED64
LEAF_NODE	15:30	15:30	7	:
LABEL	16:1	16:29	6	case PROTOBUF_C_TYPE_FIXED64 :
LEAF_NODE	16:1	16:1	7	case
LEAF_NODE	16:6	16:6	7	PROTOBUF_C_TYPE_FIXED64
LEAF_NODE	16:29	16:29	7	:
LABEL	17:1	17:28	6	case PROTOBUF_C_TYPE_DOUBLE :
LEAF_NODE	17:1	17:1	7	case
LEAF_NODE	17:6	17:6	7	PROTOBUF_C_TYPE_DOUBLE
LEAF_NODE	17:28	17:28	7	:
SELECTION	18:2	18:20	6	
KEYWORD	18:2	18:2	7	if
LEAF_NODE	18:2	18:2	8	if
LEAF_NODE	18:5	18:5	7	(
CONDITION	18:6	18:6	7	len % 8 != 0
EXPR	18:6	18:17	8	len % 8 != 0
FIELD	18:6	18:6	9	len
LEAF_NODE	18:6	18:6	10	len
LEAF_NODE	18:10	18:10	9	%
FIELD	18:12	18:12	9	8
LEAF_NODE	18:12	18:12	10	8
EQ_OPERATOR	18:14	18:14	9	!=
LEAF_NODE	18:14	18:14	10	!=
FIELD	18:17	18:17	9	0
LEAF_NODE	18:17	18:17	10	0
LEAF_NODE	18:18	18:18	7	)
STATEMENTS	18:20	21:2	7	
LEAF_NODE	18:20	18:20	8	{
STATEMENTS	19:3	20:3	8	
EXPR_STATEMENT	19:3	19:90	9	PROTOBUF_C_UNPACK_ERROR ( "length must be a multiple of 8 for fixed-length 64-bit types" ) ;
EXPR	19:3	19:3	10	PROTOBUF_C_UNPACK_ERROR ( "length must be a multiple of 8 for fixed-length 64-bit types" )
FUNCTION_CALL	19:3	19:89	11	PROTOBUF_C_UNPACK_ERROR ( "length must be a multiple of 8 for fixed-length 64-bit types" )
CALLEE	19:3	19:3	12	PROTOBUF_C_UNPACK_ERROR
LEAF_NODE	19:3	19:3	13	PROTOBUF_C_UNPACK_ERROR
LEAF_NODE	19:26	19:26	12	(
ARGUMENT	19:27	19:27	12	"length must be a multiple of 8 for fixed-length 64-bit types"
FIELD	19:27	19:27	13	"length must be a multiple of 8 for fixed-length 64-bit types"
LEAF_NODE	19:27	19:27	14	"length must be a multiple of 8 for fixed-length 64-bit types"
LEAF_NODE	19:89	19:89	12	)
LEAF_NODE	19:90	19:90	10	;
JUMP_STATEMENT	20:3	20:15	9	return FALSE ;
KEYWORD	20:3	20:3	10	return
LEAF_NODE	20:3	20:3	11	return
DESTINATION	20:10	20:10	10	FALSE
EXPR	20:10	20:10	11	FALSE
FIELD	20:10	20:10	12	FALSE
LEAF_NODE	20:10	20:10	13	FALSE
LEAF_NODE	20:15	20:15	10	;
LEAF_NODE	21:2	21:2	8	}
EXPR_STATEMENT	22:2	22:22	6	* count_out = len / 8 ;
EXPR	22:2	22:2	7	* count_out = len / 8
ASSIGN	22:2	22:15	8	* count_out = len / 8
LVAL	22:2	22:2	9	* count_out
UNARY_EXPR	22:2	22:3	10	* count_out
UNARY_OPERATOR	22:2	22:2	11	*
LEAF_NODE	22:2	22:2	12	*
FIELD	22:3	22:3	11	count_out
LEAF_NODE	22:3	22:3	12	count_out
ASSIGN_OP	22:13	22:13	9	=
LEAF_NODE	22:13	22:13	10	=
RVAL	22:15	22:21	9	len / 8
FIELD	22:15	22:15	10	len
LEAF_NODE	22:15	22:15	11	len
LEAF_NODE	22:19	22:19	10	/
FIELD	22:21	22:21	10	8
LEAF_NODE	22:21	22:21	11	8
LEAF_NODE	22:22	22:22	7	;
JUMP_STATEMENT	23:2	23:13	6	return TRUE ;
KEYWORD	23:2	23:2	7	return
LEAF_NODE	23:2	23:2	8	return
DESTINATION	23:9	23:9	7	TRUE
EXPR	23:9	23:9	8	TRUE
FIELD	23:9	23:9	9	TRUE
LEAF_NODE	23:9	23:9	10	TRUE
LEAF_NODE	23:13	23:13	7	;
LABEL	24:1	24:27	6	case PROTOBUF_C_TYPE_INT32 :
LEAF_NODE	24:1	24:1	7	case
LEAF_NODE	24:6	24:6	7	PROTOBUF_C_TYPE_INT32
LEAF_NODE	24:27	24:27	7	:
LABEL	25:1	25:28	6	case PROTOBUF_C_TYPE_SINT32 :
LEAF_NODE	25:1	25:1	7	case
LEAF_NODE	25:6	25:6	7	PROTOBUF_C_TYPE_SINT32
LEAF_NODE	25:28	25:28	7	:
LABEL	26:1	26:26	6	case PROTOBUF_C_TYPE_ENUM :
LEAF_NODE	26:1	26:1	7	case
LEAF_NODE	26:6	26:6	7	PROTOBUF_C_TYPE_ENUM
LEAF_NODE	26:26	26:26	7	:
LABEL	27:1	27:28	6	case PROTOBUF_C_TYPE_UINT32 :
LEAF_NODE	27:1	27:1	7	case
LEAF_NODE	27:6	27:6	7	PROTOBUF_C_TYPE_UINT32
LEAF_NODE	27:28	27:28	7	:
LABEL	28:1	28:27	6	case PROTOBUF_C_TYPE_INT64 :
LEAF_NODE	28:1	28:1	7	case
LEAF_NODE	28:6	28:6	7	PROTOBUF_C_TYPE_INT64
LEAF_NODE	28:27	28:27	7	:
LABEL	29:1	29:28	6	case PROTOBUF_C_TYPE_SINT64 :
LEAF_NODE	29:1	29:1	7	case
LEAF_NODE	29:6	29:6	7	PROTOBUF_C_TYPE_SINT64
LEAF_NODE	29:28	29:28	7	:
LABEL	30:1	30:28	6	case PROTOBUF_C_TYPE_UINT64 :
LEAF_NODE	30:1	30:1	7	case
LEAF_NODE	30:6	30:6	7	PROTOBUF_C_TYPE_UINT64
LEAF_NODE	30:28	30:28	7	:
EXPR_STATEMENT	31:2	31:42	6	* count_out = max_b128_numbers ( len , data ) ;
EXPR	31:2	31:2	7	* count_out = max_b128_numbers ( len , data )
ASSIGN	31:2	31:15	8	* count_out = max_b128_numbers ( len , data )
LVAL	31:2	31:2	9	* count_out
UNARY_EXPR	31:2	31:3	10	* count_out
UNARY_OPERATOR	31:2	31:2	11	*
LEAF_NODE	31:2	31:2	12	*
FIELD	31:3	31:3	11	count_out
LEAF_NODE	31:3	31:3	12	count_out
ASSIGN_OP	31:13	31:13	9	=
LEAF_NODE	31:13	31:13	10	=
RVAL	31:15	31:15	9	max_b128_numbers ( len , data )
FUNCTION_CALL	31:15	31:41	10	max_b128_numbers ( len , data )
CALLEE	31:15	31:15	11	max_b128_numbers
LEAF_NODE	31:15	31:15	12	max_b128_numbers
LEAF_NODE	31:31	31:31	11	(
ARGUMENT	31:32	31:32	11	len
FIELD	31:32	31:32	12	len
LEAF_NODE	31:32	31:32	13	len
LEAF_NODE	31:35	31:35	11	,
ARGUMENT	31:37	31:37	11	data
FIELD	31:37	31:37	12	data
LEAF_NODE	31:37	31:37	13	data
LEAF_NODE	31:41	31:41	11	)
LEAF_NODE	31:42	31:42	7	;
JUMP_STATEMENT	32:2	32:13	6	return TRUE ;
KEYWORD	32:2	32:2	7	return
LEAF_NODE	32:2	32:2	8	return
DESTINATION	32:9	32:9	7	TRUE
EXPR	32:9	32:9	8	TRUE
FIELD	32:9	32:9	9	TRUE
LEAF_NODE	32:9	32:9	10	TRUE
LEAF_NODE	32:13	32:13	7	;
LABEL	33:1	33:26	6	case PROTOBUF_C_TYPE_BOOL :
LEAF_NODE	33:1	33:1	7	case
LEAF_NODE	33:6	33:6	7	PROTOBUF_C_TYPE_BOOL
LEAF_NODE	33:26	33:26	7	:
EXPR_STATEMENT	34:2	34:18	6	* count_out = len ;
EXPR	34:2	34:2	7	* count_out = len
ASSIGN	34:2	34:15	8	* count_out = len
LVAL	34:2	34:2	9	* count_out
UNARY_EXPR	34:2	34:3	10	* count_out
UNARY_OPERATOR	34:2	34:2	11	*
LEAF_NODE	34:2	34:2	12	*
FIELD	34:3	34:3	11	count_out
LEAF_NODE	34:3	34:3	12	count_out
ASSIGN_OP	34:13	34:13	9	=
LEAF_NODE	34:13	34:13	10	=
RVAL	34:15	34:15	9	len
FIELD	34:15	34:15	10	len
LEAF_NODE	34:15	34:15	11	len
LEAF_NODE	34:18	34:18	7	;
JUMP_STATEMENT	35:2	35:13	6	return TRUE ;
KEYWORD	35:2	35:2	7	return
LEAF_NODE	35:2	35:2	8	return
DESTINATION	35:9	35:9	7	TRUE
EXPR	35:9	35:9	8	TRUE
FIELD	35:9	35:9	9	TRUE
LEAF_NODE	35:9	35:9	10	TRUE
LEAF_NODE	35:13	35:13	7	;
LABEL	36:1	36:28	6	case PROTOBUF_C_TYPE_STRING :
LEAF_NODE	36:1	36:1	7	case
LEAF_NODE	36:6	36:6	7	PROTOBUF_C_TYPE_STRING
LEAF_NODE	36:28	36:28	7	:
LABEL	37:1	37:27	6	case PROTOBUF_C_TYPE_BYTES :
LEAF_NODE	37:1	37:1	7	case
LEAF_NODE	37:6	37:6	7	PROTOBUF_C_TYPE_BYTES
LEAF_NODE	37:27	37:27	7	:
LABEL	38:1	38:29	6	case PROTOBUF_C_TYPE_MESSAGE :
LEAF_NODE	38:1	38:1	7	case
LEAF_NODE	38:6	38:6	7	PROTOBUF_C_TYPE_MESSAGE
LEAF_NODE	38:29	38:29	7	:
LABEL	39:1	39:8	6	default :
LEAF_NODE	39:1	39:1	7	default
LEAF_NODE	39:8	39:8	7	:
EXPR_STATEMENT	40:2	40:77	6	PROTOBUF_C_UNPACK_ERROR ( "bad protobuf-c type %u for packed-repeated" , type ) ;
EXPR	40:2	40:2	7	PROTOBUF_C_UNPACK_ERROR ( "bad protobuf-c type %u for packed-repeated" , type )
FUNCTION_CALL	40:2	40:76	8	PROTOBUF_C_UNPACK_ERROR ( "bad protobuf-c type %u for packed-repeated" , type )
CALLEE	40:2	40:2	9	PROTOBUF_C_UNPACK_ERROR
LEAF_NODE	40:2	40:2	10	PROTOBUF_C_UNPACK_ERROR
LEAF_NODE	40:25	40:25	9	(
ARGUMENT	40:26	40:26	9	"bad protobuf-c type %u for packed-repeated"
FIELD	40:26	40:26	10	"bad protobuf-c type %u for packed-repeated"
LEAF_NODE	40:26	40:26	11	"bad protobuf-c type %u for packed-repeated"
LEAF_NODE	40:70	40:70	9	,
ARGUMENT	40:72	40:72	9	type
FIELD	40:72	40:72	10	type
LEAF_NODE	40:72	40:72	11	type
LEAF_NODE	40:76	40:76	9	)
LEAF_NODE	40:77	40:77	7	;
JUMP_STATEMENT	41:2	41:14	6	return FALSE ;
KEYWORD	41:2	41:2	7	return
LEAF_NODE	41:2	41:2	8	return
DESTINATION	41:9	41:9	7	FALSE
EXPR	41:9	41:9	8	FALSE
FIELD	41:9	41:9	9	FALSE
LEAF_NODE	41:9	41:9	10	FALSE
LEAF_NODE	41:14	41:14	7	;
LEAF_NODE	42:1	42:1	5	}
LEAF_NODE	43:0	43:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	23:0	1	
RETURN_TYPE	1:0	1:17	2	static GdkPixbuf *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	GdkPixbuf
LEAF_NODE	1:7	1:7	4	GdkPixbuf
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	pidgin_disco_load_icon
LEAF_NODE	2:0	2:0	3	pidgin_disco_load_icon
PARAMETER_LIST	2:22	2:66	2	( XmppDiscoService * service , const char * size )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:41	3	XmppDiscoService * service
TYPE	2:23	2:40	4	XmppDiscoService *
TYPE_NAME	2:23	2:23	5	XmppDiscoService
LEAF_NODE	2:23	2:23	6	XmppDiscoService
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	service
LEAF_NODE	2:41	2:41	5	service
LEAF_NODE	2:48	2:48	3	,
PARAMETER_DECL	2:50	2:62	3	const char * size
TYPE	2:50	2:61	4	const char *
TYPE_NAME	2:50	2:56	5	const char
LEAF_NODE	2:50	2:50	6	const
LEAF_NODE	2:56	2:56	6	char
POINTER	2:61	2:61	5	*
LEAF_NODE	2:61	2:61	6	*
NAME	2:62	2:62	4	size
LEAF_NODE	2:62	2:62	5	size
LEAF_NODE	2:66	2:66	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	22:1	2	
SIMPLE_DECL	4:1	4:25	3	GdkPixbuf * pixbuf ; pixbuf = NULL ;
VAR_DECL	4:1	4:12	4	GdkPixbuf * pixbuf ; pixbuf = NULL
TYPE	4:1	4:11	5	GdkPixbuf *
TYPE_NAME	4:1	4:1	6	GdkPixbuf
LEAF_NODE	4:1	4:1	7	GdkPixbuf
POINTER	4:11	4:11	6	*
LEAF_NODE	4:11	4:11	7	*
NAME	4:12	4:12	5	pixbuf
LEAF_NODE	4:12	4:12	6	pixbuf
LEAF_NODE	0:0	0:0	5	;
INIT	4:12	4:12	5	pixbuf = NULL
ASSIGN	4:12	4:21	6	pixbuf = NULL
LVAL	4:12	4:12	7	pixbuf
NAME	4:12	4:12	8	pixbuf
LEAF_NODE	4:12	4:12	9	pixbuf
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:21	7	NULL
FIELD	4:21	4:21	8	NULL
LEAF_NODE	4:21	4:21	9	NULL
LEAF_NODE	4:25	4:25	4	;
SIMPLE_DECL	5:1	5:22	3	char * filename ; filename = NULL ;
VAR_DECL	5:1	5:7	4	char * filename ; filename = NULL
TYPE	5:1	5:6	5	char *
TYPE_NAME	5:1	5:1	6	char
LEAF_NODE	5:1	5:1	7	char
POINTER	5:6	5:6	6	*
LEAF_NODE	5:6	5:6	7	*
NAME	5:7	5:7	5	filename
LEAF_NODE	5:7	5:7	6	filename
LEAF_NODE	0:0	0:0	5	;
INIT	5:7	5:7	5	filename = NULL
ASSIGN	5:7	5:18	6	filename = NULL
LVAL	5:7	5:7	7	filename
NAME	5:7	5:7	8	filename
LEAF_NODE	5:7	5:7	9	filename
ASSIGN_OP	5:16	5:16	7	=
LEAF_NODE	5:16	5:16	8	=
RVAL	5:18	5:18	7	NULL
FIELD	5:18	5:18	8	NULL
LEAF_NODE	5:18	5:18	9	NULL
LEAF_NODE	5:22	5:22	4	;
EXPR_STATEMENT	6:1	6:44	3	g_return_val_if_fail ( service != NULL , NULL ) ;
EXPR	6:1	6:1	4	g_return_val_if_fail ( service != NULL , NULL )
FUNCTION_CALL	6:1	6:43	5	g_return_val_if_fail ( service != NULL , NULL )
CALLEE	6:1	6:1	6	g_return_val_if_fail
LEAF_NODE	6:1	6:1	7	g_return_val_if_fail
LEAF_NODE	6:21	6:21	6	(
ARGUMENT	6:22	6:33	6	service != NULL
FIELD	6:22	6:22	7	service
LEAF_NODE	6:22	6:22	8	service
EQ_OPERATOR	6:30	6:30	7	!=
LEAF_NODE	6:30	6:30	8	!=
FIELD	6:33	6:33	7	NULL
LEAF_NODE	6:33	6:33	8	NULL
LEAF_NODE	6:37	6:37	6	,
ARGUMENT	6:39	6:39	6	NULL
FIELD	6:39	6:39	7	NULL
LEAF_NODE	6:39	6:39	8	NULL
LEAF_NODE	6:43	6:43	6	)
LEAF_NODE	6:44	6:44	4	;
EXPR_STATEMENT	7:1	7:41	3	g_return_val_if_fail ( size != NULL , NULL ) ;
EXPR	7:1	7:1	4	g_return_val_if_fail ( size != NULL , NULL )
FUNCTION_CALL	7:1	7:40	5	g_return_val_if_fail ( size != NULL , NULL )
CALLEE	7:1	7:1	6	g_return_val_if_fail
LEAF_NODE	7:1	7:1	7	g_return_val_if_fail
LEAF_NODE	7:21	7:21	6	(
ARGUMENT	7:22	7:30	6	size != NULL
FIELD	7:22	7:22	7	size
LEAF_NODE	7:22	7:22	8	size
EQ_OPERATOR	7:27	7:27	7	!=
LEAF_NODE	7:27	7:27	8	!=
FIELD	7:30	7:30	7	NULL
LEAF_NODE	7:30	7:30	8	NULL
LEAF_NODE	7:34	7:34	6	,
ARGUMENT	7:36	7:36	6	NULL
FIELD	7:36	7:36	7	NULL
LEAF_NODE	7:36	7:36	8	NULL
LEAF_NODE	7:40	7:40	6	)
LEAF_NODE	7:41	7:41	4	;
SELECTION	8:1	8:80	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	service -> type == XMPP_DISCO_SERVICE_TYPE_GATEWAY && service -> gateway_type
EXPR	8:5	8:5	5	service -> type == XMPP_DISCO_SERVICE_TYPE_GATEWAY && service -> gateway_type
AND	8:5	8:57	6	service -> type == XMPP_DISCO_SERVICE_TYPE_GATEWAY && service -> gateway_type
EXPR	8:5	8:22	7	service -> type == XMPP_DISCO_SERVICE_TYPE_GATEWAY
FIELD	8:5	8:14	8	service -> type
LEAF_NODE	8:5	8:5	9	service
LEAF_NODE	8:12	8:12	9	->
LEAF_NODE	8:14	8:14	9	type
EQ_OPERATOR	8:19	8:19	8	==
LEAF_NODE	8:19	8:19	9	==
FIELD	8:22	8:22	8	XMPP_DISCO_SERVICE_TYPE_GATEWAY
LEAF_NODE	8:22	8:22	9	XMPP_DISCO_SERVICE_TYPE_GATEWAY
LEAF_NODE	8:54	8:54	7	&&
EXPR	8:57	8:57	7	service -> gateway_type
FIELD	8:57	8:66	8	service -> gateway_type
LEAF_NODE	8:57	8:57	9	service
LEAF_NODE	8:64	8:64	9	->
LEAF_NODE	8:66	8:66	9	gateway_type
LEAF_NODE	8:78	8:78	4	)
STATEMENTS	8:80	13:1	4	
LEAF_NODE	8:80	8:80	5	{
STATEMENTS	9:2	11:2	5	
SIMPLE_DECL	9:2	9:62	6	char * tmp ; tmp = g_strconcat ( service -> gateway_type , ".png" , NULL ) ;
VAR_DECL	9:2	9:8	7	char * tmp ; tmp = g_strconcat ( service -> gateway_type , ".png" , NULL )
TYPE	9:2	9:7	8	char *
TYPE_NAME	9:2	9:2	9	char
LEAF_NODE	9:2	9:2	10	char
POINTER	9:7	9:7	9	*
LEAF_NODE	9:7	9:7	10	*
NAME	9:8	9:8	8	tmp
LEAF_NODE	9:8	9:8	9	tmp
LEAF_NODE	0:0	0:0	8	;
INIT	9:8	9:8	8	tmp = g_strconcat ( service -> gateway_type , ".png" , NULL )
ASSIGN	9:8	9:14	9	tmp = g_strconcat ( service -> gateway_type , ".png" , NULL )
LVAL	9:8	9:8	10	tmp
NAME	9:8	9:8	11	tmp
LEAF_NODE	9:8	9:8	12	tmp
ASSIGN_OP	9:12	9:12	10	=
LEAF_NODE	9:12	9:12	11	=
RVAL	9:14	9:14	10	g_strconcat ( service -> gateway_type , ".png" , NULL )
FUNCTION_CALL	9:14	9:61	11	g_strconcat ( service -> gateway_type , ".png" , NULL )
CALLEE	9:14	9:14	12	g_strconcat
LEAF_NODE	9:14	9:14	13	g_strconcat
LEAF_NODE	9:25	9:25	12	(
ARGUMENT	9:26	9:26	12	service -> gateway_type
FIELD	9:26	9:35	13	service -> gateway_type
LEAF_NODE	9:26	9:26	14	service
LEAF_NODE	9:33	9:33	14	->
LEAF_NODE	9:35	9:35	14	gateway_type
LEAF_NODE	9:47	9:47	12	,
ARGUMENT	9:49	9:49	12	".png"
FIELD	9:49	9:49	13	".png"
LEAF_NODE	9:49	9:49	14	".png"
LEAF_NODE	9:55	9:55	12	,
ARGUMENT	9:57	9:57	12	NULL
FIELD	9:57	9:57	13	NULL
LEAF_NODE	9:57	9:57	14	NULL
LEAF_NODE	9:61	9:61	12	)
LEAF_NODE	9:62	9:62	7	;
EXPR_STATEMENT	10:2	10:89	6	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "protocols" , size , tmp , NULL ) ;
EXPR	10:2	10:2	7	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "protocols" , size , tmp , NULL )
ASSIGN	10:2	10:13	8	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "protocols" , size , tmp , NULL )
LVAL	10:2	10:2	9	filename
FIELD	10:2	10:2	10	filename
LEAF_NODE	10:2	10:2	11	filename
ASSIGN_OP	10:11	10:11	9	=
LEAF_NODE	10:11	10:11	10	=
RVAL	10:13	10:13	9	g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "protocols" , size , tmp , NULL )
FUNCTION_CALL	10:13	10:88	10	g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "protocols" , size , tmp , NULL )
CALLEE	10:13	10:13	11	g_build_filename
LEAF_NODE	10:13	10:13	12	g_build_filename
LEAF_NODE	10:29	10:29	11	(
ARGUMENT	10:30	10:30	11	DATADIR
FIELD	10:30	10:30	12	DATADIR
LEAF_NODE	10:30	10:30	13	DATADIR
LEAF_NODE	10:37	10:37	11	,
ARGUMENT	10:39	10:39	11	"pixmaps"
FIELD	10:39	10:39	12	"pixmaps"
LEAF_NODE	10:39	10:39	13	"pixmaps"
LEAF_NODE	10:48	10:48	11	,
ARGUMENT	10:50	10:50	11	"pidgin"
FIELD	10:50	10:50	12	"pidgin"
LEAF_NODE	10:50	10:50	13	"pidgin"
LEAF_NODE	10:58	10:58	11	,
ARGUMENT	10:60	10:60	11	"protocols"
FIELD	10:60	10:60	12	"protocols"
LEAF_NODE	10:60	10:60	13	"protocols"
LEAF_NODE	10:71	10:71	11	,
ARGUMENT	10:73	10:73	11	size
FIELD	10:73	10:73	12	size
LEAF_NODE	10:73	10:73	13	size
LEAF_NODE	10:77	10:77	11	,
ARGUMENT	10:79	10:79	11	tmp
FIELD	10:79	10:79	12	tmp
LEAF_NODE	10:79	10:79	13	tmp
LEAF_NODE	10:82	10:82	11	,
ARGUMENT	10:84	10:84	11	NULL
FIELD	10:84	10:84	12	NULL
LEAF_NODE	10:84	10:84	13	NULL
LEAF_NODE	10:88	10:88	11	)
LEAF_NODE	10:89	10:89	7	;
EXPR_STATEMENT	11:2	11:13	6	g_free ( tmp ) ;
EXPR	11:2	11:2	7	g_free ( tmp )
FUNCTION_CALL	11:2	11:12	8	g_free ( tmp )
CALLEE	11:2	11:2	9	g_free
LEAF_NODE	11:2	11:2	10	g_free
LEAF_NODE	11:8	11:8	9	(
ARGUMENT	11:9	11:9	9	tmp
FIELD	11:9	11:9	10	tmp
LEAF_NODE	11:9	11:9	11	tmp
LEAF_NODE	11:12	11:12	9	)
LEAF_NODE	11:13	11:13	7	;
LEAF_NODE	13:1	13:1	5	}
SELECTION	13:3	13:8	3	
KEYWORD	13:3	13:3	4	else
LEAF_NODE	13:3	13:3	5	else
STATEMENTS	13:8	13:8	4	
SELECTION	13:8	13:59	5	
KEYWORD	13:8	13:8	6	if
LEAF_NODE	13:8	13:8	7	if
LEAF_NODE	13:11	13:11	6	(
CONDITION	13:12	13:12	6	service -> type == XMPP_DISCO_SERVICE_TYPE_USER
EXPR	13:12	13:29	7	service -> type == XMPP_DISCO_SERVICE_TYPE_USER
FIELD	13:12	13:21	8	service -> type
LEAF_NODE	13:12	13:12	9	service
LEAF_NODE	13:19	13:19	9	->
LEAF_NODE	13:21	13:21	9	type
EQ_OPERATOR	13:26	13:26	8	==
LEAF_NODE	13:26	13:26	9	==
FIELD	13:29	13:29	8	XMPP_DISCO_SERVICE_TYPE_USER
LEAF_NODE	13:29	13:29	9	XMPP_DISCO_SERVICE_TYPE_USER
LEAF_NODE	13:57	13:57	6	)
STATEMENTS	13:59	16:1	6	
LEAF_NODE	13:59	13:59	7	{
STATEMENTS	14:2	14:2	7	
EXPR_STATEMENT	14:2	14:95	8	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "status" , size , "person.png" , NULL ) ;
EXPR	14:2	14:2	9	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "status" , size , "person.png" , NULL )
ASSIGN	14:2	14:13	10	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "status" , size , "person.png" , NULL )
LVAL	14:2	14:2	11	filename
FIELD	14:2	14:2	12	filename
LEAF_NODE	14:2	14:2	13	filename
ASSIGN_OP	14:11	14:11	11	=
LEAF_NODE	14:11	14:11	12	=
RVAL	14:13	14:13	11	g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "status" , size , "person.png" , NULL )
FUNCTION_CALL	14:13	14:94	12	g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "status" , size , "person.png" , NULL )
CALLEE	14:13	14:13	13	g_build_filename
LEAF_NODE	14:13	14:13	14	g_build_filename
LEAF_NODE	14:29	14:29	13	(
ARGUMENT	14:30	14:30	13	DATADIR
FIELD	14:30	14:30	14	DATADIR
LEAF_NODE	14:30	14:30	15	DATADIR
LEAF_NODE	14:37	14:37	13	,
ARGUMENT	14:39	14:39	13	"pixmaps"
FIELD	14:39	14:39	14	"pixmaps"
LEAF_NODE	14:39	14:39	15	"pixmaps"
LEAF_NODE	14:48	14:48	13	,
ARGUMENT	14:50	14:50	13	"pidgin"
FIELD	14:50	14:50	14	"pidgin"
LEAF_NODE	14:50	14:50	15	"pidgin"
LEAF_NODE	14:58	14:58	13	,
ARGUMENT	14:60	14:60	13	"status"
FIELD	14:60	14:60	14	"status"
LEAF_NODE	14:60	14:60	15	"status"
LEAF_NODE	14:68	14:68	13	,
ARGUMENT	14:70	14:70	13	size
FIELD	14:70	14:70	14	size
LEAF_NODE	14:70	14:70	15	size
LEAF_NODE	14:74	14:74	13	,
ARGUMENT	14:76	14:76	13	"person.png"
FIELD	14:76	14:76	14	"person.png"
LEAF_NODE	14:76	14:76	15	"person.png"
LEAF_NODE	14:88	14:88	13	,
ARGUMENT	14:90	14:90	13	NULL
FIELD	14:90	14:90	14	NULL
LEAF_NODE	14:90	14:90	15	NULL
LEAF_NODE	14:94	14:94	13	)
LEAF_NODE	14:95	14:95	9	;
LEAF_NODE	16:1	16:1	7	}
SELECTION	16:3	16:8	3	
KEYWORD	16:3	16:3	4	else
LEAF_NODE	16:3	16:3	5	else
STATEMENTS	16:8	16:8	4	
SELECTION	16:8	17:2	5	
KEYWORD	16:8	16:8	6	if
LEAF_NODE	16:8	16:8	7	if
LEAF_NODE	16:11	16:11	6	(
CONDITION	16:12	16:12	6	service -> type == XMPP_DISCO_SERVICE_TYPE_CHAT
EXPR	16:12	16:29	7	service -> type == XMPP_DISCO_SERVICE_TYPE_CHAT
FIELD	16:12	16:21	8	service -> type
LEAF_NODE	16:12	16:12	9	service
LEAF_NODE	16:19	16:19	9	->
LEAF_NODE	16:21	16:21	9	type
EQ_OPERATOR	16:26	16:26	8	==
LEAF_NODE	16:26	16:26	9	==
FIELD	16:29	16:29	8	XMPP_DISCO_SERVICE_TYPE_CHAT
LEAF_NODE	16:29	16:29	9	XMPP_DISCO_SERVICE_TYPE_CHAT
LEAF_NODE	16:57	16:57	6	)
STATEMENTS	17:2	17:2	6	
EXPR_STATEMENT	17:2	17:93	7	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "status" , size , "chat.png" , NULL ) ;
EXPR	17:2	17:2	8	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "status" , size , "chat.png" , NULL )
ASSIGN	17:2	17:13	9	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "status" , size , "chat.png" , NULL )
LVAL	17:2	17:2	10	filename
FIELD	17:2	17:2	11	filename
LEAF_NODE	17:2	17:2	12	filename
ASSIGN_OP	17:11	17:11	10	=
LEAF_NODE	17:11	17:11	11	=
RVAL	17:13	17:13	10	g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "status" , size , "chat.png" , NULL )
FUNCTION_CALL	17:13	17:92	11	g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "status" , size , "chat.png" , NULL )
CALLEE	17:13	17:13	12	g_build_filename
LEAF_NODE	17:13	17:13	13	g_build_filename
LEAF_NODE	17:29	17:29	12	(
ARGUMENT	17:30	17:30	12	DATADIR
FIELD	17:30	17:30	13	DATADIR
LEAF_NODE	17:30	17:30	14	DATADIR
LEAF_NODE	17:37	17:37	12	,
ARGUMENT	17:39	17:39	12	"pixmaps"
FIELD	17:39	17:39	13	"pixmaps"
LEAF_NODE	17:39	17:39	14	"pixmaps"
LEAF_NODE	17:48	17:48	12	,
ARGUMENT	17:50	17:50	12	"pidgin"
FIELD	17:50	17:50	13	"pidgin"
LEAF_NODE	17:50	17:50	14	"pidgin"
LEAF_NODE	17:58	17:58	12	,
ARGUMENT	17:60	17:60	12	"status"
FIELD	17:60	17:60	13	"status"
LEAF_NODE	17:60	17:60	14	"status"
LEAF_NODE	17:68	17:68	12	,
ARGUMENT	17:70	17:70	12	size
FIELD	17:70	17:70	13	size
LEAF_NODE	17:70	17:70	14	size
LEAF_NODE	17:74	17:74	12	,
ARGUMENT	17:76	17:76	12	"chat.png"
FIELD	17:76	17:76	13	"chat.png"
LEAF_NODE	17:76	17:76	14	"chat.png"
LEAF_NODE	17:86	17:86	12	,
ARGUMENT	17:88	17:88	12	NULL
FIELD	17:88	17:88	13	NULL
LEAF_NODE	17:88	17:88	14	NULL
LEAF_NODE	17:92	17:92	12	)
LEAF_NODE	17:93	17:93	8	;
SELECTION	18:1	18:15	3	
KEYWORD	18:1	18:1	4	if
LEAF_NODE	18:1	18:1	5	if
LEAF_NODE	18:4	18:4	4	(
CONDITION	18:5	18:5	4	filename
EXPR	18:5	18:5	5	filename
FIELD	18:5	18:5	6	filename
LEAF_NODE	18:5	18:5	7	filename
LEAF_NODE	18:13	18:13	4	)
STATEMENTS	18:15	21:1	4	
LEAF_NODE	18:15	18:15	5	{
STATEMENTS	19:2	20:2	5	
EXPR_STATEMENT	19:2	19:51	6	pixbuf = gdk_pixbuf_new_from_file ( filename , NULL ) ;
EXPR	19:2	19:2	7	pixbuf = gdk_pixbuf_new_from_file ( filename , NULL )
ASSIGN	19:2	19:11	8	pixbuf = gdk_pixbuf_new_from_file ( filename , NULL )
LVAL	19:2	19:2	9	pixbuf
FIELD	19:2	19:2	10	pixbuf
LEAF_NODE	19:2	19:2	11	pixbuf
ASSIGN_OP	19:9	19:9	9	=
LEAF_NODE	19:9	19:9	10	=
RVAL	19:11	19:11	9	gdk_pixbuf_new_from_file ( filename , NULL )
FUNCTION_CALL	19:11	19:50	10	gdk_pixbuf_new_from_file ( filename , NULL )
CALLEE	19:11	19:11	11	gdk_pixbuf_new_from_file
LEAF_NODE	19:11	19:11	12	gdk_pixbuf_new_from_file
LEAF_NODE	19:35	19:35	11	(
ARGUMENT	19:36	19:36	11	filename
FIELD	19:36	19:36	12	filename
LEAF_NODE	19:36	19:36	13	filename
LEAF_NODE	19:44	19:44	11	,
ARGUMENT	19:46	19:46	11	NULL
FIELD	19:46	19:46	12	NULL
LEAF_NODE	19:46	19:46	13	NULL
LEAF_NODE	19:50	19:50	11	)
LEAF_NODE	19:51	19:51	7	;
EXPR_STATEMENT	20:2	20:18	6	g_free ( filename ) ;
EXPR	20:2	20:2	7	g_free ( filename )
FUNCTION_CALL	20:2	20:17	8	g_free ( filename )
CALLEE	20:2	20:2	9	g_free
LEAF_NODE	20:2	20:2	10	g_free
LEAF_NODE	20:8	20:8	9	(
ARGUMENT	20:9	20:9	9	filename
FIELD	20:9	20:9	10	filename
LEAF_NODE	20:9	20:9	11	filename
LEAF_NODE	20:17	20:17	9	)
LEAF_NODE	20:18	20:18	7	;
LEAF_NODE	21:1	21:1	5	}
JUMP_STATEMENT	22:1	22:14	3	return pixbuf ;
KEYWORD	22:1	22:1	4	return
LEAF_NODE	22:1	22:1	5	return
DESTINATION	22:8	22:8	4	pixbuf
EXPR	22:8	22:8	5	pixbuf
FIELD	22:8	22:8	6	pixbuf
LEAF_NODE	22:8	22:8	7	pixbuf
LEAF_NODE	22:14	22:14	4	;
LEAF_NODE	23:0	23:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	12:0	1	
RETURN_TYPE	2:0	2:7	2	GSList *
TYPE_NAME	2:0	2:0	3	GSList
LEAF_NODE	2:0	2:0	4	GSList
LEAF_NODE	2:7	2:7	3	*
FUNCTION_NAME	2:8	2:8	2	aim_tlvlist_readlen
LEAF_NODE	2:8	2:8	3	aim_tlvlist_readlen
PARAMETER_LIST	2:27	2:55	2	( ByteStream * bs , guint16 len )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:40	3	ByteStream * bs
TYPE	2:28	2:39	4	ByteStream *
TYPE_NAME	2:28	2:28	5	ByteStream
LEAF_NODE	2:28	2:28	6	ByteStream
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	bs
LEAF_NODE	2:40	2:40	5	bs
LEAF_NODE	2:42	2:42	3	,
PARAMETER_DECL	2:44	2:52	3	guint16 len
TYPE	2:44	2:44	4	guint16
TYPE_NAME	2:44	2:44	5	guint16
LEAF_NODE	2:44	2:44	6	guint16
NAME	2:52	2:52	4	len
LEAF_NODE	2:52	2:52	5	len
LEAF_NODE	2:55	2:55	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	11:1	2	
SIMPLE_DECL	4:1	4:20	3	GSList * list ; list = NULL ;
VAR_DECL	4:1	4:9	4	GSList * list ; list = NULL
TYPE	4:1	4:8	5	GSList *
TYPE_NAME	4:1	4:1	6	GSList
LEAF_NODE	4:1	4:1	7	GSList
POINTER	4:8	4:8	6	*
LEAF_NODE	4:8	4:8	7	*
NAME	4:9	4:9	5	list
LEAF_NODE	4:9	4:9	6	list
LEAF_NODE	0:0	0:0	5	;
INIT	4:9	4:9	5	list = NULL
ASSIGN	4:9	4:16	6	list = NULL
LVAL	4:9	4:9	7	list
NAME	4:9	4:9	8	list
LEAF_NODE	4:9	4:9	9	list
ASSIGN_OP	4:14	4:14	7	=
LEAF_NODE	4:14	4:14	8	=
RVAL	4:16	4:16	7	NULL
FIELD	4:16	4:16	8	NULL
LEAF_NODE	4:16	4:16	9	NULL
LEAF_NODE	4:20	4:20	4	;
ITERATION	5:1	5:55	3	
KEYWORD	5:1	5:1	4	while
LEAF_NODE	5:1	5:1	5	while
LEAF_NODE	5:7	5:7	4	(
CONDITION	5:8	5:8	4	( byte_stream_bytes_left ( bs ) > 0 ) && ( len > 0 )
EXPR	5:8	5:8	5	( byte_stream_bytes_left ( bs ) > 0 ) && ( len > 0 )
AND	5:8	5:44	6	( byte_stream_bytes_left ( bs ) > 0 ) && ( len > 0 )
EXPR	5:8	5:39	7	( byte_stream_bytes_left ( bs ) > 0 )
LEAF_NODE	5:8	5:8	8	(
FUNCTION_CALL	5:9	5:34	8	byte_stream_bytes_left ( bs )
CALLEE	5:9	5:9	9	byte_stream_bytes_left
LEAF_NODE	5:9	5:9	10	byte_stream_bytes_left
LEAF_NODE	5:31	5:31	9	(
ARGUMENT	5:32	5:32	9	bs
FIELD	5:32	5:32	10	bs
LEAF_NODE	5:32	5:32	11	bs
LEAF_NODE	5:34	5:34	9	)
REL_OPERATOR	5:36	5:36	8	>
LEAF_NODE	5:36	5:36	9	>
FIELD	5:38	5:38	8	0
LEAF_NODE	5:38	5:38	9	0
LEAF_NODE	5:39	5:39	8	)
LEAF_NODE	5:41	5:41	7	&&
EXPR	5:44	5:52	7	( len > 0 )
LEAF_NODE	5:44	5:44	8	(
FIELD	5:45	5:45	8	len
LEAF_NODE	5:45	5:45	9	len
REL_OPERATOR	5:49	5:49	8	>
LEAF_NODE	5:49	5:49	9	>
FIELD	5:51	5:51	8	0
LEAF_NODE	5:51	5:51	9	0
LEAF_NODE	5:52	5:52	8	)
LEAF_NODE	5:53	5:53	4	)
STATEMENTS	5:55	10:1	4	
LEAF_NODE	5:55	5:55	5	{
STATEMENTS	6:2	9:2	5	
EXPR_STATEMENT	6:2	6:31	6	list = aim_tlv_read ( list , bs ) ;
EXPR	6:2	6:2	7	list = aim_tlv_read ( list , bs )
ASSIGN	6:2	6:9	8	list = aim_tlv_read ( list , bs )
LVAL	6:2	6:2	9	list
FIELD	6:2	6:2	10	list
LEAF_NODE	6:2	6:2	11	list
ASSIGN_OP	6:7	6:7	9	=
LEAF_NODE	6:7	6:7	10	=
RVAL	6:9	6:9	9	aim_tlv_read ( list , bs )
FUNCTION_CALL	6:9	6:30	10	aim_tlv_read ( list , bs )
CALLEE	6:9	6:9	11	aim_tlv_read
LEAF_NODE	6:9	6:9	12	aim_tlv_read
LEAF_NODE	6:21	6:21	11	(
ARGUMENT	6:22	6:22	11	list
FIELD	6:22	6:22	12	list
LEAF_NODE	6:22	6:22	13	list
LEAF_NODE	6:26	6:26	11	,
ARGUMENT	6:28	6:28	11	bs
FIELD	6:28	6:28	12	bs
LEAF_NODE	6:28	6:28	13	bs
LEAF_NODE	6:30	6:30	11	)
LEAF_NODE	6:31	6:31	7	;
SELECTION	7:2	8:3	6	
KEYWORD	7:2	7:2	7	if
LEAF_NODE	7:2	7:2	8	if
LEAF_NODE	7:5	7:5	7	(
CONDITION	7:6	7:6	7	list == NULL
EXPR	7:6	7:14	8	list == NULL
FIELD	7:6	7:6	9	list
LEAF_NODE	7:6	7:6	10	list
EQ_OPERATOR	7:11	7:11	9	==
LEAF_NODE	7:11	7:11	10	==
FIELD	7:14	7:14	9	NULL
LEAF_NODE	7:14	7:14	10	NULL
LEAF_NODE	7:18	7:18	7	)
STATEMENTS	8:3	8:3	7	
JUMP_STATEMENT	8:3	8:14	8	return NULL ;
KEYWORD	8:3	8:3	9	return
LEAF_NODE	8:3	8:3	10	return
DESTINATION	8:10	8:10	9	NULL
EXPR	8:10	8:10	10	NULL
FIELD	8:10	8:10	11	NULL
LEAF_NODE	8:10	8:10	12	NULL
LEAF_NODE	8:14	8:14	9	;
EXPR_STATEMENT	9:2	9:50	6	len -= 2 + 2 + ( ( aim_tlv_t * ) list -> data ) -> length ;
EXPR	9:2	9:2	7	len -= 2 + 2 + ( ( aim_tlv_t * ) list -> data ) -> length
ASSIGN	9:2	9:9	8	len -= 2 + 2 + ( ( aim_tlv_t * ) list -> data ) -> length
LVAL	9:2	9:2	9	len
FIELD	9:2	9:2	10	len
LEAF_NODE	9:2	9:2	11	len
ASSIGN_OP	9:6	9:6	9	-=
LEAF_NODE	9:6	9:6	10	-=
RVAL	9:9	9:44	9	2 + 2 + ( ( aim_tlv_t * ) list -> data ) -> length
FIELD	9:9	9:9	10	2
LEAF_NODE	9:9	9:9	11	2
LEAF_NODE	9:11	9:11	10	+
FIELD	9:13	9:13	10	2
LEAF_NODE	9:13	9:13	11	2
LEAF_NODE	9:15	9:15	10	+
LEAF_NODE	9:17	9:17	10	(
LEAF_NODE	9:18	9:18	10	(
TYPE_NAME	9:19	9:19	10	aim_tlv_t
LEAF_NODE	9:19	9:19	11	aim_tlv_t
LEAF_NODE	9:29	9:29	10	*
LEAF_NODE	9:30	9:30	10	)
FIELD	9:31	9:37	10	list -> data
LEAF_NODE	9:31	9:31	11	list
LEAF_NODE	9:35	9:35	11	->
LEAF_NODE	9:37	9:37	11	data
LEAF_NODE	9:41	9:41	10	)
LEAF_NODE	9:42	9:42	10	->
LEAF_NODE	9:44	9:44	10	length
LEAF_NODE	9:50	9:50	7	;
LEAF_NODE	10:1	10:1	5	}
JUMP_STATEMENT	11:1	11:29	3	return g_slist_reverse ( list ) ;
KEYWORD	11:1	11:1	4	return
LEAF_NODE	11:1	11:1	5	return
DESTINATION	11:8	11:8	4	g_slist_reverse ( list )
EXPR	11:8	11:8	5	g_slist_reverse ( list )
FUNCTION_CALL	11:8	11:28	6	g_slist_reverse ( list )
CALLEE	11:8	11:8	7	g_slist_reverse
LEAF_NODE	11:8	11:8	8	g_slist_reverse
LEAF_NODE	11:23	11:23	7	(
ARGUMENT	11:24	11:24	7	list
FIELD	11:24	11:24	8	list
LEAF_NODE	11:24	11:24	9	list
LEAF_NODE	11:28	11:28	7	)
LEAF_NODE	11:29	11:29	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	121:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	silcpurple_register_commands
LEAF_NODE	2:0	2:0	3	silcpurple_register_commands
PARAMETER_LIST	2:28	2:33	2	( void )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:29	3	void
LEAF_NODE	2:29	2:29	4	void
LEAF_NODE	2:33	2:33	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	116:1	2	
EXPR_STATEMENT	4:1	7:85	3	purple_cmd_register ( "part" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_part , _ ( "part [channel]:  Leave the chat" ) , NULL ) ;
EXPR	4:1	4:1	4	purple_cmd_register ( "part" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_part , _ ( "part [channel]:  Leave the chat" ) , NULL )
FUNCTION_CALL	4:1	7:84	5	purple_cmd_register ( "part" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_part , _ ( "part [channel]:  Leave the chat" ) , NULL )
CALLEE	4:1	4:1	6	purple_cmd_register
LEAF_NODE	4:1	4:1	7	purple_cmd_register
LEAF_NODE	4:20	4:20	6	(
ARGUMENT	4:21	4:21	6	"part"
FIELD	4:21	4:21	7	"part"
LEAF_NODE	4:21	4:21	8	"part"
LEAF_NODE	4:27	4:27	6	,
ARGUMENT	4:29	4:29	6	"w"
FIELD	4:29	4:29	7	"w"
LEAF_NODE	4:29	4:29	8	"w"
LEAF_NODE	4:32	4:32	6	,
ARGUMENT	4:34	4:34	6	PURPLE_CMD_P_PRPL
FIELD	4:34	4:34	7	PURPLE_CMD_P_PRPL
LEAF_NODE	4:34	4:34	8	PURPLE_CMD_P_PRPL
LEAF_NODE	4:51	4:51	6	,
ARGUMENT	5:3	5:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	5:3	5:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	5:3	5:3	8	PURPLE_CMD_FLAG_IM
FIELD	5:3	5:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	5:3	5:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	5:22	5:22	8	|
BIT_OR_ELEM	5:24	5:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	5:24	6:3	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	5:24	5:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	5:24	5:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	5:24	5:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	5:45	5:45	10	|
BIT_OR_ELEM	6:3	6:3	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	6:3	6:31	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	6:3	6:3	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	6:3	6:3	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	6:3	6:3	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	6:29	6:29	12	|
BIT_OR_ELEM	6:31	6:31	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	6:31	6:31	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	6:31	6:31	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	6:63	6:63	6	,
ARGUMENT	7:3	7:3	6	"prpl-silc"
FIELD	7:3	7:3	7	"prpl-silc"
LEAF_NODE	7:3	7:3	8	"prpl-silc"
LEAF_NODE	7:14	7:14	6	,
ARGUMENT	7:16	7:16	6	silcpurple_cmd_chat_part
FIELD	7:16	7:16	7	silcpurple_cmd_chat_part
LEAF_NODE	7:16	7:16	8	silcpurple_cmd_chat_part
LEAF_NODE	7:40	7:40	6	,
ARGUMENT	7:42	7:42	6	_ ( "part [channel]:  Leave the chat" )
FUNCTION_CALL	7:42	7:77	7	_ ( "part [channel]:  Leave the chat" )
CALLEE	7:42	7:42	8	_
LEAF_NODE	7:42	7:42	9	_
LEAF_NODE	7:43	7:43	8	(
ARGUMENT	7:44	7:44	8	"part [channel]:  Leave the chat"
FIELD	7:44	7:44	9	"part [channel]:  Leave the chat"
LEAF_NODE	7:44	7:44	10	"part [channel]:  Leave the chat"
LEAF_NODE	7:77	7:77	8	)
LEAF_NODE	7:78	7:78	6	,
ARGUMENT	7:80	7:80	6	NULL
FIELD	7:80	7:80	7	NULL
LEAF_NODE	7:80	7:80	8	NULL
LEAF_NODE	7:84	7:84	6	)
LEAF_NODE	7:85	7:85	4	;
EXPR_STATEMENT	8:1	11:86	3	purple_cmd_register ( "leave" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_part , _ ( "leave [channel]:  Leave the chat" ) , NULL ) ;
EXPR	8:1	8:1	4	purple_cmd_register ( "leave" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_part , _ ( "leave [channel]:  Leave the chat" ) , NULL )
FUNCTION_CALL	8:1	11:85	5	purple_cmd_register ( "leave" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_part , _ ( "leave [channel]:  Leave the chat" ) , NULL )
CALLEE	8:1	8:1	6	purple_cmd_register
LEAF_NODE	8:1	8:1	7	purple_cmd_register
LEAF_NODE	8:20	8:20	6	(
ARGUMENT	8:21	8:21	6	"leave"
FIELD	8:21	8:21	7	"leave"
LEAF_NODE	8:21	8:21	8	"leave"
LEAF_NODE	8:28	8:28	6	,
ARGUMENT	8:30	8:30	6	"w"
FIELD	8:30	8:30	7	"w"
LEAF_NODE	8:30	8:30	8	"w"
LEAF_NODE	8:33	8:33	6	,
ARGUMENT	8:35	8:35	6	PURPLE_CMD_P_PRPL
FIELD	8:35	8:35	7	PURPLE_CMD_P_PRPL
LEAF_NODE	8:35	8:35	8	PURPLE_CMD_P_PRPL
LEAF_NODE	8:52	8:52	6	,
ARGUMENT	9:3	9:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	9:3	9:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	9:3	9:3	8	PURPLE_CMD_FLAG_IM
FIELD	9:3	9:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	9:3	9:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	9:22	9:22	8	|
BIT_OR_ELEM	9:24	9:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	9:24	10:3	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	9:24	9:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	9:24	9:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	9:24	9:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	9:45	9:45	10	|
BIT_OR_ELEM	10:3	10:3	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	10:3	10:31	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	10:3	10:3	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	10:3	10:3	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	10:3	10:3	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	10:29	10:29	12	|
BIT_OR_ELEM	10:31	10:31	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	10:31	10:31	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	10:31	10:31	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	10:63	10:63	6	,
ARGUMENT	11:3	11:3	6	"prpl-silc"
FIELD	11:3	11:3	7	"prpl-silc"
LEAF_NODE	11:3	11:3	8	"prpl-silc"
LEAF_NODE	11:14	11:14	6	,
ARGUMENT	11:16	11:16	6	silcpurple_cmd_chat_part
FIELD	11:16	11:16	7	silcpurple_cmd_chat_part
LEAF_NODE	11:16	11:16	8	silcpurple_cmd_chat_part
LEAF_NODE	11:40	11:40	6	,
ARGUMENT	11:42	11:42	6	_ ( "leave [channel]:  Leave the chat" )
FUNCTION_CALL	11:42	11:78	7	_ ( "leave [channel]:  Leave the chat" )
CALLEE	11:42	11:42	8	_
LEAF_NODE	11:42	11:42	9	_
LEAF_NODE	11:43	11:43	8	(
ARGUMENT	11:44	11:44	8	"leave [channel]:  Leave the chat"
FIELD	11:44	11:44	9	"leave [channel]:  Leave the chat"
LEAF_NODE	11:44	11:44	10	"leave [channel]:  Leave the chat"
LEAF_NODE	11:78	11:78	8	)
LEAF_NODE	11:79	11:79	6	,
ARGUMENT	11:81	11:81	6	NULL
FIELD	11:81	11:81	7	NULL
LEAF_NODE	11:81	11:81	8	NULL
LEAF_NODE	11:85	11:85	6	)
LEAF_NODE	11:86	11:86	4	;
EXPR_STATEMENT	12:1	15:94	3	purple_cmd_register ( "topic" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_topic , _ ( "topic [&lt;new topic&gt;]:  View or change the topic" ) , NULL ) ;
EXPR	12:1	12:1	4	purple_cmd_register ( "topic" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_topic , _ ( "topic [&lt;new topic&gt;]:  View or change the topic" ) , NULL )
FUNCTION_CALL	12:1	15:93	5	purple_cmd_register ( "topic" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_topic , _ ( "topic [&lt;new topic&gt;]:  View or change the topic" ) , NULL )
CALLEE	12:1	12:1	6	purple_cmd_register
LEAF_NODE	12:1	12:1	7	purple_cmd_register
LEAF_NODE	12:20	12:20	6	(
ARGUMENT	12:21	12:21	6	"topic"
FIELD	12:21	12:21	7	"topic"
LEAF_NODE	12:21	12:21	8	"topic"
LEAF_NODE	12:28	12:28	6	,
ARGUMENT	12:30	12:30	6	"s"
FIELD	12:30	12:30	7	"s"
LEAF_NODE	12:30	12:30	8	"s"
LEAF_NODE	12:33	12:33	6	,
ARGUMENT	12:35	12:35	6	PURPLE_CMD_P_PRPL
FIELD	12:35	12:35	7	PURPLE_CMD_P_PRPL
LEAF_NODE	12:35	12:35	8	PURPLE_CMD_P_PRPL
LEAF_NODE	12:52	12:52	6	,
ARGUMENT	13:3	13:3	6	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	13:3	13:26	7	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	13:3	13:3	8	PURPLE_CMD_FLAG_CHAT
FIELD	13:3	13:3	9	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	13:3	13:3	10	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	13:24	13:24	8	|
BIT_OR_ELEM	13:26	13:26	8	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	13:26	14:3	9	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	13:26	13:26	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	13:26	13:26	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	13:26	13:26	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	13:52	13:52	10	|
BIT_OR_ELEM	14:3	14:3	10	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	14:3	14:3	11	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	14:3	14:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	14:35	14:35	6	,
ARGUMENT	14:37	14:37	6	"prpl-silc"
FIELD	14:37	14:37	7	"prpl-silc"
LEAF_NODE	14:37	14:37	8	"prpl-silc"
LEAF_NODE	14:48	14:48	6	,
ARGUMENT	15:3	15:3	6	silcpurple_cmd_chat_topic
FIELD	15:3	15:3	7	silcpurple_cmd_chat_topic
LEAF_NODE	15:3	15:3	8	silcpurple_cmd_chat_topic
LEAF_NODE	15:28	15:28	6	,
ARGUMENT	15:30	15:30	6	_ ( "topic [&lt;new topic&gt;]:  View or change the topic" )
FUNCTION_CALL	15:30	15:86	7	_ ( "topic [&lt;new topic&gt;]:  View or change the topic" )
CALLEE	15:30	15:30	8	_
LEAF_NODE	15:30	15:30	9	_
LEAF_NODE	15:31	15:31	8	(
ARGUMENT	15:32	15:32	8	"topic [&lt;new topic&gt;]:  View or change the topic"
FIELD	15:32	15:32	9	"topic [&lt;new topic&gt;]:  View or change the topic"
LEAF_NODE	15:32	15:32	10	"topic [&lt;new topic&gt;]:  View or change the topic"
LEAF_NODE	15:86	15:86	8	)
LEAF_NODE	15:87	15:87	6	,
ARGUMENT	15:89	15:89	6	NULL
FIELD	15:89	15:89	7	NULL
LEAF_NODE	15:89	15:89	8	NULL
LEAF_NODE	15:93	15:93	6	)
LEAF_NODE	15:94	15:94	4	;
EXPR_STATEMENT	16:1	20:84	3	purple_cmd_register ( "join" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_join , _ ( "join &lt;channel&gt; [&lt;password&gt;]:  Join a chat on this network" ) , NULL ) ;
EXPR	16:1	16:1	4	purple_cmd_register ( "join" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_join , _ ( "join &lt;channel&gt; [&lt;password&gt;]:  Join a chat on this network" ) , NULL )
FUNCTION_CALL	16:1	20:83	5	purple_cmd_register ( "join" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_join , _ ( "join &lt;channel&gt; [&lt;password&gt;]:  Join a chat on this network" ) , NULL )
CALLEE	16:1	16:1	6	purple_cmd_register
LEAF_NODE	16:1	16:1	7	purple_cmd_register
LEAF_NODE	16:20	16:20	6	(
ARGUMENT	16:21	16:21	6	"join"
FIELD	16:21	16:21	7	"join"
LEAF_NODE	16:21	16:21	8	"join"
LEAF_NODE	16:27	16:27	6	,
ARGUMENT	16:29	16:29	6	"ws"
FIELD	16:29	16:29	7	"ws"
LEAF_NODE	16:29	16:29	8	"ws"
LEAF_NODE	16:33	16:33	6	,
ARGUMENT	16:35	16:35	6	PURPLE_CMD_P_PRPL
FIELD	16:35	16:35	7	PURPLE_CMD_P_PRPL
LEAF_NODE	16:35	16:35	8	PURPLE_CMD_P_PRPL
LEAF_NODE	16:52	16:52	6	,
ARGUMENT	17:3	17:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	17:3	17:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	17:3	17:3	8	PURPLE_CMD_FLAG_IM
FIELD	17:3	17:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	17:3	17:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	17:22	17:22	8	|
BIT_OR_ELEM	17:24	17:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	17:24	18:3	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	17:24	17:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	17:24	17:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	17:24	17:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	17:45	17:45	10	|
BIT_OR_ELEM	18:3	18:3	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	18:3	18:31	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	18:3	18:3	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	18:3	18:3	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	18:3	18:3	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	18:29	18:29	12	|
BIT_OR_ELEM	18:31	18:31	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	18:31	18:31	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	18:31	18:31	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	18:63	18:63	6	,
ARGUMENT	19:3	19:3	6	"prpl-silc"
FIELD	19:3	19:3	7	"prpl-silc"
LEAF_NODE	19:3	19:3	8	"prpl-silc"
LEAF_NODE	19:14	19:14	6	,
ARGUMENT	19:16	19:16	6	silcpurple_cmd_chat_join
FIELD	19:16	19:16	7	silcpurple_cmd_chat_join
LEAF_NODE	19:16	19:16	8	silcpurple_cmd_chat_join
LEAF_NODE	19:40	19:40	6	,
ARGUMENT	20:3	20:3	6	_ ( "join &lt;channel&gt; [&lt;password&gt;]:  Join a chat on this network" )
FUNCTION_CALL	20:3	20:76	7	_ ( "join &lt;channel&gt; [&lt;password&gt;]:  Join a chat on this network" )
CALLEE	20:3	20:3	8	_
LEAF_NODE	20:3	20:3	9	_
LEAF_NODE	20:4	20:4	8	(
ARGUMENT	20:5	20:5	8	"join &lt;channel&gt; [&lt;password&gt;]:  Join a chat on this network"
FIELD	20:5	20:5	9	"join &lt;channel&gt; [&lt;password&gt;]:  Join a chat on this network"
LEAF_NODE	20:5	20:5	10	"join &lt;channel&gt; [&lt;password&gt;]:  Join a chat on this network"
LEAF_NODE	20:76	20:76	8	)
LEAF_NODE	20:77	20:77	6	,
ARGUMENT	20:79	20:79	6	NULL
FIELD	20:79	20:79	7	NULL
LEAF_NODE	20:79	20:79	8	NULL
LEAF_NODE	20:83	20:83	6	)
LEAF_NODE	20:84	20:84	4	;
EXPR_STATEMENT	21:1	24:77	3	purple_cmd_register ( "list" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_list , _ ( "list:  List channels on this network" ) , NULL ) ;
EXPR	21:1	21:1	4	purple_cmd_register ( "list" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_list , _ ( "list:  List channels on this network" ) , NULL )
FUNCTION_CALL	21:1	24:76	5	purple_cmd_register ( "list" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_chat_list , _ ( "list:  List channels on this network" ) , NULL )
CALLEE	21:1	21:1	6	purple_cmd_register
LEAF_NODE	21:1	21:1	7	purple_cmd_register
LEAF_NODE	21:20	21:20	6	(
ARGUMENT	21:21	21:21	6	"list"
FIELD	21:21	21:21	7	"list"
LEAF_NODE	21:21	21:21	8	"list"
LEAF_NODE	21:27	21:27	6	,
ARGUMENT	21:29	21:29	6	""
FIELD	21:29	21:29	7	""
LEAF_NODE	21:29	21:29	8	""
LEAF_NODE	21:31	21:31	6	,
ARGUMENT	21:33	21:33	6	PURPLE_CMD_P_PRPL
FIELD	21:33	21:33	7	PURPLE_CMD_P_PRPL
LEAF_NODE	21:33	21:33	8	PURPLE_CMD_P_PRPL
LEAF_NODE	21:50	21:50	6	,
ARGUMENT	22:3	22:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	22:3	22:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	22:3	22:3	8	PURPLE_CMD_FLAG_IM
FIELD	22:3	22:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	22:3	22:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	22:22	22:22	8	|
BIT_OR_ELEM	22:24	22:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	22:24	22:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	22:24	22:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	22:24	22:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	22:24	22:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	22:45	22:45	10	|
BIT_OR_ELEM	22:47	22:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	22:47	23:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	22:47	22:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	22:47	22:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	22:47	22:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	22:73	22:73	12	|
BIT_OR_ELEM	23:3	23:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	23:3	23:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	23:3	23:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	23:35	23:35	6	,
ARGUMENT	23:37	23:37	6	"prpl-silc"
FIELD	23:37	23:37	7	"prpl-silc"
LEAF_NODE	23:37	23:37	8	"prpl-silc"
LEAF_NODE	23:48	23:48	6	,
ARGUMENT	24:3	24:3	6	silcpurple_cmd_chat_list
FIELD	24:3	24:3	7	silcpurple_cmd_chat_list
LEAF_NODE	24:3	24:3	8	silcpurple_cmd_chat_list
LEAF_NODE	24:27	24:27	6	,
ARGUMENT	24:29	24:29	6	_ ( "list:  List channels on this network" )
FUNCTION_CALL	24:29	24:69	7	_ ( "list:  List channels on this network" )
CALLEE	24:29	24:29	8	_
LEAF_NODE	24:29	24:29	9	_
LEAF_NODE	24:30	24:30	8	(
ARGUMENT	24:31	24:31	8	"list:  List channels on this network"
FIELD	24:31	24:31	9	"list:  List channels on this network"
LEAF_NODE	24:31	24:31	10	"list:  List channels on this network"
LEAF_NODE	24:69	24:69	8	)
LEAF_NODE	24:70	24:70	6	,
ARGUMENT	24:72	24:72	6	NULL
FIELD	24:72	24:72	7	NULL
LEAF_NODE	24:72	24:72	8	NULL
LEAF_NODE	24:76	24:76	6	)
LEAF_NODE	24:77	24:77	4	;
EXPR_STATEMENT	25:1	28:81	3	purple_cmd_register ( "whois" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_whois , _ ( "whois &lt;nick&gt;:  View nick's information" ) , NULL ) ;
EXPR	25:1	25:1	4	purple_cmd_register ( "whois" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_whois , _ ( "whois &lt;nick&gt;:  View nick's information" ) , NULL )
FUNCTION_CALL	25:1	28:80	5	purple_cmd_register ( "whois" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_whois , _ ( "whois &lt;nick&gt;:  View nick's information" ) , NULL )
CALLEE	25:1	25:1	6	purple_cmd_register
LEAF_NODE	25:1	25:1	7	purple_cmd_register
LEAF_NODE	25:20	25:20	6	(
ARGUMENT	25:21	25:21	6	"whois"
FIELD	25:21	25:21	7	"whois"
LEAF_NODE	25:21	25:21	8	"whois"
LEAF_NODE	25:28	25:28	6	,
ARGUMENT	25:30	25:30	6	"w"
FIELD	25:30	25:30	7	"w"
LEAF_NODE	25:30	25:30	8	"w"
LEAF_NODE	25:33	25:33	6	,
ARGUMENT	25:35	25:35	6	PURPLE_CMD_P_PRPL
FIELD	25:35	25:35	7	PURPLE_CMD_P_PRPL
LEAF_NODE	25:35	25:35	8	PURPLE_CMD_P_PRPL
LEAF_NODE	25:52	25:52	6	,
ARGUMENT	26:3	26:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	26:3	26:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	26:3	26:3	8	PURPLE_CMD_FLAG_IM
FIELD	26:3	26:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	26:3	26:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	26:22	26:22	8	|
BIT_OR_ELEM	26:24	26:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	26:24	26:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	26:24	26:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	26:24	26:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	26:24	26:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	26:45	26:45	10	|
BIT_OR_ELEM	26:47	26:47	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	26:47	26:47	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	26:47	26:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	26:72	26:72	6	,
ARGUMENT	27:3	27:3	6	"prpl-silc"
FIELD	27:3	27:3	7	"prpl-silc"
LEAF_NODE	27:3	27:3	8	"prpl-silc"
LEAF_NODE	27:14	27:14	6	,
ARGUMENT	28:3	28:3	6	silcpurple_cmd_whois
FIELD	28:3	28:3	7	silcpurple_cmd_whois
LEAF_NODE	28:3	28:3	8	silcpurple_cmd_whois
LEAF_NODE	28:23	28:23	6	,
ARGUMENT	28:25	28:25	6	_ ( "whois &lt;nick&gt;:  View nick's information" )
FUNCTION_CALL	28:25	28:73	7	_ ( "whois &lt;nick&gt;:  View nick's information" )
CALLEE	28:25	28:25	8	_
LEAF_NODE	28:25	28:25	9	_
LEAF_NODE	28:26	28:26	8	(
ARGUMENT	28:27	28:27	8	"whois &lt;nick&gt;:  View nick's information"
FIELD	28:27	28:27	9	"whois &lt;nick&gt;:  View nick's information"
LEAF_NODE	28:27	28:27	10	"whois &lt;nick&gt;:  View nick's information"
LEAF_NODE	28:73	28:73	8	)
LEAF_NODE	28:74	28:74	6	,
ARGUMENT	28:76	28:76	6	NULL
FIELD	28:76	28:76	7	NULL
LEAF_NODE	28:76	28:76	8	NULL
LEAF_NODE	28:80	28:80	6	)
LEAF_NODE	28:81	28:81	4	;
EXPR_STATEMENT	29:1	32:82	3	purple_cmd_register ( "msg" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_msg , _ ( "msg &lt;nick&gt; &lt;message&gt;:  Send a private message to a user" ) , NULL ) ;
EXPR	29:1	29:1	4	purple_cmd_register ( "msg" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_msg , _ ( "msg &lt;nick&gt; &lt;message&gt;:  Send a private message to a user" ) , NULL )
FUNCTION_CALL	29:1	32:81	5	purple_cmd_register ( "msg" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_msg , _ ( "msg &lt;nick&gt; &lt;message&gt;:  Send a private message to a user" ) , NULL )
CALLEE	29:1	29:1	6	purple_cmd_register
LEAF_NODE	29:1	29:1	7	purple_cmd_register
LEAF_NODE	29:20	29:20	6	(
ARGUMENT	29:21	29:21	6	"msg"
FIELD	29:21	29:21	7	"msg"
LEAF_NODE	29:21	29:21	8	"msg"
LEAF_NODE	29:26	29:26	6	,
ARGUMENT	29:28	29:28	6	"ws"
FIELD	29:28	29:28	7	"ws"
LEAF_NODE	29:28	29:28	8	"ws"
LEAF_NODE	29:32	29:32	6	,
ARGUMENT	29:34	29:34	6	PURPLE_CMD_P_PRPL
FIELD	29:34	29:34	7	PURPLE_CMD_P_PRPL
LEAF_NODE	29:34	29:34	8	PURPLE_CMD_P_PRPL
LEAF_NODE	29:51	29:51	6	,
ARGUMENT	30:3	30:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	30:3	30:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	30:3	30:3	8	PURPLE_CMD_FLAG_IM
FIELD	30:3	30:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	30:3	30:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	30:22	30:22	8	|
BIT_OR_ELEM	30:24	30:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	30:24	30:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	30:24	30:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	30:24	30:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	30:24	30:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	30:45	30:45	10	|
BIT_OR_ELEM	30:47	30:47	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	30:47	30:47	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	30:47	30:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	30:72	30:72	6	,
ARGUMENT	31:3	31:3	6	"prpl-silc"
FIELD	31:3	31:3	7	"prpl-silc"
LEAF_NODE	31:3	31:3	8	"prpl-silc"
LEAF_NODE	31:14	31:14	6	,
ARGUMENT	31:16	31:16	6	silcpurple_cmd_msg
FIELD	31:16	31:16	7	silcpurple_cmd_msg
LEAF_NODE	31:16	31:16	8	silcpurple_cmd_msg
LEAF_NODE	31:34	31:34	6	,
ARGUMENT	32:3	32:3	6	_ ( "msg &lt;nick&gt; &lt;message&gt;:  Send a private message to a user" )
FUNCTION_CALL	32:3	32:74	7	_ ( "msg &lt;nick&gt; &lt;message&gt;:  Send a private message to a user" )
CALLEE	32:3	32:3	8	_
LEAF_NODE	32:3	32:3	9	_
LEAF_NODE	32:4	32:4	8	(
ARGUMENT	32:5	32:5	8	"msg &lt;nick&gt; &lt;message&gt;:  Send a private message to a user"
FIELD	32:5	32:5	9	"msg &lt;nick&gt; &lt;message&gt;:  Send a private message to a user"
LEAF_NODE	32:5	32:5	10	"msg &lt;nick&gt; &lt;message&gt;:  Send a private message to a user"
LEAF_NODE	32:74	32:74	8	)
LEAF_NODE	32:75	32:75	6	,
ARGUMENT	32:77	32:77	6	NULL
FIELD	32:77	32:77	7	NULL
LEAF_NODE	32:77	32:77	8	NULL
LEAF_NODE	32:81	32:81	6	)
LEAF_NODE	32:82	32:82	4	;
EXPR_STATEMENT	33:1	36:86	3	purple_cmd_register ( "query" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_query , _ ( "query &lt;nick&gt; [&lt;message&gt;]:  Send a private message to a user" ) , NULL ) ;
EXPR	33:1	33:1	4	purple_cmd_register ( "query" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_query , _ ( "query &lt;nick&gt; [&lt;message&gt;]:  Send a private message to a user" ) , NULL )
FUNCTION_CALL	33:1	36:85	5	purple_cmd_register ( "query" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_query , _ ( "query &lt;nick&gt; [&lt;message&gt;]:  Send a private message to a user" ) , NULL )
CALLEE	33:1	33:1	6	purple_cmd_register
LEAF_NODE	33:1	33:1	7	purple_cmd_register
LEAF_NODE	33:20	33:20	6	(
ARGUMENT	33:21	33:21	6	"query"
FIELD	33:21	33:21	7	"query"
LEAF_NODE	33:21	33:21	8	"query"
LEAF_NODE	33:28	33:28	6	,
ARGUMENT	33:30	33:30	6	"ws"
FIELD	33:30	33:30	7	"ws"
LEAF_NODE	33:30	33:30	8	"ws"
LEAF_NODE	33:34	33:34	6	,
ARGUMENT	33:36	33:36	6	PURPLE_CMD_P_PRPL
FIELD	33:36	33:36	7	PURPLE_CMD_P_PRPL
LEAF_NODE	33:36	33:36	8	PURPLE_CMD_P_PRPL
LEAF_NODE	33:53	33:53	6	,
ARGUMENT	34:3	34:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	34:3	34:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	34:3	34:3	8	PURPLE_CMD_FLAG_IM
FIELD	34:3	34:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	34:3	34:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	34:22	34:22	8	|
BIT_OR_ELEM	34:24	34:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	34:24	34:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	34:24	34:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	34:24	34:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	34:24	34:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	34:45	34:45	10	|
BIT_OR_ELEM	34:47	34:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	34:47	35:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	34:47	34:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	34:47	34:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	34:47	34:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	34:73	34:73	12	|
BIT_OR_ELEM	35:3	35:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	35:3	35:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	35:3	35:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	35:35	35:35	6	,
ARGUMENT	35:37	35:37	6	"prpl-silc"
FIELD	35:37	35:37	7	"prpl-silc"
LEAF_NODE	35:37	35:37	8	"prpl-silc"
LEAF_NODE	35:48	35:48	6	,
ARGUMENT	35:50	35:50	6	silcpurple_cmd_query
FIELD	35:50	35:50	7	silcpurple_cmd_query
LEAF_NODE	35:50	35:50	8	silcpurple_cmd_query
LEAF_NODE	35:70	35:70	6	,
ARGUMENT	36:3	36:3	6	_ ( "query &lt;nick&gt; [&lt;message&gt;]:  Send a private message to a user" )
FUNCTION_CALL	36:3	36:78	7	_ ( "query &lt;nick&gt; [&lt;message&gt;]:  Send a private message to a user" )
CALLEE	36:3	36:3	8	_
LEAF_NODE	36:3	36:3	9	_
LEAF_NODE	36:4	36:4	8	(
ARGUMENT	36:5	36:5	8	"query &lt;nick&gt; [&lt;message&gt;]:  Send a private message to a user"
FIELD	36:5	36:5	9	"query &lt;nick&gt; [&lt;message&gt;]:  Send a private message to a user"
LEAF_NODE	36:5	36:5	10	"query &lt;nick&gt; [&lt;message&gt;]:  Send a private message to a user"
LEAF_NODE	36:78	36:78	8	)
LEAF_NODE	36:79	36:79	6	,
ARGUMENT	36:81	36:81	6	NULL
FIELD	36:81	36:81	7	NULL
LEAF_NODE	36:81	36:81	8	NULL
LEAF_NODE	36:85	36:85	6	)
LEAF_NODE	36:86	36:86	4	;
EXPR_STATEMENT	37:1	40:58	3	purple_cmd_register ( "motd" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_motd , _ ( "motd:  View the server's Message Of The Day" ) , NULL ) ;
EXPR	37:1	37:1	4	purple_cmd_register ( "motd" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_motd , _ ( "motd:  View the server's Message Of The Day" ) , NULL )
FUNCTION_CALL	37:1	40:57	5	purple_cmd_register ( "motd" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_motd , _ ( "motd:  View the server's Message Of The Day" ) , NULL )
CALLEE	37:1	37:1	6	purple_cmd_register
LEAF_NODE	37:1	37:1	7	purple_cmd_register
LEAF_NODE	37:20	37:20	6	(
ARGUMENT	37:21	37:21	6	"motd"
FIELD	37:21	37:21	7	"motd"
LEAF_NODE	37:21	37:21	8	"motd"
LEAF_NODE	37:27	37:27	6	,
ARGUMENT	37:29	37:29	6	""
FIELD	37:29	37:29	7	""
LEAF_NODE	37:29	37:29	8	""
LEAF_NODE	37:31	37:31	6	,
ARGUMENT	37:33	37:33	6	PURPLE_CMD_P_PRPL
FIELD	37:33	37:33	7	PURPLE_CMD_P_PRPL
LEAF_NODE	37:33	37:33	8	PURPLE_CMD_P_PRPL
LEAF_NODE	37:50	37:50	6	,
ARGUMENT	38:3	38:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	38:3	38:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	38:3	38:3	8	PURPLE_CMD_FLAG_IM
FIELD	38:3	38:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	38:3	38:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	38:22	38:22	8	|
BIT_OR_ELEM	38:24	38:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	38:24	38:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	38:24	38:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	38:24	38:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	38:24	38:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	38:45	38:45	10	|
BIT_OR_ELEM	38:47	38:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	38:47	39:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	38:47	38:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	38:47	38:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	38:47	38:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	38:73	38:73	12	|
BIT_OR_ELEM	39:3	39:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	39:3	39:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	39:3	39:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	39:35	39:35	6	,
ARGUMENT	39:37	39:37	6	"prpl-silc"
FIELD	39:37	39:37	7	"prpl-silc"
LEAF_NODE	39:37	39:37	8	"prpl-silc"
LEAF_NODE	39:48	39:48	6	,
ARGUMENT	39:50	39:50	6	silcpurple_cmd_motd
FIELD	39:50	39:50	7	silcpurple_cmd_motd
LEAF_NODE	39:50	39:50	8	silcpurple_cmd_motd
LEAF_NODE	39:69	39:69	6	,
ARGUMENT	40:3	40:3	6	_ ( "motd:  View the server's Message Of The Day" )
FUNCTION_CALL	40:3	40:50	7	_ ( "motd:  View the server's Message Of The Day" )
CALLEE	40:3	40:3	8	_
LEAF_NODE	40:3	40:3	9	_
LEAF_NODE	40:4	40:4	8	(
ARGUMENT	40:5	40:5	8	"motd:  View the server's Message Of The Day"
FIELD	40:5	40:5	9	"motd:  View the server's Message Of The Day"
LEAF_NODE	40:5	40:5	10	"motd:  View the server's Message Of The Day"
LEAF_NODE	40:50	40:50	8	)
LEAF_NODE	40:51	40:51	6	,
ARGUMENT	40:53	40:53	6	NULL
FIELD	40:53	40:53	7	NULL
LEAF_NODE	40:53	40:53	8	NULL
LEAF_NODE	40:57	40:57	6	)
LEAF_NODE	40:58	40:58	4	;
EXPR_STATEMENT	41:1	44:43	3	purple_cmd_register ( "detach" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_detach , _ ( "detach:  Detach this session" ) , NULL ) ;
EXPR	41:1	41:1	4	purple_cmd_register ( "detach" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_detach , _ ( "detach:  Detach this session" ) , NULL )
FUNCTION_CALL	41:1	44:42	5	purple_cmd_register ( "detach" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_detach , _ ( "detach:  Detach this session" ) , NULL )
CALLEE	41:1	41:1	6	purple_cmd_register
LEAF_NODE	41:1	41:1	7	purple_cmd_register
LEAF_NODE	41:20	41:20	6	(
ARGUMENT	41:21	41:21	6	"detach"
FIELD	41:21	41:21	7	"detach"
LEAF_NODE	41:21	41:21	8	"detach"
LEAF_NODE	41:29	41:29	6	,
ARGUMENT	41:31	41:31	6	""
FIELD	41:31	41:31	7	""
LEAF_NODE	41:31	41:31	8	""
LEAF_NODE	41:33	41:33	6	,
ARGUMENT	41:35	41:35	6	PURPLE_CMD_P_PRPL
FIELD	41:35	41:35	7	PURPLE_CMD_P_PRPL
LEAF_NODE	41:35	41:35	8	PURPLE_CMD_P_PRPL
LEAF_NODE	41:52	41:52	6	,
ARGUMENT	42:3	42:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	42:3	42:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	42:3	42:3	8	PURPLE_CMD_FLAG_IM
FIELD	42:3	42:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	42:3	42:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	42:22	42:22	8	|
BIT_OR_ELEM	42:24	42:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	42:24	42:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	42:24	42:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	42:24	42:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	42:24	42:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	42:45	42:45	10	|
BIT_OR_ELEM	42:47	42:47	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	42:47	42:47	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	42:47	42:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	42:72	42:72	6	,
ARGUMENT	43:3	43:3	6	"prpl-silc"
FIELD	43:3	43:3	7	"prpl-silc"
LEAF_NODE	43:3	43:3	8	"prpl-silc"
LEAF_NODE	43:14	43:14	6	,
ARGUMENT	43:16	43:16	6	silcpurple_cmd_detach
FIELD	43:16	43:16	7	silcpurple_cmd_detach
LEAF_NODE	43:16	43:16	8	silcpurple_cmd_detach
LEAF_NODE	43:37	43:37	6	,
ARGUMENT	44:3	44:3	6	_ ( "detach:  Detach this session" )
FUNCTION_CALL	44:3	44:35	7	_ ( "detach:  Detach this session" )
CALLEE	44:3	44:3	8	_
LEAF_NODE	44:3	44:3	9	_
LEAF_NODE	44:4	44:4	8	(
ARGUMENT	44:5	44:5	8	"detach:  Detach this session"
FIELD	44:5	44:5	9	"detach:  Detach this session"
LEAF_NODE	44:5	44:5	10	"detach:  Detach this session"
LEAF_NODE	44:35	44:35	8	)
LEAF_NODE	44:36	44:36	6	,
ARGUMENT	44:38	44:38	6	NULL
FIELD	44:38	44:38	7	NULL
LEAF_NODE	44:38	44:38	8	NULL
LEAF_NODE	44:42	44:42	6	)
LEAF_NODE	44:43	44:43	4	;
EXPR_STATEMENT	45:1	48:84	3	purple_cmd_register ( "quit" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_quit , _ ( "quit [message]:  Disconnect from the server, with an optional message" ) , NULL ) ;
EXPR	45:1	45:1	4	purple_cmd_register ( "quit" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_quit , _ ( "quit [message]:  Disconnect from the server, with an optional message" ) , NULL )
FUNCTION_CALL	45:1	48:83	5	purple_cmd_register ( "quit" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_quit , _ ( "quit [message]:  Disconnect from the server, with an optional message" ) , NULL )
CALLEE	45:1	45:1	6	purple_cmd_register
LEAF_NODE	45:1	45:1	7	purple_cmd_register
LEAF_NODE	45:20	45:20	6	(
ARGUMENT	45:21	45:21	6	"quit"
FIELD	45:21	45:21	7	"quit"
LEAF_NODE	45:21	45:21	8	"quit"
LEAF_NODE	45:27	45:27	6	,
ARGUMENT	45:29	45:29	6	"s"
FIELD	45:29	45:29	7	"s"
LEAF_NODE	45:29	45:29	8	"s"
LEAF_NODE	45:32	45:32	6	,
ARGUMENT	45:34	45:34	6	PURPLE_CMD_P_PRPL
FIELD	45:34	45:34	7	PURPLE_CMD_P_PRPL
LEAF_NODE	45:34	45:34	8	PURPLE_CMD_P_PRPL
LEAF_NODE	45:51	45:51	6	,
ARGUMENT	46:3	46:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	46:3	46:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	46:3	46:3	8	PURPLE_CMD_FLAG_IM
FIELD	46:3	46:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	46:3	46:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	46:22	46:22	8	|
BIT_OR_ELEM	46:24	46:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	46:24	46:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	46:24	46:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	46:24	46:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	46:24	46:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	46:45	46:45	10	|
BIT_OR_ELEM	46:47	46:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	46:47	47:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	46:47	46:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	46:47	46:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	46:47	46:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	46:73	46:73	12	|
BIT_OR_ELEM	47:3	47:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	47:3	47:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	47:3	47:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	47:35	47:35	6	,
ARGUMENT	47:37	47:37	6	"prpl-silc"
FIELD	47:37	47:37	7	"prpl-silc"
LEAF_NODE	47:37	47:37	8	"prpl-silc"
LEAF_NODE	47:48	47:48	6	,
ARGUMENT	47:50	47:50	6	silcpurple_cmd_quit
FIELD	47:50	47:50	7	silcpurple_cmd_quit
LEAF_NODE	47:50	47:50	8	silcpurple_cmd_quit
LEAF_NODE	47:69	47:69	6	,
ARGUMENT	48:3	48:3	6	_ ( "quit [message]:  Disconnect from the server, with an optional message" )
FUNCTION_CALL	48:3	48:76	7	_ ( "quit [message]:  Disconnect from the server, with an optional message" )
CALLEE	48:3	48:3	8	_
LEAF_NODE	48:3	48:3	9	_
LEAF_NODE	48:4	48:4	8	(
ARGUMENT	48:5	48:5	8	"quit [message]:  Disconnect from the server, with an optional message"
FIELD	48:5	48:5	9	"quit [message]:  Disconnect from the server, with an optional message"
LEAF_NODE	48:5	48:5	10	"quit [message]:  Disconnect from the server, with an optional message"
LEAF_NODE	48:76	48:76	8	)
LEAF_NODE	48:77	48:77	6	,
ARGUMENT	48:79	48:79	6	NULL
FIELD	48:79	48:79	7	NULL
LEAF_NODE	48:79	48:79	8	NULL
LEAF_NODE	48:83	48:83	6	)
LEAF_NODE	48:84	48:84	4	;
EXPR_STATEMENT	49:1	52:66	3	purple_cmd_register ( "call" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_call , _ ( "call &lt;command&gt;:  Call any silc client command" ) , NULL ) ;
EXPR	49:1	49:1	4	purple_cmd_register ( "call" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_call , _ ( "call &lt;command&gt;:  Call any silc client command" ) , NULL )
FUNCTION_CALL	49:1	52:65	5	purple_cmd_register ( "call" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_call , _ ( "call &lt;command&gt;:  Call any silc client command" ) , NULL )
CALLEE	49:1	49:1	6	purple_cmd_register
LEAF_NODE	49:1	49:1	7	purple_cmd_register
LEAF_NODE	49:20	49:20	6	(
ARGUMENT	49:21	49:21	6	"call"
FIELD	49:21	49:21	7	"call"
LEAF_NODE	49:21	49:21	8	"call"
LEAF_NODE	49:27	49:27	6	,
ARGUMENT	49:29	49:29	6	"s"
FIELD	49:29	49:29	7	"s"
LEAF_NODE	49:29	49:29	8	"s"
LEAF_NODE	49:32	49:32	6	,
ARGUMENT	49:34	49:34	6	PURPLE_CMD_P_PRPL
FIELD	49:34	49:34	7	PURPLE_CMD_P_PRPL
LEAF_NODE	49:34	49:34	8	PURPLE_CMD_P_PRPL
LEAF_NODE	49:51	49:51	6	,
ARGUMENT	50:3	50:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	50:3	50:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	50:3	50:3	8	PURPLE_CMD_FLAG_IM
FIELD	50:3	50:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	50:3	50:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	50:22	50:22	8	|
BIT_OR_ELEM	50:24	50:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	50:24	50:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	50:24	50:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	50:24	50:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	50:24	50:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	50:45	50:45	10	|
BIT_OR_ELEM	50:47	50:47	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	50:47	50:47	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	50:47	50:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	50:72	50:72	6	,
ARGUMENT	51:3	51:3	6	"prpl-silc"
FIELD	51:3	51:3	7	"prpl-silc"
LEAF_NODE	51:3	51:3	8	"prpl-silc"
LEAF_NODE	51:14	51:14	6	,
ARGUMENT	51:16	51:16	6	silcpurple_cmd_call
FIELD	51:16	51:16	7	silcpurple_cmd_call
LEAF_NODE	51:16	51:16	8	silcpurple_cmd_call
LEAF_NODE	51:35	51:35	6	,
ARGUMENT	52:3	52:3	6	_ ( "call &lt;command&gt;:  Call any silc client command" )
FUNCTION_CALL	52:3	52:58	7	_ ( "call &lt;command&gt;:  Call any silc client command" )
CALLEE	52:3	52:3	8	_
LEAF_NODE	52:3	52:3	9	_
LEAF_NODE	52:4	52:4	8	(
ARGUMENT	52:5	52:5	8	"call &lt;command&gt;:  Call any silc client command"
FIELD	52:5	52:5	9	"call &lt;command&gt;:  Call any silc client command"
LEAF_NODE	52:5	52:5	10	"call &lt;command&gt;:  Call any silc client command"
LEAF_NODE	52:58	52:58	8	)
LEAF_NODE	52:59	52:59	6	,
ARGUMENT	52:61	52:61	6	NULL
FIELD	52:61	52:61	7	NULL
LEAF_NODE	52:61	52:61	8	NULL
LEAF_NODE	52:65	52:65	6	)
LEAF_NODE	52:66	52:66	4	;
EXPR_STATEMENT	55:1	58:69	3	purple_cmd_register ( "kill" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "kill &lt;nick&gt; [-pubkey|&lt;reason&gt;]:  Kill nick" ) , NULL ) ;
EXPR	55:1	55:1	4	purple_cmd_register ( "kill" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "kill &lt;nick&gt; [-pubkey|&lt;reason&gt;]:  Kill nick" ) , NULL )
FUNCTION_CALL	55:1	58:68	5	purple_cmd_register ( "kill" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "kill &lt;nick&gt; [-pubkey|&lt;reason&gt;]:  Kill nick" ) , NULL )
CALLEE	55:1	55:1	6	purple_cmd_register
LEAF_NODE	55:1	55:1	7	purple_cmd_register
LEAF_NODE	55:20	55:20	6	(
ARGUMENT	55:21	55:21	6	"kill"
FIELD	55:21	55:21	7	"kill"
LEAF_NODE	55:21	55:21	8	"kill"
LEAF_NODE	55:27	55:27	6	,
ARGUMENT	55:29	55:29	6	"ws"
FIELD	55:29	55:29	7	"ws"
LEAF_NODE	55:29	55:29	8	"ws"
LEAF_NODE	55:33	55:33	6	,
ARGUMENT	55:35	55:35	6	PURPLE_CMD_P_PRPL
FIELD	55:35	55:35	7	PURPLE_CMD_P_PRPL
LEAF_NODE	55:35	55:35	8	PURPLE_CMD_P_PRPL
LEAF_NODE	55:52	55:52	6	,
ARGUMENT	56:3	56:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	56:3	56:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	56:3	56:3	8	PURPLE_CMD_FLAG_IM
FIELD	56:3	56:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	56:3	56:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	56:22	56:22	8	|
BIT_OR_ELEM	56:24	56:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	56:24	56:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	56:24	56:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	56:24	56:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	56:24	56:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	56:45	56:45	10	|
BIT_OR_ELEM	56:47	56:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	56:47	57:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	56:47	56:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	56:47	56:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	56:47	56:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	56:73	56:73	12	|
BIT_OR_ELEM	57:3	57:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	57:3	57:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	57:3	57:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	57:35	57:35	6	,
ARGUMENT	57:37	57:37	6	"prpl-silc"
FIELD	57:37	57:37	7	"prpl-silc"
LEAF_NODE	57:37	57:37	8	"prpl-silc"
LEAF_NODE	57:48	57:48	6	,
ARGUMENT	57:50	57:50	6	silcpurple_cmd_generic
FIELD	57:50	57:50	7	silcpurple_cmd_generic
LEAF_NODE	57:50	57:50	8	silcpurple_cmd_generic
LEAF_NODE	57:72	57:72	6	,
ARGUMENT	58:3	58:3	6	_ ( "kill &lt;nick&gt; [-pubkey|&lt;reason&gt;]:  Kill nick" )
FUNCTION_CALL	58:3	58:61	7	_ ( "kill &lt;nick&gt; [-pubkey|&lt;reason&gt;]:  Kill nick" )
CALLEE	58:3	58:3	8	_
LEAF_NODE	58:3	58:3	9	_
LEAF_NODE	58:4	58:4	8	(
ARGUMENT	58:5	58:5	8	"kill &lt;nick&gt; [-pubkey|&lt;reason&gt;]:  Kill nick"
FIELD	58:5	58:5	9	"kill &lt;nick&gt; [-pubkey|&lt;reason&gt;]:  Kill nick"
LEAF_NODE	58:5	58:5	10	"kill &lt;nick&gt; [-pubkey|&lt;reason&gt;]:  Kill nick"
LEAF_NODE	58:61	58:61	8	)
LEAF_NODE	58:62	58:62	6	,
ARGUMENT	58:64	58:64	6	NULL
FIELD	58:64	58:64	7	NULL
LEAF_NODE	58:64	58:64	8	NULL
LEAF_NODE	58:68	58:68	6	)
LEAF_NODE	58:69	58:69	4	;
EXPR_STATEMENT	59:1	62:58	3	purple_cmd_register ( "nick" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "nick &lt;newnick&gt;:  Change your nickname" ) , NULL ) ;
EXPR	59:1	59:1	4	purple_cmd_register ( "nick" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "nick &lt;newnick&gt;:  Change your nickname" ) , NULL )
FUNCTION_CALL	59:1	62:57	5	purple_cmd_register ( "nick" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "nick &lt;newnick&gt;:  Change your nickname" ) , NULL )
CALLEE	59:1	59:1	6	purple_cmd_register
LEAF_NODE	59:1	59:1	7	purple_cmd_register
LEAF_NODE	59:20	59:20	6	(
ARGUMENT	59:21	59:21	6	"nick"
FIELD	59:21	59:21	7	"nick"
LEAF_NODE	59:21	59:21	8	"nick"
LEAF_NODE	59:27	59:27	6	,
ARGUMENT	59:29	59:29	6	"w"
FIELD	59:29	59:29	7	"w"
LEAF_NODE	59:29	59:29	8	"w"
LEAF_NODE	59:32	59:32	6	,
ARGUMENT	59:34	59:34	6	PURPLE_CMD_P_PRPL
FIELD	59:34	59:34	7	PURPLE_CMD_P_PRPL
LEAF_NODE	59:34	59:34	8	PURPLE_CMD_P_PRPL
LEAF_NODE	59:51	59:51	6	,
ARGUMENT	60:3	60:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	60:3	60:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	60:3	60:3	8	PURPLE_CMD_FLAG_IM
FIELD	60:3	60:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	60:3	60:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	60:22	60:22	8	|
BIT_OR_ELEM	60:24	60:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	60:24	60:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	60:24	60:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	60:24	60:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	60:24	60:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	60:45	60:45	10	|
BIT_OR_ELEM	60:47	60:47	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	60:47	60:47	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	60:47	60:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	60:72	60:72	6	,
ARGUMENT	61:3	61:3	6	"prpl-silc"
FIELD	61:3	61:3	7	"prpl-silc"
LEAF_NODE	61:3	61:3	8	"prpl-silc"
LEAF_NODE	61:14	61:14	6	,
ARGUMENT	61:16	61:16	6	silcpurple_cmd_generic
FIELD	61:16	61:16	7	silcpurple_cmd_generic
LEAF_NODE	61:16	61:16	8	silcpurple_cmd_generic
LEAF_NODE	61:38	61:38	6	,
ARGUMENT	62:3	62:3	6	_ ( "nick &lt;newnick&gt;:  Change your nickname" )
FUNCTION_CALL	62:3	62:50	7	_ ( "nick &lt;newnick&gt;:  Change your nickname" )
CALLEE	62:3	62:3	8	_
LEAF_NODE	62:3	62:3	9	_
LEAF_NODE	62:4	62:4	8	(
ARGUMENT	62:5	62:5	8	"nick &lt;newnick&gt;:  Change your nickname"
FIELD	62:5	62:5	9	"nick &lt;newnick&gt;:  Change your nickname"
LEAF_NODE	62:5	62:5	10	"nick &lt;newnick&gt;:  Change your nickname"
LEAF_NODE	62:50	62:50	8	)
LEAF_NODE	62:51	62:51	6	,
ARGUMENT	62:53	62:53	6	NULL
FIELD	62:53	62:53	7	NULL
LEAF_NODE	62:53	62:53	8	NULL
LEAF_NODE	62:57	62:57	6	)
LEAF_NODE	62:58	62:58	4	;
EXPR_STATEMENT	63:1	66:60	3	purple_cmd_register ( "whowas" , "ww" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "whowas &lt;nick&gt;:  View nick's information" ) , NULL ) ;
EXPR	63:1	63:1	4	purple_cmd_register ( "whowas" , "ww" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "whowas &lt;nick&gt;:  View nick's information" ) , NULL )
FUNCTION_CALL	63:1	66:59	5	purple_cmd_register ( "whowas" , "ww" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "whowas &lt;nick&gt;:  View nick's information" ) , NULL )
CALLEE	63:1	63:1	6	purple_cmd_register
LEAF_NODE	63:1	63:1	7	purple_cmd_register
LEAF_NODE	63:20	63:20	6	(
ARGUMENT	63:21	63:21	6	"whowas"
FIELD	63:21	63:21	7	"whowas"
LEAF_NODE	63:21	63:21	8	"whowas"
LEAF_NODE	63:29	63:29	6	,
ARGUMENT	63:31	63:31	6	"ww"
FIELD	63:31	63:31	7	"ww"
LEAF_NODE	63:31	63:31	8	"ww"
LEAF_NODE	63:35	63:35	6	,
ARGUMENT	63:37	63:37	6	PURPLE_CMD_P_PRPL
FIELD	63:37	63:37	7	PURPLE_CMD_P_PRPL
LEAF_NODE	63:37	63:37	8	PURPLE_CMD_P_PRPL
LEAF_NODE	63:54	63:54	6	,
ARGUMENT	64:3	64:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	64:3	64:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	64:3	64:3	8	PURPLE_CMD_FLAG_IM
FIELD	64:3	64:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	64:3	64:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	64:22	64:22	8	|
BIT_OR_ELEM	64:24	64:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	64:24	64:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	64:24	64:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	64:24	64:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	64:24	64:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	64:45	64:45	10	|
BIT_OR_ELEM	64:47	64:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	64:47	65:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	64:47	64:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	64:47	64:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	64:47	64:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	64:73	64:73	12	|
BIT_OR_ELEM	65:3	65:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	65:3	65:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	65:3	65:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	65:35	65:35	6	,
ARGUMENT	65:37	65:37	6	"prpl-silc"
FIELD	65:37	65:37	7	"prpl-silc"
LEAF_NODE	65:37	65:37	8	"prpl-silc"
LEAF_NODE	65:48	65:48	6	,
ARGUMENT	65:50	65:50	6	silcpurple_cmd_generic
FIELD	65:50	65:50	7	silcpurple_cmd_generic
LEAF_NODE	65:50	65:50	8	silcpurple_cmd_generic
LEAF_NODE	65:72	65:72	6	,
ARGUMENT	66:3	66:3	6	_ ( "whowas &lt;nick&gt;:  View nick's information" )
FUNCTION_CALL	66:3	66:52	7	_ ( "whowas &lt;nick&gt;:  View nick's information" )
CALLEE	66:3	66:3	8	_
LEAF_NODE	66:3	66:3	9	_
LEAF_NODE	66:4	66:4	8	(
ARGUMENT	66:5	66:5	8	"whowas &lt;nick&gt;:  View nick's information"
FIELD	66:5	66:5	9	"whowas &lt;nick&gt;:  View nick's information"
LEAF_NODE	66:5	66:5	10	"whowas &lt;nick&gt;:  View nick's information"
LEAF_NODE	66:52	66:52	8	)
LEAF_NODE	66:53	66:53	6	,
ARGUMENT	66:55	66:55	6	NULL
FIELD	66:55	66:55	7	NULL
LEAF_NODE	66:55	66:55	8	NULL
LEAF_NODE	66:59	66:59	6	)
LEAF_NODE	66:60	66:60	4	;
EXPR_STATEMENT	67:1	70:101	3	purple_cmd_register ( "cmode" , "wws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_cmode , _ ( "cmode &lt;channel&gt; [+|-&lt;modes&gt;] [arguments]:  Change or display channel modes" ) , NULL ) ;
EXPR	67:1	67:1	4	purple_cmd_register ( "cmode" , "wws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_cmode , _ ( "cmode &lt;channel&gt; [+|-&lt;modes&gt;] [arguments]:  Change or display channel modes" ) , NULL )
FUNCTION_CALL	67:1	70:100	5	purple_cmd_register ( "cmode" , "wws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_cmode , _ ( "cmode &lt;channel&gt; [+|-&lt;modes&gt;] [arguments]:  Change or display channel modes" ) , NULL )
CALLEE	67:1	67:1	6	purple_cmd_register
LEAF_NODE	67:1	67:1	7	purple_cmd_register
LEAF_NODE	67:20	67:20	6	(
ARGUMENT	67:21	67:21	6	"cmode"
FIELD	67:21	67:21	7	"cmode"
LEAF_NODE	67:21	67:21	8	"cmode"
LEAF_NODE	67:28	67:28	6	,
ARGUMENT	67:30	67:30	6	"wws"
FIELD	67:30	67:30	7	"wws"
LEAF_NODE	67:30	67:30	8	"wws"
LEAF_NODE	67:35	67:35	6	,
ARGUMENT	67:37	67:37	6	PURPLE_CMD_P_PRPL
FIELD	67:37	67:37	7	PURPLE_CMD_P_PRPL
LEAF_NODE	67:37	67:37	8	PURPLE_CMD_P_PRPL
LEAF_NODE	67:54	67:54	6	,
ARGUMENT	68:3	68:3	6	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	68:3	68:26	7	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	68:3	68:3	8	PURPLE_CMD_FLAG_CHAT
FIELD	68:3	68:3	9	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	68:3	68:3	10	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	68:24	68:24	8	|
BIT_OR_ELEM	68:26	68:26	8	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	68:26	69:3	9	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	68:26	68:26	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	68:26	68:26	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	68:26	68:26	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	68:52	68:52	10	|
BIT_OR_ELEM	69:3	69:3	10	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	69:3	69:3	11	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	69:3	69:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	69:35	69:35	6	,
ARGUMENT	69:37	69:37	6	"prpl-silc"
FIELD	69:37	69:37	7	"prpl-silc"
LEAF_NODE	69:37	69:37	8	"prpl-silc"
LEAF_NODE	69:48	69:48	6	,
ARGUMENT	69:50	69:50	6	silcpurple_cmd_cmode
FIELD	69:50	69:50	7	silcpurple_cmd_cmode
LEAF_NODE	69:50	69:50	8	silcpurple_cmd_cmode
LEAF_NODE	69:70	69:70	6	,
ARGUMENT	70:3	70:3	6	_ ( "cmode &lt;channel&gt; [+|-&lt;modes&gt;] [arguments]:  Change or display channel modes" )
FUNCTION_CALL	70:3	70:93	7	_ ( "cmode &lt;channel&gt; [+|-&lt;modes&gt;] [arguments]:  Change or display channel modes" )
CALLEE	70:3	70:3	8	_
LEAF_NODE	70:3	70:3	9	_
LEAF_NODE	70:4	70:4	8	(
ARGUMENT	70:5	70:5	8	"cmode &lt;channel&gt; [+|-&lt;modes&gt;] [arguments]:  Change or display channel modes"
FIELD	70:5	70:5	9	"cmode &lt;channel&gt; [+|-&lt;modes&gt;] [arguments]:  Change or display channel modes"
LEAF_NODE	70:5	70:5	10	"cmode &lt;channel&gt; [+|-&lt;modes&gt;] [arguments]:  Change or display channel modes"
LEAF_NODE	70:93	70:93	8	)
LEAF_NODE	70:94	70:94	6	,
ARGUMENT	70:96	70:96	6	NULL
FIELD	70:96	70:96	7	NULL
LEAF_NODE	70:96	70:96	8	NULL
LEAF_NODE	70:100	70:100	6	)
LEAF_NODE	70:101	70:101	4	;
EXPR_STATEMENT	71:1	74:100	3	purple_cmd_register ( "cumode" , "wws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "cumode &lt;channel&gt; +|-&lt;modes&gt; &lt;nick&gt;:  Change nick's modes on channel" ) , NULL ) ;
EXPR	71:1	71:1	4	purple_cmd_register ( "cumode" , "wws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "cumode &lt;channel&gt; +|-&lt;modes&gt; &lt;nick&gt;:  Change nick's modes on channel" ) , NULL )
FUNCTION_CALL	71:1	74:99	5	purple_cmd_register ( "cumode" , "wws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "cumode &lt;channel&gt; +|-&lt;modes&gt; &lt;nick&gt;:  Change nick's modes on channel" ) , NULL )
CALLEE	71:1	71:1	6	purple_cmd_register
LEAF_NODE	71:1	71:1	7	purple_cmd_register
LEAF_NODE	71:20	71:20	6	(
ARGUMENT	71:21	71:21	6	"cumode"
FIELD	71:21	71:21	7	"cumode"
LEAF_NODE	71:21	71:21	8	"cumode"
LEAF_NODE	71:29	71:29	6	,
ARGUMENT	71:31	71:31	6	"wws"
FIELD	71:31	71:31	7	"wws"
LEAF_NODE	71:31	71:31	8	"wws"
LEAF_NODE	71:36	71:36	6	,
ARGUMENT	71:38	71:38	6	PURPLE_CMD_P_PRPL
FIELD	71:38	71:38	7	PURPLE_CMD_P_PRPL
LEAF_NODE	71:38	71:38	8	PURPLE_CMD_P_PRPL
LEAF_NODE	71:55	71:55	6	,
ARGUMENT	72:3	72:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	72:3	72:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	72:3	72:3	8	PURPLE_CMD_FLAG_IM
FIELD	72:3	72:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	72:3	72:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	72:22	72:22	8	|
BIT_OR_ELEM	72:24	72:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	72:24	72:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	72:24	72:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	72:24	72:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	72:24	72:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	72:45	72:45	10	|
BIT_OR_ELEM	72:47	72:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	72:47	73:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	72:47	72:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	72:47	72:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	72:47	72:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	72:73	72:73	12	|
BIT_OR_ELEM	73:3	73:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	73:3	73:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	73:3	73:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	73:35	73:35	6	,
ARGUMENT	73:37	73:37	6	"prpl-silc"
FIELD	73:37	73:37	7	"prpl-silc"
LEAF_NODE	73:37	73:37	8	"prpl-silc"
LEAF_NODE	73:48	73:48	6	,
ARGUMENT	73:50	73:50	6	silcpurple_cmd_generic
FIELD	73:50	73:50	7	silcpurple_cmd_generic
LEAF_NODE	73:50	73:50	8	silcpurple_cmd_generic
LEAF_NODE	73:72	73:72	6	,
ARGUMENT	74:3	74:3	6	_ ( "cumode &lt;channel&gt; +|-&lt;modes&gt; &lt;nick&gt;:  Change nick's modes on channel" )
FUNCTION_CALL	74:3	74:92	7	_ ( "cumode &lt;channel&gt; +|-&lt;modes&gt; &lt;nick&gt;:  Change nick's modes on channel" )
CALLEE	74:3	74:3	8	_
LEAF_NODE	74:3	74:3	9	_
LEAF_NODE	74:4	74:4	8	(
ARGUMENT	74:5	74:5	8	"cumode &lt;channel&gt; +|-&lt;modes&gt; &lt;nick&gt;:  Change nick's modes on channel"
FIELD	74:5	74:5	9	"cumode &lt;channel&gt; +|-&lt;modes&gt; &lt;nick&gt;:  Change nick's modes on channel"
LEAF_NODE	74:5	74:5	10	"cumode &lt;channel&gt; +|-&lt;modes&gt; &lt;nick&gt;:  Change nick's modes on channel"
LEAF_NODE	74:92	74:92	8	)
LEAF_NODE	74:93	74:93	6	,
ARGUMENT	74:95	74:95	6	NULL
FIELD	74:95	74:95	7	NULL
LEAF_NODE	74:95	74:95	8	NULL
LEAF_NODE	74:99	74:99	6	)
LEAF_NODE	74:100	74:100	4	;
EXPR_STATEMENT	75:1	78:70	3	purple_cmd_register ( "umode" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "umode &lt;usermodes&gt;:  Set your modes in the network" ) , NULL ) ;
EXPR	75:1	75:1	4	purple_cmd_register ( "umode" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "umode &lt;usermodes&gt;:  Set your modes in the network" ) , NULL )
FUNCTION_CALL	75:1	78:69	5	purple_cmd_register ( "umode" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "umode &lt;usermodes&gt;:  Set your modes in the network" ) , NULL )
CALLEE	75:1	75:1	6	purple_cmd_register
LEAF_NODE	75:1	75:1	7	purple_cmd_register
LEAF_NODE	75:20	75:20	6	(
ARGUMENT	75:21	75:21	6	"umode"
FIELD	75:21	75:21	7	"umode"
LEAF_NODE	75:21	75:21	8	"umode"
LEAF_NODE	75:28	75:28	6	,
ARGUMENT	75:30	75:30	6	"w"
FIELD	75:30	75:30	7	"w"
LEAF_NODE	75:30	75:30	8	"w"
LEAF_NODE	75:33	75:33	6	,
ARGUMENT	75:35	75:35	6	PURPLE_CMD_P_PRPL
FIELD	75:35	75:35	7	PURPLE_CMD_P_PRPL
LEAF_NODE	75:35	75:35	8	PURPLE_CMD_P_PRPL
LEAF_NODE	75:52	75:52	6	,
ARGUMENT	76:3	76:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	76:3	76:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	76:3	76:3	8	PURPLE_CMD_FLAG_IM
FIELD	76:3	76:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	76:3	76:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	76:22	76:22	8	|
BIT_OR_ELEM	76:24	76:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	76:24	76:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	76:24	76:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	76:24	76:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	76:24	76:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	76:45	76:45	10	|
BIT_OR_ELEM	76:47	76:47	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	76:47	76:47	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	76:47	76:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	76:72	76:72	6	,
ARGUMENT	77:3	77:3	6	"prpl-silc"
FIELD	77:3	77:3	7	"prpl-silc"
LEAF_NODE	77:3	77:3	8	"prpl-silc"
LEAF_NODE	77:14	77:14	6	,
ARGUMENT	77:16	77:16	6	silcpurple_cmd_generic
FIELD	77:16	77:16	7	silcpurple_cmd_generic
LEAF_NODE	77:16	77:16	8	silcpurple_cmd_generic
LEAF_NODE	77:38	77:38	6	,
ARGUMENT	78:3	78:3	6	_ ( "umode &lt;usermodes&gt;:  Set your modes in the network" )
FUNCTION_CALL	78:3	78:62	7	_ ( "umode &lt;usermodes&gt;:  Set your modes in the network" )
CALLEE	78:3	78:3	8	_
LEAF_NODE	78:3	78:3	9	_
LEAF_NODE	78:4	78:4	8	(
ARGUMENT	78:5	78:5	8	"umode &lt;usermodes&gt;:  Set your modes in the network"
FIELD	78:5	78:5	9	"umode &lt;usermodes&gt;:  Set your modes in the network"
LEAF_NODE	78:5	78:5	10	"umode &lt;usermodes&gt;:  Set your modes in the network"
LEAF_NODE	78:62	78:62	8	)
LEAF_NODE	78:63	78:63	6	,
ARGUMENT	78:65	78:65	6	NULL
FIELD	78:65	78:65	7	NULL
LEAF_NODE	78:65	78:65	8	NULL
LEAF_NODE	78:69	78:69	6	)
LEAF_NODE	78:70	78:70	4	;
EXPR_STATEMENT	79:1	82:75	3	purple_cmd_register ( "oper" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "oper &lt;nick&gt; [-pubkey]:  Get server operator privileges" ) , NULL ) ;
EXPR	79:1	79:1	4	purple_cmd_register ( "oper" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "oper &lt;nick&gt; [-pubkey]:  Get server operator privileges" ) , NULL )
FUNCTION_CALL	79:1	82:74	5	purple_cmd_register ( "oper" , "s" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "oper &lt;nick&gt; [-pubkey]:  Get server operator privileges" ) , NULL )
CALLEE	79:1	79:1	6	purple_cmd_register
LEAF_NODE	79:1	79:1	7	purple_cmd_register
LEAF_NODE	79:20	79:20	6	(
ARGUMENT	79:21	79:21	6	"oper"
FIELD	79:21	79:21	7	"oper"
LEAF_NODE	79:21	79:21	8	"oper"
LEAF_NODE	79:27	79:27	6	,
ARGUMENT	79:29	79:29	6	"s"
FIELD	79:29	79:29	7	"s"
LEAF_NODE	79:29	79:29	8	"s"
LEAF_NODE	79:32	79:32	6	,
ARGUMENT	79:34	79:34	6	PURPLE_CMD_P_PRPL
FIELD	79:34	79:34	7	PURPLE_CMD_P_PRPL
LEAF_NODE	79:34	79:34	8	PURPLE_CMD_P_PRPL
LEAF_NODE	79:51	79:51	6	,
ARGUMENT	80:3	80:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	80:3	80:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	80:3	80:3	8	PURPLE_CMD_FLAG_IM
FIELD	80:3	80:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	80:3	80:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	80:22	80:22	8	|
BIT_OR_ELEM	80:24	80:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	80:24	80:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	80:24	80:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	80:24	80:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	80:24	80:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	80:45	80:45	10	|
BIT_OR_ELEM	80:47	80:47	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	80:47	80:47	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	80:47	80:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	80:72	80:72	6	,
ARGUMENT	81:3	81:3	6	"prpl-silc"
FIELD	81:3	81:3	7	"prpl-silc"
LEAF_NODE	81:3	81:3	8	"prpl-silc"
LEAF_NODE	81:14	81:14	6	,
ARGUMENT	81:16	81:16	6	silcpurple_cmd_generic
FIELD	81:16	81:16	7	silcpurple_cmd_generic
LEAF_NODE	81:16	81:16	8	silcpurple_cmd_generic
LEAF_NODE	81:38	81:38	6	,
ARGUMENT	82:3	82:3	6	_ ( "oper &lt;nick&gt; [-pubkey]:  Get server operator privileges" )
FUNCTION_CALL	82:3	82:67	7	_ ( "oper &lt;nick&gt; [-pubkey]:  Get server operator privileges" )
CALLEE	82:3	82:3	8	_
LEAF_NODE	82:3	82:3	9	_
LEAF_NODE	82:4	82:4	8	(
ARGUMENT	82:5	82:5	8	"oper &lt;nick&gt; [-pubkey]:  Get server operator privileges"
FIELD	82:5	82:5	9	"oper &lt;nick&gt; [-pubkey]:  Get server operator privileges"
LEAF_NODE	82:5	82:5	10	"oper &lt;nick&gt; [-pubkey]:  Get server operator privileges"
LEAF_NODE	82:67	82:67	8	)
LEAF_NODE	82:68	82:68	6	,
ARGUMENT	82:70	82:70	6	NULL
FIELD	82:70	82:70	7	NULL
LEAF_NODE	82:70	82:70	8	NULL
LEAF_NODE	82:74	82:74	6	)
LEAF_NODE	82:75	82:75	4	;
EXPR_STATEMENT	83:1	86:108	3	purple_cmd_register ( "invite" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "invite &lt;channel&gt; [-|+]&lt;nick&gt;:  invite nick or add/remove from channel invite list" ) , NULL ) ;
EXPR	83:1	83:1	4	purple_cmd_register ( "invite" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "invite &lt;channel&gt; [-|+]&lt;nick&gt;:  invite nick or add/remove from channel invite list" ) , NULL )
FUNCTION_CALL	83:1	86:107	5	purple_cmd_register ( "invite" , "ws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "invite &lt;channel&gt; [-|+]&lt;nick&gt;:  invite nick or add/remove from channel invite list" ) , NULL )
CALLEE	83:1	83:1	6	purple_cmd_register
LEAF_NODE	83:1	83:1	7	purple_cmd_register
LEAF_NODE	83:20	83:20	6	(
ARGUMENT	83:21	83:21	6	"invite"
FIELD	83:21	83:21	7	"invite"
LEAF_NODE	83:21	83:21	8	"invite"
LEAF_NODE	83:29	83:29	6	,
ARGUMENT	83:31	83:31	6	"ws"
FIELD	83:31	83:31	7	"ws"
LEAF_NODE	83:31	83:31	8	"ws"
LEAF_NODE	83:35	83:35	6	,
ARGUMENT	83:37	83:37	6	PURPLE_CMD_P_PRPL
FIELD	83:37	83:37	7	PURPLE_CMD_P_PRPL
LEAF_NODE	83:37	83:37	8	PURPLE_CMD_P_PRPL
LEAF_NODE	83:54	83:54	6	,
ARGUMENT	84:3	84:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	84:3	84:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	84:3	84:3	8	PURPLE_CMD_FLAG_IM
FIELD	84:3	84:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	84:3	84:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	84:22	84:22	8	|
BIT_OR_ELEM	84:24	84:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	84:24	84:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	84:24	84:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	84:24	84:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	84:24	84:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	84:45	84:45	10	|
BIT_OR_ELEM	84:47	84:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	84:47	85:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	84:47	84:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	84:47	84:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	84:47	84:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	84:73	84:73	12	|
BIT_OR_ELEM	85:3	85:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	85:3	85:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	85:3	85:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	85:35	85:35	6	,
ARGUMENT	85:37	85:37	6	"prpl-silc"
FIELD	85:37	85:37	7	"prpl-silc"
LEAF_NODE	85:37	85:37	8	"prpl-silc"
LEAF_NODE	85:48	85:48	6	,
ARGUMENT	85:50	85:50	6	silcpurple_cmd_generic
FIELD	85:50	85:50	7	silcpurple_cmd_generic
LEAF_NODE	85:50	85:50	8	silcpurple_cmd_generic
LEAF_NODE	85:72	85:72	6	,
ARGUMENT	86:3	86:3	6	_ ( "invite &lt;channel&gt; [-|+]&lt;nick&gt;:  invite nick or add/remove from channel invite list" )
FUNCTION_CALL	86:3	86:100	7	_ ( "invite &lt;channel&gt; [-|+]&lt;nick&gt;:  invite nick or add/remove from channel invite list" )
CALLEE	86:3	86:3	8	_
LEAF_NODE	86:3	86:3	9	_
LEAF_NODE	86:4	86:4	8	(
ARGUMENT	86:5	86:5	8	"invite &lt;channel&gt; [-|+]&lt;nick&gt;:  invite nick or add/remove from channel invite list"
FIELD	86:5	86:5	9	"invite &lt;channel&gt; [-|+]&lt;nick&gt;:  invite nick or add/remove from channel invite list"
LEAF_NODE	86:5	86:5	10	"invite &lt;channel&gt; [-|+]&lt;nick&gt;:  invite nick or add/remove from channel invite list"
LEAF_NODE	86:100	86:100	8	)
LEAF_NODE	86:101	86:101	6	,
ARGUMENT	86:103	86:103	6	NULL
FIELD	86:103	86:103	7	NULL
LEAF_NODE	86:103	86:103	8	NULL
LEAF_NODE	86:107	86:107	6	)
LEAF_NODE	86:108	86:108	4	;
EXPR_STATEMENT	87:1	90:85	3	purple_cmd_register ( "kick" , "wws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "kick &lt;channel&gt; &lt;nick&gt; [comment]:  Kick client from channel" ) , NULL ) ;
EXPR	87:1	87:1	4	purple_cmd_register ( "kick" , "wws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "kick &lt;channel&gt; &lt;nick&gt; [comment]:  Kick client from channel" ) , NULL )
FUNCTION_CALL	87:1	90:84	5	purple_cmd_register ( "kick" , "wws" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "kick &lt;channel&gt; &lt;nick&gt; [comment]:  Kick client from channel" ) , NULL )
CALLEE	87:1	87:1	6	purple_cmd_register
LEAF_NODE	87:1	87:1	7	purple_cmd_register
LEAF_NODE	87:20	87:20	6	(
ARGUMENT	87:21	87:21	6	"kick"
FIELD	87:21	87:21	7	"kick"
LEAF_NODE	87:21	87:21	8	"kick"
LEAF_NODE	87:27	87:27	6	,
ARGUMENT	87:29	87:29	6	"wws"
FIELD	87:29	87:29	7	"wws"
LEAF_NODE	87:29	87:29	8	"wws"
LEAF_NODE	87:34	87:34	6	,
ARGUMENT	87:36	87:36	6	PURPLE_CMD_P_PRPL
FIELD	87:36	87:36	7	PURPLE_CMD_P_PRPL
LEAF_NODE	87:36	87:36	8	PURPLE_CMD_P_PRPL
LEAF_NODE	87:53	87:53	6	,
ARGUMENT	88:3	88:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	88:3	88:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	88:3	88:3	8	PURPLE_CMD_FLAG_IM
FIELD	88:3	88:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	88:3	88:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	88:22	88:22	8	|
BIT_OR_ELEM	88:24	88:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	88:24	88:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	88:24	88:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	88:24	88:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	88:24	88:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	88:45	88:45	10	|
BIT_OR_ELEM	88:47	88:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	88:47	89:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	88:47	88:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	88:47	88:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	88:47	88:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	88:73	88:73	12	|
BIT_OR_ELEM	89:3	89:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	89:3	89:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	89:3	89:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	89:35	89:35	6	,
ARGUMENT	89:37	89:37	6	"prpl-silc"
FIELD	89:37	89:37	7	"prpl-silc"
LEAF_NODE	89:37	89:37	8	"prpl-silc"
LEAF_NODE	89:48	89:48	6	,
ARGUMENT	89:50	89:50	6	silcpurple_cmd_generic
FIELD	89:50	89:50	7	silcpurple_cmd_generic
LEAF_NODE	89:50	89:50	8	silcpurple_cmd_generic
LEAF_NODE	89:72	89:72	6	,
ARGUMENT	90:3	90:3	6	_ ( "kick &lt;channel&gt; &lt;nick&gt; [comment]:  Kick client from channel" )
FUNCTION_CALL	90:3	90:77	7	_ ( "kick &lt;channel&gt; &lt;nick&gt; [comment]:  Kick client from channel" )
CALLEE	90:3	90:3	8	_
LEAF_NODE	90:3	90:3	9	_
LEAF_NODE	90:4	90:4	8	(
ARGUMENT	90:5	90:5	8	"kick &lt;channel&gt; &lt;nick&gt; [comment]:  Kick client from channel"
FIELD	90:5	90:5	9	"kick &lt;channel&gt; &lt;nick&gt; [comment]:  Kick client from channel"
LEAF_NODE	90:5	90:5	10	"kick &lt;channel&gt; &lt;nick&gt; [comment]:  Kick client from channel"
LEAF_NODE	90:77	90:77	8	)
LEAF_NODE	90:78	90:78	6	,
ARGUMENT	90:80	90:80	6	NULL
FIELD	90:80	90:80	7	NULL
LEAF_NODE	90:80	90:80	8	NULL
LEAF_NODE	90:84	90:84	6	)
LEAF_NODE	90:85	90:85	4	;
EXPR_STATEMENT	91:1	94:65	3	purple_cmd_register ( "info" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "info [server]:  View server administrative details" ) , NULL ) ;
EXPR	91:1	91:1	4	purple_cmd_register ( "info" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "info [server]:  View server administrative details" ) , NULL )
FUNCTION_CALL	91:1	94:64	5	purple_cmd_register ( "info" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "info [server]:  View server administrative details" ) , NULL )
CALLEE	91:1	91:1	6	purple_cmd_register
LEAF_NODE	91:1	91:1	7	purple_cmd_register
LEAF_NODE	91:20	91:20	6	(
ARGUMENT	91:21	91:21	6	"info"
FIELD	91:21	91:21	7	"info"
LEAF_NODE	91:21	91:21	8	"info"
LEAF_NODE	91:27	91:27	6	,
ARGUMENT	91:29	91:29	6	"w"
FIELD	91:29	91:29	7	"w"
LEAF_NODE	91:29	91:29	8	"w"
LEAF_NODE	91:32	91:32	6	,
ARGUMENT	91:34	91:34	6	PURPLE_CMD_P_PRPL
FIELD	91:34	91:34	7	PURPLE_CMD_P_PRPL
LEAF_NODE	91:34	91:34	8	PURPLE_CMD_P_PRPL
LEAF_NODE	91:51	91:51	6	,
ARGUMENT	92:3	92:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	92:3	92:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	92:3	92:3	8	PURPLE_CMD_FLAG_IM
FIELD	92:3	92:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	92:3	92:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	92:22	92:22	8	|
BIT_OR_ELEM	92:24	92:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	92:24	92:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	92:24	92:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	92:24	92:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	92:24	92:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	92:45	92:45	10	|
BIT_OR_ELEM	92:47	92:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	92:47	93:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	92:47	92:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	92:47	92:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	92:47	92:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	92:73	92:73	12	|
BIT_OR_ELEM	93:3	93:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	93:3	93:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	93:3	93:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	93:35	93:35	6	,
ARGUMENT	93:37	93:37	6	"prpl-silc"
FIELD	93:37	93:37	7	"prpl-silc"
LEAF_NODE	93:37	93:37	8	"prpl-silc"
LEAF_NODE	93:48	93:48	6	,
ARGUMENT	93:50	93:50	6	silcpurple_cmd_generic
FIELD	93:50	93:50	7	silcpurple_cmd_generic
LEAF_NODE	93:50	93:50	8	silcpurple_cmd_generic
LEAF_NODE	93:72	93:72	6	,
ARGUMENT	94:3	94:3	6	_ ( "info [server]:  View server administrative details" )
FUNCTION_CALL	94:3	94:57	7	_ ( "info [server]:  View server administrative details" )
CALLEE	94:3	94:3	8	_
LEAF_NODE	94:3	94:3	9	_
LEAF_NODE	94:4	94:4	8	(
ARGUMENT	94:5	94:5	8	"info [server]:  View server administrative details"
FIELD	94:5	94:5	9	"info [server]:  View server administrative details"
LEAF_NODE	94:5	94:5	10	"info [server]:  View server administrative details"
LEAF_NODE	94:57	94:57	8	)
LEAF_NODE	94:58	94:58	6	,
ARGUMENT	94:60	94:60	6	NULL
FIELD	94:60	94:60	7	NULL
LEAF_NODE	94:60	94:60	8	NULL
LEAF_NODE	94:64	94:64	6	)
LEAF_NODE	94:65	94:65	4	;
EXPR_STATEMENT	95:1	98:78	3	purple_cmd_register ( "ban" , "ww" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "ban [&lt;channel&gt; +|-&lt;nick&gt;]:  Ban client from channel" ) , NULL ) ;
EXPR	95:1	95:1	4	purple_cmd_register ( "ban" , "ww" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "ban [&lt;channel&gt; +|-&lt;nick&gt;]:  Ban client from channel" ) , NULL )
FUNCTION_CALL	95:1	98:77	5	purple_cmd_register ( "ban" , "ww" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_generic , _ ( "ban [&lt;channel&gt; +|-&lt;nick&gt;]:  Ban client from channel" ) , NULL )
CALLEE	95:1	95:1	6	purple_cmd_register
LEAF_NODE	95:1	95:1	7	purple_cmd_register
LEAF_NODE	95:20	95:20	6	(
ARGUMENT	95:21	95:21	6	"ban"
FIELD	95:21	95:21	7	"ban"
LEAF_NODE	95:21	95:21	8	"ban"
LEAF_NODE	95:26	95:26	6	,
ARGUMENT	95:28	95:28	6	"ww"
FIELD	95:28	95:28	7	"ww"
LEAF_NODE	95:28	95:28	8	"ww"
LEAF_NODE	95:32	95:32	6	,
ARGUMENT	95:34	95:34	6	PURPLE_CMD_P_PRPL
FIELD	95:34	95:34	7	PURPLE_CMD_P_PRPL
LEAF_NODE	95:34	95:34	8	PURPLE_CMD_P_PRPL
LEAF_NODE	95:51	95:51	6	,
ARGUMENT	96:3	96:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	96:3	96:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	96:3	96:3	8	PURPLE_CMD_FLAG_IM
FIELD	96:3	96:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	96:3	96:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	96:22	96:22	8	|
BIT_OR_ELEM	96:24	96:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	96:24	96:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	96:24	96:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	96:24	96:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	96:24	96:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	96:45	96:45	10	|
BIT_OR_ELEM	96:47	96:47	10	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	96:47	97:3	11	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	96:47	96:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	96:47	96:47	13	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	96:47	96:47	14	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	96:73	96:73	12	|
BIT_OR_ELEM	97:3	97:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	97:3	97:3	13	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	97:3	97:3	14	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	97:35	97:35	6	,
ARGUMENT	97:37	97:37	6	"prpl-silc"
FIELD	97:37	97:37	7	"prpl-silc"
LEAF_NODE	97:37	97:37	8	"prpl-silc"
LEAF_NODE	97:48	97:48	6	,
ARGUMENT	97:50	97:50	6	silcpurple_cmd_generic
FIELD	97:50	97:50	7	silcpurple_cmd_generic
LEAF_NODE	97:50	97:50	8	silcpurple_cmd_generic
LEAF_NODE	97:72	97:72	6	,
ARGUMENT	98:3	98:3	6	_ ( "ban [&lt;channel&gt; +|-&lt;nick&gt;]:  Ban client from channel" )
FUNCTION_CALL	98:3	98:70	7	_ ( "ban [&lt;channel&gt; +|-&lt;nick&gt;]:  Ban client from channel" )
CALLEE	98:3	98:3	8	_
LEAF_NODE	98:3	98:3	9	_
LEAF_NODE	98:4	98:4	8	(
ARGUMENT	98:5	98:5	8	"ban [&lt;channel&gt; +|-&lt;nick&gt;]:  Ban client from channel"
FIELD	98:5	98:5	9	"ban [&lt;channel&gt; +|-&lt;nick&gt;]:  Ban client from channel"
LEAF_NODE	98:5	98:5	10	"ban [&lt;channel&gt; +|-&lt;nick&gt;]:  Ban client from channel"
LEAF_NODE	98:70	98:70	8	)
LEAF_NODE	98:71	98:71	6	,
ARGUMENT	98:73	98:73	6	NULL
FIELD	98:73	98:73	7	NULL
LEAF_NODE	98:73	98:73	8	NULL
LEAF_NODE	98:77	98:77	6	)
LEAF_NODE	98:78	98:78	4	;
EXPR_STATEMENT	99:1	102:84	3	purple_cmd_register ( "getkey" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "getkey &lt;nick|server&gt;:  Retrieve client's or server's public key" ) , NULL ) ;
EXPR	99:1	99:1	4	purple_cmd_register ( "getkey" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "getkey &lt;nick|server&gt;:  Retrieve client's or server's public key" ) , NULL )
FUNCTION_CALL	99:1	102:83	5	purple_cmd_register ( "getkey" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "getkey &lt;nick|server&gt;:  Retrieve client's or server's public key" ) , NULL )
CALLEE	99:1	99:1	6	purple_cmd_register
LEAF_NODE	99:1	99:1	7	purple_cmd_register
LEAF_NODE	99:20	99:20	6	(
ARGUMENT	99:21	99:21	6	"getkey"
FIELD	99:21	99:21	7	"getkey"
LEAF_NODE	99:21	99:21	8	"getkey"
LEAF_NODE	99:29	99:29	6	,
ARGUMENT	99:31	99:31	6	"w"
FIELD	99:31	99:31	7	"w"
LEAF_NODE	99:31	99:31	8	"w"
LEAF_NODE	99:34	99:34	6	,
ARGUMENT	99:36	99:36	6	PURPLE_CMD_P_PRPL
FIELD	99:36	99:36	7	PURPLE_CMD_P_PRPL
LEAF_NODE	99:36	99:36	8	PURPLE_CMD_P_PRPL
LEAF_NODE	99:53	99:53	6	,
ARGUMENT	100:3	100:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	100:3	100:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	100:3	100:3	8	PURPLE_CMD_FLAG_IM
FIELD	100:3	100:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	100:3	100:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	100:22	100:22	8	|
BIT_OR_ELEM	100:24	100:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	100:24	100:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	100:24	100:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	100:24	100:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	100:24	100:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	100:45	100:45	10	|
BIT_OR_ELEM	100:47	100:47	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	100:47	100:47	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	100:47	100:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	100:72	100:72	6	,
ARGUMENT	101:3	101:3	6	"prpl-silc"
FIELD	101:3	101:3	7	"prpl-silc"
LEAF_NODE	101:3	101:3	8	"prpl-silc"
LEAF_NODE	101:14	101:14	6	,
ARGUMENT	101:16	101:16	6	silcpurple_cmd_generic
FIELD	101:16	101:16	7	silcpurple_cmd_generic
LEAF_NODE	101:16	101:16	8	silcpurple_cmd_generic
LEAF_NODE	101:38	101:38	6	,
ARGUMENT	102:3	102:3	6	_ ( "getkey &lt;nick|server&gt;:  Retrieve client's or server's public key" )
FUNCTION_CALL	102:3	102:76	7	_ ( "getkey &lt;nick|server&gt;:  Retrieve client's or server's public key" )
CALLEE	102:3	102:3	8	_
LEAF_NODE	102:3	102:3	9	_
LEAF_NODE	102:4	102:4	8	(
ARGUMENT	102:5	102:5	8	"getkey &lt;nick|server&gt;:  Retrieve client's or server's public key"
FIELD	102:5	102:5	9	"getkey &lt;nick|server&gt;:  Retrieve client's or server's public key"
LEAF_NODE	102:5	102:5	10	"getkey &lt;nick|server&gt;:  Retrieve client's or server's public key"
LEAF_NODE	102:76	102:76	8	)
LEAF_NODE	102:77	102:77	6	,
ARGUMENT	102:79	102:79	6	NULL
FIELD	102:79	102:79	7	NULL
LEAF_NODE	102:79	102:79	8	NULL
LEAF_NODE	102:83	102:83	6	)
LEAF_NODE	102:84	102:84	4	;
EXPR_STATEMENT	103:1	106:57	3	purple_cmd_register ( "stats" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "stats:  View server and network statistics" ) , NULL ) ;
EXPR	103:1	103:1	4	purple_cmd_register ( "stats" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "stats:  View server and network statistics" ) , NULL )
FUNCTION_CALL	103:1	106:56	5	purple_cmd_register ( "stats" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "stats:  View server and network statistics" ) , NULL )
CALLEE	103:1	103:1	6	purple_cmd_register
LEAF_NODE	103:1	103:1	7	purple_cmd_register
LEAF_NODE	103:20	103:20	6	(
ARGUMENT	103:21	103:21	6	"stats"
FIELD	103:21	103:21	7	"stats"
LEAF_NODE	103:21	103:21	8	"stats"
LEAF_NODE	103:28	103:28	6	,
ARGUMENT	103:30	103:30	6	""
FIELD	103:30	103:30	7	""
LEAF_NODE	103:30	103:30	8	""
LEAF_NODE	103:32	103:32	6	,
ARGUMENT	103:34	103:34	6	PURPLE_CMD_P_PRPL
FIELD	103:34	103:34	7	PURPLE_CMD_P_PRPL
LEAF_NODE	103:34	103:34	8	PURPLE_CMD_P_PRPL
LEAF_NODE	103:51	103:51	6	,
ARGUMENT	104:3	104:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	104:3	104:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	104:3	104:3	8	PURPLE_CMD_FLAG_IM
FIELD	104:3	104:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	104:3	104:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	104:22	104:22	8	|
BIT_OR_ELEM	104:24	104:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	104:24	104:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	104:24	104:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	104:24	104:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	104:24	104:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	104:45	104:45	10	|
BIT_OR_ELEM	104:47	104:47	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	104:47	104:47	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	104:47	104:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	104:72	104:72	6	,
ARGUMENT	105:3	105:3	6	"prpl-silc"
FIELD	105:3	105:3	7	"prpl-silc"
LEAF_NODE	105:3	105:3	8	"prpl-silc"
LEAF_NODE	105:14	105:14	6	,
ARGUMENT	105:16	105:16	6	silcpurple_cmd_generic
FIELD	105:16	105:16	7	silcpurple_cmd_generic
LEAF_NODE	105:16	105:16	8	silcpurple_cmd_generic
LEAF_NODE	105:38	105:38	6	,
ARGUMENT	106:3	106:3	6	_ ( "stats:  View server and network statistics" )
FUNCTION_CALL	106:3	106:49	7	_ ( "stats:  View server and network statistics" )
CALLEE	106:3	106:3	8	_
LEAF_NODE	106:3	106:3	9	_
LEAF_NODE	106:4	106:4	8	(
ARGUMENT	106:5	106:5	8	"stats:  View server and network statistics"
FIELD	106:5	106:5	9	"stats:  View server and network statistics"
LEAF_NODE	106:5	106:5	10	"stats:  View server and network statistics"
LEAF_NODE	106:49	106:49	8	)
LEAF_NODE	106:50	106:50	6	,
ARGUMENT	106:52	106:52	6	NULL
FIELD	106:52	106:52	7	NULL
LEAF_NODE	106:52	106:52	8	NULL
LEAF_NODE	106:56	106:56	6	)
LEAF_NODE	106:57	106:57	4	;
EXPR_STATEMENT	107:1	110:55	3	purple_cmd_register ( "ping" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "ping:  Send PING to the connected server" ) , NULL ) ;
EXPR	107:1	107:1	4	purple_cmd_register ( "ping" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "ping:  Send PING to the connected server" ) , NULL )
FUNCTION_CALL	107:1	110:54	5	purple_cmd_register ( "ping" , "" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_generic , _ ( "ping:  Send PING to the connected server" ) , NULL )
CALLEE	107:1	107:1	6	purple_cmd_register
LEAF_NODE	107:1	107:1	7	purple_cmd_register
LEAF_NODE	107:20	107:20	6	(
ARGUMENT	107:21	107:21	6	"ping"
FIELD	107:21	107:21	7	"ping"
LEAF_NODE	107:21	107:21	8	"ping"
LEAF_NODE	107:27	107:27	6	,
ARGUMENT	107:29	107:29	6	""
FIELD	107:29	107:29	7	""
LEAF_NODE	107:29	107:29	8	""
LEAF_NODE	107:31	107:31	6	,
ARGUMENT	107:33	107:33	6	PURPLE_CMD_P_PRPL
FIELD	107:33	107:33	7	PURPLE_CMD_P_PRPL
LEAF_NODE	107:33	107:33	8	PURPLE_CMD_P_PRPL
LEAF_NODE	107:50	107:50	6	,
ARGUMENT	108:3	108:3	6	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	108:3	108:24	7	PURPLE_CMD_FLAG_IM | PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	108:3	108:3	8	PURPLE_CMD_FLAG_IM
FIELD	108:3	108:3	9	PURPLE_CMD_FLAG_IM
LEAF_NODE	108:3	108:3	10	PURPLE_CMD_FLAG_IM
LEAF_NODE	108:22	108:22	8	|
BIT_OR_ELEM	108:24	108:24	8	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	108:24	108:47	9	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	108:24	108:24	10	PURPLE_CMD_FLAG_CHAT
FIELD	108:24	108:24	11	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	108:24	108:24	12	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	108:45	108:45	10	|
BIT_OR_ELEM	108:47	108:47	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	108:47	108:47	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	108:47	108:47	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	108:72	108:72	6	,
ARGUMENT	109:3	109:3	6	"prpl-silc"
FIELD	109:3	109:3	7	"prpl-silc"
LEAF_NODE	109:3	109:3	8	"prpl-silc"
LEAF_NODE	109:14	109:14	6	,
ARGUMENT	109:16	109:16	6	silcpurple_cmd_generic
FIELD	109:16	109:16	7	silcpurple_cmd_generic
LEAF_NODE	109:16	109:16	8	silcpurple_cmd_generic
LEAF_NODE	109:38	109:38	6	,
ARGUMENT	110:3	110:3	6	_ ( "ping:  Send PING to the connected server" )
FUNCTION_CALL	110:3	110:47	7	_ ( "ping:  Send PING to the connected server" )
CALLEE	110:3	110:3	8	_
LEAF_NODE	110:3	110:3	9	_
LEAF_NODE	110:4	110:4	8	(
ARGUMENT	110:5	110:5	8	"ping:  Send PING to the connected server"
FIELD	110:5	110:5	9	"ping:  Send PING to the connected server"
LEAF_NODE	110:5	110:5	10	"ping:  Send PING to the connected server"
LEAF_NODE	110:47	110:47	8	)
LEAF_NODE	110:48	110:48	6	,
ARGUMENT	110:50	110:50	6	NULL
FIELD	110:50	110:50	7	NULL
LEAF_NODE	110:50	110:50	8	NULL
LEAF_NODE	110:54	110:54	6	)
LEAF_NODE	110:55	110:55	4	;
EXPR_STATEMENT	112:1	115:54	3	purple_cmd_register ( "users" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_users , _ ( "users &lt;channel&gt;:  List users in channel" ) ) ;
EXPR	112:1	112:1	4	purple_cmd_register ( "users" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_users , _ ( "users &lt;channel&gt;:  List users in channel" ) )
FUNCTION_CALL	112:1	115:53	5	purple_cmd_register ( "users" , "w" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY , "prpl-silc" , silcpurple_cmd_users , _ ( "users &lt;channel&gt;:  List users in channel" ) )
CALLEE	112:1	112:1	6	purple_cmd_register
LEAF_NODE	112:1	112:1	7	purple_cmd_register
LEAF_NODE	112:20	112:20	6	(
ARGUMENT	112:21	112:21	6	"users"
FIELD	112:21	112:21	7	"users"
LEAF_NODE	112:21	112:21	8	"users"
LEAF_NODE	112:28	112:28	6	,
ARGUMENT	112:30	112:30	6	"w"
FIELD	112:30	112:30	7	"w"
LEAF_NODE	112:30	112:30	8	"w"
LEAF_NODE	112:33	112:33	6	,
ARGUMENT	112:35	112:35	6	PURPLE_CMD_P_PRPL
FIELD	112:35	112:35	7	PURPLE_CMD_P_PRPL
LEAF_NODE	112:35	112:35	8	PURPLE_CMD_P_PRPL
LEAF_NODE	112:52	112:52	6	,
ARGUMENT	113:3	113:3	6	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR	113:3	113:26	7	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY
BIT_OR_ELEM	113:3	113:3	8	PURPLE_CMD_FLAG_CHAT
FIELD	113:3	113:3	9	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	113:3	113:3	10	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	113:24	113:24	8	|
BIT_OR_ELEM	113:26	113:26	8	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	113:26	113:26	9	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	113:26	113:26	10	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	113:51	113:51	6	,
ARGUMENT	114:3	114:3	6	"prpl-silc"
FIELD	114:3	114:3	7	"prpl-silc"
LEAF_NODE	114:3	114:3	8	"prpl-silc"
LEAF_NODE	114:14	114:14	6	,
ARGUMENT	114:16	114:16	6	silcpurple_cmd_users
FIELD	114:16	114:16	7	silcpurple_cmd_users
LEAF_NODE	114:16	114:16	8	silcpurple_cmd_users
LEAF_NODE	114:36	114:36	6	,
ARGUMENT	115:3	115:3	6	_ ( "users &lt;channel&gt;:  List users in channel" )
FUNCTION_CALL	115:3	115:52	7	_ ( "users &lt;channel&gt;:  List users in channel" )
CALLEE	115:3	115:3	8	_
LEAF_NODE	115:3	115:3	9	_
LEAF_NODE	115:4	115:4	8	(
ARGUMENT	115:5	115:5	8	"users &lt;channel&gt;:  List users in channel"
FIELD	115:5	115:5	9	"users &lt;channel&gt;:  List users in channel"
LEAF_NODE	115:5	115:5	10	"users &lt;channel&gt;:  List users in channel"
LEAF_NODE	115:52	115:52	8	)
LEAF_NODE	115:53	115:53	6	)
LEAF_NODE	115:54	115:54	4	;
EXPR_STATEMENT	116:1	119:108	3	purple_cmd_register ( "names" , "ww" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_names , _ ( "names [-count|-ops|-halfops|-voices|-normal] &lt;channel(s)&gt;:  List specific users in channel(s)" ) ) ;
EXPR	116:1	116:1	4	purple_cmd_register ( "names" , "ww" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_names , _ ( "names [-count|-ops|-halfops|-voices|-normal] &lt;channel(s)&gt;:  List specific users in channel(s)" ) )
FUNCTION_CALL	116:1	119:107	5	purple_cmd_register ( "names" , "ww" , PURPLE_CMD_P_PRPL , PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS , "prpl-silc" , silcpurple_cmd_names , _ ( "names [-count|-ops|-halfops|-voices|-normal] &lt;channel(s)&gt;:  List specific users in channel(s)" ) )
CALLEE	116:1	116:1	6	purple_cmd_register
LEAF_NODE	116:1	116:1	7	purple_cmd_register
LEAF_NODE	116:20	116:20	6	(
ARGUMENT	116:21	116:21	6	"names"
FIELD	116:21	116:21	7	"names"
LEAF_NODE	116:21	116:21	8	"names"
LEAF_NODE	116:28	116:28	6	,
ARGUMENT	116:30	116:30	6	"ww"
FIELD	116:30	116:30	7	"ww"
LEAF_NODE	116:30	116:30	8	"ww"
LEAF_NODE	116:34	116:34	6	,
ARGUMENT	116:36	116:36	6	PURPLE_CMD_P_PRPL
FIELD	116:36	116:36	7	PURPLE_CMD_P_PRPL
LEAF_NODE	116:36	116:36	8	PURPLE_CMD_P_PRPL
LEAF_NODE	116:53	116:53	6	,
ARGUMENT	117:3	117:3	6	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	117:3	117:26	7	PURPLE_CMD_FLAG_CHAT | PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	117:3	117:3	8	PURPLE_CMD_FLAG_CHAT
FIELD	117:3	117:3	9	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	117:3	117:3	10	PURPLE_CMD_FLAG_CHAT
LEAF_NODE	117:24	117:24	8	|
BIT_OR_ELEM	117:26	117:26	8	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR	117:26	118:3	9	PURPLE_CMD_FLAG_PRPL_ONLY | PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
BIT_OR_ELEM	117:26	117:26	10	PURPLE_CMD_FLAG_PRPL_ONLY
FIELD	117:26	117:26	11	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	117:26	117:26	12	PURPLE_CMD_FLAG_PRPL_ONLY
LEAF_NODE	117:52	117:52	10	|
BIT_OR_ELEM	118:3	118:3	10	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
FIELD	118:3	118:3	11	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	118:3	118:3	12	PURPLE_CMD_FLAG_ALLOW_WRONG_ARGS
LEAF_NODE	118:35	118:35	6	,
ARGUMENT	118:37	118:37	6	"prpl-silc"
FIELD	118:37	118:37	7	"prpl-silc"
LEAF_NODE	118:37	118:37	8	"prpl-silc"
LEAF_NODE	118:48	118:48	6	,
ARGUMENT	118:50	118:50	6	silcpurple_cmd_names
FIELD	118:50	118:50	7	silcpurple_cmd_names
LEAF_NODE	118:50	118:50	8	silcpurple_cmd_names
LEAF_NODE	118:70	118:70	6	,
ARGUMENT	119:3	119:3	6	_ ( "names [-count|-ops|-halfops|-voices|-normal] &lt;channel(s)&gt;:  List specific users in channel(s)" )
FUNCTION_CALL	119:3	119:106	7	_ ( "names [-count|-ops|-halfops|-voices|-normal] &lt;channel(s)&gt;:  List specific users in channel(s)" )
CALLEE	119:3	119:3	8	_
LEAF_NODE	119:3	119:3	9	_
LEAF_NODE	119:4	119:4	8	(
ARGUMENT	119:5	119:5	8	"names [-count|-ops|-halfops|-voices|-normal] &lt;channel(s)&gt;:  List specific users in channel(s)"
FIELD	119:5	119:5	9	"names [-count|-ops|-halfops|-voices|-normal] &lt;channel(s)&gt;:  List specific users in channel(s)"
LEAF_NODE	119:5	119:5	10	"names [-count|-ops|-halfops|-voices|-normal] &lt;channel(s)&gt;:  List specific users in channel(s)"
LEAF_NODE	119:106	119:106	8	)
LEAF_NODE	119:107	119:107	6	)
LEAF_NODE	119:108	119:108	4	;
LEAF_NODE	121:0	121:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	11:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	free_presence_txt_records
LEAF_NODE	2:12	2:12	3	free_presence_txt_records
PARAMETER_LIST	2:37	2:49	2	( GSList * lst )
LEAF_NODE	2:37	2:37	3	(
PARAMETER_DECL	2:38	2:46	3	GSList * lst
TYPE	2:38	2:45	4	GSList *
TYPE_NAME	2:38	2:38	5	GSList
LEAF_NODE	2:38	2:38	6	GSList
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	lst
LEAF_NODE	2:46	2:46	5	lst
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	2:51	2:51	2	{
STATEMENTS	3:1	4:1	2	
SIMPLE_DECL	3:1	3:24	3	PurpleKeyValuePair * kvp ;
VAR_DECL	3:1	3:21	4	PurpleKeyValuePair * kvp
TYPE	3:1	3:20	5	PurpleKeyValuePair *
TYPE_NAME	3:1	3:1	6	PurpleKeyValuePair
LEAF_NODE	3:1	3:1	7	PurpleKeyValuePair
POINTER	3:20	3:20	6	*
LEAF_NODE	3:20	3:20	7	*
NAME	3:21	3:21	5	kvp
LEAF_NODE	3:21	3:21	6	kvp
LEAF_NODE	3:24	3:24	4	;
ITERATION	4:1	4:12	3	
KEYWORD	4:1	4:1	4	while
LEAF_NODE	4:1	4:1	5	while
LEAF_NODE	4:6	4:6	4	(
CONDITION	4:7	4:7	4	lst
EXPR	4:7	4:7	5	lst
FIELD	4:7	4:7	6	lst
LEAF_NODE	4:7	4:7	7	lst
LEAF_NODE	4:10	4:10	4	)
STATEMENTS	4:12	10:1	4	
LEAF_NODE	4:12	4:12	5	{
STATEMENTS	5:2	9:2	5	
EXPR_STATEMENT	5:2	5:17	6	kvp = lst -> data ;
EXPR	5:2	5:2	7	kvp = lst -> data
ASSIGN	5:2	5:8	8	kvp = lst -> data
LVAL	5:2	5:2	9	kvp
FIELD	5:2	5:2	10	kvp
LEAF_NODE	5:2	5:2	11	kvp
ASSIGN_OP	5:6	5:6	9	=
LEAF_NODE	5:6	5:6	10	=
RVAL	5:8	5:8	9	lst -> data
FIELD	5:8	5:13	10	lst -> data
LEAF_NODE	5:8	5:8	11	lst
LEAF_NODE	5:11	5:11	11	->
LEAF_NODE	5:13	5:13	11	data
LEAF_NODE	5:17	5:17	7	;
EXPR_STATEMENT	6:2	6:18	6	g_free ( kvp -> key ) ;
EXPR	6:2	6:2	7	g_free ( kvp -> key )
FUNCTION_CALL	6:2	6:17	8	g_free ( kvp -> key )
CALLEE	6:2	6:2	9	g_free
LEAF_NODE	6:2	6:2	10	g_free
LEAF_NODE	6:8	6:8	9	(
ARGUMENT	6:9	6:9	9	kvp -> key
FIELD	6:9	6:14	10	kvp -> key
LEAF_NODE	6:9	6:9	11	kvp
LEAF_NODE	6:12	6:12	11	->
LEAF_NODE	6:14	6:14	11	key
LEAF_NODE	6:17	6:17	9	)
LEAF_NODE	6:18	6:18	7	;
EXPR_STATEMENT	7:2	7:20	6	g_free ( kvp -> value ) ;
EXPR	7:2	7:2	7	g_free ( kvp -> value )
FUNCTION_CALL	7:2	7:19	8	g_free ( kvp -> value )
CALLEE	7:2	7:2	9	g_free
LEAF_NODE	7:2	7:2	10	g_free
LEAF_NODE	7:8	7:8	9	(
ARGUMENT	7:9	7:9	9	kvp -> value
FIELD	7:9	7:14	10	kvp -> value
LEAF_NODE	7:9	7:9	11	kvp
LEAF_NODE	7:12	7:12	11	->
LEAF_NODE	7:14	7:14	11	value
LEAF_NODE	7:19	7:19	9	)
LEAF_NODE	7:20	7:20	7	;
EXPR_STATEMENT	8:2	8:13	6	g_free ( kvp ) ;
EXPR	8:2	8:2	7	g_free ( kvp )
FUNCTION_CALL	8:2	8:12	8	g_free ( kvp )
CALLEE	8:2	8:2	9	g_free
LEAF_NODE	8:2	8:2	10	g_free
LEAF_NODE	8:8	8:8	9	(
ARGUMENT	8:9	8:9	9	kvp
FIELD	8:9	8:9	10	kvp
LEAF_NODE	8:9	8:9	11	kvp
LEAF_NODE	8:12	8:12	9	)
LEAF_NODE	8:13	8:13	7	;
EXPR_STATEMENT	9:2	9:38	6	lst = g_slist_remove ( lst , lst -> data ) ;
EXPR	9:2	9:2	7	lst = g_slist_remove ( lst , lst -> data )
ASSIGN	9:2	9:8	8	lst = g_slist_remove ( lst , lst -> data )
LVAL	9:2	9:2	9	lst
FIELD	9:2	9:2	10	lst
LEAF_NODE	9:2	9:2	11	lst
ASSIGN_OP	9:6	9:6	9	=
LEAF_NODE	9:6	9:6	10	=
RVAL	9:8	9:8	9	g_slist_remove ( lst , lst -> data )
FUNCTION_CALL	9:8	9:37	10	g_slist_remove ( lst , lst -> data )
CALLEE	9:8	9:8	11	g_slist_remove
LEAF_NODE	9:8	9:8	12	g_slist_remove
LEAF_NODE	9:22	9:22	11	(
ARGUMENT	9:23	9:23	11	lst
FIELD	9:23	9:23	12	lst
LEAF_NODE	9:23	9:23	13	lst
LEAF_NODE	9:26	9:26	11	,
ARGUMENT	9:28	9:28	11	lst -> data
FIELD	9:28	9:33	12	lst -> data
LEAF_NODE	9:28	9:28	13	lst
LEAF_NODE	9:31	9:31	13	->
LEAF_NODE	9:33	9:33	13	data
LEAF_NODE	9:37	9:37	11	)
LEAF_NODE	9:38	9:38	7	;
LEAF_NODE	10:1	10:1	5	}
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	20:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	clipboard_paste
LEAF_NODE	2:0	2:0	3	clipboard_paste
PARAMETER_LIST	2:15	2:43	2	( GntBindable * bind , GList * n )
LEAF_NODE	2:15	2:15	3	(
PARAMETER_DECL	2:16	2:29	3	GntBindable * bind
TYPE	2:16	2:28	4	GntBindable *
TYPE_NAME	2:16	2:16	5	GntBindable
LEAF_NODE	2:16	2:16	6	GntBindable
POINTER	2:28	2:28	5	*
LEAF_NODE	2:28	2:28	6	*
NAME	2:29	2:29	4	bind
LEAF_NODE	2:29	2:29	5	bind
LEAF_NODE	2:33	2:33	3	,
PARAMETER_DECL	2:35	2:42	3	GList * n
TYPE	2:35	2:41	4	GList *
TYPE_NAME	2:35	2:35	5	GList
LEAF_NODE	2:35	2:35	6	GList
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	n
LEAF_NODE	2:42	2:42	5	n
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	19:1	2	
SIMPLE_DECL	4:1	4:34	3	GntEntry * entry ; entry = GNT_ENTRY ( bind ) ;
VAR_DECL	4:1	4:11	4	GntEntry * entry ; entry = GNT_ENTRY ( bind )
TYPE	4:1	4:10	5	GntEntry *
TYPE_NAME	4:1	4:1	6	GntEntry
LEAF_NODE	4:1	4:1	7	GntEntry
POINTER	4:10	4:10	6	*
LEAF_NODE	4:10	4:10	7	*
NAME	4:11	4:11	5	entry
LEAF_NODE	4:11	4:11	6	entry
LEAF_NODE	0:0	0:0	5	;
INIT	4:11	4:11	5	entry = GNT_ENTRY ( bind )
ASSIGN	4:11	4:19	6	entry = GNT_ENTRY ( bind )
LVAL	4:11	4:11	7	entry
NAME	4:11	4:11	8	entry
LEAF_NODE	4:11	4:11	9	entry
ASSIGN_OP	4:17	4:17	7	=
LEAF_NODE	4:17	4:17	8	=
RVAL	4:19	4:19	7	GNT_ENTRY ( bind )
FUNCTION_CALL	4:19	4:33	8	GNT_ENTRY ( bind )
CALLEE	4:19	4:19	9	GNT_ENTRY
LEAF_NODE	4:19	4:19	10	GNT_ENTRY
LEAF_NODE	4:28	4:28	9	(
ARGUMENT	4:29	4:29	9	bind
FIELD	4:29	4:29	10	bind
LEAF_NODE	4:29	4:29	11	bind
LEAF_NODE	4:33	4:33	9	)
LEAF_NODE	4:34	4:34	4	;
SIMPLE_DECL	5:1	5:26	3	gchar * i , gchar * text , gchar * a , gchar * all ;
INIT_DECL_LIST	5:1	5:1	4	gchar * i , gchar * text , gchar * a , gchar * all
VAR_DECL	5:1	5:8	5	gchar * i
TYPE	5:1	5:7	6	gchar *
TYPE_NAME	5:1	5:1	7	gchar
LEAF_NODE	5:1	5:1	8	gchar
POINTER	5:7	5:7	7	*
LEAF_NODE	5:7	5:7	8	*
NAME	5:8	5:8	6	i
LEAF_NODE	5:8	5:8	7	i
LEAF_NODE	5:9	5:9	5	,
INIT_DECL_LIST	5:1	5:1	5	gchar * text , gchar * a , gchar * all
VAR_DECL	5:1	5:12	6	gchar * text
TYPE	5:1	5:11	7	gchar *
TYPE_NAME	5:1	5:1	8	gchar
LEAF_NODE	5:1	5:1	9	gchar
POINTER	5:11	5:11	8	*
LEAF_NODE	5:11	5:11	9	*
NAME	5:12	5:12	7	text
LEAF_NODE	5:12	5:12	8	text
LEAF_NODE	5:16	5:16	6	,
INIT_DECL_LIST	5:1	5:1	6	gchar * a , gchar * all
VAR_DECL	5:1	5:19	7	gchar * a
TYPE	5:1	5:18	8	gchar *
TYPE_NAME	5:1	5:1	9	gchar
LEAF_NODE	5:1	5:1	10	gchar
POINTER	5:18	5:18	9	*
LEAF_NODE	5:18	5:18	10	*
NAME	5:19	5:19	8	a
LEAF_NODE	5:19	5:19	9	a
LEAF_NODE	5:20	5:20	7	,
VAR_DECL	5:1	5:23	7	gchar * all
TYPE	5:1	5:22	8	gchar *
TYPE_NAME	5:1	5:1	9	gchar
LEAF_NODE	5:1	5:1	10	gchar
POINTER	5:22	5:22	9	*
LEAF_NODE	5:22	5:22	10	*
NAME	5:23	5:23	8	all
LEAF_NODE	5:23	5:23	9	all
LEAF_NODE	5:26	5:26	4	;
EXPR_STATEMENT	6:1	6:38	3	text = i = gnt_get_clipboard_string ( ) ;
EXPR	6:1	6:1	4	text = i = gnt_get_clipboard_string ( )
ASSIGN	6:1	6:8	5	text = i = gnt_get_clipboard_string ( )
LVAL	6:1	6:1	6	text
FIELD	6:1	6:1	7	text
LEAF_NODE	6:1	6:1	8	text
ASSIGN_OP	6:6	6:6	6	=
LEAF_NODE	6:6	6:6	7	=
RVAL	6:8	6:8	6	i = gnt_get_clipboard_string ( )
ASSIGN	6:8	6:12	7	i = gnt_get_clipboard_string ( )
LVAL	6:8	6:8	8	i
FIELD	6:8	6:8	9	i
LEAF_NODE	6:8	6:8	10	i
ASSIGN_OP	6:10	6:10	8	=
LEAF_NODE	6:10	6:10	9	=
RVAL	6:12	6:12	8	gnt_get_clipboard_string ( )
FUNCTION_CALL	6:12	6:37	9	gnt_get_clipboard_string ( )
CALLEE	6:12	6:12	10	gnt_get_clipboard_string
LEAF_NODE	6:12	6:12	11	gnt_get_clipboard_string
LEAF_NODE	6:36	6:36	10	(
LEAF_NODE	6:37	6:37	10	)
LEAF_NODE	6:38	6:38	4	;
ITERATION	7:1	7:20	3	
KEYWORD	7:1	7:1	4	while
LEAF_NODE	7:1	7:1	5	while
LEAF_NODE	7:7	7:7	4	(
CONDITION	7:8	7:8	4	* i != '\0'
EXPR	7:8	7:14	5	* i != '\0'
UNARY_EXPR	7:8	7:9	6	* i
UNARY_OPERATOR	7:8	7:8	7	*
LEAF_NODE	7:8	7:8	8	*
FIELD	7:9	7:9	7	i
LEAF_NODE	7:9	7:9	8	i
EQ_OPERATOR	7:11	7:11	6	!=
LEAF_NODE	7:11	7:11	7	!=
FIELD	7:14	7:14	6	'\0'
LEAF_NODE	7:14	7:14	7	'\0'
LEAF_NODE	7:18	7:18	4	)
STATEMENTS	7:20	11:1	4	
LEAF_NODE	7:20	7:20	5	{
STATEMENTS	8:2	9:2	5	
EXPR_STATEMENT	8:2	8:25	6	i = g_utf8_next_char ( i ) ;
EXPR	8:2	8:2	7	i = g_utf8_next_char ( i )
ASSIGN	8:2	8:6	8	i = g_utf8_next_char ( i )
LVAL	8:2	8:2	9	i
FIELD	8:2	8:2	10	i
LEAF_NODE	8:2	8:2	11	i
ASSIGN_OP	8:4	8:4	9	=
LEAF_NODE	8:4	8:4	10	=
RVAL	8:6	8:6	9	g_utf8_next_char ( i )
FUNCTION_CALL	8:6	8:24	10	g_utf8_next_char ( i )
CALLEE	8:6	8:6	11	g_utf8_next_char
LEAF_NODE	8:6	8:6	12	g_utf8_next_char
LEAF_NODE	8:22	8:22	11	(
ARGUMENT	8:23	8:23	11	i
FIELD	8:23	8:23	12	i
LEAF_NODE	8:23	8:23	13	i
LEAF_NODE	8:24	8:24	11	)
LEAF_NODE	8:25	8:25	7	;
SELECTION	9:2	10:3	6	
KEYWORD	9:2	9:2	7	if
LEAF_NODE	9:2	9:2	8	if
LEAF_NODE	9:5	9:5	7	(
CONDITION	9:6	9:6	7	* i == '\r' || * i == '\n'
EXPR	9:6	9:6	8	* i == '\r' || * i == '\n'
OR	9:6	9:20	9	* i == '\r' || * i == '\n'
EXPR	9:6	9:12	10	* i == '\r'
UNARY_EXPR	9:6	9:7	11	* i
UNARY_OPERATOR	9:6	9:6	12	*
LEAF_NODE	9:6	9:6	13	*
FIELD	9:7	9:7	12	i
LEAF_NODE	9:7	9:7	13	i
EQ_OPERATOR	9:9	9:9	11	==
LEAF_NODE	9:9	9:9	12	==
FIELD	9:12	9:12	11	'\r'
LEAF_NODE	9:12	9:12	12	'\r'
LEAF_NODE	9:17	9:17	10	||
EXPR	9:20	9:26	10	* i == '\n'
UNARY_EXPR	9:20	9:21	11	* i
UNARY_OPERATOR	9:20	9:20	12	*
LEAF_NODE	9:20	9:20	13	*
FIELD	9:21	9:21	12	i
LEAF_NODE	9:21	9:21	13	i
EQ_OPERATOR	9:23	9:23	11	==
LEAF_NODE	9:23	9:23	12	==
FIELD	9:26	9:26	11	'\n'
LEAF_NODE	9:26	9:26	12	'\n'
LEAF_NODE	9:30	9:30	7	)
STATEMENTS	10:3	10:3	7	
EXPR_STATEMENT	10:3	10:11	8	* i = ' ' ;
EXPR	10:3	10:3	9	* i = ' '
ASSIGN	10:3	10:8	10	* i = ' '
LVAL	10:3	10:3	11	* i
UNARY_EXPR	10:3	10:4	12	* i
UNARY_OPERATOR	10:3	10:3	13	*
LEAF_NODE	10:3	10:3	14	*
FIELD	10:4	10:4	13	i
LEAF_NODE	10:4	10:4	14	i
ASSIGN_OP	10:6	10:6	11	=
LEAF_NODE	10:6	10:6	12	=
RVAL	10:8	10:8	11	' '
FIELD	10:8	10:8	12	' '
LEAF_NODE	10:8	10:8	13	' '
LEAF_NODE	10:11	10:11	9	;
LEAF_NODE	11:1	11:1	5	}
EXPR_STATEMENT	12:1	12:58	3	a = g_strndup ( entry -> start , entry -> cursor - entry -> start ) ;
EXPR	12:1	12:1	4	a = g_strndup ( entry -> start , entry -> cursor - entry -> start )
ASSIGN	12:1	12:5	5	a = g_strndup ( entry -> start , entry -> cursor - entry -> start )
LVAL	12:1	12:1	6	a
FIELD	12:1	12:1	7	a
LEAF_NODE	12:1	12:1	8	a
ASSIGN_OP	12:3	12:3	6	=
LEAF_NODE	12:3	12:3	7	=
RVAL	12:5	12:5	6	g_strndup ( entry -> start , entry -> cursor - entry -> start )
FUNCTION_CALL	12:5	12:57	7	g_strndup ( entry -> start , entry -> cursor - entry -> start )
CALLEE	12:5	12:5	8	g_strndup
LEAF_NODE	12:5	12:5	9	g_strndup
LEAF_NODE	12:14	12:14	8	(
ARGUMENT	12:15	12:15	8	entry -> start
FIELD	12:15	12:22	9	entry -> start
LEAF_NODE	12:15	12:15	10	entry
LEAF_NODE	12:20	12:20	10	->
LEAF_NODE	12:22	12:22	10	start
LEAF_NODE	12:27	12:27	8	,
ARGUMENT	12:29	12:45	8	entry -> cursor - entry -> start
FIELD	12:29	12:36	9	entry -> cursor
LEAF_NODE	12:29	12:29	10	entry
LEAF_NODE	12:34	12:34	10	->
LEAF_NODE	12:36	12:36	10	cursor
LEAF_NODE	12:43	12:43	9	-
FIELD	12:45	12:52	9	entry -> start
LEAF_NODE	12:45	12:45	10	entry
LEAF_NODE	12:50	12:50	10	->
LEAF_NODE	12:52	12:52	10	start
LEAF_NODE	12:57	12:57	8	)
LEAF_NODE	12:58	12:58	4	;
EXPR_STATEMENT	13:1	13:48	3	all = g_strconcat ( a , text , entry -> cursor , NULL ) ;
EXPR	13:1	13:1	4	all = g_strconcat ( a , text , entry -> cursor , NULL )
ASSIGN	13:1	13:7	5	all = g_strconcat ( a , text , entry -> cursor , NULL )
LVAL	13:1	13:1	6	all
FIELD	13:1	13:1	7	all
LEAF_NODE	13:1	13:1	8	all
ASSIGN_OP	13:5	13:5	6	=
LEAF_NODE	13:5	13:5	7	=
RVAL	13:7	13:7	6	g_strconcat ( a , text , entry -> cursor , NULL )
FUNCTION_CALL	13:7	13:47	7	g_strconcat ( a , text , entry -> cursor , NULL )
CALLEE	13:7	13:7	8	g_strconcat
LEAF_NODE	13:7	13:7	9	g_strconcat
LEAF_NODE	13:18	13:18	8	(
ARGUMENT	13:19	13:19	8	a
FIELD	13:19	13:19	9	a
LEAF_NODE	13:19	13:19	10	a
LEAF_NODE	13:20	13:20	8	,
ARGUMENT	13:22	13:22	8	text
FIELD	13:22	13:22	9	text
LEAF_NODE	13:22	13:22	10	text
LEAF_NODE	13:26	13:26	8	,
ARGUMENT	13:28	13:28	8	entry -> cursor
FIELD	13:28	13:35	9	entry -> cursor
LEAF_NODE	13:28	13:28	10	entry
LEAF_NODE	13:33	13:33	10	->
LEAF_NODE	13:35	13:35	10	cursor
LEAF_NODE	13:41	13:41	8	,
ARGUMENT	13:43	13:43	8	NULL
FIELD	13:43	13:43	9	NULL
LEAF_NODE	13:43	13:43	10	NULL
LEAF_NODE	13:47	13:47	8	)
LEAF_NODE	13:48	13:48	4	;
EXPR_STATEMENT	14:1	14:40	3	gnt_entry_set_text_internal ( entry , all ) ;
EXPR	14:1	14:1	4	gnt_entry_set_text_internal ( entry , all )
FUNCTION_CALL	14:1	14:39	5	gnt_entry_set_text_internal ( entry , all )
CALLEE	14:1	14:1	6	gnt_entry_set_text_internal
LEAF_NODE	14:1	14:1	7	gnt_entry_set_text_internal
LEAF_NODE	14:28	14:28	6	(
ARGUMENT	14:29	14:29	6	entry
FIELD	14:29	14:29	7	entry
LEAF_NODE	14:29	14:29	8	entry
LEAF_NODE	14:34	14:34	6	,
ARGUMENT	14:36	14:36	6	all
FIELD	14:36	14:36	7	all
LEAF_NODE	14:36	14:36	8	all
LEAF_NODE	14:39	14:39	6	)
LEAF_NODE	14:40	14:40	4	;
EXPR_STATEMENT	15:1	15:45	3	update_kill_ring ( entry , ENTRY_JAIL , NULL , 0 ) ;
EXPR	15:1	15:1	4	update_kill_ring ( entry , ENTRY_JAIL , NULL , 0 )
FUNCTION_CALL	15:1	15:44	5	update_kill_ring ( entry , ENTRY_JAIL , NULL , 0 )
CALLEE	15:1	15:1	6	update_kill_ring
LEAF_NODE	15:1	15:1	7	update_kill_ring
LEAF_NODE	15:17	15:17	6	(
ARGUMENT	15:18	15:18	6	entry
FIELD	15:18	15:18	7	entry
LEAF_NODE	15:18	15:18	8	entry
LEAF_NODE	15:23	15:23	6	,
ARGUMENT	15:25	15:25	6	ENTRY_JAIL
FIELD	15:25	15:25	7	ENTRY_JAIL
LEAF_NODE	15:25	15:25	8	ENTRY_JAIL
LEAF_NODE	15:35	15:35	6	,
ARGUMENT	15:37	15:37	6	NULL
FIELD	15:37	15:37	7	NULL
LEAF_NODE	15:37	15:37	8	NULL
LEAF_NODE	15:41	15:41	6	,
ARGUMENT	15:43	15:43	6	0
FIELD	15:43	15:43	7	0
LEAF_NODE	15:43	15:43	8	0
LEAF_NODE	15:44	15:44	6	)
LEAF_NODE	15:45	15:45	4	;
EXPR_STATEMENT	16:1	16:10	3	g_free ( a ) ;
EXPR	16:1	16:1	4	g_free ( a )
FUNCTION_CALL	16:1	16:9	5	g_free ( a )
CALLEE	16:1	16:1	6	g_free
LEAF_NODE	16:1	16:1	7	g_free
LEAF_NODE	16:7	16:7	6	(
ARGUMENT	16:8	16:8	6	a
FIELD	16:8	16:8	7	a
LEAF_NODE	16:8	16:8	8	a
LEAF_NODE	16:9	16:9	6	)
LEAF_NODE	16:10	16:10	4	;
EXPR_STATEMENT	17:1	17:13	3	g_free ( text ) ;
EXPR	17:1	17:1	4	g_free ( text )
FUNCTION_CALL	17:1	17:12	5	g_free ( text )
CALLEE	17:1	17:1	6	g_free
LEAF_NODE	17:1	17:1	7	g_free
LEAF_NODE	17:7	17:7	6	(
ARGUMENT	17:8	17:8	6	text
FIELD	17:8	17:8	7	text
LEAF_NODE	17:8	17:8	8	text
LEAF_NODE	17:12	17:12	6	)
LEAF_NODE	17:13	17:13	4	;
EXPR_STATEMENT	18:1	18:12	3	g_free ( all ) ;
EXPR	18:1	18:1	4	g_free ( all )
FUNCTION_CALL	18:1	18:11	5	g_free ( all )
CALLEE	18:1	18:1	6	g_free
LEAF_NODE	18:1	18:1	7	g_free
LEAF_NODE	18:7	18:7	6	(
ARGUMENT	18:8	18:8	6	all
FIELD	18:8	18:8	7	all
LEAF_NODE	18:8	18:8	8	all
LEAF_NODE	18:11	18:11	6	)
LEAF_NODE	18:12	18:12	4	;
JUMP_STATEMENT	19:1	19:12	3	return TRUE ;
KEYWORD	19:1	19:1	4	return
LEAF_NODE	19:1	19:1	5	return
DESTINATION	19:8	19:8	4	TRUE
EXPR	19:8	19:8	5	TRUE
FIELD	19:8	19:8	6	TRUE
LEAF_NODE	19:8	19:8	7	TRUE
LEAF_NODE	19:12	19:12	4	;
LEAF_NODE	20:0	20:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	pounces_manager_add_cb
LEAF_NODE	2:0	2:0	3	pounces_manager_add_cb
PARAMETER_LIST	2:22	2:60	2	( GtkButton * button , gpointer user_data )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:34	3	GtkButton * button
TYPE	2:23	2:33	4	GtkButton *
TYPE_NAME	2:23	2:23	5	GtkButton
LEAF_NODE	2:23	2:23	6	GtkButton
POINTER	2:33	2:33	5	*
LEAF_NODE	2:33	2:33	6	*
NAME	2:34	2:34	4	button
LEAF_NODE	2:34	2:34	5	button
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:51	3	gpointer user_data
TYPE	2:42	2:42	4	gpointer
TYPE_NAME	2:42	2:42	5	gpointer
LEAF_NODE	2:42	2:42	6	gpointer
NAME	2:51	2:51	4	user_data
LEAF_NODE	2:51	2:51	5	user_data
LEAF_NODE	2:60	2:60	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	4:44	3	pidgin_pounce_editor_show ( NULL , NULL , NULL ) ;
EXPR	4:1	4:1	4	pidgin_pounce_editor_show ( NULL , NULL , NULL )
FUNCTION_CALL	4:1	4:43	5	pidgin_pounce_editor_show ( NULL , NULL , NULL )
CALLEE	4:1	4:1	6	pidgin_pounce_editor_show
LEAF_NODE	4:1	4:1	7	pidgin_pounce_editor_show
LEAF_NODE	4:26	4:26	6	(
ARGUMENT	4:27	4:27	6	NULL
FIELD	4:27	4:27	7	NULL
LEAF_NODE	4:27	4:27	8	NULL
LEAF_NODE	4:31	4:31	6	,
ARGUMENT	4:33	4:33	6	NULL
FIELD	4:33	4:33	7	NULL
LEAF_NODE	4:33	4:33	8	NULL
LEAF_NODE	4:37	4:37	6	,
ARGUMENT	4:39	4:39	6	NULL
FIELD	4:39	4:39	7	NULL
LEAF_NODE	4:39	4:39	8	NULL
LEAF_NODE	4:43	4:43	6	)
LEAF_NODE	4:44	4:44	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	22:0	1	
RETURN_TYPE	1:0	1:0	2	GType
TYPE_NAME	1:0	1:0	3	GType
LEAF_NODE	1:0	1:0	4	GType
FUNCTION_NAME	2:0	2:0	2	gnt_button_get_gtype
LEAF_NODE	2:0	2:0	3	gnt_button_get_gtype
PARAMETER_LIST	2:20	2:25	2	( void )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:21	3	void
LEAF_NODE	2:21	2:21	4	void
LEAF_NODE	2:25	2:25	3	)
LEAF_NODE	2:27	2:27	2	{
STATEMENTS	3:1	21:1	2	
LEAF_NODE	3:1	3:1	3	static
SIMPLE_DECL	3:8	3:22	3	GType type ; type = 0 ;
VAR_DECL	3:8	3:14	4	GType type ; type = 0
TYPE	3:8	3:8	5	GType
TYPE_NAME	3:8	3:8	6	GType
LEAF_NODE	3:8	3:8	7	GType
NAME	3:14	3:14	5	type
LEAF_NODE	3:14	3:14	6	type
LEAF_NODE	0:0	0:0	5	;
INIT	3:14	3:14	5	type = 0
ASSIGN	3:14	3:21	6	type = 0
LVAL	3:14	3:14	7	type
NAME	3:14	3:14	8	type
LEAF_NODE	3:14	3:14	9	type
ASSIGN_OP	3:19	3:19	7	=
LEAF_NODE	3:19	3:19	8	=
RVAL	3:21	3:21	7	0
FIELD	3:21	3:21	8	0
LEAF_NODE	3:21	3:21	9	0
LEAF_NODE	3:22	3:22	4	;
SELECTION	4:1	4:15	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:3	4:3	4	(
CONDITION	4:4	4:4	4	type == 0
EXPR	4:4	4:12	5	type == 0
FIELD	4:4	4:4	6	type
LEAF_NODE	4:4	4:4	7	type
EQ_OPERATOR	4:9	4:9	6	==
LEAF_NODE	4:9	4:9	7	==
FIELD	4:12	4:12	6	0
LEAF_NODE	4:12	4:12	7	0
LEAF_NODE	4:13	4:13	4	)
STATEMENTS	4:15	20:1	4	
LEAF_NODE	4:15	4:15	5	{
STATEMENTS	5:2	17:2	5	
LEAF_NODE	5:2	5:2	6	static
LEAF_NODE	5:9	5:9	6	const
LEAF_NODE	5:15	5:15	6	GTypeInfo
LEAF_NODE	5:25	5:25	6	info
LEAF_NODE	5:30	5:30	6	=
LEAF_NODE	5:32	5:32	6	{
STATEMENTS	6:3	15:3	6	
LEAF_NODE	6:3	6:3	7	sizeof
LEAF_NODE	6:9	6:9	7	(
LEAF_NODE	6:10	6:10	7	GntButtonClass
LEAF_NODE	6:24	6:24	7	)
LEAF_NODE	6:25	6:25	7	,
LEAF_NODE	7:3	7:3	7	NULL
LEAF_NODE	7:7	7:7	7	,
LEAF_NODE	8:3	8:3	7	NULL
LEAF_NODE	8:7	8:7	7	,
LEAF_NODE	9:3	9:3	7	(
LEAF_NODE	9:4	9:4	7	GClassInitFunc
LEAF_NODE	9:18	9:18	7	)
LEAF_NODE	9:19	9:19	7	gnt_button_class_init
LEAF_NODE	9:40	9:40	7	,
LEAF_NODE	10:3	10:3	7	NULL
LEAF_NODE	10:7	10:7	7	,
LEAF_NODE	11:3	11:3	7	NULL
LEAF_NODE	11:7	11:7	7	,
LEAF_NODE	12:3	12:3	7	sizeof
LEAF_NODE	12:9	12:9	7	(
LEAF_NODE	12:10	12:10	7	GntButton
LEAF_NODE	12:19	12:19	7	)
LEAF_NODE	12:20	12:20	7	,
LEAF_NODE	13:3	13:3	7	0
LEAF_NODE	13:4	13:4	7	,
LEAF_NODE	14:3	14:3	7	gnt_button_init
LEAF_NODE	14:18	14:18	7	,
LEAF_NODE	15:3	15:3	7	NULL
LEAF_NODE	16:2	16:2	6	}
LEAF_NODE	16:3	16:3	6	;
EXPR_STATEMENT	17:2	19:20	6	type = g_type_register_static ( GNT_TYPE_WIDGET , "GntButton" , & info , 0 ) ;
EXPR	17:2	17:2	7	type = g_type_register_static ( GNT_TYPE_WIDGET , "GntButton" , & info , 0 )
ASSIGN	17:2	17:9	8	type = g_type_register_static ( GNT_TYPE_WIDGET , "GntButton" , & info , 0 )
LVAL	17:2	17:2	9	type
FIELD	17:2	17:2	10	type
LEAF_NODE	17:2	17:2	11	type
ASSIGN_OP	17:7	17:7	9	=
LEAF_NODE	17:7	17:7	10	=
RVAL	17:9	17:9	9	g_type_register_static ( GNT_TYPE_WIDGET , "GntButton" , & info , 0 )
FUNCTION_CALL	17:9	19:19	10	g_type_register_static ( GNT_TYPE_WIDGET , "GntButton" , & info , 0 )
CALLEE	17:9	17:9	11	g_type_register_static
LEAF_NODE	17:9	17:9	12	g_type_register_static
LEAF_NODE	17:31	17:31	11	(
ARGUMENT	17:32	17:32	11	GNT_TYPE_WIDGET
FIELD	17:32	17:32	12	GNT_TYPE_WIDGET
LEAF_NODE	17:32	17:32	13	GNT_TYPE_WIDGET
LEAF_NODE	17:47	17:47	11	,
ARGUMENT	18:11	18:11	11	"GntButton"
FIELD	18:11	18:11	12	"GntButton"
LEAF_NODE	18:11	18:11	13	"GntButton"
LEAF_NODE	18:22	18:22	11	,
ARGUMENT	19:11	19:11	11	& info
UNARY_EXPR	19:11	19:12	12	& info
UNARY_OPERATOR	19:11	19:11	13	&
LEAF_NODE	19:11	19:11	14	&
FIELD	19:12	19:12	13	info
LEAF_NODE	19:12	19:12	14	info
LEAF_NODE	19:16	19:16	11	,
ARGUMENT	19:18	19:18	11	0
FIELD	19:18	19:18	12	0
LEAF_NODE	19:18	19:18	13	0
LEAF_NODE	19:19	19:19	11	)
LEAF_NODE	19:20	19:20	7	;
LEAF_NODE	20:1	20:1	5	}
JUMP_STATEMENT	21:1	21:12	3	return type ;
KEYWORD	21:1	21:1	4	return
LEAF_NODE	21:1	21:1	5	return
DESTINATION	21:8	21:8	4	type
EXPR	21:8	21:8	5	type
FIELD	21:8	21:8	6	type
LEAF_NODE	21:8	21:8	7	type
LEAF_NODE	21:12	21:12	4	;
LEAF_NODE	22:0	22:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	pidgin_status_icon_theme_class_init
LEAF_NODE	2:0	2:0	3	pidgin_status_icon_theme_class_init
PARAMETER_LIST	2:35	2:69	2	( PidginStatusIconThemeClass * klass )
LEAF_NODE	2:35	2:35	3	(
PARAMETER_DECL	2:36	2:64	3	PidginStatusIconThemeClass * klass
TYPE	2:36	2:63	4	PidginStatusIconThemeClass *
TYPE_NAME	2:36	2:36	5	PidginStatusIconThemeClass
LEAF_NODE	2:36	2:36	6	PidginStatusIconThemeClass
POINTER	2:63	2:63	5	*
LEAF_NODE	2:63	2:63	6	*
NAME	2:64	2:64	4	klass
LEAF_NODE	2:64	2:64	5	klass
LEAF_NODE	2:69	2:69	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SIMPLE_DECL	4:1	4:48	3	GObjectClass * obj_class ; obj_class = G_OBJECT_CLASS ( klass ) ;
VAR_DECL	4:1	4:15	4	GObjectClass * obj_class ; obj_class = G_OBJECT_CLASS ( klass )
TYPE	4:1	4:14	5	GObjectClass *
TYPE_NAME	4:1	4:1	6	GObjectClass
LEAF_NODE	4:1	4:1	7	GObjectClass
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	obj_class
LEAF_NODE	4:15	4:15	6	obj_class
LEAF_NODE	0:0	0:0	5	;
INIT	4:15	4:15	5	obj_class = G_OBJECT_CLASS ( klass )
ASSIGN	4:15	4:27	6	obj_class = G_OBJECT_CLASS ( klass )
LVAL	4:15	4:15	7	obj_class
NAME	4:15	4:15	8	obj_class
LEAF_NODE	4:15	4:15	9	obj_class
ASSIGN_OP	4:25	4:25	7	=
LEAF_NODE	4:25	4:25	8	=
RVAL	4:27	4:27	7	G_OBJECT_CLASS ( klass )
FUNCTION_CALL	4:27	4:47	8	G_OBJECT_CLASS ( klass )
CALLEE	4:27	4:27	9	G_OBJECT_CLASS
LEAF_NODE	4:27	4:27	10	G_OBJECT_CLASS
LEAF_NODE	4:41	4:41	9	(
ARGUMENT	4:42	4:42	9	klass
FIELD	4:42	4:42	10	klass
LEAF_NODE	4:42	4:42	11	klass
LEAF_NODE	4:47	4:47	9	)
LEAF_NODE	4:48	4:48	4	;
EXPR_STATEMENT	5:1	5:47	3	parent_class = g_type_class_peek_parent ( klass ) ;
EXPR	5:1	5:1	4	parent_class = g_type_class_peek_parent ( klass )
ASSIGN	5:1	5:16	5	parent_class = g_type_class_peek_parent ( klass )
LVAL	5:1	5:1	6	parent_class
FIELD	5:1	5:1	7	parent_class
LEAF_NODE	5:1	5:1	8	parent_class
ASSIGN_OP	5:14	5:14	6	=
LEAF_NODE	5:14	5:14	7	=
RVAL	5:16	5:16	6	g_type_class_peek_parent ( klass )
FUNCTION_CALL	5:16	5:46	7	g_type_class_peek_parent ( klass )
CALLEE	5:16	5:16	8	g_type_class_peek_parent
LEAF_NODE	5:16	5:16	9	g_type_class_peek_parent
LEAF_NODE	5:40	5:40	8	(
ARGUMENT	5:41	5:41	8	klass
FIELD	5:41	5:41	9	klass
LEAF_NODE	5:41	5:41	10	klass
LEAF_NODE	5:46	5:46	8	)
LEAF_NODE	5:47	5:47	4	;
EXPR_STATEMENT	6:1	6:56	3	obj_class -> finalize = pidgin_status_icon_theme_finalize ;
EXPR	6:1	6:1	4	obj_class -> finalize = pidgin_status_icon_theme_finalize
ASSIGN	6:1	6:23	5	obj_class -> finalize = pidgin_status_icon_theme_finalize
LVAL	6:1	6:1	6	obj_class -> finalize
FIELD	6:1	6:12	7	obj_class -> finalize
LEAF_NODE	6:1	6:1	8	obj_class
LEAF_NODE	6:10	6:10	8	->
LEAF_NODE	6:12	6:12	8	finalize
ASSIGN_OP	6:21	6:21	6	=
LEAF_NODE	6:21	6:21	7	=
RVAL	6:23	6:23	6	pidgin_status_icon_theme_finalize
FIELD	6:23	6:23	7	pidgin_status_icon_theme_finalize
LEAF_NODE	6:23	6:23	8	pidgin_status_icon_theme_finalize
LEAF_NODE	6:56	6:56	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:10	2	GtkWidget *
TYPE_NAME	2:0	2:0	3	GtkWidget
LEAF_NODE	2:0	2:0	4	GtkWidget
LEAF_NODE	2:10	2:10	3	*
FUNCTION_NAME	2:11	2:11	2	gtk_imhtmltoolbar_new
LEAF_NODE	2:11	2:11	3	gtk_imhtmltoolbar_new
PARAMETER_LIST	2:32	2:33	2	( )
LEAF_NODE	2:32	2:32	3	(
LEAF_NODE	2:33	2:33	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:68	3	return GTK_WIDGET ( g_object_new ( gtk_imhtmltoolbar_get_type ( ) , NULL ) ) ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	GTK_WIDGET ( g_object_new ( gtk_imhtmltoolbar_get_type ( ) , NULL ) )
EXPR	4:8	4:8	5	GTK_WIDGET ( g_object_new ( gtk_imhtmltoolbar_get_type ( ) , NULL ) )
FUNCTION_CALL	4:8	4:67	6	GTK_WIDGET ( g_object_new ( gtk_imhtmltoolbar_get_type ( ) , NULL ) )
CALLEE	4:8	4:8	7	GTK_WIDGET
LEAF_NODE	4:8	4:8	8	GTK_WIDGET
LEAF_NODE	4:18	4:18	7	(
ARGUMENT	4:19	4:19	7	g_object_new ( gtk_imhtmltoolbar_get_type ( ) , NULL )
FUNCTION_CALL	4:19	4:66	8	g_object_new ( gtk_imhtmltoolbar_get_type ( ) , NULL )
CALLEE	4:19	4:19	9	g_object_new
LEAF_NODE	4:19	4:19	10	g_object_new
LEAF_NODE	4:31	4:31	9	(
ARGUMENT	4:32	4:32	9	gtk_imhtmltoolbar_get_type ( )
FUNCTION_CALL	4:32	4:59	10	gtk_imhtmltoolbar_get_type ( )
CALLEE	4:32	4:32	11	gtk_imhtmltoolbar_get_type
LEAF_NODE	4:32	4:32	12	gtk_imhtmltoolbar_get_type
LEAF_NODE	4:58	4:58	11	(
LEAF_NODE	4:59	4:59	11	)
LEAF_NODE	4:60	4:60	9	,
ARGUMENT	4:62	4:62	9	NULL
FIELD	4:62	4:62	10	NULL
LEAF_NODE	4:62	4:62	11	NULL
LEAF_NODE	4:66	4:66	9	)
LEAF_NODE	4:67	4:67	7	)
LEAF_NODE	4:68	4:68	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	42:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	purple_blist_remove_contact
LEAF_NODE	2:5	2:5	3	purple_blist_remove_contact
PARAMETER_LIST	2:32	2:55	2	( PurpleContact * contact )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:48	3	PurpleContact * contact
TYPE	2:33	2:47	4	PurpleContact *
TYPE_NAME	2:33	2:33	5	PurpleContact
LEAF_NODE	2:33	2:33	6	PurpleContact
POINTER	2:47	2:47	5	*
LEAF_NODE	2:47	2:47	6	*
NAME	2:48	2:48	4	contact
LEAF_NODE	2:48	2:48	5	contact
LEAF_NODE	2:55	2:55	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	24:3	2	
SIMPLE_DECL	4:1	4:50	3	PurpleBlistUiOps * ops ; ops = purple_blist_get_ui_ops ( ) ;
VAR_DECL	4:1	4:19	4	PurpleBlistUiOps * ops ; ops = purple_blist_get_ui_ops ( )
TYPE	4:1	4:18	5	PurpleBlistUiOps *
TYPE_NAME	4:1	4:1	6	PurpleBlistUiOps
LEAF_NODE	4:1	4:1	7	PurpleBlistUiOps
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	ops
LEAF_NODE	4:19	4:19	6	ops
LEAF_NODE	0:0	0:0	5	;
INIT	4:19	4:19	5	ops = purple_blist_get_ui_ops ( )
ASSIGN	4:19	4:25	6	ops = purple_blist_get_ui_ops ( )
LVAL	4:19	4:19	7	ops
NAME	4:19	4:19	8	ops
LEAF_NODE	4:19	4:19	9	ops
ASSIGN_OP	4:23	4:23	7	=
LEAF_NODE	4:23	4:23	8	=
RVAL	4:25	4:25	7	purple_blist_get_ui_ops ( )
FUNCTION_CALL	4:25	4:49	8	purple_blist_get_ui_ops ( )
CALLEE	4:25	4:25	9	purple_blist_get_ui_ops
LEAF_NODE	4:25	4:25	10	purple_blist_get_ui_ops
LEAF_NODE	4:48	4:48	9	(
LEAF_NODE	4:49	4:49	9	)
LEAF_NODE	4:50	4:50	4	;
SIMPLE_DECL	5:1	5:30	3	PurpleBlistNode * node , PurpleBlistNode * gnode ;
INIT_DECL_LIST	5:1	5:1	4	PurpleBlistNode * node , PurpleBlistNode * gnode
VAR_DECL	5:1	5:18	5	PurpleBlistNode * node
TYPE	5:1	5:17	6	PurpleBlistNode *
TYPE_NAME	5:1	5:1	7	PurpleBlistNode
LEAF_NODE	5:1	5:1	8	PurpleBlistNode
POINTER	5:17	5:17	7	*
LEAF_NODE	5:17	5:17	8	*
NAME	5:18	5:18	6	node
LEAF_NODE	5:18	5:18	7	node
LEAF_NODE	5:22	5:22	5	,
VAR_DECL	5:1	5:25	5	PurpleBlistNode * gnode
TYPE	5:1	5:24	6	PurpleBlistNode *
TYPE_NAME	5:1	5:1	7	PurpleBlistNode
LEAF_NODE	5:1	5:1	8	PurpleBlistNode
POINTER	5:24	5:24	7	*
LEAF_NODE	5:24	5:24	8	*
NAME	5:25	5:25	6	gnode
LEAF_NODE	5:25	5:25	7	gnode
LEAF_NODE	5:30	5:30	4	;
EXPR_STATEMENT	6:1	6:34	3	g_return_if_fail ( contact != NULL ) ;
EXPR	6:1	6:1	4	g_return_if_fail ( contact != NULL )
FUNCTION_CALL	6:1	6:33	5	g_return_if_fail ( contact != NULL )
CALLEE	6:1	6:1	6	g_return_if_fail
LEAF_NODE	6:1	6:1	7	g_return_if_fail
LEAF_NODE	6:17	6:17	6	(
ARGUMENT	6:18	6:29	6	contact != NULL
FIELD	6:18	6:18	7	contact
LEAF_NODE	6:18	6:18	8	contact
EQ_OPERATOR	6:26	6:26	7	!=
LEAF_NODE	6:26	6:26	8	!=
FIELD	6:29	6:29	7	NULL
LEAF_NODE	6:29	6:29	8	NULL
LEAF_NODE	6:33	6:33	6	)
LEAF_NODE	6:34	6:34	4	;
EXPR_STATEMENT	7:1	7:34	3	node = ( PurpleBlistNode * ) contact ;
EXPR	7:1	7:1	4	node = ( PurpleBlistNode * ) contact
ASSIGN	7:1	7:8	5	node = ( PurpleBlistNode * ) contact
LVAL	7:1	7:1	6	node
FIELD	7:1	7:1	7	node
LEAF_NODE	7:1	7:1	8	node
ASSIGN_OP	7:6	7:6	6	=
LEAF_NODE	7:6	7:6	7	=
RVAL	7:8	7:27	6	( PurpleBlistNode * ) contact
LEAF_NODE	7:8	7:8	7	(
TYPE_NAME	7:9	7:9	7	PurpleBlistNode
LEAF_NODE	7:9	7:9	8	PurpleBlistNode
LEAF_NODE	7:25	7:25	7	*
LEAF_NODE	7:26	7:26	7	)
FIELD	7:27	7:27	7	contact
LEAF_NODE	7:27	7:27	8	contact
LEAF_NODE	7:34	7:34	4	;
EXPR_STATEMENT	8:1	8:21	3	gnode = node -> parent ;
EXPR	8:1	8:1	4	gnode = node -> parent
ASSIGN	8:1	8:9	5	gnode = node -> parent
LVAL	8:1	8:1	6	gnode
FIELD	8:1	8:1	7	gnode
LEAF_NODE	8:1	8:1	8	gnode
ASSIGN_OP	8:7	8:7	6	=
LEAF_NODE	8:7	8:7	7	=
RVAL	8:9	8:9	6	node -> parent
FIELD	8:9	8:15	7	node -> parent
LEAF_NODE	8:9	8:9	8	node
LEAF_NODE	8:13	8:13	8	->
LEAF_NODE	8:15	8:15	8	parent
LEAF_NODE	8:21	8:21	4	;
SELECTION	9:1	9:18	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	node -> child
EXPR	9:5	9:5	5	node -> child
FIELD	9:5	9:11	6	node -> child
LEAF_NODE	9:5	9:5	7	node
LEAF_NODE	9:9	9:9	7	->
LEAF_NODE	9:11	9:11	7	child
LEAF_NODE	9:16	9:16	4	)
STATEMENTS	9:18	24:1	4	
LEAF_NODE	9:18	9:18	5	{
STATEMENTS	15:2	23:2	5	
ITERATION	15:2	15:28	6	
KEYWORD	15:2	15:2	7	while
LEAF_NODE	15:2	15:2	8	while
LEAF_NODE	15:8	15:8	7	(
CONDITION	15:9	15:9	7	node -> child -> next
EXPR	15:9	15:9	8	node -> child -> next
FIELD	15:9	15:22	9	node -> child -> next
LEAF_NODE	15:9	15:9	10	node
LEAF_NODE	15:13	15:13	10	->
LEAF_NODE	15:15	15:15	10	child
LEAF_NODE	15:20	15:20	10	->
LEAF_NODE	15:22	15:22	10	next
LEAF_NODE	15:26	15:26	7	)
STATEMENTS	15:28	17:2	7	
LEAF_NODE	15:28	15:28	8	{
STATEMENTS	16:3	16:3	8	
EXPR_STATEMENT	16:3	16:55	9	purple_blist_remove_buddy ( ( PurpleBuddy * ) node -> child ) ;
EXPR	16:3	16:3	10	purple_blist_remove_buddy ( ( PurpleBuddy * ) node -> child )
FUNCTION_CALL	16:3	16:54	11	purple_blist_remove_buddy ( ( PurpleBuddy * ) node -> child )
CALLEE	16:3	16:3	12	purple_blist_remove_buddy
LEAF_NODE	16:3	16:3	13	purple_blist_remove_buddy
LEAF_NODE	16:28	16:28	12	(
ARGUMENT	16:29	16:43	12	( PurpleBuddy * ) node -> child
LEAF_NODE	16:29	16:29	13	(
TYPE_NAME	16:30	16:30	13	PurpleBuddy
LEAF_NODE	16:30	16:30	14	PurpleBuddy
LEAF_NODE	16:41	16:41	13	*
LEAF_NODE	16:42	16:42	13	)
FIELD	16:43	16:49	13	node -> child
LEAF_NODE	16:43	16:43	14	node
LEAF_NODE	16:47	16:47	14	->
LEAF_NODE	16:49	16:49	14	child
LEAF_NODE	16:54	16:54	12	)
LEAF_NODE	16:55	16:55	10	;
LEAF_NODE	17:2	17:2	8	}
EXPR_STATEMENT	23:2	23:54	6	purple_blist_remove_buddy ( ( PurpleBuddy * ) node -> child ) ;
EXPR	23:2	23:2	7	purple_blist_remove_buddy ( ( PurpleBuddy * ) node -> child )
FUNCTION_CALL	23:2	23:53	8	purple_blist_remove_buddy ( ( PurpleBuddy * ) node -> child )
CALLEE	23:2	23:2	9	purple_blist_remove_buddy
LEAF_NODE	23:2	23:2	10	purple_blist_remove_buddy
LEAF_NODE	23:27	23:27	9	(
ARGUMENT	23:28	23:42	9	( PurpleBuddy * ) node -> child
LEAF_NODE	23:28	23:28	10	(
TYPE_NAME	23:29	23:29	10	PurpleBuddy
LEAF_NODE	23:29	23:29	11	PurpleBuddy
LEAF_NODE	23:40	23:40	10	*
LEAF_NODE	23:41	23:41	10	)
FIELD	23:42	23:48	10	node -> child
LEAF_NODE	23:42	23:42	11	node
LEAF_NODE	23:46	23:46	11	->
LEAF_NODE	23:48	23:48	11	child
LEAF_NODE	23:53	23:53	9	)
LEAF_NODE	23:54	23:54	7	;
LEAF_NODE	24:1	24:1	5	}
SELECTION	24:3	24:8	3	
KEYWORD	24:3	24:3	4	else
LEAF_NODE	24:3	24:3	5	else
STATEMENTS	24:8	41:1	4	
LEAF_NODE	24:8	24:8	5	{
STATEMENTS	26:2	40:2	5	
SELECTION	26:2	27:3	6	
KEYWORD	26:2	26:2	7	if
LEAF_NODE	26:2	26:2	8	if
LEAF_NODE	26:5	26:5	7	(
CONDITION	26:6	26:6	7	gnode -> child == node
EXPR	26:6	26:22	8	gnode -> child == node
FIELD	26:6	26:13	9	gnode -> child
LEAF_NODE	26:6	26:6	10	gnode
LEAF_NODE	26:11	26:11	10	->
LEAF_NODE	26:13	26:13	10	child
EQ_OPERATOR	26:19	26:19	9	==
LEAF_NODE	26:19	26:19	10	==
FIELD	26:22	26:22	9	node
LEAF_NODE	26:22	26:22	10	node
LEAF_NODE	26:26	26:26	7	)
STATEMENTS	27:3	27:3	7	
EXPR_STATEMENT	27:3	27:28	8	gnode -> child = node -> next ;
EXPR	27:3	27:3	9	gnode -> child = node -> next
ASSIGN	27:3	27:18	10	gnode -> child = node -> next
LVAL	27:3	27:3	11	gnode -> child
FIELD	27:3	27:10	12	gnode -> child
LEAF_NODE	27:3	27:3	13	gnode
LEAF_NODE	27:8	27:8	13	->
LEAF_NODE	27:10	27:10	13	child
ASSIGN_OP	27:16	27:16	11	=
LEAF_NODE	27:16	27:16	12	=
RVAL	27:18	27:18	11	node -> next
FIELD	27:18	27:24	12	node -> next
LEAF_NODE	27:18	27:18	13	node
LEAF_NODE	27:22	27:22	13	->
LEAF_NODE	27:24	27:24	13	next
LEAF_NODE	27:28	27:28	9	;
SELECTION	28:2	29:3	6	
KEYWORD	28:2	28:2	7	if
LEAF_NODE	28:2	28:2	8	if
LEAF_NODE	28:5	28:5	7	(
CONDITION	28:6	28:6	7	node -> prev
EXPR	28:6	28:6	8	node -> prev
FIELD	28:6	28:12	9	node -> prev
LEAF_NODE	28:6	28:6	10	node
LEAF_NODE	28:10	28:10	10	->
LEAF_NODE	28:12	28:12	10	prev
LEAF_NODE	28:16	28:16	7	)
STATEMENTS	29:3	29:3	7	
EXPR_STATEMENT	29:3	29:32	8	node -> prev -> next = node -> next ;
EXPR	29:3	29:3	9	node -> prev -> next = node -> next
ASSIGN	29:3	29:22	10	node -> prev -> next = node -> next
LVAL	29:3	29:3	11	node -> prev -> next
FIELD	29:3	29:15	12	node -> prev -> next
LEAF_NODE	29:3	29:3	13	node
LEAF_NODE	29:7	29:7	13	->
LEAF_NODE	29:9	29:9	13	prev
LEAF_NODE	29:13	29:13	13	->
LEAF_NODE	29:15	29:15	13	next
ASSIGN_OP	29:20	29:20	11	=
LEAF_NODE	29:20	29:20	12	=
RVAL	29:22	29:22	11	node -> next
FIELD	29:22	29:28	12	node -> next
LEAF_NODE	29:22	29:22	13	node
LEAF_NODE	29:26	29:26	13	->
LEAF_NODE	29:28	29:28	13	next
LEAF_NODE	29:32	29:32	9	;
SELECTION	30:2	31:3	6	
KEYWORD	30:2	30:2	7	if
LEAF_NODE	30:2	30:2	8	if
LEAF_NODE	30:5	30:5	7	(
CONDITION	30:6	30:6	7	node -> next
EXPR	30:6	30:6	8	node -> next
FIELD	30:6	30:12	9	node -> next
LEAF_NODE	30:6	30:6	10	node
LEAF_NODE	30:10	30:10	10	->
LEAF_NODE	30:12	30:12	10	next
LEAF_NODE	30:16	30:16	7	)
STATEMENTS	31:3	31:3	7	
EXPR_STATEMENT	31:3	31:32	8	node -> next -> prev = node -> prev ;
EXPR	31:3	31:3	9	node -> next -> prev = node -> prev
ASSIGN	31:3	31:22	10	node -> next -> prev = node -> prev
LVAL	31:3	31:3	11	node -> next -> prev
FIELD	31:3	31:15	12	node -> next -> prev
LEAF_NODE	31:3	31:3	13	node
LEAF_NODE	31:7	31:7	13	->
LEAF_NODE	31:9	31:9	13	next
LEAF_NODE	31:13	31:13	13	->
LEAF_NODE	31:15	31:15	13	prev
ASSIGN_OP	31:20	31:20	11	=
LEAF_NODE	31:20	31:20	12	=
RVAL	31:22	31:22	11	node -> prev
FIELD	31:22	31:28	12	node -> prev
LEAF_NODE	31:22	31:22	13	node
LEAF_NODE	31:26	31:26	13	->
LEAF_NODE	31:28	31:28	13	prev
LEAF_NODE	31:32	31:32	9	;
SELECTION	33:2	34:3	6	
KEYWORD	33:2	33:2	7	if
LEAF_NODE	33:2	33:2	8	if
LEAF_NODE	33:5	33:5	7	(
CONDITION	33:6	33:6	7	ops && ops -> remove
EXPR	33:6	33:6	8	ops && ops -> remove
AND	33:6	33:13	9	ops && ops -> remove
EXPR	33:6	33:6	10	ops
FIELD	33:6	33:6	11	ops
LEAF_NODE	33:6	33:6	12	ops
LEAF_NODE	33:10	33:10	10	&&
EXPR	33:13	33:13	10	ops -> remove
FIELD	33:13	33:18	11	ops -> remove
LEAF_NODE	33:13	33:13	12	ops
LEAF_NODE	33:16	33:16	12	->
LEAF_NODE	33:18	33:18	12	remove
LEAF_NODE	33:24	33:24	7	)
STATEMENTS	34:3	34:3	7	
EXPR_STATEMENT	34:3	34:37	8	ops -> remove ( purplebuddylist , node ) ;
EXPR	34:3	34:3	9	ops -> remove ( purplebuddylist , node )
FUNCTION_CALL	34:3	34:36	10	ops -> remove ( purplebuddylist , node )
CALLEE	34:3	34:8	11	ops -> remove
LEAF_NODE	34:3	34:3	12	ops
LEAF_NODE	34:6	34:6	12	->
LEAF_NODE	34:8	34:8	12	remove
LEAF_NODE	34:14	34:14	11	(
ARGUMENT	34:15	34:15	11	purplebuddylist
FIELD	34:15	34:15	12	purplebuddylist
LEAF_NODE	34:15	34:15	13	purplebuddylist
LEAF_NODE	34:30	34:30	11	,
ARGUMENT	34:32	34:32	11	node
FIELD	34:32	34:32	12	node
LEAF_NODE	34:32	34:32	13	node
LEAF_NODE	34:36	34:36	11	)
LEAF_NODE	34:37	34:37	9	;
SELECTION	35:2	36:3	6	
KEYWORD	35:2	35:2	7	if
LEAF_NODE	35:2	35:2	8	if
LEAF_NODE	35:5	35:5	7	(
CONDITION	35:6	35:6	7	ops && ops -> remove_node
EXPR	35:6	35:6	8	ops && ops -> remove_node
AND	35:6	35:13	9	ops && ops -> remove_node
EXPR	35:6	35:6	10	ops
FIELD	35:6	35:6	11	ops
LEAF_NODE	35:6	35:6	12	ops
LEAF_NODE	35:10	35:10	10	&&
EXPR	35:13	35:13	10	ops -> remove_node
FIELD	35:13	35:18	11	ops -> remove_node
LEAF_NODE	35:13	35:13	12	ops
LEAF_NODE	35:16	35:16	12	->
LEAF_NODE	35:18	35:18	12	remove_node
LEAF_NODE	35:29	35:29	7	)
STATEMENTS	36:3	36:3	7	
EXPR_STATEMENT	36:3	36:25	8	ops -> remove_node ( node ) ;
EXPR	36:3	36:3	9	ops -> remove_node ( node )
FUNCTION_CALL	36:3	36:24	10	ops -> remove_node ( node )
CALLEE	36:3	36:8	11	ops -> remove_node
LEAF_NODE	36:3	36:3	12	ops
LEAF_NODE	36:6	36:6	12	->
LEAF_NODE	36:8	36:8	12	remove_node
LEAF_NODE	36:19	36:19	11	(
ARGUMENT	36:20	36:20	11	node
FIELD	36:20	36:20	12	node
LEAF_NODE	36:20	36:20	13	node
LEAF_NODE	36:24	36:24	11	)
LEAF_NODE	36:25	36:25	9	;
EXPR_STATEMENT	37:2	38:31	6	purple_signal_emit ( purple_blist_get_handle ( ) , "blist-node-removed" , PURPLE_BLIST_NODE ( contact ) ) ;
EXPR	37:2	37:2	7	purple_signal_emit ( purple_blist_get_handle ( ) , "blist-node-removed" , PURPLE_BLIST_NODE ( contact ) )
FUNCTION_CALL	37:2	38:30	8	purple_signal_emit ( purple_blist_get_handle ( ) , "blist-node-removed" , PURPLE_BLIST_NODE ( contact ) )
CALLEE	37:2	37:2	9	purple_signal_emit
LEAF_NODE	37:2	37:2	10	purple_signal_emit
LEAF_NODE	37:20	37:20	9	(
ARGUMENT	37:21	37:21	9	purple_blist_get_handle ( )
FUNCTION_CALL	37:21	37:45	10	purple_blist_get_handle ( )
CALLEE	37:21	37:21	11	purple_blist_get_handle
LEAF_NODE	37:21	37:21	12	purple_blist_get_handle
LEAF_NODE	37:44	37:44	11	(
LEAF_NODE	37:45	37:45	11	)
LEAF_NODE	37:46	37:46	9	,
ARGUMENT	37:48	37:48	9	"blist-node-removed"
FIELD	37:48	37:48	10	"blist-node-removed"
LEAF_NODE	37:48	37:48	11	"blist-node-removed"
LEAF_NODE	37:68	37:68	9	,
ARGUMENT	38:4	38:4	9	PURPLE_BLIST_NODE ( contact )
FUNCTION_CALL	38:4	38:29	10	PURPLE_BLIST_NODE ( contact )
CALLEE	38:4	38:4	11	PURPLE_BLIST_NODE
LEAF_NODE	38:4	38:4	12	PURPLE_BLIST_NODE
LEAF_NODE	38:21	38:21	11	(
ARGUMENT	38:22	38:22	11	contact
FIELD	38:22	38:22	12	contact
LEAF_NODE	38:22	38:22	13	contact
LEAF_NODE	38:29	38:29	11	)
LEAF_NODE	38:30	38:30	9	)
LEAF_NODE	38:31	38:31	7	;
EXPR_STATEMENT	40:2	40:33	6	purple_contact_destroy ( contact ) ;
EXPR	40:2	40:2	7	purple_contact_destroy ( contact )
FUNCTION_CALL	40:2	40:32	8	purple_contact_destroy ( contact )
CALLEE	40:2	40:2	9	purple_contact_destroy
LEAF_NODE	40:2	40:2	10	purple_contact_destroy
LEAF_NODE	40:24	40:24	9	(
ARGUMENT	40:25	40:25	9	contact
FIELD	40:25	40:25	10	contact
LEAF_NODE	40:25	40:25	11	contact
LEAF_NODE	40:32	40:32	9	)
LEAF_NODE	40:33	40:33	7	;
LEAF_NODE	41:1	41:1	5	}
LEAF_NODE	42:0	42:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	12:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	des_ecb_encrypt
LEAF_NODE	2:0	2:0	3	des_ecb_encrypt
PARAMETER_LIST	2:15	2:74	2	( const guint8 * plaintext , guint8 * result , const guint8 * key )
LEAF_NODE	2:15	2:15	3	(
PARAMETER_DECL	2:16	2:30	3	const guint8 * plaintext
TYPE	2:16	2:29	4	const guint8 *
TYPE_NAME	2:16	2:22	5	const guint8
LEAF_NODE	2:16	2:16	6	const
LEAF_NODE	2:22	2:22	6	guint8
POINTER	2:29	2:29	5	*
LEAF_NODE	2:29	2:29	6	*
NAME	2:30	2:30	4	plaintext
LEAF_NODE	2:30	2:30	5	plaintext
LEAF_NODE	2:39	2:39	3	,
PARAMETER_DECL	2:41	2:49	3	guint8 * result
TYPE	2:41	2:48	4	guint8 *
TYPE_NAME	2:41	2:41	5	guint8
LEAF_NODE	2:41	2:41	6	guint8
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	result
LEAF_NODE	2:49	2:49	5	result
LEAF_NODE	2:55	2:55	3	,
PARAMETER_DECL	2:57	2:71	3	const guint8 * key
TYPE	2:57	2:70	4	const guint8 *
TYPE_NAME	2:57	2:63	5	const guint8
LEAF_NODE	2:57	2:57	6	const
LEAF_NODE	2:63	2:63	6	guint8
POINTER	2:70	2:70	5	*
LEAF_NODE	2:70	2:70	6	*
NAME	2:71	2:71	4	key
LEAF_NODE	2:71	2:71	5	key
LEAF_NODE	2:74	2:74	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	11:1	2	
SIMPLE_DECL	4:1	4:21	3	PurpleCipher * cipher ;
VAR_DECL	4:1	4:15	4	PurpleCipher * cipher
TYPE	4:1	4:14	5	PurpleCipher *
TYPE_NAME	4:1	4:1	6	PurpleCipher
LEAF_NODE	4:1	4:1	7	PurpleCipher
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	cipher
LEAF_NODE	4:15	4:15	6	cipher
LEAF_NODE	4:21	4:21	4	;
SIMPLE_DECL	5:1	5:29	3	PurpleCipherContext * context ;
VAR_DECL	5:1	5:22	4	PurpleCipherContext * context
TYPE	5:1	5:21	5	PurpleCipherContext *
TYPE_NAME	5:1	5:1	6	PurpleCipherContext
LEAF_NODE	5:1	5:1	7	PurpleCipherContext
POINTER	5:21	5:21	6	*
LEAF_NODE	5:21	5:21	7	*
NAME	5:22	5:22	5	context
LEAF_NODE	5:22	5:22	6	context
LEAF_NODE	5:29	5:29	4	;
SIMPLE_DECL	6:1	6:14	3	size_t outlen ;
VAR_DECL	6:1	6:8	4	size_t outlen
TYPE	6:1	6:1	5	size_t
TYPE_NAME	6:1	6:1	6	size_t
LEAF_NODE	6:1	6:1	7	size_t
NAME	6:8	6:8	5	outlen
LEAF_NODE	6:8	6:8	6	outlen
LEAF_NODE	6:14	6:14	4	;
EXPR_STATEMENT	7:1	7:43	3	cipher = purple_ciphers_find_cipher ( "des" ) ;
EXPR	7:1	7:1	4	cipher = purple_ciphers_find_cipher ( "des" )
ASSIGN	7:1	7:10	5	cipher = purple_ciphers_find_cipher ( "des" )
LVAL	7:1	7:1	6	cipher
FIELD	7:1	7:1	7	cipher
LEAF_NODE	7:1	7:1	8	cipher
ASSIGN_OP	7:8	7:8	6	=
LEAF_NODE	7:8	7:8	7	=
RVAL	7:10	7:10	6	purple_ciphers_find_cipher ( "des" )
FUNCTION_CALL	7:10	7:42	7	purple_ciphers_find_cipher ( "des" )
CALLEE	7:10	7:10	8	purple_ciphers_find_cipher
LEAF_NODE	7:10	7:10	9	purple_ciphers_find_cipher
LEAF_NODE	7:36	7:36	8	(
ARGUMENT	7:37	7:37	8	"des"
FIELD	7:37	7:37	9	"des"
LEAF_NODE	7:37	7:37	10	"des"
LEAF_NODE	7:42	7:42	8	)
LEAF_NODE	7:43	7:43	4	;
EXPR_STATEMENT	8:1	8:50	3	context = purple_cipher_context_new ( cipher , NULL ) ;
EXPR	8:1	8:1	4	context = purple_cipher_context_new ( cipher , NULL )
ASSIGN	8:1	8:11	5	context = purple_cipher_context_new ( cipher , NULL )
LVAL	8:1	8:1	6	context
FIELD	8:1	8:1	7	context
LEAF_NODE	8:1	8:1	8	context
ASSIGN_OP	8:9	8:9	6	=
LEAF_NODE	8:9	8:9	7	=
RVAL	8:11	8:11	6	purple_cipher_context_new ( cipher , NULL )
FUNCTION_CALL	8:11	8:49	7	purple_cipher_context_new ( cipher , NULL )
CALLEE	8:11	8:11	8	purple_cipher_context_new
LEAF_NODE	8:11	8:11	9	purple_cipher_context_new
LEAF_NODE	8:36	8:36	8	(
ARGUMENT	8:37	8:37	8	cipher
FIELD	8:37	8:37	9	cipher
LEAF_NODE	8:37	8:37	10	cipher
LEAF_NODE	8:43	8:43	8	,
ARGUMENT	8:45	8:45	8	NULL
FIELD	8:45	8:45	9	NULL
LEAF_NODE	8:45	8:45	10	NULL
LEAF_NODE	8:49	8:49	8	)
LEAF_NODE	8:50	8:50	4	;
EXPR_STATEMENT	9:1	9:44	3	purple_cipher_context_set_key ( context , key ) ;
EXPR	9:1	9:1	4	purple_cipher_context_set_key ( context , key )
FUNCTION_CALL	9:1	9:43	5	purple_cipher_context_set_key ( context , key )
CALLEE	9:1	9:1	6	purple_cipher_context_set_key
LEAF_NODE	9:1	9:1	7	purple_cipher_context_set_key
LEAF_NODE	9:30	9:30	6	(
ARGUMENT	9:31	9:31	6	context
FIELD	9:31	9:31	7	context
LEAF_NODE	9:31	9:31	8	context
LEAF_NODE	9:38	9:38	6	,
ARGUMENT	9:40	9:40	6	key
FIELD	9:40	9:40	7	key
LEAF_NODE	9:40	9:40	8	key
LEAF_NODE	9:43	9:43	6	)
LEAF_NODE	9:44	9:44	4	;
EXPR_STATEMENT	10:1	10:70	3	purple_cipher_context_encrypt ( context , plaintext , 8 , result , & outlen ) ;
EXPR	10:1	10:1	4	purple_cipher_context_encrypt ( context , plaintext , 8 , result , & outlen )
FUNCTION_CALL	10:1	10:69	5	purple_cipher_context_encrypt ( context , plaintext , 8 , result , & outlen )
CALLEE	10:1	10:1	6	purple_cipher_context_encrypt
LEAF_NODE	10:1	10:1	7	purple_cipher_context_encrypt
LEAF_NODE	10:30	10:30	6	(
ARGUMENT	10:31	10:31	6	context
FIELD	10:31	10:31	7	context
LEAF_NODE	10:31	10:31	8	context
LEAF_NODE	10:38	10:38	6	,
ARGUMENT	10:40	10:40	6	plaintext
FIELD	10:40	10:40	7	plaintext
LEAF_NODE	10:40	10:40	8	plaintext
LEAF_NODE	10:49	10:49	6	,
ARGUMENT	10:51	10:51	6	8
FIELD	10:51	10:51	7	8
LEAF_NODE	10:51	10:51	8	8
LEAF_NODE	10:52	10:52	6	,
ARGUMENT	10:54	10:54	6	result
FIELD	10:54	10:54	7	result
LEAF_NODE	10:54	10:54	8	result
LEAF_NODE	10:60	10:60	6	,
ARGUMENT	10:62	10:62	6	& outlen
UNARY_EXPR	10:62	10:63	7	& outlen
UNARY_OPERATOR	10:62	10:62	8	&
LEAF_NODE	10:62	10:62	9	&
FIELD	10:63	10:63	8	outlen
LEAF_NODE	10:63	10:63	9	outlen
LEAF_NODE	10:69	10:69	6	)
LEAF_NODE	10:70	10:70	4	;
EXPR_STATEMENT	11:1	11:39	3	purple_cipher_context_destroy ( context ) ;
EXPR	11:1	11:1	4	purple_cipher_context_destroy ( context )
FUNCTION_CALL	11:1	11:38	5	purple_cipher_context_destroy ( context )
CALLEE	11:1	11:1	6	purple_cipher_context_destroy
LEAF_NODE	11:1	11:1	7	purple_cipher_context_destroy
LEAF_NODE	11:30	11:30	6	(
ARGUMENT	11:31	11:31	6	context
FIELD	11:31	11:31	7	context
LEAF_NODE	11:31	11:31	8	context
LEAF_NODE	11:38	11:38	6	)
LEAF_NODE	11:39	11:39	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:0	2	gboolean
TYPE_NAME	1:0	1:0	3	gboolean
LEAF_NODE	1:0	1:0	4	gboolean
FUNCTION_NAME	2:0	2:0	2	gnt_bindable_check_key
LEAF_NODE	2:0	2:0	3	gnt_bindable_check_key
PARAMETER_LIST	2:22	2:62	2	( GntBindable * bindable , const char * keys )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:36	3	GntBindable * bindable
TYPE	2:23	2:35	4	GntBindable *
TYPE_NAME	2:23	2:23	5	GntBindable
LEAF_NODE	2:23	2:23	6	GntBindable
POINTER	2:35	2:35	5	*
LEAF_NODE	2:35	2:35	6	*
NAME	2:36	2:36	4	bindable
LEAF_NODE	2:36	2:36	5	bindable
LEAF_NODE	2:44	2:44	3	,
PARAMETER_DECL	2:46	2:58	3	const char * keys
TYPE	2:46	2:57	4	const char *
TYPE_NAME	2:46	2:52	5	const char
LEAF_NODE	2:46	2:46	6	const
LEAF_NODE	2:52	2:52	6	char
POINTER	2:57	2:57	5	*
LEAF_NODE	2:57	2:57	6	*
NAME	2:58	2:58	4	keys
LEAF_NODE	2:58	2:58	5	keys
LEAF_NODE	2:62	2:62	3	)
LEAF_NODE	2:64	2:64	2	{
STATEMENTS	3:1	5:1	2	
SIMPLE_DECL	3:1	3:79	3	GntBindableClass * klass ; klass = GNT_BINDABLE_CLASS ( GNT_BINDABLE_GET_CLASS ( bindable ) ) ;
VAR_DECL	3:1	3:19	4	GntBindableClass * klass ; klass = GNT_BINDABLE_CLASS ( GNT_BINDABLE_GET_CLASS ( bindable ) )
TYPE	3:1	3:18	5	GntBindableClass *
TYPE_NAME	3:1	3:1	6	GntBindableClass
LEAF_NODE	3:1	3:1	7	GntBindableClass
POINTER	3:18	3:18	6	*
LEAF_NODE	3:18	3:18	7	*
NAME	3:19	3:19	5	klass
LEAF_NODE	3:19	3:19	6	klass
LEAF_NODE	0:0	0:0	5	;
INIT	3:19	3:19	5	klass = GNT_BINDABLE_CLASS ( GNT_BINDABLE_GET_CLASS ( bindable ) )
ASSIGN	3:19	3:27	6	klass = GNT_BINDABLE_CLASS ( GNT_BINDABLE_GET_CLASS ( bindable ) )
LVAL	3:19	3:19	7	klass
NAME	3:19	3:19	8	klass
LEAF_NODE	3:19	3:19	9	klass
ASSIGN_OP	3:25	3:25	7	=
LEAF_NODE	3:25	3:25	8	=
RVAL	3:27	3:27	7	GNT_BINDABLE_CLASS ( GNT_BINDABLE_GET_CLASS ( bindable ) )
FUNCTION_CALL	3:27	3:78	8	GNT_BINDABLE_CLASS ( GNT_BINDABLE_GET_CLASS ( bindable ) )
CALLEE	3:27	3:27	9	GNT_BINDABLE_CLASS
LEAF_NODE	3:27	3:27	10	GNT_BINDABLE_CLASS
LEAF_NODE	3:45	3:45	9	(
ARGUMENT	3:46	3:46	9	GNT_BINDABLE_GET_CLASS ( bindable )
FUNCTION_CALL	3:46	3:77	10	GNT_BINDABLE_GET_CLASS ( bindable )
CALLEE	3:46	3:46	11	GNT_BINDABLE_GET_CLASS
LEAF_NODE	3:46	3:46	12	GNT_BINDABLE_GET_CLASS
LEAF_NODE	3:68	3:68	11	(
ARGUMENT	3:69	3:69	11	bindable
FIELD	3:69	3:69	12	bindable
LEAF_NODE	3:69	3:69	13	bindable
LEAF_NODE	3:77	3:77	11	)
LEAF_NODE	3:78	3:78	9	)
LEAF_NODE	3:79	3:79	4	;
SIMPLE_DECL	4:1	4:75	3	GntBindableActionParam * param ; param = g_hash_table_lookup ( klass -> bindings , keys ) ;
VAR_DECL	4:1	4:25	4	GntBindableActionParam * param ; param = g_hash_table_lookup ( klass -> bindings , keys )
TYPE	4:1	4:24	5	GntBindableActionParam *
TYPE_NAME	4:1	4:1	6	GntBindableActionParam
LEAF_NODE	4:1	4:1	7	GntBindableActionParam
POINTER	4:24	4:24	6	*
LEAF_NODE	4:24	4:24	7	*
NAME	4:25	4:25	5	param
LEAF_NODE	4:25	4:25	6	param
LEAF_NODE	0:0	0:0	5	;
INIT	4:25	4:25	5	param = g_hash_table_lookup ( klass -> bindings , keys )
ASSIGN	4:25	4:33	6	param = g_hash_table_lookup ( klass -> bindings , keys )
LVAL	4:25	4:25	7	param
NAME	4:25	4:25	8	param
LEAF_NODE	4:25	4:25	9	param
ASSIGN_OP	4:31	4:31	7	=
LEAF_NODE	4:31	4:31	8	=
RVAL	4:33	4:33	7	g_hash_table_lookup ( klass -> bindings , keys )
FUNCTION_CALL	4:33	4:74	8	g_hash_table_lookup ( klass -> bindings , keys )
CALLEE	4:33	4:33	9	g_hash_table_lookup
LEAF_NODE	4:33	4:33	10	g_hash_table_lookup
LEAF_NODE	4:52	4:52	9	(
ARGUMENT	4:53	4:53	9	klass -> bindings
FIELD	4:53	4:60	10	klass -> bindings
LEAF_NODE	4:53	4:53	11	klass
LEAF_NODE	4:58	4:58	11	->
LEAF_NODE	4:60	4:60	11	bindings
LEAF_NODE	4:68	4:68	9	,
ARGUMENT	4:70	4:70	9	keys
FIELD	4:70	4:70	10	keys
LEAF_NODE	4:70	4:70	11	keys
LEAF_NODE	4:74	4:74	9	)
LEAF_NODE	4:75	4:75	4	;
JUMP_STATEMENT	5:1	5:32	3	return ( param && param -> action ) ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	( param && param -> action )
EXPR	5:8	5:31	5	( param && param -> action )
LEAF_NODE	5:8	5:8	6	(
AND	5:9	5:18	6	param && param -> action
EXPR	5:9	5:9	7	param
FIELD	5:9	5:9	8	param
LEAF_NODE	5:9	5:9	9	param
LEAF_NODE	5:15	5:15	7	&&
EXPR	5:18	5:18	7	param -> action
FIELD	5:18	5:25	8	param -> action
LEAF_NODE	5:18	5:18	9	param
LEAF_NODE	5:23	5:23	9	->
LEAF_NODE	5:25	5:25	9	action
LEAF_NODE	5:31	5:31	6	)
LEAF_NODE	5:32	5:32	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	16:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	gnt_wm_raise_window
LEAF_NODE	2:5	2:5	3	gnt_wm_raise_window
PARAMETER_LIST	2:24	2:53	2	( GntWM * wm , GntWidget * widget )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:32	3	GntWM * wm
TYPE	2:25	2:31	4	GntWM *
TYPE_NAME	2:25	2:25	5	GntWM
LEAF_NODE	2:25	2:25	6	GntWM
POINTER	2:31	2:31	5	*
LEAF_NODE	2:31	2:31	6	*
NAME	2:32	2:32	4	wm
LEAF_NODE	2:32	2:32	5	wm
LEAF_NODE	2:34	2:34	3	,
PARAMETER_DECL	2:36	2:47	3	GntWidget * widget
TYPE	2:36	2:46	4	GntWidget *
TYPE_NAME	2:36	2:36	5	GntWidget
LEAF_NODE	2:36	2:36	6	GntWidget
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	widget
LEAF_NODE	2:47	2:47	5	widget
LEAF_NODE	2:53	2:53	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	15:1	2	
SIMPLE_DECL	4:1	4:53	3	GntWS * ws ; ws = gnt_wm_widget_find_workspace ( wm , widget ) ;
VAR_DECL	4:1	4:8	4	GntWS * ws ; ws = gnt_wm_widget_find_workspace ( wm , widget )
TYPE	4:1	4:7	5	GntWS *
TYPE_NAME	4:1	4:1	6	GntWS
LEAF_NODE	4:1	4:1	7	GntWS
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	ws
LEAF_NODE	4:8	4:8	6	ws
LEAF_NODE	0:0	0:0	5	;
INIT	4:8	4:8	5	ws = gnt_wm_widget_find_workspace ( wm , widget )
ASSIGN	4:8	4:13	6	ws = gnt_wm_widget_find_workspace ( wm , widget )
LVAL	4:8	4:8	7	ws
NAME	4:8	4:8	8	ws
LEAF_NODE	4:8	4:8	9	ws
ASSIGN_OP	4:11	4:11	7	=
LEAF_NODE	4:11	4:11	8	=
RVAL	4:13	4:13	7	gnt_wm_widget_find_workspace ( wm , widget )
FUNCTION_CALL	4:13	4:52	8	gnt_wm_widget_find_workspace ( wm , widget )
CALLEE	4:13	4:13	9	gnt_wm_widget_find_workspace
LEAF_NODE	4:13	4:13	10	gnt_wm_widget_find_workspace
LEAF_NODE	4:41	4:41	9	(
ARGUMENT	4:42	4:42	9	wm
FIELD	4:42	4:42	10	wm
LEAF_NODE	4:42	4:42	11	wm
LEAF_NODE	4:44	4:44	9	,
ARGUMENT	4:46	4:46	9	widget
FIELD	4:46	4:46	10	widget
LEAF_NODE	4:46	4:46	11	widget
LEAF_NODE	4:52	4:52	9	)
LEAF_NODE	4:53	4:53	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	wm -> cws != ws
EXPR	5:5	5:16	5	wm -> cws != ws
FIELD	5:5	5:9	6	wm -> cws
LEAF_NODE	5:5	5:5	7	wm
LEAF_NODE	5:7	5:7	7	->
LEAF_NODE	5:9	5:9	7	cws
EQ_OPERATOR	5:13	5:13	6	!=
LEAF_NODE	5:13	5:13	7	!=
FIELD	5:16	5:16	6	ws
LEAF_NODE	5:16	5:16	7	ws
LEAF_NODE	5:18	5:18	4	)
STATEMENTS	6:2	6:2	4	
EXPR_STATEMENT	6:2	6:63	5	gnt_wm_switch_workspace ( wm , g_list_index ( wm -> workspaces , ws ) ) ;
EXPR	6:2	6:2	6	gnt_wm_switch_workspace ( wm , g_list_index ( wm -> workspaces , ws ) )
FUNCTION_CALL	6:2	6:62	7	gnt_wm_switch_workspace ( wm , g_list_index ( wm -> workspaces , ws ) )
CALLEE	6:2	6:2	8	gnt_wm_switch_workspace
LEAF_NODE	6:2	6:2	9	gnt_wm_switch_workspace
LEAF_NODE	6:25	6:25	8	(
ARGUMENT	6:26	6:26	8	wm
FIELD	6:26	6:26	9	wm
LEAF_NODE	6:26	6:26	10	wm
LEAF_NODE	6:28	6:28	8	,
ARGUMENT	6:30	6:30	8	g_list_index ( wm -> workspaces , ws )
FUNCTION_CALL	6:30	6:61	9	g_list_index ( wm -> workspaces , ws )
CALLEE	6:30	6:30	10	g_list_index
LEAF_NODE	6:30	6:30	11	g_list_index
LEAF_NODE	6:42	6:42	10	(
ARGUMENT	6:43	6:43	10	wm -> workspaces
FIELD	6:43	6:47	11	wm -> workspaces
LEAF_NODE	6:43	6:43	12	wm
LEAF_NODE	6:45	6:45	12	->
LEAF_NODE	6:47	6:47	12	workspaces
LEAF_NODE	6:57	6:57	10	,
ARGUMENT	6:59	6:59	10	ws
FIELD	6:59	6:59	11	ws
LEAF_NODE	6:59	6:59	12	ws
LEAF_NODE	6:61	6:61	10	)
LEAF_NODE	6:62	6:62	8	)
LEAF_NODE	6:63	6:63	6	;
SELECTION	7:1	7:39	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	widget != wm -> cws -> ordered -> data
EXPR	7:5	7:15	5	widget != wm -> cws -> ordered -> data
FIELD	7:5	7:5	6	widget
LEAF_NODE	7:5	7:5	7	widget
EQ_OPERATOR	7:12	7:12	6	!=
LEAF_NODE	7:12	7:12	7	!=
FIELD	7:15	7:33	6	wm -> cws -> ordered -> data
LEAF_NODE	7:15	7:15	7	wm
LEAF_NODE	7:17	7:17	7	->
LEAF_NODE	7:19	7:19	7	cws
LEAF_NODE	7:22	7:22	7	->
LEAF_NODE	7:24	7:24	7	ordered
LEAF_NODE	7:31	7:31	7	->
LEAF_NODE	7:33	7:33	7	data
LEAF_NODE	7:37	7:37	4	)
STATEMENTS	7:39	12:1	4	
LEAF_NODE	7:39	7:39	5	{
STATEMENTS	8:2	11:2	5	
SIMPLE_DECL	8:2	8:41	6	GntWidget * wid ; wid = wm -> cws -> ordered -> data ;
VAR_DECL	8:2	8:13	7	GntWidget * wid ; wid = wm -> cws -> ordered -> data
TYPE	8:2	8:12	8	GntWidget *
TYPE_NAME	8:2	8:2	9	GntWidget
LEAF_NODE	8:2	8:2	10	GntWidget
POINTER	8:12	8:12	9	*
LEAF_NODE	8:12	8:12	10	*
NAME	8:13	8:13	8	wid
LEAF_NODE	8:13	8:13	9	wid
LEAF_NODE	0:0	0:0	8	;
INIT	8:13	8:13	8	wid = wm -> cws -> ordered -> data
ASSIGN	8:13	8:19	9	wid = wm -> cws -> ordered -> data
LVAL	8:13	8:13	10	wid
NAME	8:13	8:13	11	wid
LEAF_NODE	8:13	8:13	12	wid
ASSIGN_OP	8:17	8:17	10	=
LEAF_NODE	8:17	8:17	11	=
RVAL	8:19	8:19	10	wm -> cws -> ordered -> data
FIELD	8:19	8:37	11	wm -> cws -> ordered -> data
LEAF_NODE	8:19	8:19	12	wm
LEAF_NODE	8:21	8:21	12	->
LEAF_NODE	8:23	8:23	12	cws
LEAF_NODE	8:26	8:26	12	->
LEAF_NODE	8:28	8:28	12	ordered
LEAF_NODE	8:35	8:35	12	->
LEAF_NODE	8:37	8:37	12	data
LEAF_NODE	8:41	8:41	7	;
EXPR_STATEMENT	9:2	9:68	6	wm -> cws -> ordered = g_list_bring_to_front ( wm -> cws -> ordered , widget ) ;
EXPR	9:2	9:2	7	wm -> cws -> ordered = g_list_bring_to_front ( wm -> cws -> ordered , widget )
ASSIGN	9:2	9:21	8	wm -> cws -> ordered = g_list_bring_to_front ( wm -> cws -> ordered , widget )
LVAL	9:2	9:2	9	wm -> cws -> ordered
FIELD	9:2	9:11	10	wm -> cws -> ordered
LEAF_NODE	9:2	9:2	11	wm
LEAF_NODE	9:4	9:4	11	->
LEAF_NODE	9:6	9:6	11	cws
LEAF_NODE	9:9	9:9	11	->
LEAF_NODE	9:11	9:11	11	ordered
ASSIGN_OP	9:19	9:19	9	=
LEAF_NODE	9:19	9:19	10	=
RVAL	9:21	9:21	9	g_list_bring_to_front ( wm -> cws -> ordered , widget )
FUNCTION_CALL	9:21	9:67	10	g_list_bring_to_front ( wm -> cws -> ordered , widget )
CALLEE	9:21	9:21	11	g_list_bring_to_front
LEAF_NODE	9:21	9:21	12	g_list_bring_to_front
LEAF_NODE	9:42	9:42	11	(
ARGUMENT	9:43	9:43	11	wm -> cws -> ordered
FIELD	9:43	9:52	12	wm -> cws -> ordered
LEAF_NODE	9:43	9:43	13	wm
LEAF_NODE	9:45	9:45	13	->
LEAF_NODE	9:47	9:47	13	cws
LEAF_NODE	9:50	9:50	13	->
LEAF_NODE	9:52	9:52	13	ordered
LEAF_NODE	9:59	9:59	11	,
ARGUMENT	9:61	9:61	11	widget
FIELD	9:61	9:61	12	widget
LEAF_NODE	9:61	9:61	13	widget
LEAF_NODE	9:67	9:67	11	)
LEAF_NODE	9:68	9:68	7	;
EXPR_STATEMENT	10:2	10:34	6	gnt_widget_set_focus ( wid , FALSE ) ;
EXPR	10:2	10:2	7	gnt_widget_set_focus ( wid , FALSE )
FUNCTION_CALL	10:2	10:33	8	gnt_widget_set_focus ( wid , FALSE )
CALLEE	10:2	10:2	9	gnt_widget_set_focus
LEAF_NODE	10:2	10:2	10	gnt_widget_set_focus
LEAF_NODE	10:22	10:22	9	(
ARGUMENT	10:23	10:23	9	wid
FIELD	10:23	10:23	10	wid
LEAF_NODE	10:23	10:23	11	wid
LEAF_NODE	10:26	10:26	9	,
ARGUMENT	10:28	10:28	9	FALSE
FIELD	10:28	10:28	10	FALSE
LEAF_NODE	10:28	10:28	11	FALSE
LEAF_NODE	10:33	10:33	9	)
LEAF_NODE	10:34	10:34	7	;
EXPR_STATEMENT	11:2	11:22	6	gnt_widget_draw ( wid ) ;
EXPR	11:2	11:2	7	gnt_widget_draw ( wid )
FUNCTION_CALL	11:2	11:21	8	gnt_widget_draw ( wid )
CALLEE	11:2	11:2	9	gnt_widget_draw
LEAF_NODE	11:2	11:2	10	gnt_widget_draw
LEAF_NODE	11:17	11:17	9	(
ARGUMENT	11:18	11:18	9	wid
FIELD	11:18	11:18	10	wid
LEAF_NODE	11:18	11:18	11	wid
LEAF_NODE	11:21	11:21	9	)
LEAF_NODE	11:22	11:22	7	;
LEAF_NODE	12:1	12:1	5	}
EXPR_STATEMENT	13:1	13:35	3	gnt_widget_set_focus ( widget , TRUE ) ;
EXPR	13:1	13:1	4	gnt_widget_set_focus ( widget , TRUE )
FUNCTION_CALL	13:1	13:34	5	gnt_widget_set_focus ( widget , TRUE )
CALLEE	13:1	13:1	6	gnt_widget_set_focus
LEAF_NODE	13:1	13:1	7	gnt_widget_set_focus
LEAF_NODE	13:21	13:21	6	(
ARGUMENT	13:22	13:22	6	widget
FIELD	13:22	13:22	7	widget
LEAF_NODE	13:22	13:22	8	widget
LEAF_NODE	13:28	13:28	6	,
ARGUMENT	13:30	13:30	6	TRUE
FIELD	13:30	13:30	7	TRUE
LEAF_NODE	13:30	13:30	8	TRUE
LEAF_NODE	13:34	13:34	6	)
LEAF_NODE	13:35	13:35	4	;
EXPR_STATEMENT	14:1	14:24	3	gnt_widget_draw ( widget ) ;
EXPR	14:1	14:1	4	gnt_widget_draw ( widget )
FUNCTION_CALL	14:1	14:23	5	gnt_widget_draw ( widget )
CALLEE	14:1	14:1	6	gnt_widget_draw
LEAF_NODE	14:1	14:1	7	gnt_widget_draw
LEAF_NODE	14:16	14:16	6	(
ARGUMENT	14:17	14:17	6	widget
FIELD	14:17	14:17	7	widget
LEAF_NODE	14:17	14:17	8	widget
LEAF_NODE	14:23	14:23	6	)
LEAF_NODE	14:24	14:24	4	;
EXPR_STATEMENT	15:1	15:54	3	g_signal_emit ( wm , signals [ SIG_GIVE_FOCUS ] , 0 , widget ) ;
EXPR	15:1	15:1	4	g_signal_emit ( wm , signals [ SIG_GIVE_FOCUS ] , 0 , widget )
FUNCTION_CALL	15:1	15:53	5	g_signal_emit ( wm , signals [ SIG_GIVE_FOCUS ] , 0 , widget )
CALLEE	15:1	15:1	6	g_signal_emit
LEAF_NODE	15:1	15:1	7	g_signal_emit
LEAF_NODE	15:14	15:14	6	(
ARGUMENT	15:15	15:15	6	wm
FIELD	15:15	15:15	7	wm
LEAF_NODE	15:15	15:15	8	wm
LEAF_NODE	15:17	15:17	6	,
ARGUMENT	15:19	15:19	6	signals [ SIG_GIVE_FOCUS ]
FIELD	15:19	15:41	7	signals [ SIG_GIVE_FOCUS ]
LEAF_NODE	15:19	15:19	8	signals
LEAF_NODE	15:26	15:26	8	[
EXPR	15:27	15:27	8	SIG_GIVE_FOCUS
FIELD	15:27	15:27	9	SIG_GIVE_FOCUS
LEAF_NODE	15:27	15:27	10	SIG_GIVE_FOCUS
LEAF_NODE	15:41	15:41	8	]
LEAF_NODE	15:42	15:42	6	,
ARGUMENT	15:44	15:44	6	0
FIELD	15:44	15:44	7	0
LEAF_NODE	15:44	15:44	8	0
LEAF_NODE	15:45	15:45	6	,
ARGUMENT	15:47	15:47	6	widget
FIELD	15:47	15:47	7	widget
LEAF_NODE	15:47	15:47	8	widget
LEAF_NODE	15:53	15:53	6	)
LEAF_NODE	15:54	15:54	4	;
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	25:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	received_im_msg
LEAF_NODE	2:0	2:0	3	received_im_msg
PARAMETER_LIST	2:15	2:119	2	( PurpleAccount * account , char * sender , char * message , PurpleConversation * conv , PurpleMessageFlags flags )
LEAF_NODE	2:15	2:15	3	(
PARAMETER_DECL	2:16	2:31	3	PurpleAccount * account
TYPE	2:16	2:30	4	PurpleAccount *
TYPE_NAME	2:16	2:16	5	PurpleAccount
LEAF_NODE	2:16	2:16	6	PurpleAccount
POINTER	2:30	2:30	5	*
LEAF_NODE	2:30	2:30	6	*
NAME	2:31	2:31	4	account
LEAF_NODE	2:31	2:31	5	account
LEAF_NODE	2:38	2:38	3	,
PARAMETER_DECL	2:40	2:46	3	char * sender
TYPE	2:40	2:45	4	char *
TYPE_NAME	2:40	2:40	5	char
LEAF_NODE	2:40	2:40	6	char
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	sender
LEAF_NODE	2:46	2:46	5	sender
LEAF_NODE	2:52	2:52	3	,
PARAMETER_DECL	2:54	2:60	3	char * message
TYPE	2:54	2:59	4	char *
TYPE_NAME	2:54	2:54	5	char
LEAF_NODE	2:54	2:54	6	char
POINTER	2:59	2:59	5	*
LEAF_NODE	2:59	2:59	6	*
NAME	2:60	2:60	4	message
LEAF_NODE	2:60	2:60	5	message
LEAF_NODE	2:67	2:67	3	,
PARAMETER_DECL	2:69	2:89	3	PurpleConversation * conv
TYPE	2:69	2:88	4	PurpleConversation *
TYPE_NAME	2:69	2:69	5	PurpleConversation
LEAF_NODE	2:69	2:69	6	PurpleConversation
POINTER	2:88	2:88	5	*
LEAF_NODE	2:88	2:88	6	*
NAME	2:89	2:89	4	conv
LEAF_NODE	2:89	2:89	5	conv
LEAF_NODE	2:93	2:93	3	,
PARAMETER_DECL	2:95	2:114	3	PurpleMessageFlags flags
TYPE	2:95	2:95	4	PurpleMessageFlags
TYPE_NAME	2:95	2:95	5	PurpleMessageFlags
LEAF_NODE	2:95	2:95	6	PurpleMessageFlags
NAME	2:114	2:114	4	flags
LEAF_NODE	2:114	2:114	5	flags
LEAF_NODE	2:119	2:119	3	)
LEAF_NODE	2:121	2:121	2	{
STATEMENTS	3:1	24:1	2	
SIMPLE_DECL	3:1	3:19	3	PurpleBuddy * buddy ;
VAR_DECL	3:1	3:14	4	PurpleBuddy * buddy
TYPE	3:1	3:13	5	PurpleBuddy *
TYPE_NAME	3:1	3:1	6	PurpleBuddy
LEAF_NODE	3:1	3:1	7	PurpleBuddy
POINTER	3:13	3:13	6	*
LEAF_NODE	3:13	3:13	7	*
NAME	3:14	3:14	5	buddy
LEAF_NODE	3:14	3:14	6	buddy
LEAF_NODE	3:19	3:19	4	;
SIMPLE_DECL	4:1	4:21	3	CapStatistics * stats ;
VAR_DECL	4:1	4:16	4	CapStatistics * stats
TYPE	4:1	4:15	5	CapStatistics *
TYPE_NAME	4:1	4:1	6	CapStatistics
LEAF_NODE	4:1	4:1	7	CapStatistics
POINTER	4:15	4:15	6	*
LEAF_NODE	4:15	4:15	7	*
NAME	4:16	4:16	5	stats
LEAF_NODE	4:16	4:16	6	stats
LEAF_NODE	4:21	4:21	4	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	flags & PURPLE_MESSAGE_AUTO_RESP
EXPR	6:5	6:13	5	flags & PURPLE_MESSAGE_AUTO_RESP
FIELD	6:5	6:5	6	flags
LEAF_NODE	6:5	6:5	7	flags
LEAF_NODE	6:11	6:11	6	&
FIELD	6:13	6:13	6	PURPLE_MESSAGE_AUTO_RESP
LEAF_NODE	6:13	6:13	7	PURPLE_MESSAGE_AUTO_RESP
LEAF_NODE	6:37	6:37	4	)
STATEMENTS	7:2	7:2	4	
JUMP_STATEMENT	7:2	7:8	5	return DESTINATION ;
KEYWORD	7:2	7:2	6	return
LEAF_NODE	7:2	7:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	7:8	7:8	6	;
EXPR_STATEMENT	8:1	8:43	3	buddy = purple_find_buddy ( account , sender ) ;
EXPR	8:1	8:1	4	buddy = purple_find_buddy ( account , sender )
ASSIGN	8:1	8:9	5	buddy = purple_find_buddy ( account , sender )
LVAL	8:1	8:1	6	buddy
FIELD	8:1	8:1	7	buddy
LEAF_NODE	8:1	8:1	8	buddy
ASSIGN_OP	8:7	8:7	6	=
LEAF_NODE	8:7	8:7	7	=
RVAL	8:9	8:9	6	purple_find_buddy ( account , sender )
FUNCTION_CALL	8:9	8:42	7	purple_find_buddy ( account , sender )
CALLEE	8:9	8:9	8	purple_find_buddy
LEAF_NODE	8:9	8:9	9	purple_find_buddy
LEAF_NODE	8:26	8:26	8	(
ARGUMENT	8:27	8:27	8	account
FIELD	8:27	8:27	9	account
LEAF_NODE	8:27	8:27	10	account
LEAF_NODE	8:34	8:34	8	,
ARGUMENT	8:36	8:36	8	sender
FIELD	8:36	8:36	9	sender
LEAF_NODE	8:36	8:36	10	sender
LEAF_NODE	8:42	8:42	8	)
LEAF_NODE	8:43	8:43	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	buddy == NULL
EXPR	9:5	9:14	5	buddy == NULL
FIELD	9:5	9:5	6	buddy
LEAF_NODE	9:5	9:5	7	buddy
EQ_OPERATOR	9:11	9:11	6	==
LEAF_NODE	9:11	9:11	7	==
FIELD	9:14	9:14	6	NULL
LEAF_NODE	9:14	9:14	7	NULL
LEAF_NODE	9:18	9:18	4	)
STATEMENTS	10:2	10:2	4	
JUMP_STATEMENT	10:2	10:8	5	return DESTINATION ;
KEYWORD	10:2	10:2	6	return
LEAF_NODE	10:2	10:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	10:8	10:8	6	;
EXPR_STATEMENT	11:1	11:29	3	stats = get_stats_for ( buddy ) ;
EXPR	11:1	11:1	4	stats = get_stats_for ( buddy )
ASSIGN	11:1	11:9	5	stats = get_stats_for ( buddy )
LVAL	11:1	11:1	6	stats
FIELD	11:1	11:1	7	stats
LEAF_NODE	11:1	11:1	8	stats
ASSIGN_OP	11:7	11:7	6	=
LEAF_NODE	11:7	11:7	7	=
RVAL	11:9	11:9	6	get_stats_for ( buddy )
FUNCTION_CALL	11:9	11:28	7	get_stats_for ( buddy )
CALLEE	11:9	11:9	8	get_stats_for
LEAF_NODE	11:9	11:9	9	get_stats_for
LEAF_NODE	11:22	11:22	8	(
ARGUMENT	11:23	11:23	8	buddy
FIELD	11:23	11:23	9	buddy
LEAF_NODE	11:23	11:23	10	buddy
LEAF_NODE	11:28	11:28	8	)
LEAF_NODE	11:29	11:29	4	;
SELECTION	15:1	15:35	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:3	15:3	4	(
CONDITION	15:4	15:4	4	stats -> timeout_source_id != 0
EXPR	15:4	15:32	5	stats -> timeout_source_id != 0
FIELD	15:4	15:11	6	stats -> timeout_source_id
LEAF_NODE	15:4	15:4	7	stats
LEAF_NODE	15:9	15:9	7	->
LEAF_NODE	15:11	15:11	7	timeout_source_id
EQ_OPERATOR	15:29	15:29	6	!=
LEAF_NODE	15:29	15:29	7	!=
FIELD	15:32	15:32	6	0
LEAF_NODE	15:32	15:32	7	0
LEAF_NODE	15:33	15:33	4	)
STATEMENTS	15:35	19:1	4	
LEAF_NODE	15:35	15:35	5	{
STATEMENTS	16:2	18:2	5	
EXPR_STATEMENT	16:2	16:59	6	purple_debug_info ( "cap" , "Cancelling timeout callback\n" ) ;
EXPR	16:2	16:2	7	purple_debug_info ( "cap" , "Cancelling timeout callback\n" )
FUNCTION_CALL	16:2	16:58	8	purple_debug_info ( "cap" , "Cancelling timeout callback\n" )
CALLEE	16:2	16:2	9	purple_debug_info
LEAF_NODE	16:2	16:2	10	purple_debug_info
LEAF_NODE	16:19	16:19	9	(
ARGUMENT	16:20	16:20	9	"cap"
FIELD	16:20	16:20	10	"cap"
LEAF_NODE	16:20	16:20	11	"cap"
LEAF_NODE	16:25	16:25	9	,
ARGUMENT	16:27	16:27	9	"Cancelling timeout callback\n"
FIELD	16:27	16:27	10	"Cancelling timeout callback\n"
LEAF_NODE	16:27	16:27	11	"Cancelling timeout callback\n"
LEAF_NODE	16:58	16:58	9	)
LEAF_NODE	16:59	16:59	7	;
EXPR_STATEMENT	17:2	17:49	6	purple_timeout_remove ( stats -> timeout_source_id ) ;
EXPR	17:2	17:2	7	purple_timeout_remove ( stats -> timeout_source_id )
FUNCTION_CALL	17:2	17:48	8	purple_timeout_remove ( stats -> timeout_source_id )
CALLEE	17:2	17:2	9	purple_timeout_remove
LEAF_NODE	17:2	17:2	10	purple_timeout_remove
LEAF_NODE	17:23	17:23	9	(
ARGUMENT	17:24	17:24	9	stats -> timeout_source_id
FIELD	17:24	17:31	10	stats -> timeout_source_id
LEAF_NODE	17:24	17:24	11	stats
LEAF_NODE	17:29	17:29	11	->
LEAF_NODE	17:31	17:31	11	timeout_source_id
LEAF_NODE	17:48	17:48	9	)
LEAF_NODE	17:49	17:49	7	;
EXPR_STATEMENT	18:2	18:30	6	stats -> timeout_source_id = 0 ;
EXPR	18:2	18:2	7	stats -> timeout_source_id = 0
ASSIGN	18:2	18:29	8	stats -> timeout_source_id = 0
LVAL	18:2	18:2	9	stats -> timeout_source_id
FIELD	18:2	18:9	10	stats -> timeout_source_id
LEAF_NODE	18:2	18:2	11	stats
LEAF_NODE	18:7	18:7	11	->
LEAF_NODE	18:9	18:9	11	timeout_source_id
ASSIGN_OP	18:27	18:27	9	=
LEAF_NODE	18:27	18:27	10	=
RVAL	18:29	18:29	9	0
FIELD	18:29	18:29	10	0
LEAF_NODE	18:29	18:29	11	0
LEAF_NODE	18:30	18:30	7	;
LEAF_NODE	19:1	19:1	5	}
EXPR_STATEMENT	20:1	20:26	3	insert_cap_success ( stats ) ;
EXPR	20:1	20:1	4	insert_cap_success ( stats )
FUNCTION_CALL	20:1	20:25	5	insert_cap_success ( stats )
CALLEE	20:1	20:1	6	insert_cap_success
LEAF_NODE	20:1	20:1	7	insert_cap_success
LEAF_NODE	20:19	20:19	6	(
ARGUMENT	20:20	20:20	6	stats
FIELD	20:20	20:20	7	stats
LEAF_NODE	20:20	20:20	8	stats
LEAF_NODE	20:25	20:25	6	)
LEAF_NODE	20:26	20:26	4	;
EXPR_STATEMENT	22:1	22:25	3	stats -> last_message = - 1 ;
EXPR	22:1	22:1	4	stats -> last_message = - 1
ASSIGN	22:1	22:23	5	stats -> last_message = - 1
LVAL	22:1	22:1	6	stats -> last_message
FIELD	22:1	22:8	7	stats -> last_message
LEAF_NODE	22:1	22:1	8	stats
LEAF_NODE	22:6	22:6	8	->
LEAF_NODE	22:8	22:8	8	last_message
ASSIGN_OP	22:21	22:21	6	=
LEAF_NODE	22:21	22:21	7	=
RVAL	22:23	22:23	6	- 1
UNARY_EXPR	22:23	22:24	7	- 1
UNARY_OPERATOR	22:23	22:23	8	-
LEAF_NODE	22:23	22:23	9	-
FIELD	22:24	22:24	8	1
LEAF_NODE	22:24	22:24	9	1
LEAF_NODE	22:25	22:25	4	;
EXPR_STATEMENT	24:1	24:37	3	stats -> last_message_status_id = NULL ;
EXPR	24:1	24:1	4	stats -> last_message_status_id = NULL
ASSIGN	24:1	24:33	5	stats -> last_message_status_id = NULL
LVAL	24:1	24:1	6	stats -> last_message_status_id
FIELD	24:1	24:8	7	stats -> last_message_status_id
LEAF_NODE	24:1	24:1	8	stats
LEAF_NODE	24:6	24:6	8	->
LEAF_NODE	24:8	24:8	8	last_message_status_id
ASSIGN_OP	24:31	24:31	6	=
LEAF_NODE	24:31	24:31	7	=
RVAL	24:33	24:33	6	NULL
FIELD	24:33	24:33	7	NULL
LEAF_NODE	24:33	24:33	8	NULL
LEAF_NODE	24:37	24:37	4	;
LEAF_NODE	25:0	25:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:25	2	static JabberCapsNodeExts *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	JabberCapsNodeExts
LEAF_NODE	1:7	1:7	4	JabberCapsNodeExts
LEAF_NODE	1:25	1:25	3	*
FUNCTION_NAME	2:0	2:0	2	jabber_caps_node_exts_ref
LEAF_NODE	2:0	2:0	3	jabber_caps_node_exts_ref
PARAMETER_LIST	2:25	2:50	2	( JabberCapsNodeExts * exts )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:46	3	JabberCapsNodeExts * exts
TYPE	2:26	2:45	4	JabberCapsNodeExts *
TYPE_NAME	2:26	2:26	5	JabberCapsNodeExts
LEAF_NODE	2:26	2:26	6	JabberCapsNodeExts
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	exts
LEAF_NODE	2:46	2:46	5	exts
LEAF_NODE	2:50	2:50	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
EXPR_STATEMENT	4:1	4:41	3	g_return_val_if_fail ( exts != NULL , NULL ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( exts != NULL , NULL )
FUNCTION_CALL	4:1	4:40	5	g_return_val_if_fail ( exts != NULL , NULL )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:30	6	exts != NULL
FIELD	4:22	4:22	7	exts
LEAF_NODE	4:22	4:22	8	exts
EQ_OPERATOR	4:27	4:27	7	!=
LEAF_NODE	4:27	4:27	8	!=
FIELD	4:30	4:30	7	NULL
LEAF_NODE	4:30	4:30	8	NULL
LEAF_NODE	4:34	4:34	6	,
ARGUMENT	4:36	4:36	6	NULL
FIELD	4:36	4:36	7	NULL
LEAF_NODE	4:36	4:36	8	NULL
LEAF_NODE	4:40	4:40	6	)
LEAF_NODE	4:41	4:41	4	;
EXPR_STATEMENT	5:1	5:12	3	++ exts -> ref ;
EXPR	5:1	5:3	4	++ exts -> ref
LEAF_NODE	5:1	5:1	5	++
FIELD	5:3	5:9	5	exts -> ref
LEAF_NODE	5:3	5:3	6	exts
LEAF_NODE	5:7	5:7	6	->
LEAF_NODE	5:9	5:9	6	ref
LEAF_NODE	5:12	5:12	4	;
JUMP_STATEMENT	6:1	6:12	3	return exts ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	exts
EXPR	6:8	6:8	5	exts
FIELD	6:8	6:8	6	exts
LEAF_NODE	6:8	6:8	7	exts
LEAF_NODE	6:12	6:12	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	4:1	6:1	0	
SIMPLE_DECL	4:1	4:10	1	char * msg ;
VAR_DECL	4:1	4:7	2	char * msg
TYPE	4:1	4:6	3	char *
TYPE_NAME	4:1	4:1	4	char
LEAF_NODE	4:1	4:1	5	char
POINTER	4:6	4:6	4	*
LEAF_NODE	4:6	4:6	5	*
NAME	4:7	4:7	3	msg
LEAF_NODE	4:7	4:7	4	msg
LEAF_NODE	4:10	4:10	2	;
SIMPLE_DECL	5:1	5:11	1	guint16 id ;
VAR_DECL	5:1	5:9	2	guint16 id
TYPE	5:1	5:1	3	guint16
TYPE_NAME	5:1	5:1	4	guint16
LEAF_NODE	5:1	5:1	5	guint16
NAME	5:9	5:9	3	id
LEAF_NODE	5:9	5:9	4	id
LEAF_NODE	5:11	5:11	2	;
SIMPLE_DECL	6:1	6:11	1	va_list ap ;
VAR_DECL	6:1	6:9	2	va_list ap
TYPE	6:1	6:1	3	va_list
TYPE_NAME	6:1	6:1	4	va_list
LEAF_NODE	6:1	6:1	5	va_list
NAME	6:9	6:9	3	ap
LEAF_NODE	6:9	6:9	4	ap
LEAF_NODE	6:11	6:11	2	;

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	gnt_wm_window_decorate
LEAF_NODE	2:5	2:5	3	gnt_wm_window_decorate
PARAMETER_LIST	2:27	2:56	2	( GntWM * wm , GntWidget * widget )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:35	3	GntWM * wm
TYPE	2:28	2:34	4	GntWM *
TYPE_NAME	2:28	2:28	5	GntWM
LEAF_NODE	2:28	2:28	6	GntWM
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	wm
LEAF_NODE	2:35	2:35	5	wm
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:50	3	GntWidget * widget
TYPE	2:39	2:49	4	GntWidget *
TYPE_NAME	2:39	2:39	5	GntWidget
LEAF_NODE	2:39	2:39	6	GntWidget
POINTER	2:49	2:49	5	*
LEAF_NODE	2:49	2:49	6	*
NAME	2:50	2:50	4	widget
LEAF_NODE	2:50	2:50	5	widget
LEAF_NODE	2:56	2:56	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	4:56	3	g_signal_emit ( wm , signals [ SIG_DECORATE_WIN ] , 0 , widget ) ;
EXPR	4:1	4:1	4	g_signal_emit ( wm , signals [ SIG_DECORATE_WIN ] , 0 , widget )
FUNCTION_CALL	4:1	4:55	5	g_signal_emit ( wm , signals [ SIG_DECORATE_WIN ] , 0 , widget )
CALLEE	4:1	4:1	6	g_signal_emit
LEAF_NODE	4:1	4:1	7	g_signal_emit
LEAF_NODE	4:14	4:14	6	(
ARGUMENT	4:15	4:15	6	wm
FIELD	4:15	4:15	7	wm
LEAF_NODE	4:15	4:15	8	wm
LEAF_NODE	4:17	4:17	6	,
ARGUMENT	4:19	4:19	6	signals [ SIG_DECORATE_WIN ]
FIELD	4:19	4:43	7	signals [ SIG_DECORATE_WIN ]
LEAF_NODE	4:19	4:19	8	signals
LEAF_NODE	4:26	4:26	8	[
EXPR	4:27	4:27	8	SIG_DECORATE_WIN
FIELD	4:27	4:27	9	SIG_DECORATE_WIN
LEAF_NODE	4:27	4:27	10	SIG_DECORATE_WIN
LEAF_NODE	4:43	4:43	8	]
LEAF_NODE	4:44	4:44	6	,
ARGUMENT	4:46	4:46	6	0
FIELD	4:46	4:46	7	0
LEAF_NODE	4:46	4:46	8	0
LEAF_NODE	4:47	4:47	6	,
ARGUMENT	4:49	4:49	6	widget
FIELD	4:49	4:49	7	widget
LEAF_NODE	4:49	4:49	8	widget
LEAF_NODE	4:55	4:55	6	)
LEAF_NODE	4:56	4:56	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	sent_chat_msg_cb
LEAF_NODE	2:0	2:0	3	sent_chat_msg_cb
PARAMETER_LIST	2:16	2:79	2	( PurpleAccount * account , const char * buffer , int id , void * data )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:32	3	PurpleAccount * account
TYPE	2:17	2:31	4	PurpleAccount *
TYPE_NAME	2:17	2:17	5	PurpleAccount
LEAF_NODE	2:17	2:17	6	PurpleAccount
POINTER	2:31	2:31	5	*
LEAF_NODE	2:31	2:31	6	*
NAME	2:32	2:32	4	account
LEAF_NODE	2:32	2:32	5	account
LEAF_NODE	2:39	2:39	3	,
PARAMETER_DECL	2:41	2:53	3	const char * buffer
TYPE	2:41	2:52	4	const char *
TYPE_NAME	2:41	2:47	5	const char
LEAF_NODE	2:41	2:41	6	const
LEAF_NODE	2:47	2:47	6	char
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	buffer
LEAF_NODE	2:53	2:53	5	buffer
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	2:61	2:65	3	int id
TYPE	2:61	2:61	4	int
TYPE_NAME	2:61	2:61	5	int
LEAF_NODE	2:61	2:61	6	int
NAME	2:65	2:65	4	id
LEAF_NODE	2:65	2:65	5	id
LEAF_NODE	2:67	2:67	3	,
PARAMETER_DECL	2:69	2:75	3	void * data
TYPE	2:69	2:74	4	void *
TYPE_NAME	2:69	2:69	5	void
LEAF_NODE	2:69	2:69	6	void
POINTER	2:74	2:74	5	*
LEAF_NODE	2:74	2:74	6	*
NAME	2:75	2:75	4	data
LEAF_NODE	2:75	2:75	5	data
LEAF_NODE	2:79	2:79	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	5:54	3	purple_debug_misc ( "signals test" , "sent-chat-msg (%s, %s, %d)\n" , purple_account_get_username ( account ) , buffer , id ) ;
EXPR	4:1	4:1	4	purple_debug_misc ( "signals test" , "sent-chat-msg (%s, %s, %d)\n" , purple_account_get_username ( account ) , buffer , id )
FUNCTION_CALL	4:1	5:53	5	purple_debug_misc ( "signals test" , "sent-chat-msg (%s, %s, %d)\n" , purple_account_get_username ( account ) , buffer , id )
CALLEE	4:1	4:1	6	purple_debug_misc
LEAF_NODE	4:1	4:1	7	purple_debug_misc
LEAF_NODE	4:18	4:18	6	(
ARGUMENT	4:19	4:19	6	"signals test"
FIELD	4:19	4:19	7	"signals test"
LEAF_NODE	4:19	4:19	8	"signals test"
LEAF_NODE	4:33	4:33	6	,
ARGUMENT	4:35	4:35	6	"sent-chat-msg (%s, %s, %d)\n"
FIELD	4:35	4:35	7	"sent-chat-msg (%s, %s, %d)\n"
LEAF_NODE	4:35	4:35	8	"sent-chat-msg (%s, %s, %d)\n"
LEAF_NODE	4:65	4:65	6	,
ARGUMENT	5:5	5:5	6	purple_account_get_username ( account )
FUNCTION_CALL	5:5	5:40	7	purple_account_get_username ( account )
CALLEE	5:5	5:5	8	purple_account_get_username
LEAF_NODE	5:5	5:5	9	purple_account_get_username
LEAF_NODE	5:32	5:32	8	(
ARGUMENT	5:33	5:33	8	account
FIELD	5:33	5:33	9	account
LEAF_NODE	5:33	5:33	10	account
LEAF_NODE	5:40	5:40	8	)
LEAF_NODE	5:41	5:41	6	,
ARGUMENT	5:43	5:43	6	buffer
FIELD	5:43	5:43	7	buffer
LEAF_NODE	5:43	5:43	8	buffer
LEAF_NODE	5:49	5:49	6	,
ARGUMENT	5:51	5:51	6	id
FIELD	5:51	5:51	7	id
LEAF_NODE	5:51	5:51	8	id
LEAF_NODE	5:53	5:53	6	)
LEAF_NODE	5:54	5:54	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	50:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	process_input
LEAF_NODE	2:12	2:12	3	process_input
PARAMETER_LIST	2:25	2:86	2	( struct simple_account_data * sip , struct sip_connection * conn )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:54	3	struct simple_account_data * sip
TYPE	2:26	2:53	4	struct simple_account_data *
TYPE_NAME	2:26	2:33	5	struct simple_account_data
LEAF_NODE	2:26	2:26	6	struct
LEAF_NODE	2:33	2:33	6	simple_account_data
POINTER	2:53	2:53	5	*
LEAF_NODE	2:53	2:53	6	*
NAME	2:54	2:54	4	sip
LEAF_NODE	2:54	2:54	5	sip
LEAF_NODE	2:57	2:57	3	,
PARAMETER_DECL	2:59	2:82	3	struct sip_connection * conn
TYPE	2:59	2:81	4	struct sip_connection *
TYPE_NAME	2:59	2:66	5	struct sip_connection
LEAF_NODE	2:59	2:59	6	struct
LEAF_NODE	2:66	2:66	6	sip_connection
POINTER	2:81	2:81	5	*
LEAF_NODE	2:81	2:81	6	*
NAME	2:82	2:82	4	conn
LEAF_NODE	2:82	2:82	5	conn
LEAF_NODE	2:86	2:86	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	47:3	2	
SIMPLE_DECL	4:1	4:10	3	char * cur ;
VAR_DECL	4:1	4:7	4	char * cur
TYPE	4:1	4:6	5	char *
TYPE_NAME	4:1	4:1	6	char
LEAF_NODE	4:1	4:1	7	char
POINTER	4:6	4:6	6	*
LEAF_NODE	4:6	4:6	7	*
NAME	4:7	4:7	5	cur
LEAF_NODE	4:7	4:7	6	cur
LEAF_NODE	4:10	4:10	4	;
SIMPLE_DECL	5:1	5:12	3	char * dummy ;
VAR_DECL	5:1	5:7	4	char * dummy
TYPE	5:1	5:6	5	char *
TYPE_NAME	5:1	5:1	6	char
LEAF_NODE	5:1	5:1	7	char
POINTER	5:6	5:6	6	*
LEAF_NODE	5:6	5:6	7	*
NAME	5:7	5:7	5	dummy
LEAF_NODE	5:7	5:7	6	dummy
LEAF_NODE	5:12	5:12	4	;
SIMPLE_DECL	6:1	6:19	3	struct sipmsg * msg ;
VAR_DECL	6:1	6:16	4	struct sipmsg * msg
TYPE	6:1	6:15	5	struct sipmsg *
TYPE_NAME	6:1	6:8	6	struct sipmsg
LEAF_NODE	6:1	6:1	7	struct
LEAF_NODE	6:8	6:8	7	sipmsg
POINTER	6:15	6:15	6	*
LEAF_NODE	6:15	6:15	7	*
NAME	6:16	6:16	5	msg
LEAF_NODE	6:16	6:16	6	msg
LEAF_NODE	6:19	6:19	4	;
SIMPLE_DECL	7:1	7:12	3	int restlen ;
VAR_DECL	7:1	7:5	4	int restlen
TYPE	7:1	7:1	5	int
TYPE_NAME	7:1	7:1	6	int
LEAF_NODE	7:1	7:1	7	int
NAME	7:5	7:5	5	restlen
LEAF_NODE	7:5	7:5	6	restlen
LEAF_NODE	7:12	7:12	4	;
EXPR_STATEMENT	8:1	8:18	3	cur = conn -> inbuf ;
EXPR	8:1	8:1	4	cur = conn -> inbuf
ASSIGN	8:1	8:7	5	cur = conn -> inbuf
LVAL	8:1	8:1	6	cur
FIELD	8:1	8:1	7	cur
LEAF_NODE	8:1	8:1	8	cur
ASSIGN_OP	8:5	8:5	6	=
LEAF_NODE	8:5	8:5	7	=
RVAL	8:7	8:7	6	conn -> inbuf
FIELD	8:7	8:13	7	conn -> inbuf
LEAF_NODE	8:7	8:7	8	conn
LEAF_NODE	8:11	8:11	8	->
LEAF_NODE	8:13	8:13	8	inbuf
LEAF_NODE	8:18	8:18	4	;
ITERATION	10:1	10:37	3	
KEYWORD	10:1	10:1	4	while
LEAF_NODE	10:1	10:1	5	while
LEAF_NODE	10:6	10:6	4	(
CONDITION	10:7	10:7	4	* cur == '\r' || * cur == '\n'
EXPR	10:7	10:7	5	* cur == '\r' || * cur == '\n'
OR	10:7	10:23	6	* cur == '\r' || * cur == '\n'
EXPR	10:7	10:15	7	* cur == '\r'
UNARY_EXPR	10:7	10:8	8	* cur
UNARY_OPERATOR	10:7	10:7	9	*
LEAF_NODE	10:7	10:7	10	*
FIELD	10:8	10:8	9	cur
LEAF_NODE	10:8	10:8	10	cur
EQ_OPERATOR	10:12	10:12	8	==
LEAF_NODE	10:12	10:12	9	==
FIELD	10:15	10:15	8	'\r'
LEAF_NODE	10:15	10:15	9	'\r'
LEAF_NODE	10:20	10:20	7	||
EXPR	10:23	10:31	7	* cur == '\n'
UNARY_EXPR	10:23	10:24	8	* cur
UNARY_OPERATOR	10:23	10:23	9	*
LEAF_NODE	10:23	10:23	10	*
FIELD	10:24	10:24	9	cur
LEAF_NODE	10:24	10:24	10	cur
EQ_OPERATOR	10:28	10:28	8	==
LEAF_NODE	10:28	10:28	9	==
FIELD	10:31	10:31	8	'\n'
LEAF_NODE	10:31	10:31	9	'\n'
LEAF_NODE	10:35	10:35	4	)
STATEMENTS	10:37	12:1	4	
LEAF_NODE	10:37	10:37	5	{
STATEMENTS	11:2	11:2	5	
EXPR_STATEMENT	11:2	11:7	6	cur ++ ;
EXPR	11:2	11:2	7	cur ++
FIELD	11:2	11:5	8	cur ++
LEAF_NODE	11:2	11:2	9	cur
LEAF_NODE	11:5	11:5	9	++
LEAF_NODE	11:7	11:7	7	;
LEAF_NODE	12:1	12:1	5	}
SELECTION	13:1	13:24	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:3	13:3	4	(
CONDITION	13:4	13:4	4	cur != conn -> inbuf
EXPR	13:4	13:11	5	cur != conn -> inbuf
FIELD	13:4	13:4	6	cur
LEAF_NODE	13:4	13:4	7	cur
EQ_OPERATOR	13:8	13:8	6	!=
LEAF_NODE	13:8	13:8	7	!=
FIELD	13:11	13:17	6	conn -> inbuf
LEAF_NODE	13:11	13:11	7	conn
LEAF_NODE	13:15	13:15	7	->
LEAF_NODE	13:17	13:17	7	inbuf
LEAF_NODE	13:22	13:22	4	)
STATEMENTS	13:24	16:1	4	
LEAF_NODE	13:24	13:24	5	{
STATEMENTS	14:2	15:2	5	
EXPR_STATEMENT	14:2	14:66	6	memmove ( conn -> inbuf , cur , conn -> inbufused - ( cur - conn -> inbuf ) ) ;
EXPR	14:2	14:2	7	memmove ( conn -> inbuf , cur , conn -> inbufused - ( cur - conn -> inbuf ) )
FUNCTION_CALL	14:2	14:65	8	memmove ( conn -> inbuf , cur , conn -> inbufused - ( cur - conn -> inbuf ) )
CALLEE	14:2	14:2	9	memmove
LEAF_NODE	14:2	14:2	10	memmove
LEAF_NODE	14:9	14:9	9	(
ARGUMENT	14:10	14:10	9	conn -> inbuf
FIELD	14:10	14:16	10	conn -> inbuf
LEAF_NODE	14:10	14:10	11	conn
LEAF_NODE	14:14	14:14	11	->
LEAF_NODE	14:16	14:16	11	inbuf
LEAF_NODE	14:21	14:21	9	,
ARGUMENT	14:23	14:23	9	cur
FIELD	14:23	14:23	10	cur
LEAF_NODE	14:23	14:23	11	cur
LEAF_NODE	14:26	14:26	9	,
ARGUMENT	14:28	14:64	9	conn -> inbufused - ( cur - conn -> inbuf )
FIELD	14:28	14:34	10	conn -> inbufused
LEAF_NODE	14:28	14:28	11	conn
LEAF_NODE	14:32	14:32	11	->
LEAF_NODE	14:34	14:34	11	inbufused
LEAF_NODE	14:44	14:44	10	-
LEAF_NODE	14:46	14:46	10	(
FIELD	14:47	14:47	10	cur
LEAF_NODE	14:47	14:47	11	cur
LEAF_NODE	14:51	14:51	10	-
FIELD	14:53	14:59	10	conn -> inbuf
LEAF_NODE	14:53	14:53	11	conn
LEAF_NODE	14:57	14:57	11	->
LEAF_NODE	14:59	14:59	11	inbuf
LEAF_NODE	14:64	14:64	10	)
LEAF_NODE	14:65	14:65	9	)
LEAF_NODE	14:66	14:66	7	;
EXPR_STATEMENT	15:2	15:39	6	conn -> inbufused = strlen ( conn -> inbuf ) ;
EXPR	15:2	15:2	7	conn -> inbufused = strlen ( conn -> inbuf )
ASSIGN	15:2	15:20	8	conn -> inbufused = strlen ( conn -> inbuf )
LVAL	15:2	15:2	9	conn -> inbufused
FIELD	15:2	15:8	10	conn -> inbufused
LEAF_NODE	15:2	15:2	11	conn
LEAF_NODE	15:6	15:6	11	->
LEAF_NODE	15:8	15:8	11	inbufused
ASSIGN_OP	15:18	15:18	9	=
LEAF_NODE	15:18	15:18	10	=
RVAL	15:20	15:20	9	strlen ( conn -> inbuf )
FUNCTION_CALL	15:20	15:38	10	strlen ( conn -> inbuf )
CALLEE	15:20	15:20	11	strlen
LEAF_NODE	15:20	15:20	12	strlen
LEAF_NODE	15:26	15:26	11	(
ARGUMENT	15:27	15:27	11	conn -> inbuf
FIELD	15:27	15:33	12	conn -> inbuf
LEAF_NODE	15:27	15:27	13	conn
LEAF_NODE	15:31	15:31	13	->
LEAF_NODE	15:33	15:33	13	inbuf
LEAF_NODE	15:38	15:38	11	)
LEAF_NODE	15:39	15:39	7	;
LEAF_NODE	16:1	16:1	5	}
SELECTION	18:1	18:53	3	
KEYWORD	18:1	18:1	4	if
LEAF_NODE	18:1	18:1	5	if
LEAF_NODE	18:3	18:3	4	(
CONDITION	18:4	18:4	4	( cur = strstr ( conn -> inbuf , "\r\n\r\n" ) ) != NULL
EXPR	18:4	18:47	5	( cur = strstr ( conn -> inbuf , "\r\n\r\n" ) ) != NULL
LEAF_NODE	18:4	18:4	6	(
ASSIGN	18:5	18:11	6	cur = strstr ( conn -> inbuf , "\r\n\r\n" )
LVAL	18:5	18:5	7	cur
FIELD	18:5	18:5	8	cur
LEAF_NODE	18:5	18:5	9	cur
ASSIGN_OP	18:9	18:9	7	=
LEAF_NODE	18:9	18:9	8	=
RVAL	18:11	18:11	7	strstr ( conn -> inbuf , "\r\n\r\n" )
FUNCTION_CALL	18:11	18:41	8	strstr ( conn -> inbuf , "\r\n\r\n" )
CALLEE	18:11	18:11	9	strstr
LEAF_NODE	18:11	18:11	10	strstr
LEAF_NODE	18:17	18:17	9	(
ARGUMENT	18:18	18:18	9	conn -> inbuf
FIELD	18:18	18:24	10	conn -> inbuf
LEAF_NODE	18:18	18:18	11	conn
LEAF_NODE	18:22	18:22	11	->
LEAF_NODE	18:24	18:24	11	inbuf
LEAF_NODE	18:29	18:29	9	,
ARGUMENT	18:31	18:31	9	"\r\n\r\n"
FIELD	18:31	18:31	10	"\r\n\r\n"
LEAF_NODE	18:31	18:31	11	"\r\n\r\n"
LEAF_NODE	18:41	18:41	9	)
LEAF_NODE	18:42	18:42	6	)
EQ_OPERATOR	18:44	18:44	6	!=
LEAF_NODE	18:44	18:44	7	!=
FIELD	18:47	18:47	6	NULL
LEAF_NODE	18:47	18:47	7	NULL
LEAF_NODE	18:51	18:51	4	)
STATEMENTS	18:53	47:1	4	
LEAF_NODE	18:53	18:53	5	{
STATEMENTS	19:2	46:2	5	
SIMPLE_DECL	19:2	19:30	6	time_t currtime ; currtime = time ( NULL ) ;
VAR_DECL	19:2	19:9	7	time_t currtime ; currtime = time ( NULL )
TYPE	19:2	19:2	8	time_t
TYPE_NAME	19:2	19:2	9	time_t
LEAF_NODE	19:2	19:2	10	time_t
NAME	19:9	19:9	8	currtime
LEAF_NODE	19:9	19:9	9	currtime
LEAF_NODE	0:0	0:0	8	;
INIT	19:9	19:9	8	currtime = time ( NULL )
ASSIGN	19:9	19:20	9	currtime = time ( NULL )
LVAL	19:9	19:9	10	currtime
NAME	19:9	19:9	11	currtime
LEAF_NODE	19:9	19:9	12	currtime
ASSIGN_OP	19:18	19:18	10	=
LEAF_NODE	19:18	19:18	11	=
RVAL	19:20	19:20	10	time ( NULL )
FUNCTION_CALL	19:20	19:29	11	time ( NULL )
CALLEE	19:20	19:20	12	time
LEAF_NODE	19:20	19:20	13	time
LEAF_NODE	19:24	19:24	12	(
ARGUMENT	19:25	19:25	12	NULL
FIELD	19:25	19:25	13	NULL
LEAF_NODE	19:25	19:25	14	NULL
LEAF_NODE	19:29	19:29	12	)
LEAF_NODE	19:30	19:30	7	;
EXPR_STATEMENT	20:2	20:10	6	cur += 2 ;
EXPR	20:2	20:2	7	cur += 2
ASSIGN	20:2	20:9	8	cur += 2
LVAL	20:2	20:2	9	cur
FIELD	20:2	20:2	10	cur
LEAF_NODE	20:2	20:2	11	cur
ASSIGN_OP	20:6	20:6	9	+=
LEAF_NODE	20:6	20:6	10	+=
RVAL	20:9	20:9	9	2
FIELD	20:9	20:9	10	2
LEAF_NODE	20:9	20:9	11	2
LEAF_NODE	20:10	20:10	7	;
EXPR_STATEMENT	21:2	21:15	6	cur [ 0 ] = '\0' ;
EXPR	21:2	21:2	7	cur [ 0 ] = '\0'
ASSIGN	21:2	21:11	8	cur [ 0 ] = '\0'
LVAL	21:2	21:2	9	cur [ 0 ]
FIELD	21:2	21:7	10	cur [ 0 ]
LEAF_NODE	21:2	21:2	11	cur
LEAF_NODE	21:5	21:5	11	[
EXPR	21:6	21:6	11	0
FIELD	21:6	21:6	12	0
LEAF_NODE	21:6	21:6	13	0
LEAF_NODE	21:7	21:7	11	]
ASSIGN_OP	21:9	21:9	9	=
LEAF_NODE	21:9	21:9	10	=
RVAL	21:11	21:11	9	'\0'
FIELD	21:11	21:11	10	'\0'
LEAF_NODE	21:11	21:11	11	'\0'
LEAF_NODE	21:15	21:15	7	;
EXPR_STATEMENT	22:2	22:106	6	purple_debug_info ( "simple" , "\n\nreceived - %s\n######\n%s\n#######\n\n" , ctime ( & currtime ) , conn -> inbuf ) ;
EXPR	22:2	22:2	7	purple_debug_info ( "simple" , "\n\nreceived - %s\n######\n%s\n#######\n\n" , ctime ( & currtime ) , conn -> inbuf )
FUNCTION_CALL	22:2	22:105	8	purple_debug_info ( "simple" , "\n\nreceived - %s\n######\n%s\n#######\n\n" , ctime ( & currtime ) , conn -> inbuf )
CALLEE	22:2	22:2	9	purple_debug_info
LEAF_NODE	22:2	22:2	10	purple_debug_info
LEAF_NODE	22:19	22:19	9	(
ARGUMENT	22:20	22:20	9	"simple"
FIELD	22:20	22:20	10	"simple"
LEAF_NODE	22:20	22:20	11	"simple"
LEAF_NODE	22:28	22:28	9	,
ARGUMENT	22:30	22:30	9	"\n\nreceived - %s\n######\n%s\n#######\n\n"
FIELD	22:30	22:30	10	"\n\nreceived - %s\n######\n%s\n#######\n\n"
LEAF_NODE	22:30	22:30	11	"\n\nreceived - %s\n######\n%s\n#######\n\n"
LEAF_NODE	22:74	22:74	9	,
ARGUMENT	22:76	22:76	9	ctime ( & currtime )
FUNCTION_CALL	22:76	22:91	10	ctime ( & currtime )
CALLEE	22:76	22:76	11	ctime
LEAF_NODE	22:76	22:76	12	ctime
LEAF_NODE	22:81	22:81	11	(
ARGUMENT	22:82	22:82	11	& currtime
UNARY_EXPR	22:82	22:83	12	& currtime
UNARY_OPERATOR	22:82	22:82	13	&
LEAF_NODE	22:82	22:82	14	&
FIELD	22:83	22:83	13	currtime
LEAF_NODE	22:83	22:83	14	currtime
LEAF_NODE	22:91	22:91	11	)
LEAF_NODE	22:92	22:92	9	,
ARGUMENT	22:94	22:94	9	conn -> inbuf
FIELD	22:94	22:100	10	conn -> inbuf
LEAF_NODE	22:94	22:94	11	conn
LEAF_NODE	22:98	22:98	11	->
LEAF_NODE	22:100	22:100	11	inbuf
LEAF_NODE	22:105	22:105	9	)
LEAF_NODE	22:106	22:106	7	;
EXPR_STATEMENT	23:2	23:40	6	msg = sipmsg_parse_header ( conn -> inbuf ) ;
EXPR	23:2	23:2	7	msg = sipmsg_parse_header ( conn -> inbuf )
ASSIGN	23:2	23:8	8	msg = sipmsg_parse_header ( conn -> inbuf )
LVAL	23:2	23:2	9	msg
FIELD	23:2	23:2	10	msg
LEAF_NODE	23:2	23:2	11	msg
ASSIGN_OP	23:6	23:6	9	=
LEAF_NODE	23:6	23:6	10	=
RVAL	23:8	23:8	9	sipmsg_parse_header ( conn -> inbuf )
FUNCTION_CALL	23:8	23:39	10	sipmsg_parse_header ( conn -> inbuf )
CALLEE	23:8	23:8	11	sipmsg_parse_header
LEAF_NODE	23:8	23:8	12	sipmsg_parse_header
LEAF_NODE	23:27	23:27	11	(
ARGUMENT	23:28	23:28	11	conn -> inbuf
FIELD	23:28	23:34	12	conn -> inbuf
LEAF_NODE	23:28	23:28	13	conn
LEAF_NODE	23:32	23:32	13	->
LEAF_NODE	23:34	23:34	13	inbuf
LEAF_NODE	23:39	23:39	11	)
LEAF_NODE	23:40	23:40	7	;
SELECTION	24:2	24:11	6	
KEYWORD	24:2	24:2	7	if
LEAF_NODE	24:2	24:2	8	if
LEAF_NODE	24:4	24:4	7	(
CONDITION	24:5	24:5	7	! msg
EXPR	24:5	24:5	8	! msg
UNARY_EXPR	24:5	24:6	9	! msg
UNARY_OPERATOR	24:5	24:5	10	!
LEAF_NODE	24:5	24:5	11	!
FIELD	24:6	24:6	10	msg
LEAF_NODE	24:6	24:6	11	msg
LEAF_NODE	24:9	24:9	7	)
STATEMENTS	24:11	28:2	7	
LEAF_NODE	24:11	24:11	8	{
STATEMENTS	26:3	27:3	8	
EXPR_STATEMENT	26:3	26:82	9	purple_debug_misc ( "simple" , "received a incomplete sip msg: %s\n" , conn -> inbuf ) ;
EXPR	26:3	26:3	10	purple_debug_misc ( "simple" , "received a incomplete sip msg: %s\n" , conn -> inbuf )
FUNCTION_CALL	26:3	26:81	11	purple_debug_misc ( "simple" , "received a incomplete sip msg: %s\n" , conn -> inbuf )
CALLEE	26:3	26:3	12	purple_debug_misc
LEAF_NODE	26:3	26:3	13	purple_debug_misc
LEAF_NODE	26:20	26:20	12	(
ARGUMENT	26:21	26:21	12	"simple"
FIELD	26:21	26:21	13	"simple"
LEAF_NODE	26:21	26:21	14	"simple"
LEAF_NODE	26:29	26:29	12	,
ARGUMENT	26:31	26:31	12	"received a incomplete sip msg: %s\n"
FIELD	26:31	26:31	13	"received a incomplete sip msg: %s\n"
LEAF_NODE	26:31	26:31	14	"received a incomplete sip msg: %s\n"
LEAF_NODE	26:68	26:68	12	,
ARGUMENT	26:70	26:70	12	conn -> inbuf
FIELD	26:70	26:76	13	conn -> inbuf
LEAF_NODE	26:70	26:70	14	conn
LEAF_NODE	26:74	26:74	14	->
LEAF_NODE	26:76	26:76	14	inbuf
LEAF_NODE	26:81	26:81	12	)
LEAF_NODE	26:82	26:82	10	;
JUMP_STATEMENT	27:3	27:9	9	return DESTINATION ;
KEYWORD	27:3	27:3	10	return
LEAF_NODE	27:3	27:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	27:9	27:9	10	;
LEAF_NODE	28:2	28:2	8	}
EXPR_STATEMENT	29:2	29:15	6	cur [ 0 ] = '\r' ;
EXPR	29:2	29:2	7	cur [ 0 ] = '\r'
ASSIGN	29:2	29:11	8	cur [ 0 ] = '\r'
LVAL	29:2	29:2	9	cur [ 0 ]
FIELD	29:2	29:7	10	cur [ 0 ]
LEAF_NODE	29:2	29:2	11	cur
LEAF_NODE	29:5	29:5	11	[
EXPR	29:6	29:6	11	0
FIELD	29:6	29:6	12	0
LEAF_NODE	29:6	29:6	13	0
LEAF_NODE	29:7	29:7	11	]
ASSIGN_OP	29:9	29:9	9	=
LEAF_NODE	29:9	29:9	10	=
RVAL	29:11	29:11	9	'\r'
FIELD	29:11	29:11	10	'\r'
LEAF_NODE	29:11	29:11	11	'\r'
LEAF_NODE	29:15	29:15	7	;
EXPR_STATEMENT	30:2	30:10	6	cur += 2 ;
EXPR	30:2	30:2	7	cur += 2
ASSIGN	30:2	30:9	8	cur += 2
LVAL	30:2	30:2	9	cur
FIELD	30:2	30:2	10	cur
LEAF_NODE	30:2	30:2	11	cur
ASSIGN_OP	30:6	30:6	9	+=
LEAF_NODE	30:6	30:6	10	+=
RVAL	30:9	30:9	9	2
FIELD	30:9	30:9	10	2
LEAF_NODE	30:9	30:9	11	2
LEAF_NODE	30:10	30:10	7	;
EXPR_STATEMENT	31:2	31:49	6	restlen = conn -> inbufused - ( cur - conn -> inbuf ) ;
EXPR	31:2	31:2	7	restlen = conn -> inbufused - ( cur - conn -> inbuf )
ASSIGN	31:2	31:12	8	restlen = conn -> inbufused - ( cur - conn -> inbuf )
LVAL	31:2	31:2	9	restlen
FIELD	31:2	31:2	10	restlen
LEAF_NODE	31:2	31:2	11	restlen
ASSIGN_OP	31:10	31:10	9	=
LEAF_NODE	31:10	31:10	10	=
RVAL	31:12	31:48	9	conn -> inbufused - ( cur - conn -> inbuf )
FIELD	31:12	31:18	10	conn -> inbufused
LEAF_NODE	31:12	31:12	11	conn
LEAF_NODE	31:16	31:16	11	->
LEAF_NODE	31:18	31:18	11	inbufused
LEAF_NODE	31:28	31:28	10	-
LEAF_NODE	31:30	31:30	10	(
FIELD	31:31	31:31	10	cur
LEAF_NODE	31:31	31:31	11	cur
LEAF_NODE	31:35	31:35	10	-
FIELD	31:37	31:43	10	conn -> inbuf
LEAF_NODE	31:37	31:37	11	conn
LEAF_NODE	31:41	31:41	11	->
LEAF_NODE	31:43	31:43	11	inbuf
LEAF_NODE	31:48	31:48	10	)
LEAF_NODE	31:49	31:49	7	;
SELECTION	32:2	32:30	6	
KEYWORD	32:2	32:2	7	if
LEAF_NODE	32:2	32:2	8	if
LEAF_NODE	32:4	32:4	7	(
CONDITION	32:5	32:5	7	restlen >= msg -> bodylen
EXPR	32:5	32:16	8	restlen >= msg -> bodylen
FIELD	32:5	32:5	9	restlen
LEAF_NODE	32:5	32:5	10	restlen
REL_OPERATOR	32:13	32:13	9	>=
LEAF_NODE	32:13	32:13	10	>=
FIELD	32:16	32:21	9	msg -> bodylen
LEAF_NODE	32:16	32:16	10	msg
LEAF_NODE	32:19	32:19	10	->
LEAF_NODE	32:21	32:21	10	bodylen
LEAF_NODE	32:28	32:28	7	)
STATEMENTS	32:30	40:2	7	
LEAF_NODE	32:30	32:30	8	{
STATEMENTS	33:3	39:3	8	
EXPR_STATEMENT	33:3	33:40	9	dummy = g_new ( char , msg -> bodylen + 1 ) ;
EXPR	33:3	33:3	10	dummy = g_new ( char , msg -> bodylen + 1 )
ASSIGN	33:3	33:11	11	dummy = g_new ( char , msg -> bodylen + 1 )
LVAL	33:3	33:3	12	dummy
FIELD	33:3	33:3	13	dummy
LEAF_NODE	33:3	33:3	14	dummy
ASSIGN_OP	33:9	33:9	12	=
LEAF_NODE	33:9	33:9	13	=
RVAL	33:11	33:11	12	g_new ( char , msg -> bodylen + 1 )
FUNCTION_CALL	33:11	33:39	13	g_new ( char , msg -> bodylen + 1 )
CALLEE	33:11	33:11	14	g_new
LEAF_NODE	33:11	33:11	15	g_new
LEAF_NODE	33:16	33:16	14	(
ARGUMENT	33:17	33:17	14	char
FIELD	33:17	33:17	15	char
LEAF_NODE	33:17	33:17	16	char
LEAF_NODE	33:21	33:21	14	,
ARGUMENT	33:23	33:38	14	msg -> bodylen + 1
FIELD	33:23	33:28	15	msg -> bodylen
LEAF_NODE	33:23	33:23	16	msg
LEAF_NODE	33:26	33:26	16	->
LEAF_NODE	33:28	33:28	16	bodylen
LEAF_NODE	33:36	33:36	15	+
FIELD	33:38	33:38	15	1
LEAF_NODE	33:38	33:38	16	1
LEAF_NODE	33:39	33:39	14	)
LEAF_NODE	33:40	33:40	10	;
EXPR_STATEMENT	34:3	34:35	9	memcpy ( dummy , cur , msg -> bodylen ) ;
EXPR	34:3	34:3	10	memcpy ( dummy , cur , msg -> bodylen )
FUNCTION_CALL	34:3	34:34	11	memcpy ( dummy , cur , msg -> bodylen )
CALLEE	34:3	34:3	12	memcpy
LEAF_NODE	34:3	34:3	13	memcpy
LEAF_NODE	34:9	34:9	12	(
ARGUMENT	34:10	34:10	12	dummy
FIELD	34:10	34:10	13	dummy
LEAF_NODE	34:10	34:10	14	dummy
LEAF_NODE	34:15	34:15	12	,
ARGUMENT	34:17	34:17	12	cur
FIELD	34:17	34:17	13	cur
LEAF_NODE	34:17	34:17	14	cur
LEAF_NODE	34:20	34:20	12	,
ARGUMENT	34:22	34:22	12	msg -> bodylen
FIELD	34:22	34:27	13	msg -> bodylen
LEAF_NODE	34:22	34:22	14	msg
LEAF_NODE	34:25	34:25	14	->
LEAF_NODE	34:27	34:27	14	bodylen
LEAF_NODE	34:34	34:34	12	)
LEAF_NODE	34:35	34:35	10	;
EXPR_STATEMENT	35:3	35:29	9	dummy [ msg -> bodylen ] = '\0' ;
EXPR	35:3	35:3	10	dummy [ msg -> bodylen ] = '\0'
ASSIGN	35:3	35:25	11	dummy [ msg -> bodylen ] = '\0'
LVAL	35:3	35:3	12	dummy [ msg -> bodylen ]
FIELD	35:3	35:21	13	dummy [ msg -> bodylen ]
LEAF_NODE	35:3	35:3	14	dummy
LEAF_NODE	35:8	35:8	14	[
EXPR	35:9	35:9	14	msg -> bodylen
FIELD	35:9	35:14	15	msg -> bodylen
LEAF_NODE	35:9	35:9	16	msg
LEAF_NODE	35:12	35:12	16	->
LEAF_NODE	35:14	35:14	16	bodylen
LEAF_NODE	35:21	35:21	14	]
ASSIGN_OP	35:23	35:23	12	=
LEAF_NODE	35:23	35:23	13	=
RVAL	35:25	35:25	12	'\0'
FIELD	35:25	35:25	13	'\0'
LEAF_NODE	35:25	35:25	14	'\0'
LEAF_NODE	35:29	35:29	10	;
EXPR_STATEMENT	36:3	36:20	9	msg -> body = dummy ;
EXPR	36:3	36:3	10	msg -> body = dummy
ASSIGN	36:3	36:15	11	msg -> body = dummy
LVAL	36:3	36:3	12	msg -> body
FIELD	36:3	36:8	13	msg -> body
LEAF_NODE	36:3	36:3	14	msg
LEAF_NODE	36:6	36:6	14	->
LEAF_NODE	36:8	36:8	14	body
ASSIGN_OP	36:13	36:13	12	=
LEAF_NODE	36:13	36:13	13	=
RVAL	36:15	36:15	12	dummy
FIELD	36:15	36:15	13	dummy
LEAF_NODE	36:15	36:15	14	dummy
LEAF_NODE	36:20	36:20	10	;
EXPR_STATEMENT	37:3	37:22	9	cur += msg -> bodylen ;
EXPR	37:3	37:3	10	cur += msg -> bodylen
ASSIGN	37:3	37:10	11	cur += msg -> bodylen
LVAL	37:3	37:3	12	cur
FIELD	37:3	37:3	13	cur
LEAF_NODE	37:3	37:3	14	cur
ASSIGN_OP	37:7	37:7	12	+=
LEAF_NODE	37:7	37:7	13	+=
RVAL	37:10	37:10	12	msg -> bodylen
FIELD	37:10	37:15	13	msg -> bodylen
LEAF_NODE	37:10	37:10	14	msg
LEAF_NODE	37:13	37:13	14	->
LEAF_NODE	37:15	37:15	14	bodylen
LEAF_NODE	37:22	37:22	10	;
EXPR_STATEMENT	38:3	38:66	9	memmove ( conn -> inbuf , cur , conn -> inbuflen - ( cur - conn -> inbuf ) ) ;
EXPR	38:3	38:3	10	memmove ( conn -> inbuf , cur , conn -> inbuflen - ( cur - conn -> inbuf ) )
FUNCTION_CALL	38:3	38:65	11	memmove ( conn -> inbuf , cur , conn -> inbuflen - ( cur - conn -> inbuf ) )
CALLEE	38:3	38:3	12	memmove
LEAF_NODE	38:3	38:3	13	memmove
LEAF_NODE	38:10	38:10	12	(
ARGUMENT	38:11	38:11	12	conn -> inbuf
FIELD	38:11	38:17	13	conn -> inbuf
LEAF_NODE	38:11	38:11	14	conn
LEAF_NODE	38:15	38:15	14	->
LEAF_NODE	38:17	38:17	14	inbuf
LEAF_NODE	38:22	38:22	12	,
ARGUMENT	38:24	38:24	12	cur
FIELD	38:24	38:24	13	cur
LEAF_NODE	38:24	38:24	14	cur
LEAF_NODE	38:27	38:27	12	,
ARGUMENT	38:29	38:64	12	conn -> inbuflen - ( cur - conn -> inbuf )
FIELD	38:29	38:35	13	conn -> inbuflen
LEAF_NODE	38:29	38:29	14	conn
LEAF_NODE	38:33	38:33	14	->
LEAF_NODE	38:35	38:35	14	inbuflen
LEAF_NODE	38:44	38:44	13	-
LEAF_NODE	38:46	38:46	13	(
FIELD	38:47	38:47	13	cur
LEAF_NODE	38:47	38:47	14	cur
LEAF_NODE	38:51	38:51	13	-
FIELD	38:53	38:59	13	conn -> inbuf
LEAF_NODE	38:53	38:53	14	conn
LEAF_NODE	38:57	38:57	14	->
LEAF_NODE	38:59	38:59	14	inbuf
LEAF_NODE	38:64	38:64	13	)
LEAF_NODE	38:65	38:65	12	)
LEAF_NODE	38:66	38:66	10	;
EXPR_STATEMENT	39:3	39:40	9	conn -> inbufused = strlen ( conn -> inbuf ) ;
EXPR	39:3	39:3	10	conn -> inbufused = strlen ( conn -> inbuf )
ASSIGN	39:3	39:21	11	conn -> inbufused = strlen ( conn -> inbuf )
LVAL	39:3	39:3	12	conn -> inbufused
FIELD	39:3	39:9	13	conn -> inbufused
LEAF_NODE	39:3	39:3	14	conn
LEAF_NODE	39:7	39:7	14	->
LEAF_NODE	39:9	39:9	14	inbufused
ASSIGN_OP	39:19	39:19	12	=
LEAF_NODE	39:19	39:19	13	=
RVAL	39:21	39:21	12	strlen ( conn -> inbuf )
FUNCTION_CALL	39:21	39:39	13	strlen ( conn -> inbuf )
CALLEE	39:21	39:21	14	strlen
LEAF_NODE	39:21	39:21	15	strlen
LEAF_NODE	39:27	39:27	14	(
ARGUMENT	39:28	39:28	14	conn -> inbuf
FIELD	39:28	39:34	15	conn -> inbuf
LEAF_NODE	39:28	39:28	16	conn
LEAF_NODE	39:32	39:32	16	->
LEAF_NODE	39:34	39:34	16	inbuf
LEAF_NODE	39:39	39:39	14	)
LEAF_NODE	39:40	39:40	10	;
LEAF_NODE	40:2	40:2	8	}
SELECTION	40:4	40:9	6	
KEYWORD	40:4	40:4	7	else
LEAF_NODE	40:4	40:4	8	else
STATEMENTS	40:9	43:2	7	
LEAF_NODE	40:9	40:9	8	{
STATEMENTS	41:3	42:3	8	
EXPR_STATEMENT	41:3	41:19	9	sipmsg_free ( msg ) ;
EXPR	41:3	41:3	10	sipmsg_free ( msg )
FUNCTION_CALL	41:3	41:18	11	sipmsg_free ( msg )
CALLEE	41:3	41:3	12	sipmsg_free
LEAF_NODE	41:3	41:3	13	sipmsg_free
LEAF_NODE	41:14	41:14	12	(
ARGUMENT	41:15	41:15	12	msg
FIELD	41:15	41:15	13	msg
LEAF_NODE	41:15	41:15	14	msg
LEAF_NODE	41:18	41:18	12	)
LEAF_NODE	41:19	41:19	10	;
JUMP_STATEMENT	42:3	42:9	9	return DESTINATION ;
KEYWORD	42:3	42:3	10	return
LEAF_NODE	42:3	42:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	42:9	42:9	10	;
LEAF_NODE	43:2	43:2	8	}
EXPR_STATEMENT	44:2	44:96	6	purple_debug ( PURPLE_DEBUG_MISC , "simple" , "in process response response: %d\n" , msg -> response ) ;
EXPR	44:2	44:2	7	purple_debug ( PURPLE_DEBUG_MISC , "simple" , "in process response response: %d\n" , msg -> response )
FUNCTION_CALL	44:2	44:95	8	purple_debug ( PURPLE_DEBUG_MISC , "simple" , "in process response response: %d\n" , msg -> response )
CALLEE	44:2	44:2	9	purple_debug
LEAF_NODE	44:2	44:2	10	purple_debug
LEAF_NODE	44:14	44:14	9	(
ARGUMENT	44:15	44:15	9	PURPLE_DEBUG_MISC
FIELD	44:15	44:15	10	PURPLE_DEBUG_MISC
LEAF_NODE	44:15	44:15	11	PURPLE_DEBUG_MISC
LEAF_NODE	44:32	44:32	9	,
ARGUMENT	44:34	44:34	9	"simple"
FIELD	44:34	44:34	10	"simple"
LEAF_NODE	44:34	44:34	11	"simple"
LEAF_NODE	44:42	44:42	9	,
ARGUMENT	44:44	44:44	9	"in process response response: %d\n"
FIELD	44:44	44:44	10	"in process response response: %d\n"
LEAF_NODE	44:44	44:44	11	"in process response response: %d\n"
LEAF_NODE	44:80	44:80	9	,
ARGUMENT	44:82	44:82	9	msg -> response
FIELD	44:82	44:87	10	msg -> response
LEAF_NODE	44:82	44:82	11	msg
LEAF_NODE	44:85	44:85	11	->
LEAF_NODE	44:87	44:87	11	response
LEAF_NODE	44:95	44:95	9	)
LEAF_NODE	44:96	44:96	7	;
EXPR_STATEMENT	45:2	45:33	6	process_input_message ( sip , msg ) ;
EXPR	45:2	45:2	7	process_input_message ( sip , msg )
FUNCTION_CALL	45:2	45:32	8	process_input_message ( sip , msg )
CALLEE	45:2	45:2	9	process_input_message
LEAF_NODE	45:2	45:2	10	process_input_message
LEAF_NODE	45:23	45:23	9	(
ARGUMENT	45:24	45:24	9	sip
FIELD	45:24	45:24	10	sip
LEAF_NODE	45:24	45:24	11	sip
LEAF_NODE	45:27	45:27	9	,
ARGUMENT	45:29	45:29	9	msg
FIELD	45:29	45:29	10	msg
LEAF_NODE	45:29	45:29	11	msg
LEAF_NODE	45:32	45:32	9	)
LEAF_NODE	45:33	45:33	7	;
EXPR_STATEMENT	46:2	46:18	6	sipmsg_free ( msg ) ;
EXPR	46:2	46:2	7	sipmsg_free ( msg )
FUNCTION_CALL	46:2	46:17	8	sipmsg_free ( msg )
CALLEE	46:2	46:2	9	sipmsg_free
LEAF_NODE	46:2	46:2	10	sipmsg_free
LEAF_NODE	46:13	46:13	9	(
ARGUMENT	46:14	46:14	9	msg
FIELD	46:14	46:14	10	msg
LEAF_NODE	46:14	46:14	11	msg
LEAF_NODE	46:17	46:17	9	)
LEAF_NODE	46:18	46:18	7	;
LEAF_NODE	47:1	47:1	5	}
SELECTION	47:3	47:8	3	
KEYWORD	47:3	47:3	4	else
LEAF_NODE	47:3	47:3	5	else
STATEMENTS	47:8	49:1	4	
LEAF_NODE	47:8	47:8	5	{
STATEMENTS	48:2	48:2	5	
EXPR_STATEMENT	48:2	48:95	6	purple_debug ( PURPLE_DEBUG_MISC , "simple" , "received a incomplete sip msg: %s\n" , conn -> inbuf ) ;
EXPR	48:2	48:2	7	purple_debug ( PURPLE_DEBUG_MISC , "simple" , "received a incomplete sip msg: %s\n" , conn -> inbuf )
FUNCTION_CALL	48:2	48:94	8	purple_debug ( PURPLE_DEBUG_MISC , "simple" , "received a incomplete sip msg: %s\n" , conn -> inbuf )
CALLEE	48:2	48:2	9	purple_debug
LEAF_NODE	48:2	48:2	10	purple_debug
LEAF_NODE	48:14	48:14	9	(
ARGUMENT	48:15	48:15	9	PURPLE_DEBUG_MISC
FIELD	48:15	48:15	10	PURPLE_DEBUG_MISC
LEAF_NODE	48:15	48:15	11	PURPLE_DEBUG_MISC
LEAF_NODE	48:32	48:32	9	,
ARGUMENT	48:34	48:34	9	"simple"
FIELD	48:34	48:34	10	"simple"
LEAF_NODE	48:34	48:34	11	"simple"
LEAF_NODE	48:42	48:42	9	,
ARGUMENT	48:44	48:44	9	"received a incomplete sip msg: %s\n"
FIELD	48:44	48:44	10	"received a incomplete sip msg: %s\n"
LEAF_NODE	48:44	48:44	11	"received a incomplete sip msg: %s\n"
LEAF_NODE	48:81	48:81	9	,
ARGUMENT	48:83	48:83	9	conn -> inbuf
FIELD	48:83	48:89	10	conn -> inbuf
LEAF_NODE	48:83	48:83	11	conn
LEAF_NODE	48:87	48:87	11	->
LEAF_NODE	48:89	48:89	11	inbuf
LEAF_NODE	48:94	48:94	9	)
LEAF_NODE	48:95	48:95	7	;
LEAF_NODE	49:1	49:1	5	}
LEAF_NODE	50:0	50:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	30:0	1	
RETURN_TYPE	1:0	1:6	2	gchar *
TYPE_NAME	1:0	1:0	3	gchar
LEAF_NODE	1:0	1:0	4	gchar
LEAF_NODE	1:6	1:6	3	*
FUNCTION_NAME	2:0	2:0	2	purple_media_codec_to_string
LEAF_NODE	2:0	2:0	3	purple_media_codec_to_string
PARAMETER_LIST	2:28	2:58	2	( const PurpleMediaCodec * codec )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:53	3	const PurpleMediaCodec * codec
TYPE	2:29	2:52	4	const PurpleMediaCodec *
TYPE_NAME	2:29	2:35	5	const PurpleMediaCodec
LEAF_NODE	2:29	2:29	6	const
LEAF_NODE	2:35	2:35	6	PurpleMediaCodec
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	codec
LEAF_NODE	2:53	2:53	5	codec
LEAF_NODE	2:58	2:58	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	29:1	2	
SIMPLE_DECL	4:1	4:30	3	PurpleMediaCodecPrivate * priv ;
VAR_DECL	4:1	4:26	4	PurpleMediaCodecPrivate * priv
TYPE	4:1	4:25	5	PurpleMediaCodecPrivate *
TYPE_NAME	4:1	4:1	6	PurpleMediaCodecPrivate
LEAF_NODE	4:1	4:1	7	PurpleMediaCodecPrivate
POINTER	4:25	4:25	6	*
LEAF_NODE	4:25	4:25	7	*
NAME	4:26	4:26	5	priv
LEAF_NODE	4:26	4:26	6	priv
LEAF_NODE	4:30	4:30	4	;
SIMPLE_DECL	5:1	5:23	3	GString * string ; string = NULL ;
VAR_DECL	5:1	5:10	4	GString * string ; string = NULL
TYPE	5:1	5:9	5	GString *
TYPE_NAME	5:1	5:1	6	GString
LEAF_NODE	5:1	5:1	7	GString
POINTER	5:9	5:9	6	*
LEAF_NODE	5:9	5:9	7	*
NAME	5:10	5:10	5	string
LEAF_NODE	5:10	5:10	6	string
LEAF_NODE	0:0	0:0	5	;
INIT	5:10	5:10	5	string = NULL
ASSIGN	5:10	5:19	6	string = NULL
LVAL	5:10	5:10	7	string
NAME	5:10	5:10	8	string
LEAF_NODE	5:10	5:10	9	string
ASSIGN_OP	5:17	5:17	7	=
LEAF_NODE	5:17	5:17	8	=
RVAL	5:19	5:19	7	NULL
FIELD	5:19	5:19	8	NULL
LEAF_NODE	5:19	5:19	9	NULL
LEAF_NODE	5:23	5:23	4	;
SIMPLE_DECL	6:1	6:12	3	GList * item ;
VAR_DECL	6:1	6:8	4	GList * item
TYPE	6:1	6:7	5	GList *
TYPE_NAME	6:1	6:1	6	GList
LEAF_NODE	6:1	6:1	7	GList
POINTER	6:7	6:7	6	*
LEAF_NODE	6:7	6:7	7	*
NAME	6:8	6:8	5	item
LEAF_NODE	6:8	6:8	6	item
LEAF_NODE	6:12	6:12	4	;
SIMPLE_DECL	7:1	7:18	3	gchar * charstring ;
VAR_DECL	7:1	7:8	4	gchar * charstring
TYPE	7:1	7:7	5	gchar *
TYPE_NAME	7:1	7:1	6	gchar
LEAF_NODE	7:1	7:1	7	gchar
POINTER	7:7	7:7	6	*
LEAF_NODE	7:7	7:7	7	*
NAME	7:8	7:8	5	charstring
LEAF_NODE	7:8	7:8	6	charstring
LEAF_NODE	7:18	7:18	4	;
SIMPLE_DECL	8:1	8:35	3	const gchar * media_type_str ; media_type_str = NULL ;
VAR_DECL	8:1	8:14	4	const gchar * media_type_str ; media_type_str = NULL
TYPE	8:1	8:13	5	const gchar *
TYPE_NAME	8:1	8:7	6	const gchar
LEAF_NODE	8:1	8:1	7	const
LEAF_NODE	8:7	8:7	7	gchar
POINTER	8:13	8:13	6	*
LEAF_NODE	8:13	8:13	7	*
NAME	8:14	8:14	5	media_type_str
LEAF_NODE	8:14	8:14	6	media_type_str
LEAF_NODE	0:0	0:0	5	;
INIT	8:14	8:14	5	media_type_str = NULL
ASSIGN	8:14	8:31	6	media_type_str = NULL
LVAL	8:14	8:14	7	media_type_str
NAME	8:14	8:14	8	media_type_str
LEAF_NODE	8:14	8:14	9	media_type_str
ASSIGN_OP	8:29	8:29	7	=
LEAF_NODE	8:29	8:29	8	=
RVAL	8:31	8:31	7	NULL
FIELD	8:31	8:31	8	NULL
LEAF_NODE	8:31	8:31	9	NULL
LEAF_NODE	8:35	8:35	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	codec == NULL
EXPR	9:5	9:14	5	codec == NULL
FIELD	9:5	9:5	6	codec
LEAF_NODE	9:5	9:5	7	codec
EQ_OPERATOR	9:11	9:11	6	==
LEAF_NODE	9:11	9:11	7	==
FIELD	9:14	9:14	6	NULL
LEAF_NODE	9:14	9:14	7	NULL
LEAF_NODE	9:18	9:18	4	)
STATEMENTS	10:2	10:2	4	
JUMP_STATEMENT	10:2	10:27	5	return g_strdup ( "(NULL)" ) ;
KEYWORD	10:2	10:2	6	return
LEAF_NODE	10:2	10:2	7	return
DESTINATION	10:9	10:9	6	g_strdup ( "(NULL)" )
EXPR	10:9	10:9	7	g_strdup ( "(NULL)" )
FUNCTION_CALL	10:9	10:26	8	g_strdup ( "(NULL)" )
CALLEE	10:9	10:9	9	g_strdup
LEAF_NODE	10:9	10:9	10	g_strdup
LEAF_NODE	10:17	10:17	9	(
ARGUMENT	10:18	10:18	9	"(NULL)"
FIELD	10:18	10:18	10	"(NULL)"
LEAF_NODE	10:18	10:18	11	"(NULL)"
LEAF_NODE	10:26	10:26	9	)
LEAF_NODE	10:27	10:27	6	;
EXPR_STATEMENT	11:1	11:45	3	priv = PURPLE_MEDIA_CODEC_GET_PRIVATE ( codec ) ;
EXPR	11:1	11:1	4	priv = PURPLE_MEDIA_CODEC_GET_PRIVATE ( codec )
ASSIGN	11:1	11:8	5	priv = PURPLE_MEDIA_CODEC_GET_PRIVATE ( codec )
LVAL	11:1	11:1	6	priv
FIELD	11:1	11:1	7	priv
LEAF_NODE	11:1	11:1	8	priv
ASSIGN_OP	11:6	11:6	6	=
LEAF_NODE	11:6	11:6	7	=
RVAL	11:8	11:8	6	PURPLE_MEDIA_CODEC_GET_PRIVATE ( codec )
FUNCTION_CALL	11:8	11:44	7	PURPLE_MEDIA_CODEC_GET_PRIVATE ( codec )
CALLEE	11:8	11:8	8	PURPLE_MEDIA_CODEC_GET_PRIVATE
LEAF_NODE	11:8	11:8	9	PURPLE_MEDIA_CODEC_GET_PRIVATE
LEAF_NODE	11:38	11:38	8	(
ARGUMENT	11:39	11:39	8	codec
FIELD	11:39	11:39	9	codec
LEAF_NODE	11:39	11:39	10	codec
LEAF_NODE	11:44	11:44	8	)
LEAF_NODE	11:45	11:45	4	;
EXPR_STATEMENT	12:1	12:26	3	string = g_string_new ( "" ) ;
EXPR	12:1	12:1	4	string = g_string_new ( "" )
ASSIGN	12:1	12:10	5	string = g_string_new ( "" )
LVAL	12:1	12:1	6	string
FIELD	12:1	12:1	7	string
LEAF_NODE	12:1	12:1	8	string
ASSIGN_OP	12:8	12:8	6	=
LEAF_NODE	12:8	12:8	7	=
RVAL	12:10	12:10	6	g_string_new ( "" )
FUNCTION_CALL	12:10	12:25	7	g_string_new ( "" )
CALLEE	12:10	12:10	8	g_string_new
LEAF_NODE	12:10	12:10	9	g_string_new
LEAF_NODE	12:22	12:22	8	(
ARGUMENT	12:23	12:23	8	""
FIELD	12:23	12:23	9	""
LEAF_NODE	12:23	12:23	10	""
LEAF_NODE	12:25	12:25	8	)
LEAF_NODE	12:26	12:26	4	;
SELECTION	13:1	14:2	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	priv -> media_type & PURPLE_MEDIA_AUDIO
EXPR	13:5	13:24	5	priv -> media_type & PURPLE_MEDIA_AUDIO
FIELD	13:5	13:11	6	priv -> media_type
LEAF_NODE	13:5	13:5	7	priv
LEAF_NODE	13:9	13:9	7	->
LEAF_NODE	13:11	13:11	7	media_type
LEAF_NODE	13:22	13:22	6	&
FIELD	13:24	13:24	6	PURPLE_MEDIA_AUDIO
LEAF_NODE	13:24	13:24	7	PURPLE_MEDIA_AUDIO
LEAF_NODE	13:42	13:42	4	)
STATEMENTS	14:2	14:2	4	
EXPR_STATEMENT	14:2	14:26	5	media_type_str = "audio" ;
EXPR	14:2	14:2	6	media_type_str = "audio"
ASSIGN	14:2	14:19	7	media_type_str = "audio"
LVAL	14:2	14:2	8	media_type_str
FIELD	14:2	14:2	9	media_type_str
LEAF_NODE	14:2	14:2	10	media_type_str
ASSIGN_OP	14:17	14:17	8	=
LEAF_NODE	14:17	14:17	9	=
RVAL	14:19	14:19	8	"audio"
FIELD	14:19	14:19	9	"audio"
LEAF_NODE	14:19	14:19	10	"audio"
LEAF_NODE	14:26	14:26	6	;
SELECTION	15:1	15:6	3	
KEYWORD	15:1	15:1	4	else
LEAF_NODE	15:1	15:1	5	else
STATEMENTS	15:6	15:6	4	
SELECTION	15:6	16:2	5	
KEYWORD	15:6	15:6	6	if
LEAF_NODE	15:6	15:6	7	if
LEAF_NODE	15:9	15:9	6	(
CONDITION	15:10	15:10	6	priv -> media_type & PURPLE_MEDIA_VIDEO
EXPR	15:10	15:29	7	priv -> media_type & PURPLE_MEDIA_VIDEO
FIELD	15:10	15:16	8	priv -> media_type
LEAF_NODE	15:10	15:10	9	priv
LEAF_NODE	15:14	15:14	9	->
LEAF_NODE	15:16	15:16	9	media_type
LEAF_NODE	15:27	15:27	8	&
FIELD	15:29	15:29	8	PURPLE_MEDIA_VIDEO
LEAF_NODE	15:29	15:29	9	PURPLE_MEDIA_VIDEO
LEAF_NODE	15:47	15:47	6	)
STATEMENTS	16:2	16:2	6	
EXPR_STATEMENT	16:2	16:26	7	media_type_str = "video" ;
EXPR	16:2	16:2	8	media_type_str = "video"
ASSIGN	16:2	16:19	9	media_type_str = "video"
LVAL	16:2	16:2	10	media_type_str
FIELD	16:2	16:2	11	media_type_str
LEAF_NODE	16:2	16:2	12	media_type_str
ASSIGN_OP	16:17	16:17	10	=
LEAF_NODE	16:17	16:17	11	=
RVAL	16:19	16:19	10	"video"
FIELD	16:19	16:19	11	"video"
LEAF_NODE	16:19	16:19	12	"video"
LEAF_NODE	16:26	16:26	8	;
SELECTION	17:1	17:6	3	
KEYWORD	17:1	17:1	4	else
LEAF_NODE	17:1	17:1	5	else
STATEMENTS	17:6	17:6	4	
SELECTION	17:6	18:2	5	
KEYWORD	17:6	17:6	6	if
LEAF_NODE	17:6	17:6	7	if
LEAF_NODE	17:9	17:9	6	(
CONDITION	17:10	17:10	6	priv -> media_type & PURPLE_MEDIA_APPLICATION
EXPR	17:10	17:29	7	priv -> media_type & PURPLE_MEDIA_APPLICATION
FIELD	17:10	17:16	8	priv -> media_type
LEAF_NODE	17:10	17:10	9	priv
LEAF_NODE	17:14	17:14	9	->
LEAF_NODE	17:16	17:16	9	media_type
LEAF_NODE	17:27	17:27	8	&
FIELD	17:29	17:29	8	PURPLE_MEDIA_APPLICATION
LEAF_NODE	17:29	17:29	9	PURPLE_MEDIA_APPLICATION
LEAF_NODE	17:53	17:53	6	)
STATEMENTS	18:2	18:2	6	
EXPR_STATEMENT	18:2	18:32	7	media_type_str = "application" ;
EXPR	18:2	18:2	8	media_type_str = "application"
ASSIGN	18:2	18:19	9	media_type_str = "application"
LVAL	18:2	18:2	10	media_type_str
FIELD	18:2	18:2	11	media_type_str
LEAF_NODE	18:2	18:2	12	media_type_str
ASSIGN_OP	18:17	18:17	10	=
LEAF_NODE	18:17	18:17	11	=
RVAL	18:19	18:19	10	"application"
FIELD	18:19	18:19	11	"application"
LEAF_NODE	18:19	18:19	12	"application"
LEAF_NODE	18:32	18:32	8	;
EXPR_STATEMENT	19:1	21:36	3	g_string_printf ( string , "%d: %s %s clock:%d channels:%d" , priv -> id , media_type_str , priv -> encoding_name , priv -> clock_rate , priv -> channels ) ;
EXPR	19:1	19:1	4	g_string_printf ( string , "%d: %s %s clock:%d channels:%d" , priv -> id , media_type_str , priv -> encoding_name , priv -> clock_rate , priv -> channels )
FUNCTION_CALL	19:1	21:35	5	g_string_printf ( string , "%d: %s %s clock:%d channels:%d" , priv -> id , media_type_str , priv -> encoding_name , priv -> clock_rate , priv -> channels )
CALLEE	19:1	19:1	6	g_string_printf
LEAF_NODE	19:1	19:1	7	g_string_printf
LEAF_NODE	19:16	19:16	6	(
ARGUMENT	19:17	19:17	6	string
FIELD	19:17	19:17	7	string
LEAF_NODE	19:17	19:17	8	string
LEAF_NODE	19:23	19:23	6	,
ARGUMENT	19:25	19:25	6	"%d: %s %s clock:%d channels:%d"
FIELD	19:25	19:25	7	"%d: %s %s clock:%d channels:%d"
LEAF_NODE	19:25	19:25	8	"%d: %s %s clock:%d channels:%d"
LEAF_NODE	19:57	19:57	6	,
ARGUMENT	19:59	19:59	6	priv -> id
FIELD	19:59	19:65	7	priv -> id
LEAF_NODE	19:59	19:59	8	priv
LEAF_NODE	19:63	19:63	8	->
LEAF_NODE	19:65	19:65	8	id
LEAF_NODE	19:67	19:67	6	,
ARGUMENT	20:3	20:3	6	media_type_str
FIELD	20:3	20:3	7	media_type_str
LEAF_NODE	20:3	20:3	8	media_type_str
LEAF_NODE	20:17	20:17	6	,
ARGUMENT	20:19	20:19	6	priv -> encoding_name
FIELD	20:19	20:25	7	priv -> encoding_name
LEAF_NODE	20:19	20:19	8	priv
LEAF_NODE	20:23	20:23	8	->
LEAF_NODE	20:25	20:25	8	encoding_name
LEAF_NODE	20:38	20:38	6	,
ARGUMENT	21:3	21:3	6	priv -> clock_rate
FIELD	21:3	21:9	7	priv -> clock_rate
LEAF_NODE	21:3	21:3	8	priv
LEAF_NODE	21:7	21:7	8	->
LEAF_NODE	21:9	21:9	8	clock_rate
LEAF_NODE	21:19	21:19	6	,
ARGUMENT	21:21	21:21	6	priv -> channels
FIELD	21:21	21:27	7	priv -> channels
LEAF_NODE	21:21	21:21	8	priv
LEAF_NODE	21:25	21:25	8	->
LEAF_NODE	21:27	21:27	8	channels
LEAF_NODE	21:35	21:35	6	)
LEAF_NODE	21:36	21:36	4	;
ITERATION	22:1	22:69	3	
KEYWORD	22:1	22:1	4	for
LEAF_NODE	22:1	22:1	5	for
LEAF_NODE	22:5	22:5	4	(
FOR_INIT	22:6	22:34	4	item = priv -> optional_params ;
EXPR	22:6	22:6	5	item = priv -> optional_params
ASSIGN	22:6	22:13	6	item = priv -> optional_params
LVAL	22:6	22:6	7	item
FIELD	22:6	22:6	8	item
LEAF_NODE	22:6	22:6	9	item
ASSIGN_OP	22:11	22:11	7	=
LEAF_NODE	22:11	22:11	8	=
RVAL	22:13	22:13	7	priv -> optional_params
FIELD	22:13	22:19	8	priv -> optional_params
LEAF_NODE	22:13	22:13	9	priv
LEAF_NODE	22:17	22:17	9	->
LEAF_NODE	22:19	22:19	9	optional_params
LEAF_NODE	22:34	22:34	5	;
CONDITION	22:36	22:36	4	item
EXPR	22:36	22:36	5	item
FIELD	22:36	22:36	6	item
LEAF_NODE	22:36	22:36	7	item
LEAF_NODE	22:40	22:40	4	;
FOR_EXPR	22:42	22:42	4	item = g_list_next ( item )
EXPR	22:42	22:42	5	item = g_list_next ( item )
ASSIGN	22:42	22:49	6	item = g_list_next ( item )
LVAL	22:42	22:42	7	item
FIELD	22:42	22:42	8	item
LEAF_NODE	22:42	22:42	9	item
ASSIGN_OP	22:47	22:47	7	=
LEAF_NODE	22:47	22:47	8	=
RVAL	22:49	22:49	7	g_list_next ( item )
FUNCTION_CALL	22:49	22:66	8	g_list_next ( item )
CALLEE	22:49	22:49	9	g_list_next
LEAF_NODE	22:49	22:49	10	g_list_next
LEAF_NODE	22:61	22:61	9	(
ARGUMENT	22:62	22:62	9	item
FIELD	22:62	22:62	10	item
LEAF_NODE	22:62	22:62	11	item
LEAF_NODE	22:66	22:66	9	)
LEAF_NODE	22:67	22:67	4	)
STATEMENTS	22:69	26:1	4	
LEAF_NODE	22:69	22:69	5	{
STATEMENTS	23:2	24:2	5	
SIMPLE_DECL	23:2	23:40	6	PurpleKeyValuePair * param ; param = item -> data ;
VAR_DECL	23:2	23:22	7	PurpleKeyValuePair * param ; param = item -> data
TYPE	23:2	23:21	8	PurpleKeyValuePair *
TYPE_NAME	23:2	23:2	9	PurpleKeyValuePair
LEAF_NODE	23:2	23:2	10	PurpleKeyValuePair
POINTER	23:21	23:21	9	*
LEAF_NODE	23:21	23:21	10	*
NAME	23:22	23:22	8	param
LEAF_NODE	23:22	23:22	9	param
LEAF_NODE	0:0	0:0	8	;
INIT	23:22	23:22	8	param = item -> data
ASSIGN	23:22	23:30	9	param = item -> data
LVAL	23:22	23:22	10	param
NAME	23:22	23:22	11	param
LEAF_NODE	23:22	23:22	12	param
ASSIGN_OP	23:28	23:28	10	=
LEAF_NODE	23:28	23:28	11	=
RVAL	23:30	23:30	10	item -> data
FIELD	23:30	23:36	11	item -> data
LEAF_NODE	23:30	23:30	12	item
LEAF_NODE	23:34	23:34	12	->
LEAF_NODE	23:36	23:36	12	data
LEAF_NODE	23:40	23:40	7	;
EXPR_STATEMENT	24:2	25:38	6	g_string_append_printf ( string , " %s=%s" , param -> key , ( gchar * ) param -> value ) ;
EXPR	24:2	24:2	7	g_string_append_printf ( string , " %s=%s" , param -> key , ( gchar * ) param -> value )
FUNCTION_CALL	24:2	25:37	8	g_string_append_printf ( string , " %s=%s" , param -> key , ( gchar * ) param -> value )
CALLEE	24:2	24:2	9	g_string_append_printf
LEAF_NODE	24:2	24:2	10	g_string_append_printf
LEAF_NODE	24:25	24:25	9	(
ARGUMENT	24:26	24:26	9	string
FIELD	24:26	24:26	10	string
LEAF_NODE	24:26	24:26	11	string
LEAF_NODE	24:32	24:32	9	,
ARGUMENT	24:34	24:34	9	" %s=%s"
FIELD	24:34	24:34	10	" %s=%s"
LEAF_NODE	24:34	24:34	11	" %s=%s"
LEAF_NODE	24:42	24:42	9	,
ARGUMENT	25:4	25:4	9	param -> key
FIELD	25:4	25:11	10	param -> key
LEAF_NODE	25:4	25:4	11	param
LEAF_NODE	25:9	25:9	11	->
LEAF_NODE	25:11	25:11	11	key
LEAF_NODE	25:14	25:14	9	,
ARGUMENT	25:16	25:25	9	( gchar * ) param -> value
LEAF_NODE	25:16	25:16	10	(
TYPE_NAME	25:17	25:17	10	gchar
LEAF_NODE	25:17	25:17	11	gchar
LEAF_NODE	25:23	25:23	10	*
LEAF_NODE	25:24	25:24	10	)
FIELD	25:25	25:32	10	param -> value
LEAF_NODE	25:25	25:25	11	param
LEAF_NODE	25:30	25:30	11	->
LEAF_NODE	25:32	25:32	11	value
LEAF_NODE	25:37	25:37	9	)
LEAF_NODE	25:38	25:38	7	;
LEAF_NODE	26:1	26:1	5	}
EXPR_STATEMENT	27:1	27:25	3	charstring = string -> str ;
EXPR	27:1	27:1	4	charstring = string -> str
ASSIGN	27:1	27:14	5	charstring = string -> str
LVAL	27:1	27:1	6	charstring
FIELD	27:1	27:1	7	charstring
LEAF_NODE	27:1	27:1	8	charstring
ASSIGN_OP	27:12	27:12	6	=
LEAF_NODE	27:12	27:12	7	=
RVAL	27:14	27:14	6	string -> str
FIELD	27:14	27:22	7	string -> str
LEAF_NODE	27:14	27:14	8	string
LEAF_NODE	27:20	27:20	8	->
LEAF_NODE	27:22	27:22	8	str
LEAF_NODE	27:25	27:25	4	;
EXPR_STATEMENT	28:1	28:30	3	g_string_free ( string , FALSE ) ;
EXPR	28:1	28:1	4	g_string_free ( string , FALSE )
FUNCTION_CALL	28:1	28:29	5	g_string_free ( string , FALSE )
CALLEE	28:1	28:1	6	g_string_free
LEAF_NODE	28:1	28:1	7	g_string_free
LEAF_NODE	28:15	28:15	6	(
ARGUMENT	28:16	28:16	6	string
FIELD	28:16	28:16	7	string
LEAF_NODE	28:16	28:16	8	string
LEAF_NODE	28:22	28:22	6	,
ARGUMENT	28:24	28:24	6	FALSE
FIELD	28:24	28:24	7	FALSE
LEAF_NODE	28:24	28:24	8	FALSE
LEAF_NODE	28:29	28:29	6	)
LEAF_NODE	28:30	28:30	4	;
JUMP_STATEMENT	29:1	29:18	3	return charstring ;
KEYWORD	29:1	29:1	4	return
LEAF_NODE	29:1	29:1	5	return
DESTINATION	29:8	29:8	4	charstring
EXPR	29:8	29:8	5	charstring
FIELD	29:8	29:8	6	charstring
LEAF_NODE	29:8	29:8	7	charstring
LEAF_NODE	29:18	29:18	4	;
LEAF_NODE	30:0	30:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	28:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	jabber_si_xfer_ibb_send_init
LEAF_NODE	2:0	2:0	3	jabber_si_xfer_ibb_send_init
PARAMETER_LIST	2:28	2:63	2	( JabberStream * js , PurpleXfer * xfer )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:43	3	JabberStream * js
TYPE	2:29	2:42	4	JabberStream *
TYPE_NAME	2:29	2:29	5	JabberStream
LEAF_NODE	2:29	2:29	6	JabberStream
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	js
LEAF_NODE	2:43	2:43	5	js
LEAF_NODE	2:45	2:45	3	,
PARAMETER_DECL	2:47	2:59	3	PurpleXfer * xfer
TYPE	2:47	2:58	4	PurpleXfer *
TYPE_NAME	2:47	2:47	5	PurpleXfer
LEAF_NODE	2:47	2:47	6	PurpleXfer
POINTER	2:58	2:58	5	*
LEAF_NODE	2:58	2:58	6	*
NAME	2:59	2:59	4	xfer
LEAF_NODE	2:59	2:59	5	xfer
LEAF_NODE	2:63	2:63	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	22:3	2	
SIMPLE_DECL	4:1	4:48	3	JabberSIXfer * jsx ; jsx = ( JabberSIXfer * ) xfer -> data ;
VAR_DECL	4:1	4:15	4	JabberSIXfer * jsx ; jsx = ( JabberSIXfer * ) xfer -> data
TYPE	4:1	4:14	5	JabberSIXfer *
TYPE_NAME	4:1	4:1	6	JabberSIXfer
LEAF_NODE	4:1	4:1	7	JabberSIXfer
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	jsx
LEAF_NODE	4:15	4:15	6	jsx
LEAF_NODE	0:0	0:0	5	;
INIT	4:15	4:15	5	jsx = ( JabberSIXfer * ) xfer -> data
ASSIGN	4:15	4:21	6	jsx = ( JabberSIXfer * ) xfer -> data
LVAL	4:15	4:15	7	jsx
NAME	4:15	4:15	8	jsx
LEAF_NODE	4:15	4:15	9	jsx
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:38	7	( JabberSIXfer * ) xfer -> data
LEAF_NODE	4:21	4:21	8	(
TYPE_NAME	4:22	4:22	8	JabberSIXfer
LEAF_NODE	4:22	4:22	9	JabberSIXfer
LEAF_NODE	4:35	4:35	8	*
LEAF_NODE	4:36	4:36	8	)
FIELD	4:38	4:44	8	xfer -> data
LEAF_NODE	4:38	4:38	9	xfer
LEAF_NODE	4:42	4:42	9	->
LEAF_NODE	4:44	4:44	9	data
LEAF_NODE	4:48	4:48	4	;
EXPR_STATEMENT	5:1	6:42	3	jsx -> ibb_session = jabber_ibb_session_create ( js , jsx -> stream_id , purple_xfer_get_remote_user ( xfer ) , xfer ) ;
EXPR	5:1	5:1	4	jsx -> ibb_session = jabber_ibb_session_create ( js , jsx -> stream_id , purple_xfer_get_remote_user ( xfer ) , xfer )
ASSIGN	5:1	5:20	5	jsx -> ibb_session = jabber_ibb_session_create ( js , jsx -> stream_id , purple_xfer_get_remote_user ( xfer ) , xfer )
LVAL	5:1	5:1	6	jsx -> ibb_session
FIELD	5:1	5:6	7	jsx -> ibb_session
LEAF_NODE	5:1	5:1	8	jsx
LEAF_NODE	5:4	5:4	8	->
LEAF_NODE	5:6	5:6	8	ibb_session
ASSIGN_OP	5:18	5:18	6	=
LEAF_NODE	5:18	5:18	7	=
RVAL	5:20	5:20	6	jabber_ibb_session_create ( js , jsx -> stream_id , purple_xfer_get_remote_user ( xfer ) , xfer )
FUNCTION_CALL	5:20	6:41	7	jabber_ibb_session_create ( js , jsx -> stream_id , purple_xfer_get_remote_user ( xfer ) , xfer )
CALLEE	5:20	5:20	8	jabber_ibb_session_create
LEAF_NODE	5:20	5:20	9	jabber_ibb_session_create
LEAF_NODE	5:45	5:45	8	(
ARGUMENT	5:46	5:46	8	js
FIELD	5:46	5:46	9	js
LEAF_NODE	5:46	5:46	10	js
LEAF_NODE	5:48	5:48	8	,
ARGUMENT	5:50	5:50	8	jsx -> stream_id
FIELD	5:50	5:55	9	jsx -> stream_id
LEAF_NODE	5:50	5:50	10	jsx
LEAF_NODE	5:53	5:53	10	->
LEAF_NODE	5:55	5:55	10	stream_id
LEAF_NODE	5:64	5:64	8	,
ARGUMENT	6:2	6:2	8	purple_xfer_get_remote_user ( xfer )
FUNCTION_CALL	6:2	6:34	9	purple_xfer_get_remote_user ( xfer )
CALLEE	6:2	6:2	10	purple_xfer_get_remote_user
LEAF_NODE	6:2	6:2	11	purple_xfer_get_remote_user
LEAF_NODE	6:29	6:29	10	(
ARGUMENT	6:30	6:30	10	xfer
FIELD	6:30	6:30	11	xfer
LEAF_NODE	6:30	6:30	12	xfer
LEAF_NODE	6:34	6:34	10	)
LEAF_NODE	6:35	6:35	8	,
ARGUMENT	6:37	6:37	8	xfer
FIELD	6:37	6:37	9	xfer
LEAF_NODE	6:37	6:37	10	xfer
LEAF_NODE	6:41	6:41	8	)
LEAF_NODE	6:42	6:42	4	;
SELECTION	7:1	7:23	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	jsx -> ibb_session
EXPR	7:5	7:5	5	jsx -> ibb_session
FIELD	7:5	7:10	6	jsx -> ibb_session
LEAF_NODE	7:5	7:5	7	jsx
LEAF_NODE	7:8	7:8	7	->
LEAF_NODE	7:10	7:10	7	ibb_session
LEAF_NODE	7:21	7:21	4	)
STATEMENTS	7:23	22:1	4	
LEAF_NODE	7:23	7:23	5	{
STATEMENTS	9:2	21:2	5	
EXPR_STATEMENT	9:2	10:32	6	jabber_ibb_session_set_opened_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_opened_cb ) ;
EXPR	9:2	9:2	7	jabber_ibb_session_set_opened_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_opened_cb )
FUNCTION_CALL	9:2	10:31	8	jabber_ibb_session_set_opened_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_opened_cb )
CALLEE	9:2	9:2	9	jabber_ibb_session_set_opened_callback
LEAF_NODE	9:2	9:2	10	jabber_ibb_session_set_opened_callback
LEAF_NODE	9:40	9:40	9	(
ARGUMENT	9:41	9:41	9	jsx -> ibb_session
FIELD	9:41	9:46	10	jsx -> ibb_session
LEAF_NODE	9:41	9:41	11	jsx
LEAF_NODE	9:44	9:44	11	->
LEAF_NODE	9:46	9:46	11	ibb_session
LEAF_NODE	9:57	9:57	9	,
ARGUMENT	10:3	10:3	9	jabber_si_xfer_ibb_opened_cb
FIELD	10:3	10:3	10	jabber_si_xfer_ibb_opened_cb
LEAF_NODE	10:3	10:3	11	jabber_si_xfer_ibb_opened_cb
LEAF_NODE	10:31	10:31	9	)
LEAF_NODE	10:32	10:32	7	;
EXPR_STATEMENT	11:2	12:30	6	jabber_ibb_session_set_data_sent_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_sent_cb ) ;
EXPR	11:2	11:2	7	jabber_ibb_session_set_data_sent_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_sent_cb )
FUNCTION_CALL	11:2	12:29	8	jabber_ibb_session_set_data_sent_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_sent_cb )
CALLEE	11:2	11:2	9	jabber_ibb_session_set_data_sent_callback
LEAF_NODE	11:2	11:2	10	jabber_ibb_session_set_data_sent_callback
LEAF_NODE	11:43	11:43	9	(
ARGUMENT	11:44	11:44	9	jsx -> ibb_session
FIELD	11:44	11:49	10	jsx -> ibb_session
LEAF_NODE	11:44	11:44	11	jsx
LEAF_NODE	11:47	11:47	11	->
LEAF_NODE	11:49	11:49	11	ibb_session
LEAF_NODE	11:60	11:60	9	,
ARGUMENT	12:3	12:3	9	jabber_si_xfer_ibb_sent_cb
FIELD	12:3	12:3	10	jabber_si_xfer_ibb_sent_cb
LEAF_NODE	12:3	12:3	11	jabber_si_xfer_ibb_sent_cb
LEAF_NODE	12:29	12:29	9	)
LEAF_NODE	12:30	12:30	7	;
EXPR_STATEMENT	13:2	14:32	6	jabber_ibb_session_set_closed_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_closed_cb ) ;
EXPR	13:2	13:2	7	jabber_ibb_session_set_closed_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_closed_cb )
FUNCTION_CALL	13:2	14:31	8	jabber_ibb_session_set_closed_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_closed_cb )
CALLEE	13:2	13:2	9	jabber_ibb_session_set_closed_callback
LEAF_NODE	13:2	13:2	10	jabber_ibb_session_set_closed_callback
LEAF_NODE	13:40	13:40	9	(
ARGUMENT	13:41	13:41	9	jsx -> ibb_session
FIELD	13:41	13:46	10	jsx -> ibb_session
LEAF_NODE	13:41	13:41	11	jsx
LEAF_NODE	13:44	13:44	11	->
LEAF_NODE	13:46	13:46	11	ibb_session
LEAF_NODE	13:57	13:57	9	,
ARGUMENT	14:3	14:3	9	jabber_si_xfer_ibb_closed_cb
FIELD	14:3	14:3	10	jabber_si_xfer_ibb_closed_cb
LEAF_NODE	14:3	14:3	11	jabber_si_xfer_ibb_closed_cb
LEAF_NODE	14:31	14:31	9	)
LEAF_NODE	14:32	14:32	7	;
EXPR_STATEMENT	15:2	16:31	6	jabber_ibb_session_set_error_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_error_cb ) ;
EXPR	15:2	15:2	7	jabber_ibb_session_set_error_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_error_cb )
FUNCTION_CALL	15:2	16:30	8	jabber_ibb_session_set_error_callback ( jsx -> ibb_session , jabber_si_xfer_ibb_error_cb )
CALLEE	15:2	15:2	9	jabber_ibb_session_set_error_callback
LEAF_NODE	15:2	15:2	10	jabber_ibb_session_set_error_callback
LEAF_NODE	15:39	15:39	9	(
ARGUMENT	15:40	15:40	9	jsx -> ibb_session
FIELD	15:40	15:45	10	jsx -> ibb_session
LEAF_NODE	15:40	15:40	11	jsx
LEAF_NODE	15:43	15:43	11	->
LEAF_NODE	15:45	15:45	11	ibb_session
LEAF_NODE	15:56	15:56	9	,
ARGUMENT	16:3	16:3	9	jabber_si_xfer_ibb_error_cb
FIELD	16:3	16:3	10	jabber_si_xfer_ibb_error_cb
LEAF_NODE	16:3	16:3	11	jabber_si_xfer_ibb_error_cb
LEAF_NODE	16:30	16:30	9	)
LEAF_NODE	16:31	16:31	7	;
EXPR_STATEMENT	17:2	17:59	6	purple_xfer_set_write_fnc ( xfer , jabber_si_xfer_ibb_write ) ;
EXPR	17:2	17:2	7	purple_xfer_set_write_fnc ( xfer , jabber_si_xfer_ibb_write )
FUNCTION_CALL	17:2	17:58	8	purple_xfer_set_write_fnc ( xfer , jabber_si_xfer_ibb_write )
CALLEE	17:2	17:2	9	purple_xfer_set_write_fnc
LEAF_NODE	17:2	17:2	10	purple_xfer_set_write_fnc
LEAF_NODE	17:27	17:27	9	(
ARGUMENT	17:28	17:28	9	xfer
FIELD	17:28	17:28	10	xfer
LEAF_NODE	17:28	17:28	11	xfer
LEAF_NODE	17:32	17:32	9	,
ARGUMENT	17:34	17:34	9	jabber_si_xfer_ibb_write
FIELD	17:34	17:34	10	jabber_si_xfer_ibb_write
LEAF_NODE	17:34	17:34	11	jabber_si_xfer_ibb_write
LEAF_NODE	17:58	17:58	9	)
LEAF_NODE	17:59	17:59	7	;
EXPR_STATEMENT	18:2	19:81	6	jsx -> ibb_buffer = purple_circ_buffer_new ( jabber_ibb_session_get_max_data_size ( jsx -> ibb_session ) ) ;
EXPR	18:2	18:2	7	jsx -> ibb_buffer = purple_circ_buffer_new ( jabber_ibb_session_get_max_data_size ( jsx -> ibb_session ) )
ASSIGN	18:2	19:3	8	jsx -> ibb_buffer = purple_circ_buffer_new ( jabber_ibb_session_get_max_data_size ( jsx -> ibb_session ) )
LVAL	18:2	18:2	9	jsx -> ibb_buffer
FIELD	18:2	18:7	10	jsx -> ibb_buffer
LEAF_NODE	18:2	18:2	11	jsx
LEAF_NODE	18:5	18:5	11	->
LEAF_NODE	18:7	18:7	11	ibb_buffer
ASSIGN_OP	18:18	18:18	9	=
LEAF_NODE	18:18	18:18	10	=
RVAL	19:3	19:3	9	purple_circ_buffer_new ( jabber_ibb_session_get_max_data_size ( jsx -> ibb_session ) )
FUNCTION_CALL	19:3	19:80	10	purple_circ_buffer_new ( jabber_ibb_session_get_max_data_size ( jsx -> ibb_session ) )
CALLEE	19:3	19:3	11	purple_circ_buffer_new
LEAF_NODE	19:3	19:3	12	purple_circ_buffer_new
LEAF_NODE	19:25	19:25	11	(
ARGUMENT	19:26	19:26	11	jabber_ibb_session_get_max_data_size ( jsx -> ibb_session )
FUNCTION_CALL	19:26	19:79	12	jabber_ibb_session_get_max_data_size ( jsx -> ibb_session )
CALLEE	19:26	19:26	13	jabber_ibb_session_get_max_data_size
LEAF_NODE	19:26	19:26	14	jabber_ibb_session_get_max_data_size
LEAF_NODE	19:62	19:62	13	(
ARGUMENT	19:63	19:63	13	jsx -> ibb_session
FIELD	19:63	19:68	14	jsx -> ibb_session
LEAF_NODE	19:63	19:63	15	jsx
LEAF_NODE	19:66	19:66	15	->
LEAF_NODE	19:68	19:68	15	ibb_session
LEAF_NODE	19:79	19:79	13	)
LEAF_NODE	19:80	19:80	11	)
LEAF_NODE	19:81	19:81	7	;
EXPR_STATEMENT	21:2	21:43	6	jabber_ibb_session_open ( jsx -> ibb_session ) ;
EXPR	21:2	21:2	7	jabber_ibb_session_open ( jsx -> ibb_session )
FUNCTION_CALL	21:2	21:42	8	jabber_ibb_session_open ( jsx -> ibb_session )
CALLEE	21:2	21:2	9	jabber_ibb_session_open
LEAF_NODE	21:2	21:2	10	jabber_ibb_session_open
LEAF_NODE	21:25	21:25	9	(
ARGUMENT	21:26	21:26	9	jsx -> ibb_session
FIELD	21:26	21:31	10	jsx -> ibb_session
LEAF_NODE	21:26	21:26	11	jsx
LEAF_NODE	21:29	21:29	11	->
LEAF_NODE	21:31	21:31	11	ibb_session
LEAF_NODE	21:42	21:42	9	)
LEAF_NODE	21:43	21:43	7	;
LEAF_NODE	22:1	22:1	5	}
SELECTION	22:3	22:8	3	
KEYWORD	22:3	22:3	4	else
LEAF_NODE	22:3	22:3	5	else
STATEMENTS	22:8	27:1	4	
LEAF_NODE	22:8	22:8	5	{
STATEMENTS	24:2	26:2	5	
EXPR_STATEMENT	24:2	25:56	6	purple_debug_error ( "jabber" , "failed to initiate IBB session for file transfer\n" ) ;
EXPR	24:2	24:2	7	purple_debug_error ( "jabber" , "failed to initiate IBB session for file transfer\n" )
FUNCTION_CALL	24:2	25:55	8	purple_debug_error ( "jabber" , "failed to initiate IBB session for file transfer\n" )
CALLEE	24:2	24:2	9	purple_debug_error
LEAF_NODE	24:2	24:2	10	purple_debug_error
LEAF_NODE	24:20	24:20	9	(
ARGUMENT	24:21	24:21	9	"jabber"
FIELD	24:21	24:21	10	"jabber"
LEAF_NODE	24:21	24:21	11	"jabber"
LEAF_NODE	24:29	24:29	9	,
ARGUMENT	25:3	25:3	9	"failed to initiate IBB session for file transfer\n"
FIELD	25:3	25:3	10	"failed to initiate IBB session for file transfer\n"
LEAF_NODE	25:3	25:3	11	"failed to initiate IBB session for file transfer\n"
LEAF_NODE	25:55	25:55	9	)
LEAF_NODE	25:56	25:56	7	;
EXPR_STATEMENT	26:2	26:32	6	purple_xfer_cancel_local ( xfer ) ;
EXPR	26:2	26:2	7	purple_xfer_cancel_local ( xfer )
FUNCTION_CALL	26:2	26:31	8	purple_xfer_cancel_local ( xfer )
CALLEE	26:2	26:2	9	purple_xfer_cancel_local
LEAF_NODE	26:2	26:2	10	purple_xfer_cancel_local
LEAF_NODE	26:26	26:26	9	(
ARGUMENT	26:27	26:27	9	xfer
FIELD	26:27	26:27	10	xfer
LEAF_NODE	26:27	26:27	11	xfer
LEAF_NODE	26:31	26:31	9	)
LEAF_NODE	26:32	26:32	7	;
LEAF_NODE	27:1	27:1	5	}
LEAF_NODE	28:0	28:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	32:0	1	
RETURN_TYPE	1:0	1:10	2	GtkWidget *
TYPE_NAME	1:0	1:0	3	GtkWidget
LEAF_NODE	1:0	1:0	4	GtkWidget
LEAF_NODE	1:10	1:10	3	*
FUNCTION_NAME	2:0	2:0	2	purple_perl_gtk_get_plugin_frame
LEAF_NODE	2:0	2:0	3	purple_perl_gtk_get_plugin_frame
PARAMETER_LIST	2:32	2:53	2	( PurplePlugin * plugin )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:47	3	PurplePlugin * plugin
TYPE	2:33	2:46	4	PurplePlugin *
TYPE_NAME	2:33	2:33	5	PurplePlugin
LEAF_NODE	2:33	2:33	6	PurplePlugin
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	plugin
LEAF_NODE	2:47	2:47	5	plugin
LEAF_NODE	2:53	2:53	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	31:1	2	
SIMPLE_DECL	4:1	4:8	3	SV * sv ;
VAR_DECL	4:1	4:6	4	SV * sv
TYPE	4:1	4:4	5	SV *
TYPE_NAME	4:1	4:1	6	SV
LEAF_NODE	4:1	4:1	7	SV
POINTER	4:4	4:4	6	*
LEAF_NODE	4:4	4:4	7	*
NAME	4:6	4:6	5	sv
LEAF_NODE	4:6	4:6	6	sv
LEAF_NODE	4:8	4:8	4	;
SIMPLE_DECL	5:1	5:10	3	int count ;
VAR_DECL	5:1	5:5	4	int count
TYPE	5:1	5:1	5	int
TYPE_NAME	5:1	5:1	6	int
LEAF_NODE	5:1	5:1	7	int
NAME	5:5	5:5	5	count
LEAF_NODE	5:5	5:5	6	count
LEAF_NODE	5:10	5:10	4	;
SIMPLE_DECL	6:1	6:10	3	MAGIC * mg ;
VAR_DECL	6:1	6:8	4	MAGIC * mg
TYPE	6:1	6:7	5	MAGIC *
TYPE_NAME	6:1	6:1	6	MAGIC
LEAF_NODE	6:1	6:1	7	MAGIC
POINTER	6:7	6:7	6	*
LEAF_NODE	6:7	6:7	7	*
NAME	6:8	6:8	5	mg
LEAF_NODE	6:8	6:8	6	mg
LEAF_NODE	6:10	6:10	4	;
SIMPLE_DECL	7:1	7:15	3	GtkWidget * ret ;
VAR_DECL	7:1	7:12	4	GtkWidget * ret
TYPE	7:1	7:11	5	GtkWidget *
TYPE_NAME	7:1	7:1	6	GtkWidget
LEAF_NODE	7:1	7:1	7	GtkWidget
POINTER	7:11	7:11	6	*
LEAF_NODE	7:11	7:11	7	*
NAME	7:12	7:12	5	ret
LEAF_NODE	7:12	7:12	6	ret
LEAF_NODE	7:15	7:15	4	;
SIMPLE_DECL	8:1	8:22	3	PurplePerlScript * gps ;
VAR_DECL	8:1	8:19	4	PurplePerlScript * gps
TYPE	8:1	8:18	5	PurplePerlScript *
TYPE_NAME	8:1	8:1	6	PurplePerlScript
LEAF_NODE	8:1	8:1	7	PurplePerlScript
POINTER	8:18	8:18	6	*
LEAF_NODE	8:18	8:18	7	*
NAME	8:19	8:19	5	gps
LEAF_NODE	8:19	8:19	6	gps
LEAF_NODE	8:22	8:22	4	;
EXPR_STATEMENT	9:1	9:4	3	dSP ;
EXPR	9:1	9:1	4	dSP
FIELD	9:1	9:1	5	dSP
LEAF_NODE	9:1	9:1	6	dSP
LEAF_NODE	9:4	9:4	4	;
EXPR_STATEMENT	10:1	10:31	3	gps = plugin -> info -> extra_info ;
EXPR	10:1	10:1	4	gps = plugin -> info -> extra_info
ASSIGN	10:1	10:7	5	gps = plugin -> info -> extra_info
LVAL	10:1	10:1	6	gps
FIELD	10:1	10:1	7	gps
LEAF_NODE	10:1	10:1	8	gps
ASSIGN_OP	10:5	10:5	6	=
LEAF_NODE	10:5	10:5	7	=
RVAL	10:7	10:7	6	plugin -> info -> extra_info
FIELD	10:7	10:21	7	plugin -> info -> extra_info
LEAF_NODE	10:7	10:7	8	plugin
LEAF_NODE	10:13	10:13	8	->
LEAF_NODE	10:15	10:15	8	info
LEAF_NODE	10:19	10:19	8	->
LEAF_NODE	10:21	10:21	8	extra_info
LEAF_NODE	10:31	10:31	4	;
EXPR_STATEMENT	11:1	11:6	3	ENTER ;
EXPR	11:1	11:1	4	ENTER
FIELD	11:1	11:1	5	ENTER
LEAF_NODE	11:1	11:1	6	ENTER
LEAF_NODE	11:6	11:6	4	;
EXPR_STATEMENT	12:1	12:9	3	SAVETMPS ;
EXPR	12:1	12:1	4	SAVETMPS
FIELD	12:1	12:1	5	SAVETMPS
LEAF_NODE	12:1	12:1	6	SAVETMPS
LEAF_NODE	12:9	12:9	4	;
EXPR_STATEMENT	13:1	13:66	3	count = call_pv ( gps -> gtk_prefs_sub , G_EVAL | G_SCALAR | G_NOARGS ) ;
EXPR	13:1	13:1	4	count = call_pv ( gps -> gtk_prefs_sub , G_EVAL | G_SCALAR | G_NOARGS )
ASSIGN	13:1	13:9	5	count = call_pv ( gps -> gtk_prefs_sub , G_EVAL | G_SCALAR | G_NOARGS )
LVAL	13:1	13:1	6	count
FIELD	13:1	13:1	7	count
LEAF_NODE	13:1	13:1	8	count
ASSIGN_OP	13:7	13:7	6	=
LEAF_NODE	13:7	13:7	7	=
RVAL	13:9	13:9	6	call_pv ( gps -> gtk_prefs_sub , G_EVAL | G_SCALAR | G_NOARGS )
FUNCTION_CALL	13:9	13:65	7	call_pv ( gps -> gtk_prefs_sub , G_EVAL | G_SCALAR | G_NOARGS )
CALLEE	13:9	13:9	8	call_pv
LEAF_NODE	13:9	13:9	9	call_pv
LEAF_NODE	13:16	13:16	8	(
ARGUMENT	13:17	13:17	8	gps -> gtk_prefs_sub
FIELD	13:17	13:22	9	gps -> gtk_prefs_sub
LEAF_NODE	13:17	13:17	10	gps
LEAF_NODE	13:20	13:20	10	->
LEAF_NODE	13:22	13:22	10	gtk_prefs_sub
LEAF_NODE	13:35	13:35	8	,
ARGUMENT	13:37	13:37	8	G_EVAL | G_SCALAR | G_NOARGS
BIT_OR	13:37	13:46	9	G_EVAL | G_SCALAR | G_NOARGS
BIT_OR_ELEM	13:37	13:37	10	G_EVAL
FIELD	13:37	13:37	11	G_EVAL
LEAF_NODE	13:37	13:37	12	G_EVAL
LEAF_NODE	13:44	13:44	10	|
BIT_OR_ELEM	13:46	13:46	10	G_SCALAR | G_NOARGS
BIT_OR	13:46	13:57	11	G_SCALAR | G_NOARGS
BIT_OR_ELEM	13:46	13:46	12	G_SCALAR
FIELD	13:46	13:46	13	G_SCALAR
LEAF_NODE	13:46	13:46	14	G_SCALAR
LEAF_NODE	13:55	13:55	12	|
BIT_OR_ELEM	13:57	13:57	12	G_NOARGS
FIELD	13:57	13:57	13	G_NOARGS
LEAF_NODE	13:57	13:57	14	G_NOARGS
LEAF_NODE	13:65	13:65	8	)
LEAF_NODE	13:66	13:66	4	;
SELECTION	14:1	15:2	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	count != 1
EXPR	14:5	14:14	5	count != 1
FIELD	14:5	14:5	6	count
LEAF_NODE	14:5	14:5	7	count
EQ_OPERATOR	14:11	14:11	6	!=
LEAF_NODE	14:11	14:11	7	!=
FIELD	14:14	14:14	6	1
LEAF_NODE	14:14	14:14	7	1
LEAF_NODE	14:15	14:15	4	)
STATEMENTS	15:2	15:2	4	
EXPR_STATEMENT	15:2	15:66	5	croak ( "call_pv: Did not return the correct number of values.\n" ) ;
EXPR	15:2	15:2	6	croak ( "call_pv: Did not return the correct number of values.\n" )
FUNCTION_CALL	15:2	15:65	7	croak ( "call_pv: Did not return the correct number of values.\n" )
CALLEE	15:2	15:2	8	croak
LEAF_NODE	15:2	15:2	9	croak
LEAF_NODE	15:7	15:7	8	(
ARGUMENT	15:8	15:8	8	"call_pv: Did not return the correct number of values.\n"
FIELD	15:8	15:8	9	"call_pv: Did not return the correct number of values.\n"
LEAF_NODE	15:8	15:8	10	"call_pv: Did not return the correct number of values.\n"
LEAF_NODE	15:65	15:65	8	)
LEAF_NODE	15:66	15:66	6	;
EXPR_STATEMENT	17:1	17:8	3	SPAGAIN ;
EXPR	17:1	17:1	4	SPAGAIN
FIELD	17:1	17:1	5	SPAGAIN
LEAF_NODE	17:1	17:1	6	SPAGAIN
LEAF_NODE	17:8	17:8	4	;
SELECTION	18:1	18:20	3	
KEYWORD	18:1	18:1	4	if
LEAF_NODE	18:1	18:1	5	if
LEAF_NODE	18:4	18:4	4	(
CONDITION	18:5	18:5	4	SvTRUE ( ERRSV )
EXPR	18:5	18:5	5	SvTRUE ( ERRSV )
FUNCTION_CALL	18:5	18:17	6	SvTRUE ( ERRSV )
CALLEE	18:5	18:5	7	SvTRUE
LEAF_NODE	18:5	18:5	8	SvTRUE
LEAF_NODE	18:11	18:11	7	(
ARGUMENT	18:12	18:12	7	ERRSV
FIELD	18:12	18:12	8	ERRSV
LEAF_NODE	18:12	18:12	9	ERRSV
LEAF_NODE	18:17	18:17	7	)
LEAF_NODE	18:18	18:18	4	)
STATEMENTS	18:20	22:1	4	
LEAF_NODE	18:20	18:20	5	{
STATEMENTS	19:2	19:2	5	
EXPR_STATEMENT	19:2	21:41	6	purple_debug_error ( "perl" , "Perl gtk plugin frame init exited abnormally: %s\n" , SvPVutf8_nolen ( ERRSV ) ) ;
EXPR	19:2	19:2	7	purple_debug_error ( "perl" , "Perl gtk plugin frame init exited abnormally: %s\n" , SvPVutf8_nolen ( ERRSV ) )
FUNCTION_CALL	19:2	21:40	8	purple_debug_error ( "perl" , "Perl gtk plugin frame init exited abnormally: %s\n" , SvPVutf8_nolen ( ERRSV ) )
CALLEE	19:2	19:2	9	purple_debug_error
LEAF_NODE	19:2	19:2	10	purple_debug_error
LEAF_NODE	19:20	19:20	9	(
ARGUMENT	19:21	19:21	9	"perl"
FIELD	19:21	19:21	10	"perl"
LEAF_NODE	19:21	19:21	11	"perl"
LEAF_NODE	19:27	19:27	9	,
ARGUMENT	20:19	20:19	9	"Perl gtk plugin frame init exited abnormally: %s\n"
FIELD	20:19	20:19	10	"Perl gtk plugin frame init exited abnormally: %s\n"
LEAF_NODE	20:19	20:19	11	"Perl gtk plugin frame init exited abnormally: %s\n"
LEAF_NODE	20:71	20:71	9	,
ARGUMENT	21:19	21:19	9	SvPVutf8_nolen ( ERRSV )
FUNCTION_CALL	21:19	21:39	10	SvPVutf8_nolen ( ERRSV )
CALLEE	21:19	21:19	11	SvPVutf8_nolen
LEAF_NODE	21:19	21:19	12	SvPVutf8_nolen
LEAF_NODE	21:33	21:33	11	(
ARGUMENT	21:34	21:34	11	ERRSV
FIELD	21:34	21:34	12	ERRSV
LEAF_NODE	21:34	21:34	13	ERRSV
LEAF_NODE	21:39	21:39	11	)
LEAF_NODE	21:40	21:40	9	)
LEAF_NODE	21:41	21:41	7	;
LEAF_NODE	22:1	22:1	5	}
EXPR_STATEMENT	24:1	24:10	3	sv = POPs ;
EXPR	24:1	24:1	4	sv = POPs
ASSIGN	24:1	24:6	5	sv = POPs
LVAL	24:1	24:1	6	sv
FIELD	24:1	24:1	7	sv
LEAF_NODE	24:1	24:1	8	sv
ASSIGN_OP	24:4	24:4	6	=
LEAF_NODE	24:4	24:4	7	=
RVAL	24:6	24:6	6	POPs
FIELD	24:6	24:6	7	POPs
LEAF_NODE	24:6	24:6	8	POPs
LEAF_NODE	24:10	24:10	4	;
EXPR_STATEMENT	26:1	26:39	3	mg = mg_find ( SvRV ( sv ) , PERL_MAGIC_ext ) ;
EXPR	26:1	26:1	4	mg = mg_find ( SvRV ( sv ) , PERL_MAGIC_ext )
ASSIGN	26:1	26:6	5	mg = mg_find ( SvRV ( sv ) , PERL_MAGIC_ext )
LVAL	26:1	26:1	6	mg
FIELD	26:1	26:1	7	mg
LEAF_NODE	26:1	26:1	8	mg
ASSIGN_OP	26:4	26:4	6	=
LEAF_NODE	26:4	26:4	7	=
RVAL	26:6	26:6	6	mg_find ( SvRV ( sv ) , PERL_MAGIC_ext )
FUNCTION_CALL	26:6	26:38	7	mg_find ( SvRV ( sv ) , PERL_MAGIC_ext )
CALLEE	26:6	26:6	8	mg_find
LEAF_NODE	26:6	26:6	9	mg_find
LEAF_NODE	26:13	26:13	8	(
ARGUMENT	26:14	26:14	8	SvRV ( sv )
FUNCTION_CALL	26:14	26:21	9	SvRV ( sv )
CALLEE	26:14	26:14	10	SvRV
LEAF_NODE	26:14	26:14	11	SvRV
LEAF_NODE	26:18	26:18	10	(
ARGUMENT	26:19	26:19	10	sv
FIELD	26:19	26:19	11	sv
LEAF_NODE	26:19	26:19	12	sv
LEAF_NODE	26:21	26:21	10	)
LEAF_NODE	26:22	26:22	8	,
ARGUMENT	26:24	26:24	8	PERL_MAGIC_ext
FIELD	26:24	26:24	9	PERL_MAGIC_ext
LEAF_NODE	26:24	26:24	10	PERL_MAGIC_ext
LEAF_NODE	26:38	26:38	8	)
LEAF_NODE	26:39	26:39	4	;
EXPR_STATEMENT	27:1	27:30	3	ret = ( GtkWidget * ) mg -> mg_ptr ;
EXPR	27:1	27:1	4	ret = ( GtkWidget * ) mg -> mg_ptr
ASSIGN	27:1	27:7	5	ret = ( GtkWidget * ) mg -> mg_ptr
LVAL	27:1	27:1	6	ret
FIELD	27:1	27:1	7	ret
LEAF_NODE	27:1	27:1	8	ret
ASSIGN_OP	27:5	27:5	6	=
LEAF_NODE	27:5	27:5	7	=
RVAL	27:7	27:20	6	( GtkWidget * ) mg -> mg_ptr
LEAF_NODE	27:7	27:7	7	(
TYPE_NAME	27:8	27:8	7	GtkWidget
LEAF_NODE	27:8	27:8	8	GtkWidget
LEAF_NODE	27:18	27:18	7	*
LEAF_NODE	27:19	27:19	7	)
FIELD	27:20	27:24	7	mg -> mg_ptr
LEAF_NODE	27:20	27:20	8	mg
LEAF_NODE	27:22	27:22	8	->
LEAF_NODE	27:24	27:24	8	mg_ptr
LEAF_NODE	27:30	27:30	4	;
EXPR_STATEMENT	28:1	28:8	3	PUTBACK ;
EXPR	28:1	28:1	4	PUTBACK
FIELD	28:1	28:1	5	PUTBACK
LEAF_NODE	28:1	28:1	6	PUTBACK
LEAF_NODE	28:8	28:8	4	;
EXPR_STATEMENT	29:1	29:9	3	FREETMPS ;
EXPR	29:1	29:1	4	FREETMPS
FIELD	29:1	29:1	5	FREETMPS
LEAF_NODE	29:1	29:1	6	FREETMPS
LEAF_NODE	29:9	29:9	4	;
EXPR_STATEMENT	30:1	30:6	3	LEAVE ;
EXPR	30:1	30:1	4	LEAVE
FIELD	30:1	30:1	5	LEAVE
LEAF_NODE	30:1	30:1	6	LEAVE
LEAF_NODE	30:6	30:6	4	;
JUMP_STATEMENT	31:1	31:11	3	return ret ;
KEYWORD	31:1	31:1	4	return
LEAF_NODE	31:1	31:1	5	return
DESTINATION	31:8	31:8	4	ret
EXPR	31:8	31:8	5	ret
FIELD	31:8	31:8	6	ret
LEAF_NODE	31:8	31:8	7	ret
LEAF_NODE	31:11	31:11	4	;
LEAF_NODE	32:0	32:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	27:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	purplerc_set_color
LEAF_NODE	2:0	2:0	3	purplerc_set_color
PARAMETER_LIST	2:18	2:51	2	( GtkWidget * widget , gpointer data )
LEAF_NODE	2:18	2:18	3	(
PARAMETER_DECL	2:19	2:30	3	GtkWidget * widget
TYPE	2:19	2:29	4	GtkWidget *
TYPE_NAME	2:19	2:19	5	GtkWidget
LEAF_NODE	2:19	2:19	6	GtkWidget
POINTER	2:29	2:29	5	*
LEAF_NODE	2:29	2:29	6	*
NAME	2:30	2:30	4	widget
LEAF_NODE	2:30	2:30	5	widget
LEAF_NODE	2:36	2:36	3	,
PARAMETER_DECL	2:38	2:47	3	gpointer data
TYPE	2:38	2:38	4	gpointer
TYPE_NAME	2:38	2:38	5	gpointer
LEAF_NODE	2:38	2:38	6	gpointer
NAME	2:47	2:47	4	data
LEAF_NODE	2:47	2:47	5	data
LEAF_NODE	2:51	2:51	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	26:1	2	
SIMPLE_DECL	4:1	4:15	3	GdkColor color ;
VAR_DECL	4:1	4:10	4	GdkColor color
TYPE	4:1	4:1	5	GdkColor
TYPE_NAME	4:1	4:1	6	GdkColor
LEAF_NODE	4:1	4:1	7	GdkColor
NAME	4:10	4:10	5	color
LEAF_NODE	4:10	4:10	6	color
LEAF_NODE	4:15	4:15	4	;
SIMPLE_DECL	5:1	5:17	3	gchar [ 128 ] title ;
VAR_DECL	5:1	5:7	4	gchar [ 128 ] title
TYPE	5:1	5:12	5	gchar [ 128 ]
TYPE_NAME	5:1	5:1	6	gchar
LEAF_NODE	5:1	5:1	7	gchar
TYPE_SUFFIX	5:12	5:16	6	[ 128 ]
LEAF_NODE	5:12	5:12	7	[
FIELD	5:13	5:13	7	128
LEAF_NODE	5:13	5:13	8	128
LEAF_NODE	5:16	5:16	7	]
NAME	5:7	5:7	5	title
LEAF_NODE	5:7	5:7	6	title
LEAF_NODE	5:17	5:17	4	;
SIMPLE_DECL	6:1	6:25	3	const gchar * pref ; pref = NULL ;
VAR_DECL	6:1	6:14	4	const gchar * pref ; pref = NULL
TYPE	6:1	6:13	5	const gchar *
TYPE_NAME	6:1	6:7	6	const gchar
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	gchar
POINTER	6:13	6:13	6	*
LEAF_NODE	6:13	6:13	7	*
NAME	6:14	6:14	5	pref
LEAF_NODE	6:14	6:14	6	pref
LEAF_NODE	0:0	0:0	5	;
INIT	6:14	6:14	5	pref = NULL
ASSIGN	6:14	6:21	6	pref = NULL
LVAL	6:14	6:14	7	pref
NAME	6:14	6:14	8	pref
LEAF_NODE	6:14	6:14	9	pref
ASSIGN_OP	6:19	6:19	7	=
LEAF_NODE	6:19	6:19	8	=
RVAL	6:21	6:21	7	NULL
FIELD	6:21	6:21	8	NULL
LEAF_NODE	6:21	6:21	9	NULL
LEAF_NODE	6:25	6:25	4	;
SIMPLE_DECL	7:1	7:31	3	GtkWidget * color_dialog ; color_dialog = NULL ;
VAR_DECL	7:1	7:12	4	GtkWidget * color_dialog ; color_dialog = NULL
TYPE	7:1	7:11	5	GtkWidget *
TYPE_NAME	7:1	7:1	6	GtkWidget
LEAF_NODE	7:1	7:1	7	GtkWidget
POINTER	7:11	7:11	6	*
LEAF_NODE	7:11	7:11	7	*
NAME	7:12	7:12	5	color_dialog
LEAF_NODE	7:12	7:12	6	color_dialog
LEAF_NODE	0:0	0:0	5	;
INIT	7:12	7:12	5	color_dialog = NULL
ASSIGN	7:12	7:27	6	color_dialog = NULL
LVAL	7:12	7:12	7	color_dialog
NAME	7:12	7:12	8	color_dialog
LEAF_NODE	7:12	7:12	9	color_dialog
ASSIGN_OP	7:25	7:25	7	=
LEAF_NODE	7:25	7:25	8	=
RVAL	7:27	7:27	7	NULL
FIELD	7:27	7:27	8	NULL
LEAF_NODE	7:27	7:27	9	NULL
LEAF_NODE	7:31	7:31	4	;
SIMPLE_DECL	8:1	8:39	3	gint subscript ; subscript = GPOINTER_TO_INT ( data ) ;
VAR_DECL	8:1	8:6	4	gint subscript ; subscript = GPOINTER_TO_INT ( data )
TYPE	8:1	8:1	5	gint
TYPE_NAME	8:1	8:1	6	gint
LEAF_NODE	8:1	8:1	7	gint
NAME	8:6	8:6	5	subscript
LEAF_NODE	8:6	8:6	6	subscript
LEAF_NODE	0:0	0:0	5	;
INIT	8:6	8:6	5	subscript = GPOINTER_TO_INT ( data )
ASSIGN	8:6	8:18	6	subscript = GPOINTER_TO_INT ( data )
LVAL	8:6	8:6	7	subscript
NAME	8:6	8:6	8	subscript
LEAF_NODE	8:6	8:6	9	subscript
ASSIGN_OP	8:16	8:16	7	=
LEAF_NODE	8:16	8:16	8	=
RVAL	8:18	8:18	7	GPOINTER_TO_INT ( data )
FUNCTION_CALL	8:18	8:38	8	GPOINTER_TO_INT ( data )
CALLEE	8:18	8:18	9	GPOINTER_TO_INT
LEAF_NODE	8:18	8:18	10	GPOINTER_TO_INT
LEAF_NODE	8:33	8:33	9	(
ARGUMENT	8:34	8:34	9	data
FIELD	8:34	8:34	10	data
LEAF_NODE	8:34	8:34	11	data
LEAF_NODE	8:38	8:38	9	)
LEAF_NODE	8:39	8:39	4	;
EXPR_STATEMENT	9:1	10:50	3	g_snprintf ( title , sizeof ( title ) , _ ( "Select Color for %s" ) , _ ( color_names [ GPOINTER_TO_INT ( data ) ] ) ) ;
EXPR	9:1	9:1	4	g_snprintf ( title , sizeof ( title ) , _ ( "Select Color for %s" ) , _ ( color_names [ GPOINTER_TO_INT ( data ) ] ) )
FUNCTION_CALL	9:1	10:49	5	g_snprintf ( title , sizeof ( title ) , _ ( "Select Color for %s" ) , _ ( color_names [ GPOINTER_TO_INT ( data ) ] ) )
CALLEE	9:1	9:1	6	g_snprintf
LEAF_NODE	9:1	9:1	7	g_snprintf
LEAF_NODE	9:11	9:11	6	(
ARGUMENT	9:12	9:12	6	title
FIELD	9:12	9:12	7	title
LEAF_NODE	9:12	9:12	8	title
LEAF_NODE	9:17	9:17	6	,
ARGUMENT	9:19	9:19	6	sizeof ( title )
FUNCTION_CALL	9:19	9:31	7	sizeof ( title )
CALLEE	9:19	9:19	8	sizeof
LEAF_NODE	9:19	9:19	9	sizeof
LEAF_NODE	9:25	9:25	8	(
ARGUMENT	9:26	9:26	8	title
FIELD	9:26	9:26	9	title
LEAF_NODE	9:26	9:26	10	title
LEAF_NODE	9:31	9:31	8	)
LEAF_NODE	9:32	9:32	6	,
ARGUMENT	9:34	9:34	6	_ ( "Select Color for %s" )
FUNCTION_CALL	9:34	9:57	7	_ ( "Select Color for %s" )
CALLEE	9:34	9:34	8	_
LEAF_NODE	9:34	9:34	9	_
LEAF_NODE	9:35	9:35	8	(
ARGUMENT	9:36	9:36	8	"Select Color for %s"
FIELD	9:36	9:36	9	"Select Color for %s"
LEAF_NODE	9:36	9:36	10	"Select Color for %s"
LEAF_NODE	9:57	9:57	8	)
LEAF_NODE	9:58	9:58	6	,
ARGUMENT	10:12	10:12	6	_ ( color_names [ GPOINTER_TO_INT ( data ) ] )
FUNCTION_CALL	10:12	10:48	7	_ ( color_names [ GPOINTER_TO_INT ( data ) ] )
CALLEE	10:12	10:12	8	_
LEAF_NODE	10:12	10:12	9	_
LEAF_NODE	10:13	10:13	8	(
ARGUMENT	10:14	10:14	8	color_names [ GPOINTER_TO_INT ( data ) ]
FIELD	10:14	10:47	9	color_names [ GPOINTER_TO_INT ( data ) ]
LEAF_NODE	10:14	10:14	10	color_names
LEAF_NODE	10:25	10:25	10	[
EXPR	10:26	10:26	10	GPOINTER_TO_INT ( data )
FUNCTION_CALL	10:26	10:46	11	GPOINTER_TO_INT ( data )
CALLEE	10:26	10:26	12	GPOINTER_TO_INT
LEAF_NODE	10:26	10:26	13	GPOINTER_TO_INT
LEAF_NODE	10:41	10:41	12	(
ARGUMENT	10:42	10:42	12	data
FIELD	10:42	10:42	13	data
LEAF_NODE	10:42	10:42	14	data
LEAF_NODE	10:46	10:46	12	)
LEAF_NODE	10:47	10:47	10	]
LEAF_NODE	10:48	10:48	8	)
LEAF_NODE	10:49	10:49	6	)
LEAF_NODE	10:50	10:50	4	;
EXPR_STATEMENT	11:1	11:65	3	color_dialog = gtk_color_selection_dialog_new ( _ ( "Select Color" ) ) ;
EXPR	11:1	11:1	4	color_dialog = gtk_color_selection_dialog_new ( _ ( "Select Color" ) )
ASSIGN	11:1	11:16	5	color_dialog = gtk_color_selection_dialog_new ( _ ( "Select Color" ) )
LVAL	11:1	11:1	6	color_dialog
FIELD	11:1	11:1	7	color_dialog
LEAF_NODE	11:1	11:1	8	color_dialog
ASSIGN_OP	11:14	11:14	6	=
LEAF_NODE	11:14	11:14	7	=
RVAL	11:16	11:16	6	gtk_color_selection_dialog_new ( _ ( "Select Color" ) )
FUNCTION_CALL	11:16	11:64	7	gtk_color_selection_dialog_new ( _ ( "Select Color" ) )
CALLEE	11:16	11:16	8	gtk_color_selection_dialog_new
LEAF_NODE	11:16	11:16	9	gtk_color_selection_dialog_new
LEAF_NODE	11:46	11:46	8	(
ARGUMENT	11:47	11:47	8	_ ( "Select Color" )
FUNCTION_CALL	11:47	11:63	9	_ ( "Select Color" )
CALLEE	11:47	11:47	10	_
LEAF_NODE	11:47	11:47	11	_
LEAF_NODE	11:48	11:48	10	(
ARGUMENT	11:49	11:49	10	"Select Color"
FIELD	11:49	11:49	11	"Select Color"
LEAF_NODE	11:49	11:49	12	"Select Color"
LEAF_NODE	11:63	11:63	10	)
LEAF_NODE	11:64	11:64	8	)
LEAF_NODE	11:65	11:65	4	;
EXPR_STATEMENT	12:1	13:60	3	g_signal_connect ( G_OBJECT ( color_dialog ) , "response" , G_CALLBACK ( purplerc_color_response ) , data ) ;
EXPR	12:1	12:1	4	g_signal_connect ( G_OBJECT ( color_dialog ) , "response" , G_CALLBACK ( purplerc_color_response ) , data )
FUNCTION_CALL	12:1	13:59	5	g_signal_connect ( G_OBJECT ( color_dialog ) , "response" , G_CALLBACK ( purplerc_color_response ) , data )
CALLEE	12:1	12:1	6	g_signal_connect
LEAF_NODE	12:1	12:1	7	g_signal_connect
LEAF_NODE	12:17	12:17	6	(
ARGUMENT	12:18	12:18	6	G_OBJECT ( color_dialog )
FUNCTION_CALL	12:18	12:39	7	G_OBJECT ( color_dialog )
CALLEE	12:18	12:18	8	G_OBJECT
LEAF_NODE	12:18	12:18	9	G_OBJECT
LEAF_NODE	12:26	12:26	8	(
ARGUMENT	12:27	12:27	8	color_dialog
FIELD	12:27	12:27	9	color_dialog
LEAF_NODE	12:27	12:27	10	color_dialog
LEAF_NODE	12:39	12:39	8	)
LEAF_NODE	12:40	12:40	6	,
ARGUMENT	12:42	12:42	6	"response"
FIELD	12:42	12:42	7	"response"
LEAF_NODE	12:42	12:42	8	"response"
LEAF_NODE	12:52	12:52	6	,
ARGUMENT	13:18	13:18	6	G_CALLBACK ( purplerc_color_response )
FUNCTION_CALL	13:18	13:52	7	G_CALLBACK ( purplerc_color_response )
CALLEE	13:18	13:18	8	G_CALLBACK
LEAF_NODE	13:18	13:18	9	G_CALLBACK
LEAF_NODE	13:28	13:28	8	(
ARGUMENT	13:29	13:29	8	purplerc_color_response
FIELD	13:29	13:29	9	purplerc_color_response
LEAF_NODE	13:29	13:29	10	purplerc_color_response
LEAF_NODE	13:52	13:52	8	)
LEAF_NODE	13:53	13:53	6	,
ARGUMENT	13:55	13:55	6	data
FIELD	13:55	13:55	7	data
LEAF_NODE	13:55	13:55	8	data
LEAF_NODE	13:59	13:59	6	)
LEAF_NODE	13:60	13:60	4	;
EXPR_STATEMENT	14:1	14:55	3	pref = purple_prefs_get_string ( color_prefs [ subscript ] ) ;
EXPR	14:1	14:1	4	pref = purple_prefs_get_string ( color_prefs [ subscript ] )
ASSIGN	14:1	14:8	5	pref = purple_prefs_get_string ( color_prefs [ subscript ] )
LVAL	14:1	14:1	6	pref
FIELD	14:1	14:1	7	pref
LEAF_NODE	14:1	14:1	8	pref
ASSIGN_OP	14:6	14:6	6	=
LEAF_NODE	14:6	14:6	7	=
RVAL	14:8	14:8	6	purple_prefs_get_string ( color_prefs [ subscript ] )
FUNCTION_CALL	14:8	14:54	7	purple_prefs_get_string ( color_prefs [ subscript ] )
CALLEE	14:8	14:8	8	purple_prefs_get_string
LEAF_NODE	14:8	14:8	9	purple_prefs_get_string
LEAF_NODE	14:31	14:31	8	(
ARGUMENT	14:32	14:32	8	color_prefs [ subscript ]
FIELD	14:32	14:53	9	color_prefs [ subscript ]
LEAF_NODE	14:32	14:32	10	color_prefs
LEAF_NODE	14:43	14:43	10	[
EXPR	14:44	14:44	10	subscript
FIELD	14:44	14:44	11	subscript
LEAF_NODE	14:44	14:44	12	subscript
LEAF_NODE	14:53	14:53	10	]
LEAF_NODE	14:54	14:54	8	)
LEAF_NODE	14:55	14:55	4	;
SELECTION	15:1	15:39	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:4	15:4	4	(
CONDITION	15:5	15:5	4	pref != NULL && strcmp ( pref , "" )
EXPR	15:5	15:5	5	pref != NULL && strcmp ( pref , "" )
AND	15:5	15:21	6	pref != NULL && strcmp ( pref , "" )
EXPR	15:5	15:13	7	pref != NULL
FIELD	15:5	15:5	8	pref
LEAF_NODE	15:5	15:5	9	pref
EQ_OPERATOR	15:10	15:10	8	!=
LEAF_NODE	15:10	15:10	9	!=
FIELD	15:13	15:13	8	NULL
LEAF_NODE	15:13	15:13	9	NULL
LEAF_NODE	15:18	15:18	7	&&
EXPR	15:21	15:21	7	strcmp ( pref , "" )
FUNCTION_CALL	15:21	15:36	8	strcmp ( pref , "" )
CALLEE	15:21	15:21	9	strcmp
LEAF_NODE	15:21	15:21	10	strcmp
LEAF_NODE	15:27	15:27	9	(
ARGUMENT	15:28	15:28	9	pref
FIELD	15:28	15:28	10	pref
LEAF_NODE	15:28	15:28	11	pref
LEAF_NODE	15:32	15:32	9	,
ARGUMENT	15:34	15:34	9	""
FIELD	15:34	15:34	10	""
LEAF_NODE	15:34	15:34	11	""
LEAF_NODE	15:36	15:36	9	)
LEAF_NODE	15:37	15:37	4	)
STATEMENTS	15:39	25:1	4	
LEAF_NODE	15:39	15:39	5	{
STATEMENTS	16:2	16:2	5	
SELECTION	16:2	16:37	6	
KEYWORD	16:2	16:2	7	if
LEAF_NODE	16:2	16:2	8	if
LEAF_NODE	16:5	16:5	7	(
CONDITION	16:6	16:6	7	gdk_color_parse ( pref , & color )
EXPR	16:6	16:6	8	gdk_color_parse ( pref , & color )
FUNCTION_CALL	16:6	16:34	9	gdk_color_parse ( pref , & color )
CALLEE	16:6	16:6	10	gdk_color_parse
LEAF_NODE	16:6	16:6	11	gdk_color_parse
LEAF_NODE	16:21	16:21	10	(
ARGUMENT	16:22	16:22	10	pref
FIELD	16:22	16:22	11	pref
LEAF_NODE	16:22	16:22	12	pref
LEAF_NODE	16:26	16:26	10	,
ARGUMENT	16:28	16:28	10	& color
UNARY_EXPR	16:28	16:29	11	& color
UNARY_OPERATOR	16:28	16:28	12	&
LEAF_NODE	16:28	16:28	13	&
FIELD	16:29	16:29	12	color
LEAF_NODE	16:29	16:29	13	color
LEAF_NODE	16:34	16:34	10	)
LEAF_NODE	16:35	16:35	7	)
STATEMENTS	16:37	24:2	7	
LEAF_NODE	16:37	16:37	8	{
STATEMENTS	18:3	22:3	8	
EXPR_STATEMENT	18:3	20:11	9	gtk_color_selection_set_current_color ( GTK_COLOR_SELECTION ( gtk_color_selection_dialog_get_color_selection ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) ) ) , & color ) ;
EXPR	18:3	18:3	10	gtk_color_selection_set_current_color ( GTK_COLOR_SELECTION ( gtk_color_selection_dialog_get_color_selection ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) ) ) , & color )
FUNCTION_CALL	18:3	20:10	11	gtk_color_selection_set_current_color ( GTK_COLOR_SELECTION ( gtk_color_selection_dialog_get_color_selection ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) ) ) , & color )
CALLEE	18:3	18:3	12	gtk_color_selection_set_current_color
LEAF_NODE	18:3	18:3	13	gtk_color_selection_set_current_color
LEAF_NODE	18:40	18:40	12	(
ARGUMENT	18:41	18:41	12	GTK_COLOR_SELECTION ( gtk_color_selection_dialog_get_color_selection ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) ) )
FUNCTION_CALL	18:41	19:92	13	GTK_COLOR_SELECTION ( gtk_color_selection_dialog_get_color_selection ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) ) )
CALLEE	18:41	18:41	14	GTK_COLOR_SELECTION
LEAF_NODE	18:41	18:41	15	GTK_COLOR_SELECTION
LEAF_NODE	18:60	18:60	14	(
ARGUMENT	19:4	19:4	14	gtk_color_selection_dialog_get_color_selection ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) )
FUNCTION_CALL	19:4	19:91	15	gtk_color_selection_dialog_get_color_selection ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) )
CALLEE	19:4	19:4	16	gtk_color_selection_dialog_get_color_selection
LEAF_NODE	19:4	19:4	17	gtk_color_selection_dialog_get_color_selection
LEAF_NODE	19:50	19:50	16	(
ARGUMENT	19:51	19:51	16	GTK_COLOR_SELECTION_DIALOG ( color_dialog )
FUNCTION_CALL	19:51	19:90	17	GTK_COLOR_SELECTION_DIALOG ( color_dialog )
CALLEE	19:51	19:51	18	GTK_COLOR_SELECTION_DIALOG
LEAF_NODE	19:51	19:51	19	GTK_COLOR_SELECTION_DIALOG
LEAF_NODE	19:77	19:77	18	(
ARGUMENT	19:78	19:78	18	color_dialog
FIELD	19:78	19:78	19	color_dialog
LEAF_NODE	19:78	19:78	20	color_dialog
LEAF_NODE	19:90	19:90	18	)
LEAF_NODE	19:91	19:91	16	)
LEAF_NODE	19:92	19:92	14	)
LEAF_NODE	19:93	19:93	12	,
ARGUMENT	20:4	20:4	12	& color
UNARY_EXPR	20:4	20:5	13	& color
UNARY_OPERATOR	20:4	20:4	14	&
LEAF_NODE	20:4	20:4	15	&
FIELD	20:5	20:5	14	color
LEAF_NODE	20:5	20:5	15	color
LEAF_NODE	20:10	20:10	12	)
LEAF_NODE	20:11	20:11	10	;
EXPR_STATEMENT	22:3	22:121	9	gtk_color_selection_set_current_color ( GTK_COLOR_SELECTION ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) -> colorsel ) , & color ) ;
EXPR	22:3	22:3	10	gtk_color_selection_set_current_color ( GTK_COLOR_SELECTION ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) -> colorsel ) , & color )
FUNCTION_CALL	22:3	22:120	11	gtk_color_selection_set_current_color ( GTK_COLOR_SELECTION ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) -> colorsel ) , & color )
CALLEE	22:3	22:3	12	gtk_color_selection_set_current_color
LEAF_NODE	22:3	22:3	13	gtk_color_selection_set_current_color
LEAF_NODE	22:40	22:40	12	(
ARGUMENT	22:41	22:41	12	GTK_COLOR_SELECTION ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) -> colorsel )
FUNCTION_CALL	22:41	22:111	13	GTK_COLOR_SELECTION ( GTK_COLOR_SELECTION_DIALOG ( color_dialog ) -> colorsel )
CALLEE	22:41	22:41	14	GTK_COLOR_SELECTION
LEAF_NODE	22:41	22:41	15	GTK_COLOR_SELECTION
LEAF_NODE	22:60	22:60	14	(
ARGUMENT	22:61	22:103	14	GTK_COLOR_SELECTION_DIALOG ( color_dialog ) -> colorsel
FUNCTION_CALL	22:61	22:100	15	GTK_COLOR_SELECTION_DIALOG ( color_dialog )
CALLEE	22:61	22:61	16	GTK_COLOR_SELECTION_DIALOG
LEAF_NODE	22:61	22:61	17	GTK_COLOR_SELECTION_DIALOG
LEAF_NODE	22:87	22:87	16	(
ARGUMENT	22:88	22:88	16	color_dialog
FIELD	22:88	22:88	17	color_dialog
LEAF_NODE	22:88	22:88	18	color_dialog
LEAF_NODE	22:100	22:100	16	)
LEAF_NODE	22:101	22:101	15	->
LEAF_NODE	22:103	22:103	15	colorsel
LEAF_NODE	22:111	22:111	14	)
LEAF_NODE	22:112	22:112	12	,
ARGUMENT	22:114	22:114	12	& color
UNARY_EXPR	22:114	22:115	13	& color
UNARY_OPERATOR	22:114	22:114	14	&
LEAF_NODE	22:114	22:114	15	&
FIELD	22:115	22:115	14	color
LEAF_NODE	22:115	22:115	15	color
LEAF_NODE	22:120	22:120	12	)
LEAF_NODE	22:121	22:121	10	;
LEAF_NODE	24:2	24:2	8	}
LEAF_NODE	25:1	25:1	5	}
EXPR_STATEMENT	26:1	26:45	3	gtk_window_present ( GTK_WINDOW ( color_dialog ) ) ;
EXPR	26:1	26:1	4	gtk_window_present ( GTK_WINDOW ( color_dialog ) )
FUNCTION_CALL	26:1	26:44	5	gtk_window_present ( GTK_WINDOW ( color_dialog ) )
CALLEE	26:1	26:1	6	gtk_window_present
LEAF_NODE	26:1	26:1	7	gtk_window_present
LEAF_NODE	26:19	26:19	6	(
ARGUMENT	26:20	26:20	6	GTK_WINDOW ( color_dialog )
FUNCTION_CALL	26:20	26:43	7	GTK_WINDOW ( color_dialog )
CALLEE	26:20	26:20	8	GTK_WINDOW
LEAF_NODE	26:20	26:20	9	GTK_WINDOW
LEAF_NODE	26:30	26:30	8	(
ARGUMENT	26:31	26:31	8	color_dialog
FIELD	26:31	26:31	9	color_dialog
LEAF_NODE	26:31	26:31	10	color_dialog
LEAF_NODE	26:43	26:43	8	)
LEAF_NODE	26:44	26:44	6	)
LEAF_NODE	26:45	26:45	4	;
LEAF_NODE	27:0	27:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	4:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	ft_send_cancel_cb
LEAF_NODE	2:0	2:0	3	ft_send_cancel_cb
PARAMETER_LIST	2:17	2:49	2	( PurpleXfer * xfer , gpointer data )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:30	3	PurpleXfer * xfer
TYPE	2:18	2:29	4	PurpleXfer *
TYPE_NAME	2:18	2:18	5	PurpleXfer
LEAF_NODE	2:18	2:18	6	PurpleXfer
POINTER	2:29	2:29	5	*
LEAF_NODE	2:29	2:29	6	*
NAME	2:30	2:30	4	xfer
LEAF_NODE	2:30	2:30	5	xfer
LEAF_NODE	2:34	2:34	3	,
PARAMETER_DECL	2:36	2:45	3	gpointer data
TYPE	2:36	2:36	4	gpointer
TYPE_NAME	2:36	2:36	5	gpointer
LEAF_NODE	2:36	2:36	6	gpointer
NAME	2:45	2:45	4	data
LEAF_NODE	2:45	2:45	5	data
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	2:51	2:51	2	{
STATEMENTS	3:1	3:1	2	
EXPR_STATEMENT	3:1	3:59	3	purple_debug_misc ( "signals test" , "file send cancelled\n" ) ;
EXPR	3:1	3:1	4	purple_debug_misc ( "signals test" , "file send cancelled\n" )
FUNCTION_CALL	3:1	3:58	5	purple_debug_misc ( "signals test" , "file send cancelled\n" )
CALLEE	3:1	3:1	6	purple_debug_misc
LEAF_NODE	3:1	3:1	7	purple_debug_misc
LEAF_NODE	3:18	3:18	6	(
ARGUMENT	3:19	3:19	6	"signals test"
FIELD	3:19	3:19	7	"signals test"
LEAF_NODE	3:19	3:19	8	"signals test"
LEAF_NODE	3:33	3:33	6	,
ARGUMENT	3:35	3:35	6	"file send cancelled\n"
FIELD	3:35	3:35	7	"file send cancelled\n"
LEAF_NODE	3:35	3:35	8	"file send cancelled\n"
LEAF_NODE	3:58	3:58	6	)
LEAF_NODE	3:59	3:59	4	;
LEAF_NODE	4:0	4:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	40:0	1	
RETURN_TYPE	1:0	1:12	2	static char *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	char
LEAF_NODE	1:7	1:7	4	char
LEAF_NODE	1:12	1:12	3	*
FUNCTION_NAME	2:0	2:0	2	gnt_text_view_get_p
LEAF_NODE	2:0	2:0	3	gnt_text_view_get_p
PARAMETER_LIST	2:19	2:51	2	( GntTextView * view , int x , int y )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:33	3	GntTextView * view
TYPE	2:20	2:32	4	GntTextView *
TYPE_NAME	2:20	2:20	5	GntTextView
LEAF_NODE	2:20	2:20	6	GntTextView
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	view
LEAF_NODE	2:33	2:33	5	view
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:43	3	int x
TYPE	2:39	2:39	4	int
TYPE_NAME	2:39	2:39	5	int
LEAF_NODE	2:39	2:39	6	int
NAME	2:43	2:43	4	x
LEAF_NODE	2:43	2:43	5	x
LEAF_NODE	2:44	2:44	3	,
PARAMETER_DECL	2:46	2:50	3	int y
TYPE	2:46	2:46	4	int
TYPE_NAME	2:46	2:46	5	int
LEAF_NODE	2:46	2:46	6	int
NAME	2:50	2:50	4	y
LEAF_NODE	2:50	2:50	5	y
LEAF_NODE	2:51	2:51	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	39:1	2	
SIMPLE_DECL	4:1	4:6	3	int n ;
VAR_DECL	4:1	4:5	4	int n
TYPE	4:1	4:1	5	int
TYPE_NAME	4:1	4:1	6	int
LEAF_NODE	4:1	4:1	7	int
NAME	4:5	4:5	5	n
LEAF_NODE	4:5	4:5	6	n
LEAF_NODE	4:6	4:6	4	;
SIMPLE_DECL	5:1	5:10	3	int i ; i = 0 ;
VAR_DECL	5:1	5:5	4	int i ; i = 0
TYPE	5:1	5:1	5	int
TYPE_NAME	5:1	5:1	6	int
LEAF_NODE	5:1	5:1	7	int
NAME	5:5	5:5	5	i
LEAF_NODE	5:5	5:5	6	i
LEAF_NODE	0:0	0:0	5	;
INIT	5:5	5:5	5	i = 0
ASSIGN	5:5	5:9	6	i = 0
LVAL	5:5	5:5	7	i
NAME	5:5	5:5	8	i
LEAF_NODE	5:5	5:5	9	i
ASSIGN_OP	5:7	5:7	7	=
LEAF_NODE	5:7	5:7	8	=
RVAL	5:9	5:9	7	0
FIELD	5:9	5:9	8	0
LEAF_NODE	5:9	5:9	9	0
LEAF_NODE	5:10	5:10	4	;
SIMPLE_DECL	6:1	6:34	3	GntWidget * wid ; wid = GNT_WIDGET ( view ) ;
VAR_DECL	6:1	6:12	4	GntWidget * wid ; wid = GNT_WIDGET ( view )
TYPE	6:1	6:11	5	GntWidget *
TYPE_NAME	6:1	6:1	6	GntWidget
LEAF_NODE	6:1	6:1	7	GntWidget
POINTER	6:11	6:11	6	*
LEAF_NODE	6:11	6:11	7	*
NAME	6:12	6:12	5	wid
LEAF_NODE	6:12	6:12	6	wid
LEAF_NODE	0:0	0:0	5	;
INIT	6:12	6:12	5	wid = GNT_WIDGET ( view )
ASSIGN	6:12	6:18	6	wid = GNT_WIDGET ( view )
LVAL	6:12	6:12	7	wid
NAME	6:12	6:12	8	wid
LEAF_NODE	6:12	6:12	9	wid
ASSIGN_OP	6:16	6:16	7	=
LEAF_NODE	6:16	6:16	8	=
RVAL	6:18	6:18	7	GNT_WIDGET ( view )
FUNCTION_CALL	6:18	6:33	8	GNT_WIDGET ( view )
CALLEE	6:18	6:18	9	GNT_WIDGET
LEAF_NODE	6:18	6:18	10	GNT_WIDGET
LEAF_NODE	6:28	6:28	9	(
ARGUMENT	6:29	6:29	9	view
FIELD	6:29	6:29	10	view
LEAF_NODE	6:29	6:29	11	view
LEAF_NODE	6:33	6:33	9	)
LEAF_NODE	6:34	6:34	4	;
SIMPLE_DECL	7:1	7:18	3	GntTextLine * line ;
VAR_DECL	7:1	7:14	4	GntTextLine * line
TYPE	7:1	7:13	5	GntTextLine *
TYPE_NAME	7:1	7:1	6	GntTextLine
LEAF_NODE	7:1	7:1	7	GntTextLine
POINTER	7:13	7:13	6	*
LEAF_NODE	7:13	7:13	7	*
NAME	7:14	7:14	5	line
LEAF_NODE	7:14	7:14	6	line
LEAF_NODE	7:18	7:18	4	;
SIMPLE_DECL	8:1	8:13	3	GList * lines ;
VAR_DECL	8:1	8:8	4	GList * lines
TYPE	8:1	8:7	5	GList *
TYPE_NAME	8:1	8:1	6	GList
LEAF_NODE	8:1	8:1	7	GList
POINTER	8:7	8:7	6	*
LEAF_NODE	8:7	8:7	7	*
NAME	8:8	8:8	5	lines
LEAF_NODE	8:8	8:8	6	lines
LEAF_NODE	8:13	8:13	4	;
SIMPLE_DECL	9:1	9:12	3	GList * segs ;
VAR_DECL	9:1	9:8	4	GList * segs
TYPE	9:1	9:7	5	GList *
TYPE_NAME	9:1	9:1	6	GList
LEAF_NODE	9:1	9:1	7	GList
POINTER	9:7	9:7	6	*
LEAF_NODE	9:7	9:7	7	*
NAME	9:8	9:8	5	segs
LEAF_NODE	9:8	9:8	6	segs
LEAF_NODE	9:12	9:12	4	;
SIMPLE_DECL	10:1	10:20	3	GntTextSegment * seg ;
VAR_DECL	10:1	10:17	4	GntTextSegment * seg
TYPE	10:1	10:16	5	GntTextSegment *
TYPE_NAME	10:1	10:1	6	GntTextSegment
LEAF_NODE	10:1	10:1	7	GntTextSegment
POINTER	10:16	10:16	6	*
LEAF_NODE	10:16	10:16	7	*
NAME	10:17	10:17	5	seg
LEAF_NODE	10:17	10:17	6	seg
LEAF_NODE	10:20	10:20	4	;
SIMPLE_DECL	11:1	11:11	3	gchar * pos ;
VAR_DECL	11:1	11:8	4	gchar * pos
TYPE	11:1	11:7	5	gchar *
TYPE_NAME	11:1	11:1	6	gchar
LEAF_NODE	11:1	11:1	7	gchar
POINTER	11:7	11:7	6	*
LEAF_NODE	11:7	11:7	7	*
NAME	11:8	11:8	5	pos
LEAF_NODE	11:8	11:8	6	pos
LEAF_NODE	11:11	11:11	4	;
EXPR_STATEMENT	12:1	12:30	3	n = g_list_length ( view -> list ) ;
EXPR	12:1	12:1	4	n = g_list_length ( view -> list )
ASSIGN	12:1	12:5	5	n = g_list_length ( view -> list )
LVAL	12:1	12:1	6	n
FIELD	12:1	12:1	7	n
LEAF_NODE	12:1	12:1	8	n
ASSIGN_OP	12:3	12:3	6	=
LEAF_NODE	12:3	12:3	7	=
RVAL	12:5	12:5	6	g_list_length ( view -> list )
FUNCTION_CALL	12:5	12:29	7	g_list_length ( view -> list )
CALLEE	12:5	12:5	8	g_list_length
LEAF_NODE	12:5	12:5	9	g_list_length
LEAF_NODE	12:18	12:18	8	(
ARGUMENT	12:19	12:19	8	view -> list
FIELD	12:19	12:25	9	view -> list
LEAF_NODE	12:19	12:19	10	view
LEAF_NODE	12:23	12:23	10	->
LEAF_NODE	12:25	12:25	10	list
LEAF_NODE	12:29	12:29	8	)
LEAF_NODE	12:30	12:30	4	;
EXPR_STATEMENT	13:1	13:25	3	y = wid -> priv . height - y ;
EXPR	13:1	13:1	4	y = wid -> priv . height - y
ASSIGN	13:1	13:5	5	y = wid -> priv . height - y
LVAL	13:1	13:1	6	y
FIELD	13:1	13:1	7	y
LEAF_NODE	13:1	13:1	8	y
ASSIGN_OP	13:3	13:3	6	=
LEAF_NODE	13:3	13:3	7	=
RVAL	13:5	13:24	6	wid -> priv . height - y
FIELD	13:5	13:15	7	wid -> priv . height
LEAF_NODE	13:5	13:5	8	wid
LEAF_NODE	13:8	13:8	8	->
LEAF_NODE	13:10	13:10	8	priv
LEAF_NODE	13:14	13:14	8	.
LEAF_NODE	13:15	13:15	8	height
LEAF_NODE	13:22	13:22	7	-
FIELD	13:24	13:24	7	y
LEAF_NODE	13:24	13:24	8	y
LEAF_NODE	13:25	13:25	4	;
SELECTION	14:1	14:12	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	n < y
EXPR	14:5	14:9	5	n < y
FIELD	14:5	14:5	6	n
LEAF_NODE	14:5	14:5	7	n
REL_OPERATOR	14:7	14:7	6	<
LEAF_NODE	14:7	14:7	7	<
FIELD	14:9	14:9	6	y
LEAF_NODE	14:9	14:9	7	y
LEAF_NODE	14:10	14:10	4	)
STATEMENTS	14:12	17:1	4	
LEAF_NODE	14:12	14:12	5	{
STATEMENTS	15:2	16:2	5	
EXPR_STATEMENT	15:2	15:7	6	x = 0 ;
EXPR	15:2	15:2	7	x = 0
ASSIGN	15:2	15:6	8	x = 0
LVAL	15:2	15:2	9	x
FIELD	15:2	15:2	10	x
LEAF_NODE	15:2	15:2	11	x
ASSIGN_OP	15:4	15:4	9	=
LEAF_NODE	15:4	15:4	10	=
RVAL	15:6	15:6	9	0
FIELD	15:6	15:6	10	0
LEAF_NODE	15:6	15:6	11	0
LEAF_NODE	15:7	15:7	7	;
EXPR_STATEMENT	16:2	16:11	6	y = n - 1 ;
EXPR	16:2	16:2	7	y = n - 1
ASSIGN	16:2	16:6	8	y = n - 1
LVAL	16:2	16:2	9	y
FIELD	16:2	16:2	10	y
LEAF_NODE	16:2	16:2	11	y
ASSIGN_OP	16:4	16:4	9	=
LEAF_NODE	16:4	16:4	10	=
RVAL	16:6	16:10	9	n - 1
FIELD	16:6	16:6	10	n
LEAF_NODE	16:6	16:6	11	n
LEAF_NODE	16:8	16:8	10	-
FIELD	16:10	16:10	10	1
LEAF_NODE	16:10	16:10	11	1
LEAF_NODE	16:11	16:11	7	;
LEAF_NODE	17:1	17:1	5	}
EXPR_STATEMENT	18:1	18:38	3	lines = g_list_nth ( view -> list , y - 1 ) ;
EXPR	18:1	18:1	4	lines = g_list_nth ( view -> list , y - 1 )
ASSIGN	18:1	18:9	5	lines = g_list_nth ( view -> list , y - 1 )
LVAL	18:1	18:1	6	lines
FIELD	18:1	18:1	7	lines
LEAF_NODE	18:1	18:1	8	lines
ASSIGN_OP	18:7	18:7	6	=
LEAF_NODE	18:7	18:7	7	=
RVAL	18:9	18:9	6	g_list_nth ( view -> list , y - 1 )
FUNCTION_CALL	18:9	18:37	7	g_list_nth ( view -> list , y - 1 )
CALLEE	18:9	18:9	8	g_list_nth
LEAF_NODE	18:9	18:9	9	g_list_nth
LEAF_NODE	18:19	18:19	8	(
ARGUMENT	18:20	18:20	8	view -> list
FIELD	18:20	18:26	9	view -> list
LEAF_NODE	18:20	18:20	10	view
LEAF_NODE	18:24	18:24	10	->
LEAF_NODE	18:26	18:26	10	list
LEAF_NODE	18:30	18:30	8	,
ARGUMENT	18:32	18:36	8	y - 1
FIELD	18:32	18:32	9	y
LEAF_NODE	18:32	18:32	10	y
LEAF_NODE	18:34	18:34	9	-
FIELD	18:36	18:36	9	1
LEAF_NODE	18:36	18:36	10	1
LEAF_NODE	18:37	18:37	8	)
LEAF_NODE	18:38	18:38	4	;
SELECTION	19:1	20:2	3	
KEYWORD	19:1	19:1	4	if
LEAF_NODE	19:1	19:1	5	if
LEAF_NODE	19:4	19:4	4	(
CONDITION	19:5	19:5	4	! lines
EXPR	19:5	19:5	5	! lines
UNARY_EXPR	19:5	19:6	6	! lines
UNARY_OPERATOR	19:5	19:5	7	!
LEAF_NODE	19:5	19:5	8	!
FIELD	19:6	19:6	7	lines
LEAF_NODE	19:6	19:6	8	lines
LEAF_NODE	19:11	19:11	4	)
STATEMENTS	20:2	20:2	4	
JUMP_STATEMENT	20:2	20:13	5	return NULL ;
KEYWORD	20:2	20:2	6	return
LEAF_NODE	20:2	20:2	7	return
DESTINATION	20:9	20:9	6	NULL
EXPR	20:9	20:9	7	NULL
FIELD	20:9	20:9	8	NULL
LEAF_NODE	20:9	20:9	9	NULL
LEAF_NODE	20:13	20:13	6	;
ITERATION	21:1	21:4	3	
KEYWORD	21:1	21:1	4	do
LEAF_NODE	21:1	21:1	5	do
LEAF_NODE	24:9	24:9	4	(
CONDITION	24:10	24:10	4	line && ! line -> segments && lines
EXPR	24:10	24:10	5	line && ! line -> segments && lines
AND	24:10	24:18	6	line && ! line -> segments && lines
EXPR	24:10	24:10	7	line
FIELD	24:10	24:10	8	line
LEAF_NODE	24:10	24:10	9	line
LEAF_NODE	24:15	24:15	7	&&
EXPR	24:18	24:18	7	! line -> segments && lines
AND	24:18	24:37	8	! line -> segments && lines
EXPR	24:18	24:18	9	! line -> segments
UNARY_EXPR	24:18	24:19	10	! line -> segments
UNARY_OPERATOR	24:18	24:18	11	!
LEAF_NODE	24:18	24:18	12	!
FIELD	24:19	24:25	11	line -> segments
LEAF_NODE	24:19	24:19	12	line
LEAF_NODE	24:23	24:23	12	->
LEAF_NODE	24:25	24:25	12	segments
LEAF_NODE	24:34	24:34	9	&&
EXPR	24:37	24:37	9	lines
FIELD	24:37	24:37	10	lines
LEAF_NODE	24:37	24:37	11	lines
LEAF_NODE	24:42	24:42	4	)
STATEMENTS	21:4	24:1	4	
LEAF_NODE	21:4	21:4	5	{
STATEMENTS	22:2	23:2	5	
EXPR_STATEMENT	22:2	22:20	6	line = lines -> data ;
EXPR	22:2	22:2	7	line = lines -> data
ASSIGN	22:2	22:9	8	line = lines -> data
LVAL	22:2	22:2	9	line
FIELD	22:2	22:2	10	line
LEAF_NODE	22:2	22:2	11	line
ASSIGN_OP	22:7	22:7	9	=
LEAF_NODE	22:7	22:7	10	=
RVAL	22:9	22:9	9	lines -> data
FIELD	22:9	22:16	10	lines -> data
LEAF_NODE	22:9	22:9	11	lines
LEAF_NODE	22:14	22:14	11	->
LEAF_NODE	22:16	22:16	11	data
LEAF_NODE	22:20	22:20	7	;
EXPR_STATEMENT	23:2	23:21	6	lines = lines -> next ;
EXPR	23:2	23:2	7	lines = lines -> next
ASSIGN	23:2	23:10	8	lines = lines -> next
LVAL	23:2	23:2	9	lines
FIELD	23:2	23:2	10	lines
LEAF_NODE	23:2	23:2	11	lines
ASSIGN_OP	23:8	23:8	9	=
LEAF_NODE	23:8	23:8	10	=
RVAL	23:10	23:10	9	lines -> next
FIELD	23:10	23:17	10	lines -> next
LEAF_NODE	23:10	23:10	11	lines
LEAF_NODE	23:15	23:15	11	->
LEAF_NODE	23:17	23:17	11	next
LEAF_NODE	23:21	23:21	7	;
LEAF_NODE	24:1	24:1	5	}
LEAF_NODE	24:43	24:43	3	;
SELECTION	25:1	26:2	3	
KEYWORD	25:1	25:1	4	if
LEAF_NODE	25:1	25:1	5	if
LEAF_NODE	25:4	25:4	4	(
CONDITION	25:5	25:5	4	! line || ! line -> segments
EXPR	25:5	25:5	5	! line || ! line -> segments
OR	25:5	25:14	6	! line || ! line -> segments
EXPR	25:5	25:5	7	! line
UNARY_EXPR	25:5	25:6	8	! line
UNARY_OPERATOR	25:5	25:5	9	!
LEAF_NODE	25:5	25:5	10	!
FIELD	25:6	25:6	9	line
LEAF_NODE	25:6	25:6	10	line
LEAF_NODE	25:11	25:11	7	||
EXPR	25:14	25:14	7	! line -> segments
UNARY_EXPR	25:14	25:15	8	! line -> segments
UNARY_OPERATOR	25:14	25:14	9	!
LEAF_NODE	25:14	25:14	10	!
FIELD	25:15	25:21	9	line -> segments
LEAF_NODE	25:15	25:15	10	line
LEAF_NODE	25:19	25:19	10	->
LEAF_NODE	25:21	25:21	10	segments
LEAF_NODE	25:29	25:29	4	)
STATEMENTS	26:2	26:2	4	
JUMP_STATEMENT	26:2	26:13	5	return NULL ;
KEYWORD	26:2	26:2	6	return
LEAF_NODE	26:2	26:2	7	return
DESTINATION	26:9	26:9	6	NULL
EXPR	26:9	26:9	7	NULL
FIELD	26:9	26:9	8	NULL
LEAF_NODE	26:9	26:9	9	NULL
LEAF_NODE	26:13	26:13	6	;
EXPR_STATEMENT	27:1	27:22	3	segs = line -> segments ;
EXPR	27:1	27:1	4	segs = line -> segments
ASSIGN	27:1	27:8	5	segs = line -> segments
LVAL	27:1	27:1	6	segs
FIELD	27:1	27:1	7	segs
LEAF_NODE	27:1	27:1	8	segs
ASSIGN_OP	27:6	27:6	6	=
LEAF_NODE	27:6	27:6	7	=
RVAL	27:8	27:8	6	line -> segments
FIELD	27:8	27:14	7	line -> segments
LEAF_NODE	27:8	27:8	8	line
LEAF_NODE	27:12	27:12	8	->
LEAF_NODE	27:14	27:14	8	segments
LEAF_NODE	27:22	27:22	4	;
EXPR_STATEMENT	28:1	28:35	3	seg = ( GntTextSegment * ) segs -> data ;
EXPR	28:1	28:1	4	seg = ( GntTextSegment * ) segs -> data
ASSIGN	28:1	28:7	5	seg = ( GntTextSegment * ) segs -> data
LVAL	28:1	28:1	6	seg
FIELD	28:1	28:1	7	seg
LEAF_NODE	28:1	28:1	8	seg
ASSIGN_OP	28:5	28:5	6	=
LEAF_NODE	28:5	28:5	7	=
RVAL	28:7	28:25	6	( GntTextSegment * ) segs -> data
LEAF_NODE	28:7	28:7	7	(
TYPE_NAME	28:8	28:8	7	GntTextSegment
LEAF_NODE	28:8	28:8	8	GntTextSegment
LEAF_NODE	28:23	28:23	7	*
LEAF_NODE	28:24	28:24	7	)
FIELD	28:25	28:31	7	segs -> data
LEAF_NODE	28:25	28:25	8	segs
LEAF_NODE	28:29	28:29	8	->
LEAF_NODE	28:31	28:31	8	data
LEAF_NODE	28:35	28:35	4	;
EXPR_STATEMENT	29:1	29:37	3	pos = view -> string -> str + seg -> start ;
EXPR	29:1	29:1	4	pos = view -> string -> str + seg -> start
ASSIGN	29:1	29:7	5	pos = view -> string -> str + seg -> start
LVAL	29:1	29:1	6	pos
FIELD	29:1	29:1	7	pos
LEAF_NODE	29:1	29:1	8	pos
ASSIGN_OP	29:5	29:5	6	=
LEAF_NODE	29:5	29:5	7	=
RVAL	29:7	29:27	6	view -> string -> str + seg -> start
FIELD	29:7	29:21	7	view -> string -> str
LEAF_NODE	29:7	29:7	8	view
LEAF_NODE	29:11	29:11	8	->
LEAF_NODE	29:13	29:13	8	string
LEAF_NODE	29:19	29:19	8	->
LEAF_NODE	29:21	29:21	8	str
LEAF_NODE	29:25	29:25	7	+
FIELD	29:27	29:32	7	seg -> start
LEAF_NODE	29:27	29:27	8	seg
LEAF_NODE	29:30	29:30	8	->
LEAF_NODE	29:32	29:32	8	start
LEAF_NODE	29:37	29:37	4	;
EXPR_STATEMENT	30:1	30:25	3	x = MIN ( x , line -> length ) ;
EXPR	30:1	30:1	4	x = MIN ( x , line -> length )
ASSIGN	30:1	30:5	5	x = MIN ( x , line -> length )
LVAL	30:1	30:1	6	x
FIELD	30:1	30:1	7	x
LEAF_NODE	30:1	30:1	8	x
ASSIGN_OP	30:3	30:3	6	=
LEAF_NODE	30:3	30:3	7	=
RVAL	30:5	30:5	6	MIN ( x , line -> length )
FUNCTION_CALL	30:5	30:24	7	MIN ( x , line -> length )
CALLEE	30:5	30:5	8	MIN
LEAF_NODE	30:5	30:5	9	MIN
LEAF_NODE	30:8	30:8	8	(
ARGUMENT	30:9	30:9	8	x
FIELD	30:9	30:9	9	x
LEAF_NODE	30:9	30:9	10	x
LEAF_NODE	30:10	30:10	8	,
ARGUMENT	30:12	30:12	8	line -> length
FIELD	30:12	30:18	9	line -> length
LEAF_NODE	30:12	30:12	10	line
LEAF_NODE	30:16	30:16	10	->
LEAF_NODE	30:18	30:18	10	length
LEAF_NODE	30:24	30:24	8	)
LEAF_NODE	30:25	30:25	4	;
ITERATION	31:1	31:18	3	
KEYWORD	31:1	31:1	4	while
LEAF_NODE	31:1	31:1	5	while
LEAF_NODE	31:7	31:7	4	(
CONDITION	31:8	31:8	4	++ i <= x
EXPR	31:8	31:15	5	++ i <= x
LEAF_NODE	31:8	31:8	6	++
FIELD	31:10	31:10	6	i
LEAF_NODE	31:10	31:10	7	i
REL_OPERATOR	31:12	31:12	6	<=
LEAF_NODE	31:12	31:12	7	<=
FIELD	31:15	31:15	6	x
LEAF_NODE	31:15	31:15	7	x
LEAF_NODE	31:16	31:16	4	)
STATEMENTS	31:18	38:1	4	
LEAF_NODE	31:18	31:18	5	{
STATEMENTS	32:2	37:2	5	
SIMPLE_DECL	32:2	32:13	6	gunichar * u ;
VAR_DECL	32:2	32:12	7	gunichar * u
TYPE	32:2	32:11	8	gunichar *
TYPE_NAME	32:2	32:2	9	gunichar
LEAF_NODE	32:2	32:2	10	gunichar
POINTER	32:11	32:11	9	*
LEAF_NODE	32:11	32:11	10	*
NAME	32:12	32:12	8	u
LEAF_NODE	32:12	32:12	9	u
LEAF_NODE	32:13	32:13	7	;
EXPR_STATEMENT	33:2	33:29	6	pos = g_utf8_next_char ( pos ) ;
EXPR	33:2	33:2	7	pos = g_utf8_next_char ( pos )
ASSIGN	33:2	33:8	8	pos = g_utf8_next_char ( pos )
LVAL	33:2	33:2	9	pos
FIELD	33:2	33:2	10	pos
LEAF_NODE	33:2	33:2	11	pos
ASSIGN_OP	33:6	33:6	9	=
LEAF_NODE	33:6	33:6	10	=
RVAL	33:8	33:8	9	g_utf8_next_char ( pos )
FUNCTION_CALL	33:8	33:28	10	g_utf8_next_char ( pos )
CALLEE	33:8	33:8	11	g_utf8_next_char
LEAF_NODE	33:8	33:8	12	g_utf8_next_char
LEAF_NODE	33:24	33:24	11	(
ARGUMENT	33:25	33:25	11	pos
FIELD	33:25	33:25	12	pos
LEAF_NODE	33:25	33:25	13	pos
LEAF_NODE	33:28	33:28	11	)
LEAF_NODE	33:29	33:29	7	;
EXPR_STATEMENT	34:2	34:47	6	u = g_utf8_to_ucs4 ( pos , - 1 , NULL , NULL , NULL ) ;
EXPR	34:2	34:2	7	u = g_utf8_to_ucs4 ( pos , - 1 , NULL , NULL , NULL )
ASSIGN	34:2	34:6	8	u = g_utf8_to_ucs4 ( pos , - 1 , NULL , NULL , NULL )
LVAL	34:2	34:2	9	u
FIELD	34:2	34:2	10	u
LEAF_NODE	34:2	34:2	11	u
ASSIGN_OP	34:4	34:4	9	=
LEAF_NODE	34:4	34:4	10	=
RVAL	34:6	34:6	9	g_utf8_to_ucs4 ( pos , - 1 , NULL , NULL , NULL )
FUNCTION_CALL	34:6	34:46	10	g_utf8_to_ucs4 ( pos , - 1 , NULL , NULL , NULL )
CALLEE	34:6	34:6	11	g_utf8_to_ucs4
LEAF_NODE	34:6	34:6	12	g_utf8_to_ucs4
LEAF_NODE	34:20	34:20	11	(
ARGUMENT	34:21	34:21	11	pos
FIELD	34:21	34:21	12	pos
LEAF_NODE	34:21	34:21	13	pos
LEAF_NODE	34:24	34:24	11	,
ARGUMENT	34:26	34:26	11	- 1
UNARY_EXPR	34:26	34:27	12	- 1
UNARY_OPERATOR	34:26	34:26	13	-
LEAF_NODE	34:26	34:26	14	-
FIELD	34:27	34:27	13	1
LEAF_NODE	34:27	34:27	14	1
LEAF_NODE	34:28	34:28	11	,
ARGUMENT	34:30	34:30	11	NULL
FIELD	34:30	34:30	12	NULL
LEAF_NODE	34:30	34:30	13	NULL
LEAF_NODE	34:34	34:34	11	,
ARGUMENT	34:36	34:36	11	NULL
FIELD	34:36	34:36	12	NULL
LEAF_NODE	34:36	34:36	13	NULL
LEAF_NODE	34:40	34:40	11	,
ARGUMENT	34:42	34:42	11	NULL
FIELD	34:42	34:42	12	NULL
LEAF_NODE	34:42	34:42	13	NULL
LEAF_NODE	34:46	34:46	11	)
LEAF_NODE	34:47	34:47	7	;
SELECTION	35:2	36:3	6	
KEYWORD	35:2	35:2	7	if
LEAF_NODE	35:2	35:2	8	if
LEAF_NODE	35:5	35:5	7	(
CONDITION	35:6	35:6	7	u && g_unichar_iswide ( * u )
EXPR	35:6	35:6	8	u && g_unichar_iswide ( * u )
AND	35:6	35:11	9	u && g_unichar_iswide ( * u )
EXPR	35:6	35:6	10	u
FIELD	35:6	35:6	11	u
LEAF_NODE	35:6	35:6	12	u
LEAF_NODE	35:8	35:8	10	&&
EXPR	35:11	35:11	10	g_unichar_iswide ( * u )
FUNCTION_CALL	35:11	35:30	11	g_unichar_iswide ( * u )
CALLEE	35:11	35:11	12	g_unichar_iswide
LEAF_NODE	35:11	35:11	13	g_unichar_iswide
LEAF_NODE	35:27	35:27	12	(
ARGUMENT	35:28	35:28	12	* u
UNARY_EXPR	35:28	35:29	13	* u
UNARY_OPERATOR	35:28	35:28	14	*
LEAF_NODE	35:28	35:28	15	*
FIELD	35:29	35:29	14	u
LEAF_NODE	35:29	35:29	15	u
LEAF_NODE	35:30	35:30	12	)
LEAF_NODE	35:31	35:31	7	)
STATEMENTS	36:3	36:3	7	
EXPR_STATEMENT	36:3	36:6	8	i ++ ;
EXPR	36:3	36:3	9	i ++
FIELD	36:3	36:4	10	i ++
LEAF_NODE	36:3	36:3	11	i
LEAF_NODE	36:4	36:4	11	++
LEAF_NODE	36:6	36:6	9	;
EXPR_STATEMENT	37:2	37:11	6	g_free ( u ) ;
EXPR	37:2	37:2	7	g_free ( u )
FUNCTION_CALL	37:2	37:10	8	g_free ( u )
CALLEE	37:2	37:2	9	g_free
LEAF_NODE	37:2	37:2	10	g_free
LEAF_NODE	37:8	37:8	9	(
ARGUMENT	37:9	37:9	9	u
FIELD	37:9	37:9	10	u
LEAF_NODE	37:9	37:9	11	u
LEAF_NODE	37:10	37:10	9	)
LEAF_NODE	37:11	37:11	7	;
LEAF_NODE	38:1	38:1	5	}
JUMP_STATEMENT	39:1	39:11	3	return pos ;
KEYWORD	39:1	39:1	4	return
LEAF_NODE	39:1	39:1	5	return
DESTINATION	39:8	39:8	4	pos
EXPR	39:8	39:8	5	pos
FIELD	39:8	39:8	6	pos
LEAF_NODE	39:8	39:8	7	pos
LEAF_NODE	39:11	39:11	4	;
LEAF_NODE	40:0	40:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	find_account_widget
LEAF_NODE	2:0	2:0	3	find_account_widget
PARAMETER_LIST	2:19	3:42	2	( GObject * widget , PurpleAccount * account )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:29	3	GObject * widget
TYPE	2:20	2:28	4	GObject *
TYPE_NAME	2:20	2:20	5	GObject
LEAF_NODE	2:20	2:20	6	GObject
POINTER	2:28	2:28	5	*
LEAF_NODE	2:28	2:28	6	*
NAME	2:29	2:29	4	widget
LEAF_NODE	2:29	2:29	5	widget
LEAF_NODE	2:35	2:35	3	,
PARAMETER_DECL	3:20	3:35	3	PurpleAccount * account
TYPE	3:20	3:34	4	PurpleAccount *
TYPE_NAME	3:20	3:20	5	PurpleAccount
LEAF_NODE	3:20	3:20	6	PurpleAccount
POINTER	3:34	3:34	5	*
LEAF_NODE	3:34	3:34	6	*
NAME	3:35	3:35	4	account
LEAF_NODE	3:35	3:35	5	account
LEAF_NODE	3:42	3:42	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	7:1	2	
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	g_object_get_data ( widget , OBJECT_DATA_KEY_ACCOUNT ) == account
EXPR	5:5	5:59	5	g_object_get_data ( widget , OBJECT_DATA_KEY_ACCOUNT ) == account
FUNCTION_CALL	5:5	5:54	6	g_object_get_data ( widget , OBJECT_DATA_KEY_ACCOUNT )
CALLEE	5:5	5:5	7	g_object_get_data
LEAF_NODE	5:5	5:5	8	g_object_get_data
LEAF_NODE	5:22	5:22	7	(
ARGUMENT	5:23	5:23	7	widget
FIELD	5:23	5:23	8	widget
LEAF_NODE	5:23	5:23	9	widget
LEAF_NODE	5:29	5:29	7	,
ARGUMENT	5:31	5:31	7	OBJECT_DATA_KEY_ACCOUNT
FIELD	5:31	5:31	8	OBJECT_DATA_KEY_ACCOUNT
LEAF_NODE	5:31	5:31	9	OBJECT_DATA_KEY_ACCOUNT
LEAF_NODE	5:54	5:54	7	)
EQ_OPERATOR	5:56	5:56	6	==
LEAF_NODE	5:56	5:56	7	==
FIELD	5:59	5:59	6	account
LEAF_NODE	5:59	5:59	7	account
LEAF_NODE	5:66	5:66	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:10	5	return 0 ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
DESTINATION	6:9	6:9	6	0
EXPR	6:9	6:9	7	0
FIELD	6:9	6:9	8	0
LEAF_NODE	6:9	6:9	9	0
LEAF_NODE	6:10	6:10	6	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	else
LEAF_NODE	7:1	7:1	5	else
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:10	5	return 1 ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
DESTINATION	8:9	8:9	6	1
EXPR	8:9	8:9	7	1
FIELD	8:9	8:9	8	1
LEAF_NODE	8:9	8:9	9	1
LEAF_NODE	8:10	8:10	6	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	purple_dnsquery_ui_resolve
LEAF_NODE	2:0	2:0	3	purple_dnsquery_ui_resolve
PARAMETER_LIST	2:26	2:57	2	( PurpleDnsQueryData * query_data )
LEAF_NODE	2:26	2:26	3	(
PARAMETER_DECL	2:27	2:47	3	PurpleDnsQueryData * query_data
TYPE	2:27	2:46	4	PurpleDnsQueryData *
TYPE_NAME	2:27	2:27	5	PurpleDnsQueryData
LEAF_NODE	2:27	2:27	6	PurpleDnsQueryData
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	query_data
LEAF_NODE	2:47	2:47	5	query_data
LEAF_NODE	2:57	2:57	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:56	3	PurpleDnsQueryUiOps * ops ; ops = purple_dnsquery_get_ui_ops ( ) ;
VAR_DECL	4:1	4:22	4	PurpleDnsQueryUiOps * ops ; ops = purple_dnsquery_get_ui_ops ( )
TYPE	4:1	4:21	5	PurpleDnsQueryUiOps *
TYPE_NAME	4:1	4:1	6	PurpleDnsQueryUiOps
LEAF_NODE	4:1	4:1	7	PurpleDnsQueryUiOps
POINTER	4:21	4:21	6	*
LEAF_NODE	4:21	4:21	7	*
NAME	4:22	4:22	5	ops
LEAF_NODE	4:22	4:22	6	ops
LEAF_NODE	0:0	0:0	5	;
INIT	4:22	4:22	5	ops = purple_dnsquery_get_ui_ops ( )
ASSIGN	4:22	4:28	6	ops = purple_dnsquery_get_ui_ops ( )
LVAL	4:22	4:22	7	ops
NAME	4:22	4:22	8	ops
LEAF_NODE	4:22	4:22	9	ops
ASSIGN_OP	4:26	4:26	7	=
LEAF_NODE	4:26	4:26	8	=
RVAL	4:28	4:28	7	purple_dnsquery_get_ui_ops ( )
FUNCTION_CALL	4:28	4:55	8	purple_dnsquery_get_ui_ops ( )
CALLEE	4:28	4:28	9	purple_dnsquery_get_ui_ops
LEAF_NODE	4:28	4:28	10	purple_dnsquery_get_ui_ops
LEAF_NODE	4:54	4:54	9	(
LEAF_NODE	4:55	4:55	9	)
LEAF_NODE	4:56	4:56	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	ops && ops -> resolve_host
EXPR	5:5	5:5	5	ops && ops -> resolve_host
AND	5:5	5:12	6	ops && ops -> resolve_host
EXPR	5:5	5:5	7	ops
FIELD	5:5	5:5	8	ops
LEAF_NODE	5:5	5:5	9	ops
LEAF_NODE	5:9	5:9	7	&&
EXPR	5:12	5:12	7	ops -> resolve_host
FIELD	5:12	5:17	8	ops -> resolve_host
LEAF_NODE	5:12	5:12	9	ops
LEAF_NODE	5:15	5:15	9	->
LEAF_NODE	5:17	5:17	9	resolve_host
LEAF_NODE	5:29	5:29	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:88	5	return ops -> resolve_host ( query_data , purple_dnsquery_resolved , purple_dnsquery_failed ) ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
DESTINATION	6:9	6:9	6	ops -> resolve_host ( query_data , purple_dnsquery_resolved , purple_dnsquery_failed )
EXPR	6:9	6:9	7	ops -> resolve_host ( query_data , purple_dnsquery_resolved , purple_dnsquery_failed )
FUNCTION_CALL	6:9	6:87	8	ops -> resolve_host ( query_data , purple_dnsquery_resolved , purple_dnsquery_failed )
CALLEE	6:9	6:14	9	ops -> resolve_host
LEAF_NODE	6:9	6:9	10	ops
LEAF_NODE	6:12	6:12	10	->
LEAF_NODE	6:14	6:14	10	resolve_host
LEAF_NODE	6:26	6:26	9	(
ARGUMENT	6:27	6:27	9	query_data
FIELD	6:27	6:27	10	query_data
LEAF_NODE	6:27	6:27	11	query_data
LEAF_NODE	6:37	6:37	9	,
ARGUMENT	6:39	6:39	9	purple_dnsquery_resolved
FIELD	6:39	6:39	10	purple_dnsquery_resolved
LEAF_NODE	6:39	6:39	11	purple_dnsquery_resolved
LEAF_NODE	6:63	6:63	9	,
ARGUMENT	6:65	6:65	9	purple_dnsquery_failed
FIELD	6:65	6:65	10	purple_dnsquery_failed
LEAF_NODE	6:65	6:65	11	purple_dnsquery_failed
LEAF_NODE	6:87	6:87	9	)
LEAF_NODE	6:88	6:88	6	;
JUMP_STATEMENT	7:1	7:13	3	return FALSE ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	FALSE
EXPR	7:8	7:8	5	FALSE
FIELD	7:8	7:8	6	FALSE
LEAF_NODE	7:8	7:8	7	FALSE
LEAF_NODE	7:13	7:13	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	2:0	14:0	0	
FUNCTION_DEF	2:0	12:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	oscar_alias_buddy
LEAF_NODE	2:5	2:5	3	oscar_alias_buddy
PARAMETER_LIST	2:22	2:80	2	( PurpleConnection * gc , const char * name , const char * alias )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:41	3	PurpleConnection * gc
TYPE	2:23	2:40	4	PurpleConnection *
TYPE_NAME	2:23	2:23	5	PurpleConnection
LEAF_NODE	2:23	2:23	6	PurpleConnection
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	gc
LEAF_NODE	2:41	2:41	5	gc
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:57	3	const char * name
TYPE	2:45	2:56	4	const char *
TYPE_NAME	2:45	2:51	5	const char
LEAF_NODE	2:45	2:45	6	const
LEAF_NODE	2:51	2:51	6	char
POINTER	2:56	2:56	5	*
LEAF_NODE	2:56	2:56	6	*
NAME	2:57	2:57	4	name
LEAF_NODE	2:57	2:57	5	name
LEAF_NODE	2:61	2:61	3	,
PARAMETER_DECL	2:63	2:75	3	const char * alias
TYPE	2:63	2:74	4	const char *
TYPE_NAME	2:63	2:69	5	const char
LEAF_NODE	2:63	2:63	6	const
LEAF_NODE	2:69	2:69	6	char
POINTER	2:74	2:74	5	*
LEAF_NODE	2:74	2:74	6	*
NAME	2:75	2:75	4	alias
LEAF_NODE	2:75	2:75	5	alias
LEAF_NODE	2:80	2:80	3	)
LEAF_NODE	2:82	2:82	2	{
STATEMENTS	3:1	4:1	2	
SIMPLE_DECL	3:1	3:56	3	OscarData * od ; od = purple_connection_get_protocol_data ( gc ) ;
VAR_DECL	3:1	3:12	4	OscarData * od ; od = purple_connection_get_protocol_data ( gc )
TYPE	3:1	3:11	5	OscarData *
TYPE_NAME	3:1	3:1	6	OscarData
LEAF_NODE	3:1	3:1	7	OscarData
POINTER	3:11	3:11	6	*
LEAF_NODE	3:11	3:11	7	*
NAME	3:12	3:12	5	od
LEAF_NODE	3:12	3:12	6	od
LEAF_NODE	0:0	0:0	5	;
INIT	3:12	3:12	5	od = purple_connection_get_protocol_data ( gc )
ASSIGN	3:12	3:17	6	od = purple_connection_get_protocol_data ( gc )
LVAL	3:12	3:12	7	od
NAME	3:12	3:12	8	od
LEAF_NODE	3:12	3:12	9	od
ASSIGN_OP	3:15	3:15	7	=
LEAF_NODE	3:15	3:15	8	=
RVAL	3:17	3:17	7	purple_connection_get_protocol_data ( gc )
FUNCTION_CALL	3:17	3:55	8	purple_connection_get_protocol_data ( gc )
CALLEE	3:17	3:17	9	purple_connection_get_protocol_data
LEAF_NODE	3:17	3:17	10	purple_connection_get_protocol_data
LEAF_NODE	3:52	3:52	9	(
ARGUMENT	3:53	3:53	9	gc
FIELD	3:53	3:53	10	gc
LEAF_NODE	3:53	3:53	11	gc
LEAF_NODE	3:55	3:55	9	)
LEAF_NODE	3:56	3:56	4	;
SELECTION	4:1	4:28	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	od -> ssi . received_data
EXPR	4:5	4:5	5	od -> ssi . received_data
FIELD	4:5	4:13	6	od -> ssi . received_data
LEAF_NODE	4:5	4:5	7	od
LEAF_NODE	4:7	4:7	7	->
LEAF_NODE	4:9	4:9	7	ssi
LEAF_NODE	4:12	4:12	7	.
LEAF_NODE	4:13	4:13	7	received_data
LEAF_NODE	4:26	4:26	4	)
STATEMENTS	4:28	11:1	4	
LEAF_NODE	4:28	4:28	5	{
STATEMENTS	5:2	6:2	5	
SIMPLE_DECL	5:2	5:68	6	char * gname ; gname = aim_ssi_itemlist_findparentname ( od -> ssi . local , name ) ;
VAR_DECL	5:2	5:8	7	char * gname ; gname = aim_ssi_itemlist_findparentname ( od -> ssi . local , name )
TYPE	5:2	5:7	8	char *
TYPE_NAME	5:2	5:2	9	char
LEAF_NODE	5:2	5:2	10	char
POINTER	5:7	5:7	9	*
LEAF_NODE	5:7	5:7	10	*
NAME	5:8	5:8	8	gname
LEAF_NODE	5:8	5:8	9	gname
LEAF_NODE	0:0	0:0	8	;
INIT	5:8	5:8	8	gname = aim_ssi_itemlist_findparentname ( od -> ssi . local , name )
ASSIGN	5:8	5:16	9	gname = aim_ssi_itemlist_findparentname ( od -> ssi . local , name )
LVAL	5:8	5:8	10	gname
NAME	5:8	5:8	11	gname
LEAF_NODE	5:8	5:8	12	gname
ASSIGN_OP	5:14	5:14	10	=
LEAF_NODE	5:14	5:14	11	=
RVAL	5:16	5:16	10	aim_ssi_itemlist_findparentname ( od -> ssi . local , name )
FUNCTION_CALL	5:16	5:67	11	aim_ssi_itemlist_findparentname ( od -> ssi . local , name )
CALLEE	5:16	5:16	12	aim_ssi_itemlist_findparentname
LEAF_NODE	5:16	5:16	13	aim_ssi_itemlist_findparentname
LEAF_NODE	5:47	5:47	12	(
ARGUMENT	5:48	5:48	12	od -> ssi . local
FIELD	5:48	5:56	13	od -> ssi . local
LEAF_NODE	5:48	5:48	14	od
LEAF_NODE	5:50	5:50	14	->
LEAF_NODE	5:52	5:52	14	ssi
LEAF_NODE	5:55	5:55	14	.
LEAF_NODE	5:56	5:56	14	local
LEAF_NODE	5:61	5:61	12	,
ARGUMENT	5:63	5:63	12	name
FIELD	5:63	5:63	13	name
LEAF_NODE	5:63	5:63	14	name
LEAF_NODE	5:67	5:67	12	)
LEAF_NODE	5:68	5:68	7	;
SELECTION	6:2	6:13	6	
KEYWORD	6:2	6:2	7	if
LEAF_NODE	6:2	6:2	8	if
LEAF_NODE	6:5	6:5	7	(
CONDITION	6:6	6:6	7	gname
EXPR	6:6	6:6	8	gname
FIELD	6:6	6:6	9	gname
LEAF_NODE	6:6	6:6	10	gname
LEAF_NODE	6:11	6:11	7	)
STATEMENTS	6:13	10:2	7	
LEAF_NODE	6:13	6:13	8	{
STATEMENTS	7:3	9:3	8	
EXPR_STATEMENT	7:3	8:87	9	purple_debug_info ( "oscar" , "ssi: changing the alias for buddy %s to %s\n" , name , alias ? alias : "(none)" ) ;
EXPR	7:3	7:3	10	purple_debug_info ( "oscar" , "ssi: changing the alias for buddy %s to %s\n" , name , alias ? alias : "(none)" )
FUNCTION_CALL	7:3	8:86	11	purple_debug_info ( "oscar" , "ssi: changing the alias for buddy %s to %s\n" , name , alias ? alias : "(none)" )
CALLEE	7:3	7:3	12	purple_debug_info
LEAF_NODE	7:3	7:3	13	purple_debug_info
LEAF_NODE	7:20	7:20	12	(
ARGUMENT	7:21	7:21	12	"oscar"
FIELD	7:21	7:21	13	"oscar"
LEAF_NODE	7:21	7:21	14	"oscar"
LEAF_NODE	7:28	7:28	12	,
ARGUMENT	8:8	8:8	12	"ssi: changing the alias for buddy %s to %s\n"
FIELD	8:8	8:8	13	"ssi: changing the alias for buddy %s to %s\n"
LEAF_NODE	8:8	8:8	14	"ssi: changing the alias for buddy %s to %s\n"
LEAF_NODE	8:54	8:54	12	,
ARGUMENT	8:56	8:56	12	name
FIELD	8:56	8:56	13	name
LEAF_NODE	8:56	8:56	14	name
LEAF_NODE	8:60	8:60	12	,
ARGUMENT	8:62	8:62	12	alias ? alias : "(none)"
COND_EXPR	8:62	8:78	13	alias ? alias : "(none)"
CONDITION	8:62	8:62	14	alias
FIELD	8:62	8:62	15	alias
LEAF_NODE	8:62	8:62	16	alias
LEAF_NODE	8:68	8:68	14	?
EXPR	8:70	8:70	14	alias
FIELD	8:70	8:70	15	alias
LEAF_NODE	8:70	8:70	16	alias
LEAF_NODE	8:76	8:76	14	:
FIELD	8:78	8:78	14	"(none)"
LEAF_NODE	8:78	8:78	15	"(none)"
LEAF_NODE	8:86	8:86	12	)
LEAF_NODE	8:87	8:87	10	;
EXPR_STATEMENT	9:3	9:45	9	aim_ssi_aliasbuddy ( od , gname , name , alias ) ;
EXPR	9:3	9:3	10	aim_ssi_aliasbuddy ( od , gname , name , alias )
FUNCTION_CALL	9:3	9:44	11	aim_ssi_aliasbuddy ( od , gname , name , alias )
CALLEE	9:3	9:3	12	aim_ssi_aliasbuddy
LEAF_NODE	9:3	9:3	13	aim_ssi_aliasbuddy
LEAF_NODE	9:21	9:21	12	(
ARGUMENT	9:22	9:22	12	od
FIELD	9:22	9:22	13	od
LEAF_NODE	9:22	9:22	14	od
LEAF_NODE	9:24	9:24	12	,
ARGUMENT	9:26	9:26	12	gname
FIELD	9:26	9:26	13	gname
LEAF_NODE	9:26	9:26	14	gname
LEAF_NODE	9:31	9:31	12	,
ARGUMENT	9:33	9:33	12	name
FIELD	9:33	9:33	13	name
LEAF_NODE	9:33	9:33	14	name
LEAF_NODE	9:37	9:37	12	,
ARGUMENT	9:39	9:39	12	alias
FIELD	9:39	9:39	13	alias
LEAF_NODE	9:39	9:39	14	alias
LEAF_NODE	9:44	9:44	12	)
LEAF_NODE	9:45	9:45	10	;
LEAF_NODE	10:2	10:2	8	}
LEAF_NODE	11:1	11:1	5	}
LEAF_NODE	12:0	12:0	2	}
FUNCTION_DEF	14:0	24:0	1	
RETURN_TYPE	14:0	14:0	2	void
TYPE_NAME	14:0	14:0	3	void
LEAF_NODE	14:0	14:0	4	void
FUNCTION_NAME	14:5	14:5	2	oscar_alias_buddy
LEAF_NODE	14:5	14:5	3	oscar_alias_buddy
PARAMETER_LIST	14:22	14:80	2	( PurpleConnection * gc , const char * name , const char * alias )
LEAF_NODE	14:22	14:22	3	(
PARAMETER_DECL	14:23	14:41	3	PurpleConnection * gc
TYPE	14:23	14:40	4	PurpleConnection *
TYPE_NAME	14:23	14:23	5	PurpleConnection
LEAF_NODE	14:23	14:23	6	PurpleConnection
POINTER	14:40	14:40	5	*
LEAF_NODE	14:40	14:40	6	*
NAME	14:41	14:41	4	gc
LEAF_NODE	14:41	14:41	5	gc
LEAF_NODE	14:43	14:43	3	,
PARAMETER_DECL	14:45	14:57	3	const char * name
TYPE	14:45	14:56	4	const char *
TYPE_NAME	14:45	14:51	5	const char
LEAF_NODE	14:45	14:45	6	const
LEAF_NODE	14:51	14:51	6	char
POINTER	14:56	14:56	5	*
LEAF_NODE	14:56	14:56	6	*
NAME	14:57	14:57	4	name
LEAF_NODE	14:57	14:57	5	name
LEAF_NODE	14:61	14:61	3	,
PARAMETER_DECL	14:63	14:75	3	const char * alias
TYPE	14:63	14:74	4	const char *
TYPE_NAME	14:63	14:69	5	const char
LEAF_NODE	14:63	14:63	6	const
LEAF_NODE	14:69	14:69	6	char
POINTER	14:74	14:74	5	*
LEAF_NODE	14:74	14:74	6	*
NAME	14:75	14:75	4	alias
LEAF_NODE	14:75	14:75	5	alias
LEAF_NODE	14:80	14:80	3	)
LEAF_NODE	14:82	14:82	2	{
STATEMENTS	15:1	16:1	2	
SIMPLE_DECL	15:1	15:56	3	OscarData * od ; od = purple_connection_get_protocol_data ( gc ) ;
VAR_DECL	15:1	15:12	4	OscarData * od ; od = purple_connection_get_protocol_data ( gc )
TYPE	15:1	15:11	5	OscarData *
TYPE_NAME	15:1	15:1	6	OscarData
LEAF_NODE	15:1	15:1	7	OscarData
POINTER	15:11	15:11	6	*
LEAF_NODE	15:11	15:11	7	*
NAME	15:12	15:12	5	od
LEAF_NODE	15:12	15:12	6	od
LEAF_NODE	0:0	0:0	5	;
INIT	15:12	15:12	5	od = purple_connection_get_protocol_data ( gc )
ASSIGN	15:12	15:17	6	od = purple_connection_get_protocol_data ( gc )
LVAL	15:12	15:12	7	od
NAME	15:12	15:12	8	od
LEAF_NODE	15:12	15:12	9	od
ASSIGN_OP	15:15	15:15	7	=
LEAF_NODE	15:15	15:15	8	=
RVAL	15:17	15:17	7	purple_connection_get_protocol_data ( gc )
FUNCTION_CALL	15:17	15:55	8	purple_connection_get_protocol_data ( gc )
CALLEE	15:17	15:17	9	purple_connection_get_protocol_data
LEAF_NODE	15:17	15:17	10	purple_connection_get_protocol_data
LEAF_NODE	15:52	15:52	9	(
ARGUMENT	15:53	15:53	9	gc
FIELD	15:53	15:53	10	gc
LEAF_NODE	15:53	15:53	11	gc
LEAF_NODE	15:55	15:55	9	)
LEAF_NODE	15:56	15:56	4	;
SELECTION	16:1	16:28	3	
KEYWORD	16:1	16:1	4	if
LEAF_NODE	16:1	16:1	5	if
LEAF_NODE	16:4	16:4	4	(
CONDITION	16:5	16:5	4	od -> ssi . received_data
EXPR	16:5	16:5	5	od -> ssi . received_data
FIELD	16:5	16:13	6	od -> ssi . received_data
LEAF_NODE	16:5	16:5	7	od
LEAF_NODE	16:7	16:7	7	->
LEAF_NODE	16:9	16:9	7	ssi
LEAF_NODE	16:12	16:12	7	.
LEAF_NODE	16:13	16:13	7	received_data
LEAF_NODE	16:26	16:26	4	)
STATEMENTS	16:28	23:1	4	
LEAF_NODE	16:28	16:28	5	{
STATEMENTS	17:2	18:2	5	
SIMPLE_DECL	17:2	17:68	6	char * gname ; gname = aim_ssi_itemlist_findparentname ( od -> ssi . local , name ) ;
VAR_DECL	17:2	17:8	7	char * gname ; gname = aim_ssi_itemlist_findparentname ( od -> ssi . local , name )
TYPE	17:2	17:7	8	char *
TYPE_NAME	17:2	17:2	9	char
LEAF_NODE	17:2	17:2	10	char
POINTER	17:7	17:7	9	*
LEAF_NODE	17:7	17:7	10	*
NAME	17:8	17:8	8	gname
LEAF_NODE	17:8	17:8	9	gname
LEAF_NODE	0:0	0:0	8	;
INIT	17:8	17:8	8	gname = aim_ssi_itemlist_findparentname ( od -> ssi . local , name )
ASSIGN	17:8	17:16	9	gname = aim_ssi_itemlist_findparentname ( od -> ssi . local , name )
LVAL	17:8	17:8	10	gname
NAME	17:8	17:8	11	gname
LEAF_NODE	17:8	17:8	12	gname
ASSIGN_OP	17:14	17:14	10	=
LEAF_NODE	17:14	17:14	11	=
RVAL	17:16	17:16	10	aim_ssi_itemlist_findparentname ( od -> ssi . local , name )
FUNCTION_CALL	17:16	17:67	11	aim_ssi_itemlist_findparentname ( od -> ssi . local , name )
CALLEE	17:16	17:16	12	aim_ssi_itemlist_findparentname
LEAF_NODE	17:16	17:16	13	aim_ssi_itemlist_findparentname
LEAF_NODE	17:47	17:47	12	(
ARGUMENT	17:48	17:48	12	od -> ssi . local
FIELD	17:48	17:56	13	od -> ssi . local
LEAF_NODE	17:48	17:48	14	od
LEAF_NODE	17:50	17:50	14	->
LEAF_NODE	17:52	17:52	14	ssi
LEAF_NODE	17:55	17:55	14	.
LEAF_NODE	17:56	17:56	14	local
LEAF_NODE	17:61	17:61	12	,
ARGUMENT	17:63	17:63	12	name
FIELD	17:63	17:63	13	name
LEAF_NODE	17:63	17:63	14	name
LEAF_NODE	17:67	17:67	12	)
LEAF_NODE	17:68	17:68	7	;
SELECTION	18:2	18:13	6	
KEYWORD	18:2	18:2	7	if
LEAF_NODE	18:2	18:2	8	if
LEAF_NODE	18:5	18:5	7	(
CONDITION	18:6	18:6	7	gname
EXPR	18:6	18:6	8	gname
FIELD	18:6	18:6	9	gname
LEAF_NODE	18:6	18:6	10	gname
LEAF_NODE	18:11	18:11	7	)
STATEMENTS	18:13	22:2	7	
LEAF_NODE	18:13	18:13	8	{
STATEMENTS	19:3	21:3	8	
EXPR_STATEMENT	19:3	20:87	9	purple_debug_info ( "oscar" , "ssi: changing the alias for buddy %s to %s\n" , name , alias ? alias : "(none)" ) ;
EXPR	19:3	19:3	10	purple_debug_info ( "oscar" , "ssi: changing the alias for buddy %s to %s\n" , name , alias ? alias : "(none)" )
FUNCTION_CALL	19:3	20:86	11	purple_debug_info ( "oscar" , "ssi: changing the alias for buddy %s to %s\n" , name , alias ? alias : "(none)" )
CALLEE	19:3	19:3	12	purple_debug_info
LEAF_NODE	19:3	19:3	13	purple_debug_info
LEAF_NODE	19:20	19:20	12	(
ARGUMENT	19:21	19:21	12	"oscar"
FIELD	19:21	19:21	13	"oscar"
LEAF_NODE	19:21	19:21	14	"oscar"
LEAF_NODE	19:28	19:28	12	,
ARGUMENT	20:8	20:8	12	"ssi: changing the alias for buddy %s to %s\n"
FIELD	20:8	20:8	13	"ssi: changing the alias for buddy %s to %s\n"
LEAF_NODE	20:8	20:8	14	"ssi: changing the alias for buddy %s to %s\n"
LEAF_NODE	20:54	20:54	12	,
ARGUMENT	20:56	20:56	12	name
FIELD	20:56	20:56	13	name
LEAF_NODE	20:56	20:56	14	name
LEAF_NODE	20:60	20:60	12	,
ARGUMENT	20:62	20:62	12	alias ? alias : "(none)"
COND_EXPR	20:62	20:78	13	alias ? alias : "(none)"
CONDITION	20:62	20:62	14	alias
FIELD	20:62	20:62	15	alias
LEAF_NODE	20:62	20:62	16	alias
LEAF_NODE	20:68	20:68	14	?
EXPR	20:70	20:70	14	alias
FIELD	20:70	20:70	15	alias
LEAF_NODE	20:70	20:70	16	alias
LEAF_NODE	20:76	20:76	14	:
FIELD	20:78	20:78	14	"(none)"
LEAF_NODE	20:78	20:78	15	"(none)"
LEAF_NODE	20:86	20:86	12	)
LEAF_NODE	20:87	20:87	10	;
EXPR_STATEMENT	21:3	21:45	9	aim_ssi_aliasbuddy ( od , gname , name , alias ) ;
EXPR	21:3	21:3	10	aim_ssi_aliasbuddy ( od , gname , name , alias )
FUNCTION_CALL	21:3	21:44	11	aim_ssi_aliasbuddy ( od , gname , name , alias )
CALLEE	21:3	21:3	12	aim_ssi_aliasbuddy
LEAF_NODE	21:3	21:3	13	aim_ssi_aliasbuddy
LEAF_NODE	21:21	21:21	12	(
ARGUMENT	21:22	21:22	12	od
FIELD	21:22	21:22	13	od
LEAF_NODE	21:22	21:22	14	od
LEAF_NODE	21:24	21:24	12	,
ARGUMENT	21:26	21:26	12	gname
FIELD	21:26	21:26	13	gname
LEAF_NODE	21:26	21:26	14	gname
LEAF_NODE	21:31	21:31	12	,
ARGUMENT	21:33	21:33	12	name
FIELD	21:33	21:33	13	name
LEAF_NODE	21:33	21:33	14	name
LEAF_NODE	21:37	21:37	12	,
ARGUMENT	21:39	21:39	12	alias
FIELD	21:39	21:39	13	alias
LEAF_NODE	21:39	21:39	14	alias
LEAF_NODE	21:44	21:44	12	)
LEAF_NODE	21:45	21:45	10	;
LEAF_NODE	22:2	22:2	8	}
LEAF_NODE	23:1	23:1	5	}
LEAF_NODE	24:0	24:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:17	2	PurplePluginPref *
TYPE_NAME	1:0	1:0	3	PurplePluginPref
LEAF_NODE	1:0	1:0	4	PurplePluginPref
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	purple_plugin_pref_new_with_name
LEAF_NODE	2:0	2:0	3	purple_plugin_pref_new_with_name
PARAMETER_LIST	2:32	2:49	2	( const char * name )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:45	3	const char * name
TYPE	2:33	2:44	4	const char *
TYPE_NAME	2:33	2:39	5	const char
LEAF_NODE	2:33	2:33	6	const
LEAF_NODE	2:39	2:39	6	char
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	name
LEAF_NODE	2:45	2:45	5	name
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SIMPLE_DECL	4:1	4:23	3	PurplePluginPref * pref ;
VAR_DECL	4:1	4:19	4	PurplePluginPref * pref
TYPE	4:1	4:18	5	PurplePluginPref *
TYPE_NAME	4:1	4:1	6	PurplePluginPref
LEAF_NODE	4:1	4:1	7	PurplePluginPref
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	pref
LEAF_NODE	4:19	4:19	6	pref
LEAF_NODE	4:23	4:23	4	;
EXPR_STATEMENT	5:1	5:41	3	g_return_val_if_fail ( name != NULL , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( name != NULL , NULL )
FUNCTION_CALL	5:1	5:40	5	g_return_val_if_fail ( name != NULL , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:30	6	name != NULL
FIELD	5:22	5:22	7	name
LEAF_NODE	5:22	5:22	8	name
EQ_OPERATOR	5:27	5:27	7	!=
LEAF_NODE	5:27	5:27	8	!=
FIELD	5:30	5:30	7	NULL
LEAF_NODE	5:30	5:30	8	NULL
LEAF_NODE	5:34	5:34	6	,
ARGUMENT	5:36	5:36	6	NULL
FIELD	5:36	5:36	7	NULL
LEAF_NODE	5:36	5:36	8	NULL
LEAF_NODE	5:40	5:40	6	)
LEAF_NODE	5:41	5:41	4	;
EXPR_STATEMENT	6:1	6:35	3	pref = g_new0 ( PurplePluginPref , 1 ) ;
EXPR	6:1	6:1	4	pref = g_new0 ( PurplePluginPref , 1 )
ASSIGN	6:1	6:8	5	pref = g_new0 ( PurplePluginPref , 1 )
LVAL	6:1	6:1	6	pref
FIELD	6:1	6:1	7	pref
LEAF_NODE	6:1	6:1	8	pref
ASSIGN_OP	6:6	6:6	6	=
LEAF_NODE	6:6	6:6	7	=
RVAL	6:8	6:8	6	g_new0 ( PurplePluginPref , 1 )
FUNCTION_CALL	6:8	6:34	7	g_new0 ( PurplePluginPref , 1 )
CALLEE	6:8	6:8	8	g_new0
LEAF_NODE	6:8	6:8	9	g_new0
LEAF_NODE	6:14	6:14	8	(
ARGUMENT	6:15	6:15	8	PurplePluginPref
FIELD	6:15	6:15	9	PurplePluginPref
LEAF_NODE	6:15	6:15	10	PurplePluginPref
LEAF_NODE	6:31	6:31	8	,
ARGUMENT	6:33	6:33	8	1
FIELD	6:33	6:33	9	1
LEAF_NODE	6:33	6:33	10	1
LEAF_NODE	6:34	6:34	8	)
LEAF_NODE	6:35	6:35	4	;
EXPR_STATEMENT	7:1	7:28	3	pref -> name = g_strdup ( name ) ;
EXPR	7:1	7:1	4	pref -> name = g_strdup ( name )
ASSIGN	7:1	7:14	5	pref -> name = g_strdup ( name )
LVAL	7:1	7:1	6	pref -> name
FIELD	7:1	7:7	7	pref -> name
LEAF_NODE	7:1	7:1	8	pref
LEAF_NODE	7:5	7:5	8	->
LEAF_NODE	7:7	7:7	8	name
ASSIGN_OP	7:12	7:12	6	=
LEAF_NODE	7:12	7:12	7	=
RVAL	7:14	7:14	6	g_strdup ( name )
FUNCTION_CALL	7:14	7:27	7	g_strdup ( name )
CALLEE	7:14	7:14	8	g_strdup
LEAF_NODE	7:14	7:14	9	g_strdup
LEAF_NODE	7:22	7:22	8	(
ARGUMENT	7:23	7:23	8	name
FIELD	7:23	7:23	9	name
LEAF_NODE	7:23	7:23	10	name
LEAF_NODE	7:27	7:27	8	)
LEAF_NODE	7:28	7:28	4	;
JUMP_STATEMENT	8:1	8:12	3	return pref ;
KEYWORD	8:1	8:1	4	return
LEAF_NODE	8:1	8:1	5	return
DESTINATION	8:8	8:8	4	pref
EXPR	8:8	8:8	5	pref
FIELD	8:8	8:8	6	pref
LEAF_NODE	8:8	8:8	7	pref
LEAF_NODE	8:12	8:12	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	set_startupstatus
LEAF_NODE	2:0	2:0	3	set_startupstatus
PARAMETER_LIST	2:17	2:43	2	( PurpleSavedStatus * status )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:37	3	PurpleSavedStatus * status
TYPE	2:18	2:36	4	PurpleSavedStatus *
TYPE_NAME	2:18	2:18	5	PurpleSavedStatus
LEAF_NODE	2:18	2:18	6	PurpleSavedStatus
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	status
LEAF_NODE	2:37	2:37	5	status
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	4:98	3	purple_prefs_set_int ( "/purple/savedstatus/startup" , purple_savedstatus_get_creation_time ( status ) ) ;
EXPR	4:1	4:1	4	purple_prefs_set_int ( "/purple/savedstatus/startup" , purple_savedstatus_get_creation_time ( status ) )
FUNCTION_CALL	4:1	4:97	5	purple_prefs_set_int ( "/purple/savedstatus/startup" , purple_savedstatus_get_creation_time ( status ) )
CALLEE	4:1	4:1	6	purple_prefs_set_int
LEAF_NODE	4:1	4:1	7	purple_prefs_set_int
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:22	6	"/purple/savedstatus/startup"
FIELD	4:22	4:22	7	"/purple/savedstatus/startup"
LEAF_NODE	4:22	4:22	8	"/purple/savedstatus/startup"
LEAF_NODE	4:51	4:51	6	,
ARGUMENT	4:53	4:53	6	purple_savedstatus_get_creation_time ( status )
FUNCTION_CALL	4:53	4:96	7	purple_savedstatus_get_creation_time ( status )
CALLEE	4:53	4:53	8	purple_savedstatus_get_creation_time
LEAF_NODE	4:53	4:53	9	purple_savedstatus_get_creation_time
LEAF_NODE	4:89	4:89	8	(
ARGUMENT	4:90	4:90	8	status
FIELD	4:90	4:90	9	status
LEAF_NODE	4:90	4:90	10	status
LEAF_NODE	4:96	4:96	8	)
LEAF_NODE	4:97	4:97	6	)
LEAF_NODE	4:98	4:98	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	gg_register_watch_fd
LEAF_NODE	2:4	2:4	3	gg_register_watch_fd
PARAMETER_LIST	2:24	2:43	2	( struct gg_httpd * h )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:42	3	struct gg_httpd * h
TYPE	2:25	2:41	4	struct gg_httpd *
TYPE_NAME	2:25	2:32	5	struct gg_httpd
LEAF_NODE	2:25	2:25	6	struct
LEAF_NODE	2:32	2:32	6	gg_httpd
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	h
LEAF_NODE	2:42	2:42	5	h
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:29	3	return gg_pubdir_watch_fd ( h ) ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	gg_pubdir_watch_fd ( h )
EXPR	4:8	4:8	5	gg_pubdir_watch_fd ( h )
FUNCTION_CALL	4:8	4:28	6	gg_pubdir_watch_fd ( h )
CALLEE	4:8	4:8	7	gg_pubdir_watch_fd
LEAF_NODE	4:8	4:8	8	gg_pubdir_watch_fd
LEAF_NODE	4:26	4:26	7	(
ARGUMENT	4:27	4:27	7	h
FIELD	4:27	4:27	8	h
LEAF_NODE	4:27	4:27	9	h
LEAF_NODE	4:28	4:28	7	)
LEAF_NODE	4:29	4:29	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	16:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	main
LEAF_NODE	2:4	2:4	3	main
PARAMETER_LIST	2:9	2:31	2	( int argc , char * * argv )
LEAF_NODE	2:9	2:9	3	(
PARAMETER_DECL	2:10	2:14	3	int argc
TYPE	2:10	2:10	4	int
TYPE_NAME	2:10	2:10	5	int
LEAF_NODE	2:10	2:10	6	int
NAME	2:14	2:14	4	argc
LEAF_NODE	2:14	2:14	5	argc
LEAF_NODE	2:18	2:18	3	,
PARAMETER_DECL	2:20	2:27	3	char * * argv
TYPE	2:20	2:25	4	char * *
TYPE_NAME	2:20	2:20	5	char
LEAF_NODE	2:20	2:20	6	char
POINTER	2:25	2:26	5	* *
LEAF_NODE	2:25	2:25	6	*
LEAF_NODE	2:26	2:26	6	*
NAME	2:27	2:27	4	argv
LEAF_NODE	2:27	2:27	5	argv
LEAF_NODE	2:31	2:31	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	15:1	2	
SIMPLE_DECL	4:1	4:20	3	GList * alist , GList * node ;
INIT_DECL_LIST	4:1	4:1	4	GList * alist , GList * node
VAR_DECL	4:1	4:8	5	GList * alist
TYPE	4:1	4:7	6	GList *
TYPE_NAME	4:1	4:1	7	GList
LEAF_NODE	4:1	4:1	8	GList
POINTER	4:7	4:7	7	*
LEAF_NODE	4:7	4:7	8	*
NAME	4:8	4:8	6	alist
LEAF_NODE	4:8	4:8	7	alist
LEAF_NODE	4:13	4:13	5	,
VAR_DECL	4:1	4:16	5	GList * node
TYPE	4:1	4:15	6	GList *
TYPE_NAME	4:1	4:1	7	GList
LEAF_NODE	4:1	4:1	8	GList
POINTER	4:15	4:15	7	*
LEAF_NODE	4:15	4:15	8	*
NAME	4:16	4:16	6	node
LEAF_NODE	4:16	4:16	7	node
LEAF_NODE	4:20	4:20	4	;
EXPR_STATEMENT	5:1	5:14	3	purple_init ( ) ;
EXPR	5:1	5:1	4	purple_init ( )
FUNCTION_CALL	5:1	5:13	5	purple_init ( )
CALLEE	5:1	5:1	6	purple_init
LEAF_NODE	5:1	5:1	7	purple_init
LEAF_NODE	5:12	5:12	6	(
LEAF_NODE	5:13	5:13	6	)
LEAF_NODE	5:14	5:14	4	;
EXPR_STATEMENT	6:1	6:34	3	alist = purple_accounts_get_all ( ) ;
EXPR	6:1	6:1	4	alist = purple_accounts_get_all ( )
ASSIGN	6:1	6:9	5	alist = purple_accounts_get_all ( )
LVAL	6:1	6:1	6	alist
FIELD	6:1	6:1	7	alist
LEAF_NODE	6:1	6:1	8	alist
ASSIGN_OP	6:7	6:7	6	=
LEAF_NODE	6:7	6:7	7	=
RVAL	6:9	6:9	6	purple_accounts_get_all ( )
FUNCTION_CALL	6:9	6:33	7	purple_accounts_get_all ( )
CALLEE	6:9	6:9	8	purple_accounts_get_all
LEAF_NODE	6:9	6:9	9	purple_accounts_get_all
LEAF_NODE	6:32	6:32	8	(
LEAF_NODE	6:33	6:33	8	)
LEAF_NODE	6:34	6:34	4	;
ITERATION	7:1	8:1	3	
KEYWORD	7:1	7:1	4	for
LEAF_NODE	7:1	7:1	5	for
LEAF_NODE	7:5	7:5	4	(
FOR_INIT	7:6	7:18	4	node = alist ;
EXPR	7:6	7:6	5	node = alist
ASSIGN	7:6	7:13	6	node = alist
LVAL	7:6	7:6	7	node
FIELD	7:6	7:6	8	node
LEAF_NODE	7:6	7:6	9	node
ASSIGN_OP	7:11	7:11	7	=
LEAF_NODE	7:11	7:11	8	=
RVAL	7:13	7:13	7	alist
FIELD	7:13	7:13	8	alist
LEAF_NODE	7:13	7:13	9	alist
LEAF_NODE	7:18	7:18	5	;
CONDITION	7:20	7:20	4	node != NULL
EXPR	7:20	7:28	5	node != NULL
FIELD	7:20	7:20	6	node
LEAF_NODE	7:20	7:20	7	node
EQ_OPERATOR	7:25	7:25	6	!=
LEAF_NODE	7:25	7:25	7	!=
FIELD	7:28	7:28	6	NULL
LEAF_NODE	7:28	7:28	7	NULL
LEAF_NODE	7:32	7:32	4	;
FOR_EXPR	7:34	7:34	4	node = node -> next
EXPR	7:34	7:34	5	node = node -> next
ASSIGN	7:34	7:41	6	node = node -> next
LVAL	7:34	7:34	7	node
FIELD	7:34	7:34	8	node
LEAF_NODE	7:34	7:34	9	node
ASSIGN_OP	7:39	7:39	7	=
LEAF_NODE	7:39	7:39	8	=
RVAL	7:41	7:41	7	node -> next
FIELD	7:41	7:47	8	node -> next
LEAF_NODE	7:41	7:41	9	node
LEAF_NODE	7:45	7:45	9	->
LEAF_NODE	7:47	7:47	9	next
LEAF_NODE	7:51	7:51	4	)
STATEMENTS	8:1	13:1	4	
LEAF_NODE	8:1	8:1	5	{
STATEMENTS	9:2	12:2	5	
SIMPLE_DECL	9:2	9:54	6	PurpleAccount * account ; account = ( PurpleAccount * ) node -> data ;
VAR_DECL	9:2	9:17	7	PurpleAccount * account ; account = ( PurpleAccount * ) node -> data
TYPE	9:2	9:16	8	PurpleAccount *
TYPE_NAME	9:2	9:2	9	PurpleAccount
LEAF_NODE	9:2	9:2	10	PurpleAccount
POINTER	9:16	9:16	9	*
LEAF_NODE	9:16	9:16	10	*
NAME	9:17	9:17	8	account
LEAF_NODE	9:17	9:17	9	account
LEAF_NODE	0:0	0:0	8	;
INIT	9:17	9:17	8	account = ( PurpleAccount * ) node -> data
ASSIGN	9:17	9:27	9	account = ( PurpleAccount * ) node -> data
LVAL	9:17	9:17	10	account
NAME	9:17	9:17	11	account
LEAF_NODE	9:17	9:17	12	account
ASSIGN_OP	9:25	9:25	10	=
LEAF_NODE	9:25	9:25	11	=
RVAL	9:27	9:44	10	( PurpleAccount * ) node -> data
LEAF_NODE	9:27	9:27	11	(
TYPE_NAME	9:28	9:28	11	PurpleAccount
LEAF_NODE	9:28	9:28	12	PurpleAccount
LEAF_NODE	9:41	9:41	11	*
LEAF_NODE	9:42	9:42	11	)
FIELD	9:44	9:50	11	node -> data
LEAF_NODE	9:44	9:44	12	node
LEAF_NODE	9:48	9:48	12	->
LEAF_NODE	9:50	9:50	12	data
LEAF_NODE	9:54	9:54	7	;
SIMPLE_DECL	10:2	10:51	6	char * name ; name = purple_account_get_username ( account ) ;
VAR_DECL	10:2	10:8	7	char * name ; name = purple_account_get_username ( account )
TYPE	10:2	10:7	8	char *
TYPE_NAME	10:2	10:2	9	char
LEAF_NODE	10:2	10:2	10	char
POINTER	10:7	10:7	9	*
LEAF_NODE	10:7	10:7	10	*
NAME	10:8	10:8	8	name
LEAF_NODE	10:8	10:8	9	name
LEAF_NODE	0:0	0:0	8	;
INIT	10:8	10:8	8	name = purple_account_get_username ( account )
ASSIGN	10:8	10:15	9	name = purple_account_get_username ( account )
LVAL	10:8	10:8	10	name
NAME	10:8	10:8	11	name
LEAF_NODE	10:8	10:8	12	name
ASSIGN_OP	10:13	10:13	10	=
LEAF_NODE	10:13	10:13	11	=
RVAL	10:15	10:15	10	purple_account_get_username ( account )
FUNCTION_CALL	10:15	10:50	11	purple_account_get_username ( account )
CALLEE	10:15	10:15	12	purple_account_get_username
LEAF_NODE	10:15	10:15	13	purple_account_get_username
LEAF_NODE	10:42	10:42	12	(
ARGUMENT	10:43	10:43	12	account
FIELD	10:43	10:43	13	account
LEAF_NODE	10:43	10:43	14	account
LEAF_NODE	10:50	10:50	12	)
LEAF_NODE	10:51	10:51	7	;
EXPR_STATEMENT	11:2	11:29	6	g_print ( "Name: %s\n" , name ) ;
EXPR	11:2	11:2	7	g_print ( "Name: %s\n" , name )
FUNCTION_CALL	11:2	11:28	8	g_print ( "Name: %s\n" , name )
CALLEE	11:2	11:2	9	g_print
LEAF_NODE	11:2	11:2	10	g_print
LEAF_NODE	11:9	11:9	9	(
ARGUMENT	11:10	11:10	9	"Name: %s\n"
FIELD	11:10	11:10	10	"Name: %s\n"
LEAF_NODE	11:10	11:10	11	"Name: %s\n"
LEAF_NODE	11:22	11:22	9	,
ARGUMENT	11:24	11:24	9	name
FIELD	11:24	11:24	10	name
LEAF_NODE	11:24	11:24	11	name
LEAF_NODE	11:28	11:28	9	)
LEAF_NODE	11:29	11:29	7	;
EXPR_STATEMENT	12:2	12:14	6	g_free ( name ) ;
EXPR	12:2	12:2	7	g_free ( name )
FUNCTION_CALL	12:2	12:13	8	g_free ( name )
CALLEE	12:2	12:2	9	g_free
LEAF_NODE	12:2	12:2	10	g_free
LEAF_NODE	12:8	12:8	9	(
ARGUMENT	12:9	12:9	9	name
FIELD	12:9	12:9	10	name
LEAF_NODE	12:9	12:9	11	name
LEAF_NODE	12:13	12:13	9	)
LEAF_NODE	12:14	12:14	7	;
LEAF_NODE	13:1	13:1	5	}
EXPR_STATEMENT	14:1	14:19	3	g_list_free ( alist ) ;
EXPR	14:1	14:1	4	g_list_free ( alist )
FUNCTION_CALL	14:1	14:18	5	g_list_free ( alist )
CALLEE	14:1	14:1	6	g_list_free
LEAF_NODE	14:1	14:1	7	g_list_free
LEAF_NODE	14:12	14:12	6	(
ARGUMENT	14:13	14:13	6	alist
FIELD	14:13	14:13	7	alist
LEAF_NODE	14:13	14:13	8	alist
LEAF_NODE	14:18	14:18	6	)
LEAF_NODE	14:19	14:19	4	;
JUMP_STATEMENT	15:1	15:9	3	return 0 ;
KEYWORD	15:1	15:1	4	return
LEAF_NODE	15:1	15:1	5	return
DESTINATION	15:8	15:8	4	0
EXPR	15:8	15:8	5	0
FIELD	15:8	15:8	6	0
LEAF_NODE	15:8	15:8	7	0
LEAF_NODE	15:9	15:9	4	;
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	23:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	window_reverse
LEAF_NODE	2:0	2:0	3	window_reverse
PARAMETER_LIST	2:14	2:54	2	( GntWidget * win , gboolean set , GntWM * wm )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:26	3	GntWidget * win
TYPE	2:15	2:25	4	GntWidget *
TYPE_NAME	2:15	2:15	5	GntWidget
LEAF_NODE	2:15	2:15	6	GntWidget
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	win
LEAF_NODE	2:26	2:26	5	win
LEAF_NODE	2:29	2:29	3	,
PARAMETER_DECL	2:31	2:40	3	gboolean set
TYPE	2:31	2:31	4	gboolean
TYPE_NAME	2:31	2:31	5	gboolean
LEAF_NODE	2:31	2:31	6	gboolean
NAME	2:40	2:40	4	set
LEAF_NODE	2:40	2:40	5	set
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:52	3	GntWM * wm
TYPE	2:45	2:51	4	GntWM *
TYPE_NAME	2:45	2:45	5	GntWM
LEAF_NODE	2:45	2:45	6	GntWM
POINTER	2:51	2:51	5	*
LEAF_NODE	2:51	2:51	6	*
NAME	2:52	2:52	4	wm
LEAF_NODE	2:52	2:52	5	wm
LEAF_NODE	2:54	2:54	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	22:1	2	
SIMPLE_DECL	4:1	4:6	3	int i ;
VAR_DECL	4:1	4:5	4	int i
TYPE	4:1	4:1	5	int
TYPE_NAME	4:1	4:1	6	int
LEAF_NODE	4:1	4:1	7	int
NAME	4:5	4:5	5	i
LEAF_NODE	4:5	4:5	6	i
LEAF_NODE	4:6	4:6	4	;
SIMPLE_DECL	5:1	5:9	3	int w , int h ;
INIT_DECL_LIST	5:1	5:1	4	int w , int h
VAR_DECL	5:1	5:5	5	int w
TYPE	5:1	5:1	6	int
TYPE_NAME	5:1	5:1	7	int
LEAF_NODE	5:1	5:1	8	int
NAME	5:5	5:5	6	w
LEAF_NODE	5:5	5:5	7	w
LEAF_NODE	5:6	5:6	5	,
VAR_DECL	5:1	5:8	5	int h
TYPE	5:1	5:1	6	int
TYPE_NAME	5:1	5:1	7	int
LEAF_NODE	5:1	5:1	8	int
NAME	5:8	5:8	6	h
LEAF_NODE	5:8	5:8	7	h
LEAF_NODE	5:9	5:9	4	;
SIMPLE_DECL	6:1	6:10	3	WINDOW * d ;
VAR_DECL	6:1	6:9	4	WINDOW * d
TYPE	6:1	6:8	5	WINDOW *
TYPE_NAME	6:1	6:1	6	WINDOW
LEAF_NODE	6:1	6:1	7	WINDOW
POINTER	6:8	6:8	6	*
LEAF_NODE	6:8	6:8	7	*
NAME	6:9	6:9	5	d
LEAF_NODE	6:9	6:9	6	d
LEAF_NODE	6:10	6:10	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	GNT_WIDGET_IS_FLAG_SET ( win , GNT_WIDGET_NO_BORDER )
EXPR	7:5	7:5	5	GNT_WIDGET_IS_FLAG_SET ( win , GNT_WIDGET_NO_BORDER )
FUNCTION_CALL	7:5	7:53	6	GNT_WIDGET_IS_FLAG_SET ( win , GNT_WIDGET_NO_BORDER )
CALLEE	7:5	7:5	7	GNT_WIDGET_IS_FLAG_SET
LEAF_NODE	7:5	7:5	8	GNT_WIDGET_IS_FLAG_SET
LEAF_NODE	7:27	7:27	7	(
ARGUMENT	7:28	7:28	7	win
FIELD	7:28	7:28	8	win
LEAF_NODE	7:28	7:28	9	win
LEAF_NODE	7:31	7:31	7	,
ARGUMENT	7:33	7:33	7	GNT_WIDGET_NO_BORDER
FIELD	7:33	7:33	8	GNT_WIDGET_NO_BORDER
LEAF_NODE	7:33	7:33	9	GNT_WIDGET_NO_BORDER
LEAF_NODE	7:53	7:53	7	)
LEAF_NODE	7:54	7:54	4	)
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:8	5	return DESTINATION ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	8:8	8:8	6	;
EXPR_STATEMENT	9:1	9:16	3	d = win -> window ;
EXPR	9:1	9:1	4	d = win -> window
ASSIGN	9:1	9:5	5	d = win -> window
LVAL	9:1	9:1	6	d
FIELD	9:1	9:1	7	d
LEAF_NODE	9:1	9:1	8	d
ASSIGN_OP	9:3	9:3	6	=
LEAF_NODE	9:3	9:3	7	=
RVAL	9:5	9:5	6	win -> window
FIELD	9:5	9:10	7	win -> window
LEAF_NODE	9:5	9:5	8	win
LEAF_NODE	9:8	9:8	8	->
LEAF_NODE	9:10	9:10	8	window
LEAF_NODE	9:16	9:16	4	;
EXPR_STATEMENT	10:1	10:33	3	gnt_widget_get_size ( win , & w , & h ) ;
EXPR	10:1	10:1	4	gnt_widget_get_size ( win , & w , & h )
FUNCTION_CALL	10:1	10:32	5	gnt_widget_get_size ( win , & w , & h )
CALLEE	10:1	10:1	6	gnt_widget_get_size
LEAF_NODE	10:1	10:1	7	gnt_widget_get_size
LEAF_NODE	10:20	10:20	6	(
ARGUMENT	10:21	10:21	6	win
FIELD	10:21	10:21	7	win
LEAF_NODE	10:21	10:21	8	win
LEAF_NODE	10:24	10:24	6	,
ARGUMENT	10:26	10:26	6	& w
UNARY_EXPR	10:26	10:27	7	& w
UNARY_OPERATOR	10:26	10:26	8	&
LEAF_NODE	10:26	10:26	9	&
FIELD	10:27	10:27	8	w
LEAF_NODE	10:27	10:27	9	w
LEAF_NODE	10:28	10:28	6	,
ARGUMENT	10:30	10:30	6	& h
UNARY_EXPR	10:30	10:31	7	& h
UNARY_OPERATOR	10:30	10:30	8	&
LEAF_NODE	10:30	10:30	9	&
FIELD	10:31	10:31	8	h
LEAF_NODE	10:31	10:31	9	h
LEAF_NODE	10:32	10:32	6	)
LEAF_NODE	10:33	10:33	4	;
SELECTION	11:1	11:33	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	gnt_widget_has_shadow ( win )
EXPR	11:5	11:5	5	gnt_widget_has_shadow ( win )
FUNCTION_CALL	11:5	11:30	6	gnt_widget_has_shadow ( win )
CALLEE	11:5	11:5	7	gnt_widget_has_shadow
LEAF_NODE	11:5	11:5	8	gnt_widget_has_shadow
LEAF_NODE	11:26	11:26	7	(
ARGUMENT	11:27	11:27	7	win
FIELD	11:27	11:27	8	win
LEAF_NODE	11:27	11:27	9	win
LEAF_NODE	11:30	11:30	7	)
LEAF_NODE	11:31	11:31	4	)
STATEMENTS	11:33	14:1	4	
LEAF_NODE	11:33	11:33	5	{
STATEMENTS	12:2	13:2	5	
EXPR_STATEMENT	12:2	12:5	6	-- w ;
EXPR	12:2	12:4	7	-- w
LEAF_NODE	12:2	12:2	8	--
FIELD	12:4	12:4	8	w
LEAF_NODE	12:4	12:4	9	w
LEAF_NODE	12:5	12:5	7	;
EXPR_STATEMENT	13:2	13:5	6	-- h ;
EXPR	13:2	13:4	7	-- h
LEAF_NODE	13:2	13:2	8	--
FIELD	13:4	13:4	8	h
LEAF_NODE	13:4	13:4	9	h
LEAF_NODE	13:5	13:5	7	;
LEAF_NODE	14:1	14:1	5	}
ITERATION	16:1	16:52	3	
KEYWORD	16:1	16:1	4	for
LEAF_NODE	16:1	16:1	5	for
LEAF_NODE	16:5	16:5	4	(
FOR_INIT	16:6	16:11	4	i = 0 ;
EXPR	16:6	16:6	5	i = 0
ASSIGN	16:6	16:10	6	i = 0
LVAL	16:6	16:6	7	i
FIELD	16:6	16:6	8	i
LEAF_NODE	16:6	16:6	9	i
ASSIGN_OP	16:8	16:8	7	=
LEAF_NODE	16:8	16:8	8	=
RVAL	16:10	16:10	7	0
FIELD	16:10	16:10	8	0
LEAF_NODE	16:10	16:10	9	0
LEAF_NODE	16:11	16:11	5	;
CONDITION	16:13	16:13	4	i < w
EXPR	16:13	16:17	5	i < w
FIELD	16:13	16:13	6	i
LEAF_NODE	16:13	16:13	7	i
REL_OPERATOR	16:15	16:15	6	<
LEAF_NODE	16:15	16:15	7	<
FIELD	16:17	16:17	6	w
LEAF_NODE	16:17	16:17	7	w
LEAF_NODE	16:18	16:18	4	;
FOR_EXPR	16:20	16:20	4	i += reverse_char ( d , 0 , i , set )
EXPR	16:20	16:20	5	i += reverse_char ( d , 0 , i , set )
ASSIGN	16:20	16:25	6	i += reverse_char ( d , 0 , i , set )
LVAL	16:20	16:20	7	i
FIELD	16:20	16:20	8	i
LEAF_NODE	16:20	16:20	9	i
ASSIGN_OP	16:22	16:22	7	+=
LEAF_NODE	16:22	16:22	8	+=
RVAL	16:25	16:25	7	reverse_char ( d , 0 , i , set )
FUNCTION_CALL	16:25	16:50	8	reverse_char ( d , 0 , i , set )
CALLEE	16:25	16:25	9	reverse_char
LEAF_NODE	16:25	16:25	10	reverse_char
LEAF_NODE	16:37	16:37	9	(
ARGUMENT	16:38	16:38	9	d
FIELD	16:38	16:38	10	d
LEAF_NODE	16:38	16:38	11	d
LEAF_NODE	16:39	16:39	9	,
ARGUMENT	16:41	16:41	9	0
FIELD	16:41	16:41	10	0
LEAF_NODE	16:41	16:41	11	0
LEAF_NODE	16:42	16:42	9	,
ARGUMENT	16:44	16:44	9	i
FIELD	16:44	16:44	10	i
LEAF_NODE	16:44	16:44	11	i
LEAF_NODE	16:45	16:45	9	,
ARGUMENT	16:47	16:47	9	set
FIELD	16:47	16:47	10	set
LEAF_NODE	16:47	16:47	11	set
LEAF_NODE	16:50	16:50	9	)
LEAF_NODE	16:51	16:51	4	)
STATEMENTS	16:52	16:52	4	
LEAF_NODE	16:52	16:52	5	;
ITERATION	17:1	17:54	3	
KEYWORD	17:1	17:1	4	for
LEAF_NODE	17:1	17:1	5	for
LEAF_NODE	17:5	17:5	4	(
FOR_INIT	17:6	17:11	4	i = 0 ;
EXPR	17:6	17:6	5	i = 0
ASSIGN	17:6	17:10	6	i = 0
LVAL	17:6	17:6	7	i
FIELD	17:6	17:6	8	i
LEAF_NODE	17:6	17:6	9	i
ASSIGN_OP	17:8	17:8	7	=
LEAF_NODE	17:8	17:8	8	=
RVAL	17:10	17:10	7	0
FIELD	17:10	17:10	8	0
LEAF_NODE	17:10	17:10	9	0
LEAF_NODE	17:11	17:11	5	;
CONDITION	17:13	17:13	4	i < w
EXPR	17:13	17:17	5	i < w
FIELD	17:13	17:13	6	i
LEAF_NODE	17:13	17:13	7	i
REL_OPERATOR	17:15	17:15	6	<
LEAF_NODE	17:15	17:15	7	<
FIELD	17:17	17:17	6	w
LEAF_NODE	17:17	17:17	7	w
LEAF_NODE	17:18	17:18	4	;
FOR_EXPR	17:20	17:20	4	i += reverse_char ( d , h - 1 , i , set )
EXPR	17:20	17:20	5	i += reverse_char ( d , h - 1 , i , set )
ASSIGN	17:20	17:25	6	i += reverse_char ( d , h - 1 , i , set )
LVAL	17:20	17:20	7	i
FIELD	17:20	17:20	8	i
LEAF_NODE	17:20	17:20	9	i
ASSIGN_OP	17:22	17:22	7	+=
LEAF_NODE	17:22	17:22	8	+=
RVAL	17:25	17:25	7	reverse_char ( d , h - 1 , i , set )
FUNCTION_CALL	17:25	17:52	8	reverse_char ( d , h - 1 , i , set )
CALLEE	17:25	17:25	9	reverse_char
LEAF_NODE	17:25	17:25	10	reverse_char
LEAF_NODE	17:37	17:37	9	(
ARGUMENT	17:38	17:38	9	d
FIELD	17:38	17:38	10	d
LEAF_NODE	17:38	17:38	11	d
LEAF_NODE	17:39	17:39	9	,
ARGUMENT	17:41	17:43	9	h - 1
FIELD	17:41	17:41	10	h
LEAF_NODE	17:41	17:41	11	h
LEAF_NODE	17:42	17:42	10	-
FIELD	17:43	17:43	10	1
LEAF_NODE	17:43	17:43	11	1
LEAF_NODE	17:44	17:44	9	,
ARGUMENT	17:46	17:46	9	i
FIELD	17:46	17:46	10	i
LEAF_NODE	17:46	17:46	11	i
LEAF_NODE	17:47	17:47	9	,
ARGUMENT	17:49	17:49	9	set
FIELD	17:49	17:49	10	set
LEAF_NODE	17:49	17:49	11	set
LEAF_NODE	17:52	17:52	9	)
LEAF_NODE	17:53	17:53	4	)
STATEMENTS	17:54	17:54	4	
LEAF_NODE	17:54	17:54	5	;
ITERATION	19:1	19:52	3	
KEYWORD	19:1	19:1	4	for
LEAF_NODE	19:1	19:1	5	for
LEAF_NODE	19:5	19:5	4	(
FOR_INIT	19:6	19:11	4	i = 0 ;
EXPR	19:6	19:6	5	i = 0
ASSIGN	19:6	19:10	6	i = 0
LVAL	19:6	19:6	7	i
FIELD	19:6	19:6	8	i
LEAF_NODE	19:6	19:6	9	i
ASSIGN_OP	19:8	19:8	7	=
LEAF_NODE	19:8	19:8	8	=
RVAL	19:10	19:10	7	0
FIELD	19:10	19:10	8	0
LEAF_NODE	19:10	19:10	9	0
LEAF_NODE	19:11	19:11	5	;
CONDITION	19:13	19:13	4	i < h
EXPR	19:13	19:17	5	i < h
FIELD	19:13	19:13	6	i
LEAF_NODE	19:13	19:13	7	i
REL_OPERATOR	19:15	19:15	6	<
LEAF_NODE	19:15	19:15	7	<
FIELD	19:17	19:17	6	h
LEAF_NODE	19:17	19:17	7	h
LEAF_NODE	19:18	19:18	4	;
FOR_EXPR	19:20	19:20	4	i += reverse_char ( d , i , 0 , set )
EXPR	19:20	19:20	5	i += reverse_char ( d , i , 0 , set )
ASSIGN	19:20	19:25	6	i += reverse_char ( d , i , 0 , set )
LVAL	19:20	19:20	7	i
FIELD	19:20	19:20	8	i
LEAF_NODE	19:20	19:20	9	i
ASSIGN_OP	19:22	19:22	7	+=
LEAF_NODE	19:22	19:22	8	+=
RVAL	19:25	19:25	7	reverse_char ( d , i , 0 , set )
FUNCTION_CALL	19:25	19:50	8	reverse_char ( d , i , 0 , set )
CALLEE	19:25	19:25	9	reverse_char
LEAF_NODE	19:25	19:25	10	reverse_char
LEAF_NODE	19:37	19:37	9	(
ARGUMENT	19:38	19:38	9	d
FIELD	19:38	19:38	10	d
LEAF_NODE	19:38	19:38	11	d
LEAF_NODE	19:39	19:39	9	,
ARGUMENT	19:41	19:41	9	i
FIELD	19:41	19:41	10	i
LEAF_NODE	19:41	19:41	11	i
LEAF_NODE	19:42	19:42	9	,
ARGUMENT	19:44	19:44	9	0
FIELD	19:44	19:44	10	0
LEAF_NODE	19:44	19:44	11	0
LEAF_NODE	19:45	19:45	9	,
ARGUMENT	19:47	19:47	9	set
FIELD	19:47	19:47	10	set
LEAF_NODE	19:47	19:47	11	set
LEAF_NODE	19:50	19:50	9	)
LEAF_NODE	19:51	19:51	4	)
STATEMENTS	19:52	19:52	4	
LEAF_NODE	19:52	19:52	5	;
ITERATION	20:1	20:54	3	
KEYWORD	20:1	20:1	4	for
LEAF_NODE	20:1	20:1	5	for
LEAF_NODE	20:5	20:5	4	(
FOR_INIT	20:6	20:11	4	i = 0 ;
EXPR	20:6	20:6	5	i = 0
ASSIGN	20:6	20:10	6	i = 0
LVAL	20:6	20:6	7	i
FIELD	20:6	20:6	8	i
LEAF_NODE	20:6	20:6	9	i
ASSIGN_OP	20:8	20:8	7	=
LEAF_NODE	20:8	20:8	8	=
RVAL	20:10	20:10	7	0
FIELD	20:10	20:10	8	0
LEAF_NODE	20:10	20:10	9	0
LEAF_NODE	20:11	20:11	5	;
CONDITION	20:13	20:13	4	i < h
EXPR	20:13	20:17	5	i < h
FIELD	20:13	20:13	6	i
LEAF_NODE	20:13	20:13	7	i
REL_OPERATOR	20:15	20:15	6	<
LEAF_NODE	20:15	20:15	7	<
FIELD	20:17	20:17	6	h
LEAF_NODE	20:17	20:17	7	h
LEAF_NODE	20:18	20:18	4	;
FOR_EXPR	20:20	20:20	4	i += reverse_char ( d , i , w - 1 , set )
EXPR	20:20	20:20	5	i += reverse_char ( d , i , w - 1 , set )
ASSIGN	20:20	20:25	6	i += reverse_char ( d , i , w - 1 , set )
LVAL	20:20	20:20	7	i
FIELD	20:20	20:20	8	i
LEAF_NODE	20:20	20:20	9	i
ASSIGN_OP	20:22	20:22	7	+=
LEAF_NODE	20:22	20:22	8	+=
RVAL	20:25	20:25	7	reverse_char ( d , i , w - 1 , set )
FUNCTION_CALL	20:25	20:52	8	reverse_char ( d , i , w - 1 , set )
CALLEE	20:25	20:25	9	reverse_char
LEAF_NODE	20:25	20:25	10	reverse_char
LEAF_NODE	20:37	20:37	9	(
ARGUMENT	20:38	20:38	9	d
FIELD	20:38	20:38	10	d
LEAF_NODE	20:38	20:38	11	d
LEAF_NODE	20:39	20:39	9	,
ARGUMENT	20:41	20:41	9	i
FIELD	20:41	20:41	10	i
LEAF_NODE	20:41	20:41	11	i
LEAF_NODE	20:42	20:42	9	,
ARGUMENT	20:44	20:46	9	w - 1
FIELD	20:44	20:44	10	w
LEAF_NODE	20:44	20:44	11	w
LEAF_NODE	20:45	20:45	10	-
FIELD	20:46	20:46	10	1
LEAF_NODE	20:46	20:46	11	1
LEAF_NODE	20:47	20:47	9	,
ARGUMENT	20:49	20:49	9	set
FIELD	20:49	20:49	10	set
LEAF_NODE	20:49	20:49	11	set
LEAF_NODE	20:52	20:52	9	)
LEAF_NODE	20:53	20:53	4	)
STATEMENTS	20:54	20:54	4	
LEAF_NODE	20:54	20:54	5	;
EXPR_STATEMENT	21:1	21:58	3	gnt_wm_copy_win ( win , g_hash_table_lookup ( wm -> nodes , win ) ) ;
EXPR	21:1	21:1	4	gnt_wm_copy_win ( win , g_hash_table_lookup ( wm -> nodes , win ) )
FUNCTION_CALL	21:1	21:57	5	gnt_wm_copy_win ( win , g_hash_table_lookup ( wm -> nodes , win ) )
CALLEE	21:1	21:1	6	gnt_wm_copy_win
LEAF_NODE	21:1	21:1	7	gnt_wm_copy_win
LEAF_NODE	21:16	21:16	6	(
ARGUMENT	21:17	21:17	6	win
FIELD	21:17	21:17	7	win
LEAF_NODE	21:17	21:17	8	win
LEAF_NODE	21:20	21:20	6	,
ARGUMENT	21:22	21:22	6	g_hash_table_lookup ( wm -> nodes , win )
FUNCTION_CALL	21:22	21:56	7	g_hash_table_lookup ( wm -> nodes , win )
CALLEE	21:22	21:22	8	g_hash_table_lookup
LEAF_NODE	21:22	21:22	9	g_hash_table_lookup
LEAF_NODE	21:41	21:41	8	(
ARGUMENT	21:42	21:42	8	wm -> nodes
FIELD	21:42	21:46	9	wm -> nodes
LEAF_NODE	21:42	21:42	10	wm
LEAF_NODE	21:44	21:44	10	->
LEAF_NODE	21:46	21:46	10	nodes
LEAF_NODE	21:51	21:51	8	,
ARGUMENT	21:53	21:53	8	win
FIELD	21:53	21:53	9	win
LEAF_NODE	21:53	21:53	10	win
LEAF_NODE	21:56	21:56	8	)
LEAF_NODE	21:57	21:57	6	)
LEAF_NODE	21:58	21:58	4	;
EXPR_STATEMENT	22:1	22:18	3	update_screen ( wm ) ;
EXPR	22:1	22:1	4	update_screen ( wm )
FUNCTION_CALL	22:1	22:17	5	update_screen ( wm )
CALLEE	22:1	22:1	6	update_screen
LEAF_NODE	22:1	22:1	7	update_screen
LEAF_NODE	22:14	22:14	6	(
ARGUMENT	22:15	22:15	6	wm
FIELD	22:15	22:15	7	wm
LEAF_NODE	22:15	22:15	8	wm
LEAF_NODE	22:17	22:17	6	)
LEAF_NODE	22:18	22:18	4	;
LEAF_NODE	23:0	23:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	suggest_prev
LEAF_NODE	2:0	2:0	3	suggest_prev
PARAMETER_LIST	2:12	2:43	2	( GntBindable * bind , GList * null )
LEAF_NODE	2:12	2:12	3	(
PARAMETER_DECL	2:13	2:26	3	GntBindable * bind
TYPE	2:13	2:25	4	GntBindable *
TYPE_NAME	2:13	2:13	5	GntBindable
LEAF_NODE	2:13	2:13	6	GntBindable
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	bind
LEAF_NODE	2:26	2:26	5	bind
LEAF_NODE	2:30	2:30	3	,
PARAMETER_DECL	2:32	2:39	3	GList * null
TYPE	2:32	2:38	4	GList *
TYPE_NAME	2:32	2:32	5	GList
LEAF_NODE	2:32	2:32	6	GList
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	null
LEAF_NODE	2:39	2:39	5	null
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:34	3	GntEntry * entry ; entry = GNT_ENTRY ( bind ) ;
VAR_DECL	4:1	4:11	4	GntEntry * entry ; entry = GNT_ENTRY ( bind )
TYPE	4:1	4:10	5	GntEntry *
TYPE_NAME	4:1	4:1	6	GntEntry
LEAF_NODE	4:1	4:1	7	GntEntry
POINTER	4:10	4:10	6	*
LEAF_NODE	4:10	4:10	7	*
NAME	4:11	4:11	5	entry
LEAF_NODE	4:11	4:11	6	entry
LEAF_NODE	0:0	0:0	5	;
INIT	4:11	4:11	5	entry = GNT_ENTRY ( bind )
ASSIGN	4:11	4:19	6	entry = GNT_ENTRY ( bind )
LVAL	4:11	4:11	7	entry
NAME	4:11	4:11	8	entry
LEAF_NODE	4:11	4:11	9	entry
ASSIGN_OP	4:17	4:17	7	=
LEAF_NODE	4:17	4:17	8	=
RVAL	4:19	4:19	7	GNT_ENTRY ( bind )
FUNCTION_CALL	4:19	4:33	8	GNT_ENTRY ( bind )
CALLEE	4:19	4:19	9	GNT_ENTRY
LEAF_NODE	4:19	4:19	10	GNT_ENTRY
LEAF_NODE	4:28	4:28	9	(
ARGUMENT	4:29	4:29	9	bind
FIELD	4:29	4:29	10	bind
LEAF_NODE	4:29	4:29	11	bind
LEAF_NODE	4:33	4:33	9	)
LEAF_NODE	4:34	4:34	4	;
SELECTION	5:1	5:19	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	entry -> ddown
EXPR	5:5	5:5	5	entry -> ddown
FIELD	5:5	5:12	6	entry -> ddown
LEAF_NODE	5:5	5:5	7	entry
LEAF_NODE	5:10	5:10	7	->
LEAF_NODE	5:12	5:12	7	ddown
LEAF_NODE	5:17	5:17	4	)
STATEMENTS	5:19	8:1	4	
LEAF_NODE	5:19	5:19	5	{
STATEMENTS	6:2	7:2	5	
EXPR_STATEMENT	6:2	6:80	6	gnt_bindable_perform_action_named ( GNT_BINDABLE ( entry -> ddown ) , "move-up" , NULL ) ;
EXPR	6:2	6:2	7	gnt_bindable_perform_action_named ( GNT_BINDABLE ( entry -> ddown ) , "move-up" , NULL )
FUNCTION_CALL	6:2	6:79	8	gnt_bindable_perform_action_named ( GNT_BINDABLE ( entry -> ddown ) , "move-up" , NULL )
CALLEE	6:2	6:2	9	gnt_bindable_perform_action_named
LEAF_NODE	6:2	6:2	10	gnt_bindable_perform_action_named
LEAF_NODE	6:35	6:35	9	(
ARGUMENT	6:36	6:36	9	GNT_BINDABLE ( entry -> ddown )
FUNCTION_CALL	6:36	6:61	10	GNT_BINDABLE ( entry -> ddown )
CALLEE	6:36	6:36	11	GNT_BINDABLE
LEAF_NODE	6:36	6:36	12	GNT_BINDABLE
LEAF_NODE	6:48	6:48	11	(
ARGUMENT	6:49	6:49	11	entry -> ddown
FIELD	6:49	6:56	12	entry -> ddown
LEAF_NODE	6:49	6:49	13	entry
LEAF_NODE	6:54	6:54	13	->
LEAF_NODE	6:56	6:56	13	ddown
LEAF_NODE	6:61	6:61	11	)
LEAF_NODE	6:62	6:62	9	,
ARGUMENT	6:64	6:64	9	"move-up"
FIELD	6:64	6:64	10	"move-up"
LEAF_NODE	6:64	6:64	11	"move-up"
LEAF_NODE	6:73	6:73	9	,
ARGUMENT	6:75	6:75	9	NULL
FIELD	6:75	6:75	10	NULL
LEAF_NODE	6:75	6:75	11	NULL
LEAF_NODE	6:79	6:79	9	)
LEAF_NODE	6:80	6:80	7	;
JUMP_STATEMENT	7:2	7:13	6	return TRUE ;
KEYWORD	7:2	7:2	7	return
LEAF_NODE	7:2	7:2	8	return
DESTINATION	7:9	7:9	7	TRUE
EXPR	7:9	7:9	8	TRUE
FIELD	7:9	7:9	9	TRUE
LEAF_NODE	7:9	7:9	10	TRUE
LEAF_NODE	7:13	7:13	7	;
LEAF_NODE	8:1	8:1	5	}
JUMP_STATEMENT	9:1	9:13	3	return FALSE ;
KEYWORD	9:1	9:1	4	return
LEAF_NODE	9:1	9:1	5	return
DESTINATION	9:8	9:8	4	FALSE
EXPR	9:8	9:8	5	FALSE
FIELD	9:8	9:8	6	FALSE
LEAF_NODE	9:8	9:8	7	FALSE
LEAF_NODE	9:13	9:13	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	gntmedia_message_cb
LEAF_NODE	2:0	2:0	3	gntmedia_message_cb
PARAMETER_LIST	2:19	2:83	2	( FinchMedia * gntmedia , const char * msg , PurpleConversation * conv )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:32	3	FinchMedia * gntmedia
TYPE	2:20	2:31	4	FinchMedia *
TYPE_NAME	2:20	2:20	5	FinchMedia
LEAF_NODE	2:20	2:20	6	FinchMedia
POINTER	2:31	2:31	5	*
LEAF_NODE	2:31	2:31	6	*
NAME	2:32	2:32	4	gntmedia
LEAF_NODE	2:32	2:32	5	gntmedia
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:54	3	const char * msg
TYPE	2:42	2:53	4	const char *
TYPE_NAME	2:42	2:48	5	const char
LEAF_NODE	2:42	2:42	6	const
LEAF_NODE	2:48	2:48	6	char
POINTER	2:53	2:53	5	*
LEAF_NODE	2:53	2:53	6	*
NAME	2:54	2:54	4	msg
LEAF_NODE	2:54	2:54	5	msg
LEAF_NODE	2:57	2:57	3	,
PARAMETER_DECL	2:59	2:79	3	PurpleConversation * conv
TYPE	2:59	2:78	4	PurpleConversation *
TYPE_NAME	2:59	2:59	5	PurpleConversation
LEAF_NODE	2:59	2:59	6	PurpleConversation
POINTER	2:78	2:78	5	*
LEAF_NODE	2:78	2:78	6	*
NAME	2:79	2:79	4	conv
LEAF_NODE	2:79	2:79	5	conv
LEAF_NODE	2:83	2:83	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
SELECTION	4:1	4:64	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_IM
EXPR	4:5	4:43	5	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_IM
FUNCTION_CALL	4:5	4:38	6	purple_conversation_get_type ( conv )
CALLEE	4:5	4:5	7	purple_conversation_get_type
LEAF_NODE	4:5	4:5	8	purple_conversation_get_type
LEAF_NODE	4:33	4:33	7	(
ARGUMENT	4:34	4:34	7	conv
FIELD	4:34	4:34	8	conv
LEAF_NODE	4:34	4:34	9	conv
LEAF_NODE	4:38	4:38	7	)
EQ_OPERATOR	4:40	4:40	6	==
LEAF_NODE	4:40	4:40	7	==
FIELD	4:43	4:43	6	PURPLE_CONV_TYPE_IM
LEAF_NODE	4:43	4:43	7	PURPLE_CONV_TYPE_IM
LEAF_NODE	4:62	4:62	4	)
STATEMENTS	4:64	6:1	4	
LEAF_NODE	4:64	4:64	5	{
STATEMENTS	5:2	5:2	5	
EXPR_STATEMENT	5:2	5:90	6	purple_conv_im_write ( PURPLE_CONV_IM ( conv ) , NULL , msg , PURPLE_MESSAGE_SYSTEM , time ( NULL ) ) ;
EXPR	5:2	5:2	7	purple_conv_im_write ( PURPLE_CONV_IM ( conv ) , NULL , msg , PURPLE_MESSAGE_SYSTEM , time ( NULL ) )
FUNCTION_CALL	5:2	5:89	8	purple_conv_im_write ( PURPLE_CONV_IM ( conv ) , NULL , msg , PURPLE_MESSAGE_SYSTEM , time ( NULL ) )
CALLEE	5:2	5:2	9	purple_conv_im_write
LEAF_NODE	5:2	5:2	10	purple_conv_im_write
LEAF_NODE	5:22	5:22	9	(
ARGUMENT	5:23	5:23	9	PURPLE_CONV_IM ( conv )
FUNCTION_CALL	5:23	5:42	10	PURPLE_CONV_IM ( conv )
CALLEE	5:23	5:23	11	PURPLE_CONV_IM
LEAF_NODE	5:23	5:23	12	PURPLE_CONV_IM
LEAF_NODE	5:37	5:37	11	(
ARGUMENT	5:38	5:38	11	conv
FIELD	5:38	5:38	12	conv
LEAF_NODE	5:38	5:38	13	conv
LEAF_NODE	5:42	5:42	11	)
LEAF_NODE	5:43	5:43	9	,
ARGUMENT	5:45	5:45	9	NULL
FIELD	5:45	5:45	10	NULL
LEAF_NODE	5:45	5:45	11	NULL
LEAF_NODE	5:49	5:49	9	,
ARGUMENT	5:51	5:51	9	msg
FIELD	5:51	5:51	10	msg
LEAF_NODE	5:51	5:51	11	msg
LEAF_NODE	5:54	5:54	9	,
ARGUMENT	5:56	5:56	9	PURPLE_MESSAGE_SYSTEM
FIELD	5:56	5:56	10	PURPLE_MESSAGE_SYSTEM
LEAF_NODE	5:56	5:56	11	PURPLE_MESSAGE_SYSTEM
LEAF_NODE	5:77	5:77	9	,
ARGUMENT	5:79	5:79	9	time ( NULL )
FUNCTION_CALL	5:79	5:88	10	time ( NULL )
CALLEE	5:79	5:79	11	time
LEAF_NODE	5:79	5:79	12	time
LEAF_NODE	5:83	5:83	11	(
ARGUMENT	5:84	5:84	11	NULL
FIELD	5:84	5:84	12	NULL
LEAF_NODE	5:84	5:84	13	NULL
LEAF_NODE	5:88	5:88	11	)
LEAF_NODE	5:89	5:89	9	)
LEAF_NODE	5:90	5:90	7	;
LEAF_NODE	6:1	6:1	5	}
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	conv_created
LEAF_NODE	2:0	2:0	3	conv_created
PARAMETER_LIST	2:12	2:37	2	( PurpleConversation * conv )
LEAF_NODE	2:12	2:12	3	(
PARAMETER_DECL	2:13	2:33	3	PurpleConversation * conv
TYPE	2:13	2:32	4	PurpleConversation *
TYPE_NAME	2:13	2:13	5	PurpleConversation
LEAF_NODE	2:13	2:13	6	PurpleConversation
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	conv
LEAF_NODE	2:33	2:33	5	conv
LEAF_NODE	2:37	2:37	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
EXPR_STATEMENT	4:1	5:49	3	purple_conversation_set_data ( conv , "unity-message-count" , GINT_TO_POINTER ( 0 ) ) ;
EXPR	4:1	4:1	4	purple_conversation_set_data ( conv , "unity-message-count" , GINT_TO_POINTER ( 0 ) )
FUNCTION_CALL	4:1	5:48	5	purple_conversation_set_data ( conv , "unity-message-count" , GINT_TO_POINTER ( 0 ) )
CALLEE	4:1	4:1	6	purple_conversation_set_data
LEAF_NODE	4:1	4:1	7	purple_conversation_set_data
LEAF_NODE	4:29	4:29	6	(
ARGUMENT	4:30	4:30	6	conv
FIELD	4:30	4:30	7	conv
LEAF_NODE	4:30	4:30	8	conv
LEAF_NODE	4:34	4:34	6	,
ARGUMENT	4:36	4:36	6	"unity-message-count"
FIELD	4:36	4:36	7	"unity-message-count"
LEAF_NODE	4:36	4:36	8	"unity-message-count"
LEAF_NODE	4:57	4:57	6	,
ARGUMENT	5:30	5:30	6	GINT_TO_POINTER ( 0 )
FUNCTION_CALL	5:30	5:47	7	GINT_TO_POINTER ( 0 )
CALLEE	5:30	5:30	8	GINT_TO_POINTER
LEAF_NODE	5:30	5:30	9	GINT_TO_POINTER
LEAF_NODE	5:45	5:45	8	(
ARGUMENT	5:46	5:46	8	0
FIELD	5:46	5:46	9	0
LEAF_NODE	5:46	5:46	10	0
LEAF_NODE	5:47	5:47	8	)
LEAF_NODE	5:48	5:48	6	)
LEAF_NODE	5:49	5:49	4	;
EXPR_STATEMENT	6:1	6:21	3	attach_signals ( conv ) ;
EXPR	6:1	6:1	4	attach_signals ( conv )
FUNCTION_CALL	6:1	6:20	5	attach_signals ( conv )
CALLEE	6:1	6:1	6	attach_signals
LEAF_NODE	6:1	6:1	7	attach_signals
LEAF_NODE	6:15	6:15	6	(
ARGUMENT	6:16	6:16	6	conv
FIELD	6:16	6:16	7	conv
LEAF_NODE	6:16	6:16	8	conv
LEAF_NODE	6:20	6:20	6	)
LEAF_NODE	6:21	6:21	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	14:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	activate_status_primitive_cb
LEAF_NODE	2:0	2:0	3	activate_status_primitive_cb
PARAMETER_LIST	2:28	2:70	2	( GtkMenuItem * menuitem , gpointer user_data )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:42	3	GtkMenuItem * menuitem
TYPE	2:29	2:41	4	GtkMenuItem *
TYPE_NAME	2:29	2:29	5	GtkMenuItem
LEAF_NODE	2:29	2:29	6	GtkMenuItem
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	menuitem
LEAF_NODE	2:42	2:42	5	menuitem
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:61	3	gpointer user_data
TYPE	2:52	2:52	4	gpointer
TYPE_NAME	2:52	2:52	5	gpointer
LEAF_NODE	2:52	2:52	6	gpointer
NAME	2:61	2:61	4	user_data
LEAF_NODE	2:61	2:61	5	user_data
LEAF_NODE	2:70	2:70	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	13:1	2	
SIMPLE_DECL	4:1	4:32	3	PurpleStatusPrimitive primitive ;
VAR_DECL	4:1	4:23	4	PurpleStatusPrimitive primitive
TYPE	4:1	4:1	5	PurpleStatusPrimitive
TYPE_NAME	4:1	4:1	6	PurpleStatusPrimitive
LEAF_NODE	4:1	4:1	7	PurpleStatusPrimitive
NAME	4:23	4:23	5	primitive
LEAF_NODE	4:23	4:23	6	primitive
LEAF_NODE	4:32	4:32	4	;
SIMPLE_DECL	5:1	5:32	3	PurpleSavedStatus * saved_status ;
VAR_DECL	5:1	5:20	4	PurpleSavedStatus * saved_status
TYPE	5:1	5:19	5	PurpleSavedStatus *
TYPE_NAME	5:1	5:1	6	PurpleSavedStatus
LEAF_NODE	5:1	5:1	7	PurpleSavedStatus
POINTER	5:19	5:19	6	*
LEAF_NODE	5:19	5:19	7	*
NAME	5:20	5:20	5	saved_status
LEAF_NODE	5:20	5:20	6	saved_status
LEAF_NODE	5:32	5:32	4	;
EXPR_STATEMENT	6:1	6:39	3	primitive = GPOINTER_TO_INT ( user_data ) ;
EXPR	6:1	6:1	4	primitive = GPOINTER_TO_INT ( user_data )
ASSIGN	6:1	6:13	5	primitive = GPOINTER_TO_INT ( user_data )
LVAL	6:1	6:1	6	primitive
FIELD	6:1	6:1	7	primitive
LEAF_NODE	6:1	6:1	8	primitive
ASSIGN_OP	6:11	6:11	6	=
LEAF_NODE	6:11	6:11	7	=
RVAL	6:13	6:13	6	GPOINTER_TO_INT ( user_data )
FUNCTION_CALL	6:13	6:38	7	GPOINTER_TO_INT ( user_data )
CALLEE	6:13	6:13	8	GPOINTER_TO_INT
LEAF_NODE	6:13	6:13	9	GPOINTER_TO_INT
LEAF_NODE	6:28	6:28	8	(
ARGUMENT	6:29	6:29	8	user_data
FIELD	6:29	6:29	9	user_data
LEAF_NODE	6:29	6:29	10	user_data
LEAF_NODE	6:38	6:38	8	)
LEAF_NODE	6:39	6:39	4	;
EXPR_STATEMENT	8:1	8:86	3	saved_status = purple_savedstatus_find_transient_by_type_and_message ( primitive , NULL ) ;
EXPR	8:1	8:1	4	saved_status = purple_savedstatus_find_transient_by_type_and_message ( primitive , NULL )
ASSIGN	8:1	8:16	5	saved_status = purple_savedstatus_find_transient_by_type_and_message ( primitive , NULL )
LVAL	8:1	8:1	6	saved_status
FIELD	8:1	8:1	7	saved_status
LEAF_NODE	8:1	8:1	8	saved_status
ASSIGN_OP	8:14	8:14	6	=
LEAF_NODE	8:14	8:14	7	=
RVAL	8:16	8:16	6	purple_savedstatus_find_transient_by_type_and_message ( primitive , NULL )
FUNCTION_CALL	8:16	8:85	7	purple_savedstatus_find_transient_by_type_and_message ( primitive , NULL )
CALLEE	8:16	8:16	8	purple_savedstatus_find_transient_by_type_and_message
LEAF_NODE	8:16	8:16	9	purple_savedstatus_find_transient_by_type_and_message
LEAF_NODE	8:69	8:69	8	(
ARGUMENT	8:70	8:70	8	primitive
FIELD	8:70	8:70	9	primitive
LEAF_NODE	8:70	8:70	10	primitive
LEAF_NODE	8:79	8:79	8	,
ARGUMENT	8:81	8:81	8	NULL
FIELD	8:81	8:81	9	NULL
LEAF_NODE	8:81	8:81	10	NULL
LEAF_NODE	8:85	8:85	8	)
LEAF_NODE	8:86	8:86	4	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	saved_status == NULL
EXPR	10:5	10:21	5	saved_status == NULL
FIELD	10:5	10:5	6	saved_status
LEAF_NODE	10:5	10:5	7	saved_status
EQ_OPERATOR	10:18	10:18	6	==
LEAF_NODE	10:18	10:18	7	==
FIELD	10:21	10:21	6	NULL
LEAF_NODE	10:21	10:21	7	NULL
LEAF_NODE	10:25	10:25	4	)
STATEMENTS	11:2	11:2	4	
EXPR_STATEMENT	11:2	11:57	5	saved_status = create_transient_status ( primitive , NULL ) ;
EXPR	11:2	11:2	6	saved_status = create_transient_status ( primitive , NULL )
ASSIGN	11:2	11:17	7	saved_status = create_transient_status ( primitive , NULL )
LVAL	11:2	11:2	8	saved_status
FIELD	11:2	11:2	9	saved_status
LEAF_NODE	11:2	11:2	10	saved_status
ASSIGN_OP	11:15	11:15	8	=
LEAF_NODE	11:15	11:15	9	=
RVAL	11:17	11:17	8	create_transient_status ( primitive , NULL )
FUNCTION_CALL	11:17	11:56	9	create_transient_status ( primitive , NULL )
CALLEE	11:17	11:17	10	create_transient_status
LEAF_NODE	11:17	11:17	11	create_transient_status
LEAF_NODE	11:40	11:40	10	(
ARGUMENT	11:41	11:41	10	primitive
FIELD	11:41	11:41	11	primitive
LEAF_NODE	11:41	11:41	12	primitive
LEAF_NODE	11:50	11:50	10	,
ARGUMENT	11:52	11:52	10	NULL
FIELD	11:52	11:52	11	NULL
LEAF_NODE	11:52	11:52	12	NULL
LEAF_NODE	11:56	11:56	10	)
LEAF_NODE	11:57	11:57	6	;
EXPR_STATEMENT	13:1	13:42	3	purple_savedstatus_activate ( saved_status ) ;
EXPR	13:1	13:1	4	purple_savedstatus_activate ( saved_status )
FUNCTION_CALL	13:1	13:41	5	purple_savedstatus_activate ( saved_status )
CALLEE	13:1	13:1	6	purple_savedstatus_activate
LEAF_NODE	13:1	13:1	7	purple_savedstatus_activate
LEAF_NODE	13:28	13:28	6	(
ARGUMENT	13:29	13:29	6	saved_status
FIELD	13:29	13:29	7	saved_status
LEAF_NODE	13:29	13:29	8	saved_status
LEAF_NODE	13:41	13:41	6	)
LEAF_NODE	13:42	13:42	4	;
LEAF_NODE	14:0	14:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	append_escaped_string
LEAF_NODE	2:0	2:0	3	append_escaped_string
PARAMETER_LIST	2:21	2:68	2	( PurpleCipherContext * context , const gchar * str )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:43	3	PurpleCipherContext * context
TYPE	2:22	2:42	4	PurpleCipherContext *
TYPE_NAME	2:22	2:22	5	PurpleCipherContext
LEAF_NODE	2:22	2:22	6	PurpleCipherContext
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	context
LEAF_NODE	2:43	2:43	5	context
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:65	3	const gchar * str
TYPE	2:52	2:64	4	const gchar *
TYPE_NAME	2:52	2:58	5	const gchar
LEAF_NODE	2:52	2:52	6	const
LEAF_NODE	2:58	2:58	6	gchar
POINTER	2:64	2:64	5	*
LEAF_NODE	2:64	2:64	6	*
NAME	2:65	2:65	4	str
LEAF_NODE	2:65	2:65	5	str
LEAF_NODE	2:68	2:68	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SELECTION	4:1	4:18	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	str && * str
EXPR	4:5	4:5	5	str && * str
AND	4:5	4:12	6	str && * str
EXPR	4:5	4:5	7	str
FIELD	4:5	4:5	8	str
LEAF_NODE	4:5	4:5	9	str
LEAF_NODE	4:9	4:9	7	&&
EXPR	4:12	4:12	7	* str
UNARY_EXPR	4:12	4:13	8	* str
UNARY_OPERATOR	4:12	4:12	9	*
LEAF_NODE	4:12	4:12	10	*
FIELD	4:13	4:13	9	str
LEAF_NODE	4:13	4:13	10	str
LEAF_NODE	4:16	4:16	4	)
STATEMENTS	4:18	8:1	4	
LEAF_NODE	4:18	4:18	5	{
STATEMENTS	5:2	7:2	5	
SIMPLE_DECL	5:2	5:43	6	char * tmp ; tmp = g_markup_escape_text ( str , - 1 ) ;
VAR_DECL	5:2	5:8	7	char * tmp ; tmp = g_markup_escape_text ( str , - 1 )
TYPE	5:2	5:7	8	char *
TYPE_NAME	5:2	5:2	9	char
LEAF_NODE	5:2	5:2	10	char
POINTER	5:7	5:7	9	*
LEAF_NODE	5:7	5:7	10	*
NAME	5:8	5:8	8	tmp
LEAF_NODE	5:8	5:8	9	tmp
LEAF_NODE	0:0	0:0	8	;
INIT	5:8	5:8	8	tmp = g_markup_escape_text ( str , - 1 )
ASSIGN	5:8	5:14	9	tmp = g_markup_escape_text ( str , - 1 )
LVAL	5:8	5:8	10	tmp
NAME	5:8	5:8	11	tmp
LEAF_NODE	5:8	5:8	12	tmp
ASSIGN_OP	5:12	5:12	10	=
LEAF_NODE	5:12	5:12	11	=
RVAL	5:14	5:14	10	g_markup_escape_text ( str , - 1 )
FUNCTION_CALL	5:14	5:42	11	g_markup_escape_text ( str , - 1 )
CALLEE	5:14	5:14	12	g_markup_escape_text
LEAF_NODE	5:14	5:14	13	g_markup_escape_text
LEAF_NODE	5:34	5:34	12	(
ARGUMENT	5:35	5:35	12	str
FIELD	5:35	5:35	13	str
LEAF_NODE	5:35	5:35	14	str
LEAF_NODE	5:38	5:38	12	,
ARGUMENT	5:40	5:40	12	- 1
UNARY_EXPR	5:40	5:41	13	- 1
UNARY_OPERATOR	5:40	5:40	14	-
LEAF_NODE	5:40	5:40	15	-
FIELD	5:41	5:41	14	1
LEAF_NODE	5:41	5:41	15	1
LEAF_NODE	5:42	5:42	12	)
LEAF_NODE	5:43	5:43	7	;
EXPR_STATEMENT	6:2	6:73	6	purple_cipher_context_append ( context , ( const guchar * ) tmp , strlen ( tmp ) ) ;
EXPR	6:2	6:2	7	purple_cipher_context_append ( context , ( const guchar * ) tmp , strlen ( tmp ) )
FUNCTION_CALL	6:2	6:72	8	purple_cipher_context_append ( context , ( const guchar * ) tmp , strlen ( tmp ) )
CALLEE	6:2	6:2	9	purple_cipher_context_append
LEAF_NODE	6:2	6:2	10	purple_cipher_context_append
LEAF_NODE	6:30	6:30	9	(
ARGUMENT	6:31	6:31	9	context
FIELD	6:31	6:31	10	context
LEAF_NODE	6:31	6:31	11	context
LEAF_NODE	6:38	6:38	9	,
ARGUMENT	6:40	6:56	9	( const guchar * ) tmp
LEAF_NODE	6:40	6:40	10	(
TYPE_NAME	6:41	6:47	10	const guchar
LEAF_NODE	6:41	6:41	11	const
LEAF_NODE	6:47	6:47	11	guchar
LEAF_NODE	6:54	6:54	10	*
LEAF_NODE	6:55	6:55	10	)
FIELD	6:56	6:56	10	tmp
LEAF_NODE	6:56	6:56	11	tmp
LEAF_NODE	6:59	6:59	9	,
ARGUMENT	6:61	6:61	9	strlen ( tmp )
FUNCTION_CALL	6:61	6:71	10	strlen ( tmp )
CALLEE	6:61	6:61	11	strlen
LEAF_NODE	6:61	6:61	12	strlen
LEAF_NODE	6:67	6:67	11	(
ARGUMENT	6:68	6:68	11	tmp
FIELD	6:68	6:68	12	tmp
LEAF_NODE	6:68	6:68	13	tmp
LEAF_NODE	6:71	6:71	11	)
LEAF_NODE	6:72	6:72	9	)
LEAF_NODE	6:73	6:73	7	;
EXPR_STATEMENT	7:2	7:13	6	g_free ( tmp ) ;
EXPR	7:2	7:2	7	g_free ( tmp )
FUNCTION_CALL	7:2	7:12	8	g_free ( tmp )
CALLEE	7:2	7:2	9	g_free
LEAF_NODE	7:2	7:2	10	g_free
LEAF_NODE	7:8	7:8	9	(
ARGUMENT	7:9	7:9	9	tmp
FIELD	7:9	7:9	10	tmp
LEAF_NODE	7:9	7:9	11	tmp
LEAF_NODE	7:12	7:12	9	)
LEAF_NODE	7:13	7:13	7	;
LEAF_NODE	8:1	8:1	5	}
EXPR_STATEMENT	9:1	9:62	3	purple_cipher_context_append ( context , ( const guchar * ) "<" , 1 ) ;
EXPR	9:1	9:1	4	purple_cipher_context_append ( context , ( const guchar * ) "<" , 1 )
FUNCTION_CALL	9:1	9:61	5	purple_cipher_context_append ( context , ( const guchar * ) "<" , 1 )
CALLEE	9:1	9:1	6	purple_cipher_context_append
LEAF_NODE	9:1	9:1	7	purple_cipher_context_append
LEAF_NODE	9:29	9:29	6	(
ARGUMENT	9:30	9:30	6	context
FIELD	9:30	9:30	7	context
LEAF_NODE	9:30	9:30	8	context
LEAF_NODE	9:37	9:37	6	,
ARGUMENT	9:39	9:55	6	( const guchar * ) "<"
LEAF_NODE	9:39	9:39	7	(
TYPE_NAME	9:40	9:46	7	const guchar
LEAF_NODE	9:40	9:40	8	const
LEAF_NODE	9:46	9:46	8	guchar
LEAF_NODE	9:53	9:53	7	*
LEAF_NODE	9:54	9:54	7	)
FIELD	9:55	9:55	7	"<"
LEAF_NODE	9:55	9:55	8	"<"
LEAF_NODE	9:58	9:58	6	,
ARGUMENT	9:60	9:60	6	1
FIELD	9:60	9:60	7	1
LEAF_NODE	9:60	9:60	8	1
LEAF_NODE	9:61	9:61	6	)
LEAF_NODE	9:62	9:62	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	6:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	purple_roomlist_show_with_account
LEAF_NODE	2:5	2:5	3	purple_roomlist_show_with_account
PARAMETER_LIST	2:38	2:61	2	( PurpleAccount * account )
LEAF_NODE	2:38	2:38	3	(
PARAMETER_DECL	2:39	2:54	3	PurpleAccount * account
TYPE	2:39	2:53	4	PurpleAccount *
TYPE_NAME	2:39	2:39	5	PurpleAccount
LEAF_NODE	2:39	2:39	6	PurpleAccount
POINTER	2:53	2:53	5	*
LEAF_NODE	2:53	2:53	6	*
NAME	2:54	2:54	4	account
LEAF_NODE	2:54	2:54	5	account
LEAF_NODE	2:61	2:61	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	ops && ops -> show_with_account
EXPR	4:5	4:5	5	ops && ops -> show_with_account
AND	4:5	4:12	6	ops && ops -> show_with_account
EXPR	4:5	4:5	7	ops
FIELD	4:5	4:5	8	ops
LEAF_NODE	4:5	4:5	9	ops
LEAF_NODE	4:9	4:9	7	&&
EXPR	4:12	4:12	7	ops -> show_with_account
FIELD	4:12	4:17	8	ops -> show_with_account
LEAF_NODE	4:12	4:12	9	ops
LEAF_NODE	4:15	4:15	9	->
LEAF_NODE	4:17	4:17	9	show_with_account
LEAF_NODE	4:34	4:34	4	)
STATEMENTS	5:2	5:2	4	
EXPR_STATEMENT	5:2	5:33	5	ops -> show_with_account ( account ) ;
EXPR	5:2	5:2	6	ops -> show_with_account ( account )
FUNCTION_CALL	5:2	5:32	7	ops -> show_with_account ( account )
CALLEE	5:2	5:7	8	ops -> show_with_account
LEAF_NODE	5:2	5:2	9	ops
LEAF_NODE	5:5	5:5	9	->
LEAF_NODE	5:7	5:7	9	show_with_account
LEAF_NODE	5:24	5:24	8	(
ARGUMENT	5:25	5:25	8	account
FIELD	5:25	5:25	9	account
LEAF_NODE	5:25	5:25	10	account
LEAF_NODE	5:32	5:32	8	)
LEAF_NODE	5:33	5:33	6	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:9	2	MonoImage *
TYPE_NAME	2:0	2:0	3	MonoImage
LEAF_NODE	2:0	2:0	4	MonoImage
LEAF_NODE	2:9	2:9	3	*
FUNCTION_NAME	2:11	2:11	2	ml_get_api_image
LEAF_NODE	2:11	2:11	3	ml_get_api_image
PARAMETER_LIST	2:27	2:28	2	( )
LEAF_NODE	2:27	2:27	3	(
LEAF_NODE	2:28	2:28	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:18	3	return _api_image ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	_api_image
EXPR	4:8	4:8	5	_api_image
FIELD	4:8	4:8	6	_api_image
LEAF_NODE	4:8	4:8	7	_api_image
LEAF_NODE	4:18	4:18	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	11:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	purple_request_close_info
LEAF_NODE	2:0	2:0	3	purple_request_close_info
PARAMETER_LIST	2:25	2:49	2	( PurpleRequestInfo * info )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:45	3	PurpleRequestInfo * info
TYPE	2:26	2:44	4	PurpleRequestInfo *
TYPE_NAME	2:26	2:26	5	PurpleRequestInfo
LEAF_NODE	2:26	2:26	6	PurpleRequestInfo
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	info
LEAF_NODE	2:45	2:45	5	info
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	10:1	2	
SIMPLE_DECL	4:1	4:24	3	PurpleRequestUiOps * ops ;
VAR_DECL	4:1	4:21	4	PurpleRequestUiOps * ops
TYPE	4:1	4:20	5	PurpleRequestUiOps *
TYPE_NAME	4:1	4:1	6	PurpleRequestUiOps
LEAF_NODE	4:1	4:1	7	PurpleRequestUiOps
POINTER	4:20	4:20	6	*
LEAF_NODE	4:20	4:20	7	*
NAME	4:21	4:21	5	ops
LEAF_NODE	4:21	4:21	6	ops
LEAF_NODE	4:24	4:24	4	;
EXPR_STATEMENT	5:1	5:34	3	ops = purple_request_get_ui_ops ( ) ;
EXPR	5:1	5:1	4	ops = purple_request_get_ui_ops ( )
ASSIGN	5:1	5:7	5	ops = purple_request_get_ui_ops ( )
LVAL	5:1	5:1	6	ops
FIELD	5:1	5:1	7	ops
LEAF_NODE	5:1	5:1	8	ops
ASSIGN_OP	5:5	5:5	6	=
LEAF_NODE	5:5	5:5	7	=
RVAL	5:7	5:7	6	purple_request_get_ui_ops ( )
FUNCTION_CALL	5:7	5:33	7	purple_request_get_ui_ops ( )
CALLEE	5:7	5:7	8	purple_request_get_ui_ops
LEAF_NODE	5:7	5:7	9	purple_request_get_ui_ops
LEAF_NODE	5:32	5:32	8	(
LEAF_NODE	5:33	5:33	8	)
LEAF_NODE	5:34	5:34	4	;
EXPR_STATEMENT	6:1	6:49	3	purple_notify_close_with_handle ( info -> ui_handle ) ;
EXPR	6:1	6:1	4	purple_notify_close_with_handle ( info -> ui_handle )
FUNCTION_CALL	6:1	6:48	5	purple_notify_close_with_handle ( info -> ui_handle )
CALLEE	6:1	6:1	6	purple_notify_close_with_handle
LEAF_NODE	6:1	6:1	7	purple_notify_close_with_handle
LEAF_NODE	6:32	6:32	6	(
ARGUMENT	6:33	6:33	6	info -> ui_handle
FIELD	6:33	6:39	7	info -> ui_handle
LEAF_NODE	6:33	6:33	8	info
LEAF_NODE	6:37	6:37	8	->
LEAF_NODE	6:39	6:39	8	ui_handle
LEAF_NODE	6:48	6:48	6	)
LEAF_NODE	6:49	6:49	4	;
EXPR_STATEMENT	7:1	7:50	3	purple_request_close_with_handle ( info -> ui_handle ) ;
EXPR	7:1	7:1	4	purple_request_close_with_handle ( info -> ui_handle )
FUNCTION_CALL	7:1	7:49	5	purple_request_close_with_handle ( info -> ui_handle )
CALLEE	7:1	7:1	6	purple_request_close_with_handle
LEAF_NODE	7:1	7:1	7	purple_request_close_with_handle
LEAF_NODE	7:33	7:33	6	(
ARGUMENT	7:34	7:34	6	info -> ui_handle
FIELD	7:34	7:40	7	info -> ui_handle
LEAF_NODE	7:34	7:34	8	info
LEAF_NODE	7:38	7:38	8	->
LEAF_NODE	7:40	7:40	8	ui_handle
LEAF_NODE	7:49	7:49	6	)
LEAF_NODE	7:50	7:50	4	;
SELECTION	8:1	9:2	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	ops != NULL && ops -> close_request != NULL
EXPR	8:5	8:5	5	ops != NULL && ops -> close_request != NULL
AND	8:5	8:20	6	ops != NULL && ops -> close_request != NULL
EXPR	8:5	8:12	7	ops != NULL
FIELD	8:5	8:5	8	ops
LEAF_NODE	8:5	8:5	9	ops
EQ_OPERATOR	8:9	8:9	8	!=
LEAF_NODE	8:9	8:9	9	!=
FIELD	8:12	8:12	8	NULL
LEAF_NODE	8:12	8:12	9	NULL
LEAF_NODE	8:17	8:17	7	&&
EXPR	8:20	8:42	7	ops -> close_request != NULL
FIELD	8:20	8:25	8	ops -> close_request
LEAF_NODE	8:20	8:20	9	ops
LEAF_NODE	8:23	8:23	9	->
LEAF_NODE	8:25	8:25	9	close_request
EQ_OPERATOR	8:39	8:39	8	!=
LEAF_NODE	8:39	8:39	9	!=
FIELD	8:42	8:42	8	NULL
LEAF_NODE	8:42	8:42	9	NULL
LEAF_NODE	8:46	8:46	4	)
STATEMENTS	9:2	9:2	4	
EXPR_STATEMENT	9:2	9:49	5	ops -> close_request ( info -> type , info -> ui_handle ) ;
EXPR	9:2	9:2	6	ops -> close_request ( info -> type , info -> ui_handle )
FUNCTION_CALL	9:2	9:48	7	ops -> close_request ( info -> type , info -> ui_handle )
CALLEE	9:2	9:7	8	ops -> close_request
LEAF_NODE	9:2	9:2	9	ops
LEAF_NODE	9:5	9:5	9	->
LEAF_NODE	9:7	9:7	9	close_request
LEAF_NODE	9:20	9:20	8	(
ARGUMENT	9:21	9:21	8	info -> type
FIELD	9:21	9:27	9	info -> type
LEAF_NODE	9:21	9:21	10	info
LEAF_NODE	9:25	9:25	10	->
LEAF_NODE	9:27	9:27	10	type
LEAF_NODE	9:31	9:31	8	,
ARGUMENT	9:33	9:33	8	info -> ui_handle
FIELD	9:33	9:39	9	info -> ui_handle
LEAF_NODE	9:33	9:33	10	info
LEAF_NODE	9:37	9:37	10	->
LEAF_NODE	9:39	9:39	10	ui_handle
LEAF_NODE	9:48	9:48	8	)
LEAF_NODE	9:49	9:49	6	;
EXPR_STATEMENT	10:1	10:13	3	g_free ( info ) ;
EXPR	10:1	10:1	4	g_free ( info )
FUNCTION_CALL	10:1	10:12	5	g_free ( info )
CALLEE	10:1	10:1	6	g_free
LEAF_NODE	10:1	10:1	7	g_free
LEAF_NODE	10:7	10:7	6	(
ARGUMENT	10:8	10:8	6	info
FIELD	10:8	10:8	7	info
LEAF_NODE	10:8	10:8	8	info
LEAF_NODE	10:12	10:12	6	)
LEAF_NODE	10:13	10:13	4	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	12:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	oscar_auth_recvrequest
LEAF_NODE	2:0	2:0	3	oscar_auth_recvrequest
PARAMETER_LIST	2:22	2:84	2	( PurpleConnection * gc , gchar * name , gchar * nick , gchar * reason )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:41	3	PurpleConnection * gc
TYPE	2:23	2:40	4	PurpleConnection *
TYPE_NAME	2:23	2:23	5	PurpleConnection
LEAF_NODE	2:23	2:23	6	PurpleConnection
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	gc
LEAF_NODE	2:41	2:41	5	gc
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:52	3	gchar * name
TYPE	2:45	2:51	4	gchar *
TYPE_NAME	2:45	2:45	5	gchar
LEAF_NODE	2:45	2:45	6	gchar
POINTER	2:51	2:51	5	*
LEAF_NODE	2:51	2:51	6	*
NAME	2:52	2:52	4	name
LEAF_NODE	2:52	2:52	5	name
LEAF_NODE	2:56	2:56	3	,
PARAMETER_DECL	2:58	2:65	3	gchar * nick
TYPE	2:58	2:64	4	gchar *
TYPE_NAME	2:58	2:58	5	gchar
LEAF_NODE	2:58	2:58	6	gchar
POINTER	2:64	2:64	5	*
LEAF_NODE	2:64	2:64	6	*
NAME	2:65	2:65	4	nick
LEAF_NODE	2:65	2:65	5	nick
LEAF_NODE	2:69	2:69	3	,
PARAMETER_DECL	2:71	2:78	3	gchar * reason
TYPE	2:71	2:77	4	gchar *
TYPE_NAME	2:71	2:71	5	gchar
LEAF_NODE	2:71	2:71	6	gchar
POINTER	2:77	2:77	5	*
LEAF_NODE	2:77	2:77	6	*
NAME	2:78	2:78	4	reason
LEAF_NODE	2:78	2:78	5	reason
LEAF_NODE	2:84	2:84	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:59	3	PurpleAccount * account ; account = purple_connection_get_account ( gc ) ;
VAR_DECL	4:1	4:16	4	PurpleAccount * account ; account = purple_connection_get_account ( gc )
TYPE	4:1	4:14	5	PurpleAccount *
TYPE_NAME	4:1	4:1	6	PurpleAccount
LEAF_NODE	4:1	4:1	7	PurpleAccount
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:16	4:16	5	account
LEAF_NODE	4:16	4:16	6	account
LEAF_NODE	0:0	0:0	5	;
INIT	4:16	4:16	5	account = purple_connection_get_account ( gc )
ASSIGN	4:16	4:26	6	account = purple_connection_get_account ( gc )
LVAL	4:16	4:16	7	account
NAME	4:16	4:16	8	account
LEAF_NODE	4:16	4:16	9	account
ASSIGN_OP	4:24	4:24	7	=
LEAF_NODE	4:24	4:24	8	=
RVAL	4:26	4:26	7	purple_connection_get_account ( gc )
FUNCTION_CALL	4:26	4:58	8	purple_connection_get_account ( gc )
CALLEE	4:26	4:26	9	purple_connection_get_account
LEAF_NODE	4:26	4:26	10	purple_connection_get_account
LEAF_NODE	4:55	4:55	9	(
ARGUMENT	4:56	4:56	9	gc
FIELD	4:56	4:56	10	gc
LEAF_NODE	4:56	4:56	11	gc
LEAF_NODE	4:58	4:58	9	)
LEAF_NODE	4:59	4:59	4	;
LEAF_NODE	5:1	5:1	3	struct
LEAF_NODE	5:8	5:8	3	name_data
LEAF_NODE	5:18	5:18	3	*
LEAF_NODE	5:19	5:19	3	data
LEAF_NODE	5:24	5:24	3	=
LEAF_NODE	5:26	5:26	3	g_new
LEAF_NODE	5:31	5:31	3	(
LEAF_NODE	5:32	5:32	3	struct
LEAF_NODE	5:39	5:39	3	name_data
LEAF_NODE	5:48	5:48	3	,
LEAF_NODE	5:50	5:50	3	1
LEAF_NODE	5:51	5:51	3	)
LEAF_NODE	5:52	5:52	3	;
EXPR_STATEMENT	6:1	6:14	3	data -> gc = gc ;
EXPR	6:1	6:1	4	data -> gc = gc
ASSIGN	6:1	6:12	5	data -> gc = gc
LVAL	6:1	6:1	6	data -> gc
FIELD	6:1	6:7	7	data -> gc
LEAF_NODE	6:1	6:1	8	data
LEAF_NODE	6:5	6:5	8	->
LEAF_NODE	6:7	6:7	8	gc
ASSIGN_OP	6:10	6:10	6	=
LEAF_NODE	6:10	6:10	7	=
RVAL	6:12	6:12	6	gc
FIELD	6:12	6:12	7	gc
LEAF_NODE	6:12	6:12	8	gc
LEAF_NODE	6:14	6:14	4	;
EXPR_STATEMENT	7:1	7:18	3	data -> name = name ;
EXPR	7:1	7:1	4	data -> name = name
ASSIGN	7:1	7:14	5	data -> name = name
LVAL	7:1	7:1	6	data -> name
FIELD	7:1	7:7	7	data -> name
LEAF_NODE	7:1	7:1	8	data
LEAF_NODE	7:5	7:5	8	->
LEAF_NODE	7:7	7:7	8	name
ASSIGN_OP	7:12	7:12	6	=
LEAF_NODE	7:12	7:12	7	=
RVAL	7:14	7:14	6	name
FIELD	7:14	7:14	7	name
LEAF_NODE	7:14	7:14	8	name
LEAF_NODE	7:18	7:18	4	;
EXPR_STATEMENT	8:1	8:18	3	data -> nick = nick ;
EXPR	8:1	8:1	4	data -> nick = nick
ASSIGN	8:1	8:14	5	data -> nick = nick
LVAL	8:1	8:1	6	data -> nick
FIELD	8:1	8:7	7	data -> nick
LEAF_NODE	8:1	8:1	8	data
LEAF_NODE	8:5	8:5	8	->
LEAF_NODE	8:7	8:7	8	nick
ASSIGN_OP	8:12	8:12	6	=
LEAF_NODE	8:12	8:12	7	=
RVAL	8:14	8:14	6	nick
FIELD	8:14	8:14	7	nick
LEAF_NODE	8:14	8:14	8	nick
LEAF_NODE	8:18	8:18	4	;
EXPR_STATEMENT	9:1	11:57	3	purple_account_request_authorization ( account , data -> name , NULL , data -> nick , reason , purple_find_buddy ( account , data -> name ) != NULL , oscar_auth_grant , oscar_auth_dontgrant_msgprompt , data ) ;
EXPR	9:1	9:1	4	purple_account_request_authorization ( account , data -> name , NULL , data -> nick , reason , purple_find_buddy ( account , data -> name ) != NULL , oscar_auth_grant , oscar_auth_dontgrant_msgprompt , data )
FUNCTION_CALL	9:1	11:56	5	purple_account_request_authorization ( account , data -> name , NULL , data -> nick , reason , purple_find_buddy ( account , data -> name ) != NULL , oscar_auth_grant , oscar_auth_dontgrant_msgprompt , data )
CALLEE	9:1	9:1	6	purple_account_request_authorization
LEAF_NODE	9:1	9:1	7	purple_account_request_authorization
LEAF_NODE	9:37	9:37	6	(
ARGUMENT	9:38	9:38	6	account
FIELD	9:38	9:38	7	account
LEAF_NODE	9:38	9:38	8	account
LEAF_NODE	9:45	9:45	6	,
ARGUMENT	9:47	9:47	6	data -> name
FIELD	9:47	9:53	7	data -> name
LEAF_NODE	9:47	9:47	8	data
LEAF_NODE	9:51	9:51	8	->
LEAF_NODE	9:53	9:53	8	name
LEAF_NODE	9:57	9:57	6	,
ARGUMENT	9:59	9:59	6	NULL
FIELD	9:59	9:59	7	NULL
LEAF_NODE	9:59	9:59	8	NULL
LEAF_NODE	9:63	9:63	6	,
ARGUMENT	9:65	9:65	6	data -> nick
FIELD	9:65	9:71	7	data -> nick
LEAF_NODE	9:65	9:65	8	data
LEAF_NODE	9:69	9:69	8	->
LEAF_NODE	9:71	9:71	8	nick
LEAF_NODE	9:75	9:75	6	,
ARGUMENT	10:2	10:2	6	reason
FIELD	10:2	10:2	7	reason
LEAF_NODE	10:2	10:2	8	reason
LEAF_NODE	10:8	10:8	6	,
ARGUMENT	10:10	10:52	6	purple_find_buddy ( account , data -> name ) != NULL
FUNCTION_CALL	10:10	10:47	7	purple_find_buddy ( account , data -> name )
CALLEE	10:10	10:10	8	purple_find_buddy
LEAF_NODE	10:10	10:10	9	purple_find_buddy
LEAF_NODE	10:27	10:27	8	(
ARGUMENT	10:28	10:28	8	account
FIELD	10:28	10:28	9	account
LEAF_NODE	10:28	10:28	10	account
LEAF_NODE	10:35	10:35	8	,
ARGUMENT	10:37	10:37	8	data -> name
FIELD	10:37	10:43	9	data -> name
LEAF_NODE	10:37	10:37	10	data
LEAF_NODE	10:41	10:41	10	->
LEAF_NODE	10:43	10:43	10	name
LEAF_NODE	10:47	10:47	8	)
EQ_OPERATOR	10:49	10:49	7	!=
LEAF_NODE	10:49	10:49	8	!=
FIELD	10:52	10:52	7	NULL
LEAF_NODE	10:52	10:52	8	NULL
LEAF_NODE	10:56	10:56	6	,
ARGUMENT	11:2	11:2	6	oscar_auth_grant
FIELD	11:2	11:2	7	oscar_auth_grant
LEAF_NODE	11:2	11:2	8	oscar_auth_grant
LEAF_NODE	11:18	11:18	6	,
ARGUMENT	11:20	11:20	6	oscar_auth_dontgrant_msgprompt
FIELD	11:20	11:20	7	oscar_auth_dontgrant_msgprompt
LEAF_NODE	11:20	11:20	8	oscar_auth_dontgrant_msgprompt
LEAF_NODE	11:50	11:50	6	,
ARGUMENT	11:52	11:52	6	data
FIELD	11:52	11:52	7	data
LEAF_NODE	11:52	11:52	8	data
LEAF_NODE	11:56	11:56	6	)
LEAF_NODE	11:57	11:57	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	11:0	1	
RETURN_TYPE	1:0	1:7	2	static int
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	int
LEAF_NODE	1:7	1:7	4	int
FUNCTION_NAME	2:0	2:0	2	reportinterval
LEAF_NODE	2:0	2:0	3	reportinterval
PARAMETER_LIST	2:14	2:124	2	( OscarData * od , FlapConnection * conn , aim_module_t * mod , FlapFrame * frame , aim_modsnac_t * snac , ByteStream * bs )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:26	3	OscarData * od
TYPE	2:15	2:25	4	OscarData *
TYPE_NAME	2:15	2:15	5	OscarData
LEAF_NODE	2:15	2:15	6	OscarData
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	od
LEAF_NODE	2:26	2:26	5	od
LEAF_NODE	2:28	2:28	3	,
PARAMETER_DECL	2:30	2:46	3	FlapConnection * conn
TYPE	2:30	2:45	4	FlapConnection *
TYPE_NAME	2:30	2:30	5	FlapConnection
LEAF_NODE	2:30	2:30	6	FlapConnection
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	conn
LEAF_NODE	2:46	2:46	5	conn
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:66	3	aim_module_t * mod
TYPE	2:52	2:65	4	aim_module_t *
TYPE_NAME	2:52	2:52	5	aim_module_t
LEAF_NODE	2:52	2:52	6	aim_module_t
POINTER	2:65	2:65	5	*
LEAF_NODE	2:65	2:65	6	*
NAME	2:66	2:66	4	mod
LEAF_NODE	2:66	2:66	5	mod
LEAF_NODE	2:69	2:69	3	,
PARAMETER_DECL	2:71	2:82	3	FlapFrame * frame
TYPE	2:71	2:81	4	FlapFrame *
TYPE_NAME	2:71	2:71	5	FlapFrame
LEAF_NODE	2:71	2:71	6	FlapFrame
POINTER	2:81	2:81	5	*
LEAF_NODE	2:81	2:81	6	*
NAME	2:82	2:82	4	frame
LEAF_NODE	2:82	2:82	5	frame
LEAF_NODE	2:87	2:87	3	,
PARAMETER_DECL	2:89	2:104	3	aim_modsnac_t * snac
TYPE	2:89	2:103	4	aim_modsnac_t *
TYPE_NAME	2:89	2:89	5	aim_modsnac_t
LEAF_NODE	2:89	2:89	6	aim_modsnac_t
POINTER	2:103	2:103	5	*
LEAF_NODE	2:103	2:103	6	*
NAME	2:104	2:104	4	snac
LEAF_NODE	2:104	2:104	5	snac
LEAF_NODE	2:108	2:108	3	,
PARAMETER_DECL	2:110	2:122	3	ByteStream * bs
TYPE	2:110	2:121	4	ByteStream *
TYPE_NAME	2:110	2:110	5	ByteStream
LEAF_NODE	2:110	2:110	6	ByteStream
POINTER	2:121	2:121	5	*
LEAF_NODE	2:121	2:121	6	*
NAME	2:122	2:122	4	bs
LEAF_NODE	2:122	2:122	5	bs
LEAF_NODE	2:124	2:124	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	10:1	2	
SIMPLE_DECL	4:1	4:12	3	int ret ; ret = 0 ;
VAR_DECL	4:1	4:5	4	int ret ; ret = 0
TYPE	4:1	4:1	5	int
TYPE_NAME	4:1	4:1	6	int
LEAF_NODE	4:1	4:1	7	int
NAME	4:5	4:5	5	ret
LEAF_NODE	4:5	4:5	6	ret
LEAF_NODE	0:0	0:0	5	;
INIT	4:5	4:5	5	ret = 0
ASSIGN	4:5	4:11	6	ret = 0
LVAL	4:5	4:5	7	ret
NAME	4:5	4:5	8	ret
LEAF_NODE	4:5	4:5	9	ret
ASSIGN_OP	4:9	4:9	7	=
LEAF_NODE	4:9	4:9	8	=
RVAL	4:11	4:11	7	0
FIELD	4:11	4:11	8	0
LEAF_NODE	4:11	4:11	9	0
LEAF_NODE	4:12	4:12	4	;
SIMPLE_DECL	5:1	5:26	3	aim_rxcallback_t userfunc ;
VAR_DECL	5:1	5:18	4	aim_rxcallback_t userfunc
TYPE	5:1	5:1	5	aim_rxcallback_t
TYPE_NAME	5:1	5:1	6	aim_rxcallback_t
LEAF_NODE	5:1	5:1	7	aim_rxcallback_t
NAME	5:18	5:18	5	userfunc
LEAF_NODE	5:18	5:18	6	userfunc
LEAF_NODE	5:26	5:26	4	;
SIMPLE_DECL	6:1	6:17	3	guint16 interval ;
VAR_DECL	6:1	6:9	4	guint16 interval
TYPE	6:1	6:1	5	guint16
TYPE_NAME	6:1	6:1	6	guint16
LEAF_NODE	6:1	6:1	7	guint16
NAME	6:9	6:9	5	interval
LEAF_NODE	6:9	6:9	6	interval
LEAF_NODE	6:17	6:17	4	;
EXPR_STATEMENT	7:1	7:33	3	interval = byte_stream_get16 ( bs ) ;
EXPR	7:1	7:1	4	interval = byte_stream_get16 ( bs )
ASSIGN	7:1	7:12	5	interval = byte_stream_get16 ( bs )
LVAL	7:1	7:1	6	interval
FIELD	7:1	7:1	7	interval
LEAF_NODE	7:1	7:1	8	interval
ASSIGN_OP	7:10	7:10	6	=
LEAF_NODE	7:10	7:10	7	=
RVAL	7:12	7:12	6	byte_stream_get16 ( bs )
FUNCTION_CALL	7:12	7:32	7	byte_stream_get16 ( bs )
CALLEE	7:12	7:12	8	byte_stream_get16
LEAF_NODE	7:12	7:12	9	byte_stream_get16
LEAF_NODE	7:29	7:29	8	(
ARGUMENT	7:30	7:30	8	bs
FIELD	7:30	7:30	9	bs
LEAF_NODE	7:30	7:30	10	bs
LEAF_NODE	7:32	7:32	8	)
LEAF_NODE	7:33	7:33	4	;
SELECTION	8:1	9:2	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	( userfunc = aim_callhandler ( od , snac -> family , snac -> subtype ) )
EXPR	8:5	8:65	5	( userfunc = aim_callhandler ( od , snac -> family , snac -> subtype ) )
LEAF_NODE	8:5	8:5	6	(
ASSIGN	8:6	8:17	6	userfunc = aim_callhandler ( od , snac -> family , snac -> subtype )
LVAL	8:6	8:6	7	userfunc
FIELD	8:6	8:6	8	userfunc
LEAF_NODE	8:6	8:6	9	userfunc
ASSIGN_OP	8:15	8:15	7	=
LEAF_NODE	8:15	8:15	8	=
RVAL	8:17	8:17	7	aim_callhandler ( od , snac -> family , snac -> subtype )
FUNCTION_CALL	8:17	8:64	8	aim_callhandler ( od , snac -> family , snac -> subtype )
CALLEE	8:17	8:17	9	aim_callhandler
LEAF_NODE	8:17	8:17	10	aim_callhandler
LEAF_NODE	8:32	8:32	9	(
ARGUMENT	8:33	8:33	9	od
FIELD	8:33	8:33	10	od
LEAF_NODE	8:33	8:33	11	od
LEAF_NODE	8:35	8:35	9	,
ARGUMENT	8:37	8:37	9	snac -> family
FIELD	8:37	8:43	10	snac -> family
LEAF_NODE	8:37	8:37	11	snac
LEAF_NODE	8:41	8:41	11	->
LEAF_NODE	8:43	8:43	11	family
LEAF_NODE	8:49	8:49	9	,
ARGUMENT	8:51	8:51	9	snac -> subtype
FIELD	8:51	8:57	10	snac -> subtype
LEAF_NODE	8:51	8:51	11	snac
LEAF_NODE	8:55	8:55	11	->
LEAF_NODE	8:57	8:57	11	subtype
LEAF_NODE	8:64	8:64	9	)
LEAF_NODE	8:65	8:65	6	)
LEAF_NODE	8:66	8:66	4	)
STATEMENTS	9:2	9:2	4	
EXPR_STATEMENT	9:2	9:43	5	ret = userfunc ( od , conn , frame , interval ) ;
EXPR	9:2	9:2	6	ret = userfunc ( od , conn , frame , interval )
ASSIGN	9:2	9:8	7	ret = userfunc ( od , conn , frame , interval )
LVAL	9:2	9:2	8	ret
FIELD	9:2	9:2	9	ret
LEAF_NODE	9:2	9:2	10	ret
ASSIGN_OP	9:6	9:6	8	=
LEAF_NODE	9:6	9:6	9	=
RVAL	9:8	9:8	8	userfunc ( od , conn , frame , interval )
FUNCTION_CALL	9:8	9:42	9	userfunc ( od , conn , frame , interval )
CALLEE	9:8	9:8	10	userfunc
LEAF_NODE	9:8	9:8	11	userfunc
LEAF_NODE	9:16	9:16	10	(
ARGUMENT	9:17	9:17	10	od
FIELD	9:17	9:17	11	od
LEAF_NODE	9:17	9:17	12	od
LEAF_NODE	9:19	9:19	10	,
ARGUMENT	9:21	9:21	10	conn
FIELD	9:21	9:21	11	conn
LEAF_NODE	9:21	9:21	12	conn
LEAF_NODE	9:25	9:25	10	,
ARGUMENT	9:27	9:27	10	frame
FIELD	9:27	9:27	11	frame
LEAF_NODE	9:27	9:27	12	frame
LEAF_NODE	9:32	9:32	10	,
ARGUMENT	9:34	9:34	10	interval
FIELD	9:34	9:34	11	interval
LEAF_NODE	9:34	9:34	12	interval
LEAF_NODE	9:42	9:42	10	)
LEAF_NODE	9:43	9:43	6	;
JUMP_STATEMENT	10:1	10:11	3	return ret ;
KEYWORD	10:1	10:1	4	return
LEAF_NODE	10:1	10:1	5	return
DESTINATION	10:8	10:8	4	ret
EXPR	10:8	10:8	5	ret
FIELD	10:8	10:8	6	ret
LEAF_NODE	10:8	10:8	7	ret
LEAF_NODE	10:11	10:11	4	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	pidgin_sound_uninit
LEAF_NODE	2:0	2:0	3	pidgin_sound_uninit
PARAMETER_LIST	2:19	2:24	2	( void )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:20	3	void
LEAF_NODE	2:20	2:20	4	void
LEAF_NODE	2:24	2:24	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	5:1	8:1	2	
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	! gst_init_failed
EXPR	5:5	5:5	5	! gst_init_failed
UNARY_EXPR	5:5	5:6	6	! gst_init_failed
UNARY_OPERATOR	5:5	5:5	7	!
LEAF_NODE	5:5	5:5	8	!
FIELD	5:6	5:6	7	gst_init_failed
LEAF_NODE	5:6	5:6	8	gst_init_failed
LEAF_NODE	5:21	5:21	4	)
STATEMENTS	6:2	6:2	4	
EXPR_STATEMENT	6:2	6:14	5	gst_deinit ( ) ;
EXPR	6:2	6:2	6	gst_deinit ( )
FUNCTION_CALL	6:2	6:13	7	gst_deinit ( )
CALLEE	6:2	6:2	8	gst_deinit
LEAF_NODE	6:2	6:2	9	gst_deinit
LEAF_NODE	6:12	6:12	8	(
LEAF_NODE	6:13	6:13	8	)
LEAF_NODE	6:14	6:14	6	;
EXPR_STATEMENT	8:1	8:63	3	purple_signals_disconnect_by_handle ( pidgin_sound_get_handle ( ) ) ;
EXPR	8:1	8:1	4	purple_signals_disconnect_by_handle ( pidgin_sound_get_handle ( ) )
FUNCTION_CALL	8:1	8:62	5	purple_signals_disconnect_by_handle ( pidgin_sound_get_handle ( ) )
CALLEE	8:1	8:1	6	purple_signals_disconnect_by_handle
LEAF_NODE	8:1	8:1	7	purple_signals_disconnect_by_handle
LEAF_NODE	8:36	8:36	6	(
ARGUMENT	8:37	8:37	6	pidgin_sound_get_handle ( )
FUNCTION_CALL	8:37	8:61	7	pidgin_sound_get_handle ( )
CALLEE	8:37	8:37	8	pidgin_sound_get_handle
LEAF_NODE	8:37	8:37	9	pidgin_sound_get_handle
LEAF_NODE	8:60	8:60	8	(
LEAF_NODE	8:61	8:61	8	)
LEAF_NODE	8:62	8:62	6	)
LEAF_NODE	8:63	8:63	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	plugin_act
LEAF_NODE	2:0	2:0	3	plugin_act
PARAMETER_LIST	2:10	2:50	2	( GtkObject * obj , PurplePluginAction * pam )
LEAF_NODE	2:10	2:10	3	(
PARAMETER_DECL	2:11	2:22	3	GtkObject * obj
TYPE	2:11	2:21	4	GtkObject *
TYPE_NAME	2:11	2:11	5	GtkObject
LEAF_NODE	2:11	2:11	6	GtkObject
POINTER	2:21	2:21	5	*
LEAF_NODE	2:21	2:21	6	*
NAME	2:22	2:22	4	obj
LEAF_NODE	2:22	2:22	5	obj
LEAF_NODE	2:25	2:25	3	,
PARAMETER_DECL	2:27	2:47	3	PurplePluginAction * pam
TYPE	2:27	2:46	4	PurplePluginAction *
TYPE_NAME	2:27	2:27	5	PurplePluginAction
LEAF_NODE	2:27	2:27	6	PurplePluginAction
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	pam
LEAF_NODE	2:47	2:47	5	pam
LEAF_NODE	2:50	2:50	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	pam && pam -> callback
EXPR	4:5	4:5	5	pam && pam -> callback
AND	4:5	4:12	6	pam && pam -> callback
EXPR	4:5	4:5	7	pam
FIELD	4:5	4:5	8	pam
LEAF_NODE	4:5	4:5	9	pam
LEAF_NODE	4:9	4:9	7	&&
EXPR	4:12	4:12	7	pam -> callback
FIELD	4:12	4:17	8	pam -> callback
LEAF_NODE	4:12	4:12	9	pam
LEAF_NODE	4:15	4:15	9	->
LEAF_NODE	4:17	4:17	9	callback
LEAF_NODE	4:25	4:25	4	)
STATEMENTS	5:2	5:2	4	
EXPR_STATEMENT	5:2	5:20	5	pam -> callback ( pam ) ;
EXPR	5:2	5:2	6	pam -> callback ( pam )
FUNCTION_CALL	5:2	5:19	7	pam -> callback ( pam )
CALLEE	5:2	5:7	8	pam -> callback
LEAF_NODE	5:2	5:2	9	pam
LEAF_NODE	5:5	5:5	9	->
LEAF_NODE	5:7	5:7	9	callback
LEAF_NODE	5:15	5:15	8	(
ARGUMENT	5:16	5:16	8	pam
FIELD	5:16	5:16	9	pam
LEAF_NODE	5:16	5:16	10	pam
LEAF_NODE	5:19	5:19	8	)
LEAF_NODE	5:20	5:20	6	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	notify_toggle_cb
LEAF_NODE	2:0	2:0	3	notify_toggle_cb
PARAMETER_LIST	2:16	2:49	2	( GtkWidget * widget , gpointer data )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:28	3	GtkWidget * widget
TYPE	2:17	2:27	4	GtkWidget *
TYPE_NAME	2:17	2:17	5	GtkWidget
LEAF_NODE	2:17	2:17	6	GtkWidget
POINTER	2:27	2:27	5	*
LEAF_NODE	2:27	2:27	6	*
NAME	2:28	2:28	4	widget
LEAF_NODE	2:28	2:28	5	widget
LEAF_NODE	2:34	2:34	3	,
PARAMETER_DECL	2:36	2:45	3	gpointer data
TYPE	2:36	2:36	4	gpointer
TYPE_NAME	2:36	2:36	5	gpointer
LEAF_NODE	2:36	2:36	6	gpointer
NAME	2:45	2:45	4	data
LEAF_NODE	2:45	2:45	5	data
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:70	3	gboolean on ; on = gtk_toggle_button_get_active ( GTK_TOGGLE_BUTTON ( widget ) ) ;
VAR_DECL	4:1	4:10	4	gboolean on ; on = gtk_toggle_button_get_active ( GTK_TOGGLE_BUTTON ( widget ) )
TYPE	4:1	4:1	5	gboolean
TYPE_NAME	4:1	4:1	6	gboolean
LEAF_NODE	4:1	4:1	7	gboolean
NAME	4:10	4:10	5	on
LEAF_NODE	4:10	4:10	6	on
LEAF_NODE	0:0	0:0	5	;
INIT	4:10	4:10	5	on = gtk_toggle_button_get_active ( GTK_TOGGLE_BUTTON ( widget ) )
ASSIGN	4:10	4:15	6	on = gtk_toggle_button_get_active ( GTK_TOGGLE_BUTTON ( widget ) )
LVAL	4:10	4:10	7	on
NAME	4:10	4:10	8	on
LEAF_NODE	4:10	4:10	9	on
ASSIGN_OP	4:13	4:13	7	=
LEAF_NODE	4:13	4:13	8	=
RVAL	4:15	4:15	7	gtk_toggle_button_get_active ( GTK_TOGGLE_BUTTON ( widget ) )
FUNCTION_CALL	4:15	4:69	8	gtk_toggle_button_get_active ( GTK_TOGGLE_BUTTON ( widget ) )
CALLEE	4:15	4:15	9	gtk_toggle_button_get_active
LEAF_NODE	4:15	4:15	10	gtk_toggle_button_get_active
LEAF_NODE	4:43	4:43	9	(
ARGUMENT	4:44	4:44	9	GTK_TOGGLE_BUTTON ( widget )
FUNCTION_CALL	4:44	4:68	10	GTK_TOGGLE_BUTTON ( widget )
CALLEE	4:44	4:44	11	GTK_TOGGLE_BUTTON
LEAF_NODE	4:44	4:44	12	GTK_TOGGLE_BUTTON
LEAF_NODE	4:61	4:61	11	(
ARGUMENT	4:62	4:62	11	widget
FIELD	4:62	4:62	12	widget
LEAF_NODE	4:62	4:62	13	widget
LEAF_NODE	4:68	4:68	11	)
LEAF_NODE	4:69	4:69	9	)
LEAF_NODE	4:70	4:70	4	;
SIMPLE_DECL	5:1	5:16	3	gchar [ 256 ] pref ;
VAR_DECL	5:1	5:7	4	gchar [ 256 ] pref
TYPE	5:1	5:11	5	gchar [ 256 ]
TYPE_NAME	5:1	5:1	6	gchar
LEAF_NODE	5:1	5:1	7	gchar
TYPE_SUFFIX	5:11	5:15	6	[ 256 ]
LEAF_NODE	5:11	5:11	7	[
FIELD	5:12	5:12	7	256
LEAF_NODE	5:12	5:12	8	256
LEAF_NODE	5:15	5:15	7	]
NAME	5:7	5:7	5	pref
LEAF_NODE	5:7	5:7	6	pref
LEAF_NODE	5:16	5:16	4	;
EXPR_STATEMENT	6:1	7:25	3	g_snprintf ( pref , sizeof ( pref ) , "/plugins/gtk/X11/notify/%s" , ( char * ) data ) ;
EXPR	6:1	6:1	4	g_snprintf ( pref , sizeof ( pref ) , "/plugins/gtk/X11/notify/%s" , ( char * ) data )
FUNCTION_CALL	6:1	7:24	5	g_snprintf ( pref , sizeof ( pref ) , "/plugins/gtk/X11/notify/%s" , ( char * ) data )
CALLEE	6:1	6:1	6	g_snprintf
LEAF_NODE	6:1	6:1	7	g_snprintf
LEAF_NODE	6:11	6:11	6	(
ARGUMENT	6:12	6:12	6	pref
FIELD	6:12	6:12	7	pref
LEAF_NODE	6:12	6:12	8	pref
LEAF_NODE	6:16	6:16	6	,
ARGUMENT	6:18	6:18	6	sizeof ( pref )
FUNCTION_CALL	6:18	6:29	7	sizeof ( pref )
CALLEE	6:18	6:18	8	sizeof
LEAF_NODE	6:18	6:18	9	sizeof
LEAF_NODE	6:24	6:24	8	(
ARGUMENT	6:25	6:25	8	pref
FIELD	6:25	6:25	9	pref
LEAF_NODE	6:25	6:25	10	pref
LEAF_NODE	6:29	6:29	8	)
LEAF_NODE	6:30	6:30	6	,
ARGUMENT	6:32	6:32	6	"/plugins/gtk/X11/notify/%s"
FIELD	6:32	6:32	7	"/plugins/gtk/X11/notify/%s"
LEAF_NODE	6:32	6:32	8	"/plugins/gtk/X11/notify/%s"
LEAF_NODE	6:60	6:60	6	,
ARGUMENT	7:12	7:20	6	( char * ) data
LEAF_NODE	7:12	7:12	7	(
TYPE_NAME	7:13	7:13	7	char
LEAF_NODE	7:13	7:13	8	char
LEAF_NODE	7:18	7:18	7	*
LEAF_NODE	7:19	7:19	7	)
FIELD	7:20	7:20	7	data
LEAF_NODE	7:20	7:20	8	data
LEAF_NODE	7:24	7:24	6	)
LEAF_NODE	7:25	7:25	4	;
EXPR_STATEMENT	8:1	8:32	3	purple_prefs_set_bool ( pref , on ) ;
EXPR	8:1	8:1	4	purple_prefs_set_bool ( pref , on )
FUNCTION_CALL	8:1	8:31	5	purple_prefs_set_bool ( pref , on )
CALLEE	8:1	8:1	6	purple_prefs_set_bool
LEAF_NODE	8:1	8:1	7	purple_prefs_set_bool
LEAF_NODE	8:22	8:22	6	(
ARGUMENT	8:23	8:23	6	pref
FIELD	8:23	8:23	7	pref
LEAF_NODE	8:23	8:23	8	pref
LEAF_NODE	8:27	8:27	6	,
ARGUMENT	8:29	8:29	6	on
FIELD	8:29	8:29	7	on
LEAF_NODE	8:29	8:29	8	on
LEAF_NODE	8:31	8:31	6	)
LEAF_NODE	8:32	8:32	4	;
EXPR_STATEMENT	9:1	9:15	3	apply_notify ( ) ;
EXPR	9:1	9:1	4	apply_notify ( )
FUNCTION_CALL	9:1	9:14	5	apply_notify ( )
CALLEE	9:1	9:1	6	apply_notify
LEAF_NODE	9:1	9:1	7	apply_notify
LEAF_NODE	9:13	9:13	6	(
LEAF_NODE	9:14	9:14	6	)
LEAF_NODE	9:15	9:15	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	18:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	gnt_label_set_property
LEAF_NODE	2:0	2:0	3	gnt_label_set_property
PARAMETER_LIST	2:22	3:18	2	( GObject * obj , guint prop_id , const GValue * value , GParamSpec * spec )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:32	3	GObject * obj
TYPE	2:23	2:31	4	GObject *
TYPE_NAME	2:23	2:23	5	GObject
LEAF_NODE	2:23	2:23	6	GObject
POINTER	2:31	2:31	5	*
LEAF_NODE	2:31	2:31	6	*
NAME	2:32	2:32	4	obj
LEAF_NODE	2:32	2:32	5	obj
LEAF_NODE	2:35	2:35	3	,
PARAMETER_DECL	2:37	2:43	3	guint prop_id
TYPE	2:37	2:37	4	guint
TYPE_NAME	2:37	2:37	5	guint
LEAF_NODE	2:37	2:37	6	guint
NAME	2:43	2:43	4	prop_id
LEAF_NODE	2:43	2:43	5	prop_id
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:66	3	const GValue * value
TYPE	2:52	2:65	4	const GValue *
TYPE_NAME	2:52	2:58	5	const GValue
LEAF_NODE	2:52	2:52	6	const
LEAF_NODE	2:58	2:58	6	GValue
POINTER	2:65	2:65	5	*
LEAF_NODE	2:65	2:65	6	*
NAME	2:66	2:66	4	value
LEAF_NODE	2:66	2:66	5	value
LEAF_NODE	2:71	2:71	3	,
PARAMETER_DECL	3:2	3:14	3	GParamSpec * spec
TYPE	3:2	3:13	4	GParamSpec *
TYPE_NAME	3:2	3:2	5	GParamSpec
LEAF_NODE	3:2	3:2	6	GParamSpec
POINTER	3:13	3:13	5	*
LEAF_NODE	3:13	3:13	6	*
NAME	3:14	3:14	4	spec
LEAF_NODE	3:14	3:14	5	spec
LEAF_NODE	3:18	3:18	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	6:1	2	
SIMPLE_DECL	5:1	5:33	3	GntLabel * label ; label = GNT_LABEL ( obj ) ;
VAR_DECL	5:1	5:11	4	GntLabel * label ; label = GNT_LABEL ( obj )
TYPE	5:1	5:10	5	GntLabel *
TYPE_NAME	5:1	5:1	6	GntLabel
LEAF_NODE	5:1	5:1	7	GntLabel
POINTER	5:10	5:10	6	*
LEAF_NODE	5:10	5:10	7	*
NAME	5:11	5:11	5	label
LEAF_NODE	5:11	5:11	6	label
LEAF_NODE	0:0	0:0	5	;
INIT	5:11	5:11	5	label = GNT_LABEL ( obj )
ASSIGN	5:11	5:19	6	label = GNT_LABEL ( obj )
LVAL	5:11	5:11	7	label
NAME	5:11	5:11	8	label
LEAF_NODE	5:11	5:11	9	label
ASSIGN_OP	5:17	5:17	7	=
LEAF_NODE	5:17	5:17	8	=
RVAL	5:19	5:19	7	GNT_LABEL ( obj )
FUNCTION_CALL	5:19	5:32	8	GNT_LABEL ( obj )
CALLEE	5:19	5:19	9	GNT_LABEL
LEAF_NODE	5:19	5:19	10	GNT_LABEL
LEAF_NODE	5:28	5:28	9	(
ARGUMENT	5:29	5:29	9	obj
FIELD	5:29	5:29	10	obj
LEAF_NODE	5:29	5:29	11	obj
LEAF_NODE	5:32	5:32	9	)
LEAF_NODE	5:33	5:33	4	;
SELECTION	6:1	6:18	3	
KEYWORD	6:1	6:1	4	switch
LEAF_NODE	6:1	6:1	5	switch
LEAF_NODE	6:8	6:8	4	(
CONDITION	6:9	6:9	4	prop_id
EXPR	6:9	6:9	5	prop_id
FIELD	6:9	6:9	6	prop_id
LEAF_NODE	6:9	6:9	7	prop_id
LEAF_NODE	6:16	6:16	4	)
STATEMENTS	6:18	17:1	4	
LEAF_NODE	6:18	6:18	5	{
STATEMENTS	7:2	16:3	5	
LABEL	7:2	7:16	6	case PROP_TEXT :
LEAF_NODE	7:2	7:2	7	case
LEAF_NODE	7:7	7:7	7	PROP_TEXT
LEAF_NODE	7:16	7:16	7	:
EXPR_STATEMENT	8:3	8:22	6	g_free ( label -> text ) ;
EXPR	8:3	8:3	7	g_free ( label -> text )
FUNCTION_CALL	8:3	8:21	8	g_free ( label -> text )
CALLEE	8:3	8:3	9	g_free
LEAF_NODE	8:3	8:3	10	g_free
LEAF_NODE	8:9	8:9	9	(
ARGUMENT	8:10	8:10	9	label -> text
FIELD	8:10	8:17	10	label -> text
LEAF_NODE	8:10	8:10	11	label
LEAF_NODE	8:15	8:15	11	->
LEAF_NODE	8:17	8:17	11	text
LEAF_NODE	8:21	8:21	9	)
LEAF_NODE	8:22	8:22	7	;
EXPR_STATEMENT	9:3	9:76	6	label -> text = gnt_util_onscreen_fit_string ( g_value_get_string ( value ) , - 1 ) ;
EXPR	9:3	9:3	7	label -> text = gnt_util_onscreen_fit_string ( g_value_get_string ( value ) , - 1 )
ASSIGN	9:3	9:17	8	label -> text = gnt_util_onscreen_fit_string ( g_value_get_string ( value ) , - 1 )
LVAL	9:3	9:3	9	label -> text
FIELD	9:3	9:10	10	label -> text
LEAF_NODE	9:3	9:3	11	label
LEAF_NODE	9:8	9:8	11	->
LEAF_NODE	9:10	9:10	11	text
ASSIGN_OP	9:15	9:15	9	=
LEAF_NODE	9:15	9:15	10	=
RVAL	9:17	9:17	9	gnt_util_onscreen_fit_string ( g_value_get_string ( value ) , - 1 )
FUNCTION_CALL	9:17	9:75	10	gnt_util_onscreen_fit_string ( g_value_get_string ( value ) , - 1 )
CALLEE	9:17	9:17	11	gnt_util_onscreen_fit_string
LEAF_NODE	9:17	9:17	12	gnt_util_onscreen_fit_string
LEAF_NODE	9:45	9:45	11	(
ARGUMENT	9:46	9:46	11	g_value_get_string ( value )
FUNCTION_CALL	9:46	9:70	12	g_value_get_string ( value )
CALLEE	9:46	9:46	13	g_value_get_string
LEAF_NODE	9:46	9:46	14	g_value_get_string
LEAF_NODE	9:64	9:64	13	(
ARGUMENT	9:65	9:65	13	value
FIELD	9:65	9:65	14	value
LEAF_NODE	9:65	9:65	15	value
LEAF_NODE	9:70	9:70	13	)
LEAF_NODE	9:71	9:71	11	,
ARGUMENT	9:73	9:73	11	- 1
UNARY_EXPR	9:73	9:74	12	- 1
UNARY_OPERATOR	9:73	9:73	13	-
LEAF_NODE	9:73	9:73	14	-
FIELD	9:74	9:74	13	1
LEAF_NODE	9:74	9:74	14	1
LEAF_NODE	9:75	9:75	11	)
LEAF_NODE	9:76	9:76	7	;
JUMP_STATEMENT	10:3	10:8	6	break DESTINATION ;
KEYWORD	10:3	10:3	7	break
LEAF_NODE	10:3	10:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	10:8	10:8	7	;
LABEL	11:2	11:21	6	case PROP_TEXT_FLAG :
LEAF_NODE	11:2	11:2	7	case
LEAF_NODE	11:7	11:7	7	PROP_TEXT_FLAG
LEAF_NODE	11:21	11:21	7	:
EXPR_STATEMENT	12:3	12:40	6	label -> flags = g_value_get_int ( value ) ;
EXPR	12:3	12:3	7	label -> flags = g_value_get_int ( value )
ASSIGN	12:3	12:18	8	label -> flags = g_value_get_int ( value )
LVAL	12:3	12:3	9	label -> flags
FIELD	12:3	12:10	10	label -> flags
LEAF_NODE	12:3	12:3	11	label
LEAF_NODE	12:8	12:8	11	->
LEAF_NODE	12:10	12:10	11	flags
ASSIGN_OP	12:16	12:16	9	=
LEAF_NODE	12:16	12:16	10	=
RVAL	12:18	12:18	9	g_value_get_int ( value )
FUNCTION_CALL	12:18	12:39	10	g_value_get_int ( value )
CALLEE	12:18	12:18	11	g_value_get_int
LEAF_NODE	12:18	12:18	12	g_value_get_int
LEAF_NODE	12:33	12:33	11	(
ARGUMENT	12:34	12:34	11	value
FIELD	12:34	12:34	12	value
LEAF_NODE	12:34	12:34	13	value
LEAF_NODE	12:39	12:39	11	)
LEAF_NODE	12:40	12:40	7	;
JUMP_STATEMENT	13:3	13:8	6	break DESTINATION ;
KEYWORD	13:3	13:3	7	break
LEAF_NODE	13:3	13:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	13:8	13:8	7	;
LABEL	14:2	14:9	6	default :
LEAF_NODE	14:2	14:2	7	default
LEAF_NODE	14:9	14:9	7	:
EXPR_STATEMENT	15:3	15:24	6	g_return_if_reached ( ) ;
EXPR	15:3	15:3	7	g_return_if_reached ( )
FUNCTION_CALL	15:3	15:23	8	g_return_if_reached ( )
CALLEE	15:3	15:3	9	g_return_if_reached
LEAF_NODE	15:3	15:3	10	g_return_if_reached
LEAF_NODE	15:22	15:22	9	(
LEAF_NODE	15:23	15:23	9	)
LEAF_NODE	15:24	15:24	7	;
JUMP_STATEMENT	16:3	16:8	6	break DESTINATION ;
KEYWORD	16:3	16:3	7	break
LEAF_NODE	16:3	16:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	16:8	16:8	7	;
LEAF_NODE	17:1	17:1	5	}
LEAF_NODE	18:0	18:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	14:0	1	
RETURN_TYPE	1:0	1:0	2	gint
TYPE_NAME	1:0	1:0	3	gint
LEAF_NODE	1:0	1:0	4	gint
FUNCTION_NAME	2:0	2:0	2	purple_dbus_pointer_to_id
LEAF_NODE	2:0	2:0	3	purple_dbus_pointer_to_id
PARAMETER_LIST	2:25	2:44	2	( gconstpointer node )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:40	3	gconstpointer node
TYPE	2:26	2:26	4	gconstpointer
TYPE_NAME	2:26	2:26	5	gconstpointer
LEAF_NODE	2:26	2:26	6	gconstpointer
NAME	2:40	2:40	4	node
LEAF_NODE	2:40	2:40	5	node
LEAF_NODE	2:44	2:44	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	13:1	2	
SIMPLE_DECL	4:1	4:66	3	gint id ; id = GPOINTER_TO_INT ( g_hash_table_lookup ( map_node_id , node ) ) ;
VAR_DECL	4:1	4:6	4	gint id ; id = GPOINTER_TO_INT ( g_hash_table_lookup ( map_node_id , node ) )
TYPE	4:1	4:1	5	gint
TYPE_NAME	4:1	4:1	6	gint
LEAF_NODE	4:1	4:1	7	gint
NAME	4:6	4:6	5	id
LEAF_NODE	4:6	4:6	6	id
LEAF_NODE	0:0	0:0	5	;
INIT	4:6	4:6	5	id = GPOINTER_TO_INT ( g_hash_table_lookup ( map_node_id , node ) )
ASSIGN	4:6	4:11	6	id = GPOINTER_TO_INT ( g_hash_table_lookup ( map_node_id , node ) )
LVAL	4:6	4:6	7	id
NAME	4:6	4:6	8	id
LEAF_NODE	4:6	4:6	9	id
ASSIGN_OP	4:9	4:9	7	=
LEAF_NODE	4:9	4:9	8	=
RVAL	4:11	4:11	7	GPOINTER_TO_INT ( g_hash_table_lookup ( map_node_id , node ) )
FUNCTION_CALL	4:11	4:65	8	GPOINTER_TO_INT ( g_hash_table_lookup ( map_node_id , node ) )
CALLEE	4:11	4:11	9	GPOINTER_TO_INT
LEAF_NODE	4:11	4:11	10	GPOINTER_TO_INT
LEAF_NODE	4:26	4:26	9	(
ARGUMENT	4:27	4:27	9	g_hash_table_lookup ( map_node_id , node )
FUNCTION_CALL	4:27	4:64	10	g_hash_table_lookup ( map_node_id , node )
CALLEE	4:27	4:27	11	g_hash_table_lookup
LEAF_NODE	4:27	4:27	12	g_hash_table_lookup
LEAF_NODE	4:46	4:46	11	(
ARGUMENT	4:47	4:47	11	map_node_id
FIELD	4:47	4:47	12	map_node_id
LEAF_NODE	4:47	4:47	13	map_node_id
LEAF_NODE	4:58	4:58	11	,
ARGUMENT	4:60	4:60	11	node
FIELD	4:60	4:60	12	node
LEAF_NODE	4:60	4:60	13	node
LEAF_NODE	4:64	4:64	11	)
LEAF_NODE	4:65	4:65	9	)
LEAF_NODE	4:66	4:66	4	;
SELECTION	5:1	6:1	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	( id == 0 ) && ( node != NULL )
EXPR	5:5	5:5	5	( id == 0 ) && ( node != NULL )
AND	5:5	5:18	6	( id == 0 ) && ( node != NULL )
EXPR	5:5	5:13	7	( id == 0 )
LEAF_NODE	5:5	5:5	8	(
FIELD	5:6	5:6	8	id
LEAF_NODE	5:6	5:6	9	id
EQ_OPERATOR	5:9	5:9	8	==
LEAF_NODE	5:9	5:9	9	==
FIELD	5:12	5:12	8	0
LEAF_NODE	5:12	5:12	9	0
LEAF_NODE	5:13	5:13	8	)
LEAF_NODE	5:15	5:15	7	&&
EXPR	5:18	5:31	7	( node != NULL )
LEAF_NODE	5:18	5:18	8	(
FIELD	5:19	5:19	8	node
LEAF_NODE	5:19	5:19	9	node
EQ_OPERATOR	5:24	5:24	8	!=
LEAF_NODE	5:24	5:24	9	!=
FIELD	5:27	5:27	8	NULL
LEAF_NODE	5:27	5:27	9	NULL
LEAF_NODE	5:31	5:31	8	)
LEAF_NODE	5:32	5:32	4	)
STATEMENTS	6:1	12:1	4	
LEAF_NODE	6:1	6:1	5	{
STATEMENTS	7:2	11:2	5	
SELECTION	7:2	8:3	6	
KEYWORD	7:2	7:2	7	if
LEAF_NODE	7:2	7:2	8	if
LEAF_NODE	7:5	7:5	7	(
CONDITION	7:6	7:6	7	purple_debug_is_verbose ( )
EXPR	7:6	7:6	8	purple_debug_is_verbose ( )
FUNCTION_CALL	7:6	7:30	9	purple_debug_is_verbose ( )
CALLEE	7:6	7:6	10	purple_debug_is_verbose
LEAF_NODE	7:6	7:6	11	purple_debug_is_verbose
LEAF_NODE	7:29	7:29	10	(
LEAF_NODE	7:30	7:30	10	)
LEAF_NODE	7:31	7:31	7	)
STATEMENTS	8:3	8:3	7	
LEAF_NODE	8:3	8:3	8	purple_debug_warning
LEAF_NODE	8:23	8:23	6	(
LEAF_NODE	8:24	8:24	6	"dbus"
LEAF_NODE	8:30	8:30	6	,
LEAF_NODE	9:4	9:4	6	"Need to register an object with the dbus subsystem."
LEAF_NODE	10:4	10:4	6	" (If you are not a developer, please ignore this message.)\n"
LEAF_NODE	10:66	10:66	6	)
LEAF_NODE	10:67	10:67	6	;
JUMP_STATEMENT	11:2	11:10	6	return 0 ;
KEYWORD	11:2	11:2	7	return
LEAF_NODE	11:2	11:2	8	return
DESTINATION	11:9	11:9	7	0
EXPR	11:9	11:9	8	0
FIELD	11:9	11:9	9	0
LEAF_NODE	11:9	11:9	10	0
LEAF_NODE	11:10	11:10	7	;
LEAF_NODE	12:1	12:1	5	}
JUMP_STATEMENT	13:1	13:10	3	return id ;
KEYWORD	13:1	13:1	4	return
LEAF_NODE	13:1	13:1	5	return
DESTINATION	13:8	13:8	4	id
EXPR	13:8	13:8	5	id
FIELD	13:8	13:8	6	id
LEAF_NODE	13:8	13:8	7	id
LEAF_NODE	13:10	13:10	4	;
LEAF_NODE	14:0	14:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_conv_im_set_type_again
LEAF_NODE	2:0	2:0	3	purple_conv_im_set_type_again
PARAMETER_LIST	2:29	2:64	2	( PurpleConvIm * im , unsigned int val )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:44	3	PurpleConvIm * im
TYPE	2:30	2:43	4	PurpleConvIm *
TYPE_NAME	2:30	2:30	5	PurpleConvIm
LEAF_NODE	2:30	2:30	6	PurpleConvIm
POINTER	2:43	2:43	5	*
LEAF_NODE	2:43	2:43	6	*
NAME	2:44	2:44	4	im
LEAF_NODE	2:44	2:44	5	im
LEAF_NODE	2:46	2:46	3	,
PARAMETER_DECL	2:48	2:61	3	unsigned int val
TYPE	2:48	2:48	4	unsigned int
TYPE_NAME	2:48	2:57	5	unsigned int
LEAF_NODE	2:48	2:48	6	unsigned
LEAF_NODE	2:57	2:57	6	int
NAME	2:61	2:61	4	val
LEAF_NODE	2:61	2:61	5	val
LEAF_NODE	2:64	2:64	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
EXPR_STATEMENT	4:1	4:29	3	g_return_if_fail ( im != NULL ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( im != NULL )
FUNCTION_CALL	4:1	4:28	5	g_return_if_fail ( im != NULL )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:24	6	im != NULL
FIELD	4:18	4:18	7	im
LEAF_NODE	4:18	4:18	8	im
EQ_OPERATOR	4:21	4:21	7	!=
LEAF_NODE	4:21	4:21	8	!=
FIELD	4:24	4:24	7	NULL
LEAF_NODE	4:24	4:24	8	NULL
LEAF_NODE	4:28	4:28	6	)
LEAF_NODE	4:29	4:29	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	val == 0
EXPR	5:5	5:12	5	val == 0
FIELD	5:5	5:5	6	val
LEAF_NODE	5:5	5:5	7	val
EQ_OPERATOR	5:9	5:9	6	==
LEAF_NODE	5:9	5:9	7	==
FIELD	5:12	5:12	6	0
LEAF_NODE	5:12	5:12	7	0
LEAF_NODE	5:13	5:13	4	)
STATEMENTS	6:2	6:2	4	
EXPR_STATEMENT	6:2	6:20	5	im -> type_again = 0 ;
EXPR	6:2	6:2	6	im -> type_again = 0
ASSIGN	6:2	6:19	7	im -> type_again = 0
LVAL	6:2	6:2	8	im -> type_again
FIELD	6:2	6:6	9	im -> type_again
LEAF_NODE	6:2	6:2	10	im
LEAF_NODE	6:4	6:4	10	->
LEAF_NODE	6:6	6:6	10	type_again
ASSIGN_OP	6:17	6:17	8	=
LEAF_NODE	6:17	6:17	9	=
RVAL	6:19	6:19	8	0
FIELD	6:19	6:19	9	0
LEAF_NODE	6:19	6:19	10	0
LEAF_NODE	6:20	6:20	6	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	else
LEAF_NODE	7:1	7:1	5	else
STATEMENTS	8:2	8:2	4	
EXPR_STATEMENT	8:2	8:35	5	im -> type_again = time ( NULL ) + val ;
EXPR	8:2	8:2	6	im -> type_again = time ( NULL ) + val
ASSIGN	8:2	8:19	7	im -> type_again = time ( NULL ) + val
LVAL	8:2	8:2	8	im -> type_again
FIELD	8:2	8:6	9	im -> type_again
LEAF_NODE	8:2	8:2	10	im
LEAF_NODE	8:4	8:4	10	->
LEAF_NODE	8:6	8:6	10	type_again
ASSIGN_OP	8:17	8:17	8	=
LEAF_NODE	8:17	8:17	9	=
RVAL	8:19	8:32	8	time ( NULL ) + val
FUNCTION_CALL	8:19	8:28	9	time ( NULL )
CALLEE	8:19	8:19	10	time
LEAF_NODE	8:19	8:19	11	time
LEAF_NODE	8:23	8:23	10	(
ARGUMENT	8:24	8:24	10	NULL
FIELD	8:24	8:24	11	NULL
LEAF_NODE	8:24	8:24	12	NULL
LEAF_NODE	8:28	8:28	10	)
LEAF_NODE	8:30	8:30	9	+
FIELD	8:32	8:32	9	val
LEAF_NODE	8:32	8:32	10	val
LEAF_NODE	8:35	8:35	6	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	47:0	1	
RETURN_TYPE	1:0	1:19	2	static const gchar *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:13	3	const gchar
LEAF_NODE	1:7	1:7	4	const
LEAF_NODE	1:13	1:13	4	gchar
LEAF_NODE	1:19	1:19	3	*
FUNCTION_NAME	2:0	2:0	2	g_utf8_strrcasestr
LEAF_NODE	2:0	2:0	3	g_utf8_strrcasestr
PARAMETER_LIST	2:19	2:62	2	( const gchar * haystack , const gchar * needle )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:33	3	const gchar * haystack
TYPE	2:20	2:32	4	const gchar *
TYPE_NAME	2:20	2:26	5	const gchar
LEAF_NODE	2:20	2:20	6	const
LEAF_NODE	2:26	2:26	6	gchar
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	haystack
LEAF_NODE	2:33	2:33	5	haystack
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:56	3	const gchar * needle
TYPE	2:43	2:55	4	const gchar *
TYPE_NAME	2:43	2:49	5	const gchar
LEAF_NODE	2:43	2:43	6	const
LEAF_NODE	2:49	2:49	6	gchar
POINTER	2:55	2:55	5	*
LEAF_NODE	2:55	2:55	6	*
NAME	2:56	2:56	4	needle
LEAF_NODE	2:56	2:56	5	needle
LEAF_NODE	2:62	2:62	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	46:1	2	
SIMPLE_DECL	4:1	4:17	3	gsize needle_len ;
VAR_DECL	4:1	4:7	4	gsize needle_len
TYPE	4:1	4:1	5	gsize
TYPE_NAME	4:1	4:1	6	gsize
LEAF_NODE	4:1	4:1	7	gsize
NAME	4:7	4:7	5	needle_len
LEAF_NODE	4:7	4:7	6	needle_len
LEAF_NODE	4:17	4:17	4	;
SIMPLE_DECL	5:1	5:19	3	gsize haystack_len ;
VAR_DECL	5:1	5:7	4	gsize haystack_len
TYPE	5:1	5:1	5	gsize
TYPE_NAME	5:1	5:1	6	gsize
LEAF_NODE	5:1	5:1	7	gsize
NAME	5:7	5:7	5	haystack_len
LEAF_NODE	5:7	5:7	6	haystack_len
LEAF_NODE	5:19	5:19	4	;
SIMPLE_DECL	6:1	6:24	3	const gchar * ret ; ret = NULL ;
VAR_DECL	6:1	6:14	4	const gchar * ret ; ret = NULL
TYPE	6:1	6:13	5	const gchar *
TYPE_NAME	6:1	6:7	6	const gchar
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	gchar
POINTER	6:13	6:13	6	*
LEAF_NODE	6:13	6:13	7	*
NAME	6:14	6:14	5	ret
LEAF_NODE	6:14	6:14	6	ret
LEAF_NODE	0:0	0:0	5	;
INIT	6:14	6:14	5	ret = NULL
ASSIGN	6:14	6:20	6	ret = NULL
LVAL	6:14	6:14	7	ret
NAME	6:14	6:14	8	ret
LEAF_NODE	6:14	6:14	9	ret
ASSIGN_OP	6:18	6:18	7	=
LEAF_NODE	6:18	6:18	8	=
RVAL	6:20	6:20	7	NULL
FIELD	6:20	6:20	8	NULL
LEAF_NODE	6:20	6:20	9	NULL
LEAF_NODE	6:24	6:24	4	;
SIMPLE_DECL	7:1	7:9	3	gchar * p ;
VAR_DECL	7:1	7:8	4	gchar * p
TYPE	7:1	7:7	5	gchar *
TYPE_NAME	7:1	7:1	6	gchar
LEAF_NODE	7:1	7:1	7	gchar
POINTER	7:7	7:7	6	*
LEAF_NODE	7:7	7:7	7	*
NAME	7:8	7:8	5	p
LEAF_NODE	7:8	7:8	6	p
LEAF_NODE	7:9	7:9	4	;
SIMPLE_DECL	8:1	8:16	3	gchar * casefold ;
VAR_DECL	8:1	8:8	4	gchar * casefold
TYPE	8:1	8:7	5	gchar *
TYPE_NAME	8:1	8:1	6	gchar
LEAF_NODE	8:1	8:1	7	gchar
POINTER	8:7	8:7	6	*
LEAF_NODE	8:7	8:7	7	*
NAME	8:8	8:8	5	casefold
LEAF_NODE	8:8	8:8	6	casefold
LEAF_NODE	8:16	8:16	4	;
SIMPLE_DECL	9:1	9:25	3	gchar * caseless_haystack ;
VAR_DECL	9:1	9:8	4	gchar * caseless_haystack
TYPE	9:1	9:7	5	gchar *
TYPE_NAME	9:1	9:1	6	gchar
LEAF_NODE	9:1	9:1	7	gchar
POINTER	9:7	9:7	6	*
LEAF_NODE	9:7	9:7	7	*
NAME	9:8	9:8	5	caseless_haystack
LEAF_NODE	9:8	9:8	6	caseless_haystack
LEAF_NODE	9:25	9:25	4	;
SIMPLE_DECL	10:1	10:7	3	gint i ;
VAR_DECL	10:1	10:6	4	gint i
TYPE	10:1	10:1	5	gint
TYPE_NAME	10:1	10:1	6	gint
LEAF_NODE	10:1	10:1	7	gint
NAME	10:6	10:6	5	i
LEAF_NODE	10:6	10:6	6	i
LEAF_NODE	10:7	10:7	4	;
EXPR_STATEMENT	11:1	11:46	3	g_return_val_if_fail ( haystack != NULL , NULL ) ;
EXPR	11:1	11:1	4	g_return_val_if_fail ( haystack != NULL , NULL )
FUNCTION_CALL	11:1	11:45	5	g_return_val_if_fail ( haystack != NULL , NULL )
CALLEE	11:1	11:1	6	g_return_val_if_fail
LEAF_NODE	11:1	11:1	7	g_return_val_if_fail
LEAF_NODE	11:22	11:22	6	(
ARGUMENT	11:23	11:35	6	haystack != NULL
FIELD	11:23	11:23	7	haystack
LEAF_NODE	11:23	11:23	8	haystack
EQ_OPERATOR	11:32	11:32	7	!=
LEAF_NODE	11:32	11:32	8	!=
FIELD	11:35	11:35	7	NULL
LEAF_NODE	11:35	11:35	8	NULL
LEAF_NODE	11:39	11:39	6	,
ARGUMENT	11:41	11:41	6	NULL
FIELD	11:41	11:41	7	NULL
LEAF_NODE	11:41	11:41	8	NULL
LEAF_NODE	11:45	11:45	6	)
LEAF_NODE	11:46	11:46	4	;
EXPR_STATEMENT	12:1	12:44	3	g_return_val_if_fail ( needle != NULL , NULL ) ;
EXPR	12:1	12:1	4	g_return_val_if_fail ( needle != NULL , NULL )
FUNCTION_CALL	12:1	12:43	5	g_return_val_if_fail ( needle != NULL , NULL )
CALLEE	12:1	12:1	6	g_return_val_if_fail
LEAF_NODE	12:1	12:1	7	g_return_val_if_fail
LEAF_NODE	12:22	12:22	6	(
ARGUMENT	12:23	12:33	6	needle != NULL
FIELD	12:23	12:23	7	needle
LEAF_NODE	12:23	12:23	8	needle
EQ_OPERATOR	12:30	12:30	7	!=
LEAF_NODE	12:30	12:30	8	!=
FIELD	12:33	12:33	7	NULL
LEAF_NODE	12:33	12:33	8	NULL
LEAF_NODE	12:37	12:37	6	,
ARGUMENT	12:39	12:39	6	NULL
FIELD	12:39	12:39	7	NULL
LEAF_NODE	12:39	12:39	8	NULL
LEAF_NODE	12:43	12:43	6	)
LEAF_NODE	12:44	12:44	4	;
EXPR_STATEMENT	13:1	13:42	3	casefold = g_utf8_casefold ( haystack , - 1 ) ;
EXPR	13:1	13:1	4	casefold = g_utf8_casefold ( haystack , - 1 )
ASSIGN	13:1	13:12	5	casefold = g_utf8_casefold ( haystack , - 1 )
LVAL	13:1	13:1	6	casefold
FIELD	13:1	13:1	7	casefold
LEAF_NODE	13:1	13:1	8	casefold
ASSIGN_OP	13:10	13:10	6	=
LEAF_NODE	13:10	13:10	7	=
RVAL	13:12	13:12	6	g_utf8_casefold ( haystack , - 1 )
FUNCTION_CALL	13:12	13:41	7	g_utf8_casefold ( haystack , - 1 )
CALLEE	13:12	13:12	8	g_utf8_casefold
LEAF_NODE	13:12	13:12	9	g_utf8_casefold
LEAF_NODE	13:28	13:28	8	(
ARGUMENT	13:29	13:29	8	haystack
FIELD	13:29	13:29	9	haystack
LEAF_NODE	13:29	13:29	10	haystack
LEAF_NODE	13:37	13:37	8	,
ARGUMENT	13:39	13:39	8	- 1
UNARY_EXPR	13:39	13:40	9	- 1
UNARY_OPERATOR	13:39	13:39	10	-
LEAF_NODE	13:39	13:39	11	-
FIELD	13:40	13:40	10	1
LEAF_NODE	13:40	13:40	11	1
LEAF_NODE	13:41	13:41	8	)
LEAF_NODE	13:42	13:42	4	;
EXPR_STATEMENT	14:1	14:69	3	caseless_haystack = g_utf8_normalize ( casefold , - 1 , G_NORMALIZE_NFD ) ;
EXPR	14:1	14:1	4	caseless_haystack = g_utf8_normalize ( casefold , - 1 , G_NORMALIZE_NFD )
ASSIGN	14:1	14:21	5	caseless_haystack = g_utf8_normalize ( casefold , - 1 , G_NORMALIZE_NFD )
LVAL	14:1	14:1	6	caseless_haystack
FIELD	14:1	14:1	7	caseless_haystack
LEAF_NODE	14:1	14:1	8	caseless_haystack
ASSIGN_OP	14:19	14:19	6	=
LEAF_NODE	14:19	14:19	7	=
RVAL	14:21	14:21	6	g_utf8_normalize ( casefold , - 1 , G_NORMALIZE_NFD )
FUNCTION_CALL	14:21	14:68	7	g_utf8_normalize ( casefold , - 1 , G_NORMALIZE_NFD )
CALLEE	14:21	14:21	8	g_utf8_normalize
LEAF_NODE	14:21	14:21	9	g_utf8_normalize
LEAF_NODE	14:38	14:38	8	(
ARGUMENT	14:39	14:39	8	casefold
FIELD	14:39	14:39	9	casefold
LEAF_NODE	14:39	14:39	10	casefold
LEAF_NODE	14:47	14:47	8	,
ARGUMENT	14:49	14:49	8	- 1
UNARY_EXPR	14:49	14:50	9	- 1
UNARY_OPERATOR	14:49	14:49	10	-
LEAF_NODE	14:49	14:49	11	-
FIELD	14:50	14:50	10	1
LEAF_NODE	14:50	14:50	11	1
LEAF_NODE	14:51	14:51	8	,
ARGUMENT	14:53	14:53	8	G_NORMALIZE_NFD
FIELD	14:53	14:53	9	G_NORMALIZE_NFD
LEAF_NODE	14:53	14:53	10	G_NORMALIZE_NFD
LEAF_NODE	14:68	14:68	8	)
LEAF_NODE	14:69	14:69	4	;
EXPR_STATEMENT	15:1	15:18	3	g_free ( casefold ) ;
EXPR	15:1	15:1	4	g_free ( casefold )
FUNCTION_CALL	15:1	15:17	5	g_free ( casefold )
CALLEE	15:1	15:1	6	g_free
LEAF_NODE	15:1	15:1	7	g_free
LEAF_NODE	15:8	15:8	6	(
ARGUMENT	15:9	15:9	6	casefold
FIELD	15:9	15:9	7	casefold
LEAF_NODE	15:9	15:9	8	casefold
LEAF_NODE	15:17	15:17	6	)
LEAF_NODE	15:18	15:18	4	;
EXPR_STATEMENT	16:1	16:40	3	needle_len = g_utf8_strlen ( needle , - 1 ) ;
EXPR	16:1	16:1	4	needle_len = g_utf8_strlen ( needle , - 1 )
ASSIGN	16:1	16:14	5	needle_len = g_utf8_strlen ( needle , - 1 )
LVAL	16:1	16:1	6	needle_len
FIELD	16:1	16:1	7	needle_len
LEAF_NODE	16:1	16:1	8	needle_len
ASSIGN_OP	16:12	16:12	6	=
LEAF_NODE	16:12	16:12	7	=
RVAL	16:14	16:14	6	g_utf8_strlen ( needle , - 1 )
FUNCTION_CALL	16:14	16:39	7	g_utf8_strlen ( needle , - 1 )
CALLEE	16:14	16:14	8	g_utf8_strlen
LEAF_NODE	16:14	16:14	9	g_utf8_strlen
LEAF_NODE	16:28	16:28	8	(
ARGUMENT	16:29	16:29	8	needle
FIELD	16:29	16:29	9	needle
LEAF_NODE	16:29	16:29	10	needle
LEAF_NODE	16:35	16:35	8	,
ARGUMENT	16:37	16:37	8	- 1
UNARY_EXPR	16:37	16:38	9	- 1
UNARY_OPERATOR	16:37	16:37	10	-
LEAF_NODE	16:37	16:37	11	-
FIELD	16:38	16:38	10	1
LEAF_NODE	16:38	16:38	11	1
LEAF_NODE	16:39	16:39	8	)
LEAF_NODE	16:40	16:40	4	;
EXPR_STATEMENT	17:1	17:53	3	haystack_len = g_utf8_strlen ( caseless_haystack , - 1 ) ;
EXPR	17:1	17:1	4	haystack_len = g_utf8_strlen ( caseless_haystack , - 1 )
ASSIGN	17:1	17:16	5	haystack_len = g_utf8_strlen ( caseless_haystack , - 1 )
LVAL	17:1	17:1	6	haystack_len
FIELD	17:1	17:1	7	haystack_len
LEAF_NODE	17:1	17:1	8	haystack_len
ASSIGN_OP	17:14	17:14	6	=
LEAF_NODE	17:14	17:14	7	=
RVAL	17:16	17:16	6	g_utf8_strlen ( caseless_haystack , - 1 )
FUNCTION_CALL	17:16	17:52	7	g_utf8_strlen ( caseless_haystack , - 1 )
CALLEE	17:16	17:16	8	g_utf8_strlen
LEAF_NODE	17:16	17:16	9	g_utf8_strlen
LEAF_NODE	17:30	17:30	8	(
ARGUMENT	17:31	17:31	8	caseless_haystack
FIELD	17:31	17:31	9	caseless_haystack
LEAF_NODE	17:31	17:31	10	caseless_haystack
LEAF_NODE	17:48	17:48	8	,
ARGUMENT	17:50	17:50	8	- 1
UNARY_EXPR	17:50	17:51	9	- 1
UNARY_OPERATOR	17:50	17:50	10	-
LEAF_NODE	17:50	17:50	11	-
FIELD	17:51	17:51	10	1
LEAF_NODE	17:51	17:51	11	1
LEAF_NODE	17:52	17:52	8	)
LEAF_NODE	17:53	17:53	4	;
SELECTION	18:1	19:1	3	
KEYWORD	18:1	18:1	4	if
LEAF_NODE	18:1	18:1	5	if
LEAF_NODE	18:4	18:4	4	(
CONDITION	18:5	18:5	4	needle_len == 0
EXPR	18:5	18:19	5	needle_len == 0
FIELD	18:5	18:5	6	needle_len
LEAF_NODE	18:5	18:5	7	needle_len
EQ_OPERATOR	18:16	18:16	6	==
LEAF_NODE	18:16	18:16	7	==
FIELD	18:19	18:19	6	0
LEAF_NODE	18:19	18:19	7	0
LEAF_NODE	18:20	18:20	4	)
STATEMENTS	19:1	22:1	4	
LEAF_NODE	19:1	19:1	5	{
STATEMENTS	20:2	21:2	5	
EXPR_STATEMENT	20:2	20:25	6	ret = ( gchar * ) haystack ;
EXPR	20:2	20:2	7	ret = ( gchar * ) haystack
ASSIGN	20:2	20:8	8	ret = ( gchar * ) haystack
LVAL	20:2	20:2	9	ret
FIELD	20:2	20:2	10	ret
LEAF_NODE	20:2	20:2	11	ret
ASSIGN_OP	20:6	20:6	9	=
LEAF_NODE	20:6	20:6	10	=
RVAL	20:8	20:17	9	( gchar * ) haystack
LEAF_NODE	20:8	20:8	10	(
TYPE_NAME	20:9	20:9	10	gchar
LEAF_NODE	20:9	20:9	11	gchar
LEAF_NODE	20:15	20:15	10	*
LEAF_NODE	20:16	20:16	10	)
FIELD	20:17	20:17	10	haystack
LEAF_NODE	20:17	20:17	11	haystack
LEAF_NODE	20:25	20:25	7	;
JUMP_STATEMENT	21:2	21:16	6	goto finally_1 ;
KEYWORD	21:2	21:2	7	goto
LEAF_NODE	21:2	21:2	8	goto
DESTINATION	21:7	21:7	7	finally_1
LEAF_NODE	21:7	21:7	8	finally_1
LEAF_NODE	21:16	21:16	7	;
LEAF_NODE	22:1	22:1	5	}
SELECTION	23:1	24:1	3	
KEYWORD	23:1	23:1	4	if
LEAF_NODE	23:1	23:1	5	if
LEAF_NODE	23:4	23:4	4	(
CONDITION	23:5	23:5	4	haystack_len < needle_len
EXPR	23:5	23:20	5	haystack_len < needle_len
FIELD	23:5	23:5	6	haystack_len
LEAF_NODE	23:5	23:5	7	haystack_len
REL_OPERATOR	23:18	23:18	6	<
LEAF_NODE	23:18	23:18	7	<
FIELD	23:20	23:20	6	needle_len
LEAF_NODE	23:20	23:20	7	needle_len
LEAF_NODE	23:30	23:30	4	)
STATEMENTS	24:1	27:1	4	
LEAF_NODE	24:1	24:1	5	{
STATEMENTS	25:2	26:2	5	
EXPR_STATEMENT	25:2	25:12	6	ret = NULL ;
EXPR	25:2	25:2	7	ret = NULL
ASSIGN	25:2	25:8	8	ret = NULL
LVAL	25:2	25:2	9	ret
FIELD	25:2	25:2	10	ret
LEAF_NODE	25:2	25:2	11	ret
ASSIGN_OP	25:6	25:6	9	=
LEAF_NODE	25:6	25:6	10	=
RVAL	25:8	25:8	9	NULL
FIELD	25:8	25:8	10	NULL
LEAF_NODE	25:8	25:8	11	NULL
LEAF_NODE	25:12	25:12	7	;
JUMP_STATEMENT	26:2	26:16	6	goto finally_1 ;
KEYWORD	26:2	26:2	7	goto
LEAF_NODE	26:2	26:2	8	goto
DESTINATION	26:7	26:7	7	finally_1
LEAF_NODE	26:7	26:7	8	finally_1
LEAF_NODE	26:16	26:16	7	;
LEAF_NODE	27:1	27:1	5	}
EXPR_STATEMENT	28:1	28:30	3	i = haystack_len - needle_len ;
EXPR	28:1	28:1	4	i = haystack_len - needle_len
ASSIGN	28:1	28:5	5	i = haystack_len - needle_len
LVAL	28:1	28:1	6	i
FIELD	28:1	28:1	7	i
LEAF_NODE	28:1	28:1	8	i
ASSIGN_OP	28:3	28:3	6	=
LEAF_NODE	28:3	28:3	7	=
RVAL	28:5	28:20	6	haystack_len - needle_len
FIELD	28:5	28:5	7	haystack_len
LEAF_NODE	28:5	28:5	8	haystack_len
LEAF_NODE	28:18	28:18	7	-
FIELD	28:20	28:20	7	needle_len
LEAF_NODE	28:20	28:20	8	needle_len
LEAF_NODE	28:30	28:30	4	;
EXPR_STATEMENT	29:1	29:52	3	p = g_utf8_offset_to_pointer ( caseless_haystack , i ) ;
EXPR	29:1	29:1	4	p = g_utf8_offset_to_pointer ( caseless_haystack , i )
ASSIGN	29:1	29:5	5	p = g_utf8_offset_to_pointer ( caseless_haystack , i )
LVAL	29:1	29:1	6	p
FIELD	29:1	29:1	7	p
LEAF_NODE	29:1	29:1	8	p
ASSIGN_OP	29:3	29:3	6	=
LEAF_NODE	29:3	29:3	7	=
RVAL	29:5	29:5	6	g_utf8_offset_to_pointer ( caseless_haystack , i )
FUNCTION_CALL	29:5	29:51	7	g_utf8_offset_to_pointer ( caseless_haystack , i )
CALLEE	29:5	29:5	8	g_utf8_offset_to_pointer
LEAF_NODE	29:5	29:5	9	g_utf8_offset_to_pointer
LEAF_NODE	29:30	29:30	8	(
ARGUMENT	29:31	29:31	8	caseless_haystack
FIELD	29:31	29:31	9	caseless_haystack
LEAF_NODE	29:31	29:31	10	caseless_haystack
LEAF_NODE	29:48	29:48	8	,
ARGUMENT	29:50	29:50	8	i
FIELD	29:50	29:50	9	i
LEAF_NODE	29:50	29:50	10	i
LEAF_NODE	29:51	29:51	8	)
LEAF_NODE	29:52	29:52	4	;
EXPR_STATEMENT	30:1	30:29	3	needle_len = strlen ( needle ) ;
EXPR	30:1	30:1	4	needle_len = strlen ( needle )
ASSIGN	30:1	30:14	5	needle_len = strlen ( needle )
LVAL	30:1	30:1	6	needle_len
FIELD	30:1	30:1	7	needle_len
LEAF_NODE	30:1	30:1	8	needle_len
ASSIGN_OP	30:12	30:12	6	=
LEAF_NODE	30:12	30:12	7	=
RVAL	30:14	30:14	6	strlen ( needle )
FUNCTION_CALL	30:14	30:28	7	strlen ( needle )
CALLEE	30:14	30:14	8	strlen
LEAF_NODE	30:14	30:14	9	strlen
LEAF_NODE	30:21	30:21	8	(
ARGUMENT	30:22	30:22	8	needle
FIELD	30:22	30:22	9	needle
LEAF_NODE	30:22	30:22	10	needle
LEAF_NODE	30:28	30:28	8	)
LEAF_NODE	30:29	30:29	4	;
ITERATION	31:1	32:1	3	
KEYWORD	31:1	31:1	4	while
LEAF_NODE	31:1	31:1	5	while
LEAF_NODE	31:7	31:7	4	(
CONDITION	31:8	31:8	4	1
EXPR	31:8	31:8	5	1
FIELD	31:8	31:8	6	1
LEAF_NODE	31:8	31:8	7	1
LEAF_NODE	31:9	31:9	4	)
STATEMENTS	32:1	43:1	4	
LEAF_NODE	32:1	32:1	5	{
STATEMENTS	33:2	42:2	5	
SELECTION	33:2	34:2	6	
KEYWORD	33:2	33:2	7	if
LEAF_NODE	33:2	33:2	8	if
LEAF_NODE	33:5	33:5	7	(
CONDITION	33:6	33:6	7	strncmp ( p , needle , needle_len ) == 0
EXPR	33:6	33:41	8	strncmp ( p , needle , needle_len ) == 0
FUNCTION_CALL	33:6	33:36	9	strncmp ( p , needle , needle_len )
CALLEE	33:6	33:6	10	strncmp
LEAF_NODE	33:6	33:6	11	strncmp
LEAF_NODE	33:14	33:14	10	(
ARGUMENT	33:15	33:15	10	p
FIELD	33:15	33:15	11	p
LEAF_NODE	33:15	33:15	12	p
LEAF_NODE	33:16	33:16	10	,
ARGUMENT	33:18	33:18	10	needle
FIELD	33:18	33:18	11	needle
LEAF_NODE	33:18	33:18	12	needle
LEAF_NODE	33:24	33:24	10	,
ARGUMENT	33:26	33:26	10	needle_len
FIELD	33:26	33:26	11	needle_len
LEAF_NODE	33:26	33:26	12	needle_len
LEAF_NODE	33:36	33:36	10	)
EQ_OPERATOR	33:38	33:38	9	==
LEAF_NODE	33:38	33:38	10	==
FIELD	33:41	33:41	9	0
LEAF_NODE	33:41	33:41	10	0
LEAF_NODE	33:42	33:42	7	)
STATEMENTS	34:2	37:2	7	
LEAF_NODE	34:2	34:2	8	{
STATEMENTS	35:3	36:3	8	
EXPR_STATEMENT	35:3	35:58	9	ret = pointer_from_offset_skipping_decomp ( haystack , i ) ;
EXPR	35:3	35:3	10	ret = pointer_from_offset_skipping_decomp ( haystack , i )
ASSIGN	35:3	35:9	11	ret = pointer_from_offset_skipping_decomp ( haystack , i )
LVAL	35:3	35:3	12	ret
FIELD	35:3	35:3	13	ret
LEAF_NODE	35:3	35:3	14	ret
ASSIGN_OP	35:7	35:7	12	=
LEAF_NODE	35:7	35:7	13	=
RVAL	35:9	35:9	12	pointer_from_offset_skipping_decomp ( haystack , i )
FUNCTION_CALL	35:9	35:57	13	pointer_from_offset_skipping_decomp ( haystack , i )
CALLEE	35:9	35:9	14	pointer_from_offset_skipping_decomp
LEAF_NODE	35:9	35:9	15	pointer_from_offset_skipping_decomp
LEAF_NODE	35:45	35:45	14	(
ARGUMENT	35:46	35:46	14	haystack
FIELD	35:46	35:46	15	haystack
LEAF_NODE	35:46	35:46	16	haystack
LEAF_NODE	35:54	35:54	14	,
ARGUMENT	35:56	35:56	14	i
FIELD	35:56	35:56	15	i
LEAF_NODE	35:56	35:56	16	i
LEAF_NODE	35:57	35:57	14	)
LEAF_NODE	35:58	35:58	10	;
JUMP_STATEMENT	36:3	36:17	9	goto finally_1 ;
KEYWORD	36:3	36:3	10	goto
LEAF_NODE	36:3	36:3	11	goto
DESTINATION	36:8	36:8	10	finally_1
LEAF_NODE	36:8	36:8	11	finally_1
LEAF_NODE	36:17	36:17	10	;
LEAF_NODE	37:2	37:2	8	}
SELECTION	38:2	39:3	6	
KEYWORD	38:2	38:2	7	if
LEAF_NODE	38:2	38:2	8	if
LEAF_NODE	38:5	38:5	7	(
CONDITION	38:6	38:6	7	p > caseless_haystack
EXPR	38:6	38:10	8	p > caseless_haystack
FIELD	38:6	38:6	9	p
LEAF_NODE	38:6	38:6	10	p
REL_OPERATOR	38:8	38:8	9	>
LEAF_NODE	38:8	38:8	10	>
FIELD	38:10	38:10	9	caseless_haystack
LEAF_NODE	38:10	38:10	10	caseless_haystack
LEAF_NODE	38:27	38:27	7	)
STATEMENTS	39:3	39:3	7	
EXPR_STATEMENT	39:3	39:27	8	p = g_utf8_prev_char ( p ) ;
EXPR	39:3	39:3	9	p = g_utf8_prev_char ( p )
ASSIGN	39:3	39:7	10	p = g_utf8_prev_char ( p )
LVAL	39:3	39:3	11	p
FIELD	39:3	39:3	12	p
LEAF_NODE	39:3	39:3	13	p
ASSIGN_OP	39:5	39:5	11	=
LEAF_NODE	39:5	39:5	12	=
RVAL	39:7	39:7	11	g_utf8_prev_char ( p )
FUNCTION_CALL	39:7	39:26	12	g_utf8_prev_char ( p )
CALLEE	39:7	39:7	13	g_utf8_prev_char
LEAF_NODE	39:7	39:7	14	g_utf8_prev_char
LEAF_NODE	39:24	39:24	13	(
ARGUMENT	39:25	39:25	13	p
FIELD	39:25	39:25	14	p
LEAF_NODE	39:25	39:25	15	p
LEAF_NODE	39:26	39:26	13	)
LEAF_NODE	39:27	39:27	9	;
SELECTION	40:2	41:3	6	
KEYWORD	40:2	40:2	7	else
LEAF_NODE	40:2	40:2	8	else
STATEMENTS	41:3	41:3	7	
JUMP_STATEMENT	41:3	41:17	8	goto finally_1 ;
KEYWORD	41:3	41:3	9	goto
LEAF_NODE	41:3	41:3	10	goto
DESTINATION	41:8	41:8	9	finally_1
LEAF_NODE	41:8	41:8	10	finally_1
LEAF_NODE	41:17	41:17	9	;
EXPR_STATEMENT	42:2	42:5	6	i -- ;
EXPR	42:2	42:2	7	i --
FIELD	42:2	42:3	8	i --
LEAF_NODE	42:2	42:2	9	i
LEAF_NODE	42:3	42:3	9	--
LEAF_NODE	42:5	42:5	7	;
LEAF_NODE	43:1	43:1	5	}
LABEL	44:0	44:9	3	finally_1 :
LEAF_NODE	44:0	44:0	4	finally_1
LEAF_NODE	44:9	44:9	4	:
EXPR_STATEMENT	45:1	45:27	3	g_free ( caseless_haystack ) ;
EXPR	45:1	45:1	4	g_free ( caseless_haystack )
FUNCTION_CALL	45:1	45:26	5	g_free ( caseless_haystack )
CALLEE	45:1	45:1	6	g_free
LEAF_NODE	45:1	45:1	7	g_free
LEAF_NODE	45:8	45:8	6	(
ARGUMENT	45:9	45:9	6	caseless_haystack
FIELD	45:9	45:9	7	caseless_haystack
LEAF_NODE	45:9	45:9	8	caseless_haystack
LEAF_NODE	45:26	45:26	6	)
LEAF_NODE	45:27	45:27	4	;
JUMP_STATEMENT	46:1	46:11	3	return ret ;
KEYWORD	46:1	46:1	4	return
LEAF_NODE	46:1	46:1	5	return
DESTINATION	46:8	46:8	4	ret
EXPR	46:8	46:8	5	ret
FIELD	46:8	46:8	6	ret
LEAF_NODE	46:8	46:8	7	ret
LEAF_NODE	46:11	46:11	4	;
LEAF_NODE	47:0	47:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	sha256_init
LEAF_NODE	2:0	2:0	3	sha256_init
PARAMETER_LIST	2:11	2:53	2	( PurpleCipherContext * context , void * extra )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:33	3	PurpleCipherContext * context
TYPE	2:12	2:32	4	PurpleCipherContext *
TYPE_NAME	2:12	2:12	5	PurpleCipherContext
LEAF_NODE	2:12	2:12	6	PurpleCipherContext
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	context
LEAF_NODE	2:33	2:33	5	context
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:48	3	void * extra
TYPE	2:42	2:47	4	void *
TYPE_NAME	2:42	2:42	5	void
LEAF_NODE	2:42	2:42	6	void
POINTER	2:47	2:47	5	*
LEAF_NODE	2:47	2:47	6	*
NAME	2:48	2:48	4	extra
LEAF_NODE	2:48	2:48	5	extra
LEAF_NODE	2:53	2:53	3	)
LEAF_NODE	2:55	2:55	2	{
STATEMENTS	3:1	6:1	2	
SIMPLE_DECL	3:1	3:33	3	struct SHA256Context * sha256_ctx ;
VAR_DECL	3:1	3:23	4	struct SHA256Context * sha256_ctx
TYPE	3:1	3:22	5	struct SHA256Context *
TYPE_NAME	3:1	3:8	6	struct SHA256Context
LEAF_NODE	3:1	3:1	7	struct
LEAF_NODE	3:8	3:8	7	SHA256Context
POINTER	3:22	3:22	6	*
LEAF_NODE	3:22	3:22	7	*
NAME	3:23	3:23	5	sha256_ctx
LEAF_NODE	3:23	3:23	6	sha256_ctx
LEAF_NODE	3:33	3:33	4	;
LEAF_NODE	4:1	4:1	3	sha256_ctx
LEAF_NODE	4:12	4:12	3	=
LEAF_NODE	4:14	4:14	3	g_new0
LEAF_NODE	4:20	4:20	3	(
LEAF_NODE	4:21	4:21	3	struct
LEAF_NODE	4:28	4:28	3	SHA256Context
LEAF_NODE	4:41	4:41	3	,
LEAF_NODE	4:43	4:43	3	1
LEAF_NODE	4:44	4:44	3	)
LEAF_NODE	4:45	4:45	3	;
EXPR_STATEMENT	5:1	5:52	3	purple_cipher_context_set_data ( context , sha256_ctx ) ;
EXPR	5:1	5:1	4	purple_cipher_context_set_data ( context , sha256_ctx )
FUNCTION_CALL	5:1	5:51	5	purple_cipher_context_set_data ( context , sha256_ctx )
CALLEE	5:1	5:1	6	purple_cipher_context_set_data
LEAF_NODE	5:1	5:1	7	purple_cipher_context_set_data
LEAF_NODE	5:31	5:31	6	(
ARGUMENT	5:32	5:32	6	context
FIELD	5:32	5:32	7	context
LEAF_NODE	5:32	5:32	8	context
LEAF_NODE	5:39	5:39	6	,
ARGUMENT	5:41	5:41	6	sha256_ctx
FIELD	5:41	5:41	7	sha256_ctx
LEAF_NODE	5:41	5:41	8	sha256_ctx
LEAF_NODE	5:51	5:51	6	)
LEAF_NODE	5:52	5:52	4	;
EXPR_STATEMENT	6:1	6:44	3	purple_cipher_context_reset ( context , extra ) ;
EXPR	6:1	6:1	4	purple_cipher_context_reset ( context , extra )
FUNCTION_CALL	6:1	6:43	5	purple_cipher_context_reset ( context , extra )
CALLEE	6:1	6:1	6	purple_cipher_context_reset
LEAF_NODE	6:1	6:1	7	purple_cipher_context_reset
LEAF_NODE	6:28	6:28	6	(
ARGUMENT	6:29	6:29	6	context
FIELD	6:29	6:29	7	context
LEAF_NODE	6:29	6:29	8	context
LEAF_NODE	6:36	6:36	6	,
ARGUMENT	6:38	6:38	6	extra
FIELD	6:38	6:38	7	extra
LEAF_NODE	6:38	6:38	8	extra
LEAF_NODE	6:43	6:43	6	)
LEAF_NODE	6:44	6:44	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:7	2:0	0	
SIMPLE_DECL	1:7	1:63	1	void buddy_ticker_update_contact ; buddy_ticker_update_contact buddy_ticker_update_contact ( PurpleContact * contact ) ;
VAR_DECL	1:7	1:12	2	void buddy_ticker_update_contact ; buddy_ticker_update_contact buddy_ticker_update_contact ( PurpleContact * contact )
TYPE	1:7	1:7	3	void
TYPE_NAME	1:7	1:7	4	void
LEAF_NODE	1:7	1:7	5	void
NAME	1:12	1:12	3	buddy_ticker_update_contact
LEAF_NODE	1:12	1:12	4	buddy_ticker_update_contact
LEAF_NODE	0:0	0:0	3	;
INIT	1:12	1:12	3	buddy_ticker_update_contact buddy_ticker_update_contact ( PurpleContact * contact )
ASSIGN	1:12	1:39	4	buddy_ticker_update_contact buddy_ticker_update_contact ( PurpleContact * contact )
LVAL	1:12	1:12	5	buddy_ticker_update_contact
NAME	1:12	1:12	6	buddy_ticker_update_contact
LEAF_NODE	1:12	1:12	7	buddy_ticker_update_contact
ASSIGN_OP	1:12	1:12	5	buddy_ticker_update_contact
NAME	1:12	1:12	6	buddy_ticker_update_contact
LEAF_NODE	1:12	1:12	7	buddy_ticker_update_contact
RVAL	1:39	1:62	5	( PurpleContact * contact )
LEAF_NODE	1:39	1:39	6	(
EXPR	1:40	1:55	6	PurpleContact * contact
FIELD	1:40	1:40	7	PurpleContact
LEAF_NODE	1:40	1:40	8	PurpleContact
LEAF_NODE	1:54	1:54	7	*
FIELD	1:55	1:55	7	contact
LEAF_NODE	1:55	1:55	8	contact
LEAF_NODE	1:62	1:62	6	)
LEAF_NODE	1:63	1:63	2	;
FUNCTION_DEF	2:0	7:0	1	
RETURN_TYPE	2:0	2:7	2	static gboolean
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	gboolean
LEAF_NODE	2:7	2:7	4	gboolean
FUNCTION_NAME	2:16	2:16	2	buddy_ticker_destroy_window
LEAF_NODE	2:16	2:16	3	buddy_ticker_destroy_window
PARAMETER_LIST	2:43	3:35	2	( GtkWidget * window , GdkEventAny * event , gpointer data )
LEAF_NODE	2:43	2:43	3	(
PARAMETER_DECL	2:44	2:55	3	GtkWidget * window
TYPE	2:44	2:54	4	GtkWidget *
TYPE_NAME	2:44	2:44	5	GtkWidget
LEAF_NODE	2:44	2:44	6	GtkWidget
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	window
LEAF_NODE	2:55	2:55	5	window
LEAF_NODE	2:61	2:61	3	,
PARAMETER_DECL	3:2	3:15	3	GdkEventAny * event
TYPE	3:2	3:14	4	GdkEventAny *
TYPE_NAME	3:2	3:2	5	GdkEventAny
LEAF_NODE	3:2	3:2	6	GdkEventAny
POINTER	3:14	3:14	5	*
LEAF_NODE	3:14	3:14	6	*
NAME	3:15	3:15	4	event
LEAF_NODE	3:15	3:15	5	event
LEAF_NODE	3:20	3:20	3	,
PARAMETER_DECL	3:22	3:31	3	gpointer data
TYPE	3:22	3:22	4	gpointer
TYPE_NAME	3:22	3:22	5	gpointer
LEAF_NODE	3:22	3:22	6	gpointer
NAME	3:31	3:31	4	data
LEAF_NODE	3:31	3:31	5	data
LEAF_NODE	3:35	3:35	3	)
LEAF_NODE	3:37	3:37	2	{
STATEMENTS	4:1	6:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:3	4:3	4	(
CONDITION	4:4	4:4	4	window
EXPR	4:4	4:4	5	window
FIELD	4:4	4:4	6	window
LEAF_NODE	4:4	4:4	7	window
LEAF_NODE	4:10	4:10	4	)
STATEMENTS	5:2	5:2	4	
EXPR_STATEMENT	5:2	5:25	5	gtk_widget_hide ( window ) ;
EXPR	5:2	5:2	6	gtk_widget_hide ( window )
FUNCTION_CALL	5:2	5:24	7	gtk_widget_hide ( window )
CALLEE	5:2	5:2	8	gtk_widget_hide
LEAF_NODE	5:2	5:2	9	gtk_widget_hide
LEAF_NODE	5:17	5:17	8	(
ARGUMENT	5:18	5:18	8	window
FIELD	5:18	5:18	9	window
LEAF_NODE	5:18	5:18	10	window
LEAF_NODE	5:24	5:24	8	)
LEAF_NODE	5:25	5:25	6	;
JUMP_STATEMENT	6:1	6:12	3	return TRUE ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	TRUE
EXPR	6:8	6:8	5	TRUE
FIELD	6:8	6:8	6	TRUE
LEAF_NODE	6:8	6:8	7	TRUE
LEAF_NODE	6:12	6:12	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:17	2	PurpleConnection *
TYPE_NAME	1:0	1:0	3	PurpleConnection
LEAF_NODE	1:0	1:0	4	PurpleConnection
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	purple_conversation_get_gc
LEAF_NODE	2:0	2:0	3	purple_conversation_get_gc
PARAMETER_LIST	2:26	2:57	2	( const PurpleConversation * conv )
LEAF_NODE	2:26	2:26	3	(
PARAMETER_DECL	2:27	2:53	3	const PurpleConversation * conv
TYPE	2:27	2:52	4	const PurpleConversation *
TYPE_NAME	2:27	2:33	5	const PurpleConversation
LEAF_NODE	2:27	2:27	6	const
LEAF_NODE	2:33	2:33	6	PurpleConversation
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	conv
LEAF_NODE	2:53	2:53	5	conv
LEAF_NODE	2:57	2:57	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:23	3	PurpleAccount * account ;
VAR_DECL	4:1	4:16	4	PurpleAccount * account
TYPE	4:1	4:15	5	PurpleAccount *
TYPE_NAME	4:1	4:1	6	PurpleAccount
LEAF_NODE	4:1	4:1	7	PurpleAccount
POINTER	4:15	4:15	6	*
LEAF_NODE	4:15	4:15	7	*
NAME	4:16	4:16	5	account
LEAF_NODE	4:16	4:16	6	account
LEAF_NODE	4:23	4:23	4	;
EXPR_STATEMENT	5:1	5:41	3	g_return_val_if_fail ( conv != NULL , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( conv != NULL , NULL )
FUNCTION_CALL	5:1	5:40	5	g_return_val_if_fail ( conv != NULL , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:30	6	conv != NULL
FIELD	5:22	5:22	7	conv
LEAF_NODE	5:22	5:22	8	conv
EQ_OPERATOR	5:27	5:27	7	!=
LEAF_NODE	5:27	5:27	8	!=
FIELD	5:30	5:30	7	NULL
LEAF_NODE	5:30	5:30	8	NULL
LEAF_NODE	5:34	5:34	6	,
ARGUMENT	5:36	5:36	6	NULL
FIELD	5:36	5:36	7	NULL
LEAF_NODE	5:36	5:36	8	NULL
LEAF_NODE	5:40	5:40	6	)
LEAF_NODE	5:41	5:41	4	;
EXPR_STATEMENT	6:1	6:48	3	account = purple_conversation_get_account ( conv ) ;
EXPR	6:1	6:1	4	account = purple_conversation_get_account ( conv )
ASSIGN	6:1	6:11	5	account = purple_conversation_get_account ( conv )
LVAL	6:1	6:1	6	account
FIELD	6:1	6:1	7	account
LEAF_NODE	6:1	6:1	8	account
ASSIGN_OP	6:9	6:9	6	=
LEAF_NODE	6:9	6:9	7	=
RVAL	6:11	6:11	6	purple_conversation_get_account ( conv )
FUNCTION_CALL	6:11	6:47	7	purple_conversation_get_account ( conv )
CALLEE	6:11	6:11	8	purple_conversation_get_account
LEAF_NODE	6:11	6:11	9	purple_conversation_get_account
LEAF_NODE	6:42	6:42	8	(
ARGUMENT	6:43	6:43	8	conv
FIELD	6:43	6:43	9	conv
LEAF_NODE	6:43	6:43	10	conv
LEAF_NODE	6:47	6:47	8	)
LEAF_NODE	6:48	6:48	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	account == NULL
EXPR	7:5	7:16	5	account == NULL
FIELD	7:5	7:5	6	account
LEAF_NODE	7:5	7:5	7	account
EQ_OPERATOR	7:13	7:13	6	==
LEAF_NODE	7:13	7:13	7	==
FIELD	7:16	7:16	6	NULL
LEAF_NODE	7:16	7:16	7	NULL
LEAF_NODE	7:20	7:20	4	)
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:13	5	return NULL ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
DESTINATION	8:9	8:9	6	NULL
EXPR	8:9	8:9	7	NULL
FIELD	8:9	8:9	8	NULL
LEAF_NODE	8:9	8:9	9	NULL
LEAF_NODE	8:13	8:13	6	;
JUMP_STATEMENT	9:1	9:19	3	return account -> gc ;
KEYWORD	9:1	9:1	4	return
LEAF_NODE	9:1	9:1	5	return
DESTINATION	9:8	9:8	4	account -> gc
EXPR	9:8	9:8	5	account -> gc
FIELD	9:8	9:17	6	account -> gc
LEAF_NODE	9:8	9:8	7	account
LEAF_NODE	9:15	9:15	7	->
LEAF_NODE	9:17	9:17	7	gc
LEAF_NODE	9:19	9:19	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	displayed_msg_update_ui_cb
LEAF_NODE	2:0	2:0	3	displayed_msg_update_ui_cb
PARAMETER_LIST	2:26	2:77	2	( PidginConversation * gtkconv , PurpleBlistNode * node )
LEAF_NODE	2:26	2:26	3	(
PARAMETER_DECL	2:27	2:47	3	PidginConversation * gtkconv
TYPE	2:27	2:46	4	PidginConversation *
TYPE_NAME	2:27	2:27	5	PidginConversation
LEAF_NODE	2:27	2:27	6	PidginConversation
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	gtkconv
LEAF_NODE	2:47	2:47	5	gtkconv
LEAF_NODE	2:54	2:54	3	,
PARAMETER_DECL	2:56	2:73	3	PurpleBlistNode * node
TYPE	2:56	2:72	4	PurpleBlistNode *
TYPE_NAME	2:56	2:56	5	PurpleBlistNode
LEAF_NODE	2:56	2:56	6	PurpleBlistNode
POINTER	2:72	2:72	5	*
LEAF_NODE	2:72	2:72	6	*
NAME	2:73	2:73	4	node
LEAF_NODE	2:73	2:73	5	node
LEAF_NODE	2:77	2:77	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:36	3	PidginBlistNode * ui ; ui = node -> ui_data ;
VAR_DECL	4:1	4:18	4	PidginBlistNode * ui ; ui = node -> ui_data
TYPE	4:1	4:17	5	PidginBlistNode *
TYPE_NAME	4:1	4:1	6	PidginBlistNode
LEAF_NODE	4:1	4:1	7	PidginBlistNode
POINTER	4:17	4:17	6	*
LEAF_NODE	4:17	4:17	7	*
NAME	4:18	4:18	5	ui
LEAF_NODE	4:18	4:18	6	ui
LEAF_NODE	0:0	0:0	5	;
INIT	4:18	4:18	5	ui = node -> ui_data
ASSIGN	4:18	4:23	6	ui = node -> ui_data
LVAL	4:18	4:18	7	ui
NAME	4:18	4:18	8	ui
LEAF_NODE	4:18	4:18	9	ui
ASSIGN_OP	4:21	4:21	7	=
LEAF_NODE	4:21	4:21	8	=
RVAL	4:23	4:23	7	node -> ui_data
FIELD	4:23	4:29	8	node -> ui_data
LEAF_NODE	4:23	4:23	9	node
LEAF_NODE	4:27	4:27	9	->
LEAF_NODE	4:29	4:29	9	ui_data
LEAF_NODE	4:36	4:36	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	ui -> conv . conv != gtkconv -> active_conv
EXPR	5:5	5:22	5	ui -> conv . conv != gtkconv -> active_conv
FIELD	5:5	5:14	6	ui -> conv . conv
LEAF_NODE	5:5	5:5	7	ui
LEAF_NODE	5:7	5:7	7	->
LEAF_NODE	5:9	5:9	7	conv
LEAF_NODE	5:13	5:13	7	.
LEAF_NODE	5:14	5:14	7	conv
EQ_OPERATOR	5:19	5:19	6	!=
LEAF_NODE	5:19	5:19	7	!=
FIELD	5:22	5:31	6	gtkconv -> active_conv
LEAF_NODE	5:22	5:22	7	gtkconv
LEAF_NODE	5:29	5:29	7	->
LEAF_NODE	5:31	5:31	7	active_conv
LEAF_NODE	5:42	5:42	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:8	5	return DESTINATION ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	6:8	6:8	6	;
EXPR_STATEMENT	7:1	8:69	3	ui -> conv . flags &= ~ ( PIDGIN_BLIST_NODE_HAS_PENDING_MESSAGE | PIDGIN_BLIST_CHAT_HAS_PENDING_MESSAGE_WITH_NICK ) ;
EXPR	7:1	7:1	4	ui -> conv . flags &= ~ ( PIDGIN_BLIST_NODE_HAS_PENDING_MESSAGE | PIDGIN_BLIST_CHAT_HAS_PENDING_MESSAGE_WITH_NICK )
ASSIGN	7:1	7:19	5	ui -> conv . flags &= ~ ( PIDGIN_BLIST_NODE_HAS_PENDING_MESSAGE | PIDGIN_BLIST_CHAT_HAS_PENDING_MESSAGE_WITH_NICK )
LVAL	7:1	7:1	6	ui -> conv . flags
FIELD	7:1	7:10	7	ui -> conv . flags
LEAF_NODE	7:1	7:1	8	ui
LEAF_NODE	7:3	7:3	8	->
LEAF_NODE	7:5	7:5	8	conv
LEAF_NODE	7:9	7:9	8	.
LEAF_NODE	7:10	7:10	8	flags
ASSIGN_OP	7:16	7:16	6	&=
LEAF_NODE	7:16	7:16	7	&=
RVAL	7:19	7:19	6	~ ( PIDGIN_BLIST_NODE_HAS_PENDING_MESSAGE | PIDGIN_BLIST_CHAT_HAS_PENDING_MESSAGE_WITH_NICK )
UNARY_EXPR	7:19	8:68	7	~ ( PIDGIN_BLIST_NODE_HAS_PENDING_MESSAGE | PIDGIN_BLIST_CHAT_HAS_PENDING_MESSAGE_WITH_NICK )
UNARY_OPERATOR	7:19	7:19	8	~
LEAF_NODE	7:19	7:19	9	~
LEAF_NODE	7:20	7:20	8	(
BIT_OR	7:21	8:21	8	PIDGIN_BLIST_NODE_HAS_PENDING_MESSAGE | PIDGIN_BLIST_CHAT_HAS_PENDING_MESSAGE_WITH_NICK
BIT_OR_ELEM	7:21	7:21	9	PIDGIN_BLIST_NODE_HAS_PENDING_MESSAGE
FIELD	7:21	7:21	10	PIDGIN_BLIST_NODE_HAS_PENDING_MESSAGE
LEAF_NODE	7:21	7:21	11	PIDGIN_BLIST_NODE_HAS_PENDING_MESSAGE
LEAF_NODE	7:59	7:59	9	|
BIT_OR_ELEM	8:21	8:21	9	PIDGIN_BLIST_CHAT_HAS_PENDING_MESSAGE_WITH_NICK
FIELD	8:21	8:21	10	PIDGIN_BLIST_CHAT_HAS_PENDING_MESSAGE_WITH_NICK
LEAF_NODE	8:21	8:21	11	PIDGIN_BLIST_CHAT_HAS_PENDING_MESSAGE_WITH_NICK
LEAF_NODE	8:68	8:68	8	)
LEAF_NODE	8:69	8:69	4	;
EXPR_STATEMENT	9:1	9:46	3	pidgin_blist_update ( purple_get_blist ( ) , node ) ;
EXPR	9:1	9:1	4	pidgin_blist_update ( purple_get_blist ( ) , node )
FUNCTION_CALL	9:1	9:45	5	pidgin_blist_update ( purple_get_blist ( ) , node )
CALLEE	9:1	9:1	6	pidgin_blist_update
LEAF_NODE	9:1	9:1	7	pidgin_blist_update
LEAF_NODE	9:20	9:20	6	(
ARGUMENT	9:21	9:21	6	purple_get_blist ( )
FUNCTION_CALL	9:21	9:38	7	purple_get_blist ( )
CALLEE	9:21	9:21	8	purple_get_blist
LEAF_NODE	9:21	9:21	9	purple_get_blist
LEAF_NODE	9:37	9:37	8	(
LEAF_NODE	9:38	9:38	8	)
LEAF_NODE	9:39	9:39	6	,
ARGUMENT	9:41	9:41	6	node
FIELD	9:41	9:41	7	node
LEAF_NODE	9:41	9:41	8	node
LEAF_NODE	9:45	9:45	6	)
LEAF_NODE	9:46	9:46	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	10:0	1	
RETURN_TYPE	2:0	2:0	2	gboolean
TYPE_NAME	2:0	2:0	3	gboolean
LEAF_NODE	2:0	2:0	4	gboolean
FUNCTION_NAME	2:9	2:9	2	gnt_style_get_bool
LEAF_NODE	2:9	2:9	3	gnt_style_get_bool
PARAMETER_LIST	2:27	2:56	2	( GntStyle style , gboolean def )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:37	3	GntStyle style
TYPE	2:28	2:28	4	GntStyle
TYPE_NAME	2:28	2:28	5	GntStyle
LEAF_NODE	2:28	2:28	6	GntStyle
NAME	2:37	2:37	4	style
LEAF_NODE	2:37	2:37	5	style
LEAF_NODE	2:42	2:42	3	,
PARAMETER_DECL	2:44	2:53	3	gboolean def
TYPE	2:44	2:44	4	gboolean
TYPE_NAME	2:44	2:44	5	gboolean
LEAF_NODE	2:44	2:44	6	gboolean
NAME	2:53	2:53	4	def
LEAF_NODE	2:53	2:53	5	def
LEAF_NODE	2:56	2:56	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:17	3	const char * str ;
VAR_DECL	4:1	4:14	4	const char * str
TYPE	4:1	4:12	5	const char *
TYPE_NAME	4:1	4:7	6	const char
LEAF_NODE	4:1	4:1	7	const
LEAF_NODE	4:7	4:7	7	char
POINTER	4:12	4:12	6	*
LEAF_NODE	4:12	4:12	7	*
NAME	4:14	4:14	5	str
LEAF_NODE	4:14	4:14	6	str
LEAF_NODE	4:17	4:17	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	bool_styles [ style ] != - 1
EXPR	5:5	5:27	5	bool_styles [ style ] != - 1
FIELD	5:5	5:22	6	bool_styles [ style ]
LEAF_NODE	5:5	5:5	7	bool_styles
LEAF_NODE	5:16	5:16	7	[
EXPR	5:17	5:17	7	style
FIELD	5:17	5:17	8	style
LEAF_NODE	5:17	5:17	9	style
LEAF_NODE	5:22	5:22	7	]
EQ_OPERATOR	5:24	5:24	6	!=
LEAF_NODE	5:24	5:24	7	!=
UNARY_EXPR	5:27	5:28	6	- 1
UNARY_OPERATOR	5:27	5:27	7	-
LEAF_NODE	5:27	5:27	8	-
FIELD	5:28	5:28	7	1
LEAF_NODE	5:28	5:28	8	1
LEAF_NODE	5:29	5:29	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:27	5	return bool_styles [ style ] ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
DESTINATION	6:9	6:9	6	bool_styles [ style ]
EXPR	6:9	6:9	7	bool_styles [ style ]
FIELD	6:9	6:26	8	bool_styles [ style ]
LEAF_NODE	6:9	6:9	9	bool_styles
LEAF_NODE	6:20	6:20	9	[
EXPR	6:21	6:21	9	style
FIELD	6:21	6:21	10	style
LEAF_NODE	6:21	6:21	11	style
LEAF_NODE	6:26	6:26	9	]
LEAF_NODE	6:27	6:27	6	;
EXPR_STATEMENT	7:1	7:27	3	str = gnt_style_get ( style ) ;
EXPR	7:1	7:1	4	str = gnt_style_get ( style )
ASSIGN	7:1	7:7	5	str = gnt_style_get ( style )
LVAL	7:1	7:1	6	str
FIELD	7:1	7:1	7	str
LEAF_NODE	7:1	7:1	8	str
ASSIGN_OP	7:5	7:5	6	=
LEAF_NODE	7:5	7:5	7	=
RVAL	7:7	7:7	6	gnt_style_get ( style )
FUNCTION_CALL	7:7	7:26	7	gnt_style_get ( style )
CALLEE	7:7	7:7	8	gnt_style_get
LEAF_NODE	7:7	7:7	9	gnt_style_get
LEAF_NODE	7:20	7:20	8	(
ARGUMENT	7:21	7:21	8	style
FIELD	7:21	7:21	9	style
LEAF_NODE	7:21	7:21	10	style
LEAF_NODE	7:26	7:26	8	)
LEAF_NODE	7:27	7:27	4	;
EXPR_STATEMENT	8:1	8:59	3	bool_styles [ style ] = str ? gnt_style_parse_bool ( str ) : def ;
EXPR	8:1	8:1	4	bool_styles [ style ] = str ? gnt_style_parse_bool ( str ) : def
ASSIGN	8:1	8:22	5	bool_styles [ style ] = str ? gnt_style_parse_bool ( str ) : def
LVAL	8:1	8:1	6	bool_styles [ style ]
FIELD	8:1	8:18	7	bool_styles [ style ]
LEAF_NODE	8:1	8:1	8	bool_styles
LEAF_NODE	8:12	8:12	8	[
EXPR	8:13	8:13	8	style
FIELD	8:13	8:13	9	style
LEAF_NODE	8:13	8:13	10	style
LEAF_NODE	8:18	8:18	8	]
ASSIGN_OP	8:20	8:20	6	=
LEAF_NODE	8:20	8:20	7	=
RVAL	8:22	8:22	6	str ? gnt_style_parse_bool ( str ) : def
COND_EXPR	8:22	8:56	7	str ? gnt_style_parse_bool ( str ) : def
CONDITION	8:22	8:22	8	str
FIELD	8:22	8:22	9	str
LEAF_NODE	8:22	8:22	10	str
LEAF_NODE	8:26	8:26	8	?
EXPR	8:28	8:28	8	gnt_style_parse_bool ( str )
FUNCTION_CALL	8:28	8:52	9	gnt_style_parse_bool ( str )
CALLEE	8:28	8:28	10	gnt_style_parse_bool
LEAF_NODE	8:28	8:28	11	gnt_style_parse_bool
LEAF_NODE	8:48	8:48	10	(
ARGUMENT	8:49	8:49	10	str
FIELD	8:49	8:49	11	str
LEAF_NODE	8:49	8:49	12	str
LEAF_NODE	8:52	8:52	10	)
LEAF_NODE	8:54	8:54	8	:
FIELD	8:56	8:56	8	def
LEAF_NODE	8:56	8:56	9	def
LEAF_NODE	8:59	8:59	4	;
JUMP_STATEMENT	9:1	9:26	3	return bool_styles [ style ] ;
KEYWORD	9:1	9:1	4	return
LEAF_NODE	9:1	9:1	5	return
DESTINATION	9:8	9:8	4	bool_styles [ style ]
EXPR	9:8	9:8	5	bool_styles [ style ]
FIELD	9:8	9:25	6	bool_styles [ style ]
LEAF_NODE	9:8	9:8	7	bool_styles
LEAF_NODE	9:19	9:19	7	[
EXPR	9:20	9:20	7	style
FIELD	9:20	9:20	8	style
LEAF_NODE	9:20	9:20	9	style
LEAF_NODE	9:25	9:25	7	]
LEAF_NODE	9:26	9:26	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:6	2	GList *
TYPE_NAME	1:0	1:0	3	GList
LEAF_NODE	1:0	1:0	4	GList
LEAF_NODE	1:6	1:6	3	*
FUNCTION_NAME	2:0	2:0	2	purple_conv_chat_set_ignored
LEAF_NODE	2:0	2:0	3	purple_conv_chat_set_ignored
PARAMETER_LIST	2:28	2:65	2	( PurpleConvChat * chat , GList * ignored )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:45	3	PurpleConvChat * chat
TYPE	2:29	2:44	4	PurpleConvChat *
TYPE_NAME	2:29	2:29	5	PurpleConvChat
LEAF_NODE	2:29	2:29	6	PurpleConvChat
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	chat
LEAF_NODE	2:45	2:45	5	chat
LEAF_NODE	2:49	2:49	3	,
PARAMETER_DECL	2:51	2:58	3	GList * ignored
TYPE	2:51	2:57	4	GList *
TYPE_NAME	2:51	2:51	5	GList
LEAF_NODE	2:51	2:51	6	GList
POINTER	2:57	2:57	5	*
LEAF_NODE	2:57	2:57	6	*
NAME	2:58	2:58	4	ignored
LEAF_NODE	2:58	2:58	5	ignored
LEAF_NODE	2:65	2:65	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
EXPR_STATEMENT	4:1	4:41	3	g_return_val_if_fail ( chat != NULL , NULL ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( chat != NULL , NULL )
FUNCTION_CALL	4:1	4:40	5	g_return_val_if_fail ( chat != NULL , NULL )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:30	6	chat != NULL
FIELD	4:22	4:22	7	chat
LEAF_NODE	4:22	4:22	8	chat
EQ_OPERATOR	4:27	4:27	7	!=
LEAF_NODE	4:27	4:27	8	!=
FIELD	4:30	4:30	7	NULL
LEAF_NODE	4:30	4:30	8	NULL
LEAF_NODE	4:34	4:34	6	,
ARGUMENT	4:36	4:36	6	NULL
FIELD	4:36	4:36	7	NULL
LEAF_NODE	4:36	4:36	8	NULL
LEAF_NODE	4:40	4:40	6	)
LEAF_NODE	4:41	4:41	4	;
EXPR_STATEMENT	5:1	5:24	3	chat -> ignored = ignored ;
EXPR	5:1	5:1	4	chat -> ignored = ignored
ASSIGN	5:1	5:17	5	chat -> ignored = ignored
LVAL	5:1	5:1	6	chat -> ignored
FIELD	5:1	5:7	7	chat -> ignored
LEAF_NODE	5:1	5:1	8	chat
LEAF_NODE	5:5	5:5	8	->
LEAF_NODE	5:7	5:7	8	ignored
ASSIGN_OP	5:15	5:15	6	=
LEAF_NODE	5:15	5:15	7	=
RVAL	5:17	5:17	6	ignored
FIELD	5:17	5:17	7	ignored
LEAF_NODE	5:17	5:17	8	ignored
LEAF_NODE	5:24	5:24	4	;
JUMP_STATEMENT	6:1	6:15	3	return ignored ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	ignored
EXPR	6:8	6:8	5	ignored
FIELD	6:8	6:8	6	ignored
LEAF_NODE	6:8	6:8	7	ignored
LEAF_NODE	6:15	6:15	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	12:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	oscar_user_info_convert_and_add_hyperlink
LEAF_NODE	2:0	2:0	3	oscar_user_info_convert_and_add_hyperlink
PARAMETER_LIST	2:41	3:65	2	( PurpleAccount * account , OscarData * od , PurpleNotifyUserInfo * user_info , const char * name , const char * value , const char * url_prefix )
LEAF_NODE	2:41	2:41	3	(
PARAMETER_DECL	2:42	2:57	3	PurpleAccount * account
TYPE	2:42	2:56	4	PurpleAccount *
TYPE_NAME	2:42	2:42	5	PurpleAccount
LEAF_NODE	2:42	2:42	6	PurpleAccount
POINTER	2:56	2:56	5	*
LEAF_NODE	2:56	2:56	6	*
NAME	2:57	2:57	4	account
LEAF_NODE	2:57	2:57	5	account
LEAF_NODE	2:64	2:64	3	,
PARAMETER_DECL	2:66	2:77	3	OscarData * od
TYPE	2:66	2:76	4	OscarData *
TYPE_NAME	2:66	2:66	5	OscarData
LEAF_NODE	2:66	2:66	6	OscarData
POINTER	2:76	2:76	5	*
LEAF_NODE	2:76	2:76	6	*
NAME	2:77	2:77	4	od
LEAF_NODE	2:77	2:77	5	od
LEAF_NODE	2:79	2:79	3	,
PARAMETER_DECL	2:81	2:103	3	PurpleNotifyUserInfo * user_info
TYPE	2:81	2:102	4	PurpleNotifyUserInfo *
TYPE_NAME	2:81	2:81	5	PurpleNotifyUserInfo
LEAF_NODE	2:81	2:81	6	PurpleNotifyUserInfo
POINTER	2:102	2:102	5	*
LEAF_NODE	2:102	2:102	6	*
NAME	2:103	2:103	4	user_info
LEAF_NODE	2:103	2:103	5	user_info
LEAF_NODE	2:112	2:112	3	,
PARAMETER_DECL	3:6	3:18	3	const char * name
TYPE	3:6	3:17	4	const char *
TYPE_NAME	3:6	3:12	5	const char
LEAF_NODE	3:6	3:6	6	const
LEAF_NODE	3:12	3:12	6	char
POINTER	3:17	3:17	5	*
LEAF_NODE	3:17	3:17	6	*
NAME	3:18	3:18	4	name
LEAF_NODE	3:18	3:18	5	name
LEAF_NODE	3:22	3:22	3	,
PARAMETER_DECL	3:24	3:36	3	const char * value
TYPE	3:24	3:35	4	const char *
TYPE_NAME	3:24	3:30	5	const char
LEAF_NODE	3:24	3:24	6	const
LEAF_NODE	3:30	3:30	6	char
POINTER	3:35	3:35	5	*
LEAF_NODE	3:35	3:35	6	*
NAME	3:36	3:36	4	value
LEAF_NODE	3:36	3:36	5	value
LEAF_NODE	3:41	3:41	3	,
PARAMETER_DECL	3:43	3:55	3	const char * url_prefix
TYPE	3:43	3:54	4	const char *
TYPE_NAME	3:43	3:49	5	const char
LEAF_NODE	3:43	3:43	6	const
LEAF_NODE	3:49	3:49	6	char
POINTER	3:54	3:54	5	*
LEAF_NODE	3:54	3:54	6	*
NAME	3:55	3:55	4	url_prefix
LEAF_NODE	3:55	3:55	5	url_prefix
LEAF_NODE	3:65	3:65	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	6:1	2	
SIMPLE_DECL	5:1	5:12	3	gchar * utf8 ;
VAR_DECL	5:1	5:8	4	gchar * utf8
TYPE	5:1	5:7	5	gchar *
TYPE_NAME	5:1	5:1	6	gchar
LEAF_NODE	5:1	5:1	7	gchar
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	utf8
LEAF_NODE	5:8	5:8	6	utf8
LEAF_NODE	5:12	5:12	4	;
SELECTION	6:1	6:79	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	value && value [ 0 ] && ( utf8 = oscar_utf8_try_convert ( account , od , value ) )
EXPR	6:5	6:5	5	value && value [ 0 ] && ( utf8 = oscar_utf8_try_convert ( account , od , value ) )
AND	6:5	6:14	6	value && value [ 0 ] && ( utf8 = oscar_utf8_try_convert ( account , od , value ) )
EXPR	6:5	6:5	7	value
FIELD	6:5	6:5	8	value
LEAF_NODE	6:5	6:5	9	value
LEAF_NODE	6:11	6:11	7	&&
EXPR	6:14	6:14	7	value [ 0 ] && ( utf8 = oscar_utf8_try_convert ( account , od , value ) )
AND	6:14	6:26	8	value [ 0 ] && ( utf8 = oscar_utf8_try_convert ( account , od , value ) )
EXPR	6:14	6:14	9	value [ 0 ]
FIELD	6:14	6:21	10	value [ 0 ]
LEAF_NODE	6:14	6:14	11	value
LEAF_NODE	6:19	6:19	11	[
EXPR	6:20	6:20	11	0
FIELD	6:20	6:20	12	0
LEAF_NODE	6:20	6:20	13	0
LEAF_NODE	6:21	6:21	11	]
LEAF_NODE	6:23	6:23	9	&&
EXPR	6:26	6:76	9	( utf8 = oscar_utf8_try_convert ( account , od , value ) )
LEAF_NODE	6:26	6:26	10	(
ASSIGN	6:27	6:34	10	utf8 = oscar_utf8_try_convert ( account , od , value )
LVAL	6:27	6:27	11	utf8
FIELD	6:27	6:27	12	utf8
LEAF_NODE	6:27	6:27	13	utf8
ASSIGN_OP	6:32	6:32	11	=
LEAF_NODE	6:32	6:32	12	=
RVAL	6:34	6:34	11	oscar_utf8_try_convert ( account , od , value )
FUNCTION_CALL	6:34	6:75	12	oscar_utf8_try_convert ( account , od , value )
CALLEE	6:34	6:34	13	oscar_utf8_try_convert
LEAF_NODE	6:34	6:34	14	oscar_utf8_try_convert
LEAF_NODE	6:56	6:56	13	(
ARGUMENT	6:57	6:57	13	account
FIELD	6:57	6:57	14	account
LEAF_NODE	6:57	6:57	15	account
LEAF_NODE	6:64	6:64	13	,
ARGUMENT	6:66	6:66	13	od
FIELD	6:66	6:66	14	od
LEAF_NODE	6:66	6:66	15	od
LEAF_NODE	6:68	6:68	13	,
ARGUMENT	6:70	6:70	13	value
FIELD	6:70	6:70	14	value
LEAF_NODE	6:70	6:70	15	value
LEAF_NODE	6:75	6:75	13	)
LEAF_NODE	6:76	6:76	10	)
LEAF_NODE	6:77	6:77	4	)
STATEMENTS	6:79	11:1	4	
LEAF_NODE	6:79	6:79	5	{
STATEMENTS	7:2	10:2	5	
SIMPLE_DECL	7:2	7:81	6	gchar * tmp ; tmp = g_strdup_printf ( "<a href=\"%s%s\">%s</a>" , url_prefix , utf8 , utf8 ) ;
VAR_DECL	7:2	7:9	7	gchar * tmp ; tmp = g_strdup_printf ( "<a href=\"%s%s\">%s</a>" , url_prefix , utf8 , utf8 )
TYPE	7:2	7:8	8	gchar *
TYPE_NAME	7:2	7:2	9	gchar
LEAF_NODE	7:2	7:2	10	gchar
POINTER	7:8	7:8	9	*
LEAF_NODE	7:8	7:8	10	*
NAME	7:9	7:9	8	tmp
LEAF_NODE	7:9	7:9	9	tmp
LEAF_NODE	0:0	0:0	8	;
INIT	7:9	7:9	8	tmp = g_strdup_printf ( "<a href=\"%s%s\">%s</a>" , url_prefix , utf8 , utf8 )
ASSIGN	7:9	7:15	9	tmp = g_strdup_printf ( "<a href=\"%s%s\">%s</a>" , url_prefix , utf8 , utf8 )
LVAL	7:9	7:9	10	tmp
NAME	7:9	7:9	11	tmp
LEAF_NODE	7:9	7:9	12	tmp
ASSIGN_OP	7:13	7:13	10	=
LEAF_NODE	7:13	7:13	11	=
RVAL	7:15	7:15	10	g_strdup_printf ( "<a href=\"%s%s\">%s</a>" , url_prefix , utf8 , utf8 )
FUNCTION_CALL	7:15	7:80	11	g_strdup_printf ( "<a href=\"%s%s\">%s</a>" , url_prefix , utf8 , utf8 )
CALLEE	7:15	7:15	12	g_strdup_printf
LEAF_NODE	7:15	7:15	13	g_strdup_printf
LEAF_NODE	7:30	7:30	12	(
ARGUMENT	7:31	7:31	12	"<a href=\"%s%s\">%s</a>"
FIELD	7:31	7:31	13	"<a href=\"%s%s\">%s</a>"
LEAF_NODE	7:31	7:31	14	"<a href=\"%s%s\">%s</a>"
LEAF_NODE	7:56	7:56	12	,
ARGUMENT	7:58	7:58	12	url_prefix
FIELD	7:58	7:58	13	url_prefix
LEAF_NODE	7:58	7:58	14	url_prefix
LEAF_NODE	7:68	7:68	12	,
ARGUMENT	7:70	7:70	12	utf8
FIELD	7:70	7:70	13	utf8
LEAF_NODE	7:70	7:70	14	utf8
LEAF_NODE	7:74	7:74	12	,
ARGUMENT	7:76	7:76	12	utf8
FIELD	7:76	7:76	13	utf8
LEAF_NODE	7:76	7:76	14	utf8
LEAF_NODE	7:80	7:80	12	)
LEAF_NODE	7:81	7:81	7	;
EXPR_STATEMENT	8:2	8:56	6	purple_notify_user_info_add_pair ( user_info , name , tmp ) ;
EXPR	8:2	8:2	7	purple_notify_user_info_add_pair ( user_info , name , tmp )
FUNCTION_CALL	8:2	8:55	8	purple_notify_user_info_add_pair ( user_info , name , tmp )
CALLEE	8:2	8:2	9	purple_notify_user_info_add_pair
LEAF_NODE	8:2	8:2	10	purple_notify_user_info_add_pair
LEAF_NODE	8:34	8:34	9	(
ARGUMENT	8:35	8:35	9	user_info
FIELD	8:35	8:35	10	user_info
LEAF_NODE	8:35	8:35	11	user_info
LEAF_NODE	8:44	8:44	9	,
ARGUMENT	8:46	8:46	9	name
FIELD	8:46	8:46	10	name
LEAF_NODE	8:46	8:46	11	name
LEAF_NODE	8:50	8:50	9	,
ARGUMENT	8:52	8:52	9	tmp
FIELD	8:52	8:52	10	tmp
LEAF_NODE	8:52	8:52	11	tmp
LEAF_NODE	8:55	8:55	9	)
LEAF_NODE	8:56	8:56	7	;
EXPR_STATEMENT	9:2	9:14	6	g_free ( utf8 ) ;
EXPR	9:2	9:2	7	g_free ( utf8 )
FUNCTION_CALL	9:2	9:13	8	g_free ( utf8 )
CALLEE	9:2	9:2	9	g_free
LEAF_NODE	9:2	9:2	10	g_free
LEAF_NODE	9:8	9:8	9	(
ARGUMENT	9:9	9:9	9	utf8
FIELD	9:9	9:9	10	utf8
LEAF_NODE	9:9	9:9	11	utf8
LEAF_NODE	9:13	9:13	9	)
LEAF_NODE	9:14	9:14	7	;
EXPR_STATEMENT	10:2	10:13	6	g_free ( tmp ) ;
EXPR	10:2	10:2	7	g_free ( tmp )
FUNCTION_CALL	10:2	10:12	8	g_free ( tmp )
CALLEE	10:2	10:2	9	g_free
LEAF_NODE	10:2	10:2	10	g_free
LEAF_NODE	10:8	10:8	9	(
ARGUMENT	10:9	10:9	9	tmp
FIELD	10:9	10:9	10	tmp
LEAF_NODE	10:9	10:9	11	tmp
LEAF_NODE	10:12	10:12	9	)
LEAF_NODE	10:13	10:13	7	;
LEAF_NODE	11:1	11:1	5	}
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	31:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	jabber_adhoc_got_server_list
LEAF_NODE	2:0	2:0	3	jabber_adhoc_got_server_list
PARAMETER_LIST	2:28	2:79	2	( JabberStream * js , const char * from , xmlnode * query )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:43	3	JabberStream * js
TYPE	2:29	2:42	4	JabberStream *
TYPE_NAME	2:29	2:29	5	JabberStream
LEAF_NODE	2:29	2:29	6	JabberStream
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	js
LEAF_NODE	2:43	2:43	5	js
LEAF_NODE	2:45	2:45	3	,
PARAMETER_DECL	2:47	2:59	3	const char * from
TYPE	2:47	2:58	4	const char *
TYPE_NAME	2:47	2:53	5	const char
LEAF_NODE	2:47	2:47	6	const
LEAF_NODE	2:53	2:53	6	char
POINTER	2:58	2:58	5	*
LEAF_NODE	2:58	2:58	6	*
NAME	2:59	2:59	4	from
LEAF_NODE	2:59	2:59	5	from
LEAF_NODE	2:63	2:63	3	,
PARAMETER_DECL	2:65	2:74	3	xmlnode * query
TYPE	2:65	2:73	4	xmlnode *
TYPE_NAME	2:65	2:65	5	xmlnode
LEAF_NODE	2:65	2:65	6	xmlnode
POINTER	2:73	2:73	5	*
LEAF_NODE	2:73	2:73	6	*
NAME	2:74	2:74	4	query
LEAF_NODE	2:74	2:74	5	query
LEAF_NODE	2:79	2:79	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	29:1	2	
SIMPLE_DECL	4:1	4:14	3	xmlnode * item ;
VAR_DECL	4:1	4:10	4	xmlnode * item
TYPE	4:1	4:9	5	xmlnode *
TYPE_NAME	4:1	4:1	6	xmlnode
LEAF_NODE	4:1	4:1	7	xmlnode
POINTER	4:9	4:9	6	*
LEAF_NODE	4:9	4:9	7	*
NAME	4:10	4:10	5	item
LEAF_NODE	4:10	4:10	6	item
LEAF_NODE	4:14	4:14	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:3	5:3	4	(
CONDITION	5:4	5:4	4	! query
EXPR	5:4	5:4	5	! query
UNARY_EXPR	5:4	5:5	6	! query
UNARY_OPERATOR	5:4	5:4	7	!
LEAF_NODE	5:4	5:4	8	!
FIELD	5:5	5:5	7	query
LEAF_NODE	5:5	5:5	8	query
LEAF_NODE	5:10	5:10	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:8	5	return DESTINATION ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	6:8	6:8	6	;
ITERATION	8:1	8:21	3	
KEYWORD	8:1	8:1	4	while
LEAF_NODE	8:1	8:1	5	while
LEAF_NODE	8:6	8:6	4	(
CONDITION	8:7	8:7	4	js -> commands
EXPR	8:7	8:7	5	js -> commands
FIELD	8:7	8:11	6	js -> commands
LEAF_NODE	8:7	8:7	7	js
LEAF_NODE	8:9	8:9	7	->
LEAF_NODE	8:11	8:11	7	commands
LEAF_NODE	8:19	8:19	4	)
STATEMENTS	8:21	15:1	4	
LEAF_NODE	8:21	8:21	5	{
STATEMENTS	9:2	14:2	5	
SIMPLE_DECL	9:2	9:47	6	JabberAdHocCommands * cmd ; cmd = js -> commands -> data ;
VAR_DECL	9:2	9:23	7	JabberAdHocCommands * cmd ; cmd = js -> commands -> data
TYPE	9:2	9:22	8	JabberAdHocCommands *
TYPE_NAME	9:2	9:2	9	JabberAdHocCommands
LEAF_NODE	9:2	9:2	10	JabberAdHocCommands
POINTER	9:22	9:22	9	*
LEAF_NODE	9:22	9:22	10	*
NAME	9:23	9:23	8	cmd
LEAF_NODE	9:23	9:23	9	cmd
LEAF_NODE	0:0	0:0	8	;
INIT	9:23	9:23	8	cmd = js -> commands -> data
ASSIGN	9:23	9:29	9	cmd = js -> commands -> data
LVAL	9:23	9:23	10	cmd
NAME	9:23	9:23	11	cmd
LEAF_NODE	9:23	9:23	12	cmd
ASSIGN_OP	9:27	9:27	10	=
LEAF_NODE	9:27	9:27	11	=
RVAL	9:29	9:29	10	js -> commands -> data
FIELD	9:29	9:43	11	js -> commands -> data
LEAF_NODE	9:29	9:29	12	js
LEAF_NODE	9:31	9:31	12	->
LEAF_NODE	9:33	9:33	12	commands
LEAF_NODE	9:41	9:41	12	->
LEAF_NODE	9:43	9:43	12	data
LEAF_NODE	9:47	9:47	7	;
EXPR_STATEMENT	10:2	10:18	6	g_free ( cmd -> jid ) ;
EXPR	10:2	10:2	7	g_free ( cmd -> jid )
FUNCTION_CALL	10:2	10:17	8	g_free ( cmd -> jid )
CALLEE	10:2	10:2	9	g_free
LEAF_NODE	10:2	10:2	10	g_free
LEAF_NODE	10:8	10:8	9	(
ARGUMENT	10:9	10:9	9	cmd -> jid
FIELD	10:9	10:14	10	cmd -> jid
LEAF_NODE	10:9	10:9	11	cmd
LEAF_NODE	10:12	10:12	11	->
LEAF_NODE	10:14	10:14	11	jid
LEAF_NODE	10:17	10:17	9	)
LEAF_NODE	10:18	10:18	7	;
EXPR_STATEMENT	11:2	11:19	6	g_free ( cmd -> node ) ;
EXPR	11:2	11:2	7	g_free ( cmd -> node )
FUNCTION_CALL	11:2	11:18	8	g_free ( cmd -> node )
CALLEE	11:2	11:2	9	g_free
LEAF_NODE	11:2	11:2	10	g_free
LEAF_NODE	11:8	11:8	9	(
ARGUMENT	11:9	11:9	9	cmd -> node
FIELD	11:9	11:14	10	cmd -> node
LEAF_NODE	11:9	11:9	11	cmd
LEAF_NODE	11:12	11:12	11	->
LEAF_NODE	11:14	11:14	11	node
LEAF_NODE	11:18	11:18	9	)
LEAF_NODE	11:19	11:19	7	;
EXPR_STATEMENT	12:2	12:19	6	g_free ( cmd -> name ) ;
EXPR	12:2	12:2	7	g_free ( cmd -> name )
FUNCTION_CALL	12:2	12:18	8	g_free ( cmd -> name )
CALLEE	12:2	12:2	9	g_free
LEAF_NODE	12:2	12:2	10	g_free
LEAF_NODE	12:8	12:8	9	(
ARGUMENT	12:9	12:9	9	cmd -> name
FIELD	12:9	12:14	10	cmd -> name
LEAF_NODE	12:9	12:9	11	cmd
LEAF_NODE	12:12	12:12	11	->
LEAF_NODE	12:14	12:14	11	name
LEAF_NODE	12:18	12:18	9	)
LEAF_NODE	12:19	12:19	7	;
EXPR_STATEMENT	13:2	13:13	6	g_free ( cmd ) ;
EXPR	13:2	13:2	7	g_free ( cmd )
FUNCTION_CALL	13:2	13:12	8	g_free ( cmd )
CALLEE	13:2	13:2	9	g_free
LEAF_NODE	13:2	13:2	10	g_free
LEAF_NODE	13:8	13:8	9	(
ARGUMENT	13:9	13:9	9	cmd
FIELD	13:9	13:9	10	cmd
LEAF_NODE	13:9	13:9	11	cmd
LEAF_NODE	13:12	13:12	9	)
LEAF_NODE	13:13	13:13	7	;
EXPR_STATEMENT	14:2	14:63	6	js -> commands = g_list_delete_link ( js -> commands , js -> commands ) ;
EXPR	14:2	14:2	7	js -> commands = g_list_delete_link ( js -> commands , js -> commands )
ASSIGN	14:2	14:17	8	js -> commands = g_list_delete_link ( js -> commands , js -> commands )
LVAL	14:2	14:2	9	js -> commands
FIELD	14:2	14:6	10	js -> commands
LEAF_NODE	14:2	14:2	11	js
LEAF_NODE	14:4	14:4	11	->
LEAF_NODE	14:6	14:6	11	commands
ASSIGN_OP	14:15	14:15	9	=
LEAF_NODE	14:15	14:15	10	=
RVAL	14:17	14:17	9	g_list_delete_link ( js -> commands , js -> commands )
FUNCTION_CALL	14:17	14:62	10	g_list_delete_link ( js -> commands , js -> commands )
CALLEE	14:17	14:17	11	g_list_delete_link
LEAF_NODE	14:17	14:17	12	g_list_delete_link
LEAF_NODE	14:35	14:35	11	(
ARGUMENT	14:36	14:36	11	js -> commands
FIELD	14:36	14:40	12	js -> commands
LEAF_NODE	14:36	14:36	13	js
LEAF_NODE	14:38	14:38	13	->
LEAF_NODE	14:40	14:40	13	commands
LEAF_NODE	14:48	14:48	11	,
ARGUMENT	14:50	14:50	11	js -> commands
FIELD	14:50	14:54	12	js -> commands
LEAF_NODE	14:50	14:50	13	js
LEAF_NODE	14:52	14:52	13	->
LEAF_NODE	14:54	14:54	13	commands
LEAF_NODE	14:62	14:62	11	)
LEAF_NODE	14:63	14:63	7	;
LEAF_NODE	15:1	15:1	5	}
ITERATION	17:1	17:51	3	
KEYWORD	17:1	17:1	4	for
LEAF_NODE	17:1	17:1	5	for
LEAF_NODE	17:4	17:4	4	(
FOR_INIT	17:5	17:24	4	item = query -> child ;
EXPR	17:5	17:5	5	item = query -> child
ASSIGN	17:5	17:12	6	item = query -> child
LVAL	17:5	17:5	7	item
FIELD	17:5	17:5	8	item
LEAF_NODE	17:5	17:5	9	item
ASSIGN_OP	17:10	17:10	7	=
LEAF_NODE	17:10	17:10	8	=
RVAL	17:12	17:12	7	query -> child
FIELD	17:12	17:19	8	query -> child
LEAF_NODE	17:12	17:12	9	query
LEAF_NODE	17:17	17:17	9	->
LEAF_NODE	17:19	17:19	9	child
LEAF_NODE	17:24	17:24	5	;
CONDITION	17:26	17:26	4	item
EXPR	17:26	17:26	5	item
FIELD	17:26	17:26	6	item
LEAF_NODE	17:26	17:26	7	item
LEAF_NODE	17:30	17:30	4	;
FOR_EXPR	17:32	17:32	4	item = item -> next
EXPR	17:32	17:32	5	item = item -> next
ASSIGN	17:32	17:39	6	item = item -> next
LVAL	17:32	17:32	7	item
FIELD	17:32	17:32	8	item
LEAF_NODE	17:32	17:32	9	item
ASSIGN_OP	17:37	17:37	7	=
LEAF_NODE	17:37	17:37	8	=
RVAL	17:39	17:39	7	item -> next
FIELD	17:39	17:45	8	item -> next
LEAF_NODE	17:39	17:39	9	item
LEAF_NODE	17:43	17:43	9	->
LEAF_NODE	17:45	17:45	9	next
LEAF_NODE	17:49	17:49	4	)
STATEMENTS	17:51	28:1	4	
LEAF_NODE	17:51	17:51	5	{
STATEMENTS	18:2	27:2	5	
SIMPLE_DECL	18:2	18:26	6	JabberAdHocCommands * cmd ;
VAR_DECL	18:2	18:23	7	JabberAdHocCommands * cmd
TYPE	18:2	18:22	8	JabberAdHocCommands *
TYPE_NAME	18:2	18:2	9	JabberAdHocCommands
LEAF_NODE	18:2	18:2	10	JabberAdHocCommands
POINTER	18:22	18:22	9	*
LEAF_NODE	18:22	18:22	10	*
NAME	18:23	18:23	8	cmd
LEAF_NODE	18:23	18:23	9	cmd
LEAF_NODE	18:26	18:26	7	;
SELECTION	19:2	20:3	6	
KEYWORD	19:2	19:2	7	if
LEAF_NODE	19:2	19:2	8	if
LEAF_NODE	19:4	19:4	7	(
CONDITION	19:5	19:5	7	item -> type != XMLNODE_TYPE_TAG
EXPR	19:5	19:19	8	item -> type != XMLNODE_TYPE_TAG
FIELD	19:5	19:11	9	item -> type
LEAF_NODE	19:5	19:5	10	item
LEAF_NODE	19:9	19:9	10	->
LEAF_NODE	19:11	19:11	10	type
EQ_OPERATOR	19:16	19:16	9	!=
LEAF_NODE	19:16	19:16	10	!=
FIELD	19:19	19:19	9	XMLNODE_TYPE_TAG
LEAF_NODE	19:19	19:19	10	XMLNODE_TYPE_TAG
LEAF_NODE	19:35	19:35	7	)
STATEMENTS	20:3	20:3	7	
JUMP_STATEMENT	20:3	20:11	8	continue DESTINATION ;
KEYWORD	20:3	20:3	9	continue
LEAF_NODE	20:3	20:3	10	continue
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	20:11	20:11	9	;
SELECTION	21:2	22:3	6	
KEYWORD	21:2	21:2	7	if
LEAF_NODE	21:2	21:2	8	if
LEAF_NODE	21:4	21:4	7	(
CONDITION	21:5	21:5	7	strcmp ( item -> name , "item" )
EXPR	21:5	21:5	8	strcmp ( item -> name , "item" )
FUNCTION_CALL	21:5	21:30	9	strcmp ( item -> name , "item" )
CALLEE	21:5	21:5	10	strcmp
LEAF_NODE	21:5	21:5	11	strcmp
LEAF_NODE	21:11	21:11	10	(
ARGUMENT	21:12	21:12	10	item -> name
FIELD	21:12	21:18	11	item -> name
LEAF_NODE	21:12	21:12	12	item
LEAF_NODE	21:16	21:16	12	->
LEAF_NODE	21:18	21:18	12	name
LEAF_NODE	21:22	21:22	10	,
ARGUMENT	21:24	21:24	10	"item"
FIELD	21:24	21:24	11	"item"
LEAF_NODE	21:24	21:24	12	"item"
LEAF_NODE	21:30	21:30	10	)
LEAF_NODE	21:31	21:31	7	)
STATEMENTS	22:3	22:3	7	
JUMP_STATEMENT	22:3	22:11	8	continue DESTINATION ;
KEYWORD	22:3	22:3	9	continue
LEAF_NODE	22:3	22:3	10	continue
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	22:11	22:11	9	;
EXPR_STATEMENT	23:2	23:38	6	cmd = g_new0 ( JabberAdHocCommands , 1 ) ;
EXPR	23:2	23:2	7	cmd = g_new0 ( JabberAdHocCommands , 1 )
ASSIGN	23:2	23:8	8	cmd = g_new0 ( JabberAdHocCommands , 1 )
LVAL	23:2	23:2	9	cmd
FIELD	23:2	23:2	10	cmd
LEAF_NODE	23:2	23:2	11	cmd
ASSIGN_OP	23:6	23:6	9	=
LEAF_NODE	23:6	23:6	10	=
RVAL	23:8	23:8	9	g_new0 ( JabberAdHocCommands , 1 )
FUNCTION_CALL	23:8	23:37	10	g_new0 ( JabberAdHocCommands , 1 )
CALLEE	23:8	23:8	11	g_new0
LEAF_NODE	23:8	23:8	12	g_new0
LEAF_NODE	23:14	23:14	11	(
ARGUMENT	23:15	23:15	11	JabberAdHocCommands
FIELD	23:15	23:15	12	JabberAdHocCommands
LEAF_NODE	23:15	23:15	13	JabberAdHocCommands
LEAF_NODE	23:34	23:34	11	,
ARGUMENT	23:36	23:36	11	1
FIELD	23:36	23:36	12	1
LEAF_NODE	23:36	23:36	13	1
LEAF_NODE	23:37	23:37	11	)
LEAF_NODE	23:38	23:38	7	;
EXPR_STATEMENT	24:2	24:53	6	cmd -> jid = g_strdup ( xmlnode_get_attrib ( item , "jid" ) ) ;
EXPR	24:2	24:2	7	cmd -> jid = g_strdup ( xmlnode_get_attrib ( item , "jid" ) )
ASSIGN	24:2	24:13	8	cmd -> jid = g_strdup ( xmlnode_get_attrib ( item , "jid" ) )
LVAL	24:2	24:2	9	cmd -> jid
FIELD	24:2	24:7	10	cmd -> jid
LEAF_NODE	24:2	24:2	11	cmd
LEAF_NODE	24:5	24:5	11	->
LEAF_NODE	24:7	24:7	11	jid
ASSIGN_OP	24:11	24:11	9	=
LEAF_NODE	24:11	24:11	10	=
RVAL	24:13	24:13	9	g_strdup ( xmlnode_get_attrib ( item , "jid" ) )
FUNCTION_CALL	24:13	24:52	10	g_strdup ( xmlnode_get_attrib ( item , "jid" ) )
CALLEE	24:13	24:13	11	g_strdup
LEAF_NODE	24:13	24:13	12	g_strdup
LEAF_NODE	24:21	24:21	11	(
ARGUMENT	24:22	24:22	11	xmlnode_get_attrib ( item , "jid" )
FUNCTION_CALL	24:22	24:51	12	xmlnode_get_attrib ( item , "jid" )
CALLEE	24:22	24:22	13	xmlnode_get_attrib
LEAF_NODE	24:22	24:22	14	xmlnode_get_attrib
LEAF_NODE	24:40	24:40	13	(
ARGUMENT	24:41	24:41	13	item
FIELD	24:41	24:41	14	item
LEAF_NODE	24:41	24:41	15	item
LEAF_NODE	24:45	24:45	13	,
ARGUMENT	24:46	24:46	13	"jid"
FIELD	24:46	24:46	14	"jid"
LEAF_NODE	24:46	24:46	15	"jid"
LEAF_NODE	24:51	24:51	13	)
LEAF_NODE	24:52	24:52	11	)
LEAF_NODE	24:53	24:53	7	;
EXPR_STATEMENT	25:2	25:55	6	cmd -> node = g_strdup ( xmlnode_get_attrib ( item , "node" ) ) ;
EXPR	25:2	25:2	7	cmd -> node = g_strdup ( xmlnode_get_attrib ( item , "node" ) )
ASSIGN	25:2	25:14	8	cmd -> node = g_strdup ( xmlnode_get_attrib ( item , "node" ) )
LVAL	25:2	25:2	9	cmd -> node
FIELD	25:2	25:7	10	cmd -> node
LEAF_NODE	25:2	25:2	11	cmd
LEAF_NODE	25:5	25:5	11	->
LEAF_NODE	25:7	25:7	11	node
ASSIGN_OP	25:12	25:12	9	=
LEAF_NODE	25:12	25:12	10	=
RVAL	25:14	25:14	9	g_strdup ( xmlnode_get_attrib ( item , "node" ) )
FUNCTION_CALL	25:14	25:54	10	g_strdup ( xmlnode_get_attrib ( item , "node" ) )
CALLEE	25:14	25:14	11	g_strdup
LEAF_NODE	25:14	25:14	12	g_strdup
LEAF_NODE	25:22	25:22	11	(
ARGUMENT	25:23	25:23	11	xmlnode_get_attrib ( item , "node" )
FUNCTION_CALL	25:23	25:53	12	xmlnode_get_attrib ( item , "node" )
CALLEE	25:23	25:23	13	xmlnode_get_attrib
LEAF_NODE	25:23	25:23	14	xmlnode_get_attrib
LEAF_NODE	25:41	25:41	13	(
ARGUMENT	25:42	25:42	13	item
FIELD	25:42	25:42	14	item
LEAF_NODE	25:42	25:42	15	item
LEAF_NODE	25:46	25:46	13	,
ARGUMENT	25:47	25:47	13	"node"
FIELD	25:47	25:47	14	"node"
LEAF_NODE	25:47	25:47	15	"node"
LEAF_NODE	25:53	25:53	13	)
LEAF_NODE	25:54	25:54	11	)
LEAF_NODE	25:55	25:55	7	;
EXPR_STATEMENT	26:2	26:55	6	cmd -> name = g_strdup ( xmlnode_get_attrib ( item , "name" ) ) ;
EXPR	26:2	26:2	7	cmd -> name = g_strdup ( xmlnode_get_attrib ( item , "name" ) )
ASSIGN	26:2	26:14	8	cmd -> name = g_strdup ( xmlnode_get_attrib ( item , "name" ) )
LVAL	26:2	26:2	9	cmd -> name
FIELD	26:2	26:7	10	cmd -> name
LEAF_NODE	26:2	26:2	11	cmd
LEAF_NODE	26:5	26:5	11	->
LEAF_NODE	26:7	26:7	11	name
ASSIGN_OP	26:12	26:12	9	=
LEAF_NODE	26:12	26:12	10	=
RVAL	26:14	26:14	9	g_strdup ( xmlnode_get_attrib ( item , "name" ) )
FUNCTION_CALL	26:14	26:54	10	g_strdup ( xmlnode_get_attrib ( item , "name" ) )
CALLEE	26:14	26:14	11	g_strdup
LEAF_NODE	26:14	26:14	12	g_strdup
LEAF_NODE	26:22	26:22	11	(
ARGUMENT	26:23	26:23	11	xmlnode_get_attrib ( item , "name" )
FUNCTION_CALL	26:23	26:53	12	xmlnode_get_attrib ( item , "name" )
CALLEE	26:23	26:23	13	xmlnode_get_attrib
LEAF_NODE	26:23	26:23	14	xmlnode_get_attrib
LEAF_NODE	26:41	26:41	13	(
ARGUMENT	26:42	26:42	13	item
FIELD	26:42	26:42	14	item
LEAF_NODE	26:42	26:42	15	item
LEAF_NODE	26:46	26:46	13	,
ARGUMENT	26:47	26:47	13	"name"
FIELD	26:47	26:47	14	"name"
LEAF_NODE	26:47	26:47	15	"name"
LEAF_NODE	26:53	26:53	13	)
LEAF_NODE	26:54	26:54	11	)
LEAF_NODE	26:55	26:55	7	;
EXPR_STATEMENT	27:2	27:48	6	js -> commands = g_list_append ( js -> commands , cmd ) ;
EXPR	27:2	27:2	7	js -> commands = g_list_append ( js -> commands , cmd )
ASSIGN	27:2	27:17	8	js -> commands = g_list_append ( js -> commands , cmd )
LVAL	27:2	27:2	9	js -> commands
FIELD	27:2	27:6	10	js -> commands
LEAF_NODE	27:2	27:2	11	js
LEAF_NODE	27:4	27:4	11	->
LEAF_NODE	27:6	27:6	11	commands
ASSIGN_OP	27:15	27:15	9	=
LEAF_NODE	27:15	27:15	10	=
RVAL	27:17	27:17	9	g_list_append ( js -> commands , cmd )
FUNCTION_CALL	27:17	27:47	10	g_list_append ( js -> commands , cmd )
CALLEE	27:17	27:17	11	g_list_append
LEAF_NODE	27:17	27:17	12	g_list_append
LEAF_NODE	27:30	27:30	11	(
ARGUMENT	27:31	27:31	11	js -> commands
FIELD	27:31	27:35	12	js -> commands
LEAF_NODE	27:31	27:31	13	js
LEAF_NODE	27:33	27:33	13	->
LEAF_NODE	27:35	27:35	13	commands
LEAF_NODE	27:43	27:43	11	,
ARGUMENT	27:44	27:44	11	cmd
FIELD	27:44	27:44	12	cmd
LEAF_NODE	27:44	27:44	13	cmd
LEAF_NODE	27:47	27:47	11	)
LEAF_NODE	27:48	27:48	7	;
LEAF_NODE	28:1	28:1	5	}
SELECTION	29:1	30:2	3	
KEYWORD	29:1	29:1	4	if
LEAF_NODE	29:1	29:1	5	if
LEAF_NODE	29:4	29:4	4	(
CONDITION	29:5	29:5	4	js -> state == JABBER_STREAM_CONNECTED
EXPR	29:5	29:18	5	js -> state == JABBER_STREAM_CONNECTED
FIELD	29:5	29:9	6	js -> state
LEAF_NODE	29:5	29:5	7	js
LEAF_NODE	29:7	29:7	7	->
LEAF_NODE	29:9	29:9	7	state
EQ_OPERATOR	29:15	29:15	6	==
LEAF_NODE	29:15	29:15	7	==
FIELD	29:18	29:18	6	JABBER_STREAM_CONNECTED
LEAF_NODE	29:18	29:18	7	JABBER_STREAM_CONNECTED
LEAF_NODE	29:41	29:41	4	)
STATEMENTS	30:2	30:2	4	
EXPR_STATEMENT	30:2	30:72	5	purple_prpl_got_account_actions ( purple_connection_get_account ( js -> gc ) ) ;
EXPR	30:2	30:2	6	purple_prpl_got_account_actions ( purple_connection_get_account ( js -> gc ) )
FUNCTION_CALL	30:2	30:71	7	purple_prpl_got_account_actions ( purple_connection_get_account ( js -> gc ) )
CALLEE	30:2	30:2	8	purple_prpl_got_account_actions
LEAF_NODE	30:2	30:2	9	purple_prpl_got_account_actions
LEAF_NODE	30:33	30:33	8	(
ARGUMENT	30:34	30:34	8	purple_connection_get_account ( js -> gc )
FUNCTION_CALL	30:34	30:70	9	purple_connection_get_account ( js -> gc )
CALLEE	30:34	30:34	10	purple_connection_get_account
LEAF_NODE	30:34	30:34	11	purple_connection_get_account
LEAF_NODE	30:63	30:63	10	(
ARGUMENT	30:64	30:64	10	js -> gc
FIELD	30:64	30:68	11	js -> gc
LEAF_NODE	30:64	30:64	12	js
LEAF_NODE	30:66	30:66	12	->
LEAF_NODE	30:68	30:68	12	gc
LEAF_NODE	30:70	30:70	10	)
LEAF_NODE	30:71	30:71	8	)
LEAF_NODE	30:72	30:72	6	;
LEAF_NODE	31:0	31:0	2	}

SOURCE_FILE	4:1	12:2	0	
SIMPLE_DECL	4:1	4:18	1	GntWidget * window ;
VAR_DECL	4:1	4:12	2	GntWidget * window
TYPE	4:1	4:11	3	GntWidget *
TYPE_NAME	4:1	4:1	4	GntWidget
LEAF_NODE	4:1	4:1	5	GntWidget
POINTER	4:11	4:11	4	*
LEAF_NODE	4:11	4:11	5	*
NAME	4:12	4:12	3	window
LEAF_NODE	4:12	4:12	4	window
LEAF_NODE	4:18	4:18	2	;
SIMPLE_DECL	5:1	5:16	1	GntToast * toast ;
VAR_DECL	5:1	5:11	2	GntToast * toast
TYPE	5:1	5:10	3	GntToast *
TYPE_NAME	5:1	5:1	4	GntToast
LEAF_NODE	5:1	5:1	5	GntToast
POINTER	5:10	5:10	4	*
LEAF_NODE	5:10	5:10	5	*
NAME	5:11	5:11	3	toast
LEAF_NODE	5:11	5:11	4	toast
LEAF_NODE	5:16	5:16	2	;
SIMPLE_DECL	6:1	6:10	1	char * str ;
VAR_DECL	6:1	6:7	2	char * str
TYPE	6:1	6:6	3	char *
TYPE_NAME	6:1	6:1	4	char
LEAF_NODE	6:1	6:1	5	char
POINTER	6:6	6:6	4	*
LEAF_NODE	6:6	6:6	5	*
NAME	6:7	6:7	3	str
LEAF_NODE	6:7	6:7	4	str
LEAF_NODE	6:10	6:10	2	;
SIMPLE_DECL	7:1	7:12	1	int h , int w , int i ;
INIT_DECL_LIST	7:1	7:1	2	int h , int w , int i
VAR_DECL	7:1	7:5	3	int h
TYPE	7:1	7:1	4	int
TYPE_NAME	7:1	7:1	5	int
LEAF_NODE	7:1	7:1	6	int
NAME	7:5	7:5	4	h
LEAF_NODE	7:5	7:5	5	h
LEAF_NODE	7:6	7:6	3	,
INIT_DECL_LIST	7:1	7:1	3	int w , int i
VAR_DECL	7:1	7:8	4	int w
TYPE	7:1	7:1	5	int
TYPE_NAME	7:1	7:1	6	int
LEAF_NODE	7:1	7:1	7	int
NAME	7:8	7:8	5	w
LEAF_NODE	7:8	7:8	6	w
LEAF_NODE	7:9	7:9	4	,
VAR_DECL	7:1	7:11	4	int i
TYPE	7:1	7:1	5	int
TYPE_NAME	7:1	7:1	6	int
LEAF_NODE	7:1	7:1	7	int
NAME	7:11	7:11	5	i
LEAF_NODE	7:11	7:11	6	i
LEAF_NODE	7:12	7:12	2	;
SIMPLE_DECL	8:1	8:13	1	va_list args ;
VAR_DECL	8:1	8:9	2	va_list args
TYPE	8:1	8:1	3	va_list
TYPE_NAME	8:1	8:1	4	va_list
LEAF_NODE	8:1	8:1	5	va_list
NAME	8:9	8:9	3	args
LEAF_NODE	8:9	8:9	4	args
LEAF_NODE	8:13	8:13	2	;
SIMPLE_DECL	12:2	12:31	1	FinchConv * fc ; fc = conv -> ui_data ;
VAR_DECL	12:2	12:13	2	FinchConv * fc ; fc = conv -> ui_data
TYPE	12:2	12:12	3	FinchConv *
TYPE_NAME	12:2	12:2	4	FinchConv
LEAF_NODE	12:2	12:2	5	FinchConv
POINTER	12:12	12:12	4	*
LEAF_NODE	12:12	12:12	5	*
NAME	12:13	12:13	3	fc
LEAF_NODE	12:13	12:13	4	fc
LEAF_NODE	0:0	0:0	3	;
INIT	12:13	12:13	3	fc = conv -> ui_data
ASSIGN	12:13	12:18	4	fc = conv -> ui_data
LVAL	12:13	12:13	5	fc
NAME	12:13	12:13	6	fc
LEAF_NODE	12:13	12:13	7	fc
ASSIGN_OP	12:16	12:16	5	=
LEAF_NODE	12:16	12:16	6	=
RVAL	12:18	12:18	5	conv -> ui_data
FIELD	12:18	12:24	6	conv -> ui_data
LEAF_NODE	12:18	12:18	7	conv
LEAF_NODE	12:22	12:22	7	->
LEAF_NODE	12:24	12:24	7	ui_data
LEAF_NODE	12:31	12:31	2	;

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	85:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_conversation_write
LEAF_NODE	2:0	2:0	3	purple_conversation_write
PARAMETER_LIST	2:25	4:18	2	( PurpleConversation * conv , const char * who , const char * message , PurpleMessageFlags flags , time_t mtime )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:46	3	PurpleConversation * conv
TYPE	2:26	2:45	4	PurpleConversation *
TYPE_NAME	2:26	2:26	5	PurpleConversation
LEAF_NODE	2:26	2:26	6	PurpleConversation
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	conv
LEAF_NODE	2:46	2:46	5	conv
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:64	3	const char * who
TYPE	2:52	2:63	4	const char *
TYPE_NAME	2:52	2:58	5	const char
LEAF_NODE	2:52	2:52	6	const
LEAF_NODE	2:58	2:58	6	char
POINTER	2:63	2:63	5	*
LEAF_NODE	2:63	2:63	6	*
NAME	2:64	2:64	4	who
LEAF_NODE	2:64	2:64	5	who
LEAF_NODE	2:67	2:67	3	,
PARAMETER_DECL	3:6	3:18	3	const char * message
TYPE	3:6	3:17	4	const char *
TYPE_NAME	3:6	3:12	5	const char
LEAF_NODE	3:6	3:6	6	const
LEAF_NODE	3:12	3:12	6	char
POINTER	3:17	3:17	5	*
LEAF_NODE	3:17	3:17	6	*
NAME	3:18	3:18	4	message
LEAF_NODE	3:18	3:18	5	message
LEAF_NODE	3:25	3:25	3	,
PARAMETER_DECL	3:27	3:46	3	PurpleMessageFlags flags
TYPE	3:27	3:27	4	PurpleMessageFlags
TYPE_NAME	3:27	3:27	5	PurpleMessageFlags
LEAF_NODE	3:27	3:27	6	PurpleMessageFlags
NAME	3:46	3:46	4	flags
LEAF_NODE	3:46	3:46	5	flags
LEAF_NODE	3:51	3:51	3	,
PARAMETER_DECL	4:6	4:13	3	time_t mtime
TYPE	4:6	4:6	4	time_t
TYPE_NAME	4:6	4:6	5	time_t
LEAF_NODE	4:6	4:6	6	time_t
NAME	4:13	4:13	4	mtime
LEAF_NODE	4:13	4:13	5	mtime
LEAF_NODE	4:18	4:18	3	)
LEAF_NODE	5:0	5:0	2	{
STATEMENTS	6:1	84:1	2	
SIMPLE_DECL	6:1	6:43	3	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL ;
VAR_DECL	6:1	6:27	4	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL
TYPE	6:1	6:26	5	PurplePluginProtocolInfo *
TYPE_NAME	6:1	6:1	6	PurplePluginProtocolInfo
LEAF_NODE	6:1	6:1	7	PurplePluginProtocolInfo
POINTER	6:26	6:26	6	*
LEAF_NODE	6:26	6:26	7	*
NAME	6:27	6:27	5	prpl_info
LEAF_NODE	6:27	6:27	6	prpl_info
LEAF_NODE	0:0	0:0	5	;
INIT	6:27	6:27	5	prpl_info = NULL
ASSIGN	6:27	6:39	6	prpl_info = NULL
LVAL	6:27	6:27	7	prpl_info
NAME	6:27	6:27	8	prpl_info
LEAF_NODE	6:27	6:27	9	prpl_info
ASSIGN_OP	6:37	6:37	7	=
LEAF_NODE	6:37	6:37	8	=
RVAL	6:39	6:39	7	NULL
FIELD	6:39	6:39	8	NULL
LEAF_NODE	6:39	6:39	9	NULL
LEAF_NODE	6:43	6:43	4	;
SIMPLE_DECL	7:1	7:28	3	PurpleConnection * gc ; gc = NULL ;
VAR_DECL	7:1	7:19	4	PurpleConnection * gc ; gc = NULL
TYPE	7:1	7:18	5	PurpleConnection *
TYPE_NAME	7:1	7:1	6	PurpleConnection
LEAF_NODE	7:1	7:1	7	PurpleConnection
POINTER	7:18	7:18	6	*
LEAF_NODE	7:18	7:18	7	*
NAME	7:19	7:19	5	gc
LEAF_NODE	7:19	7:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	7:19	7:19	5	gc = NULL
ASSIGN	7:19	7:24	6	gc = NULL
LVAL	7:19	7:19	7	gc
NAME	7:19	7:19	8	gc
LEAF_NODE	7:19	7:19	9	gc
ASSIGN_OP	7:22	7:22	7	=
LEAF_NODE	7:22	7:22	8	=
RVAL	7:24	7:24	7	NULL
FIELD	7:24	7:24	8	NULL
LEAF_NODE	7:24	7:24	9	NULL
LEAF_NODE	7:28	7:28	4	;
SIMPLE_DECL	8:1	8:23	3	PurpleAccount * account ;
VAR_DECL	8:1	8:16	4	PurpleAccount * account
TYPE	8:1	8:15	5	PurpleAccount *
TYPE_NAME	8:1	8:1	6	PurpleAccount
LEAF_NODE	8:1	8:1	7	PurpleAccount
POINTER	8:15	8:15	6	*
LEAF_NODE	8:15	8:15	7	*
NAME	8:16	8:16	5	account
LEAF_NODE	8:16	8:16	6	account
LEAF_NODE	8:23	8:23	4	;
SIMPLE_DECL	9:1	9:29	3	PurpleConversationUiOps * ops ;
VAR_DECL	9:1	9:26	4	PurpleConversationUiOps * ops
TYPE	9:1	9:25	5	PurpleConversationUiOps *
TYPE_NAME	9:1	9:1	6	PurpleConversationUiOps
LEAF_NODE	9:1	9:1	7	PurpleConversationUiOps
POINTER	9:25	9:25	6	*
LEAF_NODE	9:25	9:25	7	*
NAME	9:26	9:26	5	ops
LEAF_NODE	9:26	9:26	6	ops
LEAF_NODE	9:29	9:29	4	;
SIMPLE_DECL	10:1	10:18	3	const char * alias ;
VAR_DECL	10:1	10:13	4	const char * alias
TYPE	10:1	10:12	5	const char *
TYPE_NAME	10:1	10:7	6	const char
LEAF_NODE	10:1	10:1	7	const
LEAF_NODE	10:7	10:7	7	char
POINTER	10:12	10:12	6	*
LEAF_NODE	10:12	10:12	7	*
NAME	10:13	10:13	5	alias
LEAF_NODE	10:13	10:13	6	alias
LEAF_NODE	10:18	10:18	4	;
SIMPLE_DECL	11:1	11:23	3	char * displayed ; displayed = NULL ;
VAR_DECL	11:1	11:7	4	char * displayed ; displayed = NULL
TYPE	11:1	11:6	5	char *
TYPE_NAME	11:1	11:1	6	char
LEAF_NODE	11:1	11:1	7	char
POINTER	11:6	11:6	6	*
LEAF_NODE	11:6	11:6	7	*
NAME	11:7	11:7	5	displayed
LEAF_NODE	11:7	11:7	6	displayed
LEAF_NODE	0:0	0:0	5	;
INIT	11:7	11:7	5	displayed = NULL
ASSIGN	11:7	11:19	6	displayed = NULL
LVAL	11:7	11:7	7	displayed
NAME	11:7	11:7	8	displayed
LEAF_NODE	11:7	11:7	9	displayed
ASSIGN_OP	11:17	11:17	7	=
LEAF_NODE	11:17	11:17	8	=
RVAL	11:19	11:19	7	NULL
FIELD	11:19	11:19	8	NULL
LEAF_NODE	11:19	11:19	9	NULL
LEAF_NODE	11:23	11:23	4	;
SIMPLE_DECL	12:1	12:15	3	PurpleBuddy * b ;
VAR_DECL	12:1	12:14	4	PurpleBuddy * b
TYPE	12:1	12:13	5	PurpleBuddy *
TYPE_NAME	12:1	12:1	6	PurpleBuddy
LEAF_NODE	12:1	12:1	7	PurpleBuddy
POINTER	12:13	12:13	6	*
LEAF_NODE	12:13	12:13	7	*
NAME	12:14	12:14	5	b
LEAF_NODE	12:14	12:14	6	b
LEAF_NODE	12:15	12:15	4	;
SIMPLE_DECL	13:1	13:18	3	int plugin_return ;
VAR_DECL	13:1	13:5	4	int plugin_return
TYPE	13:1	13:1	5	int
TYPE_NAME	13:1	13:1	6	int
LEAF_NODE	13:1	13:1	7	int
NAME	13:5	13:5	5	plugin_return
LEAF_NODE	13:5	13:5	6	plugin_return
LEAF_NODE	13:18	13:18	4	;
SIMPLE_DECL	14:1	14:28	3	PurpleConversationType type ;
VAR_DECL	14:1	14:24	4	PurpleConversationType type
TYPE	14:1	14:1	5	PurpleConversationType
TYPE_NAME	14:1	14:1	6	PurpleConversationType
LEAF_NODE	14:1	14:1	7	PurpleConversationType
NAME	14:24	14:24	5	type
LEAF_NODE	14:24	14:24	6	type
LEAF_NODE	14:28	14:28	4	;
EXPR_STATEMENT	16:1	16:34	3	g_return_if_fail ( conv != NULL ) ;
EXPR	16:1	16:1	4	g_return_if_fail ( conv != NULL )
FUNCTION_CALL	16:1	16:33	5	g_return_if_fail ( conv != NULL )
CALLEE	16:1	16:1	6	g_return_if_fail
LEAF_NODE	16:1	16:1	7	g_return_if_fail
LEAF_NODE	16:17	16:17	6	(
ARGUMENT	16:18	16:29	6	conv != NULL
FIELD	16:18	16:18	7	conv
LEAF_NODE	16:18	16:18	8	conv
EQ_OPERATOR	16:26	16:26	7	!=
LEAF_NODE	16:26	16:26	8	!=
FIELD	16:29	16:29	7	NULL
LEAF_NODE	16:29	16:29	8	NULL
LEAF_NODE	16:33	16:33	6	)
LEAF_NODE	16:34	16:34	4	;
EXPR_STATEMENT	17:1	17:34	3	g_return_if_fail ( message != NULL ) ;
EXPR	17:1	17:1	4	g_return_if_fail ( message != NULL )
FUNCTION_CALL	17:1	17:33	5	g_return_if_fail ( message != NULL )
CALLEE	17:1	17:1	6	g_return_if_fail
LEAF_NODE	17:1	17:1	7	g_return_if_fail
LEAF_NODE	17:17	17:17	6	(
ARGUMENT	17:18	17:29	6	message != NULL
FIELD	17:18	17:18	7	message
LEAF_NODE	17:18	17:18	8	message
EQ_OPERATOR	17:26	17:26	7	!=
LEAF_NODE	17:26	17:26	8	!=
FIELD	17:29	17:29	7	NULL
LEAF_NODE	17:29	17:29	8	NULL
LEAF_NODE	17:33	17:33	6	)
LEAF_NODE	17:34	17:34	4	;
EXPR_STATEMENT	18:1	18:43	3	ops = purple_conversation_get_ui_ops ( conv ) ;
EXPR	18:1	18:1	4	ops = purple_conversation_get_ui_ops ( conv )
ASSIGN	18:1	18:7	5	ops = purple_conversation_get_ui_ops ( conv )
LVAL	18:1	18:1	6	ops
FIELD	18:1	18:1	7	ops
LEAF_NODE	18:1	18:1	8	ops
ASSIGN_OP	18:5	18:5	6	=
LEAF_NODE	18:5	18:5	7	=
RVAL	18:7	18:7	6	purple_conversation_get_ui_ops ( conv )
FUNCTION_CALL	18:7	18:42	7	purple_conversation_get_ui_ops ( conv )
CALLEE	18:7	18:7	8	purple_conversation_get_ui_ops
LEAF_NODE	18:7	18:7	9	purple_conversation_get_ui_ops
LEAF_NODE	18:37	18:37	8	(
ARGUMENT	18:38	18:38	8	conv
FIELD	18:38	18:38	9	conv
LEAF_NODE	18:38	18:38	10	conv
LEAF_NODE	18:42	18:42	8	)
LEAF_NODE	18:43	18:43	4	;
EXPR_STATEMENT	19:1	19:48	3	account = purple_conversation_get_account ( conv ) ;
EXPR	19:1	19:1	4	account = purple_conversation_get_account ( conv )
ASSIGN	19:1	19:11	5	account = purple_conversation_get_account ( conv )
LVAL	19:1	19:1	6	account
FIELD	19:1	19:1	7	account
LEAF_NODE	19:1	19:1	8	account
ASSIGN_OP	19:9	19:9	6	=
LEAF_NODE	19:9	19:9	7	=
RVAL	19:11	19:11	6	purple_conversation_get_account ( conv )
FUNCTION_CALL	19:11	19:47	7	purple_conversation_get_account ( conv )
CALLEE	19:11	19:11	8	purple_conversation_get_account
LEAF_NODE	19:11	19:11	9	purple_conversation_get_account
LEAF_NODE	19:42	19:42	8	(
ARGUMENT	19:43	19:43	8	conv
FIELD	19:43	19:43	9	conv
LEAF_NODE	19:43	19:43	10	conv
LEAF_NODE	19:47	19:47	8	)
LEAF_NODE	19:48	19:48	4	;
EXPR_STATEMENT	20:1	20:42	3	type = purple_conversation_get_type ( conv ) ;
EXPR	20:1	20:1	4	type = purple_conversation_get_type ( conv )
ASSIGN	20:1	20:8	5	type = purple_conversation_get_type ( conv )
LVAL	20:1	20:1	6	type
FIELD	20:1	20:1	7	type
LEAF_NODE	20:1	20:1	8	type
ASSIGN_OP	20:6	20:6	6	=
LEAF_NODE	20:6	20:6	7	=
RVAL	20:8	20:8	6	purple_conversation_get_type ( conv )
FUNCTION_CALL	20:8	20:41	7	purple_conversation_get_type ( conv )
CALLEE	20:8	20:8	8	purple_conversation_get_type
LEAF_NODE	20:8	20:8	9	purple_conversation_get_type
LEAF_NODE	20:36	20:36	8	(
ARGUMENT	20:37	20:37	8	conv
FIELD	20:37	20:37	9	conv
LEAF_NODE	20:37	20:37	10	conv
LEAF_NODE	20:41	20:41	8	)
LEAF_NODE	20:42	20:42	4	;
SELECTION	21:1	22:2	3	
KEYWORD	21:1	21:1	4	if
LEAF_NODE	21:1	21:1	5	if
LEAF_NODE	21:4	21:4	4	(
CONDITION	21:5	21:5	4	account != NULL
EXPR	21:5	21:16	5	account != NULL
FIELD	21:5	21:5	6	account
LEAF_NODE	21:5	21:5	7	account
EQ_OPERATOR	21:13	21:13	6	!=
LEAF_NODE	21:13	21:13	7	!=
FIELD	21:16	21:16	6	NULL
LEAF_NODE	21:16	21:16	7	NULL
LEAF_NODE	21:20	21:20	4	)
STATEMENTS	22:2	22:2	4	
EXPR_STATEMENT	22:2	22:45	5	gc = purple_account_get_connection ( account ) ;
EXPR	22:2	22:2	6	gc = purple_account_get_connection ( account )
ASSIGN	22:2	22:7	7	gc = purple_account_get_connection ( account )
LVAL	22:2	22:2	8	gc
FIELD	22:2	22:2	9	gc
LEAF_NODE	22:2	22:2	10	gc
ASSIGN_OP	22:5	22:5	8	=
LEAF_NODE	22:5	22:5	9	=
RVAL	22:7	22:7	8	purple_account_get_connection ( account )
FUNCTION_CALL	22:7	22:44	9	purple_account_get_connection ( account )
CALLEE	22:7	22:7	10	purple_account_get_connection
LEAF_NODE	22:7	22:7	11	purple_account_get_connection
LEAF_NODE	22:36	22:36	10	(
ARGUMENT	22:37	22:37	10	account
FIELD	22:37	22:37	11	account
LEAF_NODE	22:37	22:37	12	account
LEAF_NODE	22:44	22:44	10	)
LEAF_NODE	22:45	22:45	6	;
SELECTION	23:1	25:2	3	
KEYWORD	23:1	23:1	4	if
LEAF_NODE	23:1	23:1	5	if
LEAF_NODE	23:4	23:4	4	(
CONDITION	23:5	23:5	4	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_CHAT && ( gc != NULL && ! g_slist_find ( gc -> buddy_chats , conv ) )
EXPR	23:5	23:5	5	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_CHAT && ( gc != NULL && ! g_slist_find ( gc -> buddy_chats , conv ) )
AND	23:5	24:2	6	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_CHAT && ( gc != NULL && ! g_slist_find ( gc -> buddy_chats , conv ) )
EXPR	23:5	23:43	7	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_CHAT
FUNCTION_CALL	23:5	23:38	8	purple_conversation_get_type ( conv )
CALLEE	23:5	23:5	9	purple_conversation_get_type
LEAF_NODE	23:5	23:5	10	purple_conversation_get_type
LEAF_NODE	23:33	23:33	9	(
ARGUMENT	23:34	23:34	9	conv
FIELD	23:34	23:34	10	conv
LEAF_NODE	23:34	23:34	11	conv
LEAF_NODE	23:38	23:38	9	)
EQ_OPERATOR	23:40	23:40	8	==
LEAF_NODE	23:40	23:40	9	==
FIELD	23:43	23:43	8	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	23:43	23:43	9	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	23:65	23:65	7	&&
EXPR	24:2	24:53	7	( gc != NULL && ! g_slist_find ( gc -> buddy_chats , conv ) )
LEAF_NODE	24:2	24:2	8	(
AND	24:3	24:17	8	gc != NULL && ! g_slist_find ( gc -> buddy_chats , conv )
EXPR	24:3	24:9	9	gc != NULL
FIELD	24:3	24:3	10	gc
LEAF_NODE	24:3	24:3	11	gc
EQ_OPERATOR	24:6	24:6	10	!=
LEAF_NODE	24:6	24:6	11	!=
FIELD	24:9	24:9	10	NULL
LEAF_NODE	24:9	24:9	11	NULL
LEAF_NODE	24:14	24:14	9	&&
EXPR	24:17	24:17	9	! g_slist_find ( gc -> buddy_chats , conv )
UNARY_EXPR	24:17	24:18	10	! g_slist_find ( gc -> buddy_chats , conv )
UNARY_OPERATOR	24:17	24:17	11	!
LEAF_NODE	24:17	24:17	12	!
FUNCTION_CALL	24:18	24:52	11	g_slist_find ( gc -> buddy_chats , conv )
CALLEE	24:18	24:18	12	g_slist_find
LEAF_NODE	24:18	24:18	13	g_slist_find
LEAF_NODE	24:30	24:30	12	(
ARGUMENT	24:31	24:31	12	gc -> buddy_chats
FIELD	24:31	24:35	13	gc -> buddy_chats
LEAF_NODE	24:31	24:31	14	gc
LEAF_NODE	24:33	24:33	14	->
LEAF_NODE	24:35	24:35	14	buddy_chats
LEAF_NODE	24:46	24:46	12	,
ARGUMENT	24:48	24:48	12	conv
FIELD	24:48	24:48	13	conv
LEAF_NODE	24:48	24:48	14	conv
LEAF_NODE	24:52	24:52	12	)
LEAF_NODE	24:53	24:53	8	)
LEAF_NODE	24:54	24:54	4	)
STATEMENTS	25:2	25:2	4	
JUMP_STATEMENT	25:2	25:8	5	return DESTINATION ;
KEYWORD	25:2	25:2	6	return
LEAF_NODE	25:2	25:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	25:8	25:8	6	;
SELECTION	26:1	28:2	3	
KEYWORD	26:1	26:1	4	if
LEAF_NODE	26:1	26:1	5	if
LEAF_NODE	26:4	26:4	4	(
CONDITION	26:5	26:5	4	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_IM && ! g_list_find ( purple_get_conversations ( ) , conv )
EXPR	26:5	26:5	5	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_IM && ! g_list_find ( purple_get_conversations ( ) , conv )
AND	26:5	27:2	6	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_IM && ! g_list_find ( purple_get_conversations ( ) , conv )
EXPR	26:5	26:43	7	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_IM
FUNCTION_CALL	26:5	26:38	8	purple_conversation_get_type ( conv )
CALLEE	26:5	26:5	9	purple_conversation_get_type
LEAF_NODE	26:5	26:5	10	purple_conversation_get_type
LEAF_NODE	26:33	26:33	9	(
ARGUMENT	26:34	26:34	9	conv
FIELD	26:34	26:34	10	conv
LEAF_NODE	26:34	26:34	11	conv
LEAF_NODE	26:38	26:38	9	)
EQ_OPERATOR	26:40	26:40	8	==
LEAF_NODE	26:40	26:40	9	==
FIELD	26:43	26:43	8	PURPLE_CONV_TYPE_IM
LEAF_NODE	26:43	26:43	9	PURPLE_CONV_TYPE_IM
LEAF_NODE	26:63	26:63	7	&&
EXPR	27:2	27:2	7	! g_list_find ( purple_get_conversations ( ) , conv )
UNARY_EXPR	27:2	27:3	8	! g_list_find ( purple_get_conversations ( ) , conv )
UNARY_OPERATOR	27:2	27:2	9	!
LEAF_NODE	27:2	27:2	10	!
FUNCTION_CALL	27:3	27:47	9	g_list_find ( purple_get_conversations ( ) , conv )
CALLEE	27:3	27:3	10	g_list_find
LEAF_NODE	27:3	27:3	11	g_list_find
LEAF_NODE	27:14	27:14	10	(
ARGUMENT	27:15	27:15	10	purple_get_conversations ( )
FUNCTION_CALL	27:15	27:40	11	purple_get_conversations ( )
CALLEE	27:15	27:15	12	purple_get_conversations
LEAF_NODE	27:15	27:15	13	purple_get_conversations
LEAF_NODE	27:39	27:39	12	(
LEAF_NODE	27:40	27:40	12	)
LEAF_NODE	27:41	27:41	10	,
ARGUMENT	27:43	27:43	10	conv
FIELD	27:43	27:43	11	conv
LEAF_NODE	27:43	27:43	12	conv
LEAF_NODE	27:47	27:47	10	)
LEAF_NODE	27:48	27:48	4	)
STATEMENTS	28:2	28:2	4	
JUMP_STATEMENT	28:2	28:8	5	return DESTINATION ;
KEYWORD	28:2	28:2	6	return
LEAF_NODE	28:2	28:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	28:8	28:8	6	;
EXPR_STATEMENT	29:1	29:30	3	displayed = g_strdup ( message ) ;
EXPR	29:1	29:1	4	displayed = g_strdup ( message )
ASSIGN	29:1	29:13	5	displayed = g_strdup ( message )
LVAL	29:1	29:1	6	displayed
FIELD	29:1	29:1	7	displayed
LEAF_NODE	29:1	29:1	8	displayed
ASSIGN_OP	29:11	29:11	6	=
LEAF_NODE	29:11	29:11	7	=
RVAL	29:13	29:13	6	g_strdup ( message )
FUNCTION_CALL	29:13	29:29	7	g_strdup ( message )
CALLEE	29:13	29:13	8	g_strdup
LEAF_NODE	29:13	29:13	9	g_strdup
LEAF_NODE	29:21	29:21	8	(
ARGUMENT	29:22	29:22	8	message
FIELD	29:22	29:22	9	message
LEAF_NODE	29:22	29:22	10	message
LEAF_NODE	29:29	29:29	8	)
LEAF_NODE	29:30	29:30	4	;
SELECTION	30:1	31:2	3	
KEYWORD	30:1	30:1	4	if
LEAF_NODE	30:1	30:1	5	if
LEAF_NODE	30:4	30:4	4	(
CONDITION	30:5	30:5	4	who == NULL || * who == '\0'
EXPR	30:5	30:5	5	who == NULL || * who == '\0'
OR	30:5	30:20	6	who == NULL || * who == '\0'
EXPR	30:5	30:12	7	who == NULL
FIELD	30:5	30:5	8	who
LEAF_NODE	30:5	30:5	9	who
EQ_OPERATOR	30:9	30:9	8	==
LEAF_NODE	30:9	30:9	9	==
FIELD	30:12	30:12	8	NULL
LEAF_NODE	30:12	30:12	9	NULL
LEAF_NODE	30:17	30:17	7	||
EXPR	30:20	30:28	7	* who == '\0'
UNARY_EXPR	30:20	30:21	8	* who
UNARY_OPERATOR	30:20	30:20	9	*
LEAF_NODE	30:20	30:20	10	*
FIELD	30:21	30:21	9	who
LEAF_NODE	30:21	30:21	10	who
EQ_OPERATOR	30:25	30:25	8	==
LEAF_NODE	30:25	30:25	9	==
FIELD	30:28	30:28	8	'\0'
LEAF_NODE	30:28	30:28	9	'\0'
LEAF_NODE	30:32	30:32	4	)
STATEMENTS	31:2	31:2	4	
EXPR_STATEMENT	31:2	31:42	5	who = purple_conversation_get_name ( conv ) ;
EXPR	31:2	31:2	6	who = purple_conversation_get_name ( conv )
ASSIGN	31:2	31:8	7	who = purple_conversation_get_name ( conv )
LVAL	31:2	31:2	8	who
FIELD	31:2	31:2	9	who
LEAF_NODE	31:2	31:2	10	who
ASSIGN_OP	31:6	31:6	8	=
LEAF_NODE	31:6	31:6	9	=
RVAL	31:8	31:8	8	purple_conversation_get_name ( conv )
FUNCTION_CALL	31:8	31:41	9	purple_conversation_get_name ( conv )
CALLEE	31:8	31:8	10	purple_conversation_get_name
LEAF_NODE	31:8	31:8	11	purple_conversation_get_name
LEAF_NODE	31:36	31:36	10	(
ARGUMENT	31:37	31:37	10	conv
FIELD	31:37	31:37	11	conv
LEAF_NODE	31:37	31:37	12	conv
LEAF_NODE	31:41	31:41	10	)
LEAF_NODE	31:42	31:42	6	;
EXPR_STATEMENT	32:1	32:12	3	alias = who ;
EXPR	32:1	32:1	4	alias = who
ASSIGN	32:1	32:9	5	alias = who
LVAL	32:1	32:1	6	alias
FIELD	32:1	32:1	7	alias
LEAF_NODE	32:1	32:1	8	alias
ASSIGN_OP	32:7	32:7	6	=
LEAF_NODE	32:7	32:7	7	=
RVAL	32:9	32:9	6	who
FIELD	32:9	32:9	7	who
LEAF_NODE	32:9	32:9	8	who
LEAF_NODE	32:12	32:12	4	;
EXPR_STATEMENT	33:1	37:42	3	plugin_return = GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_conversations_get_handle ( ) , ( type == PURPLE_CONV_TYPE_IM ? "writing-im-msg" : "writing-chat-msg" ) , account , who , & displayed , conv , flags ) ) ;
EXPR	33:1	33:1	4	plugin_return = GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_conversations_get_handle ( ) , ( type == PURPLE_CONV_TYPE_IM ? "writing-im-msg" : "writing-chat-msg" ) , account , who , & displayed , conv , flags ) )
ASSIGN	33:1	34:2	5	plugin_return = GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_conversations_get_handle ( ) , ( type == PURPLE_CONV_TYPE_IM ? "writing-im-msg" : "writing-chat-msg" ) , account , who , & displayed , conv , flags ) )
LVAL	33:1	33:1	6	plugin_return
FIELD	33:1	33:1	7	plugin_return
LEAF_NODE	33:1	33:1	8	plugin_return
ASSIGN_OP	33:15	33:15	6	=
LEAF_NODE	33:15	33:15	7	=
RVAL	34:2	34:2	6	GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_conversations_get_handle ( ) , ( type == PURPLE_CONV_TYPE_IM ? "writing-im-msg" : "writing-chat-msg" ) , account , who , & displayed , conv , flags ) )
FUNCTION_CALL	34:2	37:41	7	GPOINTER_TO_INT ( purple_signal_emit_return_1 ( purple_conversations_get_handle ( ) , ( type == PURPLE_CONV_TYPE_IM ? "writing-im-msg" : "writing-chat-msg" ) , account , who , & displayed , conv , flags ) )
CALLEE	34:2	34:2	8	GPOINTER_TO_INT
LEAF_NODE	34:2	34:2	9	GPOINTER_TO_INT
LEAF_NODE	34:17	34:17	8	(
ARGUMENT	34:18	34:18	8	purple_signal_emit_return_1 ( purple_conversations_get_handle ( ) , ( type == PURPLE_CONV_TYPE_IM ? "writing-im-msg" : "writing-chat-msg" ) , account , who , & displayed , conv , flags )
FUNCTION_CALL	34:18	37:40	9	purple_signal_emit_return_1 ( purple_conversations_get_handle ( ) , ( type == PURPLE_CONV_TYPE_IM ? "writing-im-msg" : "writing-chat-msg" ) , account , who , & displayed , conv , flags )
CALLEE	34:18	34:18	10	purple_signal_emit_return_1
LEAF_NODE	34:18	34:18	11	purple_signal_emit_return_1
LEAF_NODE	34:45	34:45	10	(
ARGUMENT	35:3	35:3	10	purple_conversations_get_handle ( )
FUNCTION_CALL	35:3	35:35	11	purple_conversations_get_handle ( )
CALLEE	35:3	35:3	12	purple_conversations_get_handle
LEAF_NODE	35:3	35:3	13	purple_conversations_get_handle
LEAF_NODE	35:34	35:34	12	(
LEAF_NODE	35:35	35:35	12	)
LEAF_NODE	35:36	35:36	10	,
ARGUMENT	36:3	36:71	10	( type == PURPLE_CONV_TYPE_IM ? "writing-im-msg" : "writing-chat-msg" )
LEAF_NODE	36:3	36:3	11	(
COND_EXPR	36:4	36:53	11	type == PURPLE_CONV_TYPE_IM ? "writing-im-msg" : "writing-chat-msg"
CONDITION	36:4	36:12	12	type == PURPLE_CONV_TYPE_IM
FIELD	36:4	36:4	13	type
LEAF_NODE	36:4	36:4	14	type
EQ_OPERATOR	36:9	36:9	13	==
LEAF_NODE	36:9	36:9	14	==
FIELD	36:12	36:12	13	PURPLE_CONV_TYPE_IM
LEAF_NODE	36:12	36:12	14	PURPLE_CONV_TYPE_IM
LEAF_NODE	36:32	36:32	12	?
EXPR	36:34	36:34	12	"writing-im-msg"
FIELD	36:34	36:34	13	"writing-im-msg"
LEAF_NODE	36:34	36:34	14	"writing-im-msg"
LEAF_NODE	36:51	36:51	12	:
FIELD	36:53	36:53	12	"writing-chat-msg"
LEAF_NODE	36:53	36:53	13	"writing-chat-msg"
LEAF_NODE	36:71	36:71	11	)
LEAF_NODE	36:72	36:72	10	,
ARGUMENT	37:3	37:3	10	account
FIELD	37:3	37:3	11	account
LEAF_NODE	37:3	37:3	12	account
LEAF_NODE	37:10	37:10	10	,
ARGUMENT	37:12	37:12	10	who
FIELD	37:12	37:12	11	who
LEAF_NODE	37:12	37:12	12	who
LEAF_NODE	37:15	37:15	10	,
ARGUMENT	37:17	37:17	10	& displayed
UNARY_EXPR	37:17	37:18	11	& displayed
UNARY_OPERATOR	37:17	37:17	12	&
LEAF_NODE	37:17	37:17	13	&
FIELD	37:18	37:18	12	displayed
LEAF_NODE	37:18	37:18	13	displayed
LEAF_NODE	37:27	37:27	10	,
ARGUMENT	37:29	37:29	10	conv
FIELD	37:29	37:29	11	conv
LEAF_NODE	37:29	37:29	12	conv
LEAF_NODE	37:33	37:33	10	,
ARGUMENT	37:35	37:35	10	flags
FIELD	37:35	37:35	11	flags
LEAF_NODE	37:35	37:35	12	flags
LEAF_NODE	37:40	37:40	10	)
LEAF_NODE	37:41	37:41	8	)
LEAF_NODE	37:42	37:42	4	;
SELECTION	38:1	39:2	3	
KEYWORD	38:1	38:1	4	if
LEAF_NODE	38:1	38:1	5	if
LEAF_NODE	38:4	38:4	4	(
CONDITION	38:5	38:5	4	displayed == NULL
EXPR	38:5	38:18	5	displayed == NULL
FIELD	38:5	38:5	6	displayed
LEAF_NODE	38:5	38:5	7	displayed
EQ_OPERATOR	38:15	38:15	6	==
LEAF_NODE	38:15	38:15	7	==
FIELD	38:18	38:18	6	NULL
LEAF_NODE	38:18	38:18	7	NULL
LEAF_NODE	38:22	38:22	4	)
STATEMENTS	39:2	39:2	4	
JUMP_STATEMENT	39:2	39:8	5	return DESTINATION ;
KEYWORD	39:2	39:2	6	return
LEAF_NODE	39:2	39:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	39:8	39:8	6	;
SELECTION	40:1	40:20	3	
KEYWORD	40:1	40:1	4	if
LEAF_NODE	40:1	40:1	5	if
LEAF_NODE	40:4	40:4	4	(
CONDITION	40:5	40:5	4	plugin_return
EXPR	40:5	40:5	5	plugin_return
FIELD	40:5	40:5	6	plugin_return
LEAF_NODE	40:5	40:5	7	plugin_return
LEAF_NODE	40:18	40:18	4	)
STATEMENTS	40:20	43:1	4	
LEAF_NODE	40:20	40:20	5	{
STATEMENTS	41:2	42:2	5	
EXPR_STATEMENT	41:2	41:19	6	g_free ( displayed ) ;
EXPR	41:2	41:2	7	g_free ( displayed )
FUNCTION_CALL	41:2	41:18	8	g_free ( displayed )
CALLEE	41:2	41:2	9	g_free
LEAF_NODE	41:2	41:2	10	g_free
LEAF_NODE	41:8	41:8	9	(
ARGUMENT	41:9	41:9	9	displayed
FIELD	41:9	41:9	10	displayed
LEAF_NODE	41:9	41:9	11	displayed
LEAF_NODE	41:18	41:18	9	)
LEAF_NODE	41:19	41:19	7	;
JUMP_STATEMENT	42:2	42:8	6	return DESTINATION ;
KEYWORD	42:2	42:2	7	return
LEAF_NODE	42:2	42:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	42:8	42:8	7	;
LEAF_NODE	43:1	43:1	5	}
SELECTION	44:1	44:22	3	
KEYWORD	44:1	44:1	4	if
LEAF_NODE	44:1	44:1	5	if
LEAF_NODE	44:4	44:4	4	(
CONDITION	44:5	44:5	4	account != NULL
EXPR	44:5	44:16	5	account != NULL
FIELD	44:5	44:5	6	account
LEAF_NODE	44:5	44:5	7	account
EQ_OPERATOR	44:13	44:13	6	!=
LEAF_NODE	44:13	44:13	7	!=
FIELD	44:16	44:16	6	NULL
LEAF_NODE	44:16	44:16	7	NULL
LEAF_NODE	44:20	44:20	4	)
STATEMENTS	44:22	67:1	4	
LEAF_NODE	44:22	44:22	5	{
STATEMENTS	45:2	46:2	5	
EXPR_STATEMENT	45:2	45:100	6	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( purple_find_prpl ( purple_account_get_protocol_id ( account ) ) ) ;
EXPR	45:2	45:2	7	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( purple_find_prpl ( purple_account_get_protocol_id ( account ) ) )
ASSIGN	45:2	45:14	8	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( purple_find_prpl ( purple_account_get_protocol_id ( account ) ) )
LVAL	45:2	45:2	9	prpl_info
FIELD	45:2	45:2	10	prpl_info
LEAF_NODE	45:2	45:2	11	prpl_info
ASSIGN_OP	45:12	45:12	9	=
LEAF_NODE	45:12	45:12	10	=
RVAL	45:14	45:14	9	PURPLE_PLUGIN_PROTOCOL_INFO ( purple_find_prpl ( purple_account_get_protocol_id ( account ) ) )
FUNCTION_CALL	45:14	45:99	10	PURPLE_PLUGIN_PROTOCOL_INFO ( purple_find_prpl ( purple_account_get_protocol_id ( account ) ) )
CALLEE	45:14	45:14	11	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	45:14	45:14	12	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	45:41	45:41	11	(
ARGUMENT	45:42	45:42	11	purple_find_prpl ( purple_account_get_protocol_id ( account ) )
FUNCTION_CALL	45:42	45:98	12	purple_find_prpl ( purple_account_get_protocol_id ( account ) )
CALLEE	45:42	45:42	13	purple_find_prpl
LEAF_NODE	45:42	45:42	14	purple_find_prpl
LEAF_NODE	45:58	45:58	13	(
ARGUMENT	45:59	45:59	13	purple_account_get_protocol_id ( account )
FUNCTION_CALL	45:59	45:97	14	purple_account_get_protocol_id ( account )
CALLEE	45:59	45:59	15	purple_account_get_protocol_id
LEAF_NODE	45:59	45:59	16	purple_account_get_protocol_id
LEAF_NODE	45:89	45:89	15	(
ARGUMENT	45:90	45:90	15	account
FIELD	45:90	45:90	16	account
LEAF_NODE	45:90	45:90	17	account
LEAF_NODE	45:97	45:97	15	)
LEAF_NODE	45:98	45:98	13	)
LEAF_NODE	45:99	45:99	11	)
LEAF_NODE	45:100	45:100	7	;
SELECTION	46:2	47:54	6	
KEYWORD	46:2	46:2	7	if
LEAF_NODE	46:2	46:2	8	if
LEAF_NODE	46:5	46:5	7	(
CONDITION	46:6	46:6	7	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_IM || ! ( prpl_info -> options & OPT_PROTO_UNIQUE_CHATNAME )
EXPR	46:6	46:6	8	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_IM || ! ( prpl_info -> options & OPT_PROTO_UNIQUE_CHATNAME )
OR	46:6	47:3	9	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_IM || ! ( prpl_info -> options & OPT_PROTO_UNIQUE_CHATNAME )
EXPR	46:6	46:44	10	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_IM
FUNCTION_CALL	46:6	46:39	11	purple_conversation_get_type ( conv )
CALLEE	46:6	46:6	12	purple_conversation_get_type
LEAF_NODE	46:6	46:6	13	purple_conversation_get_type
LEAF_NODE	46:34	46:34	12	(
ARGUMENT	46:35	46:35	12	conv
FIELD	46:35	46:35	13	conv
LEAF_NODE	46:35	46:35	14	conv
LEAF_NODE	46:39	46:39	12	)
EQ_OPERATOR	46:41	46:41	11	==
LEAF_NODE	46:41	46:41	12	==
FIELD	46:44	46:44	11	PURPLE_CONV_TYPE_IM
LEAF_NODE	46:44	46:44	12	PURPLE_CONV_TYPE_IM
LEAF_NODE	46:64	46:64	10	||
EXPR	47:3	47:3	10	! ( prpl_info -> options & OPT_PROTO_UNIQUE_CHATNAME )
UNARY_EXPR	47:3	47:51	11	! ( prpl_info -> options & OPT_PROTO_UNIQUE_CHATNAME )
UNARY_OPERATOR	47:3	47:3	12	!
LEAF_NODE	47:3	47:3	13	!
LEAF_NODE	47:4	47:4	12	(
FIELD	47:5	47:16	12	prpl_info -> options
LEAF_NODE	47:5	47:5	13	prpl_info
LEAF_NODE	47:14	47:14	13	->
LEAF_NODE	47:16	47:16	13	options
LEAF_NODE	47:24	47:24	12	&
FIELD	47:26	47:26	12	OPT_PROTO_UNIQUE_CHATNAME
LEAF_NODE	47:26	47:26	13	OPT_PROTO_UNIQUE_CHATNAME
LEAF_NODE	47:51	47:51	12	)
LEAF_NODE	47:52	47:52	7	)
STATEMENTS	47:54	66:2	7	
LEAF_NODE	47:54	47:54	8	{
STATEMENTS	48:3	60:3	8	
SELECTION	48:3	48:36	9	
KEYWORD	48:3	48:3	10	if
LEAF_NODE	48:3	48:3	11	if
LEAF_NODE	48:6	48:6	10	(
CONDITION	48:7	48:7	10	flags & PURPLE_MESSAGE_SEND
EXPR	48:7	48:15	11	flags & PURPLE_MESSAGE_SEND
FIELD	48:7	48:7	12	flags
LEAF_NODE	48:7	48:7	13	flags
LEAF_NODE	48:13	48:13	12	&
FIELD	48:15	48:15	12	PURPLE_MESSAGE_SEND
LEAF_NODE	48:15	48:15	13	PURPLE_MESSAGE_SEND
LEAF_NODE	48:34	48:34	10	)
STATEMENTS	48:36	59:3	10	
LEAF_NODE	48:36	48:36	11	{
STATEMENTS	49:4	57:4	11	
EXPR_STATEMENT	49:4	50:44	12	b = purple_find_buddy ( account , purple_account_get_username ( account ) ) ;
EXPR	49:4	49:4	13	b = purple_find_buddy ( account , purple_account_get_username ( account ) )
ASSIGN	49:4	49:8	14	b = purple_find_buddy ( account , purple_account_get_username ( account ) )
LVAL	49:4	49:4	15	b
FIELD	49:4	49:4	16	b
LEAF_NODE	49:4	49:4	17	b
ASSIGN_OP	49:6	49:6	15	=
LEAF_NODE	49:6	49:6	16	=
RVAL	49:8	49:8	15	purple_find_buddy ( account , purple_account_get_username ( account ) )
FUNCTION_CALL	49:8	50:43	16	purple_find_buddy ( account , purple_account_get_username ( account ) )
CALLEE	49:8	49:8	17	purple_find_buddy
LEAF_NODE	49:8	49:8	18	purple_find_buddy
LEAF_NODE	49:25	49:25	17	(
ARGUMENT	49:26	49:26	17	account
FIELD	49:26	49:26	18	account
LEAF_NODE	49:26	49:26	19	account
LEAF_NODE	49:33	49:33	17	,
ARGUMENT	50:7	50:7	17	purple_account_get_username ( account )
FUNCTION_CALL	50:7	50:42	18	purple_account_get_username ( account )
CALLEE	50:7	50:7	19	purple_account_get_username
LEAF_NODE	50:7	50:7	20	purple_account_get_username
LEAF_NODE	50:34	50:34	19	(
ARGUMENT	50:35	50:35	19	account
FIELD	50:35	50:35	20	account
LEAF_NODE	50:35	50:35	21	account
LEAF_NODE	50:42	50:42	19	)
LEAF_NODE	50:43	50:43	17	)
LEAF_NODE	50:44	50:44	13	;
SELECTION	51:4	52:5	12	
KEYWORD	51:4	51:4	13	if
LEAF_NODE	51:4	51:4	14	if
LEAF_NODE	51:7	51:7	13	(
CONDITION	51:8	51:8	13	purple_account_get_alias ( account ) != NULL
EXPR	51:8	51:45	14	purple_account_get_alias ( account ) != NULL
FUNCTION_CALL	51:8	51:40	15	purple_account_get_alias ( account )
CALLEE	51:8	51:8	16	purple_account_get_alias
LEAF_NODE	51:8	51:8	17	purple_account_get_alias
LEAF_NODE	51:32	51:32	16	(
ARGUMENT	51:33	51:33	16	account
FIELD	51:33	51:33	17	account
LEAF_NODE	51:33	51:33	18	account
LEAF_NODE	51:40	51:40	16	)
EQ_OPERATOR	51:42	51:42	15	!=
LEAF_NODE	51:42	51:42	16	!=
FIELD	51:45	51:45	15	NULL
LEAF_NODE	51:45	51:45	16	NULL
LEAF_NODE	51:49	51:49	13	)
STATEMENTS	52:5	52:5	13	
EXPR_STATEMENT	52:5	52:27	14	alias = account -> alias ;
EXPR	52:5	52:5	15	alias = account -> alias
ASSIGN	52:5	52:13	16	alias = account -> alias
LVAL	52:5	52:5	17	alias
FIELD	52:5	52:5	18	alias
LEAF_NODE	52:5	52:5	19	alias
ASSIGN_OP	52:11	52:11	17	=
LEAF_NODE	52:11	52:11	18	=
RVAL	52:13	52:13	17	account -> alias
FIELD	52:13	52:22	18	account -> alias
LEAF_NODE	52:13	52:13	19	account
LEAF_NODE	52:20	52:20	19	->
LEAF_NODE	52:22	52:22	19	alias
LEAF_NODE	52:27	52:27	15	;
SELECTION	53:4	53:9	12	
KEYWORD	53:4	53:4	13	else
LEAF_NODE	53:4	53:4	14	else
STATEMENTS	53:9	53:9	13	
SELECTION	53:9	54:5	14	
KEYWORD	53:9	53:9	15	if
LEAF_NODE	53:9	53:9	16	if
LEAF_NODE	53:12	53:12	15	(
CONDITION	53:13	53:13	15	b != NULL && ! purple_strequal ( purple_buddy_get_name ( b ) , purple_buddy_get_contact_alias ( b ) )
EXPR	53:13	53:13	16	b != NULL && ! purple_strequal ( purple_buddy_get_name ( b ) , purple_buddy_get_contact_alias ( b ) )
AND	53:13	53:26	17	b != NULL && ! purple_strequal ( purple_buddy_get_name ( b ) , purple_buddy_get_contact_alias ( b ) )
EXPR	53:13	53:18	18	b != NULL
FIELD	53:13	53:13	19	b
LEAF_NODE	53:13	53:13	20	b
EQ_OPERATOR	53:15	53:15	19	!=
LEAF_NODE	53:15	53:15	20	!=
FIELD	53:18	53:18	19	NULL
LEAF_NODE	53:18	53:18	20	NULL
LEAF_NODE	53:23	53:23	18	&&
EXPR	53:26	53:26	18	! purple_strequal ( purple_buddy_get_name ( b ) , purple_buddy_get_contact_alias ( b ) )
UNARY_EXPR	53:26	53:27	19	! purple_strequal ( purple_buddy_get_name ( b ) , purple_buddy_get_contact_alias ( b ) )
UNARY_OPERATOR	53:26	53:26	20	!
LEAF_NODE	53:26	53:26	21	!
FUNCTION_CALL	53:27	53:102	20	purple_strequal ( purple_buddy_get_name ( b ) , purple_buddy_get_contact_alias ( b ) )
CALLEE	53:27	53:27	21	purple_strequal
LEAF_NODE	53:27	53:27	22	purple_strequal
LEAF_NODE	53:42	53:42	21	(
ARGUMENT	53:43	53:43	21	purple_buddy_get_name ( b )
FUNCTION_CALL	53:43	53:66	22	purple_buddy_get_name ( b )
CALLEE	53:43	53:43	23	purple_buddy_get_name
LEAF_NODE	53:43	53:43	24	purple_buddy_get_name
LEAF_NODE	53:64	53:64	23	(
ARGUMENT	53:65	53:65	23	b
FIELD	53:65	53:65	24	b
LEAF_NODE	53:65	53:65	25	b
LEAF_NODE	53:66	53:66	23	)
LEAF_NODE	53:67	53:67	21	,
ARGUMENT	53:69	53:69	21	purple_buddy_get_contact_alias ( b )
FUNCTION_CALL	53:69	53:101	22	purple_buddy_get_contact_alias ( b )
CALLEE	53:69	53:69	23	purple_buddy_get_contact_alias
LEAF_NODE	53:69	53:69	24	purple_buddy_get_contact_alias
LEAF_NODE	53:99	53:99	23	(
ARGUMENT	53:100	53:100	23	b
FIELD	53:100	53:100	24	b
LEAF_NODE	53:100	53:100	25	b
LEAF_NODE	53:101	53:101	23	)
LEAF_NODE	53:102	53:102	21	)
LEAF_NODE	53:103	53:103	15	)
STATEMENTS	54:5	54:5	15	
EXPR_STATEMENT	54:5	54:46	16	alias = purple_buddy_get_contact_alias ( b ) ;
EXPR	54:5	54:5	17	alias = purple_buddy_get_contact_alias ( b )
ASSIGN	54:5	54:13	18	alias = purple_buddy_get_contact_alias ( b )
LVAL	54:5	54:5	19	alias
FIELD	54:5	54:5	20	alias
LEAF_NODE	54:5	54:5	21	alias
ASSIGN_OP	54:11	54:11	19	=
LEAF_NODE	54:11	54:11	20	=
RVAL	54:13	54:13	19	purple_buddy_get_contact_alias ( b )
FUNCTION_CALL	54:13	54:45	20	purple_buddy_get_contact_alias ( b )
CALLEE	54:13	54:13	21	purple_buddy_get_contact_alias
LEAF_NODE	54:13	54:13	22	purple_buddy_get_contact_alias
LEAF_NODE	54:43	54:43	21	(
ARGUMENT	54:44	54:44	21	b
FIELD	54:44	54:44	22	b
LEAF_NODE	54:44	54:44	23	b
LEAF_NODE	54:45	54:45	21	)
LEAF_NODE	54:46	54:46	17	;
SELECTION	55:4	55:9	12	
KEYWORD	55:4	55:4	13	else
LEAF_NODE	55:4	55:4	14	else
STATEMENTS	55:9	55:9	13	
SELECTION	55:9	56:5	14	
KEYWORD	55:9	55:9	15	if
LEAF_NODE	55:9	55:9	16	if
LEAF_NODE	55:12	55:12	15	(
CONDITION	55:13	55:13	15	purple_connection_get_display_name ( gc ) != NULL
EXPR	55:13	55:55	16	purple_connection_get_display_name ( gc ) != NULL
FUNCTION_CALL	55:13	55:50	17	purple_connection_get_display_name ( gc )
CALLEE	55:13	55:13	18	purple_connection_get_display_name
LEAF_NODE	55:13	55:13	19	purple_connection_get_display_name
LEAF_NODE	55:47	55:47	18	(
ARGUMENT	55:48	55:48	18	gc
FIELD	55:48	55:48	19	gc
LEAF_NODE	55:48	55:48	20	gc
LEAF_NODE	55:50	55:50	18	)
EQ_OPERATOR	55:52	55:52	17	!=
LEAF_NODE	55:52	55:52	18	!=
FIELD	55:55	55:55	17	NULL
LEAF_NODE	55:55	55:55	18	NULL
LEAF_NODE	55:59	55:59	15	)
STATEMENTS	56:5	56:5	15	
EXPR_STATEMENT	56:5	56:51	16	alias = purple_connection_get_display_name ( gc ) ;
EXPR	56:5	56:5	17	alias = purple_connection_get_display_name ( gc )
ASSIGN	56:5	56:13	18	alias = purple_connection_get_display_name ( gc )
LVAL	56:5	56:5	19	alias
FIELD	56:5	56:5	20	alias
LEAF_NODE	56:5	56:5	21	alias
ASSIGN_OP	56:11	56:11	19	=
LEAF_NODE	56:11	56:11	20	=
RVAL	56:13	56:13	19	purple_connection_get_display_name ( gc )
FUNCTION_CALL	56:13	56:50	20	purple_connection_get_display_name ( gc )
CALLEE	56:13	56:13	21	purple_connection_get_display_name
LEAF_NODE	56:13	56:13	22	purple_connection_get_display_name
LEAF_NODE	56:47	56:47	21	(
ARGUMENT	56:48	56:48	21	gc
FIELD	56:48	56:48	22	gc
LEAF_NODE	56:48	56:48	23	gc
LEAF_NODE	56:50	56:50	21	)
LEAF_NODE	56:51	56:51	17	;
SELECTION	57:4	58:5	12	
KEYWORD	57:4	57:4	13	else
LEAF_NODE	57:4	57:4	14	else
STATEMENTS	58:5	58:5	13	
EXPR_STATEMENT	58:5	58:49	14	alias = purple_account_get_username ( account ) ;
EXPR	58:5	58:5	15	alias = purple_account_get_username ( account )
ASSIGN	58:5	58:13	16	alias = purple_account_get_username ( account )
LVAL	58:5	58:5	17	alias
FIELD	58:5	58:5	18	alias
LEAF_NODE	58:5	58:5	19	alias
ASSIGN_OP	58:11	58:11	17	=
LEAF_NODE	58:11	58:11	18	=
RVAL	58:13	58:13	17	purple_account_get_username ( account )
FUNCTION_CALL	58:13	58:48	18	purple_account_get_username ( account )
CALLEE	58:13	58:13	19	purple_account_get_username
LEAF_NODE	58:13	58:13	20	purple_account_get_username
LEAF_NODE	58:40	58:40	19	(
ARGUMENT	58:41	58:41	19	account
FIELD	58:41	58:41	20	account
LEAF_NODE	58:41	58:41	21	account
LEAF_NODE	58:48	58:48	19	)
LEAF_NODE	58:49	58:49	15	;
LEAF_NODE	59:3	59:3	11	}
SELECTION	60:3	61:3	9	
KEYWORD	60:3	60:3	10	else
LEAF_NODE	60:3	60:3	11	else
STATEMENTS	61:3	65:3	10	
LEAF_NODE	61:3	61:3	11	{
STATEMENTS	62:4	63:4	11	
EXPR_STATEMENT	62:4	62:39	12	b = purple_find_buddy ( account , who ) ;
EXPR	62:4	62:4	13	b = purple_find_buddy ( account , who )
ASSIGN	62:4	62:8	14	b = purple_find_buddy ( account , who )
LVAL	62:4	62:4	15	b
FIELD	62:4	62:4	16	b
LEAF_NODE	62:4	62:4	17	b
ASSIGN_OP	62:6	62:6	15	=
LEAF_NODE	62:6	62:6	16	=
RVAL	62:8	62:8	15	purple_find_buddy ( account , who )
FUNCTION_CALL	62:8	62:38	16	purple_find_buddy ( account , who )
CALLEE	62:8	62:8	17	purple_find_buddy
LEAF_NODE	62:8	62:8	18	purple_find_buddy
LEAF_NODE	62:25	62:25	17	(
ARGUMENT	62:26	62:26	17	account
FIELD	62:26	62:26	18	account
LEAF_NODE	62:26	62:26	19	account
LEAF_NODE	62:33	62:33	17	,
ARGUMENT	62:35	62:35	17	who
FIELD	62:35	62:35	18	who
LEAF_NODE	62:35	62:35	19	who
LEAF_NODE	62:38	62:38	17	)
LEAF_NODE	62:39	62:39	13	;
SELECTION	63:4	64:5	12	
KEYWORD	63:4	63:4	13	if
LEAF_NODE	63:4	63:4	14	if
LEAF_NODE	63:7	63:7	13	(
CONDITION	63:8	63:8	13	b != NULL
EXPR	63:8	63:13	14	b != NULL
FIELD	63:8	63:8	15	b
LEAF_NODE	63:8	63:8	16	b
EQ_OPERATOR	63:10	63:10	15	!=
LEAF_NODE	63:10	63:10	16	!=
FIELD	63:13	63:13	15	NULL
LEAF_NODE	63:13	63:13	16	NULL
LEAF_NODE	63:17	63:17	13	)
STATEMENTS	64:5	64:5	13	
EXPR_STATEMENT	64:5	64:46	14	alias = purple_buddy_get_contact_alias ( b ) ;
EXPR	64:5	64:5	15	alias = purple_buddy_get_contact_alias ( b )
ASSIGN	64:5	64:13	16	alias = purple_buddy_get_contact_alias ( b )
LVAL	64:5	64:5	17	alias
FIELD	64:5	64:5	18	alias
LEAF_NODE	64:5	64:5	19	alias
ASSIGN_OP	64:11	64:11	17	=
LEAF_NODE	64:11	64:11	18	=
RVAL	64:13	64:13	17	purple_buddy_get_contact_alias ( b )
FUNCTION_CALL	64:13	64:45	18	purple_buddy_get_contact_alias ( b )
CALLEE	64:13	64:13	19	purple_buddy_get_contact_alias
LEAF_NODE	64:13	64:13	20	purple_buddy_get_contact_alias
LEAF_NODE	64:43	64:43	19	(
ARGUMENT	64:44	64:44	19	b
FIELD	64:44	64:44	20	b
LEAF_NODE	64:44	64:44	21	b
LEAF_NODE	64:45	64:45	19	)
LEAF_NODE	64:46	64:46	15	;
LEAF_NODE	65:3	65:3	11	}
LEAF_NODE	66:2	66:2	8	}
LEAF_NODE	67:1	67:1	5	}
SELECTION	68:1	68:79	3	
KEYWORD	68:1	68:1	4	if
LEAF_NODE	68:1	68:1	5	if
LEAF_NODE	68:4	68:4	4	(
CONDITION	68:5	68:5	4	! ( flags & PURPLE_MESSAGE_NO_LOG ) && purple_conversation_is_logging ( conv )
EXPR	68:5	68:5	5	! ( flags & PURPLE_MESSAGE_NO_LOG ) && purple_conversation_is_logging ( conv )
AND	68:5	68:41	6	! ( flags & PURPLE_MESSAGE_NO_LOG ) && purple_conversation_is_logging ( conv )
EXPR	68:5	68:5	7	! ( flags & PURPLE_MESSAGE_NO_LOG )
UNARY_EXPR	68:5	68:36	8	! ( flags & PURPLE_MESSAGE_NO_LOG )
UNARY_OPERATOR	68:5	68:5	9	!
LEAF_NODE	68:5	68:5	10	!
LEAF_NODE	68:6	68:6	9	(
FIELD	68:7	68:7	9	flags
LEAF_NODE	68:7	68:7	10	flags
LEAF_NODE	68:13	68:13	9	&
FIELD	68:15	68:15	9	PURPLE_MESSAGE_NO_LOG
LEAF_NODE	68:15	68:15	10	PURPLE_MESSAGE_NO_LOG
LEAF_NODE	68:36	68:36	9	)
LEAF_NODE	68:38	68:38	7	&&
EXPR	68:41	68:41	7	purple_conversation_is_logging ( conv )
FUNCTION_CALL	68:41	68:76	8	purple_conversation_is_logging ( conv )
CALLEE	68:41	68:41	9	purple_conversation_is_logging
LEAF_NODE	68:41	68:41	10	purple_conversation_is_logging
LEAF_NODE	68:71	68:71	9	(
ARGUMENT	68:72	68:72	9	conv
FIELD	68:72	68:72	10	conv
LEAF_NODE	68:72	68:72	11	conv
LEAF_NODE	68:76	68:76	9	)
LEAF_NODE	68:77	68:77	4	)
STATEMENTS	68:79	77:1	4	
LEAF_NODE	68:79	68:79	5	{
STATEMENTS	69:2	73:2	5	
SIMPLE_DECL	69:2	69:12	6	GList * log ;
VAR_DECL	69:2	69:9	7	GList * log
TYPE	69:2	69:8	8	GList *
TYPE_NAME	69:2	69:2	9	GList
LEAF_NODE	69:2	69:2	10	GList
POINTER	69:8	69:8	9	*
LEAF_NODE	69:8	69:8	10	*
NAME	69:9	69:9	8	log
LEAF_NODE	69:9	69:9	9	log
LEAF_NODE	69:12	69:12	7	;
SELECTION	70:2	71:3	6	
KEYWORD	70:2	70:2	7	if
LEAF_NODE	70:2	70:2	8	if
LEAF_NODE	70:5	70:5	7	(
CONDITION	70:6	70:6	7	conv -> logs == NULL
EXPR	70:6	70:20	8	conv -> logs == NULL
FIELD	70:6	70:12	9	conv -> logs
LEAF_NODE	70:6	70:6	10	conv
LEAF_NODE	70:10	70:10	10	->
LEAF_NODE	70:12	70:12	10	logs
EQ_OPERATOR	70:17	70:17	9	==
LEAF_NODE	70:17	70:17	10	==
FIELD	70:20	70:20	9	NULL
LEAF_NODE	70:20	70:20	10	NULL
LEAF_NODE	70:24	70:24	7	)
STATEMENTS	71:3	71:3	7	
EXPR_STATEMENT	71:3	71:17	8	open_log ( conv ) ;
EXPR	71:3	71:3	9	open_log ( conv )
FUNCTION_CALL	71:3	71:16	10	open_log ( conv )
CALLEE	71:3	71:3	11	open_log
LEAF_NODE	71:3	71:3	12	open_log
LEAF_NODE	71:11	71:11	11	(
ARGUMENT	71:12	71:12	11	conv
FIELD	71:12	71:12	12	conv
LEAF_NODE	71:12	71:12	13	conv
LEAF_NODE	71:16	71:16	11	)
LEAF_NODE	71:17	71:17	9	;
EXPR_STATEMENT	72:2	72:18	6	log = conv -> logs ;
EXPR	72:2	72:2	7	log = conv -> logs
ASSIGN	72:2	72:8	8	log = conv -> logs
LVAL	72:2	72:2	9	log
FIELD	72:2	72:2	10	log
LEAF_NODE	72:2	72:2	11	log
ASSIGN_OP	72:6	72:6	9	=
LEAF_NODE	72:6	72:6	10	=
RVAL	72:8	72:8	9	conv -> logs
FIELD	72:8	72:14	10	conv -> logs
LEAF_NODE	72:8	72:8	11	conv
LEAF_NODE	72:12	72:12	11	->
LEAF_NODE	72:14	72:14	11	logs
LEAF_NODE	72:18	72:18	7	;
ITERATION	73:2	73:22	6	
KEYWORD	73:2	73:2	7	while
LEAF_NODE	73:2	73:2	8	while
LEAF_NODE	73:8	73:8	7	(
CONDITION	73:9	73:9	7	log != NULL
EXPR	73:9	73:16	8	log != NULL
FIELD	73:9	73:9	9	log
LEAF_NODE	73:9	73:9	10	log
EQ_OPERATOR	73:13	73:13	9	!=
LEAF_NODE	73:13	73:13	10	!=
FIELD	73:16	73:16	9	NULL
LEAF_NODE	73:16	73:16	10	NULL
LEAF_NODE	73:20	73:20	7	)
STATEMENTS	73:22	76:2	7	
LEAF_NODE	73:22	73:22	8	{
STATEMENTS	74:3	75:3	8	
EXPR_STATEMENT	74:3	74:75	9	purple_log_write ( ( PurpleLog * ) log -> data , flags , alias , mtime , displayed ) ;
EXPR	74:3	74:3	10	purple_log_write ( ( PurpleLog * ) log -> data , flags , alias , mtime , displayed )
FUNCTION_CALL	74:3	74:74	11	purple_log_write ( ( PurpleLog * ) log -> data , flags , alias , mtime , displayed )
CALLEE	74:3	74:3	12	purple_log_write
LEAF_NODE	74:3	74:3	13	purple_log_write
LEAF_NODE	74:19	74:19	12	(
ARGUMENT	74:20	74:33	12	( PurpleLog * ) log -> data
LEAF_NODE	74:20	74:20	13	(
TYPE_NAME	74:21	74:21	13	PurpleLog
LEAF_NODE	74:21	74:21	14	PurpleLog
LEAF_NODE	74:31	74:31	13	*
LEAF_NODE	74:32	74:32	13	)
FIELD	74:33	74:38	13	log -> data
LEAF_NODE	74:33	74:33	14	log
LEAF_NODE	74:36	74:36	14	->
LEAF_NODE	74:38	74:38	14	data
LEAF_NODE	74:42	74:42	12	,
ARGUMENT	74:44	74:44	12	flags
FIELD	74:44	74:44	13	flags
LEAF_NODE	74:44	74:44	14	flags
LEAF_NODE	74:49	74:49	12	,
ARGUMENT	74:51	74:51	12	alias
FIELD	74:51	74:51	13	alias
LEAF_NODE	74:51	74:51	14	alias
LEAF_NODE	74:56	74:56	12	,
ARGUMENT	74:58	74:58	12	mtime
FIELD	74:58	74:58	13	mtime
LEAF_NODE	74:58	74:58	14	mtime
LEAF_NODE	74:63	74:63	12	,
ARGUMENT	74:65	74:65	12	displayed
FIELD	74:65	74:65	13	displayed
LEAF_NODE	74:65	74:65	14	displayed
LEAF_NODE	74:74	74:74	12	)
LEAF_NODE	74:75	74:75	10	;
EXPR_STATEMENT	75:3	75:18	9	log = log -> next ;
EXPR	75:3	75:3	10	log = log -> next
ASSIGN	75:3	75:9	11	log = log -> next
LVAL	75:3	75:3	12	log
FIELD	75:3	75:3	13	log
LEAF_NODE	75:3	75:3	14	log
ASSIGN_OP	75:7	75:7	12	=
LEAF_NODE	75:7	75:7	13	=
RVAL	75:9	75:9	12	log -> next
FIELD	75:9	75:14	13	log -> next
LEAF_NODE	75:9	75:9	14	log
LEAF_NODE	75:12	75:12	14	->
LEAF_NODE	75:14	75:14	14	next
LEAF_NODE	75:18	75:18	10	;
LEAF_NODE	76:2	76:2	8	}
LEAF_NODE	77:1	77:1	5	}
SELECTION	78:1	79:2	3	
KEYWORD	78:1	78:1	4	if
LEAF_NODE	78:1	78:1	5	if
LEAF_NODE	78:4	78:4	4	(
CONDITION	78:5	78:5	4	ops && ops -> write_conv
EXPR	78:5	78:5	5	ops && ops -> write_conv
AND	78:5	78:12	6	ops && ops -> write_conv
EXPR	78:5	78:5	7	ops
FIELD	78:5	78:5	8	ops
LEAF_NODE	78:5	78:5	9	ops
LEAF_NODE	78:9	78:9	7	&&
EXPR	78:12	78:12	7	ops -> write_conv
FIELD	78:12	78:17	8	ops -> write_conv
LEAF_NODE	78:12	78:12	9	ops
LEAF_NODE	78:15	78:15	9	->
LEAF_NODE	78:17	78:17	9	write_conv
LEAF_NODE	78:27	78:27	4	)
STATEMENTS	79:2	79:2	4	
EXPR_STATEMENT	79:2	79:60	5	ops -> write_conv ( conv , who , alias , displayed , flags , mtime ) ;
EXPR	79:2	79:2	6	ops -> write_conv ( conv , who , alias , displayed , flags , mtime )
FUNCTION_CALL	79:2	79:59	7	ops -> write_conv ( conv , who , alias , displayed , flags , mtime )
CALLEE	79:2	79:7	8	ops -> write_conv
LEAF_NODE	79:2	79:2	9	ops
LEAF_NODE	79:5	79:5	9	->
LEAF_NODE	79:7	79:7	9	write_conv
LEAF_NODE	79:17	79:17	8	(
ARGUMENT	79:18	79:18	8	conv
FIELD	79:18	79:18	9	conv
LEAF_NODE	79:18	79:18	10	conv
LEAF_NODE	79:22	79:22	8	,
ARGUMENT	79:24	79:24	8	who
FIELD	79:24	79:24	9	who
LEAF_NODE	79:24	79:24	10	who
LEAF_NODE	79:27	79:27	8	,
ARGUMENT	79:29	79:29	8	alias
FIELD	79:29	79:29	9	alias
LEAF_NODE	79:29	79:29	10	alias
LEAF_NODE	79:34	79:34	8	,
ARGUMENT	79:36	79:36	8	displayed
FIELD	79:36	79:36	9	displayed
LEAF_NODE	79:36	79:36	10	displayed
LEAF_NODE	79:45	79:45	8	,
ARGUMENT	79:47	79:47	8	flags
FIELD	79:47	79:47	9	flags
LEAF_NODE	79:47	79:47	10	flags
LEAF_NODE	79:52	79:52	8	,
ARGUMENT	79:54	79:54	8	mtime
FIELD	79:54	79:54	9	mtime
LEAF_NODE	79:54	79:54	10	mtime
LEAF_NODE	79:59	79:59	8	)
LEAF_NODE	79:60	79:60	6	;
EXPR_STATEMENT	80:1	80:64	3	add_message_to_history ( conv , who , alias , message , flags , mtime ) ;
EXPR	80:1	80:1	4	add_message_to_history ( conv , who , alias , message , flags , mtime )
FUNCTION_CALL	80:1	80:63	5	add_message_to_history ( conv , who , alias , message , flags , mtime )
CALLEE	80:1	80:1	6	add_message_to_history
LEAF_NODE	80:1	80:1	7	add_message_to_history
LEAF_NODE	80:23	80:23	6	(
ARGUMENT	80:24	80:24	6	conv
FIELD	80:24	80:24	7	conv
LEAF_NODE	80:24	80:24	8	conv
LEAF_NODE	80:28	80:28	6	,
ARGUMENT	80:30	80:30	6	who
FIELD	80:30	80:30	7	who
LEAF_NODE	80:30	80:30	8	who
LEAF_NODE	80:33	80:33	6	,
ARGUMENT	80:35	80:35	6	alias
FIELD	80:35	80:35	7	alias
LEAF_NODE	80:35	80:35	8	alias
LEAF_NODE	80:40	80:40	6	,
ARGUMENT	80:42	80:42	6	message
FIELD	80:42	80:42	7	message
LEAF_NODE	80:42	80:42	8	message
LEAF_NODE	80:49	80:49	6	,
ARGUMENT	80:51	80:51	6	flags
FIELD	80:51	80:51	7	flags
LEAF_NODE	80:51	80:51	8	flags
LEAF_NODE	80:56	80:56	6	,
ARGUMENT	80:58	80:58	6	mtime
FIELD	80:58	80:58	7	mtime
LEAF_NODE	80:58	80:58	8	mtime
LEAF_NODE	80:63	80:63	6	)
LEAF_NODE	80:64	80:64	4	;
EXPR_STATEMENT	81:1	83:39	3	purple_signal_emit ( purple_conversations_get_handle ( ) , ( type == PURPLE_CONV_TYPE_IM ? "wrote-im-msg" : "wrote-chat-msg" ) , account , who , displayed , conv , flags ) ;
EXPR	81:1	81:1	4	purple_signal_emit ( purple_conversations_get_handle ( ) , ( type == PURPLE_CONV_TYPE_IM ? "wrote-im-msg" : "wrote-chat-msg" ) , account , who , displayed , conv , flags )
FUNCTION_CALL	81:1	83:38	5	purple_signal_emit ( purple_conversations_get_handle ( ) , ( type == PURPLE_CONV_TYPE_IM ? "wrote-im-msg" : "wrote-chat-msg" ) , account , who , displayed , conv , flags )
CALLEE	81:1	81:1	6	purple_signal_emit
LEAF_NODE	81:1	81:1	7	purple_signal_emit
LEAF_NODE	81:19	81:19	6	(
ARGUMENT	81:20	81:20	6	purple_conversations_get_handle ( )
FUNCTION_CALL	81:20	81:52	7	purple_conversations_get_handle ( )
CALLEE	81:20	81:20	8	purple_conversations_get_handle
LEAF_NODE	81:20	81:20	9	purple_conversations_get_handle
LEAF_NODE	81:51	81:51	8	(
LEAF_NODE	81:52	81:52	8	)
LEAF_NODE	81:53	81:53	6	,
ARGUMENT	82:2	82:66	6	( type == PURPLE_CONV_TYPE_IM ? "wrote-im-msg" : "wrote-chat-msg" )
LEAF_NODE	82:2	82:2	7	(
COND_EXPR	82:3	82:50	7	type == PURPLE_CONV_TYPE_IM ? "wrote-im-msg" : "wrote-chat-msg"
CONDITION	82:3	82:11	8	type == PURPLE_CONV_TYPE_IM
FIELD	82:3	82:3	9	type
LEAF_NODE	82:3	82:3	10	type
EQ_OPERATOR	82:8	82:8	9	==
LEAF_NODE	82:8	82:8	10	==
FIELD	82:11	82:11	9	PURPLE_CONV_TYPE_IM
LEAF_NODE	82:11	82:11	10	PURPLE_CONV_TYPE_IM
LEAF_NODE	82:31	82:31	8	?
EXPR	82:33	82:33	8	"wrote-im-msg"
FIELD	82:33	82:33	9	"wrote-im-msg"
LEAF_NODE	82:33	82:33	10	"wrote-im-msg"
LEAF_NODE	82:48	82:48	8	:
FIELD	82:50	82:50	8	"wrote-chat-msg"
LEAF_NODE	82:50	82:50	9	"wrote-chat-msg"
LEAF_NODE	82:66	82:66	7	)
LEAF_NODE	82:67	82:67	6	,
ARGUMENT	83:2	83:2	6	account
FIELD	83:2	83:2	7	account
LEAF_NODE	83:2	83:2	8	account
LEAF_NODE	83:9	83:9	6	,
ARGUMENT	83:11	83:11	6	who
FIELD	83:11	83:11	7	who
LEAF_NODE	83:11	83:11	8	who
LEAF_NODE	83:14	83:14	6	,
ARGUMENT	83:16	83:16	6	displayed
FIELD	83:16	83:16	7	displayed
LEAF_NODE	83:16	83:16	8	displayed
LEAF_NODE	83:25	83:25	6	,
ARGUMENT	83:27	83:27	6	conv
FIELD	83:27	83:27	7	conv
LEAF_NODE	83:27	83:27	8	conv
LEAF_NODE	83:31	83:31	6	,
ARGUMENT	83:33	83:33	6	flags
FIELD	83:33	83:33	7	flags
LEAF_NODE	83:33	83:33	8	flags
LEAF_NODE	83:38	83:38	6	)
LEAF_NODE	83:39	83:39	4	;
EXPR_STATEMENT	84:1	84:18	3	g_free ( displayed ) ;
EXPR	84:1	84:1	4	g_free ( displayed )
FUNCTION_CALL	84:1	84:17	5	g_free ( displayed )
CALLEE	84:1	84:1	6	g_free
LEAF_NODE	84:1	84:1	7	g_free
LEAF_NODE	84:7	84:7	6	(
ARGUMENT	84:8	84:8	6	displayed
FIELD	84:8	84:8	7	displayed
LEAF_NODE	84:8	84:8	8	displayed
LEAF_NODE	84:17	84:17	6	)
LEAF_NODE	84:18	84:18	4	;
LEAF_NODE	85:0	85:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	21:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	jabber_ipc_contact_has_feature
LEAF_NODE	2:0	2:0	3	jabber_ipc_contact_has_feature
PARAMETER_LIST	2:30	3:51	2	( PurpleAccount * account , const gchar * jid , const gchar * feature )
LEAF_NODE	2:30	2:30	3	(
PARAMETER_DECL	2:31	2:46	3	PurpleAccount * account
TYPE	2:31	2:45	4	PurpleAccount *
TYPE_NAME	2:31	2:31	5	PurpleAccount
LEAF_NODE	2:31	2:31	6	PurpleAccount
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	account
LEAF_NODE	2:46	2:46	5	account
LEAF_NODE	2:53	2:53	3	,
PARAMETER_DECL	2:55	2:68	3	const gchar * jid
TYPE	2:55	2:67	4	const gchar *
TYPE_NAME	2:55	2:61	5	const gchar
LEAF_NODE	2:55	2:55	6	const
LEAF_NODE	2:61	2:61	6	gchar
POINTER	2:67	2:67	5	*
LEAF_NODE	2:67	2:67	6	*
NAME	2:68	2:68	4	jid
LEAF_NODE	2:68	2:68	5	jid
LEAF_NODE	2:71	2:71	3	,
PARAMETER_DECL	3:31	3:44	3	const gchar * feature
TYPE	3:31	3:43	4	const gchar *
TYPE_NAME	3:31	3:37	5	const gchar
LEAF_NODE	3:31	3:31	6	const
LEAF_NODE	3:37	3:37	6	gchar
POINTER	3:43	3:43	5	*
LEAF_NODE	3:43	3:43	6	*
NAME	3:44	3:44	4	feature
LEAF_NODE	3:44	3:44	5	feature
LEAF_NODE	3:51	3:51	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	20:1	2	
SIMPLE_DECL	5:1	5:62	3	PurpleConnection * gc ; gc = purple_account_get_connection ( account ) ;
VAR_DECL	5:1	5:19	4	PurpleConnection * gc ; gc = purple_account_get_connection ( account )
TYPE	5:1	5:18	5	PurpleConnection *
TYPE_NAME	5:1	5:1	6	PurpleConnection
LEAF_NODE	5:1	5:1	7	PurpleConnection
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	gc
LEAF_NODE	5:19	5:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	5:19	5:19	5	gc = purple_account_get_connection ( account )
ASSIGN	5:19	5:24	6	gc = purple_account_get_connection ( account )
LVAL	5:19	5:19	7	gc
NAME	5:19	5:19	8	gc
LEAF_NODE	5:19	5:19	9	gc
ASSIGN_OP	5:22	5:22	7	=
LEAF_NODE	5:22	5:22	8	=
RVAL	5:24	5:24	7	purple_account_get_connection ( account )
FUNCTION_CALL	5:24	5:61	8	purple_account_get_connection ( account )
CALLEE	5:24	5:24	9	purple_account_get_connection
LEAF_NODE	5:24	5:24	10	purple_account_get_connection
LEAF_NODE	5:53	5:53	9	(
ARGUMENT	5:54	5:54	9	account
FIELD	5:54	5:54	10	account
LEAF_NODE	5:54	5:54	11	account
LEAF_NODE	5:61	5:61	9	)
LEAF_NODE	5:62	5:62	4	;
SIMPLE_DECL	6:1	6:17	3	JabberStream * js ;
VAR_DECL	6:1	6:15	4	JabberStream * js
TYPE	6:1	6:14	5	JabberStream *
TYPE_NAME	6:1	6:1	6	JabberStream
LEAF_NODE	6:1	6:1	7	JabberStream
POINTER	6:14	6:14	6	*
LEAF_NODE	6:14	6:14	7	*
NAME	6:15	6:15	5	js
LEAF_NODE	6:15	6:15	6	js
LEAF_NODE	6:17	6:17	4	;
SIMPLE_DECL	7:1	7:16	3	JabberBuddy * jb ;
VAR_DECL	7:1	7:14	4	JabberBuddy * jb
TYPE	7:1	7:13	5	JabberBuddy *
TYPE_NAME	7:1	7:1	6	JabberBuddy
LEAF_NODE	7:1	7:1	7	JabberBuddy
POINTER	7:13	7:13	6	*
LEAF_NODE	7:13	7:13	7	*
NAME	7:14	7:14	5	jb
LEAF_NODE	7:14	7:14	6	jb
LEAF_NODE	7:16	7:16	4	;
SIMPLE_DECL	8:1	8:25	3	JabberBuddyResource * jbr ;
VAR_DECL	8:1	8:22	4	JabberBuddyResource * jbr
TYPE	8:1	8:21	5	JabberBuddyResource *
TYPE_NAME	8:1	8:1	6	JabberBuddyResource
LEAF_NODE	8:1	8:1	7	JabberBuddyResource
POINTER	8:21	8:21	6	*
LEAF_NODE	8:21	8:21	7	*
NAME	8:22	8:22	5	jbr
LEAF_NODE	8:22	8:22	6	jbr
LEAF_NODE	8:25	8:25	4	;
SIMPLE_DECL	9:1	9:16	3	gchar * resource ;
VAR_DECL	9:1	9:8	4	gchar * resource
TYPE	9:1	9:7	5	gchar *
TYPE_NAME	9:1	9:1	6	gchar
LEAF_NODE	9:1	9:1	7	gchar
POINTER	9:7	9:7	6	*
LEAF_NODE	9:7	9:7	7	*
NAME	9:8	9:8	5	resource
LEAF_NODE	9:8	9:8	6	resource
LEAF_NODE	9:16	9:16	4	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	! purple_account_is_connected ( account )
EXPR	10:5	10:5	5	! purple_account_is_connected ( account )
UNARY_EXPR	10:5	10:6	6	! purple_account_is_connected ( account )
UNARY_OPERATOR	10:5	10:5	7	!
LEAF_NODE	10:5	10:5	8	!
FUNCTION_CALL	10:6	10:41	7	purple_account_is_connected ( account )
CALLEE	10:6	10:6	8	purple_account_is_connected
LEAF_NODE	10:6	10:6	9	purple_account_is_connected
LEAF_NODE	10:33	10:33	8	(
ARGUMENT	10:34	10:34	8	account
FIELD	10:34	10:34	9	account
LEAF_NODE	10:34	10:34	10	account
LEAF_NODE	10:41	10:41	8	)
LEAF_NODE	10:42	10:42	4	)
STATEMENTS	11:2	11:2	4	
JUMP_STATEMENT	11:2	11:14	5	return FALSE ;
KEYWORD	11:2	11:2	6	return
LEAF_NODE	11:2	11:2	7	return
DESTINATION	11:9	11:9	6	FALSE
EXPR	11:9	11:9	7	FALSE
FIELD	11:9	11:9	8	FALSE
LEAF_NODE	11:9	11:9	9	FALSE
LEAF_NODE	11:14	11:14	6	;
EXPR_STATEMENT	12:1	12:20	3	js = gc -> proto_data ;
EXPR	12:1	12:1	4	js = gc -> proto_data
ASSIGN	12:1	12:6	5	js = gc -> proto_data
LVAL	12:1	12:1	6	js
FIELD	12:1	12:1	7	js
LEAF_NODE	12:1	12:1	8	js
ASSIGN_OP	12:4	12:4	6	=
LEAF_NODE	12:4	12:4	7	=
RVAL	12:6	12:6	6	gc -> proto_data
FIELD	12:6	12:10	7	gc -> proto_data
LEAF_NODE	12:6	12:6	8	gc
LEAF_NODE	12:8	12:8	8	->
LEAF_NODE	12:10	12:10	8	proto_data
LEAF_NODE	12:20	12:20	4	;
SELECTION	13:1	15:56	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	! ( resource = jabber_get_resource ( jid ) ) || ! ( jb = jabber_buddy_find ( js , jid , FALSE ) ) || ! ( jbr = jabber_buddy_find_resource ( jb , resource ) )
EXPR	13:5	13:5	5	! ( resource = jabber_get_resource ( jid ) ) || ! ( jb = jabber_buddy_find ( js , jid , FALSE ) ) || ! ( jbr = jabber_buddy_find_resource ( jb , resource ) )
OR	13:5	14:5	6	! ( resource = jabber_get_resource ( jid ) ) || ! ( jb = jabber_buddy_find ( js , jid , FALSE ) ) || ! ( jbr = jabber_buddy_find_resource ( jb , resource ) )
EXPR	13:5	13:5	7	! ( resource = jabber_get_resource ( jid ) )
UNARY_EXPR	13:5	13:42	8	! ( resource = jabber_get_resource ( jid ) )
UNARY_OPERATOR	13:5	13:5	9	!
LEAF_NODE	13:5	13:5	10	!
LEAF_NODE	13:6	13:6	9	(
ASSIGN	13:7	13:18	9	resource = jabber_get_resource ( jid )
LVAL	13:7	13:7	10	resource
FIELD	13:7	13:7	11	resource
LEAF_NODE	13:7	13:7	12	resource
ASSIGN_OP	13:16	13:16	10	=
LEAF_NODE	13:16	13:16	11	=
RVAL	13:18	13:18	10	jabber_get_resource ( jid )
FUNCTION_CALL	13:18	13:41	11	jabber_get_resource ( jid )
CALLEE	13:18	13:18	12	jabber_get_resource
LEAF_NODE	13:18	13:18	13	jabber_get_resource
LEAF_NODE	13:37	13:37	12	(
ARGUMENT	13:38	13:38	12	jid
FIELD	13:38	13:38	13	jid
LEAF_NODE	13:38	13:38	14	jid
LEAF_NODE	13:41	13:41	12	)
LEAF_NODE	13:42	13:42	9	)
LEAF_NODE	13:44	13:44	7	||
EXPR	14:5	14:5	7	! ( jb = jabber_buddy_find ( js , jid , FALSE ) ) || ! ( jbr = jabber_buddy_find_resource ( jb , resource ) )
OR	14:5	15:5	8	! ( jb = jabber_buddy_find ( js , jid , FALSE ) ) || ! ( jbr = jabber_buddy_find_resource ( jb , resource ) )
EXPR	14:5	14:5	9	! ( jb = jabber_buddy_find ( js , jid , FALSE ) )
UNARY_EXPR	14:5	14:45	10	! ( jb = jabber_buddy_find ( js , jid , FALSE ) )
UNARY_OPERATOR	14:5	14:5	11	!
LEAF_NODE	14:5	14:5	12	!
LEAF_NODE	14:6	14:6	11	(
ASSIGN	14:7	14:12	11	jb = jabber_buddy_find ( js , jid , FALSE )
LVAL	14:7	14:7	12	jb
FIELD	14:7	14:7	13	jb
LEAF_NODE	14:7	14:7	14	jb
ASSIGN_OP	14:10	14:10	12	=
LEAF_NODE	14:10	14:10	13	=
RVAL	14:12	14:12	12	jabber_buddy_find ( js , jid , FALSE )
FUNCTION_CALL	14:12	14:44	13	jabber_buddy_find ( js , jid , FALSE )
CALLEE	14:12	14:12	14	jabber_buddy_find
LEAF_NODE	14:12	14:12	15	jabber_buddy_find
LEAF_NODE	14:29	14:29	14	(
ARGUMENT	14:30	14:30	14	js
FIELD	14:30	14:30	15	js
LEAF_NODE	14:30	14:30	16	js
LEAF_NODE	14:32	14:32	14	,
ARGUMENT	14:34	14:34	14	jid
FIELD	14:34	14:34	15	jid
LEAF_NODE	14:34	14:34	16	jid
LEAF_NODE	14:37	14:37	14	,
ARGUMENT	14:39	14:39	14	FALSE
FIELD	14:39	14:39	15	FALSE
LEAF_NODE	14:39	14:39	16	FALSE
LEAF_NODE	14:44	14:44	14	)
LEAF_NODE	14:45	14:45	11	)
LEAF_NODE	14:47	14:47	9	||
EXPR	15:5	15:5	9	! ( jbr = jabber_buddy_find_resource ( jb , resource ) )
UNARY_EXPR	15:5	15:53	10	! ( jbr = jabber_buddy_find_resource ( jb , resource ) )
UNARY_OPERATOR	15:5	15:5	11	!
LEAF_NODE	15:5	15:5	12	!
LEAF_NODE	15:6	15:6	11	(
ASSIGN	15:7	15:13	11	jbr = jabber_buddy_find_resource ( jb , resource )
LVAL	15:7	15:7	12	jbr
FIELD	15:7	15:7	13	jbr
LEAF_NODE	15:7	15:7	14	jbr
ASSIGN_OP	15:11	15:11	12	=
LEAF_NODE	15:11	15:11	13	=
RVAL	15:13	15:13	12	jabber_buddy_find_resource ( jb , resource )
FUNCTION_CALL	15:13	15:52	13	jabber_buddy_find_resource ( jb , resource )
CALLEE	15:13	15:13	14	jabber_buddy_find_resource
LEAF_NODE	15:13	15:13	15	jabber_buddy_find_resource
LEAF_NODE	15:39	15:39	14	(
ARGUMENT	15:40	15:40	14	jb
FIELD	15:40	15:40	15	jb
LEAF_NODE	15:40	15:40	16	jb
LEAF_NODE	15:42	15:42	14	,
ARGUMENT	15:44	15:44	14	resource
FIELD	15:44	15:44	15	resource
LEAF_NODE	15:44	15:44	16	resource
LEAF_NODE	15:52	15:52	14	)
LEAF_NODE	15:53	15:53	11	)
LEAF_NODE	15:54	15:54	4	)
STATEMENTS	15:56	18:1	4	
LEAF_NODE	15:56	15:56	5	{
STATEMENTS	16:2	17:2	5	
EXPR_STATEMENT	16:2	16:18	6	g_free ( resource ) ;
EXPR	16:2	16:2	7	g_free ( resource )
FUNCTION_CALL	16:2	16:17	8	g_free ( resource )
CALLEE	16:2	16:2	9	g_free
LEAF_NODE	16:2	16:2	10	g_free
LEAF_NODE	16:8	16:8	9	(
ARGUMENT	16:9	16:9	9	resource
FIELD	16:9	16:9	10	resource
LEAF_NODE	16:9	16:9	11	resource
LEAF_NODE	16:17	16:17	9	)
LEAF_NODE	16:18	16:18	7	;
JUMP_STATEMENT	17:2	17:14	6	return FALSE ;
KEYWORD	17:2	17:2	7	return
LEAF_NODE	17:2	17:2	8	return
DESTINATION	17:9	17:9	7	FALSE
EXPR	17:9	17:9	8	FALSE
FIELD	17:9	17:9	9	FALSE
LEAF_NODE	17:9	17:9	10	FALSE
LEAF_NODE	17:14	17:14	7	;
LEAF_NODE	18:1	18:1	5	}
EXPR_STATEMENT	19:1	19:17	3	g_free ( resource ) ;
EXPR	19:1	19:1	4	g_free ( resource )
FUNCTION_CALL	19:1	19:16	5	g_free ( resource )
CALLEE	19:1	19:1	6	g_free
LEAF_NODE	19:1	19:1	7	g_free
LEAF_NODE	19:7	19:7	6	(
ARGUMENT	19:8	19:8	6	resource
FIELD	19:8	19:8	7	resource
LEAF_NODE	19:8	19:8	8	resource
LEAF_NODE	19:16	19:16	6	)
LEAF_NODE	19:17	19:17	4	;
JUMP_STATEMENT	20:1	20:52	3	return jabber_resource_has_capability ( jbr , feature ) ;
KEYWORD	20:1	20:1	4	return
LEAF_NODE	20:1	20:1	5	return
DESTINATION	20:8	20:8	4	jabber_resource_has_capability ( jbr , feature )
EXPR	20:8	20:8	5	jabber_resource_has_capability ( jbr , feature )
FUNCTION_CALL	20:8	20:51	6	jabber_resource_has_capability ( jbr , feature )
CALLEE	20:8	20:8	7	jabber_resource_has_capability
LEAF_NODE	20:8	20:8	8	jabber_resource_has_capability
LEAF_NODE	20:38	20:38	7	(
ARGUMENT	20:39	20:39	7	jbr
FIELD	20:39	20:39	8	jbr
LEAF_NODE	20:39	20:39	9	jbr
LEAF_NODE	20:42	20:42	7	,
ARGUMENT	20:44	20:44	7	feature
FIELD	20:44	20:44	8	feature
LEAF_NODE	20:44	20:44	9	feature
LEAF_NODE	20:51	20:51	7	)
LEAF_NODE	20:52	20:52	4	;
LEAF_NODE	21:0	21:0	2	}

SOURCE_FILE	17:1	18:1	0	
SIMPLE_DECL	17:1	17:24	1	PurpleLogLogger * logger ;
VAR_DECL	17:1	17:18	2	PurpleLogLogger * logger
TYPE	17:1	17:17	3	PurpleLogLogger *
TYPE_NAME	17:1	17:1	4	PurpleLogLogger
LEAF_NODE	17:1	17:1	5	PurpleLogLogger
POINTER	17:17	17:17	4	*
LEAF_NODE	17:17	17:17	5	*
NAME	17:18	17:18	3	logger
LEAF_NODE	17:18	17:18	4	logger
LEAF_NODE	17:24	17:24	2	;
SIMPLE_DECL	18:1	18:13	1	va_list args ;
VAR_DECL	18:1	18:9	2	va_list args
TYPE	18:1	18:1	3	va_list
TYPE_NAME	18:1	18:1	4	va_list
LEAF_NODE	18:1	18:1	5	va_list
NAME	18:9	18:9	3	args
LEAF_NODE	18:9	18:9	4	args
LEAF_NODE	18:13	18:13	2	;

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	6:0	1	
RETURN_TYPE	2:0	2:11	2	const char *
TYPE_NAME	2:0	2:6	3	const char
LEAF_NODE	2:0	2:0	4	const
LEAF_NODE	2:6	2:6	4	char
LEAF_NODE	2:11	2:11	3	*
FUNCTION_NAME	2:12	2:12	2	purple_conversation_message_get_sender
LEAF_NODE	2:12	2:12	3	purple_conversation_message_get_sender
PARAMETER_LIST	2:50	2:73	2	( PurpleConvMessage * msg )
LEAF_NODE	2:50	2:50	3	(
PARAMETER_DECL	2:51	2:70	3	PurpleConvMessage * msg
TYPE	2:51	2:69	4	PurpleConvMessage *
TYPE_NAME	2:51	2:51	5	PurpleConvMessage
LEAF_NODE	2:51	2:51	6	PurpleConvMessage
POINTER	2:69	2:69	5	*
LEAF_NODE	2:69	2:69	6	*
NAME	2:70	2:70	4	msg
LEAF_NODE	2:70	2:70	5	msg
LEAF_NODE	2:73	2:73	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:32	3	g_return_val_if_fail ( msg , NULL ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( msg , NULL )
FUNCTION_CALL	4:1	4:31	5	g_return_val_if_fail ( msg , NULL )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:22	6	msg
FIELD	4:22	4:22	7	msg
LEAF_NODE	4:22	4:22	8	msg
LEAF_NODE	4:25	4:25	6	,
ARGUMENT	4:27	4:27	6	NULL
FIELD	4:27	4:27	7	NULL
LEAF_NODE	4:27	4:27	8	NULL
LEAF_NODE	4:31	4:31	6	)
LEAF_NODE	4:32	4:32	4	;
JUMP_STATEMENT	5:1	5:16	3	return msg -> who ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	msg -> who
EXPR	5:8	5:8	5	msg -> who
FIELD	5:8	5:13	6	msg -> who
LEAF_NODE	5:8	5:8	7	msg
LEAF_NODE	5:11	5:11	7	->
LEAF_NODE	5:13	5:13	7	who
LEAF_NODE	5:16	5:16	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	value_equals
LEAF_NODE	2:0	2:0	3	value_equals
PARAMETER_LIST	2:12	2:61	2	( gpointer key , gpointer value , gpointer user_data )
LEAF_NODE	2:12	2:12	3	(
PARAMETER_DECL	2:13	2:22	3	gpointer key
TYPE	2:13	2:13	4	gpointer
TYPE_NAME	2:13	2:13	5	gpointer
LEAF_NODE	2:13	2:13	6	gpointer
NAME	2:22	2:22	4	key
LEAF_NODE	2:22	2:22	5	key
LEAF_NODE	2:25	2:25	3	,
PARAMETER_DECL	2:27	2:36	3	gpointer value
TYPE	2:27	2:27	4	gpointer
TYPE_NAME	2:27	2:27	5	gpointer
LEAF_NODE	2:27	2:27	6	gpointer
NAME	2:36	2:36	4	value
LEAF_NODE	2:36	2:36	5	value
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:52	3	gpointer user_data
TYPE	2:43	2:43	4	gpointer
TYPE_NAME	2:43	2:43	5	gpointer
LEAF_NODE	2:43	2:43	6	gpointer
NAME	2:52	2:52	4	user_data
LEAF_NODE	2:52	2:52	5	user_data
LEAF_NODE	2:61	2:61	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:28	3	return ( value == user_data ) ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	( value == user_data )
EXPR	4:8	4:27	5	( value == user_data )
LEAF_NODE	4:8	4:8	6	(
FIELD	4:9	4:9	6	value
LEAF_NODE	4:9	4:9	7	value
EQ_OPERATOR	4:15	4:15	6	==
LEAF_NODE	4:15	4:15	7	==
FIELD	4:18	4:18	6	user_data
LEAF_NODE	4:18	4:18	7	user_data
LEAF_NODE	4:27	4:27	6	)
LEAF_NODE	4:28	4:28	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	aim_ssi_item_debug_append
LEAF_NODE	2:0	2:0	3	aim_ssi_item_debug_append
PARAMETER_LIST	2:25	2:79	2	( GString * str , char * prefix , struct aim_ssi_item * item )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:35	3	GString * str
TYPE	2:26	2:34	4	GString *
TYPE_NAME	2:26	2:26	5	GString
LEAF_NODE	2:26	2:26	6	GString
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	str
LEAF_NODE	2:35	2:35	5	str
LEAF_NODE	2:38	2:38	3	,
PARAMETER_DECL	2:40	2:46	3	char * prefix
TYPE	2:40	2:45	4	char *
TYPE_NAME	2:40	2:40	5	char
LEAF_NODE	2:40	2:40	6	char
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	prefix
LEAF_NODE	2:46	2:46	5	prefix
LEAF_NODE	2:52	2:52	3	,
PARAMETER_DECL	2:54	2:75	3	struct aim_ssi_item * item
TYPE	2:54	2:74	4	struct aim_ssi_item *
TYPE_NAME	2:54	2:61	5	struct aim_ssi_item
LEAF_NODE	2:54	2:54	6	struct
LEAF_NODE	2:61	2:61	6	aim_ssi_item
POINTER	2:74	2:74	5	*
LEAF_NODE	2:74	2:74	6	*
NAME	2:75	2:75	4	item
LEAF_NODE	2:75	2:75	5	item
LEAF_NODE	2:79	2:79	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	7:37	3	g_string_append_printf ( str , "%s gid=0x%04hx, bid=0x%04hx, list_type=0x%04hx [%s], name=%s.\n" , prefix , item -> gid , item -> bid , item -> type , aim_ssi_type_to_string ( item -> type ) , item -> name ? item -> name : "(null)" ) ;
EXPR	4:1	4:1	4	g_string_append_printf ( str , "%s gid=0x%04hx, bid=0x%04hx, list_type=0x%04hx [%s], name=%s.\n" , prefix , item -> gid , item -> bid , item -> type , aim_ssi_type_to_string ( item -> type ) , item -> name ? item -> name : "(null)" )
FUNCTION_CALL	4:1	7:36	5	g_string_append_printf ( str , "%s gid=0x%04hx, bid=0x%04hx, list_type=0x%04hx [%s], name=%s.\n" , prefix , item -> gid , item -> bid , item -> type , aim_ssi_type_to_string ( item -> type ) , item -> name ? item -> name : "(null)" )
CALLEE	4:1	4:1	6	g_string_append_printf
LEAF_NODE	4:1	4:1	7	g_string_append_printf
LEAF_NODE	4:23	4:23	6	(
ARGUMENT	4:24	4:24	6	str
FIELD	4:24	4:24	7	str
LEAF_NODE	4:24	4:24	8	str
LEAF_NODE	4:27	4:27	6	,
ARGUMENT	5:2	5:2	6	"%s gid=0x%04hx, bid=0x%04hx, list_type=0x%04hx [%s], name=%s.\n"
FIELD	5:2	5:2	7	"%s gid=0x%04hx, bid=0x%04hx, list_type=0x%04hx [%s], name=%s.\n"
LEAF_NODE	5:2	5:2	8	"%s gid=0x%04hx, bid=0x%04hx, list_type=0x%04hx [%s], name=%s.\n"
LEAF_NODE	5:67	5:67	6	,
ARGUMENT	6:2	6:2	6	prefix
FIELD	6:2	6:2	7	prefix
LEAF_NODE	6:2	6:2	8	prefix
LEAF_NODE	6:8	6:8	6	,
ARGUMENT	6:10	6:10	6	item -> gid
FIELD	6:10	6:16	7	item -> gid
LEAF_NODE	6:10	6:10	8	item
LEAF_NODE	6:14	6:14	8	->
LEAF_NODE	6:16	6:16	8	gid
LEAF_NODE	6:19	6:19	6	,
ARGUMENT	6:21	6:21	6	item -> bid
FIELD	6:21	6:27	7	item -> bid
LEAF_NODE	6:21	6:21	8	item
LEAF_NODE	6:25	6:25	8	->
LEAF_NODE	6:27	6:27	8	bid
LEAF_NODE	6:30	6:30	6	,
ARGUMENT	6:32	6:32	6	item -> type
FIELD	6:32	6:38	7	item -> type
LEAF_NODE	6:32	6:32	8	item
LEAF_NODE	6:36	6:36	8	->
LEAF_NODE	6:38	6:38	8	type
LEAF_NODE	6:42	6:42	6	,
ARGUMENT	6:44	6:44	6	aim_ssi_type_to_string ( item -> type )
FUNCTION_CALL	6:44	6:77	7	aim_ssi_type_to_string ( item -> type )
CALLEE	6:44	6:44	8	aim_ssi_type_to_string
LEAF_NODE	6:44	6:44	9	aim_ssi_type_to_string
LEAF_NODE	6:66	6:66	8	(
ARGUMENT	6:67	6:67	8	item -> type
FIELD	6:67	6:73	9	item -> type
LEAF_NODE	6:67	6:67	10	item
LEAF_NODE	6:71	6:71	10	->
LEAF_NODE	6:73	6:73	10	type
LEAF_NODE	6:77	6:77	8	)
LEAF_NODE	6:78	6:78	6	,
ARGUMENT	7:2	7:2	6	item -> name ? item -> name : "(null)"
COND_EXPR	7:2	7:28	7	item -> name ? item -> name : "(null)"
CONDITION	7:2	7:2	8	item -> name
FIELD	7:2	7:8	9	item -> name
LEAF_NODE	7:2	7:2	10	item
LEAF_NODE	7:6	7:6	10	->
LEAF_NODE	7:8	7:8	10	name
LEAF_NODE	7:13	7:13	8	?
EXPR	7:15	7:15	8	item -> name
FIELD	7:15	7:21	9	item -> name
LEAF_NODE	7:15	7:15	10	item
LEAF_NODE	7:19	7:19	10	->
LEAF_NODE	7:21	7:21	10	name
LEAF_NODE	7:26	7:26	8	:
FIELD	7:28	7:28	8	"(null)"
LEAF_NODE	7:28	7:28	9	"(null)"
LEAF_NODE	7:36	7:36	6	)
LEAF_NODE	7:37	7:37	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	16:0	1	
RETURN_TYPE	1:0	1:25	2	static PurpleStoredImage *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	PurpleStoredImage
LEAF_NODE	1:7	1:7	4	PurpleStoredImage
LEAF_NODE	1:25	1:25	3	*
FUNCTION_NAME	2:0	2:0	2	purple_smiley_data_new
LEAF_NODE	2:0	2:0	3	purple_smiley_data_new
PARAMETER_LIST	2:22	2:66	2	( guchar * smiley_data , size_t smiley_data_len )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:31	3	guchar * smiley_data
TYPE	2:23	2:30	4	guchar *
TYPE_NAME	2:23	2:23	5	guchar
LEAF_NODE	2:23	2:23	6	guchar
POINTER	2:30	2:30	5	*
LEAF_NODE	2:30	2:30	6	*
NAME	2:31	2:31	4	smiley_data
LEAF_NODE	2:31	2:31	5	smiley_data
LEAF_NODE	2:42	2:42	3	,
PARAMETER_DECL	2:44	2:51	3	size_t smiley_data_len
TYPE	2:44	2:44	4	size_t
TYPE_NAME	2:44	2:44	5	size_t
LEAF_NODE	2:44	2:44	6	size_t
NAME	2:51	2:51	4	smiley_data_len
LEAF_NODE	2:51	2:51	5	smiley_data_len
LEAF_NODE	2:66	2:66	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	15:1	2	
SIMPLE_DECL	4:1	4:15	3	char * filename ;
VAR_DECL	4:1	4:7	4	char * filename
TYPE	4:1	4:6	5	char *
TYPE_NAME	4:1	4:1	6	char
LEAF_NODE	4:1	4:1	7	char
POINTER	4:6	4:6	6	*
LEAF_NODE	4:6	4:6	7	*
NAME	4:7	4:7	5	filename
LEAF_NODE	4:7	4:7	6	filename
LEAF_NODE	4:15	4:15	4	;
SIMPLE_DECL	5:1	5:30	3	PurpleStoredImage * stored_img ;
VAR_DECL	5:1	5:20	4	PurpleStoredImage * stored_img
TYPE	5:1	5:19	5	PurpleStoredImage *
TYPE_NAME	5:1	5:1	6	PurpleStoredImage
LEAF_NODE	5:1	5:1	7	PurpleStoredImage
POINTER	5:19	5:19	6	*
LEAF_NODE	5:19	5:19	7	*
NAME	5:20	5:20	5	stored_img
LEAF_NODE	5:20	5:20	6	stored_img
LEAF_NODE	5:30	5:30	4	;
EXPR_STATEMENT	6:1	6:50	3	g_return_val_if_fail ( smiley_data != NULL , NULL ) ;
EXPR	6:1	6:1	4	g_return_val_if_fail ( smiley_data != NULL , NULL )
FUNCTION_CALL	6:1	6:49	5	g_return_val_if_fail ( smiley_data != NULL , NULL )
CALLEE	6:1	6:1	6	g_return_val_if_fail
LEAF_NODE	6:1	6:1	7	g_return_val_if_fail
LEAF_NODE	6:21	6:21	6	(
ARGUMENT	6:22	6:37	6	smiley_data != NULL
FIELD	6:22	6:22	7	smiley_data
LEAF_NODE	6:22	6:22	8	smiley_data
EQ_OPERATOR	6:34	6:34	7	!=
LEAF_NODE	6:34	6:34	8	!=
FIELD	6:37	6:37	7	NULL
LEAF_NODE	6:37	6:37	8	NULL
LEAF_NODE	6:41	6:41	6	,
ARGUMENT	6:45	6:45	6	NULL
FIELD	6:45	6:45	7	NULL
LEAF_NODE	6:45	6:45	8	NULL
LEAF_NODE	6:49	6:49	6	)
LEAF_NODE	6:50	6:50	4	;
EXPR_STATEMENT	7:1	7:50	3	g_return_val_if_fail ( smiley_data_len > 0 , NULL ) ;
EXPR	7:1	7:1	4	g_return_val_if_fail ( smiley_data_len > 0 , NULL )
FUNCTION_CALL	7:1	7:49	5	g_return_val_if_fail ( smiley_data_len > 0 , NULL )
CALLEE	7:1	7:1	6	g_return_val_if_fail
LEAF_NODE	7:1	7:1	7	g_return_val_if_fail
LEAF_NODE	7:21	7:21	6	(
ARGUMENT	7:22	7:41	6	smiley_data_len > 0
FIELD	7:22	7:22	7	smiley_data_len
LEAF_NODE	7:22	7:22	8	smiley_data_len
REL_OPERATOR	7:39	7:39	7	>
LEAF_NODE	7:39	7:39	8	>
FIELD	7:41	7:41	7	0
LEAF_NODE	7:41	7:41	8	0
LEAF_NODE	7:42	7:42	6	,
ARGUMENT	7:45	7:45	6	NULL
FIELD	7:45	7:45	7	NULL
LEAF_NODE	7:45	7:45	8	NULL
LEAF_NODE	7:49	7:49	6	)
LEAF_NODE	7:50	7:50	4	;
EXPR_STATEMENT	8:1	8:72	3	filename = purple_util_get_image_filename ( smiley_data , smiley_data_len ) ;
EXPR	8:1	8:1	4	filename = purple_util_get_image_filename ( smiley_data , smiley_data_len )
ASSIGN	8:1	8:12	5	filename = purple_util_get_image_filename ( smiley_data , smiley_data_len )
LVAL	8:1	8:1	6	filename
FIELD	8:1	8:1	7	filename
LEAF_NODE	8:1	8:1	8	filename
ASSIGN_OP	8:10	8:10	6	=
LEAF_NODE	8:10	8:10	7	=
RVAL	8:12	8:12	6	purple_util_get_image_filename ( smiley_data , smiley_data_len )
FUNCTION_CALL	8:12	8:71	7	purple_util_get_image_filename ( smiley_data , smiley_data_len )
CALLEE	8:12	8:12	8	purple_util_get_image_filename
LEAF_NODE	8:12	8:12	9	purple_util_get_image_filename
LEAF_NODE	8:42	8:42	8	(
ARGUMENT	8:43	8:43	8	smiley_data
FIELD	8:43	8:43	9	smiley_data
LEAF_NODE	8:43	8:43	10	smiley_data
LEAF_NODE	8:54	8:54	8	,
ARGUMENT	8:56	8:56	8	smiley_data_len
FIELD	8:56	8:56	9	smiley_data_len
LEAF_NODE	8:56	8:56	10	smiley_data_len
LEAF_NODE	8:71	8:71	8	)
LEAF_NODE	8:72	8:72	4	;
SELECTION	9:1	9:23	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	filename == NULL
EXPR	9:5	9:17	5	filename == NULL
FIELD	9:5	9:5	6	filename
LEAF_NODE	9:5	9:5	7	filename
EQ_OPERATOR	9:14	9:14	6	==
LEAF_NODE	9:14	9:14	7	==
FIELD	9:17	9:17	6	NULL
LEAF_NODE	9:17	9:17	7	NULL
LEAF_NODE	9:21	9:21	4	)
STATEMENTS	9:23	12:1	4	
LEAF_NODE	9:23	9:23	5	{
STATEMENTS	10:2	11:2	5	
EXPR_STATEMENT	10:2	10:21	6	g_free ( smiley_data ) ;
EXPR	10:2	10:2	7	g_free ( smiley_data )
FUNCTION_CALL	10:2	10:20	8	g_free ( smiley_data )
CALLEE	10:2	10:2	9	g_free
LEAF_NODE	10:2	10:2	10	g_free
LEAF_NODE	10:8	10:8	9	(
ARGUMENT	10:9	10:9	9	smiley_data
FIELD	10:9	10:9	10	smiley_data
LEAF_NODE	10:9	10:9	11	smiley_data
LEAF_NODE	10:20	10:20	9	)
LEAF_NODE	10:21	10:21	7	;
JUMP_STATEMENT	11:2	11:13	6	return NULL ;
KEYWORD	11:2	11:2	7	return
LEAF_NODE	11:2	11:2	8	return
DESTINATION	11:9	11:9	7	NULL
EXPR	11:9	11:9	8	NULL
FIELD	11:9	11:9	9	NULL
LEAF_NODE	11:9	11:9	10	NULL
LEAF_NODE	11:13	11:13	7	;
LEAF_NODE	12:1	12:1	5	}
EXPR_STATEMENT	13:1	13:73	3	stored_img = purple_imgstore_add ( smiley_data , smiley_data_len , filename ) ;
EXPR	13:1	13:1	4	stored_img = purple_imgstore_add ( smiley_data , smiley_data_len , filename )
ASSIGN	13:1	13:14	5	stored_img = purple_imgstore_add ( smiley_data , smiley_data_len , filename )
LVAL	13:1	13:1	6	stored_img
FIELD	13:1	13:1	7	stored_img
LEAF_NODE	13:1	13:1	8	stored_img
ASSIGN_OP	13:12	13:12	6	=
LEAF_NODE	13:12	13:12	7	=
RVAL	13:14	13:14	6	purple_imgstore_add ( smiley_data , smiley_data_len , filename )
FUNCTION_CALL	13:14	13:72	7	purple_imgstore_add ( smiley_data , smiley_data_len , filename )
CALLEE	13:14	13:14	8	purple_imgstore_add
LEAF_NODE	13:14	13:14	9	purple_imgstore_add
LEAF_NODE	13:33	13:33	8	(
ARGUMENT	13:34	13:34	8	smiley_data
FIELD	13:34	13:34	9	smiley_data
LEAF_NODE	13:34	13:34	10	smiley_data
LEAF_NODE	13:45	13:45	8	,
ARGUMENT	13:47	13:47	8	smiley_data_len
FIELD	13:47	13:47	9	smiley_data_len
LEAF_NODE	13:47	13:47	10	smiley_data_len
LEAF_NODE	13:62	13:62	8	,
ARGUMENT	13:64	13:64	8	filename
FIELD	13:64	13:64	9	filename
LEAF_NODE	13:64	13:64	10	filename
LEAF_NODE	13:72	13:72	8	)
LEAF_NODE	13:73	13:73	4	;
EXPR_STATEMENT	14:1	14:17	3	g_free ( filename ) ;
EXPR	14:1	14:1	4	g_free ( filename )
FUNCTION_CALL	14:1	14:16	5	g_free ( filename )
CALLEE	14:1	14:1	6	g_free
LEAF_NODE	14:1	14:1	7	g_free
LEAF_NODE	14:7	14:7	6	(
ARGUMENT	14:8	14:8	6	filename
FIELD	14:8	14:8	7	filename
LEAF_NODE	14:8	14:8	8	filename
LEAF_NODE	14:16	14:16	6	)
LEAF_NODE	14:17	14:17	4	;
JUMP_STATEMENT	15:1	15:18	3	return stored_img ;
KEYWORD	15:1	15:1	4	return
LEAF_NODE	15:1	15:1	5	return
DESTINATION	15:8	15:8	4	stored_img
EXPR	15:8	15:8	5	stored_img
FIELD	15:8	15:8	6	stored_img
LEAF_NODE	15:8	15:8	7	stored_img
LEAF_NODE	15:18	15:18	4	;
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	40:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_conv_chat_write
LEAF_NODE	2:0	2:0	3	purple_conv_chat_write
PARAMETER_LIST	2:22	3:42	2	( PurpleConvChat * chat , const char * who , const char * message , PurpleMessageFlags flags , time_t mtime )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:39	3	PurpleConvChat * chat
TYPE	2:23	2:38	4	PurpleConvChat *
TYPE_NAME	2:23	2:23	5	PurpleConvChat
LEAF_NODE	2:23	2:23	6	PurpleConvChat
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	chat
LEAF_NODE	2:39	2:39	5	chat
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:57	3	const char * who
TYPE	2:45	2:56	4	const char *
TYPE_NAME	2:45	2:51	5	const char
LEAF_NODE	2:45	2:45	6	const
LEAF_NODE	2:51	2:51	6	char
POINTER	2:56	2:56	5	*
LEAF_NODE	2:56	2:56	6	*
NAME	2:57	2:57	4	who
LEAF_NODE	2:57	2:57	5	who
LEAF_NODE	2:60	2:60	3	,
PARAMETER_DECL	2:62	2:74	3	const char * message
TYPE	2:62	2:73	4	const char *
TYPE_NAME	2:62	2:68	5	const char
LEAF_NODE	2:62	2:62	6	const
LEAF_NODE	2:68	2:68	6	char
POINTER	2:73	2:73	5	*
LEAF_NODE	2:73	2:73	6	*
NAME	2:74	2:74	4	message
LEAF_NODE	2:74	2:74	5	message
LEAF_NODE	2:81	2:81	3	,
PARAMETER_DECL	3:4	3:23	3	PurpleMessageFlags flags
TYPE	3:4	3:4	4	PurpleMessageFlags
TYPE_NAME	3:4	3:4	5	PurpleMessageFlags
LEAF_NODE	3:4	3:4	6	PurpleMessageFlags
NAME	3:23	3:23	4	flags
LEAF_NODE	3:23	3:23	5	flags
LEAF_NODE	3:28	3:28	3	,
PARAMETER_DECL	3:30	3:37	3	time_t mtime
TYPE	3:30	3:30	4	time_t
TYPE_NAME	3:30	3:30	5	time_t
LEAF_NODE	3:30	3:30	6	time_t
NAME	3:37	3:37	4	mtime
LEAF_NODE	3:37	3:37	5	mtime
LEAF_NODE	3:42	3:42	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	38:1	2	
SIMPLE_DECL	5:1	5:23	3	PurpleAccount * account ;
VAR_DECL	5:1	5:16	4	PurpleAccount * account
TYPE	5:1	5:15	5	PurpleAccount *
TYPE_NAME	5:1	5:1	6	PurpleAccount
LEAF_NODE	5:1	5:1	7	PurpleAccount
POINTER	5:15	5:15	6	*
LEAF_NODE	5:15	5:15	7	*
NAME	5:16	5:16	5	account
LEAF_NODE	5:16	5:16	6	account
LEAF_NODE	5:23	5:23	4	;
SIMPLE_DECL	6:1	6:25	3	PurpleConversation * conv ;
VAR_DECL	6:1	6:21	4	PurpleConversation * conv
TYPE	6:1	6:20	5	PurpleConversation *
TYPE_NAME	6:1	6:1	6	PurpleConversation
LEAF_NODE	6:1	6:1	7	PurpleConversation
POINTER	6:20	6:20	6	*
LEAF_NODE	6:20	6:20	7	*
NAME	6:21	6:21	5	conv
LEAF_NODE	6:21	6:21	6	conv
LEAF_NODE	6:25	6:25	4	;
SIMPLE_DECL	7:1	7:21	3	PurpleConnection * gc ;
VAR_DECL	7:1	7:19	4	PurpleConnection * gc
TYPE	7:1	7:18	5	PurpleConnection *
TYPE_NAME	7:1	7:1	6	PurpleConnection
LEAF_NODE	7:1	7:1	7	PurpleConnection
POINTER	7:18	7:18	6	*
LEAF_NODE	7:18	7:18	7	*
NAME	7:19	7:19	5	gc
LEAF_NODE	7:19	7:19	6	gc
LEAF_NODE	7:21	7:21	4	;
EXPR_STATEMENT	8:1	8:31	3	g_return_if_fail ( chat != NULL ) ;
EXPR	8:1	8:1	4	g_return_if_fail ( chat != NULL )
FUNCTION_CALL	8:1	8:30	5	g_return_if_fail ( chat != NULL )
CALLEE	8:1	8:1	6	g_return_if_fail
LEAF_NODE	8:1	8:1	7	g_return_if_fail
LEAF_NODE	8:17	8:17	6	(
ARGUMENT	8:18	8:26	6	chat != NULL
FIELD	8:18	8:18	7	chat
LEAF_NODE	8:18	8:18	8	chat
EQ_OPERATOR	8:23	8:23	7	!=
LEAF_NODE	8:23	8:23	8	!=
FIELD	8:26	8:26	7	NULL
LEAF_NODE	8:26	8:26	8	NULL
LEAF_NODE	8:30	8:30	6	)
LEAF_NODE	8:31	8:31	4	;
EXPR_STATEMENT	9:1	9:30	3	g_return_if_fail ( who != NULL ) ;
EXPR	9:1	9:1	4	g_return_if_fail ( who != NULL )
FUNCTION_CALL	9:1	9:29	5	g_return_if_fail ( who != NULL )
CALLEE	9:1	9:1	6	g_return_if_fail
LEAF_NODE	9:1	9:1	7	g_return_if_fail
LEAF_NODE	9:17	9:17	6	(
ARGUMENT	9:18	9:25	6	who != NULL
FIELD	9:18	9:18	7	who
LEAF_NODE	9:18	9:18	8	who
EQ_OPERATOR	9:22	9:22	7	!=
LEAF_NODE	9:22	9:22	8	!=
FIELD	9:25	9:25	7	NULL
LEAF_NODE	9:25	9:25	8	NULL
LEAF_NODE	9:29	9:29	6	)
LEAF_NODE	9:30	9:30	4	;
EXPR_STATEMENT	10:1	10:34	3	g_return_if_fail ( message != NULL ) ;
EXPR	10:1	10:1	4	g_return_if_fail ( message != NULL )
FUNCTION_CALL	10:1	10:33	5	g_return_if_fail ( message != NULL )
CALLEE	10:1	10:1	6	g_return_if_fail
LEAF_NODE	10:1	10:1	7	g_return_if_fail
LEAF_NODE	10:17	10:17	6	(
ARGUMENT	10:18	10:29	6	message != NULL
FIELD	10:18	10:18	7	message
LEAF_NODE	10:18	10:18	8	message
EQ_OPERATOR	10:26	10:26	7	!=
LEAF_NODE	10:26	10:26	8	!=
FIELD	10:29	10:29	7	NULL
LEAF_NODE	10:29	10:29	8	NULL
LEAF_NODE	10:33	10:33	6	)
LEAF_NODE	10:34	10:34	4	;
EXPR_STATEMENT	11:1	11:52	3	conv = purple_conv_chat_get_conversation ( chat ) ;
EXPR	11:1	11:1	4	conv = purple_conv_chat_get_conversation ( chat )
ASSIGN	11:1	11:13	5	conv = purple_conv_chat_get_conversation ( chat )
LVAL	11:1	11:1	6	conv
FIELD	11:1	11:1	7	conv
LEAF_NODE	11:1	11:1	8	conv
ASSIGN_OP	11:11	11:11	6	=
LEAF_NODE	11:11	11:11	7	=
RVAL	11:13	11:13	6	purple_conv_chat_get_conversation ( chat )
FUNCTION_CALL	11:13	11:51	7	purple_conv_chat_get_conversation ( chat )
CALLEE	11:13	11:13	8	purple_conv_chat_get_conversation
LEAF_NODE	11:13	11:13	9	purple_conv_chat_get_conversation
LEAF_NODE	11:46	11:46	8	(
ARGUMENT	11:47	11:47	8	chat
FIELD	11:47	11:47	9	chat
LEAF_NODE	11:47	11:47	10	chat
LEAF_NODE	11:51	11:51	8	)
LEAF_NODE	11:52	11:52	4	;
EXPR_STATEMENT	12:1	12:45	3	gc = purple_conversation_get_gc ( conv ) ;
EXPR	12:1	12:1	4	gc = purple_conversation_get_gc ( conv )
ASSIGN	12:1	12:13	5	gc = purple_conversation_get_gc ( conv )
LVAL	12:1	12:1	6	gc
FIELD	12:1	12:1	7	gc
LEAF_NODE	12:1	12:1	8	gc
ASSIGN_OP	12:11	12:11	6	=
LEAF_NODE	12:11	12:11	7	=
RVAL	12:13	12:13	6	purple_conversation_get_gc ( conv )
FUNCTION_CALL	12:13	12:44	7	purple_conversation_get_gc ( conv )
CALLEE	12:13	12:13	8	purple_conversation_get_gc
LEAF_NODE	12:13	12:13	9	purple_conversation_get_gc
LEAF_NODE	12:39	12:39	8	(
ARGUMENT	12:40	12:40	8	conv
FIELD	12:40	12:40	9	conv
LEAF_NODE	12:40	12:40	10	conv
LEAF_NODE	12:44	12:44	8	)
LEAF_NODE	12:45	12:45	4	;
EXPR_STATEMENT	13:1	13:46	3	account = purple_connection_get_account ( gc ) ;
EXPR	13:1	13:1	4	account = purple_connection_get_account ( gc )
ASSIGN	13:1	13:13	5	account = purple_connection_get_account ( gc )
LVAL	13:1	13:1	6	account
FIELD	13:1	13:1	7	account
LEAF_NODE	13:1	13:1	8	account
ASSIGN_OP	13:11	13:11	6	=
LEAF_NODE	13:11	13:11	7	=
RVAL	13:13	13:13	6	purple_connection_get_account ( gc )
FUNCTION_CALL	13:13	13:45	7	purple_connection_get_account ( gc )
CALLEE	13:13	13:13	8	purple_connection_get_account
LEAF_NODE	13:13	13:13	9	purple_connection_get_account
LEAF_NODE	13:42	13:42	8	(
ARGUMENT	13:43	13:43	8	gc
FIELD	13:43	13:43	9	gc
LEAF_NODE	13:43	13:43	10	gc
LEAF_NODE	13:45	13:45	8	)
LEAF_NODE	13:46	13:46	4	;
SELECTION	15:1	16:2	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:4	15:4	4	(
CONDITION	15:5	15:5	4	purple_conv_chat_is_user_ignored ( chat , who )
EXPR	15:5	15:5	5	purple_conv_chat_is_user_ignored ( chat , who )
FUNCTION_CALL	15:5	15:47	6	purple_conv_chat_is_user_ignored ( chat , who )
CALLEE	15:5	15:5	7	purple_conv_chat_is_user_ignored
LEAF_NODE	15:5	15:5	8	purple_conv_chat_is_user_ignored
LEAF_NODE	15:37	15:37	7	(
ARGUMENT	15:38	15:38	7	chat
FIELD	15:38	15:38	8	chat
LEAF_NODE	15:38	15:38	9	chat
LEAF_NODE	15:42	15:42	7	,
ARGUMENT	15:44	15:44	7	who
FIELD	15:44	15:44	8	who
LEAF_NODE	15:44	15:44	9	who
LEAF_NODE	15:47	15:47	7	)
LEAF_NODE	15:48	15:48	4	)
STATEMENTS	16:2	16:2	4	
JUMP_STATEMENT	16:2	16:8	5	return DESTINATION ;
KEYWORD	16:2	16:2	6	return
LEAF_NODE	16:2	16:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	16:8	16:8	6	;
SELECTION	17:1	17:16	3	
KEYWORD	17:1	17:1	4	if
LEAF_NODE	17:1	17:1	5	if
LEAF_NODE	17:4	17:4	4	(
CONDITION	17:5	17:5	4	mtime < 0
EXPR	17:5	17:13	5	mtime < 0
FIELD	17:5	17:5	6	mtime
LEAF_NODE	17:5	17:5	7	mtime
REL_OPERATOR	17:11	17:11	6	<
LEAF_NODE	17:11	17:11	7	<
FIELD	17:13	17:13	6	0
LEAF_NODE	17:13	17:13	7	0
LEAF_NODE	17:14	17:14	4	)
STATEMENTS	17:16	23:1	4	
LEAF_NODE	17:16	17:16	5	{
STATEMENTS	18:2	22:2	5	
EXPR_STATEMENT	18:2	19:59	6	purple_debug_error ( "conversation" , "purple_conv_chat_write ignoring negative timestamp\n" ) ;
EXPR	18:2	18:2	7	purple_debug_error ( "conversation" , "purple_conv_chat_write ignoring negative timestamp\n" )
FUNCTION_CALL	18:2	19:58	8	purple_debug_error ( "conversation" , "purple_conv_chat_write ignoring negative timestamp\n" )
CALLEE	18:2	18:2	9	purple_debug_error
LEAF_NODE	18:2	18:2	10	purple_debug_error
LEAF_NODE	18:20	18:20	9	(
ARGUMENT	18:21	18:21	9	"conversation"
FIELD	18:21	18:21	10	"conversation"
LEAF_NODE	18:21	18:21	11	"conversation"
LEAF_NODE	18:35	18:35	9	,
ARGUMENT	19:4	19:4	9	"purple_conv_chat_write ignoring negative timestamp\n"
FIELD	19:4	19:4	10	"purple_conv_chat_write ignoring negative timestamp\n"
LEAF_NODE	19:4	19:4	11	"purple_conv_chat_write ignoring negative timestamp\n"
LEAF_NODE	19:58	19:58	9	)
LEAF_NODE	19:59	19:59	7	;
EXPR_STATEMENT	22:2	22:20	6	mtime = time ( NULL ) ;
EXPR	22:2	22:2	7	mtime = time ( NULL )
ASSIGN	22:2	22:10	8	mtime = time ( NULL )
LVAL	22:2	22:2	9	mtime
FIELD	22:2	22:2	10	mtime
LEAF_NODE	22:2	22:2	11	mtime
ASSIGN_OP	22:8	22:8	9	=
LEAF_NODE	22:8	22:8	10	=
RVAL	22:10	22:10	9	time ( NULL )
FUNCTION_CALL	22:10	22:19	10	time ( NULL )
CALLEE	22:10	22:10	11	time
LEAF_NODE	22:10	22:10	12	time
LEAF_NODE	22:14	22:14	11	(
ARGUMENT	22:15	22:15	11	NULL
FIELD	22:15	22:15	12	NULL
LEAF_NODE	22:15	22:15	13	NULL
LEAF_NODE	22:19	22:19	11	)
LEAF_NODE	22:20	22:20	7	;
LEAF_NODE	23:1	23:1	5	}
SELECTION	24:1	24:40	3	
KEYWORD	24:1	24:1	4	if
LEAF_NODE	24:1	24:1	5	if
LEAF_NODE	24:4	24:4	4	(
CONDITION	24:5	24:5	4	! ( flags & PURPLE_MESSAGE_WHISPER )
EXPR	24:5	24:5	5	! ( flags & PURPLE_MESSAGE_WHISPER )
UNARY_EXPR	24:5	24:37	6	! ( flags & PURPLE_MESSAGE_WHISPER )
UNARY_OPERATOR	24:5	24:5	7	!
LEAF_NODE	24:5	24:5	8	!
LEAF_NODE	24:6	24:6	7	(
FIELD	24:7	24:7	7	flags
LEAF_NODE	24:7	24:7	8	flags
LEAF_NODE	24:13	24:13	7	&
FIELD	24:15	24:15	7	PURPLE_MESSAGE_WHISPER
LEAF_NODE	24:15	24:15	8	PURPLE_MESSAGE_WHISPER
LEAF_NODE	24:37	24:37	7	)
LEAF_NODE	24:38	24:38	4	)
STATEMENTS	24:40	34:1	4	
LEAF_NODE	24:40	24:40	5	{
STATEMENTS	25:2	29:4	5	
SIMPLE_DECL	25:2	25:17	6	const char * str ;
VAR_DECL	25:2	25:14	7	const char * str
TYPE	25:2	25:13	8	const char *
TYPE_NAME	25:2	25:8	9	const char
LEAF_NODE	25:2	25:2	10	const
LEAF_NODE	25:8	25:8	10	char
POINTER	25:13	25:13	9	*
LEAF_NODE	25:13	25:13	10	*
NAME	25:14	25:14	8	str
LEAF_NODE	25:14	25:14	9	str
LEAF_NODE	25:17	25:17	7	;
EXPR_STATEMENT	26:2	26:38	6	str = purple_normalize ( account , who ) ;
EXPR	26:2	26:2	7	str = purple_normalize ( account , who )
ASSIGN	26:2	26:8	8	str = purple_normalize ( account , who )
LVAL	26:2	26:2	9	str
FIELD	26:2	26:2	10	str
LEAF_NODE	26:2	26:2	11	str
ASSIGN_OP	26:6	26:6	9	=
LEAF_NODE	26:6	26:6	10	=
RVAL	26:8	26:8	9	purple_normalize ( account , who )
FUNCTION_CALL	26:8	26:37	10	purple_normalize ( account , who )
CALLEE	26:8	26:8	11	purple_normalize
LEAF_NODE	26:8	26:8	12	purple_normalize
LEAF_NODE	26:24	26:24	11	(
ARGUMENT	26:25	26:25	11	account
FIELD	26:25	26:25	12	account
LEAF_NODE	26:25	26:25	13	account
LEAF_NODE	26:32	26:32	11	,
ARGUMENT	26:34	26:34	11	who
FIELD	26:34	26:34	12	who
LEAF_NODE	26:34	26:34	13	who
LEAF_NODE	26:37	26:37	11	)
LEAF_NODE	26:38	26:38	7	;
SELECTION	27:2	27:40	6	
KEYWORD	27:2	27:2	7	if
LEAF_NODE	27:2	27:2	8	if
LEAF_NODE	27:5	27:5	7	(
CONDITION	27:6	27:6	7	purple_strequal ( str , chat -> nick )
EXPR	27:6	27:6	8	purple_strequal ( str , chat -> nick )
FUNCTION_CALL	27:6	27:37	9	purple_strequal ( str , chat -> nick )
CALLEE	27:6	27:6	10	purple_strequal
LEAF_NODE	27:6	27:6	11	purple_strequal
LEAF_NODE	27:21	27:21	10	(
ARGUMENT	27:22	27:22	10	str
FIELD	27:22	27:22	11	str
LEAF_NODE	27:22	27:22	12	str
LEAF_NODE	27:25	27:25	10	,
ARGUMENT	27:27	27:27	10	chat -> nick
FIELD	27:27	27:33	11	chat -> nick
LEAF_NODE	27:27	27:27	12	chat
LEAF_NODE	27:31	27:31	12	->
LEAF_NODE	27:33	27:33	12	nick
LEAF_NODE	27:37	27:37	10	)
LEAF_NODE	27:38	27:38	7	)
STATEMENTS	27:40	29:2	7	
LEAF_NODE	27:40	27:40	8	{
STATEMENTS	28:3	28:3	8	
EXPR_STATEMENT	28:3	28:31	9	flags |= PURPLE_MESSAGE_SEND ;
EXPR	28:3	28:3	10	flags |= PURPLE_MESSAGE_SEND
ASSIGN	28:3	28:12	11	flags |= PURPLE_MESSAGE_SEND
LVAL	28:3	28:3	12	flags
FIELD	28:3	28:3	13	flags
LEAF_NODE	28:3	28:3	14	flags
ASSIGN_OP	28:9	28:9	12	|=
LEAF_NODE	28:9	28:9	13	|=
RVAL	28:12	28:12	12	PURPLE_MESSAGE_SEND
FIELD	28:12	28:12	13	PURPLE_MESSAGE_SEND
LEAF_NODE	28:12	28:12	14	PURPLE_MESSAGE_SEND
LEAF_NODE	28:31	28:31	10	;
LEAF_NODE	29:2	29:2	8	}
SELECTION	29:4	29:9	6	
KEYWORD	29:4	29:4	7	else
LEAF_NODE	29:4	29:4	8	else
STATEMENTS	29:9	33:2	7	
LEAF_NODE	29:9	29:9	8	{
STATEMENTS	30:3	31:3	8	
EXPR_STATEMENT	30:3	30:31	9	flags |= PURPLE_MESSAGE_RECV ;
EXPR	30:3	30:3	10	flags |= PURPLE_MESSAGE_RECV
ASSIGN	30:3	30:12	11	flags |= PURPLE_MESSAGE_RECV
LVAL	30:3	30:3	12	flags
FIELD	30:3	30:3	13	flags
LEAF_NODE	30:3	30:3	14	flags
ASSIGN_OP	30:9	30:9	12	|=
LEAF_NODE	30:9	30:9	13	|=
RVAL	30:12	30:12	12	PURPLE_MESSAGE_RECV
FIELD	30:12	30:12	13	PURPLE_MESSAGE_RECV
LEAF_NODE	30:12	30:12	14	PURPLE_MESSAGE_RECV
LEAF_NODE	30:31	30:31	10	;
SELECTION	31:3	32:4	9	
KEYWORD	31:3	31:3	10	if
LEAF_NODE	31:3	31:3	11	if
LEAF_NODE	31:6	31:6	10	(
CONDITION	31:7	31:7	10	purple_utf8_has_word ( message , chat -> nick )
EXPR	31:7	31:7	11	purple_utf8_has_word ( message , chat -> nick )
FUNCTION_CALL	31:7	31:47	12	purple_utf8_has_word ( message , chat -> nick )
CALLEE	31:7	31:7	13	purple_utf8_has_word
LEAF_NODE	31:7	31:7	14	purple_utf8_has_word
LEAF_NODE	31:27	31:27	13	(
ARGUMENT	31:28	31:28	13	message
FIELD	31:28	31:28	14	message
LEAF_NODE	31:28	31:28	15	message
LEAF_NODE	31:35	31:35	13	,
ARGUMENT	31:37	31:37	13	chat -> nick
FIELD	31:37	31:43	14	chat -> nick
LEAF_NODE	31:37	31:37	15	chat
LEAF_NODE	31:41	31:41	15	->
LEAF_NODE	31:43	31:43	15	nick
LEAF_NODE	31:47	31:47	13	)
LEAF_NODE	31:48	31:48	10	)
STATEMENTS	32:4	32:4	10	
EXPR_STATEMENT	32:4	32:32	11	flags |= PURPLE_MESSAGE_NICK ;
EXPR	32:4	32:4	12	flags |= PURPLE_MESSAGE_NICK
ASSIGN	32:4	32:13	13	flags |= PURPLE_MESSAGE_NICK
LVAL	32:4	32:4	14	flags
FIELD	32:4	32:4	15	flags
LEAF_NODE	32:4	32:4	16	flags
ASSIGN_OP	32:10	32:10	14	|=
LEAF_NODE	32:10	32:10	15	|=
RVAL	32:13	32:13	14	PURPLE_MESSAGE_NICK
FIELD	32:13	32:13	15	PURPLE_MESSAGE_NICK
LEAF_NODE	32:13	32:13	16	PURPLE_MESSAGE_NICK
LEAF_NODE	32:32	32:32	12	;
LEAF_NODE	33:2	33:2	8	}
LEAF_NODE	34:1	34:1	5	}
SELECTION	36:1	37:2	3	
KEYWORD	36:1	36:1	4	if
LEAF_NODE	36:1	36:1	5	if
LEAF_NODE	36:4	36:4	4	(
CONDITION	36:5	36:5	4	conv -> ui_ops != NULL && conv -> ui_ops -> write_chat != NULL
EXPR	36:5	36:5	5	conv -> ui_ops != NULL && conv -> ui_ops -> write_chat != NULL
AND	36:5	36:29	6	conv -> ui_ops != NULL && conv -> ui_ops -> write_chat != NULL
EXPR	36:5	36:21	7	conv -> ui_ops != NULL
FIELD	36:5	36:11	8	conv -> ui_ops
LEAF_NODE	36:5	36:5	9	conv
LEAF_NODE	36:9	36:9	9	->
LEAF_NODE	36:11	36:11	9	ui_ops
EQ_OPERATOR	36:18	36:18	8	!=
LEAF_NODE	36:18	36:18	9	!=
FIELD	36:21	36:21	8	NULL
LEAF_NODE	36:21	36:21	9	NULL
LEAF_NODE	36:26	36:26	7	&&
EXPR	36:29	36:57	7	conv -> ui_ops -> write_chat != NULL
FIELD	36:29	36:43	8	conv -> ui_ops -> write_chat
LEAF_NODE	36:29	36:29	9	conv
LEAF_NODE	36:33	36:33	9	->
LEAF_NODE	36:35	36:35	9	ui_ops
LEAF_NODE	36:41	36:41	9	->
LEAF_NODE	36:43	36:43	9	write_chat
EQ_OPERATOR	36:54	36:54	8	!=
LEAF_NODE	36:54	36:54	9	!=
FIELD	36:57	36:57	8	NULL
LEAF_NODE	36:57	36:57	9	NULL
LEAF_NODE	36:61	36:61	4	)
STATEMENTS	37:2	37:2	4	
EXPR_STATEMENT	37:2	37:60	5	conv -> ui_ops -> write_chat ( conv , who , message , flags , mtime ) ;
EXPR	37:2	37:2	6	conv -> ui_ops -> write_chat ( conv , who , message , flags , mtime )
FUNCTION_CALL	37:2	37:59	7	conv -> ui_ops -> write_chat ( conv , who , message , flags , mtime )
CALLEE	37:2	37:16	8	conv -> ui_ops -> write_chat
LEAF_NODE	37:2	37:2	9	conv
LEAF_NODE	37:6	37:6	9	->
LEAF_NODE	37:8	37:8	9	ui_ops
LEAF_NODE	37:14	37:14	9	->
LEAF_NODE	37:16	37:16	9	write_chat
LEAF_NODE	37:26	37:26	8	(
ARGUMENT	37:27	37:27	8	conv
FIELD	37:27	37:27	9	conv
LEAF_NODE	37:27	37:27	10	conv
LEAF_NODE	37:31	37:31	8	,
ARGUMENT	37:33	37:33	8	who
FIELD	37:33	37:33	9	who
LEAF_NODE	37:33	37:33	10	who
LEAF_NODE	37:36	37:36	8	,
ARGUMENT	37:38	37:38	8	message
FIELD	37:38	37:38	9	message
LEAF_NODE	37:38	37:38	10	message
LEAF_NODE	37:45	37:45	8	,
ARGUMENT	37:47	37:47	8	flags
FIELD	37:47	37:47	9	flags
LEAF_NODE	37:47	37:47	10	flags
LEAF_NODE	37:52	37:52	8	,
ARGUMENT	37:54	37:54	8	mtime
FIELD	37:54	37:54	9	mtime
LEAF_NODE	37:54	37:54	10	mtime
LEAF_NODE	37:59	37:59	8	)
LEAF_NODE	37:60	37:60	6	;
SELECTION	38:1	39:2	3	
KEYWORD	38:1	38:1	4	else
LEAF_NODE	38:1	38:1	5	else
STATEMENTS	39:2	39:2	4	
EXPR_STATEMENT	39:2	39:61	5	purple_conversation_write ( conv , who , message , flags , mtime ) ;
EXPR	39:2	39:2	6	purple_conversation_write ( conv , who , message , flags , mtime )
FUNCTION_CALL	39:2	39:60	7	purple_conversation_write ( conv , who , message , flags , mtime )
CALLEE	39:2	39:2	8	purple_conversation_write
LEAF_NODE	39:2	39:2	9	purple_conversation_write
LEAF_NODE	39:27	39:27	8	(
ARGUMENT	39:28	39:28	8	conv
FIELD	39:28	39:28	9	conv
LEAF_NODE	39:28	39:28	10	conv
LEAF_NODE	39:32	39:32	8	,
ARGUMENT	39:34	39:34	8	who
FIELD	39:34	39:34	9	who
LEAF_NODE	39:34	39:34	10	who
LEAF_NODE	39:37	39:37	8	,
ARGUMENT	39:39	39:39	8	message
FIELD	39:39	39:39	9	message
LEAF_NODE	39:39	39:39	10	message
LEAF_NODE	39:46	39:46	8	,
ARGUMENT	39:48	39:48	8	flags
FIELD	39:48	39:48	9	flags
LEAF_NODE	39:48	39:48	10	flags
LEAF_NODE	39:53	39:53	8	,
ARGUMENT	39:55	39:55	8	mtime
FIELD	39:55	39:55	9	mtime
LEAF_NODE	39:55	39:55	10	mtime
LEAF_NODE	39:60	39:60	8	)
LEAF_NODE	39:61	39:61	6	;
LEAF_NODE	40:0	40:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	84:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	silcpurple_chat_send
LEAF_NODE	2:4	2:4	3	silcpurple_chat_send
PARAMETER_LIST	2:24	2:99	2	( PurpleConnection * gc , int id , const char * msg , PurpleMessageFlags msgflags )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:43	3	PurpleConnection * gc
TYPE	2:25	2:42	4	PurpleConnection *
TYPE_NAME	2:25	2:25	5	PurpleConnection
LEAF_NODE	2:25	2:25	6	PurpleConnection
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	gc
LEAF_NODE	2:43	2:43	5	gc
LEAF_NODE	2:45	2:45	3	,
PARAMETER_DECL	2:47	2:51	3	int id
TYPE	2:47	2:47	4	int
TYPE_NAME	2:47	2:47	5	int
LEAF_NODE	2:47	2:47	6	int
NAME	2:51	2:51	4	id
LEAF_NODE	2:51	2:51	5	id
LEAF_NODE	2:53	2:53	3	,
PARAMETER_DECL	2:55	2:67	3	const char * msg
TYPE	2:55	2:66	4	const char *
TYPE_NAME	2:55	2:61	5	const char
LEAF_NODE	2:55	2:55	6	const
LEAF_NODE	2:61	2:61	6	char
POINTER	2:66	2:66	5	*
LEAF_NODE	2:66	2:66	6	*
NAME	2:67	2:67	4	msg
LEAF_NODE	2:67	2:67	5	msg
LEAF_NODE	2:70	2:70	3	,
PARAMETER_DECL	2:72	2:91	3	PurpleMessageFlags msgflags
TYPE	2:72	2:72	4	PurpleMessageFlags
TYPE_NAME	2:72	2:72	5	PurpleMessageFlags
LEAF_NODE	2:72	2:72	6	PurpleMessageFlags
NAME	2:91	2:91	4	msgflags
LEAF_NODE	2:91	2:91	5	msgflags
LEAF_NODE	2:99	2:99	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	83:1	2	
SIMPLE_DECL	4:1	4:31	3	SilcPurple sg ; sg = gc -> proto_data ;
VAR_DECL	4:1	4:12	4	SilcPurple sg ; sg = gc -> proto_data
TYPE	4:1	4:1	5	SilcPurple
TYPE_NAME	4:1	4:1	6	SilcPurple
LEAF_NODE	4:1	4:1	7	SilcPurple
NAME	4:12	4:12	5	sg
LEAF_NODE	4:12	4:12	6	sg
LEAF_NODE	0:0	0:0	5	;
INIT	4:12	4:12	5	sg = gc -> proto_data
ASSIGN	4:12	4:17	6	sg = gc -> proto_data
LVAL	4:12	4:12	7	sg
NAME	4:12	4:12	8	sg
LEAF_NODE	4:12	4:12	9	sg
ASSIGN_OP	4:15	4:15	7	=
LEAF_NODE	4:15	4:15	8	=
RVAL	4:17	4:17	7	gc -> proto_data
FIELD	4:17	4:21	8	gc -> proto_data
LEAF_NODE	4:17	4:17	9	gc
LEAF_NODE	4:19	4:19	9	->
LEAF_NODE	4:21	4:21	9	proto_data
LEAF_NODE	4:31	4:31	4	;
SIMPLE_DECL	5:1	5:31	3	SilcClient client ; client = sg -> client ;
VAR_DECL	5:1	5:12	4	SilcClient client ; client = sg -> client
TYPE	5:1	5:1	5	SilcClient
TYPE_NAME	5:1	5:1	6	SilcClient
LEAF_NODE	5:1	5:1	7	SilcClient
NAME	5:12	5:12	5	client
LEAF_NODE	5:12	5:12	6	client
LEAF_NODE	0:0	0:0	5	;
INIT	5:12	5:12	5	client = sg -> client
ASSIGN	5:12	5:21	6	client = sg -> client
LVAL	5:12	5:12	7	client
NAME	5:12	5:12	8	client
LEAF_NODE	5:12	5:12	9	client
ASSIGN_OP	5:19	5:19	7	=
LEAF_NODE	5:19	5:19	8	=
RVAL	5:21	5:21	7	sg -> client
FIELD	5:21	5:25	8	sg -> client
LEAF_NODE	5:21	5:21	9	sg
LEAF_NODE	5:23	5:23	9	->
LEAF_NODE	5:25	5:25	9	client
LEAF_NODE	5:31	5:31	4	;
SIMPLE_DECL	6:1	6:37	3	SilcClientConnection conn ; conn = sg -> conn ;
VAR_DECL	6:1	6:22	4	SilcClientConnection conn ; conn = sg -> conn
TYPE	6:1	6:1	5	SilcClientConnection
TYPE_NAME	6:1	6:1	6	SilcClientConnection
LEAF_NODE	6:1	6:1	7	SilcClientConnection
NAME	6:22	6:22	5	conn
LEAF_NODE	6:22	6:22	6	conn
LEAF_NODE	0:0	0:0	5	;
INIT	6:22	6:22	5	conn = sg -> conn
ASSIGN	6:22	6:29	6	conn = sg -> conn
LVAL	6:22	6:22	7	conn
NAME	6:22	6:22	8	conn
LEAF_NODE	6:22	6:22	9	conn
ASSIGN_OP	6:27	6:27	7	=
LEAF_NODE	6:27	6:27	8	=
RVAL	6:29	6:29	7	sg -> conn
FIELD	6:29	6:33	8	sg -> conn
LEAF_NODE	6:29	6:29	9	sg
LEAF_NODE	6:31	6:31	9	->
LEAF_NODE	6:33	6:33	9	conn
LEAF_NODE	6:37	6:37	4	;
SIMPLE_DECL	7:1	7:22	3	SilcHashTableList htl ;
VAR_DECL	7:1	7:19	4	SilcHashTableList htl
TYPE	7:1	7:1	5	SilcHashTableList
TYPE_NAME	7:1	7:1	6	SilcHashTableList
LEAF_NODE	7:1	7:1	7	SilcHashTableList
NAME	7:19	7:19	5	htl
LEAF_NODE	7:19	7:19	6	htl
LEAF_NODE	7:22	7:22	4	;
SIMPLE_DECL	8:1	8:20	3	SilcChannelUser chu ;
VAR_DECL	8:1	8:17	4	SilcChannelUser chu
TYPE	8:1	8:1	5	SilcChannelUser
TYPE_NAME	8:1	8:1	6	SilcChannelUser
LEAF_NODE	8:1	8:1	7	SilcChannelUser
NAME	8:17	8:17	5	chu
LEAF_NODE	8:17	8:17	6	chu
LEAF_NODE	8:20	8:20	4	;
SIMPLE_DECL	9:1	9:32	3	SilcChannelEntry channel ; channel = NULL ;
VAR_DECL	9:1	9:18	4	SilcChannelEntry channel ; channel = NULL
TYPE	9:1	9:1	5	SilcChannelEntry
TYPE_NAME	9:1	9:1	6	SilcChannelEntry
LEAF_NODE	9:1	9:1	7	SilcChannelEntry
NAME	9:18	9:18	5	channel
LEAF_NODE	9:18	9:18	6	channel
LEAF_NODE	0:0	0:0	5	;
INIT	9:18	9:18	5	channel = NULL
ASSIGN	9:18	9:28	6	channel = NULL
LVAL	9:18	9:18	7	channel
NAME	9:18	9:18	8	channel
LEAF_NODE	9:18	9:18	9	channel
ASSIGN_OP	9:26	9:26	7	=
LEAF_NODE	9:26	9:26	8	=
RVAL	9:28	9:28	7	NULL
FIELD	9:28	9:28	8	NULL
LEAF_NODE	9:28	9:28	9	NULL
LEAF_NODE	9:32	9:32	4	;
SIMPLE_DECL	10:1	10:33	3	SilcChannelPrivateKey key ; key = NULL ;
VAR_DECL	10:1	10:23	4	SilcChannelPrivateKey key ; key = NULL
TYPE	10:1	10:1	5	SilcChannelPrivateKey
TYPE_NAME	10:1	10:1	6	SilcChannelPrivateKey
LEAF_NODE	10:1	10:1	7	SilcChannelPrivateKey
NAME	10:23	10:23	5	key
LEAF_NODE	10:23	10:23	6	key
LEAF_NODE	0:0	0:0	5	;
INIT	10:23	10:23	5	key = NULL
ASSIGN	10:23	10:29	6	key = NULL
LVAL	10:23	10:23	7	key
NAME	10:23	10:23	8	key
LEAF_NODE	10:23	10:23	9	key
ASSIGN_OP	10:27	10:27	7	=
LEAF_NODE	10:27	10:27	8	=
RVAL	10:29	10:29	7	NULL
FIELD	10:29	10:29	8	NULL
LEAF_NODE	10:29	10:29	9	NULL
LEAF_NODE	10:33	10:33	4	;
SIMPLE_DECL	11:1	11:17	3	SilcUInt32 flags ;
VAR_DECL	11:1	11:12	4	SilcUInt32 flags
TYPE	11:1	11:1	5	SilcUInt32
TYPE_NAME	11:1	11:1	6	SilcUInt32
LEAF_NODE	11:1	11:1	7	SilcUInt32
NAME	11:12	11:12	5	flags
LEAF_NODE	11:12	11:12	6	flags
LEAF_NODE	11:17	11:17	4	;
SIMPLE_DECL	12:1	12:8	3	int ret ;
VAR_DECL	12:1	12:5	4	int ret
TYPE	12:1	12:1	5	int
TYPE_NAME	12:1	12:1	6	int
LEAF_NODE	12:1	12:1	7	int
NAME	12:5	12:5	5	ret
LEAF_NODE	12:5	12:5	6	ret
LEAF_NODE	12:8	12:8	4	;
SIMPLE_DECL	13:1	13:17	3	char * msg2 , char * tmp ;
INIT_DECL_LIST	13:1	13:1	4	char * msg2 , char * tmp
VAR_DECL	13:1	13:7	5	char * msg2
TYPE	13:1	13:6	6	char *
TYPE_NAME	13:1	13:1	7	char
LEAF_NODE	13:1	13:1	8	char
POINTER	13:6	13:6	7	*
LEAF_NODE	13:6	13:6	8	*
NAME	13:7	13:7	6	msg2
LEAF_NODE	13:7	13:7	7	msg2
LEAF_NODE	13:11	13:11	5	,
VAR_DECL	13:1	13:14	5	char * tmp
TYPE	13:1	13:13	6	char *
TYPE_NAME	13:1	13:1	7	char
LEAF_NODE	13:1	13:1	8	char
POINTER	13:13	13:13	7	*
LEAF_NODE	13:13	13:13	8	*
NAME	13:14	13:14	6	tmp
LEAF_NODE	13:14	13:14	7	tmp
LEAF_NODE	13:17	13:17	4	;
SIMPLE_DECL	14:1	14:23	3	gboolean found ; found = FALSE ;
VAR_DECL	14:1	14:10	4	gboolean found ; found = FALSE
TYPE	14:1	14:1	5	gboolean
TYPE_NAME	14:1	14:1	6	gboolean
LEAF_NODE	14:1	14:1	7	gboolean
NAME	14:10	14:10	5	found
LEAF_NODE	14:10	14:10	6	found
LEAF_NODE	0:0	0:0	5	;
INIT	14:10	14:10	5	found = FALSE
ASSIGN	14:10	14:18	6	found = FALSE
LVAL	14:10	14:10	7	found
NAME	14:10	14:10	8	found
LEAF_NODE	14:10	14:10	9	found
ASSIGN_OP	14:16	14:16	7	=
LEAF_NODE	14:16	14:16	8	=
RVAL	14:18	14:18	7	FALSE
FIELD	14:18	14:18	8	FALSE
LEAF_NODE	14:18	14:18	9	FALSE
LEAF_NODE	14:23	14:23	4	;
SIMPLE_DECL	15:1	15:75	3	gboolean sign ; sign = purple_account_get_bool ( sg -> account , "sign-verify" , FALSE ) ;
VAR_DECL	15:1	15:10	4	gboolean sign ; sign = purple_account_get_bool ( sg -> account , "sign-verify" , FALSE )
TYPE	15:1	15:1	5	gboolean
TYPE_NAME	15:1	15:1	6	gboolean
LEAF_NODE	15:1	15:1	7	gboolean
NAME	15:10	15:10	5	sign
LEAF_NODE	15:10	15:10	6	sign
LEAF_NODE	0:0	0:0	5	;
INIT	15:10	15:10	5	sign = purple_account_get_bool ( sg -> account , "sign-verify" , FALSE )
ASSIGN	15:10	15:17	6	sign = purple_account_get_bool ( sg -> account , "sign-verify" , FALSE )
LVAL	15:10	15:10	7	sign
NAME	15:10	15:10	8	sign
LEAF_NODE	15:10	15:10	9	sign
ASSIGN_OP	15:15	15:15	7	=
LEAF_NODE	15:15	15:15	8	=
RVAL	15:17	15:17	7	purple_account_get_bool ( sg -> account , "sign-verify" , FALSE )
FUNCTION_CALL	15:17	15:74	8	purple_account_get_bool ( sg -> account , "sign-verify" , FALSE )
CALLEE	15:17	15:17	9	purple_account_get_bool
LEAF_NODE	15:17	15:17	10	purple_account_get_bool
LEAF_NODE	15:40	15:40	9	(
ARGUMENT	15:41	15:41	9	sg -> account
FIELD	15:41	15:45	10	sg -> account
LEAF_NODE	15:41	15:41	11	sg
LEAF_NODE	15:43	15:43	11	->
LEAF_NODE	15:45	15:45	11	account
LEAF_NODE	15:52	15:52	9	,
ARGUMENT	15:54	15:54	9	"sign-verify"
FIELD	15:54	15:54	10	"sign-verify"
LEAF_NODE	15:54	15:54	11	"sign-verify"
LEAF_NODE	15:67	15:67	9	,
ARGUMENT	15:69	15:69	9	FALSE
FIELD	15:69	15:69	10	FALSE
LEAF_NODE	15:69	15:69	11	FALSE
LEAF_NODE	15:74	15:74	9	)
LEAF_NODE	15:75	15:75	4	;
SELECTION	16:1	17:2	3	
KEYWORD	16:1	16:1	4	if
LEAF_NODE	16:1	16:1	5	if
LEAF_NODE	16:4	16:4	4	(
CONDITION	16:5	16:5	4	! msg || ! conn
EXPR	16:5	16:5	5	! msg || ! conn
OR	16:5	16:13	6	! msg || ! conn
EXPR	16:5	16:5	7	! msg
UNARY_EXPR	16:5	16:6	8	! msg
UNARY_OPERATOR	16:5	16:5	9	!
LEAF_NODE	16:5	16:5	10	!
FIELD	16:6	16:6	9	msg
LEAF_NODE	16:6	16:6	10	msg
LEAF_NODE	16:10	16:10	7	||
EXPR	16:13	16:13	7	! conn
UNARY_EXPR	16:13	16:14	8	! conn
UNARY_OPERATOR	16:13	16:13	9	!
LEAF_NODE	16:13	16:13	10	!
FIELD	16:14	16:14	9	conn
LEAF_NODE	16:14	16:14	10	conn
LEAF_NODE	16:18	16:18	4	)
STATEMENTS	17:2	17:2	4	
JUMP_STATEMENT	17:2	17:10	5	return 0 ;
KEYWORD	17:2	17:2	6	return
LEAF_NODE	17:2	17:2	7	return
DESTINATION	17:9	17:9	6	0
EXPR	17:9	17:9	7	0
FIELD	17:9	17:9	8	0
LEAF_NODE	17:9	17:9	9	0
LEAF_NODE	17:10	17:10	6	;
EXPR_STATEMENT	18:1	18:31	3	flags = SILC_MESSAGE_FLAG_UTF8 ;
EXPR	18:1	18:1	4	flags = SILC_MESSAGE_FLAG_UTF8
ASSIGN	18:1	18:9	5	flags = SILC_MESSAGE_FLAG_UTF8
LVAL	18:1	18:1	6	flags
FIELD	18:1	18:1	7	flags
LEAF_NODE	18:1	18:1	8	flags
ASSIGN_OP	18:7	18:7	6	=
LEAF_NODE	18:7	18:7	7	=
RVAL	18:9	18:9	6	SILC_MESSAGE_FLAG_UTF8
FIELD	18:9	18:9	7	SILC_MESSAGE_FLAG_UTF8
LEAF_NODE	18:9	18:9	8	SILC_MESSAGE_FLAG_UTF8
LEAF_NODE	18:31	18:31	4	;
EXPR_STATEMENT	19:1	19:39	3	tmp = msg2 = purple_unescape_html ( msg ) ;
EXPR	19:1	19:1	4	tmp = msg2 = purple_unescape_html ( msg )
ASSIGN	19:1	19:7	5	tmp = msg2 = purple_unescape_html ( msg )
LVAL	19:1	19:1	6	tmp
FIELD	19:1	19:1	7	tmp
LEAF_NODE	19:1	19:1	8	tmp
ASSIGN_OP	19:5	19:5	6	=
LEAF_NODE	19:5	19:5	7	=
RVAL	19:7	19:7	6	msg2 = purple_unescape_html ( msg )
ASSIGN	19:7	19:14	7	msg2 = purple_unescape_html ( msg )
LVAL	19:7	19:7	8	msg2
FIELD	19:7	19:7	9	msg2
LEAF_NODE	19:7	19:7	10	msg2
ASSIGN_OP	19:12	19:12	8	=
LEAF_NODE	19:12	19:12	9	=
RVAL	19:14	19:14	8	purple_unescape_html ( msg )
FUNCTION_CALL	19:14	19:38	9	purple_unescape_html ( msg )
CALLEE	19:14	19:14	10	purple_unescape_html
LEAF_NODE	19:14	19:14	11	purple_unescape_html
LEAF_NODE	19:34	19:34	10	(
ARGUMENT	19:35	19:35	10	msg
FIELD	19:35	19:35	11	msg
LEAF_NODE	19:35	19:35	12	msg
LEAF_NODE	19:38	19:38	10	)
LEAF_NODE	19:39	19:39	4	;
SELECTION	20:1	21:1	3	
KEYWORD	20:1	20:1	4	if
LEAF_NODE	20:1	20:1	5	if
LEAF_NODE	20:4	20:4	4	(
CONDITION	20:5	20:5	4	! g_ascii_strncasecmp ( msg2 , "/me " , 4 )
EXPR	20:5	20:5	5	! g_ascii_strncasecmp ( msg2 , "/me " , 4 )
UNARY_EXPR	20:5	20:6	6	! g_ascii_strncasecmp ( msg2 , "/me " , 4 )
UNARY_OPERATOR	20:5	20:5	7	!
LEAF_NODE	20:5	20:5	8	!
FUNCTION_CALL	20:6	20:41	7	g_ascii_strncasecmp ( msg2 , "/me " , 4 )
CALLEE	20:6	20:6	8	g_ascii_strncasecmp
LEAF_NODE	20:6	20:6	9	g_ascii_strncasecmp
LEAF_NODE	20:25	20:25	8	(
ARGUMENT	20:26	20:26	8	msg2
FIELD	20:26	20:26	9	msg2
LEAF_NODE	20:26	20:26	10	msg2
LEAF_NODE	20:30	20:30	8	,
ARGUMENT	20:32	20:32	8	"/me "
FIELD	20:32	20:32	9	"/me "
LEAF_NODE	20:32	20:32	10	"/me "
LEAF_NODE	20:38	20:38	8	,
ARGUMENT	20:40	20:40	8	4
FIELD	20:40	20:40	9	4
LEAF_NODE	20:40	20:40	10	4
LEAF_NODE	20:41	20:41	8	)
LEAF_NODE	20:42	20:42	4	)
STATEMENTS	21:1	28:1	4	
LEAF_NODE	21:1	21:1	5	{
STATEMENTS	22:2	27:2	5	
EXPR_STATEMENT	22:2	22:11	6	msg2 += 4 ;
EXPR	22:2	22:2	7	msg2 += 4
ASSIGN	22:2	22:10	8	msg2 += 4
LVAL	22:2	22:2	9	msg2
FIELD	22:2	22:2	10	msg2
LEAF_NODE	22:2	22:2	11	msg2
ASSIGN_OP	22:7	22:7	9	+=
LEAF_NODE	22:7	22:7	10	+=
RVAL	22:10	22:10	9	4
FIELD	22:10	22:10	10	4
LEAF_NODE	22:10	22:10	11	4
LEAF_NODE	22:11	22:11	7	;
SELECTION	23:2	23:14	6	
KEYWORD	23:2	23:2	7	if
LEAF_NODE	23:2	23:2	8	if
LEAF_NODE	23:5	23:5	7	(
CONDITION	23:6	23:6	7	! * msg2
EXPR	23:6	23:6	8	! * msg2
UNARY_EXPR	23:6	23:8	9	! * msg2
UNARY_OPERATOR	23:6	23:6	10	!
LEAF_NODE	23:6	23:6	11	!
UNARY_OPERATOR	23:7	23:7	10	*
LEAF_NODE	23:7	23:7	11	*
FIELD	23:8	23:8	10	msg2
LEAF_NODE	23:8	23:8	11	msg2
LEAF_NODE	23:12	23:12	7	)
STATEMENTS	23:14	26:2	7	
LEAF_NODE	23:14	23:14	8	{
STATEMENTS	24:3	25:3	8	
EXPR_STATEMENT	24:3	24:14	9	g_free ( tmp ) ;
EXPR	24:3	24:3	10	g_free ( tmp )
FUNCTION_CALL	24:3	24:13	11	g_free ( tmp )
CALLEE	24:3	24:3	12	g_free
LEAF_NODE	24:3	24:3	13	g_free
LEAF_NODE	24:9	24:9	12	(
ARGUMENT	24:10	24:10	12	tmp
FIELD	24:10	24:10	13	tmp
LEAF_NODE	24:10	24:10	14	tmp
LEAF_NODE	24:13	24:13	12	)
LEAF_NODE	24:14	24:14	10	;
JUMP_STATEMENT	25:3	25:11	9	return 0 ;
KEYWORD	25:3	25:3	10	return
LEAF_NODE	25:3	25:3	11	return
DESTINATION	25:10	25:10	10	0
EXPR	25:10	25:10	11	0
FIELD	25:10	25:10	12	0
LEAF_NODE	25:10	25:10	13	0
LEAF_NODE	25:11	25:11	10	;
LEAF_NODE	26:2	26:2	8	}
EXPR_STATEMENT	27:2	27:35	6	flags |= SILC_MESSAGE_FLAG_ACTION ;
EXPR	27:2	27:2	7	flags |= SILC_MESSAGE_FLAG_ACTION
ASSIGN	27:2	27:11	8	flags |= SILC_MESSAGE_FLAG_ACTION
LVAL	27:2	27:2	9	flags
FIELD	27:2	27:2	10	flags
LEAF_NODE	27:2	27:2	11	flags
ASSIGN_OP	27:8	27:8	9	|=
LEAF_NODE	27:8	27:8	10	|=
RVAL	27:11	27:11	9	SILC_MESSAGE_FLAG_ACTION
FIELD	27:11	27:11	10	SILC_MESSAGE_FLAG_ACTION
LEAF_NODE	27:11	27:11	11	SILC_MESSAGE_FLAG_ACTION
LEAF_NODE	27:35	27:35	7	;
LEAF_NODE	28:1	28:1	5	}
SELECTION	28:3	28:8	3	
KEYWORD	28:3	28:3	4	else
LEAF_NODE	28:3	28:3	5	else
STATEMENTS	28:8	28:8	4	
SELECTION	28:8	28:46	5	
KEYWORD	28:8	28:8	6	if
LEAF_NODE	28:8	28:8	7	if
LEAF_NODE	28:11	28:11	6	(
CONDITION	28:12	28:12	6	strlen ( msg ) > 1 && msg [ 0 ] == '/'
EXPR	28:12	28:12	7	strlen ( msg ) > 1 && msg [ 0 ] == '/'
AND	28:12	28:31	8	strlen ( msg ) > 1 && msg [ 0 ] == '/'
EXPR	28:12	28:26	9	strlen ( msg ) > 1
FUNCTION_CALL	28:12	28:22	10	strlen ( msg )
CALLEE	28:12	28:12	11	strlen
LEAF_NODE	28:12	28:12	12	strlen
LEAF_NODE	28:18	28:18	11	(
ARGUMENT	28:19	28:19	11	msg
FIELD	28:19	28:19	12	msg
LEAF_NODE	28:19	28:19	13	msg
LEAF_NODE	28:22	28:22	11	)
REL_OPERATOR	28:24	28:24	10	>
LEAF_NODE	28:24	28:24	11	>
FIELD	28:26	28:26	10	1
LEAF_NODE	28:26	28:26	11	1
LEAF_NODE	28:28	28:28	9	&&
EXPR	28:31	28:41	9	msg [ 0 ] == '/'
FIELD	28:31	28:36	10	msg [ 0 ]
LEAF_NODE	28:31	28:31	11	msg
LEAF_NODE	28:34	28:34	11	[
EXPR	28:35	28:35	11	0
FIELD	28:35	28:35	12	0
LEAF_NODE	28:35	28:35	13	0
LEAF_NODE	28:36	28:36	11	]
EQ_OPERATOR	28:38	28:38	10	==
LEAF_NODE	28:38	28:38	11	==
FIELD	28:41	28:41	10	'/'
LEAF_NODE	28:41	28:41	11	'/'
LEAF_NODE	28:44	28:44	6	)
STATEMENTS	28:46	34:1	6	
LEAF_NODE	28:46	28:46	7	{
STATEMENTS	29:2	33:2	7	
SELECTION	29:2	30:3	8	
KEYWORD	29:2	29:2	9	if
LEAF_NODE	29:2	29:2	10	if
LEAF_NODE	29:5	29:5	9	(
CONDITION	29:6	29:6	9	! silc_client_command_call ( client , conn , msg + 1 )
EXPR	29:6	29:6	10	! silc_client_command_call ( client , conn , msg + 1 )
UNARY_EXPR	29:6	29:7	11	! silc_client_command_call ( client , conn , msg + 1 )
UNARY_OPERATOR	29:6	29:6	12	!
LEAF_NODE	29:6	29:6	13	!
FUNCTION_CALL	29:7	29:53	12	silc_client_command_call ( client , conn , msg + 1 )
CALLEE	29:7	29:7	13	silc_client_command_call
LEAF_NODE	29:7	29:7	14	silc_client_command_call
LEAF_NODE	29:31	29:31	13	(
ARGUMENT	29:32	29:32	13	client
FIELD	29:32	29:32	14	client
LEAF_NODE	29:32	29:32	15	client
LEAF_NODE	29:38	29:38	13	,
ARGUMENT	29:40	29:40	13	conn
FIELD	29:40	29:40	14	conn
LEAF_NODE	29:40	29:40	15	conn
LEAF_NODE	29:44	29:44	13	,
ARGUMENT	29:46	29:52	13	msg + 1
FIELD	29:46	29:46	14	msg
LEAF_NODE	29:46	29:46	15	msg
LEAF_NODE	29:50	29:50	14	+
FIELD	29:52	29:52	14	1
LEAF_NODE	29:52	29:52	15	1
LEAF_NODE	29:53	29:53	13	)
LEAF_NODE	29:54	29:54	9	)
STATEMENTS	30:3	30:3	9	
EXPR_STATEMENT	30:3	31:30	10	purple_notify_error ( gc , _ ( "Call Command" ) , _ ( "Cannot call command" ) , _ ( "Unknown command" ) ) ;
EXPR	30:3	30:3	11	purple_notify_error ( gc , _ ( "Call Command" ) , _ ( "Cannot call command" ) , _ ( "Unknown command" ) )
FUNCTION_CALL	30:3	31:29	12	purple_notify_error ( gc , _ ( "Call Command" ) , _ ( "Cannot call command" ) , _ ( "Unknown command" ) )
CALLEE	30:3	30:3	13	purple_notify_error
LEAF_NODE	30:3	30:3	14	purple_notify_error
LEAF_NODE	30:22	30:22	13	(
ARGUMENT	30:23	30:23	13	gc
FIELD	30:23	30:23	14	gc
LEAF_NODE	30:23	30:23	15	gc
LEAF_NODE	30:25	30:25	13	,
ARGUMENT	30:27	30:27	13	_ ( "Call Command" )
FUNCTION_CALL	30:27	30:43	14	_ ( "Call Command" )
CALLEE	30:27	30:27	15	_
LEAF_NODE	30:27	30:27	16	_
LEAF_NODE	30:28	30:28	15	(
ARGUMENT	30:29	30:29	15	"Call Command"
FIELD	30:29	30:29	16	"Call Command"
LEAF_NODE	30:29	30:29	17	"Call Command"
LEAF_NODE	30:43	30:43	15	)
LEAF_NODE	30:44	30:44	13	,
ARGUMENT	30:46	30:46	13	_ ( "Cannot call command" )
FUNCTION_CALL	30:46	30:69	14	_ ( "Cannot call command" )
CALLEE	30:46	30:46	15	_
LEAF_NODE	30:46	30:46	16	_
LEAF_NODE	30:47	30:47	15	(
ARGUMENT	30:48	30:48	15	"Cannot call command"
FIELD	30:48	30:48	16	"Cannot call command"
LEAF_NODE	30:48	30:48	17	"Cannot call command"
LEAF_NODE	30:69	30:69	15	)
LEAF_NODE	30:70	30:70	13	,
ARGUMENT	31:9	31:9	13	_ ( "Unknown command" )
FUNCTION_CALL	31:9	31:28	14	_ ( "Unknown command" )
CALLEE	31:9	31:9	15	_
LEAF_NODE	31:9	31:9	16	_
LEAF_NODE	31:10	31:10	15	(
ARGUMENT	31:11	31:11	15	"Unknown command"
FIELD	31:11	31:11	16	"Unknown command"
LEAF_NODE	31:11	31:11	17	"Unknown command"
LEAF_NODE	31:28	31:28	15	)
LEAF_NODE	31:29	31:29	13	)
LEAF_NODE	31:30	31:30	11	;
EXPR_STATEMENT	32:2	32:13	8	g_free ( tmp ) ;
EXPR	32:2	32:2	9	g_free ( tmp )
FUNCTION_CALL	32:2	32:12	10	g_free ( tmp )
CALLEE	32:2	32:2	11	g_free
LEAF_NODE	32:2	32:2	12	g_free
LEAF_NODE	32:8	32:8	11	(
ARGUMENT	32:9	32:9	11	tmp
FIELD	32:9	32:9	12	tmp
LEAF_NODE	32:9	32:9	13	tmp
LEAF_NODE	32:12	32:12	11	)
LEAF_NODE	32:13	32:13	9	;
JUMP_STATEMENT	33:2	33:10	8	return 0 ;
KEYWORD	33:2	33:2	9	return
LEAF_NODE	33:2	33:2	10	return
DESTINATION	33:9	33:9	9	0
EXPR	33:9	33:9	10	0
FIELD	33:9	33:9	11	0
LEAF_NODE	33:9	33:9	12	0
LEAF_NODE	33:10	33:10	9	;
LEAF_NODE	34:1	34:1	7	}
SELECTION	35:1	36:2	3	
KEYWORD	35:1	35:1	4	if
LEAF_NODE	35:1	35:1	5	if
LEAF_NODE	35:4	35:4	4	(
CONDITION	35:5	35:5	4	sign
EXPR	35:5	35:5	5	sign
FIELD	35:5	35:5	6	sign
LEAF_NODE	35:5	35:5	7	sign
LEAF_NODE	35:9	35:9	4	)
STATEMENTS	36:2	36:2	4	
EXPR_STATEMENT	36:2	36:35	5	flags |= SILC_MESSAGE_FLAG_SIGNED ;
EXPR	36:2	36:2	6	flags |= SILC_MESSAGE_FLAG_SIGNED
ASSIGN	36:2	36:11	7	flags |= SILC_MESSAGE_FLAG_SIGNED
LVAL	36:2	36:2	8	flags
FIELD	36:2	36:2	9	flags
LEAF_NODE	36:2	36:2	10	flags
ASSIGN_OP	36:8	36:8	8	|=
LEAF_NODE	36:8	36:8	9	|=
RVAL	36:11	36:11	8	SILC_MESSAGE_FLAG_SIGNED
FIELD	36:11	36:11	9	SILC_MESSAGE_FLAG_SIGNED
LEAF_NODE	36:11	36:11	10	SILC_MESSAGE_FLAG_SIGNED
LEAF_NODE	36:35	36:35	6	;
SELECTION	39:1	39:29	3	
KEYWORD	39:1	39:1	4	if
LEAF_NODE	39:1	39:1	5	if
LEAF_NODE	39:4	39:4	4	(
CONDITION	39:5	39:5	4	id > SILCPURPLE_PRVGRP
EXPR	39:5	39:10	5	id > SILCPURPLE_PRVGRP
FIELD	39:5	39:5	6	id
LEAF_NODE	39:5	39:5	7	id
REL_OPERATOR	39:8	39:8	6	>
LEAF_NODE	39:8	39:8	7	>
FIELD	39:10	39:10	6	SILCPURPLE_PRVGRP
LEAF_NODE	39:10	39:10	7	SILCPURPLE_PRVGRP
LEAF_NODE	39:27	39:27	4	)
STATEMENTS	39:29	57:1	4	
LEAF_NODE	39:29	39:29	5	{
STATEMENTS	40:2	56:2	5	
SIMPLE_DECL	40:2	40:10	6	GList * l ;
VAR_DECL	40:2	40:9	7	GList * l
TYPE	40:2	40:8	8	GList *
TYPE_NAME	40:2	40:2	9	GList
LEAF_NODE	40:2	40:2	10	GList
POINTER	40:8	40:8	9	*
LEAF_NODE	40:8	40:8	10	*
NAME	40:9	40:9	8	l
LEAF_NODE	40:9	40:9	9	l
LEAF_NODE	40:10	40:10	7	;
SIMPLE_DECL	41:2	41:22	6	SilcPurplePrvgrp prv ;
VAR_DECL	41:2	41:19	7	SilcPurplePrvgrp prv
TYPE	41:2	41:2	8	SilcPurplePrvgrp
TYPE_NAME	41:2	41:2	9	SilcPurplePrvgrp
LEAF_NODE	41:2	41:2	10	SilcPurplePrvgrp
NAME	41:19	41:19	8	prv
LEAF_NODE	41:19	41:19	9	prv
LEAF_NODE	41:22	41:22	7	;
ITERATION	42:2	43:3	6	
KEYWORD	42:2	42:2	7	for
LEAF_NODE	42:2	42:2	8	for
LEAF_NODE	42:6	42:6	7	(
FOR_INIT	42:7	42:19	7	l = sg -> grps ;
EXPR	42:7	42:7	8	l = sg -> grps
ASSIGN	42:7	42:11	9	l = sg -> grps
LVAL	42:7	42:7	10	l
FIELD	42:7	42:7	11	l
LEAF_NODE	42:7	42:7	12	l
ASSIGN_OP	42:9	42:9	10	=
LEAF_NODE	42:9	42:9	11	=
RVAL	42:11	42:11	10	sg -> grps
FIELD	42:11	42:15	11	sg -> grps
LEAF_NODE	42:11	42:11	12	sg
LEAF_NODE	42:13	42:13	12	->
LEAF_NODE	42:15	42:15	12	grps
LEAF_NODE	42:19	42:19	8	;
CONDITION	42:21	42:21	7	l
EXPR	42:21	42:21	8	l
FIELD	42:21	42:21	9	l
LEAF_NODE	42:21	42:21	10	l
LEAF_NODE	42:22	42:22	7	;
FOR_EXPR	42:24	42:24	7	l = l -> next
EXPR	42:24	42:24	8	l = l -> next
ASSIGN	42:24	42:28	9	l = l -> next
LVAL	42:24	42:24	10	l
FIELD	42:24	42:24	11	l
LEAF_NODE	42:24	42:24	12	l
ASSIGN_OP	42:26	42:26	10	=
LEAF_NODE	42:26	42:26	11	=
RVAL	42:28	42:28	10	l -> next
FIELD	42:28	42:31	11	l -> next
LEAF_NODE	42:28	42:28	12	l
LEAF_NODE	42:29	42:29	12	->
LEAF_NODE	42:31	42:31	12	next
LEAF_NODE	42:35	42:35	7	)
STATEMENTS	43:3	43:3	7	
SELECTION	43:3	44:4	8	
KEYWORD	43:3	43:3	9	if
LEAF_NODE	43:3	43:3	10	if
LEAF_NODE	43:6	43:6	9	(
CONDITION	43:7	43:7	9	( ( SilcPurplePrvgrp ) l -> data ) -> id == id
EXPR	43:7	43:42	10	( ( SilcPurplePrvgrp ) l -> data ) -> id == id
LEAF_NODE	43:7	43:7	11	(
LEAF_NODE	43:8	43:8	11	(
TYPE_NAME	43:9	43:9	11	SilcPurplePrvgrp
LEAF_NODE	43:9	43:9	12	SilcPurplePrvgrp
LEAF_NODE	43:25	43:25	11	)
FIELD	43:26	43:29	11	l -> data
LEAF_NODE	43:26	43:26	12	l
LEAF_NODE	43:27	43:27	12	->
LEAF_NODE	43:29	43:29	12	data
LEAF_NODE	43:33	43:33	11	)
LEAF_NODE	43:34	43:34	11	->
LEAF_NODE	43:36	43:36	11	id
EQ_OPERATOR	43:39	43:39	11	==
LEAF_NODE	43:39	43:39	12	==
FIELD	43:42	43:42	11	id
LEAF_NODE	43:42	43:42	12	id
LEAF_NODE	43:44	43:44	9	)
STATEMENTS	44:4	44:4	9	
JUMP_STATEMENT	44:4	44:9	10	break DESTINATION ;
KEYWORD	44:4	44:4	11	break
LEAF_NODE	44:4	44:4	12	break
LEAF_NODE	0:0	0:0	11	DESTINATION
LEAF_NODE	44:9	44:9	11	;
SELECTION	45:2	45:10	6	
KEYWORD	45:2	45:2	7	if
LEAF_NODE	45:2	45:2	8	if
LEAF_NODE	45:5	45:5	7	(
CONDITION	45:6	45:6	7	! l
EXPR	45:6	45:6	8	! l
UNARY_EXPR	45:6	45:7	9	! l
UNARY_OPERATOR	45:6	45:6	10	!
LEAF_NODE	45:6	45:6	11	!
FIELD	45:7	45:7	10	l
LEAF_NODE	45:7	45:7	11	l
LEAF_NODE	45:8	45:8	7	)
STATEMENTS	45:10	48:2	7	
LEAF_NODE	45:10	45:10	8	{
STATEMENTS	46:3	47:3	8	
EXPR_STATEMENT	46:3	46:14	9	g_free ( tmp ) ;
EXPR	46:3	46:3	10	g_free ( tmp )
FUNCTION_CALL	46:3	46:13	11	g_free ( tmp )
CALLEE	46:3	46:3	12	g_free
LEAF_NODE	46:3	46:3	13	g_free
LEAF_NODE	46:9	46:9	12	(
ARGUMENT	46:10	46:10	12	tmp
FIELD	46:10	46:10	13	tmp
LEAF_NODE	46:10	46:10	14	tmp
LEAF_NODE	46:13	46:13	12	)
LEAF_NODE	46:14	46:14	10	;
JUMP_STATEMENT	47:3	47:11	9	return 0 ;
KEYWORD	47:3	47:3	10	return
LEAF_NODE	47:3	47:3	11	return
DESTINATION	47:10	47:10	10	0
EXPR	47:10	47:10	11	0
FIELD	47:10	47:10	12	0
LEAF_NODE	47:10	47:10	13	0
LEAF_NODE	47:11	47:11	10	;
LEAF_NODE	48:2	48:2	8	}
EXPR_STATEMENT	49:2	49:15	6	prv = l -> data ;
EXPR	49:2	49:2	7	prv = l -> data
ASSIGN	49:2	49:8	8	prv = l -> data
LVAL	49:2	49:2	9	prv
FIELD	49:2	49:2	10	prv
LEAF_NODE	49:2	49:2	11	prv
ASSIGN_OP	49:6	49:6	9	=
LEAF_NODE	49:6	49:6	10	=
RVAL	49:8	49:8	9	l -> data
FIELD	49:8	49:11	10	l -> data
LEAF_NODE	49:8	49:8	11	l
LEAF_NODE	49:9	49:9	11	->
LEAF_NODE	49:11	49:11	11	data
LEAF_NODE	49:15	49:15	7	;
EXPR_STATEMENT	50:2	51:30	6	channel = silc_client_get_channel ( sg -> client , sg -> conn , ( char * ) prv -> parentch ) ;
EXPR	50:2	50:2	7	channel = silc_client_get_channel ( sg -> client , sg -> conn , ( char * ) prv -> parentch )
ASSIGN	50:2	50:12	8	channel = silc_client_get_channel ( sg -> client , sg -> conn , ( char * ) prv -> parentch )
LVAL	50:2	50:2	9	channel
FIELD	50:2	50:2	10	channel
LEAF_NODE	50:2	50:2	11	channel
ASSIGN_OP	50:10	50:10	9	=
LEAF_NODE	50:10	50:10	10	=
RVAL	50:12	50:12	9	silc_client_get_channel ( sg -> client , sg -> conn , ( char * ) prv -> parentch )
FUNCTION_CALL	50:12	51:29	10	silc_client_get_channel ( sg -> client , sg -> conn , ( char * ) prv -> parentch )
CALLEE	50:12	50:12	11	silc_client_get_channel
LEAF_NODE	50:12	50:12	12	silc_client_get_channel
LEAF_NODE	50:35	50:35	11	(
ARGUMENT	50:36	50:36	11	sg -> client
FIELD	50:36	50:40	12	sg -> client
LEAF_NODE	50:36	50:36	13	sg
LEAF_NODE	50:38	50:38	13	->
LEAF_NODE	50:40	50:40	13	client
LEAF_NODE	50:46	50:46	11	,
ARGUMENT	50:48	50:48	11	sg -> conn
FIELD	50:48	50:52	12	sg -> conn
LEAF_NODE	50:48	50:48	13	sg
LEAF_NODE	50:50	50:50	13	->
LEAF_NODE	50:52	50:52	13	conn
LEAF_NODE	50:56	50:56	11	,
ARGUMENT	51:8	51:16	11	( char * ) prv -> parentch
LEAF_NODE	51:8	51:8	12	(
TYPE_NAME	51:9	51:9	12	char
LEAF_NODE	51:9	51:9	13	char
LEAF_NODE	51:14	51:14	12	*
LEAF_NODE	51:15	51:15	12	)
FIELD	51:16	51:21	12	prv -> parentch
LEAF_NODE	51:16	51:16	13	prv
LEAF_NODE	51:19	51:19	13	->
LEAF_NODE	51:21	51:21	13	parentch
LEAF_NODE	51:29	51:29	11	)
LEAF_NODE	51:30	51:30	7	;
SELECTION	52:2	52:16	6	
KEYWORD	52:2	52:2	7	if
LEAF_NODE	52:2	52:2	8	if
LEAF_NODE	52:5	52:5	7	(
CONDITION	52:6	52:6	7	! channel
EXPR	52:6	52:6	8	! channel
UNARY_EXPR	52:6	52:7	9	! channel
UNARY_OPERATOR	52:6	52:6	10	!
LEAF_NODE	52:6	52:6	11	!
FIELD	52:7	52:7	10	channel
LEAF_NODE	52:7	52:7	11	channel
LEAF_NODE	52:14	52:14	7	)
STATEMENTS	52:16	55:2	7	
LEAF_NODE	52:16	52:16	8	{
STATEMENTS	53:3	54:3	8	
EXPR_STATEMENT	53:3	53:14	9	g_free ( tmp ) ;
EXPR	53:3	53:3	10	g_free ( tmp )
FUNCTION_CALL	53:3	53:13	11	g_free ( tmp )
CALLEE	53:3	53:3	12	g_free
LEAF_NODE	53:3	53:3	13	g_free
LEAF_NODE	53:9	53:9	12	(
ARGUMENT	53:10	53:10	12	tmp
FIELD	53:10	53:10	13	tmp
LEAF_NODE	53:10	53:10	14	tmp
LEAF_NODE	53:13	53:13	12	)
LEAF_NODE	53:14	53:14	10	;
JUMP_STATEMENT	54:3	54:11	9	return 0 ;
KEYWORD	54:3	54:3	10	return
LEAF_NODE	54:3	54:3	11	return
DESTINATION	54:10	54:10	10	0
EXPR	54:10	54:10	11	0
FIELD	54:10	54:10	12	0
LEAF_NODE	54:10	54:10	13	0
LEAF_NODE	54:11	54:11	10	;
LEAF_NODE	55:2	55:2	8	}
EXPR_STATEMENT	56:2	56:16	6	key = prv -> key ;
EXPR	56:2	56:2	7	key = prv -> key
ASSIGN	56:2	56:8	8	key = prv -> key
LVAL	56:2	56:2	9	key
FIELD	56:2	56:2	10	key
LEAF_NODE	56:2	56:2	11	key
ASSIGN_OP	56:6	56:6	9	=
LEAF_NODE	56:6	56:6	10	=
RVAL	56:8	56:8	9	prv -> key
FIELD	56:8	56:13	10	prv -> key
LEAF_NODE	56:8	56:8	11	prv
LEAF_NODE	56:11	56:11	11	->
LEAF_NODE	56:13	56:13	11	key
LEAF_NODE	56:16	56:16	7	;
LEAF_NODE	57:1	57:1	5	}
SELECTION	58:1	58:15	3	
KEYWORD	58:1	58:1	4	if
LEAF_NODE	58:1	58:1	5	if
LEAF_NODE	58:4	58:4	4	(
CONDITION	58:5	58:5	4	! channel
EXPR	58:5	58:5	5	! channel
UNARY_EXPR	58:5	58:6	6	! channel
UNARY_OPERATOR	58:5	58:5	7	!
LEAF_NODE	58:5	58:5	8	!
FIELD	58:6	58:6	7	channel
LEAF_NODE	58:6	58:6	8	channel
LEAF_NODE	58:13	58:13	4	)
STATEMENTS	58:15	73:1	4	
LEAF_NODE	58:15	58:15	5	{
STATEMENTS	60:2	72:2	5	
EXPR_STATEMENT	60:2	60:57	6	silc_hash_table_list ( conn -> local_entry -> channels , & htl ) ;
EXPR	60:2	60:2	7	silc_hash_table_list ( conn -> local_entry -> channels , & htl )
FUNCTION_CALL	60:2	60:56	8	silc_hash_table_list ( conn -> local_entry -> channels , & htl )
CALLEE	60:2	60:2	9	silc_hash_table_list
LEAF_NODE	60:2	60:2	10	silc_hash_table_list
LEAF_NODE	60:22	60:22	9	(
ARGUMENT	60:23	60:23	9	conn -> local_entry -> channels
FIELD	60:23	60:42	10	conn -> local_entry -> channels
LEAF_NODE	60:23	60:23	11	conn
LEAF_NODE	60:27	60:27	11	->
LEAF_NODE	60:29	60:29	11	local_entry
LEAF_NODE	60:40	60:40	11	->
LEAF_NODE	60:42	60:42	11	channels
LEAF_NODE	60:50	60:50	9	,
ARGUMENT	60:52	60:52	9	& htl
UNARY_EXPR	60:52	60:53	10	& htl
UNARY_OPERATOR	60:52	60:52	11	&
LEAF_NODE	60:52	60:52	12	&
FIELD	60:53	60:53	11	htl
LEAF_NODE	60:53	60:53	12	htl
LEAF_NODE	60:56	60:56	9	)
LEAF_NODE	60:57	60:57	7	;
ITERATION	61:2	61:56	6	
KEYWORD	61:2	61:2	7	while
LEAF_NODE	61:2	61:2	8	while
LEAF_NODE	61:8	61:8	7	(
CONDITION	61:9	61:9	7	silc_hash_table_get ( & htl , NULL , ( void * ) & chu )
EXPR	61:9	61:9	8	silc_hash_table_get ( & htl , NULL , ( void * ) & chu )
FUNCTION_CALL	61:9	61:53	9	silc_hash_table_get ( & htl , NULL , ( void * ) & chu )
CALLEE	61:9	61:9	10	silc_hash_table_get
LEAF_NODE	61:9	61:9	11	silc_hash_table_get
LEAF_NODE	61:28	61:28	10	(
ARGUMENT	61:29	61:29	10	& htl
UNARY_EXPR	61:29	61:30	11	& htl
UNARY_OPERATOR	61:29	61:29	12	&
LEAF_NODE	61:29	61:29	13	&
FIELD	61:30	61:30	12	htl
LEAF_NODE	61:30	61:30	13	htl
LEAF_NODE	61:33	61:33	10	,
ARGUMENT	61:35	61:35	10	NULL
FIELD	61:35	61:35	11	NULL
LEAF_NODE	61:35	61:35	12	NULL
LEAF_NODE	61:39	61:39	10	,
ARGUMENT	61:41	61:49	10	( void * ) & chu
LEAF_NODE	61:41	61:41	11	(
TYPE_NAME	61:42	61:42	11	void
LEAF_NODE	61:42	61:42	12	void
LEAF_NODE	61:47	61:47	11	*
LEAF_NODE	61:48	61:48	11	)
UNARY_EXPR	61:49	61:50	11	& chu
UNARY_OPERATOR	61:49	61:49	12	&
LEAF_NODE	61:49	61:49	13	&
FIELD	61:50	61:50	12	chu
LEAF_NODE	61:50	61:50	13	chu
LEAF_NODE	61:53	61:53	10	)
LEAF_NODE	61:54	61:54	7	)
STATEMENTS	61:56	66:2	7	
LEAF_NODE	61:56	61:56	8	{
STATEMENTS	62:3	62:3	8	
SELECTION	62:3	62:53	9	
KEYWORD	62:3	62:3	10	if
LEAF_NODE	62:3	62:3	11	if
LEAF_NODE	62:6	62:6	10	(
CONDITION	62:7	62:7	10	SILC_PTR_TO_32 ( chu -> channel -> context ) == id
EXPR	62:7	62:48	11	SILC_PTR_TO_32 ( chu -> channel -> context ) == id
FUNCTION_CALL	62:7	62:43	12	SILC_PTR_TO_32 ( chu -> channel -> context )
CALLEE	62:7	62:7	13	SILC_PTR_TO_32
LEAF_NODE	62:7	62:7	14	SILC_PTR_TO_32
LEAF_NODE	62:21	62:21	13	(
ARGUMENT	62:22	62:22	13	chu -> channel -> context
FIELD	62:22	62:36	14	chu -> channel -> context
LEAF_NODE	62:22	62:22	15	chu
LEAF_NODE	62:25	62:25	15	->
LEAF_NODE	62:27	62:27	15	channel
LEAF_NODE	62:34	62:34	15	->
LEAF_NODE	62:36	62:36	15	context
LEAF_NODE	62:43	62:43	13	)
EQ_OPERATOR	62:45	62:45	12	==
LEAF_NODE	62:45	62:45	13	==
FIELD	62:48	62:48	12	id
LEAF_NODE	62:48	62:48	13	id
LEAF_NODE	62:51	62:51	10	)
STATEMENTS	62:53	65:3	10	
LEAF_NODE	62:53	62:53	11	{
STATEMENTS	63:4	64:4	11	
EXPR_STATEMENT	63:4	63:16	12	found = TRUE ;
EXPR	63:4	63:4	13	found = TRUE
ASSIGN	63:4	63:12	14	found = TRUE
LVAL	63:4	63:4	15	found
FIELD	63:4	63:4	16	found
LEAF_NODE	63:4	63:4	17	found
ASSIGN_OP	63:10	63:10	15	=
LEAF_NODE	63:10	63:10	16	=
RVAL	63:12	63:12	15	TRUE
FIELD	63:12	63:12	16	TRUE
LEAF_NODE	63:12	63:12	17	TRUE
LEAF_NODE	63:16	63:16	13	;
JUMP_STATEMENT	64:4	64:9	12	break DESTINATION ;
KEYWORD	64:4	64:4	13	break
LEAF_NODE	64:4	64:4	14	break
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	64:9	64:9	13	;
LEAF_NODE	65:3	65:3	11	}
LEAF_NODE	66:2	66:2	8	}
EXPR_STATEMENT	67:2	67:34	6	silc_hash_table_list_reset ( & htl ) ;
EXPR	67:2	67:2	7	silc_hash_table_list_reset ( & htl )
FUNCTION_CALL	67:2	67:33	8	silc_hash_table_list_reset ( & htl )
CALLEE	67:2	67:2	9	silc_hash_table_list_reset
LEAF_NODE	67:2	67:2	10	silc_hash_table_list_reset
LEAF_NODE	67:28	67:28	9	(
ARGUMENT	67:29	67:29	9	& htl
UNARY_EXPR	67:29	67:30	10	& htl
UNARY_OPERATOR	67:29	67:29	11	&
LEAF_NODE	67:29	67:29	12	&
FIELD	67:30	67:30	11	htl
LEAF_NODE	67:30	67:30	12	htl
LEAF_NODE	67:33	67:33	9	)
LEAF_NODE	67:34	67:34	7	;
SELECTION	68:2	68:14	6	
KEYWORD	68:2	68:2	7	if
LEAF_NODE	68:2	68:2	8	if
LEAF_NODE	68:5	68:5	7	(
CONDITION	68:6	68:6	7	! found
EXPR	68:6	68:6	8	! found
UNARY_EXPR	68:6	68:7	9	! found
UNARY_OPERATOR	68:6	68:6	10	!
LEAF_NODE	68:6	68:6	11	!
FIELD	68:7	68:7	10	found
LEAF_NODE	68:7	68:7	11	found
LEAF_NODE	68:12	68:12	7	)
STATEMENTS	68:14	71:2	7	
LEAF_NODE	68:14	68:14	8	{
STATEMENTS	69:3	70:3	8	
EXPR_STATEMENT	69:3	69:14	9	g_free ( tmp ) ;
EXPR	69:3	69:3	10	g_free ( tmp )
FUNCTION_CALL	69:3	69:13	11	g_free ( tmp )
CALLEE	69:3	69:3	12	g_free
LEAF_NODE	69:3	69:3	13	g_free
LEAF_NODE	69:9	69:9	12	(
ARGUMENT	69:10	69:10	12	tmp
FIELD	69:10	69:10	13	tmp
LEAF_NODE	69:10	69:10	14	tmp
LEAF_NODE	69:13	69:13	12	)
LEAF_NODE	69:14	69:14	10	;
JUMP_STATEMENT	70:3	70:11	9	return 0 ;
KEYWORD	70:3	70:3	10	return
LEAF_NODE	70:3	70:3	11	return
DESTINATION	70:10	70:10	10	0
EXPR	70:10	70:10	11	0
FIELD	70:10	70:10	12	0
LEAF_NODE	70:10	70:10	13	0
LEAF_NODE	70:11	70:11	10	;
LEAF_NODE	71:2	71:2	8	}
EXPR_STATEMENT	72:2	72:24	6	channel = chu -> channel ;
EXPR	72:2	72:2	7	channel = chu -> channel
ASSIGN	72:2	72:12	8	channel = chu -> channel
LVAL	72:2	72:2	9	channel
FIELD	72:2	72:2	10	channel
LEAF_NODE	72:2	72:2	11	channel
ASSIGN_OP	72:10	72:10	9	=
LEAF_NODE	72:10	72:10	10	=
RVAL	72:12	72:12	9	chu -> channel
FIELD	72:12	72:17	10	chu -> channel
LEAF_NODE	72:12	72:12	11	chu
LEAF_NODE	72:15	72:15	11	->
LEAF_NODE	72:17	72:17	11	channel
LEAF_NODE	72:24	72:24	7	;
LEAF_NODE	73:1	73:1	5	}
EXPR_STATEMENT	75:1	77:31	3	ret = silc_client_send_channel_message ( client , conn , channel , key , flags , ( unsigned char * ) msg2 , strlen ( msg2 ) , TRUE ) ;
EXPR	75:1	75:1	4	ret = silc_client_send_channel_message ( client , conn , channel , key , flags , ( unsigned char * ) msg2 , strlen ( msg2 ) , TRUE )
ASSIGN	75:1	75:7	5	ret = silc_client_send_channel_message ( client , conn , channel , key , flags , ( unsigned char * ) msg2 , strlen ( msg2 ) , TRUE )
LVAL	75:1	75:1	6	ret
FIELD	75:1	75:1	7	ret
LEAF_NODE	75:1	75:1	8	ret
ASSIGN_OP	75:5	75:5	6	=
LEAF_NODE	75:5	75:5	7	=
RVAL	75:7	75:7	6	silc_client_send_channel_message ( client , conn , channel , key , flags , ( unsigned char * ) msg2 , strlen ( msg2 ) , TRUE )
FUNCTION_CALL	75:7	77:30	7	silc_client_send_channel_message ( client , conn , channel , key , flags , ( unsigned char * ) msg2 , strlen ( msg2 ) , TRUE )
CALLEE	75:7	75:7	8	silc_client_send_channel_message
LEAF_NODE	75:7	75:7	9	silc_client_send_channel_message
LEAF_NODE	75:39	75:39	8	(
ARGUMENT	75:40	75:40	8	client
FIELD	75:40	75:40	9	client
LEAF_NODE	75:40	75:40	10	client
LEAF_NODE	75:46	75:46	8	,
ARGUMENT	75:48	75:48	8	conn
FIELD	75:48	75:48	9	conn
LEAF_NODE	75:48	75:48	10	conn
LEAF_NODE	75:52	75:52	8	,
ARGUMENT	75:54	75:54	8	channel
FIELD	75:54	75:54	9	channel
LEAF_NODE	75:54	75:54	10	channel
LEAF_NODE	75:61	75:61	8	,
ARGUMENT	75:63	75:63	8	key
FIELD	75:63	75:63	9	key
LEAF_NODE	75:63	75:63	10	key
LEAF_NODE	75:66	75:66	8	,
ARGUMENT	76:12	76:12	8	flags
FIELD	76:12	76:12	9	flags
LEAF_NODE	76:12	76:12	10	flags
LEAF_NODE	76:17	76:17	8	,
ARGUMENT	76:19	76:36	8	( unsigned char * ) msg2
LEAF_NODE	76:19	76:19	9	(
TYPE_NAME	76:20	76:29	9	unsigned char
LEAF_NODE	76:20	76:20	10	unsigned
LEAF_NODE	76:29	76:29	10	char
LEAF_NODE	76:34	76:34	9	*
LEAF_NODE	76:35	76:35	9	)
FIELD	76:36	76:36	9	msg2
LEAF_NODE	76:36	76:36	10	msg2
LEAF_NODE	76:40	76:40	8	,
ARGUMENT	77:12	77:12	8	strlen ( msg2 )
FUNCTION_CALL	77:12	77:23	9	strlen ( msg2 )
CALLEE	77:12	77:12	10	strlen
LEAF_NODE	77:12	77:12	11	strlen
LEAF_NODE	77:18	77:18	10	(
ARGUMENT	77:19	77:19	10	msg2
FIELD	77:19	77:19	11	msg2
LEAF_NODE	77:19	77:19	12	msg2
LEAF_NODE	77:23	77:23	10	)
LEAF_NODE	77:24	77:24	8	,
ARGUMENT	77:26	77:26	8	TRUE
FIELD	77:26	77:26	9	TRUE
LEAF_NODE	77:26	77:26	10	TRUE
LEAF_NODE	77:30	77:30	8	)
LEAF_NODE	77:31	77:31	4	;
SELECTION	78:1	78:10	3	
KEYWORD	78:1	78:1	4	if
LEAF_NODE	78:1	78:1	5	if
LEAF_NODE	78:4	78:4	4	(
CONDITION	78:5	78:5	4	ret
EXPR	78:5	78:5	5	ret
FIELD	78:5	78:5	6	ret
LEAF_NODE	78:5	78:5	7	ret
LEAF_NODE	78:8	78:8	4	)
STATEMENTS	78:10	81:1	4	
LEAF_NODE	78:10	78:10	5	{
STATEMENTS	79:2	79:2	5	
EXPR_STATEMENT	79:2	80:16	6	serv_got_chat_in ( gc , id , purple_connection_get_display_name ( gc ) , msgflags , msg , time ( NULL ) ) ;
EXPR	79:2	79:2	7	serv_got_chat_in ( gc , id , purple_connection_get_display_name ( gc ) , msgflags , msg , time ( NULL ) )
FUNCTION_CALL	79:2	80:15	8	serv_got_chat_in ( gc , id , purple_connection_get_display_name ( gc ) , msgflags , msg , time ( NULL ) )
CALLEE	79:2	79:2	9	serv_got_chat_in
LEAF_NODE	79:2	79:2	10	serv_got_chat_in
LEAF_NODE	79:18	79:18	9	(
ARGUMENT	79:19	79:19	9	gc
FIELD	79:19	79:19	10	gc
LEAF_NODE	79:19	79:19	11	gc
LEAF_NODE	79:21	79:21	9	,
ARGUMENT	79:23	79:23	9	id
FIELD	79:23	79:23	10	id
LEAF_NODE	79:23	79:23	11	id
LEAF_NODE	79:25	79:25	9	,
ARGUMENT	79:27	79:27	9	purple_connection_get_display_name ( gc )
FUNCTION_CALL	79:27	79:64	10	purple_connection_get_display_name ( gc )
CALLEE	79:27	79:27	11	purple_connection_get_display_name
LEAF_NODE	79:27	79:27	12	purple_connection_get_display_name
LEAF_NODE	79:61	79:61	11	(
ARGUMENT	79:62	79:62	11	gc
FIELD	79:62	79:62	12	gc
LEAF_NODE	79:62	79:62	13	gc
LEAF_NODE	79:64	79:64	11	)
LEAF_NODE	79:65	79:65	9	,
ARGUMENT	79:67	79:67	9	msgflags
FIELD	79:67	79:67	10	msgflags
LEAF_NODE	79:67	79:67	11	msgflags
LEAF_NODE	79:75	79:75	9	,
ARGUMENT	79:77	79:77	9	msg
FIELD	79:77	79:77	10	msg
LEAF_NODE	79:77	79:77	11	msg
LEAF_NODE	79:80	79:80	9	,
ARGUMENT	80:5	80:5	9	time ( NULL )
FUNCTION_CALL	80:5	80:14	10	time ( NULL )
CALLEE	80:5	80:5	11	time
LEAF_NODE	80:5	80:5	12	time
LEAF_NODE	80:9	80:9	11	(
ARGUMENT	80:10	80:10	11	NULL
FIELD	80:10	80:10	12	NULL
LEAF_NODE	80:10	80:10	13	NULL
LEAF_NODE	80:14	80:14	11	)
LEAF_NODE	80:15	80:15	9	)
LEAF_NODE	80:16	80:16	7	;
LEAF_NODE	81:1	81:1	5	}
EXPR_STATEMENT	82:1	82:12	3	g_free ( tmp ) ;
EXPR	82:1	82:1	4	g_free ( tmp )
FUNCTION_CALL	82:1	82:11	5	g_free ( tmp )
CALLEE	82:1	82:1	6	g_free
LEAF_NODE	82:1	82:1	7	g_free
LEAF_NODE	82:7	82:7	6	(
ARGUMENT	82:8	82:8	6	tmp
FIELD	82:8	82:8	7	tmp
LEAF_NODE	82:8	82:8	8	tmp
LEAF_NODE	82:11	82:11	6	)
LEAF_NODE	82:12	82:12	4	;
JUMP_STATEMENT	83:1	83:11	3	return ret ;
KEYWORD	83:1	83:1	4	return
LEAF_NODE	83:1	83:1	5	return
DESTINATION	83:8	83:8	4	ret
EXPR	83:8	83:8	5	ret
FIELD	83:8	83:8	6	ret
LEAF_NODE	83:8	83:8	7	ret
LEAF_NODE	83:11	83:11	4	;
LEAF_NODE	84:0	84:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	137:0	1	
RETURN_TYPE	2:0	2:13	2	static GList *
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	GList
LEAF_NODE	2:7	2:7	4	GList
LEAF_NODE	2:13	2:13	3	*
FUNCTION_NAME	2:14	2:14	2	qip_logger_list
LEAF_NODE	2:14	2:14	3	qip_logger_list
PARAMETER_LIST	2:29	2:88	2	( PurpleLogType type , const char * sn , PurpleAccount * account )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:44	3	PurpleLogType type
TYPE	2:30	2:30	4	PurpleLogType
TYPE_NAME	2:30	2:30	5	PurpleLogType
LEAF_NODE	2:30	2:30	6	PurpleLogType
NAME	2:44	2:44	4	type
LEAF_NODE	2:44	2:44	5	type
LEAF_NODE	2:48	2:48	3	,
PARAMETER_DECL	2:50	2:62	3	const char * sn
TYPE	2:50	2:61	4	const char *
TYPE_NAME	2:50	2:56	5	const char
LEAF_NODE	2:50	2:50	6	const
LEAF_NODE	2:56	2:56	6	char
POINTER	2:61	2:61	5	*
LEAF_NODE	2:61	2:61	6	*
NAME	2:62	2:62	4	sn
LEAF_NODE	2:62	2:62	5	sn
LEAF_NODE	2:64	2:64	3	,
PARAMETER_DECL	2:66	2:81	3	PurpleAccount * account
TYPE	2:66	2:80	4	PurpleAccount *
TYPE_NAME	2:66	2:66	5	PurpleAccount
LEAF_NODE	2:66	2:66	6	PurpleAccount
POINTER	2:80	2:80	5	*
LEAF_NODE	2:80	2:80	6	*
NAME	2:81	2:81	4	account
LEAF_NODE	2:81	2:81	5	account
LEAF_NODE	2:88	2:88	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	136:1	2	
SIMPLE_DECL	4:1	4:19	3	GList * list ; list = NULL ;
VAR_DECL	4:1	4:8	4	GList * list ; list = NULL
TYPE	4:1	4:7	5	GList *
TYPE_NAME	4:1	4:1	6	GList
LEAF_NODE	4:1	4:1	7	GList
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	list
LEAF_NODE	4:8	4:8	6	list
LEAF_NODE	0:0	0:0	5	;
INIT	4:8	4:8	5	list = NULL
ASSIGN	4:8	4:15	6	list = NULL
LVAL	4:8	4:8	7	list
NAME	4:8	4:8	8	list
LEAF_NODE	4:8	4:8	9	list
ASSIGN_OP	4:13	4:13	7	=
LEAF_NODE	4:13	4:13	8	=
RVAL	4:15	4:15	7	NULL
FIELD	4:15	4:15	8	NULL
LEAF_NODE	4:15	4:15	9	NULL
LEAF_NODE	4:19	4:19	4	;
SIMPLE_DECL	5:1	5:19	3	const char * logdir ;
VAR_DECL	5:1	5:13	4	const char * logdir
TYPE	5:1	5:12	5	const char *
TYPE_NAME	5:1	5:7	6	const char
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	char
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	logdir
LEAF_NODE	5:13	5:13	6	logdir
LEAF_NODE	5:19	5:19	4	;
SIMPLE_DECL	6:1	6:21	3	PurplePlugin * plugin ;
VAR_DECL	6:1	6:15	4	PurplePlugin * plugin
TYPE	6:1	6:14	5	PurplePlugin *
TYPE_NAME	6:1	6:1	6	PurplePlugin
LEAF_NODE	6:1	6:1	7	PurplePlugin
POINTER	6:14	6:14	6	*
LEAF_NODE	6:14	6:14	7	*
NAME	6:15	6:15	5	plugin
LEAF_NODE	6:15	6:15	6	plugin
LEAF_NODE	6:21	6:21	4	;
SIMPLE_DECL	7:1	7:36	3	PurplePluginProtocolInfo * prpl_info ;
VAR_DECL	7:1	7:27	4	PurplePluginProtocolInfo * prpl_info
TYPE	7:1	7:26	5	PurplePluginProtocolInfo *
TYPE_NAME	7:1	7:1	6	PurplePluginProtocolInfo
LEAF_NODE	7:1	7:1	7	PurplePluginProtocolInfo
POINTER	7:26	7:26	6	*
LEAF_NODE	7:26	7:26	7	*
NAME	7:27	7:27	5	prpl_info
LEAF_NODE	7:27	7:27	6	prpl_info
LEAF_NODE	7:36	7:36	4	;
SIMPLE_DECL	8:1	8:15	3	char * username ;
VAR_DECL	8:1	8:7	4	char * username
TYPE	8:1	8:6	5	char *
TYPE_NAME	8:1	8:1	6	char
LEAF_NODE	8:1	8:1	7	char
POINTER	8:6	8:6	6	*
LEAF_NODE	8:6	8:6	7	*
NAME	8:7	8:7	5	username
LEAF_NODE	8:7	8:7	6	username
LEAF_NODE	8:15	8:15	4	;
SIMPLE_DECL	9:1	9:15	3	char * filename ;
VAR_DECL	9:1	9:7	4	char * filename
TYPE	9:1	9:6	5	char *
TYPE_NAME	9:1	9:1	6	char
LEAF_NODE	9:1	9:1	7	char
POINTER	9:6	9:6	6	*
LEAF_NODE	9:6	9:6	7	*
NAME	9:7	9:7	5	filename
LEAF_NODE	9:7	9:7	6	filename
LEAF_NODE	9:15	9:15	4	;
SIMPLE_DECL	10:1	10:11	3	char * path ;
VAR_DECL	10:1	10:7	4	char * path
TYPE	10:1	10:6	5	char *
TYPE_NAME	10:1	10:1	6	char
LEAF_NODE	10:1	10:1	7	char
POINTER	10:6	10:6	6	*
LEAF_NODE	10:6	10:6	7	*
NAME	10:7	10:7	5	path
LEAF_NODE	10:7	10:7	6	path
LEAF_NODE	10:11	10:11	4	;
SIMPLE_DECL	11:1	11:15	3	char * contents ;
VAR_DECL	11:1	11:7	4	char * contents
TYPE	11:1	11:6	5	char *
TYPE_NAME	11:1	11:1	6	char
LEAF_NODE	11:1	11:1	7	char
POINTER	11:6	11:6	6	*
LEAF_NODE	11:6	11:6	7	*
NAME	11:7	11:7	5	contents
LEAF_NODE	11:7	11:7	6	contents
LEAF_NODE	11:15	11:15	4	;
SIMPLE_DECL	12:1	12:36	3	struct qip_logger_data * data ; data = NULL ;
VAR_DECL	12:1	12:25	4	struct qip_logger_data * data ; data = NULL
TYPE	12:1	12:24	5	struct qip_logger_data *
TYPE_NAME	12:1	12:8	6	struct qip_logger_data
LEAF_NODE	12:1	12:1	7	struct
LEAF_NODE	12:8	12:8	7	qip_logger_data
POINTER	12:24	12:24	6	*
LEAF_NODE	12:24	12:24	7	*
NAME	12:25	12:25	5	data
LEAF_NODE	12:25	12:25	6	data
LEAF_NODE	0:0	0:0	5	;
INIT	12:25	12:25	5	data = NULL
ASSIGN	12:25	12:32	6	data = NULL
LVAL	12:25	12:25	7	data
NAME	12:25	12:25	8	data
LEAF_NODE	12:25	12:25	9	data
ASSIGN_OP	12:30	12:30	7	=
LEAF_NODE	12:30	12:30	8	=
RVAL	12:32	12:32	7	NULL
FIELD	12:32	12:32	8	NULL
LEAF_NODE	12:32	12:32	9	NULL
LEAF_NODE	12:36	12:36	4	;
SIMPLE_DECL	13:1	13:18	3	struct tm prev_tm ;
VAR_DECL	13:1	13:11	4	struct tm prev_tm
TYPE	13:1	13:1	5	struct tm
TYPE_NAME	13:1	13:8	6	struct tm
LEAF_NODE	13:1	13:1	7	struct
LEAF_NODE	13:8	13:8	7	tm
NAME	13:11	13:11	5	prev_tm
LEAF_NODE	13:11	13:11	6	prev_tm
LEAF_NODE	13:18	13:18	4	;
SIMPLE_DECL	14:1	14:13	3	struct tm tm ;
VAR_DECL	14:1	14:11	4	struct tm tm
TYPE	14:1	14:1	5	struct tm
TYPE_NAME	14:1	14:8	6	struct tm
LEAF_NODE	14:1	14:1	7	struct
LEAF_NODE	14:8	14:8	7	tm
NAME	14:11	14:11	5	tm
LEAF_NODE	14:11	14:11	6	tm
LEAF_NODE	14:13	14:13	4	;
SIMPLE_DECL	15:1	15:30	3	gboolean prev_tm_init ; prev_tm_init = FALSE ;
VAR_DECL	15:1	15:10	4	gboolean prev_tm_init ; prev_tm_init = FALSE
TYPE	15:1	15:1	5	gboolean
TYPE_NAME	15:1	15:1	6	gboolean
LEAF_NODE	15:1	15:1	7	gboolean
NAME	15:10	15:10	5	prev_tm_init
LEAF_NODE	15:10	15:10	6	prev_tm_init
LEAF_NODE	0:0	0:0	5	;
INIT	15:10	15:10	5	prev_tm_init = FALSE
ASSIGN	15:10	15:25	6	prev_tm_init = FALSE
LVAL	15:10	15:10	7	prev_tm_init
NAME	15:10	15:10	8	prev_tm_init
LEAF_NODE	15:10	15:10	9	prev_tm_init
ASSIGN_OP	15:23	15:23	7	=
LEAF_NODE	15:23	15:23	8	=
RVAL	15:25	15:25	7	FALSE
FIELD	15:25	15:25	8	FALSE
LEAF_NODE	15:25	15:25	9	FALSE
LEAF_NODE	15:30	15:30	4	;
SIMPLE_DECL	16:1	16:27	3	gboolean main_cycle ; main_cycle = TRUE ;
VAR_DECL	16:1	16:10	4	gboolean main_cycle ; main_cycle = TRUE
TYPE	16:1	16:1	5	gboolean
TYPE_NAME	16:1	16:1	6	gboolean
LEAF_NODE	16:1	16:1	7	gboolean
NAME	16:10	16:10	5	main_cycle
LEAF_NODE	16:10	16:10	6	main_cycle
LEAF_NODE	0:0	0:0	5	;
INIT	16:10	16:10	5	main_cycle = TRUE
ASSIGN	16:10	16:23	6	main_cycle = TRUE
LVAL	16:10	16:10	7	main_cycle
NAME	16:10	16:10	8	main_cycle
LEAF_NODE	16:10	16:10	9	main_cycle
ASSIGN_OP	16:21	16:21	7	=
LEAF_NODE	16:21	16:21	8	=
RVAL	16:23	16:23	7	TRUE
FIELD	16:23	16:23	8	TRUE
LEAF_NODE	16:23	16:23	9	TRUE
LEAF_NODE	16:27	16:27	4	;
SIMPLE_DECL	17:1	17:8	3	char * c ;
VAR_DECL	17:1	17:7	4	char * c
TYPE	17:1	17:6	5	char *
TYPE_NAME	17:1	17:1	6	char
LEAF_NODE	17:1	17:1	7	char
POINTER	17:6	17:6	6	*
LEAF_NODE	17:6	17:6	7	*
NAME	17:7	17:7	5	c
LEAF_NODE	17:7	17:7	6	c
LEAF_NODE	17:8	17:8	4	;
SIMPLE_DECL	18:1	18:16	3	char * start_log ;
VAR_DECL	18:1	18:7	4	char * start_log
TYPE	18:1	18:6	5	char *
TYPE_NAME	18:1	18:1	6	char
LEAF_NODE	18:1	18:1	7	char
POINTER	18:6	18:6	6	*
LEAF_NODE	18:6	18:6	7	*
NAME	18:7	18:7	5	start_log
LEAF_NODE	18:7	18:7	6	start_log
LEAF_NODE	18:16	18:16	4	;
SIMPLE_DECL	19:1	19:22	3	char * new_line ; new_line = NULL ;
VAR_DECL	19:1	19:7	4	char * new_line ; new_line = NULL
TYPE	19:1	19:6	5	char *
TYPE_NAME	19:1	19:1	6	char
LEAF_NODE	19:1	19:1	7	char
POINTER	19:6	19:6	6	*
LEAF_NODE	19:6	19:6	7	*
NAME	19:7	19:7	5	new_line
LEAF_NODE	19:7	19:7	6	new_line
LEAF_NODE	0:0	0:0	5	;
INIT	19:7	19:7	5	new_line = NULL
ASSIGN	19:7	19:18	6	new_line = NULL
LVAL	19:7	19:7	7	new_line
NAME	19:7	19:7	8	new_line
LEAF_NODE	19:7	19:7	9	new_line
ASSIGN_OP	19:16	19:16	7	=
LEAF_NODE	19:16	19:16	8	=
RVAL	19:18	19:18	7	NULL
FIELD	19:18	19:18	8	NULL
LEAF_NODE	19:18	19:18	9	NULL
LEAF_NODE	19:22	19:22	4	;
SIMPLE_DECL	20:1	20:15	3	int offset ; offset = 0 ;
VAR_DECL	20:1	20:5	4	int offset ; offset = 0
TYPE	20:1	20:1	5	int
TYPE_NAME	20:1	20:1	6	int
LEAF_NODE	20:1	20:1	7	int
NAME	20:5	20:5	5	offset
LEAF_NODE	20:5	20:5	6	offset
LEAF_NODE	0:0	0:0	5	;
INIT	20:5	20:5	5	offset = 0
ASSIGN	20:5	20:14	6	offset = 0
LVAL	20:5	20:5	7	offset
NAME	20:5	20:5	8	offset
LEAF_NODE	20:5	20:5	9	offset
ASSIGN_OP	20:12	20:12	7	=
LEAF_NODE	20:12	20:12	8	=
RVAL	20:14	20:14	7	0
FIELD	20:14	20:14	8	0
LEAF_NODE	20:14	20:14	9	0
LEAF_NODE	20:15	20:15	4	;
SIMPLE_DECL	21:1	21:14	3	GError * error ;
VAR_DECL	21:1	21:9	4	GError * error
TYPE	21:1	21:8	5	GError *
TYPE_NAME	21:1	21:1	6	GError
LEAF_NODE	21:1	21:1	7	GError
POINTER	21:8	21:8	6	*
LEAF_NODE	21:8	21:8	7	*
NAME	21:9	21:9	5	error
LEAF_NODE	21:9	21:9	6	error
LEAF_NODE	21:14	21:14	4	;
EXPR_STATEMENT	22:1	22:39	3	g_return_val_if_fail ( sn != NULL , NULL ) ;
EXPR	22:1	22:1	4	g_return_val_if_fail ( sn != NULL , NULL )
FUNCTION_CALL	22:1	22:38	5	g_return_val_if_fail ( sn != NULL , NULL )
CALLEE	22:1	22:1	6	g_return_val_if_fail
LEAF_NODE	22:1	22:1	7	g_return_val_if_fail
LEAF_NODE	22:21	22:21	6	(
ARGUMENT	22:22	22:28	6	sn != NULL
FIELD	22:22	22:22	7	sn
LEAF_NODE	22:22	22:22	8	sn
EQ_OPERATOR	22:25	22:25	7	!=
LEAF_NODE	22:25	22:25	8	!=
FIELD	22:28	22:28	7	NULL
LEAF_NODE	22:28	22:28	8	NULL
LEAF_NODE	22:32	22:32	6	,
ARGUMENT	22:34	22:34	6	NULL
FIELD	22:34	22:34	7	NULL
LEAF_NODE	22:34	22:34	8	NULL
LEAF_NODE	22:38	22:38	6	)
LEAF_NODE	22:39	22:39	4	;
EXPR_STATEMENT	23:1	23:44	3	g_return_val_if_fail ( account != NULL , NULL ) ;
EXPR	23:1	23:1	4	g_return_val_if_fail ( account != NULL , NULL )
FUNCTION_CALL	23:1	23:43	5	g_return_val_if_fail ( account != NULL , NULL )
CALLEE	23:1	23:1	6	g_return_val_if_fail
LEAF_NODE	23:1	23:1	7	g_return_val_if_fail
LEAF_NODE	23:21	23:21	6	(
ARGUMENT	23:22	23:33	6	account != NULL
FIELD	23:22	23:22	7	account
LEAF_NODE	23:22	23:22	8	account
EQ_OPERATOR	23:30	23:30	7	!=
LEAF_NODE	23:30	23:30	8	!=
FIELD	23:33	23:33	7	NULL
LEAF_NODE	23:33	23:33	8	NULL
LEAF_NODE	23:37	23:37	6	,
ARGUMENT	23:39	23:39	6	NULL
FIELD	23:39	23:39	7	NULL
LEAF_NODE	23:39	23:39	8	NULL
LEAF_NODE	23:43	23:43	6	)
LEAF_NODE	23:44	23:44	4	;
EXPR_STATEMENT	24:1	24:27	3	memset ( & tm , 0 , sizeof ( tm ) ) ;
EXPR	24:1	24:1	4	memset ( & tm , 0 , sizeof ( tm ) )
FUNCTION_CALL	24:1	24:26	5	memset ( & tm , 0 , sizeof ( tm ) )
CALLEE	24:1	24:1	6	memset
LEAF_NODE	24:1	24:1	7	memset
LEAF_NODE	24:7	24:7	6	(
ARGUMENT	24:8	24:8	6	& tm
UNARY_EXPR	24:8	24:9	7	& tm
UNARY_OPERATOR	24:8	24:8	8	&
LEAF_NODE	24:8	24:8	9	&
FIELD	24:9	24:9	8	tm
LEAF_NODE	24:9	24:9	9	tm
LEAF_NODE	24:11	24:11	6	,
ARGUMENT	24:13	24:13	6	0
FIELD	24:13	24:13	7	0
LEAF_NODE	24:13	24:13	8	0
LEAF_NODE	24:14	24:14	6	,
ARGUMENT	24:16	24:16	6	sizeof ( tm )
FUNCTION_CALL	24:16	24:25	7	sizeof ( tm )
CALLEE	24:16	24:16	8	sizeof
LEAF_NODE	24:16	24:16	9	sizeof
LEAF_NODE	24:22	24:22	8	(
ARGUMENT	24:23	24:23	8	tm
FIELD	24:23	24:23	9	tm
LEAF_NODE	24:23	24:23	10	tm
LEAF_NODE	24:25	24:25	8	)
LEAF_NODE	24:26	24:26	6	)
LEAF_NODE	24:27	24:27	4	;
SELECTION	26:1	27:2	3	
KEYWORD	26:1	26:1	4	if
LEAF_NODE	26:1	26:1	5	if
LEAF_NODE	26:4	26:4	4	(
CONDITION	26:5	26:5	4	strcmp ( account -> protocol_id , "prpl-icq" )
EXPR	26:5	26:5	5	strcmp ( account -> protocol_id , "prpl-icq" )
FUNCTION_CALL	26:5	26:44	6	strcmp ( account -> protocol_id , "prpl-icq" )
CALLEE	26:5	26:5	7	strcmp
LEAF_NODE	26:5	26:5	8	strcmp
LEAF_NODE	26:11	26:11	7	(
ARGUMENT	26:12	26:12	7	account -> protocol_id
FIELD	26:12	26:21	8	account -> protocol_id
LEAF_NODE	26:12	26:12	9	account
LEAF_NODE	26:19	26:19	9	->
LEAF_NODE	26:21	26:21	9	protocol_id
LEAF_NODE	26:32	26:32	7	,
ARGUMENT	26:34	26:34	7	"prpl-icq"
FIELD	26:34	26:34	8	"prpl-icq"
LEAF_NODE	26:34	26:34	9	"prpl-icq"
LEAF_NODE	26:44	26:44	7	)
LEAF_NODE	26:45	26:45	4	)
STATEMENTS	27:2	27:2	4	
JUMP_STATEMENT	27:2	27:13	5	return NULL ;
KEYWORD	27:2	27:2	6	return
LEAF_NODE	27:2	27:2	7	return
DESTINATION	27:9	27:9	6	NULL
EXPR	27:9	27:9	7	NULL
FIELD	27:9	27:9	8	NULL
LEAF_NODE	27:9	27:9	9	NULL
LEAF_NODE	27:13	27:13	6	;
EXPR_STATEMENT	28:1	28:79	3	logdir = purple_prefs_get_string ( "/plugins/core/log_reader/qip/log_directory" ) ;
EXPR	28:1	28:1	4	logdir = purple_prefs_get_string ( "/plugins/core/log_reader/qip/log_directory" )
ASSIGN	28:1	28:10	5	logdir = purple_prefs_get_string ( "/plugins/core/log_reader/qip/log_directory" )
LVAL	28:1	28:1	6	logdir
FIELD	28:1	28:1	7	logdir
LEAF_NODE	28:1	28:1	8	logdir
ASSIGN_OP	28:8	28:8	6	=
LEAF_NODE	28:8	28:8	7	=
RVAL	28:10	28:10	6	purple_prefs_get_string ( "/plugins/core/log_reader/qip/log_directory" )
FUNCTION_CALL	28:10	28:78	7	purple_prefs_get_string ( "/plugins/core/log_reader/qip/log_directory" )
CALLEE	28:10	28:10	8	purple_prefs_get_string
LEAF_NODE	28:10	28:10	9	purple_prefs_get_string
LEAF_NODE	28:33	28:33	8	(
ARGUMENT	28:34	28:34	8	"/plugins/core/log_reader/qip/log_directory"
FIELD	28:34	28:34	9	"/plugins/core/log_reader/qip/log_directory"
LEAF_NODE	28:34	28:34	10	"/plugins/core/log_reader/qip/log_directory"
LEAF_NODE	28:78	28:78	8	)
LEAF_NODE	28:79	28:79	4	;
SELECTION	30:1	31:2	3	
KEYWORD	30:1	30:1	4	if
LEAF_NODE	30:1	30:1	5	if
LEAF_NODE	30:4	30:4	4	(
CONDITION	30:5	30:5	4	! logdir || ! * logdir
EXPR	30:5	30:5	5	! logdir || ! * logdir
OR	30:5	30:16	6	! logdir || ! * logdir
EXPR	30:5	30:5	7	! logdir
UNARY_EXPR	30:5	30:6	8	! logdir
UNARY_OPERATOR	30:5	30:5	9	!
LEAF_NODE	30:5	30:5	10	!
FIELD	30:6	30:6	9	logdir
LEAF_NODE	30:6	30:6	10	logdir
LEAF_NODE	30:13	30:13	7	||
EXPR	30:16	30:16	7	! * logdir
UNARY_EXPR	30:16	30:18	8	! * logdir
UNARY_OPERATOR	30:16	30:16	9	!
LEAF_NODE	30:16	30:16	10	!
UNARY_OPERATOR	30:17	30:17	9	*
LEAF_NODE	30:17	30:17	10	*
FIELD	30:18	30:18	9	logdir
LEAF_NODE	30:18	30:18	10	logdir
LEAF_NODE	30:24	30:24	4	)
STATEMENTS	31:2	31:2	4	
JUMP_STATEMENT	31:2	31:13	5	return NULL ;
KEYWORD	31:2	31:2	6	return
LEAF_NODE	31:2	31:2	7	return
DESTINATION	31:9	31:9	6	NULL
EXPR	31:9	31:9	7	NULL
FIELD	31:9	31:9	8	NULL
LEAF_NODE	31:9	31:9	9	NULL
LEAF_NODE	31:13	31:13	6	;
EXPR_STATEMENT	32:1	32:67	3	plugin = purple_find_prpl ( purple_account_get_protocol_id ( account ) ) ;
EXPR	32:1	32:1	4	plugin = purple_find_prpl ( purple_account_get_protocol_id ( account ) )
ASSIGN	32:1	32:10	5	plugin = purple_find_prpl ( purple_account_get_protocol_id ( account ) )
LVAL	32:1	32:1	6	plugin
FIELD	32:1	32:1	7	plugin
LEAF_NODE	32:1	32:1	8	plugin
ASSIGN_OP	32:8	32:8	6	=
LEAF_NODE	32:8	32:8	7	=
RVAL	32:10	32:10	6	purple_find_prpl ( purple_account_get_protocol_id ( account ) )
FUNCTION_CALL	32:10	32:66	7	purple_find_prpl ( purple_account_get_protocol_id ( account ) )
CALLEE	32:10	32:10	8	purple_find_prpl
LEAF_NODE	32:10	32:10	9	purple_find_prpl
LEAF_NODE	32:26	32:26	8	(
ARGUMENT	32:27	32:27	8	purple_account_get_protocol_id ( account )
FUNCTION_CALL	32:27	32:65	9	purple_account_get_protocol_id ( account )
CALLEE	32:27	32:27	10	purple_account_get_protocol_id
LEAF_NODE	32:27	32:27	11	purple_account_get_protocol_id
LEAF_NODE	32:57	32:57	10	(
ARGUMENT	32:58	32:58	10	account
FIELD	32:58	32:58	11	account
LEAF_NODE	32:58	32:58	12	account
LEAF_NODE	32:65	32:65	10	)
LEAF_NODE	32:66	32:66	8	)
LEAF_NODE	32:67	32:67	4	;
SELECTION	33:1	34:2	3	
KEYWORD	33:1	33:1	4	if
LEAF_NODE	33:1	33:1	5	if
LEAF_NODE	33:4	33:4	4	(
CONDITION	33:5	33:5	4	! plugin
EXPR	33:5	33:5	5	! plugin
UNARY_EXPR	33:5	33:6	6	! plugin
UNARY_OPERATOR	33:5	33:5	7	!
LEAF_NODE	33:5	33:5	8	!
FIELD	33:6	33:6	7	plugin
LEAF_NODE	33:6	33:6	8	plugin
LEAF_NODE	33:12	33:12	4	)
STATEMENTS	34:2	34:2	4	
JUMP_STATEMENT	34:2	34:13	5	return NULL ;
KEYWORD	34:2	34:2	6	return
LEAF_NODE	34:2	34:2	7	return
DESTINATION	34:9	34:9	6	NULL
EXPR	34:9	34:9	7	NULL
FIELD	34:9	34:9	8	NULL
LEAF_NODE	34:9	34:9	9	NULL
LEAF_NODE	34:13	34:13	6	;
EXPR_STATEMENT	35:1	35:48	3	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( plugin ) ;
EXPR	35:1	35:1	4	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( plugin )
ASSIGN	35:1	35:13	5	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( plugin )
LVAL	35:1	35:1	6	prpl_info
FIELD	35:1	35:1	7	prpl_info
LEAF_NODE	35:1	35:1	8	prpl_info
ASSIGN_OP	35:11	35:11	6	=
LEAF_NODE	35:11	35:11	7	=
RVAL	35:13	35:13	6	PURPLE_PLUGIN_PROTOCOL_INFO ( plugin )
FUNCTION_CALL	35:13	35:47	7	PURPLE_PLUGIN_PROTOCOL_INFO ( plugin )
CALLEE	35:13	35:13	8	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	35:13	35:13	9	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	35:40	35:40	8	(
ARGUMENT	35:41	35:41	8	plugin
FIELD	35:41	35:41	9	plugin
LEAF_NODE	35:41	35:41	10	plugin
LEAF_NODE	35:47	35:47	8	)
LEAF_NODE	35:48	35:48	4	;
SELECTION	36:1	37:2	3	
KEYWORD	36:1	36:1	4	if
LEAF_NODE	36:1	36:1	5	if
LEAF_NODE	36:4	36:4	4	(
CONDITION	36:5	36:5	4	! prpl_info -> list_icon
EXPR	36:5	36:5	5	! prpl_info -> list_icon
UNARY_EXPR	36:5	36:6	6	! prpl_info -> list_icon
UNARY_OPERATOR	36:5	36:5	7	!
LEAF_NODE	36:5	36:5	8	!
FIELD	36:6	36:17	7	prpl_info -> list_icon
LEAF_NODE	36:6	36:6	8	prpl_info
LEAF_NODE	36:15	36:15	8	->
LEAF_NODE	36:17	36:17	8	list_icon
LEAF_NODE	36:26	36:26	4	)
STATEMENTS	37:2	37:2	4	
JUMP_STATEMENT	37:2	37:13	5	return NULL ;
KEYWORD	37:2	37:2	6	return
LEAF_NODE	37:2	37:2	7	return
DESTINATION	37:9	37:9	6	NULL
EXPR	37:9	37:9	7	NULL
FIELD	37:9	37:9	8	NULL
LEAF_NODE	37:9	37:9	9	NULL
LEAF_NODE	37:13	37:13	6	;
EXPR_STATEMENT	38:1	38:66	3	username = g_strdup ( purple_normalize ( account , account -> username ) ) ;
EXPR	38:1	38:1	4	username = g_strdup ( purple_normalize ( account , account -> username ) )
ASSIGN	38:1	38:12	5	username = g_strdup ( purple_normalize ( account , account -> username ) )
LVAL	38:1	38:1	6	username
FIELD	38:1	38:1	7	username
LEAF_NODE	38:1	38:1	8	username
ASSIGN_OP	38:10	38:10	6	=
LEAF_NODE	38:10	38:10	7	=
RVAL	38:12	38:12	6	g_strdup ( purple_normalize ( account , account -> username ) )
FUNCTION_CALL	38:12	38:65	7	g_strdup ( purple_normalize ( account , account -> username ) )
CALLEE	38:12	38:12	8	g_strdup
LEAF_NODE	38:12	38:12	9	g_strdup
LEAF_NODE	38:20	38:20	8	(
ARGUMENT	38:21	38:21	8	purple_normalize ( account , account -> username )
FUNCTION_CALL	38:21	38:64	9	purple_normalize ( account , account -> username )
CALLEE	38:21	38:21	10	purple_normalize
LEAF_NODE	38:21	38:21	11	purple_normalize
LEAF_NODE	38:37	38:37	10	(
ARGUMENT	38:38	38:38	10	account
FIELD	38:38	38:38	11	account
LEAF_NODE	38:38	38:38	12	account
LEAF_NODE	38:45	38:45	10	,
ARGUMENT	38:47	38:47	10	account -> username
FIELD	38:47	38:56	11	account -> username
LEAF_NODE	38:47	38:47	12	account
LEAF_NODE	38:54	38:54	12	->
LEAF_NODE	38:56	38:56	12	username
LEAF_NODE	38:64	38:64	10	)
LEAF_NODE	38:65	38:65	8	)
LEAF_NODE	38:66	38:66	4	;
EXPR_STATEMENT	39:1	39:68	3	filename = g_strdup_printf ( "%s.txt" , purple_normalize ( account , sn ) ) ;
EXPR	39:1	39:1	4	filename = g_strdup_printf ( "%s.txt" , purple_normalize ( account , sn ) )
ASSIGN	39:1	39:12	5	filename = g_strdup_printf ( "%s.txt" , purple_normalize ( account , sn ) )
LVAL	39:1	39:1	6	filename
FIELD	39:1	39:1	7	filename
LEAF_NODE	39:1	39:1	8	filename
ASSIGN_OP	39:10	39:10	6	=
LEAF_NODE	39:10	39:10	7	=
RVAL	39:12	39:12	6	g_strdup_printf ( "%s.txt" , purple_normalize ( account , sn ) )
FUNCTION_CALL	39:12	39:67	7	g_strdup_printf ( "%s.txt" , purple_normalize ( account , sn ) )
CALLEE	39:12	39:12	8	g_strdup_printf
LEAF_NODE	39:12	39:12	9	g_strdup_printf
LEAF_NODE	39:27	39:27	8	(
ARGUMENT	39:28	39:28	8	"%s.txt"
FIELD	39:28	39:28	9	"%s.txt"
LEAF_NODE	39:28	39:28	10	"%s.txt"
LEAF_NODE	39:36	39:36	8	,
ARGUMENT	39:38	39:38	8	purple_normalize ( account , sn )
FUNCTION_CALL	39:38	39:66	9	purple_normalize ( account , sn )
CALLEE	39:38	39:38	10	purple_normalize
LEAF_NODE	39:38	39:38	11	purple_normalize
LEAF_NODE	39:54	39:54	10	(
ARGUMENT	39:55	39:55	10	account
FIELD	39:55	39:55	11	account
LEAF_NODE	39:55	39:55	12	account
LEAF_NODE	39:62	39:62	10	,
ARGUMENT	39:64	39:64	10	sn
FIELD	39:64	39:64	11	sn
LEAF_NODE	39:64	39:64	12	sn
LEAF_NODE	39:66	39:66	10	)
LEAF_NODE	39:67	39:67	8	)
LEAF_NODE	39:68	39:68	4	;
EXPR_STATEMENT	40:1	40:69	3	path = g_build_filename ( logdir , username , "History" , filename , NULL ) ;
EXPR	40:1	40:1	4	path = g_build_filename ( logdir , username , "History" , filename , NULL )
ASSIGN	40:1	40:8	5	path = g_build_filename ( logdir , username , "History" , filename , NULL )
LVAL	40:1	40:1	6	path
FIELD	40:1	40:1	7	path
LEAF_NODE	40:1	40:1	8	path
ASSIGN_OP	40:6	40:6	6	=
LEAF_NODE	40:6	40:6	7	=
RVAL	40:8	40:8	6	g_build_filename ( logdir , username , "History" , filename , NULL )
FUNCTION_CALL	40:8	40:68	7	g_build_filename ( logdir , username , "History" , filename , NULL )
CALLEE	40:8	40:8	8	g_build_filename
LEAF_NODE	40:8	40:8	9	g_build_filename
LEAF_NODE	40:24	40:24	8	(
ARGUMENT	40:25	40:25	8	logdir
FIELD	40:25	40:25	9	logdir
LEAF_NODE	40:25	40:25	10	logdir
LEAF_NODE	40:31	40:31	8	,
ARGUMENT	40:33	40:33	8	username
FIELD	40:33	40:33	9	username
LEAF_NODE	40:33	40:33	10	username
LEAF_NODE	40:41	40:41	8	,
ARGUMENT	40:43	40:43	8	"History"
FIELD	40:43	40:43	9	"History"
LEAF_NODE	40:43	40:43	10	"History"
LEAF_NODE	40:52	40:52	8	,
ARGUMENT	40:54	40:54	8	filename
FIELD	40:54	40:54	9	filename
LEAF_NODE	40:54	40:54	10	filename
LEAF_NODE	40:62	40:62	8	,
ARGUMENT	40:64	40:64	8	NULL
FIELD	40:64	40:64	9	NULL
LEAF_NODE	40:64	40:64	10	NULL
LEAF_NODE	40:68	40:68	8	)
LEAF_NODE	40:69	40:69	4	;
EXPR_STATEMENT	41:1	41:17	3	g_free ( username ) ;
EXPR	41:1	41:1	4	g_free ( username )
FUNCTION_CALL	41:1	41:16	5	g_free ( username )
CALLEE	41:1	41:1	6	g_free
LEAF_NODE	41:1	41:1	7	g_free
LEAF_NODE	41:7	41:7	6	(
ARGUMENT	41:8	41:8	6	username
FIELD	41:8	41:8	7	username
LEAF_NODE	41:8	41:8	8	username
LEAF_NODE	41:16	41:16	6	)
LEAF_NODE	41:17	41:17	4	;
EXPR_STATEMENT	42:1	42:17	3	g_free ( filename ) ;
EXPR	42:1	42:1	4	g_free ( filename )
FUNCTION_CALL	42:1	42:16	5	g_free ( filename )
CALLEE	42:1	42:1	6	g_free
LEAF_NODE	42:1	42:1	7	g_free
LEAF_NODE	42:7	42:7	6	(
ARGUMENT	42:8	42:8	6	filename
FIELD	42:8	42:8	7	filename
LEAF_NODE	42:8	42:8	8	filename
LEAF_NODE	42:16	42:16	6	)
LEAF_NODE	42:17	42:17	4	;
EXPR_STATEMENT	43:1	43:54	3	purple_debug_info ( "QIP logger" , "Reading %s\n" , path ) ;
EXPR	43:1	43:1	4	purple_debug_info ( "QIP logger" , "Reading %s\n" , path )
FUNCTION_CALL	43:1	43:53	5	purple_debug_info ( "QIP logger" , "Reading %s\n" , path )
CALLEE	43:1	43:1	6	purple_debug_info
LEAF_NODE	43:1	43:1	7	purple_debug_info
LEAF_NODE	43:18	43:18	6	(
ARGUMENT	43:19	43:19	6	"QIP logger"
FIELD	43:19	43:19	7	"QIP logger"
LEAF_NODE	43:19	43:19	8	"QIP logger"
LEAF_NODE	43:31	43:31	6	,
ARGUMENT	43:33	43:33	6	"Reading %s\n"
FIELD	43:33	43:33	7	"Reading %s\n"
LEAF_NODE	43:33	43:33	8	"Reading %s\n"
LEAF_NODE	43:47	43:47	6	,
ARGUMENT	43:49	43:49	6	path
FIELD	43:49	43:49	7	path
LEAF_NODE	43:49	43:49	8	path
LEAF_NODE	43:53	43:53	6	)
LEAF_NODE	43:54	43:54	4	;
EXPR_STATEMENT	44:1	44:13	3	error = NULL ;
EXPR	44:1	44:1	4	error = NULL
ASSIGN	44:1	44:9	5	error = NULL
LVAL	44:1	44:1	6	error
FIELD	44:1	44:1	7	error
LEAF_NODE	44:1	44:1	8	error
ASSIGN_OP	44:7	44:7	6	=
LEAF_NODE	44:7	44:7	7	=
RVAL	44:9	44:9	6	NULL
FIELD	44:9	44:9	7	NULL
LEAF_NODE	44:9	44:9	8	NULL
LEAF_NODE	44:13	44:13	4	;
SELECTION	45:1	45:58	3	
KEYWORD	45:1	45:1	4	if
LEAF_NODE	45:1	45:1	5	if
LEAF_NODE	45:4	45:4	4	(
CONDITION	45:5	45:5	4	! g_file_get_contents ( path , & contents , NULL , & error )
EXPR	45:5	45:5	5	! g_file_get_contents ( path , & contents , NULL , & error )
UNARY_EXPR	45:5	45:6	6	! g_file_get_contents ( path , & contents , NULL , & error )
UNARY_OPERATOR	45:5	45:5	7	!
LEAF_NODE	45:5	45:5	8	!
FUNCTION_CALL	45:6	45:55	7	g_file_get_contents ( path , & contents , NULL , & error )
CALLEE	45:6	45:6	8	g_file_get_contents
LEAF_NODE	45:6	45:6	9	g_file_get_contents
LEAF_NODE	45:25	45:25	8	(
ARGUMENT	45:26	45:26	8	path
FIELD	45:26	45:26	9	path
LEAF_NODE	45:26	45:26	10	path
LEAF_NODE	45:30	45:30	8	,
ARGUMENT	45:32	45:32	8	& contents
UNARY_EXPR	45:32	45:33	9	& contents
UNARY_OPERATOR	45:32	45:32	10	&
LEAF_NODE	45:32	45:32	11	&
FIELD	45:33	45:33	10	contents
LEAF_NODE	45:33	45:33	11	contents
LEAF_NODE	45:41	45:41	8	,
ARGUMENT	45:43	45:43	8	NULL
FIELD	45:43	45:43	9	NULL
LEAF_NODE	45:43	45:43	10	NULL
LEAF_NODE	45:47	45:47	8	,
ARGUMENT	45:49	45:49	8	& error
UNARY_EXPR	45:49	45:50	9	& error
UNARY_OPERATOR	45:49	45:49	10	&
LEAF_NODE	45:49	45:49	11	&
FIELD	45:50	45:50	10	error
LEAF_NODE	45:50	45:50	11	error
LEAF_NODE	45:55	45:55	8	)
LEAF_NODE	45:56	45:56	4	)
STATEMENTS	45:58	53:1	4	
LEAF_NODE	45:58	45:58	5	{
STATEMENTS	46:2	52:2	5	
EXPR_STATEMENT	46:2	48:68	6	purple_debug_error ( "QIP logger" , "Couldn't read file %s: %s \n" , path , ( error && error -> message ) ? error -> message : "Unknown error" ) ;
EXPR	46:2	46:2	7	purple_debug_error ( "QIP logger" , "Couldn't read file %s: %s \n" , path , ( error && error -> message ) ? error -> message : "Unknown error" )
FUNCTION_CALL	46:2	48:67	8	purple_debug_error ( "QIP logger" , "Couldn't read file %s: %s \n" , path , ( error && error -> message ) ? error -> message : "Unknown error" )
CALLEE	46:2	46:2	9	purple_debug_error
LEAF_NODE	46:2	46:2	10	purple_debug_error
LEAF_NODE	46:20	46:20	9	(
ARGUMENT	46:21	46:21	9	"QIP logger"
FIELD	46:21	46:21	10	"QIP logger"
LEAF_NODE	46:21	46:21	11	"QIP logger"
LEAF_NODE	46:33	46:33	9	,
ARGUMENT	47:7	47:7	9	"Couldn't read file %s: %s \n"
FIELD	47:7	47:7	10	"Couldn't read file %s: %s \n"
LEAF_NODE	47:7	47:7	11	"Couldn't read file %s: %s \n"
LEAF_NODE	47:37	47:37	9	,
ARGUMENT	47:39	47:39	9	path
FIELD	47:39	47:39	10	path
LEAF_NODE	47:39	47:39	11	path
LEAF_NODE	47:43	47:43	9	,
ARGUMENT	48:7	48:7	9	( error && error -> message ) ? error -> message : "Unknown error"
COND_EXPR	48:7	48:52	10	( error && error -> message ) ? error -> message : "Unknown error"
CONDITION	48:7	48:31	11	( error && error -> message )
LEAF_NODE	48:7	48:7	12	(
AND	48:8	48:17	12	error && error -> message
EXPR	48:8	48:8	13	error
FIELD	48:8	48:8	14	error
LEAF_NODE	48:8	48:8	15	error
LEAF_NODE	48:14	48:14	13	&&
EXPR	48:17	48:17	13	error -> message
FIELD	48:17	48:24	14	error -> message
LEAF_NODE	48:17	48:17	15	error
LEAF_NODE	48:22	48:22	15	->
LEAF_NODE	48:24	48:24	15	message
LEAF_NODE	48:31	48:31	12	)
LEAF_NODE	48:33	48:33	11	?
EXPR	48:35	48:35	11	error -> message
FIELD	48:35	48:42	12	error -> message
LEAF_NODE	48:35	48:35	13	error
LEAF_NODE	48:40	48:40	13	->
LEAF_NODE	48:42	48:42	13	message
LEAF_NODE	48:50	48:50	11	:
FIELD	48:52	48:52	11	"Unknown error"
LEAF_NODE	48:52	48:52	12	"Unknown error"
LEAF_NODE	48:67	48:67	9	)
LEAF_NODE	48:68	48:68	7	;
SELECTION	49:2	50:3	6	
KEYWORD	49:2	49:2	7	if
LEAF_NODE	49:2	49:2	8	if
LEAF_NODE	49:5	49:5	7	(
CONDITION	49:6	49:6	7	error
EXPR	49:6	49:6	8	error
FIELD	49:6	49:6	9	error
LEAF_NODE	49:6	49:6	10	error
LEAF_NODE	49:11	49:11	7	)
STATEMENTS	50:3	50:3	7	
EXPR_STATEMENT	50:3	50:22	8	g_error_free ( error ) ;
EXPR	50:3	50:3	9	g_error_free ( error )
FUNCTION_CALL	50:3	50:21	10	g_error_free ( error )
CALLEE	50:3	50:3	11	g_error_free
LEAF_NODE	50:3	50:3	12	g_error_free
LEAF_NODE	50:15	50:15	11	(
ARGUMENT	50:16	50:16	11	error
FIELD	50:16	50:16	12	error
LEAF_NODE	50:16	50:16	13	error
LEAF_NODE	50:21	50:21	11	)
LEAF_NODE	50:22	50:22	9	;
EXPR_STATEMENT	51:2	51:14	6	g_free ( path ) ;
EXPR	51:2	51:2	7	g_free ( path )
FUNCTION_CALL	51:2	51:13	8	g_free ( path )
CALLEE	51:2	51:2	9	g_free
LEAF_NODE	51:2	51:2	10	g_free
LEAF_NODE	51:8	51:8	9	(
ARGUMENT	51:9	51:9	9	path
FIELD	51:9	51:9	10	path
LEAF_NODE	51:9	51:9	11	path
LEAF_NODE	51:13	51:13	9	)
LEAF_NODE	51:14	51:14	7	;
JUMP_STATEMENT	52:2	52:13	6	return list ;
KEYWORD	52:2	52:2	7	return
LEAF_NODE	52:2	52:2	8	return
DESTINATION	52:9	52:9	7	list
EXPR	52:9	52:9	8	list
FIELD	52:9	52:9	9	list
LEAF_NODE	52:9	52:9	10	list
LEAF_NODE	52:13	52:13	7	;
LEAF_NODE	53:1	53:1	5	}
EXPR_STATEMENT	54:1	54:13	3	c = contents ;
EXPR	54:1	54:1	4	c = contents
ASSIGN	54:1	54:5	5	c = contents
LVAL	54:1	54:1	6	c
FIELD	54:1	54:1	7	c
LEAF_NODE	54:1	54:1	8	c
ASSIGN_OP	54:3	54:3	6	=
LEAF_NODE	54:3	54:3	7	=
RVAL	54:5	54:5	6	contents
FIELD	54:5	54:5	7	contents
LEAF_NODE	54:5	54:5	8	contents
LEAF_NODE	54:13	54:13	4	;
EXPR_STATEMENT	55:1	55:21	3	start_log = contents ;
EXPR	55:1	55:1	4	start_log = contents
ASSIGN	55:1	55:13	5	start_log = contents
LVAL	55:1	55:1	6	start_log
FIELD	55:1	55:1	7	start_log
LEAF_NODE	55:1	55:1	8	start_log
ASSIGN_OP	55:11	55:11	6	=
LEAF_NODE	55:11	55:11	7	=
RVAL	55:13	55:13	6	contents
FIELD	55:13	55:13	7	contents
LEAF_NODE	55:13	55:13	8	contents
LEAF_NODE	55:21	55:21	4	;
ITERATION	56:1	56:20	3	
KEYWORD	56:1	56:1	4	while
LEAF_NODE	56:1	56:1	5	while
LEAF_NODE	56:7	56:7	4	(
CONDITION	56:8	56:8	4	main_cycle
EXPR	56:8	56:8	5	main_cycle
FIELD	56:8	56:8	6	main_cycle
LEAF_NODE	56:8	56:8	7	main_cycle
LEAF_NODE	56:18	56:18	4	)
STATEMENTS	56:20	133:1	4	
LEAF_NODE	56:20	56:20	5	{
STATEMENTS	57:2	128:2	5	
SIMPLE_DECL	57:2	57:30	6	gboolean add_new_log ; add_new_log = FALSE ;
VAR_DECL	57:2	57:11	7	gboolean add_new_log ; add_new_log = FALSE
TYPE	57:2	57:2	8	gboolean
TYPE_NAME	57:2	57:2	9	gboolean
LEAF_NODE	57:2	57:2	10	gboolean
NAME	57:11	57:11	8	add_new_log
LEAF_NODE	57:11	57:11	9	add_new_log
LEAF_NODE	0:0	0:0	8	;
INIT	57:11	57:11	8	add_new_log = FALSE
ASSIGN	57:11	57:25	9	add_new_log = FALSE
LVAL	57:11	57:11	10	add_new_log
NAME	57:11	57:11	11	add_new_log
LEAF_NODE	57:11	57:11	12	add_new_log
ASSIGN_OP	57:23	57:23	10	=
LEAF_NODE	57:23	57:23	11	=
RVAL	57:25	57:25	10	FALSE
FIELD	57:25	57:25	11	FALSE
LEAF_NODE	57:25	57:25	12	FALSE
LEAF_NODE	57:30	57:30	7	;
SELECTION	58:2	58:15	6	
KEYWORD	58:2	58:2	7	if
LEAF_NODE	58:2	58:2	8	if
LEAF_NODE	58:5	58:5	7	(
CONDITION	58:6	58:6	7	c && * c
EXPR	58:6	58:6	8	c && * c
AND	58:6	58:11	9	c && * c
EXPR	58:6	58:6	10	c
FIELD	58:6	58:6	11	c
LEAF_NODE	58:6	58:6	12	c
LEAF_NODE	58:8	58:8	10	&&
EXPR	58:11	58:11	10	* c
UNARY_EXPR	58:11	58:12	11	* c
UNARY_OPERATOR	58:11	58:11	12	*
LEAF_NODE	58:11	58:11	13	*
FIELD	58:12	58:12	12	c
LEAF_NODE	58:12	58:12	13	c
LEAF_NODE	58:13	58:13	7	)
STATEMENTS	58:15	102:2	7	
LEAF_NODE	58:15	58:15	8	{
STATEMENTS	59:3	59:3	8	
SELECTION	59:3	60:51	9	
KEYWORD	59:3	59:3	10	if
LEAF_NODE	59:3	59:3	11	if
LEAF_NODE	59:6	59:6	10	(
CONDITION	59:7	59:7	10	purple_str_has_prefix ( c , QIP_LOG_IN_MESSAGE ) || purple_str_has_prefix ( c , QIP_LOG_OUT_MESSAGE )
EXPR	59:7	59:7	11	purple_str_has_prefix ( c , QIP_LOG_IN_MESSAGE ) || purple_str_has_prefix ( c , QIP_LOG_OUT_MESSAGE )
OR	59:7	60:4	12	purple_str_has_prefix ( c , QIP_LOG_IN_MESSAGE ) || purple_str_has_prefix ( c , QIP_LOG_OUT_MESSAGE )
EXPR	59:7	59:7	13	purple_str_has_prefix ( c , QIP_LOG_IN_MESSAGE )
FUNCTION_CALL	59:7	59:50	14	purple_str_has_prefix ( c , QIP_LOG_IN_MESSAGE )
CALLEE	59:7	59:7	15	purple_str_has_prefix
LEAF_NODE	59:7	59:7	16	purple_str_has_prefix
LEAF_NODE	59:28	59:28	15	(
ARGUMENT	59:29	59:29	15	c
FIELD	59:29	59:29	16	c
LEAF_NODE	59:29	59:29	17	c
LEAF_NODE	59:30	59:30	15	,
ARGUMENT	59:32	59:32	15	QIP_LOG_IN_MESSAGE
FIELD	59:32	59:32	16	QIP_LOG_IN_MESSAGE
LEAF_NODE	59:32	59:32	17	QIP_LOG_IN_MESSAGE
LEAF_NODE	59:50	59:50	15	)
LEAF_NODE	59:52	59:52	13	||
EXPR	60:4	60:4	13	purple_str_has_prefix ( c , QIP_LOG_OUT_MESSAGE )
FUNCTION_CALL	60:4	60:48	14	purple_str_has_prefix ( c , QIP_LOG_OUT_MESSAGE )
CALLEE	60:4	60:4	15	purple_str_has_prefix
LEAF_NODE	60:4	60:4	16	purple_str_has_prefix
LEAF_NODE	60:25	60:25	15	(
ARGUMENT	60:26	60:26	15	c
FIELD	60:26	60:26	16	c
LEAF_NODE	60:26	60:26	17	c
LEAF_NODE	60:27	60:27	15	,
ARGUMENT	60:29	60:29	15	QIP_LOG_OUT_MESSAGE
FIELD	60:29	60:29	16	QIP_LOG_OUT_MESSAGE
LEAF_NODE	60:29	60:29	17	QIP_LOG_OUT_MESSAGE
LEAF_NODE	60:48	60:48	15	)
LEAF_NODE	60:49	60:49	10	)
STATEMENTS	60:51	101:3	10	
LEAF_NODE	60:51	60:51	11	{
STATEMENTS	61:4	79:4	11	
SIMPLE_DECL	61:4	61:13	12	char * tmp ;
VAR_DECL	61:4	61:10	13	char * tmp
TYPE	61:4	61:9	14	char *
TYPE_NAME	61:4	61:4	15	char
LEAF_NODE	61:4	61:4	16	char
POINTER	61:9	61:9	15	*
LEAF_NODE	61:9	61:9	16	*
NAME	61:10	61:10	14	tmp
LEAF_NODE	61:10	61:10	15	tmp
LEAF_NODE	61:13	61:13	13	;
EXPR_STATEMENT	62:4	62:16	12	new_line = c ;
EXPR	62:4	62:4	13	new_line = c
ASSIGN	62:4	62:15	14	new_line = c
LVAL	62:4	62:4	15	new_line
FIELD	62:4	62:4	16	new_line
LEAF_NODE	62:4	62:4	17	new_line
ASSIGN_OP	62:13	62:13	15	=
LEAF_NODE	62:13	62:13	16	=
RVAL	62:15	62:15	15	c
FIELD	62:15	62:15	16	c
LEAF_NODE	62:15	62:15	17	c
LEAF_NODE	62:16	62:16	13	;
EXPR_STATEMENT	64:4	64:23	12	c = strchr ( c , '\n' ) ;
EXPR	64:4	64:4	13	c = strchr ( c , '\n' )
ASSIGN	64:4	64:8	14	c = strchr ( c , '\n' )
LVAL	64:4	64:4	15	c
FIELD	64:4	64:4	16	c
LEAF_NODE	64:4	64:4	17	c
ASSIGN_OP	64:6	64:6	15	=
LEAF_NODE	64:6	64:6	16	=
RVAL	64:8	64:8	15	strchr ( c , '\n' )
FUNCTION_CALL	64:8	64:22	16	strchr ( c , '\n' )
CALLEE	64:8	64:8	17	strchr
LEAF_NODE	64:8	64:8	18	strchr
LEAF_NODE	64:14	64:14	17	(
ARGUMENT	64:15	64:15	17	c
FIELD	64:15	64:15	18	c
LEAF_NODE	64:15	64:15	19	c
LEAF_NODE	64:16	64:16	17	,
ARGUMENT	64:18	64:18	17	'\n'
FIELD	64:18	64:18	18	'\n'
LEAF_NODE	64:18	64:18	19	'\n'
LEAF_NODE	64:22	64:22	17	)
LEAF_NODE	64:23	64:23	13	;
SELECTION	65:4	66:5	12	
KEYWORD	65:4	65:4	13	if
LEAF_NODE	65:4	65:4	14	if
LEAF_NODE	65:7	65:7	13	(
CONDITION	65:8	65:8	13	c
EXPR	65:8	65:8	14	c
FIELD	65:8	65:8	15	c
LEAF_NODE	65:8	65:8	16	c
LEAF_NODE	65:9	65:9	13	)
STATEMENTS	66:5	66:5	13	
EXPR_STATEMENT	66:5	66:8	14	c ++ ;
EXPR	66:5	66:5	15	c ++
FIELD	66:5	66:6	16	c ++
LEAF_NODE	66:5	66:5	17	c
LEAF_NODE	66:6	66:6	17	++
LEAF_NODE	66:8	66:8	15	;
SELECTION	68:4	68:12	12	
KEYWORD	68:4	68:4	13	if
LEAF_NODE	68:4	68:4	14	if
LEAF_NODE	68:7	68:7	13	(
CONDITION	68:8	68:8	13	! c
EXPR	68:8	68:8	14	! c
UNARY_EXPR	68:8	68:9	15	! c
UNARY_OPERATOR	68:8	68:8	16	!
LEAF_NODE	68:8	68:8	17	!
FIELD	68:9	68:9	16	c
LEAF_NODE	68:9	68:9	17	c
LEAF_NODE	68:10	68:10	13	)
STATEMENTS	68:12	70:4	13	
LEAF_NODE	68:12	68:12	14	{
LEAF_NODE	0:0	0:0	14	STATEMENTS
LEAF_NODE	70:4	70:4	14	}
SELECTION	70:6	70:11	12	
KEYWORD	70:6	70:6	13	else
LEAF_NODE	70:6	70:6	14	else
STATEMENTS	70:11	70:11	13	
SELECTION	70:11	70:48	14	
KEYWORD	70:11	70:11	15	if
LEAF_NODE	70:11	70:11	16	if
LEAF_NODE	70:14	70:14	15	(
CONDITION	70:15	70:15	15	( tmp = strchr ( c , '\n' ) ) != NULL
EXPR	70:15	70:42	16	( tmp = strchr ( c , '\n' ) ) != NULL
LEAF_NODE	70:15	70:15	17	(
ASSIGN	70:16	70:22	17	tmp = strchr ( c , '\n' )
LVAL	70:16	70:16	18	tmp
FIELD	70:16	70:16	19	tmp
LEAF_NODE	70:16	70:16	20	tmp
ASSIGN_OP	70:20	70:20	18	=
LEAF_NODE	70:20	70:20	19	=
RVAL	70:22	70:22	18	strchr ( c , '\n' )
FUNCTION_CALL	70:22	70:36	19	strchr ( c , '\n' )
CALLEE	70:22	70:22	20	strchr
LEAF_NODE	70:22	70:22	21	strchr
LEAF_NODE	70:28	70:28	20	(
ARGUMENT	70:29	70:29	20	c
FIELD	70:29	70:29	21	c
LEAF_NODE	70:29	70:29	22	c
LEAF_NODE	70:30	70:30	20	,
ARGUMENT	70:32	70:32	20	'\n'
FIELD	70:32	70:32	21	'\n'
LEAF_NODE	70:32	70:32	22	'\n'
LEAF_NODE	70:36	70:36	20	)
LEAF_NODE	70:37	70:37	17	)
EQ_OPERATOR	70:39	70:39	17	!=
LEAF_NODE	70:39	70:39	18	!=
FIELD	70:42	70:42	17	NULL
LEAF_NODE	70:42	70:42	18	NULL
LEAF_NODE	70:46	70:46	15	)
STATEMENTS	70:48	73:4	15	
LEAF_NODE	70:48	70:48	16	{
STATEMENTS	71:5	72:5	16	
ITERATION	71:5	71:33	17	
KEYWORD	71:5	71:5	18	while
LEAF_NODE	71:5	71:5	19	while
LEAF_NODE	71:11	71:11	18	(
CONDITION	71:12	71:12	18	* tmp && * tmp != '('
EXPR	71:12	71:12	19	* tmp && * tmp != '('
AND	71:12	71:20	20	* tmp && * tmp != '('
EXPR	71:12	71:12	21	* tmp
UNARY_EXPR	71:12	71:13	22	* tmp
UNARY_OPERATOR	71:12	71:12	23	*
LEAF_NODE	71:12	71:12	24	*
FIELD	71:13	71:13	23	tmp
LEAF_NODE	71:13	71:13	24	tmp
LEAF_NODE	71:17	71:17	21	&&
EXPR	71:20	71:28	21	* tmp != '('
UNARY_EXPR	71:20	71:21	22	* tmp
UNARY_OPERATOR	71:20	71:20	23	*
LEAF_NODE	71:20	71:20	24	*
FIELD	71:21	71:21	23	tmp
LEAF_NODE	71:21	71:21	24	tmp
EQ_OPERATOR	71:25	71:25	22	!=
LEAF_NODE	71:25	71:25	23	!=
FIELD	71:28	71:28	22	'('
LEAF_NODE	71:28	71:28	23	'('
LEAF_NODE	71:31	71:31	18	)
STATEMENTS	71:33	71:33	18	
EXPR_STATEMENT	71:33	71:38	19	-- tmp ;
EXPR	71:33	71:35	20	-- tmp
LEAF_NODE	71:33	71:33	21	--
FIELD	71:35	71:35	21	tmp
LEAF_NODE	71:35	71:35	22	tmp
LEAF_NODE	71:38	71:38	20	;
EXPR_STATEMENT	72:5	72:12	17	c = tmp ;
EXPR	72:5	72:5	18	c = tmp
ASSIGN	72:5	72:9	19	c = tmp
LVAL	72:5	72:5	20	c
FIELD	72:5	72:5	21	c
LEAF_NODE	72:5	72:5	22	c
ASSIGN_OP	72:7	72:7	20	=
LEAF_NODE	72:7	72:7	21	=
RVAL	72:9	72:9	20	tmp
FIELD	72:9	72:9	21	tmp
LEAF_NODE	72:9	72:9	22	tmp
LEAF_NODE	72:12	72:12	18	;
LEAF_NODE	73:4	73:4	16	}
SELECTION	73:6	73:11	12	
KEYWORD	73:6	73:6	13	else
LEAF_NODE	73:6	73:6	14	else
STATEMENTS	73:11	78:4	13	
LEAF_NODE	73:11	73:11	14	{
STATEMENTS	74:5	77:5	14	
ITERATION	74:5	75:6	15	
KEYWORD	74:5	74:5	16	while
LEAF_NODE	74:5	74:5	17	while
LEAF_NODE	74:11	74:11	16	(
CONDITION	74:12	74:12	16	* c
EXPR	74:12	74:12	17	* c
UNARY_EXPR	74:12	74:13	18	* c
UNARY_OPERATOR	74:12	74:12	19	*
LEAF_NODE	74:12	74:12	20	*
FIELD	74:13	74:13	19	c
LEAF_NODE	74:13	74:13	20	c
LEAF_NODE	74:14	74:14	16	)
STATEMENTS	75:6	75:6	16	
EXPR_STATEMENT	75:6	75:9	17	c ++ ;
EXPR	75:6	75:6	18	c ++
FIELD	75:6	75:7	19	c ++
LEAF_NODE	75:6	75:6	20	c
LEAF_NODE	75:7	75:7	20	++
LEAF_NODE	75:9	75:9	18	;
EXPR_STATEMENT	76:5	76:8	15	c -- ;
EXPR	76:5	76:5	16	c --
FIELD	76:5	76:6	17	c --
LEAF_NODE	76:5	76:5	18	c
LEAF_NODE	76:6	76:6	18	--
LEAF_NODE	76:8	76:8	16	;
EXPR_STATEMENT	77:5	77:26	15	c = g_strrstr ( c , "(" ) ;
EXPR	77:5	77:5	16	c = g_strrstr ( c , "(" )
ASSIGN	77:5	77:9	17	c = g_strrstr ( c , "(" )
LVAL	77:5	77:5	18	c
FIELD	77:5	77:5	19	c
LEAF_NODE	77:5	77:5	20	c
ASSIGN_OP	77:7	77:7	18	=
LEAF_NODE	77:7	77:7	19	=
RVAL	77:9	77:9	18	g_strrstr ( c , "(" )
FUNCTION_CALL	77:9	77:25	19	g_strrstr ( c , "(" )
CALLEE	77:9	77:9	20	g_strrstr
LEAF_NODE	77:9	77:9	21	g_strrstr
LEAF_NODE	77:18	77:18	20	(
ARGUMENT	77:19	77:19	20	c
FIELD	77:19	77:19	21	c
LEAF_NODE	77:19	77:19	22	c
LEAF_NODE	77:20	77:20	20	,
ARGUMENT	77:22	77:22	20	"("
FIELD	77:22	77:22	21	"("
LEAF_NODE	77:22	77:22	22	"("
LEAF_NODE	77:25	77:25	20	)
LEAF_NODE	77:26	77:26	16	;
LEAF_NODE	78:4	78:4	14	}
SELECTION	79:4	79:19	12	
KEYWORD	79:4	79:4	13	if
LEAF_NODE	79:4	79:4	14	if
LEAF_NODE	79:7	79:7	13	(
CONDITION	79:8	79:8	13	c != NULL
EXPR	79:8	79:13	14	c != NULL
FIELD	79:8	79:8	15	c
LEAF_NODE	79:8	79:8	16	c
EQ_OPERATOR	79:10	79:10	15	!=
LEAF_NODE	79:10	79:10	16	!=
FIELD	79:13	79:13	15	NULL
LEAF_NODE	79:13	79:13	16	NULL
LEAF_NODE	79:17	79:17	13	)
STATEMENTS	79:19	100:4	13	
LEAF_NODE	79:19	79:19	14	{
STATEMENTS	80:5	87:7	14	
SIMPLE_DECL	80:5	80:32	15	const char * timestamp ; timestamp = ++ c ;
VAR_DECL	80:5	80:17	16	const char * timestamp ; timestamp = ++ c
TYPE	80:5	80:16	17	const char *
TYPE_NAME	80:5	80:11	18	const char
LEAF_NODE	80:5	80:5	19	const
LEAF_NODE	80:11	80:11	19	char
POINTER	80:16	80:16	18	*
LEAF_NODE	80:16	80:16	19	*
NAME	80:17	80:17	17	timestamp
LEAF_NODE	80:17	80:17	18	timestamp
LEAF_NODE	0:0	0:0	17	;
INIT	80:17	80:17	17	timestamp = ++ c
ASSIGN	80:17	80:29	18	timestamp = ++ c
LVAL	80:17	80:17	19	timestamp
NAME	80:17	80:17	20	timestamp
LEAF_NODE	80:17	80:17	21	timestamp
ASSIGN_OP	80:27	80:27	19	=
LEAF_NODE	80:27	80:27	20	=
RVAL	80:29	80:31	19	++ c
LEAF_NODE	80:29	80:29	20	++
FIELD	80:31	80:31	20	c
LEAF_NODE	80:31	80:31	21	c
LEAF_NODE	80:32	80:32	16	;
SELECTION	82:5	84:50	15	
KEYWORD	82:5	82:5	16	if
LEAF_NODE	82:5	82:5	17	if
LEAF_NODE	82:8	82:8	16	(
CONDITION	82:9	82:9	16	sscanf ( timestamp , "%u:%u:%u %u/%u/%u" , & tm . tm_hour , & tm . tm_min , & tm . tm_sec , & tm . tm_mday , & tm . tm_mon , & tm . tm_year ) != 6
EXPR	82:9	84:47	17	sscanf ( timestamp , "%u:%u:%u %u/%u/%u" , & tm . tm_hour , & tm . tm_min , & tm . tm_sec , & tm . tm_mday , & tm . tm_mon , & tm . tm_year ) != 6
FUNCTION_CALL	82:9	84:42	18	sscanf ( timestamp , "%u:%u:%u %u/%u/%u" , & tm . tm_hour , & tm . tm_min , & tm . tm_sec , & tm . tm_mday , & tm . tm_mon , & tm . tm_year )
CALLEE	82:9	82:9	19	sscanf
LEAF_NODE	82:9	82:9	20	sscanf
LEAF_NODE	82:15	82:15	19	(
ARGUMENT	82:16	82:16	19	timestamp
FIELD	82:16	82:16	20	timestamp
LEAF_NODE	82:16	82:16	21	timestamp
LEAF_NODE	82:25	82:25	19	,
ARGUMENT	82:27	82:27	19	"%u:%u:%u %u/%u/%u"
FIELD	82:27	82:27	20	"%u:%u:%u %u/%u/%u"
LEAF_NODE	82:27	82:27	21	"%u:%u:%u %u/%u/%u"
LEAF_NODE	82:46	82:46	19	,
ARGUMENT	83:6	83:6	19	& tm . tm_hour
UNARY_EXPR	83:6	83:7	20	& tm . tm_hour
UNARY_OPERATOR	83:6	83:6	21	&
LEAF_NODE	83:6	83:6	22	&
FIELD	83:7	83:10	21	tm . tm_hour
LEAF_NODE	83:7	83:7	22	tm
LEAF_NODE	83:9	83:9	22	.
LEAF_NODE	83:10	83:10	22	tm_hour
LEAF_NODE	83:17	83:17	19	,
ARGUMENT	83:19	83:19	19	& tm . tm_min
UNARY_EXPR	83:19	83:20	20	& tm . tm_min
UNARY_OPERATOR	83:19	83:19	21	&
LEAF_NODE	83:19	83:19	22	&
FIELD	83:20	83:23	21	tm . tm_min
LEAF_NODE	83:20	83:20	22	tm
LEAF_NODE	83:22	83:22	22	.
LEAF_NODE	83:23	83:23	22	tm_min
LEAF_NODE	83:29	83:29	19	,
ARGUMENT	83:31	83:31	19	& tm . tm_sec
UNARY_EXPR	83:31	83:32	20	& tm . tm_sec
UNARY_OPERATOR	83:31	83:31	21	&
LEAF_NODE	83:31	83:31	22	&
FIELD	83:32	83:35	21	tm . tm_sec
LEAF_NODE	83:32	83:32	22	tm
LEAF_NODE	83:34	83:34	22	.
LEAF_NODE	83:35	83:35	22	tm_sec
LEAF_NODE	83:41	83:41	19	,
ARGUMENT	84:6	84:6	19	& tm . tm_mday
UNARY_EXPR	84:6	84:7	20	& tm . tm_mday
UNARY_OPERATOR	84:6	84:6	21	&
LEAF_NODE	84:6	84:6	22	&
FIELD	84:7	84:10	21	tm . tm_mday
LEAF_NODE	84:7	84:7	22	tm
LEAF_NODE	84:9	84:9	22	.
LEAF_NODE	84:10	84:10	22	tm_mday
LEAF_NODE	84:17	84:17	19	,
ARGUMENT	84:19	84:19	19	& tm . tm_mon
UNARY_EXPR	84:19	84:20	20	& tm . tm_mon
UNARY_OPERATOR	84:19	84:19	21	&
LEAF_NODE	84:19	84:19	22	&
FIELD	84:20	84:23	21	tm . tm_mon
LEAF_NODE	84:20	84:20	22	tm
LEAF_NODE	84:22	84:22	22	.
LEAF_NODE	84:23	84:23	22	tm_mon
LEAF_NODE	84:29	84:29	19	,
ARGUMENT	84:31	84:31	19	& tm . tm_year
UNARY_EXPR	84:31	84:32	20	& tm . tm_year
UNARY_OPERATOR	84:31	84:31	21	&
LEAF_NODE	84:31	84:31	22	&
FIELD	84:32	84:35	21	tm . tm_year
LEAF_NODE	84:32	84:32	22	tm
LEAF_NODE	84:34	84:34	22	.
LEAF_NODE	84:35	84:35	22	tm_year
LEAF_NODE	84:42	84:42	19	)
EQ_OPERATOR	84:44	84:44	18	!=
LEAF_NODE	84:44	84:44	19	!=
FIELD	84:47	84:47	18	6
LEAF_NODE	84:47	84:47	19	6
LEAF_NODE	84:48	84:48	16	)
STATEMENTS	84:50	87:5	16	
LEAF_NODE	84:50	84:50	17	{
STATEMENTS	85:6	85:6	17	
EXPR_STATEMENT	85:6	86:35	18	purple_debug_error ( "QIP logger list" , "Parsing timestamp error\n" ) ;
EXPR	85:6	85:6	19	purple_debug_error ( "QIP logger list" , "Parsing timestamp error\n" )
FUNCTION_CALL	85:6	86:34	20	purple_debug_error ( "QIP logger list" , "Parsing timestamp error\n" )
CALLEE	85:6	85:6	21	purple_debug_error
LEAF_NODE	85:6	85:6	22	purple_debug_error
LEAF_NODE	85:24	85:24	21	(
ARGUMENT	85:25	85:25	21	"QIP logger list"
FIELD	85:25	85:25	22	"QIP logger list"
LEAF_NODE	85:25	85:25	23	"QIP logger list"
LEAF_NODE	85:42	85:42	21	,
ARGUMENT	86:7	86:7	21	"Parsing timestamp error\n"
FIELD	86:7	86:7	22	"Parsing timestamp error\n"
LEAF_NODE	86:7	86:7	23	"Parsing timestamp error\n"
LEAF_NODE	86:34	86:34	21	)
LEAF_NODE	86:35	86:35	19	;
LEAF_NODE	87:5	87:5	17	}
SELECTION	87:7	87:12	15	
KEYWORD	87:7	87:7	16	else
LEAF_NODE	87:7	87:7	17	else
STATEMENTS	87:12	99:5	16	
LEAF_NODE	87:12	87:12	17	{
STATEMENTS	88:6	96:8	17	
EXPR_STATEMENT	88:6	88:20	18	tm . tm_mon -= 1 ;
EXPR	88:6	88:6	19	tm . tm_mon -= 1
ASSIGN	88:6	88:19	20	tm . tm_mon -= 1
LVAL	88:6	88:6	21	tm . tm_mon
FIELD	88:6	88:9	22	tm . tm_mon
LEAF_NODE	88:6	88:6	23	tm
LEAF_NODE	88:8	88:8	23	.
LEAF_NODE	88:9	88:9	23	tm_mon
ASSIGN_OP	88:16	88:16	21	-=
LEAF_NODE	88:16	88:16	22	-=
RVAL	88:19	88:19	21	1
FIELD	88:19	88:19	22	1
LEAF_NODE	88:19	88:19	23	1
LEAF_NODE	88:20	88:20	19	;
EXPR_STATEMENT	89:6	89:24	18	tm . tm_year -= 1900 ;
EXPR	89:6	89:6	19	tm . tm_year -= 1900
ASSIGN	89:6	89:20	20	tm . tm_year -= 1900
LVAL	89:6	89:6	21	tm . tm_year
FIELD	89:6	89:9	22	tm . tm_year
LEAF_NODE	89:6	89:6	23	tm
LEAF_NODE	89:8	89:8	23	.
LEAF_NODE	89:9	89:9	23	tm_year
ASSIGN_OP	89:17	89:17	21	-=
LEAF_NODE	89:17	89:17	22	-=
RVAL	89:20	89:20	21	1900
FIELD	89:20	89:20	22	1900
LEAF_NODE	89:20	89:20	23	1900
LEAF_NODE	89:24	89:24	19	;
EXPR_STATEMENT	92:6	92:22	18	tm . tm_isdst = - 1 ;
EXPR	92:6	92:6	19	tm . tm_isdst = - 1
ASSIGN	92:6	92:20	20	tm . tm_isdst = - 1
LVAL	92:6	92:6	21	tm . tm_isdst
FIELD	92:6	92:9	22	tm . tm_isdst
LEAF_NODE	92:6	92:6	23	tm
LEAF_NODE	92:8	92:8	23	.
LEAF_NODE	92:9	92:9	23	tm_isdst
ASSIGN_OP	92:18	92:18	21	=
LEAF_NODE	92:18	92:18	22	=
RVAL	92:20	92:20	21	- 1
UNARY_EXPR	92:20	92:21	22	- 1
UNARY_OPERATOR	92:20	92:20	23	-
LEAF_NODE	92:20	92:20	24	-
FIELD	92:21	92:21	23	1
LEAF_NODE	92:21	92:21	24	1
LEAF_NODE	92:22	92:22	19	;
SELECTION	93:6	93:25	18	
KEYWORD	93:6	93:6	19	if
LEAF_NODE	93:6	93:6	20	if
LEAF_NODE	93:9	93:9	19	(
CONDITION	93:10	93:10	19	! prev_tm_init
EXPR	93:10	93:10	20	! prev_tm_init
UNARY_EXPR	93:10	93:11	21	! prev_tm_init
UNARY_OPERATOR	93:10	93:10	22	!
LEAF_NODE	93:10	93:10	23	!
FIELD	93:11	93:11	22	prev_tm_init
LEAF_NODE	93:11	93:11	23	prev_tm_init
LEAF_NODE	93:23	93:23	19	)
STATEMENTS	93:25	96:6	19	
LEAF_NODE	93:25	93:25	20	{
STATEMENTS	94:7	95:7	20	
EXPR_STATEMENT	94:7	94:19	21	prev_tm = tm ;
EXPR	94:7	94:7	22	prev_tm = tm
ASSIGN	94:7	94:17	23	prev_tm = tm
LVAL	94:7	94:7	24	prev_tm
FIELD	94:7	94:7	25	prev_tm
LEAF_NODE	94:7	94:7	26	prev_tm
ASSIGN_OP	94:15	94:15	24	=
LEAF_NODE	94:15	94:15	25	=
RVAL	94:17	94:17	24	tm
FIELD	94:17	94:17	25	tm
LEAF_NODE	94:17	94:17	26	tm
LEAF_NODE	94:19	94:19	22	;
EXPR_STATEMENT	95:7	95:26	21	prev_tm_init = TRUE ;
EXPR	95:7	95:7	22	prev_tm_init = TRUE
ASSIGN	95:7	95:22	23	prev_tm_init = TRUE
LVAL	95:7	95:7	24	prev_tm_init
FIELD	95:7	95:7	25	prev_tm_init
LEAF_NODE	95:7	95:7	26	prev_tm_init
ASSIGN_OP	95:20	95:20	24	=
LEAF_NODE	95:20	95:20	25	=
RVAL	95:22	95:22	24	TRUE
FIELD	95:22	95:22	25	TRUE
LEAF_NODE	95:22	95:22	26	TRUE
LEAF_NODE	95:26	95:26	22	;
LEAF_NODE	96:6	96:6	20	}
SELECTION	96:8	96:13	18	
KEYWORD	96:8	96:8	19	else
LEAF_NODE	96:8	96:8	20	else
STATEMENTS	96:13	98:6	19	
LEAF_NODE	96:13	96:13	20	{
STATEMENTS	97:7	97:7	20	
EXPR_STATEMENT	97:7	97:78	21	add_new_log = difftime ( mktime ( & tm ) , mktime ( & prev_tm ) ) > QIP_LOG_TIMEOUT ;
EXPR	97:7	97:7	22	add_new_log = difftime ( mktime ( & tm ) , mktime ( & prev_tm ) ) > QIP_LOG_TIMEOUT
ASSIGN	97:7	97:21	23	add_new_log = difftime ( mktime ( & tm ) , mktime ( & prev_tm ) ) > QIP_LOG_TIMEOUT
LVAL	97:7	97:7	24	add_new_log
FIELD	97:7	97:7	25	add_new_log
LEAF_NODE	97:7	97:7	26	add_new_log
ASSIGN_OP	97:19	97:19	24	=
LEAF_NODE	97:19	97:19	25	=
RVAL	97:21	97:63	24	difftime ( mktime ( & tm ) , mktime ( & prev_tm ) ) > QIP_LOG_TIMEOUT
FUNCTION_CALL	97:21	97:59	25	difftime ( mktime ( & tm ) , mktime ( & prev_tm ) )
CALLEE	97:21	97:21	26	difftime
LEAF_NODE	97:21	97:21	27	difftime
LEAF_NODE	97:29	97:29	26	(
ARGUMENT	97:30	97:30	26	mktime ( & tm )
FUNCTION_CALL	97:30	97:40	27	mktime ( & tm )
CALLEE	97:30	97:30	28	mktime
LEAF_NODE	97:30	97:30	29	mktime
LEAF_NODE	97:36	97:36	28	(
ARGUMENT	97:37	97:37	28	& tm
UNARY_EXPR	97:37	97:38	29	& tm
UNARY_OPERATOR	97:37	97:37	30	&
LEAF_NODE	97:37	97:37	31	&
FIELD	97:38	97:38	30	tm
LEAF_NODE	97:38	97:38	31	tm
LEAF_NODE	97:40	97:40	28	)
LEAF_NODE	97:41	97:41	26	,
ARGUMENT	97:43	97:43	26	mktime ( & prev_tm )
FUNCTION_CALL	97:43	97:58	27	mktime ( & prev_tm )
CALLEE	97:43	97:43	28	mktime
LEAF_NODE	97:43	97:43	29	mktime
LEAF_NODE	97:49	97:49	28	(
ARGUMENT	97:50	97:50	28	& prev_tm
UNARY_EXPR	97:50	97:51	29	& prev_tm
UNARY_OPERATOR	97:50	97:50	30	&
LEAF_NODE	97:50	97:50	31	&
FIELD	97:51	97:51	30	prev_tm
LEAF_NODE	97:51	97:51	31	prev_tm
LEAF_NODE	97:58	97:58	28	)
LEAF_NODE	97:59	97:59	26	)
REL_OPERATOR	97:61	97:61	25	>
LEAF_NODE	97:61	97:61	26	>
FIELD	97:63	97:63	25	QIP_LOG_TIMEOUT
LEAF_NODE	97:63	97:63	26	QIP_LOG_TIMEOUT
LEAF_NODE	97:78	97:78	22	;
LEAF_NODE	98:6	98:6	20	}
LEAF_NODE	99:5	99:5	17	}
LEAF_NODE	100:4	100:4	14	}
LEAF_NODE	101:3	101:3	11	}
LEAF_NODE	102:2	102:2	8	}
SELECTION	102:4	102:9	6	
KEYWORD	102:4	102:4	7	else
LEAF_NODE	102:4	102:4	8	else
STATEMENTS	102:9	106:2	7	
LEAF_NODE	102:9	102:9	8	{
STATEMENTS	103:3	105:3	8	
EXPR_STATEMENT	103:3	103:21	9	add_new_log = TRUE ;
EXPR	103:3	103:3	10	add_new_log = TRUE
ASSIGN	103:3	103:17	11	add_new_log = TRUE
LVAL	103:3	103:3	12	add_new_log
FIELD	103:3	103:3	13	add_new_log
LEAF_NODE	103:3	103:3	14	add_new_log
ASSIGN_OP	103:15	103:15	12	=
LEAF_NODE	103:15	103:15	13	=
RVAL	103:17	103:17	12	TRUE
FIELD	103:17	103:17	13	TRUE
LEAF_NODE	103:17	103:17	14	TRUE
LEAF_NODE	103:21	103:21	10	;
EXPR_STATEMENT	104:3	104:21	9	main_cycle = FALSE ;
EXPR	104:3	104:3	10	main_cycle = FALSE
ASSIGN	104:3	104:16	11	main_cycle = FALSE
LVAL	104:3	104:3	12	main_cycle
FIELD	104:3	104:3	13	main_cycle
LEAF_NODE	104:3	104:3	14	main_cycle
ASSIGN_OP	104:14	104:14	12	=
LEAF_NODE	104:14	104:14	13	=
RVAL	104:16	104:16	12	FALSE
FIELD	104:16	104:16	13	FALSE
LEAF_NODE	104:16	104:16	14	FALSE
LEAF_NODE	104:21	104:21	10	;
EXPR_STATEMENT	105:3	105:15	9	new_line = c ;
EXPR	105:3	105:3	10	new_line = c
ASSIGN	105:3	105:14	11	new_line = c
LVAL	105:3	105:3	12	new_line
FIELD	105:3	105:3	13	new_line
LEAF_NODE	105:3	105:3	14	new_line
ASSIGN_OP	105:12	105:12	12	=
LEAF_NODE	105:12	105:12	13	=
RVAL	105:14	105:14	12	c
FIELD	105:14	105:14	13	c
LEAF_NODE	105:14	105:14	14	c
LEAF_NODE	105:15	105:15	10	;
LEAF_NODE	106:2	106:2	8	}
SELECTION	108:2	108:35	6	
KEYWORD	108:2	108:2	7	if
LEAF_NODE	108:2	108:2	8	if
LEAF_NODE	108:5	108:5	7	(
CONDITION	108:6	108:6	7	add_new_log && prev_tm_init
EXPR	108:6	108:6	8	add_new_log && prev_tm_init
AND	108:6	108:21	9	add_new_log && prev_tm_init
EXPR	108:6	108:6	10	add_new_log
FIELD	108:6	108:6	11	add_new_log
LEAF_NODE	108:6	108:6	12	add_new_log
LEAF_NODE	108:18	108:18	10	&&
EXPR	108:21	108:21	10	prev_tm_init
FIELD	108:21	108:21	11	prev_tm_init
LEAF_NODE	108:21	108:21	12	prev_tm_init
LEAF_NODE	108:33	108:33	7	)
STATEMENTS	108:35	127:2	7	
LEAF_NODE	108:35	108:35	8	{
STATEMENTS	109:3	126:3	8	
SIMPLE_DECL	109:3	109:17	9	PurpleLog * log ;
VAR_DECL	109:3	109:14	10	PurpleLog * log
TYPE	109:3	109:13	11	PurpleLog *
TYPE_NAME	109:3	109:3	12	PurpleLog
LEAF_NODE	109:3	109:3	13	PurpleLog
POINTER	109:13	109:13	12	*
LEAF_NODE	109:13	109:13	13	*
NAME	109:14	109:14	11	log
LEAF_NODE	109:14	109:14	12	log
LEAF_NODE	109:17	109:17	10	;
LEAF_NODE	111:3	111:3	9	data
LEAF_NODE	111:8	111:8	9	=
LEAF_NODE	111:10	111:10	9	g_new0
LEAF_NODE	111:16	111:16	9	(
LEAF_NODE	111:17	111:17	9	struct
LEAF_NODE	111:24	111:24	9	qip_logger_data
LEAF_NODE	111:39	111:39	9	,
LEAF_NODE	111:41	111:41	9	1
LEAF_NODE	111:42	111:42	9	)
LEAF_NODE	111:43	111:43	9	;
EXPR_STATEMENT	112:3	112:30	9	data -> path = g_strdup ( path ) ;
EXPR	112:3	112:3	10	data -> path = g_strdup ( path )
ASSIGN	112:3	112:16	11	data -> path = g_strdup ( path )
LVAL	112:3	112:3	12	data -> path
FIELD	112:3	112:9	13	data -> path
LEAF_NODE	112:3	112:3	14	data
LEAF_NODE	112:7	112:7	14	->
LEAF_NODE	112:9	112:9	14	path
ASSIGN_OP	112:14	112:14	12	=
LEAF_NODE	112:14	112:14	13	=
RVAL	112:16	112:16	12	g_strdup ( path )
FUNCTION_CALL	112:16	112:29	13	g_strdup ( path )
CALLEE	112:16	112:16	14	g_strdup
LEAF_NODE	112:16	112:16	15	g_strdup
LEAF_NODE	112:24	112:24	14	(
ARGUMENT	112:25	112:25	14	path
FIELD	112:25	112:25	15	path
LEAF_NODE	112:25	112:25	16	path
LEAF_NODE	112:29	112:29	14	)
LEAF_NODE	112:30	112:30	10	;
EXPR_STATEMENT	113:3	113:38	9	data -> length = new_line - start_log ;
EXPR	113:3	113:3	10	data -> length = new_line - start_log
ASSIGN	113:3	113:18	11	data -> length = new_line - start_log
LVAL	113:3	113:3	12	data -> length
FIELD	113:3	113:9	13	data -> length
LEAF_NODE	113:3	113:3	14	data
LEAF_NODE	113:7	113:7	14	->
LEAF_NODE	113:9	113:9	14	length
ASSIGN_OP	113:16	113:16	12	=
LEAF_NODE	113:16	113:16	13	=
RVAL	113:18	113:29	12	new_line - start_log
FIELD	113:18	113:18	13	new_line
LEAF_NODE	113:18	113:18	14	new_line
LEAF_NODE	113:27	113:27	13	-
FIELD	113:29	113:29	13	start_log
LEAF_NODE	113:29	113:29	14	start_log
LEAF_NODE	113:38	113:38	10	;
EXPR_STATEMENT	114:3	114:24	9	data -> offset = offset ;
EXPR	114:3	114:3	10	data -> offset = offset
ASSIGN	114:3	114:18	11	data -> offset = offset
LVAL	114:3	114:3	12	data -> offset
FIELD	114:3	114:9	13	data -> offset
LEAF_NODE	114:3	114:3	14	data
LEAF_NODE	114:7	114:7	14	->
LEAF_NODE	114:9	114:9	14	offset
ASSIGN_OP	114:16	114:16	12	=
LEAF_NODE	114:16	114:16	13	=
RVAL	114:18	114:18	12	offset
FIELD	114:18	114:18	13	offset
LEAF_NODE	114:18	114:18	14	offset
LEAF_NODE	114:24	114:24	10	;
EXPR_STATEMENT	115:3	115:25	9	offset += data -> length ;
EXPR	115:3	115:3	10	offset += data -> length
ASSIGN	115:3	115:13	11	offset += data -> length
LVAL	115:3	115:3	12	offset
FIELD	115:3	115:3	13	offset
LEAF_NODE	115:3	115:3	14	offset
ASSIGN_OP	115:10	115:10	12	+=
LEAF_NODE	115:10	115:10	13	+=
RVAL	115:13	115:13	12	data -> length
FIELD	115:13	115:19	13	data -> length
LEAF_NODE	115:13	115:13	14	data
LEAF_NODE	115:17	115:17	14	->
LEAF_NODE	115:19	115:19	14	length
LEAF_NODE	115:25	115:25	10	;
EXPR_STATEMENT	116:3	118:43	9	purple_debug_info ( "QIP logger list" , "Creating log: path = (%s); length = (%d); offset = (%d)\n" , data -> path , data -> length , data -> offset ) ;
EXPR	116:3	116:3	10	purple_debug_info ( "QIP logger list" , "Creating log: path = (%s); length = (%d); offset = (%d)\n" , data -> path , data -> length , data -> offset )
FUNCTION_CALL	116:3	118:42	11	purple_debug_info ( "QIP logger list" , "Creating log: path = (%s); length = (%d); offset = (%d)\n" , data -> path , data -> length , data -> offset )
CALLEE	116:3	116:3	12	purple_debug_info
LEAF_NODE	116:3	116:3	13	purple_debug_info
LEAF_NODE	116:20	116:20	12	(
ARGUMENT	116:21	116:21	12	"QIP logger list"
FIELD	116:21	116:21	13	"QIP logger list"
LEAF_NODE	116:21	116:21	14	"QIP logger list"
LEAF_NODE	116:38	116:38	12	,
ARGUMENT	117:4	117:4	12	"Creating log: path = (%s); length = (%d); offset = (%d)\n"
FIELD	117:4	117:4	13	"Creating log: path = (%s); length = (%d); offset = (%d)\n"
LEAF_NODE	117:4	117:4	14	"Creating log: path = (%s); length = (%d); offset = (%d)\n"
LEAF_NODE	117:63	117:63	12	,
ARGUMENT	118:4	118:4	12	data -> path
FIELD	118:4	118:10	13	data -> path
LEAF_NODE	118:4	118:4	14	data
LEAF_NODE	118:8	118:8	14	->
LEAF_NODE	118:10	118:10	14	path
LEAF_NODE	118:14	118:14	12	,
ARGUMENT	118:16	118:16	12	data -> length
FIELD	118:16	118:22	13	data -> length
LEAF_NODE	118:16	118:16	14	data
LEAF_NODE	118:20	118:20	14	->
LEAF_NODE	118:22	118:22	14	length
LEAF_NODE	118:28	118:28	12	,
ARGUMENT	118:30	118:30	12	data -> offset
FIELD	118:30	118:36	13	data -> offset
LEAF_NODE	118:30	118:30	14	data
LEAF_NODE	118:34	118:34	14	->
LEAF_NODE	118:36	118:36	14	offset
LEAF_NODE	118:42	118:42	12	)
LEAF_NODE	118:43	118:43	10	;
EXPR_STATEMENT	120:3	121:33	9	log = purple_log_new ( PURPLE_LOG_IM , sn , account , NULL , mktime ( & prev_tm ) , NULL ) ;
EXPR	120:3	120:3	10	log = purple_log_new ( PURPLE_LOG_IM , sn , account , NULL , mktime ( & prev_tm ) , NULL )
ASSIGN	120:3	120:9	11	log = purple_log_new ( PURPLE_LOG_IM , sn , account , NULL , mktime ( & prev_tm ) , NULL )
LVAL	120:3	120:3	12	log
FIELD	120:3	120:3	13	log
LEAF_NODE	120:3	120:3	14	log
ASSIGN_OP	120:7	120:7	12	=
LEAF_NODE	120:7	120:7	13	=
RVAL	120:9	120:9	12	purple_log_new ( PURPLE_LOG_IM , sn , account , NULL , mktime ( & prev_tm ) , NULL )
FUNCTION_CALL	120:9	121:32	13	purple_log_new ( PURPLE_LOG_IM , sn , account , NULL , mktime ( & prev_tm ) , NULL )
CALLEE	120:9	120:9	14	purple_log_new
LEAF_NODE	120:9	120:9	15	purple_log_new
LEAF_NODE	120:23	120:23	14	(
ARGUMENT	120:24	120:24	14	PURPLE_LOG_IM
FIELD	120:24	120:24	15	PURPLE_LOG_IM
LEAF_NODE	120:24	120:24	16	PURPLE_LOG_IM
LEAF_NODE	120:37	120:37	14	,
ARGUMENT	120:39	120:39	14	sn
FIELD	120:39	120:39	15	sn
LEAF_NODE	120:39	120:39	16	sn
LEAF_NODE	120:41	120:41	14	,
ARGUMENT	120:43	120:43	14	account
FIELD	120:43	120:43	15	account
LEAF_NODE	120:43	120:43	16	account
LEAF_NODE	120:50	120:50	14	,
ARGUMENT	121:4	121:4	14	NULL
FIELD	121:4	121:4	15	NULL
LEAF_NODE	121:4	121:4	16	NULL
LEAF_NODE	121:8	121:8	14	,
ARGUMENT	121:10	121:10	14	mktime ( & prev_tm )
FUNCTION_CALL	121:10	121:25	15	mktime ( & prev_tm )
CALLEE	121:10	121:10	16	mktime
LEAF_NODE	121:10	121:10	17	mktime
LEAF_NODE	121:16	121:16	16	(
ARGUMENT	121:17	121:17	16	& prev_tm
UNARY_EXPR	121:17	121:18	17	& prev_tm
UNARY_OPERATOR	121:17	121:17	18	&
LEAF_NODE	121:17	121:17	19	&
FIELD	121:18	121:18	18	prev_tm
LEAF_NODE	121:18	121:18	19	prev_tm
LEAF_NODE	121:25	121:25	16	)
LEAF_NODE	121:26	121:26	14	,
ARGUMENT	121:28	121:28	14	NULL
FIELD	121:28	121:28	15	NULL
LEAF_NODE	121:28	121:28	16	NULL
LEAF_NODE	121:32	121:32	14	)
LEAF_NODE	121:33	121:33	10	;
EXPR_STATEMENT	122:3	122:27	9	log -> logger = qip_logger ;
EXPR	122:3	122:3	10	log -> logger = qip_logger
ASSIGN	122:3	122:17	11	log -> logger = qip_logger
LVAL	122:3	122:3	12	log -> logger
FIELD	122:3	122:8	13	log -> logger
LEAF_NODE	122:3	122:3	14	log
LEAF_NODE	122:6	122:6	14	->
LEAF_NODE	122:8	122:8	14	logger
ASSIGN_OP	122:15	122:15	12	=
LEAF_NODE	122:15	122:15	13	=
RVAL	122:17	122:17	12	qip_logger
FIELD	122:17	122:17	13	qip_logger
LEAF_NODE	122:17	122:17	14	qip_logger
LEAF_NODE	122:27	122:27	10	;
EXPR_STATEMENT	123:3	123:26	9	log -> logger_data = data ;
EXPR	123:3	123:3	10	log -> logger_data = data
ASSIGN	123:3	123:22	11	log -> logger_data = data
LVAL	123:3	123:3	12	log -> logger_data
FIELD	123:3	123:8	13	log -> logger_data
LEAF_NODE	123:3	123:3	14	log
LEAF_NODE	123:6	123:6	14	->
LEAF_NODE	123:8	123:8	14	logger_data
ASSIGN_OP	123:20	123:20	12	=
LEAF_NODE	123:20	123:20	13	=
RVAL	123:22	123:22	12	data
FIELD	123:22	123:22	13	data
LEAF_NODE	123:22	123:22	14	data
LEAF_NODE	123:26	123:26	10	;
EXPR_STATEMENT	124:3	124:35	9	list = g_list_prepend ( list , log ) ;
EXPR	124:3	124:3	10	list = g_list_prepend ( list , log )
ASSIGN	124:3	124:10	11	list = g_list_prepend ( list , log )
LVAL	124:3	124:3	12	list
FIELD	124:3	124:3	13	list
LEAF_NODE	124:3	124:3	14	list
ASSIGN_OP	124:8	124:8	12	=
LEAF_NODE	124:8	124:8	13	=
RVAL	124:10	124:10	12	g_list_prepend ( list , log )
FUNCTION_CALL	124:10	124:34	13	g_list_prepend ( list , log )
CALLEE	124:10	124:10	14	g_list_prepend
LEAF_NODE	124:10	124:10	15	g_list_prepend
LEAF_NODE	124:24	124:24	14	(
ARGUMENT	124:25	124:25	14	list
FIELD	124:25	124:25	15	list
LEAF_NODE	124:25	124:25	16	list
LEAF_NODE	124:29	124:29	14	,
ARGUMENT	124:31	124:31	14	log
FIELD	124:31	124:31	15	log
LEAF_NODE	124:31	124:31	16	log
LEAF_NODE	124:34	124:34	14	)
LEAF_NODE	124:35	124:35	10	;
EXPR_STATEMENT	125:3	125:15	9	prev_tm = tm ;
EXPR	125:3	125:3	10	prev_tm = tm
ASSIGN	125:3	125:13	11	prev_tm = tm
LVAL	125:3	125:3	12	prev_tm
FIELD	125:3	125:3	13	prev_tm
LEAF_NODE	125:3	125:3	14	prev_tm
ASSIGN_OP	125:11	125:11	12	=
LEAF_NODE	125:11	125:11	13	=
RVAL	125:13	125:13	12	tm
FIELD	125:13	125:13	13	tm
LEAF_NODE	125:13	125:13	14	tm
LEAF_NODE	125:15	125:15	10	;
EXPR_STATEMENT	126:3	126:23	9	start_log = new_line ;
EXPR	126:3	126:3	10	start_log = new_line
ASSIGN	126:3	126:15	11	start_log = new_line
LVAL	126:3	126:3	12	start_log
FIELD	126:3	126:3	13	start_log
LEAF_NODE	126:3	126:3	14	start_log
ASSIGN_OP	126:13	126:13	12	=
LEAF_NODE	126:13	126:13	13	=
RVAL	126:15	126:15	12	new_line
FIELD	126:15	126:15	13	new_line
LEAF_NODE	126:15	126:15	14	new_line
LEAF_NODE	126:23	126:23	10	;
LEAF_NODE	127:2	127:2	8	}
SELECTION	128:2	128:15	6	
KEYWORD	128:2	128:2	7	if
LEAF_NODE	128:2	128:2	8	if
LEAF_NODE	128:5	128:5	7	(
CONDITION	128:6	128:6	7	c && * c
EXPR	128:6	128:6	8	c && * c
AND	128:6	128:11	9	c && * c
EXPR	128:6	128:6	10	c
FIELD	128:6	128:6	11	c
LEAF_NODE	128:6	128:6	12	c
LEAF_NODE	128:8	128:8	10	&&
EXPR	128:11	128:11	10	* c
UNARY_EXPR	128:11	128:12	11	* c
UNARY_OPERATOR	128:11	128:11	12	*
LEAF_NODE	128:11	128:11	13	*
FIELD	128:12	128:12	12	c
LEAF_NODE	128:12	128:12	13	c
LEAF_NODE	128:13	128:13	7	)
STATEMENTS	128:15	132:2	7	
LEAF_NODE	128:15	128:15	8	{
STATEMENTS	130:3	130:3	8	
SELECTION	130:3	131:4	9	
KEYWORD	130:3	130:3	10	if
LEAF_NODE	130:3	130:3	11	if
LEAF_NODE	130:6	130:6	10	(
CONDITION	130:7	130:7	10	( c = strchr ( c , '\n' ) )
EXPR	130:7	130:27	11	( c = strchr ( c , '\n' ) )
LEAF_NODE	130:7	130:7	12	(
ASSIGN	130:8	130:12	12	c = strchr ( c , '\n' )
LVAL	130:8	130:8	13	c
FIELD	130:8	130:8	14	c
LEAF_NODE	130:8	130:8	15	c
ASSIGN_OP	130:10	130:10	13	=
LEAF_NODE	130:10	130:10	14	=
RVAL	130:12	130:12	13	strchr ( c , '\n' )
FUNCTION_CALL	130:12	130:26	14	strchr ( c , '\n' )
CALLEE	130:12	130:12	15	strchr
LEAF_NODE	130:12	130:12	16	strchr
LEAF_NODE	130:18	130:18	15	(
ARGUMENT	130:19	130:19	15	c
FIELD	130:19	130:19	16	c
LEAF_NODE	130:19	130:19	17	c
LEAF_NODE	130:20	130:20	15	,
ARGUMENT	130:22	130:22	15	'\n'
FIELD	130:22	130:22	16	'\n'
LEAF_NODE	130:22	130:22	17	'\n'
LEAF_NODE	130:26	130:26	15	)
LEAF_NODE	130:27	130:27	12	)
LEAF_NODE	130:28	130:28	10	)
STATEMENTS	131:4	131:4	10	
EXPR_STATEMENT	131:4	131:7	11	c ++ ;
EXPR	131:4	131:4	12	c ++
FIELD	131:4	131:5	13	c ++
LEAF_NODE	131:4	131:4	14	c
LEAF_NODE	131:5	131:5	14	++
LEAF_NODE	131:7	131:7	12	;
LEAF_NODE	132:2	132:2	8	}
LEAF_NODE	133:1	133:1	5	}
EXPR_STATEMENT	134:1	134:17	3	g_free ( contents ) ;
EXPR	134:1	134:1	4	g_free ( contents )
FUNCTION_CALL	134:1	134:16	5	g_free ( contents )
CALLEE	134:1	134:1	6	g_free
LEAF_NODE	134:1	134:1	7	g_free
LEAF_NODE	134:7	134:7	6	(
ARGUMENT	134:8	134:8	6	contents
FIELD	134:8	134:8	7	contents
LEAF_NODE	134:8	134:8	8	contents
LEAF_NODE	134:16	134:16	6	)
LEAF_NODE	134:17	134:17	4	;
EXPR_STATEMENT	135:1	135:13	3	g_free ( path ) ;
EXPR	135:1	135:1	4	g_free ( path )
FUNCTION_CALL	135:1	135:12	5	g_free ( path )
CALLEE	135:1	135:1	6	g_free
LEAF_NODE	135:1	135:1	7	g_free
LEAF_NODE	135:7	135:7	6	(
ARGUMENT	135:8	135:8	6	path
FIELD	135:8	135:8	7	path
LEAF_NODE	135:8	135:8	8	path
LEAF_NODE	135:12	135:12	6	)
LEAF_NODE	135:13	135:13	4	;
JUMP_STATEMENT	136:1	136:28	3	return g_list_reverse ( list ) ;
KEYWORD	136:1	136:1	4	return
LEAF_NODE	136:1	136:1	5	return
DESTINATION	136:8	136:8	4	g_list_reverse ( list )
EXPR	136:8	136:8	5	g_list_reverse ( list )
FUNCTION_CALL	136:8	136:27	6	g_list_reverse ( list )
CALLEE	136:8	136:8	7	g_list_reverse
LEAF_NODE	136:8	136:8	8	g_list_reverse
LEAF_NODE	136:22	136:22	7	(
ARGUMENT	136:23	136:23	7	list
FIELD	136:23	136:23	8	list
LEAF_NODE	136:23	136:23	9	list
LEAF_NODE	136:27	136:27	7	)
LEAF_NODE	136:28	136:28	4	;
LEAF_NODE	137:0	137:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	22:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	pidgin_status_box_finalize
LEAF_NODE	2:0	2:0	3	pidgin_status_box_finalize
PARAMETER_LIST	2:26	2:39	2	( GObject * obj )
LEAF_NODE	2:26	2:26	3	(
PARAMETER_DECL	2:27	2:36	3	GObject * obj
TYPE	2:27	2:35	4	GObject *
TYPE_NAME	2:27	2:27	5	GObject
LEAF_NODE	2:27	2:27	6	GObject
POINTER	2:35	2:35	5	*
LEAF_NODE	2:35	2:35	6	*
NAME	2:36	2:36	4	obj
LEAF_NODE	2:36	2:36	5	obj
LEAF_NODE	2:39	2:39	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	21:31	2	
SIMPLE_DECL	4:1	4:52	3	PidginStatusBox * statusbox ; statusbox = PIDGIN_STATUS_BOX ( obj ) ;
VAR_DECL	4:1	4:18	4	PidginStatusBox * statusbox ; statusbox = PIDGIN_STATUS_BOX ( obj )
TYPE	4:1	4:17	5	PidginStatusBox *
TYPE_NAME	4:1	4:1	6	PidginStatusBox
LEAF_NODE	4:1	4:1	7	PidginStatusBox
POINTER	4:17	4:17	6	*
LEAF_NODE	4:17	4:17	7	*
NAME	4:18	4:18	5	statusbox
LEAF_NODE	4:18	4:18	6	statusbox
LEAF_NODE	0:0	0:0	5	;
INIT	4:18	4:18	5	statusbox = PIDGIN_STATUS_BOX ( obj )
ASSIGN	4:18	4:30	6	statusbox = PIDGIN_STATUS_BOX ( obj )
LVAL	4:18	4:18	7	statusbox
NAME	4:18	4:18	8	statusbox
LEAF_NODE	4:18	4:18	9	statusbox
ASSIGN_OP	4:28	4:28	7	=
LEAF_NODE	4:28	4:28	8	=
RVAL	4:30	4:30	7	PIDGIN_STATUS_BOX ( obj )
FUNCTION_CALL	4:30	4:51	8	PIDGIN_STATUS_BOX ( obj )
CALLEE	4:30	4:30	9	PIDGIN_STATUS_BOX
LEAF_NODE	4:30	4:30	10	PIDGIN_STATUS_BOX
LEAF_NODE	4:47	4:47	9	(
ARGUMENT	4:48	4:48	9	obj
FIELD	4:48	4:48	10	obj
LEAF_NODE	4:48	4:48	11	obj
LEAF_NODE	4:51	4:51	9	)
LEAF_NODE	4:52	4:52	4	;
SIMPLE_DECL	5:1	5:8	3	gsize i ;
VAR_DECL	5:1	5:7	4	gsize i
TYPE	5:1	5:1	5	gsize
TYPE_NAME	5:1	5:1	6	gsize
LEAF_NODE	5:1	5:1	7	gsize
NAME	5:7	5:7	5	i
LEAF_NODE	5:7	5:7	6	i
LEAF_NODE	5:8	5:8	4	;
EXPR_STATEMENT	6:1	6:47	3	purple_signals_disconnect_by_handle ( statusbox ) ;
EXPR	6:1	6:1	4	purple_signals_disconnect_by_handle ( statusbox )
FUNCTION_CALL	6:1	6:46	5	purple_signals_disconnect_by_handle ( statusbox )
CALLEE	6:1	6:1	6	purple_signals_disconnect_by_handle
LEAF_NODE	6:1	6:1	7	purple_signals_disconnect_by_handle
LEAF_NODE	6:36	6:36	6	(
ARGUMENT	6:37	6:37	6	statusbox
FIELD	6:37	6:37	7	statusbox
LEAF_NODE	6:37	6:37	8	statusbox
LEAF_NODE	6:46	6:46	6	)
LEAF_NODE	6:47	6:47	4	;
EXPR_STATEMENT	7:1	7:45	3	purple_prefs_disconnect_by_handle ( statusbox ) ;
EXPR	7:1	7:1	4	purple_prefs_disconnect_by_handle ( statusbox )
FUNCTION_CALL	7:1	7:44	5	purple_prefs_disconnect_by_handle ( statusbox )
CALLEE	7:1	7:1	6	purple_prefs_disconnect_by_handle
LEAF_NODE	7:1	7:1	7	purple_prefs_disconnect_by_handle
LEAF_NODE	7:34	7:34	6	(
ARGUMENT	7:35	7:35	6	statusbox
FIELD	7:35	7:35	7	statusbox
LEAF_NODE	7:35	7:35	8	statusbox
LEAF_NODE	7:44	7:44	6	)
LEAF_NODE	7:45	7:45	4	;
EXPR_STATEMENT	8:1	8:28	3	destroy_icon_box ( statusbox ) ;
EXPR	8:1	8:1	4	destroy_icon_box ( statusbox )
FUNCTION_CALL	8:1	8:27	5	destroy_icon_box ( statusbox )
CALLEE	8:1	8:1	6	destroy_icon_box
LEAF_NODE	8:1	8:1	7	destroy_icon_box
LEAF_NODE	8:17	8:17	6	(
ARGUMENT	8:18	8:18	6	statusbox
FIELD	8:18	8:18	7	statusbox
LEAF_NODE	8:18	8:18	8	statusbox
LEAF_NODE	8:27	8:27	6	)
LEAF_NODE	8:28	8:28	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	statusbox -> active_row
EXPR	9:5	9:5	5	statusbox -> active_row
FIELD	9:5	9:16	6	statusbox -> active_row
LEAF_NODE	9:5	9:5	7	statusbox
LEAF_NODE	9:14	9:14	7	->
LEAF_NODE	9:16	9:16	7	active_row
LEAF_NODE	9:26	9:26	4	)
STATEMENTS	10:2	10:2	4	
EXPR_STATEMENT	10:2	10:52	5	gtk_tree_row_reference_free ( statusbox -> active_row ) ;
EXPR	10:2	10:2	6	gtk_tree_row_reference_free ( statusbox -> active_row )
FUNCTION_CALL	10:2	10:51	7	gtk_tree_row_reference_free ( statusbox -> active_row )
CALLEE	10:2	10:2	8	gtk_tree_row_reference_free
LEAF_NODE	10:2	10:2	9	gtk_tree_row_reference_free
LEAF_NODE	10:29	10:29	8	(
ARGUMENT	10:30	10:30	8	statusbox -> active_row
FIELD	10:30	10:41	9	statusbox -> active_row
LEAF_NODE	10:30	10:30	10	statusbox
LEAF_NODE	10:39	10:39	10	->
LEAF_NODE	10:41	10:41	10	active_row
LEAF_NODE	10:51	10:51	8	)
LEAF_NODE	10:52	10:52	6	;
ITERATION	11:1	11:67	3	
KEYWORD	11:1	11:1	4	for
LEAF_NODE	11:1	11:1	5	for
LEAF_NODE	11:5	11:5	4	(
FOR_INIT	11:6	11:11	4	i = 0 ;
EXPR	11:6	11:6	5	i = 0
ASSIGN	11:6	11:10	6	i = 0
LVAL	11:6	11:6	7	i
FIELD	11:6	11:6	8	i
LEAF_NODE	11:6	11:6	9	i
ASSIGN_OP	11:8	11:8	7	=
LEAF_NODE	11:8	11:8	8	=
RVAL	11:10	11:10	7	0
FIELD	11:10	11:10	8	0
LEAF_NODE	11:10	11:10	9	0
LEAF_NODE	11:11	11:11	5	;
CONDITION	11:13	11:13	4	i < G_N_ELEMENTS ( statusbox -> connecting_pixbufs )
EXPR	11:13	11:17	5	i < G_N_ELEMENTS ( statusbox -> connecting_pixbufs )
FIELD	11:13	11:13	6	i
LEAF_NODE	11:13	11:13	7	i
REL_OPERATOR	11:15	11:15	6	<
LEAF_NODE	11:15	11:15	7	<
FUNCTION_CALL	11:17	11:59	6	G_N_ELEMENTS ( statusbox -> connecting_pixbufs )
CALLEE	11:17	11:17	7	G_N_ELEMENTS
LEAF_NODE	11:17	11:17	8	G_N_ELEMENTS
LEAF_NODE	11:29	11:29	7	(
ARGUMENT	11:30	11:30	7	statusbox -> connecting_pixbufs
FIELD	11:30	11:41	8	statusbox -> connecting_pixbufs
LEAF_NODE	11:30	11:30	9	statusbox
LEAF_NODE	11:39	11:39	9	->
LEAF_NODE	11:41	11:41	9	connecting_pixbufs
LEAF_NODE	11:59	11:59	7	)
LEAF_NODE	11:60	11:60	4	;
FOR_EXPR	11:62	11:62	4	i ++
EXPR	11:62	11:62	5	i ++
FIELD	11:62	11:63	6	i ++
LEAF_NODE	11:62	11:62	7	i
LEAF_NODE	11:63	11:63	7	++
LEAF_NODE	11:65	11:65	4	)
STATEMENTS	11:67	14:1	4	
LEAF_NODE	11:67	11:67	5	{
STATEMENTS	12:2	12:2	5	
SELECTION	12:2	13:3	6	
KEYWORD	12:2	12:2	7	if
LEAF_NODE	12:2	12:2	8	if
LEAF_NODE	12:5	12:5	7	(
CONDITION	12:6	12:6	7	statusbox -> connecting_pixbufs [ i ] != NULL
EXPR	12:6	12:42	8	statusbox -> connecting_pixbufs [ i ] != NULL
FIELD	12:6	12:37	9	statusbox -> connecting_pixbufs [ i ]
LEAF_NODE	12:6	12:6	10	statusbox
LEAF_NODE	12:15	12:15	10	->
LEAF_NODE	12:17	12:17	10	connecting_pixbufs
LEAF_NODE	12:35	12:35	10	[
EXPR	12:36	12:36	10	i
FIELD	12:36	12:36	11	i
LEAF_NODE	12:36	12:36	12	i
LEAF_NODE	12:37	12:37	10	]
EQ_OPERATOR	12:39	12:39	9	!=
LEAF_NODE	12:39	12:39	10	!=
FIELD	12:42	12:42	9	NULL
LEAF_NODE	12:42	12:42	10	NULL
LEAF_NODE	12:46	12:46	7	)
STATEMENTS	13:3	13:3	7	
EXPR_STATEMENT	13:3	13:61	8	g_object_unref ( G_OBJECT ( statusbox -> connecting_pixbufs [ i ] ) ) ;
EXPR	13:3	13:3	9	g_object_unref ( G_OBJECT ( statusbox -> connecting_pixbufs [ i ] ) )
FUNCTION_CALL	13:3	13:60	10	g_object_unref ( G_OBJECT ( statusbox -> connecting_pixbufs [ i ] ) )
CALLEE	13:3	13:3	11	g_object_unref
LEAF_NODE	13:3	13:3	12	g_object_unref
LEAF_NODE	13:17	13:17	11	(
ARGUMENT	13:18	13:18	11	G_OBJECT ( statusbox -> connecting_pixbufs [ i ] )
FUNCTION_CALL	13:18	13:59	12	G_OBJECT ( statusbox -> connecting_pixbufs [ i ] )
CALLEE	13:18	13:18	13	G_OBJECT
LEAF_NODE	13:18	13:18	14	G_OBJECT
LEAF_NODE	13:26	13:26	13	(
ARGUMENT	13:27	13:27	13	statusbox -> connecting_pixbufs [ i ]
FIELD	13:27	13:58	14	statusbox -> connecting_pixbufs [ i ]
LEAF_NODE	13:27	13:27	15	statusbox
LEAF_NODE	13:36	13:36	15	->
LEAF_NODE	13:38	13:38	15	connecting_pixbufs
LEAF_NODE	13:56	13:56	15	[
EXPR	13:57	13:57	15	i
FIELD	13:57	13:57	16	i
LEAF_NODE	13:57	13:57	17	i
LEAF_NODE	13:58	13:58	15	]
LEAF_NODE	13:59	13:59	13	)
LEAF_NODE	13:60	13:60	11	)
LEAF_NODE	13:61	13:61	9	;
LEAF_NODE	14:1	14:1	5	}
ITERATION	15:1	15:63	3	
KEYWORD	15:1	15:1	4	for
LEAF_NODE	15:1	15:1	5	for
LEAF_NODE	15:5	15:5	4	(
FOR_INIT	15:6	15:11	4	i = 0 ;
EXPR	15:6	15:6	5	i = 0
ASSIGN	15:6	15:10	6	i = 0
LVAL	15:6	15:6	7	i
FIELD	15:6	15:6	8	i
LEAF_NODE	15:6	15:6	9	i
ASSIGN_OP	15:8	15:8	7	=
LEAF_NODE	15:8	15:8	8	=
RVAL	15:10	15:10	7	0
FIELD	15:10	15:10	8	0
LEAF_NODE	15:10	15:10	9	0
LEAF_NODE	15:11	15:11	5	;
CONDITION	15:13	15:13	4	i < G_N_ELEMENTS ( statusbox -> typing_pixbufs )
EXPR	15:13	15:17	5	i < G_N_ELEMENTS ( statusbox -> typing_pixbufs )
FIELD	15:13	15:13	6	i
LEAF_NODE	15:13	15:13	7	i
REL_OPERATOR	15:15	15:15	6	<
LEAF_NODE	15:15	15:15	7	<
FUNCTION_CALL	15:17	15:55	6	G_N_ELEMENTS ( statusbox -> typing_pixbufs )
CALLEE	15:17	15:17	7	G_N_ELEMENTS
LEAF_NODE	15:17	15:17	8	G_N_ELEMENTS
LEAF_NODE	15:29	15:29	7	(
ARGUMENT	15:30	15:30	7	statusbox -> typing_pixbufs
FIELD	15:30	15:41	8	statusbox -> typing_pixbufs
LEAF_NODE	15:30	15:30	9	statusbox
LEAF_NODE	15:39	15:39	9	->
LEAF_NODE	15:41	15:41	9	typing_pixbufs
LEAF_NODE	15:55	15:55	7	)
LEAF_NODE	15:56	15:56	4	;
FOR_EXPR	15:58	15:58	4	i ++
EXPR	15:58	15:58	5	i ++
FIELD	15:58	15:59	6	i ++
LEAF_NODE	15:58	15:58	7	i
LEAF_NODE	15:59	15:59	7	++
LEAF_NODE	15:61	15:61	4	)
STATEMENTS	15:63	18:1	4	
LEAF_NODE	15:63	15:63	5	{
STATEMENTS	16:2	16:2	5	
SELECTION	16:2	17:3	6	
KEYWORD	16:2	16:2	7	if
LEAF_NODE	16:2	16:2	8	if
LEAF_NODE	16:5	16:5	7	(
CONDITION	16:6	16:6	7	statusbox -> typing_pixbufs [ i ] != NULL
EXPR	16:6	16:38	8	statusbox -> typing_pixbufs [ i ] != NULL
FIELD	16:6	16:33	9	statusbox -> typing_pixbufs [ i ]
LEAF_NODE	16:6	16:6	10	statusbox
LEAF_NODE	16:15	16:15	10	->
LEAF_NODE	16:17	16:17	10	typing_pixbufs
LEAF_NODE	16:31	16:31	10	[
EXPR	16:32	16:32	10	i
FIELD	16:32	16:32	11	i
LEAF_NODE	16:32	16:32	12	i
LEAF_NODE	16:33	16:33	10	]
EQ_OPERATOR	16:35	16:35	9	!=
LEAF_NODE	16:35	16:35	10	!=
FIELD	16:38	16:38	9	NULL
LEAF_NODE	16:38	16:38	10	NULL
LEAF_NODE	16:42	16:42	7	)
STATEMENTS	17:3	17:3	7	
EXPR_STATEMENT	17:3	17:57	8	g_object_unref ( G_OBJECT ( statusbox -> typing_pixbufs [ i ] ) ) ;
EXPR	17:3	17:3	9	g_object_unref ( G_OBJECT ( statusbox -> typing_pixbufs [ i ] ) )
FUNCTION_CALL	17:3	17:56	10	g_object_unref ( G_OBJECT ( statusbox -> typing_pixbufs [ i ] ) )
CALLEE	17:3	17:3	11	g_object_unref
LEAF_NODE	17:3	17:3	12	g_object_unref
LEAF_NODE	17:17	17:17	11	(
ARGUMENT	17:18	17:18	11	G_OBJECT ( statusbox -> typing_pixbufs [ i ] )
FUNCTION_CALL	17:18	17:55	12	G_OBJECT ( statusbox -> typing_pixbufs [ i ] )
CALLEE	17:18	17:18	13	G_OBJECT
LEAF_NODE	17:18	17:18	14	G_OBJECT
LEAF_NODE	17:26	17:26	13	(
ARGUMENT	17:27	17:27	13	statusbox -> typing_pixbufs [ i ]
FIELD	17:27	17:54	14	statusbox -> typing_pixbufs [ i ]
LEAF_NODE	17:27	17:27	15	statusbox
LEAF_NODE	17:36	17:36	15	->
LEAF_NODE	17:38	17:38	15	typing_pixbufs
LEAF_NODE	17:52	17:52	15	[
EXPR	17:53	17:53	15	i
FIELD	17:53	17:53	16	i
LEAF_NODE	17:53	17:53	17	i
LEAF_NODE	17:54	17:54	15	]
LEAF_NODE	17:55	17:55	13	)
LEAF_NODE	17:56	17:56	11	)
LEAF_NODE	17:57	17:57	9	;
LEAF_NODE	18:1	18:1	5	}
EXPR_STATEMENT	19:1	19:43	3	g_object_unref ( G_OBJECT ( statusbox -> store ) ) ;
EXPR	19:1	19:1	4	g_object_unref ( G_OBJECT ( statusbox -> store ) )
FUNCTION_CALL	19:1	19:42	5	g_object_unref ( G_OBJECT ( statusbox -> store ) )
CALLEE	19:1	19:1	6	g_object_unref
LEAF_NODE	19:1	19:1	7	g_object_unref
LEAF_NODE	19:15	19:15	6	(
ARGUMENT	19:16	19:16	6	G_OBJECT ( statusbox -> store )
FUNCTION_CALL	19:16	19:41	7	G_OBJECT ( statusbox -> store )
CALLEE	19:16	19:16	8	G_OBJECT
LEAF_NODE	19:16	19:16	9	G_OBJECT
LEAF_NODE	19:24	19:24	8	(
ARGUMENT	19:25	19:25	8	statusbox -> store
FIELD	19:25	19:36	9	statusbox -> store
LEAF_NODE	19:25	19:25	10	statusbox
LEAF_NODE	19:34	19:34	10	->
LEAF_NODE	19:36	19:36	10	store
LEAF_NODE	19:41	19:41	8	)
LEAF_NODE	19:42	19:42	6	)
LEAF_NODE	19:43	19:43	4	;
EXPR_STATEMENT	20:1	20:52	3	g_object_unref ( G_OBJECT ( statusbox -> dropdown_store ) ) ;
EXPR	20:1	20:1	4	g_object_unref ( G_OBJECT ( statusbox -> dropdown_store ) )
FUNCTION_CALL	20:1	20:51	5	g_object_unref ( G_OBJECT ( statusbox -> dropdown_store ) )
CALLEE	20:1	20:1	6	g_object_unref
LEAF_NODE	20:1	20:1	7	g_object_unref
LEAF_NODE	20:15	20:15	6	(
ARGUMENT	20:16	20:16	6	G_OBJECT ( statusbox -> dropdown_store )
FUNCTION_CALL	20:16	20:50	7	G_OBJECT ( statusbox -> dropdown_store )
CALLEE	20:16	20:16	8	G_OBJECT
LEAF_NODE	20:16	20:16	9	G_OBJECT
LEAF_NODE	20:24	20:24	8	(
ARGUMENT	20:25	20:25	8	statusbox -> dropdown_store
FIELD	20:25	20:36	9	statusbox -> dropdown_store
LEAF_NODE	20:25	20:25	10	statusbox
LEAF_NODE	20:34	20:34	10	->
LEAF_NODE	20:36	20:36	10	dropdown_store
LEAF_NODE	20:50	20:50	8	)
LEAF_NODE	20:51	20:51	6	)
LEAF_NODE	20:52	20:52	4	;
LEAF_NODE	21:1	21:1	3	G_OBJECT_CLASS
LEAF_NODE	21:15	21:15	3	(
LEAF_NODE	21:16	21:16	3	parent_class
LEAF_NODE	21:28	21:28	3	)
LEAF_NODE	21:29	21:29	3	->
EXPR_STATEMENT	21:31	21:44	3	finalize ( obj ) ;
EXPR	21:31	21:31	4	finalize ( obj )
FUNCTION_CALL	21:31	21:43	5	finalize ( obj )
CALLEE	21:31	21:31	6	finalize
LEAF_NODE	21:31	21:31	7	finalize
LEAF_NODE	21:39	21:39	6	(
ARGUMENT	21:40	21:40	6	obj
FIELD	21:40	21:40	7	obj
LEAF_NODE	21:40	21:40	8	obj
LEAF_NODE	21:43	21:43	6	)
LEAF_NODE	21:44	21:44	4	;
LEAF_NODE	22:0	22:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	send_timer_cb
LEAF_NODE	2:0	2:0	3	send_timer_cb
PARAMETER_LIST	2:13	2:27	2	( gpointer data )
LEAF_NODE	2:13	2:13	3	(
PARAMETER_DECL	2:14	2:23	3	gpointer data
TYPE	2:14	2:14	4	gpointer
TYPE_NAME	2:14	2:14	5	gpointer
LEAF_NODE	2:14	2:14	6	gpointer
NAME	2:23	2:23	4	data
LEAF_NODE	2:23	2:23	5	data
LEAF_NODE	2:27	2:27	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SIMPLE_DECL	4:1	4:27	3	PurpleBOSHConnection * bosh ;
VAR_DECL	4:1	4:23	4	PurpleBOSHConnection * bosh
TYPE	4:1	4:22	5	PurpleBOSHConnection *
TYPE_NAME	4:1	4:1	6	PurpleBOSHConnection
LEAF_NODE	4:1	4:1	7	PurpleBOSHConnection
POINTER	4:22	4:22	6	*
LEAF_NODE	4:22	4:22	7	*
NAME	4:23	4:23	5	bosh
LEAF_NODE	4:23	4:23	6	bosh
LEAF_NODE	4:27	4:27	4	;
EXPR_STATEMENT	5:1	5:12	3	bosh = data ;
EXPR	5:1	5:1	4	bosh = data
ASSIGN	5:1	5:8	5	bosh = data
LVAL	5:1	5:1	6	bosh
FIELD	5:1	5:1	7	bosh
LEAF_NODE	5:1	5:1	8	bosh
ASSIGN_OP	5:6	5:6	6	=
LEAF_NODE	5:6	5:6	7	=
RVAL	5:8	5:8	6	data
FIELD	5:8	5:8	7	data
LEAF_NODE	5:8	5:8	8	data
LEAF_NODE	5:12	5:12	4	;
EXPR_STATEMENT	6:1	6:21	3	bosh -> send_timer = 0 ;
EXPR	6:1	6:1	4	bosh -> send_timer = 0
ASSIGN	6:1	6:20	5	bosh -> send_timer = 0
LVAL	6:1	6:1	6	bosh -> send_timer
FIELD	6:1	6:7	7	bosh -> send_timer
LEAF_NODE	6:1	6:1	8	bosh
LEAF_NODE	6:5	6:5	8	->
LEAF_NODE	6:7	6:7	8	send_timer
ASSIGN_OP	6:18	6:18	6	=
LEAF_NODE	6:18	6:18	7	=
RVAL	6:20	6:20	6	0
FIELD	6:20	6:20	7	0
LEAF_NODE	6:20	6:20	8	0
LEAF_NODE	6:21	6:21	4	;
EXPR_STATEMENT	7:1	7:54	3	jabber_bosh_connection_send ( bosh , PACKET_FLUSH , NULL ) ;
EXPR	7:1	7:1	4	jabber_bosh_connection_send ( bosh , PACKET_FLUSH , NULL )
FUNCTION_CALL	7:1	7:53	5	jabber_bosh_connection_send ( bosh , PACKET_FLUSH , NULL )
CALLEE	7:1	7:1	6	jabber_bosh_connection_send
LEAF_NODE	7:1	7:1	7	jabber_bosh_connection_send
LEAF_NODE	7:28	7:28	6	(
ARGUMENT	7:29	7:29	6	bosh
FIELD	7:29	7:29	7	bosh
LEAF_NODE	7:29	7:29	8	bosh
LEAF_NODE	7:33	7:33	6	,
ARGUMENT	7:35	7:35	6	PACKET_FLUSH
FIELD	7:35	7:35	7	PACKET_FLUSH
LEAF_NODE	7:35	7:35	8	PACKET_FLUSH
LEAF_NODE	7:47	7:47	6	,
ARGUMENT	7:49	7:49	6	NULL
FIELD	7:49	7:49	7	NULL
LEAF_NODE	7:49	7:49	8	NULL
LEAF_NODE	7:53	7:53	6	)
LEAF_NODE	7:54	7:54	4	;
JUMP_STATEMENT	8:1	8:13	3	return FALSE ;
KEYWORD	8:1	8:1	4	return
LEAF_NODE	8:1	8:1	5	return
DESTINATION	8:8	8:8	4	FALSE
EXPR	8:8	8:8	5	FALSE
FIELD	8:8	8:8	6	FALSE
LEAF_NODE	8:8	8:8	7	FALSE
LEAF_NODE	8:13	8:13	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_buddy_set_protocol_data
LEAF_NODE	2:0	2:0	3	purple_buddy_set_protocol_data
PARAMETER_LIST	2:30	2:64	2	( PurpleBuddy * buddy , gpointer data )
LEAF_NODE	2:30	2:30	3	(
PARAMETER_DECL	2:31	2:44	3	PurpleBuddy * buddy
TYPE	2:31	2:43	4	PurpleBuddy *
TYPE_NAME	2:31	2:31	5	PurpleBuddy
LEAF_NODE	2:31	2:31	6	PurpleBuddy
POINTER	2:43	2:43	5	*
LEAF_NODE	2:43	2:43	6	*
NAME	2:44	2:44	4	buddy
LEAF_NODE	2:44	2:44	5	buddy
LEAF_NODE	2:49	2:49	3	,
PARAMETER_DECL	2:51	2:60	3	gpointer data
TYPE	2:51	2:51	4	gpointer
TYPE_NAME	2:51	2:51	5	gpointer
LEAF_NODE	2:51	2:51	6	gpointer
NAME	2:60	2:60	4	data
LEAF_NODE	2:60	2:60	5	data
LEAF_NODE	2:64	2:64	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:32	3	g_return_if_fail ( buddy != NULL ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( buddy != NULL )
FUNCTION_CALL	4:1	4:31	5	g_return_if_fail ( buddy != NULL )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:27	6	buddy != NULL
FIELD	4:18	4:18	7	buddy
LEAF_NODE	4:18	4:18	8	buddy
EQ_OPERATOR	4:24	4:24	7	!=
LEAF_NODE	4:24	4:24	8	!=
FIELD	4:27	4:27	7	NULL
LEAF_NODE	4:27	4:27	8	NULL
LEAF_NODE	4:31	4:31	6	)
LEAF_NODE	4:32	4:32	4	;
EXPR_STATEMENT	5:1	5:25	3	buddy -> proto_data = data ;
EXPR	5:1	5:1	4	buddy -> proto_data = data
ASSIGN	5:1	5:21	5	buddy -> proto_data = data
LVAL	5:1	5:1	6	buddy -> proto_data
FIELD	5:1	5:8	7	buddy -> proto_data
LEAF_NODE	5:1	5:1	8	buddy
LEAF_NODE	5:6	5:6	8	->
LEAF_NODE	5:8	5:8	8	proto_data
ASSIGN_OP	5:19	5:19	6	=
LEAF_NODE	5:19	5:19	7	=
RVAL	5:21	5:21	6	data
FIELD	5:21	5:21	7	data
LEAF_NODE	5:21	5:21	8	data
LEAF_NODE	5:25	5:25	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	50:0	1	
RETURN_TYPE	1:0	1:0	2	GType
TYPE_NAME	1:0	1:0	3	GType
LEAF_NODE	1:0	1:0	4	GType
FUNCTION_NAME	2:0	2:0	2	purple_media_element_type_get_type
LEAF_NODE	2:0	2:0	3	purple_media_element_type_get_type
PARAMETER_LIST	2:34	2:35	2	( )
LEAF_NODE	2:34	2:34	3	(
LEAF_NODE	2:35	2:35	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	49:1	2	
LEAF_NODE	4:1	4:1	3	static
SIMPLE_DECL	4:8	4:22	3	GType type ; type = 0 ;
VAR_DECL	4:8	4:14	4	GType type ; type = 0
TYPE	4:8	4:8	5	GType
TYPE_NAME	4:8	4:8	6	GType
LEAF_NODE	4:8	4:8	7	GType
NAME	4:14	4:14	5	type
LEAF_NODE	4:14	4:14	6	type
LEAF_NODE	0:0	0:0	5	;
INIT	4:14	4:14	5	type = 0
ASSIGN	4:14	4:21	6	type = 0
LVAL	4:14	4:14	7	type
NAME	4:14	4:14	8	type
LEAF_NODE	4:14	4:14	9	type
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:21	7	0
FIELD	4:21	4:21	8	0
LEAF_NODE	4:21	4:21	9	0
LEAF_NODE	4:22	4:22	4	;
SELECTION	5:1	5:16	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	type == 0
EXPR	5:5	5:13	5	type == 0
FIELD	5:5	5:5	6	type
LEAF_NODE	5:5	5:5	7	type
EQ_OPERATOR	5:10	5:10	6	==
LEAF_NODE	5:10	5:10	7	==
FIELD	5:13	5:13	6	0
LEAF_NODE	5:13	5:13	7	0
LEAF_NODE	5:14	5:14	4	)
STATEMENTS	5:16	48:1	4	
LEAF_NODE	5:16	5:16	5	{
STATEMENTS	6:2	46:2	5	
LEAF_NODE	6:2	6:2	6	static
LEAF_NODE	6:9	6:9	6	const
LEAF_NODE	6:15	6:15	6	GFlagsValue
LEAF_NODE	6:27	6:27	6	values
LEAF_NODE	6:33	6:33	6	[
LEAF_NODE	6:34	6:34	6	]
LEAF_NODE	6:36	6:36	6	=
LEAF_NODE	6:38	6:38	6	{
STATEMENTS	7:3	44:19	6	
LEAF_NODE	7:3	7:3	7	{
STATEMENTS	7:5	8:33	7	
LEAF_NODE	7:5	7:5	8	PURPLE_MEDIA_ELEMENT_NONE
LEAF_NODE	7:30	7:30	8	,
LEAF_NODE	8:4	8:4	8	"PURPLE_MEDIA_ELEMENT_NONE"
LEAF_NODE	8:31	8:31	8	,
LEAF_NODE	8:33	8:33	8	"none"
LEAF_NODE	8:40	8:40	7	}
LEAF_NODE	8:41	8:41	7	,
LEAF_NODE	9:3	9:3	7	{
STATEMENTS	9:5	10:34	7	
LEAF_NODE	9:5	9:5	8	PURPLE_MEDIA_ELEMENT_AUDIO
LEAF_NODE	9:31	9:31	8	,
LEAF_NODE	10:4	10:4	8	"PURPLE_MEDIA_ELEMENT_AUDIO"
LEAF_NODE	10:32	10:32	8	,
LEAF_NODE	10:34	10:34	8	"audio"
LEAF_NODE	10:42	10:42	7	}
LEAF_NODE	10:43	10:43	7	,
LEAF_NODE	11:3	11:3	7	{
STATEMENTS	11:5	12:34	7	
LEAF_NODE	11:5	11:5	8	PURPLE_MEDIA_ELEMENT_VIDEO
LEAF_NODE	11:31	11:31	8	,
LEAF_NODE	12:4	12:4	8	"PURPLE_MEDIA_ELEMENT_VIDEO"
LEAF_NODE	12:32	12:32	8	,
LEAF_NODE	12:34	12:34	8	"video"
LEAF_NODE	12:42	12:42	7	}
LEAF_NODE	12:43	12:43	7	,
LEAF_NODE	13:3	13:3	7	{
STATEMENTS	13:5	15:4	7	
LEAF_NODE	13:5	13:5	8	PURPLE_MEDIA_ELEMENT_AUDIO_VIDEO
LEAF_NODE	13:37	13:37	8	,
LEAF_NODE	14:4	14:4	8	"PURPLE_MEDIA_ELEMENT_AUDIO_VIDEO"
LEAF_NODE	14:38	14:38	8	,
LEAF_NODE	15:4	15:4	8	"audio-video"
LEAF_NODE	15:18	15:18	7	}
LEAF_NODE	15:19	15:19	7	,
LEAF_NODE	16:3	16:3	7	{
STATEMENTS	16:5	17:36	7	
LEAF_NODE	16:5	16:5	8	PURPLE_MEDIA_ELEMENT_NO_SRCS
LEAF_NODE	16:33	16:33	8	,
LEAF_NODE	17:4	17:4	8	"PURPLE_MEDIA_ELEMENT_NO_SRCS"
LEAF_NODE	17:34	17:34	8	,
LEAF_NODE	17:36	17:36	8	"no-srcs"
LEAF_NODE	17:46	17:46	7	}
LEAF_NODE	17:47	17:47	7	,
LEAF_NODE	18:3	18:3	7	{
STATEMENTS	18:5	19:36	7	
LEAF_NODE	18:5	18:5	8	PURPLE_MEDIA_ELEMENT_ONE_SRC
LEAF_NODE	18:33	18:33	8	,
LEAF_NODE	19:4	19:4	8	"PURPLE_MEDIA_ELEMENT_ONE_SRC"
LEAF_NODE	19:34	19:34	8	,
LEAF_NODE	19:36	19:36	8	"one-src"
LEAF_NODE	19:46	19:46	7	}
LEAF_NODE	19:47	19:47	7	,
LEAF_NODE	20:3	20:3	7	{
STATEMENTS	20:5	22:4	7	
LEAF_NODE	20:5	20:5	8	PURPLE_MEDIA_ELEMENT_MULTI_SRC
LEAF_NODE	20:35	20:35	8	,
LEAF_NODE	21:4	21:4	8	"PURPLE_MEDIA_ELEMENT_MULTI_SRC"
LEAF_NODE	21:36	21:36	8	,
LEAF_NODE	22:4	22:4	8	"multi-src"
LEAF_NODE	22:16	22:16	7	}
LEAF_NODE	22:17	22:17	7	,
LEAF_NODE	23:3	23:3	7	{
STATEMENTS	23:5	25:4	7	
LEAF_NODE	23:5	23:5	8	PURPLE_MEDIA_ELEMENT_REQUEST_SRC
LEAF_NODE	23:37	23:37	8	,
LEAF_NODE	24:4	24:4	8	"PURPLE_MEDIA_ELEMENT_REQUEST_SRC"
LEAF_NODE	24:38	24:38	8	,
LEAF_NODE	25:4	25:4	8	"request-src"
LEAF_NODE	25:18	25:18	7	}
LEAF_NODE	25:19	25:19	7	,
LEAF_NODE	26:3	26:3	7	{
STATEMENTS	26:5	27:37	7	
LEAF_NODE	26:5	26:5	8	PURPLE_MEDIA_ELEMENT_NO_SINKS
LEAF_NODE	26:34	26:34	8	,
LEAF_NODE	27:4	27:4	8	"PURPLE_MEDIA_ELEMENT_NO_SINKS"
LEAF_NODE	27:35	27:35	8	,
LEAF_NODE	27:37	27:37	8	"no-sinks"
LEAF_NODE	27:48	27:48	7	}
LEAF_NODE	27:49	27:49	7	,
LEAF_NODE	28:3	28:3	7	{
STATEMENTS	28:5	29:37	7	
LEAF_NODE	28:5	28:5	8	PURPLE_MEDIA_ELEMENT_ONE_SINK
LEAF_NODE	28:34	28:34	8	,
LEAF_NODE	29:4	29:4	8	"PURPLE_MEDIA_ELEMENT_ONE_SINK"
LEAF_NODE	29:35	29:35	8	,
LEAF_NODE	29:37	29:37	8	"one-sink"
LEAF_NODE	29:48	29:48	7	}
LEAF_NODE	29:49	29:49	7	,
LEAF_NODE	30:3	30:3	7	{
STATEMENTS	30:5	32:4	7	
LEAF_NODE	30:5	30:5	8	PURPLE_MEDIA_ELEMENT_MULTI_SINK
LEAF_NODE	30:36	30:36	8	,
LEAF_NODE	31:4	31:4	8	"PURPLE_MEDIA_ELEMENT_MULTI_SINK"
LEAF_NODE	31:37	31:37	8	,
LEAF_NODE	32:4	32:4	8	"multi-sink"
LEAF_NODE	32:17	32:17	7	}
LEAF_NODE	32:18	32:18	7	,
LEAF_NODE	33:3	33:3	7	{
STATEMENTS	33:5	35:4	7	
LEAF_NODE	33:5	33:5	8	PURPLE_MEDIA_ELEMENT_REQUEST_SINK
LEAF_NODE	33:38	33:38	8	,
LEAF_NODE	34:4	34:4	8	"PURPLE_MEDIA_ELEMENT_REQUEST_SINK"
LEAF_NODE	34:39	34:39	8	,
LEAF_NODE	35:4	35:4	8	"request-sink"
LEAF_NODE	35:19	35:19	7	}
LEAF_NODE	35:20	35:20	7	,
LEAF_NODE	36:3	36:3	7	{
STATEMENTS	36:5	37:35	7	
LEAF_NODE	36:5	36:5	8	PURPLE_MEDIA_ELEMENT_UNIQUE
LEAF_NODE	36:32	36:32	8	,
LEAF_NODE	37:4	37:4	8	"PURPLE_MEDIA_ELEMENT_UNIQUE"
LEAF_NODE	37:33	37:33	8	,
LEAF_NODE	37:35	37:35	8	"unique"
LEAF_NODE	37:44	37:44	7	}
LEAF_NODE	37:45	37:45	7	,
LEAF_NODE	38:3	38:3	7	{
STATEMENTS	38:5	39:32	7	
LEAF_NODE	38:5	38:5	8	PURPLE_MEDIA_ELEMENT_SRC
LEAF_NODE	38:29	38:29	8	,
LEAF_NODE	39:4	39:4	8	"PURPLE_MEDIA_ELEMENT_SRC"
LEAF_NODE	39:30	39:30	8	,
LEAF_NODE	39:32	39:32	8	"src"
LEAF_NODE	39:38	39:38	7	}
LEAF_NODE	39:39	39:39	7	,
LEAF_NODE	40:3	40:3	7	{
STATEMENTS	40:5	41:33	7	
LEAF_NODE	40:5	40:5	8	PURPLE_MEDIA_ELEMENT_SINK
LEAF_NODE	40:30	40:30	8	,
LEAF_NODE	41:4	41:4	8	"PURPLE_MEDIA_ELEMENT_SINK"
LEAF_NODE	41:31	41:31	8	,
LEAF_NODE	41:33	41:33	8	"sink"
LEAF_NODE	41:40	41:40	7	}
LEAF_NODE	41:41	41:41	7	,
LEAF_NODE	42:3	42:3	7	{
STATEMENTS	42:5	43:40	7	
LEAF_NODE	42:5	42:5	8	PURPLE_MEDIA_ELEMENT_APPLICATION
LEAF_NODE	42:37	42:37	8	,
LEAF_NODE	43:4	43:4	8	"PURPLE_MEDIA_ELEMENT_APPLICATION"
LEAF_NODE	43:38	43:38	8	,
LEAF_NODE	43:40	43:40	8	"application"
LEAF_NODE	43:54	43:54	7	}
LEAF_NODE	43:55	43:55	7	,
LEAF_NODE	44:3	44:3	7	{
STATEMENTS	44:5	44:14	7	
LEAF_NODE	44:5	44:5	8	0
LEAF_NODE	44:6	44:6	8	,
LEAF_NODE	44:8	44:8	8	NULL
LEAF_NODE	44:12	44:12	8	,
LEAF_NODE	44:14	44:14	8	NULL
LEAF_NODE	44:19	44:19	7	}
LEAF_NODE	45:2	45:2	6	}
LEAF_NODE	45:3	45:3	6	;
EXPR_STATEMENT	46:2	47:37	6	type = g_flags_register_static ( "PurpleMediaElementType" , values ) ;
EXPR	46:2	46:2	7	type = g_flags_register_static ( "PurpleMediaElementType" , values )
ASSIGN	46:2	46:9	8	type = g_flags_register_static ( "PurpleMediaElementType" , values )
LVAL	46:2	46:2	9	type
FIELD	46:2	46:2	10	type
LEAF_NODE	46:2	46:2	11	type
ASSIGN_OP	46:7	46:7	9	=
LEAF_NODE	46:7	46:7	10	=
RVAL	46:9	46:9	9	g_flags_register_static ( "PurpleMediaElementType" , values )
FUNCTION_CALL	46:9	47:36	10	g_flags_register_static ( "PurpleMediaElementType" , values )
CALLEE	46:9	46:9	11	g_flags_register_static
LEAF_NODE	46:9	46:9	12	g_flags_register_static
LEAF_NODE	46:32	46:32	11	(
ARGUMENT	47:4	47:4	11	"PurpleMediaElementType"
FIELD	47:4	47:4	12	"PurpleMediaElementType"
LEAF_NODE	47:4	47:4	13	"PurpleMediaElementType"
LEAF_NODE	47:28	47:28	11	,
ARGUMENT	47:30	47:30	11	values
FIELD	47:30	47:30	12	values
LEAF_NODE	47:30	47:30	13	values
LEAF_NODE	47:36	47:36	11	)
LEAF_NODE	47:37	47:37	7	;
LEAF_NODE	48:1	48:1	5	}
JUMP_STATEMENT	49:1	49:12	3	return type ;
KEYWORD	49:1	49:1	4	return
LEAF_NODE	49:1	49:1	5	return
DESTINATION	49:8	49:8	4	type
EXPR	49:8	49:8	5	type
FIELD	49:8	49:8	6	type
LEAF_NODE	49:8	49:8	7	type
LEAF_NODE	49:12	49:12	4	;
LEAF_NODE	50:0	50:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	pidgin_blist_sound_method_pref_cb
LEAF_NODE	2:0	2:0	3	pidgin_blist_sound_method_pref_cb
PARAMETER_LIST	2:33	3:43	2	( const char * name , PurplePrefType type , gconstpointer value , gpointer data )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:46	3	const char * name
TYPE	2:34	2:45	4	const char *
TYPE_NAME	2:34	2:40	5	const char
LEAF_NODE	2:34	2:34	6	const
LEAF_NODE	2:40	2:40	6	char
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	name
LEAF_NODE	2:46	2:46	5	name
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:67	3	PurplePrefType type
TYPE	2:52	2:52	4	PurplePrefType
TYPE_NAME	2:52	2:52	5	PurplePrefType
LEAF_NODE	2:52	2:52	6	PurplePrefType
NAME	2:67	2:67	4	type
LEAF_NODE	2:67	2:67	5	type
LEAF_NODE	2:71	2:71	3	,
PARAMETER_DECL	3:9	3:23	3	gconstpointer value
TYPE	3:9	3:9	4	gconstpointer
TYPE_NAME	3:9	3:9	5	gconstpointer
LEAF_NODE	3:9	3:9	6	gconstpointer
NAME	3:23	3:23	4	value
LEAF_NODE	3:23	3:23	5	value
LEAF_NODE	3:28	3:28	3	,
PARAMETER_DECL	3:30	3:39	3	gpointer data
TYPE	3:30	3:30	4	gpointer
TYPE_NAME	3:30	3:30	5	gpointer
LEAF_NODE	3:30	3:30	6	gpointer
NAME	3:39	3:39	4	data
LEAF_NODE	3:39	3:39	5	data
LEAF_NODE	3:43	3:43	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	8:1	2	
SIMPLE_DECL	5:1	5:26	3	gboolean sensitive ; sensitive = TRUE ;
VAR_DECL	5:1	5:10	4	gboolean sensitive ; sensitive = TRUE
TYPE	5:1	5:1	5	gboolean
TYPE_NAME	5:1	5:1	6	gboolean
LEAF_NODE	5:1	5:1	7	gboolean
NAME	5:10	5:10	5	sensitive
LEAF_NODE	5:10	5:10	6	sensitive
LEAF_NODE	0:0	0:0	5	;
INIT	5:10	5:10	5	sensitive = TRUE
ASSIGN	5:10	5:22	6	sensitive = TRUE
LVAL	5:10	5:10	7	sensitive
NAME	5:10	5:10	8	sensitive
LEAF_NODE	5:10	5:10	9	sensitive
ASSIGN_OP	5:20	5:20	7	=
LEAF_NODE	5:20	5:20	8	=
RVAL	5:22	5:22	7	TRUE
FIELD	5:22	5:22	8	TRUE
LEAF_NODE	5:22	5:22	9	TRUE
LEAF_NODE	5:26	5:26	4	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:3	6:3	4	(
CONDITION	6:4	6:4	4	! strcmp ( value , "none" )
EXPR	6:4	6:4	5	! strcmp ( value , "none" )
UNARY_EXPR	6:4	6:5	6	! strcmp ( value , "none" )
UNARY_OPERATOR	6:4	6:4	7	!
LEAF_NODE	6:4	6:4	8	!
FUNCTION_CALL	6:5	6:25	7	strcmp ( value , "none" )
CALLEE	6:5	6:5	8	strcmp
LEAF_NODE	6:5	6:5	9	strcmp
LEAF_NODE	6:11	6:11	8	(
ARGUMENT	6:12	6:12	8	value
FIELD	6:12	6:12	9	value
LEAF_NODE	6:12	6:12	10	value
LEAF_NODE	6:17	6:17	8	,
ARGUMENT	6:19	6:19	8	"none"
FIELD	6:19	6:19	9	"none"
LEAF_NODE	6:19	6:19	10	"none"
LEAF_NODE	6:25	6:25	8	)
LEAF_NODE	6:26	6:26	4	)
STATEMENTS	7:2	7:2	4	
EXPR_STATEMENT	7:2	7:19	5	sensitive = FALSE ;
EXPR	7:2	7:2	6	sensitive = FALSE
ASSIGN	7:2	7:14	7	sensitive = FALSE
LVAL	7:2	7:2	8	sensitive
FIELD	7:2	7:2	9	sensitive
LEAF_NODE	7:2	7:2	10	sensitive
ASSIGN_OP	7:12	7:12	8	=
LEAF_NODE	7:12	7:12	9	=
RVAL	7:14	7:14	8	FALSE
FIELD	7:14	7:14	9	FALSE
LEAF_NODE	7:14	7:14	10	FALSE
LEAF_NODE	7:19	7:19	6	;
EXPR_STATEMENT	8:1	8:106	3	gtk_widget_set_sensitive ( gtk_item_factory_get_widget ( gtkblist -> ift , N_ ( "/Tools/Mute Sounds" ) ) , sensitive ) ;
EXPR	8:1	8:1	4	gtk_widget_set_sensitive ( gtk_item_factory_get_widget ( gtkblist -> ift , N_ ( "/Tools/Mute Sounds" ) ) , sensitive )
FUNCTION_CALL	8:1	8:105	5	gtk_widget_set_sensitive ( gtk_item_factory_get_widget ( gtkblist -> ift , N_ ( "/Tools/Mute Sounds" ) ) , sensitive )
CALLEE	8:1	8:1	6	gtk_widget_set_sensitive
LEAF_NODE	8:1	8:1	7	gtk_widget_set_sensitive
LEAF_NODE	8:25	8:25	6	(
ARGUMENT	8:26	8:26	6	gtk_item_factory_get_widget ( gtkblist -> ift , N_ ( "/Tools/Mute Sounds" ) )
FUNCTION_CALL	8:26	8:93	7	gtk_item_factory_get_widget ( gtkblist -> ift , N_ ( "/Tools/Mute Sounds" ) )
CALLEE	8:26	8:26	8	gtk_item_factory_get_widget
LEAF_NODE	8:26	8:26	9	gtk_item_factory_get_widget
LEAF_NODE	8:53	8:53	8	(
ARGUMENT	8:54	8:54	8	gtkblist -> ift
FIELD	8:54	8:64	9	gtkblist -> ift
LEAF_NODE	8:54	8:54	10	gtkblist
LEAF_NODE	8:62	8:62	10	->
LEAF_NODE	8:64	8:64	10	ift
LEAF_NODE	8:67	8:67	8	,
ARGUMENT	8:69	8:69	8	N_ ( "/Tools/Mute Sounds" )
FUNCTION_CALL	8:69	8:92	9	N_ ( "/Tools/Mute Sounds" )
CALLEE	8:69	8:69	10	N_
LEAF_NODE	8:69	8:69	11	N_
LEAF_NODE	8:71	8:71	10	(
ARGUMENT	8:72	8:72	10	"/Tools/Mute Sounds"
FIELD	8:72	8:72	11	"/Tools/Mute Sounds"
LEAF_NODE	8:72	8:72	12	"/Tools/Mute Sounds"
LEAF_NODE	8:92	8:92	10	)
LEAF_NODE	8:93	8:93	8	)
LEAF_NODE	8:94	8:94	6	,
ARGUMENT	8:96	8:96	6	sensitive
FIELD	8:96	8:96	7	sensitive
LEAF_NODE	8:96	8:96	8	sensitive
LEAF_NODE	8:105	8:105	6	)
LEAF_NODE	8:106	8:106	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	10:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	jabber_features_destroy
LEAF_NODE	2:12	2:12	3	jabber_features_destroy
PARAMETER_LIST	2:35	2:40	2	( void )
LEAF_NODE	2:35	2:35	3	(
PARAMETER_DECL	2:36	2:36	3	void
LEAF_NODE	2:36	2:36	4	void
LEAF_NODE	2:40	2:40	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
ITERATION	4:1	4:25	3	
KEYWORD	4:1	4:1	4	while
LEAF_NODE	4:1	4:1	5	while
LEAF_NODE	4:7	4:7	4	(
CONDITION	4:8	4:8	4	jabber_features
EXPR	4:8	4:8	5	jabber_features
FIELD	4:8	4:8	6	jabber_features
LEAF_NODE	4:8	4:8	7	jabber_features
LEAF_NODE	4:23	4:23	4	)
STATEMENTS	4:25	9:1	4	
LEAF_NODE	4:25	4:25	5	{
STATEMENTS	5:2	8:2	5	
SIMPLE_DECL	5:2	5:48	6	JabberFeature * feature ; feature = jabber_features -> data ;
VAR_DECL	5:2	5:17	7	JabberFeature * feature ; feature = jabber_features -> data
TYPE	5:2	5:16	8	JabberFeature *
TYPE_NAME	5:2	5:2	9	JabberFeature
LEAF_NODE	5:2	5:2	10	JabberFeature
POINTER	5:16	5:16	9	*
LEAF_NODE	5:16	5:16	10	*
NAME	5:17	5:17	8	feature
LEAF_NODE	5:17	5:17	9	feature
LEAF_NODE	0:0	0:0	8	;
INIT	5:17	5:17	8	feature = jabber_features -> data
ASSIGN	5:17	5:27	9	feature = jabber_features -> data
LVAL	5:17	5:17	10	feature
NAME	5:17	5:17	11	feature
LEAF_NODE	5:17	5:17	12	feature
ASSIGN_OP	5:25	5:25	10	=
LEAF_NODE	5:25	5:25	11	=
RVAL	5:27	5:27	10	jabber_features -> data
FIELD	5:27	5:44	11	jabber_features -> data
LEAF_NODE	5:27	5:27	12	jabber_features
LEAF_NODE	5:42	5:42	12	->
LEAF_NODE	5:44	5:44	12	data
LEAF_NODE	5:48	5:48	7	;
LEAF_NODE	6:2	6:2	6	g_free
LEAF_NODE	6:8	6:8	6	(
LEAF_NODE	6:9	6:9	6	feature
LEAF_NODE	6:16	6:16	6	->
LEAF_NODE	6:18	6:18	6	namespace
LEAF_NODE	6:27	6:27	6	)
LEAF_NODE	6:28	6:28	6	;
EXPR_STATEMENT	7:2	7:17	6	g_free ( feature ) ;
EXPR	7:2	7:2	7	g_free ( feature )
FUNCTION_CALL	7:2	7:16	8	g_free ( feature )
CALLEE	7:2	7:2	9	g_free
LEAF_NODE	7:2	7:2	10	g_free
LEAF_NODE	7:8	7:8	9	(
ARGUMENT	7:9	7:9	9	feature
FIELD	7:9	7:9	10	feature
LEAF_NODE	7:9	7:9	11	feature
LEAF_NODE	7:16	7:16	9	)
LEAF_NODE	7:17	7:17	7	;
EXPR_STATEMENT	8:2	8:72	6	jabber_features = g_list_delete_link ( jabber_features , jabber_features ) ;
EXPR	8:2	8:2	7	jabber_features = g_list_delete_link ( jabber_features , jabber_features )
ASSIGN	8:2	8:20	8	jabber_features = g_list_delete_link ( jabber_features , jabber_features )
LVAL	8:2	8:2	9	jabber_features
FIELD	8:2	8:2	10	jabber_features
LEAF_NODE	8:2	8:2	11	jabber_features
ASSIGN_OP	8:18	8:18	9	=
LEAF_NODE	8:18	8:18	10	=
RVAL	8:20	8:20	9	g_list_delete_link ( jabber_features , jabber_features )
FUNCTION_CALL	8:20	8:71	10	g_list_delete_link ( jabber_features , jabber_features )
CALLEE	8:20	8:20	11	g_list_delete_link
LEAF_NODE	8:20	8:20	12	g_list_delete_link
LEAF_NODE	8:38	8:38	11	(
ARGUMENT	8:39	8:39	11	jabber_features
FIELD	8:39	8:39	12	jabber_features
LEAF_NODE	8:39	8:39	13	jabber_features
LEAF_NODE	8:54	8:54	11	,
ARGUMENT	8:56	8:56	11	jabber_features
FIELD	8:56	8:56	12	jabber_features
LEAF_NODE	8:56	8:56	13	jabber_features
LEAF_NODE	8:71	8:71	11	)
LEAF_NODE	8:72	8:72	7	;
LEAF_NODE	9:1	9:1	5	}
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	41:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	search_cb
LEAF_NODE	2:12	2:12	3	search_cb
PARAMETER_LIST	2:21	2:60	2	( GtkWidget * button , PidginLogViewer * lv )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:33	3	GtkWidget * button
TYPE	2:22	2:32	4	GtkWidget *
TYPE_NAME	2:22	2:22	5	GtkWidget
LEAF_NODE	2:22	2:22	6	GtkWidget
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	button
LEAF_NODE	2:33	2:33	5	button
LEAF_NODE	2:39	2:39	3	,
PARAMETER_DECL	2:41	2:58	3	PidginLogViewer * lv
TYPE	2:41	2:57	4	PidginLogViewer *
TYPE_NAME	2:41	2:41	5	PidginLogViewer
LEAF_NODE	2:41	2:41	6	PidginLogViewer
POINTER	2:57	2:57	5	*
LEAF_NODE	2:57	2:57	6	*
NAME	2:58	2:58	4	lv
LEAF_NODE	2:58	2:58	5	lv
LEAF_NODE	2:60	2:60	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	40:1	2	
SIMPLE_DECL	4:1	4:67	3	const char * search_term ; search_term = gtk_entry_get_text ( GTK_ENTRY ( lv -> entry ) ) ;
VAR_DECL	4:1	4:13	4	const char * search_term ; search_term = gtk_entry_get_text ( GTK_ENTRY ( lv -> entry ) )
TYPE	4:1	4:12	5	const char *
TYPE_NAME	4:1	4:7	6	const char
LEAF_NODE	4:1	4:1	7	const
LEAF_NODE	4:7	4:7	7	char
POINTER	4:12	4:12	6	*
LEAF_NODE	4:12	4:12	7	*
NAME	4:13	4:13	5	search_term
LEAF_NODE	4:13	4:13	6	search_term
LEAF_NODE	0:0	0:0	5	;
INIT	4:13	4:13	5	search_term = gtk_entry_get_text ( GTK_ENTRY ( lv -> entry ) )
ASSIGN	4:13	4:27	6	search_term = gtk_entry_get_text ( GTK_ENTRY ( lv -> entry ) )
LVAL	4:13	4:13	7	search_term
NAME	4:13	4:13	8	search_term
LEAF_NODE	4:13	4:13	9	search_term
ASSIGN_OP	4:25	4:25	7	=
LEAF_NODE	4:25	4:25	8	=
RVAL	4:27	4:27	7	gtk_entry_get_text ( GTK_ENTRY ( lv -> entry ) )
FUNCTION_CALL	4:27	4:66	8	gtk_entry_get_text ( GTK_ENTRY ( lv -> entry ) )
CALLEE	4:27	4:27	9	gtk_entry_get_text
LEAF_NODE	4:27	4:27	10	gtk_entry_get_text
LEAF_NODE	4:45	4:45	9	(
ARGUMENT	4:46	4:46	9	GTK_ENTRY ( lv -> entry )
FUNCTION_CALL	4:46	4:65	10	GTK_ENTRY ( lv -> entry )
CALLEE	4:46	4:46	11	GTK_ENTRY
LEAF_NODE	4:46	4:46	12	GTK_ENTRY
LEAF_NODE	4:55	4:55	11	(
ARGUMENT	4:56	4:56	11	lv -> entry
FIELD	4:56	4:60	12	lv -> entry
LEAF_NODE	4:56	4:56	13	lv
LEAF_NODE	4:58	4:58	13	->
LEAF_NODE	4:60	4:60	13	entry
LEAF_NODE	4:65	4:65	11	)
LEAF_NODE	4:66	4:66	9	)
LEAF_NODE	4:67	4:67	4	;
SIMPLE_DECL	5:1	5:12	3	GList * logs ;
VAR_DECL	5:1	5:8	4	GList * logs
TYPE	5:1	5:7	5	GList *
TYPE_NAME	5:1	5:1	6	GList
LEAF_NODE	5:1	5:1	7	GList
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	logs
LEAF_NODE	5:8	5:8	6	logs
LEAF_NODE	5:12	5:12	4	;
SELECTION	6:1	6:22	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	! ( * search_term )
EXPR	6:5	6:5	5	! ( * search_term )
UNARY_EXPR	6:5	6:19	6	! ( * search_term )
UNARY_OPERATOR	6:5	6:5	7	!
LEAF_NODE	6:5	6:5	8	!
LEAF_NODE	6:6	6:6	7	(
UNARY_EXPR	6:7	6:8	7	* search_term
UNARY_OPERATOR	6:7	6:7	8	*
LEAF_NODE	6:7	6:7	9	*
FIELD	6:8	6:8	8	search_term
LEAF_NODE	6:8	6:8	9	search_term
LEAF_NODE	6:19	6:19	7	)
LEAF_NODE	6:20	6:20	4	)
STATEMENTS	6:22	15:1	4	
LEAF_NODE	6:22	6:22	5	{
STATEMENTS	8:2	14:2	5	
EXPR_STATEMENT	8:2	8:37	6	gtk_tree_store_clear ( lv -> treestore ) ;
EXPR	8:2	8:2	7	gtk_tree_store_clear ( lv -> treestore )
FUNCTION_CALL	8:2	8:36	8	gtk_tree_store_clear ( lv -> treestore )
CALLEE	8:2	8:2	9	gtk_tree_store_clear
LEAF_NODE	8:2	8:2	10	gtk_tree_store_clear
LEAF_NODE	8:22	8:22	9	(
ARGUMENT	8:23	8:23	9	lv -> treestore
FIELD	8:23	8:27	10	lv -> treestore
LEAF_NODE	8:23	8:23	11	lv
LEAF_NODE	8:25	8:25	11	->
LEAF_NODE	8:27	8:27	11	treestore
LEAF_NODE	8:36	8:36	9	)
LEAF_NODE	8:37	8:37	7	;
EXPR_STATEMENT	9:2	9:23	6	populate_log_tree ( lv ) ;
EXPR	9:2	9:2	7	populate_log_tree ( lv )
FUNCTION_CALL	9:2	9:22	8	populate_log_tree ( lv )
CALLEE	9:2	9:2	9	populate_log_tree
LEAF_NODE	9:2	9:2	10	populate_log_tree
LEAF_NODE	9:19	9:19	9	(
ARGUMENT	9:20	9:20	9	lv
FIELD	9:20	9:20	10	lv
LEAF_NODE	9:20	9:20	11	lv
LEAF_NODE	9:22	9:22	9	)
LEAF_NODE	9:23	9:23	7	;
EXPR_STATEMENT	10:2	10:20	6	g_free ( lv -> search ) ;
EXPR	10:2	10:2	7	g_free ( lv -> search )
FUNCTION_CALL	10:2	10:19	8	g_free ( lv -> search )
CALLEE	10:2	10:2	9	g_free
LEAF_NODE	10:2	10:2	10	g_free
LEAF_NODE	10:8	10:8	9	(
ARGUMENT	10:9	10:9	9	lv -> search
FIELD	10:9	10:13	10	lv -> search
LEAF_NODE	10:9	10:9	11	lv
LEAF_NODE	10:11	10:11	11	->
LEAF_NODE	10:13	10:13	11	search
LEAF_NODE	10:19	10:19	9	)
LEAF_NODE	10:20	10:20	7	;
EXPR_STATEMENT	11:2	11:19	6	lv -> search = NULL ;
EXPR	11:2	11:2	7	lv -> search = NULL
ASSIGN	11:2	11:15	8	lv -> search = NULL
LVAL	11:2	11:2	9	lv -> search
FIELD	11:2	11:6	10	lv -> search
LEAF_NODE	11:2	11:2	11	lv
LEAF_NODE	11:4	11:4	11	->
LEAF_NODE	11:6	11:6	11	search
ASSIGN_OP	11:13	11:13	9	=
LEAF_NODE	11:13	11:13	10	=
RVAL	11:15	11:15	9	NULL
FIELD	11:15	11:15	10	NULL
LEAF_NODE	11:15	11:15	11	NULL
LEAF_NODE	11:19	11:19	7	;
EXPR_STATEMENT	12:2	12:49	6	gtk_imhtml_search_clear ( GTK_IMHTML ( lv -> imhtml ) ) ;
EXPR	12:2	12:2	7	gtk_imhtml_search_clear ( GTK_IMHTML ( lv -> imhtml ) )
FUNCTION_CALL	12:2	12:48	8	gtk_imhtml_search_clear ( GTK_IMHTML ( lv -> imhtml ) )
CALLEE	12:2	12:2	9	gtk_imhtml_search_clear
LEAF_NODE	12:2	12:2	10	gtk_imhtml_search_clear
LEAF_NODE	12:25	12:25	9	(
ARGUMENT	12:26	12:26	9	GTK_IMHTML ( lv -> imhtml )
FUNCTION_CALL	12:26	12:47	10	GTK_IMHTML ( lv -> imhtml )
CALLEE	12:26	12:26	11	GTK_IMHTML
LEAF_NODE	12:26	12:26	12	GTK_IMHTML
LEAF_NODE	12:36	12:36	11	(
ARGUMENT	12:37	12:37	11	lv -> imhtml
FIELD	12:37	12:41	12	lv -> imhtml
LEAF_NODE	12:37	12:37	13	lv
LEAF_NODE	12:39	12:39	13	->
LEAF_NODE	12:41	12:41	13	imhtml
LEAF_NODE	12:47	12:47	11	)
LEAF_NODE	12:48	12:48	9	)
LEAF_NODE	12:49	12:49	7	;
EXPR_STATEMENT	13:2	13:22	6	select_first_log ( lv ) ;
EXPR	13:2	13:2	7	select_first_log ( lv )
FUNCTION_CALL	13:2	13:21	8	select_first_log ( lv )
CALLEE	13:2	13:2	9	select_first_log
LEAF_NODE	13:2	13:2	10	select_first_log
LEAF_NODE	13:18	13:18	9	(
ARGUMENT	13:19	13:19	9	lv
FIELD	13:19	13:19	10	lv
LEAF_NODE	13:19	13:19	11	lv
LEAF_NODE	13:21	13:21	9	)
LEAF_NODE	13:22	13:22	7	;
JUMP_STATEMENT	14:2	14:8	6	return DESTINATION ;
KEYWORD	14:2	14:2	7	return
LEAF_NODE	14:2	14:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	14:8	14:8	7	;
LEAF_NODE	15:1	15:1	5	}
SELECTION	16:1	17:1	3	
KEYWORD	16:1	16:1	4	if
LEAF_NODE	16:1	16:1	5	if
LEAF_NODE	16:4	16:4	4	(
CONDITION	16:5	16:5	4	lv -> search != NULL && ! strcmp ( lv -> search , search_term )
EXPR	16:5	16:5	5	lv -> search != NULL && ! strcmp ( lv -> search , search_term )
AND	16:5	16:27	6	lv -> search != NULL && ! strcmp ( lv -> search , search_term )
EXPR	16:5	16:19	7	lv -> search != NULL
FIELD	16:5	16:9	8	lv -> search
LEAF_NODE	16:5	16:5	9	lv
LEAF_NODE	16:7	16:7	9	->
LEAF_NODE	16:9	16:9	9	search
EQ_OPERATOR	16:16	16:16	8	!=
LEAF_NODE	16:16	16:16	9	!=
FIELD	16:19	16:19	8	NULL
LEAF_NODE	16:19	16:19	9	NULL
LEAF_NODE	16:24	16:24	7	&&
EXPR	16:27	16:27	7	! strcmp ( lv -> search , search_term )
UNARY_EXPR	16:27	16:28	8	! strcmp ( lv -> search , search_term )
UNARY_OPERATOR	16:27	16:27	9	!
LEAF_NODE	16:27	16:27	10	!
FUNCTION_CALL	16:28	16:58	9	strcmp ( lv -> search , search_term )
CALLEE	16:28	16:28	10	strcmp
LEAF_NODE	16:28	16:28	11	strcmp
LEAF_NODE	16:34	16:34	10	(
ARGUMENT	16:35	16:35	10	lv -> search
FIELD	16:35	16:39	11	lv -> search
LEAF_NODE	16:35	16:35	12	lv
LEAF_NODE	16:37	16:37	12	->
LEAF_NODE	16:39	16:39	12	search
LEAF_NODE	16:45	16:45	10	,
ARGUMENT	16:47	16:47	10	search_term
FIELD	16:47	16:47	11	search_term
LEAF_NODE	16:47	16:47	12	search_term
LEAF_NODE	16:58	16:58	10	)
LEAF_NODE	16:59	16:59	4	)
STATEMENTS	17:1	21:1	4	
LEAF_NODE	17:1	17:1	5	{
STATEMENTS	19:2	20:2	5	
EXPR_STATEMENT	19:2	19:60	6	gtk_imhtml_search_find ( GTK_IMHTML ( lv -> imhtml ) , lv -> search ) ;
EXPR	19:2	19:2	7	gtk_imhtml_search_find ( GTK_IMHTML ( lv -> imhtml ) , lv -> search )
FUNCTION_CALL	19:2	19:59	8	gtk_imhtml_search_find ( GTK_IMHTML ( lv -> imhtml ) , lv -> search )
CALLEE	19:2	19:2	9	gtk_imhtml_search_find
LEAF_NODE	19:2	19:2	10	gtk_imhtml_search_find
LEAF_NODE	19:24	19:24	9	(
ARGUMENT	19:25	19:25	9	GTK_IMHTML ( lv -> imhtml )
FUNCTION_CALL	19:25	19:46	10	GTK_IMHTML ( lv -> imhtml )
CALLEE	19:25	19:25	11	GTK_IMHTML
LEAF_NODE	19:25	19:25	12	GTK_IMHTML
LEAF_NODE	19:35	19:35	11	(
ARGUMENT	19:36	19:36	11	lv -> imhtml
FIELD	19:36	19:40	12	lv -> imhtml
LEAF_NODE	19:36	19:36	13	lv
LEAF_NODE	19:38	19:38	13	->
LEAF_NODE	19:40	19:40	13	imhtml
LEAF_NODE	19:46	19:46	11	)
LEAF_NODE	19:47	19:47	9	,
ARGUMENT	19:49	19:49	9	lv -> search
FIELD	19:49	19:53	10	lv -> search
LEAF_NODE	19:49	19:49	11	lv
LEAF_NODE	19:51	19:51	11	->
LEAF_NODE	19:53	19:53	11	search
LEAF_NODE	19:59	19:59	9	)
LEAF_NODE	19:60	19:60	7	;
JUMP_STATEMENT	20:2	20:8	6	return DESTINATION ;
KEYWORD	20:2	20:2	7	return
LEAF_NODE	20:2	20:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	20:8	20:8	7	;
LEAF_NODE	21:1	21:1	5	}
EXPR_STATEMENT	22:1	22:41	3	pidgin_set_cursor ( lv -> window , GDK_WATCH ) ;
EXPR	22:1	22:1	4	pidgin_set_cursor ( lv -> window , GDK_WATCH )
FUNCTION_CALL	22:1	22:40	5	pidgin_set_cursor ( lv -> window , GDK_WATCH )
CALLEE	22:1	22:1	6	pidgin_set_cursor
LEAF_NODE	22:1	22:1	7	pidgin_set_cursor
LEAF_NODE	22:18	22:18	6	(
ARGUMENT	22:19	22:19	6	lv -> window
FIELD	22:19	22:23	7	lv -> window
LEAF_NODE	22:19	22:19	8	lv
LEAF_NODE	22:21	22:21	8	->
LEAF_NODE	22:23	22:23	8	window
LEAF_NODE	22:29	22:29	6	,
ARGUMENT	22:31	22:31	6	GDK_WATCH
FIELD	22:31	22:31	7	GDK_WATCH
LEAF_NODE	22:31	22:31	8	GDK_WATCH
LEAF_NODE	22:40	22:40	6	)
LEAF_NODE	22:41	22:41	4	;
EXPR_STATEMENT	23:1	23:19	3	g_free ( lv -> search ) ;
EXPR	23:1	23:1	4	g_free ( lv -> search )
FUNCTION_CALL	23:1	23:18	5	g_free ( lv -> search )
CALLEE	23:1	23:1	6	g_free
LEAF_NODE	23:1	23:1	7	g_free
LEAF_NODE	23:7	23:7	6	(
ARGUMENT	23:8	23:8	6	lv -> search
FIELD	23:8	23:12	7	lv -> search
LEAF_NODE	23:8	23:8	8	lv
LEAF_NODE	23:10	23:10	8	->
LEAF_NODE	23:12	23:12	8	search
LEAF_NODE	23:18	23:18	6	)
LEAF_NODE	23:19	23:19	4	;
EXPR_STATEMENT	24:1	24:35	3	lv -> search = g_strdup ( search_term ) ;
EXPR	24:1	24:1	4	lv -> search = g_strdup ( search_term )
ASSIGN	24:1	24:14	5	lv -> search = g_strdup ( search_term )
LVAL	24:1	24:1	6	lv -> search
FIELD	24:1	24:5	7	lv -> search
LEAF_NODE	24:1	24:1	8	lv
LEAF_NODE	24:3	24:3	8	->
LEAF_NODE	24:5	24:5	8	search
ASSIGN_OP	24:12	24:12	6	=
LEAF_NODE	24:12	24:12	7	=
RVAL	24:14	24:14	6	g_strdup ( search_term )
FUNCTION_CALL	24:14	24:34	7	g_strdup ( search_term )
CALLEE	24:14	24:14	8	g_strdup
LEAF_NODE	24:14	24:14	9	g_strdup
LEAF_NODE	24:22	24:22	8	(
ARGUMENT	24:23	24:23	8	search_term
FIELD	24:23	24:23	9	search_term
LEAF_NODE	24:23	24:23	10	search_term
LEAF_NODE	24:34	24:34	8	)
LEAF_NODE	24:35	24:35	4	;
EXPR_STATEMENT	25:1	25:36	3	gtk_tree_store_clear ( lv -> treestore ) ;
EXPR	25:1	25:1	4	gtk_tree_store_clear ( lv -> treestore )
FUNCTION_CALL	25:1	25:35	5	gtk_tree_store_clear ( lv -> treestore )
CALLEE	25:1	25:1	6	gtk_tree_store_clear
LEAF_NODE	25:1	25:1	7	gtk_tree_store_clear
LEAF_NODE	25:21	25:21	6	(
ARGUMENT	25:22	25:22	6	lv -> treestore
FIELD	25:22	25:26	7	lv -> treestore
LEAF_NODE	25:22	25:22	8	lv
LEAF_NODE	25:24	25:24	8	->
LEAF_NODE	25:26	25:26	8	treestore
LEAF_NODE	25:35	25:35	6	)
LEAF_NODE	25:36	25:36	4	;
EXPR_STATEMENT	26:1	26:41	3	gtk_imhtml_clear ( GTK_IMHTML ( lv -> imhtml ) ) ;
EXPR	26:1	26:1	4	gtk_imhtml_clear ( GTK_IMHTML ( lv -> imhtml ) )
FUNCTION_CALL	26:1	26:40	5	gtk_imhtml_clear ( GTK_IMHTML ( lv -> imhtml ) )
CALLEE	26:1	26:1	6	gtk_imhtml_clear
LEAF_NODE	26:1	26:1	7	gtk_imhtml_clear
LEAF_NODE	26:17	26:17	6	(
ARGUMENT	26:18	26:18	6	GTK_IMHTML ( lv -> imhtml )
FUNCTION_CALL	26:18	26:39	7	GTK_IMHTML ( lv -> imhtml )
CALLEE	26:18	26:18	8	GTK_IMHTML
LEAF_NODE	26:18	26:18	9	GTK_IMHTML
LEAF_NODE	26:28	26:28	8	(
ARGUMENT	26:29	26:29	8	lv -> imhtml
FIELD	26:29	26:33	9	lv -> imhtml
LEAF_NODE	26:29	26:29	10	lv
LEAF_NODE	26:31	26:31	10	->
LEAF_NODE	26:33	26:33	10	imhtml
LEAF_NODE	26:39	26:39	8	)
LEAF_NODE	26:40	26:40	6	)
LEAF_NODE	26:41	26:41	4	;
ITERATION	27:1	27:56	3	
KEYWORD	27:1	27:1	4	for
LEAF_NODE	27:1	27:1	5	for
LEAF_NODE	27:5	27:5	4	(
FOR_INIT	27:6	27:21	4	logs = lv -> logs ;
EXPR	27:6	27:6	5	logs = lv -> logs
ASSIGN	27:6	27:13	6	logs = lv -> logs
LVAL	27:6	27:6	7	logs
FIELD	27:6	27:6	8	logs
LEAF_NODE	27:6	27:6	9	logs
ASSIGN_OP	27:11	27:11	7	=
LEAF_NODE	27:11	27:11	8	=
RVAL	27:13	27:13	7	lv -> logs
FIELD	27:13	27:17	8	lv -> logs
LEAF_NODE	27:13	27:13	9	lv
LEAF_NODE	27:15	27:15	9	->
LEAF_NODE	27:17	27:17	9	logs
LEAF_NODE	27:21	27:21	5	;
CONDITION	27:23	27:23	4	logs != NULL
EXPR	27:23	27:31	5	logs != NULL
FIELD	27:23	27:23	6	logs
LEAF_NODE	27:23	27:23	7	logs
EQ_OPERATOR	27:28	27:28	6	!=
LEAF_NODE	27:28	27:28	7	!=
FIELD	27:31	27:31	6	NULL
LEAF_NODE	27:31	27:31	7	NULL
LEAF_NODE	27:35	27:35	4	;
FOR_EXPR	27:37	27:37	4	logs = logs -> next
EXPR	27:37	27:37	5	logs = logs -> next
ASSIGN	27:37	27:44	6	logs = logs -> next
LVAL	27:37	27:37	7	logs
FIELD	27:37	27:37	8	logs
LEAF_NODE	27:37	27:37	9	logs
ASSIGN_OP	27:42	27:42	7	=
LEAF_NODE	27:42	27:42	8	=
RVAL	27:44	27:44	7	logs -> next
FIELD	27:44	27:50	8	logs -> next
LEAF_NODE	27:44	27:44	9	logs
LEAF_NODE	27:48	27:48	9	->
LEAF_NODE	27:50	27:50	9	next
LEAF_NODE	27:54	27:54	4	)
STATEMENTS	27:56	38:1	4	
LEAF_NODE	27:56	27:56	5	{
STATEMENTS	28:2	37:2	5	
SIMPLE_DECL	28:2	28:60	6	char * read ; read = purple_log_read ( ( PurpleLog * ) logs -> data , NULL ) ;
VAR_DECL	28:2	28:8	7	char * read ; read = purple_log_read ( ( PurpleLog * ) logs -> data , NULL )
TYPE	28:2	28:7	8	char *
TYPE_NAME	28:2	28:2	9	char
LEAF_NODE	28:2	28:2	10	char
POINTER	28:7	28:7	9	*
LEAF_NODE	28:7	28:7	10	*
NAME	28:8	28:8	8	read
LEAF_NODE	28:8	28:8	9	read
LEAF_NODE	0:0	0:0	8	;
INIT	28:8	28:8	8	read = purple_log_read ( ( PurpleLog * ) logs -> data , NULL )
ASSIGN	28:8	28:15	9	read = purple_log_read ( ( PurpleLog * ) logs -> data , NULL )
LVAL	28:8	28:8	10	read
NAME	28:8	28:8	11	read
LEAF_NODE	28:8	28:8	12	read
ASSIGN_OP	28:13	28:13	10	=
LEAF_NODE	28:13	28:13	11	=
RVAL	28:15	28:15	10	purple_log_read ( ( PurpleLog * ) logs -> data , NULL )
FUNCTION_CALL	28:15	28:59	11	purple_log_read ( ( PurpleLog * ) logs -> data , NULL )
CALLEE	28:15	28:15	12	purple_log_read
LEAF_NODE	28:15	28:15	13	purple_log_read
LEAF_NODE	28:30	28:30	12	(
ARGUMENT	28:31	28:43	12	( PurpleLog * ) logs -> data
LEAF_NODE	28:31	28:31	13	(
TYPE_NAME	28:32	28:32	13	PurpleLog
LEAF_NODE	28:32	28:32	14	PurpleLog
LEAF_NODE	28:41	28:41	13	*
LEAF_NODE	28:42	28:42	13	)
FIELD	28:43	28:49	13	logs -> data
LEAF_NODE	28:43	28:43	14	logs
LEAF_NODE	28:47	28:47	14	->
LEAF_NODE	28:49	28:49	14	data
LEAF_NODE	28:53	28:53	12	,
ARGUMENT	28:55	28:55	12	NULL
FIELD	28:55	28:55	13	NULL
LEAF_NODE	28:55	28:55	14	NULL
LEAF_NODE	28:59	28:59	12	)
LEAF_NODE	28:60	28:60	7	;
SELECTION	29:2	29:61	6	
KEYWORD	29:2	29:2	7	if
LEAF_NODE	29:2	29:2	8	if
LEAF_NODE	29:5	29:5	7	(
CONDITION	29:6	29:6	7	read && * read && purple_strcasestr ( read , search_term )
EXPR	29:6	29:6	8	read && * read && purple_strcasestr ( read , search_term )
AND	29:6	29:14	9	read && * read && purple_strcasestr ( read , search_term )
EXPR	29:6	29:6	10	read
FIELD	29:6	29:6	11	read
LEAF_NODE	29:6	29:6	12	read
LEAF_NODE	29:11	29:11	10	&&
EXPR	29:14	29:14	10	* read && purple_strcasestr ( read , search_term )
AND	29:14	29:23	11	* read && purple_strcasestr ( read , search_term )
EXPR	29:14	29:14	12	* read
UNARY_EXPR	29:14	29:15	13	* read
UNARY_OPERATOR	29:14	29:14	14	*
LEAF_NODE	29:14	29:14	15	*
FIELD	29:15	29:15	14	read
LEAF_NODE	29:15	29:15	15	read
LEAF_NODE	29:20	29:20	12	&&
EXPR	29:23	29:23	12	purple_strcasestr ( read , search_term )
FUNCTION_CALL	29:23	29:58	13	purple_strcasestr ( read , search_term )
CALLEE	29:23	29:23	14	purple_strcasestr
LEAF_NODE	29:23	29:23	15	purple_strcasestr
LEAF_NODE	29:40	29:40	14	(
ARGUMENT	29:41	29:41	14	read
FIELD	29:41	29:41	15	read
LEAF_NODE	29:41	29:41	16	read
LEAF_NODE	29:45	29:45	14	,
ARGUMENT	29:47	29:47	14	search_term
FIELD	29:47	29:47	15	search_term
LEAF_NODE	29:47	29:47	16	search_term
LEAF_NODE	29:58	29:58	14	)
LEAF_NODE	29:59	29:59	7	)
STATEMENTS	29:61	36:2	7	
LEAF_NODE	29:61	29:61	8	{
STATEMENTS	30:3	33:3	8	
SIMPLE_DECL	30:3	30:19	9	GtkTreeIter iter ;
VAR_DECL	30:3	30:15	10	GtkTreeIter iter
TYPE	30:3	30:3	11	GtkTreeIter
TYPE_NAME	30:3	30:3	12	GtkTreeIter
LEAF_NODE	30:3	30:3	13	GtkTreeIter
NAME	30:15	30:15	11	iter
LEAF_NODE	30:15	30:15	12	iter
LEAF_NODE	30:19	30:19	10	;
SIMPLE_DECL	31:3	31:30	9	PurpleLog * log ; log = logs -> data ;
VAR_DECL	31:3	31:14	10	PurpleLog * log ; log = logs -> data
TYPE	31:3	31:13	11	PurpleLog *
TYPE_NAME	31:3	31:3	12	PurpleLog
LEAF_NODE	31:3	31:3	13	PurpleLog
POINTER	31:13	31:13	12	*
LEAF_NODE	31:13	31:13	13	*
NAME	31:14	31:14	11	log
LEAF_NODE	31:14	31:14	12	log
LEAF_NODE	0:0	0:0	11	;
INIT	31:14	31:14	11	log = logs -> data
ASSIGN	31:14	31:20	12	log = logs -> data
LVAL	31:14	31:14	13	log
NAME	31:14	31:14	14	log
LEAF_NODE	31:14	31:14	15	log
ASSIGN_OP	31:18	31:18	13	=
LEAF_NODE	31:18	31:18	14	=
RVAL	31:20	31:20	13	logs -> data
FIELD	31:20	31:26	14	logs -> data
LEAF_NODE	31:20	31:20	15	logs
LEAF_NODE	31:24	31:24	15	->
LEAF_NODE	31:26	31:26	15	data
LEAF_NODE	31:30	31:30	10	;
EXPR_STATEMENT	32:3	32:53	9	gtk_tree_store_append ( lv -> treestore , & iter , NULL ) ;
EXPR	32:3	32:3	10	gtk_tree_store_append ( lv -> treestore , & iter , NULL )
FUNCTION_CALL	32:3	32:52	11	gtk_tree_store_append ( lv -> treestore , & iter , NULL )
CALLEE	32:3	32:3	12	gtk_tree_store_append
LEAF_NODE	32:3	32:3	13	gtk_tree_store_append
LEAF_NODE	32:25	32:25	12	(
ARGUMENT	32:26	32:26	12	lv -> treestore
FIELD	32:26	32:30	13	lv -> treestore
LEAF_NODE	32:26	32:26	14	lv
LEAF_NODE	32:28	32:28	14	->
LEAF_NODE	32:30	32:30	14	treestore
LEAF_NODE	32:39	32:39	12	,
ARGUMENT	32:41	32:41	12	& iter
UNARY_EXPR	32:41	32:42	13	& iter
UNARY_OPERATOR	32:41	32:41	14	&
LEAF_NODE	32:41	32:41	15	&
FIELD	32:42	32:42	14	iter
LEAF_NODE	32:42	32:42	15	iter
LEAF_NODE	32:46	32:46	12	,
ARGUMENT	32:48	32:48	12	NULL
FIELD	32:48	32:48	13	NULL
LEAF_NODE	32:48	32:48	14	NULL
LEAF_NODE	32:52	32:52	12	)
LEAF_NODE	32:53	32:53	10	;
EXPR_STATEMENT	33:3	35:19	9	gtk_tree_store_set ( lv -> treestore , & iter , 0 , log_get_date ( log ) , 1 , log , - 1 ) ;
EXPR	33:3	33:3	10	gtk_tree_store_set ( lv -> treestore , & iter , 0 , log_get_date ( log ) , 1 , log , - 1 )
FUNCTION_CALL	33:3	35:18	11	gtk_tree_store_set ( lv -> treestore , & iter , 0 , log_get_date ( log ) , 1 , log , - 1 )
CALLEE	33:3	33:3	12	gtk_tree_store_set
LEAF_NODE	33:3	33:3	13	gtk_tree_store_set
LEAF_NODE	33:21	33:21	12	(
ARGUMENT	33:22	33:22	12	lv -> treestore
FIELD	33:22	33:26	13	lv -> treestore
LEAF_NODE	33:22	33:22	14	lv
LEAF_NODE	33:24	33:24	14	->
LEAF_NODE	33:26	33:26	14	treestore
LEAF_NODE	33:35	33:35	12	,
ARGUMENT	33:37	33:37	12	& iter
UNARY_EXPR	33:37	33:38	13	& iter
UNARY_OPERATOR	33:37	33:37	14	&
LEAF_NODE	33:37	33:37	15	&
FIELD	33:38	33:38	14	iter
LEAF_NODE	33:38	33:38	15	iter
LEAF_NODE	33:42	33:42	12	,
ARGUMENT	34:8	34:8	12	0
FIELD	34:8	34:8	13	0
LEAF_NODE	34:8	34:8	14	0
LEAF_NODE	34:9	34:9	12	,
ARGUMENT	34:11	34:11	12	log_get_date ( log )
FUNCTION_CALL	34:11	34:27	13	log_get_date ( log )
CALLEE	34:11	34:11	14	log_get_date
LEAF_NODE	34:11	34:11	15	log_get_date
LEAF_NODE	34:23	34:23	14	(
ARGUMENT	34:24	34:24	14	log
FIELD	34:24	34:24	15	log
LEAF_NODE	34:24	34:24	16	log
LEAF_NODE	34:27	34:27	14	)
LEAF_NODE	34:28	34:28	12	,
ARGUMENT	35:8	35:8	12	1
FIELD	35:8	35:8	13	1
LEAF_NODE	35:8	35:8	14	1
LEAF_NODE	35:9	35:9	12	,
ARGUMENT	35:11	35:11	12	log
FIELD	35:11	35:11	13	log
LEAF_NODE	35:11	35:11	14	log
LEAF_NODE	35:14	35:14	12	,
ARGUMENT	35:16	35:16	12	- 1
UNARY_EXPR	35:16	35:17	13	- 1
UNARY_OPERATOR	35:16	35:16	14	-
LEAF_NODE	35:16	35:16	15	-
FIELD	35:17	35:17	14	1
LEAF_NODE	35:17	35:17	15	1
LEAF_NODE	35:18	35:18	12	)
LEAF_NODE	35:19	35:19	10	;
LEAF_NODE	36:2	36:2	8	}
EXPR_STATEMENT	37:2	37:14	6	g_free ( read ) ;
EXPR	37:2	37:2	7	g_free ( read )
FUNCTION_CALL	37:2	37:13	8	g_free ( read )
CALLEE	37:2	37:2	9	g_free
LEAF_NODE	37:2	37:2	10	g_free
LEAF_NODE	37:8	37:8	9	(
ARGUMENT	37:9	37:9	9	read
FIELD	37:9	37:9	10	read
LEAF_NODE	37:9	37:9	11	read
LEAF_NODE	37:13	37:13	9	)
LEAF_NODE	37:14	37:14	7	;
LEAF_NODE	38:1	38:1	5	}
EXPR_STATEMENT	39:1	39:21	3	select_first_log ( lv ) ;
EXPR	39:1	39:1	4	select_first_log ( lv )
FUNCTION_CALL	39:1	39:20	5	select_first_log ( lv )
CALLEE	39:1	39:1	6	select_first_log
LEAF_NODE	39:1	39:1	7	select_first_log
LEAF_NODE	39:17	39:17	6	(
ARGUMENT	39:18	39:18	6	lv
FIELD	39:18	39:18	7	lv
LEAF_NODE	39:18	39:18	8	lv
LEAF_NODE	39:20	39:20	6	)
LEAF_NODE	39:21	39:21	4	;
EXPR_STATEMENT	40:1	40:32	3	pidgin_clear_cursor ( lv -> window ) ;
EXPR	40:1	40:1	4	pidgin_clear_cursor ( lv -> window )
FUNCTION_CALL	40:1	40:31	5	pidgin_clear_cursor ( lv -> window )
CALLEE	40:1	40:1	6	pidgin_clear_cursor
LEAF_NODE	40:1	40:1	7	pidgin_clear_cursor
LEAF_NODE	40:20	40:20	6	(
ARGUMENT	40:21	40:21	6	lv -> window
FIELD	40:21	40:25	7	lv -> window
LEAF_NODE	40:21	40:21	8	lv
LEAF_NODE	40:23	40:23	8	->
LEAF_NODE	40:25	40:25	8	window
LEAF_NODE	40:31	40:31	6	)
LEAF_NODE	40:32	40:32	4	;
LEAF_NODE	41:0	41:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	11:0	1	
RETURN_TYPE	2:0	2:7	2	static PurpleCmdRet
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	PurpleCmdRet
LEAF_NODE	2:7	2:7	4	PurpleCmdRet
FUNCTION_NAME	2:20	2:20	2	zephyr_purple_cmd_zir
LEAF_NODE	2:20	2:20	3	zephyr_purple_cmd_zir
PARAMETER_LIST	2:41	3:64	2	( PurpleConversation * conv , const char * cmd , char * * args , char * * error , void * data )
LEAF_NODE	2:41	2:41	3	(
PARAMETER_DECL	2:42	2:62	3	PurpleConversation * conv
TYPE	2:42	2:61	4	PurpleConversation *
TYPE_NAME	2:42	2:42	5	PurpleConversation
LEAF_NODE	2:42	2:42	6	PurpleConversation
POINTER	2:61	2:61	5	*
LEAF_NODE	2:61	2:61	6	*
NAME	2:62	2:62	4	conv
LEAF_NODE	2:62	2:62	5	conv
LEAF_NODE	2:66	2:66	3	,
PARAMETER_DECL	3:10	3:22	3	const char * cmd
TYPE	3:10	3:21	4	const char *
TYPE_NAME	3:10	3:16	5	const char
LEAF_NODE	3:10	3:10	6	const
LEAF_NODE	3:16	3:16	6	char
POINTER	3:21	3:21	5	*
LEAF_NODE	3:21	3:21	6	*
NAME	3:22	3:22	4	cmd
LEAF_NODE	3:22	3:22	5	cmd
LEAF_NODE	3:25	3:25	3	,
PARAMETER_DECL	3:27	3:34	3	char * * args
TYPE	3:27	3:32	4	char * *
TYPE_NAME	3:27	3:27	5	char
LEAF_NODE	3:27	3:27	6	char
POINTER	3:32	3:33	5	* *
LEAF_NODE	3:32	3:32	6	*
LEAF_NODE	3:33	3:33	6	*
NAME	3:34	3:34	4	args
LEAF_NODE	3:34	3:34	5	args
LEAF_NODE	3:38	3:38	3	,
PARAMETER_DECL	3:40	3:47	3	char * * error
TYPE	3:40	3:45	4	char * *
TYPE_NAME	3:40	3:40	5	char
LEAF_NODE	3:40	3:40	6	char
POINTER	3:45	3:46	5	* *
LEAF_NODE	3:45	3:45	6	*
LEAF_NODE	3:46	3:46	6	*
NAME	3:47	3:47	4	error
LEAF_NODE	3:47	3:47	5	error
LEAF_NODE	3:52	3:52	3	,
PARAMETER_DECL	3:54	3:60	3	void * data
TYPE	3:54	3:59	4	void *
TYPE_NAME	3:54	3:54	5	void
LEAF_NODE	3:54	3:54	6	void
POINTER	3:59	3:59	5	*
LEAF_NODE	3:59	3:59	6	*
NAME	3:60	3:60	4	data
LEAF_NODE	3:60	3:60	5	data
LEAF_NODE	3:64	3:64	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	6:1	9:1	2	
SIMPLE_DECL	6:1	6:70	3	zephyr_account * zephyr ; zephyr = purple_conversation_get_gc ( conv ) -> proto_data ;
VAR_DECL	6:1	6:17	4	zephyr_account * zephyr ; zephyr = purple_conversation_get_gc ( conv ) -> proto_data
TYPE	6:1	6:16	5	zephyr_account *
TYPE_NAME	6:1	6:1	6	zephyr_account
LEAF_NODE	6:1	6:1	7	zephyr_account
POINTER	6:16	6:16	6	*
LEAF_NODE	6:16	6:16	7	*
NAME	6:17	6:17	5	zephyr
LEAF_NODE	6:17	6:17	6	zephyr
LEAF_NODE	0:0	0:0	5	;
INIT	6:17	6:17	5	zephyr = purple_conversation_get_gc ( conv ) -> proto_data
ASSIGN	6:17	6:26	6	zephyr = purple_conversation_get_gc ( conv ) -> proto_data
LVAL	6:17	6:17	7	zephyr
NAME	6:17	6:17	8	zephyr
LEAF_NODE	6:17	6:17	9	zephyr
ASSIGN_OP	6:24	6:24	7	=
LEAF_NODE	6:24	6:24	8	=
RVAL	6:26	6:60	7	purple_conversation_get_gc ( conv ) -> proto_data
FUNCTION_CALL	6:26	6:57	8	purple_conversation_get_gc ( conv )
CALLEE	6:26	6:26	9	purple_conversation_get_gc
LEAF_NODE	6:26	6:26	10	purple_conversation_get_gc
LEAF_NODE	6:52	6:52	9	(
ARGUMENT	6:53	6:53	9	conv
FIELD	6:53	6:53	10	conv
LEAF_NODE	6:53	6:53	11	conv
LEAF_NODE	6:57	6:57	9	)
LEAF_NODE	6:58	6:58	8	->
LEAF_NODE	6:60	6:60	8	proto_data
LEAF_NODE	6:70	6:70	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:6	7:6	4	zephyr_send_message ( zephyr , "message" , args [ 0 ] , args [ 1 ] , args [ 2 ] , zephyr_get_signature ( ) , "" )
EXPR	7:6	7:6	5	zephyr_send_message ( zephyr , "message" , args [ 0 ] , args [ 1 ] , args [ 2 ] , zephyr_get_signature ( ) , "" )
FUNCTION_CALL	7:6	7:92	6	zephyr_send_message ( zephyr , "message" , args [ 0 ] , args [ 1 ] , args [ 2 ] , zephyr_get_signature ( ) , "" )
CALLEE	7:6	7:6	7	zephyr_send_message
LEAF_NODE	7:6	7:6	8	zephyr_send_message
LEAF_NODE	7:25	7:25	7	(
ARGUMENT	7:26	7:26	7	zephyr
FIELD	7:26	7:26	8	zephyr
LEAF_NODE	7:26	7:26	9	zephyr
LEAF_NODE	7:32	7:32	7	,
ARGUMENT	7:33	7:33	7	"message"
FIELD	7:33	7:33	8	"message"
LEAF_NODE	7:33	7:33	9	"message"
LEAF_NODE	7:42	7:42	7	,
ARGUMENT	7:43	7:43	7	args [ 0 ]
FIELD	7:43	7:49	8	args [ 0 ]
LEAF_NODE	7:43	7:43	9	args
LEAF_NODE	7:47	7:47	9	[
EXPR	7:48	7:48	9	0
FIELD	7:48	7:48	10	0
LEAF_NODE	7:48	7:48	11	0
LEAF_NODE	7:49	7:49	9	]
LEAF_NODE	7:50	7:50	7	,
ARGUMENT	7:51	7:51	7	args [ 1 ]
FIELD	7:51	7:57	8	args [ 1 ]
LEAF_NODE	7:51	7:51	9	args
LEAF_NODE	7:55	7:55	9	[
EXPR	7:56	7:56	9	1
FIELD	7:56	7:56	10	1
LEAF_NODE	7:56	7:56	11	1
LEAF_NODE	7:57	7:57	9	]
LEAF_NODE	7:58	7:58	7	,
ARGUMENT	7:59	7:59	7	args [ 2 ]
FIELD	7:59	7:65	8	args [ 2 ]
LEAF_NODE	7:59	7:59	9	args
LEAF_NODE	7:63	7:63	9	[
EXPR	7:64	7:64	9	2
FIELD	7:64	7:64	10	2
LEAF_NODE	7:64	7:64	11	2
LEAF_NODE	7:65	7:65	9	]
LEAF_NODE	7:66	7:66	7	,
ARGUMENT	7:67	7:67	7	zephyr_get_signature ( )
FUNCTION_CALL	7:67	7:88	8	zephyr_get_signature ( )
CALLEE	7:67	7:67	9	zephyr_get_signature
LEAF_NODE	7:67	7:67	10	zephyr_get_signature
LEAF_NODE	7:87	7:87	9	(
LEAF_NODE	7:88	7:88	9	)
LEAF_NODE	7:89	7:89	7	,
ARGUMENT	7:90	7:90	7	""
FIELD	7:90	7:90	8	""
LEAF_NODE	7:90	7:90	9	""
LEAF_NODE	7:92	7:92	7	)
LEAF_NODE	7:93	7:93	4	)
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:26	5	return PURPLE_CMD_RET_OK ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
DESTINATION	8:9	8:9	6	PURPLE_CMD_RET_OK
EXPR	8:9	8:9	7	PURPLE_CMD_RET_OK
FIELD	8:9	8:9	8	PURPLE_CMD_RET_OK
LEAF_NODE	8:9	8:9	9	PURPLE_CMD_RET_OK
LEAF_NODE	8:26	8:26	6	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	else
LEAF_NODE	9:1	9:1	5	else
STATEMENTS	10:2	10:2	4	
JUMP_STATEMENT	10:2	10:30	5	return PURPLE_CMD_RET_FAILED ;
KEYWORD	10:2	10:2	6	return
LEAF_NODE	10:2	10:2	7	return
DESTINATION	10:9	10:9	6	PURPLE_CMD_RET_FAILED
EXPR	10:9	10:9	7	PURPLE_CMD_RET_FAILED
FIELD	10:9	10:9	8	PURPLE_CMD_RET_FAILED
LEAF_NODE	10:9	10:9	9	PURPLE_CMD_RET_FAILED
LEAF_NODE	10:30	10:30	6	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	20:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_prefs_set_bool
LEAF_NODE	2:0	2:0	3	purple_prefs_set_bool
PARAMETER_LIST	2:21	2:54	2	( const char * name , gboolean value )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:34	3	const char * name
TYPE	2:22	2:33	4	const char *
TYPE_NAME	2:22	2:28	5	const char
LEAF_NODE	2:22	2:22	6	const
LEAF_NODE	2:28	2:28	6	char
POINTER	2:33	2:33	5	*
LEAF_NODE	2:33	2:33	6	*
NAME	2:34	2:34	4	name
LEAF_NODE	2:34	2:34	5	name
LEAF_NODE	2:38	2:38	3	,
PARAMETER_DECL	2:40	2:49	3	gboolean value
TYPE	2:40	2:40	4	gboolean
TYPE_NAME	2:40	2:40	5	gboolean
LEAF_NODE	2:40	2:40	6	gboolean
NAME	2:49	2:49	4	value
LEAF_NODE	2:49	2:49	5	value
LEAF_NODE	2:54	2:54	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	17:3	2	
SIMPLE_DECL	4:1	4:25	3	struct purple_pref * pref ;
VAR_DECL	4:1	4:21	4	struct purple_pref * pref
TYPE	4:1	4:20	5	struct purple_pref *
TYPE_NAME	4:1	4:8	6	struct purple_pref
LEAF_NODE	4:1	4:1	7	struct
LEAF_NODE	4:8	4:8	7	purple_pref
POINTER	4:20	4:20	6	*
LEAF_NODE	4:20	4:20	7	*
NAME	4:21	4:21	5	pref
LEAF_NODE	4:21	4:21	6	pref
LEAF_NODE	4:25	4:25	4	;
EXPR_STATEMENT	5:1	5:47	3	PURPLE_PREFS_UI_OP_CALL ( set_bool , name , value ) ;
EXPR	5:1	5:1	4	PURPLE_PREFS_UI_OP_CALL ( set_bool , name , value )
FUNCTION_CALL	5:1	5:46	5	PURPLE_PREFS_UI_OP_CALL ( set_bool , name , value )
CALLEE	5:1	5:1	6	PURPLE_PREFS_UI_OP_CALL
LEAF_NODE	5:1	5:1	7	PURPLE_PREFS_UI_OP_CALL
LEAF_NODE	5:24	5:24	6	(
ARGUMENT	5:25	5:25	6	set_bool
FIELD	5:25	5:25	7	set_bool
LEAF_NODE	5:25	5:25	8	set_bool
LEAF_NODE	5:33	5:33	6	,
ARGUMENT	5:35	5:35	6	name
FIELD	5:35	5:35	7	name
LEAF_NODE	5:35	5:35	8	name
LEAF_NODE	5:39	5:39	6	,
ARGUMENT	5:41	5:41	6	value
FIELD	5:41	5:41	7	value
LEAF_NODE	5:41	5:41	8	value
LEAF_NODE	5:46	5:46	6	)
LEAF_NODE	5:47	5:47	4	;
EXPR_STATEMENT	6:1	6:23	3	pref = find_pref ( name ) ;
EXPR	6:1	6:1	4	pref = find_pref ( name )
ASSIGN	6:1	6:8	5	pref = find_pref ( name )
LVAL	6:1	6:1	6	pref
FIELD	6:1	6:1	7	pref
LEAF_NODE	6:1	6:1	8	pref
ASSIGN_OP	6:6	6:6	6	=
LEAF_NODE	6:6	6:6	7	=
RVAL	6:8	6:8	6	find_pref ( name )
FUNCTION_CALL	6:8	6:22	7	find_pref ( name )
CALLEE	6:8	6:8	8	find_pref
LEAF_NODE	6:8	6:8	9	find_pref
LEAF_NODE	6:17	6:17	8	(
ARGUMENT	6:18	6:18	8	name
FIELD	6:18	6:18	9	name
LEAF_NODE	6:18	6:18	10	name
LEAF_NODE	6:22	6:22	8	)
LEAF_NODE	6:23	6:23	4	;
SELECTION	7:1	7:10	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:3	7:3	4	(
CONDITION	7:4	7:4	4	pref
EXPR	7:4	7:4	5	pref
FIELD	7:4	7:4	6	pref
LEAF_NODE	7:4	7:4	7	pref
LEAF_NODE	7:8	7:8	4	)
STATEMENTS	7:10	17:1	4	
LEAF_NODE	7:10	7:10	5	{
STATEMENTS	8:2	13:2	5	
SELECTION	8:2	8:40	6	
KEYWORD	8:2	8:2	7	if
LEAF_NODE	8:2	8:2	8	if
LEAF_NODE	8:4	8:4	7	(
CONDITION	8:5	8:5	7	pref -> type != PURPLE_PREF_BOOLEAN
EXPR	8:5	8:19	8	pref -> type != PURPLE_PREF_BOOLEAN
FIELD	8:5	8:11	9	pref -> type
LEAF_NODE	8:5	8:5	10	pref
LEAF_NODE	8:9	8:9	10	->
LEAF_NODE	8:11	8:11	10	type
EQ_OPERATOR	8:16	8:16	9	!=
LEAF_NODE	8:16	8:16	10	!=
FIELD	8:19	8:19	9	PURPLE_PREF_BOOLEAN
LEAF_NODE	8:19	8:19	10	PURPLE_PREF_BOOLEAN
LEAF_NODE	8:38	8:38	7	)
STATEMENTS	8:40	12:2	7	
LEAF_NODE	8:40	8:40	8	{
STATEMENTS	9:3	11:3	8	
EXPR_STATEMENT	9:3	10:60	9	purple_debug_error ( "prefs" , "purple_prefs_set_bool: %s not a boolean pref\n" , name ) ;
EXPR	9:3	9:3	10	purple_debug_error ( "prefs" , "purple_prefs_set_bool: %s not a boolean pref\n" , name )
FUNCTION_CALL	9:3	10:59	11	purple_debug_error ( "prefs" , "purple_prefs_set_bool: %s not a boolean pref\n" , name )
CALLEE	9:3	9:3	12	purple_debug_error
LEAF_NODE	9:3	9:3	13	purple_debug_error
LEAF_NODE	9:21	9:21	12	(
ARGUMENT	9:22	9:22	12	"prefs"
FIELD	9:22	9:22	13	"prefs"
LEAF_NODE	9:22	9:22	14	"prefs"
LEAF_NODE	9:29	9:29	12	,
ARGUMENT	10:5	10:5	12	"purple_prefs_set_bool: %s not a boolean pref\n"
FIELD	10:5	10:5	13	"purple_prefs_set_bool: %s not a boolean pref\n"
LEAF_NODE	10:5	10:5	14	"purple_prefs_set_bool: %s not a boolean pref\n"
LEAF_NODE	10:53	10:53	12	,
ARGUMENT	10:55	10:55	12	name
FIELD	10:55	10:55	13	name
LEAF_NODE	10:55	10:55	14	name
LEAF_NODE	10:59	10:59	12	)
LEAF_NODE	10:60	10:60	10	;
JUMP_STATEMENT	11:3	11:9	9	return DESTINATION ;
KEYWORD	11:3	11:3	10	return
LEAF_NODE	11:3	11:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	11:9	11:9	10	;
LEAF_NODE	12:2	12:2	8	}
SELECTION	13:2	13:35	6	
KEYWORD	13:2	13:2	7	if
LEAF_NODE	13:2	13:2	8	if
LEAF_NODE	13:4	13:4	7	(
CONDITION	13:5	13:5	7	pref -> value . boolean != value
EXPR	13:5	13:28	8	pref -> value . boolean != value
FIELD	13:5	13:17	9	pref -> value . boolean
LEAF_NODE	13:5	13:5	10	pref
LEAF_NODE	13:9	13:9	10	->
LEAF_NODE	13:11	13:11	10	value
LEAF_NODE	13:16	13:16	10	.
LEAF_NODE	13:17	13:17	10	boolean
EQ_OPERATOR	13:25	13:25	9	!=
LEAF_NODE	13:25	13:25	10	!=
FIELD	13:28	13:28	9	value
LEAF_NODE	13:28	13:28	10	value
LEAF_NODE	13:33	13:33	7	)
STATEMENTS	13:35	16:2	7	
LEAF_NODE	13:35	13:35	8	{
STATEMENTS	14:3	15:3	8	
EXPR_STATEMENT	14:3	14:30	9	pref -> value . boolean = value ;
EXPR	14:3	14:3	10	pref -> value . boolean = value
ASSIGN	14:3	14:25	11	pref -> value . boolean = value
LVAL	14:3	14:3	12	pref -> value . boolean
FIELD	14:3	14:15	13	pref -> value . boolean
LEAF_NODE	14:3	14:3	14	pref
LEAF_NODE	14:7	14:7	14	->
LEAF_NODE	14:9	14:9	14	value
LEAF_NODE	14:14	14:14	14	.
LEAF_NODE	14:15	14:15	14	boolean
ASSIGN_OP	14:23	14:23	12	=
LEAF_NODE	14:23	14:23	13	=
RVAL	14:25	14:25	12	value
FIELD	14:25	14:25	13	value
LEAF_NODE	14:25	14:25	14	value
LEAF_NODE	14:30	14:30	10	;
EXPR_STATEMENT	15:3	15:27	9	do_callbacks ( name , pref ) ;
EXPR	15:3	15:3	10	do_callbacks ( name , pref )
FUNCTION_CALL	15:3	15:26	11	do_callbacks ( name , pref )
CALLEE	15:3	15:3	12	do_callbacks
LEAF_NODE	15:3	15:3	13	do_callbacks
LEAF_NODE	15:15	15:15	12	(
ARGUMENT	15:16	15:16	12	name
FIELD	15:16	15:16	13	name
LEAF_NODE	15:16	15:16	14	name
LEAF_NODE	15:20	15:20	12	,
ARGUMENT	15:22	15:22	12	pref
FIELD	15:22	15:22	13	pref
LEAF_NODE	15:22	15:22	14	pref
LEAF_NODE	15:26	15:26	12	)
LEAF_NODE	15:27	15:27	10	;
LEAF_NODE	16:2	16:2	8	}
LEAF_NODE	17:1	17:1	5	}
SELECTION	17:3	17:8	3	
KEYWORD	17:3	17:3	4	else
LEAF_NODE	17:3	17:3	5	else
STATEMENTS	17:8	19:1	4	
LEAF_NODE	17:8	17:8	5	{
STATEMENTS	18:2	18:2	5	
EXPR_STATEMENT	18:2	18:36	6	purple_prefs_add_bool ( name , value ) ;
EXPR	18:2	18:2	7	purple_prefs_add_bool ( name , value )
FUNCTION_CALL	18:2	18:35	8	purple_prefs_add_bool ( name , value )
CALLEE	18:2	18:2	9	purple_prefs_add_bool
LEAF_NODE	18:2	18:2	10	purple_prefs_add_bool
LEAF_NODE	18:23	18:23	9	(
ARGUMENT	18:24	18:24	9	name
FIELD	18:24	18:24	10	name
LEAF_NODE	18:24	18:24	11	name
LEAF_NODE	18:28	18:28	9	,
ARGUMENT	18:30	18:30	9	value
FIELD	18:30	18:30	10	value
LEAF_NODE	18:30	18:30	11	value
LEAF_NODE	18:35	18:35	9	)
LEAF_NODE	18:36	18:36	7	;
LEAF_NODE	19:1	19:1	5	}
LEAF_NODE	20:0	20:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	15:0	1	
RETURN_TYPE	1:0	1:14	2	static inline size_t
LEAF_NODE	1:0	1:0	3	static
LEAF_NODE	1:7	1:7	3	inline
TYPE_NAME	1:14	1:14	3	size_t
LEAF_NODE	1:14	1:14	4	size_t
FUNCTION_NAME	2:0	2:0	2	uint32_size
LEAF_NODE	2:0	2:0	3	uint32_size
PARAMETER_LIST	2:11	2:22	2	( uint32_t v )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:21	3	uint32_t v
TYPE	2:12	2:12	4	uint32_t
TYPE_NAME	2:12	2:12	5	uint32_t
LEAF_NODE	2:12	2:12	6	uint32_t
NAME	2:21	2:21	4	v
LEAF_NODE	2:21	2:21	5	v
LEAF_NODE	2:22	2:22	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	12:3	2	
SELECTION	4:1	4:19	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	v < ( 1 << 7 )
EXPR	4:5	4:16	5	v < ( 1 << 7 )
FIELD	4:5	4:5	6	v
LEAF_NODE	4:5	4:5	7	v
REL_OPERATOR	4:7	4:7	6	<
LEAF_NODE	4:7	4:7	7	<
LEAF_NODE	4:9	4:9	6	(
FIELD	4:10	4:10	6	1
LEAF_NODE	4:10	4:10	7	1
LEAF_NODE	4:12	4:12	6	<<
FIELD	4:15	4:15	6	7
LEAF_NODE	4:15	4:15	7	7
LEAF_NODE	4:16	4:16	6	)
LEAF_NODE	4:17	4:17	4	)
STATEMENTS	4:19	6:1	4	
LEAF_NODE	4:19	4:19	5	{
STATEMENTS	5:2	5:2	5	
JUMP_STATEMENT	5:2	5:10	6	return 1 ;
KEYWORD	5:2	5:2	7	return
LEAF_NODE	5:2	5:2	8	return
DESTINATION	5:9	5:9	7	1
EXPR	5:9	5:9	8	1
FIELD	5:9	5:9	9	1
LEAF_NODE	5:9	5:9	10	1
LEAF_NODE	5:10	5:10	7	;
LEAF_NODE	6:1	6:1	5	}
SELECTION	6:3	6:8	3	
KEYWORD	6:3	6:3	4	else
LEAF_NODE	6:3	6:3	5	else
STATEMENTS	6:8	6:8	4	
SELECTION	6:8	6:27	5	
KEYWORD	6:8	6:8	6	if
LEAF_NODE	6:8	6:8	7	if
LEAF_NODE	6:11	6:11	6	(
CONDITION	6:12	6:12	6	v < ( 1 << 14 )
EXPR	6:12	6:24	7	v < ( 1 << 14 )
FIELD	6:12	6:12	8	v
LEAF_NODE	6:12	6:12	9	v
REL_OPERATOR	6:14	6:14	8	<
LEAF_NODE	6:14	6:14	9	<
LEAF_NODE	6:16	6:16	8	(
FIELD	6:17	6:17	8	1
LEAF_NODE	6:17	6:17	9	1
LEAF_NODE	6:19	6:19	8	<<
FIELD	6:22	6:22	8	14
LEAF_NODE	6:22	6:22	9	14
LEAF_NODE	6:24	6:24	8	)
LEAF_NODE	6:25	6:25	6	)
STATEMENTS	6:27	8:1	6	
LEAF_NODE	6:27	6:27	7	{
STATEMENTS	7:2	7:2	7	
JUMP_STATEMENT	7:2	7:10	8	return 2 ;
KEYWORD	7:2	7:2	9	return
LEAF_NODE	7:2	7:2	10	return
DESTINATION	7:9	7:9	9	2
EXPR	7:9	7:9	10	2
FIELD	7:9	7:9	11	2
LEAF_NODE	7:9	7:9	12	2
LEAF_NODE	7:10	7:10	9	;
LEAF_NODE	8:1	8:1	7	}
SELECTION	8:3	8:8	3	
KEYWORD	8:3	8:3	4	else
LEAF_NODE	8:3	8:3	5	else
STATEMENTS	8:8	8:8	4	
SELECTION	8:8	8:27	5	
KEYWORD	8:8	8:8	6	if
LEAF_NODE	8:8	8:8	7	if
LEAF_NODE	8:11	8:11	6	(
CONDITION	8:12	8:12	6	v < ( 1 << 21 )
EXPR	8:12	8:24	7	v < ( 1 << 21 )
FIELD	8:12	8:12	8	v
LEAF_NODE	8:12	8:12	9	v
REL_OPERATOR	8:14	8:14	8	<
LEAF_NODE	8:14	8:14	9	<
LEAF_NODE	8:16	8:16	8	(
FIELD	8:17	8:17	8	1
LEAF_NODE	8:17	8:17	9	1
LEAF_NODE	8:19	8:19	8	<<
FIELD	8:22	8:22	8	21
LEAF_NODE	8:22	8:22	9	21
LEAF_NODE	8:24	8:24	8	)
LEAF_NODE	8:25	8:25	6	)
STATEMENTS	8:27	10:1	6	
LEAF_NODE	8:27	8:27	7	{
STATEMENTS	9:2	9:2	7	
JUMP_STATEMENT	9:2	9:10	8	return 3 ;
KEYWORD	9:2	9:2	9	return
LEAF_NODE	9:2	9:2	10	return
DESTINATION	9:9	9:9	9	3
EXPR	9:9	9:9	10	3
FIELD	9:9	9:9	11	3
LEAF_NODE	9:9	9:9	12	3
LEAF_NODE	9:10	9:10	9	;
LEAF_NODE	10:1	10:1	7	}
SELECTION	10:3	10:8	3	
KEYWORD	10:3	10:3	4	else
LEAF_NODE	10:3	10:3	5	else
STATEMENTS	10:8	10:8	4	
SELECTION	10:8	10:27	5	
KEYWORD	10:8	10:8	6	if
LEAF_NODE	10:8	10:8	7	if
LEAF_NODE	10:11	10:11	6	(
CONDITION	10:12	10:12	6	v < ( 1 << 28 )
EXPR	10:12	10:24	7	v < ( 1 << 28 )
FIELD	10:12	10:12	8	v
LEAF_NODE	10:12	10:12	9	v
REL_OPERATOR	10:14	10:14	8	<
LEAF_NODE	10:14	10:14	9	<
LEAF_NODE	10:16	10:16	8	(
FIELD	10:17	10:17	8	1
LEAF_NODE	10:17	10:17	9	1
LEAF_NODE	10:19	10:19	8	<<
FIELD	10:22	10:22	8	28
LEAF_NODE	10:22	10:22	9	28
LEAF_NODE	10:24	10:24	8	)
LEAF_NODE	10:25	10:25	6	)
STATEMENTS	10:27	12:1	6	
LEAF_NODE	10:27	10:27	7	{
STATEMENTS	11:2	11:2	7	
JUMP_STATEMENT	11:2	11:10	8	return 4 ;
KEYWORD	11:2	11:2	9	return
LEAF_NODE	11:2	11:2	10	return
DESTINATION	11:9	11:9	9	4
EXPR	11:9	11:9	10	4
FIELD	11:9	11:9	11	4
LEAF_NODE	11:9	11:9	12	4
LEAF_NODE	11:10	11:10	9	;
LEAF_NODE	12:1	12:1	7	}
SELECTION	12:3	12:8	3	
KEYWORD	12:3	12:3	4	else
LEAF_NODE	12:3	12:3	5	else
STATEMENTS	12:8	14:1	4	
LEAF_NODE	12:8	12:8	5	{
STATEMENTS	13:2	13:2	5	
JUMP_STATEMENT	13:2	13:10	6	return 5 ;
KEYWORD	13:2	13:2	7	return
LEAF_NODE	13:2	13:2	8	return
DESTINATION	13:9	13:9	7	5
EXPR	13:9	13:9	8	5
FIELD	13:9	13:9	9	5
LEAF_NODE	13:9	13:9	10	5
LEAF_NODE	13:10	13:10	7	;
LEAF_NODE	14:1	14:1	5	}
LEAF_NODE	15:0	15:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	27:0	1	
RETURN_TYPE	1:0	1:8	2	xmlnode *
TYPE_NAME	1:0	1:0	3	xmlnode
LEAF_NODE	1:0	1:0	4	xmlnode
LEAF_NODE	1:8	1:8	3	*
FUNCTION_NAME	2:0	2:0	2	xmlnode_get_child_with_namespace
LEAF_NODE	2:0	2:0	3	xmlnode_get_child_with_namespace
PARAMETER_LIST	2:32	2:88	2	( const xmlnode * parent , const char * name , const char * ns )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:48	3	const xmlnode * parent
TYPE	2:33	2:47	4	const xmlnode *
TYPE_NAME	2:33	2:39	5	const xmlnode
LEAF_NODE	2:33	2:33	6	const
LEAF_NODE	2:39	2:39	6	xmlnode
POINTER	2:47	2:47	5	*
LEAF_NODE	2:47	2:47	6	*
NAME	2:48	2:48	4	parent
LEAF_NODE	2:48	2:48	5	parent
LEAF_NODE	2:54	2:54	3	,
PARAMETER_DECL	2:56	2:68	3	const char * name
TYPE	2:56	2:67	4	const char *
TYPE_NAME	2:56	2:62	5	const char
LEAF_NODE	2:56	2:56	6	const
LEAF_NODE	2:62	2:62	6	char
POINTER	2:67	2:67	5	*
LEAF_NODE	2:67	2:67	6	*
NAME	2:68	2:68	4	name
LEAF_NODE	2:68	2:68	5	name
LEAF_NODE	2:72	2:72	3	,
PARAMETER_DECL	2:74	2:86	3	const char * ns
TYPE	2:74	2:85	4	const char *
TYPE_NAME	2:74	2:80	5	const char
LEAF_NODE	2:74	2:74	6	const
LEAF_NODE	2:80	2:80	6	char
POINTER	2:85	2:85	5	*
LEAF_NODE	2:85	2:85	6	*
NAME	2:86	2:86	4	ns
LEAF_NODE	2:86	2:86	5	ns
LEAF_NODE	2:88	2:88	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	26:1	2	
SIMPLE_DECL	4:1	4:24	3	xmlnode * x , xmlnode * ret ; ret = NULL ;
INIT_DECL_LIST	4:1	4:1	4	xmlnode * x , xmlnode * ret ; ret = NULL
VAR_DECL	4:1	4:10	5	xmlnode * x
TYPE	4:1	4:9	6	xmlnode *
TYPE_NAME	4:1	4:1	7	xmlnode
LEAF_NODE	4:1	4:1	8	xmlnode
POINTER	4:9	4:9	7	*
LEAF_NODE	4:9	4:9	8	*
NAME	4:10	4:10	6	x
LEAF_NODE	4:10	4:10	7	x
LEAF_NODE	4:11	4:11	5	,
VAR_DECL	4:1	4:14	5	xmlnode * ret ; ret = NULL
TYPE	4:1	4:13	6	xmlnode *
TYPE_NAME	4:1	4:1	7	xmlnode
LEAF_NODE	4:1	4:1	8	xmlnode
POINTER	4:13	4:13	7	*
LEAF_NODE	4:13	4:13	8	*
NAME	4:14	4:14	6	ret
LEAF_NODE	4:14	4:14	7	ret
LEAF_NODE	0:0	0:0	6	;
INIT	4:14	4:14	6	ret = NULL
ASSIGN	4:14	4:20	7	ret = NULL
LVAL	4:14	4:14	8	ret
NAME	4:14	4:14	9	ret
LEAF_NODE	4:14	4:14	10	ret
ASSIGN_OP	4:18	4:18	8	=
LEAF_NODE	4:18	4:18	9	=
RVAL	4:20	4:20	8	NULL
FIELD	4:20	4:20	9	NULL
LEAF_NODE	4:20	4:20	10	NULL
LEAF_NODE	4:24	4:24	4	;
SIMPLE_DECL	5:1	5:13	3	char * names ;
VAR_DECL	5:1	5:8	4	char * names
TYPE	5:1	5:7	5	char *
TYPE_NAME	5:1	5:1	6	char
LEAF_NODE	5:1	5:1	7	char
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	names
LEAF_NODE	5:8	5:8	6	names
LEAF_NODE	5:13	5:13	4	;
SIMPLE_DECL	6:1	6:31	3	char * parent_name , char * child_name ;
INIT_DECL_LIST	6:1	6:1	4	char * parent_name , char * child_name
VAR_DECL	6:1	6:7	5	char * parent_name
TYPE	6:1	6:6	6	char *
TYPE_NAME	6:1	6:1	7	char
LEAF_NODE	6:1	6:1	8	char
POINTER	6:6	6:6	7	*
LEAF_NODE	6:6	6:6	8	*
NAME	6:7	6:7	6	parent_name
LEAF_NODE	6:7	6:7	7	parent_name
LEAF_NODE	6:18	6:18	5	,
VAR_DECL	6:1	6:21	5	char * child_name
TYPE	6:1	6:20	6	char *
TYPE_NAME	6:1	6:1	7	char
LEAF_NODE	6:1	6:1	8	char
POINTER	6:20	6:20	7	*
LEAF_NODE	6:20	6:20	8	*
NAME	6:21	6:21	6	child_name
LEAF_NODE	6:21	6:21	7	child_name
LEAF_NODE	6:31	6:31	4	;
EXPR_STATEMENT	7:1	7:43	3	g_return_val_if_fail ( parent != NULL , NULL ) ;
EXPR	7:1	7:1	4	g_return_val_if_fail ( parent != NULL , NULL )
FUNCTION_CALL	7:1	7:42	5	g_return_val_if_fail ( parent != NULL , NULL )
CALLEE	7:1	7:1	6	g_return_val_if_fail
LEAF_NODE	7:1	7:1	7	g_return_val_if_fail
LEAF_NODE	7:21	7:21	6	(
ARGUMENT	7:22	7:32	6	parent != NULL
FIELD	7:22	7:22	7	parent
LEAF_NODE	7:22	7:22	8	parent
EQ_OPERATOR	7:29	7:29	7	!=
LEAF_NODE	7:29	7:29	8	!=
FIELD	7:32	7:32	7	NULL
LEAF_NODE	7:32	7:32	8	NULL
LEAF_NODE	7:36	7:36	6	,
ARGUMENT	7:38	7:38	6	NULL
FIELD	7:38	7:38	7	NULL
LEAF_NODE	7:38	7:38	8	NULL
LEAF_NODE	7:42	7:42	6	)
LEAF_NODE	7:43	7:43	4	;
EXPR_STATEMENT	8:1	8:41	3	g_return_val_if_fail ( name != NULL , NULL ) ;
EXPR	8:1	8:1	4	g_return_val_if_fail ( name != NULL , NULL )
FUNCTION_CALL	8:1	8:40	5	g_return_val_if_fail ( name != NULL , NULL )
CALLEE	8:1	8:1	6	g_return_val_if_fail
LEAF_NODE	8:1	8:1	7	g_return_val_if_fail
LEAF_NODE	8:21	8:21	6	(
ARGUMENT	8:22	8:30	6	name != NULL
FIELD	8:22	8:22	7	name
LEAF_NODE	8:22	8:22	8	name
EQ_OPERATOR	8:27	8:27	7	!=
LEAF_NODE	8:27	8:27	8	!=
FIELD	8:30	8:30	7	NULL
LEAF_NODE	8:30	8:30	8	NULL
LEAF_NODE	8:34	8:34	6	,
ARGUMENT	8:36	8:36	6	NULL
FIELD	8:36	8:36	7	NULL
LEAF_NODE	8:36	8:36	8	NULL
LEAF_NODE	8:40	8:40	6	)
LEAF_NODE	8:41	8:41	4	;
EXPR_STATEMENT	9:1	9:33	3	names = g_strsplit ( name , "/" , 2 ) ;
EXPR	9:1	9:1	4	names = g_strsplit ( name , "/" , 2 )
ASSIGN	9:1	9:9	5	names = g_strsplit ( name , "/" , 2 )
LVAL	9:1	9:1	6	names
FIELD	9:1	9:1	7	names
LEAF_NODE	9:1	9:1	8	names
ASSIGN_OP	9:7	9:7	6	=
LEAF_NODE	9:7	9:7	7	=
RVAL	9:9	9:9	6	g_strsplit ( name , "/" , 2 )
FUNCTION_CALL	9:9	9:32	7	g_strsplit ( name , "/" , 2 )
CALLEE	9:9	9:9	8	g_strsplit
LEAF_NODE	9:9	9:9	9	g_strsplit
LEAF_NODE	9:19	9:19	8	(
ARGUMENT	9:20	9:20	8	name
FIELD	9:20	9:20	9	name
LEAF_NODE	9:20	9:20	10	name
LEAF_NODE	9:24	9:24	8	,
ARGUMENT	9:26	9:26	8	"/"
FIELD	9:26	9:26	9	"/"
LEAF_NODE	9:26	9:26	10	"/"
LEAF_NODE	9:29	9:29	8	,
ARGUMENT	9:31	9:31	8	2
FIELD	9:31	9:31	9	2
LEAF_NODE	9:31	9:31	10	2
LEAF_NODE	9:32	9:32	8	)
LEAF_NODE	9:33	9:33	4	;
EXPR_STATEMENT	10:1	10:23	3	parent_name = names [ 0 ] ;
EXPR	10:1	10:1	4	parent_name = names [ 0 ]
ASSIGN	10:1	10:15	5	parent_name = names [ 0 ]
LVAL	10:1	10:1	6	parent_name
FIELD	10:1	10:1	7	parent_name
LEAF_NODE	10:1	10:1	8	parent_name
ASSIGN_OP	10:13	10:13	6	=
LEAF_NODE	10:13	10:13	7	=
RVAL	10:15	10:15	6	names [ 0 ]
FIELD	10:15	10:22	7	names [ 0 ]
LEAF_NODE	10:15	10:15	8	names
LEAF_NODE	10:20	10:20	8	[
EXPR	10:21	10:21	8	0
FIELD	10:21	10:21	9	0
LEAF_NODE	10:21	10:21	10	0
LEAF_NODE	10:22	10:22	8	]
LEAF_NODE	10:23	10:23	4	;
EXPR_STATEMENT	11:1	11:22	3	child_name = names [ 1 ] ;
EXPR	11:1	11:1	4	child_name = names [ 1 ]
ASSIGN	11:1	11:14	5	child_name = names [ 1 ]
LVAL	11:1	11:1	6	child_name
FIELD	11:1	11:1	7	child_name
LEAF_NODE	11:1	11:1	8	child_name
ASSIGN_OP	11:12	11:12	6	=
LEAF_NODE	11:12	11:12	7	=
RVAL	11:14	11:14	6	names [ 1 ]
FIELD	11:14	11:21	7	names [ 1 ]
LEAF_NODE	11:14	11:14	8	names
LEAF_NODE	11:19	11:19	8	[
EXPR	11:20	11:20	8	1
FIELD	11:20	11:20	9	1
LEAF_NODE	11:20	11:20	10	1
LEAF_NODE	11:21	11:21	8	]
LEAF_NODE	11:22	11:22	4	;
ITERATION	12:1	12:40	3	
KEYWORD	12:1	12:1	4	for
LEAF_NODE	12:1	12:1	5	for
LEAF_NODE	12:4	12:4	4	(
FOR_INIT	12:5	12:22	4	x = parent -> child ;
EXPR	12:5	12:5	5	x = parent -> child
ASSIGN	12:5	12:9	6	x = parent -> child
LVAL	12:5	12:5	7	x
FIELD	12:5	12:5	8	x
LEAF_NODE	12:5	12:5	9	x
ASSIGN_OP	12:7	12:7	7	=
LEAF_NODE	12:7	12:7	8	=
RVAL	12:9	12:9	7	parent -> child
FIELD	12:9	12:17	8	parent -> child
LEAF_NODE	12:9	12:9	9	parent
LEAF_NODE	12:15	12:15	9	->
LEAF_NODE	12:17	12:17	9	child
LEAF_NODE	12:22	12:22	5	;
CONDITION	12:24	12:24	4	x
EXPR	12:24	12:24	5	x
FIELD	12:24	12:24	6	x
LEAF_NODE	12:24	12:24	7	x
LEAF_NODE	12:25	12:25	4	;
FOR_EXPR	12:27	12:27	4	x = x -> next
EXPR	12:27	12:27	5	x = x -> next
ASSIGN	12:27	12:31	6	x = x -> next
LVAL	12:27	12:27	7	x
FIELD	12:27	12:27	8	x
LEAF_NODE	12:27	12:27	9	x
ASSIGN_OP	12:29	12:29	7	=
LEAF_NODE	12:29	12:29	8	=
RVAL	12:31	12:31	7	x -> next
FIELD	12:31	12:34	8	x -> next
LEAF_NODE	12:31	12:31	9	x
LEAF_NODE	12:32	12:32	9	->
LEAF_NODE	12:34	12:34	9	next
LEAF_NODE	12:38	12:38	4	)
STATEMENTS	12:40	22:1	4	
LEAF_NODE	12:40	12:40	5	{
STATEMENTS	14:2	17:2	5	
SIMPLE_DECL	14:2	14:26	6	const char * xmlns ; xmlns = NULL ;
VAR_DECL	14:2	14:14	7	const char * xmlns ; xmlns = NULL
TYPE	14:2	14:13	8	const char *
TYPE_NAME	14:2	14:8	9	const char
LEAF_NODE	14:2	14:2	10	const
LEAF_NODE	14:8	14:8	10	char
POINTER	14:13	14:13	9	*
LEAF_NODE	14:13	14:13	10	*
NAME	14:14	14:14	8	xmlns
LEAF_NODE	14:14	14:14	9	xmlns
LEAF_NODE	0:0	0:0	8	;
INIT	14:14	14:14	8	xmlns = NULL
ASSIGN	14:14	14:22	9	xmlns = NULL
LVAL	14:14	14:14	10	xmlns
NAME	14:14	14:14	11	xmlns
LEAF_NODE	14:14	14:14	12	xmlns
ASSIGN_OP	14:20	14:20	10	=
LEAF_NODE	14:20	14:20	11	=
RVAL	14:22	14:22	10	NULL
FIELD	14:22	14:22	11	NULL
LEAF_NODE	14:22	14:22	12	NULL
LEAF_NODE	14:26	14:26	7	;
SELECTION	15:2	16:3	6	
KEYWORD	15:2	15:2	7	if
LEAF_NODE	15:2	15:2	8	if
LEAF_NODE	15:4	15:4	7	(
CONDITION	15:5	15:5	7	ns
EXPR	15:5	15:5	8	ns
FIELD	15:5	15:5	9	ns
LEAF_NODE	15:5	15:5	10	ns
LEAF_NODE	15:7	15:7	7	)
STATEMENTS	16:3	16:3	7	
EXPR_STATEMENT	16:3	16:35	8	xmlns = xmlnode_get_namespace ( x ) ;
EXPR	16:3	16:3	9	xmlns = xmlnode_get_namespace ( x )
ASSIGN	16:3	16:11	10	xmlns = xmlnode_get_namespace ( x )
LVAL	16:3	16:3	11	xmlns
FIELD	16:3	16:3	12	xmlns
LEAF_NODE	16:3	16:3	13	xmlns
ASSIGN_OP	16:9	16:9	11	=
LEAF_NODE	16:9	16:9	12	=
RVAL	16:11	16:11	11	xmlnode_get_namespace ( x )
FUNCTION_CALL	16:11	16:34	12	xmlnode_get_namespace ( x )
CALLEE	16:11	16:11	13	xmlnode_get_namespace
LEAF_NODE	16:11	16:11	14	xmlnode_get_namespace
LEAF_NODE	16:32	16:32	13	(
ARGUMENT	16:33	16:33	13	x
FIELD	16:33	16:33	14	x
LEAF_NODE	16:33	16:33	15	x
LEAF_NODE	16:34	16:34	13	)
LEAF_NODE	16:35	16:35	9	;
SELECTION	17:2	18:35	6	
KEYWORD	17:2	17:2	7	if
LEAF_NODE	17:2	17:2	8	if
LEAF_NODE	17:4	17:4	7	(
CONDITION	17:5	17:5	7	x -> type == XMLNODE_TYPE_TAG && purple_strequal ( parent_name , x -> name ) && purple_strequal ( ns , xmlns )
EXPR	17:5	17:5	8	x -> type == XMLNODE_TYPE_TAG && purple_strequal ( parent_name , x -> name ) && purple_strequal ( ns , xmlns )
AND	17:5	17:36	9	x -> type == XMLNODE_TYPE_TAG && purple_strequal ( parent_name , x -> name ) && purple_strequal ( ns , xmlns )
EXPR	17:5	17:16	10	x -> type == XMLNODE_TYPE_TAG
FIELD	17:5	17:8	11	x -> type
LEAF_NODE	17:5	17:5	12	x
LEAF_NODE	17:6	17:6	12	->
LEAF_NODE	17:8	17:8	12	type
EQ_OPERATOR	17:13	17:13	11	==
LEAF_NODE	17:13	17:13	12	==
FIELD	17:16	17:16	11	XMLNODE_TYPE_TAG
LEAF_NODE	17:16	17:16	12	XMLNODE_TYPE_TAG
LEAF_NODE	17:33	17:33	10	&&
EXPR	17:36	17:36	10	purple_strequal ( parent_name , x -> name ) && purple_strequal ( ns , xmlns )
AND	17:36	18:7	11	purple_strequal ( parent_name , x -> name ) && purple_strequal ( ns , xmlns )
EXPR	17:36	17:36	12	purple_strequal ( parent_name , x -> name )
FUNCTION_CALL	17:36	17:72	13	purple_strequal ( parent_name , x -> name )
CALLEE	17:36	17:36	14	purple_strequal
LEAF_NODE	17:36	17:36	15	purple_strequal
LEAF_NODE	17:51	17:51	14	(
ARGUMENT	17:52	17:52	14	parent_name
FIELD	17:52	17:52	15	parent_name
LEAF_NODE	17:52	17:52	16	parent_name
LEAF_NODE	17:63	17:63	14	,
ARGUMENT	17:65	17:65	14	x -> name
FIELD	17:65	17:68	15	x -> name
LEAF_NODE	17:65	17:65	16	x
LEAF_NODE	17:66	17:66	16	->
LEAF_NODE	17:68	17:68	16	name
LEAF_NODE	17:72	17:72	14	)
LEAF_NODE	18:4	18:4	12	&&
EXPR	18:7	18:7	12	purple_strequal ( ns , xmlns )
FUNCTION_CALL	18:7	18:32	13	purple_strequal ( ns , xmlns )
CALLEE	18:7	18:7	14	purple_strequal
LEAF_NODE	18:7	18:7	15	purple_strequal
LEAF_NODE	18:22	18:22	14	(
ARGUMENT	18:23	18:23	14	ns
FIELD	18:23	18:23	15	ns
LEAF_NODE	18:23	18:23	16	ns
LEAF_NODE	18:25	18:25	14	,
ARGUMENT	18:27	18:27	14	xmlns
FIELD	18:27	18:27	15	xmlns
LEAF_NODE	18:27	18:27	16	xmlns
LEAF_NODE	18:32	18:32	14	)
LEAF_NODE	18:33	18:33	7	)
STATEMENTS	18:35	21:2	7	
LEAF_NODE	18:35	18:35	8	{
STATEMENTS	19:3	20:3	8	
EXPR_STATEMENT	19:3	19:10	9	ret = x ;
EXPR	19:3	19:3	10	ret = x
ASSIGN	19:3	19:9	11	ret = x
LVAL	19:3	19:3	12	ret
FIELD	19:3	19:3	13	ret
LEAF_NODE	19:3	19:3	14	ret
ASSIGN_OP	19:7	19:7	12	=
LEAF_NODE	19:7	19:7	13	=
RVAL	19:9	19:9	12	x
FIELD	19:9	19:9	13	x
LEAF_NODE	19:9	19:9	14	x
LEAF_NODE	19:10	19:10	10	;
JUMP_STATEMENT	20:3	20:8	9	break DESTINATION ;
KEYWORD	20:3	20:3	10	break
LEAF_NODE	20:3	20:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	20:8	20:8	10	;
LEAF_NODE	21:2	21:2	8	}
LEAF_NODE	22:1	22:1	5	}
SELECTION	23:1	24:2	3	
KEYWORD	23:1	23:1	4	if
LEAF_NODE	23:1	23:1	5	if
LEAF_NODE	23:3	23:3	4	(
CONDITION	23:4	23:4	4	child_name && ret
EXPR	23:4	23:4	5	child_name && ret
AND	23:4	23:18	6	child_name && ret
EXPR	23:4	23:4	7	child_name
FIELD	23:4	23:4	8	child_name
LEAF_NODE	23:4	23:4	9	child_name
LEAF_NODE	23:15	23:15	7	&&
EXPR	23:18	23:18	7	ret
FIELD	23:18	23:18	8	ret
LEAF_NODE	23:18	23:18	9	ret
LEAF_NODE	23:21	23:21	4	)
STATEMENTS	24:2	24:2	4	
EXPR_STATEMENT	24:2	24:42	5	ret = xmlnode_get_child ( ret , child_name ) ;
EXPR	24:2	24:2	6	ret = xmlnode_get_child ( ret , child_name )
ASSIGN	24:2	24:8	7	ret = xmlnode_get_child ( ret , child_name )
LVAL	24:2	24:2	8	ret
FIELD	24:2	24:2	9	ret
LEAF_NODE	24:2	24:2	10	ret
ASSIGN_OP	24:6	24:6	8	=
LEAF_NODE	24:6	24:6	9	=
RVAL	24:8	24:8	8	xmlnode_get_child ( ret , child_name )
FUNCTION_CALL	24:8	24:41	9	xmlnode_get_child ( ret , child_name )
CALLEE	24:8	24:8	10	xmlnode_get_child
LEAF_NODE	24:8	24:8	11	xmlnode_get_child
LEAF_NODE	24:25	24:25	10	(
ARGUMENT	24:26	24:26	10	ret
FIELD	24:26	24:26	11	ret
LEAF_NODE	24:26	24:26	12	ret
LEAF_NODE	24:29	24:29	10	,
ARGUMENT	24:31	24:31	10	child_name
FIELD	24:31	24:31	11	child_name
LEAF_NODE	24:31	24:31	12	child_name
LEAF_NODE	24:41	24:41	10	)
LEAF_NODE	24:42	24:42	6	;
EXPR_STATEMENT	25:1	25:18	3	g_strfreev ( names ) ;
EXPR	25:1	25:1	4	g_strfreev ( names )
FUNCTION_CALL	25:1	25:17	5	g_strfreev ( names )
CALLEE	25:1	25:1	6	g_strfreev
LEAF_NODE	25:1	25:1	7	g_strfreev
LEAF_NODE	25:11	25:11	6	(
ARGUMENT	25:12	25:12	6	names
FIELD	25:12	25:12	7	names
LEAF_NODE	25:12	25:12	8	names
LEAF_NODE	25:17	25:17	6	)
LEAF_NODE	25:18	25:18	4	;
JUMP_STATEMENT	26:1	26:11	3	return ret ;
KEYWORD	26:1	26:1	4	return
LEAF_NODE	26:1	26:1	5	return
DESTINATION	26:8	26:8	4	ret
EXPR	26:8	26:8	5	ret
FIELD	26:8	26:8	6	ret
LEAF_NODE	26:8	26:8	7	ret
LEAF_NODE	26:11	26:11	4	;
LEAF_NODE	27:0	27:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	19:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	window_scroll_up
LEAF_NODE	2:0	2:0	3	window_scroll_up
PARAMETER_LIST	2:16	2:51	2	( GntBindable * bindable , GList * null )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:30	3	GntBindable * bindable
TYPE	2:17	2:29	4	GntBindable *
TYPE_NAME	2:17	2:17	5	GntBindable
LEAF_NODE	2:17	2:17	6	GntBindable
POINTER	2:29	2:29	5	*
LEAF_NODE	2:29	2:29	6	*
NAME	2:30	2:30	4	bindable
LEAF_NODE	2:30	2:30	5	bindable
LEAF_NODE	2:38	2:38	3	,
PARAMETER_DECL	2:40	2:47	3	GList * null
TYPE	2:40	2:46	4	GList *
TYPE_NAME	2:40	2:40	5	GList
LEAF_NODE	2:40	2:40	6	GList
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	null
LEAF_NODE	2:47	2:47	5	null
LEAF_NODE	2:51	2:51	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	18:1	2	
SIMPLE_DECL	4:1	4:29	3	GntWM * wm ; wm = GNT_WM ( bindable ) ;
VAR_DECL	4:1	4:8	4	GntWM * wm ; wm = GNT_WM ( bindable )
TYPE	4:1	4:7	5	GntWM *
TYPE_NAME	4:1	4:1	6	GntWM
LEAF_NODE	4:1	4:1	7	GntWM
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	wm
LEAF_NODE	4:8	4:8	6	wm
LEAF_NODE	0:0	0:0	5	;
INIT	4:8	4:8	5	wm = GNT_WM ( bindable )
ASSIGN	4:8	4:13	6	wm = GNT_WM ( bindable )
LVAL	4:8	4:8	7	wm
NAME	4:8	4:8	8	wm
LEAF_NODE	4:8	4:8	9	wm
ASSIGN_OP	4:11	4:11	7	=
LEAF_NODE	4:11	4:11	8	=
RVAL	4:13	4:13	7	GNT_WM ( bindable )
FUNCTION_CALL	4:13	4:28	8	GNT_WM ( bindable )
CALLEE	4:13	4:13	9	GNT_WM
LEAF_NODE	4:13	4:13	10	GNT_WM
LEAF_NODE	4:19	4:19	9	(
ARGUMENT	4:20	4:20	9	bindable
FIELD	4:20	4:20	10	bindable
LEAF_NODE	4:20	4:20	11	bindable
LEAF_NODE	4:28	4:28	9	)
LEAF_NODE	4:29	4:29	4	;
SIMPLE_DECL	5:1	5:18	3	GntWidget * window ;
VAR_DECL	5:1	5:12	4	GntWidget * window
TYPE	5:1	5:11	5	GntWidget *
TYPE_NAME	5:1	5:1	6	GntWidget
LEAF_NODE	5:1	5:1	7	GntWidget
POINTER	5:11	5:11	6	*
LEAF_NODE	5:11	5:11	7	*
NAME	5:12	5:12	5	window
LEAF_NODE	5:12	5:12	6	window
LEAF_NODE	5:18	5:18	4	;
SIMPLE_DECL	6:1	6:14	3	GntNode * node ;
VAR_DECL	6:1	6:10	4	GntNode * node
TYPE	6:1	6:9	5	GntNode *
TYPE_NAME	6:1	6:1	6	GntNode
LEAF_NODE	6:1	6:1	7	GntNode
POINTER	6:9	6:9	6	*
LEAF_NODE	6:9	6:9	7	*
NAME	6:10	6:10	5	node
LEAF_NODE	6:10	6:10	6	node
LEAF_NODE	6:14	6:14	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	! wm -> cws -> ordered
EXPR	7:5	7:5	5	! wm -> cws -> ordered
UNARY_EXPR	7:5	7:6	6	! wm -> cws -> ordered
UNARY_OPERATOR	7:5	7:5	7	!
LEAF_NODE	7:5	7:5	8	!
FIELD	7:6	7:15	7	wm -> cws -> ordered
LEAF_NODE	7:6	7:6	8	wm
LEAF_NODE	7:8	7:8	8	->
LEAF_NODE	7:10	7:10	8	cws
LEAF_NODE	7:13	7:13	8	->
LEAF_NODE	7:15	7:15	8	ordered
LEAF_NODE	7:22	7:22	4	)
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:13	5	return TRUE ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
DESTINATION	8:9	8:9	6	TRUE
EXPR	8:9	8:9	7	TRUE
FIELD	8:9	8:9	8	TRUE
LEAF_NODE	8:9	8:9	9	TRUE
LEAF_NODE	8:13	8:13	6	;
EXPR_STATEMENT	9:1	9:32	3	window = wm -> cws -> ordered -> data ;
EXPR	9:1	9:1	4	window = wm -> cws -> ordered -> data
ASSIGN	9:1	9:10	5	window = wm -> cws -> ordered -> data
LVAL	9:1	9:1	6	window
FIELD	9:1	9:1	7	window
LEAF_NODE	9:1	9:1	8	window
ASSIGN_OP	9:8	9:8	6	=
LEAF_NODE	9:8	9:8	7	=
RVAL	9:10	9:10	6	wm -> cws -> ordered -> data
FIELD	9:10	9:28	7	wm -> cws -> ordered -> data
LEAF_NODE	9:10	9:10	8	wm
LEAF_NODE	9:12	9:12	8	->
LEAF_NODE	9:14	9:14	8	cws
LEAF_NODE	9:17	9:17	8	->
LEAF_NODE	9:19	9:19	8	ordered
LEAF_NODE	9:26	9:26	8	->
LEAF_NODE	9:28	9:28	8	data
LEAF_NODE	9:32	9:32	4	;
EXPR_STATEMENT	10:1	10:46	3	node = g_hash_table_lookup ( wm -> nodes , window ) ;
EXPR	10:1	10:1	4	node = g_hash_table_lookup ( wm -> nodes , window )
ASSIGN	10:1	10:8	5	node = g_hash_table_lookup ( wm -> nodes , window )
LVAL	10:1	10:1	6	node
FIELD	10:1	10:1	7	node
LEAF_NODE	10:1	10:1	8	node
ASSIGN_OP	10:6	10:6	6	=
LEAF_NODE	10:6	10:6	7	=
RVAL	10:8	10:8	6	g_hash_table_lookup ( wm -> nodes , window )
FUNCTION_CALL	10:8	10:45	7	g_hash_table_lookup ( wm -> nodes , window )
CALLEE	10:8	10:8	8	g_hash_table_lookup
LEAF_NODE	10:8	10:8	9	g_hash_table_lookup
LEAF_NODE	10:27	10:27	8	(
ARGUMENT	10:28	10:28	8	wm -> nodes
FIELD	10:28	10:32	9	wm -> nodes
LEAF_NODE	10:28	10:28	10	wm
LEAF_NODE	10:30	10:30	10	->
LEAF_NODE	10:32	10:32	10	nodes
LEAF_NODE	10:37	10:37	8	,
ARGUMENT	10:39	10:39	8	window
FIELD	10:39	10:39	9	window
LEAF_NODE	10:39	10:39	10	window
LEAF_NODE	10:45	10:45	8	)
LEAF_NODE	10:46	10:46	4	;
SELECTION	11:1	12:2	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	! node
EXPR	11:5	11:5	5	! node
UNARY_EXPR	11:5	11:6	6	! node
UNARY_OPERATOR	11:5	11:5	7	!
LEAF_NODE	11:5	11:5	8	!
FIELD	11:6	11:6	7	node
LEAF_NODE	11:6	11:6	8	node
LEAF_NODE	11:10	11:10	4	)
STATEMENTS	12:2	12:2	4	
JUMP_STATEMENT	12:2	12:13	5	return TRUE ;
KEYWORD	12:2	12:2	6	return
LEAF_NODE	12:2	12:2	7	return
DESTINATION	12:9	12:9	6	TRUE
EXPR	12:9	12:9	7	TRUE
FIELD	12:9	12:9	8	TRUE
LEAF_NODE	12:9	12:9	9	TRUE
LEAF_NODE	12:13	12:13	6	;
SELECTION	13:1	13:19	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	node -> scroll
EXPR	13:5	13:5	5	node -> scroll
FIELD	13:5	13:11	6	node -> scroll
LEAF_NODE	13:5	13:5	7	node
LEAF_NODE	13:9	13:9	7	->
LEAF_NODE	13:11	13:11	7	scroll
LEAF_NODE	13:17	13:17	4	)
STATEMENTS	13:19	17:1	4	
LEAF_NODE	13:19	13:19	5	{
STATEMENTS	14:2	16:2	5	
EXPR_STATEMENT	14:2	14:16	6	node -> scroll -- ;
EXPR	14:2	14:2	7	node -> scroll --
FIELD	14:2	14:14	8	node -> scroll --
LEAF_NODE	14:2	14:2	9	node
LEAF_NODE	14:6	14:6	9	->
LEAF_NODE	14:8	14:8	9	scroll
LEAF_NODE	14:14	14:14	9	--
LEAF_NODE	14:16	14:16	7	;
EXPR_STATEMENT	15:2	15:31	6	gnt_wm_copy_win ( window , node ) ;
EXPR	15:2	15:2	7	gnt_wm_copy_win ( window , node )
FUNCTION_CALL	15:2	15:30	8	gnt_wm_copy_win ( window , node )
CALLEE	15:2	15:2	9	gnt_wm_copy_win
LEAF_NODE	15:2	15:2	10	gnt_wm_copy_win
LEAF_NODE	15:17	15:17	9	(
ARGUMENT	15:18	15:18	9	window
FIELD	15:18	15:18	10	window
LEAF_NODE	15:18	15:18	11	window
LEAF_NODE	15:24	15:24	9	,
ARGUMENT	15:26	15:26	9	node
FIELD	15:26	15:26	10	node
LEAF_NODE	15:26	15:26	11	node
LEAF_NODE	15:30	15:30	9	)
LEAF_NODE	15:31	15:31	7	;
EXPR_STATEMENT	16:2	16:19	6	update_screen ( wm ) ;
EXPR	16:2	16:2	7	update_screen ( wm )
FUNCTION_CALL	16:2	16:18	8	update_screen ( wm )
CALLEE	16:2	16:2	9	update_screen
LEAF_NODE	16:2	16:2	10	update_screen
LEAF_NODE	16:15	16:15	9	(
ARGUMENT	16:16	16:16	9	wm
FIELD	16:16	16:16	10	wm
LEAF_NODE	16:16	16:16	11	wm
LEAF_NODE	16:18	16:18	9	)
LEAF_NODE	16:19	16:19	7	;
LEAF_NODE	17:1	17:1	5	}
JUMP_STATEMENT	18:1	18:12	3	return TRUE ;
KEYWORD	18:1	18:1	4	return
LEAF_NODE	18:1	18:1	5	return
DESTINATION	18:8	18:8	4	TRUE
EXPR	18:8	18:8	5	TRUE
FIELD	18:8	18:8	6	TRUE
LEAF_NODE	18:8	18:8	7	TRUE
LEAF_NODE	18:12	18:12	4	;
LEAF_NODE	19:0	19:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	26:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	ice_connection_watch
LEAF_NODE	2:12	2:12	3	ice_connection_watch
PARAMETER_LIST	2:32	3:43	2	( IceConn connection , IcePointer client_data , Bool opening , IcePointer * watch_data )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:41	3	IceConn connection
TYPE	2:33	2:33	4	IceConn
TYPE_NAME	2:33	2:33	5	IceConn
LEAF_NODE	2:33	2:33	6	IceConn
NAME	2:41	2:41	4	connection
LEAF_NODE	2:41	2:41	5	connection
LEAF_NODE	2:51	2:51	3	,
PARAMETER_DECL	2:53	2:64	3	IcePointer client_data
TYPE	2:53	2:53	4	IcePointer
TYPE_NAME	2:53	2:53	5	IcePointer
LEAF_NODE	2:53	2:53	6	IcePointer
NAME	2:64	2:64	4	client_data
LEAF_NODE	2:64	2:64	5	client_data
LEAF_NODE	2:75	2:75	3	,
PARAMETER_DECL	3:7	3:12	3	Bool opening
TYPE	3:7	3:7	4	Bool
TYPE_NAME	3:7	3:7	5	Bool
LEAF_NODE	3:7	3:7	6	Bool
NAME	3:12	3:12	4	opening
LEAF_NODE	3:12	3:12	5	opening
LEAF_NODE	3:19	3:19	3	,
PARAMETER_DECL	3:21	3:33	3	IcePointer * watch_data
TYPE	3:21	3:32	4	IcePointer *
TYPE_NAME	3:21	3:21	5	IcePointer
LEAF_NODE	3:21	3:21	6	IcePointer
POINTER	3:32	3:32	5	*
LEAF_NODE	3:32	3:32	6	*
NAME	3:33	3:33	4	watch_data
LEAF_NODE	3:33	3:33	5	watch_data
LEAF_NODE	3:43	3:43	3	)
LEAF_NODE	3:45	3:45	2	{
STATEMENTS	4:1	25:1	2	
SIMPLE_DECL	4:1	4:44	3	struct ice_connection_info * conninfo ; conninfo = NULL ;
VAR_DECL	4:1	4:29	4	struct ice_connection_info * conninfo ; conninfo = NULL
TYPE	4:1	4:28	5	struct ice_connection_info *
TYPE_NAME	4:1	4:8	6	struct ice_connection_info
LEAF_NODE	4:1	4:1	7	struct
LEAF_NODE	4:8	4:8	7	ice_connection_info
POINTER	4:28	4:28	6	*
LEAF_NODE	4:28	4:28	7	*
NAME	4:29	4:29	5	conninfo
LEAF_NODE	4:29	4:29	6	conninfo
LEAF_NODE	0:0	0:0	5	;
INIT	4:29	4:29	5	conninfo = NULL
ASSIGN	4:29	4:40	6	conninfo = NULL
LVAL	4:29	4:29	7	conninfo
NAME	4:29	4:29	8	conninfo
LEAF_NODE	4:29	4:29	9	conninfo
ASSIGN_OP	4:38	4:38	7	=
LEAF_NODE	4:38	4:38	8	=
RVAL	4:40	4:40	7	NULL
FIELD	4:40	4:40	8	NULL
LEAF_NODE	4:40	4:40	9	NULL
LEAF_NODE	4:44	4:44	4	;
SELECTION	5:1	5:14	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	opening
EXPR	5:5	5:5	5	opening
FIELD	5:5	5:5	6	opening
LEAF_NODE	5:5	5:5	7	opening
LEAF_NODE	5:12	5:12	4	)
STATEMENTS	5:14	17:1	4	
LEAF_NODE	5:14	5:14	5	{
STATEMENTS	6:2	16:2	5	
EXPR_STATEMENT	6:2	7:43	6	purple_debug ( PURPLE_DEBUG_INFO , "Session Management" , "Handling new ICE connection... \n" ) ;
EXPR	6:2	6:2	7	purple_debug ( PURPLE_DEBUG_INFO , "Session Management" , "Handling new ICE connection... \n" )
FUNCTION_CALL	6:2	7:42	8	purple_debug ( PURPLE_DEBUG_INFO , "Session Management" , "Handling new ICE connection... \n" )
CALLEE	6:2	6:2	9	purple_debug
LEAF_NODE	6:2	6:2	10	purple_debug
LEAF_NODE	6:14	6:14	9	(
ARGUMENT	6:15	6:15	9	PURPLE_DEBUG_INFO
FIELD	6:15	6:15	10	PURPLE_DEBUG_INFO
LEAF_NODE	6:15	6:15	11	PURPLE_DEBUG_INFO
LEAF_NODE	6:32	6:32	9	,
ARGUMENT	6:34	6:34	9	"Session Management"
FIELD	6:34	6:34	10	"Session Management"
LEAF_NODE	6:34	6:34	11	"Session Management"
LEAF_NODE	6:54	6:54	9	,
ARGUMENT	7:7	7:7	9	"Handling new ICE connection... \n"
FIELD	7:7	7:7	10	"Handling new ICE connection... \n"
LEAF_NODE	7:7	7:7	11	"Handling new ICE connection... \n"
LEAF_NODE	7:42	7:42	9	)
LEAF_NODE	7:43	7:43	7	;
SELECTION	9:2	10:3	6	
KEYWORD	9:2	9:2	7	if
LEAF_NODE	9:2	9:2	8	if
LEAF_NODE	9:5	9:5	7	(
CONDITION	9:6	9:6	7	fcntl ( IceConnectionNumber ( connection ) , F_SETFD , FD_CLOEXEC ) != 0
EXPR	9:6	9:69	8	fcntl ( IceConnectionNumber ( connection ) , F_SETFD , FD_CLOEXEC ) != 0
FUNCTION_CALL	9:6	9:64	9	fcntl ( IceConnectionNumber ( connection ) , F_SETFD , FD_CLOEXEC )
CALLEE	9:6	9:6	10	fcntl
LEAF_NODE	9:6	9:6	11	fcntl
LEAF_NODE	9:11	9:11	10	(
ARGUMENT	9:12	9:12	10	IceConnectionNumber ( connection )
FUNCTION_CALL	9:12	9:42	11	IceConnectionNumber ( connection )
CALLEE	9:12	9:12	12	IceConnectionNumber
LEAF_NODE	9:12	9:12	13	IceConnectionNumber
LEAF_NODE	9:31	9:31	12	(
ARGUMENT	9:32	9:32	12	connection
FIELD	9:32	9:32	13	connection
LEAF_NODE	9:32	9:32	14	connection
LEAF_NODE	9:42	9:42	12	)
LEAF_NODE	9:43	9:43	10	,
ARGUMENT	9:45	9:45	10	F_SETFD
FIELD	9:45	9:45	11	F_SETFD
LEAF_NODE	9:45	9:45	12	F_SETFD
LEAF_NODE	9:52	9:52	10	,
ARGUMENT	9:54	9:54	10	FD_CLOEXEC
FIELD	9:54	9:54	11	FD_CLOEXEC
LEAF_NODE	9:54	9:54	12	FD_CLOEXEC
LEAF_NODE	9:64	9:64	10	)
EQ_OPERATOR	9:66	9:66	9	!=
LEAF_NODE	9:66	9:66	10	!=
FIELD	9:69	9:69	9	0
LEAF_NODE	9:69	9:69	10	0
LEAF_NODE	9:70	9:70	7	)
STATEMENTS	10:3	10:3	7	
EXPR_STATEMENT	10:3	10:66	8	purple_debug_warning ( "gtksession" , "couldn't set FD_CLOEXEC\n" ) ;
EXPR	10:3	10:3	9	purple_debug_warning ( "gtksession" , "couldn't set FD_CLOEXEC\n" )
FUNCTION_CALL	10:3	10:65	10	purple_debug_warning ( "gtksession" , "couldn't set FD_CLOEXEC\n" )
CALLEE	10:3	10:3	11	purple_debug_warning
LEAF_NODE	10:3	10:3	12	purple_debug_warning
LEAF_NODE	10:23	10:23	11	(
ARGUMENT	10:24	10:24	11	"gtksession"
FIELD	10:24	10:24	12	"gtksession"
LEAF_NODE	10:24	10:24	13	"gtksession"
LEAF_NODE	10:36	10:36	11	,
ARGUMENT	10:38	10:38	11	"couldn't set FD_CLOEXEC\n"
FIELD	10:38	10:38	12	"couldn't set FD_CLOEXEC\n"
LEAF_NODE	10:38	10:38	13	"couldn't set FD_CLOEXEC\n"
LEAF_NODE	10:65	10:65	11	)
LEAF_NODE	10:66	10:66	9	;
LEAF_NODE	11:2	11:2	6	conninfo
LEAF_NODE	11:11	11:11	6	=
LEAF_NODE	11:13	11:13	6	g_new
LEAF_NODE	11:18	11:18	6	(
LEAF_NODE	11:19	11:19	6	struct
LEAF_NODE	11:26	11:26	6	ice_connection_info
LEAF_NODE	11:45	11:45	6	,
LEAF_NODE	11:47	11:47	6	1
LEAF_NODE	11:48	11:48	6	)
LEAF_NODE	11:49	11:49	6	;
EXPR_STATEMENT	12:2	12:35	6	conninfo -> connection = connection ;
EXPR	12:2	12:2	7	conninfo -> connection = connection
ASSIGN	12:2	12:25	8	conninfo -> connection = connection
LVAL	12:2	12:2	9	conninfo -> connection
FIELD	12:2	12:12	10	conninfo -> connection
LEAF_NODE	12:2	12:2	11	conninfo
LEAF_NODE	12:10	12:10	11	->
LEAF_NODE	12:12	12:12	11	connection
ASSIGN_OP	12:23	12:23	9	=
LEAF_NODE	12:23	12:23	10	=
RVAL	12:25	12:25	9	connection
FIELD	12:25	12:25	10	connection
LEAF_NODE	12:25	12:25	11	connection
LEAF_NODE	12:35	12:35	7	;
EXPR_STATEMENT	14:2	15:42	6	conninfo -> input_id = purple_input_add ( IceConnectionNumber ( connection ) , PURPLE_INPUT_READ , ice_process_messages , conninfo ) ;
EXPR	14:2	14:2	7	conninfo -> input_id = purple_input_add ( IceConnectionNumber ( connection ) , PURPLE_INPUT_READ , ice_process_messages , conninfo )
ASSIGN	14:2	14:23	8	conninfo -> input_id = purple_input_add ( IceConnectionNumber ( connection ) , PURPLE_INPUT_READ , ice_process_messages , conninfo )
LVAL	14:2	14:2	9	conninfo -> input_id
FIELD	14:2	14:12	10	conninfo -> input_id
LEAF_NODE	14:2	14:2	11	conninfo
LEAF_NODE	14:10	14:10	11	->
LEAF_NODE	14:12	14:12	11	input_id
ASSIGN_OP	14:21	14:21	9	=
LEAF_NODE	14:21	14:21	10	=
RVAL	14:23	14:23	9	purple_input_add ( IceConnectionNumber ( connection ) , PURPLE_INPUT_READ , ice_process_messages , conninfo )
FUNCTION_CALL	14:23	15:41	10	purple_input_add ( IceConnectionNumber ( connection ) , PURPLE_INPUT_READ , ice_process_messages , conninfo )
CALLEE	14:23	14:23	11	purple_input_add
LEAF_NODE	14:23	14:23	12	purple_input_add
LEAF_NODE	14:39	14:39	11	(
ARGUMENT	14:40	14:40	11	IceConnectionNumber ( connection )
FUNCTION_CALL	14:40	14:70	12	IceConnectionNumber ( connection )
CALLEE	14:40	14:40	13	IceConnectionNumber
LEAF_NODE	14:40	14:40	14	IceConnectionNumber
LEAF_NODE	14:59	14:59	13	(
ARGUMENT	14:60	14:60	13	connection
FIELD	14:60	14:60	14	connection
LEAF_NODE	14:60	14:60	15	connection
LEAF_NODE	14:70	14:70	13	)
LEAF_NODE	14:71	14:71	11	,
ARGUMENT	14:73	14:73	11	PURPLE_INPUT_READ
FIELD	14:73	14:73	12	PURPLE_INPUT_READ
LEAF_NODE	14:73	14:73	13	PURPLE_INPUT_READ
LEAF_NODE	14:90	14:90	11	,
ARGUMENT	15:11	15:11	11	ice_process_messages
FIELD	15:11	15:11	12	ice_process_messages
LEAF_NODE	15:11	15:11	13	ice_process_messages
LEAF_NODE	15:31	15:31	11	,
ARGUMENT	15:33	15:33	11	conninfo
FIELD	15:33	15:33	12	conninfo
LEAF_NODE	15:33	15:33	13	conninfo
LEAF_NODE	15:41	15:41	11	)
LEAF_NODE	15:42	15:42	7	;
EXPR_STATEMENT	16:2	16:24	6	* watch_data = conninfo ;
EXPR	16:2	16:2	7	* watch_data = conninfo
ASSIGN	16:2	16:16	8	* watch_data = conninfo
LVAL	16:2	16:2	9	* watch_data
UNARY_EXPR	16:2	16:3	10	* watch_data
UNARY_OPERATOR	16:2	16:2	11	*
LEAF_NODE	16:2	16:2	12	*
FIELD	16:3	16:3	11	watch_data
LEAF_NODE	16:3	16:3	12	watch_data
ASSIGN_OP	16:14	16:14	9	=
LEAF_NODE	16:14	16:14	10	=
RVAL	16:16	16:16	9	conninfo
FIELD	16:16	16:16	10	conninfo
LEAF_NODE	16:16	16:16	11	conninfo
LEAF_NODE	16:24	16:24	7	;
LEAF_NODE	17:1	17:1	5	}
SELECTION	17:3	17:8	3	
KEYWORD	17:3	17:3	4	else
LEAF_NODE	17:3	17:3	5	else
STATEMENTS	17:8	24:1	4	
LEAF_NODE	17:8	17:8	5	{
STATEMENTS	18:2	23:2	5	
EXPR_STATEMENT	18:2	19:46	6	purple_debug ( PURPLE_DEBUG_INFO , "Session Management" , "Handling closed ICE connection... \n" ) ;
EXPR	18:2	18:2	7	purple_debug ( PURPLE_DEBUG_INFO , "Session Management" , "Handling closed ICE connection... \n" )
FUNCTION_CALL	18:2	19:45	8	purple_debug ( PURPLE_DEBUG_INFO , "Session Management" , "Handling closed ICE connection... \n" )
CALLEE	18:2	18:2	9	purple_debug
LEAF_NODE	18:2	18:2	10	purple_debug
LEAF_NODE	18:14	18:14	9	(
ARGUMENT	18:15	18:15	9	PURPLE_DEBUG_INFO
FIELD	18:15	18:15	10	PURPLE_DEBUG_INFO
LEAF_NODE	18:15	18:15	11	PURPLE_DEBUG_INFO
LEAF_NODE	18:32	18:32	9	,
ARGUMENT	18:34	18:34	9	"Session Management"
FIELD	18:34	18:34	10	"Session Management"
LEAF_NODE	18:34	18:34	11	"Session Management"
LEAF_NODE	18:54	18:54	9	,
ARGUMENT	19:7	19:7	9	"Handling closed ICE connection... \n"
FIELD	19:7	19:7	10	"Handling closed ICE connection... \n"
LEAF_NODE	19:7	19:7	11	"Handling closed ICE connection... \n"
LEAF_NODE	19:45	19:45	9	)
LEAF_NODE	19:46	19:46	7	;
EXPR_STATEMENT	21:2	21:54	6	conninfo = ( struct ice_connection_info * ) * watch_data ;
EXPR	21:2	21:2	7	conninfo = ( struct ice_connection_info * ) * watch_data
ASSIGN	21:2	21:13	8	conninfo = ( struct ice_connection_info * ) * watch_data
LVAL	21:2	21:2	9	conninfo
FIELD	21:2	21:2	10	conninfo
LEAF_NODE	21:2	21:2	11	conninfo
ASSIGN_OP	21:11	21:11	9	=
LEAF_NODE	21:11	21:11	10	=
RVAL	21:13	21:43	9	( struct ice_connection_info * ) * watch_data
LEAF_NODE	21:13	21:13	10	(
TYPE_NAME	21:14	21:21	10	struct ice_connection_info
LEAF_NODE	21:14	21:14	11	struct
LEAF_NODE	21:21	21:21	11	ice_connection_info
LEAF_NODE	21:40	21:40	10	*
LEAF_NODE	21:41	21:41	10	)
UNARY_EXPR	21:43	21:44	10	* watch_data
UNARY_OPERATOR	21:43	21:43	11	*
LEAF_NODE	21:43	21:43	12	*
FIELD	21:44	21:44	11	watch_data
LEAF_NODE	21:44	21:44	12	watch_data
LEAF_NODE	21:54	21:54	7	;
EXPR_STATEMENT	22:2	22:41	6	purple_input_remove ( conninfo -> input_id ) ;
EXPR	22:2	22:2	7	purple_input_remove ( conninfo -> input_id )
FUNCTION_CALL	22:2	22:40	8	purple_input_remove ( conninfo -> input_id )
CALLEE	22:2	22:2	9	purple_input_remove
LEAF_NODE	22:2	22:2	10	purple_input_remove
LEAF_NODE	22:21	22:21	9	(
ARGUMENT	22:22	22:22	9	conninfo -> input_id
FIELD	22:22	22:32	10	conninfo -> input_id
LEAF_NODE	22:22	22:22	11	conninfo
LEAF_NODE	22:30	22:30	11	->
LEAF_NODE	22:32	22:32	11	input_id
LEAF_NODE	22:40	22:40	9	)
LEAF_NODE	22:41	22:41	7	;
EXPR_STATEMENT	23:2	23:18	6	g_free ( conninfo ) ;
EXPR	23:2	23:2	7	g_free ( conninfo )
FUNCTION_CALL	23:2	23:17	8	g_free ( conninfo )
CALLEE	23:2	23:2	9	g_free
LEAF_NODE	23:2	23:2	10	g_free
LEAF_NODE	23:8	23:8	9	(
ARGUMENT	23:9	23:9	9	conninfo
FIELD	23:9	23:9	10	conninfo
LEAF_NODE	23:9	23:9	11	conninfo
LEAF_NODE	23:17	23:17	9	)
LEAF_NODE	23:18	23:18	7	;
LEAF_NODE	24:1	24:1	5	}
EXPR_STATEMENT	25:1	25:49	3	purple_debug ( PURPLE_DEBUG_INFO , NULL , "done.\n" ) ;
EXPR	25:1	25:1	4	purple_debug ( PURPLE_DEBUG_INFO , NULL , "done.\n" )
FUNCTION_CALL	25:1	25:48	5	purple_debug ( PURPLE_DEBUG_INFO , NULL , "done.\n" )
CALLEE	25:1	25:1	6	purple_debug
LEAF_NODE	25:1	25:1	7	purple_debug
LEAF_NODE	25:13	25:13	6	(
ARGUMENT	25:14	25:14	6	PURPLE_DEBUG_INFO
FIELD	25:14	25:14	7	PURPLE_DEBUG_INFO
LEAF_NODE	25:14	25:14	8	PURPLE_DEBUG_INFO
LEAF_NODE	25:31	25:31	6	,
ARGUMENT	25:33	25:33	6	NULL
FIELD	25:33	25:33	7	NULL
LEAF_NODE	25:33	25:33	8	NULL
LEAF_NODE	25:37	25:37	6	,
ARGUMENT	25:39	25:39	6	"done.\n"
FIELD	25:39	25:39	7	"done.\n"
LEAF_NODE	25:39	25:39	8	"done.\n"
LEAF_NODE	25:48	25:48	6	)
LEAF_NODE	25:49	25:49	4	;
LEAF_NODE	26:0	26:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	nm_folder_add_contacts_and_folders
LEAF_NODE	2:0	2:0	3	nm_folder_add_contacts_and_folders
PARAMETER_LIST	2:34	3:27	2	( NMUser * user , NMFolder * root , NMField * fields )
LEAF_NODE	2:34	2:34	3	(
PARAMETER_DECL	2:35	2:44	3	NMUser * user
TYPE	2:35	2:42	4	NMUser *
TYPE_NAME	2:35	2:35	5	NMUser
LEAF_NODE	2:35	2:35	6	NMUser
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:44	2:44	4	user
LEAF_NODE	2:44	2:44	5	user
LEAF_NODE	2:48	2:48	3	,
PARAMETER_DECL	2:50	2:61	3	NMFolder * root
TYPE	2:50	2:59	4	NMFolder *
TYPE_NAME	2:50	2:50	5	NMFolder
LEAF_NODE	2:50	2:50	6	NMFolder
POINTER	2:59	2:59	5	*
LEAF_NODE	2:59	2:59	6	*
NAME	2:61	2:61	4	root
LEAF_NODE	2:61	2:61	5	root
LEAF_NODE	2:65	2:65	3	,
PARAMETER_DECL	3:11	3:21	3	NMField * fields
TYPE	3:11	3:19	4	NMField *
TYPE_NAME	3:11	3:11	5	NMField
LEAF_NODE	3:11	3:11	6	NMField
POINTER	3:19	3:19	5	*
LEAF_NODE	3:19	3:19	6	*
NAME	3:21	3:21	4	fields
LEAF_NODE	3:21	3:21	5	fields
LEAF_NODE	3:27	3:27	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	6:1	6:1	2	
SELECTION	6:1	6:29	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	user && root && fields
EXPR	6:5	6:5	5	user && root && fields
AND	6:5	6:13	6	user && root && fields
EXPR	6:5	6:5	7	user
FIELD	6:5	6:5	8	user
LEAF_NODE	6:5	6:5	9	user
LEAF_NODE	6:10	6:10	7	&&
EXPR	6:13	6:13	7	root && fields
AND	6:13	6:21	8	root && fields
EXPR	6:13	6:13	9	root
FIELD	6:13	6:13	10	root
LEAF_NODE	6:13	6:13	11	root
LEAF_NODE	6:18	6:18	9	&&
EXPR	6:21	6:21	9	fields
FIELD	6:21	6:21	10	fields
LEAF_NODE	6:21	6:21	11	fields
LEAF_NODE	6:27	6:27	4	)
STATEMENTS	6:29	9:1	4	
LEAF_NODE	6:29	6:29	5	{
STATEMENTS	7:2	8:2	5	
EXPR_STATEMENT	7:2	7:28	6	_add_folders ( root , fields ) ;
EXPR	7:2	7:2	7	_add_folders ( root , fields )
FUNCTION_CALL	7:2	7:27	8	_add_folders ( root , fields )
CALLEE	7:2	7:2	9	_add_folders
LEAF_NODE	7:2	7:2	10	_add_folders
LEAF_NODE	7:14	7:14	9	(
ARGUMENT	7:15	7:15	9	root
FIELD	7:15	7:15	10	root
LEAF_NODE	7:15	7:15	11	root
LEAF_NODE	7:19	7:19	9	,
ARGUMENT	7:21	7:21	9	fields
FIELD	7:21	7:21	10	fields
LEAF_NODE	7:21	7:21	11	fields
LEAF_NODE	7:27	7:27	9	)
LEAF_NODE	7:28	7:28	7	;
EXPR_STATEMENT	8:2	8:35	6	_add_contacts ( user , root , fields ) ;
EXPR	8:2	8:2	7	_add_contacts ( user , root , fields )
FUNCTION_CALL	8:2	8:34	8	_add_contacts ( user , root , fields )
CALLEE	8:2	8:2	9	_add_contacts
LEAF_NODE	8:2	8:2	10	_add_contacts
LEAF_NODE	8:15	8:15	9	(
ARGUMENT	8:16	8:16	9	user
FIELD	8:16	8:16	10	user
LEAF_NODE	8:16	8:16	11	user
LEAF_NODE	8:20	8:20	9	,
ARGUMENT	8:22	8:22	9	root
FIELD	8:22	8:22	10	root
LEAF_NODE	8:22	8:22	11	root
LEAF_NODE	8:26	8:26	9	,
ARGUMENT	8:28	8:28	9	fields
FIELD	8:28	8:28	10	fields
LEAF_NODE	8:28	8:28	11	fields
LEAF_NODE	8:34	8:34	9	)
LEAF_NODE	8:35	8:35	7	;
LEAF_NODE	9:1	9:1	5	}
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	get_info_cb
LEAF_NODE	2:0	2:0	3	get_info_cb
PARAMETER_LIST	2:11	2:46	2	( GntMenuItem * item , gpointer ggconv )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:25	3	GntMenuItem * item
TYPE	2:12	2:24	4	GntMenuItem *
TYPE_NAME	2:12	2:12	5	GntMenuItem
LEAF_NODE	2:12	2:12	6	GntMenuItem
POINTER	2:24	2:24	5	*
LEAF_NODE	2:24	2:24	6	*
NAME	2:25	2:25	4	item
LEAF_NODE	2:25	2:25	5	item
LEAF_NODE	2:29	2:29	3	,
PARAMETER_DECL	2:31	2:40	3	gpointer ggconv
TYPE	2:31	2:31	4	gpointer
TYPE_NAME	2:31	2:31	5	gpointer
LEAF_NODE	2:31	2:31	6	gpointer
NAME	2:40	2:40	4	ggconv
LEAF_NODE	2:40	2:40	5	ggconv
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:24	3	FinchConv * ggc ; ggc = ggconv ;
VAR_DECL	4:1	4:12	4	FinchConv * ggc ; ggc = ggconv
TYPE	4:1	4:11	5	FinchConv *
TYPE_NAME	4:1	4:1	6	FinchConv
LEAF_NODE	4:1	4:1	7	FinchConv
POINTER	4:11	4:11	6	*
LEAF_NODE	4:11	4:11	7	*
NAME	4:12	4:12	5	ggc
LEAF_NODE	4:12	4:12	6	ggc
LEAF_NODE	0:0	0:0	5	;
INIT	4:12	4:12	5	ggc = ggconv
ASSIGN	4:12	4:18	6	ggc = ggconv
LVAL	4:12	4:12	7	ggc
NAME	4:12	4:12	8	ggc
LEAF_NODE	4:12	4:12	9	ggc
ASSIGN_OP	4:16	4:16	7	=
LEAF_NODE	4:16	4:16	8	=
RVAL	4:18	4:18	7	ggconv
FIELD	4:18	4:18	8	ggconv
LEAF_NODE	4:18	4:18	9	ggconv
LEAF_NODE	4:24	4:24	4	;
EXPR_STATEMENT	5:1	6:50	3	finch_retrieve_user_info ( purple_conversation_get_gc ( ggc -> active_conv ) , purple_conversation_get_name ( ggc -> active_conv ) ) ;
EXPR	5:1	5:1	4	finch_retrieve_user_info ( purple_conversation_get_gc ( ggc -> active_conv ) , purple_conversation_get_name ( ggc -> active_conv ) )
FUNCTION_CALL	5:1	6:49	5	finch_retrieve_user_info ( purple_conversation_get_gc ( ggc -> active_conv ) , purple_conversation_get_name ( ggc -> active_conv ) )
CALLEE	5:1	5:1	6	finch_retrieve_user_info
LEAF_NODE	5:1	5:1	7	finch_retrieve_user_info
LEAF_NODE	5:25	5:25	6	(
ARGUMENT	5:26	5:26	6	purple_conversation_get_gc ( ggc -> active_conv )
FUNCTION_CALL	5:26	5:69	7	purple_conversation_get_gc ( ggc -> active_conv )
CALLEE	5:26	5:26	8	purple_conversation_get_gc
LEAF_NODE	5:26	5:26	9	purple_conversation_get_gc
LEAF_NODE	5:52	5:52	8	(
ARGUMENT	5:53	5:53	8	ggc -> active_conv
FIELD	5:53	5:58	9	ggc -> active_conv
LEAF_NODE	5:53	5:53	10	ggc
LEAF_NODE	5:56	5:56	10	->
LEAF_NODE	5:58	5:58	10	active_conv
LEAF_NODE	5:69	5:69	8	)
LEAF_NODE	5:70	5:70	6	,
ARGUMENT	6:3	6:3	6	purple_conversation_get_name ( ggc -> active_conv )
FUNCTION_CALL	6:3	6:48	7	purple_conversation_get_name ( ggc -> active_conv )
CALLEE	6:3	6:3	8	purple_conversation_get_name
LEAF_NODE	6:3	6:3	9	purple_conversation_get_name
LEAF_NODE	6:31	6:31	8	(
ARGUMENT	6:32	6:32	8	ggc -> active_conv
FIELD	6:32	6:37	9	ggc -> active_conv
LEAF_NODE	6:32	6:32	10	ggc
LEAF_NODE	6:35	6:35	10	->
LEAF_NODE	6:37	6:37	10	active_conv
LEAF_NODE	6:48	6:48	8	)
LEAF_NODE	6:49	6:49	6	)
LEAF_NODE	6:50	6:50	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	65:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	init_plugin
LEAF_NODE	2:0	2:0	3	init_plugin
PARAMETER_LIST	2:11	2:32	2	( PurplePlugin * plugin )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:26	3	PurplePlugin * plugin
TYPE	2:12	2:25	4	PurplePlugin *
TYPE_NAME	2:12	2:12	5	PurplePlugin
LEAF_NODE	2:12	2:12	6	PurplePlugin
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	plugin
LEAF_NODE	2:26	2:26	5	plugin
LEAF_NODE	2:32	2:32	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	63:1	2	
SIMPLE_DECL	4:1	4:28	3	PurpleAccountOption * option ;
VAR_DECL	4:1	4:22	4	PurpleAccountOption * option
TYPE	4:1	4:21	5	PurpleAccountOption *
TYPE_NAME	4:1	4:1	6	PurpleAccountOption
LEAF_NODE	4:1	4:1	7	PurpleAccountOption
POINTER	4:21	4:21	6	*
LEAF_NODE	4:21	4:21	7	*
NAME	4:22	4:22	5	option
LEAF_NODE	4:22	4:22	6	option
LEAF_NODE	4:28	4:28	4	;
SIMPLE_DECL	5:1	5:30	3	PurpleAccountUserSplit * split ;
VAR_DECL	5:1	5:25	4	PurpleAccountUserSplit * split
TYPE	5:1	5:24	5	PurpleAccountUserSplit *
TYPE_NAME	5:1	5:1	6	PurpleAccountUserSplit
LEAF_NODE	5:1	5:1	7	PurpleAccountUserSplit
POINTER	5:24	5:24	6	*
LEAF_NODE	5:24	5:24	7	*
NAME	5:25	5:25	5	split
LEAF_NODE	5:25	5:25	6	split
LEAF_NODE	5:30	5:30	4	;
SIMPLE_DECL	6:1	6:14	3	char [ 256 ] tmp ;
VAR_DECL	6:1	6:6	4	char [ 256 ] tmp
TYPE	6:1	6:9	5	char [ 256 ]
TYPE_NAME	6:1	6:1	6	char
LEAF_NODE	6:1	6:1	7	char
TYPE_SUFFIX	6:9	6:13	6	[ 256 ]
LEAF_NODE	6:9	6:9	7	[
FIELD	6:10	6:10	7	256
LEAF_NODE	6:10	6:10	8	256
LEAF_NODE	6:13	6:13	7	]
NAME	6:6	6:6	5	tmp
LEAF_NODE	6:6	6:6	6	tmp
LEAF_NODE	6:14	6:14	4	;
SIMPLE_DECL	7:1	7:6	3	int i ;
VAR_DECL	7:1	7:5	4	int i
TYPE	7:1	7:1	5	int
TYPE_NAME	7:1	7:1	6	int
LEAF_NODE	7:1	7:1	7	int
NAME	7:5	7:5	5	i
LEAF_NODE	7:5	7:5	6	i
LEAF_NODE	7:6	7:6	4	;
SIMPLE_DECL	8:1	8:24	3	PurpleKeyValuePair * kvp ;
VAR_DECL	8:1	8:21	4	PurpleKeyValuePair * kvp
TYPE	8:1	8:20	5	PurpleKeyValuePair *
TYPE_NAME	8:1	8:1	6	PurpleKeyValuePair
LEAF_NODE	8:1	8:1	7	PurpleKeyValuePair
POINTER	8:20	8:20	6	*
LEAF_NODE	8:20	8:20	7	*
NAME	8:21	8:21	5	kvp
LEAF_NODE	8:21	8:21	6	kvp
LEAF_NODE	8:24	8:24	4	;
SIMPLE_DECL	9:1	9:19	3	GList * list ; list = NULL ;
VAR_DECL	9:1	9:8	4	GList * list ; list = NULL
TYPE	9:1	9:7	5	GList *
TYPE_NAME	9:1	9:1	6	GList
LEAF_NODE	9:1	9:1	7	GList
POINTER	9:7	9:7	6	*
LEAF_NODE	9:7	9:7	7	*
NAME	9:8	9:8	5	list
LEAF_NODE	9:8	9:8	6	list
LEAF_NODE	0:0	0:0	5	;
INIT	9:8	9:8	5	list = NULL
ASSIGN	9:8	9:15	6	list = NULL
LVAL	9:8	9:8	7	list
NAME	9:8	9:8	8	list
LEAF_NODE	9:8	9:8	9	list
ASSIGN_OP	9:13	9:13	7	=
LEAF_NODE	9:13	9:13	8	=
RVAL	9:15	9:15	7	NULL
FIELD	9:15	9:15	8	NULL
LEAF_NODE	9:15	9:15	9	NULL
LEAF_NODE	9:19	9:19	4	;
EXPR_STATEMENT	10:1	10:21	3	silc_plugin = plugin ;
EXPR	10:1	10:1	4	silc_plugin = plugin
ASSIGN	10:1	10:15	5	silc_plugin = plugin
LVAL	10:1	10:1	6	silc_plugin
FIELD	10:1	10:1	7	silc_plugin
LEAF_NODE	10:1	10:1	8	silc_plugin
ASSIGN_OP	10:13	10:13	6	=
LEAF_NODE	10:13	10:13	7	=
RVAL	10:15	10:15	6	plugin
FIELD	10:15	10:15	7	plugin
LEAF_NODE	10:15	10:15	8	plugin
LEAF_NODE	10:21	10:21	4	;
EXPR_STATEMENT	11:1	11:72	3	split = purple_account_user_split_new ( _ ( "Network" ) , "silcnet.org" , '@' ) ;
EXPR	11:1	11:1	4	split = purple_account_user_split_new ( _ ( "Network" ) , "silcnet.org" , '@' )
ASSIGN	11:1	11:9	5	split = purple_account_user_split_new ( _ ( "Network" ) , "silcnet.org" , '@' )
LVAL	11:1	11:1	6	split
FIELD	11:1	11:1	7	split
LEAF_NODE	11:1	11:1	8	split
ASSIGN_OP	11:7	11:7	6	=
LEAF_NODE	11:7	11:7	7	=
RVAL	11:9	11:9	6	purple_account_user_split_new ( _ ( "Network" ) , "silcnet.org" , '@' )
FUNCTION_CALL	11:9	11:71	7	purple_account_user_split_new ( _ ( "Network" ) , "silcnet.org" , '@' )
CALLEE	11:9	11:9	8	purple_account_user_split_new
LEAF_NODE	11:9	11:9	9	purple_account_user_split_new
LEAF_NODE	11:38	11:38	8	(
ARGUMENT	11:39	11:39	8	_ ( "Network" )
FUNCTION_CALL	11:39	11:50	9	_ ( "Network" )
CALLEE	11:39	11:39	10	_
LEAF_NODE	11:39	11:39	11	_
LEAF_NODE	11:40	11:40	10	(
ARGUMENT	11:41	11:41	10	"Network"
FIELD	11:41	11:41	11	"Network"
LEAF_NODE	11:41	11:41	12	"Network"
LEAF_NODE	11:50	11:50	10	)
LEAF_NODE	11:51	11:51	8	,
ARGUMENT	11:53	11:53	8	"silcnet.org"
FIELD	11:53	11:53	9	"silcnet.org"
LEAF_NODE	11:53	11:53	10	"silcnet.org"
LEAF_NODE	11:66	11:66	8	,
ARGUMENT	11:68	11:68	8	'@'
FIELD	11:68	11:68	9	'@'
LEAF_NODE	11:68	11:68	10	'@'
LEAF_NODE	11:71	11:71	8	)
LEAF_NODE	11:72	11:72	4	;
EXPR_STATEMENT	12:1	12:68	3	prpl_info . user_splits = g_list_append ( prpl_info . user_splits , split ) ;
EXPR	12:1	12:1	4	prpl_info . user_splits = g_list_append ( prpl_info . user_splits , split )
ASSIGN	12:1	12:25	5	prpl_info . user_splits = g_list_append ( prpl_info . user_splits , split )
LVAL	12:1	12:1	6	prpl_info . user_splits
FIELD	12:1	12:11	7	prpl_info . user_splits
LEAF_NODE	12:1	12:1	8	prpl_info
LEAF_NODE	12:10	12:10	8	.
LEAF_NODE	12:11	12:11	8	user_splits
ASSIGN_OP	12:23	12:23	6	=
LEAF_NODE	12:23	12:23	7	=
RVAL	12:25	12:25	6	g_list_append ( prpl_info . user_splits , split )
FUNCTION_CALL	12:25	12:67	7	g_list_append ( prpl_info . user_splits , split )
CALLEE	12:25	12:25	8	g_list_append
LEAF_NODE	12:25	12:25	9	g_list_append
LEAF_NODE	12:38	12:38	8	(
ARGUMENT	12:39	12:39	8	prpl_info . user_splits
FIELD	12:39	12:49	9	prpl_info . user_splits
LEAF_NODE	12:39	12:39	10	prpl_info
LEAF_NODE	12:48	12:48	10	.
LEAF_NODE	12:49	12:49	10	user_splits
LEAF_NODE	12:60	12:60	8	,
ARGUMENT	12:62	12:62	8	split
FIELD	12:62	12:62	9	split
LEAF_NODE	12:62	12:62	10	split
LEAF_NODE	12:67	12:67	8	)
LEAF_NODE	12:68	12:68	4	;
EXPR_STATEMENT	14:1	16:25	3	option = purple_account_option_string_new ( _ ( "Connect server" ) , "server" , "silc.silcnet.org" ) ;
EXPR	14:1	14:1	4	option = purple_account_option_string_new ( _ ( "Connect server" ) , "server" , "silc.silcnet.org" )
ASSIGN	14:1	14:10	5	option = purple_account_option_string_new ( _ ( "Connect server" ) , "server" , "silc.silcnet.org" )
LVAL	14:1	14:1	6	option
FIELD	14:1	14:1	7	option
LEAF_NODE	14:1	14:1	8	option
ASSIGN_OP	14:8	14:8	6	=
LEAF_NODE	14:8	14:8	7	=
RVAL	14:10	14:10	6	purple_account_option_string_new ( _ ( "Connect server" ) , "server" , "silc.silcnet.org" )
FUNCTION_CALL	14:10	16:24	7	purple_account_option_string_new ( _ ( "Connect server" ) , "server" , "silc.silcnet.org" )
CALLEE	14:10	14:10	8	purple_account_option_string_new
LEAF_NODE	14:10	14:10	9	purple_account_option_string_new
LEAF_NODE	14:42	14:42	8	(
ARGUMENT	14:43	14:43	8	_ ( "Connect server" )
FUNCTION_CALL	14:43	14:61	9	_ ( "Connect server" )
CALLEE	14:43	14:43	10	_
LEAF_NODE	14:43	14:43	11	_
LEAF_NODE	14:44	14:44	10	(
ARGUMENT	14:45	14:45	10	"Connect server"
FIELD	14:45	14:45	11	"Connect server"
LEAF_NODE	14:45	14:45	12	"Connect server"
LEAF_NODE	14:61	14:61	10	)
LEAF_NODE	14:62	14:62	8	,
ARGUMENT	15:6	15:6	8	"server"
FIELD	15:6	15:6	9	"server"
LEAF_NODE	15:6	15:6	10	"server"
LEAF_NODE	15:14	15:14	8	,
ARGUMENT	16:6	16:6	8	"silc.silcnet.org"
FIELD	16:6	16:6	9	"silc.silcnet.org"
LEAF_NODE	16:6	16:6	10	"silc.silcnet.org"
LEAF_NODE	16:24	16:24	8	)
LEAF_NODE	16:25	16:25	4	;
EXPR_STATEMENT	17:1	17:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	17:1	17:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	17:1	17:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	17:1	17:1	6	prpl_info . protocol_options
FIELD	17:1	17:11	7	prpl_info . protocol_options
LEAF_NODE	17:1	17:1	8	prpl_info
LEAF_NODE	17:10	17:10	8	.
LEAF_NODE	17:11	17:11	8	protocol_options
ASSIGN_OP	17:28	17:28	6	=
LEAF_NODE	17:28	17:28	7	=
RVAL	17:30	17:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	17:30	17:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	17:30	17:30	8	g_list_append
LEAF_NODE	17:30	17:30	9	g_list_append
LEAF_NODE	17:43	17:43	8	(
ARGUMENT	17:44	17:44	8	prpl_info . protocol_options
FIELD	17:44	17:54	9	prpl_info . protocol_options
LEAF_NODE	17:44	17:44	10	prpl_info
LEAF_NODE	17:53	17:53	10	.
LEAF_NODE	17:54	17:54	10	protocol_options
LEAF_NODE	17:70	17:70	8	,
ARGUMENT	17:72	17:72	8	option
FIELD	17:72	17:72	9	option
LEAF_NODE	17:72	17:72	10	option
LEAF_NODE	17:78	17:78	8	)
LEAF_NODE	17:79	17:79	4	;
EXPR_STATEMENT	18:1	18:63	3	option = purple_account_option_int_new ( _ ( "Port" ) , "port" , 706 ) ;
EXPR	18:1	18:1	4	option = purple_account_option_int_new ( _ ( "Port" ) , "port" , 706 )
ASSIGN	18:1	18:10	5	option = purple_account_option_int_new ( _ ( "Port" ) , "port" , 706 )
LVAL	18:1	18:1	6	option
FIELD	18:1	18:1	7	option
LEAF_NODE	18:1	18:1	8	option
ASSIGN_OP	18:8	18:8	6	=
LEAF_NODE	18:8	18:8	7	=
RVAL	18:10	18:10	6	purple_account_option_int_new ( _ ( "Port" ) , "port" , 706 )
FUNCTION_CALL	18:10	18:62	7	purple_account_option_int_new ( _ ( "Port" ) , "port" , 706 )
CALLEE	18:10	18:10	8	purple_account_option_int_new
LEAF_NODE	18:10	18:10	9	purple_account_option_int_new
LEAF_NODE	18:39	18:39	8	(
ARGUMENT	18:40	18:40	8	_ ( "Port" )
FUNCTION_CALL	18:40	18:48	9	_ ( "Port" )
CALLEE	18:40	18:40	10	_
LEAF_NODE	18:40	18:40	11	_
LEAF_NODE	18:41	18:41	10	(
ARGUMENT	18:42	18:42	10	"Port"
FIELD	18:42	18:42	11	"Port"
LEAF_NODE	18:42	18:42	12	"Port"
LEAF_NODE	18:48	18:48	10	)
LEAF_NODE	18:49	18:49	8	,
ARGUMENT	18:51	18:51	8	"port"
FIELD	18:51	18:51	9	"port"
LEAF_NODE	18:51	18:51	10	"port"
LEAF_NODE	18:57	18:57	8	,
ARGUMENT	18:59	18:59	8	706
FIELD	18:59	18:59	9	706
LEAF_NODE	18:59	18:59	10	706
LEAF_NODE	18:62	18:62	8	)
LEAF_NODE	18:63	18:63	4	;
EXPR_STATEMENT	19:1	19:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	19:1	19:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	19:1	19:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	19:1	19:1	6	prpl_info . protocol_options
FIELD	19:1	19:11	7	prpl_info . protocol_options
LEAF_NODE	19:1	19:1	8	prpl_info
LEAF_NODE	19:10	19:10	8	.
LEAF_NODE	19:11	19:11	8	protocol_options
ASSIGN_OP	19:28	19:28	6	=
LEAF_NODE	19:28	19:28	7	=
RVAL	19:30	19:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	19:30	19:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	19:30	19:30	8	g_list_append
LEAF_NODE	19:30	19:30	9	g_list_append
LEAF_NODE	19:43	19:43	8	(
ARGUMENT	19:44	19:44	8	prpl_info . protocol_options
FIELD	19:44	19:54	9	prpl_info . protocol_options
LEAF_NODE	19:44	19:44	10	prpl_info
LEAF_NODE	19:53	19:53	10	.
LEAF_NODE	19:54	19:54	10	protocol_options
LEAF_NODE	19:70	19:70	8	,
ARGUMENT	19:72	19:72	8	option
FIELD	19:72	19:72	9	option
LEAF_NODE	19:72	19:72	10	option
LEAF_NODE	19:78	19:78	8	)
LEAF_NODE	19:79	19:79	4	;
LEAF_NODE	20:1	20:1	3	g_snprintf
LEAF_NODE	20:11	20:11	3	(
LEAF_NODE	20:12	20:12	3	tmp
LEAF_NODE	20:15	20:15	3	,
LEAF_NODE	20:17	20:17	3	sizeof
LEAF_NODE	20:23	20:23	3	(
LEAF_NODE	20:24	20:24	3	tmp
LEAF_NODE	20:27	20:27	3	)
LEAF_NODE	20:28	20:28	3	,
LEAF_NODE	20:30	20:30	3	"%s"
LEAF_NODE	20:35	20:35	3	G_DIR_SEPARATOR_S
LEAF_NODE	20:53	20:53	3	"public_key.pub"
LEAF_NODE	20:69	20:69	3	,
LEAF_NODE	20:71	20:71	3	silcpurple_silcdir
LEAF_NODE	20:89	20:89	3	(
LEAF_NODE	20:90	20:90	3	)
LEAF_NODE	20:91	20:91	3	)
LEAF_NODE	20:92	20:92	3	;
EXPR_STATEMENT	21:1	22:24	3	option = purple_account_option_string_new ( _ ( "Public Key file" ) , "public-key" , tmp ) ;
EXPR	21:1	21:1	4	option = purple_account_option_string_new ( _ ( "Public Key file" ) , "public-key" , tmp )
ASSIGN	21:1	21:10	5	option = purple_account_option_string_new ( _ ( "Public Key file" ) , "public-key" , tmp )
LVAL	21:1	21:1	6	option
FIELD	21:1	21:1	7	option
LEAF_NODE	21:1	21:1	8	option
ASSIGN_OP	21:8	21:8	6	=
LEAF_NODE	21:8	21:8	7	=
RVAL	21:10	21:10	6	purple_account_option_string_new ( _ ( "Public Key file" ) , "public-key" , tmp )
FUNCTION_CALL	21:10	22:23	7	purple_account_option_string_new ( _ ( "Public Key file" ) , "public-key" , tmp )
CALLEE	21:10	21:10	8	purple_account_option_string_new
LEAF_NODE	21:10	21:10	9	purple_account_option_string_new
LEAF_NODE	21:42	21:42	8	(
ARGUMENT	21:43	21:43	8	_ ( "Public Key file" )
FUNCTION_CALL	21:43	21:62	9	_ ( "Public Key file" )
CALLEE	21:43	21:43	10	_
LEAF_NODE	21:43	21:43	11	_
LEAF_NODE	21:44	21:44	10	(
ARGUMENT	21:45	21:45	10	"Public Key file"
FIELD	21:45	21:45	11	"Public Key file"
LEAF_NODE	21:45	21:45	12	"Public Key file"
LEAF_NODE	21:62	21:62	10	)
LEAF_NODE	21:63	21:63	8	,
ARGUMENT	22:6	22:6	8	"public-key"
FIELD	22:6	22:6	9	"public-key"
LEAF_NODE	22:6	22:6	10	"public-key"
LEAF_NODE	22:18	22:18	8	,
ARGUMENT	22:20	22:20	8	tmp
FIELD	22:20	22:20	9	tmp
LEAF_NODE	22:20	22:20	10	tmp
LEAF_NODE	22:23	22:23	8	)
LEAF_NODE	22:24	22:24	4	;
EXPR_STATEMENT	23:1	23:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	23:1	23:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	23:1	23:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	23:1	23:1	6	prpl_info . protocol_options
FIELD	23:1	23:11	7	prpl_info . protocol_options
LEAF_NODE	23:1	23:1	8	prpl_info
LEAF_NODE	23:10	23:10	8	.
LEAF_NODE	23:11	23:11	8	protocol_options
ASSIGN_OP	23:28	23:28	6	=
LEAF_NODE	23:28	23:28	7	=
RVAL	23:30	23:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	23:30	23:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	23:30	23:30	8	g_list_append
LEAF_NODE	23:30	23:30	9	g_list_append
LEAF_NODE	23:43	23:43	8	(
ARGUMENT	23:44	23:44	8	prpl_info . protocol_options
FIELD	23:44	23:54	9	prpl_info . protocol_options
LEAF_NODE	23:44	23:44	10	prpl_info
LEAF_NODE	23:53	23:53	10	.
LEAF_NODE	23:54	23:54	10	protocol_options
LEAF_NODE	23:70	23:70	8	,
ARGUMENT	23:72	23:72	8	option
FIELD	23:72	23:72	9	option
LEAF_NODE	23:72	23:72	10	option
LEAF_NODE	23:78	23:78	8	)
LEAF_NODE	23:79	23:79	4	;
LEAF_NODE	24:1	24:1	3	g_snprintf
LEAF_NODE	24:11	24:11	3	(
LEAF_NODE	24:12	24:12	3	tmp
LEAF_NODE	24:15	24:15	3	,
LEAF_NODE	24:17	24:17	3	sizeof
LEAF_NODE	24:23	24:23	3	(
LEAF_NODE	24:24	24:24	3	tmp
LEAF_NODE	24:27	24:27	3	)
LEAF_NODE	24:28	24:28	3	,
LEAF_NODE	24:30	24:30	3	"%s"
LEAF_NODE	24:35	24:35	3	G_DIR_SEPARATOR_S
LEAF_NODE	24:53	24:53	3	"private_key.prv"
LEAF_NODE	24:70	24:70	3	,
LEAF_NODE	24:72	24:72	3	silcpurple_silcdir
LEAF_NODE	24:90	24:90	3	(
LEAF_NODE	24:91	24:91	3	)
LEAF_NODE	24:92	24:92	3	)
LEAF_NODE	24:93	24:93	3	;
EXPR_STATEMENT	25:1	26:25	3	option = purple_account_option_string_new ( _ ( "Private Key file" ) , "private-key" , tmp ) ;
EXPR	25:1	25:1	4	option = purple_account_option_string_new ( _ ( "Private Key file" ) , "private-key" , tmp )
ASSIGN	25:1	25:10	5	option = purple_account_option_string_new ( _ ( "Private Key file" ) , "private-key" , tmp )
LVAL	25:1	25:1	6	option
FIELD	25:1	25:1	7	option
LEAF_NODE	25:1	25:1	8	option
ASSIGN_OP	25:8	25:8	6	=
LEAF_NODE	25:8	25:8	7	=
RVAL	25:10	25:10	6	purple_account_option_string_new ( _ ( "Private Key file" ) , "private-key" , tmp )
FUNCTION_CALL	25:10	26:24	7	purple_account_option_string_new ( _ ( "Private Key file" ) , "private-key" , tmp )
CALLEE	25:10	25:10	8	purple_account_option_string_new
LEAF_NODE	25:10	25:10	9	purple_account_option_string_new
LEAF_NODE	25:42	25:42	8	(
ARGUMENT	25:43	25:43	8	_ ( "Private Key file" )
FUNCTION_CALL	25:43	25:63	9	_ ( "Private Key file" )
CALLEE	25:43	25:43	10	_
LEAF_NODE	25:43	25:43	11	_
LEAF_NODE	25:44	25:44	10	(
ARGUMENT	25:45	25:45	10	"Private Key file"
FIELD	25:45	25:45	11	"Private Key file"
LEAF_NODE	25:45	25:45	12	"Private Key file"
LEAF_NODE	25:63	25:63	10	)
LEAF_NODE	25:64	25:64	8	,
ARGUMENT	26:6	26:6	8	"private-key"
FIELD	26:6	26:6	9	"private-key"
LEAF_NODE	26:6	26:6	10	"private-key"
LEAF_NODE	26:19	26:19	8	,
ARGUMENT	26:21	26:21	8	tmp
FIELD	26:21	26:21	9	tmp
LEAF_NODE	26:21	26:21	10	tmp
LEAF_NODE	26:24	26:24	8	)
LEAF_NODE	26:25	26:25	4	;
EXPR_STATEMENT	27:1	27:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	27:1	27:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	27:1	27:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	27:1	27:1	6	prpl_info . protocol_options
FIELD	27:1	27:11	7	prpl_info . protocol_options
LEAF_NODE	27:1	27:1	8	prpl_info
LEAF_NODE	27:10	27:10	8	.
LEAF_NODE	27:11	27:11	8	protocol_options
ASSIGN_OP	27:28	27:28	6	=
LEAF_NODE	27:28	27:28	7	=
RVAL	27:30	27:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	27:30	27:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	27:30	27:30	8	g_list_append
LEAF_NODE	27:30	27:30	9	g_list_append
LEAF_NODE	27:43	27:43	8	(
ARGUMENT	27:44	27:44	8	prpl_info . protocol_options
FIELD	27:44	27:54	9	prpl_info . protocol_options
LEAF_NODE	27:44	27:44	10	prpl_info
LEAF_NODE	27:53	27:53	10	.
LEAF_NODE	27:54	27:54	10	protocol_options
LEAF_NODE	27:70	27:70	8	,
ARGUMENT	27:72	27:72	8	option
FIELD	27:72	27:72	9	option
LEAF_NODE	27:72	27:72	10	option
LEAF_NODE	27:78	27:78	8	)
LEAF_NODE	27:79	27:79	4	;
ITERATION	28:1	28:48	3	
KEYWORD	28:1	28:1	4	for
LEAF_NODE	28:1	28:1	5	for
LEAF_NODE	28:5	28:5	4	(
FOR_INIT	28:6	28:11	4	i = 0 ;
EXPR	28:6	28:6	5	i = 0
ASSIGN	28:6	28:10	6	i = 0
LVAL	28:6	28:6	7	i
FIELD	28:6	28:6	8	i
LEAF_NODE	28:6	28:6	9	i
ASSIGN_OP	28:8	28:8	7	=
LEAF_NODE	28:8	28:8	8	=
RVAL	28:10	28:10	7	0
FIELD	28:10	28:10	8	0
LEAF_NODE	28:10	28:10	9	0
LEAF_NODE	28:11	28:11	5	;
CONDITION	28:13	28:13	4	silc_default_ciphers [ i ] . name
EXPR	28:13	28:13	5	silc_default_ciphers [ i ] . name
FIELD	28:13	28:37	6	silc_default_ciphers [ i ] . name
LEAF_NODE	28:13	28:13	7	silc_default_ciphers
LEAF_NODE	28:33	28:33	7	[
EXPR	28:34	28:34	7	i
FIELD	28:34	28:34	8	i
LEAF_NODE	28:34	28:34	9	i
LEAF_NODE	28:35	28:35	7	]
LEAF_NODE	28:36	28:36	7	.
LEAF_NODE	28:37	28:37	7	name
LEAF_NODE	28:41	28:41	4	;
FOR_EXPR	28:43	28:43	4	i ++
EXPR	28:43	28:43	5	i ++
FIELD	28:43	28:44	6	i ++
LEAF_NODE	28:43	28:43	7	i
LEAF_NODE	28:44	28:44	7	++
LEAF_NODE	28:46	28:46	4	)
STATEMENTS	28:48	33:1	4	
LEAF_NODE	28:48	28:48	5	{
STATEMENTS	29:2	32:2	5	
EXPR_STATEMENT	29:2	29:37	6	kvp = g_new0 ( PurpleKeyValuePair , 1 ) ;
EXPR	29:2	29:2	7	kvp = g_new0 ( PurpleKeyValuePair , 1 )
ASSIGN	29:2	29:8	8	kvp = g_new0 ( PurpleKeyValuePair , 1 )
LVAL	29:2	29:2	9	kvp
FIELD	29:2	29:2	10	kvp
LEAF_NODE	29:2	29:2	11	kvp
ASSIGN_OP	29:6	29:6	9	=
LEAF_NODE	29:6	29:6	10	=
RVAL	29:8	29:8	9	g_new0 ( PurpleKeyValuePair , 1 )
FUNCTION_CALL	29:8	29:36	10	g_new0 ( PurpleKeyValuePair , 1 )
CALLEE	29:8	29:8	11	g_new0
LEAF_NODE	29:8	29:8	12	g_new0
LEAF_NODE	29:14	29:14	11	(
ARGUMENT	29:15	29:15	11	PurpleKeyValuePair
FIELD	29:15	29:15	12	PurpleKeyValuePair
LEAF_NODE	29:15	29:15	13	PurpleKeyValuePair
LEAF_NODE	29:33	29:33	11	,
ARGUMENT	29:35	29:35	11	1
FIELD	29:35	29:35	12	1
LEAF_NODE	29:35	29:35	13	1
LEAF_NODE	29:36	29:36	11	)
LEAF_NODE	29:37	29:37	7	;
EXPR_STATEMENT	30:2	30:51	6	kvp -> key = g_strdup ( silc_default_ciphers [ i ] . name ) ;
EXPR	30:2	30:2	7	kvp -> key = g_strdup ( silc_default_ciphers [ i ] . name )
ASSIGN	30:2	30:13	8	kvp -> key = g_strdup ( silc_default_ciphers [ i ] . name )
LVAL	30:2	30:2	9	kvp -> key
FIELD	30:2	30:7	10	kvp -> key
LEAF_NODE	30:2	30:2	11	kvp
LEAF_NODE	30:5	30:5	11	->
LEAF_NODE	30:7	30:7	11	key
ASSIGN_OP	30:11	30:11	9	=
LEAF_NODE	30:11	30:11	10	=
RVAL	30:13	30:13	9	g_strdup ( silc_default_ciphers [ i ] . name )
FUNCTION_CALL	30:13	30:50	10	g_strdup ( silc_default_ciphers [ i ] . name )
CALLEE	30:13	30:13	11	g_strdup
LEAF_NODE	30:13	30:13	12	g_strdup
LEAF_NODE	30:21	30:21	11	(
ARGUMENT	30:22	30:22	11	silc_default_ciphers [ i ] . name
FIELD	30:22	30:46	12	silc_default_ciphers [ i ] . name
LEAF_NODE	30:22	30:22	13	silc_default_ciphers
LEAF_NODE	30:42	30:42	13	[
EXPR	30:43	30:43	13	i
FIELD	30:43	30:43	14	i
LEAF_NODE	30:43	30:43	15	i
LEAF_NODE	30:44	30:44	13	]
LEAF_NODE	30:45	30:45	13	.
LEAF_NODE	30:46	30:46	13	name
LEAF_NODE	30:50	30:50	11	)
LEAF_NODE	30:51	30:51	7	;
EXPR_STATEMENT	31:2	31:53	6	kvp -> value = g_strdup ( silc_default_ciphers [ i ] . name ) ;
EXPR	31:2	31:2	7	kvp -> value = g_strdup ( silc_default_ciphers [ i ] . name )
ASSIGN	31:2	31:15	8	kvp -> value = g_strdup ( silc_default_ciphers [ i ] . name )
LVAL	31:2	31:2	9	kvp -> value
FIELD	31:2	31:7	10	kvp -> value
LEAF_NODE	31:2	31:2	11	kvp
LEAF_NODE	31:5	31:5	11	->
LEAF_NODE	31:7	31:7	11	value
ASSIGN_OP	31:13	31:13	9	=
LEAF_NODE	31:13	31:13	10	=
RVAL	31:15	31:15	9	g_strdup ( silc_default_ciphers [ i ] . name )
FUNCTION_CALL	31:15	31:52	10	g_strdup ( silc_default_ciphers [ i ] . name )
CALLEE	31:15	31:15	11	g_strdup
LEAF_NODE	31:15	31:15	12	g_strdup
LEAF_NODE	31:23	31:23	11	(
ARGUMENT	31:24	31:24	11	silc_default_ciphers [ i ] . name
FIELD	31:24	31:48	12	silc_default_ciphers [ i ] . name
LEAF_NODE	31:24	31:24	13	silc_default_ciphers
LEAF_NODE	31:44	31:44	13	[
EXPR	31:45	31:45	13	i
FIELD	31:45	31:45	14	i
LEAF_NODE	31:45	31:45	15	i
LEAF_NODE	31:46	31:46	13	]
LEAF_NODE	31:47	31:47	13	.
LEAF_NODE	31:48	31:48	13	name
LEAF_NODE	31:52	31:52	11	)
LEAF_NODE	31:53	31:53	7	;
EXPR_STATEMENT	32:2	32:33	6	list = g_list_append ( list , kvp ) ;
EXPR	32:2	32:2	7	list = g_list_append ( list , kvp )
ASSIGN	32:2	32:9	8	list = g_list_append ( list , kvp )
LVAL	32:2	32:2	9	list
FIELD	32:2	32:2	10	list
LEAF_NODE	32:2	32:2	11	list
ASSIGN_OP	32:7	32:7	9	=
LEAF_NODE	32:7	32:7	10	=
RVAL	32:9	32:9	9	g_list_append ( list , kvp )
FUNCTION_CALL	32:9	32:32	10	g_list_append ( list , kvp )
CALLEE	32:9	32:9	11	g_list_append
LEAF_NODE	32:9	32:9	12	g_list_append
LEAF_NODE	32:22	32:22	11	(
ARGUMENT	32:23	32:23	11	list
FIELD	32:23	32:23	12	list
LEAF_NODE	32:23	32:23	13	list
LEAF_NODE	32:27	32:27	11	,
ARGUMENT	32:29	32:29	11	kvp
FIELD	32:29	32:29	12	kvp
LEAF_NODE	32:29	32:29	13	kvp
LEAF_NODE	32:32	32:32	11	)
LEAF_NODE	32:33	32:33	7	;
LEAF_NODE	33:1	33:1	5	}
EXPR_STATEMENT	34:1	34:69	3	option = purple_account_option_list_new ( _ ( "Cipher" ) , "cipher" , list ) ;
EXPR	34:1	34:1	4	option = purple_account_option_list_new ( _ ( "Cipher" ) , "cipher" , list )
ASSIGN	34:1	34:10	5	option = purple_account_option_list_new ( _ ( "Cipher" ) , "cipher" , list )
LVAL	34:1	34:1	6	option
FIELD	34:1	34:1	7	option
LEAF_NODE	34:1	34:1	8	option
ASSIGN_OP	34:8	34:8	6	=
LEAF_NODE	34:8	34:8	7	=
RVAL	34:10	34:10	6	purple_account_option_list_new ( _ ( "Cipher" ) , "cipher" , list )
FUNCTION_CALL	34:10	34:68	7	purple_account_option_list_new ( _ ( "Cipher" ) , "cipher" , list )
CALLEE	34:10	34:10	8	purple_account_option_list_new
LEAF_NODE	34:10	34:10	9	purple_account_option_list_new
LEAF_NODE	34:40	34:40	8	(
ARGUMENT	34:41	34:41	8	_ ( "Cipher" )
FUNCTION_CALL	34:41	34:51	9	_ ( "Cipher" )
CALLEE	34:41	34:41	10	_
LEAF_NODE	34:41	34:41	11	_
LEAF_NODE	34:42	34:42	10	(
ARGUMENT	34:43	34:43	10	"Cipher"
FIELD	34:43	34:43	11	"Cipher"
LEAF_NODE	34:43	34:43	12	"Cipher"
LEAF_NODE	34:51	34:51	10	)
LEAF_NODE	34:52	34:52	8	,
ARGUMENT	34:54	34:54	8	"cipher"
FIELD	34:54	34:54	9	"cipher"
LEAF_NODE	34:54	34:54	10	"cipher"
LEAF_NODE	34:62	34:62	8	,
ARGUMENT	34:64	34:64	8	list
FIELD	34:64	34:64	9	list
LEAF_NODE	34:64	34:64	10	list
LEAF_NODE	34:68	34:68	8	)
LEAF_NODE	34:69	34:69	4	;
EXPR_STATEMENT	35:1	35:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	35:1	35:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	35:1	35:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	35:1	35:1	6	prpl_info . protocol_options
FIELD	35:1	35:11	7	prpl_info . protocol_options
LEAF_NODE	35:1	35:1	8	prpl_info
LEAF_NODE	35:10	35:10	8	.
LEAF_NODE	35:11	35:11	8	protocol_options
ASSIGN_OP	35:28	35:28	6	=
LEAF_NODE	35:28	35:28	7	=
RVAL	35:30	35:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	35:30	35:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	35:30	35:30	8	g_list_append
LEAF_NODE	35:30	35:30	9	g_list_append
LEAF_NODE	35:43	35:43	8	(
ARGUMENT	35:44	35:44	8	prpl_info . protocol_options
FIELD	35:44	35:54	9	prpl_info . protocol_options
LEAF_NODE	35:44	35:44	10	prpl_info
LEAF_NODE	35:53	35:53	10	.
LEAF_NODE	35:54	35:54	10	protocol_options
LEAF_NODE	35:70	35:70	8	,
ARGUMENT	35:72	35:72	8	option
FIELD	35:72	35:72	9	option
LEAF_NODE	35:72	35:72	10	option
LEAF_NODE	35:78	35:78	8	)
LEAF_NODE	35:79	35:79	4	;
EXPR_STATEMENT	36:1	36:12	3	list = NULL ;
EXPR	36:1	36:1	4	list = NULL
ASSIGN	36:1	36:8	5	list = NULL
LVAL	36:1	36:1	6	list
FIELD	36:1	36:1	7	list
LEAF_NODE	36:1	36:1	8	list
ASSIGN_OP	36:6	36:6	6	=
LEAF_NODE	36:6	36:6	7	=
RVAL	36:8	36:8	6	NULL
FIELD	36:8	36:8	7	NULL
LEAF_NODE	36:8	36:8	8	NULL
LEAF_NODE	36:12	36:12	4	;
ITERATION	37:1	37:46	3	
KEYWORD	37:1	37:1	4	for
LEAF_NODE	37:1	37:1	5	for
LEAF_NODE	37:5	37:5	4	(
FOR_INIT	37:6	37:11	4	i = 0 ;
EXPR	37:6	37:6	5	i = 0
ASSIGN	37:6	37:10	6	i = 0
LVAL	37:6	37:6	7	i
FIELD	37:6	37:6	8	i
LEAF_NODE	37:6	37:6	9	i
ASSIGN_OP	37:8	37:8	7	=
LEAF_NODE	37:8	37:8	8	=
RVAL	37:10	37:10	7	0
FIELD	37:10	37:10	8	0
LEAF_NODE	37:10	37:10	9	0
LEAF_NODE	37:11	37:11	5	;
CONDITION	37:13	37:13	4	silc_default_hmacs [ i ] . name
EXPR	37:13	37:13	5	silc_default_hmacs [ i ] . name
FIELD	37:13	37:35	6	silc_default_hmacs [ i ] . name
LEAF_NODE	37:13	37:13	7	silc_default_hmacs
LEAF_NODE	37:31	37:31	7	[
EXPR	37:32	37:32	7	i
FIELD	37:32	37:32	8	i
LEAF_NODE	37:32	37:32	9	i
LEAF_NODE	37:33	37:33	7	]
LEAF_NODE	37:34	37:34	7	.
LEAF_NODE	37:35	37:35	7	name
LEAF_NODE	37:39	37:39	4	;
FOR_EXPR	37:41	37:41	4	i ++
EXPR	37:41	37:41	5	i ++
FIELD	37:41	37:42	6	i ++
LEAF_NODE	37:41	37:41	7	i
LEAF_NODE	37:42	37:42	7	++
LEAF_NODE	37:44	37:44	4	)
STATEMENTS	37:46	42:1	4	
LEAF_NODE	37:46	37:46	5	{
STATEMENTS	38:2	41:2	5	
EXPR_STATEMENT	38:2	38:37	6	kvp = g_new0 ( PurpleKeyValuePair , 1 ) ;
EXPR	38:2	38:2	7	kvp = g_new0 ( PurpleKeyValuePair , 1 )
ASSIGN	38:2	38:8	8	kvp = g_new0 ( PurpleKeyValuePair , 1 )
LVAL	38:2	38:2	9	kvp
FIELD	38:2	38:2	10	kvp
LEAF_NODE	38:2	38:2	11	kvp
ASSIGN_OP	38:6	38:6	9	=
LEAF_NODE	38:6	38:6	10	=
RVAL	38:8	38:8	9	g_new0 ( PurpleKeyValuePair , 1 )
FUNCTION_CALL	38:8	38:36	10	g_new0 ( PurpleKeyValuePair , 1 )
CALLEE	38:8	38:8	11	g_new0
LEAF_NODE	38:8	38:8	12	g_new0
LEAF_NODE	38:14	38:14	11	(
ARGUMENT	38:15	38:15	11	PurpleKeyValuePair
FIELD	38:15	38:15	12	PurpleKeyValuePair
LEAF_NODE	38:15	38:15	13	PurpleKeyValuePair
LEAF_NODE	38:33	38:33	11	,
ARGUMENT	38:35	38:35	11	1
FIELD	38:35	38:35	12	1
LEAF_NODE	38:35	38:35	13	1
LEAF_NODE	38:36	38:36	11	)
LEAF_NODE	38:37	38:37	7	;
EXPR_STATEMENT	39:2	39:49	6	kvp -> key = g_strdup ( silc_default_hmacs [ i ] . name ) ;
EXPR	39:2	39:2	7	kvp -> key = g_strdup ( silc_default_hmacs [ i ] . name )
ASSIGN	39:2	39:13	8	kvp -> key = g_strdup ( silc_default_hmacs [ i ] . name )
LVAL	39:2	39:2	9	kvp -> key
FIELD	39:2	39:7	10	kvp -> key
LEAF_NODE	39:2	39:2	11	kvp
LEAF_NODE	39:5	39:5	11	->
LEAF_NODE	39:7	39:7	11	key
ASSIGN_OP	39:11	39:11	9	=
LEAF_NODE	39:11	39:11	10	=
RVAL	39:13	39:13	9	g_strdup ( silc_default_hmacs [ i ] . name )
FUNCTION_CALL	39:13	39:48	10	g_strdup ( silc_default_hmacs [ i ] . name )
CALLEE	39:13	39:13	11	g_strdup
LEAF_NODE	39:13	39:13	12	g_strdup
LEAF_NODE	39:21	39:21	11	(
ARGUMENT	39:22	39:22	11	silc_default_hmacs [ i ] . name
FIELD	39:22	39:44	12	silc_default_hmacs [ i ] . name
LEAF_NODE	39:22	39:22	13	silc_default_hmacs
LEAF_NODE	39:40	39:40	13	[
EXPR	39:41	39:41	13	i
FIELD	39:41	39:41	14	i
LEAF_NODE	39:41	39:41	15	i
LEAF_NODE	39:42	39:42	13	]
LEAF_NODE	39:43	39:43	13	.
LEAF_NODE	39:44	39:44	13	name
LEAF_NODE	39:48	39:48	11	)
LEAF_NODE	39:49	39:49	7	;
EXPR_STATEMENT	40:2	40:51	6	kvp -> value = g_strdup ( silc_default_hmacs [ i ] . name ) ;
EXPR	40:2	40:2	7	kvp -> value = g_strdup ( silc_default_hmacs [ i ] . name )
ASSIGN	40:2	40:15	8	kvp -> value = g_strdup ( silc_default_hmacs [ i ] . name )
LVAL	40:2	40:2	9	kvp -> value
FIELD	40:2	40:7	10	kvp -> value
LEAF_NODE	40:2	40:2	11	kvp
LEAF_NODE	40:5	40:5	11	->
LEAF_NODE	40:7	40:7	11	value
ASSIGN_OP	40:13	40:13	9	=
LEAF_NODE	40:13	40:13	10	=
RVAL	40:15	40:15	9	g_strdup ( silc_default_hmacs [ i ] . name )
FUNCTION_CALL	40:15	40:50	10	g_strdup ( silc_default_hmacs [ i ] . name )
CALLEE	40:15	40:15	11	g_strdup
LEAF_NODE	40:15	40:15	12	g_strdup
LEAF_NODE	40:23	40:23	11	(
ARGUMENT	40:24	40:24	11	silc_default_hmacs [ i ] . name
FIELD	40:24	40:46	12	silc_default_hmacs [ i ] . name
LEAF_NODE	40:24	40:24	13	silc_default_hmacs
LEAF_NODE	40:42	40:42	13	[
EXPR	40:43	40:43	13	i
FIELD	40:43	40:43	14	i
LEAF_NODE	40:43	40:43	15	i
LEAF_NODE	40:44	40:44	13	]
LEAF_NODE	40:45	40:45	13	.
LEAF_NODE	40:46	40:46	13	name
LEAF_NODE	40:50	40:50	11	)
LEAF_NODE	40:51	40:51	7	;
EXPR_STATEMENT	41:2	41:33	6	list = g_list_append ( list , kvp ) ;
EXPR	41:2	41:2	7	list = g_list_append ( list , kvp )
ASSIGN	41:2	41:9	8	list = g_list_append ( list , kvp )
LVAL	41:2	41:2	9	list
FIELD	41:2	41:2	10	list
LEAF_NODE	41:2	41:2	11	list
ASSIGN_OP	41:7	41:7	9	=
LEAF_NODE	41:7	41:7	10	=
RVAL	41:9	41:9	9	g_list_append ( list , kvp )
FUNCTION_CALL	41:9	41:32	10	g_list_append ( list , kvp )
CALLEE	41:9	41:9	11	g_list_append
LEAF_NODE	41:9	41:9	12	g_list_append
LEAF_NODE	41:22	41:22	11	(
ARGUMENT	41:23	41:23	11	list
FIELD	41:23	41:23	12	list
LEAF_NODE	41:23	41:23	13	list
LEAF_NODE	41:27	41:27	11	,
ARGUMENT	41:29	41:29	11	kvp
FIELD	41:29	41:29	12	kvp
LEAF_NODE	41:29	41:29	13	kvp
LEAF_NODE	41:32	41:32	11	)
LEAF_NODE	41:33	41:33	7	;
LEAF_NODE	42:1	42:1	5	}
EXPR_STATEMENT	43:1	43:65	3	option = purple_account_option_list_new ( _ ( "HMAC" ) , "hmac" , list ) ;
EXPR	43:1	43:1	4	option = purple_account_option_list_new ( _ ( "HMAC" ) , "hmac" , list )
ASSIGN	43:1	43:10	5	option = purple_account_option_list_new ( _ ( "HMAC" ) , "hmac" , list )
LVAL	43:1	43:1	6	option
FIELD	43:1	43:1	7	option
LEAF_NODE	43:1	43:1	8	option
ASSIGN_OP	43:8	43:8	6	=
LEAF_NODE	43:8	43:8	7	=
RVAL	43:10	43:10	6	purple_account_option_list_new ( _ ( "HMAC" ) , "hmac" , list )
FUNCTION_CALL	43:10	43:64	7	purple_account_option_list_new ( _ ( "HMAC" ) , "hmac" , list )
CALLEE	43:10	43:10	8	purple_account_option_list_new
LEAF_NODE	43:10	43:10	9	purple_account_option_list_new
LEAF_NODE	43:40	43:40	8	(
ARGUMENT	43:41	43:41	8	_ ( "HMAC" )
FUNCTION_CALL	43:41	43:49	9	_ ( "HMAC" )
CALLEE	43:41	43:41	10	_
LEAF_NODE	43:41	43:41	11	_
LEAF_NODE	43:42	43:42	10	(
ARGUMENT	43:43	43:43	10	"HMAC"
FIELD	43:43	43:43	11	"HMAC"
LEAF_NODE	43:43	43:43	12	"HMAC"
LEAF_NODE	43:49	43:49	10	)
LEAF_NODE	43:50	43:50	8	,
ARGUMENT	43:52	43:52	8	"hmac"
FIELD	43:52	43:52	9	"hmac"
LEAF_NODE	43:52	43:52	10	"hmac"
LEAF_NODE	43:58	43:58	8	,
ARGUMENT	43:60	43:60	8	list
FIELD	43:60	43:60	9	list
LEAF_NODE	43:60	43:60	10	list
LEAF_NODE	43:64	43:64	8	)
LEAF_NODE	43:65	43:65	4	;
EXPR_STATEMENT	44:1	44:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	44:1	44:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	44:1	44:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	44:1	44:1	6	prpl_info . protocol_options
FIELD	44:1	44:11	7	prpl_info . protocol_options
LEAF_NODE	44:1	44:1	8	prpl_info
LEAF_NODE	44:10	44:10	8	.
LEAF_NODE	44:11	44:11	8	protocol_options
ASSIGN_OP	44:28	44:28	6	=
LEAF_NODE	44:28	44:28	7	=
RVAL	44:30	44:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	44:30	44:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	44:30	44:30	8	g_list_append
LEAF_NODE	44:30	44:30	9	g_list_append
LEAF_NODE	44:43	44:43	8	(
ARGUMENT	44:44	44:44	8	prpl_info . protocol_options
FIELD	44:44	44:54	9	prpl_info . protocol_options
LEAF_NODE	44:44	44:44	10	prpl_info
LEAF_NODE	44:53	44:53	10	.
LEAF_NODE	44:54	44:54	10	protocol_options
LEAF_NODE	44:70	44:70	8	,
ARGUMENT	44:72	44:72	8	option
FIELD	44:72	44:72	9	option
LEAF_NODE	44:72	44:72	10	option
LEAF_NODE	44:78	44:78	8	)
LEAF_NODE	44:79	44:79	4	;
EXPR_STATEMENT	45:1	46:32	3	option = purple_account_option_bool_new ( _ ( "Public key authentication" ) , "pubkey-auth" , FALSE ) ;
EXPR	45:1	45:1	4	option = purple_account_option_bool_new ( _ ( "Public key authentication" ) , "pubkey-auth" , FALSE )
ASSIGN	45:1	45:10	5	option = purple_account_option_bool_new ( _ ( "Public key authentication" ) , "pubkey-auth" , FALSE )
LVAL	45:1	45:1	6	option
FIELD	45:1	45:1	7	option
LEAF_NODE	45:1	45:1	8	option
ASSIGN_OP	45:8	45:8	6	=
LEAF_NODE	45:8	45:8	7	=
RVAL	45:10	45:10	6	purple_account_option_bool_new ( _ ( "Public key authentication" ) , "pubkey-auth" , FALSE )
FUNCTION_CALL	45:10	46:31	7	purple_account_option_bool_new ( _ ( "Public key authentication" ) , "pubkey-auth" , FALSE )
CALLEE	45:10	45:10	8	purple_account_option_bool_new
LEAF_NODE	45:10	45:10	9	purple_account_option_bool_new
LEAF_NODE	45:40	45:40	8	(
ARGUMENT	45:41	45:41	8	_ ( "Public key authentication" )
FUNCTION_CALL	45:41	45:70	9	_ ( "Public key authentication" )
CALLEE	45:41	45:41	10	_
LEAF_NODE	45:41	45:41	11	_
LEAF_NODE	45:42	45:42	10	(
ARGUMENT	45:43	45:43	10	"Public key authentication"
FIELD	45:43	45:43	11	"Public key authentication"
LEAF_NODE	45:43	45:43	12	"Public key authentication"
LEAF_NODE	45:70	45:70	10	)
LEAF_NODE	45:71	45:71	8	,
ARGUMENT	46:11	46:11	8	"pubkey-auth"
FIELD	46:11	46:11	9	"pubkey-auth"
LEAF_NODE	46:11	46:11	10	"pubkey-auth"
LEAF_NODE	46:24	46:24	8	,
ARGUMENT	46:26	46:26	8	FALSE
FIELD	46:26	46:26	9	FALSE
LEAF_NODE	46:26	46:26	10	FALSE
LEAF_NODE	46:31	46:31	8	)
LEAF_NODE	46:32	46:32	4	;
EXPR_STATEMENT	47:1	47:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	47:1	47:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	47:1	47:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	47:1	47:1	6	prpl_info . protocol_options
FIELD	47:1	47:11	7	prpl_info . protocol_options
LEAF_NODE	47:1	47:1	8	prpl_info
LEAF_NODE	47:10	47:10	8	.
LEAF_NODE	47:11	47:11	8	protocol_options
ASSIGN_OP	47:28	47:28	6	=
LEAF_NODE	47:28	47:28	7	=
RVAL	47:30	47:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	47:30	47:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	47:30	47:30	8	g_list_append
LEAF_NODE	47:30	47:30	9	g_list_append
LEAF_NODE	47:43	47:43	8	(
ARGUMENT	47:44	47:44	8	prpl_info . protocol_options
FIELD	47:44	47:54	9	prpl_info . protocol_options
LEAF_NODE	47:44	47:44	10	prpl_info
LEAF_NODE	47:53	47:53	10	.
LEAF_NODE	47:54	47:54	10	protocol_options
LEAF_NODE	47:70	47:70	8	,
ARGUMENT	47:72	47:72	8	option
FIELD	47:72	47:72	9	option
LEAF_NODE	47:72	47:72	10	option
LEAF_NODE	47:78	47:78	8	)
LEAF_NODE	47:79	47:79	4	;
EXPR_STATEMENT	48:1	49:30	3	option = purple_account_option_bool_new ( _ ( "Block IMs without Key Exchange" ) , "block-ims" , FALSE ) ;
EXPR	48:1	48:1	4	option = purple_account_option_bool_new ( _ ( "Block IMs without Key Exchange" ) , "block-ims" , FALSE )
ASSIGN	48:1	48:10	5	option = purple_account_option_bool_new ( _ ( "Block IMs without Key Exchange" ) , "block-ims" , FALSE )
LVAL	48:1	48:1	6	option
FIELD	48:1	48:1	7	option
LEAF_NODE	48:1	48:1	8	option
ASSIGN_OP	48:8	48:8	6	=
LEAF_NODE	48:8	48:8	7	=
RVAL	48:10	48:10	6	purple_account_option_bool_new ( _ ( "Block IMs without Key Exchange" ) , "block-ims" , FALSE )
FUNCTION_CALL	48:10	49:29	7	purple_account_option_bool_new ( _ ( "Block IMs without Key Exchange" ) , "block-ims" , FALSE )
CALLEE	48:10	48:10	8	purple_account_option_bool_new
LEAF_NODE	48:10	48:10	9	purple_account_option_bool_new
LEAF_NODE	48:40	48:40	8	(
ARGUMENT	48:41	48:41	8	_ ( "Block IMs without Key Exchange" )
FUNCTION_CALL	48:41	48:75	9	_ ( "Block IMs without Key Exchange" )
CALLEE	48:41	48:41	10	_
LEAF_NODE	48:41	48:41	11	_
LEAF_NODE	48:42	48:42	10	(
ARGUMENT	48:43	48:43	10	"Block IMs without Key Exchange"
FIELD	48:43	48:43	11	"Block IMs without Key Exchange"
LEAF_NODE	48:43	48:43	12	"Block IMs without Key Exchange"
LEAF_NODE	48:75	48:75	10	)
LEAF_NODE	48:76	48:76	8	,
ARGUMENT	49:11	49:11	8	"block-ims"
FIELD	49:11	49:11	9	"block-ims"
LEAF_NODE	49:11	49:11	10	"block-ims"
LEAF_NODE	49:22	49:22	8	,
ARGUMENT	49:24	49:24	8	FALSE
FIELD	49:24	49:24	9	FALSE
LEAF_NODE	49:24	49:24	10	FALSE
LEAF_NODE	49:29	49:29	8	)
LEAF_NODE	49:30	49:30	4	;
EXPR_STATEMENT	50:1	50:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	50:1	50:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	50:1	50:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	50:1	50:1	6	prpl_info . protocol_options
FIELD	50:1	50:11	7	prpl_info . protocol_options
LEAF_NODE	50:1	50:1	8	prpl_info
LEAF_NODE	50:10	50:10	8	.
LEAF_NODE	50:11	50:11	8	protocol_options
ASSIGN_OP	50:28	50:28	6	=
LEAF_NODE	50:28	50:28	7	=
RVAL	50:30	50:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	50:30	50:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	50:30	50:30	8	g_list_append
LEAF_NODE	50:30	50:30	9	g_list_append
LEAF_NODE	50:43	50:43	8	(
ARGUMENT	50:44	50:44	8	prpl_info . protocol_options
FIELD	50:44	50:54	9	prpl_info . protocol_options
LEAF_NODE	50:44	50:44	10	prpl_info
LEAF_NODE	50:53	50:53	10	.
LEAF_NODE	50:54	50:54	10	protocol_options
LEAF_NODE	50:70	50:70	8	,
ARGUMENT	50:72	50:72	8	option
FIELD	50:72	50:72	9	option
LEAF_NODE	50:72	50:72	10	option
LEAF_NODE	50:78	50:78	8	)
LEAF_NODE	50:79	50:79	4	;
EXPR_STATEMENT	51:1	52:29	3	option = purple_account_option_bool_new ( _ ( "Block messages to whiteboard" ) , "block-wb" , FALSE ) ;
EXPR	51:1	51:1	4	option = purple_account_option_bool_new ( _ ( "Block messages to whiteboard" ) , "block-wb" , FALSE )
ASSIGN	51:1	51:10	5	option = purple_account_option_bool_new ( _ ( "Block messages to whiteboard" ) , "block-wb" , FALSE )
LVAL	51:1	51:1	6	option
FIELD	51:1	51:1	7	option
LEAF_NODE	51:1	51:1	8	option
ASSIGN_OP	51:8	51:8	6	=
LEAF_NODE	51:8	51:8	7	=
RVAL	51:10	51:10	6	purple_account_option_bool_new ( _ ( "Block messages to whiteboard" ) , "block-wb" , FALSE )
FUNCTION_CALL	51:10	52:28	7	purple_account_option_bool_new ( _ ( "Block messages to whiteboard" ) , "block-wb" , FALSE )
CALLEE	51:10	51:10	8	purple_account_option_bool_new
LEAF_NODE	51:10	51:10	9	purple_account_option_bool_new
LEAF_NODE	51:40	51:40	8	(
ARGUMENT	51:41	51:41	8	_ ( "Block messages to whiteboard" )
FUNCTION_CALL	51:41	51:73	9	_ ( "Block messages to whiteboard" )
CALLEE	51:41	51:41	10	_
LEAF_NODE	51:41	51:41	11	_
LEAF_NODE	51:42	51:42	10	(
ARGUMENT	51:43	51:43	10	"Block messages to whiteboard"
FIELD	51:43	51:43	11	"Block messages to whiteboard"
LEAF_NODE	51:43	51:43	12	"Block messages to whiteboard"
LEAF_NODE	51:73	51:73	10	)
LEAF_NODE	51:74	51:74	8	,
ARGUMENT	52:11	52:11	8	"block-wb"
FIELD	52:11	52:11	9	"block-wb"
LEAF_NODE	52:11	52:11	10	"block-wb"
LEAF_NODE	52:21	52:21	8	,
ARGUMENT	52:23	52:23	8	FALSE
FIELD	52:23	52:23	9	FALSE
LEAF_NODE	52:23	52:23	10	FALSE
LEAF_NODE	52:28	52:28	8	)
LEAF_NODE	52:29	52:29	4	;
EXPR_STATEMENT	53:1	53:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	53:1	53:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	53:1	53:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	53:1	53:1	6	prpl_info . protocol_options
FIELD	53:1	53:11	7	prpl_info . protocol_options
LEAF_NODE	53:1	53:1	8	prpl_info
LEAF_NODE	53:10	53:10	8	.
LEAF_NODE	53:11	53:11	8	protocol_options
ASSIGN_OP	53:28	53:28	6	=
LEAF_NODE	53:28	53:28	7	=
RVAL	53:30	53:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	53:30	53:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	53:30	53:30	8	g_list_append
LEAF_NODE	53:30	53:30	9	g_list_append
LEAF_NODE	53:43	53:43	8	(
ARGUMENT	53:44	53:44	8	prpl_info . protocol_options
FIELD	53:44	53:54	9	prpl_info . protocol_options
LEAF_NODE	53:44	53:44	10	prpl_info
LEAF_NODE	53:53	53:53	10	.
LEAF_NODE	53:54	53:54	10	protocol_options
LEAF_NODE	53:70	53:70	8	,
ARGUMENT	53:72	53:72	8	option
FIELD	53:72	53:72	9	option
LEAF_NODE	53:72	53:72	10	option
LEAF_NODE	53:78	53:78	8	)
LEAF_NODE	53:79	53:79	4	;
EXPR_STATEMENT	54:1	55:28	3	option = purple_account_option_bool_new ( _ ( "Automatically open whiteboard" ) , "open-wb" , FALSE ) ;
EXPR	54:1	54:1	4	option = purple_account_option_bool_new ( _ ( "Automatically open whiteboard" ) , "open-wb" , FALSE )
ASSIGN	54:1	54:10	5	option = purple_account_option_bool_new ( _ ( "Automatically open whiteboard" ) , "open-wb" , FALSE )
LVAL	54:1	54:1	6	option
FIELD	54:1	54:1	7	option
LEAF_NODE	54:1	54:1	8	option
ASSIGN_OP	54:8	54:8	6	=
LEAF_NODE	54:8	54:8	7	=
RVAL	54:10	54:10	6	purple_account_option_bool_new ( _ ( "Automatically open whiteboard" ) , "open-wb" , FALSE )
FUNCTION_CALL	54:10	55:27	7	purple_account_option_bool_new ( _ ( "Automatically open whiteboard" ) , "open-wb" , FALSE )
CALLEE	54:10	54:10	8	purple_account_option_bool_new
LEAF_NODE	54:10	54:10	9	purple_account_option_bool_new
LEAF_NODE	54:40	54:40	8	(
ARGUMENT	54:41	54:41	8	_ ( "Automatically open whiteboard" )
FUNCTION_CALL	54:41	54:74	9	_ ( "Automatically open whiteboard" )
CALLEE	54:41	54:41	10	_
LEAF_NODE	54:41	54:41	11	_
LEAF_NODE	54:42	54:42	10	(
ARGUMENT	54:43	54:43	10	"Automatically open whiteboard"
FIELD	54:43	54:43	11	"Automatically open whiteboard"
LEAF_NODE	54:43	54:43	12	"Automatically open whiteboard"
LEAF_NODE	54:74	54:74	10	)
LEAF_NODE	54:75	54:75	8	,
ARGUMENT	55:11	55:11	8	"open-wb"
FIELD	55:11	55:11	9	"open-wb"
LEAF_NODE	55:11	55:11	10	"open-wb"
LEAF_NODE	55:20	55:20	8	,
ARGUMENT	55:22	55:22	8	FALSE
FIELD	55:22	55:22	9	FALSE
LEAF_NODE	55:22	55:22	10	FALSE
LEAF_NODE	55:27	55:27	8	)
LEAF_NODE	55:28	55:28	4	;
EXPR_STATEMENT	56:1	56:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	56:1	56:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	56:1	56:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	56:1	56:1	6	prpl_info . protocol_options
FIELD	56:1	56:11	7	prpl_info . protocol_options
LEAF_NODE	56:1	56:1	8	prpl_info
LEAF_NODE	56:10	56:10	8	.
LEAF_NODE	56:11	56:11	8	protocol_options
ASSIGN_OP	56:28	56:28	6	=
LEAF_NODE	56:28	56:28	7	=
RVAL	56:30	56:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	56:30	56:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	56:30	56:30	8	g_list_append
LEAF_NODE	56:30	56:30	9	g_list_append
LEAF_NODE	56:43	56:43	8	(
ARGUMENT	56:44	56:44	8	prpl_info . protocol_options
FIELD	56:44	56:54	9	prpl_info . protocol_options
LEAF_NODE	56:44	56:44	10	prpl_info
LEAF_NODE	56:53	56:53	10	.
LEAF_NODE	56:54	56:54	10	protocol_options
LEAF_NODE	56:70	56:70	8	,
ARGUMENT	56:72	56:72	8	option
FIELD	56:72	56:72	9	option
LEAF_NODE	56:72	56:72	10	option
LEAF_NODE	56:78	56:78	8	)
LEAF_NODE	56:79	56:79	4	;
EXPR_STATEMENT	57:1	58:32	3	option = purple_account_option_bool_new ( _ ( "Digitally sign and verify all messages" ) , "sign-verify" , FALSE ) ;
EXPR	57:1	57:1	4	option = purple_account_option_bool_new ( _ ( "Digitally sign and verify all messages" ) , "sign-verify" , FALSE )
ASSIGN	57:1	57:10	5	option = purple_account_option_bool_new ( _ ( "Digitally sign and verify all messages" ) , "sign-verify" , FALSE )
LVAL	57:1	57:1	6	option
FIELD	57:1	57:1	7	option
LEAF_NODE	57:1	57:1	8	option
ASSIGN_OP	57:8	57:8	6	=
LEAF_NODE	57:8	57:8	7	=
RVAL	57:10	57:10	6	purple_account_option_bool_new ( _ ( "Digitally sign and verify all messages" ) , "sign-verify" , FALSE )
FUNCTION_CALL	57:10	58:31	7	purple_account_option_bool_new ( _ ( "Digitally sign and verify all messages" ) , "sign-verify" , FALSE )
CALLEE	57:10	57:10	8	purple_account_option_bool_new
LEAF_NODE	57:10	57:10	9	purple_account_option_bool_new
LEAF_NODE	57:40	57:40	8	(
ARGUMENT	57:41	57:41	8	_ ( "Digitally sign and verify all messages" )
FUNCTION_CALL	57:41	57:83	9	_ ( "Digitally sign and verify all messages" )
CALLEE	57:41	57:41	10	_
LEAF_NODE	57:41	57:41	11	_
LEAF_NODE	57:42	57:42	10	(
ARGUMENT	57:43	57:43	10	"Digitally sign and verify all messages"
FIELD	57:43	57:43	11	"Digitally sign and verify all messages"
LEAF_NODE	57:43	57:43	12	"Digitally sign and verify all messages"
LEAF_NODE	57:83	57:83	10	)
LEAF_NODE	57:84	57:84	8	,
ARGUMENT	58:11	58:11	8	"sign-verify"
FIELD	58:11	58:11	9	"sign-verify"
LEAF_NODE	58:11	58:11	10	"sign-verify"
LEAF_NODE	58:24	58:24	8	,
ARGUMENT	58:26	58:26	8	FALSE
FIELD	58:26	58:26	9	FALSE
LEAF_NODE	58:26	58:26	10	FALSE
LEAF_NODE	58:31	58:31	8	)
LEAF_NODE	58:32	58:32	4	;
EXPR_STATEMENT	59:1	59:79	3	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option ) ;
EXPR	59:1	59:1	4	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
ASSIGN	59:1	59:30	5	prpl_info . protocol_options = g_list_append ( prpl_info . protocol_options , option )
LVAL	59:1	59:1	6	prpl_info . protocol_options
FIELD	59:1	59:11	7	prpl_info . protocol_options
LEAF_NODE	59:1	59:1	8	prpl_info
LEAF_NODE	59:10	59:10	8	.
LEAF_NODE	59:11	59:11	8	protocol_options
ASSIGN_OP	59:28	59:28	6	=
LEAF_NODE	59:28	59:28	7	=
RVAL	59:30	59:30	6	g_list_append ( prpl_info . protocol_options , option )
FUNCTION_CALL	59:30	59:78	7	g_list_append ( prpl_info . protocol_options , option )
CALLEE	59:30	59:30	8	g_list_append
LEAF_NODE	59:30	59:30	9	g_list_append
LEAF_NODE	59:43	59:43	8	(
ARGUMENT	59:44	59:44	8	prpl_info . protocol_options
FIELD	59:44	59:54	9	prpl_info . protocol_options
LEAF_NODE	59:44	59:44	10	prpl_info
LEAF_NODE	59:53	59:53	10	.
LEAF_NODE	59:54	59:54	10	protocol_options
LEAF_NODE	59:70	59:70	8	,
ARGUMENT	59:72	59:72	8	option
FIELD	59:72	59:72	9	option
LEAF_NODE	59:72	59:72	10	option
LEAF_NODE	59:78	59:78	8	)
LEAF_NODE	59:79	59:79	4	;
EXPR_STATEMENT	60:1	60:42	3	purple_prefs_remove ( "/plugins/prpl/silc" ) ;
EXPR	60:1	60:1	4	purple_prefs_remove ( "/plugins/prpl/silc" )
FUNCTION_CALL	60:1	60:41	5	purple_prefs_remove ( "/plugins/prpl/silc" )
CALLEE	60:1	60:1	6	purple_prefs_remove
LEAF_NODE	60:1	60:1	7	purple_prefs_remove
LEAF_NODE	60:20	60:20	6	(
ARGUMENT	60:21	60:21	6	"/plugins/prpl/silc"
FIELD	60:21	60:21	7	"/plugins/prpl/silc"
LEAF_NODE	60:21	60:21	8	"/plugins/prpl/silc"
LEAF_NODE	60:41	60:41	6	)
LEAF_NODE	60:42	60:42	4	;
EXPR_STATEMENT	61:1	61:31	3	silcpurple_register_commands ( ) ;
EXPR	61:1	61:1	4	silcpurple_register_commands ( )
FUNCTION_CALL	61:1	61:30	5	silcpurple_register_commands ( )
CALLEE	61:1	61:1	6	silcpurple_register_commands
LEAF_NODE	61:1	61:1	7	silcpurple_register_commands
LEAF_NODE	61:29	61:29	6	(
LEAF_NODE	61:30	61:30	6	)
LEAF_NODE	61:31	61:31	4	;
EXPR_STATEMENT	63:1	63:22	3	silc_net_win32_init ( ) ;
EXPR	63:1	63:1	4	silc_net_win32_init ( )
FUNCTION_CALL	63:1	63:21	5	silc_net_win32_init ( )
CALLEE	63:1	63:1	6	silc_net_win32_init
LEAF_NODE	63:1	63:1	7	silc_net_win32_init
LEAF_NODE	63:20	63:20	6	(
LEAF_NODE	63:21	63:21	6	)
LEAF_NODE	63:22	63:22	4	;
LEAF_NODE	65:0	65:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:15	2	PurpleConvChat *
TYPE_NAME	1:0	1:0	3	PurpleConvChat
LEAF_NODE	1:0	1:0	4	PurpleConvChat
LEAF_NODE	1:15	1:15	3	*
FUNCTION_NAME	2:0	2:0	2	purple_conversation_get_chat_data
LEAF_NODE	2:0	2:0	3	purple_conversation_get_chat_data
PARAMETER_LIST	2:33	2:64	2	( const PurpleConversation * conv )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:60	3	const PurpleConversation * conv
TYPE	2:34	2:59	4	const PurpleConversation *
TYPE_NAME	2:34	2:40	5	const PurpleConversation
LEAF_NODE	2:34	2:34	6	const
LEAF_NODE	2:40	2:40	6	PurpleConversation
POINTER	2:59	2:59	5	*
LEAF_NODE	2:59	2:59	6	*
NAME	2:60	2:60	4	conv
LEAF_NODE	2:60	2:60	5	conv
LEAF_NODE	2:64	2:64	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
EXPR_STATEMENT	4:1	4:41	3	g_return_val_if_fail ( conv != NULL , NULL ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( conv != NULL , NULL )
FUNCTION_CALL	4:1	4:40	5	g_return_val_if_fail ( conv != NULL , NULL )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:30	6	conv != NULL
FIELD	4:22	4:22	7	conv
LEAF_NODE	4:22	4:22	8	conv
EQ_OPERATOR	4:27	4:27	7	!=
LEAF_NODE	4:27	4:27	8	!=
FIELD	4:30	4:30	7	NULL
LEAF_NODE	4:30	4:30	8	NULL
LEAF_NODE	4:34	4:34	6	,
ARGUMENT	4:36	4:36	6	NULL
FIELD	4:36	4:36	7	NULL
LEAF_NODE	4:36	4:36	8	NULL
LEAF_NODE	4:40	4:40	6	)
LEAF_NODE	4:41	4:41	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	purple_conversation_get_type ( conv ) != PURPLE_CONV_TYPE_CHAT
EXPR	5:5	5:43	5	purple_conversation_get_type ( conv ) != PURPLE_CONV_TYPE_CHAT
FUNCTION_CALL	5:5	5:38	6	purple_conversation_get_type ( conv )
CALLEE	5:5	5:5	7	purple_conversation_get_type
LEAF_NODE	5:5	5:5	8	purple_conversation_get_type
LEAF_NODE	5:33	5:33	7	(
ARGUMENT	5:34	5:34	7	conv
FIELD	5:34	5:34	8	conv
LEAF_NODE	5:34	5:34	9	conv
LEAF_NODE	5:38	5:38	7	)
EQ_OPERATOR	5:40	5:40	6	!=
LEAF_NODE	5:40	5:40	7	!=
FIELD	5:43	5:43	6	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	5:43	5:43	7	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	5:64	5:64	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:13	5	return NULL ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
DESTINATION	6:9	6:9	6	NULL
EXPR	6:9	6:9	7	NULL
FIELD	6:9	6:9	8	NULL
LEAF_NODE	6:9	6:9	9	NULL
LEAF_NODE	6:13	6:13	6	;
JUMP_STATEMENT	7:1	7:20	3	return conv -> u . chat ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	conv -> u . chat
EXPR	7:8	7:8	5	conv -> u . chat
FIELD	7:8	7:16	6	conv -> u . chat
LEAF_NODE	7:8	7:8	7	conv
LEAF_NODE	7:12	7:12	7	->
LEAF_NODE	7:14	7:14	7	u
LEAF_NODE	7:15	7:15	7	.
LEAF_NODE	7:16	7:16	7	chat
LEAF_NODE	7:20	7:20	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	122:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	end_element_handler
LEAF_NODE	2:0	2:0	3	end_element_handler
PARAMETER_LIST	2:19	3:40	2	( GMarkupParseContext * context , const gchar * element_name , gpointer user_data , GError * * error )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:41	3	GMarkupParseContext * context
TYPE	2:20	2:40	4	GMarkupParseContext *
TYPE_NAME	2:20	2:20	5	GMarkupParseContext
LEAF_NODE	2:20	2:20	6	GMarkupParseContext
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	context
LEAF_NODE	2:41	2:41	5	context
LEAF_NODE	2:48	2:48	3	,
PARAMETER_DECL	2:50	2:63	3	const gchar * element_name
TYPE	2:50	2:62	4	const gchar *
TYPE_NAME	2:50	2:56	5	const gchar
LEAF_NODE	2:50	2:50	6	const
LEAF_NODE	2:56	2:56	6	gchar
POINTER	2:62	2:62	5	*
LEAF_NODE	2:62	2:62	6	*
NAME	2:63	2:63	4	element_name
LEAF_NODE	2:63	2:63	5	element_name
LEAF_NODE	2:75	2:75	3	,
PARAMETER_DECL	3:5	3:14	3	gpointer user_data
TYPE	3:5	3:5	4	gpointer
TYPE_NAME	3:5	3:5	5	gpointer
LEAF_NODE	3:5	3:5	6	gpointer
NAME	3:14	3:14	4	user_data
LEAF_NODE	3:14	3:14	5	user_data
LEAF_NODE	3:23	3:23	3	,
PARAMETER_DECL	3:26	3:35	3	GError * * error
TYPE	3:26	3:33	4	GError * *
TYPE_NAME	3:26	3:26	5	GError
LEAF_NODE	3:26	3:26	6	GError
POINTER	3:33	3:34	5	* *
LEAF_NODE	3:33	3:33	6	*
LEAF_NODE	3:34	3:34	6	*
NAME	3:35	3:35	4	error
LEAF_NODE	3:35	3:35	5	error
LEAF_NODE	3:40	3:40	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	121:1	2	
SIMPLE_DECL	5:1	5:35	3	PounceParserData * data ; data = user_data ;
VAR_DECL	5:1	5:19	4	PounceParserData * data ; data = user_data
TYPE	5:1	5:18	5	PounceParserData *
TYPE_NAME	5:1	5:1	6	PounceParserData
LEAF_NODE	5:1	5:1	7	PounceParserData
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	data
LEAF_NODE	5:19	5:19	6	data
LEAF_NODE	0:0	0:0	5	;
INIT	5:19	5:19	5	data = user_data
ASSIGN	5:19	5:26	6	data = user_data
LVAL	5:19	5:19	7	data
NAME	5:19	5:19	8	data
LEAF_NODE	5:19	5:19	9	data
ASSIGN_OP	5:24	5:24	7	=
LEAF_NODE	5:24	5:24	8	=
RVAL	5:26	5:26	7	user_data
FIELD	5:26	5:26	8	user_data
LEAF_NODE	5:26	5:26	9	user_data
LEAF_NODE	5:35	5:35	4	;
SIMPLE_DECL	6:1	6:21	3	gchar * buffer ; buffer = NULL ;
VAR_DECL	6:1	6:8	4	gchar * buffer ; buffer = NULL
TYPE	6:1	6:7	5	gchar *
TYPE_NAME	6:1	6:1	6	gchar
LEAF_NODE	6:1	6:1	7	gchar
POINTER	6:7	6:7	6	*
LEAF_NODE	6:7	6:7	7	*
NAME	6:8	6:8	5	buffer
LEAF_NODE	6:8	6:8	6	buffer
LEAF_NODE	0:0	0:0	5	;
INIT	6:8	6:8	5	buffer = NULL
ASSIGN	6:8	6:17	6	buffer = NULL
LVAL	6:8	6:8	7	buffer
NAME	6:8	6:8	8	buffer
LEAF_NODE	6:8	6:8	9	buffer
ASSIGN_OP	6:15	6:15	7	=
LEAF_NODE	6:15	6:15	8	=
RVAL	6:17	6:17	7	NULL
FIELD	6:17	6:17	8	NULL
LEAF_NODE	6:17	6:17	9	NULL
LEAF_NODE	6:21	6:21	4	;
SELECTION	7:1	7:27	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	data -> buffer != NULL
EXPR	7:5	7:21	5	data -> buffer != NULL
FIELD	7:5	7:11	6	data -> buffer
LEAF_NODE	7:5	7:5	7	data
LEAF_NODE	7:9	7:9	7	->
LEAF_NODE	7:11	7:11	7	buffer
EQ_OPERATOR	7:18	7:18	6	!=
LEAF_NODE	7:18	7:18	7	!=
FIELD	7:21	7:21	6	NULL
LEAF_NODE	7:21	7:21	7	NULL
LEAF_NODE	7:25	7:25	4	)
STATEMENTS	7:27	10:1	4	
LEAF_NODE	7:27	7:27	5	{
STATEMENTS	8:2	9:2	5	
EXPR_STATEMENT	8:2	8:45	6	buffer = g_string_free ( data -> buffer , FALSE ) ;
EXPR	8:2	8:2	7	buffer = g_string_free ( data -> buffer , FALSE )
ASSIGN	8:2	8:11	8	buffer = g_string_free ( data -> buffer , FALSE )
LVAL	8:2	8:2	9	buffer
FIELD	8:2	8:2	10	buffer
LEAF_NODE	8:2	8:2	11	buffer
ASSIGN_OP	8:9	8:9	9	=
LEAF_NODE	8:9	8:9	10	=
RVAL	8:11	8:11	9	g_string_free ( data -> buffer , FALSE )
FUNCTION_CALL	8:11	8:44	10	g_string_free ( data -> buffer , FALSE )
CALLEE	8:11	8:11	11	g_string_free
LEAF_NODE	8:11	8:11	12	g_string_free
LEAF_NODE	8:24	8:24	11	(
ARGUMENT	8:25	8:25	11	data -> buffer
FIELD	8:25	8:31	12	data -> buffer
LEAF_NODE	8:25	8:25	13	data
LEAF_NODE	8:29	8:29	13	->
LEAF_NODE	8:31	8:31	13	buffer
LEAF_NODE	8:37	8:37	11	,
ARGUMENT	8:39	8:39	11	FALSE
FIELD	8:39	8:39	12	FALSE
LEAF_NODE	8:39	8:39	13	FALSE
LEAF_NODE	8:44	8:44	11	)
LEAF_NODE	8:45	8:45	7	;
EXPR_STATEMENT	9:2	9:21	6	data -> buffer = NULL ;
EXPR	9:2	9:2	7	data -> buffer = NULL
ASSIGN	9:2	9:17	8	data -> buffer = NULL
LVAL	9:2	9:2	9	data -> buffer
FIELD	9:2	9:8	10	data -> buffer
LEAF_NODE	9:2	9:2	11	data
LEAF_NODE	9:6	9:6	11	->
LEAF_NODE	9:8	9:8	11	buffer
ASSIGN_OP	9:15	9:15	9	=
LEAF_NODE	9:15	9:15	10	=
RVAL	9:17	9:17	9	NULL
FIELD	9:17	9:17	10	NULL
LEAF_NODE	9:17	9:17	11	NULL
LEAF_NODE	9:21	9:21	7	;
LEAF_NODE	10:1	10:1	5	}
SELECTION	11:1	11:47	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	purple_strequal ( element_name , "account" )
EXPR	11:5	11:5	5	purple_strequal ( element_name , "account" )
FUNCTION_CALL	11:5	11:44	6	purple_strequal ( element_name , "account" )
CALLEE	11:5	11:5	7	purple_strequal
LEAF_NODE	11:5	11:5	8	purple_strequal
LEAF_NODE	11:20	11:20	7	(
ARGUMENT	11:21	11:21	7	element_name
FIELD	11:21	11:21	8	element_name
LEAF_NODE	11:21	11:21	9	element_name
LEAF_NODE	11:33	11:33	7	,
ARGUMENT	11:35	11:35	7	"account"
FIELD	11:35	11:35	8	"account"
LEAF_NODE	11:35	11:35	9	"account"
LEAF_NODE	11:44	11:44	7	)
LEAF_NODE	11:45	11:45	4	)
STATEMENTS	11:47	18:1	4	
LEAF_NODE	11:47	11:47	5	{
STATEMENTS	12:2	17:2	5	
SIMPLE_DECL	12:2	12:11	6	char * tmp ;
VAR_DECL	12:2	12:8	7	char * tmp
TYPE	12:2	12:7	8	char *
TYPE_NAME	12:2	12:2	9	char
LEAF_NODE	12:2	12:2	10	char
POINTER	12:7	12:7	9	*
LEAF_NODE	12:7	12:7	10	*
NAME	12:8	12:8	8	tmp
LEAF_NODE	12:8	12:8	9	tmp
LEAF_NODE	12:11	12:11	7	;
EXPR_STATEMENT	13:2	13:28	6	g_free ( data -> account_name ) ;
EXPR	13:2	13:2	7	g_free ( data -> account_name )
FUNCTION_CALL	13:2	13:27	8	g_free ( data -> account_name )
CALLEE	13:2	13:2	9	g_free
LEAF_NODE	13:2	13:2	10	g_free
LEAF_NODE	13:8	13:8	9	(
ARGUMENT	13:9	13:9	9	data -> account_name
FIELD	13:9	13:15	10	data -> account_name
LEAF_NODE	13:9	13:9	11	data
LEAF_NODE	13:13	13:13	11	->
LEAF_NODE	13:15	13:15	11	account_name
LEAF_NODE	13:27	13:27	9	)
LEAF_NODE	13:28	13:28	7	;
EXPR_STATEMENT	14:2	14:39	6	data -> account_name = g_strdup ( buffer ) ;
EXPR	14:2	14:2	7	data -> account_name = g_strdup ( buffer )
ASSIGN	14:2	14:23	8	data -> account_name = g_strdup ( buffer )
LVAL	14:2	14:2	9	data -> account_name
FIELD	14:2	14:8	10	data -> account_name
LEAF_NODE	14:2	14:2	11	data
LEAF_NODE	14:6	14:6	11	->
LEAF_NODE	14:8	14:8	11	account_name
ASSIGN_OP	14:21	14:21	9	=
LEAF_NODE	14:21	14:21	10	=
RVAL	14:23	14:23	9	g_strdup ( buffer )
FUNCTION_CALL	14:23	14:38	10	g_strdup ( buffer )
CALLEE	14:23	14:23	11	g_strdup
LEAF_NODE	14:23	14:23	12	g_strdup
LEAF_NODE	14:31	14:31	11	(
ARGUMENT	14:32	14:32	11	buffer
FIELD	14:32	14:32	12	buffer
LEAF_NODE	14:32	14:32	13	buffer
LEAF_NODE	14:38	14:38	11	)
LEAF_NODE	14:39	14:39	7	;
EXPR_STATEMENT	15:2	15:25	6	tmp = data -> protocol_id ;
EXPR	15:2	15:2	7	tmp = data -> protocol_id
ASSIGN	15:2	15:8	8	tmp = data -> protocol_id
LVAL	15:2	15:2	9	tmp
FIELD	15:2	15:2	10	tmp
LEAF_NODE	15:2	15:2	11	tmp
ASSIGN_OP	15:6	15:6	9	=
LEAF_NODE	15:6	15:6	10	=
RVAL	15:8	15:8	9	data -> protocol_id
FIELD	15:8	15:14	10	data -> protocol_id
LEAF_NODE	15:8	15:8	11	data
LEAF_NODE	15:12	15:12	11	->
LEAF_NODE	15:14	15:14	11	protocol_id
LEAF_NODE	15:25	15:25	7	;
EXPR_STATEMENT	16:2	16:66	6	data -> protocol_id = g_strdup ( _purple_oscar_convert ( buffer , tmp ) ) ;
EXPR	16:2	16:2	7	data -> protocol_id = g_strdup ( _purple_oscar_convert ( buffer , tmp ) )
ASSIGN	16:2	16:22	8	data -> protocol_id = g_strdup ( _purple_oscar_convert ( buffer , tmp ) )
LVAL	16:2	16:2	9	data -> protocol_id
FIELD	16:2	16:8	10	data -> protocol_id
LEAF_NODE	16:2	16:2	11	data
LEAF_NODE	16:6	16:6	11	->
LEAF_NODE	16:8	16:8	11	protocol_id
ASSIGN_OP	16:20	16:20	9	=
LEAF_NODE	16:20	16:20	10	=
RVAL	16:22	16:22	9	g_strdup ( _purple_oscar_convert ( buffer , tmp ) )
FUNCTION_CALL	16:22	16:65	10	g_strdup ( _purple_oscar_convert ( buffer , tmp ) )
CALLEE	16:22	16:22	11	g_strdup
LEAF_NODE	16:22	16:22	12	g_strdup
LEAF_NODE	16:30	16:30	11	(
ARGUMENT	16:31	16:31	11	_purple_oscar_convert ( buffer , tmp )
FUNCTION_CALL	16:31	16:64	12	_purple_oscar_convert ( buffer , tmp )
CALLEE	16:31	16:31	13	_purple_oscar_convert
LEAF_NODE	16:31	16:31	14	_purple_oscar_convert
LEAF_NODE	16:52	16:52	13	(
ARGUMENT	16:53	16:53	13	buffer
FIELD	16:53	16:53	14	buffer
LEAF_NODE	16:53	16:53	15	buffer
LEAF_NODE	16:59	16:59	13	,
ARGUMENT	16:61	16:61	13	tmp
FIELD	16:61	16:61	14	tmp
LEAF_NODE	16:61	16:61	15	tmp
LEAF_NODE	16:64	16:64	13	)
LEAF_NODE	16:65	16:65	11	)
LEAF_NODE	16:66	16:66	7	;
EXPR_STATEMENT	17:2	17:13	6	g_free ( tmp ) ;
EXPR	17:2	17:2	7	g_free ( tmp )
FUNCTION_CALL	17:2	17:12	8	g_free ( tmp )
CALLEE	17:2	17:2	9	g_free
LEAF_NODE	17:2	17:2	10	g_free
LEAF_NODE	17:8	17:8	9	(
ARGUMENT	17:9	17:9	9	tmp
FIELD	17:9	17:9	10	tmp
LEAF_NODE	17:9	17:9	11	tmp
LEAF_NODE	17:12	17:12	9	)
LEAF_NODE	17:13	17:13	7	;
LEAF_NODE	18:1	18:1	5	}
SELECTION	19:1	19:6	3	
KEYWORD	19:1	19:1	4	else
LEAF_NODE	19:1	19:1	5	else
STATEMENTS	19:6	19:6	4	
SELECTION	19:6	19:52	5	
KEYWORD	19:6	19:6	6	if
LEAF_NODE	19:6	19:6	7	if
LEAF_NODE	19:9	19:9	6	(
CONDITION	19:10	19:10	6	purple_strequal ( element_name , "pouncee" )
EXPR	19:10	19:10	7	purple_strequal ( element_name , "pouncee" )
FUNCTION_CALL	19:10	19:49	8	purple_strequal ( element_name , "pouncee" )
CALLEE	19:10	19:10	9	purple_strequal
LEAF_NODE	19:10	19:10	10	purple_strequal
LEAF_NODE	19:25	19:25	9	(
ARGUMENT	19:26	19:26	9	element_name
FIELD	19:26	19:26	10	element_name
LEAF_NODE	19:26	19:26	11	element_name
LEAF_NODE	19:38	19:38	9	,
ARGUMENT	19:40	19:40	9	"pouncee"
FIELD	19:40	19:40	10	"pouncee"
LEAF_NODE	19:40	19:40	11	"pouncee"
LEAF_NODE	19:49	19:49	9	)
LEAF_NODE	19:50	19:50	6	)
STATEMENTS	19:52	22:1	6	
LEAF_NODE	19:52	19:52	7	{
STATEMENTS	20:2	21:2	7	
EXPR_STATEMENT	20:2	20:23	8	g_free ( data -> pouncee ) ;
EXPR	20:2	20:2	9	g_free ( data -> pouncee )
FUNCTION_CALL	20:2	20:22	10	g_free ( data -> pouncee )
CALLEE	20:2	20:2	11	g_free
LEAF_NODE	20:2	20:2	12	g_free
LEAF_NODE	20:8	20:8	11	(
ARGUMENT	20:9	20:9	11	data -> pouncee
FIELD	20:9	20:15	12	data -> pouncee
LEAF_NODE	20:9	20:9	13	data
LEAF_NODE	20:13	20:13	13	->
LEAF_NODE	20:15	20:15	13	pouncee
LEAF_NODE	20:22	20:22	11	)
LEAF_NODE	20:23	20:23	9	;
EXPR_STATEMENT	21:2	21:34	8	data -> pouncee = g_strdup ( buffer ) ;
EXPR	21:2	21:2	9	data -> pouncee = g_strdup ( buffer )
ASSIGN	21:2	21:18	10	data -> pouncee = g_strdup ( buffer )
LVAL	21:2	21:2	11	data -> pouncee
FIELD	21:2	21:8	12	data -> pouncee
LEAF_NODE	21:2	21:2	13	data
LEAF_NODE	21:6	21:6	13	->
LEAF_NODE	21:8	21:8	13	pouncee
ASSIGN_OP	21:16	21:16	11	=
LEAF_NODE	21:16	21:16	12	=
RVAL	21:18	21:18	11	g_strdup ( buffer )
FUNCTION_CALL	21:18	21:33	12	g_strdup ( buffer )
CALLEE	21:18	21:18	13	g_strdup
LEAF_NODE	21:18	21:18	14	g_strdup
LEAF_NODE	21:26	21:26	13	(
ARGUMENT	21:27	21:27	13	buffer
FIELD	21:27	21:27	14	buffer
LEAF_NODE	21:27	21:27	15	buffer
LEAF_NODE	21:33	21:33	13	)
LEAF_NODE	21:34	21:34	9	;
LEAF_NODE	22:1	22:1	7	}
SELECTION	23:1	23:6	3	
KEYWORD	23:1	23:1	4	else
LEAF_NODE	23:1	23:1	5	else
STATEMENTS	23:6	23:6	4	
SELECTION	23:6	23:51	5	
KEYWORD	23:6	23:6	6	if
LEAF_NODE	23:6	23:6	7	if
LEAF_NODE	23:9	23:9	6	(
CONDITION	23:10	23:10	6	purple_strequal ( element_name , "option" )
EXPR	23:10	23:10	7	purple_strequal ( element_name , "option" )
FUNCTION_CALL	23:10	23:48	8	purple_strequal ( element_name , "option" )
CALLEE	23:10	23:10	9	purple_strequal
LEAF_NODE	23:10	23:10	10	purple_strequal
LEAF_NODE	23:25	23:25	9	(
ARGUMENT	23:26	23:26	9	element_name
FIELD	23:26	23:26	10	element_name
LEAF_NODE	23:26	23:26	11	element_name
LEAF_NODE	23:38	23:38	9	,
ARGUMENT	23:40	23:40	9	"option"
FIELD	23:40	23:40	10	"option"
LEAF_NODE	23:40	23:40	11	"option"
LEAF_NODE	23:48	23:48	9	)
LEAF_NODE	23:49	23:49	6	)
STATEMENTS	23:51	28:1	6	
LEAF_NODE	23:51	23:51	7	{
STATEMENTS	24:2	27:2	7	
SELECTION	24:2	25:3	8	
KEYWORD	24:2	24:2	9	if
LEAF_NODE	24:2	24:2	10	if
LEAF_NODE	24:5	24:5	9	(
CONDITION	24:6	24:6	9	purple_strequal ( data -> option_type , "on-away" )
EXPR	24:6	24:6	10	purple_strequal ( data -> option_type , "on-away" )
FUNCTION_CALL	24:6	24:50	11	purple_strequal ( data -> option_type , "on-away" )
CALLEE	24:6	24:6	12	purple_strequal
LEAF_NODE	24:6	24:6	13	purple_strequal
LEAF_NODE	24:21	24:21	12	(
ARGUMENT	24:22	24:22	12	data -> option_type
FIELD	24:22	24:28	13	data -> option_type
LEAF_NODE	24:22	24:22	14	data
LEAF_NODE	24:26	24:26	14	->
LEAF_NODE	24:28	24:28	14	option_type
LEAF_NODE	24:39	24:39	12	,
ARGUMENT	24:41	24:41	12	"on-away"
FIELD	24:41	24:41	13	"on-away"
LEAF_NODE	24:41	24:41	14	"on-away"
LEAF_NODE	24:50	24:50	12	)
LEAF_NODE	24:51	24:51	9	)
STATEMENTS	25:3	25:3	9	
EXPR_STATEMENT	25:3	25:45	10	data -> options |= PURPLE_POUNCE_OPTION_AWAY ;
EXPR	25:3	25:3	11	data -> options |= PURPLE_POUNCE_OPTION_AWAY
ASSIGN	25:3	25:20	12	data -> options |= PURPLE_POUNCE_OPTION_AWAY
LVAL	25:3	25:3	13	data -> options
FIELD	25:3	25:9	14	data -> options
LEAF_NODE	25:3	25:3	15	data
LEAF_NODE	25:7	25:7	15	->
LEAF_NODE	25:9	25:9	15	options
ASSIGN_OP	25:17	25:17	13	|=
LEAF_NODE	25:17	25:17	14	|=
RVAL	25:20	25:20	13	PURPLE_POUNCE_OPTION_AWAY
FIELD	25:20	25:20	14	PURPLE_POUNCE_OPTION_AWAY
LEAF_NODE	25:20	25:20	15	PURPLE_POUNCE_OPTION_AWAY
LEAF_NODE	25:45	25:45	11	;
EXPR_STATEMENT	26:2	26:27	8	g_free ( data -> option_type ) ;
EXPR	26:2	26:2	9	g_free ( data -> option_type )
FUNCTION_CALL	26:2	26:26	10	g_free ( data -> option_type )
CALLEE	26:2	26:2	11	g_free
LEAF_NODE	26:2	26:2	12	g_free
LEAF_NODE	26:8	26:8	11	(
ARGUMENT	26:9	26:9	11	data -> option_type
FIELD	26:9	26:15	12	data -> option_type
LEAF_NODE	26:9	26:9	13	data
LEAF_NODE	26:13	26:13	13	->
LEAF_NODE	26:15	26:15	13	option_type
LEAF_NODE	26:26	26:26	11	)
LEAF_NODE	26:27	26:27	9	;
EXPR_STATEMENT	27:2	27:26	8	data -> option_type = NULL ;
EXPR	27:2	27:2	9	data -> option_type = NULL
ASSIGN	27:2	27:22	10	data -> option_type = NULL
LVAL	27:2	27:2	11	data -> option_type
FIELD	27:2	27:8	12	data -> option_type
LEAF_NODE	27:2	27:2	13	data
LEAF_NODE	27:6	27:6	13	->
LEAF_NODE	27:8	27:8	13	option_type
ASSIGN_OP	27:20	27:20	11	=
LEAF_NODE	27:20	27:20	12	=
RVAL	27:22	27:22	11	NULL
FIELD	27:22	27:22	12	NULL
LEAF_NODE	27:22	27:22	13	NULL
LEAF_NODE	27:26	27:26	9	;
LEAF_NODE	28:1	28:1	7	}
SELECTION	29:1	29:6	3	
KEYWORD	29:1	29:1	4	else
LEAF_NODE	29:1	29:1	5	else
STATEMENTS	29:6	29:6	4	
SELECTION	29:6	29:50	5	
KEYWORD	29:6	29:6	6	if
LEAF_NODE	29:6	29:6	7	if
LEAF_NODE	29:9	29:9	6	(
CONDITION	29:10	29:10	6	purple_strequal ( element_name , "event" )
EXPR	29:10	29:10	7	purple_strequal ( element_name , "event" )
FUNCTION_CALL	29:10	29:47	8	purple_strequal ( element_name , "event" )
CALLEE	29:10	29:10	9	purple_strequal
LEAF_NODE	29:10	29:10	10	purple_strequal
LEAF_NODE	29:25	29:25	9	(
ARGUMENT	29:26	29:26	9	element_name
FIELD	29:26	29:26	10	element_name
LEAF_NODE	29:26	29:26	11	element_name
LEAF_NODE	29:38	29:38	9	,
ARGUMENT	29:40	29:40	9	"event"
FIELD	29:40	29:40	10	"event"
LEAF_NODE	29:40	29:40	11	"event"
LEAF_NODE	29:47	29:47	9	)
LEAF_NODE	29:48	29:48	6	)
STATEMENTS	29:50	52:1	6	
LEAF_NODE	29:50	29:50	7	{
STATEMENTS	30:2	51:2	7	
SELECTION	30:2	31:3	8	
KEYWORD	30:2	30:2	9	if
LEAF_NODE	30:2	30:2	10	if
LEAF_NODE	30:5	30:5	9	(
CONDITION	30:6	30:6	9	purple_strequal ( data -> event_type , "sign-on" )
EXPR	30:6	30:6	10	purple_strequal ( data -> event_type , "sign-on" )
FUNCTION_CALL	30:6	30:49	11	purple_strequal ( data -> event_type , "sign-on" )
CALLEE	30:6	30:6	12	purple_strequal
LEAF_NODE	30:6	30:6	13	purple_strequal
LEAF_NODE	30:21	30:21	12	(
ARGUMENT	30:22	30:22	12	data -> event_type
FIELD	30:22	30:28	13	data -> event_type
LEAF_NODE	30:22	30:22	14	data
LEAF_NODE	30:26	30:26	14	->
LEAF_NODE	30:28	30:28	14	event_type
LEAF_NODE	30:38	30:38	12	,
ARGUMENT	30:40	30:40	12	"sign-on"
FIELD	30:40	30:40	13	"sign-on"
LEAF_NODE	30:40	30:40	14	"sign-on"
LEAF_NODE	30:49	30:49	12	)
LEAF_NODE	30:50	30:50	9	)
STATEMENTS	31:3	31:3	9	
EXPR_STATEMENT	31:3	31:39	10	data -> events |= PURPLE_POUNCE_SIGNON ;
EXPR	31:3	31:3	11	data -> events |= PURPLE_POUNCE_SIGNON
ASSIGN	31:3	31:19	12	data -> events |= PURPLE_POUNCE_SIGNON
LVAL	31:3	31:3	13	data -> events
FIELD	31:3	31:9	14	data -> events
LEAF_NODE	31:3	31:3	15	data
LEAF_NODE	31:7	31:7	15	->
LEAF_NODE	31:9	31:9	15	events
ASSIGN_OP	31:16	31:16	13	|=
LEAF_NODE	31:16	31:16	14	|=
RVAL	31:19	31:19	13	PURPLE_POUNCE_SIGNON
FIELD	31:19	31:19	14	PURPLE_POUNCE_SIGNON
LEAF_NODE	31:19	31:19	15	PURPLE_POUNCE_SIGNON
LEAF_NODE	31:39	31:39	11	;
SELECTION	32:2	32:7	8	
KEYWORD	32:2	32:2	9	else
LEAF_NODE	32:2	32:2	10	else
STATEMENTS	32:7	32:7	9	
SELECTION	32:7	33:3	10	
KEYWORD	32:7	32:7	11	if
LEAF_NODE	32:7	32:7	12	if
LEAF_NODE	32:10	32:10	11	(
CONDITION	32:11	32:11	11	purple_strequal ( data -> event_type , "sign-off" )
EXPR	32:11	32:11	12	purple_strequal ( data -> event_type , "sign-off" )
FUNCTION_CALL	32:11	32:55	13	purple_strequal ( data -> event_type , "sign-off" )
CALLEE	32:11	32:11	14	purple_strequal
LEAF_NODE	32:11	32:11	15	purple_strequal
LEAF_NODE	32:26	32:26	14	(
ARGUMENT	32:27	32:27	14	data -> event_type
FIELD	32:27	32:33	15	data -> event_type
LEAF_NODE	32:27	32:27	16	data
LEAF_NODE	32:31	32:31	16	->
LEAF_NODE	32:33	32:33	16	event_type
LEAF_NODE	32:43	32:43	14	,
ARGUMENT	32:45	32:45	14	"sign-off"
FIELD	32:45	32:45	15	"sign-off"
LEAF_NODE	32:45	32:45	16	"sign-off"
LEAF_NODE	32:55	32:55	14	)
LEAF_NODE	32:56	32:56	11	)
STATEMENTS	33:3	33:3	11	
EXPR_STATEMENT	33:3	33:40	12	data -> events |= PURPLE_POUNCE_SIGNOFF ;
EXPR	33:3	33:3	13	data -> events |= PURPLE_POUNCE_SIGNOFF
ASSIGN	33:3	33:19	14	data -> events |= PURPLE_POUNCE_SIGNOFF
LVAL	33:3	33:3	15	data -> events
FIELD	33:3	33:9	16	data -> events
LEAF_NODE	33:3	33:3	17	data
LEAF_NODE	33:7	33:7	17	->
LEAF_NODE	33:9	33:9	17	events
ASSIGN_OP	33:16	33:16	15	|=
LEAF_NODE	33:16	33:16	16	|=
RVAL	33:19	33:19	15	PURPLE_POUNCE_SIGNOFF
FIELD	33:19	33:19	16	PURPLE_POUNCE_SIGNOFF
LEAF_NODE	33:19	33:19	17	PURPLE_POUNCE_SIGNOFF
LEAF_NODE	33:40	33:40	13	;
SELECTION	34:2	34:7	8	
KEYWORD	34:2	34:2	9	else
LEAF_NODE	34:2	34:2	10	else
STATEMENTS	34:7	34:7	9	
SELECTION	34:7	35:3	10	
KEYWORD	34:7	34:7	11	if
LEAF_NODE	34:7	34:7	12	if
LEAF_NODE	34:10	34:10	11	(
CONDITION	34:11	34:11	11	purple_strequal ( data -> event_type , "away" )
EXPR	34:11	34:11	12	purple_strequal ( data -> event_type , "away" )
FUNCTION_CALL	34:11	34:51	13	purple_strequal ( data -> event_type , "away" )
CALLEE	34:11	34:11	14	purple_strequal
LEAF_NODE	34:11	34:11	15	purple_strequal
LEAF_NODE	34:26	34:26	14	(
ARGUMENT	34:27	34:27	14	data -> event_type
FIELD	34:27	34:33	15	data -> event_type
LEAF_NODE	34:27	34:27	16	data
LEAF_NODE	34:31	34:31	16	->
LEAF_NODE	34:33	34:33	16	event_type
LEAF_NODE	34:43	34:43	14	,
ARGUMENT	34:45	34:45	14	"away"
FIELD	34:45	34:45	15	"away"
LEAF_NODE	34:45	34:45	16	"away"
LEAF_NODE	34:51	34:51	14	)
LEAF_NODE	34:52	34:52	11	)
STATEMENTS	35:3	35:3	11	
EXPR_STATEMENT	35:3	35:37	12	data -> events |= PURPLE_POUNCE_AWAY ;
EXPR	35:3	35:3	13	data -> events |= PURPLE_POUNCE_AWAY
ASSIGN	35:3	35:19	14	data -> events |= PURPLE_POUNCE_AWAY
LVAL	35:3	35:3	15	data -> events
FIELD	35:3	35:9	16	data -> events
LEAF_NODE	35:3	35:3	17	data
LEAF_NODE	35:7	35:7	17	->
LEAF_NODE	35:9	35:9	17	events
ASSIGN_OP	35:16	35:16	15	|=
LEAF_NODE	35:16	35:16	16	|=
RVAL	35:19	35:19	15	PURPLE_POUNCE_AWAY
FIELD	35:19	35:19	16	PURPLE_POUNCE_AWAY
LEAF_NODE	35:19	35:19	17	PURPLE_POUNCE_AWAY
LEAF_NODE	35:37	35:37	13	;
SELECTION	36:2	36:7	8	
KEYWORD	36:2	36:2	9	else
LEAF_NODE	36:2	36:2	10	else
STATEMENTS	36:7	36:7	9	
SELECTION	36:7	37:3	10	
KEYWORD	36:7	36:7	11	if
LEAF_NODE	36:7	36:7	12	if
LEAF_NODE	36:10	36:10	11	(
CONDITION	36:11	36:11	11	purple_strequal ( data -> event_type , "return-from-away" )
EXPR	36:11	36:11	12	purple_strequal ( data -> event_type , "return-from-away" )
FUNCTION_CALL	36:11	36:63	13	purple_strequal ( data -> event_type , "return-from-away" )
CALLEE	36:11	36:11	14	purple_strequal
LEAF_NODE	36:11	36:11	15	purple_strequal
LEAF_NODE	36:26	36:26	14	(
ARGUMENT	36:27	36:27	14	data -> event_type
FIELD	36:27	36:33	15	data -> event_type
LEAF_NODE	36:27	36:27	16	data
LEAF_NODE	36:31	36:31	16	->
LEAF_NODE	36:33	36:33	16	event_type
LEAF_NODE	36:43	36:43	14	,
ARGUMENT	36:45	36:45	14	"return-from-away"
FIELD	36:45	36:45	15	"return-from-away"
LEAF_NODE	36:45	36:45	16	"return-from-away"
LEAF_NODE	36:63	36:63	14	)
LEAF_NODE	36:64	36:64	11	)
STATEMENTS	37:3	37:3	11	
EXPR_STATEMENT	37:3	37:44	12	data -> events |= PURPLE_POUNCE_AWAY_RETURN ;
EXPR	37:3	37:3	13	data -> events |= PURPLE_POUNCE_AWAY_RETURN
ASSIGN	37:3	37:19	14	data -> events |= PURPLE_POUNCE_AWAY_RETURN
LVAL	37:3	37:3	15	data -> events
FIELD	37:3	37:9	16	data -> events
LEAF_NODE	37:3	37:3	17	data
LEAF_NODE	37:7	37:7	17	->
LEAF_NODE	37:9	37:9	17	events
ASSIGN_OP	37:16	37:16	15	|=
LEAF_NODE	37:16	37:16	16	|=
RVAL	37:19	37:19	15	PURPLE_POUNCE_AWAY_RETURN
FIELD	37:19	37:19	16	PURPLE_POUNCE_AWAY_RETURN
LEAF_NODE	37:19	37:19	17	PURPLE_POUNCE_AWAY_RETURN
LEAF_NODE	37:44	37:44	13	;
SELECTION	38:2	38:7	8	
KEYWORD	38:2	38:2	9	else
LEAF_NODE	38:2	38:2	10	else
STATEMENTS	38:7	38:7	9	
SELECTION	38:7	39:3	10	
KEYWORD	38:7	38:7	11	if
LEAF_NODE	38:7	38:7	12	if
LEAF_NODE	38:10	38:10	11	(
CONDITION	38:11	38:11	11	purple_strequal ( data -> event_type , "idle" )
EXPR	38:11	38:11	12	purple_strequal ( data -> event_type , "idle" )
FUNCTION_CALL	38:11	38:51	13	purple_strequal ( data -> event_type , "idle" )
CALLEE	38:11	38:11	14	purple_strequal
LEAF_NODE	38:11	38:11	15	purple_strequal
LEAF_NODE	38:26	38:26	14	(
ARGUMENT	38:27	38:27	14	data -> event_type
FIELD	38:27	38:33	15	data -> event_type
LEAF_NODE	38:27	38:27	16	data
LEAF_NODE	38:31	38:31	16	->
LEAF_NODE	38:33	38:33	16	event_type
LEAF_NODE	38:43	38:43	14	,
ARGUMENT	38:45	38:45	14	"idle"
FIELD	38:45	38:45	15	"idle"
LEAF_NODE	38:45	38:45	16	"idle"
LEAF_NODE	38:51	38:51	14	)
LEAF_NODE	38:52	38:52	11	)
STATEMENTS	39:3	39:3	11	
EXPR_STATEMENT	39:3	39:37	12	data -> events |= PURPLE_POUNCE_IDLE ;
EXPR	39:3	39:3	13	data -> events |= PURPLE_POUNCE_IDLE
ASSIGN	39:3	39:19	14	data -> events |= PURPLE_POUNCE_IDLE
LVAL	39:3	39:3	15	data -> events
FIELD	39:3	39:9	16	data -> events
LEAF_NODE	39:3	39:3	17	data
LEAF_NODE	39:7	39:7	17	->
LEAF_NODE	39:9	39:9	17	events
ASSIGN_OP	39:16	39:16	15	|=
LEAF_NODE	39:16	39:16	16	|=
RVAL	39:19	39:19	15	PURPLE_POUNCE_IDLE
FIELD	39:19	39:19	16	PURPLE_POUNCE_IDLE
LEAF_NODE	39:19	39:19	17	PURPLE_POUNCE_IDLE
LEAF_NODE	39:37	39:37	13	;
SELECTION	40:2	40:7	8	
KEYWORD	40:2	40:2	9	else
LEAF_NODE	40:2	40:2	10	else
STATEMENTS	40:7	40:7	9	
SELECTION	40:7	41:3	10	
KEYWORD	40:7	40:7	11	if
LEAF_NODE	40:7	40:7	12	if
LEAF_NODE	40:10	40:10	11	(
CONDITION	40:11	40:11	11	purple_strequal ( data -> event_type , "return-from-idle" )
EXPR	40:11	40:11	12	purple_strequal ( data -> event_type , "return-from-idle" )
FUNCTION_CALL	40:11	40:63	13	purple_strequal ( data -> event_type , "return-from-idle" )
CALLEE	40:11	40:11	14	purple_strequal
LEAF_NODE	40:11	40:11	15	purple_strequal
LEAF_NODE	40:26	40:26	14	(
ARGUMENT	40:27	40:27	14	data -> event_type
FIELD	40:27	40:33	15	data -> event_type
LEAF_NODE	40:27	40:27	16	data
LEAF_NODE	40:31	40:31	16	->
LEAF_NODE	40:33	40:33	16	event_type
LEAF_NODE	40:43	40:43	14	,
ARGUMENT	40:45	40:45	14	"return-from-idle"
FIELD	40:45	40:45	15	"return-from-idle"
LEAF_NODE	40:45	40:45	16	"return-from-idle"
LEAF_NODE	40:63	40:63	14	)
LEAF_NODE	40:64	40:64	11	)
STATEMENTS	41:3	41:3	11	
EXPR_STATEMENT	41:3	41:44	12	data -> events |= PURPLE_POUNCE_IDLE_RETURN ;
EXPR	41:3	41:3	13	data -> events |= PURPLE_POUNCE_IDLE_RETURN
ASSIGN	41:3	41:19	14	data -> events |= PURPLE_POUNCE_IDLE_RETURN
LVAL	41:3	41:3	15	data -> events
FIELD	41:3	41:9	16	data -> events
LEAF_NODE	41:3	41:3	17	data
LEAF_NODE	41:7	41:7	17	->
LEAF_NODE	41:9	41:9	17	events
ASSIGN_OP	41:16	41:16	15	|=
LEAF_NODE	41:16	41:16	16	|=
RVAL	41:19	41:19	15	PURPLE_POUNCE_IDLE_RETURN
FIELD	41:19	41:19	16	PURPLE_POUNCE_IDLE_RETURN
LEAF_NODE	41:19	41:19	17	PURPLE_POUNCE_IDLE_RETURN
LEAF_NODE	41:44	41:44	13	;
SELECTION	42:2	42:7	8	
KEYWORD	42:2	42:2	9	else
LEAF_NODE	42:2	42:2	10	else
STATEMENTS	42:7	42:7	9	
SELECTION	42:7	43:3	10	
KEYWORD	42:7	42:7	11	if
LEAF_NODE	42:7	42:7	12	if
LEAF_NODE	42:10	42:10	11	(
CONDITION	42:11	42:11	11	purple_strequal ( data -> event_type , "start-typing" )
EXPR	42:11	42:11	12	purple_strequal ( data -> event_type , "start-typing" )
FUNCTION_CALL	42:11	42:59	13	purple_strequal ( data -> event_type , "start-typing" )
CALLEE	42:11	42:11	14	purple_strequal
LEAF_NODE	42:11	42:11	15	purple_strequal
LEAF_NODE	42:26	42:26	14	(
ARGUMENT	42:27	42:27	14	data -> event_type
FIELD	42:27	42:33	15	data -> event_type
LEAF_NODE	42:27	42:27	16	data
LEAF_NODE	42:31	42:31	16	->
LEAF_NODE	42:33	42:33	16	event_type
LEAF_NODE	42:43	42:43	14	,
ARGUMENT	42:45	42:45	14	"start-typing"
FIELD	42:45	42:45	15	"start-typing"
LEAF_NODE	42:45	42:45	16	"start-typing"
LEAF_NODE	42:59	42:59	14	)
LEAF_NODE	42:60	42:60	11	)
STATEMENTS	43:3	43:3	11	
EXPR_STATEMENT	43:3	43:39	12	data -> events |= PURPLE_POUNCE_TYPING ;
EXPR	43:3	43:3	13	data -> events |= PURPLE_POUNCE_TYPING
ASSIGN	43:3	43:19	14	data -> events |= PURPLE_POUNCE_TYPING
LVAL	43:3	43:3	15	data -> events
FIELD	43:3	43:9	16	data -> events
LEAF_NODE	43:3	43:3	17	data
LEAF_NODE	43:7	43:7	17	->
LEAF_NODE	43:9	43:9	17	events
ASSIGN_OP	43:16	43:16	15	|=
LEAF_NODE	43:16	43:16	16	|=
RVAL	43:19	43:19	15	PURPLE_POUNCE_TYPING
FIELD	43:19	43:19	16	PURPLE_POUNCE_TYPING
LEAF_NODE	43:19	43:19	17	PURPLE_POUNCE_TYPING
LEAF_NODE	43:39	43:39	13	;
SELECTION	44:2	44:7	8	
KEYWORD	44:2	44:2	9	else
LEAF_NODE	44:2	44:2	10	else
STATEMENTS	44:7	44:7	9	
SELECTION	44:7	45:3	10	
KEYWORD	44:7	44:7	11	if
LEAF_NODE	44:7	44:7	12	if
LEAF_NODE	44:10	44:10	11	(
CONDITION	44:11	44:11	11	purple_strequal ( data -> event_type , "typed" )
EXPR	44:11	44:11	12	purple_strequal ( data -> event_type , "typed" )
FUNCTION_CALL	44:11	44:52	13	purple_strequal ( data -> event_type , "typed" )
CALLEE	44:11	44:11	14	purple_strequal
LEAF_NODE	44:11	44:11	15	purple_strequal
LEAF_NODE	44:26	44:26	14	(
ARGUMENT	44:27	44:27	14	data -> event_type
FIELD	44:27	44:33	15	data -> event_type
LEAF_NODE	44:27	44:27	16	data
LEAF_NODE	44:31	44:31	16	->
LEAF_NODE	44:33	44:33	16	event_type
LEAF_NODE	44:43	44:43	14	,
ARGUMENT	44:45	44:45	14	"typed"
FIELD	44:45	44:45	15	"typed"
LEAF_NODE	44:45	44:45	16	"typed"
LEAF_NODE	44:52	44:52	14	)
LEAF_NODE	44:53	44:53	11	)
STATEMENTS	45:3	45:3	11	
EXPR_STATEMENT	45:3	45:38	12	data -> events |= PURPLE_POUNCE_TYPED ;
EXPR	45:3	45:3	13	data -> events |= PURPLE_POUNCE_TYPED
ASSIGN	45:3	45:19	14	data -> events |= PURPLE_POUNCE_TYPED
LVAL	45:3	45:3	15	data -> events
FIELD	45:3	45:9	16	data -> events
LEAF_NODE	45:3	45:3	17	data
LEAF_NODE	45:7	45:7	17	->
LEAF_NODE	45:9	45:9	17	events
ASSIGN_OP	45:16	45:16	15	|=
LEAF_NODE	45:16	45:16	16	|=
RVAL	45:19	45:19	15	PURPLE_POUNCE_TYPED
FIELD	45:19	45:19	16	PURPLE_POUNCE_TYPED
LEAF_NODE	45:19	45:19	17	PURPLE_POUNCE_TYPED
LEAF_NODE	45:38	45:38	13	;
SELECTION	46:2	46:7	8	
KEYWORD	46:2	46:2	9	else
LEAF_NODE	46:2	46:2	10	else
STATEMENTS	46:7	46:7	9	
SELECTION	46:7	47:3	10	
KEYWORD	46:7	46:7	11	if
LEAF_NODE	46:7	46:7	12	if
LEAF_NODE	46:10	46:10	11	(
CONDITION	46:11	46:11	11	purple_strequal ( data -> event_type , "stop-typing" )
EXPR	46:11	46:11	12	purple_strequal ( data -> event_type , "stop-typing" )
FUNCTION_CALL	46:11	46:58	13	purple_strequal ( data -> event_type , "stop-typing" )
CALLEE	46:11	46:11	14	purple_strequal
LEAF_NODE	46:11	46:11	15	purple_strequal
LEAF_NODE	46:26	46:26	14	(
ARGUMENT	46:27	46:27	14	data -> event_type
FIELD	46:27	46:33	15	data -> event_type
LEAF_NODE	46:27	46:27	16	data
LEAF_NODE	46:31	46:31	16	->
LEAF_NODE	46:33	46:33	16	event_type
LEAF_NODE	46:43	46:43	14	,
ARGUMENT	46:45	46:45	14	"stop-typing"
FIELD	46:45	46:45	15	"stop-typing"
LEAF_NODE	46:45	46:45	16	"stop-typing"
LEAF_NODE	46:58	46:58	14	)
LEAF_NODE	46:59	46:59	11	)
STATEMENTS	47:3	47:3	11	
EXPR_STATEMENT	47:3	47:47	12	data -> events |= PURPLE_POUNCE_TYPING_STOPPED ;
EXPR	47:3	47:3	13	data -> events |= PURPLE_POUNCE_TYPING_STOPPED
ASSIGN	47:3	47:19	14	data -> events |= PURPLE_POUNCE_TYPING_STOPPED
LVAL	47:3	47:3	15	data -> events
FIELD	47:3	47:9	16	data -> events
LEAF_NODE	47:3	47:3	17	data
LEAF_NODE	47:7	47:7	17	->
LEAF_NODE	47:9	47:9	17	events
ASSIGN_OP	47:16	47:16	15	|=
LEAF_NODE	47:16	47:16	16	|=
RVAL	47:19	47:19	15	PURPLE_POUNCE_TYPING_STOPPED
FIELD	47:19	47:19	16	PURPLE_POUNCE_TYPING_STOPPED
LEAF_NODE	47:19	47:19	17	PURPLE_POUNCE_TYPING_STOPPED
LEAF_NODE	47:47	47:47	13	;
SELECTION	48:2	48:7	8	
KEYWORD	48:2	48:2	9	else
LEAF_NODE	48:2	48:2	10	else
STATEMENTS	48:7	48:7	9	
SELECTION	48:7	49:3	10	
KEYWORD	48:7	48:7	11	if
LEAF_NODE	48:7	48:7	12	if
LEAF_NODE	48:10	48:10	11	(
CONDITION	48:11	48:11	11	purple_strequal ( data -> event_type , "message-received" )
EXPR	48:11	48:11	12	purple_strequal ( data -> event_type , "message-received" )
FUNCTION_CALL	48:11	48:63	13	purple_strequal ( data -> event_type , "message-received" )
CALLEE	48:11	48:11	14	purple_strequal
LEAF_NODE	48:11	48:11	15	purple_strequal
LEAF_NODE	48:26	48:26	14	(
ARGUMENT	48:27	48:27	14	data -> event_type
FIELD	48:27	48:33	15	data -> event_type
LEAF_NODE	48:27	48:27	16	data
LEAF_NODE	48:31	48:31	16	->
LEAF_NODE	48:33	48:33	16	event_type
LEAF_NODE	48:43	48:43	14	,
ARGUMENT	48:45	48:45	14	"message-received"
FIELD	48:45	48:45	15	"message-received"
LEAF_NODE	48:45	48:45	16	"message-received"
LEAF_NODE	48:63	48:63	14	)
LEAF_NODE	48:64	48:64	11	)
STATEMENTS	49:3	49:3	11	
EXPR_STATEMENT	49:3	49:49	12	data -> events |= PURPLE_POUNCE_MESSAGE_RECEIVED ;
EXPR	49:3	49:3	13	data -> events |= PURPLE_POUNCE_MESSAGE_RECEIVED
ASSIGN	49:3	49:19	14	data -> events |= PURPLE_POUNCE_MESSAGE_RECEIVED
LVAL	49:3	49:3	15	data -> events
FIELD	49:3	49:9	16	data -> events
LEAF_NODE	49:3	49:3	17	data
LEAF_NODE	49:7	49:7	17	->
LEAF_NODE	49:9	49:9	17	events
ASSIGN_OP	49:16	49:16	15	|=
LEAF_NODE	49:16	49:16	16	|=
RVAL	49:19	49:19	15	PURPLE_POUNCE_MESSAGE_RECEIVED
FIELD	49:19	49:19	16	PURPLE_POUNCE_MESSAGE_RECEIVED
LEAF_NODE	49:19	49:19	17	PURPLE_POUNCE_MESSAGE_RECEIVED
LEAF_NODE	49:49	49:49	13	;
EXPR_STATEMENT	50:2	50:26	8	g_free ( data -> event_type ) ;
EXPR	50:2	50:2	9	g_free ( data -> event_type )
FUNCTION_CALL	50:2	50:25	10	g_free ( data -> event_type )
CALLEE	50:2	50:2	11	g_free
LEAF_NODE	50:2	50:2	12	g_free
LEAF_NODE	50:8	50:8	11	(
ARGUMENT	50:9	50:9	11	data -> event_type
FIELD	50:9	50:15	12	data -> event_type
LEAF_NODE	50:9	50:9	13	data
LEAF_NODE	50:13	50:13	13	->
LEAF_NODE	50:15	50:15	13	event_type
LEAF_NODE	50:25	50:25	11	)
LEAF_NODE	50:26	50:26	9	;
EXPR_STATEMENT	51:2	51:25	8	data -> event_type = NULL ;
EXPR	51:2	51:2	9	data -> event_type = NULL
ASSIGN	51:2	51:21	10	data -> event_type = NULL
LVAL	51:2	51:2	11	data -> event_type
FIELD	51:2	51:8	12	data -> event_type
LEAF_NODE	51:2	51:2	13	data
LEAF_NODE	51:6	51:6	13	->
LEAF_NODE	51:8	51:8	13	event_type
ASSIGN_OP	51:19	51:19	11	=
LEAF_NODE	51:19	51:19	12	=
RVAL	51:21	51:21	11	NULL
FIELD	51:21	51:21	12	NULL
LEAF_NODE	51:21	51:21	13	NULL
LEAF_NODE	51:25	51:25	9	;
LEAF_NODE	52:1	52:1	7	}
SELECTION	53:1	53:6	3	
KEYWORD	53:1	53:1	4	else
LEAF_NODE	53:1	53:1	5	else
STATEMENTS	53:6	53:6	4	
SELECTION	53:6	53:51	5	
KEYWORD	53:6	53:6	6	if
LEAF_NODE	53:6	53:6	7	if
LEAF_NODE	53:9	53:9	6	(
CONDITION	53:10	53:10	6	purple_strequal ( element_name , "action" )
EXPR	53:10	53:10	7	purple_strequal ( element_name , "action" )
FUNCTION_CALL	53:10	53:48	8	purple_strequal ( element_name , "action" )
CALLEE	53:10	53:10	9	purple_strequal
LEAF_NODE	53:10	53:10	10	purple_strequal
LEAF_NODE	53:25	53:25	9	(
ARGUMENT	53:26	53:26	9	element_name
FIELD	53:26	53:26	10	element_name
LEAF_NODE	53:26	53:26	11	element_name
LEAF_NODE	53:38	53:38	9	,
ARGUMENT	53:40	53:40	9	"action"
FIELD	53:40	53:40	10	"action"
LEAF_NODE	53:40	53:40	11	"action"
LEAF_NODE	53:48	53:48	9	)
LEAF_NODE	53:49	53:49	6	)
STATEMENTS	53:51	60:1	6	
LEAF_NODE	53:51	53:51	7	{
STATEMENTS	54:2	59:2	7	
SELECTION	54:2	54:28	8	
KEYWORD	54:2	54:2	9	if
LEAF_NODE	54:2	54:2	10	if
LEAF_NODE	54:5	54:5	9	(
CONDITION	54:6	54:6	9	data -> pounce != NULL
EXPR	54:6	54:22	10	data -> pounce != NULL
FIELD	54:6	54:12	11	data -> pounce
LEAF_NODE	54:6	54:6	12	data
LEAF_NODE	54:10	54:10	12	->
LEAF_NODE	54:12	54:12	12	pounce
EQ_OPERATOR	54:19	54:19	11	!=
LEAF_NODE	54:19	54:19	12	!=
FIELD	54:22	54:22	11	NULL
LEAF_NODE	54:22	54:22	12	NULL
LEAF_NODE	54:26	54:26	9	)
STATEMENTS	54:28	57:2	9	
LEAF_NODE	54:28	54:28	10	{
STATEMENTS	55:3	56:3	10	
EXPR_STATEMENT	55:3	55:65	11	purple_pounce_action_register ( data -> pounce , data -> action_name ) ;
EXPR	55:3	55:3	12	purple_pounce_action_register ( data -> pounce , data -> action_name )
FUNCTION_CALL	55:3	55:64	13	purple_pounce_action_register ( data -> pounce , data -> action_name )
CALLEE	55:3	55:3	14	purple_pounce_action_register
LEAF_NODE	55:3	55:3	15	purple_pounce_action_register
LEAF_NODE	55:32	55:32	14	(
ARGUMENT	55:33	55:33	14	data -> pounce
FIELD	55:33	55:39	15	data -> pounce
LEAF_NODE	55:33	55:33	16	data
LEAF_NODE	55:37	55:37	16	->
LEAF_NODE	55:39	55:39	16	pounce
LEAF_NODE	55:45	55:45	14	,
ARGUMENT	55:47	55:47	14	data -> action_name
FIELD	55:47	55:53	15	data -> action_name
LEAF_NODE	55:47	55:47	16	data
LEAF_NODE	55:51	55:51	16	->
LEAF_NODE	55:53	55:53	16	action_name
LEAF_NODE	55:64	55:64	14	)
LEAF_NODE	55:65	55:65	12	;
EXPR_STATEMENT	56:3	56:74	11	purple_pounce_action_set_enabled ( data -> pounce , data -> action_name , TRUE ) ;
EXPR	56:3	56:3	12	purple_pounce_action_set_enabled ( data -> pounce , data -> action_name , TRUE )
FUNCTION_CALL	56:3	56:73	13	purple_pounce_action_set_enabled ( data -> pounce , data -> action_name , TRUE )
CALLEE	56:3	56:3	14	purple_pounce_action_set_enabled
LEAF_NODE	56:3	56:3	15	purple_pounce_action_set_enabled
LEAF_NODE	56:35	56:35	14	(
ARGUMENT	56:36	56:36	14	data -> pounce
FIELD	56:36	56:42	15	data -> pounce
LEAF_NODE	56:36	56:36	16	data
LEAF_NODE	56:40	56:40	16	->
LEAF_NODE	56:42	56:42	16	pounce
LEAF_NODE	56:48	56:48	14	,
ARGUMENT	56:50	56:50	14	data -> action_name
FIELD	56:50	56:56	15	data -> action_name
LEAF_NODE	56:50	56:50	16	data
LEAF_NODE	56:54	56:54	16	->
LEAF_NODE	56:56	56:56	16	action_name
LEAF_NODE	56:67	56:67	14	,
ARGUMENT	56:69	56:69	14	TRUE
FIELD	56:69	56:69	15	TRUE
LEAF_NODE	56:69	56:69	16	TRUE
LEAF_NODE	56:73	56:73	14	)
LEAF_NODE	56:74	56:74	12	;
LEAF_NODE	57:2	57:2	10	}
EXPR_STATEMENT	58:2	58:27	8	g_free ( data -> action_name ) ;
EXPR	58:2	58:2	9	g_free ( data -> action_name )
FUNCTION_CALL	58:2	58:26	10	g_free ( data -> action_name )
CALLEE	58:2	58:2	11	g_free
LEAF_NODE	58:2	58:2	12	g_free
LEAF_NODE	58:8	58:8	11	(
ARGUMENT	58:9	58:9	11	data -> action_name
FIELD	58:9	58:15	12	data -> action_name
LEAF_NODE	58:9	58:9	13	data
LEAF_NODE	58:13	58:13	13	->
LEAF_NODE	58:15	58:15	13	action_name
LEAF_NODE	58:26	58:26	11	)
LEAF_NODE	58:27	58:27	9	;
EXPR_STATEMENT	59:2	59:26	8	data -> action_name = NULL ;
EXPR	59:2	59:2	9	data -> action_name = NULL
ASSIGN	59:2	59:22	10	data -> action_name = NULL
LVAL	59:2	59:2	11	data -> action_name
FIELD	59:2	59:8	12	data -> action_name
LEAF_NODE	59:2	59:2	13	data
LEAF_NODE	59:6	59:6	13	->
LEAF_NODE	59:8	59:8	13	action_name
ASSIGN_OP	59:20	59:20	11	=
LEAF_NODE	59:20	59:20	12	=
RVAL	59:22	59:22	11	NULL
FIELD	59:22	59:22	12	NULL
LEAF_NODE	59:22	59:22	13	NULL
LEAF_NODE	59:26	59:26	9	;
LEAF_NODE	60:1	60:1	7	}
SELECTION	61:1	61:6	3	
KEYWORD	61:1	61:1	4	else
LEAF_NODE	61:1	61:1	5	else
STATEMENTS	61:6	61:6	4	
SELECTION	61:6	61:50	5	
KEYWORD	61:6	61:6	6	if
LEAF_NODE	61:6	61:6	7	if
LEAF_NODE	61:9	61:9	6	(
CONDITION	61:10	61:10	6	purple_strequal ( element_name , "param" )
EXPR	61:10	61:10	7	purple_strequal ( element_name , "param" )
FUNCTION_CALL	61:10	61:47	8	purple_strequal ( element_name , "param" )
CALLEE	61:10	61:10	9	purple_strequal
LEAF_NODE	61:10	61:10	10	purple_strequal
LEAF_NODE	61:25	61:25	9	(
ARGUMENT	61:26	61:26	9	element_name
FIELD	61:26	61:26	10	element_name
LEAF_NODE	61:26	61:26	11	element_name
LEAF_NODE	61:38	61:38	9	,
ARGUMENT	61:40	61:40	9	"param"
FIELD	61:40	61:40	10	"param"
LEAF_NODE	61:40	61:40	11	"param"
LEAF_NODE	61:47	61:47	9	)
LEAF_NODE	61:48	61:48	6	)
STATEMENTS	61:50	68:1	6	
LEAF_NODE	61:50	61:50	7	{
STATEMENTS	62:2	67:2	7	
SELECTION	62:2	62:28	8	
KEYWORD	62:2	62:2	9	if
LEAF_NODE	62:2	62:2	10	if
LEAF_NODE	62:5	62:5	9	(
CONDITION	62:6	62:6	9	data -> pounce != NULL
EXPR	62:6	62:22	10	data -> pounce != NULL
FIELD	62:6	62:12	11	data -> pounce
LEAF_NODE	62:6	62:6	12	data
LEAF_NODE	62:10	62:10	12	->
LEAF_NODE	62:12	62:12	12	pounce
EQ_OPERATOR	62:19	62:19	11	!=
LEAF_NODE	62:19	62:19	12	!=
FIELD	62:22	62:22	11	NULL
LEAF_NODE	62:22	62:22	12	NULL
LEAF_NODE	62:26	62:26	9	)
STATEMENTS	62:28	65:2	9	
LEAF_NODE	62:28	62:28	10	{
STATEMENTS	63:3	63:3	10	
EXPR_STATEMENT	63:3	64:37	11	purple_pounce_action_set_attribute ( data -> pounce , data -> action_name , data -> param_name , buffer ) ;
EXPR	63:3	63:3	12	purple_pounce_action_set_attribute ( data -> pounce , data -> action_name , data -> param_name , buffer )
FUNCTION_CALL	63:3	64:36	13	purple_pounce_action_set_attribute ( data -> pounce , data -> action_name , data -> param_name , buffer )
CALLEE	63:3	63:3	14	purple_pounce_action_set_attribute
LEAF_NODE	63:3	63:3	15	purple_pounce_action_set_attribute
LEAF_NODE	63:37	63:37	14	(
ARGUMENT	63:38	63:38	14	data -> pounce
FIELD	63:38	63:44	15	data -> pounce
LEAF_NODE	63:38	63:38	16	data
LEAF_NODE	63:42	63:42	16	->
LEAF_NODE	63:44	63:44	16	pounce
LEAF_NODE	63:50	63:50	14	,
ARGUMENT	63:52	63:52	14	data -> action_name
FIELD	63:52	63:58	15	data -> action_name
LEAF_NODE	63:52	63:52	16	data
LEAF_NODE	63:56	63:56	16	->
LEAF_NODE	63:58	63:58	16	action_name
LEAF_NODE	63:69	63:69	14	,
ARGUMENT	64:12	64:12	14	data -> param_name
FIELD	64:12	64:18	15	data -> param_name
LEAF_NODE	64:12	64:12	16	data
LEAF_NODE	64:16	64:16	16	->
LEAF_NODE	64:18	64:18	16	param_name
LEAF_NODE	64:28	64:28	14	,
ARGUMENT	64:30	64:30	14	buffer
FIELD	64:30	64:30	15	buffer
LEAF_NODE	64:30	64:30	16	buffer
LEAF_NODE	64:36	64:36	14	)
LEAF_NODE	64:37	64:37	12	;
LEAF_NODE	65:2	65:2	10	}
EXPR_STATEMENT	66:2	66:26	8	g_free ( data -> param_name ) ;
EXPR	66:2	66:2	9	g_free ( data -> param_name )
FUNCTION_CALL	66:2	66:25	10	g_free ( data -> param_name )
CALLEE	66:2	66:2	11	g_free
LEAF_NODE	66:2	66:2	12	g_free
LEAF_NODE	66:8	66:8	11	(
ARGUMENT	66:9	66:9	11	data -> param_name
FIELD	66:9	66:15	12	data -> param_name
LEAF_NODE	66:9	66:9	13	data
LEAF_NODE	66:13	66:13	13	->
LEAF_NODE	66:15	66:15	13	param_name
LEAF_NODE	66:25	66:25	11	)
LEAF_NODE	66:26	66:26	9	;
EXPR_STATEMENT	67:2	67:25	8	data -> param_name = NULL ;
EXPR	67:2	67:2	9	data -> param_name = NULL
ASSIGN	67:2	67:21	10	data -> param_name = NULL
LVAL	67:2	67:2	11	data -> param_name
FIELD	67:2	67:8	12	data -> param_name
LEAF_NODE	67:2	67:2	13	data
LEAF_NODE	67:6	67:6	13	->
LEAF_NODE	67:8	67:8	13	param_name
ASSIGN_OP	67:19	67:19	11	=
LEAF_NODE	67:19	67:19	12	=
RVAL	67:21	67:21	11	NULL
FIELD	67:21	67:21	12	NULL
LEAF_NODE	67:21	67:21	13	NULL
LEAF_NODE	67:25	67:25	9	;
LEAF_NODE	68:1	68:1	7	}
SELECTION	69:1	69:6	3	
KEYWORD	69:1	69:1	4	else
LEAF_NODE	69:1	69:1	5	else
STATEMENTS	69:6	69:6	4	
SELECTION	69:6	69:51	5	
KEYWORD	69:6	69:6	6	if
LEAF_NODE	69:6	69:6	7	if
LEAF_NODE	69:9	69:9	6	(
CONDITION	69:10	69:10	6	purple_strequal ( element_name , "events" )
EXPR	69:10	69:10	7	purple_strequal ( element_name , "events" )
FUNCTION_CALL	69:10	69:48	8	purple_strequal ( element_name , "events" )
CALLEE	69:10	69:10	9	purple_strequal
LEAF_NODE	69:10	69:10	10	purple_strequal
LEAF_NODE	69:25	69:25	9	(
ARGUMENT	69:26	69:26	9	element_name
FIELD	69:26	69:26	10	element_name
LEAF_NODE	69:26	69:26	11	element_name
LEAF_NODE	69:38	69:38	9	,
ARGUMENT	69:40	69:40	9	"events"
FIELD	69:40	69:40	10	"events"
LEAF_NODE	69:40	69:40	11	"events"
LEAF_NODE	69:48	69:48	9	)
LEAF_NODE	69:49	69:49	6	)
STATEMENTS	69:51	95:1	6	
LEAF_NODE	69:51	69:51	7	{
STATEMENTS	70:2	94:2	7	
SIMPLE_DECL	70:2	70:24	8	PurpleAccount * account ;
VAR_DECL	70:2	70:17	9	PurpleAccount * account
TYPE	70:2	70:16	10	PurpleAccount *
TYPE_NAME	70:2	70:2	11	PurpleAccount
LEAF_NODE	70:2	70:2	12	PurpleAccount
POINTER	70:16	70:16	11	*
LEAF_NODE	70:16	70:16	12	*
NAME	70:17	70:17	10	account
LEAF_NODE	70:17	70:17	11	account
LEAF_NODE	70:24	70:24	9	;
EXPR_STATEMENT	71:2	71:71	8	account = purple_accounts_find ( data -> account_name , data -> protocol_id ) ;
EXPR	71:2	71:2	9	account = purple_accounts_find ( data -> account_name , data -> protocol_id )
ASSIGN	71:2	71:12	10	account = purple_accounts_find ( data -> account_name , data -> protocol_id )
LVAL	71:2	71:2	11	account
FIELD	71:2	71:2	12	account
LEAF_NODE	71:2	71:2	13	account
ASSIGN_OP	71:10	71:10	11	=
LEAF_NODE	71:10	71:10	12	=
RVAL	71:12	71:12	11	purple_accounts_find ( data -> account_name , data -> protocol_id )
FUNCTION_CALL	71:12	71:70	12	purple_accounts_find ( data -> account_name , data -> protocol_id )
CALLEE	71:12	71:12	13	purple_accounts_find
LEAF_NODE	71:12	71:12	14	purple_accounts_find
LEAF_NODE	71:32	71:32	13	(
ARGUMENT	71:33	71:33	13	data -> account_name
FIELD	71:33	71:39	14	data -> account_name
LEAF_NODE	71:33	71:33	15	data
LEAF_NODE	71:37	71:37	15	->
LEAF_NODE	71:39	71:39	15	account_name
LEAF_NODE	71:51	71:51	13	,
ARGUMENT	71:53	71:53	13	data -> protocol_id
FIELD	71:53	71:59	14	data -> protocol_id
LEAF_NODE	71:53	71:53	15	data
LEAF_NODE	71:57	71:57	15	->
LEAF_NODE	71:59	71:59	15	protocol_id
LEAF_NODE	71:70	71:70	13	)
LEAF_NODE	71:71	71:71	9	;
EXPR_STATEMENT	72:2	72:28	8	g_free ( data -> account_name ) ;
EXPR	72:2	72:2	9	g_free ( data -> account_name )
FUNCTION_CALL	72:2	72:27	10	g_free ( data -> account_name )
CALLEE	72:2	72:2	11	g_free
LEAF_NODE	72:2	72:2	12	g_free
LEAF_NODE	72:8	72:8	11	(
ARGUMENT	72:9	72:9	11	data -> account_name
FIELD	72:9	72:15	12	data -> account_name
LEAF_NODE	72:9	72:9	13	data
LEAF_NODE	72:13	72:13	13	->
LEAF_NODE	72:15	72:15	13	account_name
LEAF_NODE	72:27	72:27	11	)
LEAF_NODE	72:28	72:28	9	;
EXPR_STATEMENT	73:2	73:27	8	g_free ( data -> protocol_id ) ;
EXPR	73:2	73:2	9	g_free ( data -> protocol_id )
FUNCTION_CALL	73:2	73:26	10	g_free ( data -> protocol_id )
CALLEE	73:2	73:2	11	g_free
LEAF_NODE	73:2	73:2	12	g_free
LEAF_NODE	73:8	73:8	11	(
ARGUMENT	73:9	73:9	11	data -> protocol_id
FIELD	73:9	73:15	12	data -> protocol_id
LEAF_NODE	73:9	73:9	13	data
LEAF_NODE	73:13	73:13	13	->
LEAF_NODE	73:15	73:15	13	protocol_id
LEAF_NODE	73:26	73:26	11	)
LEAF_NODE	73:27	73:27	9	;
EXPR_STATEMENT	74:2	74:27	8	data -> account_name = NULL ;
EXPR	74:2	74:2	9	data -> account_name = NULL
ASSIGN	74:2	74:23	10	data -> account_name = NULL
LVAL	74:2	74:2	11	data -> account_name
FIELD	74:2	74:8	12	data -> account_name
LEAF_NODE	74:2	74:2	13	data
LEAF_NODE	74:6	74:6	13	->
LEAF_NODE	74:8	74:8	13	account_name
ASSIGN_OP	74:21	74:21	11	=
LEAF_NODE	74:21	74:21	12	=
RVAL	74:23	74:23	11	NULL
FIELD	74:23	74:23	12	NULL
LEAF_NODE	74:23	74:23	13	NULL
LEAF_NODE	74:27	74:27	9	;
EXPR_STATEMENT	75:2	75:27	8	data -> protocol_id = NULL ;
EXPR	75:2	75:2	9	data -> protocol_id = NULL
ASSIGN	75:2	75:23	10	data -> protocol_id = NULL
LVAL	75:2	75:2	11	data -> protocol_id
FIELD	75:2	75:8	12	data -> protocol_id
LEAF_NODE	75:2	75:2	13	data
LEAF_NODE	75:6	75:6	13	->
LEAF_NODE	75:8	75:8	13	protocol_id
ASSIGN_OP	75:21	75:21	11	=
LEAF_NODE	75:21	75:21	12	=
RVAL	75:23	75:23	11	NULL
FIELD	75:23	75:23	12	NULL
LEAF_NODE	75:23	75:23	13	NULL
LEAF_NODE	75:27	75:27	9	;
SELECTION	76:2	76:23	8	
KEYWORD	76:2	76:2	9	if
LEAF_NODE	76:2	76:2	10	if
LEAF_NODE	76:5	76:5	9	(
CONDITION	76:6	76:6	9	account == NULL
EXPR	76:6	76:17	10	account == NULL
FIELD	76:6	76:6	11	account
LEAF_NODE	76:6	76:6	12	account
EQ_OPERATOR	76:14	76:14	11	==
LEAF_NODE	76:14	76:14	12	==
FIELD	76:17	76:17	11	NULL
LEAF_NODE	76:17	76:17	12	NULL
LEAF_NODE	76:21	76:21	9	)
STATEMENTS	76:23	84:2	9	
LEAF_NODE	76:23	76:23	10	{
STATEMENTS	77:3	83:3	10	
EXPR_STATEMENT	77:3	78:42	11	purple_debug ( PURPLE_DEBUG_ERROR , "pounce" , "Account for pounce not found!\n" ) ;
EXPR	77:3	77:3	12	purple_debug ( PURPLE_DEBUG_ERROR , "pounce" , "Account for pounce not found!\n" )
FUNCTION_CALL	77:3	78:41	13	purple_debug ( PURPLE_DEBUG_ERROR , "pounce" , "Account for pounce not found!\n" )
CALLEE	77:3	77:3	14	purple_debug
LEAF_NODE	77:3	77:3	15	purple_debug
LEAF_NODE	77:15	77:15	14	(
ARGUMENT	77:16	77:16	14	PURPLE_DEBUG_ERROR
FIELD	77:16	77:16	15	PURPLE_DEBUG_ERROR
LEAF_NODE	77:16	77:16	16	PURPLE_DEBUG_ERROR
LEAF_NODE	77:34	77:34	14	,
ARGUMENT	77:36	77:36	14	"pounce"
FIELD	77:36	77:36	15	"pounce"
LEAF_NODE	77:36	77:36	16	"pounce"
LEAF_NODE	77:44	77:44	14	,
ARGUMENT	78:8	78:8	14	"Account for pounce not found!\n"
FIELD	78:8	78:8	15	"Account for pounce not found!\n"
LEAF_NODE	78:8	78:8	16	"Account for pounce not found!\n"
LEAF_NODE	78:41	78:41	14	)
LEAF_NODE	78:42	78:42	12	;
EXPR_STATEMENT	83:3	83:26	11	schedule_pounces_save ( ) ;
EXPR	83:3	83:3	12	schedule_pounces_save ( )
FUNCTION_CALL	83:3	83:25	13	schedule_pounces_save ( )
CALLEE	83:3	83:3	14	schedule_pounces_save
LEAF_NODE	83:3	83:3	15	schedule_pounces_save
LEAF_NODE	83:24	83:24	14	(
LEAF_NODE	83:25	83:25	14	)
LEAF_NODE	83:26	83:26	12	;
LEAF_NODE	84:2	84:2	10	}
SELECTION	85:2	85:7	8	
KEYWORD	85:2	85:2	9	else
LEAF_NODE	85:2	85:2	10	else
STATEMENTS	85:7	92:2	9	
LEAF_NODE	85:7	85:7	10	{
STATEMENTS	86:3	89:3	10	
EXPR_STATEMENT	86:3	88:22	11	purple_debug ( PURPLE_DEBUG_INFO , "pounce" , "Creating pounce: %s, %s\n" , data -> ui_name , data -> pouncee ) ;
EXPR	86:3	86:3	12	purple_debug ( PURPLE_DEBUG_INFO , "pounce" , "Creating pounce: %s, %s\n" , data -> ui_name , data -> pouncee )
FUNCTION_CALL	86:3	88:21	13	purple_debug ( PURPLE_DEBUG_INFO , "pounce" , "Creating pounce: %s, %s\n" , data -> ui_name , data -> pouncee )
CALLEE	86:3	86:3	14	purple_debug
LEAF_NODE	86:3	86:3	15	purple_debug
LEAF_NODE	86:15	86:15	14	(
ARGUMENT	86:16	86:16	14	PURPLE_DEBUG_INFO
FIELD	86:16	86:16	15	PURPLE_DEBUG_INFO
LEAF_NODE	86:16	86:16	16	PURPLE_DEBUG_INFO
LEAF_NODE	86:33	86:33	14	,
ARGUMENT	86:35	86:35	14	"pounce"
FIELD	86:35	86:35	15	"pounce"
LEAF_NODE	86:35	86:35	16	"pounce"
LEAF_NODE	86:43	86:43	14	,
ARGUMENT	87:8	87:8	14	"Creating pounce: %s, %s\n"
FIELD	87:8	87:8	15	"Creating pounce: %s, %s\n"
LEAF_NODE	87:8	87:8	16	"Creating pounce: %s, %s\n"
LEAF_NODE	87:35	87:35	14	,
ARGUMENT	87:37	87:37	14	data -> ui_name
FIELD	87:37	87:43	15	data -> ui_name
LEAF_NODE	87:37	87:37	16	data
LEAF_NODE	87:41	87:41	16	->
LEAF_NODE	87:43	87:43	16	ui_name
LEAF_NODE	87:50	87:50	14	,
ARGUMENT	88:8	88:8	14	data -> pouncee
FIELD	88:8	88:14	15	data -> pouncee
LEAF_NODE	88:8	88:8	16	data
LEAF_NODE	88:12	88:12	16	->
LEAF_NODE	88:14	88:14	16	pouncee
LEAF_NODE	88:21	88:21	14	)
LEAF_NODE	88:22	88:22	12	;
EXPR_STATEMENT	89:3	91:27	11	data -> pounce = purple_pounce_new ( data -> ui_name , account , data -> pouncee , data -> events , data -> options ) ;
EXPR	89:3	89:3	12	data -> pounce = purple_pounce_new ( data -> ui_name , account , data -> pouncee , data -> events , data -> options )
ASSIGN	89:3	89:18	13	data -> pounce = purple_pounce_new ( data -> ui_name , account , data -> pouncee , data -> events , data -> options )
LVAL	89:3	89:3	14	data -> pounce
FIELD	89:3	89:9	15	data -> pounce
LEAF_NODE	89:3	89:3	16	data
LEAF_NODE	89:7	89:7	16	->
LEAF_NODE	89:9	89:9	16	pounce
ASSIGN_OP	89:16	89:16	14	=
LEAF_NODE	89:16	89:16	15	=
RVAL	89:18	89:18	14	purple_pounce_new ( data -> ui_name , account , data -> pouncee , data -> events , data -> options )
FUNCTION_CALL	89:18	91:26	15	purple_pounce_new ( data -> ui_name , account , data -> pouncee , data -> events , data -> options )
CALLEE	89:18	89:18	16	purple_pounce_new
LEAF_NODE	89:18	89:18	17	purple_pounce_new
LEAF_NODE	89:35	89:35	16	(
ARGUMENT	89:36	89:36	16	data -> ui_name
FIELD	89:36	89:42	17	data -> ui_name
LEAF_NODE	89:36	89:36	18	data
LEAF_NODE	89:40	89:40	18	->
LEAF_NODE	89:42	89:42	18	ui_name
LEAF_NODE	89:49	89:49	16	,
ARGUMENT	89:51	89:51	16	account
FIELD	89:51	89:51	17	account
LEAF_NODE	89:51	89:51	18	account
LEAF_NODE	89:58	89:58	16	,
ARGUMENT	90:13	90:13	16	data -> pouncee
FIELD	90:13	90:19	17	data -> pouncee
LEAF_NODE	90:13	90:13	18	data
LEAF_NODE	90:17	90:17	18	->
LEAF_NODE	90:19	90:19	18	pouncee
LEAF_NODE	90:26	90:26	16	,
ARGUMENT	90:28	90:28	16	data -> events
FIELD	90:28	90:34	17	data -> events
LEAF_NODE	90:28	90:28	18	data
LEAF_NODE	90:32	90:32	18	->
LEAF_NODE	90:34	90:34	18	events
LEAF_NODE	90:40	90:40	16	,
ARGUMENT	91:13	91:13	16	data -> options
FIELD	91:13	91:19	17	data -> options
LEAF_NODE	91:13	91:13	18	data
LEAF_NODE	91:17	91:17	18	->
LEAF_NODE	91:19	91:19	18	options
LEAF_NODE	91:26	91:26	16	)
LEAF_NODE	91:27	91:27	12	;
LEAF_NODE	92:2	92:2	10	}
EXPR_STATEMENT	93:2	93:23	8	g_free ( data -> pouncee ) ;
EXPR	93:2	93:2	9	g_free ( data -> pouncee )
FUNCTION_CALL	93:2	93:22	10	g_free ( data -> pouncee )
CALLEE	93:2	93:2	11	g_free
LEAF_NODE	93:2	93:2	12	g_free
LEAF_NODE	93:8	93:8	11	(
ARGUMENT	93:9	93:9	11	data -> pouncee
FIELD	93:9	93:15	12	data -> pouncee
LEAF_NODE	93:9	93:9	13	data
LEAF_NODE	93:13	93:13	13	->
LEAF_NODE	93:15	93:15	13	pouncee
LEAF_NODE	93:22	93:22	11	)
LEAF_NODE	93:23	93:23	9	;
EXPR_STATEMENT	94:2	94:22	8	data -> pouncee = NULL ;
EXPR	94:2	94:2	9	data -> pouncee = NULL
ASSIGN	94:2	94:18	10	data -> pouncee = NULL
LVAL	94:2	94:2	11	data -> pouncee
FIELD	94:2	94:8	12	data -> pouncee
LEAF_NODE	94:2	94:2	13	data
LEAF_NODE	94:6	94:6	13	->
LEAF_NODE	94:8	94:8	13	pouncee
ASSIGN_OP	94:16	94:16	11	=
LEAF_NODE	94:16	94:16	12	=
RVAL	94:18	94:18	11	NULL
FIELD	94:18	94:18	12	NULL
LEAF_NODE	94:18	94:18	13	NULL
LEAF_NODE	94:22	94:22	9	;
LEAF_NODE	95:1	95:1	7	}
SELECTION	96:1	96:6	3	
KEYWORD	96:1	96:1	4	else
LEAF_NODE	96:1	96:1	5	else
STATEMENTS	96:6	96:6	4	
SELECTION	96:6	96:49	5	
KEYWORD	96:6	96:6	6	if
LEAF_NODE	96:6	96:6	7	if
LEAF_NODE	96:9	96:9	6	(
CONDITION	96:10	96:10	6	purple_strequal ( element_name , "save" )
EXPR	96:10	96:10	7	purple_strequal ( element_name , "save" )
FUNCTION_CALL	96:10	96:46	8	purple_strequal ( element_name , "save" )
CALLEE	96:10	96:10	9	purple_strequal
LEAF_NODE	96:10	96:10	10	purple_strequal
LEAF_NODE	96:25	96:25	9	(
ARGUMENT	96:26	96:26	9	element_name
FIELD	96:26	96:26	10	element_name
LEAF_NODE	96:26	96:26	11	element_name
LEAF_NODE	96:38	96:38	9	,
ARGUMENT	96:40	96:40	9	"save"
FIELD	96:40	96:40	10	"save"
LEAF_NODE	96:40	96:40	11	"save"
LEAF_NODE	96:46	96:46	9	)
LEAF_NODE	96:47	96:47	6	)
STATEMENTS	96:49	99:1	6	
LEAF_NODE	96:49	96:49	7	{
STATEMENTS	97:2	97:2	7	
SELECTION	97:2	98:3	8	
KEYWORD	97:2	97:2	9	if
LEAF_NODE	97:2	97:2	10	if
LEAF_NODE	97:5	97:5	9	(
CONDITION	97:6	97:6	9	data -> pounce != NULL
EXPR	97:6	97:22	10	data -> pounce != NULL
FIELD	97:6	97:12	11	data -> pounce
LEAF_NODE	97:6	97:6	12	data
LEAF_NODE	97:10	97:10	12	->
LEAF_NODE	97:12	97:12	12	pounce
EQ_OPERATOR	97:19	97:19	11	!=
LEAF_NODE	97:19	97:19	12	!=
FIELD	97:22	97:22	11	NULL
LEAF_NODE	97:22	97:22	12	NULL
LEAF_NODE	97:26	97:26	9	)
STATEMENTS	98:3	98:3	9	
EXPR_STATEMENT	98:3	98:45	10	purple_pounce_set_save ( data -> pounce , TRUE ) ;
EXPR	98:3	98:3	11	purple_pounce_set_save ( data -> pounce , TRUE )
FUNCTION_CALL	98:3	98:44	12	purple_pounce_set_save ( data -> pounce , TRUE )
CALLEE	98:3	98:3	13	purple_pounce_set_save
LEAF_NODE	98:3	98:3	14	purple_pounce_set_save
LEAF_NODE	98:25	98:25	13	(
ARGUMENT	98:26	98:26	13	data -> pounce
FIELD	98:26	98:32	14	data -> pounce
LEAF_NODE	98:26	98:26	15	data
LEAF_NODE	98:30	98:30	15	->
LEAF_NODE	98:32	98:32	15	pounce
LEAF_NODE	98:38	98:38	13	,
ARGUMENT	98:40	98:40	13	TRUE
FIELD	98:40	98:40	14	TRUE
LEAF_NODE	98:40	98:40	15	TRUE
LEAF_NODE	98:44	98:44	13	)
LEAF_NODE	98:45	98:45	11	;
LEAF_NODE	99:1	99:1	7	}
SELECTION	100:1	100:6	3	
KEYWORD	100:1	100:1	4	else
LEAF_NODE	100:1	100:1	5	else
STATEMENTS	100:6	100:6	4	
SELECTION	100:6	100:51	5	
KEYWORD	100:6	100:6	6	if
LEAF_NODE	100:6	100:6	7	if
LEAF_NODE	100:9	100:9	6	(
CONDITION	100:10	100:10	6	purple_strequal ( element_name , "pounce" )
EXPR	100:10	100:10	7	purple_strequal ( element_name , "pounce" )
FUNCTION_CALL	100:10	100:48	8	purple_strequal ( element_name , "pounce" )
CALLEE	100:10	100:10	9	purple_strequal
LEAF_NODE	100:10	100:10	10	purple_strequal
LEAF_NODE	100:25	100:25	9	(
ARGUMENT	100:26	100:26	9	element_name
FIELD	100:26	100:26	10	element_name
LEAF_NODE	100:26	100:26	11	element_name
LEAF_NODE	100:38	100:38	9	,
ARGUMENT	100:40	100:40	9	"pounce"
FIELD	100:40	100:40	10	"pounce"
LEAF_NODE	100:40	100:40	11	"pounce"
LEAF_NODE	100:48	100:48	9	)
LEAF_NODE	100:49	100:49	6	)
STATEMENTS	100:51	120:1	6	
LEAF_NODE	100:51	100:51	7	{
STATEMENTS	101:2	119:2	7	
EXPR_STATEMENT	101:2	101:22	8	data -> pounce = NULL ;
EXPR	101:2	101:2	9	data -> pounce = NULL
ASSIGN	101:2	101:18	10	data -> pounce = NULL
LVAL	101:2	101:2	11	data -> pounce
FIELD	101:2	101:8	12	data -> pounce
LEAF_NODE	101:2	101:2	13	data
LEAF_NODE	101:6	101:6	13	->
LEAF_NODE	101:8	101:8	13	pounce
ASSIGN_OP	101:16	101:16	11	=
LEAF_NODE	101:16	101:16	12	=
RVAL	101:18	101:18	11	NULL
FIELD	101:18	101:18	12	NULL
LEAF_NODE	101:18	101:18	13	NULL
LEAF_NODE	101:22	101:22	9	;
EXPR_STATEMENT	102:2	102:19	8	data -> events = 0 ;
EXPR	102:2	102:2	9	data -> events = 0
ASSIGN	102:2	102:18	10	data -> events = 0
LVAL	102:2	102:2	11	data -> events
FIELD	102:2	102:8	12	data -> events
LEAF_NODE	102:2	102:2	13	data
LEAF_NODE	102:6	102:6	13	->
LEAF_NODE	102:8	102:8	13	events
ASSIGN_OP	102:16	102:16	11	=
LEAF_NODE	102:16	102:16	12	=
RVAL	102:18	102:18	11	0
FIELD	102:18	102:18	12	0
LEAF_NODE	102:18	102:18	13	0
LEAF_NODE	102:19	102:19	9	;
EXPR_STATEMENT	103:2	103:19	8	data -> options = 0 ;
EXPR	103:2	103:2	9	data -> options = 0
ASSIGN	103:2	103:18	10	data -> options = 0
LVAL	103:2	103:2	11	data -> options
FIELD	103:2	103:8	12	data -> options
LEAF_NODE	103:2	103:2	13	data
LEAF_NODE	103:6	103:6	13	->
LEAF_NODE	103:8	103:8	13	options
ASSIGN_OP	103:16	103:16	11	=
LEAF_NODE	103:16	103:16	12	=
RVAL	103:18	103:18	11	0
FIELD	103:18	103:18	12	0
LEAF_NODE	103:18	103:18	13	0
LEAF_NODE	103:19	103:19	9	;
EXPR_STATEMENT	104:2	104:23	8	g_free ( data -> ui_name ) ;
EXPR	104:2	104:2	9	g_free ( data -> ui_name )
FUNCTION_CALL	104:2	104:22	10	g_free ( data -> ui_name )
CALLEE	104:2	104:2	11	g_free
LEAF_NODE	104:2	104:2	12	g_free
LEAF_NODE	104:8	104:8	11	(
ARGUMENT	104:9	104:9	11	data -> ui_name
FIELD	104:9	104:15	12	data -> ui_name
LEAF_NODE	104:9	104:9	13	data
LEAF_NODE	104:13	104:13	13	->
LEAF_NODE	104:15	104:15	13	ui_name
LEAF_NODE	104:22	104:22	11	)
LEAF_NODE	104:23	104:23	9	;
EXPR_STATEMENT	105:2	105:23	8	g_free ( data -> pouncee ) ;
EXPR	105:2	105:2	9	g_free ( data -> pouncee )
FUNCTION_CALL	105:2	105:22	10	g_free ( data -> pouncee )
CALLEE	105:2	105:2	11	g_free
LEAF_NODE	105:2	105:2	12	g_free
LEAF_NODE	105:8	105:8	11	(
ARGUMENT	105:9	105:9	11	data -> pouncee
FIELD	105:9	105:15	12	data -> pouncee
LEAF_NODE	105:9	105:9	13	data
LEAF_NODE	105:13	105:13	13	->
LEAF_NODE	105:15	105:15	13	pouncee
LEAF_NODE	105:22	105:22	11	)
LEAF_NODE	105:23	105:23	9	;
EXPR_STATEMENT	106:2	106:27	8	g_free ( data -> protocol_id ) ;
EXPR	106:2	106:2	9	g_free ( data -> protocol_id )
FUNCTION_CALL	106:2	106:26	10	g_free ( data -> protocol_id )
CALLEE	106:2	106:2	11	g_free
LEAF_NODE	106:2	106:2	12	g_free
LEAF_NODE	106:8	106:8	11	(
ARGUMENT	106:9	106:9	11	data -> protocol_id
FIELD	106:9	106:15	12	data -> protocol_id
LEAF_NODE	106:9	106:9	13	data
LEAF_NODE	106:13	106:13	13	->
LEAF_NODE	106:15	106:15	13	protocol_id
LEAF_NODE	106:26	106:26	11	)
LEAF_NODE	106:27	106:27	9	;
EXPR_STATEMENT	107:2	107:26	8	g_free ( data -> event_type ) ;
EXPR	107:2	107:2	9	g_free ( data -> event_type )
FUNCTION_CALL	107:2	107:25	10	g_free ( data -> event_type )
CALLEE	107:2	107:2	11	g_free
LEAF_NODE	107:2	107:2	12	g_free
LEAF_NODE	107:8	107:8	11	(
ARGUMENT	107:9	107:9	11	data -> event_type
FIELD	107:9	107:15	12	data -> event_type
LEAF_NODE	107:9	107:9	13	data
LEAF_NODE	107:13	107:13	13	->
LEAF_NODE	107:15	107:15	13	event_type
LEAF_NODE	107:25	107:25	11	)
LEAF_NODE	107:26	107:26	9	;
EXPR_STATEMENT	108:2	108:27	8	g_free ( data -> option_type ) ;
EXPR	108:2	108:2	9	g_free ( data -> option_type )
FUNCTION_CALL	108:2	108:26	10	g_free ( data -> option_type )
CALLEE	108:2	108:2	11	g_free
LEAF_NODE	108:2	108:2	12	g_free
LEAF_NODE	108:8	108:8	11	(
ARGUMENT	108:9	108:9	11	data -> option_type
FIELD	108:9	108:15	12	data -> option_type
LEAF_NODE	108:9	108:9	13	data
LEAF_NODE	108:13	108:13	13	->
LEAF_NODE	108:15	108:15	13	option_type
LEAF_NODE	108:26	108:26	11	)
LEAF_NODE	108:27	108:27	9	;
EXPR_STATEMENT	109:2	109:27	8	g_free ( data -> action_name ) ;
EXPR	109:2	109:2	9	g_free ( data -> action_name )
FUNCTION_CALL	109:2	109:26	10	g_free ( data -> action_name )
CALLEE	109:2	109:2	11	g_free
LEAF_NODE	109:2	109:2	12	g_free
LEAF_NODE	109:8	109:8	11	(
ARGUMENT	109:9	109:9	11	data -> action_name
FIELD	109:9	109:15	12	data -> action_name
LEAF_NODE	109:9	109:9	13	data
LEAF_NODE	109:13	109:13	13	->
LEAF_NODE	109:15	109:15	13	action_name
LEAF_NODE	109:26	109:26	11	)
LEAF_NODE	109:27	109:27	9	;
EXPR_STATEMENT	110:2	110:26	8	g_free ( data -> param_name ) ;
EXPR	110:2	110:2	9	g_free ( data -> param_name )
FUNCTION_CALL	110:2	110:25	10	g_free ( data -> param_name )
CALLEE	110:2	110:2	11	g_free
LEAF_NODE	110:2	110:2	12	g_free
LEAF_NODE	110:8	110:8	11	(
ARGUMENT	110:9	110:9	11	data -> param_name
FIELD	110:9	110:15	12	data -> param_name
LEAF_NODE	110:9	110:9	13	data
LEAF_NODE	110:13	110:13	13	->
LEAF_NODE	110:15	110:15	13	param_name
LEAF_NODE	110:25	110:25	11	)
LEAF_NODE	110:26	110:26	9	;
EXPR_STATEMENT	111:2	111:28	8	g_free ( data -> account_name ) ;
EXPR	111:2	111:2	9	g_free ( data -> account_name )
FUNCTION_CALL	111:2	111:27	10	g_free ( data -> account_name )
CALLEE	111:2	111:2	11	g_free
LEAF_NODE	111:2	111:2	12	g_free
LEAF_NODE	111:8	111:8	11	(
ARGUMENT	111:9	111:9	11	data -> account_name
FIELD	111:9	111:15	12	data -> account_name
LEAF_NODE	111:9	111:9	13	data
LEAF_NODE	111:13	111:13	13	->
LEAF_NODE	111:15	111:15	13	account_name
LEAF_NODE	111:27	111:27	11	)
LEAF_NODE	111:28	111:28	9	;
EXPR_STATEMENT	112:2	112:27	8	data -> ui_name = NULL ;
EXPR	112:2	112:2	9	data -> ui_name = NULL
ASSIGN	112:2	112:23	10	data -> ui_name = NULL
LVAL	112:2	112:2	11	data -> ui_name
FIELD	112:2	112:8	12	data -> ui_name
LEAF_NODE	112:2	112:2	13	data
LEAF_NODE	112:6	112:6	13	->
LEAF_NODE	112:8	112:8	13	ui_name
ASSIGN_OP	112:21	112:21	11	=
LEAF_NODE	112:21	112:21	12	=
RVAL	112:23	112:23	11	NULL
FIELD	112:23	112:23	12	NULL
LEAF_NODE	112:23	112:23	13	NULL
LEAF_NODE	112:27	112:27	9	;
EXPR_STATEMENT	113:2	113:27	8	data -> pounce = NULL ;
EXPR	113:2	113:2	9	data -> pounce = NULL
ASSIGN	113:2	113:23	10	data -> pounce = NULL
LVAL	113:2	113:2	11	data -> pounce
FIELD	113:2	113:8	12	data -> pounce
LEAF_NODE	113:2	113:2	13	data
LEAF_NODE	113:6	113:6	13	->
LEAF_NODE	113:8	113:8	13	pounce
ASSIGN_OP	113:21	113:21	11	=
LEAF_NODE	113:21	113:21	12	=
RVAL	113:23	113:23	11	NULL
FIELD	113:23	113:23	12	NULL
LEAF_NODE	113:23	113:23	13	NULL
LEAF_NODE	113:27	113:27	9	;
EXPR_STATEMENT	114:2	114:27	8	data -> protocol_id = NULL ;
EXPR	114:2	114:2	9	data -> protocol_id = NULL
ASSIGN	114:2	114:23	10	data -> protocol_id = NULL
LVAL	114:2	114:2	11	data -> protocol_id
FIELD	114:2	114:8	12	data -> protocol_id
LEAF_NODE	114:2	114:2	13	data
LEAF_NODE	114:6	114:6	13	->
LEAF_NODE	114:8	114:8	13	protocol_id
ASSIGN_OP	114:21	114:21	11	=
LEAF_NODE	114:21	114:21	12	=
RVAL	114:23	114:23	11	NULL
FIELD	114:23	114:23	12	NULL
LEAF_NODE	114:23	114:23	13	NULL
LEAF_NODE	114:27	114:27	9	;
EXPR_STATEMENT	115:2	115:27	8	data -> event_type = NULL ;
EXPR	115:2	115:2	9	data -> event_type = NULL
ASSIGN	115:2	115:23	10	data -> event_type = NULL
LVAL	115:2	115:2	11	data -> event_type
FIELD	115:2	115:8	12	data -> event_type
LEAF_NODE	115:2	115:2	13	data
LEAF_NODE	115:6	115:6	13	->
LEAF_NODE	115:8	115:8	13	event_type
ASSIGN_OP	115:21	115:21	11	=
LEAF_NODE	115:21	115:21	12	=
RVAL	115:23	115:23	11	NULL
FIELD	115:23	115:23	12	NULL
LEAF_NODE	115:23	115:23	13	NULL
LEAF_NODE	115:27	115:27	9	;
EXPR_STATEMENT	116:2	116:27	8	data -> option_type = NULL ;
EXPR	116:2	116:2	9	data -> option_type = NULL
ASSIGN	116:2	116:23	10	data -> option_type = NULL
LVAL	116:2	116:2	11	data -> option_type
FIELD	116:2	116:8	12	data -> option_type
LEAF_NODE	116:2	116:2	13	data
LEAF_NODE	116:6	116:6	13	->
LEAF_NODE	116:8	116:8	13	option_type
ASSIGN_OP	116:21	116:21	11	=
LEAF_NODE	116:21	116:21	12	=
RVAL	116:23	116:23	11	NULL
FIELD	116:23	116:23	12	NULL
LEAF_NODE	116:23	116:23	13	NULL
LEAF_NODE	116:27	116:27	9	;
EXPR_STATEMENT	117:2	117:27	8	data -> action_name = NULL ;
EXPR	117:2	117:2	9	data -> action_name = NULL
ASSIGN	117:2	117:23	10	data -> action_name = NULL
LVAL	117:2	117:2	11	data -> action_name
FIELD	117:2	117:8	12	data -> action_name
LEAF_NODE	117:2	117:2	13	data
LEAF_NODE	117:6	117:6	13	->
LEAF_NODE	117:8	117:8	13	action_name
ASSIGN_OP	117:21	117:21	11	=
LEAF_NODE	117:21	117:21	12	=
RVAL	117:23	117:23	11	NULL
FIELD	117:23	117:23	12	NULL
LEAF_NODE	117:23	117:23	13	NULL
LEAF_NODE	117:27	117:27	9	;
EXPR_STATEMENT	118:2	118:27	8	data -> param_name = NULL ;
EXPR	118:2	118:2	9	data -> param_name = NULL
ASSIGN	118:2	118:23	10	data -> param_name = NULL
LVAL	118:2	118:2	11	data -> param_name
FIELD	118:2	118:8	12	data -> param_name
LEAF_NODE	118:2	118:2	13	data
LEAF_NODE	118:6	118:6	13	->
LEAF_NODE	118:8	118:8	13	param_name
ASSIGN_OP	118:21	118:21	11	=
LEAF_NODE	118:21	118:21	12	=
RVAL	118:23	118:23	11	NULL
FIELD	118:23	118:23	12	NULL
LEAF_NODE	118:23	118:23	13	NULL
LEAF_NODE	118:27	118:27	9	;
EXPR_STATEMENT	119:2	119:27	8	data -> account_name = NULL ;
EXPR	119:2	119:2	9	data -> account_name = NULL
ASSIGN	119:2	119:23	10	data -> account_name = NULL
LVAL	119:2	119:2	11	data -> account_name
FIELD	119:2	119:8	12	data -> account_name
LEAF_NODE	119:2	119:2	13	data
LEAF_NODE	119:6	119:6	13	->
LEAF_NODE	119:8	119:8	13	account_name
ASSIGN_OP	119:21	119:21	11	=
LEAF_NODE	119:21	119:21	12	=
RVAL	119:23	119:23	11	NULL
FIELD	119:23	119:23	12	NULL
LEAF_NODE	119:23	119:23	13	NULL
LEAF_NODE	119:27	119:27	9	;
LEAF_NODE	120:1	120:1	7	}
EXPR_STATEMENT	121:1	121:15	3	g_free ( buffer ) ;
EXPR	121:1	121:1	4	g_free ( buffer )
FUNCTION_CALL	121:1	121:14	5	g_free ( buffer )
CALLEE	121:1	121:1	6	g_free
LEAF_NODE	121:1	121:1	7	g_free
LEAF_NODE	121:7	121:7	6	(
ARGUMENT	121:8	121:8	6	buffer
FIELD	121:8	121:8	7	buffer
LEAF_NODE	121:8	121:8	8	buffer
LEAF_NODE	121:14	121:14	6	)
LEAF_NODE	121:15	121:15	4	;
LEAF_NODE	122:0	122:0	2	}

SOURCE_FILE	1:7	2:0	0	
SIMPLE_DECL	1:7	1:58	1	void pidgin_disco_create_tree ; pidgin_disco_create_tree pidgin_disco_create_tree ( PidginDiscoList * pdl ) ;
VAR_DECL	1:7	1:12	2	void pidgin_disco_create_tree ; pidgin_disco_create_tree pidgin_disco_create_tree ( PidginDiscoList * pdl )
TYPE	1:7	1:7	3	void
TYPE_NAME	1:7	1:7	4	void
LEAF_NODE	1:7	1:7	5	void
NAME	1:12	1:12	3	pidgin_disco_create_tree
LEAF_NODE	1:12	1:12	4	pidgin_disco_create_tree
LEAF_NODE	0:0	0:0	3	;
INIT	1:12	1:12	3	pidgin_disco_create_tree pidgin_disco_create_tree ( PidginDiscoList * pdl )
ASSIGN	1:12	1:36	4	pidgin_disco_create_tree pidgin_disco_create_tree ( PidginDiscoList * pdl )
LVAL	1:12	1:12	5	pidgin_disco_create_tree
NAME	1:12	1:12	6	pidgin_disco_create_tree
LEAF_NODE	1:12	1:12	7	pidgin_disco_create_tree
ASSIGN_OP	1:12	1:12	5	pidgin_disco_create_tree
NAME	1:12	1:12	6	pidgin_disco_create_tree
LEAF_NODE	1:12	1:12	7	pidgin_disco_create_tree
RVAL	1:36	1:57	5	( PidginDiscoList * pdl )
LEAF_NODE	1:36	1:36	6	(
EXPR	1:37	1:54	6	PidginDiscoList * pdl
FIELD	1:37	1:37	7	PidginDiscoList
LEAF_NODE	1:37	1:37	8	PidginDiscoList
LEAF_NODE	1:53	1:53	7	*
FIELD	1:54	1:54	7	pdl
LEAF_NODE	1:54	1:54	8	pdl
LEAF_NODE	1:57	1:57	6	)
LEAF_NODE	1:58	1:58	2	;
FUNCTION_DEF	2:0	16:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	dialog_select_account_cb
LEAF_NODE	2:12	2:12	3	dialog_select_account_cb
PARAMETER_LIST	2:36	3:62	2	( GObject * w , PurpleAccount * account , PidginDiscoDialog * dialog )
LEAF_NODE	2:36	2:36	3	(
PARAMETER_DECL	2:37	2:46	3	GObject * w
TYPE	2:37	2:45	4	GObject *
TYPE_NAME	2:37	2:37	5	GObject
LEAF_NODE	2:37	2:37	6	GObject
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	w
LEAF_NODE	2:46	2:46	5	w
LEAF_NODE	2:47	2:47	3	,
PARAMETER_DECL	2:49	2:64	3	PurpleAccount * account
TYPE	2:49	2:63	4	PurpleAccount *
TYPE_NAME	2:49	2:49	5	PurpleAccount
LEAF_NODE	2:49	2:49	6	PurpleAccount
POINTER	2:63	2:63	5	*
LEAF_NODE	2:63	2:63	6	*
NAME	2:64	2:64	4	account
LEAF_NODE	2:64	2:64	5	account
LEAF_NODE	2:71	2:71	3	,
PARAMETER_DECL	3:37	3:56	3	PidginDiscoDialog * dialog
TYPE	3:37	3:55	4	PidginDiscoDialog *
TYPE_NAME	3:37	3:37	5	PidginDiscoDialog
LEAF_NODE	3:37	3:37	6	PidginDiscoDialog
POINTER	3:55	3:55	5	*
LEAF_NODE	3:55	3:55	6	*
NAME	3:56	3:56	4	dialog
LEAF_NODE	3:56	3:56	5	dialog
LEAF_NODE	3:62	3:62	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	8:1	2	
SIMPLE_DECL	5:1	5:47	3	gboolean change ; change = ( account != dialog -> account ) ;
VAR_DECL	5:1	5:10	4	gboolean change ; change = ( account != dialog -> account )
TYPE	5:1	5:1	5	gboolean
TYPE_NAME	5:1	5:1	6	gboolean
LEAF_NODE	5:1	5:1	7	gboolean
NAME	5:10	5:10	5	change
LEAF_NODE	5:10	5:10	6	change
LEAF_NODE	0:0	0:0	5	;
INIT	5:10	5:10	5	change = ( account != dialog -> account )
ASSIGN	5:10	5:19	6	change = ( account != dialog -> account )
LVAL	5:10	5:10	7	change
NAME	5:10	5:10	8	change
LEAF_NODE	5:10	5:10	9	change
ASSIGN_OP	5:17	5:17	7	=
LEAF_NODE	5:17	5:17	8	=
RVAL	5:19	5:46	7	( account != dialog -> account )
LEAF_NODE	5:19	5:19	8	(
FIELD	5:20	5:20	8	account
LEAF_NODE	5:20	5:20	9	account
EQ_OPERATOR	5:28	5:28	8	!=
LEAF_NODE	5:28	5:28	9	!=
FIELD	5:31	5:39	8	dialog -> account
LEAF_NODE	5:31	5:31	9	dialog
LEAF_NODE	5:37	5:37	9	->
LEAF_NODE	5:39	5:39	9	account
LEAF_NODE	5:46	5:46	8	)
LEAF_NODE	5:47	5:47	4	;
EXPR_STATEMENT	6:1	6:26	3	dialog -> account = account ;
EXPR	6:1	6:1	4	dialog -> account = account
ASSIGN	6:1	6:19	5	dialog -> account = account
LVAL	6:1	6:1	6	dialog -> account
FIELD	6:1	6:9	7	dialog -> account
LEAF_NODE	6:1	6:1	8	dialog
LEAF_NODE	6:7	6:7	8	->
LEAF_NODE	6:9	6:9	8	account
ASSIGN_OP	6:17	6:17	6	=
LEAF_NODE	6:17	6:17	7	=
RVAL	6:19	6:19	6	account
FIELD	6:19	6:19	7	account
LEAF_NODE	6:19	6:19	8	account
LEAF_NODE	6:26	6:26	4	;
EXPR_STATEMENT	7:1	7:65	3	gtk_widget_set_sensitive ( dialog -> browse_button , account != NULL ) ;
EXPR	7:1	7:1	4	gtk_widget_set_sensitive ( dialog -> browse_button , account != NULL )
FUNCTION_CALL	7:1	7:64	5	gtk_widget_set_sensitive ( dialog -> browse_button , account != NULL )
CALLEE	7:1	7:1	6	gtk_widget_set_sensitive
LEAF_NODE	7:1	7:1	7	gtk_widget_set_sensitive
LEAF_NODE	7:25	7:25	6	(
ARGUMENT	7:26	7:26	6	dialog -> browse_button
FIELD	7:26	7:34	7	dialog -> browse_button
LEAF_NODE	7:26	7:26	8	dialog
LEAF_NODE	7:32	7:32	8	->
LEAF_NODE	7:34	7:34	8	browse_button
LEAF_NODE	7:47	7:47	6	,
ARGUMENT	7:49	7:60	6	account != NULL
FIELD	7:49	7:49	7	account
LEAF_NODE	7:49	7:49	8	account
EQ_OPERATOR	7:57	7:57	7	!=
LEAF_NODE	7:57	7:57	8	!=
FIELD	7:60	7:60	7	NULL
LEAF_NODE	7:60	7:60	8	NULL
LEAF_NODE	7:64	7:64	6	)
LEAF_NODE	7:65	7:65	4	;
SELECTION	8:1	8:34	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	change && dialog -> discolist
EXPR	8:5	8:5	5	change && dialog -> discolist
AND	8:5	8:15	6	change && dialog -> discolist
EXPR	8:5	8:5	7	change
FIELD	8:5	8:5	8	change
LEAF_NODE	8:5	8:5	9	change
LEAF_NODE	8:12	8:12	7	&&
EXPR	8:15	8:15	7	dialog -> discolist
FIELD	8:15	8:23	8	dialog -> discolist
LEAF_NODE	8:15	8:15	9	dialog
LEAF_NODE	8:21	8:21	9	->
LEAF_NODE	8:23	8:23	9	discolist
LEAF_NODE	8:32	8:32	4	)
STATEMENTS	8:34	15:1	4	
LEAF_NODE	8:34	8:34	5	{
STATEMENTS	9:2	14:2	5	
SELECTION	9:2	9:31	6	
KEYWORD	9:2	9:2	7	if
LEAF_NODE	9:2	9:2	8	if
LEAF_NODE	9:5	9:5	7	(
CONDITION	9:6	9:6	7	dialog -> discolist -> tree
EXPR	9:6	9:6	8	dialog -> discolist -> tree
FIELD	9:6	9:25	9	dialog -> discolist -> tree
LEAF_NODE	9:6	9:6	10	dialog
LEAF_NODE	9:12	9:12	10	->
LEAF_NODE	9:14	9:14	10	discolist
LEAF_NODE	9:23	9:23	10	->
LEAF_NODE	9:25	9:25	10	tree
LEAF_NODE	9:29	9:29	7	)
STATEMENTS	9:31	12:2	7	
LEAF_NODE	9:31	9:31	8	{
STATEMENTS	10:3	11:3	8	
EXPR_STATEMENT	10:3	10:46	9	gtk_widget_destroy ( dialog -> discolist -> tree ) ;
EXPR	10:3	10:3	10	gtk_widget_destroy ( dialog -> discolist -> tree )
FUNCTION_CALL	10:3	10:45	11	gtk_widget_destroy ( dialog -> discolist -> tree )
CALLEE	10:3	10:3	12	gtk_widget_destroy
LEAF_NODE	10:3	10:3	13	gtk_widget_destroy
LEAF_NODE	10:21	10:21	12	(
ARGUMENT	10:22	10:22	12	dialog -> discolist -> tree
FIELD	10:22	10:41	13	dialog -> discolist -> tree
LEAF_NODE	10:22	10:22	14	dialog
LEAF_NODE	10:28	10:28	14	->
LEAF_NODE	10:30	10:30	14	discolist
LEAF_NODE	10:39	10:39	14	->
LEAF_NODE	10:41	10:41	14	tree
LEAF_NODE	10:45	10:45	12	)
LEAF_NODE	10:46	10:46	10	;
EXPR_STATEMENT	11:3	11:33	9	dialog -> discolist -> tree = NULL ;
EXPR	11:3	11:3	10	dialog -> discolist -> tree = NULL
ASSIGN	11:3	11:29	11	dialog -> discolist -> tree = NULL
LVAL	11:3	11:3	12	dialog -> discolist -> tree
FIELD	11:3	11:22	13	dialog -> discolist -> tree
LEAF_NODE	11:3	11:3	14	dialog
LEAF_NODE	11:9	11:9	14	->
LEAF_NODE	11:11	11:11	14	discolist
LEAF_NODE	11:20	11:20	14	->
LEAF_NODE	11:22	11:22	14	tree
ASSIGN_OP	11:27	11:27	12	=
LEAF_NODE	11:27	11:27	13	=
RVAL	11:29	11:29	12	NULL
FIELD	11:29	11:29	13	NULL
LEAF_NODE	11:29	11:29	14	NULL
LEAF_NODE	11:33	11:33	10	;
LEAF_NODE	12:2	12:2	8	}
EXPR_STATEMENT	13:2	13:44	6	pidgin_disco_list_unref ( dialog -> discolist ) ;
EXPR	13:2	13:2	7	pidgin_disco_list_unref ( dialog -> discolist )
FUNCTION_CALL	13:2	13:43	8	pidgin_disco_list_unref ( dialog -> discolist )
CALLEE	13:2	13:2	9	pidgin_disco_list_unref
LEAF_NODE	13:2	13:2	10	pidgin_disco_list_unref
LEAF_NODE	13:25	13:25	9	(
ARGUMENT	13:26	13:26	9	dialog -> discolist
FIELD	13:26	13:34	10	dialog -> discolist
LEAF_NODE	13:26	13:26	11	dialog
LEAF_NODE	13:32	13:32	11	->
LEAF_NODE	13:34	13:34	11	discolist
LEAF_NODE	13:43	13:43	9	)
LEAF_NODE	13:44	13:44	7	;
EXPR_STATEMENT	14:2	14:26	6	dialog -> discolist = NULL ;
EXPR	14:2	14:2	7	dialog -> discolist = NULL
ASSIGN	14:2	14:22	8	dialog -> discolist = NULL
LVAL	14:2	14:2	9	dialog -> discolist
FIELD	14:2	14:10	10	dialog -> discolist
LEAF_NODE	14:2	14:2	11	dialog
LEAF_NODE	14:8	14:8	11	->
LEAF_NODE	14:10	14:10	11	discolist
ASSIGN_OP	14:20	14:20	9	=
LEAF_NODE	14:20	14:20	10	=
RVAL	14:22	14:22	9	NULL
FIELD	14:22	14:22	10	NULL
LEAF_NODE	14:22	14:22	11	NULL
LEAF_NODE	14:26	14:26	7	;
LEAF_NODE	15:1	15:1	5	}
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static int
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	int
LEAF_NODE	1:7	1:7	4	int
FUNCTION_NAME	2:0	2:0	2	window_closed_cb
LEAF_NODE	2:0	2:0	3	window_closed_cb
PARAMETER_LIST	2:16	2:17	2	( )
LEAF_NODE	2:16	2:16	3	(
LEAF_NODE	2:17	2:17	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:32	3	purple_plugin_unload ( my_plugin ) ;
EXPR	4:1	4:1	4	purple_plugin_unload ( my_plugin )
FUNCTION_CALL	4:1	4:31	5	purple_plugin_unload ( my_plugin )
CALLEE	4:1	4:1	6	purple_plugin_unload
LEAF_NODE	4:1	4:1	7	purple_plugin_unload
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:22	6	my_plugin
FIELD	4:22	4:22	7	my_plugin
LEAF_NODE	4:22	4:22	8	my_plugin
LEAF_NODE	4:31	4:31	6	)
LEAF_NODE	4:32	4:32	4	;
JUMP_STATEMENT	5:1	5:13	3	return FALSE ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	FALSE
EXPR	5:8	5:8	5	FALSE
FIELD	5:8	5:8	6	FALSE
LEAF_NODE	5:8	5:8	7	FALSE
LEAF_NODE	5:13	5:13	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	30:0	1	
RETURN_TYPE	2:0	2:7	2	static gboolean
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	gboolean
LEAF_NODE	2:7	2:7	4	gboolean
FUNCTION_NAME	2:16	2:16	2	should_hide_notice
LEAF_NODE	2:16	2:16	3	should_hide_notice
PARAMETER_LIST	2:34	3:52	2	( PurpleConversation * conv , const char * name , GHashTable * users )
LEAF_NODE	2:34	2:34	3	(
PARAMETER_DECL	2:35	2:55	3	PurpleConversation * conv
TYPE	2:35	2:54	4	PurpleConversation *
TYPE_NAME	2:35	2:35	5	PurpleConversation
LEAF_NODE	2:35	2:35	6	PurpleConversation
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	conv
LEAF_NODE	2:55	2:55	5	conv
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	2:61	2:73	3	const char * name
TYPE	2:61	2:72	4	const char *
TYPE_NAME	2:61	2:67	5	const char
LEAF_NODE	2:61	2:61	6	const
LEAF_NODE	2:67	2:67	6	char
POINTER	2:72	2:72	5	*
LEAF_NODE	2:72	2:72	6	*
NAME	2:73	2:73	4	name
LEAF_NODE	2:73	2:73	5	name
LEAF_NODE	2:77	2:77	3	,
PARAMETER_DECL	3:35	3:47	3	GHashTable * users
TYPE	3:35	3:46	4	GHashTable *
TYPE_NAME	3:35	3:35	5	GHashTable
LEAF_NODE	3:35	3:35	6	GHashTable
POINTER	3:46	3:46	5	*
LEAF_NODE	3:46	3:46	6	*
NAME	3:47	3:47	4	users
LEAF_NODE	3:47	3:47	5	users
LEAF_NODE	3:52	3:52	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	29:1	2	
SIMPLE_DECL	5:1	5:21	3	PurpleConvChat * chat ;
VAR_DECL	5:1	5:17	4	PurpleConvChat * chat
TYPE	5:1	5:16	5	PurpleConvChat *
TYPE_NAME	5:1	5:1	6	PurpleConvChat
LEAF_NODE	5:1	5:1	7	PurpleConvChat
POINTER	5:16	5:16	6	*
LEAF_NODE	5:16	5:16	7	*
NAME	5:17	5:17	5	chat
LEAF_NODE	5:17	5:17	6	chat
LEAF_NODE	5:21	5:21	4	;
SIMPLE_DECL	6:1	6:16	3	guint threshold ;
VAR_DECL	6:1	6:7	4	guint threshold
TYPE	6:1	6:1	5	guint
TYPE_NAME	6:1	6:1	6	guint
LEAF_NODE	6:1	6:1	7	guint
NAME	6:7	6:7	5	threshold
LEAF_NODE	6:7	6:7	6	threshold
LEAF_NODE	6:16	6:16	4	;
SIMPLE_DECL	7:1	7:24	3	struct joinpart_key key ;
VAR_DECL	7:1	7:21	4	struct joinpart_key key
TYPE	7:1	7:1	5	struct joinpart_key
TYPE_NAME	7:1	7:8	6	struct joinpart_key
LEAF_NODE	7:1	7:1	7	struct
LEAF_NODE	7:8	7:8	7	joinpart_key
NAME	7:21	7:21	5	key
LEAF_NODE	7:21	7:21	6	key
LEAF_NODE	7:24	7:24	4	;
SIMPLE_DECL	8:1	8:18	3	time_t * last_said ;
VAR_DECL	8:1	8:9	4	time_t * last_said
TYPE	8:1	8:8	5	time_t *
TYPE_NAME	8:1	8:1	6	time_t
LEAF_NODE	8:1	8:1	7	time_t
POINTER	8:8	8:8	6	*
LEAF_NODE	8:8	8:8	7	*
NAME	8:9	8:9	5	last_said
LEAF_NODE	8:9	8:9	6	last_said
LEAF_NODE	8:18	8:18	4	;
EXPR_STATEMENT	9:1	9:42	3	g_return_val_if_fail ( conv != NULL , FALSE ) ;
EXPR	9:1	9:1	4	g_return_val_if_fail ( conv != NULL , FALSE )
FUNCTION_CALL	9:1	9:41	5	g_return_val_if_fail ( conv != NULL , FALSE )
CALLEE	9:1	9:1	6	g_return_val_if_fail
LEAF_NODE	9:1	9:1	7	g_return_val_if_fail
LEAF_NODE	9:21	9:21	6	(
ARGUMENT	9:22	9:30	6	conv != NULL
FIELD	9:22	9:22	7	conv
LEAF_NODE	9:22	9:22	8	conv
EQ_OPERATOR	9:27	9:27	7	!=
LEAF_NODE	9:27	9:27	8	!=
FIELD	9:30	9:30	7	NULL
LEAF_NODE	9:30	9:30	8	NULL
LEAF_NODE	9:34	9:34	6	,
ARGUMENT	9:36	9:36	6	FALSE
FIELD	9:36	9:36	7	FALSE
LEAF_NODE	9:36	9:36	8	FALSE
LEAF_NODE	9:41	9:41	6	)
LEAF_NODE	9:42	9:42	4	;
EXPR_STATEMENT	10:1	10:89	3	g_return_val_if_fail ( purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_CHAT , FALSE ) ;
EXPR	10:1	10:1	4	g_return_val_if_fail ( purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_CHAT , FALSE )
FUNCTION_CALL	10:1	10:88	5	g_return_val_if_fail ( purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_CHAT , FALSE )
CALLEE	10:1	10:1	6	g_return_val_if_fail
LEAF_NODE	10:1	10:1	7	g_return_val_if_fail
LEAF_NODE	10:21	10:21	6	(
ARGUMENT	10:22	10:60	6	purple_conversation_get_type ( conv ) == PURPLE_CONV_TYPE_CHAT
FUNCTION_CALL	10:22	10:55	7	purple_conversation_get_type ( conv )
CALLEE	10:22	10:22	8	purple_conversation_get_type
LEAF_NODE	10:22	10:22	9	purple_conversation_get_type
LEAF_NODE	10:50	10:50	8	(
ARGUMENT	10:51	10:51	8	conv
FIELD	10:51	10:51	9	conv
LEAF_NODE	10:51	10:51	10	conv
LEAF_NODE	10:55	10:55	8	)
EQ_OPERATOR	10:57	10:57	7	==
LEAF_NODE	10:57	10:57	8	==
FIELD	10:60	10:60	7	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	10:60	10:60	8	PURPLE_CONV_TYPE_CHAT
LEAF_NODE	10:81	10:81	6	,
ARGUMENT	10:83	10:83	6	FALSE
FIELD	10:83	10:83	7	FALSE
LEAF_NODE	10:83	10:83	8	FALSE
LEAF_NODE	10:88	10:88	6	)
LEAF_NODE	10:89	10:89	4	;
EXPR_STATEMENT	12:1	12:30	3	chat = PURPLE_CONV_CHAT ( conv ) ;
EXPR	12:1	12:1	4	chat = PURPLE_CONV_CHAT ( conv )
ASSIGN	12:1	12:8	5	chat = PURPLE_CONV_CHAT ( conv )
LVAL	12:1	12:1	6	chat
FIELD	12:1	12:1	7	chat
LEAF_NODE	12:1	12:1	8	chat
ASSIGN_OP	12:6	12:6	6	=
LEAF_NODE	12:6	12:6	7	=
RVAL	12:8	12:8	6	PURPLE_CONV_CHAT ( conv )
FUNCTION_CALL	12:8	12:29	7	PURPLE_CONV_CHAT ( conv )
CALLEE	12:8	12:8	8	PURPLE_CONV_CHAT
LEAF_NODE	12:8	12:8	9	PURPLE_CONV_CHAT
LEAF_NODE	12:24	12:24	8	(
ARGUMENT	12:25	12:25	8	conv
FIELD	12:25	12:25	9	conv
LEAF_NODE	12:25	12:25	10	conv
LEAF_NODE	12:29	12:29	8	)
LEAF_NODE	12:30	12:30	4	;
EXPR_STATEMENT	13:1	13:49	3	threshold = purple_prefs_get_int ( THRESHOLD_PREF ) ;
EXPR	13:1	13:1	4	threshold = purple_prefs_get_int ( THRESHOLD_PREF )
ASSIGN	13:1	13:13	5	threshold = purple_prefs_get_int ( THRESHOLD_PREF )
LVAL	13:1	13:1	6	threshold
FIELD	13:1	13:1	7	threshold
LEAF_NODE	13:1	13:1	8	threshold
ASSIGN_OP	13:11	13:11	6	=
LEAF_NODE	13:11	13:11	7	=
RVAL	13:13	13:13	6	purple_prefs_get_int ( THRESHOLD_PREF )
FUNCTION_CALL	13:13	13:48	7	purple_prefs_get_int ( THRESHOLD_PREF )
CALLEE	13:13	13:13	8	purple_prefs_get_int
LEAF_NODE	13:13	13:13	9	purple_prefs_get_int
LEAF_NODE	13:33	13:33	8	(
ARGUMENT	13:34	13:34	8	THRESHOLD_PREF
FIELD	13:34	13:34	9	THRESHOLD_PREF
LEAF_NODE	13:34	13:34	10	THRESHOLD_PREF
LEAF_NODE	13:48	13:48	8	)
LEAF_NODE	13:49	13:49	4	;
SELECTION	14:1	15:2	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	g_list_length ( purple_conv_chat_get_users ( chat ) ) < threshold
EXPR	14:5	14:55	5	g_list_length ( purple_conv_chat_get_users ( chat ) ) < threshold
FUNCTION_CALL	14:5	14:51	6	g_list_length ( purple_conv_chat_get_users ( chat ) )
CALLEE	14:5	14:5	7	g_list_length
LEAF_NODE	14:5	14:5	8	g_list_length
LEAF_NODE	14:18	14:18	7	(
ARGUMENT	14:19	14:19	7	purple_conv_chat_get_users ( chat )
FUNCTION_CALL	14:19	14:50	8	purple_conv_chat_get_users ( chat )
CALLEE	14:19	14:19	9	purple_conv_chat_get_users
LEAF_NODE	14:19	14:19	10	purple_conv_chat_get_users
LEAF_NODE	14:45	14:45	9	(
ARGUMENT	14:46	14:46	9	chat
FIELD	14:46	14:46	10	chat
LEAF_NODE	14:46	14:46	11	chat
LEAF_NODE	14:50	14:50	9	)
LEAF_NODE	14:51	14:51	7	)
REL_OPERATOR	14:53	14:53	6	<
LEAF_NODE	14:53	14:53	7	<
FIELD	14:55	14:55	6	threshold
LEAF_NODE	14:55	14:55	7	threshold
LEAF_NODE	14:64	14:64	4	)
STATEMENTS	15:2	15:2	4	
JUMP_STATEMENT	15:2	15:14	5	return FALSE ;
KEYWORD	15:2	15:2	6	return
LEAF_NODE	15:2	15:2	7	return
DESTINATION	15:9	15:9	6	FALSE
EXPR	15:9	15:9	7	FALSE
FIELD	15:9	15:9	8	FALSE
LEAF_NODE	15:9	15:9	9	FALSE
LEAF_NODE	15:14	15:14	6	;
SELECTION	16:1	18:2	3	
KEYWORD	16:1	16:1	4	if
LEAF_NODE	16:1	16:1	5	if
LEAF_NODE	16:4	16:4	4	(
CONDITION	16:5	16:5	4	! purple_prefs_get_bool ( HIDE_BUDDIES_PREF ) && purple_find_buddy ( purple_conversation_get_account ( conv ) , name )
EXPR	16:5	16:5	5	! purple_prefs_get_bool ( HIDE_BUDDIES_PREF ) && purple_find_buddy ( purple_conversation_get_account ( conv ) , name )
AND	16:5	17:5	6	! purple_prefs_get_bool ( HIDE_BUDDIES_PREF ) && purple_find_buddy ( purple_conversation_get_account ( conv ) , name )
EXPR	16:5	16:5	7	! purple_prefs_get_bool ( HIDE_BUDDIES_PREF )
UNARY_EXPR	16:5	16:6	8	! purple_prefs_get_bool ( HIDE_BUDDIES_PREF )
UNARY_OPERATOR	16:5	16:5	9	!
LEAF_NODE	16:5	16:5	10	!
FUNCTION_CALL	16:6	16:45	9	purple_prefs_get_bool ( HIDE_BUDDIES_PREF )
CALLEE	16:6	16:6	10	purple_prefs_get_bool
LEAF_NODE	16:6	16:6	11	purple_prefs_get_bool
LEAF_NODE	16:27	16:27	10	(
ARGUMENT	16:28	16:28	10	HIDE_BUDDIES_PREF
FIELD	16:28	16:28	11	HIDE_BUDDIES_PREF
LEAF_NODE	16:28	16:28	12	HIDE_BUDDIES_PREF
LEAF_NODE	16:45	16:45	10	)
LEAF_NODE	16:47	16:47	7	&&
EXPR	17:5	17:5	7	purple_find_buddy ( purple_conversation_get_account ( conv ) , name )
FUNCTION_CALL	17:5	17:66	8	purple_find_buddy ( purple_conversation_get_account ( conv ) , name )
CALLEE	17:5	17:5	9	purple_find_buddy
LEAF_NODE	17:5	17:5	10	purple_find_buddy
LEAF_NODE	17:22	17:22	9	(
ARGUMENT	17:23	17:23	9	purple_conversation_get_account ( conv )
FUNCTION_CALL	17:23	17:59	10	purple_conversation_get_account ( conv )
CALLEE	17:23	17:23	11	purple_conversation_get_account
LEAF_NODE	17:23	17:23	12	purple_conversation_get_account
LEAF_NODE	17:54	17:54	11	(
ARGUMENT	17:55	17:55	11	conv
FIELD	17:55	17:55	12	conv
LEAF_NODE	17:55	17:55	13	conv
LEAF_NODE	17:59	17:59	11	)
LEAF_NODE	17:60	17:60	9	,
ARGUMENT	17:62	17:62	9	name
FIELD	17:62	17:62	10	name
LEAF_NODE	17:62	17:62	11	name
LEAF_NODE	17:66	17:66	9	)
LEAF_NODE	17:67	17:67	4	)
STATEMENTS	18:2	18:2	4	
JUMP_STATEMENT	18:2	18:14	5	return FALSE ;
KEYWORD	18:2	18:2	6	return
LEAF_NODE	18:2	18:2	7	return
DESTINATION	18:9	18:9	6	FALSE
EXPR	18:9	18:9	7	FALSE
FIELD	18:9	18:9	8	FALSE
LEAF_NODE	18:9	18:9	9	FALSE
LEAF_NODE	18:14	18:14	6	;
EXPR_STATEMENT	20:1	20:16	3	key . conv = conv ;
EXPR	20:1	20:1	4	key . conv = conv
ASSIGN	20:1	20:12	5	key . conv = conv
LVAL	20:1	20:1	6	key . conv
FIELD	20:1	20:5	7	key . conv
LEAF_NODE	20:1	20:1	8	key
LEAF_NODE	20:4	20:4	8	.
LEAF_NODE	20:5	20:5	8	conv
ASSIGN_OP	20:10	20:10	6	=
LEAF_NODE	20:10	20:10	7	=
RVAL	20:12	20:12	6	conv
FIELD	20:12	20:12	7	conv
LEAF_NODE	20:12	20:12	8	conv
LEAF_NODE	20:16	20:16	4	;
EXPR_STATEMENT	21:1	21:25	3	key . user = ( gchar * ) name ;
EXPR	21:1	21:1	4	key . user = ( gchar * ) name
ASSIGN	21:1	21:12	5	key . user = ( gchar * ) name
LVAL	21:1	21:1	6	key . user
FIELD	21:1	21:5	7	key . user
LEAF_NODE	21:1	21:1	8	key
LEAF_NODE	21:4	21:4	8	.
LEAF_NODE	21:5	21:5	8	user
ASSIGN_OP	21:10	21:10	6	=
LEAF_NODE	21:10	21:10	7	=
RVAL	21:12	21:21	6	( gchar * ) name
LEAF_NODE	21:12	21:12	7	(
TYPE_NAME	21:13	21:13	7	gchar
LEAF_NODE	21:13	21:13	8	gchar
LEAF_NODE	21:19	21:19	7	*
LEAF_NODE	21:20	21:20	7	)
FIELD	21:21	21:21	7	name
LEAF_NODE	21:21	21:21	8	name
LEAF_NODE	21:25	21:25	4	;
EXPR_STATEMENT	22:1	22:45	3	last_said = g_hash_table_lookup ( users , & key ) ;
EXPR	22:1	22:1	4	last_said = g_hash_table_lookup ( users , & key )
ASSIGN	22:1	22:13	5	last_said = g_hash_table_lookup ( users , & key )
LVAL	22:1	22:1	6	last_said
FIELD	22:1	22:1	7	last_said
LEAF_NODE	22:1	22:1	8	last_said
ASSIGN_OP	22:11	22:11	6	=
LEAF_NODE	22:11	22:11	7	=
RVAL	22:13	22:13	6	g_hash_table_lookup ( users , & key )
FUNCTION_CALL	22:13	22:44	7	g_hash_table_lookup ( users , & key )
CALLEE	22:13	22:13	8	g_hash_table_lookup
LEAF_NODE	22:13	22:13	9	g_hash_table_lookup
LEAF_NODE	22:32	22:32	8	(
ARGUMENT	22:33	22:33	8	users
FIELD	22:33	22:33	9	users
LEAF_NODE	22:33	22:33	10	users
LEAF_NODE	22:38	22:38	8	,
ARGUMENT	22:40	22:40	8	& key
UNARY_EXPR	22:40	22:41	9	& key
UNARY_OPERATOR	22:40	22:40	10	&
LEAF_NODE	22:40	22:40	11	&
FIELD	22:41	22:41	10	key
LEAF_NODE	22:41	22:41	11	key
LEAF_NODE	22:44	22:44	8	)
LEAF_NODE	22:45	22:45	4	;
SELECTION	23:1	24:1	3	
KEYWORD	23:1	23:1	4	if
LEAF_NODE	23:1	23:1	5	if
LEAF_NODE	23:4	23:4	4	(
CONDITION	23:5	23:5	4	last_said != NULL
EXPR	23:5	23:18	5	last_said != NULL
FIELD	23:5	23:5	6	last_said
LEAF_NODE	23:5	23:5	7	last_said
EQ_OPERATOR	23:15	23:15	6	!=
LEAF_NODE	23:15	23:15	7	!=
FIELD	23:18	23:18	6	NULL
LEAF_NODE	23:18	23:18	7	NULL
LEAF_NODE	23:22	23:22	4	)
STATEMENTS	24:1	28:1	4	
LEAF_NODE	24:1	24:1	5	{
STATEMENTS	25:2	26:2	5	
SIMPLE_DECL	25:2	25:46	6	int delay ; delay = purple_prefs_get_int ( DELAY_PREF ) ;
VAR_DECL	25:2	25:6	7	int delay ; delay = purple_prefs_get_int ( DELAY_PREF )
TYPE	25:2	25:2	8	int
TYPE_NAME	25:2	25:2	9	int
LEAF_NODE	25:2	25:2	10	int
NAME	25:6	25:6	8	delay
LEAF_NODE	25:6	25:6	9	delay
LEAF_NODE	0:0	0:0	8	;
INIT	25:6	25:6	8	delay = purple_prefs_get_int ( DELAY_PREF )
ASSIGN	25:6	25:14	9	delay = purple_prefs_get_int ( DELAY_PREF )
LVAL	25:6	25:6	10	delay
NAME	25:6	25:6	11	delay
LEAF_NODE	25:6	25:6	12	delay
ASSIGN_OP	25:12	25:12	10	=
LEAF_NODE	25:12	25:12	11	=
RVAL	25:14	25:14	10	purple_prefs_get_int ( DELAY_PREF )
FUNCTION_CALL	25:14	25:45	11	purple_prefs_get_int ( DELAY_PREF )
CALLEE	25:14	25:14	12	purple_prefs_get_int
LEAF_NODE	25:14	25:14	13	purple_prefs_get_int
LEAF_NODE	25:34	25:34	12	(
ARGUMENT	25:35	25:35	12	DELAY_PREF
FIELD	25:35	25:35	13	DELAY_PREF
LEAF_NODE	25:35	25:35	14	DELAY_PREF
LEAF_NODE	25:45	25:45	12	)
LEAF_NODE	25:46	25:46	7	;
SELECTION	26:2	27:3	6	
KEYWORD	26:2	26:2	7	if
LEAF_NODE	26:2	26:2	8	if
LEAF_NODE	26:5	26:5	7	(
CONDITION	26:6	26:6	7	delay > 0 && ( * last_said + ( delay * 60 ) ) >= time ( NULL )
EXPR	26:6	26:6	8	delay > 0 && ( * last_said + ( delay * 60 ) ) >= time ( NULL )
AND	26:6	26:19	9	delay > 0 && ( * last_said + ( delay * 60 ) ) >= time ( NULL )
EXPR	26:6	26:14	10	delay > 0
FIELD	26:6	26:6	11	delay
LEAF_NODE	26:6	26:6	12	delay
REL_OPERATOR	26:12	26:12	11	>
LEAF_NODE	26:12	26:12	12	>
FIELD	26:14	26:14	11	0
LEAF_NODE	26:14	26:14	12	0
LEAF_NODE	26:16	26:16	10	&&
EXPR	26:19	26:50	10	( * last_said + ( delay * 60 ) ) >= time ( NULL )
LEAF_NODE	26:19	26:19	11	(
UNARY_EXPR	26:20	26:21	11	* last_said
UNARY_OPERATOR	26:20	26:20	12	*
LEAF_NODE	26:20	26:20	13	*
FIELD	26:21	26:21	12	last_said
LEAF_NODE	26:21	26:21	13	last_said
LEAF_NODE	26:31	26:31	11	+
LEAF_NODE	26:33	26:33	11	(
FIELD	26:34	26:34	11	delay
LEAF_NODE	26:34	26:34	12	delay
LEAF_NODE	26:40	26:40	11	*
FIELD	26:42	26:42	11	60
LEAF_NODE	26:42	26:42	12	60
LEAF_NODE	26:44	26:44	11	)
LEAF_NODE	26:45	26:45	11	)
REL_OPERATOR	26:47	26:47	11	>=
LEAF_NODE	26:47	26:47	12	>=
FUNCTION_CALL	26:50	26:59	11	time ( NULL )
CALLEE	26:50	26:50	12	time
LEAF_NODE	26:50	26:50	13	time
LEAF_NODE	26:54	26:54	12	(
ARGUMENT	26:55	26:55	12	NULL
FIELD	26:55	26:55	13	NULL
LEAF_NODE	26:55	26:55	14	NULL
LEAF_NODE	26:59	26:59	12	)
LEAF_NODE	26:60	26:60	7	)
STATEMENTS	27:3	27:3	7	
JUMP_STATEMENT	27:3	27:15	8	return FALSE ;
KEYWORD	27:3	27:3	9	return
LEAF_NODE	27:3	27:3	10	return
DESTINATION	27:10	27:10	9	FALSE
EXPR	27:10	27:10	10	FALSE
FIELD	27:10	27:10	11	FALSE
LEAF_NODE	27:10	27:10	12	FALSE
LEAF_NODE	27:15	27:15	9	;
LEAF_NODE	28:1	28:1	5	}
JUMP_STATEMENT	29:1	29:12	3	return TRUE ;
KEYWORD	29:1	29:1	4	return
LEAF_NODE	29:1	29:1	5	return
DESTINATION	29:8	29:8	4	TRUE
EXPR	29:8	29:8	5	TRUE
FIELD	29:8	29:8	6	TRUE
LEAF_NODE	29:8	29:8	7	TRUE
LEAF_NODE	29:12	29:12	4	;
LEAF_NODE	30:0	30:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	20:0	1	
RETURN_TYPE	1:0	1:0	2	gboolean
TYPE_NAME	1:0	1:0	3	gboolean
LEAF_NODE	1:0	1:0	4	gboolean
FUNCTION_NAME	2:0	2:0	2	gevo_load_addressbook
LEAF_NODE	2:0	2:0	3	gevo_load_addressbook
PARAMETER_LIST	2:21	2:68	2	( const gchar * uri , EBook * * book , GError * * error )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:35	3	const gchar * uri
TYPE	2:22	2:33	4	const gchar *
TYPE_NAME	2:22	2:28	5	const gchar
LEAF_NODE	2:22	2:22	6	const
LEAF_NODE	2:28	2:28	6	gchar
POINTER	2:33	2:33	5	*
LEAF_NODE	2:33	2:33	6	*
NAME	2:35	2:35	4	uri
LEAF_NODE	2:35	2:35	5	uri
LEAF_NODE	2:38	2:38	3	,
PARAMETER_DECL	2:40	2:48	3	EBook * * book
TYPE	2:40	2:46	4	EBook * *
TYPE_NAME	2:40	2:40	5	EBook
LEAF_NODE	2:40	2:40	6	EBook
POINTER	2:46	2:47	5	* *
LEAF_NODE	2:46	2:46	6	*
LEAF_NODE	2:47	2:47	6	*
NAME	2:48	2:48	4	book
LEAF_NODE	2:48	2:48	5	book
LEAF_NODE	2:52	2:52	3	,
PARAMETER_DECL	2:54	2:63	3	GError * * error
TYPE	2:54	2:61	4	GError * *
TYPE_NAME	2:54	2:54	5	GError
LEAF_NODE	2:54	2:54	6	GError
POINTER	2:61	2:62	5	* *
LEAF_NODE	2:61	2:61	6	*
LEAF_NODE	2:62	2:62	6	*
NAME	2:63	2:63	4	error
LEAF_NODE	2:63	2:63	5	error
LEAF_NODE	2:68	2:68	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	19:1	2	
SIMPLE_DECL	4:1	4:24	3	gboolean result ; result = FALSE ;
VAR_DECL	4:1	4:10	4	gboolean result ; result = FALSE
TYPE	4:1	4:1	5	gboolean
TYPE_NAME	4:1	4:1	6	gboolean
LEAF_NODE	4:1	4:1	7	gboolean
NAME	4:10	4:10	5	result
LEAF_NODE	4:10	4:10	6	result
LEAF_NODE	0:0	0:0	5	;
INIT	4:10	4:10	5	result = FALSE
ASSIGN	4:10	4:19	6	result = FALSE
LVAL	4:10	4:10	7	result
NAME	4:10	4:10	8	result
LEAF_NODE	4:10	4:10	9	result
ASSIGN_OP	4:17	4:17	7	=
LEAF_NODE	4:17	4:17	8	=
RVAL	4:19	4:19	7	FALSE
FIELD	4:19	4:19	8	FALSE
LEAF_NODE	4:19	4:19	9	FALSE
LEAF_NODE	4:24	4:24	4	;
EXPR_STATEMENT	5:1	5:42	3	g_return_val_if_fail ( book != NULL , FALSE ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( book != NULL , FALSE )
FUNCTION_CALL	5:1	5:41	5	g_return_val_if_fail ( book != NULL , FALSE )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:30	6	book != NULL
FIELD	5:22	5:22	7	book
LEAF_NODE	5:22	5:22	8	book
EQ_OPERATOR	5:27	5:27	7	!=
LEAF_NODE	5:27	5:27	8	!=
FIELD	5:30	5:30	7	NULL
LEAF_NODE	5:30	5:30	8	NULL
LEAF_NODE	5:34	5:34	6	,
ARGUMENT	5:36	5:36	6	FALSE
FIELD	5:36	5:36	7	FALSE
LEAF_NODE	5:36	5:36	8	FALSE
LEAF_NODE	5:41	5:41	6	)
LEAF_NODE	5:42	5:42	4	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	uri == NULL
EXPR	6:5	6:12	5	uri == NULL
FIELD	6:5	6:5	6	uri
LEAF_NODE	6:5	6:5	7	uri
EQ_OPERATOR	6:9	6:9	6	==
LEAF_NODE	6:9	6:9	7	==
FIELD	6:12	6:12	6	NULL
LEAF_NODE	6:12	6:12	7	NULL
LEAF_NODE	6:16	6:16	4	)
STATEMENTS	7:2	7:2	4	
EXPR_STATEMENT	7:2	7:46	5	* book = e_book_new_system_addressbook ( error ) ;
EXPR	7:2	7:2	6	* book = e_book_new_system_addressbook ( error )
ASSIGN	7:2	7:10	7	* book = e_book_new_system_addressbook ( error )
LVAL	7:2	7:2	8	* book
UNARY_EXPR	7:2	7:3	9	* book
UNARY_OPERATOR	7:2	7:2	10	*
LEAF_NODE	7:2	7:2	11	*
FIELD	7:3	7:3	10	book
LEAF_NODE	7:3	7:3	11	book
ASSIGN_OP	7:8	7:8	8	=
LEAF_NODE	7:8	7:8	9	=
RVAL	7:10	7:10	8	e_book_new_system_addressbook ( error )
FUNCTION_CALL	7:10	7:45	9	e_book_new_system_addressbook ( error )
CALLEE	7:10	7:10	10	e_book_new_system_addressbook
LEAF_NODE	7:10	7:10	11	e_book_new_system_addressbook
LEAF_NODE	7:39	7:39	10	(
ARGUMENT	7:40	7:40	10	error
FIELD	7:40	7:40	11	error
LEAF_NODE	7:40	7:40	12	error
LEAF_NODE	7:45	7:45	10	)
LEAF_NODE	7:46	7:46	6	;
SELECTION	8:1	9:2	3	
KEYWORD	8:1	8:1	4	else
LEAF_NODE	8:1	8:1	5	else
STATEMENTS	9:2	9:2	4	
EXPR_STATEMENT	9:2	9:41	5	* book = e_book_new_from_uri ( uri , error ) ;
EXPR	9:2	9:2	6	* book = e_book_new_from_uri ( uri , error )
ASSIGN	9:2	9:10	7	* book = e_book_new_from_uri ( uri , error )
LVAL	9:2	9:2	8	* book
UNARY_EXPR	9:2	9:3	9	* book
UNARY_OPERATOR	9:2	9:2	10	*
LEAF_NODE	9:2	9:2	11	*
FIELD	9:3	9:3	10	book
LEAF_NODE	9:3	9:3	11	book
ASSIGN_OP	9:8	9:8	8	=
LEAF_NODE	9:8	9:8	9	=
RVAL	9:10	9:10	8	e_book_new_from_uri ( uri , error )
FUNCTION_CALL	9:10	9:40	9	e_book_new_from_uri ( uri , error )
CALLEE	9:10	9:10	10	e_book_new_from_uri
LEAF_NODE	9:10	9:10	11	e_book_new_from_uri
LEAF_NODE	9:29	9:29	10	(
ARGUMENT	9:30	9:30	10	uri
FIELD	9:30	9:30	11	uri
LEAF_NODE	9:30	9:30	12	uri
LEAF_NODE	9:33	9:33	10	,
ARGUMENT	9:35	9:35	10	error
FIELD	9:35	9:35	11	error
LEAF_NODE	9:35	9:35	12	error
LEAF_NODE	9:40	9:40	10	)
LEAF_NODE	9:41	9:41	6	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	* book == NULL
EXPR	10:5	10:14	5	* book == NULL
UNARY_EXPR	10:5	10:6	6	* book
UNARY_OPERATOR	10:5	10:5	7	*
LEAF_NODE	10:5	10:5	8	*
FIELD	10:6	10:6	7	book
LEAF_NODE	10:6	10:6	8	book
EQ_OPERATOR	10:11	10:11	6	==
LEAF_NODE	10:11	10:11	7	==
FIELD	10:14	10:14	6	NULL
LEAF_NODE	10:14	10:14	7	NULL
LEAF_NODE	10:18	10:18	4	)
STATEMENTS	11:2	11:2	4	
JUMP_STATEMENT	11:2	11:14	5	return FALSE ;
KEYWORD	11:2	11:2	6	return
LEAF_NODE	11:2	11:2	7	return
DESTINATION	11:9	11:9	6	FALSE
EXPR	11:9	11:9	7	FALSE
FIELD	11:9	11:9	8	FALSE
LEAF_NODE	11:9	11:9	9	FALSE
LEAF_NODE	11:14	11:14	6	;
EXPR_STATEMENT	12:1	12:14	3	* error = NULL ;
EXPR	12:1	12:1	4	* error = NULL
ASSIGN	12:1	12:10	5	* error = NULL
LVAL	12:1	12:1	6	* error
UNARY_EXPR	12:1	12:2	7	* error
UNARY_OPERATOR	12:1	12:1	8	*
LEAF_NODE	12:1	12:1	9	*
FIELD	12:2	12:2	8	error
LEAF_NODE	12:2	12:2	9	error
ASSIGN_OP	12:8	12:8	6	=
LEAF_NODE	12:8	12:8	7	=
RVAL	12:10	12:10	6	NULL
FIELD	12:10	12:10	7	NULL
LEAF_NODE	12:10	12:10	8	NULL
LEAF_NODE	12:14	12:14	4	;
EXPR_STATEMENT	13:1	13:42	3	result = e_book_open ( * book , FALSE , error ) ;
EXPR	13:1	13:1	4	result = e_book_open ( * book , FALSE , error )
ASSIGN	13:1	13:10	5	result = e_book_open ( * book , FALSE , error )
LVAL	13:1	13:1	6	result
FIELD	13:1	13:1	7	result
LEAF_NODE	13:1	13:1	8	result
ASSIGN_OP	13:8	13:8	6	=
LEAF_NODE	13:8	13:8	7	=
RVAL	13:10	13:10	6	e_book_open ( * book , FALSE , error )
FUNCTION_CALL	13:10	13:41	7	e_book_open ( * book , FALSE , error )
CALLEE	13:10	13:10	8	e_book_open
LEAF_NODE	13:10	13:10	9	e_book_open
LEAF_NODE	13:21	13:21	8	(
ARGUMENT	13:22	13:22	8	* book
UNARY_EXPR	13:22	13:23	9	* book
UNARY_OPERATOR	13:22	13:22	10	*
LEAF_NODE	13:22	13:22	11	*
FIELD	13:23	13:23	10	book
LEAF_NODE	13:23	13:23	11	book
LEAF_NODE	13:27	13:27	8	,
ARGUMENT	13:29	13:29	8	FALSE
FIELD	13:29	13:29	9	FALSE
LEAF_NODE	13:29	13:29	10	FALSE
LEAF_NODE	13:34	13:34	8	,
ARGUMENT	13:36	13:36	8	error
FIELD	13:36	13:36	9	error
LEAF_NODE	13:36	13:36	10	error
LEAF_NODE	13:41	13:41	8	)
LEAF_NODE	13:42	13:42	4	;
SELECTION	14:1	15:1	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	! result && * book != NULL
EXPR	14:5	14:5	5	! result && * book != NULL
AND	14:5	14:16	6	! result && * book != NULL
EXPR	14:5	14:5	7	! result
UNARY_EXPR	14:5	14:6	8	! result
UNARY_OPERATOR	14:5	14:5	9	!
LEAF_NODE	14:5	14:5	10	!
FIELD	14:6	14:6	9	result
LEAF_NODE	14:6	14:6	10	result
LEAF_NODE	14:13	14:13	7	&&
EXPR	14:16	14:25	7	* book != NULL
UNARY_EXPR	14:16	14:17	8	* book
UNARY_OPERATOR	14:16	14:16	9	*
LEAF_NODE	14:16	14:16	10	*
FIELD	14:17	14:17	9	book
LEAF_NODE	14:17	14:17	10	book
EQ_OPERATOR	14:22	14:22	8	!=
LEAF_NODE	14:22	14:22	9	!=
FIELD	14:25	14:25	8	NULL
LEAF_NODE	14:25	14:25	9	NULL
LEAF_NODE	14:29	14:29	4	)
STATEMENTS	15:1	18:1	4	
LEAF_NODE	15:1	15:1	5	{
STATEMENTS	16:2	17:2	5	
EXPR_STATEMENT	16:2	16:23	6	g_object_unref ( * book ) ;
EXPR	16:2	16:2	7	g_object_unref ( * book )
FUNCTION_CALL	16:2	16:22	8	g_object_unref ( * book )
CALLEE	16:2	16:2	9	g_object_unref
LEAF_NODE	16:2	16:2	10	g_object_unref
LEAF_NODE	16:16	16:16	9	(
ARGUMENT	16:17	16:17	9	* book
UNARY_EXPR	16:17	16:18	10	* book
UNARY_OPERATOR	16:17	16:17	11	*
LEAF_NODE	16:17	16:17	12	*
FIELD	16:18	16:18	11	book
LEAF_NODE	16:18	16:18	12	book
LEAF_NODE	16:22	16:22	9	)
LEAF_NODE	16:23	16:23	7	;
EXPR_STATEMENT	17:2	17:14	6	* book = NULL ;
EXPR	17:2	17:2	7	* book = NULL
ASSIGN	17:2	17:10	8	* book = NULL
LVAL	17:2	17:2	9	* book
UNARY_EXPR	17:2	17:3	10	* book
UNARY_OPERATOR	17:2	17:2	11	*
LEAF_NODE	17:2	17:2	12	*
FIELD	17:3	17:3	11	book
LEAF_NODE	17:3	17:3	12	book
ASSIGN_OP	17:8	17:8	9	=
LEAF_NODE	17:8	17:8	10	=
RVAL	17:10	17:10	9	NULL
FIELD	17:10	17:10	10	NULL
LEAF_NODE	17:10	17:10	11	NULL
LEAF_NODE	17:14	17:14	7	;
LEAF_NODE	18:1	18:1	5	}
JUMP_STATEMENT	19:1	19:14	3	return result ;
KEYWORD	19:1	19:1	4	return
LEAF_NODE	19:1	19:1	5	return
DESTINATION	19:8	19:8	4	result
EXPR	19:8	19:8	5	result
FIELD	19:8	19:8	6	result
LEAF_NODE	19:8	19:8	7	result
LEAF_NODE	19:14	19:14	4	;
LEAF_NODE	20:0	20:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	destroy_status_list
LEAF_NODE	2:0	2:0	3	destroy_status_list
PARAMETER_LIST	2:19	2:31	2	( GList * list )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:27	3	GList * list
TYPE	2:20	2:26	4	GList *
TYPE_NAME	2:20	2:20	5	GList
LEAF_NODE	2:20	2:20	6	GList
POINTER	2:26	2:26	5	*
LEAF_NODE	2:26	2:26	6	*
NAME	2:27	2:27	4	list
LEAF_NODE	2:27	2:27	5	list
LEAF_NODE	2:31	2:31	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:42	3	g_list_foreach ( list , ( GFunc ) g_free , NULL ) ;
EXPR	4:1	4:1	4	g_list_foreach ( list , ( GFunc ) g_free , NULL )
FUNCTION_CALL	4:1	4:41	5	g_list_foreach ( list , ( GFunc ) g_free , NULL )
CALLEE	4:1	4:1	6	g_list_foreach
LEAF_NODE	4:1	4:1	7	g_list_foreach
LEAF_NODE	4:15	4:15	6	(
ARGUMENT	4:16	4:16	6	list
FIELD	4:16	4:16	7	list
LEAF_NODE	4:16	4:16	8	list
LEAF_NODE	4:20	4:20	6	,
ARGUMENT	4:22	4:29	6	( GFunc ) g_free
LEAF_NODE	4:22	4:22	7	(
TYPE_NAME	4:23	4:23	7	GFunc
LEAF_NODE	4:23	4:23	8	GFunc
LEAF_NODE	4:28	4:28	7	)
FIELD	4:29	4:29	7	g_free
LEAF_NODE	4:29	4:29	8	g_free
LEAF_NODE	4:35	4:35	6	,
ARGUMENT	4:37	4:37	6	NULL
FIELD	4:37	4:37	7	NULL
LEAF_NODE	4:37	4:37	8	NULL
LEAF_NODE	4:41	4:41	6	)
LEAF_NODE	4:42	4:42	4	;
EXPR_STATEMENT	5:1	5:18	3	g_list_free ( list ) ;
EXPR	5:1	5:1	4	g_list_free ( list )
FUNCTION_CALL	5:1	5:17	5	g_list_free ( list )
CALLEE	5:1	5:1	6	g_list_free
LEAF_NODE	5:1	5:1	7	g_list_free
LEAF_NODE	5:12	5:12	6	(
ARGUMENT	5:13	5:13	6	list
FIELD	5:13	5:13	7	list
LEAF_NODE	5:13	5:13	8	list
LEAF_NODE	5:17	5:17	6	)
LEAF_NODE	5:18	5:18	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	9:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	gg_resolver_recv
LEAF_NODE	2:4	2:4	3	gg_resolver_recv
PARAMETER_LIST	2:20	2:50	2	( int fd , void * buf , size_t len )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:25	3	int fd
TYPE	2:21	2:21	4	int
TYPE_NAME	2:21	2:21	5	int
LEAF_NODE	2:21	2:21	6	int
NAME	2:25	2:25	4	fd
LEAF_NODE	2:25	2:25	5	fd
LEAF_NODE	2:27	2:27	3	,
PARAMETER_DECL	2:29	2:35	3	void * buf
TYPE	2:29	2:34	4	void *
TYPE_NAME	2:29	2:29	5	void
LEAF_NODE	2:29	2:29	6	void
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	buf
LEAF_NODE	2:35	2:35	5	buf
LEAF_NODE	2:38	2:38	3	,
PARAMETER_DECL	2:40	2:47	3	size_t len
TYPE	2:40	2:40	4	size_t
TYPE_NAME	2:40	2:40	5	size_t
LEAF_NODE	2:40	2:40	6	size_t
NAME	2:47	2:47	4	len
LEAF_NODE	2:47	2:47	5	len
LEAF_NODE	2:50	2:50	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	5:1	7:1	2	
JUMP_STATEMENT	5:1	5:26	3	return read ( fd , buf , len ) ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	read ( fd , buf , len )
EXPR	5:8	5:8	5	read ( fd , buf , len )
FUNCTION_CALL	5:8	5:25	6	read ( fd , buf , len )
CALLEE	5:8	5:8	7	read
LEAF_NODE	5:8	5:8	8	read
LEAF_NODE	5:12	5:12	7	(
ARGUMENT	5:13	5:13	7	fd
FIELD	5:13	5:13	8	fd
LEAF_NODE	5:13	5:13	9	fd
LEAF_NODE	5:15	5:15	7	,
ARGUMENT	5:17	5:17	7	buf
FIELD	5:17	5:17	8	buf
LEAF_NODE	5:17	5:17	9	buf
LEAF_NODE	5:20	5:20	7	,
ARGUMENT	5:22	5:22	7	len
FIELD	5:22	5:22	8	len
LEAF_NODE	5:22	5:22	9	len
LEAF_NODE	5:25	5:25	7	)
LEAF_NODE	5:26	5:26	4	;
JUMP_STATEMENT	7:1	7:29	3	return recv ( fd , buf , len , 0 ) ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	recv ( fd , buf , len , 0 )
EXPR	7:8	7:8	5	recv ( fd , buf , len , 0 )
FUNCTION_CALL	7:8	7:28	6	recv ( fd , buf , len , 0 )
CALLEE	7:8	7:8	7	recv
LEAF_NODE	7:8	7:8	8	recv
LEAF_NODE	7:12	7:12	7	(
ARGUMENT	7:13	7:13	7	fd
FIELD	7:13	7:13	8	fd
LEAF_NODE	7:13	7:13	9	fd
LEAF_NODE	7:15	7:15	7	,
ARGUMENT	7:17	7:17	7	buf
FIELD	7:17	7:17	8	buf
LEAF_NODE	7:17	7:17	9	buf
LEAF_NODE	7:20	7:20	7	,
ARGUMENT	7:22	7:22	7	len
FIELD	7:22	7:22	8	len
LEAF_NODE	7:22	7:22	9	len
LEAF_NODE	7:25	7:25	7	,
ARGUMENT	7:27	7:27	7	0
FIELD	7:27	7:27	8	0
LEAF_NODE	7:27	7:27	9	0
LEAF_NODE	7:28	7:28	7	)
LEAF_NODE	7:29	7:29	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	61:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	send_cb
LEAF_NODE	2:0	2:0	3	send_cb
PARAMETER_LIST	2:7	2:61	2	( gpointer data , gint source , PurpleInputCondition cond )
LEAF_NODE	2:7	2:7	3	(
PARAMETER_DECL	2:8	2:17	3	gpointer data
TYPE	2:8	2:8	4	gpointer
TYPE_NAME	2:8	2:8	5	gpointer
LEAF_NODE	2:8	2:8	6	gpointer
NAME	2:17	2:17	4	data
LEAF_NODE	2:17	2:17	5	data
LEAF_NODE	2:21	2:21	3	,
PARAMETER_DECL	2:23	2:28	3	gint source
TYPE	2:23	2:23	4	gint
TYPE_NAME	2:23	2:23	5	gint
LEAF_NODE	2:23	2:23	6	gint
NAME	2:28	2:28	4	source
LEAF_NODE	2:28	2:28	5	source
LEAF_NODE	2:34	2:34	3	,
PARAMETER_DECL	2:36	2:57	3	PurpleInputCondition cond
TYPE	2:36	2:36	4	PurpleInputCondition
TYPE_NAME	2:36	2:36	5	PurpleInputCondition
LEAF_NODE	2:36	2:36	6	PurpleInputCondition
NAME	2:57	2:57	4	cond
LEAF_NODE	2:57	2:57	5	cond
LEAF_NODE	2:61	2:61	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	60:1	2	
SIMPLE_DECL	4:1	4:21	3	PeerConnection * conn ;
VAR_DECL	4:1	4:17	4	PeerConnection * conn
TYPE	4:1	4:16	5	PeerConnection *
TYPE_NAME	4:1	4:1	6	PeerConnection
LEAF_NODE	4:1	4:1	7	PeerConnection
POINTER	4:16	4:16	6	*
LEAF_NODE	4:16	4:16	7	*
NAME	4:17	4:17	5	conn
LEAF_NODE	4:17	4:17	6	conn
LEAF_NODE	4:21	4:21	4	;
SIMPLE_DECL	5:1	5:15	3	gsize writelen ;
VAR_DECL	5:1	5:7	4	gsize writelen
TYPE	5:1	5:1	5	gsize
TYPE_NAME	5:1	5:1	6	gsize
LEAF_NODE	5:1	5:1	7	gsize
NAME	5:7	5:7	5	writelen
LEAF_NODE	5:7	5:7	6	writelen
LEAF_NODE	5:15	5:15	4	;
SIMPLE_DECL	6:1	6:16	3	gssize wrotelen ;
VAR_DECL	6:1	6:8	4	gssize wrotelen
TYPE	6:1	6:1	5	gssize
TYPE_NAME	6:1	6:1	6	gssize
LEAF_NODE	6:1	6:1	7	gssize
NAME	6:8	6:8	5	wrotelen
LEAF_NODE	6:8	6:8	6	wrotelen
LEAF_NODE	6:16	6:16	4	;
EXPR_STATEMENT	7:1	7:12	3	conn = data ;
EXPR	7:1	7:1	4	conn = data
ASSIGN	7:1	7:8	5	conn = data
LVAL	7:1	7:1	6	conn
FIELD	7:1	7:1	7	conn
LEAF_NODE	7:1	7:1	8	conn
ASSIGN_OP	7:6	7:6	6	=
LEAF_NODE	7:6	7:6	7	=
RVAL	7:8	7:8	6	data
FIELD	7:8	7:8	7	data
LEAF_NODE	7:8	7:8	8	data
LEAF_NODE	7:12	7:12	4	;
EXPR_STATEMENT	8:1	8:66	3	writelen = purple_circ_buffer_get_max_read ( conn -> buffer_outgoing ) ;
EXPR	8:1	8:1	4	writelen = purple_circ_buffer_get_max_read ( conn -> buffer_outgoing )
ASSIGN	8:1	8:12	5	writelen = purple_circ_buffer_get_max_read ( conn -> buffer_outgoing )
LVAL	8:1	8:1	6	writelen
FIELD	8:1	8:1	7	writelen
LEAF_NODE	8:1	8:1	8	writelen
ASSIGN_OP	8:10	8:10	6	=
LEAF_NODE	8:10	8:10	7	=
RVAL	8:12	8:12	6	purple_circ_buffer_get_max_read ( conn -> buffer_outgoing )
FUNCTION_CALL	8:12	8:65	7	purple_circ_buffer_get_max_read ( conn -> buffer_outgoing )
CALLEE	8:12	8:12	8	purple_circ_buffer_get_max_read
LEAF_NODE	8:12	8:12	9	purple_circ_buffer_get_max_read
LEAF_NODE	8:43	8:43	8	(
ARGUMENT	8:44	8:44	8	conn -> buffer_outgoing
FIELD	8:44	8:50	9	conn -> buffer_outgoing
LEAF_NODE	8:44	8:44	10	conn
LEAF_NODE	8:48	8:48	10	->
LEAF_NODE	8:50	8:50	10	buffer_outgoing
LEAF_NODE	8:65	8:65	8	)
LEAF_NODE	8:66	8:66	4	;
SELECTION	9:1	10:1	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	writelen == 0
EXPR	9:5	9:17	5	writelen == 0
FIELD	9:5	9:5	6	writelen
LEAF_NODE	9:5	9:5	7	writelen
EQ_OPERATOR	9:14	9:14	6	==
LEAF_NODE	9:14	9:14	7	==
FIELD	9:17	9:17	6	0
LEAF_NODE	9:17	9:17	7	0
LEAF_NODE	9:18	9:18	4	)
STATEMENTS	10:1	33:1	4	
LEAF_NODE	10:1	10:1	5	{
STATEMENTS	11:2	32:2	5	
EXPR_STATEMENT	11:2	11:45	6	purple_input_remove ( conn -> watcher_outgoing ) ;
EXPR	11:2	11:2	7	purple_input_remove ( conn -> watcher_outgoing )
FUNCTION_CALL	11:2	11:44	8	purple_input_remove ( conn -> watcher_outgoing )
CALLEE	11:2	11:2	9	purple_input_remove
LEAF_NODE	11:2	11:2	10	purple_input_remove
LEAF_NODE	11:21	11:21	9	(
ARGUMENT	11:22	11:22	9	conn -> watcher_outgoing
FIELD	11:22	11:28	10	conn -> watcher_outgoing
LEAF_NODE	11:22	11:22	11	conn
LEAF_NODE	11:26	11:26	11	->
LEAF_NODE	11:28	11:28	11	watcher_outgoing
LEAF_NODE	11:44	11:44	9	)
LEAF_NODE	11:45	11:45	7	;
EXPR_STATEMENT	12:2	12:28	6	conn -> watcher_outgoing = 0 ;
EXPR	12:2	12:2	7	conn -> watcher_outgoing = 0
ASSIGN	12:2	12:27	8	conn -> watcher_outgoing = 0
LVAL	12:2	12:2	9	conn -> watcher_outgoing
FIELD	12:2	12:8	10	conn -> watcher_outgoing
LEAF_NODE	12:2	12:2	11	conn
LEAF_NODE	12:6	12:6	11	->
LEAF_NODE	12:8	12:8	11	watcher_outgoing
ASSIGN_OP	12:25	12:25	9	=
LEAF_NODE	12:25	12:25	10	=
RVAL	12:27	12:27	9	0
FIELD	12:27	12:27	10	0
LEAF_NODE	12:27	12:27	11	0
LEAF_NODE	12:28	12:28	7	;
EXPR_STATEMENT	30:2	30:62	6	conn -> buffer_outgoing -> inptr = conn -> buffer_outgoing -> buffer ;
EXPR	30:2	30:2	7	conn -> buffer_outgoing -> inptr = conn -> buffer_outgoing -> buffer
ASSIGN	30:2	30:33	8	conn -> buffer_outgoing -> inptr = conn -> buffer_outgoing -> buffer
LVAL	30:2	30:2	9	conn -> buffer_outgoing -> inptr
FIELD	30:2	30:25	10	conn -> buffer_outgoing -> inptr
LEAF_NODE	30:2	30:2	11	conn
LEAF_NODE	30:6	30:6	11	->
LEAF_NODE	30:8	30:8	11	buffer_outgoing
LEAF_NODE	30:23	30:23	11	->
LEAF_NODE	30:25	30:25	11	inptr
ASSIGN_OP	30:31	30:31	9	=
LEAF_NODE	30:31	30:31	10	=
RVAL	30:33	30:33	9	conn -> buffer_outgoing -> buffer
FIELD	30:33	30:56	10	conn -> buffer_outgoing -> buffer
LEAF_NODE	30:33	30:33	11	conn
LEAF_NODE	30:37	30:37	11	->
LEAF_NODE	30:39	30:39	11	buffer_outgoing
LEAF_NODE	30:54	30:54	11	->
LEAF_NODE	30:56	30:56	11	buffer
LEAF_NODE	30:62	30:62	7	;
EXPR_STATEMENT	31:2	31:63	6	conn -> buffer_outgoing -> outptr = conn -> buffer_outgoing -> buffer ;
EXPR	31:2	31:2	7	conn -> buffer_outgoing -> outptr = conn -> buffer_outgoing -> buffer
ASSIGN	31:2	31:34	8	conn -> buffer_outgoing -> outptr = conn -> buffer_outgoing -> buffer
LVAL	31:2	31:2	9	conn -> buffer_outgoing -> outptr
FIELD	31:2	31:25	10	conn -> buffer_outgoing -> outptr
LEAF_NODE	31:2	31:2	11	conn
LEAF_NODE	31:6	31:6	11	->
LEAF_NODE	31:8	31:8	11	buffer_outgoing
LEAF_NODE	31:23	31:23	11	->
LEAF_NODE	31:25	31:25	11	outptr
ASSIGN_OP	31:32	31:32	9	=
LEAF_NODE	31:32	31:32	10	=
RVAL	31:34	31:34	9	conn -> buffer_outgoing -> buffer
FIELD	31:34	31:57	10	conn -> buffer_outgoing -> buffer
LEAF_NODE	31:34	31:34	11	conn
LEAF_NODE	31:38	31:38	11	->
LEAF_NODE	31:40	31:40	11	buffer_outgoing
LEAF_NODE	31:55	31:55	11	->
LEAF_NODE	31:57	31:57	11	buffer
LEAF_NODE	31:63	31:63	7	;
JUMP_STATEMENT	32:2	32:8	6	return DESTINATION ;
KEYWORD	32:2	32:2	7	return
LEAF_NODE	32:2	32:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	32:8	32:8	7	;
LEAF_NODE	33:1	33:1	5	}
EXPR_STATEMENT	34:1	34:70	3	wrotelen = send ( conn -> fd , conn -> buffer_outgoing -> outptr , writelen , 0 ) ;
EXPR	34:1	34:1	4	wrotelen = send ( conn -> fd , conn -> buffer_outgoing -> outptr , writelen , 0 )
ASSIGN	34:1	34:12	5	wrotelen = send ( conn -> fd , conn -> buffer_outgoing -> outptr , writelen , 0 )
LVAL	34:1	34:1	6	wrotelen
FIELD	34:1	34:1	7	wrotelen
LEAF_NODE	34:1	34:1	8	wrotelen
ASSIGN_OP	34:10	34:10	6	=
LEAF_NODE	34:10	34:10	7	=
RVAL	34:12	34:12	6	send ( conn -> fd , conn -> buffer_outgoing -> outptr , writelen , 0 )
FUNCTION_CALL	34:12	34:69	7	send ( conn -> fd , conn -> buffer_outgoing -> outptr , writelen , 0 )
CALLEE	34:12	34:12	8	send
LEAF_NODE	34:12	34:12	9	send
LEAF_NODE	34:16	34:16	8	(
ARGUMENT	34:17	34:17	8	conn -> fd
FIELD	34:17	34:23	9	conn -> fd
LEAF_NODE	34:17	34:17	10	conn
LEAF_NODE	34:21	34:21	10	->
LEAF_NODE	34:23	34:23	10	fd
LEAF_NODE	34:25	34:25	8	,
ARGUMENT	34:27	34:27	8	conn -> buffer_outgoing -> outptr
FIELD	34:27	34:50	9	conn -> buffer_outgoing -> outptr
LEAF_NODE	34:27	34:27	10	conn
LEAF_NODE	34:31	34:31	10	->
LEAF_NODE	34:33	34:33	10	buffer_outgoing
LEAF_NODE	34:48	34:48	10	->
LEAF_NODE	34:50	34:50	10	outptr
LEAF_NODE	34:56	34:56	8	,
ARGUMENT	34:58	34:58	8	writelen
FIELD	34:58	34:58	9	writelen
LEAF_NODE	34:58	34:58	10	writelen
LEAF_NODE	34:66	34:66	8	,
ARGUMENT	34:68	34:68	8	0
FIELD	34:68	34:68	9	0
LEAF_NODE	34:68	34:68	10	0
LEAF_NODE	34:69	34:69	8	)
LEAF_NODE	34:70	34:70	4	;
SELECTION	35:1	36:1	3	
KEYWORD	35:1	35:1	4	if
LEAF_NODE	35:1	35:1	5	if
LEAF_NODE	35:4	35:4	4	(
CONDITION	35:5	35:5	4	wrotelen <= 0
EXPR	35:5	35:17	5	wrotelen <= 0
FIELD	35:5	35:5	6	wrotelen
LEAF_NODE	35:5	35:5	7	wrotelen
REL_OPERATOR	35:14	35:14	6	<=
LEAF_NODE	35:14	35:14	7	<=
FIELD	35:17	35:17	6	0
LEAF_NODE	35:17	35:17	7	0
LEAF_NODE	35:18	35:18	4	)
STATEMENTS	36:1	58:1	4	
LEAF_NODE	36:1	36:1	5	{
STATEMENTS	37:2	57:2	5	
SELECTION	37:2	39:3	6	
KEYWORD	37:2	37:2	7	if
LEAF_NODE	37:2	37:2	8	if
LEAF_NODE	37:5	37:5	7	(
CONDITION	37:6	37:6	7	wrotelen < 0 && ( ( errno == EAGAIN ) || ( errno == EWOULDBLOCK ) )
EXPR	37:6	37:6	8	wrotelen < 0 && ( ( errno == EAGAIN ) || ( errno == EWOULDBLOCK ) )
AND	37:6	37:22	9	wrotelen < 0 && ( ( errno == EAGAIN ) || ( errno == EWOULDBLOCK ) )
EXPR	37:6	37:17	10	wrotelen < 0
FIELD	37:6	37:6	11	wrotelen
LEAF_NODE	37:6	37:6	12	wrotelen
REL_OPERATOR	37:15	37:15	11	<
LEAF_NODE	37:15	37:15	12	<
FIELD	37:17	37:17	11	0
LEAF_NODE	37:17	37:17	12	0
LEAF_NODE	37:19	37:19	10	&&
EXPR	37:22	37:66	10	( ( errno == EAGAIN ) || ( errno == EWOULDBLOCK ) )
LEAF_NODE	37:22	37:22	11	(
OR	37:23	37:44	11	( errno == EAGAIN ) || ( errno == EWOULDBLOCK )
EXPR	37:23	37:39	12	( errno == EAGAIN )
LEAF_NODE	37:23	37:23	13	(
FIELD	37:24	37:24	13	errno
LEAF_NODE	37:24	37:24	14	errno
EQ_OPERATOR	37:30	37:30	13	==
LEAF_NODE	37:30	37:30	14	==
FIELD	37:33	37:33	13	EAGAIN
LEAF_NODE	37:33	37:33	14	EAGAIN
LEAF_NODE	37:39	37:39	13	)
LEAF_NODE	37:41	37:41	12	||
EXPR	37:44	37:65	12	( errno == EWOULDBLOCK )
LEAF_NODE	37:44	37:44	13	(
FIELD	37:45	37:45	13	errno
LEAF_NODE	37:45	37:45	14	errno
EQ_OPERATOR	37:51	37:51	13	==
LEAF_NODE	37:51	37:51	14	==
FIELD	37:54	37:54	13	EWOULDBLOCK
LEAF_NODE	37:54	37:54	14	EWOULDBLOCK
LEAF_NODE	37:65	37:65	13	)
LEAF_NODE	37:66	37:66	11	)
LEAF_NODE	37:67	37:67	7	)
STATEMENTS	39:3	39:3	7	
JUMP_STATEMENT	39:3	39:9	8	return DESTINATION ;
KEYWORD	39:3	39:3	9	return
LEAF_NODE	39:3	39:3	10	return
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	39:9	39:9	9	;
SELECTION	40:2	41:2	6	
KEYWORD	40:2	40:2	7	if
LEAF_NODE	40:2	40:2	8	if
LEAF_NODE	40:5	40:5	7	(
CONDITION	40:6	40:6	7	conn -> ready
EXPR	40:6	40:6	8	conn -> ready
FIELD	40:6	40:12	9	conn -> ready
LEAF_NODE	40:6	40:6	10	conn
LEAF_NODE	40:10	40:10	10	->
LEAF_NODE	40:12	40:12	10	ready
LEAF_NODE	40:17	40:17	7	)
STATEMENTS	41:2	48:2	7	
LEAF_NODE	41:2	41:2	8	{
STATEMENTS	42:3	46:3	8	
EXPR_STATEMENT	42:3	42:46	9	purple_input_remove ( conn -> watcher_outgoing ) ;
EXPR	42:3	42:3	10	purple_input_remove ( conn -> watcher_outgoing )
FUNCTION_CALL	42:3	42:45	11	purple_input_remove ( conn -> watcher_outgoing )
CALLEE	42:3	42:3	12	purple_input_remove
LEAF_NODE	42:3	42:3	13	purple_input_remove
LEAF_NODE	42:22	42:22	12	(
ARGUMENT	42:23	42:23	12	conn -> watcher_outgoing
FIELD	42:23	42:29	13	conn -> watcher_outgoing
LEAF_NODE	42:23	42:23	14	conn
LEAF_NODE	42:27	42:27	14	->
LEAF_NODE	42:29	42:29	14	watcher_outgoing
LEAF_NODE	42:45	42:45	12	)
LEAF_NODE	42:46	42:46	10	;
EXPR_STATEMENT	43:3	43:29	9	conn -> watcher_outgoing = 0 ;
EXPR	43:3	43:3	10	conn -> watcher_outgoing = 0
ASSIGN	43:3	43:28	11	conn -> watcher_outgoing = 0
LVAL	43:3	43:3	12	conn -> watcher_outgoing
FIELD	43:3	43:9	13	conn -> watcher_outgoing
LEAF_NODE	43:3	43:3	14	conn
LEAF_NODE	43:7	43:7	14	->
LEAF_NODE	43:9	43:9	14	watcher_outgoing
ASSIGN_OP	43:26	43:26	12	=
LEAF_NODE	43:26	43:26	13	=
RVAL	43:28	43:28	12	0
FIELD	43:28	43:28	13	0
LEAF_NODE	43:28	43:28	14	0
LEAF_NODE	43:29	43:29	10	;
EXPR_STATEMENT	44:3	44:18	9	close ( conn -> fd ) ;
EXPR	44:3	44:3	10	close ( conn -> fd )
FUNCTION_CALL	44:3	44:17	11	close ( conn -> fd )
CALLEE	44:3	44:3	12	close
LEAF_NODE	44:3	44:3	13	close
LEAF_NODE	44:8	44:8	12	(
ARGUMENT	44:9	44:9	12	conn -> fd
FIELD	44:9	44:15	13	conn -> fd
LEAF_NODE	44:9	44:9	14	conn
LEAF_NODE	44:13	44:13	14	->
LEAF_NODE	44:15	44:15	14	fd
LEAF_NODE	44:17	44:17	12	)
LEAF_NODE	44:18	44:18	10	;
EXPR_STATEMENT	45:3	45:16	9	conn -> fd = - 1 ;
EXPR	45:3	45:3	10	conn -> fd = - 1
ASSIGN	45:3	45:14	11	conn -> fd = - 1
LVAL	45:3	45:3	12	conn -> fd
FIELD	45:3	45:9	13	conn -> fd
LEAF_NODE	45:3	45:3	14	conn
LEAF_NODE	45:7	45:7	14	->
LEAF_NODE	45:9	45:9	14	fd
ASSIGN_OP	45:12	45:12	12	=
LEAF_NODE	45:12	45:12	13	=
RVAL	45:14	45:14	12	- 1
UNARY_EXPR	45:14	45:15	13	- 1
UNARY_OPERATOR	45:14	45:14	14	-
LEAF_NODE	45:14	45:14	15	-
FIELD	45:15	45:15	14	1
LEAF_NODE	45:15	45:15	15	1
LEAF_NODE	45:16	45:16	10	;
EXPR_STATEMENT	46:3	47:44	9	peer_connection_schedule_destroy ( conn , OSCAR_DISCONNECT_LOST_CONNECTION , NULL ) ;
EXPR	46:3	46:3	10	peer_connection_schedule_destroy ( conn , OSCAR_DISCONNECT_LOST_CONNECTION , NULL )
FUNCTION_CALL	46:3	47:43	11	peer_connection_schedule_destroy ( conn , OSCAR_DISCONNECT_LOST_CONNECTION , NULL )
CALLEE	46:3	46:3	12	peer_connection_schedule_destroy
LEAF_NODE	46:3	46:3	13	peer_connection_schedule_destroy
LEAF_NODE	46:35	46:35	12	(
ARGUMENT	46:36	46:36	12	conn
FIELD	46:36	46:36	13	conn
LEAF_NODE	46:36	46:36	14	conn
LEAF_NODE	46:40	46:40	12	,
ARGUMENT	47:5	47:5	12	OSCAR_DISCONNECT_LOST_CONNECTION
FIELD	47:5	47:5	13	OSCAR_DISCONNECT_LOST_CONNECTION
LEAF_NODE	47:5	47:5	14	OSCAR_DISCONNECT_LOST_CONNECTION
LEAF_NODE	47:37	47:37	12	,
ARGUMENT	47:39	47:39	12	NULL
FIELD	47:39	47:39	13	NULL
LEAF_NODE	47:39	47:39	14	NULL
LEAF_NODE	47:43	47:43	12	)
LEAF_NODE	47:44	47:44	10	;
LEAF_NODE	48:2	48:2	8	}
SELECTION	49:2	50:2	6	
KEYWORD	49:2	49:2	7	else
LEAF_NODE	49:2	49:2	8	else
STATEMENTS	50:2	56:2	7	
LEAF_NODE	50:2	50:2	8	{
STATEMENTS	55:3	55:3	8	
EXPR_STATEMENT	55:3	55:32	9	peer_connection_trynext ( conn ) ;
EXPR	55:3	55:3	10	peer_connection_trynext ( conn )
FUNCTION_CALL	55:3	55:31	11	peer_connection_trynext ( conn )
CALLEE	55:3	55:3	12	peer_connection_trynext
LEAF_NODE	55:3	55:3	13	peer_connection_trynext
LEAF_NODE	55:26	55:26	12	(
ARGUMENT	55:27	55:27	12	conn
FIELD	55:27	55:27	13	conn
LEAF_NODE	55:27	55:27	14	conn
LEAF_NODE	55:31	55:31	12	)
LEAF_NODE	55:32	55:32	10	;
LEAF_NODE	56:2	56:2	8	}
JUMP_STATEMENT	57:2	57:8	6	return DESTINATION ;
KEYWORD	57:2	57:2	7	return
LEAF_NODE	57:2	57:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	57:8	57:8	7	;
LEAF_NODE	58:1	58:1	5	}
EXPR_STATEMENT	59:1	59:62	3	purple_circ_buffer_mark_read ( conn -> buffer_outgoing , wrotelen ) ;
EXPR	59:1	59:1	4	purple_circ_buffer_mark_read ( conn -> buffer_outgoing , wrotelen )
FUNCTION_CALL	59:1	59:61	5	purple_circ_buffer_mark_read ( conn -> buffer_outgoing , wrotelen )
CALLEE	59:1	59:1	6	purple_circ_buffer_mark_read
LEAF_NODE	59:1	59:1	7	purple_circ_buffer_mark_read
LEAF_NODE	59:29	59:29	6	(
ARGUMENT	59:30	59:30	6	conn -> buffer_outgoing
FIELD	59:30	59:36	7	conn -> buffer_outgoing
LEAF_NODE	59:30	59:30	8	conn
LEAF_NODE	59:34	59:34	8	->
LEAF_NODE	59:36	59:36	8	buffer_outgoing
LEAF_NODE	59:51	59:51	6	,
ARGUMENT	59:53	59:53	6	wrotelen
FIELD	59:53	59:53	7	wrotelen
LEAF_NODE	59:53	59:53	8	wrotelen
LEAF_NODE	59:61	59:61	6	)
LEAF_NODE	59:62	59:62	4	;
EXPR_STATEMENT	60:1	60:32	3	conn -> lastactivity = time ( NULL ) ;
EXPR	60:1	60:1	4	conn -> lastactivity = time ( NULL )
ASSIGN	60:1	60:22	5	conn -> lastactivity = time ( NULL )
LVAL	60:1	60:1	6	conn -> lastactivity
FIELD	60:1	60:7	7	conn -> lastactivity
LEAF_NODE	60:1	60:1	8	conn
LEAF_NODE	60:5	60:5	8	->
LEAF_NODE	60:7	60:7	8	lastactivity
ASSIGN_OP	60:20	60:20	6	=
LEAF_NODE	60:20	60:20	7	=
RVAL	60:22	60:22	6	time ( NULL )
FUNCTION_CALL	60:22	60:31	7	time ( NULL )
CALLEE	60:22	60:22	8	time
LEAF_NODE	60:22	60:22	9	time
LEAF_NODE	60:26	60:26	8	(
ARGUMENT	60:27	60:27	8	NULL
FIELD	60:27	60:27	9	NULL
LEAF_NODE	60:27	60:27	10	NULL
LEAF_NODE	60:31	60:31	8	)
LEAF_NODE	60:32	60:32	4	;
LEAF_NODE	61:0	61:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	17:0	1	
RETURN_TYPE	1:0	1:15	2	FlapConnection *
TYPE_NAME	1:0	1:0	3	FlapConnection
LEAF_NODE	1:0	1:0	4	FlapConnection
LEAF_NODE	1:15	1:15	3	*
FUNCTION_NAME	2:0	2:0	2	flap_connection_findbygroup
LEAF_NODE	2:0	2:0	3	flap_connection_findbygroup
PARAMETER_LIST	2:27	2:56	2	( OscarData * od , guint16 group )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:39	3	OscarData * od
TYPE	2:28	2:38	4	OscarData *
TYPE_NAME	2:28	2:28	5	OscarData
LEAF_NODE	2:28	2:28	6	OscarData
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	od
LEAF_NODE	2:39	2:39	5	od
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:51	3	guint16 group
TYPE	2:43	2:43	4	guint16
TYPE_NAME	2:43	2:43	5	guint16
LEAF_NODE	2:43	2:43	6	guint16
NAME	2:51	2:51	4	group
LEAF_NODE	2:51	2:51	5	group
LEAF_NODE	2:56	2:56	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	16:1	2	
SIMPLE_DECL	4:1	4:12	3	GSList * cur ;
VAR_DECL	4:1	4:9	4	GSList * cur
TYPE	4:1	4:8	5	GSList *
TYPE_NAME	4:1	4:1	6	GSList
LEAF_NODE	4:1	4:1	7	GSList
POINTER	4:8	4:8	6	*
LEAF_NODE	4:8	4:8	7	*
NAME	4:9	4:9	5	cur
LEAF_NODE	4:9	4:9	6	cur
LEAF_NODE	4:12	4:12	4	;
ITERATION	5:1	6:1	3	
KEYWORD	5:1	5:1	4	for
LEAF_NODE	5:1	5:1	5	for
LEAF_NODE	5:5	5:5	4	(
FOR_INIT	5:6	5:33	4	cur = od -> oscar_connections ;
EXPR	5:6	5:6	5	cur = od -> oscar_connections
ASSIGN	5:6	5:12	6	cur = od -> oscar_connections
LVAL	5:6	5:6	7	cur
FIELD	5:6	5:6	8	cur
LEAF_NODE	5:6	5:6	9	cur
ASSIGN_OP	5:10	5:10	7	=
LEAF_NODE	5:10	5:10	8	=
RVAL	5:12	5:12	7	od -> oscar_connections
FIELD	5:12	5:16	8	od -> oscar_connections
LEAF_NODE	5:12	5:12	9	od
LEAF_NODE	5:14	5:14	9	->
LEAF_NODE	5:16	5:16	9	oscar_connections
LEAF_NODE	5:33	5:33	5	;
CONDITION	5:35	5:35	4	cur != NULL
EXPR	5:35	5:42	5	cur != NULL
FIELD	5:35	5:35	6	cur
LEAF_NODE	5:35	5:35	7	cur
EQ_OPERATOR	5:39	5:39	6	!=
LEAF_NODE	5:39	5:39	7	!=
FIELD	5:42	5:42	6	NULL
LEAF_NODE	5:42	5:42	7	NULL
LEAF_NODE	5:46	5:46	4	;
FOR_EXPR	5:48	5:48	4	cur = cur -> next
EXPR	5:48	5:48	5	cur = cur -> next
ASSIGN	5:48	5:54	6	cur = cur -> next
LVAL	5:48	5:48	7	cur
FIELD	5:48	5:48	8	cur
LEAF_NODE	5:48	5:48	9	cur
ASSIGN_OP	5:52	5:52	7	=
LEAF_NODE	5:52	5:52	8	=
RVAL	5:54	5:54	7	cur -> next
FIELD	5:54	5:59	8	cur -> next
LEAF_NODE	5:54	5:54	9	cur
LEAF_NODE	5:57	5:57	9	->
LEAF_NODE	5:59	5:59	9	next
LEAF_NODE	5:63	5:63	4	)
STATEMENTS	6:1	15:1	4	
LEAF_NODE	6:1	6:1	5	{
STATEMENTS	7:2	10:2	5	
SIMPLE_DECL	7:2	7:22	6	FlapConnection * conn ;
VAR_DECL	7:2	7:18	7	FlapConnection * conn
TYPE	7:2	7:17	8	FlapConnection *
TYPE_NAME	7:2	7:2	9	FlapConnection
LEAF_NODE	7:2	7:2	10	FlapConnection
POINTER	7:17	7:17	9	*
LEAF_NODE	7:17	7:17	10	*
NAME	7:18	7:18	8	conn
LEAF_NODE	7:18	7:18	9	conn
LEAF_NODE	7:22	7:22	7	;
SIMPLE_DECL	8:2	8:11	6	GSList * l ;
VAR_DECL	8:2	8:10	7	GSList * l
TYPE	8:2	8:9	8	GSList *
TYPE_NAME	8:2	8:2	9	GSList
LEAF_NODE	8:2	8:2	10	GSList
POINTER	8:9	8:9	9	*
LEAF_NODE	8:9	8:9	10	*
NAME	8:10	8:10	8	l
LEAF_NODE	8:10	8:10	9	l
LEAF_NODE	8:11	8:11	7	;
EXPR_STATEMENT	9:2	9:18	6	conn = cur -> data ;
EXPR	9:2	9:2	7	conn = cur -> data
ASSIGN	9:2	9:9	8	conn = cur -> data
LVAL	9:2	9:2	9	conn
FIELD	9:2	9:2	10	conn
LEAF_NODE	9:2	9:2	11	conn
ASSIGN_OP	9:7	9:7	9	=
LEAF_NODE	9:7	9:7	10	=
RVAL	9:9	9:9	9	cur -> data
FIELD	9:9	9:14	10	cur -> data
LEAF_NODE	9:9	9:9	11	cur
LEAF_NODE	9:12	9:12	11	->
LEAF_NODE	9:14	9:14	11	data
LEAF_NODE	9:18	9:18	7	;
ITERATION	10:2	11:2	6	
KEYWORD	10:2	10:2	7	for
LEAF_NODE	10:2	10:2	8	for
LEAF_NODE	10:6	10:6	7	(
FOR_INIT	10:7	10:23	7	l = conn -> groups ;
EXPR	10:7	10:7	8	l = conn -> groups
ASSIGN	10:7	10:11	9	l = conn -> groups
LVAL	10:7	10:7	10	l
FIELD	10:7	10:7	11	l
LEAF_NODE	10:7	10:7	12	l
ASSIGN_OP	10:9	10:9	10	=
LEAF_NODE	10:9	10:9	11	=
RVAL	10:11	10:11	10	conn -> groups
FIELD	10:11	10:17	11	conn -> groups
LEAF_NODE	10:11	10:11	12	conn
LEAF_NODE	10:15	10:15	12	->
LEAF_NODE	10:17	10:17	12	groups
LEAF_NODE	10:23	10:23	8	;
CONDITION	10:25	10:25	7	l != NULL
EXPR	10:25	10:30	8	l != NULL
FIELD	10:25	10:25	9	l
LEAF_NODE	10:25	10:25	10	l
EQ_OPERATOR	10:27	10:27	9	!=
LEAF_NODE	10:27	10:27	10	!=
FIELD	10:30	10:30	9	NULL
LEAF_NODE	10:30	10:30	10	NULL
LEAF_NODE	10:34	10:34	7	;
FOR_EXPR	10:36	10:36	7	l = l -> next
EXPR	10:36	10:36	8	l = l -> next
ASSIGN	10:36	10:40	9	l = l -> next
LVAL	10:36	10:36	10	l
FIELD	10:36	10:36	11	l
LEAF_NODE	10:36	10:36	12	l
ASSIGN_OP	10:38	10:38	10	=
LEAF_NODE	10:38	10:38	11	=
RVAL	10:40	10:40	10	l -> next
FIELD	10:40	10:43	11	l -> next
LEAF_NODE	10:40	10:40	12	l
LEAF_NODE	10:41	10:41	12	->
LEAF_NODE	10:43	10:43	12	next
LEAF_NODE	10:47	10:47	7	)
STATEMENTS	11:2	14:2	7	
LEAF_NODE	11:2	11:2	8	{
STATEMENTS	12:3	12:3	8	
SELECTION	12:3	13:4	9	
KEYWORD	12:3	12:3	10	if
LEAF_NODE	12:3	12:3	11	if
LEAF_NODE	12:6	12:6	10	(
CONDITION	12:7	12:7	10	GPOINTER_TO_UINT ( l -> data ) == group
EXPR	12:7	12:36	11	GPOINTER_TO_UINT ( l -> data ) == group
FUNCTION_CALL	12:7	12:31	12	GPOINTER_TO_UINT ( l -> data )
CALLEE	12:7	12:7	13	GPOINTER_TO_UINT
LEAF_NODE	12:7	12:7	14	GPOINTER_TO_UINT
LEAF_NODE	12:23	12:23	13	(
ARGUMENT	12:24	12:24	13	l -> data
FIELD	12:24	12:27	14	l -> data
LEAF_NODE	12:24	12:24	15	l
LEAF_NODE	12:25	12:25	15	->
LEAF_NODE	12:27	12:27	15	data
LEAF_NODE	12:31	12:31	13	)
EQ_OPERATOR	12:33	12:33	12	==
LEAF_NODE	12:33	12:33	13	==
FIELD	12:36	12:36	12	group
LEAF_NODE	12:36	12:36	13	group
LEAF_NODE	12:41	12:41	10	)
STATEMENTS	13:4	13:4	10	
JUMP_STATEMENT	13:4	13:15	11	return conn ;
KEYWORD	13:4	13:4	12	return
LEAF_NODE	13:4	13:4	13	return
DESTINATION	13:11	13:11	12	conn
EXPR	13:11	13:11	13	conn
FIELD	13:11	13:11	14	conn
LEAF_NODE	13:11	13:11	15	conn
LEAF_NODE	13:15	13:15	12	;
LEAF_NODE	14:2	14:2	8	}
LEAF_NODE	15:1	15:1	5	}
JUMP_STATEMENT	16:1	16:12	3	return NULL ;
KEYWORD	16:1	16:1	4	return
LEAF_NODE	16:1	16:1	5	return
DESTINATION	16:8	16:8	4	NULL
EXPR	16:8	16:8	5	NULL
FIELD	16:8	16:8	6	NULL
LEAF_NODE	16:8	16:8	7	NULL
LEAF_NODE	16:12	16:12	4	;
LEAF_NODE	17:0	17:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	13:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	irc_ison_one
LEAF_NODE	2:12	2:12	3	irc_ison_one
PARAMETER_LIST	2:24	2:67	2	( struct irc_conn * irc , struct irc_buddy * ib )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:42	3	struct irc_conn * irc
TYPE	2:25	2:41	4	struct irc_conn *
TYPE_NAME	2:25	2:32	5	struct irc_conn
LEAF_NODE	2:25	2:25	6	struct
LEAF_NODE	2:32	2:32	6	irc_conn
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	irc
LEAF_NODE	2:42	2:42	5	irc
LEAF_NODE	2:45	2:45	3	,
PARAMETER_DECL	2:47	2:65	3	struct irc_buddy * ib
TYPE	2:47	2:64	4	struct irc_buddy *
TYPE_NAME	2:47	2:54	5	struct irc_buddy
LEAF_NODE	2:47	2:47	6	struct
LEAF_NODE	2:54	2:54	6	irc_buddy
POINTER	2:64	2:64	5	*
LEAF_NODE	2:64	2:64	6	*
NAME	2:65	2:65	4	ib
LEAF_NODE	2:65	2:65	5	ib
LEAF_NODE	2:67	2:67	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	12:1	2	
SIMPLE_DECL	4:1	4:10	3	char * buf ;
VAR_DECL	4:1	4:7	4	char * buf
TYPE	4:1	4:6	5	char *
TYPE_NAME	4:1	4:1	6	char
LEAF_NODE	4:1	4:1	7	char
POINTER	4:6	4:6	6	*
LEAF_NODE	4:6	4:6	7	*
NAME	4:7	4:7	5	buf
LEAF_NODE	4:7	4:7	6	buf
LEAF_NODE	4:10	4:10	4	;
SELECTION	5:1	5:39	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	irc -> buddies_outstanding != NULL
EXPR	5:5	5:33	5	irc -> buddies_outstanding != NULL
FIELD	5:5	5:10	6	irc -> buddies_outstanding
LEAF_NODE	5:5	5:5	7	irc
LEAF_NODE	5:8	5:8	7	->
LEAF_NODE	5:10	5:10	7	buddies_outstanding
EQ_OPERATOR	5:30	5:30	6	!=
LEAF_NODE	5:30	5:30	7	!=
FIELD	5:33	5:33	6	NULL
LEAF_NODE	5:33	5:33	7	NULL
LEAF_NODE	5:37	5:37	4	)
STATEMENTS	5:39	8:1	4	
LEAF_NODE	5:39	5:39	5	{
STATEMENTS	6:2	7:2	5	
EXPR_STATEMENT	6:2	6:72	6	irc -> buddies_outstanding = g_list_append ( irc -> buddies_outstanding , ib ) ;
EXPR	6:2	6:2	7	irc -> buddies_outstanding = g_list_append ( irc -> buddies_outstanding , ib )
ASSIGN	6:2	6:29	8	irc -> buddies_outstanding = g_list_append ( irc -> buddies_outstanding , ib )
LVAL	6:2	6:2	9	irc -> buddies_outstanding
FIELD	6:2	6:7	10	irc -> buddies_outstanding
LEAF_NODE	6:2	6:2	11	irc
LEAF_NODE	6:5	6:5	11	->
LEAF_NODE	6:7	6:7	11	buddies_outstanding
ASSIGN_OP	6:27	6:27	9	=
LEAF_NODE	6:27	6:27	10	=
RVAL	6:29	6:29	9	g_list_append ( irc -> buddies_outstanding , ib )
FUNCTION_CALL	6:29	6:71	10	g_list_append ( irc -> buddies_outstanding , ib )
CALLEE	6:29	6:29	11	g_list_append
LEAF_NODE	6:29	6:29	12	g_list_append
LEAF_NODE	6:42	6:42	11	(
ARGUMENT	6:43	6:43	11	irc -> buddies_outstanding
FIELD	6:43	6:48	12	irc -> buddies_outstanding
LEAF_NODE	6:43	6:43	13	irc
LEAF_NODE	6:46	6:46	13	->
LEAF_NODE	6:48	6:48	13	buddies_outstanding
LEAF_NODE	6:67	6:67	11	,
ARGUMENT	6:69	6:69	11	ib
FIELD	6:69	6:69	12	ib
LEAF_NODE	6:69	6:69	13	ib
LEAF_NODE	6:71	6:71	11	)
LEAF_NODE	6:72	6:72	7	;
JUMP_STATEMENT	7:2	7:8	6	return DESTINATION ;
KEYWORD	7:2	7:2	7	return
LEAF_NODE	7:2	7:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	7:8	7:8	7	;
LEAF_NODE	8:1	8:1	5	}
EXPR_STATEMENT	9:1	9:30	3	ib -> new_online_status = FALSE ;
EXPR	9:1	9:1	4	ib -> new_online_status = FALSE
ASSIGN	9:1	9:25	5	ib -> new_online_status = FALSE
LVAL	9:1	9:1	6	ib -> new_online_status
FIELD	9:1	9:5	7	ib -> new_online_status
LEAF_NODE	9:1	9:1	8	ib
LEAF_NODE	9:3	9:3	8	->
LEAF_NODE	9:5	9:5	8	new_online_status
ASSIGN_OP	9:23	9:23	6	=
LEAF_NODE	9:23	9:23	7	=
RVAL	9:25	9:25	6	FALSE
FIELD	9:25	9:25	7	FALSE
LEAF_NODE	9:25	9:25	8	FALSE
LEAF_NODE	9:30	9:30	4	;
EXPR_STATEMENT	10:1	10:46	3	buf = irc_format ( irc , "vn" , "ISON" , ib -> name ) ;
EXPR	10:1	10:1	4	buf = irc_format ( irc , "vn" , "ISON" , ib -> name )
ASSIGN	10:1	10:7	5	buf = irc_format ( irc , "vn" , "ISON" , ib -> name )
LVAL	10:1	10:1	6	buf
FIELD	10:1	10:1	7	buf
LEAF_NODE	10:1	10:1	8	buf
ASSIGN_OP	10:5	10:5	6	=
LEAF_NODE	10:5	10:5	7	=
RVAL	10:7	10:7	6	irc_format ( irc , "vn" , "ISON" , ib -> name )
FUNCTION_CALL	10:7	10:45	7	irc_format ( irc , "vn" , "ISON" , ib -> name )
CALLEE	10:7	10:7	8	irc_format
LEAF_NODE	10:7	10:7	9	irc_format
LEAF_NODE	10:17	10:17	8	(
ARGUMENT	10:18	10:18	8	irc
FIELD	10:18	10:18	9	irc
LEAF_NODE	10:18	10:18	10	irc
LEAF_NODE	10:21	10:21	8	,
ARGUMENT	10:23	10:23	8	"vn"
FIELD	10:23	10:23	9	"vn"
LEAF_NODE	10:23	10:23	10	"vn"
LEAF_NODE	10:27	10:27	8	,
ARGUMENT	10:29	10:29	8	"ISON"
FIELD	10:29	10:29	9	"ISON"
LEAF_NODE	10:29	10:29	10	"ISON"
LEAF_NODE	10:35	10:35	8	,
ARGUMENT	10:37	10:37	8	ib -> name
FIELD	10:37	10:41	9	ib -> name
LEAF_NODE	10:37	10:37	10	ib
LEAF_NODE	10:39	10:39	10	->
LEAF_NODE	10:41	10:41	10	name
LEAF_NODE	10:45	10:45	8	)
LEAF_NODE	10:46	10:46	4	;
EXPR_STATEMENT	11:1	11:19	3	irc_send ( irc , buf ) ;
EXPR	11:1	11:1	4	irc_send ( irc , buf )
FUNCTION_CALL	11:1	11:18	5	irc_send ( irc , buf )
CALLEE	11:1	11:1	6	irc_send
LEAF_NODE	11:1	11:1	7	irc_send
LEAF_NODE	11:9	11:9	6	(
ARGUMENT	11:10	11:10	6	irc
FIELD	11:10	11:10	7	irc
LEAF_NODE	11:10	11:10	8	irc
LEAF_NODE	11:13	11:13	6	,
ARGUMENT	11:15	11:15	6	buf
FIELD	11:15	11:15	7	buf
LEAF_NODE	11:15	11:15	8	buf
LEAF_NODE	11:18	11:18	6	)
LEAF_NODE	11:19	11:19	4	;
EXPR_STATEMENT	12:1	12:12	3	g_free ( buf ) ;
EXPR	12:1	12:1	4	g_free ( buf )
FUNCTION_CALL	12:1	12:11	5	g_free ( buf )
CALLEE	12:1	12:1	6	g_free
LEAF_NODE	12:1	12:1	7	g_free
LEAF_NODE	12:7	12:7	6	(
ARGUMENT	12:8	12:8	6	buf
FIELD	12:8	12:8	7	buf
LEAF_NODE	12:8	12:8	8	buf
LEAF_NODE	12:11	12:11	6	)
LEAF_NODE	12:12	12:12	4	;
LEAF_NODE	13:0	13:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	gnt_entry_clicked
LEAF_NODE	2:0	2:0	3	gnt_entry_clicked
PARAMETER_LIST	2:17	2:70	2	( GntWidget * widget , GntMouseEvent event , int x , int y )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:29	3	GntWidget * widget
TYPE	2:18	2:28	4	GntWidget *
TYPE_NAME	2:18	2:18	5	GntWidget
LEAF_NODE	2:18	2:18	6	GntWidget
POINTER	2:28	2:28	5	*
LEAF_NODE	2:28	2:28	6	*
NAME	2:29	2:29	4	widget
LEAF_NODE	2:29	2:29	5	widget
LEAF_NODE	2:35	2:35	3	,
PARAMETER_DECL	2:37	2:51	3	GntMouseEvent event
TYPE	2:37	2:37	4	GntMouseEvent
TYPE_NAME	2:37	2:37	5	GntMouseEvent
LEAF_NODE	2:37	2:37	6	GntMouseEvent
NAME	2:51	2:51	4	event
LEAF_NODE	2:51	2:51	5	event
LEAF_NODE	2:56	2:56	3	,
PARAMETER_DECL	2:58	2:62	3	int x
TYPE	2:58	2:58	4	int
TYPE_NAME	2:58	2:58	5	int
LEAF_NODE	2:58	2:58	6	int
NAME	2:62	2:62	4	x
LEAF_NODE	2:62	2:62	5	x
LEAF_NODE	2:63	2:63	3	,
PARAMETER_DECL	2:65	2:69	3	int y
TYPE	2:65	2:65	4	int
TYPE_NAME	2:65	2:65	5	int
LEAF_NODE	2:65	2:65	6	int
NAME	2:69	2:69	4	y
LEAF_NODE	2:69	2:69	5	y
LEAF_NODE	2:70	2:70	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SELECTION	4:1	4:37	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	event == GNT_MIDDLE_MOUSE_DOWN
EXPR	4:5	4:14	5	event == GNT_MIDDLE_MOUSE_DOWN
FIELD	4:5	4:5	6	event
LEAF_NODE	4:5	4:5	7	event
EQ_OPERATOR	4:11	4:11	6	==
LEAF_NODE	4:11	4:11	7	==
FIELD	4:14	4:14	6	GNT_MIDDLE_MOUSE_DOWN
LEAF_NODE	4:14	4:14	7	GNT_MIDDLE_MOUSE_DOWN
LEAF_NODE	4:35	4:35	4	)
STATEMENTS	4:37	7:1	4	
LEAF_NODE	4:37	4:37	5	{
STATEMENTS	5:2	6:2	5	
EXPR_STATEMENT	5:2	5:45	6	clipboard_paste ( GNT_BINDABLE ( widget ) , NULL ) ;
EXPR	5:2	5:2	7	clipboard_paste ( GNT_BINDABLE ( widget ) , NULL )
FUNCTION_CALL	5:2	5:44	8	clipboard_paste ( GNT_BINDABLE ( widget ) , NULL )
CALLEE	5:2	5:2	9	clipboard_paste
LEAF_NODE	5:2	5:2	10	clipboard_paste
LEAF_NODE	5:17	5:17	9	(
ARGUMENT	5:18	5:18	9	GNT_BINDABLE ( widget )
FUNCTION_CALL	5:18	5:37	10	GNT_BINDABLE ( widget )
CALLEE	5:18	5:18	11	GNT_BINDABLE
LEAF_NODE	5:18	5:18	12	GNT_BINDABLE
LEAF_NODE	5:30	5:30	11	(
ARGUMENT	5:31	5:31	11	widget
FIELD	5:31	5:31	12	widget
LEAF_NODE	5:31	5:31	13	widget
LEAF_NODE	5:37	5:37	11	)
LEAF_NODE	5:38	5:38	9	,
ARGUMENT	5:40	5:40	9	NULL
FIELD	5:40	5:40	10	NULL
LEAF_NODE	5:40	5:40	11	NULL
LEAF_NODE	5:44	5:44	9	)
LEAF_NODE	5:45	5:45	7	;
JUMP_STATEMENT	6:2	6:13	6	return TRUE ;
KEYWORD	6:2	6:2	7	return
LEAF_NODE	6:2	6:2	8	return
DESTINATION	6:9	6:9	7	TRUE
EXPR	6:9	6:9	8	TRUE
FIELD	6:9	6:9	9	TRUE
LEAF_NODE	6:9	6:9	10	TRUE
LEAF_NODE	6:13	6:13	7	;
LEAF_NODE	7:1	7:1	5	}
JUMP_STATEMENT	8:1	8:13	3	return FALSE ;
KEYWORD	8:1	8:1	4	return
LEAF_NODE	8:1	8:1	5	return
DESTINATION	8:8	8:8	4	FALSE
EXPR	8:8	8:8	5	FALSE
FIELD	8:8	8:8	6	FALSE
LEAF_NODE	8:8	8:8	7	FALSE
LEAF_NODE	8:13	8:13	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	7:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	foreach_nullprpl_gc
LEAF_NODE	2:12	2:12	3	foreach_nullprpl_gc
PARAMETER_LIST	2:31	3:49	2	( GcFunc fn , PurpleConnection * from , gpointer userdata )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:39	3	GcFunc fn
TYPE	2:32	2:32	4	GcFunc
TYPE_NAME	2:32	2:32	5	GcFunc
LEAF_NODE	2:32	2:32	6	GcFunc
NAME	2:39	2:39	4	fn
LEAF_NODE	2:39	2:39	5	fn
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:61	3	PurpleConnection * from
TYPE	2:43	2:60	4	PurpleConnection *
TYPE_NAME	2:43	2:43	5	PurpleConnection
LEAF_NODE	2:43	2:43	6	PurpleConnection
POINTER	2:60	2:60	5	*
LEAF_NODE	2:60	2:60	6	*
NAME	2:61	2:61	4	from
LEAF_NODE	2:61	2:61	5	from
LEAF_NODE	2:65	2:65	3	,
PARAMETER_DECL	3:32	3:41	3	gpointer userdata
TYPE	3:32	3:32	4	gpointer
TYPE_NAME	3:32	3:32	5	gpointer
LEAF_NODE	3:32	3:32	6	gpointer
NAME	3:41	3:41	4	userdata
LEAF_NODE	3:41	3:41	5	userdata
LEAF_NODE	3:49	3:49	3	)
LEAF_NODE	3:51	3:51	2	{
STATEMENTS	4:2	5:2	2	
LEAF_NODE	4:2	4:2	3	GcFuncData
LEAF_NODE	4:13	4:13	3	gcfdata
LEAF_NODE	4:21	4:21	3	=
LEAF_NODE	4:23	4:23	3	{
STATEMENTS	4:25	4:35	3	
LEAF_NODE	4:25	4:25	4	fn
LEAF_NODE	4:27	4:27	4	,
LEAF_NODE	4:29	4:29	4	from
LEAF_NODE	4:33	4:33	4	,
LEAF_NODE	4:35	4:35	4	userdata
LEAF_NODE	4:44	4:44	3	}
LEAF_NODE	4:45	4:45	3	;
EXPR_STATEMENT	5:2	6:26	3	g_list_foreach ( purple_connections_get_all ( ) , call_if_nullprpl , & gcfdata ) ;
EXPR	5:2	5:2	4	g_list_foreach ( purple_connections_get_all ( ) , call_if_nullprpl , & gcfdata )
FUNCTION_CALL	5:2	6:25	5	g_list_foreach ( purple_connections_get_all ( ) , call_if_nullprpl , & gcfdata )
CALLEE	5:2	5:2	6	g_list_foreach
LEAF_NODE	5:2	5:2	7	g_list_foreach
LEAF_NODE	5:16	5:16	6	(
ARGUMENT	5:17	5:17	6	purple_connections_get_all ( )
FUNCTION_CALL	5:17	5:44	7	purple_connections_get_all ( )
CALLEE	5:17	5:17	8	purple_connections_get_all
LEAF_NODE	5:17	5:17	9	purple_connections_get_all
LEAF_NODE	5:43	5:43	8	(
LEAF_NODE	5:44	5:44	8	)
LEAF_NODE	5:45	5:45	6	,
ARGUMENT	5:47	5:47	6	call_if_nullprpl
FIELD	5:47	5:47	7	call_if_nullprpl
LEAF_NODE	5:47	5:47	8	call_if_nullprpl
LEAF_NODE	5:63	5:63	6	,
ARGUMENT	6:17	6:17	6	& gcfdata
UNARY_EXPR	6:17	6:18	7	& gcfdata
UNARY_OPERATOR	6:17	6:17	8	&
LEAF_NODE	6:17	6:17	9	&
FIELD	6:18	6:18	8	gcfdata
LEAF_NODE	6:18	6:18	9	gcfdata
LEAF_NODE	6:25	6:25	6	)
LEAF_NODE	6:26	6:26	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_account_set_protocol_id
LEAF_NODE	2:0	2:0	3	purple_account_set_protocol_id
PARAMETER_LIST	2:30	2:78	2	( PurpleAccount * account , const char * protocol_id )
LEAF_NODE	2:30	2:30	3	(
PARAMETER_DECL	2:31	2:46	3	PurpleAccount * account
TYPE	2:31	2:45	4	PurpleAccount *
TYPE_NAME	2:31	2:31	5	PurpleAccount
LEAF_NODE	2:31	2:31	6	PurpleAccount
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	account
LEAF_NODE	2:46	2:46	5	account
LEAF_NODE	2:53	2:53	3	,
PARAMETER_DECL	2:55	2:67	3	const char * protocol_id
TYPE	2:55	2:66	4	const char *
TYPE_NAME	2:55	2:61	5	const char
LEAF_NODE	2:55	2:55	6	const
LEAF_NODE	2:61	2:61	6	char
POINTER	2:66	2:66	5	*
LEAF_NODE	2:66	2:66	6	*
NAME	2:67	2:67	4	protocol_id
LEAF_NODE	2:67	2:67	5	protocol_id
LEAF_NODE	2:78	2:78	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
EXPR_STATEMENT	4:1	4:38	3	g_return_if_fail ( account != NULL ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( account != NULL )
FUNCTION_CALL	4:1	4:37	5	g_return_if_fail ( account != NULL )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:33	6	account != NULL
FIELD	4:18	4:18	7	account
LEAF_NODE	4:18	4:18	8	account
EQ_OPERATOR	4:30	4:30	7	!=
LEAF_NODE	4:30	4:30	8	!=
FIELD	4:33	4:33	7	NULL
LEAF_NODE	4:33	4:33	8	NULL
LEAF_NODE	4:37	4:37	6	)
LEAF_NODE	4:38	4:38	4	;
EXPR_STATEMENT	5:1	5:38	3	g_return_if_fail ( protocol_id != NULL ) ;
EXPR	5:1	5:1	4	g_return_if_fail ( protocol_id != NULL )
FUNCTION_CALL	5:1	5:37	5	g_return_if_fail ( protocol_id != NULL )
CALLEE	5:1	5:1	6	g_return_if_fail
LEAF_NODE	5:1	5:1	7	g_return_if_fail
LEAF_NODE	5:17	5:17	6	(
ARGUMENT	5:18	5:33	6	protocol_id != NULL
FIELD	5:18	5:18	7	protocol_id
LEAF_NODE	5:18	5:18	8	protocol_id
EQ_OPERATOR	5:30	5:30	7	!=
LEAF_NODE	5:30	5:30	8	!=
FIELD	5:33	5:33	7	NULL
LEAF_NODE	5:33	5:33	8	NULL
LEAF_NODE	5:37	5:37	6	)
LEAF_NODE	5:38	5:38	4	;
EXPR_STATEMENT	6:1	6:29	3	g_free ( account -> protocol_id ) ;
EXPR	6:1	6:1	4	g_free ( account -> protocol_id )
FUNCTION_CALL	6:1	6:28	5	g_free ( account -> protocol_id )
CALLEE	6:1	6:1	6	g_free
LEAF_NODE	6:1	6:1	7	g_free
LEAF_NODE	6:7	6:7	6	(
ARGUMENT	6:8	6:8	6	account -> protocol_id
FIELD	6:8	6:17	7	account -> protocol_id
LEAF_NODE	6:8	6:8	8	account
LEAF_NODE	6:15	6:15	8	->
LEAF_NODE	6:17	6:17	8	protocol_id
LEAF_NODE	6:28	6:28	6	)
LEAF_NODE	6:29	6:29	4	;
EXPR_STATEMENT	7:1	7:45	3	account -> protocol_id = g_strdup ( protocol_id ) ;
EXPR	7:1	7:1	4	account -> protocol_id = g_strdup ( protocol_id )
ASSIGN	7:1	7:24	5	account -> protocol_id = g_strdup ( protocol_id )
LVAL	7:1	7:1	6	account -> protocol_id
FIELD	7:1	7:10	7	account -> protocol_id
LEAF_NODE	7:1	7:1	8	account
LEAF_NODE	7:8	7:8	8	->
LEAF_NODE	7:10	7:10	8	protocol_id
ASSIGN_OP	7:22	7:22	6	=
LEAF_NODE	7:22	7:22	7	=
RVAL	7:24	7:24	6	g_strdup ( protocol_id )
FUNCTION_CALL	7:24	7:44	7	g_strdup ( protocol_id )
CALLEE	7:24	7:24	8	g_strdup
LEAF_NODE	7:24	7:24	9	g_strdup
LEAF_NODE	7:32	7:32	8	(
ARGUMENT	7:33	7:33	8	protocol_id
FIELD	7:33	7:33	9	protocol_id
LEAF_NODE	7:33	7:33	10	protocol_id
LEAF_NODE	7:44	7:44	8	)
LEAF_NODE	7:45	7:45	4	;
EXPR_STATEMENT	8:1	8:25	3	schedule_accounts_save ( ) ;
EXPR	8:1	8:1	4	schedule_accounts_save ( )
FUNCTION_CALL	8:1	8:24	5	schedule_accounts_save ( )
CALLEE	8:1	8:1	6	schedule_accounts_save
LEAF_NODE	8:1	8:1	7	schedule_accounts_save
LEAF_NODE	8:23	8:23	6	(
LEAF_NODE	8:24	8:24	6	)
LEAF_NODE	8:25	8:25	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	peer_oft_send_prompt
LEAF_NODE	2:0	2:0	3	peer_oft_send_prompt
PARAMETER_LIST	2:20	2:41	2	( PeerConnection * conn )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:37	3	PeerConnection * conn
TYPE	2:21	2:36	4	PeerConnection *
TYPE_NAME	2:21	2:21	5	PeerConnection
LEAF_NODE	2:21	2:21	6	PeerConnection
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	conn
LEAF_NODE	2:37	2:37	5	conn
LEAF_NODE	2:41	2:41	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:39	3	conn -> xferdata . type = PEER_TYPE_PROMPT ;
EXPR	4:1	4:1	4	conn -> xferdata . type = PEER_TYPE_PROMPT
ASSIGN	4:1	4:23	5	conn -> xferdata . type = PEER_TYPE_PROMPT
LVAL	4:1	4:1	6	conn -> xferdata . type
FIELD	4:1	4:16	7	conn -> xferdata . type
LEAF_NODE	4:1	4:1	8	conn
LEAF_NODE	4:5	4:5	8	->
LEAF_NODE	4:7	4:7	8	xferdata
LEAF_NODE	4:15	4:15	8	.
LEAF_NODE	4:16	4:16	8	type
ASSIGN_OP	4:21	4:21	6	=
LEAF_NODE	4:21	4:21	7	=
RVAL	4:23	4:23	6	PEER_TYPE_PROMPT
FIELD	4:23	4:23	7	PEER_TYPE_PROMPT
LEAF_NODE	4:23	4:23	8	PEER_TYPE_PROMPT
LEAF_NODE	4:39	4:39	4	;
EXPR_STATEMENT	5:1	5:37	3	peer_oft_send ( conn , & conn -> xferdata ) ;
EXPR	5:1	5:1	4	peer_oft_send ( conn , & conn -> xferdata )
FUNCTION_CALL	5:1	5:36	5	peer_oft_send ( conn , & conn -> xferdata )
CALLEE	5:1	5:1	6	peer_oft_send
LEAF_NODE	5:1	5:1	7	peer_oft_send
LEAF_NODE	5:14	5:14	6	(
ARGUMENT	5:15	5:15	6	conn
FIELD	5:15	5:15	7	conn
LEAF_NODE	5:15	5:15	8	conn
LEAF_NODE	5:19	5:19	6	,
ARGUMENT	5:21	5:21	6	& conn -> xferdata
UNARY_EXPR	5:21	5:22	7	& conn -> xferdata
UNARY_OPERATOR	5:21	5:21	8	&
LEAF_NODE	5:21	5:21	9	&
FIELD	5:22	5:28	8	conn -> xferdata
LEAF_NODE	5:22	5:22	9	conn
LEAF_NODE	5:26	5:26	9	->
LEAF_NODE	5:28	5:28	9	xferdata
LEAF_NODE	5:36	5:36	6	)
LEAF_NODE	5:37	5:37	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	5:1	13:1	0	
SIMPLE_DECL	5:1	5:90	1	enum CLASS_NAME BASE_CLASSES { CMD_CMD_DO , CMD_CMD_HELP , CMD_CMD_LIST , CMD_CMD_REGISTER , CMD_CMD_UNREGISTER } cmd ;
VAR_DECL	5:1	5:87	2	enum CLASS_NAME BASE_CLASSES { CMD_CMD_DO , CMD_CMD_HELP , CMD_CMD_LIST , CMD_CMD_REGISTER , CMD_CMD_UNREGISTER } cmd
TYPE	5:1	5:1	3	enum CLASS_NAME BASE_CLASSES { CMD_CMD_DO , CMD_CMD_HELP , CMD_CMD_LIST , CMD_CMD_REGISTER , CMD_CMD_UNREGISTER }
CLASS_DEF	5:1	5:85	4	enum CLASS_NAME BASE_CLASSES { CMD_CMD_DO , CMD_CMD_HELP , CMD_CMD_LIST , CMD_CMD_REGISTER , CMD_CMD_UNREGISTER }
LEAF_NODE	5:1	5:1	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	5:6	5:6	5	{
CLASS_CONTENT	5:8	5:66	5	CMD_CMD_DO , CMD_CMD_HELP , CMD_CMD_LIST , CMD_CMD_REGISTER , CMD_CMD_UNREGISTER
LEAF_NODE	5:8	5:8	6	CMD_CMD_DO
LEAF_NODE	5:18	5:18	6	,
LEAF_NODE	5:20	5:20	6	CMD_CMD_HELP
LEAF_NODE	5:32	5:32	6	,
LEAF_NODE	5:34	5:34	6	CMD_CMD_LIST
LEAF_NODE	5:46	5:46	6	,
LEAF_NODE	5:48	5:48	6	CMD_CMD_REGISTER
LEAF_NODE	5:64	5:64	6	,
LEAF_NODE	5:66	5:66	6	CMD_CMD_UNREGISTER
LEAF_NODE	5:85	5:85	5	}
NAME	5:87	5:87	3	cmd
LEAF_NODE	5:87	5:87	4	cmd
LEAF_NODE	5:90	5:90	2	;
SIMPLE_DECL	6:1	6:32	1	struct tcl_cmd_handler * handler ;
VAR_DECL	6:1	6:25	2	struct tcl_cmd_handler * handler
TYPE	6:1	6:24	3	struct tcl_cmd_handler *
TYPE_NAME	6:1	6:8	4	struct tcl_cmd_handler
LEAF_NODE	6:1	6:1	5	struct
LEAF_NODE	6:8	6:8	5	tcl_cmd_handler
POINTER	6:24	6:24	4	*
LEAF_NODE	6:24	6:24	5	*
NAME	6:25	6:25	3	handler
LEAF_NODE	6:25	6:25	4	handler
LEAF_NODE	6:32	6:32	2	;
SIMPLE_DECL	7:1	7:21	1	Tcl_Obj * list , Tcl_Obj * elem ;
INIT_DECL_LIST	7:1	7:1	2	Tcl_Obj * list , Tcl_Obj * elem
VAR_DECL	7:1	7:10	3	Tcl_Obj * list
TYPE	7:1	7:9	4	Tcl_Obj *
TYPE_NAME	7:1	7:1	5	Tcl_Obj
LEAF_NODE	7:1	7:1	6	Tcl_Obj
POINTER	7:9	7:9	5	*
LEAF_NODE	7:9	7:9	6	*
NAME	7:10	7:10	4	list
LEAF_NODE	7:10	7:10	5	list
LEAF_NODE	7:14	7:14	3	,
VAR_DECL	7:1	7:17	3	Tcl_Obj * elem
TYPE	7:1	7:16	4	Tcl_Obj *
TYPE_NAME	7:1	7:1	5	Tcl_Obj
LEAF_NODE	7:1	7:1	6	Tcl_Obj
POINTER	7:16	7:16	5	*
LEAF_NODE	7:16	7:16	6	*
NAME	7:17	7:17	4	elem
LEAF_NODE	7:17	7:17	5	elem
LEAF_NODE	7:21	7:21	2	;
SIMPLE_DECL	8:1	8:26	1	PurpleConversation * convo ;
VAR_DECL	8:1	8:21	2	PurpleConversation * convo
TYPE	8:1	8:20	3	PurpleConversation *
TYPE_NAME	8:1	8:1	4	PurpleConversation
LEAF_NODE	8:1	8:1	5	PurpleConversation
POINTER	8:20	8:20	4	*
LEAF_NODE	8:20	8:20	5	*
NAME	8:21	8:21	3	convo
LEAF_NODE	8:21	8:21	4	convo
LEAF_NODE	8:26	8:26	2	;
SIMPLE_DECL	9:1	9:15	1	PurpleCmdId id ;
VAR_DECL	9:1	9:13	2	PurpleCmdId id
TYPE	9:1	9:1	3	PurpleCmdId
TYPE_NAME	9:1	9:1	4	PurpleCmdId
LEAF_NODE	9:1	9:1	5	PurpleCmdId
NAME	9:13	9:13	3	id
LEAF_NODE	9:13	9:13	4	id
LEAF_NODE	9:15	9:15	2	;
SIMPLE_DECL	10:1	10:23	1	PurpleCmdStatus status ;
VAR_DECL	10:1	10:17	2	PurpleCmdStatus status
TYPE	10:1	10:1	3	PurpleCmdStatus
TYPE_NAME	10:1	10:1	4	PurpleCmdStatus
LEAF_NODE	10:1	10:1	5	PurpleCmdStatus
NAME	10:17	10:17	3	status
LEAF_NODE	10:17	10:17	4	status
LEAF_NODE	10:23	10:23	2	;
SIMPLE_DECL	11:1	11:10	1	int error ;
VAR_DECL	11:1	11:5	2	int error
TYPE	11:1	11:1	3	int
TYPE_NAME	11:1	11:1	4	int
LEAF_NODE	11:1	11:1	5	int
NAME	11:5	11:5	3	error
LEAF_NODE	11:5	11:5	4	error
LEAF_NODE	11:10	11:10	2	;
SIMPLE_DECL	12:1	12:15	1	GList * l , GList * cur ;
INIT_DECL_LIST	12:1	12:1	2	GList * l , GList * cur
VAR_DECL	12:1	12:8	3	GList * l
TYPE	12:1	12:7	4	GList *
TYPE_NAME	12:1	12:1	5	GList
LEAF_NODE	12:1	12:1	6	GList
POINTER	12:7	12:7	5	*
LEAF_NODE	12:7	12:7	6	*
NAME	12:8	12:8	4	l
LEAF_NODE	12:8	12:8	5	l
LEAF_NODE	12:9	12:9	3	,
VAR_DECL	12:1	12:12	3	GList * cur
TYPE	12:1	12:11	4	GList *
TYPE_NAME	12:1	12:1	5	GList
LEAF_NODE	12:1	12:1	6	GList
POINTER	12:11	12:11	5	*
LEAF_NODE	12:11	12:11	6	*
NAME	12:12	12:12	4	cur
LEAF_NODE	12:12	12:12	5	cur
LEAF_NODE	12:15	12:15	2	;
SIMPLE_DECL	13:1	13:31	1	gchar * escaped , gchar * errstr ; errstr = NULL ;
INIT_DECL_LIST	13:1	13:1	2	gchar * escaped , gchar * errstr ; errstr = NULL
VAR_DECL	13:1	13:8	3	gchar * escaped
TYPE	13:1	13:7	4	gchar *
TYPE_NAME	13:1	13:1	5	gchar
LEAF_NODE	13:1	13:1	6	gchar
POINTER	13:7	13:7	5	*
LEAF_NODE	13:7	13:7	6	*
NAME	13:8	13:8	4	escaped
LEAF_NODE	13:8	13:8	5	escaped
LEAF_NODE	13:15	13:15	3	,
VAR_DECL	13:1	13:18	3	gchar * errstr ; errstr = NULL
TYPE	13:1	13:17	4	gchar *
TYPE_NAME	13:1	13:1	5	gchar
LEAF_NODE	13:1	13:1	6	gchar
POINTER	13:17	13:17	5	*
LEAF_NODE	13:17	13:17	6	*
NAME	13:18	13:18	4	errstr
LEAF_NODE	13:18	13:18	5	errstr
LEAF_NODE	0:0	0:0	4	;
INIT	13:18	13:18	4	errstr = NULL
ASSIGN	13:18	13:27	5	errstr = NULL
LVAL	13:18	13:18	6	errstr
NAME	13:18	13:18	7	errstr
LEAF_NODE	13:18	13:18	8	errstr
ASSIGN_OP	13:25	13:25	6	=
LEAF_NODE	13:25	13:25	7	=
RVAL	13:27	13:27	6	NULL
FIELD	13:27	13:27	7	NULL
LEAF_NODE	13:27	13:27	8	NULL
LEAF_NODE	13:31	13:31	2	;

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static int
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	int
LEAF_NODE	1:7	1:7	4	int
FUNCTION_NAME	2:0	2:0	2	snachandler
LEAF_NODE	2:0	2:0	3	snachandler
PARAMETER_LIST	2:11	2:121	2	( OscarData * od , FlapConnection * conn , aim_module_t * mod , FlapFrame * frame , aim_modsnac_t * snac , ByteStream * bs )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:23	3	OscarData * od
TYPE	2:12	2:22	4	OscarData *
TYPE_NAME	2:12	2:12	5	OscarData
LEAF_NODE	2:12	2:12	6	OscarData
POINTER	2:22	2:22	5	*
LEAF_NODE	2:22	2:22	6	*
NAME	2:23	2:23	4	od
LEAF_NODE	2:23	2:23	5	od
LEAF_NODE	2:25	2:25	3	,
PARAMETER_DECL	2:27	2:43	3	FlapConnection * conn
TYPE	2:27	2:42	4	FlapConnection *
TYPE_NAME	2:27	2:27	5	FlapConnection
LEAF_NODE	2:27	2:27	6	FlapConnection
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	conn
LEAF_NODE	2:43	2:43	5	conn
LEAF_NODE	2:47	2:47	3	,
PARAMETER_DECL	2:49	2:63	3	aim_module_t * mod
TYPE	2:49	2:62	4	aim_module_t *
TYPE_NAME	2:49	2:49	5	aim_module_t
LEAF_NODE	2:49	2:49	6	aim_module_t
POINTER	2:62	2:62	5	*
LEAF_NODE	2:62	2:62	6	*
NAME	2:63	2:63	4	mod
LEAF_NODE	2:63	2:63	5	mod
LEAF_NODE	2:66	2:66	3	,
PARAMETER_DECL	2:68	2:79	3	FlapFrame * frame
TYPE	2:68	2:78	4	FlapFrame *
TYPE_NAME	2:68	2:68	5	FlapFrame
LEAF_NODE	2:68	2:68	6	FlapFrame
POINTER	2:78	2:78	5	*
LEAF_NODE	2:78	2:78	6	*
NAME	2:79	2:79	4	frame
LEAF_NODE	2:79	2:79	5	frame
LEAF_NODE	2:84	2:84	3	,
PARAMETER_DECL	2:86	2:101	3	aim_modsnac_t * snac
TYPE	2:86	2:100	4	aim_modsnac_t *
TYPE_NAME	2:86	2:86	5	aim_modsnac_t
LEAF_NODE	2:86	2:86	6	aim_modsnac_t
POINTER	2:100	2:100	5	*
LEAF_NODE	2:100	2:100	6	*
NAME	2:101	2:101	4	snac
LEAF_NODE	2:101	2:101	5	snac
LEAF_NODE	2:105	2:105	3	,
PARAMETER_DECL	2:107	2:119	3	ByteStream * bs
TYPE	2:107	2:118	4	ByteStream *
TYPE_NAME	2:107	2:107	5	ByteStream
LEAF_NODE	2:107	2:107	6	ByteStream
POINTER	2:118	2:118	5	*
LEAF_NODE	2:118	2:118	6	*
NAME	2:119	2:119	4	bs
LEAF_NODE	2:119	2:119	5	bs
LEAF_NODE	2:121	2:121	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	snac -> subtype == 0x0003
EXPR	4:5	4:22	5	snac -> subtype == 0x0003
FIELD	4:5	4:11	6	snac -> subtype
LEAF_NODE	4:5	4:5	7	snac
LEAF_NODE	4:9	4:9	7	->
LEAF_NODE	4:11	4:11	7	subtype
EQ_OPERATOR	4:19	4:19	6	==
LEAF_NODE	4:19	4:19	7	==
FIELD	4:22	4:22	6	0x0003
LEAF_NODE	4:22	4:22	7	0x0003
LEAF_NODE	4:28	4:28	4	)
STATEMENTS	5:2	5:2	4	
JUMP_STATEMENT	5:2	5:47	5	return rights ( od , conn , mod , frame , snac , bs ) ;
KEYWORD	5:2	5:2	6	return
LEAF_NODE	5:2	5:2	7	return
DESTINATION	5:9	5:9	6	rights ( od , conn , mod , frame , snac , bs )
EXPR	5:9	5:9	7	rights ( od , conn , mod , frame , snac , bs )
FUNCTION_CALL	5:9	5:46	8	rights ( od , conn , mod , frame , snac , bs )
CALLEE	5:9	5:9	9	rights
LEAF_NODE	5:9	5:9	10	rights
LEAF_NODE	5:15	5:15	9	(
ARGUMENT	5:16	5:16	9	od
FIELD	5:16	5:16	10	od
LEAF_NODE	5:16	5:16	11	od
LEAF_NODE	5:18	5:18	9	,
ARGUMENT	5:20	5:20	9	conn
FIELD	5:20	5:20	10	conn
LEAF_NODE	5:20	5:20	11	conn
LEAF_NODE	5:24	5:24	9	,
ARGUMENT	5:26	5:26	9	mod
FIELD	5:26	5:26	10	mod
LEAF_NODE	5:26	5:26	11	mod
LEAF_NODE	5:29	5:29	9	,
ARGUMENT	5:31	5:31	9	frame
FIELD	5:31	5:31	10	frame
LEAF_NODE	5:31	5:31	11	frame
LEAF_NODE	5:36	5:36	9	,
ARGUMENT	5:38	5:38	9	snac
FIELD	5:38	5:38	10	snac
LEAF_NODE	5:38	5:38	11	snac
LEAF_NODE	5:42	5:42	9	,
ARGUMENT	5:44	5:44	9	bs
FIELD	5:44	5:44	10	bs
LEAF_NODE	5:44	5:44	11	bs
LEAF_NODE	5:46	5:46	9	)
LEAF_NODE	5:47	5:47	6	;
JUMP_STATEMENT	6:1	6:9	3	return 0 ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	0
EXPR	6:8	6:8	5	0
FIELD	6:8	6:8	6	0
LEAF_NODE	6:8	6:8	7	0
LEAF_NODE	6:9	6:9	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	close_accounts_cb
LEAF_NODE	2:0	2:0	3	close_accounts_cb
PARAMETER_LIST	2:17	2:54	2	( GtkWidget * w , AccountsWindow * dialog )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:29	3	GtkWidget * w
TYPE	2:18	2:28	4	GtkWidget *
TYPE_NAME	2:18	2:18	5	GtkWidget
LEAF_NODE	2:18	2:18	6	GtkWidget
POINTER	2:28	2:28	5	*
LEAF_NODE	2:28	2:28	6	*
NAME	2:29	2:29	4	w
LEAF_NODE	2:29	2:29	5	w
LEAF_NODE	2:30	2:30	3	,
PARAMETER_DECL	2:32	2:48	3	AccountsWindow * dialog
TYPE	2:32	2:47	4	AccountsWindow *
TYPE_NAME	2:32	2:32	5	AccountsWindow
LEAF_NODE	2:32	2:32	6	AccountsWindow
POINTER	2:47	2:47	5	*
LEAF_NODE	2:47	2:47	6	*
NAME	2:48	2:48	4	dialog
LEAF_NODE	2:48	2:48	5	dialog
LEAF_NODE	2:54	2:54	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	4:30	3	pidgin_accounts_window_hide ( ) ;
EXPR	4:1	4:1	4	pidgin_accounts_window_hide ( )
FUNCTION_CALL	4:1	4:29	5	pidgin_accounts_window_hide ( )
CALLEE	4:1	4:1	6	pidgin_accounts_window_hide
LEAF_NODE	4:1	4:1	7	pidgin_accounts_window_hide
LEAF_NODE	4:28	4:28	6	(
LEAF_NODE	4:29	4:29	6	)
LEAF_NODE	4:30	4:30	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	17:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	finch_conversation_set_active
LEAF_NODE	2:5	2:5	3	finch_conversation_set_active
PARAMETER_LIST	2:34	2:59	2	( PurpleConversation * conv )
LEAF_NODE	2:34	2:34	3	(
PARAMETER_DECL	2:35	2:55	3	PurpleConversation * conv
TYPE	2:35	2:54	4	PurpleConversation *
TYPE_NAME	2:35	2:35	5	PurpleConversation
LEAF_NODE	2:35	2:35	6	PurpleConversation
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	conv
LEAF_NODE	2:55	2:55	5	conv
LEAF_NODE	2:59	2:59	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	16:1	2	
SIMPLE_DECL	4:1	4:41	3	FinchConv * ggconv ; ggconv = FINCH_GET_DATA ( conv ) ;
VAR_DECL	4:1	4:12	4	FinchConv * ggconv ; ggconv = FINCH_GET_DATA ( conv )
TYPE	4:1	4:11	5	FinchConv *
TYPE_NAME	4:1	4:1	6	FinchConv
LEAF_NODE	4:1	4:1	7	FinchConv
POINTER	4:11	4:11	6	*
LEAF_NODE	4:11	4:11	7	*
NAME	4:12	4:12	5	ggconv
LEAF_NODE	4:12	4:12	6	ggconv
LEAF_NODE	0:0	0:0	5	;
INIT	4:12	4:12	5	ggconv = FINCH_GET_DATA ( conv )
ASSIGN	4:12	4:21	6	ggconv = FINCH_GET_DATA ( conv )
LVAL	4:12	4:12	7	ggconv
NAME	4:12	4:12	8	ggconv
LEAF_NODE	4:12	4:12	9	ggconv
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:21	7	FINCH_GET_DATA ( conv )
FUNCTION_CALL	4:21	4:40	8	FINCH_GET_DATA ( conv )
CALLEE	4:21	4:21	9	FINCH_GET_DATA
LEAF_NODE	4:21	4:21	10	FINCH_GET_DATA
LEAF_NODE	4:35	4:35	9	(
ARGUMENT	4:36	4:36	9	conv
FIELD	4:36	4:36	10	conv
LEAF_NODE	4:36	4:36	11	conv
LEAF_NODE	4:40	4:40	9	)
LEAF_NODE	4:41	4:41	4	;
SIMPLE_DECL	5:1	5:23	3	PurpleAccount * account ;
VAR_DECL	5:1	5:16	4	PurpleAccount * account
TYPE	5:1	5:15	5	PurpleAccount *
TYPE_NAME	5:1	5:1	6	PurpleAccount
LEAF_NODE	5:1	5:1	7	PurpleAccount
POINTER	5:15	5:15	6	*
LEAF_NODE	5:15	5:15	7	*
NAME	5:16	5:16	5	account
LEAF_NODE	5:16	5:16	6	account
LEAF_NODE	5:23	5:23	4	;
SIMPLE_DECL	6:1	6:12	3	char * title ;
VAR_DECL	6:1	6:7	4	char * title
TYPE	6:1	6:6	5	char *
TYPE_NAME	6:1	6:1	6	char
LEAF_NODE	6:1	6:1	7	char
POINTER	6:6	6:6	6	*
LEAF_NODE	6:6	6:6	7	*
NAME	6:7	6:7	5	title
LEAF_NODE	6:7	6:7	6	title
LEAF_NODE	6:12	6:12	4	;
EXPR_STATEMENT	7:1	7:25	3	g_return_if_fail ( ggconv ) ;
EXPR	7:1	7:1	4	g_return_if_fail ( ggconv )
FUNCTION_CALL	7:1	7:24	5	g_return_if_fail ( ggconv )
CALLEE	7:1	7:1	6	g_return_if_fail
LEAF_NODE	7:1	7:1	7	g_return_if_fail
LEAF_NODE	7:17	7:17	6	(
ARGUMENT	7:18	7:18	6	ggconv
FIELD	7:18	7:18	7	ggconv
LEAF_NODE	7:18	7:18	8	ggconv
LEAF_NODE	7:24	7:24	6	)
LEAF_NODE	7:25	7:25	4	;
EXPR_STATEMENT	8:1	8:50	3	g_return_if_fail ( g_list_find ( ggconv -> list , conv ) ) ;
EXPR	8:1	8:1	4	g_return_if_fail ( g_list_find ( ggconv -> list , conv ) )
FUNCTION_CALL	8:1	8:49	5	g_return_if_fail ( g_list_find ( ggconv -> list , conv ) )
CALLEE	8:1	8:1	6	g_return_if_fail
LEAF_NODE	8:1	8:1	7	g_return_if_fail
LEAF_NODE	8:17	8:17	6	(
ARGUMENT	8:18	8:18	6	g_list_find ( ggconv -> list , conv )
FUNCTION_CALL	8:18	8:48	7	g_list_find ( ggconv -> list , conv )
CALLEE	8:18	8:18	8	g_list_find
LEAF_NODE	8:18	8:18	9	g_list_find
LEAF_NODE	8:29	8:29	8	(
ARGUMENT	8:30	8:30	8	ggconv -> list
FIELD	8:30	8:38	9	ggconv -> list
LEAF_NODE	8:30	8:30	10	ggconv
LEAF_NODE	8:36	8:36	10	->
LEAF_NODE	8:38	8:38	10	list
LEAF_NODE	8:42	8:42	8	,
ARGUMENT	8:44	8:44	8	conv
FIELD	8:44	8:44	9	conv
LEAF_NODE	8:44	8:44	10	conv
LEAF_NODE	8:48	8:48	8	)
LEAF_NODE	8:49	8:49	6	)
LEAF_NODE	8:50	8:50	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	ggconv -> active_conv == conv
EXPR	9:5	9:28	5	ggconv -> active_conv == conv
FIELD	9:5	9:13	6	ggconv -> active_conv
LEAF_NODE	9:5	9:5	7	ggconv
LEAF_NODE	9:11	9:11	7	->
LEAF_NODE	9:13	9:13	7	active_conv
EQ_OPERATOR	9:25	9:25	6	==
LEAF_NODE	9:25	9:25	7	==
FIELD	9:28	9:28	6	conv
LEAF_NODE	9:28	9:28	7	conv
LEAF_NODE	9:32	9:32	4	)
STATEMENTS	10:2	10:2	4	
JUMP_STATEMENT	10:2	10:8	5	return DESTINATION ;
KEYWORD	10:2	10:2	6	return
LEAF_NODE	10:2	10:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	10:8	10:8	6	;
EXPR_STATEMENT	11:1	11:27	3	ggconv -> active_conv = conv ;
EXPR	11:1	11:1	4	ggconv -> active_conv = conv
ASSIGN	11:1	11:23	5	ggconv -> active_conv = conv
LVAL	11:1	11:1	6	ggconv -> active_conv
FIELD	11:1	11:9	7	ggconv -> active_conv
LEAF_NODE	11:1	11:1	8	ggconv
LEAF_NODE	11:7	11:7	8	->
LEAF_NODE	11:9	11:9	8	active_conv
ASSIGN_OP	11:21	11:21	6	=
LEAF_NODE	11:21	11:21	7	=
RVAL	11:23	11:23	6	conv
FIELD	11:23	11:23	7	conv
LEAF_NODE	11:23	11:23	8	conv
LEAF_NODE	11:27	11:27	4	;
EXPR_STATEMENT	12:1	12:32	3	gg_setup_commands ( ggconv , TRUE ) ;
EXPR	12:1	12:1	4	gg_setup_commands ( ggconv , TRUE )
FUNCTION_CALL	12:1	12:31	5	gg_setup_commands ( ggconv , TRUE )
CALLEE	12:1	12:1	6	gg_setup_commands
LEAF_NODE	12:1	12:1	7	gg_setup_commands
LEAF_NODE	12:18	12:18	6	(
ARGUMENT	12:19	12:19	6	ggconv
FIELD	12:19	12:19	7	ggconv
LEAF_NODE	12:19	12:19	8	ggconv
LEAF_NODE	12:25	12:25	6	,
ARGUMENT	12:27	12:27	6	TRUE
FIELD	12:27	12:27	7	TRUE
LEAF_NODE	12:27	12:27	8	TRUE
LEAF_NODE	12:31	12:31	6	)
LEAF_NODE	12:32	12:32	4	;
EXPR_STATEMENT	13:1	13:48	3	account = purple_conversation_get_account ( conv ) ;
EXPR	13:1	13:1	4	account = purple_conversation_get_account ( conv )
ASSIGN	13:1	13:11	5	account = purple_conversation_get_account ( conv )
LVAL	13:1	13:1	6	account
FIELD	13:1	13:1	7	account
LEAF_NODE	13:1	13:1	8	account
ASSIGN_OP	13:9	13:9	6	=
LEAF_NODE	13:9	13:9	7	=
RVAL	13:11	13:11	6	purple_conversation_get_account ( conv )
FUNCTION_CALL	13:11	13:47	7	purple_conversation_get_account ( conv )
CALLEE	13:11	13:11	8	purple_conversation_get_account
LEAF_NODE	13:11	13:11	9	purple_conversation_get_account
LEAF_NODE	13:42	13:42	8	(
ARGUMENT	13:43	13:43	8	conv
FIELD	13:43	13:43	9	conv
LEAF_NODE	13:43	13:43	10	conv
LEAF_NODE	13:47	13:47	8	)
LEAF_NODE	13:48	13:48	4	;
EXPR_STATEMENT	14:1	14:46	3	title = get_conversation_title ( conv , account ) ;
EXPR	14:1	14:1	4	title = get_conversation_title ( conv , account )
ASSIGN	14:1	14:9	5	title = get_conversation_title ( conv , account )
LVAL	14:1	14:1	6	title
FIELD	14:1	14:1	7	title
LEAF_NODE	14:1	14:1	8	title
ASSIGN_OP	14:7	14:7	6	=
LEAF_NODE	14:7	14:7	7	=
RVAL	14:9	14:9	6	get_conversation_title ( conv , account )
FUNCTION_CALL	14:9	14:45	7	get_conversation_title ( conv , account )
CALLEE	14:9	14:9	8	get_conversation_title
LEAF_NODE	14:9	14:9	9	get_conversation_title
LEAF_NODE	14:31	14:31	8	(
ARGUMENT	14:32	14:32	8	conv
FIELD	14:32	14:32	9	conv
LEAF_NODE	14:32	14:32	10	conv
LEAF_NODE	14:36	14:36	8	,
ARGUMENT	14:38	14:38	8	account
FIELD	14:38	14:38	9	account
LEAF_NODE	14:38	14:38	10	account
LEAF_NODE	14:45	14:45	8	)
LEAF_NODE	14:46	14:46	4	;
EXPR_STATEMENT	15:1	15:48	3	gnt_screen_rename_widget ( ggconv -> window , title ) ;
EXPR	15:1	15:1	4	gnt_screen_rename_widget ( ggconv -> window , title )
FUNCTION_CALL	15:1	15:47	5	gnt_screen_rename_widget ( ggconv -> window , title )
CALLEE	15:1	15:1	6	gnt_screen_rename_widget
LEAF_NODE	15:1	15:1	7	gnt_screen_rename_widget
LEAF_NODE	15:25	15:25	6	(
ARGUMENT	15:26	15:26	6	ggconv -> window
FIELD	15:26	15:34	7	ggconv -> window
LEAF_NODE	15:26	15:26	8	ggconv
LEAF_NODE	15:32	15:32	8	->
LEAF_NODE	15:34	15:34	8	window
LEAF_NODE	15:40	15:40	6	,
ARGUMENT	15:42	15:42	6	title
FIELD	15:42	15:42	7	title
LEAF_NODE	15:42	15:42	8	title
LEAF_NODE	15:47	15:47	6	)
LEAF_NODE	15:48	15:48	4	;
EXPR_STATEMENT	16:1	16:14	3	g_free ( title ) ;
EXPR	16:1	16:1	4	g_free ( title )
FUNCTION_CALL	16:1	16:13	5	g_free ( title )
CALLEE	16:1	16:1	6	g_free
LEAF_NODE	16:1	16:1	7	g_free
LEAF_NODE	16:7	16:7	6	(
ARGUMENT	16:8	16:8	6	title
FIELD	16:8	16:8	7	title
LEAF_NODE	16:8	16:8	8	title
LEAF_NODE	16:13	16:13	6	)
LEAF_NODE	16:14	16:14	4	;
LEAF_NODE	17:0	17:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	11:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	gg_connection_failure
LEAF_NODE	2:5	2:5	3	gg_connection_failure
PARAMETER_LIST	2:26	3:26	2	( struct gg_session * gs , struct gg_event * ge , enum gg_failure_t failure )
LEAF_NODE	2:26	2:26	3	(
PARAMETER_DECL	2:27	2:46	3	struct gg_session * gs
TYPE	2:27	2:45	4	struct gg_session *
TYPE_NAME	2:27	2:34	5	struct gg_session
LEAF_NODE	2:27	2:27	6	struct
LEAF_NODE	2:34	2:34	6	gg_session
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	gs
LEAF_NODE	2:46	2:46	5	gs
LEAF_NODE	2:48	2:48	3	,
PARAMETER_DECL	2:50	2:67	3	struct gg_event * ge
TYPE	2:50	2:66	4	struct gg_event *
TYPE_NAME	2:50	2:57	5	struct gg_event
LEAF_NODE	2:50	2:50	6	struct
LEAF_NODE	2:57	2:57	6	gg_event
POINTER	2:66	2:66	5	*
LEAF_NODE	2:66	2:66	6	*
NAME	2:67	2:67	4	ge
LEAF_NODE	2:67	2:67	5	ge
LEAF_NODE	2:69	2:69	3	,
PARAMETER_DECL	3:1	3:19	3	enum gg_failure_t failure
TYPE	3:1	3:1	4	enum gg_failure_t
TYPE_NAME	3:1	3:6	5	enum gg_failure_t
LEAF_NODE	3:1	3:1	6	enum
LEAF_NODE	3:6	3:6	6	gg_failure_t
NAME	3:19	3:19	4	failure
LEAF_NODE	3:19	3:19	5	failure
LEAF_NODE	3:26	3:26	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	10:1	2	
EXPR_STATEMENT	5:1	5:13	3	gg_close ( gs ) ;
EXPR	5:1	5:1	4	gg_close ( gs )
FUNCTION_CALL	5:1	5:12	5	gg_close ( gs )
CALLEE	5:1	5:1	6	gg_close
LEAF_NODE	5:1	5:1	7	gg_close
LEAF_NODE	5:9	5:9	6	(
ARGUMENT	5:10	5:10	6	gs
FIELD	5:10	5:10	7	gs
LEAF_NODE	5:10	5:10	8	gs
LEAF_NODE	5:12	5:12	6	)
LEAF_NODE	5:13	5:13	4	;
SELECTION	6:1	6:17	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	ge != NULL
EXPR	6:5	6:11	5	ge != NULL
FIELD	6:5	6:5	6	ge
LEAF_NODE	6:5	6:5	7	ge
EQ_OPERATOR	6:8	6:8	6	!=
LEAF_NODE	6:8	6:8	7	!=
FIELD	6:11	6:11	6	NULL
LEAF_NODE	6:11	6:11	7	NULL
LEAF_NODE	6:15	6:15	4	)
STATEMENTS	6:17	9:1	4	
LEAF_NODE	6:17	6:17	5	{
STATEMENTS	7:2	8:2	5	
EXPR_STATEMENT	7:2	7:33	6	ge -> type = GG_EVENT_CONN_FAILED ;
EXPR	7:2	7:2	7	ge -> type = GG_EVENT_CONN_FAILED
ASSIGN	7:2	7:13	8	ge -> type = GG_EVENT_CONN_FAILED
LVAL	7:2	7:2	9	ge -> type
FIELD	7:2	7:6	10	ge -> type
LEAF_NODE	7:2	7:2	11	ge
LEAF_NODE	7:4	7:4	11	->
LEAF_NODE	7:6	7:6	11	type
ASSIGN_OP	7:11	7:11	9	=
LEAF_NODE	7:11	7:11	10	=
RVAL	7:13	7:13	9	GG_EVENT_CONN_FAILED
FIELD	7:13	7:13	10	GG_EVENT_CONN_FAILED
LEAF_NODE	7:13	7:13	11	GG_EVENT_CONN_FAILED
LEAF_NODE	7:33	7:33	7	;
EXPR_STATEMENT	8:2	8:29	6	ge -> event . failure = failure ;
EXPR	8:2	8:2	7	ge -> event . failure = failure
ASSIGN	8:2	8:22	8	ge -> event . failure = failure
LVAL	8:2	8:2	9	ge -> event . failure
FIELD	8:2	8:12	10	ge -> event . failure
LEAF_NODE	8:2	8:2	11	ge
LEAF_NODE	8:4	8:4	11	->
LEAF_NODE	8:6	8:6	11	event
LEAF_NODE	8:11	8:11	11	.
LEAF_NODE	8:12	8:12	11	failure
ASSIGN_OP	8:20	8:20	9	=
LEAF_NODE	8:20	8:20	10	=
RVAL	8:22	8:22	9	failure
FIELD	8:22	8:22	10	failure
LEAF_NODE	8:22	8:22	11	failure
LEAF_NODE	8:29	8:29	7	;
LEAF_NODE	9:1	9:1	5	}
EXPR_STATEMENT	10:1	10:26	3	gs -> state = GG_STATE_IDLE ;
EXPR	10:1	10:1	4	gs -> state = GG_STATE_IDLE
ASSIGN	10:1	10:13	5	gs -> state = GG_STATE_IDLE
LVAL	10:1	10:1	6	gs -> state
FIELD	10:1	10:5	7	gs -> state
LEAF_NODE	10:1	10:1	8	gs
LEAF_NODE	10:3	10:3	8	->
LEAF_NODE	10:5	10:5	8	state
ASSIGN_OP	10:11	10:11	6	=
LEAF_NODE	10:11	10:11	7	=
RVAL	10:13	10:13	6	GG_STATE_IDLE
FIELD	10:13	10:13	7	GG_STATE_IDLE
LEAF_NODE	10:13	10:13	8	GG_STATE_IDLE
LEAF_NODE	10:26	10:26	4	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	13:0	1	
RETURN_TYPE	1:0	1:15	2	PeerConnection *
TYPE_NAME	1:0	1:0	3	PeerConnection
LEAF_NODE	1:0	1:0	4	PeerConnection
LEAF_NODE	1:15	1:15	3	*
FUNCTION_NAME	2:0	2:0	2	peer_connection_find_by_type
LEAF_NODE	2:0	2:0	3	peer_connection_find_by_type
PARAMETER_LIST	2:28	2:72	2	( OscarData * od , const char * bn , guint64 type )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:40	3	OscarData * od
TYPE	2:29	2:39	4	OscarData *
TYPE_NAME	2:29	2:29	5	OscarData
LEAF_NODE	2:29	2:29	6	OscarData
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	od
LEAF_NODE	2:40	2:40	5	od
LEAF_NODE	2:42	2:42	3	,
PARAMETER_DECL	2:44	2:56	3	const char * bn
TYPE	2:44	2:55	4	const char *
TYPE_NAME	2:44	2:50	5	const char
LEAF_NODE	2:44	2:44	6	const
LEAF_NODE	2:50	2:50	6	char
POINTER	2:55	2:55	5	*
LEAF_NODE	2:55	2:55	6	*
NAME	2:56	2:56	4	bn
LEAF_NODE	2:56	2:56	5	bn
LEAF_NODE	2:58	2:58	3	,
PARAMETER_DECL	2:60	2:68	3	guint64 type
TYPE	2:60	2:60	4	guint64
TYPE_NAME	2:60	2:60	5	guint64
LEAF_NODE	2:60	2:60	6	guint64
NAME	2:68	2:68	4	type
LEAF_NODE	2:68	2:68	5	type
LEAF_NODE	2:72	2:72	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	12:1	2	
SIMPLE_DECL	4:1	4:12	3	GSList * cur ;
VAR_DECL	4:1	4:9	4	GSList * cur
TYPE	4:1	4:8	5	GSList *
TYPE_NAME	4:1	4:1	6	GSList
LEAF_NODE	4:1	4:1	7	GSList
POINTER	4:8	4:8	6	*
LEAF_NODE	4:8	4:8	7	*
NAME	4:9	4:9	5	cur
LEAF_NODE	4:9	4:9	6	cur
LEAF_NODE	4:12	4:12	4	;
SIMPLE_DECL	5:1	5:21	3	PeerConnection * conn ;
VAR_DECL	5:1	5:17	4	PeerConnection * conn
TYPE	5:1	5:16	5	PeerConnection *
TYPE_NAME	5:1	5:1	6	PeerConnection
LEAF_NODE	5:1	5:1	7	PeerConnection
POINTER	5:16	5:16	6	*
LEAF_NODE	5:16	5:16	7	*
NAME	5:17	5:17	5	conn
LEAF_NODE	5:17	5:17	6	conn
LEAF_NODE	5:21	5:21	4	;
ITERATION	6:1	7:1	3	
KEYWORD	6:1	6:1	4	for
LEAF_NODE	6:1	6:1	5	for
LEAF_NODE	6:5	6:5	4	(
FOR_INIT	6:6	6:32	4	cur = od -> peer_connections ;
EXPR	6:6	6:6	5	cur = od -> peer_connections
ASSIGN	6:6	6:12	6	cur = od -> peer_connections
LVAL	6:6	6:6	7	cur
FIELD	6:6	6:6	8	cur
LEAF_NODE	6:6	6:6	9	cur
ASSIGN_OP	6:10	6:10	7	=
LEAF_NODE	6:10	6:10	8	=
RVAL	6:12	6:12	7	od -> peer_connections
FIELD	6:12	6:16	8	od -> peer_connections
LEAF_NODE	6:12	6:12	9	od
LEAF_NODE	6:14	6:14	9	->
LEAF_NODE	6:16	6:16	9	peer_connections
LEAF_NODE	6:32	6:32	5	;
CONDITION	6:34	6:34	4	cur != NULL
EXPR	6:34	6:41	5	cur != NULL
FIELD	6:34	6:34	6	cur
LEAF_NODE	6:34	6:34	7	cur
EQ_OPERATOR	6:38	6:38	6	!=
LEAF_NODE	6:38	6:38	7	!=
FIELD	6:41	6:41	6	NULL
LEAF_NODE	6:41	6:41	7	NULL
LEAF_NODE	6:45	6:45	4	;
FOR_EXPR	6:47	6:47	4	cur = cur -> next
EXPR	6:47	6:47	5	cur = cur -> next
ASSIGN	6:47	6:53	6	cur = cur -> next
LVAL	6:47	6:47	7	cur
FIELD	6:47	6:47	8	cur
LEAF_NODE	6:47	6:47	9	cur
ASSIGN_OP	6:51	6:51	7	=
LEAF_NODE	6:51	6:51	8	=
RVAL	6:53	6:53	7	cur -> next
FIELD	6:53	6:58	8	cur -> next
LEAF_NODE	6:53	6:53	9	cur
LEAF_NODE	6:56	6:56	9	->
LEAF_NODE	6:58	6:58	9	next
LEAF_NODE	6:62	6:62	4	)
STATEMENTS	7:1	11:1	4	
LEAF_NODE	7:1	7:1	5	{
STATEMENTS	8:2	9:2	5	
EXPR_STATEMENT	8:2	8:18	6	conn = cur -> data ;
EXPR	8:2	8:2	7	conn = cur -> data
ASSIGN	8:2	8:9	8	conn = cur -> data
LVAL	8:2	8:2	9	conn
FIELD	8:2	8:2	10	conn
LEAF_NODE	8:2	8:2	11	conn
ASSIGN_OP	8:7	8:7	9	=
LEAF_NODE	8:7	8:7	10	=
RVAL	8:9	8:9	9	cur -> data
FIELD	8:9	8:14	10	cur -> data
LEAF_NODE	8:9	8:9	11	cur
LEAF_NODE	8:12	8:12	11	->
LEAF_NODE	8:14	8:14	11	data
LEAF_NODE	8:18	8:18	7	;
SELECTION	9:2	10:3	6	
KEYWORD	9:2	9:2	7	if
LEAF_NODE	9:2	9:2	8	if
LEAF_NODE	9:5	9:5	7	(
CONDITION	9:6	9:6	7	( conn -> type == type ) && ! oscar_util_name_compare ( conn -> bn , bn )
EXPR	9:6	9:6	8	( conn -> type == type ) && ! oscar_util_name_compare ( conn -> bn , bn )
AND	9:6	9:30	9	( conn -> type == type ) && ! oscar_util_name_compare ( conn -> bn , bn )
EXPR	9:6	9:25	10	( conn -> type == type )
LEAF_NODE	9:6	9:6	11	(
FIELD	9:7	9:13	11	conn -> type
LEAF_NODE	9:7	9:7	12	conn
LEAF_NODE	9:11	9:11	12	->
LEAF_NODE	9:13	9:13	12	type
EQ_OPERATOR	9:18	9:18	11	==
LEAF_NODE	9:18	9:18	12	==
FIELD	9:21	9:21	11	type
LEAF_NODE	9:21	9:21	12	type
LEAF_NODE	9:25	9:25	11	)
LEAF_NODE	9:27	9:27	10	&&
EXPR	9:30	9:30	10	! oscar_util_name_compare ( conn -> bn , bn )
UNARY_EXPR	9:30	9:31	11	! oscar_util_name_compare ( conn -> bn , bn )
UNARY_OPERATOR	9:30	9:30	12	!
LEAF_NODE	9:30	9:30	13	!
FUNCTION_CALL	9:31	9:67	12	oscar_util_name_compare ( conn -> bn , bn )
CALLEE	9:31	9:31	13	oscar_util_name_compare
LEAF_NODE	9:31	9:31	14	oscar_util_name_compare
LEAF_NODE	9:54	9:54	13	(
ARGUMENT	9:55	9:55	13	conn -> bn
FIELD	9:55	9:61	14	conn -> bn
LEAF_NODE	9:55	9:55	15	conn
LEAF_NODE	9:59	9:59	15	->
LEAF_NODE	9:61	9:61	15	bn
LEAF_NODE	9:63	9:63	13	,
ARGUMENT	9:65	9:65	13	bn
FIELD	9:65	9:65	14	bn
LEAF_NODE	9:65	9:65	15	bn
LEAF_NODE	9:67	9:67	13	)
LEAF_NODE	9:68	9:68	7	)
STATEMENTS	10:3	10:3	7	
JUMP_STATEMENT	10:3	10:14	8	return conn ;
KEYWORD	10:3	10:3	9	return
LEAF_NODE	10:3	10:3	10	return
DESTINATION	10:10	10:10	9	conn
EXPR	10:10	10:10	10	conn
FIELD	10:10	10:10	11	conn
LEAF_NODE	10:10	10:10	12	conn
LEAF_NODE	10:14	10:14	9	;
LEAF_NODE	11:1	11:1	5	}
JUMP_STATEMENT	12:1	12:12	3	return NULL ;
KEYWORD	12:1	12:1	4	return
LEAF_NODE	12:1	12:1	5	return
DESTINATION	12:8	12:8	4	NULL
EXPR	12:8	12:8	5	NULL
FIELD	12:8	12:8	6	NULL
LEAF_NODE	12:8	12:8	7	NULL
LEAF_NODE	12:12	12:12	4	;
LEAF_NODE	13:0	13:0	2	}

SOURCE_FILE	5:1	7:1	0	
SIMPLE_DECL	5:1	5:19	1	GList * list ; list = NULL ;
VAR_DECL	5:1	5:8	2	GList * list ; list = NULL
TYPE	5:1	5:7	3	GList *
TYPE_NAME	5:1	5:1	4	GList
LEAF_NODE	5:1	5:1	5	GList
POINTER	5:7	5:7	4	*
LEAF_NODE	5:7	5:7	5	*
NAME	5:8	5:8	3	list
LEAF_NODE	5:8	5:8	4	list
LEAF_NODE	0:0	0:0	3	;
INIT	5:8	5:8	3	list = NULL
ASSIGN	5:8	5:15	4	list = NULL
LVAL	5:8	5:8	5	list
NAME	5:8	5:8	6	list
LEAF_NODE	5:8	5:8	7	list
ASSIGN_OP	5:13	5:13	5	=
LEAF_NODE	5:13	5:13	6	=
RVAL	5:15	5:15	5	NULL
FIELD	5:15	5:15	6	NULL
LEAF_NODE	5:15	5:15	7	NULL
LEAF_NODE	5:19	5:19	2	;
SIMPLE_DECL	6:1	6:13	1	va_list args ;
VAR_DECL	6:1	6:9	2	va_list args
TYPE	6:1	6:1	3	va_list
TYPE_NAME	6:1	6:1	4	va_list
LEAF_NODE	6:1	6:1	5	va_list
NAME	6:9	6:9	3	args
LEAF_NODE	6:9	6:9	4	args
LEAF_NODE	6:13	6:13	2	;
SIMPLE_DECL	7:1	7:11	1	void * data ;
VAR_DECL	7:1	7:7	2	void * data
TYPE	7:1	7:6	3	void *
TYPE_NAME	7:1	7:1	4	void
LEAF_NODE	7:1	7:1	5	void
POINTER	7:6	7:6	4	*
LEAF_NODE	7:6	7:6	5	*
NAME	7:7	7:7	3	data
LEAF_NODE	7:7	7:7	4	data
LEAF_NODE	7:11	7:11	2	;

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	window_prev_urgent
LEAF_NODE	2:0	2:0	3	window_prev_urgent
PARAMETER_LIST	2:18	2:50	2	( GntBindable * bindable , GList * n )
LEAF_NODE	2:18	2:18	3	(
PARAMETER_DECL	2:19	2:32	3	GntBindable * bindable
TYPE	2:19	2:31	4	GntBindable *
TYPE_NAME	2:19	2:19	5	GntBindable
LEAF_NODE	2:19	2:19	6	GntBindable
POINTER	2:31	2:31	5	*
LEAF_NODE	2:31	2:31	6	*
NAME	2:32	2:32	4	bindable
LEAF_NODE	2:32	2:32	5	bindable
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:49	3	GList * n
TYPE	2:42	2:48	4	GList *
TYPE_NAME	2:42	2:42	5	GList
LEAF_NODE	2:42	2:42	6	GList
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	n
LEAF_NODE	2:49	2:49	5	n
LEAF_NODE	2:50	2:50	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SIMPLE_DECL	4:1	4:29	3	GntWM * wm ; wm = GNT_WM ( bindable ) ;
VAR_DECL	4:1	4:8	4	GntWM * wm ; wm = GNT_WM ( bindable )
TYPE	4:1	4:7	5	GntWM *
TYPE_NAME	4:1	4:1	6	GntWM
LEAF_NODE	4:1	4:1	7	GntWM
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	wm
LEAF_NODE	4:8	4:8	6	wm
LEAF_NODE	0:0	0:0	5	;
INIT	4:8	4:8	5	wm = GNT_WM ( bindable )
ASSIGN	4:8	4:13	6	wm = GNT_WM ( bindable )
LVAL	4:8	4:8	7	wm
NAME	4:8	4:8	8	wm
LEAF_NODE	4:8	4:8	9	wm
ASSIGN_OP	4:11	4:11	7	=
LEAF_NODE	4:11	4:11	8	=
RVAL	4:13	4:13	7	GNT_WM ( bindable )
FUNCTION_CALL	4:13	4:28	8	GNT_WM ( bindable )
CALLEE	4:13	4:13	9	GNT_WM
LEAF_NODE	4:13	4:13	10	GNT_WM
LEAF_NODE	4:19	4:19	9	(
ARGUMENT	4:20	4:20	9	bindable
FIELD	4:20	4:20	10	bindable
LEAF_NODE	4:20	4:20	11	bindable
LEAF_NODE	4:28	4:28	9	)
LEAF_NODE	4:29	4:29	4	;
EXPR_STATEMENT	5:1	5:28	3	switch_window ( wm , - 1 , TRUE ) ;
EXPR	5:1	5:1	4	switch_window ( wm , - 1 , TRUE )
FUNCTION_CALL	5:1	5:27	5	switch_window ( wm , - 1 , TRUE )
CALLEE	5:1	5:1	6	switch_window
LEAF_NODE	5:1	5:1	7	switch_window
LEAF_NODE	5:14	5:14	6	(
ARGUMENT	5:15	5:15	6	wm
FIELD	5:15	5:15	7	wm
LEAF_NODE	5:15	5:15	8	wm
LEAF_NODE	5:17	5:17	6	,
ARGUMENT	5:19	5:19	6	- 1
UNARY_EXPR	5:19	5:20	7	- 1
UNARY_OPERATOR	5:19	5:19	8	-
LEAF_NODE	5:19	5:19	9	-
FIELD	5:20	5:20	8	1
LEAF_NODE	5:20	5:20	9	1
LEAF_NODE	5:21	5:21	6	,
ARGUMENT	5:23	5:23	6	TRUE
FIELD	5:23	5:23	7	TRUE
LEAF_NODE	5:23	5:23	8	TRUE
LEAF_NODE	5:27	5:27	6	)
LEAF_NODE	5:28	5:28	4	;
JUMP_STATEMENT	6:1	6:12	3	return TRUE ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	TRUE
EXPR	6:8	6:8	5	TRUE
FIELD	6:8	6:8	6	TRUE
LEAF_NODE	6:8	6:8	7	TRUE
LEAF_NODE	6:12	6:12	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	16:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	do_fgcolor
LEAF_NODE	2:12	2:12	3	do_fgcolor
PARAMETER_LIST	2:22	2:69	2	( GtkWidget * widget , GtkColorSelection * colorsel )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:34	3	GtkWidget * widget
TYPE	2:23	2:33	4	GtkWidget *
TYPE_NAME	2:23	2:23	5	GtkWidget
LEAF_NODE	2:23	2:23	6	GtkWidget
POINTER	2:33	2:33	5	*
LEAF_NODE	2:33	2:33	6	*
NAME	2:34	2:34	4	widget
LEAF_NODE	2:34	2:34	5	widget
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:61	3	GtkColorSelection * colorsel
TYPE	2:42	2:60	4	GtkColorSelection *
TYPE_NAME	2:42	2:42	5	GtkColorSelection
LEAF_NODE	2:42	2:42	6	GtkColorSelection
POINTER	2:60	2:60	5	*
LEAF_NODE	2:60	2:60	6	*
NAME	2:61	2:61	4	colorsel
LEAF_NODE	2:61	2:61	5	colorsel
LEAF_NODE	2:69	2:69	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	15:1	2	
SIMPLE_DECL	4:1	4:20	3	GdkColor text_color ;
VAR_DECL	4:1	4:10	4	GdkColor text_color
TYPE	4:1	4:1	5	GdkColor
TYPE_NAME	4:1	4:1	6	GdkColor
LEAF_NODE	4:1	4:1	7	GdkColor
NAME	4:10	4:10	5	text_color
LEAF_NODE	4:10	4:10	6	text_color
LEAF_NODE	4:20	4:20	4	;
SIMPLE_DECL	5:1	5:84	3	GtkIMHtmlToolbar * toolbar ; toolbar = g_object_get_data ( G_OBJECT ( colorsel ) , "purple_toolbar" ) ;
VAR_DECL	5:1	5:19	4	GtkIMHtmlToolbar * toolbar ; toolbar = g_object_get_data ( G_OBJECT ( colorsel ) , "purple_toolbar" )
TYPE	5:1	5:18	5	GtkIMHtmlToolbar *
TYPE_NAME	5:1	5:1	6	GtkIMHtmlToolbar
LEAF_NODE	5:1	5:1	7	GtkIMHtmlToolbar
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	toolbar
LEAF_NODE	5:19	5:19	6	toolbar
LEAF_NODE	0:0	0:0	5	;
INIT	5:19	5:19	5	toolbar = g_object_get_data ( G_OBJECT ( colorsel ) , "purple_toolbar" )
ASSIGN	5:19	5:29	6	toolbar = g_object_get_data ( G_OBJECT ( colorsel ) , "purple_toolbar" )
LVAL	5:19	5:19	7	toolbar
NAME	5:19	5:19	8	toolbar
LEAF_NODE	5:19	5:19	9	toolbar
ASSIGN_OP	5:27	5:27	7	=
LEAF_NODE	5:27	5:27	8	=
RVAL	5:29	5:29	7	g_object_get_data ( G_OBJECT ( colorsel ) , "purple_toolbar" )
FUNCTION_CALL	5:29	5:83	8	g_object_get_data ( G_OBJECT ( colorsel ) , "purple_toolbar" )
CALLEE	5:29	5:29	9	g_object_get_data
LEAF_NODE	5:29	5:29	10	g_object_get_data
LEAF_NODE	5:46	5:46	9	(
ARGUMENT	5:47	5:47	9	G_OBJECT ( colorsel )
FUNCTION_CALL	5:47	5:64	10	G_OBJECT ( colorsel )
CALLEE	5:47	5:47	11	G_OBJECT
LEAF_NODE	5:47	5:47	12	G_OBJECT
LEAF_NODE	5:55	5:55	11	(
ARGUMENT	5:56	5:56	11	colorsel
FIELD	5:56	5:56	12	colorsel
LEAF_NODE	5:56	5:56	13	colorsel
LEAF_NODE	5:64	5:64	11	)
LEAF_NODE	5:65	5:65	9	,
ARGUMENT	5:67	5:67	9	"purple_toolbar"
FIELD	5:67	5:67	10	"purple_toolbar"
LEAF_NODE	5:67	5:67	11	"purple_toolbar"
LEAF_NODE	5:83	5:83	9	)
LEAF_NODE	5:84	5:84	4	;
SIMPLE_DECL	6:1	6:15	3	char * open_tag ;
VAR_DECL	6:1	6:7	4	char * open_tag
TYPE	6:1	6:6	5	char *
TYPE_NAME	6:1	6:1	6	char
LEAF_NODE	6:1	6:1	7	char
POINTER	6:6	6:6	6	*
LEAF_NODE	6:6	6:6	7	*
NAME	6:7	6:7	5	open_tag
LEAF_NODE	6:7	6:7	6	open_tag
LEAF_NODE	6:15	6:15	4	;
EXPR_STATEMENT	7:1	7:24	3	open_tag = g_malloc ( 30 ) ;
EXPR	7:1	7:1	4	open_tag = g_malloc ( 30 )
ASSIGN	7:1	7:12	5	open_tag = g_malloc ( 30 )
LVAL	7:1	7:1	6	open_tag
FIELD	7:1	7:1	7	open_tag
LEAF_NODE	7:1	7:1	8	open_tag
ASSIGN_OP	7:10	7:10	6	=
LEAF_NODE	7:10	7:10	7	=
RVAL	7:12	7:12	6	g_malloc ( 30 )
FUNCTION_CALL	7:12	7:23	7	g_malloc ( 30 )
CALLEE	7:12	7:12	8	g_malloc
LEAF_NODE	7:12	7:12	9	g_malloc
LEAF_NODE	7:20	7:20	8	(
ARGUMENT	7:21	7:21	8	30
FIELD	7:21	7:21	9	30
LEAF_NODE	7:21	7:21	10	30
LEAF_NODE	7:23	7:23	8	)
LEAF_NODE	7:24	7:24	4	;
EXPR_STATEMENT	8:1	8:61	3	gtk_color_selection_get_current_color ( colorsel , & text_color ) ;
EXPR	8:1	8:1	4	gtk_color_selection_get_current_color ( colorsel , & text_color )
FUNCTION_CALL	8:1	8:60	5	gtk_color_selection_get_current_color ( colorsel , & text_color )
CALLEE	8:1	8:1	6	gtk_color_selection_get_current_color
LEAF_NODE	8:1	8:1	7	gtk_color_selection_get_current_color
LEAF_NODE	8:38	8:38	6	(
ARGUMENT	8:39	8:39	6	colorsel
FIELD	8:39	8:39	7	colorsel
LEAF_NODE	8:39	8:39	8	colorsel
LEAF_NODE	8:47	8:47	6	,
ARGUMENT	8:49	8:49	6	& text_color
UNARY_EXPR	8:49	8:50	7	& text_color
UNARY_OPERATOR	8:49	8:49	8	&
LEAF_NODE	8:49	8:49	9	&
FIELD	8:50	8:50	8	text_color
LEAF_NODE	8:50	8:50	9	text_color
LEAF_NODE	8:60	8:60	6	)
LEAF_NODE	8:61	8:61	4	;
EXPR_STATEMENT	9:1	12:28	3	g_snprintf ( open_tag , 23 , "#%02X%02X%02X" , text_color . red / 256 , text_color . green / 256 , text_color . blue / 256 ) ;
EXPR	9:1	9:1	4	g_snprintf ( open_tag , 23 , "#%02X%02X%02X" , text_color . red / 256 , text_color . green / 256 , text_color . blue / 256 )
FUNCTION_CALL	9:1	12:27	5	g_snprintf ( open_tag , 23 , "#%02X%02X%02X" , text_color . red / 256 , text_color . green / 256 , text_color . blue / 256 )
CALLEE	9:1	9:1	6	g_snprintf
LEAF_NODE	9:1	9:1	7	g_snprintf
LEAF_NODE	9:11	9:11	6	(
ARGUMENT	9:12	9:12	6	open_tag
FIELD	9:12	9:12	7	open_tag
LEAF_NODE	9:12	9:12	8	open_tag
LEAF_NODE	9:20	9:20	6	,
ARGUMENT	9:22	9:22	6	23
FIELD	9:22	9:22	7	23
LEAF_NODE	9:22	9:22	8	23
LEAF_NODE	9:24	9:24	6	,
ARGUMENT	9:26	9:26	6	"#%02X%02X%02X"
FIELD	9:26	9:26	7	"#%02X%02X%02X"
LEAF_NODE	9:26	9:26	8	"#%02X%02X%02X"
LEAF_NODE	9:41	9:41	6	,
ARGUMENT	10:6	10:23	6	text_color . red / 256
FIELD	10:6	10:17	7	text_color . red
LEAF_NODE	10:6	10:6	8	text_color
LEAF_NODE	10:16	10:16	8	.
LEAF_NODE	10:17	10:17	8	red
LEAF_NODE	10:21	10:21	7	/
FIELD	10:23	10:23	7	256
LEAF_NODE	10:23	10:23	8	256
LEAF_NODE	10:26	10:26	6	,
ARGUMENT	11:6	11:25	6	text_color . green / 256
FIELD	11:6	11:17	7	text_color . green
LEAF_NODE	11:6	11:6	8	text_color
LEAF_NODE	11:16	11:16	8	.
LEAF_NODE	11:17	11:17	8	green
LEAF_NODE	11:23	11:23	7	/
FIELD	11:25	11:25	7	256
LEAF_NODE	11:25	11:25	8	256
LEAF_NODE	11:28	11:28	6	,
ARGUMENT	12:6	12:24	6	text_color . blue / 256
FIELD	12:6	12:17	7	text_color . blue
LEAF_NODE	12:6	12:6	8	text_color
LEAF_NODE	12:16	12:16	8	.
LEAF_NODE	12:17	12:17	8	blue
LEAF_NODE	12:22	12:22	7	/
FIELD	12:24	12:24	7	256
LEAF_NODE	12:24	12:24	8	256
LEAF_NODE	12:27	12:27	6	)
LEAF_NODE	12:28	12:28	4	;
EXPR_STATEMENT	13:1	13:67	3	gtk_imhtml_toggle_forecolor ( GTK_IMHTML ( toolbar -> imhtml ) , open_tag ) ;
EXPR	13:1	13:1	4	gtk_imhtml_toggle_forecolor ( GTK_IMHTML ( toolbar -> imhtml ) , open_tag )
FUNCTION_CALL	13:1	13:66	5	gtk_imhtml_toggle_forecolor ( GTK_IMHTML ( toolbar -> imhtml ) , open_tag )
CALLEE	13:1	13:1	6	gtk_imhtml_toggle_forecolor
LEAF_NODE	13:1	13:1	7	gtk_imhtml_toggle_forecolor
LEAF_NODE	13:28	13:28	6	(
ARGUMENT	13:29	13:29	6	GTK_IMHTML ( toolbar -> imhtml )
FUNCTION_CALL	13:29	13:55	7	GTK_IMHTML ( toolbar -> imhtml )
CALLEE	13:29	13:29	8	GTK_IMHTML
LEAF_NODE	13:29	13:29	9	GTK_IMHTML
LEAF_NODE	13:39	13:39	8	(
ARGUMENT	13:40	13:40	8	toolbar -> imhtml
FIELD	13:40	13:49	9	toolbar -> imhtml
LEAF_NODE	13:40	13:40	10	toolbar
LEAF_NODE	13:47	13:47	10	->
LEAF_NODE	13:49	13:49	10	imhtml
LEAF_NODE	13:55	13:55	8	)
LEAF_NODE	13:56	13:56	6	,
ARGUMENT	13:58	13:58	6	open_tag
FIELD	13:58	13:58	7	open_tag
LEAF_NODE	13:58	13:58	8	open_tag
LEAF_NODE	13:66	13:66	6	)
LEAF_NODE	13:67	13:67	4	;
EXPR_STATEMENT	14:1	14:17	3	g_free ( open_tag ) ;
EXPR	14:1	14:1	4	g_free ( open_tag )
FUNCTION_CALL	14:1	14:16	5	g_free ( open_tag )
CALLEE	14:1	14:1	6	g_free
LEAF_NODE	14:1	14:1	7	g_free
LEAF_NODE	14:7	14:7	6	(
ARGUMENT	14:8	14:8	6	open_tag
FIELD	14:8	14:8	7	open_tag
LEAF_NODE	14:8	14:8	8	open_tag
LEAF_NODE	14:16	14:16	6	)
LEAF_NODE	14:17	14:17	4	;
EXPR_STATEMENT	15:1	15:38	3	cancel_toolbar_fgcolor ( NULL , toolbar ) ;
EXPR	15:1	15:1	4	cancel_toolbar_fgcolor ( NULL , toolbar )
FUNCTION_CALL	15:1	15:37	5	cancel_toolbar_fgcolor ( NULL , toolbar )
CALLEE	15:1	15:1	6	cancel_toolbar_fgcolor
LEAF_NODE	15:1	15:1	7	cancel_toolbar_fgcolor
LEAF_NODE	15:23	15:23	6	(
ARGUMENT	15:24	15:24	6	NULL
FIELD	15:24	15:24	7	NULL
LEAF_NODE	15:24	15:24	8	NULL
LEAF_NODE	15:28	15:28	6	,
ARGUMENT	15:30	15:30	6	toolbar
FIELD	15:30	15:30	7	toolbar
LEAF_NODE	15:30	15:30	8	toolbar
LEAF_NODE	15:37	15:37	6	)
LEAF_NODE	15:38	15:38	4	;
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:0	2	PurpleTypingState
TYPE_NAME	1:0	1:0	3	PurpleTypingState
LEAF_NODE	1:0	1:0	4	PurpleTypingState
FUNCTION_NAME	2:0	2:0	2	purple_conv_im_get_typing_state
LEAF_NODE	2:0	2:0	3	purple_conv_im_get_typing_state
PARAMETER_LIST	2:31	2:54	2	( const PurpleConvIm * im )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:52	3	const PurpleConvIm * im
TYPE	2:32	2:51	4	const PurpleConvIm *
TYPE_NAME	2:32	2:38	5	const PurpleConvIm
LEAF_NODE	2:32	2:32	6	const
LEAF_NODE	2:38	2:38	6	PurpleConvIm
POINTER	2:51	2:51	5	*
LEAF_NODE	2:51	2:51	6	*
NAME	2:52	2:52	4	im
LEAF_NODE	2:52	2:52	5	im
LEAF_NODE	2:54	2:54	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:36	3	g_return_val_if_fail ( im != NULL , 0 ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( im != NULL , 0 )
FUNCTION_CALL	4:1	4:35	5	g_return_val_if_fail ( im != NULL , 0 )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:28	6	im != NULL
FIELD	4:22	4:22	7	im
LEAF_NODE	4:22	4:22	8	im
EQ_OPERATOR	4:25	4:25	7	!=
LEAF_NODE	4:25	4:25	8	!=
FIELD	4:28	4:28	7	NULL
LEAF_NODE	4:28	4:28	8	NULL
LEAF_NODE	4:32	4:32	6	,
ARGUMENT	4:34	4:34	6	0
FIELD	4:34	4:34	7	0
LEAF_NODE	4:34	4:34	8	0
LEAF_NODE	4:35	4:35	6	)
LEAF_NODE	4:36	4:36	4	;
JUMP_STATEMENT	5:1	5:24	3	return im -> typing_state ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	im -> typing_state
EXPR	5:8	5:8	5	im -> typing_state
FIELD	5:8	5:12	6	im -> typing_state
LEAF_NODE	5:8	5:8	7	im
LEAF_NODE	5:10	5:10	7	->
LEAF_NODE	5:12	5:12	7	typing_state
LEAF_NODE	5:24	5:24	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	128:0	1	
RETURN_TYPE	1:0	1:12	2	static void *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
LEAF_NODE	1:12	1:12	3	*
FUNCTION_NAME	2:0	2:0	2	pidgin_request_input
LEAF_NODE	2:0	2:0	3	pidgin_request_input
PARAMETER_LIST	2:20	8:23	2	( const char * title , const char * primary , const char * secondary , const char * default_value , gboolean multiline , gboolean masked , gchar * hint , const char * ok_text , GCallback ok_cb , const char * cancel_text , GCallback cancel_cb , PurpleAccount * account , const char * who , PurpleConversation * conv , void * user_data )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:33	3	const char * title
TYPE	2:21	2:32	4	const char *
TYPE_NAME	2:21	2:27	5	const char
LEAF_NODE	2:21	2:21	6	const
LEAF_NODE	2:27	2:27	6	char
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	title
LEAF_NODE	2:33	2:33	5	title
LEAF_NODE	2:38	2:38	3	,
PARAMETER_DECL	2:40	2:52	3	const char * primary
TYPE	2:40	2:51	4	const char *
TYPE_NAME	2:40	2:46	5	const char
LEAF_NODE	2:40	2:40	6	const
LEAF_NODE	2:46	2:46	6	char
POINTER	2:51	2:51	5	*
LEAF_NODE	2:51	2:51	6	*
NAME	2:52	2:52	4	primary
LEAF_NODE	2:52	2:52	5	primary
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	3:8	3:20	3	const char * secondary
TYPE	3:8	3:19	4	const char *
TYPE_NAME	3:8	3:14	5	const char
LEAF_NODE	3:8	3:8	6	const
LEAF_NODE	3:14	3:14	6	char
POINTER	3:19	3:19	5	*
LEAF_NODE	3:19	3:19	6	*
NAME	3:20	3:20	4	secondary
LEAF_NODE	3:20	3:20	5	secondary
LEAF_NODE	3:29	3:29	3	,
PARAMETER_DECL	3:31	3:43	3	const char * default_value
TYPE	3:31	3:42	4	const char *
TYPE_NAME	3:31	3:37	5	const char
LEAF_NODE	3:31	3:31	6	const
LEAF_NODE	3:37	3:37	6	char
POINTER	3:42	3:42	5	*
LEAF_NODE	3:42	3:42	6	*
NAME	3:43	3:43	4	default_value
LEAF_NODE	3:43	3:43	5	default_value
LEAF_NODE	3:56	3:56	3	,
PARAMETER_DECL	4:8	4:17	3	gboolean multiline
TYPE	4:8	4:8	4	gboolean
TYPE_NAME	4:8	4:8	5	gboolean
LEAF_NODE	4:8	4:8	6	gboolean
NAME	4:17	4:17	4	multiline
LEAF_NODE	4:17	4:17	5	multiline
LEAF_NODE	4:26	4:26	3	,
PARAMETER_DECL	4:28	4:37	3	gboolean masked
TYPE	4:28	4:28	4	gboolean
TYPE_NAME	4:28	4:28	5	gboolean
LEAF_NODE	4:28	4:28	6	gboolean
NAME	4:37	4:37	4	masked
LEAF_NODE	4:37	4:37	5	masked
LEAF_NODE	4:43	4:43	3	,
PARAMETER_DECL	4:45	4:52	3	gchar * hint
TYPE	4:45	4:51	4	gchar *
TYPE_NAME	4:45	4:45	5	gchar
LEAF_NODE	4:45	4:45	6	gchar
POINTER	4:51	4:51	5	*
LEAF_NODE	4:51	4:51	6	*
NAME	4:52	4:52	4	hint
LEAF_NODE	4:52	4:52	5	hint
LEAF_NODE	4:56	4:56	3	,
PARAMETER_DECL	5:8	5:20	3	const char * ok_text
TYPE	5:8	5:19	4	const char *
TYPE_NAME	5:8	5:14	5	const char
LEAF_NODE	5:8	5:8	6	const
LEAF_NODE	5:14	5:14	6	char
POINTER	5:19	5:19	5	*
LEAF_NODE	5:19	5:19	6	*
NAME	5:20	5:20	4	ok_text
LEAF_NODE	5:20	5:20	5	ok_text
LEAF_NODE	5:27	5:27	3	,
PARAMETER_DECL	5:29	5:39	3	GCallback ok_cb
TYPE	5:29	5:29	4	GCallback
TYPE_NAME	5:29	5:29	5	GCallback
LEAF_NODE	5:29	5:29	6	GCallback
NAME	5:39	5:39	4	ok_cb
LEAF_NODE	5:39	5:39	5	ok_cb
LEAF_NODE	5:44	5:44	3	,
PARAMETER_DECL	6:8	6:20	3	const char * cancel_text
TYPE	6:8	6:19	4	const char *
TYPE_NAME	6:8	6:14	5	const char
LEAF_NODE	6:8	6:8	6	const
LEAF_NODE	6:14	6:14	6	char
POINTER	6:19	6:19	5	*
LEAF_NODE	6:19	6:19	6	*
NAME	6:20	6:20	4	cancel_text
LEAF_NODE	6:20	6:20	5	cancel_text
LEAF_NODE	6:31	6:31	3	,
PARAMETER_DECL	6:33	6:43	3	GCallback cancel_cb
TYPE	6:33	6:33	4	GCallback
TYPE_NAME	6:33	6:33	5	GCallback
LEAF_NODE	6:33	6:33	6	GCallback
NAME	6:43	6:43	4	cancel_cb
LEAF_NODE	6:43	6:43	5	cancel_cb
LEAF_NODE	6:52	6:52	3	,
PARAMETER_DECL	7:8	7:23	3	PurpleAccount * account
TYPE	7:8	7:22	4	PurpleAccount *
TYPE_NAME	7:8	7:8	5	PurpleAccount
LEAF_NODE	7:8	7:8	6	PurpleAccount
POINTER	7:22	7:22	5	*
LEAF_NODE	7:22	7:22	6	*
NAME	7:23	7:23	4	account
LEAF_NODE	7:23	7:23	5	account
LEAF_NODE	7:30	7:30	3	,
PARAMETER_DECL	7:32	7:44	3	const char * who
TYPE	7:32	7:43	4	const char *
TYPE_NAME	7:32	7:38	5	const char
LEAF_NODE	7:32	7:32	6	const
LEAF_NODE	7:38	7:38	6	char
POINTER	7:43	7:43	5	*
LEAF_NODE	7:43	7:43	6	*
NAME	7:44	7:44	4	who
LEAF_NODE	7:44	7:44	5	who
LEAF_NODE	7:47	7:47	3	,
PARAMETER_DECL	7:49	7:69	3	PurpleConversation * conv
TYPE	7:49	7:68	4	PurpleConversation *
TYPE_NAME	7:49	7:49	5	PurpleConversation
LEAF_NODE	7:49	7:49	6	PurpleConversation
POINTER	7:68	7:68	5	*
LEAF_NODE	7:68	7:68	6	*
NAME	7:69	7:69	4	conv
LEAF_NODE	7:69	7:69	5	conv
LEAF_NODE	7:73	7:73	3	,
PARAMETER_DECL	8:8	8:14	3	void * user_data
TYPE	8:8	8:13	4	void *
TYPE_NAME	8:8	8:8	5	void
LEAF_NODE	8:8	8:8	6	void
POINTER	8:13	8:13	5	*
LEAF_NODE	8:13	8:13	6	*
NAME	8:14	8:14	4	user_data
LEAF_NODE	8:14	8:14	5	user_data
LEAF_NODE	8:23	8:23	3	)
LEAF_NODE	9:0	9:0	2	{
STATEMENTS	10:1	127:1	2	
SIMPLE_DECL	10:1	10:24	3	PidginRequestData * data ;
VAR_DECL	10:1	10:20	4	PidginRequestData * data
TYPE	10:1	10:19	5	PidginRequestData *
TYPE_NAME	10:1	10:1	6	PidginRequestData
LEAF_NODE	10:1	10:1	7	PidginRequestData
POINTER	10:19	10:19	6	*
LEAF_NODE	10:19	10:19	7	*
NAME	10:20	10:20	5	data
LEAF_NODE	10:20	10:20	6	data
LEAF_NODE	10:24	10:24	4	;
SIMPLE_DECL	11:1	11:18	3	GtkWidget * dialog ;
VAR_DECL	11:1	11:12	4	GtkWidget * dialog
TYPE	11:1	11:11	5	GtkWidget *
TYPE_NAME	11:1	11:1	6	GtkWidget
LEAF_NODE	11:1	11:1	7	GtkWidget
POINTER	11:11	11:11	6	*
LEAF_NODE	11:11	11:11	7	*
NAME	11:12	11:12	5	dialog
LEAF_NODE	11:12	11:12	6	dialog
LEAF_NODE	11:18	11:18	4	;
SIMPLE_DECL	12:1	12:16	3	GtkWidget * vbox ;
VAR_DECL	12:1	12:12	4	GtkWidget * vbox
TYPE	12:1	12:11	5	GtkWidget *
TYPE_NAME	12:1	12:1	6	GtkWidget
LEAF_NODE	12:1	12:1	7	GtkWidget
POINTER	12:11	12:11	6	*
LEAF_NODE	12:11	12:11	7	*
NAME	12:12	12:12	5	vbox
LEAF_NODE	12:12	12:12	6	vbox
LEAF_NODE	12:16	12:16	4	;
SIMPLE_DECL	13:1	13:16	3	GtkWidget * hbox ;
VAR_DECL	13:1	13:12	4	GtkWidget * hbox
TYPE	13:1	13:11	5	GtkWidget *
TYPE_NAME	13:1	13:1	6	GtkWidget
LEAF_NODE	13:1	13:1	7	GtkWidget
POINTER	13:11	13:11	6	*
LEAF_NODE	13:11	13:11	7	*
NAME	13:12	13:12	5	hbox
LEAF_NODE	13:12	13:12	6	hbox
LEAF_NODE	13:16	13:16	4	;
SIMPLE_DECL	14:1	14:17	3	GtkWidget * label ;
VAR_DECL	14:1	14:12	4	GtkWidget * label
TYPE	14:1	14:11	5	GtkWidget *
TYPE_NAME	14:1	14:1	6	GtkWidget
LEAF_NODE	14:1	14:1	7	GtkWidget
POINTER	14:11	14:11	6	*
LEAF_NODE	14:11	14:11	7	*
NAME	14:12	14:12	5	label
LEAF_NODE	14:12	14:12	6	label
LEAF_NODE	14:17	14:17	4	;
SIMPLE_DECL	15:1	15:17	3	GtkWidget * entry ;
VAR_DECL	15:1	15:12	4	GtkWidget * entry
TYPE	15:1	15:11	5	GtkWidget *
TYPE_NAME	15:1	15:1	6	GtkWidget
LEAF_NODE	15:1	15:1	7	GtkWidget
POINTER	15:11	15:11	6	*
LEAF_NODE	15:11	15:11	7	*
NAME	15:12	15:12	5	entry
LEAF_NODE	15:12	15:12	6	entry
LEAF_NODE	15:17	15:17	4	;
SIMPLE_DECL	16:1	16:15	3	GtkWidget * img ;
VAR_DECL	16:1	16:12	4	GtkWidget * img
TYPE	16:1	16:11	5	GtkWidget *
TYPE_NAME	16:1	16:1	6	GtkWidget
LEAF_NODE	16:1	16:1	7	GtkWidget
POINTER	16:11	16:11	6	*
LEAF_NODE	16:11	16:11	7	*
NAME	16:12	16:12	5	img
LEAF_NODE	16:12	16:12	6	img
LEAF_NODE	16:15	16:15	4	;
SIMPLE_DECL	17:1	17:19	3	GtkWidget * toolbar ;
VAR_DECL	17:1	17:12	4	GtkWidget * toolbar
TYPE	17:1	17:11	5	GtkWidget *
TYPE_NAME	17:1	17:1	6	GtkWidget
LEAF_NODE	17:1	17:1	7	GtkWidget
POINTER	17:11	17:11	6	*
LEAF_NODE	17:11	17:11	7	*
NAME	17:12	17:12	5	toolbar
LEAF_NODE	17:12	17:12	6	toolbar
LEAF_NODE	17:19	17:19	4	;
SIMPLE_DECL	18:1	18:17	3	char * label_text ;
VAR_DECL	18:1	18:7	4	char * label_text
TYPE	18:1	18:6	5	char *
TYPE_NAME	18:1	18:1	6	char
LEAF_NODE	18:1	18:1	7	char
POINTER	18:6	18:6	6	*
LEAF_NODE	18:6	18:6	7	*
NAME	18:7	18:7	5	label_text
LEAF_NODE	18:7	18:7	6	label_text
LEAF_NODE	18:17	18:17	4	;
SIMPLE_DECL	19:1	19:34	3	char * primary_esc , char * secondary_esc ;
INIT_DECL_LIST	19:1	19:1	4	char * primary_esc , char * secondary_esc
VAR_DECL	19:1	19:7	5	char * primary_esc
TYPE	19:1	19:6	6	char *
TYPE_NAME	19:1	19:1	7	char
LEAF_NODE	19:1	19:1	8	char
POINTER	19:6	19:6	7	*
LEAF_NODE	19:6	19:6	8	*
NAME	19:7	19:7	6	primary_esc
LEAF_NODE	19:7	19:7	7	primary_esc
LEAF_NODE	19:18	19:18	5	,
VAR_DECL	19:1	19:21	5	char * secondary_esc
TYPE	19:1	19:20	6	char *
TYPE_NAME	19:1	19:1	7	char
LEAF_NODE	19:1	19:1	8	char
POINTER	19:20	19:20	7	*
LEAF_NODE	19:20	19:20	8	*
NAME	19:21	19:21	6	secondary_esc
LEAF_NODE	19:21	19:21	7	secondary_esc
LEAF_NODE	19:34	19:34	4	;
EXPR_STATEMENT	20:1	20:47	3	data = g_new0 ( PidginRequestData , 1 ) ;
EXPR	20:1	20:1	4	data = g_new0 ( PidginRequestData , 1 )
ASSIGN	20:1	20:19	5	data = g_new0 ( PidginRequestData , 1 )
LVAL	20:1	20:1	6	data
FIELD	20:1	20:1	7	data
LEAF_NODE	20:1	20:1	8	data
ASSIGN_OP	20:17	20:17	6	=
LEAF_NODE	20:17	20:17	7	=
RVAL	20:19	20:19	6	g_new0 ( PidginRequestData , 1 )
FUNCTION_CALL	20:19	20:46	7	g_new0 ( PidginRequestData , 1 )
CALLEE	20:19	20:19	8	g_new0
LEAF_NODE	20:19	20:19	9	g_new0
LEAF_NODE	20:25	20:25	8	(
ARGUMENT	20:26	20:26	8	PidginRequestData
FIELD	20:26	20:26	9	PidginRequestData
LEAF_NODE	20:26	20:26	10	PidginRequestData
LEAF_NODE	20:43	20:43	8	,
ARGUMENT	20:45	20:45	8	1
FIELD	20:45	20:45	9	1
LEAF_NODE	20:45	20:45	10	1
LEAF_NODE	20:46	20:46	8	)
LEAF_NODE	20:47	20:47	4	;
EXPR_STATEMENT	21:1	21:39	3	data -> type = PURPLE_REQUEST_INPUT ;
EXPR	21:1	21:1	4	data -> type = PURPLE_REQUEST_INPUT
ASSIGN	21:1	21:19	5	data -> type = PURPLE_REQUEST_INPUT
LVAL	21:1	21:1	6	data -> type
FIELD	21:1	21:7	7	data -> type
LEAF_NODE	21:1	21:1	8	data
LEAF_NODE	21:5	21:5	8	->
LEAF_NODE	21:7	21:7	8	type
ASSIGN_OP	21:17	21:17	6	=
LEAF_NODE	21:17	21:17	7	=
RVAL	21:19	21:19	6	PURPLE_REQUEST_INPUT
FIELD	21:19	21:19	7	PURPLE_REQUEST_INPUT
LEAF_NODE	21:19	21:19	8	PURPLE_REQUEST_INPUT
LEAF_NODE	21:39	21:39	4	;
EXPR_STATEMENT	22:1	22:28	3	data -> user_data = user_data ;
EXPR	22:1	22:1	4	data -> user_data = user_data
ASSIGN	22:1	22:19	5	data -> user_data = user_data
LVAL	22:1	22:1	6	data -> user_data
FIELD	22:1	22:7	7	data -> user_data
LEAF_NODE	22:1	22:1	8	data
LEAF_NODE	22:5	22:5	8	->
LEAF_NODE	22:7	22:7	8	user_data
ASSIGN_OP	22:17	22:17	6	=
LEAF_NODE	22:17	22:17	7	=
RVAL	22:19	22:19	6	user_data
FIELD	22:19	22:19	7	user_data
LEAF_NODE	22:19	22:19	8	user_data
LEAF_NODE	22:28	22:28	4	;
EXPR_STATEMENT	23:1	23:19	3	data -> cb_count = 2 ;
EXPR	23:1	23:1	4	data -> cb_count = 2
ASSIGN	23:1	23:18	5	data -> cb_count = 2
LVAL	23:1	23:1	6	data -> cb_count
FIELD	23:1	23:7	7	data -> cb_count
LEAF_NODE	23:1	23:1	8	data
LEAF_NODE	23:5	23:5	8	->
LEAF_NODE	23:7	23:7	8	cb_count
ASSIGN_OP	23:16	23:16	6	=
LEAF_NODE	23:16	23:16	7	=
RVAL	23:18	23:18	6	2
FIELD	23:18	23:18	7	2
LEAF_NODE	23:18	23:18	8	2
LEAF_NODE	23:19	23:19	4	;
EXPR_STATEMENT	24:1	24:33	3	data -> cbs = g_new0 ( GCallback , 2 ) ;
EXPR	24:1	24:1	4	data -> cbs = g_new0 ( GCallback , 2 )
ASSIGN	24:1	24:13	5	data -> cbs = g_new0 ( GCallback , 2 )
LVAL	24:1	24:1	6	data -> cbs
FIELD	24:1	24:7	7	data -> cbs
LEAF_NODE	24:1	24:1	8	data
LEAF_NODE	24:5	24:5	8	->
LEAF_NODE	24:7	24:7	8	cbs
ASSIGN_OP	24:11	24:11	6	=
LEAF_NODE	24:11	24:11	7	=
RVAL	24:13	24:13	6	g_new0 ( GCallback , 2 )
FUNCTION_CALL	24:13	24:32	7	g_new0 ( GCallback , 2 )
CALLEE	24:13	24:13	8	g_new0
LEAF_NODE	24:13	24:13	9	g_new0
LEAF_NODE	24:19	24:19	8	(
ARGUMENT	24:20	24:20	8	GCallback
FIELD	24:20	24:20	9	GCallback
LEAF_NODE	24:20	24:20	10	GCallback
LEAF_NODE	24:29	24:29	8	,
ARGUMENT	24:31	24:31	8	2
FIELD	24:31	24:31	9	2
LEAF_NODE	24:31	24:31	10	2
LEAF_NODE	24:32	24:32	8	)
LEAF_NODE	24:33	24:33	4	;
EXPR_STATEMENT	25:1	25:21	3	data -> cbs [ 0 ] = ok_cb ;
EXPR	25:1	25:1	4	data -> cbs [ 0 ] = ok_cb
ASSIGN	25:1	25:16	5	data -> cbs [ 0 ] = ok_cb
LVAL	25:1	25:1	6	data -> cbs [ 0 ]
FIELD	25:1	25:12	7	data -> cbs [ 0 ]
LEAF_NODE	25:1	25:1	8	data
LEAF_NODE	25:5	25:5	8	->
LEAF_NODE	25:7	25:7	8	cbs
LEAF_NODE	25:10	25:10	8	[
EXPR	25:11	25:11	8	0
FIELD	25:11	25:11	9	0
LEAF_NODE	25:11	25:11	10	0
LEAF_NODE	25:12	25:12	8	]
ASSIGN_OP	25:14	25:14	6	=
LEAF_NODE	25:14	25:14	7	=
RVAL	25:16	25:16	6	ok_cb
FIELD	25:16	25:16	7	ok_cb
LEAF_NODE	25:16	25:16	8	ok_cb
LEAF_NODE	25:21	25:21	4	;
EXPR_STATEMENT	26:1	26:25	3	data -> cbs [ 1 ] = cancel_cb ;
EXPR	26:1	26:1	4	data -> cbs [ 1 ] = cancel_cb
ASSIGN	26:1	26:16	5	data -> cbs [ 1 ] = cancel_cb
LVAL	26:1	26:1	6	data -> cbs [ 1 ]
FIELD	26:1	26:12	7	data -> cbs [ 1 ]
LEAF_NODE	26:1	26:1	8	data
LEAF_NODE	26:5	26:5	8	->
LEAF_NODE	26:7	26:7	8	cbs
LEAF_NODE	26:10	26:10	8	[
EXPR	26:11	26:11	8	1
FIELD	26:11	26:11	9	1
LEAF_NODE	26:11	26:11	10	1
LEAF_NODE	26:12	26:12	8	]
ASSIGN_OP	26:14	26:14	6	=
LEAF_NODE	26:14	26:14	7	=
RVAL	26:16	26:16	6	cancel_cb
FIELD	26:16	26:16	7	cancel_cb
LEAF_NODE	26:16	26:16	8	cancel_cb
LEAF_NODE	26:25	26:25	4	;
EXPR_STATEMENT	28:1	32:15	3	dialog = gtk_dialog_new_with_buttons ( title ? title : PIDGIN_ALERT_TITLE , NULL , 0 , text_to_stock ( cancel_text ) , 1 , text_to_stock ( ok_text ) , 0 , NULL ) ;
EXPR	28:1	28:1	4	dialog = gtk_dialog_new_with_buttons ( title ? title : PIDGIN_ALERT_TITLE , NULL , 0 , text_to_stock ( cancel_text ) , 1 , text_to_stock ( ok_text ) , 0 , NULL )
ASSIGN	28:1	28:10	5	dialog = gtk_dialog_new_with_buttons ( title ? title : PIDGIN_ALERT_TITLE , NULL , 0 , text_to_stock ( cancel_text ) , 1 , text_to_stock ( ok_text ) , 0 , NULL )
LVAL	28:1	28:1	6	dialog
FIELD	28:1	28:1	7	dialog
LEAF_NODE	28:1	28:1	8	dialog
ASSIGN_OP	28:8	28:8	6	=
LEAF_NODE	28:8	28:8	7	=
RVAL	28:10	28:10	6	gtk_dialog_new_with_buttons ( title ? title : PIDGIN_ALERT_TITLE , NULL , 0 , text_to_stock ( cancel_text ) , 1 , text_to_stock ( ok_text ) , 0 , NULL )
FUNCTION_CALL	28:10	32:14	7	gtk_dialog_new_with_buttons ( title ? title : PIDGIN_ALERT_TITLE , NULL , 0 , text_to_stock ( cancel_text ) , 1 , text_to_stock ( ok_text ) , 0 , NULL )
CALLEE	28:10	28:10	8	gtk_dialog_new_with_buttons
LEAF_NODE	28:10	28:10	9	gtk_dialog_new_with_buttons
LEAF_NODE	28:37	28:37	8	(
ARGUMENT	28:38	28:38	8	title ? title : PIDGIN_ALERT_TITLE
COND_EXPR	28:38	28:54	9	title ? title : PIDGIN_ALERT_TITLE
CONDITION	28:38	28:38	10	title
FIELD	28:38	28:38	11	title
LEAF_NODE	28:38	28:38	12	title
LEAF_NODE	28:44	28:44	10	?
EXPR	28:46	28:46	10	title
FIELD	28:46	28:46	11	title
LEAF_NODE	28:46	28:46	12	title
LEAF_NODE	28:52	28:52	10	:
FIELD	28:54	28:54	10	PIDGIN_ALERT_TITLE
LEAF_NODE	28:54	28:54	11	PIDGIN_ALERT_TITLE
LEAF_NODE	28:72	28:72	8	,
ARGUMENT	29:10	29:10	8	NULL
FIELD	29:10	29:10	9	NULL
LEAF_NODE	29:10	29:10	10	NULL
LEAF_NODE	29:14	29:14	8	,
ARGUMENT	29:16	29:16	8	0
FIELD	29:16	29:16	9	0
LEAF_NODE	29:16	29:16	10	0
LEAF_NODE	29:17	29:17	8	,
ARGUMENT	30:10	30:10	8	text_to_stock ( cancel_text )
FUNCTION_CALL	30:10	30:35	9	text_to_stock ( cancel_text )
CALLEE	30:10	30:10	10	text_to_stock
LEAF_NODE	30:10	30:10	11	text_to_stock
LEAF_NODE	30:23	30:23	10	(
ARGUMENT	30:24	30:24	10	cancel_text
FIELD	30:24	30:24	11	cancel_text
LEAF_NODE	30:24	30:24	12	cancel_text
LEAF_NODE	30:35	30:35	10	)
LEAF_NODE	30:36	30:36	8	,
ARGUMENT	30:38	30:38	8	1
FIELD	30:38	30:38	9	1
LEAF_NODE	30:38	30:38	10	1
LEAF_NODE	30:39	30:39	8	,
ARGUMENT	31:10	31:10	8	text_to_stock ( ok_text )
FUNCTION_CALL	31:10	31:31	9	text_to_stock ( ok_text )
CALLEE	31:10	31:10	10	text_to_stock
LEAF_NODE	31:10	31:10	11	text_to_stock
LEAF_NODE	31:23	31:23	10	(
ARGUMENT	31:24	31:24	10	ok_text
FIELD	31:24	31:24	11	ok_text
LEAF_NODE	31:24	31:24	12	ok_text
LEAF_NODE	31:31	31:31	10	)
LEAF_NODE	31:32	31:32	8	,
ARGUMENT	31:38	31:38	8	0
FIELD	31:38	31:38	9	0
LEAF_NODE	31:38	31:38	10	0
LEAF_NODE	31:39	31:39	8	,
ARGUMENT	32:10	32:10	8	NULL
FIELD	32:10	32:10	9	NULL
LEAF_NODE	32:10	32:10	10	NULL
LEAF_NODE	32:14	32:14	8	)
LEAF_NODE	32:15	32:15	4	;
EXPR_STATEMENT	33:1	33:22	3	data -> dialog = dialog ;
EXPR	33:1	33:1	4	data -> dialog = dialog
ASSIGN	33:1	33:16	5	data -> dialog = dialog
LVAL	33:1	33:1	6	data -> dialog
FIELD	33:1	33:7	7	data -> dialog
LEAF_NODE	33:1	33:1	8	data
LEAF_NODE	33:5	33:5	8	->
LEAF_NODE	33:7	33:7	8	dialog
ASSIGN_OP	33:14	33:14	6	=
LEAF_NODE	33:14	33:14	7	=
RVAL	33:16	33:16	6	dialog
FIELD	33:16	33:16	7	dialog
LEAF_NODE	33:16	33:16	8	dialog
LEAF_NODE	33:22	33:22	4	;
EXPR_STATEMENT	34:1	35:42	3	g_signal_connect ( G_OBJECT ( dialog ) , "response" , G_CALLBACK ( input_response_cb ) , data ) ;
EXPR	34:1	34:1	4	g_signal_connect ( G_OBJECT ( dialog ) , "response" , G_CALLBACK ( input_response_cb ) , data )
FUNCTION_CALL	34:1	35:41	5	g_signal_connect ( G_OBJECT ( dialog ) , "response" , G_CALLBACK ( input_response_cb ) , data )
CALLEE	34:1	34:1	6	g_signal_connect
LEAF_NODE	34:1	34:1	7	g_signal_connect
LEAF_NODE	34:17	34:17	6	(
ARGUMENT	34:18	34:18	6	G_OBJECT ( dialog )
FUNCTION_CALL	34:18	34:33	7	G_OBJECT ( dialog )
CALLEE	34:18	34:18	8	G_OBJECT
LEAF_NODE	34:18	34:18	9	G_OBJECT
LEAF_NODE	34:26	34:26	8	(
ARGUMENT	34:27	34:27	8	dialog
FIELD	34:27	34:27	9	dialog
LEAF_NODE	34:27	34:27	10	dialog
LEAF_NODE	34:33	34:33	8	)
LEAF_NODE	34:34	34:34	6	,
ARGUMENT	34:36	34:36	6	"response"
FIELD	34:36	34:36	7	"response"
LEAF_NODE	34:36	34:36	8	"response"
LEAF_NODE	34:46	34:46	6	,
ARGUMENT	35:6	35:6	6	G_CALLBACK ( input_response_cb )
FUNCTION_CALL	35:6	35:34	7	G_CALLBACK ( input_response_cb )
CALLEE	35:6	35:6	8	G_CALLBACK
LEAF_NODE	35:6	35:6	9	G_CALLBACK
LEAF_NODE	35:16	35:16	8	(
ARGUMENT	35:17	35:17	8	input_response_cb
FIELD	35:17	35:17	9	input_response_cb
LEAF_NODE	35:17	35:17	10	input_response_cb
LEAF_NODE	35:34	35:34	8	)
LEAF_NODE	35:35	35:35	6	,
ARGUMENT	35:37	35:37	6	data
FIELD	35:37	35:37	7	data
LEAF_NODE	35:37	35:37	8	data
LEAF_NODE	35:41	35:41	6	)
LEAF_NODE	35:42	35:42	4	;
EXPR_STATEMENT	37:1	37:75	3	gtk_container_set_border_width ( GTK_CONTAINER ( dialog ) , PIDGIN_HIG_BORDER / 2 ) ;
EXPR	37:1	37:1	4	gtk_container_set_border_width ( GTK_CONTAINER ( dialog ) , PIDGIN_HIG_BORDER / 2 )
FUNCTION_CALL	37:1	37:74	5	gtk_container_set_border_width ( GTK_CONTAINER ( dialog ) , PIDGIN_HIG_BORDER / 2 )
CALLEE	37:1	37:1	6	gtk_container_set_border_width
LEAF_NODE	37:1	37:1	7	gtk_container_set_border_width
LEAF_NODE	37:31	37:31	6	(
ARGUMENT	37:32	37:32	6	GTK_CONTAINER ( dialog )
FUNCTION_CALL	37:32	37:52	7	GTK_CONTAINER ( dialog )
CALLEE	37:32	37:32	8	GTK_CONTAINER
LEAF_NODE	37:32	37:32	9	GTK_CONTAINER
LEAF_NODE	37:45	37:45	8	(
ARGUMENT	37:46	37:46	8	dialog
FIELD	37:46	37:46	9	dialog
LEAF_NODE	37:46	37:46	10	dialog
LEAF_NODE	37:52	37:52	8	)
LEAF_NODE	37:53	37:53	6	,
ARGUMENT	37:55	37:73	6	PIDGIN_HIG_BORDER / 2
FIELD	37:55	37:55	7	PIDGIN_HIG_BORDER
LEAF_NODE	37:55	37:55	8	PIDGIN_HIG_BORDER
LEAF_NODE	37:72	37:72	7	/
FIELD	37:73	37:73	7	2
LEAF_NODE	37:73	37:73	8	2
LEAF_NODE	37:74	37:74	6	)
LEAF_NODE	37:75	37:75	4	;
EXPR_STATEMENT	38:1	38:93	3	gtk_container_set_border_width ( GTK_CONTAINER ( GTK_DIALOG ( dialog ) -> vbox ) , PIDGIN_HIG_BORDER / 2 ) ;
EXPR	38:1	38:1	4	gtk_container_set_border_width ( GTK_CONTAINER ( GTK_DIALOG ( dialog ) -> vbox ) , PIDGIN_HIG_BORDER / 2 )
FUNCTION_CALL	38:1	38:92	5	gtk_container_set_border_width ( GTK_CONTAINER ( GTK_DIALOG ( dialog ) -> vbox ) , PIDGIN_HIG_BORDER / 2 )
CALLEE	38:1	38:1	6	gtk_container_set_border_width
LEAF_NODE	38:1	38:1	7	gtk_container_set_border_width
LEAF_NODE	38:31	38:31	6	(
ARGUMENT	38:32	38:32	6	GTK_CONTAINER ( GTK_DIALOG ( dialog ) -> vbox )
FUNCTION_CALL	38:32	38:70	7	GTK_CONTAINER ( GTK_DIALOG ( dialog ) -> vbox )
CALLEE	38:32	38:32	8	GTK_CONTAINER
LEAF_NODE	38:32	38:32	9	GTK_CONTAINER
LEAF_NODE	38:45	38:45	8	(
ARGUMENT	38:46	38:66	8	GTK_DIALOG ( dialog ) -> vbox
FUNCTION_CALL	38:46	38:63	9	GTK_DIALOG ( dialog )
CALLEE	38:46	38:46	10	GTK_DIALOG
LEAF_NODE	38:46	38:46	11	GTK_DIALOG
LEAF_NODE	38:56	38:56	10	(
ARGUMENT	38:57	38:57	10	dialog
FIELD	38:57	38:57	11	dialog
LEAF_NODE	38:57	38:57	12	dialog
LEAF_NODE	38:63	38:63	10	)
LEAF_NODE	38:64	38:64	9	->
LEAF_NODE	38:66	38:66	9	vbox
LEAF_NODE	38:70	38:70	8	)
LEAF_NODE	38:71	38:71	6	,
ARGUMENT	38:73	38:91	6	PIDGIN_HIG_BORDER / 2
FIELD	38:73	38:73	7	PIDGIN_HIG_BORDER
LEAF_NODE	38:73	38:73	8	PIDGIN_HIG_BORDER
LEAF_NODE	38:90	38:90	7	/
FIELD	38:91	38:91	7	2
LEAF_NODE	38:91	38:91	8	2
LEAF_NODE	38:92	38:92	6	)
LEAF_NODE	38:93	38:93	4	;
SELECTION	39:1	40:2	3	
KEYWORD	39:1	39:1	4	if
LEAF_NODE	39:1	39:1	5	if
LEAF_NODE	39:4	39:4	4	(
CONDITION	39:5	39:5	4	! multiline
EXPR	39:5	39:5	5	! multiline
UNARY_EXPR	39:5	39:6	6	! multiline
UNARY_OPERATOR	39:5	39:5	7	!
LEAF_NODE	39:5	39:5	8	!
FIELD	39:6	39:6	7	multiline
LEAF_NODE	39:6	39:6	8	multiline
LEAF_NODE	39:15	39:15	4	)
STATEMENTS	40:2	40:2	4	
EXPR_STATEMENT	40:2	40:53	5	gtk_window_set_resizable ( GTK_WINDOW ( dialog ) , FALSE ) ;
EXPR	40:2	40:2	6	gtk_window_set_resizable ( GTK_WINDOW ( dialog ) , FALSE )
FUNCTION_CALL	40:2	40:52	7	gtk_window_set_resizable ( GTK_WINDOW ( dialog ) , FALSE )
CALLEE	40:2	40:2	8	gtk_window_set_resizable
LEAF_NODE	40:2	40:2	9	gtk_window_set_resizable
LEAF_NODE	40:26	40:26	8	(
ARGUMENT	40:27	40:27	8	GTK_WINDOW ( dialog )
FUNCTION_CALL	40:27	40:44	9	GTK_WINDOW ( dialog )
CALLEE	40:27	40:27	10	GTK_WINDOW
LEAF_NODE	40:27	40:27	11	GTK_WINDOW
LEAF_NODE	40:37	40:37	10	(
ARGUMENT	40:38	40:38	10	dialog
FIELD	40:38	40:38	11	dialog
LEAF_NODE	40:38	40:38	12	dialog
LEAF_NODE	40:44	40:44	10	)
LEAF_NODE	40:45	40:45	8	,
ARGUMENT	40:47	40:47	8	FALSE
FIELD	40:47	40:47	9	FALSE
LEAF_NODE	40:47	40:47	10	FALSE
LEAF_NODE	40:52	40:52	8	)
LEAF_NODE	40:53	40:53	6	;
EXPR_STATEMENT	41:1	41:56	3	gtk_dialog_set_has_separator ( GTK_DIALOG ( dialog ) , FALSE ) ;
EXPR	41:1	41:1	4	gtk_dialog_set_has_separator ( GTK_DIALOG ( dialog ) , FALSE )
FUNCTION_CALL	41:1	41:55	5	gtk_dialog_set_has_separator ( GTK_DIALOG ( dialog ) , FALSE )
CALLEE	41:1	41:1	6	gtk_dialog_set_has_separator
LEAF_NODE	41:1	41:1	7	gtk_dialog_set_has_separator
LEAF_NODE	41:29	41:29	6	(
ARGUMENT	41:30	41:30	6	GTK_DIALOG ( dialog )
FUNCTION_CALL	41:30	41:47	7	GTK_DIALOG ( dialog )
CALLEE	41:30	41:30	8	GTK_DIALOG
LEAF_NODE	41:30	41:30	9	GTK_DIALOG
LEAF_NODE	41:40	41:40	8	(
ARGUMENT	41:41	41:41	8	dialog
FIELD	41:41	41:41	9	dialog
LEAF_NODE	41:41	41:41	10	dialog
LEAF_NODE	41:47	41:47	8	)
LEAF_NODE	41:48	41:48	6	,
ARGUMENT	41:50	41:50	6	FALSE
FIELD	41:50	41:50	7	FALSE
LEAF_NODE	41:50	41:50	8	FALSE
LEAF_NODE	41:55	41:55	6	)
LEAF_NODE	41:56	41:56	4	;
EXPR_STATEMENT	42:1	42:55	3	gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ) , 0 ) ;
EXPR	42:1	42:1	4	gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ) , 0 )
FUNCTION_CALL	42:1	42:54	5	gtk_dialog_set_default_response ( GTK_DIALOG ( dialog ) , 0 )
CALLEE	42:1	42:1	6	gtk_dialog_set_default_response
LEAF_NODE	42:1	42:1	7	gtk_dialog_set_default_response
LEAF_NODE	42:32	42:32	6	(
ARGUMENT	42:33	42:33	6	GTK_DIALOG ( dialog )
FUNCTION_CALL	42:33	42:50	7	GTK_DIALOG ( dialog )
CALLEE	42:33	42:33	8	GTK_DIALOG
LEAF_NODE	42:33	42:33	9	GTK_DIALOG
LEAF_NODE	42:43	42:43	8	(
ARGUMENT	42:44	42:44	8	dialog
FIELD	42:44	42:44	9	dialog
LEAF_NODE	42:44	42:44	10	dialog
LEAF_NODE	42:50	42:50	8	)
LEAF_NODE	42:51	42:51	6	,
ARGUMENT	42:53	42:53	6	0
FIELD	42:53	42:53	7	0
LEAF_NODE	42:53	42:53	8	0
LEAF_NODE	42:54	42:54	6	)
LEAF_NODE	42:55	42:55	4	;
EXPR_STATEMENT	43:1	43:74	3	gtk_box_set_spacing ( GTK_BOX ( GTK_DIALOG ( dialog ) -> vbox ) , PIDGIN_HIG_BORDER ) ;
EXPR	43:1	43:1	4	gtk_box_set_spacing ( GTK_BOX ( GTK_DIALOG ( dialog ) -> vbox ) , PIDGIN_HIG_BORDER )
FUNCTION_CALL	43:1	43:73	5	gtk_box_set_spacing ( GTK_BOX ( GTK_DIALOG ( dialog ) -> vbox ) , PIDGIN_HIG_BORDER )
CALLEE	43:1	43:1	6	gtk_box_set_spacing
LEAF_NODE	43:1	43:1	7	gtk_box_set_spacing
LEAF_NODE	43:20	43:20	6	(
ARGUMENT	43:21	43:21	6	GTK_BOX ( GTK_DIALOG ( dialog ) -> vbox )
FUNCTION_CALL	43:21	43:53	7	GTK_BOX ( GTK_DIALOG ( dialog ) -> vbox )
CALLEE	43:21	43:21	8	GTK_BOX
LEAF_NODE	43:21	43:21	9	GTK_BOX
LEAF_NODE	43:28	43:28	8	(
ARGUMENT	43:29	43:49	8	GTK_DIALOG ( dialog ) -> vbox
FUNCTION_CALL	43:29	43:46	9	GTK_DIALOG ( dialog )
CALLEE	43:29	43:29	10	GTK_DIALOG
LEAF_NODE	43:29	43:29	11	GTK_DIALOG
LEAF_NODE	43:39	43:39	10	(
ARGUMENT	43:40	43:40	10	dialog
FIELD	43:40	43:40	11	dialog
LEAF_NODE	43:40	43:40	12	dialog
LEAF_NODE	43:46	43:46	10	)
LEAF_NODE	43:47	43:47	9	->
LEAF_NODE	43:49	43:49	9	vbox
LEAF_NODE	43:53	43:53	8	)
LEAF_NODE	43:54	43:54	6	,
ARGUMENT	43:56	43:56	6	PIDGIN_HIG_BORDER
FIELD	43:56	43:56	7	PIDGIN_HIG_BORDER
LEAF_NODE	43:56	43:56	8	PIDGIN_HIG_BORDER
LEAF_NODE	43:73	43:73	6	)
LEAF_NODE	43:74	43:74	4	;
EXPR_STATEMENT	45:1	45:46	3	hbox = gtk_hbox_new ( FALSE , PIDGIN_HIG_BORDER ) ;
EXPR	45:1	45:1	4	hbox = gtk_hbox_new ( FALSE , PIDGIN_HIG_BORDER )
ASSIGN	45:1	45:8	5	hbox = gtk_hbox_new ( FALSE , PIDGIN_HIG_BORDER )
LVAL	45:1	45:1	6	hbox
FIELD	45:1	45:1	7	hbox
LEAF_NODE	45:1	45:1	8	hbox
ASSIGN_OP	45:6	45:6	6	=
LEAF_NODE	45:6	45:6	7	=
RVAL	45:8	45:8	6	gtk_hbox_new ( FALSE , PIDGIN_HIG_BORDER )
FUNCTION_CALL	45:8	45:45	7	gtk_hbox_new ( FALSE , PIDGIN_HIG_BORDER )
CALLEE	45:8	45:8	8	gtk_hbox_new
LEAF_NODE	45:8	45:8	9	gtk_hbox_new
LEAF_NODE	45:20	45:20	8	(
ARGUMENT	45:21	45:21	8	FALSE
FIELD	45:21	45:21	9	FALSE
LEAF_NODE	45:21	45:21	10	FALSE
LEAF_NODE	45:26	45:26	8	,
ARGUMENT	45:28	45:28	8	PIDGIN_HIG_BORDER
FIELD	45:28	45:28	9	PIDGIN_HIG_BORDER
LEAF_NODE	45:28	45:28	10	PIDGIN_HIG_BORDER
LEAF_NODE	45:45	45:45	8	)
LEAF_NODE	45:46	45:46	4	;
EXPR_STATEMENT	46:1	46:65	3	gtk_container_add ( GTK_CONTAINER ( GTK_DIALOG ( dialog ) -> vbox ) , hbox ) ;
EXPR	46:1	46:1	4	gtk_container_add ( GTK_CONTAINER ( GTK_DIALOG ( dialog ) -> vbox ) , hbox )
FUNCTION_CALL	46:1	46:64	5	gtk_container_add ( GTK_CONTAINER ( GTK_DIALOG ( dialog ) -> vbox ) , hbox )
CALLEE	46:1	46:1	6	gtk_container_add
LEAF_NODE	46:1	46:1	7	gtk_container_add
LEAF_NODE	46:18	46:18	6	(
ARGUMENT	46:19	46:19	6	GTK_CONTAINER ( GTK_DIALOG ( dialog ) -> vbox )
FUNCTION_CALL	46:19	46:57	7	GTK_CONTAINER ( GTK_DIALOG ( dialog ) -> vbox )
CALLEE	46:19	46:19	8	GTK_CONTAINER
LEAF_NODE	46:19	46:19	9	GTK_CONTAINER
LEAF_NODE	46:32	46:32	8	(
ARGUMENT	46:33	46:53	8	GTK_DIALOG ( dialog ) -> vbox
FUNCTION_CALL	46:33	46:50	9	GTK_DIALOG ( dialog )
CALLEE	46:33	46:33	10	GTK_DIALOG
LEAF_NODE	46:33	46:33	11	GTK_DIALOG
LEAF_NODE	46:43	46:43	10	(
ARGUMENT	46:44	46:44	10	dialog
FIELD	46:44	46:44	11	dialog
LEAF_NODE	46:44	46:44	12	dialog
LEAF_NODE	46:50	46:50	10	)
LEAF_NODE	46:51	46:51	9	->
LEAF_NODE	46:53	46:53	9	vbox
LEAF_NODE	46:57	46:57	8	)
LEAF_NODE	46:58	46:58	6	,
ARGUMENT	46:60	46:60	6	hbox
FIELD	46:60	46:60	7	hbox
LEAF_NODE	46:60	46:60	8	hbox
LEAF_NODE	46:64	46:64	6	)
LEAF_NODE	46:65	46:65	4	;
EXPR_STATEMENT	48:1	49:58	3	img = gtk_image_new_from_stock ( PIDGIN_STOCK_DIALOG_QUESTION , gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_HUGE ) ) ;
EXPR	48:1	48:1	4	img = gtk_image_new_from_stock ( PIDGIN_STOCK_DIALOG_QUESTION , gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_HUGE ) )
ASSIGN	48:1	48:7	5	img = gtk_image_new_from_stock ( PIDGIN_STOCK_DIALOG_QUESTION , gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_HUGE ) )
LVAL	48:1	48:1	6	img
FIELD	48:1	48:1	7	img
LEAF_NODE	48:1	48:1	8	img
ASSIGN_OP	48:5	48:5	6	=
LEAF_NODE	48:5	48:5	7	=
RVAL	48:7	48:7	6	gtk_image_new_from_stock ( PIDGIN_STOCK_DIALOG_QUESTION , gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_HUGE ) )
FUNCTION_CALL	48:7	49:57	7	gtk_image_new_from_stock ( PIDGIN_STOCK_DIALOG_QUESTION , gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_HUGE ) )
CALLEE	48:7	48:7	8	gtk_image_new_from_stock
LEAF_NODE	48:7	48:7	9	gtk_image_new_from_stock
LEAF_NODE	48:31	48:31	8	(
ARGUMENT	48:32	48:32	8	PIDGIN_STOCK_DIALOG_QUESTION
FIELD	48:32	48:32	9	PIDGIN_STOCK_DIALOG_QUESTION
LEAF_NODE	48:32	48:32	10	PIDGIN_STOCK_DIALOG_QUESTION
LEAF_NODE	48:60	48:60	8	,
ARGUMENT	49:5	49:5	8	gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_HUGE )
FUNCTION_CALL	49:5	49:56	9	gtk_icon_size_from_name ( PIDGIN_ICON_SIZE_TANGO_HUGE )
CALLEE	49:5	49:5	10	gtk_icon_size_from_name
LEAF_NODE	49:5	49:5	11	gtk_icon_size_from_name
LEAF_NODE	49:28	49:28	10	(
ARGUMENT	49:29	49:29	10	PIDGIN_ICON_SIZE_TANGO_HUGE
FIELD	49:29	49:29	11	PIDGIN_ICON_SIZE_TANGO_HUGE
LEAF_NODE	49:29	49:29	12	PIDGIN_ICON_SIZE_TANGO_HUGE
LEAF_NODE	49:56	49:56	10	)
LEAF_NODE	49:57	49:57	8	)
LEAF_NODE	49:58	49:58	4	;
EXPR_STATEMENT	50:1	50:44	3	gtk_misc_set_alignment ( GTK_MISC ( img ) , 0 , 0 ) ;
EXPR	50:1	50:1	4	gtk_misc_set_alignment ( GTK_MISC ( img ) , 0 , 0 )
FUNCTION_CALL	50:1	50:43	5	gtk_misc_set_alignment ( GTK_MISC ( img ) , 0 , 0 )
CALLEE	50:1	50:1	6	gtk_misc_set_alignment
LEAF_NODE	50:1	50:1	7	gtk_misc_set_alignment
LEAF_NODE	50:23	50:23	6	(
ARGUMENT	50:24	50:24	6	GTK_MISC ( img )
FUNCTION_CALL	50:24	50:36	7	GTK_MISC ( img )
CALLEE	50:24	50:24	8	GTK_MISC
LEAF_NODE	50:24	50:24	9	GTK_MISC
LEAF_NODE	50:32	50:32	8	(
ARGUMENT	50:33	50:33	8	img
FIELD	50:33	50:33	9	img
LEAF_NODE	50:33	50:33	10	img
LEAF_NODE	50:36	50:36	8	)
LEAF_NODE	50:37	50:37	6	,
ARGUMENT	50:39	50:39	6	0
FIELD	50:39	50:39	7	0
LEAF_NODE	50:39	50:39	8	0
LEAF_NODE	50:40	50:40	6	,
ARGUMENT	50:42	50:42	6	0
FIELD	50:42	50:42	7	0
LEAF_NODE	50:42	50:42	8	0
LEAF_NODE	50:43	50:43	6	)
LEAF_NODE	50:44	50:44	4	;
EXPR_STATEMENT	51:1	51:56	3	gtk_box_pack_start ( GTK_BOX ( hbox ) , img , FALSE , FALSE , 0 ) ;
EXPR	51:1	51:1	4	gtk_box_pack_start ( GTK_BOX ( hbox ) , img , FALSE , FALSE , 0 )
FUNCTION_CALL	51:1	51:55	5	gtk_box_pack_start ( GTK_BOX ( hbox ) , img , FALSE , FALSE , 0 )
CALLEE	51:1	51:1	6	gtk_box_pack_start
LEAF_NODE	51:1	51:1	7	gtk_box_pack_start
LEAF_NODE	51:19	51:19	6	(
ARGUMENT	51:20	51:20	6	GTK_BOX ( hbox )
FUNCTION_CALL	51:20	51:32	7	GTK_BOX ( hbox )
CALLEE	51:20	51:20	8	GTK_BOX
LEAF_NODE	51:20	51:20	9	GTK_BOX
LEAF_NODE	51:27	51:27	8	(
ARGUMENT	51:28	51:28	8	hbox
FIELD	51:28	51:28	9	hbox
LEAF_NODE	51:28	51:28	10	hbox
LEAF_NODE	51:32	51:32	8	)
LEAF_NODE	51:33	51:33	6	,
ARGUMENT	51:35	51:35	6	img
FIELD	51:35	51:35	7	img
LEAF_NODE	51:35	51:35	8	img
LEAF_NODE	51:38	51:38	6	,
ARGUMENT	51:40	51:40	6	FALSE
FIELD	51:40	51:40	7	FALSE
LEAF_NODE	51:40	51:40	8	FALSE
LEAF_NODE	51:45	51:45	6	,
ARGUMENT	51:47	51:47	6	FALSE
FIELD	51:47	51:47	7	FALSE
LEAF_NODE	51:47	51:47	8	FALSE
LEAF_NODE	51:52	51:52	6	,
ARGUMENT	51:54	51:54	6	0
FIELD	51:54	51:54	7	0
LEAF_NODE	51:54	51:54	8	0
LEAF_NODE	51:55	51:55	6	)
LEAF_NODE	51:56	51:56	4	;
EXPR_STATEMENT	53:1	53:46	3	vbox = gtk_vbox_new ( FALSE , PIDGIN_HIG_BORDER ) ;
EXPR	53:1	53:1	4	vbox = gtk_vbox_new ( FALSE , PIDGIN_HIG_BORDER )
ASSIGN	53:1	53:8	5	vbox = gtk_vbox_new ( FALSE , PIDGIN_HIG_BORDER )
LVAL	53:1	53:1	6	vbox
FIELD	53:1	53:1	7	vbox
LEAF_NODE	53:1	53:1	8	vbox
ASSIGN_OP	53:6	53:6	6	=
LEAF_NODE	53:6	53:6	7	=
RVAL	53:8	53:8	6	gtk_vbox_new ( FALSE , PIDGIN_HIG_BORDER )
FUNCTION_CALL	53:8	53:45	7	gtk_vbox_new ( FALSE , PIDGIN_HIG_BORDER )
CALLEE	53:8	53:8	8	gtk_vbox_new
LEAF_NODE	53:8	53:8	9	gtk_vbox_new
LEAF_NODE	53:20	53:20	8	(
ARGUMENT	53:21	53:21	8	FALSE
FIELD	53:21	53:21	9	FALSE
LEAF_NODE	53:21	53:21	10	FALSE
LEAF_NODE	53:26	53:26	8	,
ARGUMENT	53:28	53:28	8	PIDGIN_HIG_BORDER
FIELD	53:28	53:28	9	PIDGIN_HIG_BORDER
LEAF_NODE	53:28	53:28	10	PIDGIN_HIG_BORDER
LEAF_NODE	53:45	53:45	8	)
LEAF_NODE	53:46	53:46	4	;
EXPR_STATEMENT	54:1	54:55	3	gtk_box_pack_start ( GTK_BOX ( hbox ) , vbox , TRUE , TRUE , 0 ) ;
EXPR	54:1	54:1	4	gtk_box_pack_start ( GTK_BOX ( hbox ) , vbox , TRUE , TRUE , 0 )
FUNCTION_CALL	54:1	54:54	5	gtk_box_pack_start ( GTK_BOX ( hbox ) , vbox , TRUE , TRUE , 0 )
CALLEE	54:1	54:1	6	gtk_box_pack_start
LEAF_NODE	54:1	54:1	7	gtk_box_pack_start
LEAF_NODE	54:19	54:19	6	(
ARGUMENT	54:20	54:20	6	GTK_BOX ( hbox )
FUNCTION_CALL	54:20	54:32	7	GTK_BOX ( hbox )
CALLEE	54:20	54:20	8	GTK_BOX
LEAF_NODE	54:20	54:20	9	GTK_BOX
LEAF_NODE	54:27	54:27	8	(
ARGUMENT	54:28	54:28	8	hbox
FIELD	54:28	54:28	9	hbox
LEAF_NODE	54:28	54:28	10	hbox
LEAF_NODE	54:32	54:32	8	)
LEAF_NODE	54:33	54:33	6	,
ARGUMENT	54:35	54:35	6	vbox
FIELD	54:35	54:35	7	vbox
LEAF_NODE	54:35	54:35	8	vbox
LEAF_NODE	54:39	54:39	6	,
ARGUMENT	54:41	54:41	6	TRUE
FIELD	54:41	54:41	7	TRUE
LEAF_NODE	54:41	54:41	8	TRUE
LEAF_NODE	54:45	54:45	6	,
ARGUMENT	54:47	54:47	6	TRUE
FIELD	54:47	54:47	7	TRUE
LEAF_NODE	54:47	54:47	8	TRUE
LEAF_NODE	54:51	54:51	6	,
ARGUMENT	54:53	54:53	6	0
FIELD	54:53	54:53	7	0
LEAF_NODE	54:53	54:53	8	0
LEAF_NODE	54:54	54:54	6	)
LEAF_NODE	54:55	54:55	4	;
EXPR_STATEMENT	55:1	55:46	3	pidgin_widget_decorate_account ( hbox , account ) ;
EXPR	55:1	55:1	4	pidgin_widget_decorate_account ( hbox , account )
FUNCTION_CALL	55:1	55:45	5	pidgin_widget_decorate_account ( hbox , account )
CALLEE	55:1	55:1	6	pidgin_widget_decorate_account
LEAF_NODE	55:1	55:1	7	pidgin_widget_decorate_account
LEAF_NODE	55:31	55:31	6	(
ARGUMENT	55:32	55:32	6	hbox
FIELD	55:32	55:32	7	hbox
LEAF_NODE	55:32	55:32	8	hbox
LEAF_NODE	55:36	55:36	6	,
ARGUMENT	55:38	55:38	6	account
FIELD	55:38	55:38	7	account
LEAF_NODE	55:38	55:38	8	account
LEAF_NODE	55:45	55:45	6	)
LEAF_NODE	55:46	55:46	4	;
EXPR_STATEMENT	57:1	57:75	3	primary_esc = ( primary != NULL ) ? g_markup_escape_text ( primary , - 1 ) : NULL ;
EXPR	57:1	57:1	4	primary_esc = ( primary != NULL ) ? g_markup_escape_text ( primary , - 1 ) : NULL
ASSIGN	57:1	57:15	5	primary_esc = ( primary != NULL ) ? g_markup_escape_text ( primary , - 1 ) : NULL
LVAL	57:1	57:1	6	primary_esc
FIELD	57:1	57:1	7	primary_esc
LEAF_NODE	57:1	57:1	8	primary_esc
ASSIGN_OP	57:13	57:13	6	=
LEAF_NODE	57:13	57:13	7	=
RVAL	57:15	57:15	6	( primary != NULL ) ? g_markup_escape_text ( primary , - 1 ) : NULL
COND_EXPR	57:15	57:71	7	( primary != NULL ) ? g_markup_escape_text ( primary , - 1 ) : NULL
CONDITION	57:15	57:31	8	( primary != NULL )
LEAF_NODE	57:15	57:15	9	(
FIELD	57:16	57:16	9	primary
LEAF_NODE	57:16	57:16	10	primary
EQ_OPERATOR	57:24	57:24	9	!=
LEAF_NODE	57:24	57:24	10	!=
FIELD	57:27	57:27	9	NULL
LEAF_NODE	57:27	57:27	10	NULL
LEAF_NODE	57:31	57:31	9	)
LEAF_NODE	57:33	57:33	8	?
EXPR	57:35	57:35	8	g_markup_escape_text ( primary , - 1 )
FUNCTION_CALL	57:35	57:67	9	g_markup_escape_text ( primary , - 1 )
CALLEE	57:35	57:35	10	g_markup_escape_text
LEAF_NODE	57:35	57:35	11	g_markup_escape_text
LEAF_NODE	57:55	57:55	10	(
ARGUMENT	57:56	57:56	10	primary
FIELD	57:56	57:56	11	primary
LEAF_NODE	57:56	57:56	12	primary
LEAF_NODE	57:63	57:63	10	,
ARGUMENT	57:65	57:65	10	- 1
UNARY_EXPR	57:65	57:66	11	- 1
UNARY_OPERATOR	57:65	57:65	12	-
LEAF_NODE	57:65	57:65	13	-
FIELD	57:66	57:66	12	1
LEAF_NODE	57:66	57:66	13	1
LEAF_NODE	57:67	57:67	10	)
LEAF_NODE	57:69	57:69	8	:
FIELD	57:71	57:71	8	NULL
LEAF_NODE	57:71	57:71	9	NULL
LEAF_NODE	57:75	57:75	4	;
EXPR_STATEMENT	58:1	58:81	3	secondary_esc = ( secondary != NULL ) ? g_markup_escape_text ( secondary , - 1 ) : NULL ;
EXPR	58:1	58:1	4	secondary_esc = ( secondary != NULL ) ? g_markup_escape_text ( secondary , - 1 ) : NULL
ASSIGN	58:1	58:17	5	secondary_esc = ( secondary != NULL ) ? g_markup_escape_text ( secondary , - 1 ) : NULL
LVAL	58:1	58:1	6	secondary_esc
FIELD	58:1	58:1	7	secondary_esc
LEAF_NODE	58:1	58:1	8	secondary_esc
ASSIGN_OP	58:15	58:15	6	=
LEAF_NODE	58:15	58:15	7	=
RVAL	58:17	58:17	6	( secondary != NULL ) ? g_markup_escape_text ( secondary , - 1 ) : NULL
COND_EXPR	58:17	58:77	7	( secondary != NULL ) ? g_markup_escape_text ( secondary , - 1 ) : NULL
CONDITION	58:17	58:35	8	( secondary != NULL )
LEAF_NODE	58:17	58:17	9	(
FIELD	58:18	58:18	9	secondary
LEAF_NODE	58:18	58:18	10	secondary
EQ_OPERATOR	58:28	58:28	9	!=
LEAF_NODE	58:28	58:28	10	!=
FIELD	58:31	58:31	9	NULL
LEAF_NODE	58:31	58:31	10	NULL
LEAF_NODE	58:35	58:35	9	)
LEAF_NODE	58:37	58:37	8	?
EXPR	58:39	58:39	8	g_markup_escape_text ( secondary , - 1 )
FUNCTION_CALL	58:39	58:73	9	g_markup_escape_text ( secondary , - 1 )
CALLEE	58:39	58:39	10	g_markup_escape_text
LEAF_NODE	58:39	58:39	11	g_markup_escape_text
LEAF_NODE	58:59	58:59	10	(
ARGUMENT	58:60	58:60	10	secondary
FIELD	58:60	58:60	11	secondary
LEAF_NODE	58:60	58:60	12	secondary
LEAF_NODE	58:69	58:69	10	,
ARGUMENT	58:71	58:71	10	- 1
UNARY_EXPR	58:71	58:72	11	- 1
UNARY_OPERATOR	58:71	58:71	12	-
LEAF_NODE	58:71	58:71	13	-
FIELD	58:72	58:72	12	1
LEAF_NODE	58:72	58:72	13	1
LEAF_NODE	58:73	58:73	10	)
LEAF_NODE	58:75	58:75	8	:
FIELD	58:77	58:77	8	NULL
LEAF_NODE	58:77	58:77	9	NULL
LEAF_NODE	58:81	58:81	4	;
LEAF_NODE	59:1	59:1	3	label_text
LEAF_NODE	59:12	59:12	3	=
LEAF_NODE	59:14	59:14	3	g_strdup_printf
LEAF_NODE	59:29	59:29	3	(
LEAF_NODE	59:30	59:30	3	(
LEAF_NODE	59:31	59:31	3	primary
LEAF_NODE	59:39	59:39	3	?
LEAF_NODE	59:41	59:41	3	"<span weight=\"bold\" size=\"larger\">"
LEAF_NODE	60:9	60:9	3	"%s</span>%s%s"
LEAF_NODE	60:25	60:25	3	:
LEAF_NODE	60:27	60:27	3	"%s%s%s"
LEAF_NODE	60:35	60:35	3	)
LEAF_NODE	60:36	60:36	3	,
LEAF_NODE	61:9	61:9	3	(
LEAF_NODE	61:10	61:10	3	primary
LEAF_NODE	61:18	61:18	3	?
LABEL	61:20	61:32	3	primary_esc :
LEAF_NODE	61:20	61:20	4	primary_esc
LEAF_NODE	61:32	61:32	4	:
LEAF_NODE	61:34	61:34	3	""
LEAF_NODE	61:36	61:36	3	)
LEAF_NODE	61:37	61:37	3	,
LEAF_NODE	62:9	62:9	3	(
LEAF_NODE	62:10	62:10	3	(
LEAF_NODE	62:11	62:11	3	primary
LEAF_NODE	62:19	62:19	3	&&
LEAF_NODE	62:22	62:22	3	secondary
LEAF_NODE	62:31	62:31	3	)
LEAF_NODE	62:33	62:33	3	?
LEAF_NODE	62:35	62:35	3	"\n\n"
LEAF_NODE	62:42	62:42	3	:
LEAF_NODE	62:44	62:44	3	""
LEAF_NODE	62:46	62:46	3	)
LEAF_NODE	62:47	62:47	3	,
LEAF_NODE	63:9	63:9	3	(
LEAF_NODE	63:10	63:10	3	secondary
LEAF_NODE	63:20	63:20	3	?
LABEL	63:22	63:36	3	secondary_esc :
LEAF_NODE	63:22	63:22	4	secondary_esc
LEAF_NODE	63:36	63:36	4	:
LEAF_NODE	63:38	63:38	3	""
LEAF_NODE	63:40	63:40	3	)
LEAF_NODE	63:41	63:41	3	)
LEAF_NODE	63:42	63:42	3	;
EXPR_STATEMENT	64:1	64:20	3	g_free ( primary_esc ) ;
EXPR	64:1	64:1	4	g_free ( primary_esc )
FUNCTION_CALL	64:1	64:19	5	g_free ( primary_esc )
CALLEE	64:1	64:1	6	g_free
LEAF_NODE	64:1	64:1	7	g_free
LEAF_NODE	64:7	64:7	6	(
ARGUMENT	64:8	64:8	6	primary_esc
FIELD	64:8	64:8	7	primary_esc
LEAF_NODE	64:8	64:8	8	primary_esc
LEAF_NODE	64:19	64:19	6	)
LEAF_NODE	64:20	64:20	4	;
EXPR_STATEMENT	65:1	65:22	3	g_free ( secondary_esc ) ;
EXPR	65:1	65:1	4	g_free ( secondary_esc )
FUNCTION_CALL	65:1	65:21	5	g_free ( secondary_esc )
CALLEE	65:1	65:1	6	g_free
LEAF_NODE	65:1	65:1	7	g_free
LEAF_NODE	65:7	65:7	6	(
ARGUMENT	65:8	65:8	6	secondary_esc
FIELD	65:8	65:8	7	secondary_esc
LEAF_NODE	65:8	65:8	8	secondary_esc
LEAF_NODE	65:21	65:21	6	)
LEAF_NODE	65:22	65:22	4	;
EXPR_STATEMENT	66:1	66:28	3	label = gtk_label_new ( NULL ) ;
EXPR	66:1	66:1	4	label = gtk_label_new ( NULL )
ASSIGN	66:1	66:9	5	label = gtk_label_new ( NULL )
LVAL	66:1	66:1	6	label
FIELD	66:1	66:1	7	label
LEAF_NODE	66:1	66:1	8	label
ASSIGN_OP	66:7	66:7	6	=
LEAF_NODE	66:7	66:7	7	=
RVAL	66:9	66:9	6	gtk_label_new ( NULL )
FUNCTION_CALL	66:9	66:27	7	gtk_label_new ( NULL )
CALLEE	66:9	66:9	8	gtk_label_new
LEAF_NODE	66:9	66:9	9	gtk_label_new
LEAF_NODE	66:22	66:22	8	(
ARGUMENT	66:23	66:23	8	NULL
FIELD	66:23	66:23	9	NULL
LEAF_NODE	66:23	66:23	10	NULL
LEAF_NODE	66:27	66:27	8	)
LEAF_NODE	66:28	66:28	4	;
EXPR_STATEMENT	67:1	67:51	3	gtk_label_set_markup ( GTK_LABEL ( label ) , label_text ) ;
EXPR	67:1	67:1	4	gtk_label_set_markup ( GTK_LABEL ( label ) , label_text )
FUNCTION_CALL	67:1	67:50	5	gtk_label_set_markup ( GTK_LABEL ( label ) , label_text )
CALLEE	67:1	67:1	6	gtk_label_set_markup
LEAF_NODE	67:1	67:1	7	gtk_label_set_markup
LEAF_NODE	67:21	67:21	6	(
ARGUMENT	67:22	67:22	6	GTK_LABEL ( label )
FUNCTION_CALL	67:22	67:37	7	GTK_LABEL ( label )
CALLEE	67:22	67:22	8	GTK_LABEL
LEAF_NODE	67:22	67:22	9	GTK_LABEL
LEAF_NODE	67:31	67:31	8	(
ARGUMENT	67:32	67:32	8	label
FIELD	67:32	67:32	9	label
LEAF_NODE	67:32	67:32	10	label
LEAF_NODE	67:37	67:37	8	)
LEAF_NODE	67:38	67:38	6	,
ARGUMENT	67:40	67:40	6	label_text
FIELD	67:40	67:40	7	label_text
LEAF_NODE	67:40	67:40	8	label_text
LEAF_NODE	67:50	67:50	6	)
LEAF_NODE	67:51	67:51	4	;
EXPR_STATEMENT	68:1	68:48	3	gtk_label_set_line_wrap ( GTK_LABEL ( label ) , TRUE ) ;
EXPR	68:1	68:1	4	gtk_label_set_line_wrap ( GTK_LABEL ( label ) , TRUE )
FUNCTION_CALL	68:1	68:47	5	gtk_label_set_line_wrap ( GTK_LABEL ( label ) , TRUE )
CALLEE	68:1	68:1	6	gtk_label_set_line_wrap
LEAF_NODE	68:1	68:1	7	gtk_label_set_line_wrap
LEAF_NODE	68:24	68:24	6	(
ARGUMENT	68:25	68:25	6	GTK_LABEL ( label )
FUNCTION_CALL	68:25	68:40	7	GTK_LABEL ( label )
CALLEE	68:25	68:25	8	GTK_LABEL
LEAF_NODE	68:25	68:25	9	GTK_LABEL
LEAF_NODE	68:34	68:34	8	(
ARGUMENT	68:35	68:35	8	label
FIELD	68:35	68:35	9	label
LEAF_NODE	68:35	68:35	10	label
LEAF_NODE	68:40	68:40	8	)
LEAF_NODE	68:41	68:41	6	,
ARGUMENT	68:43	68:43	6	TRUE
FIELD	68:43	68:43	7	TRUE
LEAF_NODE	68:43	68:43	8	TRUE
LEAF_NODE	68:47	68:47	6	)
LEAF_NODE	68:48	68:48	4	;
EXPR_STATEMENT	69:1	69:46	3	gtk_misc_set_alignment ( GTK_MISC ( label ) , 0 , 0 ) ;
EXPR	69:1	69:1	4	gtk_misc_set_alignment ( GTK_MISC ( label ) , 0 , 0 )
FUNCTION_CALL	69:1	69:45	5	gtk_misc_set_alignment ( GTK_MISC ( label ) , 0 , 0 )
CALLEE	69:1	69:1	6	gtk_misc_set_alignment
LEAF_NODE	69:1	69:1	7	gtk_misc_set_alignment
LEAF_NODE	69:23	69:23	6	(
ARGUMENT	69:24	69:24	6	GTK_MISC ( label )
FUNCTION_CALL	69:24	69:38	7	GTK_MISC ( label )
CALLEE	69:24	69:24	8	GTK_MISC
LEAF_NODE	69:24	69:24	9	GTK_MISC
LEAF_NODE	69:32	69:32	8	(
ARGUMENT	69:33	69:33	8	label
FIELD	69:33	69:33	9	label
LEAF_NODE	69:33	69:33	10	label
LEAF_NODE	69:38	69:38	8	)
LEAF_NODE	69:39	69:39	6	,
ARGUMENT	69:41	69:41	6	0
FIELD	69:41	69:41	7	0
LEAF_NODE	69:41	69:41	8	0
LEAF_NODE	69:42	69:42	6	,
ARGUMENT	69:44	69:44	6	0
FIELD	69:44	69:44	7	0
LEAF_NODE	69:44	69:44	8	0
LEAF_NODE	69:45	69:45	6	)
LEAF_NODE	69:46	69:46	4	;
EXPR_STATEMENT	70:1	70:58	3	gtk_box_pack_start ( GTK_BOX ( vbox ) , label , FALSE , FALSE , 0 ) ;
EXPR	70:1	70:1	4	gtk_box_pack_start ( GTK_BOX ( vbox ) , label , FALSE , FALSE , 0 )
FUNCTION_CALL	70:1	70:57	5	gtk_box_pack_start ( GTK_BOX ( vbox ) , label , FALSE , FALSE , 0 )
CALLEE	70:1	70:1	6	gtk_box_pack_start
LEAF_NODE	70:1	70:1	7	gtk_box_pack_start
LEAF_NODE	70:19	70:19	6	(
ARGUMENT	70:20	70:20	6	GTK_BOX ( vbox )
FUNCTION_CALL	70:20	70:32	7	GTK_BOX ( vbox )
CALLEE	70:20	70:20	8	GTK_BOX
LEAF_NODE	70:20	70:20	9	GTK_BOX
LEAF_NODE	70:27	70:27	8	(
ARGUMENT	70:28	70:28	8	vbox
FIELD	70:28	70:28	9	vbox
LEAF_NODE	70:28	70:28	10	vbox
LEAF_NODE	70:32	70:32	8	)
LEAF_NODE	70:33	70:33	6	,
ARGUMENT	70:35	70:35	6	label
FIELD	70:35	70:35	7	label
LEAF_NODE	70:35	70:35	8	label
LEAF_NODE	70:40	70:40	6	,
ARGUMENT	70:42	70:42	6	FALSE
FIELD	70:42	70:42	7	FALSE
LEAF_NODE	70:42	70:42	8	FALSE
LEAF_NODE	70:47	70:47	6	,
ARGUMENT	70:49	70:49	6	FALSE
FIELD	70:49	70:49	7	FALSE
LEAF_NODE	70:49	70:49	8	FALSE
LEAF_NODE	70:54	70:54	6	,
ARGUMENT	70:56	70:56	6	0
FIELD	70:56	70:56	7	0
LEAF_NODE	70:56	70:56	8	0
LEAF_NODE	70:57	70:57	6	)
LEAF_NODE	70:58	70:58	4	;
EXPR_STATEMENT	71:1	71:19	3	g_free ( label_text ) ;
EXPR	71:1	71:1	4	g_free ( label_text )
FUNCTION_CALL	71:1	71:18	5	g_free ( label_text )
CALLEE	71:1	71:1	6	g_free
LEAF_NODE	71:1	71:1	7	g_free
LEAF_NODE	71:7	71:7	6	(
ARGUMENT	71:8	71:8	6	label_text
FIELD	71:8	71:8	7	label_text
LEAF_NODE	71:8	71:8	8	label_text
LEAF_NODE	71:18	71:18	6	)
LEAF_NODE	71:19	71:19	4	;
EXPR_STATEMENT	73:1	73:36	3	data -> u . input . multiline = multiline ;
EXPR	73:1	73:1	4	data -> u . input . multiline = multiline
ASSIGN	73:1	73:27	5	data -> u . input . multiline = multiline
LVAL	73:1	73:1	6	data -> u . input . multiline
FIELD	73:1	73:15	7	data -> u . input . multiline
LEAF_NODE	73:1	73:1	8	data
LEAF_NODE	73:5	73:5	8	->
LEAF_NODE	73:7	73:7	8	u
LEAF_NODE	73:8	73:8	8	.
LEAF_NODE	73:9	73:9	8	input
LEAF_NODE	73:14	73:14	8	.
LEAF_NODE	73:15	73:15	8	multiline
ASSIGN_OP	73:25	73:25	6	=
LEAF_NODE	73:25	73:25	7	=
RVAL	73:27	73:27	6	multiline
FIELD	73:27	73:27	7	multiline
LEAF_NODE	73:27	73:27	8	multiline
LEAF_NODE	73:36	73:36	4	;
EXPR_STATEMENT	74:1	74:36	3	data -> u . input . hint = g_strdup ( hint ) ;
EXPR	74:1	74:1	4	data -> u . input . hint = g_strdup ( hint )
ASSIGN	74:1	74:22	5	data -> u . input . hint = g_strdup ( hint )
LVAL	74:1	74:1	6	data -> u . input . hint
FIELD	74:1	74:15	7	data -> u . input . hint
LEAF_NODE	74:1	74:1	8	data
LEAF_NODE	74:5	74:5	8	->
LEAF_NODE	74:7	74:7	8	u
LEAF_NODE	74:8	74:8	8	.
LEAF_NODE	74:9	74:9	8	input
LEAF_NODE	74:14	74:14	8	.
LEAF_NODE	74:15	74:15	8	hint
ASSIGN_OP	74:20	74:20	6	=
LEAF_NODE	74:20	74:20	7	=
RVAL	74:22	74:22	6	g_strdup ( hint )
FUNCTION_CALL	74:22	74:35	7	g_strdup ( hint )
CALLEE	74:22	74:22	8	g_strdup
LEAF_NODE	74:22	74:22	9	g_strdup
LEAF_NODE	74:30	74:30	8	(
ARGUMENT	74:31	74:31	8	hint
FIELD	74:31	74:31	9	hint
LEAF_NODE	74:31	74:31	10	hint
LEAF_NODE	74:35	74:35	8	)
LEAF_NODE	74:36	74:36	4	;
EXPR_STATEMENT	75:1	75:26	3	gtk_widget_show_all ( hbox ) ;
EXPR	75:1	75:1	4	gtk_widget_show_all ( hbox )
FUNCTION_CALL	75:1	75:25	5	gtk_widget_show_all ( hbox )
CALLEE	75:1	75:1	6	gtk_widget_show_all
LEAF_NODE	75:1	75:1	7	gtk_widget_show_all
LEAF_NODE	75:20	75:20	6	(
ARGUMENT	75:21	75:21	6	hbox
FIELD	75:21	75:21	7	hbox
LEAF_NODE	75:21	75:21	8	hbox
LEAF_NODE	75:25	75:25	6	)
LEAF_NODE	75:26	75:26	4	;
SELECTION	76:1	76:76	3	
KEYWORD	76:1	76:1	4	if
LEAF_NODE	76:1	76:1	5	if
LEAF_NODE	76:4	76:4	4	(
CONDITION	76:5	76:5	4	( data -> u . input . hint != NULL ) && ( ! strcmp ( data -> u . input . hint , "html" ) )
EXPR	76:5	76:5	5	( data -> u . input . hint != NULL ) && ( ! strcmp ( data -> u . input . hint , "html" ) )
AND	76:5	76:37	6	( data -> u . input . hint != NULL ) && ( ! strcmp ( data -> u . input . hint , "html" ) )
EXPR	76:5	76:32	7	( data -> u . input . hint != NULL )
LEAF_NODE	76:5	76:5	8	(
FIELD	76:6	76:20	8	data -> u . input . hint
LEAF_NODE	76:6	76:6	9	data
LEAF_NODE	76:10	76:10	9	->
LEAF_NODE	76:12	76:12	9	u
LEAF_NODE	76:13	76:13	9	.
LEAF_NODE	76:14	76:14	9	input
LEAF_NODE	76:19	76:19	9	.
LEAF_NODE	76:20	76:20	9	hint
EQ_OPERATOR	76:25	76:25	8	!=
LEAF_NODE	76:25	76:25	9	!=
FIELD	76:28	76:28	8	NULL
LEAF_NODE	76:28	76:28	9	NULL
LEAF_NODE	76:32	76:32	8	)
LEAF_NODE	76:34	76:34	7	&&
EXPR	76:37	76:73	7	( ! strcmp ( data -> u . input . hint , "html" ) )
LEAF_NODE	76:37	76:37	8	(
UNARY_EXPR	76:38	76:39	8	! strcmp ( data -> u . input . hint , "html" )
UNARY_OPERATOR	76:38	76:38	9	!
LEAF_NODE	76:38	76:38	10	!
FUNCTION_CALL	76:39	76:72	9	strcmp ( data -> u . input . hint , "html" )
CALLEE	76:39	76:39	10	strcmp
LEAF_NODE	76:39	76:39	11	strcmp
LEAF_NODE	76:45	76:45	10	(
ARGUMENT	76:46	76:46	10	data -> u . input . hint
FIELD	76:46	76:60	11	data -> u . input . hint
LEAF_NODE	76:46	76:46	12	data
LEAF_NODE	76:50	76:50	12	->
LEAF_NODE	76:52	76:52	12	u
LEAF_NODE	76:53	76:53	12	.
LEAF_NODE	76:54	76:54	12	input
LEAF_NODE	76:59	76:59	12	.
LEAF_NODE	76:60	76:60	12	hint
LEAF_NODE	76:64	76:64	10	,
ARGUMENT	76:66	76:66	10	"html"
FIELD	76:66	76:66	11	"html"
LEAF_NODE	76:66	76:66	12	"html"
LEAF_NODE	76:72	76:72	10	)
LEAF_NODE	76:73	76:73	8	)
LEAF_NODE	76:74	76:74	4	)
STATEMENTS	76:76	87:1	4	
LEAF_NODE	76:76	76:76	5	{
STATEMENTS	77:2	86:2	5	
SIMPLE_DECL	77:2	77:18	6	GtkWidget * frame ;
VAR_DECL	77:2	77:13	7	GtkWidget * frame
TYPE	77:2	77:12	8	GtkWidget *
TYPE_NAME	77:2	77:2	9	GtkWidget
LEAF_NODE	77:2	77:2	10	GtkWidget
POINTER	77:12	77:12	9	*
LEAF_NODE	77:12	77:12	10	*
NAME	77:13	77:13	8	frame
LEAF_NODE	77:13	77:13	9	frame
LEAF_NODE	77:18	77:18	7	;
EXPR_STATEMENT	79:2	79:60	6	frame = pidgin_create_imhtml ( TRUE , & entry , & toolbar , NULL ) ;
EXPR	79:2	79:2	7	frame = pidgin_create_imhtml ( TRUE , & entry , & toolbar , NULL )
ASSIGN	79:2	79:10	8	frame = pidgin_create_imhtml ( TRUE , & entry , & toolbar , NULL )
LVAL	79:2	79:2	9	frame
FIELD	79:2	79:2	10	frame
LEAF_NODE	79:2	79:2	11	frame
ASSIGN_OP	79:8	79:8	9	=
LEAF_NODE	79:8	79:8	10	=
RVAL	79:10	79:10	9	pidgin_create_imhtml ( TRUE , & entry , & toolbar , NULL )
FUNCTION_CALL	79:10	79:59	10	pidgin_create_imhtml ( TRUE , & entry , & toolbar , NULL )
CALLEE	79:10	79:10	11	pidgin_create_imhtml
LEAF_NODE	79:10	79:10	12	pidgin_create_imhtml
LEAF_NODE	79:30	79:30	11	(
ARGUMENT	79:31	79:31	11	TRUE
FIELD	79:31	79:31	12	TRUE
LEAF_NODE	79:31	79:31	13	TRUE
LEAF_NODE	79:35	79:35	11	,
ARGUMENT	79:37	79:37	11	& entry
UNARY_EXPR	79:37	79:38	12	& entry
UNARY_OPERATOR	79:37	79:37	13	&
LEAF_NODE	79:37	79:37	14	&
FIELD	79:38	79:38	13	entry
LEAF_NODE	79:38	79:38	14	entry
LEAF_NODE	79:43	79:43	11	,
ARGUMENT	79:45	79:45	11	& toolbar
UNARY_EXPR	79:45	79:46	12	& toolbar
UNARY_OPERATOR	79:45	79:45	13	&
LEAF_NODE	79:45	79:45	14	&
FIELD	79:46	79:46	13	toolbar
LEAF_NODE	79:46	79:46	14	toolbar
LEAF_NODE	79:53	79:53	11	,
ARGUMENT	79:55	79:55	11	NULL
FIELD	79:55	79:55	12	NULL
LEAF_NODE	79:55	79:55	13	NULL
LEAF_NODE	79:59	79:59	11	)
LEAF_NODE	79:60	79:60	7	;
EXPR_STATEMENT	80:2	80:46	6	gtk_widget_set_size_request ( entry , 320 , 130 ) ;
EXPR	80:2	80:2	7	gtk_widget_set_size_request ( entry , 320 , 130 )
FUNCTION_CALL	80:2	80:45	8	gtk_widget_set_size_request ( entry , 320 , 130 )
CALLEE	80:2	80:2	9	gtk_widget_set_size_request
LEAF_NODE	80:2	80:2	10	gtk_widget_set_size_request
LEAF_NODE	80:29	80:29	9	(
ARGUMENT	80:30	80:30	9	entry
FIELD	80:30	80:30	10	entry
LEAF_NODE	80:30	80:30	11	entry
LEAF_NODE	80:35	80:35	9	,
ARGUMENT	80:37	80:37	9	320
FIELD	80:37	80:37	10	320
LEAF_NODE	80:37	80:37	11	320
LEAF_NODE	80:40	80:40	9	,
ARGUMENT	80:42	80:42	9	130
FIELD	80:42	80:42	10	130
LEAF_NODE	80:42	80:42	11	130
LEAF_NODE	80:45	80:45	9	)
LEAF_NODE	80:46	80:46	7	;
EXPR_STATEMENT	81:2	81:53	6	gtk_widget_set_name ( entry , "pidgin_request_imhtml" ) ;
EXPR	81:2	81:2	7	gtk_widget_set_name ( entry , "pidgin_request_imhtml" )
FUNCTION_CALL	81:2	81:52	8	gtk_widget_set_name ( entry , "pidgin_request_imhtml" )
CALLEE	81:2	81:2	9	gtk_widget_set_name
LEAF_NODE	81:2	81:2	10	gtk_widget_set_name
LEAF_NODE	81:21	81:21	9	(
ARGUMENT	81:22	81:22	9	entry
FIELD	81:22	81:22	10	entry
LEAF_NODE	81:22	81:22	11	entry
LEAF_NODE	81:27	81:27	9	,
ARGUMENT	81:29	81:29	9	"pidgin_request_imhtml"
FIELD	81:29	81:29	10	"pidgin_request_imhtml"
LEAF_NODE	81:29	81:29	11	"pidgin_request_imhtml"
LEAF_NODE	81:52	81:52	9	)
LEAF_NODE	81:53	81:53	7	;
SELECTION	82:2	83:3	6	
KEYWORD	82:2	82:2	7	if
LEAF_NODE	82:2	82:2	8	if
LEAF_NODE	82:5	82:5	7	(
CONDITION	82:6	82:6	7	default_value != NULL
EXPR	82:6	82:23	8	default_value != NULL
FIELD	82:6	82:6	9	default_value
LEAF_NODE	82:6	82:6	10	default_value
EQ_OPERATOR	82:20	82:20	9	!=
LEAF_NODE	82:20	82:20	10	!=
FIELD	82:23	82:23	9	NULL
LEAF_NODE	82:23	82:23	10	NULL
LEAF_NODE	82:27	82:27	7	)
STATEMENTS	83:3	83:3	7	
EXPR_STATEMENT	83:3	83:81	8	gtk_imhtml_append_text ( GTK_IMHTML ( entry ) , default_value , GTK_IMHTML_NO_SCROLL ) ;
EXPR	83:3	83:3	9	gtk_imhtml_append_text ( GTK_IMHTML ( entry ) , default_value , GTK_IMHTML_NO_SCROLL )
FUNCTION_CALL	83:3	83:80	10	gtk_imhtml_append_text ( GTK_IMHTML ( entry ) , default_value , GTK_IMHTML_NO_SCROLL )
CALLEE	83:3	83:3	11	gtk_imhtml_append_text
LEAF_NODE	83:3	83:3	12	gtk_imhtml_append_text
LEAF_NODE	83:25	83:25	11	(
ARGUMENT	83:26	83:26	11	GTK_IMHTML ( entry )
FUNCTION_CALL	83:26	83:42	12	GTK_IMHTML ( entry )
CALLEE	83:26	83:26	13	GTK_IMHTML
LEAF_NODE	83:26	83:26	14	GTK_IMHTML
LEAF_NODE	83:36	83:36	13	(
ARGUMENT	83:37	83:37	13	entry
FIELD	83:37	83:37	14	entry
LEAF_NODE	83:37	83:37	15	entry
LEAF_NODE	83:42	83:42	13	)
LEAF_NODE	83:43	83:43	11	,
ARGUMENT	83:45	83:45	11	default_value
FIELD	83:45	83:45	12	default_value
LEAF_NODE	83:45	83:45	13	default_value
LEAF_NODE	83:58	83:58	11	,
ARGUMENT	83:60	83:60	11	GTK_IMHTML_NO_SCROLL
FIELD	83:60	83:60	12	GTK_IMHTML_NO_SCROLL
LEAF_NODE	83:60	83:60	13	GTK_IMHTML_NO_SCROLL
LEAF_NODE	83:80	83:80	11	)
LEAF_NODE	83:81	83:81	9	;
EXPR_STATEMENT	84:2	84:57	6	gtk_box_pack_start ( GTK_BOX ( vbox ) , frame , TRUE , TRUE , 0 ) ;
EXPR	84:2	84:2	7	gtk_box_pack_start ( GTK_BOX ( vbox ) , frame , TRUE , TRUE , 0 )
FUNCTION_CALL	84:2	84:56	8	gtk_box_pack_start ( GTK_BOX ( vbox ) , frame , TRUE , TRUE , 0 )
CALLEE	84:2	84:2	9	gtk_box_pack_start
LEAF_NODE	84:2	84:2	10	gtk_box_pack_start
LEAF_NODE	84:20	84:20	9	(
ARGUMENT	84:21	84:21	9	GTK_BOX ( vbox )
FUNCTION_CALL	84:21	84:33	10	GTK_BOX ( vbox )
CALLEE	84:21	84:21	11	GTK_BOX
LEAF_NODE	84:21	84:21	12	GTK_BOX
LEAF_NODE	84:28	84:28	11	(
ARGUMENT	84:29	84:29	11	vbox
FIELD	84:29	84:29	12	vbox
LEAF_NODE	84:29	84:29	13	vbox
LEAF_NODE	84:33	84:33	11	)
LEAF_NODE	84:34	84:34	9	,
ARGUMENT	84:36	84:36	9	frame
FIELD	84:36	84:36	10	frame
LEAF_NODE	84:36	84:36	11	frame
LEAF_NODE	84:41	84:41	9	,
ARGUMENT	84:43	84:43	9	TRUE
FIELD	84:43	84:43	10	TRUE
LEAF_NODE	84:43	84:43	11	TRUE
LEAF_NODE	84:47	84:47	9	,
ARGUMENT	84:49	84:49	9	TRUE
FIELD	84:49	84:49	10	TRUE
LEAF_NODE	84:49	84:49	11	TRUE
LEAF_NODE	84:53	84:53	9	,
ARGUMENT	84:55	84:55	9	0
FIELD	84:55	84:55	10	0
LEAF_NODE	84:55	84:55	11	0
LEAF_NODE	84:56	84:56	9	)
LEAF_NODE	84:57	84:57	7	;
EXPR_STATEMENT	85:2	85:24	6	gtk_widget_show ( frame ) ;
EXPR	85:2	85:2	7	gtk_widget_show ( frame )
FUNCTION_CALL	85:2	85:23	8	gtk_widget_show ( frame )
CALLEE	85:2	85:2	9	gtk_widget_show
LEAF_NODE	85:2	85:2	10	gtk_widget_show
LEAF_NODE	85:17	85:17	9	(
ARGUMENT	85:18	85:18	9	frame
FIELD	85:18	85:18	10	frame
LEAF_NODE	85:18	85:18	11	frame
LEAF_NODE	85:23	85:23	9	)
LEAF_NODE	85:24	85:24	7	;
EXPR_STATEMENT	86:2	86:58	6	gtk_imhtml_set_return_inserts_newline ( GTK_IMHTML ( entry ) ) ;
EXPR	86:2	86:2	7	gtk_imhtml_set_return_inserts_newline ( GTK_IMHTML ( entry ) )
FUNCTION_CALL	86:2	86:57	8	gtk_imhtml_set_return_inserts_newline ( GTK_IMHTML ( entry ) )
CALLEE	86:2	86:2	9	gtk_imhtml_set_return_inserts_newline
LEAF_NODE	86:2	86:2	10	gtk_imhtml_set_return_inserts_newline
LEAF_NODE	86:39	86:39	9	(
ARGUMENT	86:40	86:40	9	GTK_IMHTML ( entry )
FUNCTION_CALL	86:40	86:56	10	GTK_IMHTML ( entry )
CALLEE	86:40	86:40	11	GTK_IMHTML
LEAF_NODE	86:40	86:40	12	GTK_IMHTML
LEAF_NODE	86:50	86:50	11	(
ARGUMENT	86:51	86:51	11	entry
FIELD	86:51	86:51	12	entry
LEAF_NODE	86:51	86:51	13	entry
LEAF_NODE	86:56	86:56	11	)
LEAF_NODE	86:57	86:57	9	)
LEAF_NODE	86:58	86:58	7	;
LEAF_NODE	87:1	87:1	5	}
SELECTION	88:1	88:6	3	
KEYWORD	88:1	88:1	4	else
LEAF_NODE	88:1	88:1	5	else
STATEMENTS	88:6	121:1	4	
LEAF_NODE	88:6	88:6	5	{
STATEMENTS	89:2	120:2	5	
SELECTION	89:2	89:17	6	
KEYWORD	89:2	89:2	7	if
LEAF_NODE	89:2	89:2	8	if
LEAF_NODE	89:5	89:5	7	(
CONDITION	89:6	89:6	7	multiline
EXPR	89:6	89:6	8	multiline
FIELD	89:6	89:6	9	multiline
LEAF_NODE	89:6	89:6	10	multiline
LEAF_NODE	89:15	89:15	7	)
STATEMENTS	89:17	104:2	7	
LEAF_NODE	89:17	89:17	8	{
STATEMENTS	91:3	101:3	8	
EXPR_STATEMENT	91:3	91:30	9	entry = gtk_text_view_new ( ) ;
EXPR	91:3	91:3	10	entry = gtk_text_view_new ( )
ASSIGN	91:3	91:11	11	entry = gtk_text_view_new ( )
LVAL	91:3	91:3	12	entry
FIELD	91:3	91:3	13	entry
LEAF_NODE	91:3	91:3	14	entry
ASSIGN_OP	91:9	91:9	12	=
LEAF_NODE	91:9	91:9	13	=
RVAL	91:11	91:11	12	gtk_text_view_new ( )
FUNCTION_CALL	91:11	91:29	13	gtk_text_view_new ( )
CALLEE	91:11	91:11	14	gtk_text_view_new
LEAF_NODE	91:11	91:11	15	gtk_text_view_new
LEAF_NODE	91:28	91:28	14	(
LEAF_NODE	91:29	91:29	14	)
LEAF_NODE	91:30	91:30	10	;
EXPR_STATEMENT	92:3	92:57	9	gtk_text_view_set_editable ( GTK_TEXT_VIEW ( entry ) , TRUE ) ;
EXPR	92:3	92:3	10	gtk_text_view_set_editable ( GTK_TEXT_VIEW ( entry ) , TRUE )
FUNCTION_CALL	92:3	92:56	11	gtk_text_view_set_editable ( GTK_TEXT_VIEW ( entry ) , TRUE )
CALLEE	92:3	92:3	12	gtk_text_view_set_editable
LEAF_NODE	92:3	92:3	13	gtk_text_view_set_editable
LEAF_NODE	92:29	92:29	12	(
ARGUMENT	92:30	92:30	12	GTK_TEXT_VIEW ( entry )
FUNCTION_CALL	92:30	92:49	13	GTK_TEXT_VIEW ( entry )
CALLEE	92:30	92:30	14	GTK_TEXT_VIEW
LEAF_NODE	92:30	92:30	15	GTK_TEXT_VIEW
LEAF_NODE	92:43	92:43	14	(
ARGUMENT	92:44	92:44	14	entry
FIELD	92:44	92:44	15	entry
LEAF_NODE	92:44	92:44	16	entry
LEAF_NODE	92:49	92:49	14	)
LEAF_NODE	92:50	92:50	12	,
ARGUMENT	92:52	92:52	12	TRUE
FIELD	92:52	92:52	13	TRUE
LEAF_NODE	92:52	92:52	14	TRUE
LEAF_NODE	92:56	92:56	12	)
LEAF_NODE	92:57	92:57	10	;
SELECTION	93:3	93:30	9	
KEYWORD	93:3	93:3	10	if
LEAF_NODE	93:3	93:3	11	if
LEAF_NODE	93:6	93:6	10	(
CONDITION	93:7	93:7	10	default_value != NULL
EXPR	93:7	93:24	11	default_value != NULL
FIELD	93:7	93:7	12	default_value
LEAF_NODE	93:7	93:7	13	default_value
EQ_OPERATOR	93:21	93:21	12	!=
LEAF_NODE	93:21	93:21	13	!=
FIELD	93:24	93:24	12	NULL
LEAF_NODE	93:24	93:24	13	NULL
LEAF_NODE	93:28	93:28	10	)
STATEMENTS	93:30	97:3	10	
LEAF_NODE	93:30	93:30	11	{
STATEMENTS	94:4	96:4	11	
SIMPLE_DECL	94:4	94:25	12	GtkTextBuffer * buffer ;
VAR_DECL	94:4	94:19	13	GtkTextBuffer * buffer
TYPE	94:4	94:18	14	GtkTextBuffer *
TYPE_NAME	94:4	94:4	15	GtkTextBuffer
LEAF_NODE	94:4	94:4	16	GtkTextBuffer
POINTER	94:18	94:18	15	*
LEAF_NODE	94:18	94:18	16	*
NAME	94:19	94:19	14	buffer
LEAF_NODE	94:19	94:19	15	buffer
LEAF_NODE	94:25	94:25	13	;
EXPR_STATEMENT	95:4	95:59	12	buffer = gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( entry ) ) ;
EXPR	95:4	95:4	13	buffer = gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( entry ) )
ASSIGN	95:4	95:13	14	buffer = gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( entry ) )
LVAL	95:4	95:4	15	buffer
FIELD	95:4	95:4	16	buffer
LEAF_NODE	95:4	95:4	17	buffer
ASSIGN_OP	95:11	95:11	15	=
LEAF_NODE	95:11	95:11	16	=
RVAL	95:13	95:13	15	gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( entry ) )
FUNCTION_CALL	95:13	95:58	16	gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( entry ) )
CALLEE	95:13	95:13	17	gtk_text_view_get_buffer
LEAF_NODE	95:13	95:13	18	gtk_text_view_get_buffer
LEAF_NODE	95:37	95:37	17	(
ARGUMENT	95:38	95:38	17	GTK_TEXT_VIEW ( entry )
FUNCTION_CALL	95:38	95:57	18	GTK_TEXT_VIEW ( entry )
CALLEE	95:38	95:38	19	GTK_TEXT_VIEW
LEAF_NODE	95:38	95:38	20	GTK_TEXT_VIEW
LEAF_NODE	95:51	95:51	19	(
ARGUMENT	95:52	95:52	19	entry
FIELD	95:52	95:52	20	entry
LEAF_NODE	95:52	95:52	21	entry
LEAF_NODE	95:57	95:57	19	)
LEAF_NODE	95:58	95:58	17	)
LEAF_NODE	95:59	95:59	13	;
EXPR_STATEMENT	96:4	96:55	12	gtk_text_buffer_set_text ( buffer , default_value , - 1 ) ;
EXPR	96:4	96:4	13	gtk_text_buffer_set_text ( buffer , default_value , - 1 )
FUNCTION_CALL	96:4	96:54	14	gtk_text_buffer_set_text ( buffer , default_value , - 1 )
CALLEE	96:4	96:4	15	gtk_text_buffer_set_text
LEAF_NODE	96:4	96:4	16	gtk_text_buffer_set_text
LEAF_NODE	96:28	96:28	15	(
ARGUMENT	96:29	96:29	15	buffer
FIELD	96:29	96:29	16	buffer
LEAF_NODE	96:29	96:29	17	buffer
LEAF_NODE	96:35	96:35	15	,
ARGUMENT	96:37	96:37	15	default_value
FIELD	96:37	96:37	16	default_value
LEAF_NODE	96:37	96:37	17	default_value
LEAF_NODE	96:50	96:50	15	,
ARGUMENT	96:52	96:52	15	- 1
UNARY_EXPR	96:52	96:53	16	- 1
UNARY_OPERATOR	96:52	96:52	17	-
LEAF_NODE	96:52	96:52	18	-
FIELD	96:53	96:53	17	1
LEAF_NODE	96:53	96:53	18	1
LEAF_NODE	96:54	96:54	15	)
LEAF_NODE	96:55	96:55	13	;
LEAF_NODE	97:3	97:3	11	}
EXPR_STATEMENT	98:3	98:72	9	gtk_text_view_set_wrap_mode ( GTK_TEXT_VIEW ( entry ) , GTK_WRAP_WORD_CHAR ) ;
EXPR	98:3	98:3	10	gtk_text_view_set_wrap_mode ( GTK_TEXT_VIEW ( entry ) , GTK_WRAP_WORD_CHAR )
FUNCTION_CALL	98:3	98:71	11	gtk_text_view_set_wrap_mode ( GTK_TEXT_VIEW ( entry ) , GTK_WRAP_WORD_CHAR )
CALLEE	98:3	98:3	12	gtk_text_view_set_wrap_mode
LEAF_NODE	98:3	98:3	13	gtk_text_view_set_wrap_mode
LEAF_NODE	98:30	98:30	12	(
ARGUMENT	98:31	98:31	12	GTK_TEXT_VIEW ( entry )
FUNCTION_CALL	98:31	98:50	13	GTK_TEXT_VIEW ( entry )
CALLEE	98:31	98:31	14	GTK_TEXT_VIEW
LEAF_NODE	98:31	98:31	15	GTK_TEXT_VIEW
LEAF_NODE	98:44	98:44	14	(
ARGUMENT	98:45	98:45	14	entry
FIELD	98:45	98:45	15	entry
LEAF_NODE	98:45	98:45	16	entry
LEAF_NODE	98:50	98:50	14	)
LEAF_NODE	98:51	98:51	12	,
ARGUMENT	98:53	98:53	12	GTK_WRAP_WORD_CHAR
FIELD	98:53	98:53	13	GTK_WRAP_WORD_CHAR
LEAF_NODE	98:53	98:53	14	GTK_WRAP_WORD_CHAR
LEAF_NODE	98:71	98:71	12	)
LEAF_NODE	98:72	98:72	10	;
LEAF_NODE	99:3	99:3	9	if
LEAF_NODE	99:6	99:6	9	(
LEAF_NODE	99:7	99:7	9	purple_prefs_get_bool
LEAF_NODE	99:28	99:28	9	(
LEAF_NODE	99:29	99:29	9	PIDGIN_PREFS_ROOT
LEAF_NODE	99:47	99:47	9	"/conversations/spellcheck"
LEAF_NODE	99:74	99:74	9	)
LEAF_NODE	99:75	99:75	9	)
EXPR_STATEMENT	100:4	100:47	9	pidgin_setup_gtkspell ( GTK_TEXT_VIEW ( entry ) ) ;
EXPR	100:4	100:4	10	pidgin_setup_gtkspell ( GTK_TEXT_VIEW ( entry ) )
FUNCTION_CALL	100:4	100:46	11	pidgin_setup_gtkspell ( GTK_TEXT_VIEW ( entry ) )
CALLEE	100:4	100:4	12	pidgin_setup_gtkspell
LEAF_NODE	100:4	100:4	13	pidgin_setup_gtkspell
LEAF_NODE	100:25	100:25	12	(
ARGUMENT	100:26	100:26	12	GTK_TEXT_VIEW ( entry )
FUNCTION_CALL	100:26	100:45	13	GTK_TEXT_VIEW ( entry )
CALLEE	100:26	100:26	14	GTK_TEXT_VIEW
LEAF_NODE	100:26	100:26	15	GTK_TEXT_VIEW
LEAF_NODE	100:39	100:39	14	(
ARGUMENT	100:40	100:40	14	entry
FIELD	100:40	100:40	15	entry
LEAF_NODE	100:40	100:40	16	entry
LEAF_NODE	100:45	100:45	14	)
LEAF_NODE	100:46	100:46	12	)
LEAF_NODE	100:47	100:47	10	;
EXPR_STATEMENT	101:3	103:18	9	gtk_box_pack_start ( GTK_BOX ( vbox ) , pidgin_make_scrollable ( entry , GTK_POLICY_NEVER , GTK_POLICY_ALWAYS , GTK_SHADOW_IN , 320 , 130 ) , TRUE , TRUE , 0 ) ;
EXPR	101:3	101:3	10	gtk_box_pack_start ( GTK_BOX ( vbox ) , pidgin_make_scrollable ( entry , GTK_POLICY_NEVER , GTK_POLICY_ALWAYS , GTK_SHADOW_IN , 320 , 130 ) , TRUE , TRUE , 0 )
FUNCTION_CALL	101:3	103:17	11	gtk_box_pack_start ( GTK_BOX ( vbox ) , pidgin_make_scrollable ( entry , GTK_POLICY_NEVER , GTK_POLICY_ALWAYS , GTK_SHADOW_IN , 320 , 130 ) , TRUE , TRUE , 0 )
CALLEE	101:3	101:3	12	gtk_box_pack_start
LEAF_NODE	101:3	101:3	13	gtk_box_pack_start
LEAF_NODE	101:21	101:21	12	(
ARGUMENT	101:22	101:22	12	GTK_BOX ( vbox )
FUNCTION_CALL	101:22	101:34	13	GTK_BOX ( vbox )
CALLEE	101:22	101:22	14	GTK_BOX
LEAF_NODE	101:22	101:22	15	GTK_BOX
LEAF_NODE	101:29	101:29	14	(
ARGUMENT	101:30	101:30	14	vbox
FIELD	101:30	101:30	15	vbox
LEAF_NODE	101:30	101:30	16	vbox
LEAF_NODE	101:34	101:34	14	)
LEAF_NODE	101:35	101:35	12	,
ARGUMENT	102:4	102:4	12	pidgin_make_scrollable ( entry , GTK_POLICY_NEVER , GTK_POLICY_ALWAYS , GTK_SHADOW_IN , 320 , 130 )
FUNCTION_CALL	102:4	102:94	13	pidgin_make_scrollable ( entry , GTK_POLICY_NEVER , GTK_POLICY_ALWAYS , GTK_SHADOW_IN , 320 , 130 )
CALLEE	102:4	102:4	14	pidgin_make_scrollable
LEAF_NODE	102:4	102:4	15	pidgin_make_scrollable
LEAF_NODE	102:26	102:26	14	(
ARGUMENT	102:27	102:27	14	entry
FIELD	102:27	102:27	15	entry
LEAF_NODE	102:27	102:27	16	entry
LEAF_NODE	102:32	102:32	14	,
ARGUMENT	102:34	102:34	14	GTK_POLICY_NEVER
FIELD	102:34	102:34	15	GTK_POLICY_NEVER
LEAF_NODE	102:34	102:34	16	GTK_POLICY_NEVER
LEAF_NODE	102:50	102:50	14	,
ARGUMENT	102:52	102:52	14	GTK_POLICY_ALWAYS
FIELD	102:52	102:52	15	GTK_POLICY_ALWAYS
LEAF_NODE	102:52	102:52	16	GTK_POLICY_ALWAYS
LEAF_NODE	102:69	102:69	14	,
ARGUMENT	102:71	102:71	14	GTK_SHADOW_IN
FIELD	102:71	102:71	15	GTK_SHADOW_IN
LEAF_NODE	102:71	102:71	16	GTK_SHADOW_IN
LEAF_NODE	102:84	102:84	14	,
ARGUMENT	102:86	102:86	14	320
FIELD	102:86	102:86	15	320
LEAF_NODE	102:86	102:86	16	320
LEAF_NODE	102:89	102:89	14	,
ARGUMENT	102:91	102:91	14	130
FIELD	102:91	102:91	15	130
LEAF_NODE	102:91	102:91	16	130
LEAF_NODE	102:94	102:94	14	)
LEAF_NODE	102:95	102:95	12	,
ARGUMENT	103:4	103:4	12	TRUE
FIELD	103:4	103:4	13	TRUE
LEAF_NODE	103:4	103:4	14	TRUE
LEAF_NODE	103:8	103:8	12	,
ARGUMENT	103:10	103:10	12	TRUE
FIELD	103:10	103:10	13	TRUE
LEAF_NODE	103:10	103:10	14	TRUE
LEAF_NODE	103:14	103:14	12	,
ARGUMENT	103:16	103:16	12	0
FIELD	103:16	103:16	13	0
LEAF_NODE	103:16	103:16	14	0
LEAF_NODE	103:17	103:17	12	)
LEAF_NODE	103:18	103:18	10	;
LEAF_NODE	104:2	104:2	8	}
SELECTION	105:2	105:7	6	
KEYWORD	105:2	105:2	7	else
LEAF_NODE	105:2	105:2	8	else
STATEMENTS	105:7	119:2	7	
LEAF_NODE	105:7	105:7	8	{
STATEMENTS	106:3	111:3	8	
EXPR_STATEMENT	106:3	106:26	9	entry = gtk_entry_new ( ) ;
EXPR	106:3	106:3	10	entry = gtk_entry_new ( )
ASSIGN	106:3	106:11	11	entry = gtk_entry_new ( )
LVAL	106:3	106:3	12	entry
FIELD	106:3	106:3	13	entry
LEAF_NODE	106:3	106:3	14	entry
ASSIGN_OP	106:9	106:9	12	=
LEAF_NODE	106:9	106:9	13	=
RVAL	106:11	106:11	12	gtk_entry_new ( )
FUNCTION_CALL	106:11	106:25	13	gtk_entry_new ( )
CALLEE	106:11	106:11	14	gtk_entry_new
LEAF_NODE	106:11	106:11	15	gtk_entry_new
LEAF_NODE	106:24	106:24	14	(
LEAF_NODE	106:25	106:25	14	)
LEAF_NODE	106:26	106:26	10	;
EXPR_STATEMENT	107:3	107:58	9	gtk_entry_set_activates_default ( GTK_ENTRY ( entry ) , TRUE ) ;
EXPR	107:3	107:3	10	gtk_entry_set_activates_default ( GTK_ENTRY ( entry ) , TRUE )
FUNCTION_CALL	107:3	107:57	11	gtk_entry_set_activates_default ( GTK_ENTRY ( entry ) , TRUE )
CALLEE	107:3	107:3	12	gtk_entry_set_activates_default
LEAF_NODE	107:3	107:3	13	gtk_entry_set_activates_default
LEAF_NODE	107:34	107:34	12	(
ARGUMENT	107:35	107:35	12	GTK_ENTRY ( entry )
FUNCTION_CALL	107:35	107:50	13	GTK_ENTRY ( entry )
CALLEE	107:35	107:35	14	GTK_ENTRY
LEAF_NODE	107:35	107:35	15	GTK_ENTRY
LEAF_NODE	107:44	107:44	14	(
ARGUMENT	107:45	107:45	14	entry
FIELD	107:45	107:45	15	entry
LEAF_NODE	107:45	107:45	16	entry
LEAF_NODE	107:50	107:50	14	)
LEAF_NODE	107:51	107:51	12	,
ARGUMENT	107:53	107:53	12	TRUE
FIELD	107:53	107:53	13	TRUE
LEAF_NODE	107:53	107:53	14	TRUE
LEAF_NODE	107:57	107:57	12	)
LEAF_NODE	107:58	107:58	10	;
EXPR_STATEMENT	108:3	108:60	9	gtk_box_pack_start ( GTK_BOX ( vbox ) , entry , FALSE , FALSE , 0 ) ;
EXPR	108:3	108:3	10	gtk_box_pack_start ( GTK_BOX ( vbox ) , entry , FALSE , FALSE , 0 )
FUNCTION_CALL	108:3	108:59	11	gtk_box_pack_start ( GTK_BOX ( vbox ) , entry , FALSE , FALSE , 0 )
CALLEE	108:3	108:3	12	gtk_box_pack_start
LEAF_NODE	108:3	108:3	13	gtk_box_pack_start
LEAF_NODE	108:21	108:21	12	(
ARGUMENT	108:22	108:22	12	GTK_BOX ( vbox )
FUNCTION_CALL	108:22	108:34	13	GTK_BOX ( vbox )
CALLEE	108:22	108:22	14	GTK_BOX
LEAF_NODE	108:22	108:22	15	GTK_BOX
LEAF_NODE	108:29	108:29	14	(
ARGUMENT	108:30	108:30	14	vbox
FIELD	108:30	108:30	15	vbox
LEAF_NODE	108:30	108:30	16	vbox
LEAF_NODE	108:34	108:34	14	)
LEAF_NODE	108:35	108:35	12	,
ARGUMENT	108:37	108:37	12	entry
FIELD	108:37	108:37	13	entry
LEAF_NODE	108:37	108:37	14	entry
LEAF_NODE	108:42	108:42	12	,
ARGUMENT	108:44	108:44	12	FALSE
FIELD	108:44	108:44	13	FALSE
LEAF_NODE	108:44	108:44	14	FALSE
LEAF_NODE	108:49	108:49	12	,
ARGUMENT	108:51	108:51	12	FALSE
FIELD	108:51	108:51	13	FALSE
LEAF_NODE	108:51	108:51	14	FALSE
LEAF_NODE	108:56	108:56	12	,
ARGUMENT	108:58	108:58	12	0
FIELD	108:58	108:58	13	0
LEAF_NODE	108:58	108:58	14	0
LEAF_NODE	108:59	108:59	12	)
LEAF_NODE	108:60	108:60	10	;
SELECTION	109:3	110:4	9	
KEYWORD	109:3	109:3	10	if
LEAF_NODE	109:3	109:3	11	if
LEAF_NODE	109:6	109:6	10	(
CONDITION	109:7	109:7	10	default_value != NULL
EXPR	109:7	109:24	11	default_value != NULL
FIELD	109:7	109:7	12	default_value
LEAF_NODE	109:7	109:7	13	default_value
EQ_OPERATOR	109:21	109:21	12	!=
LEAF_NODE	109:21	109:21	13	!=
FIELD	109:24	109:24	12	NULL
LEAF_NODE	109:24	109:24	13	NULL
LEAF_NODE	109:28	109:28	10	)
STATEMENTS	110:4	110:4	10	
EXPR_STATEMENT	110:4	110:55	11	gtk_entry_set_text ( GTK_ENTRY ( entry ) , default_value ) ;
EXPR	110:4	110:4	12	gtk_entry_set_text ( GTK_ENTRY ( entry ) , default_value )
FUNCTION_CALL	110:4	110:54	13	gtk_entry_set_text ( GTK_ENTRY ( entry ) , default_value )
CALLEE	110:4	110:4	14	gtk_entry_set_text
LEAF_NODE	110:4	110:4	15	gtk_entry_set_text
LEAF_NODE	110:22	110:22	14	(
ARGUMENT	110:23	110:23	14	GTK_ENTRY ( entry )
FUNCTION_CALL	110:23	110:38	15	GTK_ENTRY ( entry )
CALLEE	110:23	110:23	16	GTK_ENTRY
LEAF_NODE	110:23	110:23	17	GTK_ENTRY
LEAF_NODE	110:32	110:32	16	(
ARGUMENT	110:33	110:33	16	entry
FIELD	110:33	110:33	17	entry
LEAF_NODE	110:33	110:33	18	entry
LEAF_NODE	110:38	110:38	16	)
LEAF_NODE	110:39	110:39	14	,
ARGUMENT	110:41	110:41	14	default_value
FIELD	110:41	110:41	15	default_value
LEAF_NODE	110:41	110:41	16	default_value
LEAF_NODE	110:54	110:54	14	)
LEAF_NODE	110:55	110:55	12	;
SELECTION	111:3	112:3	9	
KEYWORD	111:3	111:3	10	if
LEAF_NODE	111:3	111:3	11	if
LEAF_NODE	111:6	111:6	10	(
CONDITION	111:7	111:7	10	masked
EXPR	111:7	111:7	11	masked
FIELD	111:7	111:7	12	masked
LEAF_NODE	111:7	111:7	13	masked
LEAF_NODE	111:13	111:13	10	)
STATEMENTS	112:3	118:3	10	
LEAF_NODE	112:3	112:3	11	{
STATEMENTS	113:4	115:4	11	
EXPR_STATEMENT	113:4	113:53	12	gtk_entry_set_visibility ( GTK_ENTRY ( entry ) , FALSE ) ;
EXPR	113:4	113:4	13	gtk_entry_set_visibility ( GTK_ENTRY ( entry ) , FALSE )
FUNCTION_CALL	113:4	113:52	14	gtk_entry_set_visibility ( GTK_ENTRY ( entry ) , FALSE )
CALLEE	113:4	113:4	15	gtk_entry_set_visibility
LEAF_NODE	113:4	113:4	16	gtk_entry_set_visibility
LEAF_NODE	113:28	113:28	15	(
ARGUMENT	113:29	113:29	15	GTK_ENTRY ( entry )
FUNCTION_CALL	113:29	113:44	16	GTK_ENTRY ( entry )
CALLEE	113:29	113:29	17	GTK_ENTRY
LEAF_NODE	113:29	113:29	18	GTK_ENTRY
LEAF_NODE	113:38	113:38	17	(
ARGUMENT	113:39	113:39	17	entry
FIELD	113:39	113:39	18	entry
LEAF_NODE	113:39	113:39	19	entry
LEAF_NODE	113:44	113:44	17	)
LEAF_NODE	113:45	113:45	15	,
ARGUMENT	113:47	113:47	15	FALSE
FIELD	113:47	113:47	16	FALSE
LEAF_NODE	113:47	113:47	17	FALSE
LEAF_NODE	113:52	113:52	15	)
LEAF_NODE	113:53	113:53	13	;
SELECTION	115:4	116:5	12	
KEYWORD	115:4	115:4	13	if
LEAF_NODE	115:4	115:4	14	if
LEAF_NODE	115:7	115:7	13	(
CONDITION	115:8	115:8	13	gtk_entry_get_invisible_char ( GTK_ENTRY ( entry ) ) == '*'
EXPR	115:8	115:58	14	gtk_entry_get_invisible_char ( GTK_ENTRY ( entry ) ) == '*'
FUNCTION_CALL	115:8	115:53	15	gtk_entry_get_invisible_char ( GTK_ENTRY ( entry ) )
CALLEE	115:8	115:8	16	gtk_entry_get_invisible_char
LEAF_NODE	115:8	115:8	17	gtk_entry_get_invisible_char
LEAF_NODE	115:36	115:36	16	(
ARGUMENT	115:37	115:37	16	GTK_ENTRY ( entry )
FUNCTION_CALL	115:37	115:52	17	GTK_ENTRY ( entry )
CALLEE	115:37	115:37	18	GTK_ENTRY
LEAF_NODE	115:37	115:37	19	GTK_ENTRY
LEAF_NODE	115:46	115:46	18	(
ARGUMENT	115:47	115:47	18	entry
FIELD	115:47	115:47	19	entry
LEAF_NODE	115:47	115:47	20	entry
LEAF_NODE	115:52	115:52	18	)
LEAF_NODE	115:53	115:53	16	)
EQ_OPERATOR	115:55	115:55	15	==
LEAF_NODE	115:55	115:55	16	==
FIELD	115:58	115:58	15	'*'
LEAF_NODE	115:58	115:58	16	'*'
LEAF_NODE	115:61	115:61	13	)
STATEMENTS	116:5	116:5	13	
EXPR_STATEMENT	116:5	116:74	14	gtk_entry_set_invisible_char ( GTK_ENTRY ( entry ) , PIDGIN_INVISIBLE_CHAR ) ;
EXPR	116:5	116:5	15	gtk_entry_set_invisible_char ( GTK_ENTRY ( entry ) , PIDGIN_INVISIBLE_CHAR )
FUNCTION_CALL	116:5	116:73	16	gtk_entry_set_invisible_char ( GTK_ENTRY ( entry ) , PIDGIN_INVISIBLE_CHAR )
CALLEE	116:5	116:5	17	gtk_entry_set_invisible_char
LEAF_NODE	116:5	116:5	18	gtk_entry_set_invisible_char
LEAF_NODE	116:33	116:33	17	(
ARGUMENT	116:34	116:34	17	GTK_ENTRY ( entry )
FUNCTION_CALL	116:34	116:49	18	GTK_ENTRY ( entry )
CALLEE	116:34	116:34	19	GTK_ENTRY
LEAF_NODE	116:34	116:34	20	GTK_ENTRY
LEAF_NODE	116:43	116:43	19	(
ARGUMENT	116:44	116:44	19	entry
FIELD	116:44	116:44	20	entry
LEAF_NODE	116:44	116:44	21	entry
LEAF_NODE	116:49	116:49	19	)
LEAF_NODE	116:50	116:50	17	,
ARGUMENT	116:52	116:52	17	PIDGIN_INVISIBLE_CHAR
FIELD	116:52	116:52	18	PIDGIN_INVISIBLE_CHAR
LEAF_NODE	116:52	116:52	19	PIDGIN_INVISIBLE_CHAR
LEAF_NODE	116:73	116:73	17	)
LEAF_NODE	116:74	116:74	15	;
LEAF_NODE	118:3	118:3	11	}
LEAF_NODE	119:2	119:2	8	}
EXPR_STATEMENT	120:2	120:27	6	gtk_widget_show_all ( vbox ) ;
EXPR	120:2	120:2	7	gtk_widget_show_all ( vbox )
FUNCTION_CALL	120:2	120:26	8	gtk_widget_show_all ( vbox )
CALLEE	120:2	120:2	9	gtk_widget_show_all
LEAF_NODE	120:2	120:2	10	gtk_widget_show_all
LEAF_NODE	120:21	120:21	9	(
ARGUMENT	120:22	120:22	9	vbox
FIELD	120:22	120:22	10	vbox
LEAF_NODE	120:22	120:22	11	vbox
LEAF_NODE	120:26	120:26	9	)
LEAF_NODE	120:27	120:27	7	;
LEAF_NODE	121:1	121:1	5	}
EXPR_STATEMENT	122:1	122:43	3	pidgin_set_accessible_label ( entry , label ) ;
EXPR	122:1	122:1	4	pidgin_set_accessible_label ( entry , label )
FUNCTION_CALL	122:1	122:42	5	pidgin_set_accessible_label ( entry , label )
CALLEE	122:1	122:1	6	pidgin_set_accessible_label
LEAF_NODE	122:1	122:1	7	pidgin_set_accessible_label
LEAF_NODE	122:29	122:29	6	(
ARGUMENT	122:30	122:30	6	entry
FIELD	122:30	122:30	7	entry
LEAF_NODE	122:30	122:30	8	entry
LEAF_NODE	122:35	122:35	6	,
ARGUMENT	122:37	122:37	6	label
FIELD	122:37	122:37	7	label
LEAF_NODE	122:37	122:37	8	label
LEAF_NODE	122:42	122:42	6	)
LEAF_NODE	122:43	122:43	4	;
EXPR_STATEMENT	123:1	123:28	3	data -> u . input . entry = entry ;
EXPR	123:1	123:1	4	data -> u . input . entry = entry
ASSIGN	123:1	123:23	5	data -> u . input . entry = entry
LVAL	123:1	123:1	6	data -> u . input . entry
FIELD	123:1	123:15	7	data -> u . input . entry
LEAF_NODE	123:1	123:1	8	data
LEAF_NODE	123:5	123:5	8	->
LEAF_NODE	123:7	123:7	8	u
LEAF_NODE	123:8	123:8	8	.
LEAF_NODE	123:9	123:9	8	input
LEAF_NODE	123:14	123:14	8	.
LEAF_NODE	123:15	123:15	8	entry
ASSIGN_OP	123:21	123:21	6	=
LEAF_NODE	123:21	123:21	7	=
RVAL	123:23	123:23	6	entry
FIELD	123:23	123:23	7	entry
LEAF_NODE	123:23	123:23	8	entry
LEAF_NODE	123:28	123:28	4	;
EXPR_STATEMENT	124:1	124:34	3	pidgin_auto_parent_window ( dialog ) ;
EXPR	124:1	124:1	4	pidgin_auto_parent_window ( dialog )
FUNCTION_CALL	124:1	124:33	5	pidgin_auto_parent_window ( dialog )
CALLEE	124:1	124:1	6	pidgin_auto_parent_window
LEAF_NODE	124:1	124:1	7	pidgin_auto_parent_window
LEAF_NODE	124:26	124:26	6	(
ARGUMENT	124:27	124:27	6	dialog
FIELD	124:27	124:27	7	dialog
LEAF_NODE	124:27	124:27	8	dialog
LEAF_NODE	124:33	124:33	6	)
LEAF_NODE	124:34	124:34	4	;
EXPR_STATEMENT	126:1	126:24	3	gtk_widget_show ( dialog ) ;
EXPR	126:1	126:1	4	gtk_widget_show ( dialog )
FUNCTION_CALL	126:1	126:23	5	gtk_widget_show ( dialog )
CALLEE	126:1	126:1	6	gtk_widget_show
LEAF_NODE	126:1	126:1	7	gtk_widget_show
LEAF_NODE	126:16	126:16	6	(
ARGUMENT	126:17	126:17	6	dialog
FIELD	126:17	126:17	7	dialog
LEAF_NODE	126:17	126:17	8	dialog
LEAF_NODE	126:23	126:23	6	)
LEAF_NODE	126:24	126:24	4	;
JUMP_STATEMENT	127:1	127:12	3	return data ;
KEYWORD	127:1	127:1	4	return
LEAF_NODE	127:1	127:1	5	return
DESTINATION	127:8	127:8	4	data
EXPR	127:8	127:8	5	data
FIELD	127:8	127:8	6	data
LEAF_NODE	127:8	127:8	7	data
LEAF_NODE	127:12	127:12	4	;
LEAF_NODE	128:0	128:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:0	2	int
TYPE_NAME	1:0	1:0	3	int
LEAF_NODE	1:0	1:0	4	int
FUNCTION_NAME	2:0	2:0	2	aim_ssi_add_to_private_list
LEAF_NODE	2:0	2:0	3	aim_ssi_add_to_private_list
PARAMETER_LIST	2:27	2:78	2	( OscarData * od , const char * name , guint16 list_type )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:39	3	OscarData * od
TYPE	2:28	2:38	4	OscarData *
TYPE_NAME	2:28	2:28	5	OscarData
LEAF_NODE	2:28	2:28	6	OscarData
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	od
LEAF_NODE	2:39	2:39	5	od
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:55	3	const char * name
TYPE	2:43	2:53	4	const char *
TYPE_NAME	2:43	2:49	5	const char
LEAF_NODE	2:43	2:43	6	const
LEAF_NODE	2:49	2:49	6	char
POINTER	2:53	2:53	5	*
LEAF_NODE	2:53	2:53	6	*
NAME	2:55	2:55	4	name
LEAF_NODE	2:55	2:55	5	name
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	2:61	2:69	3	guint16 list_type
TYPE	2:61	2:61	4	guint16
TYPE_NAME	2:61	2:61	5	guint16
LEAF_NODE	2:61	2:61	6	guint16
NAME	2:69	2:69	4	list_type
LEAF_NODE	2:69	2:69	5	list_type
LEAF_NODE	2:78	2:78	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	! od || ! name || ! od -> ssi . received_data
EXPR	4:5	4:5	5	! od || ! name || ! od -> ssi . received_data
OR	4:5	4:12	6	! od || ! name || ! od -> ssi . received_data
EXPR	4:5	4:5	7	! od
UNARY_EXPR	4:5	4:6	8	! od
UNARY_OPERATOR	4:5	4:5	9	!
LEAF_NODE	4:5	4:5	10	!
FIELD	4:6	4:6	9	od
LEAF_NODE	4:6	4:6	10	od
LEAF_NODE	4:9	4:9	7	||
EXPR	4:12	4:12	7	! name || ! od -> ssi . received_data
OR	4:12	4:21	8	! name || ! od -> ssi . received_data
EXPR	4:12	4:12	9	! name
UNARY_EXPR	4:12	4:13	10	! name
UNARY_OPERATOR	4:12	4:12	11	!
LEAF_NODE	4:12	4:12	12	!
FIELD	4:13	4:13	11	name
LEAF_NODE	4:13	4:13	12	name
LEAF_NODE	4:18	4:18	9	||
EXPR	4:21	4:21	9	! od -> ssi . received_data
UNARY_EXPR	4:21	4:22	10	! od -> ssi . received_data
UNARY_OPERATOR	4:21	4:21	11	!
LEAF_NODE	4:21	4:21	12	!
FIELD	4:22	4:30	11	od -> ssi . received_data
LEAF_NODE	4:22	4:22	12	od
LEAF_NODE	4:24	4:24	12	->
LEAF_NODE	4:26	4:26	12	ssi
LEAF_NODE	4:29	4:29	12	.
LEAF_NODE	4:30	4:30	12	received_data
LEAF_NODE	4:43	4:43	4	)
STATEMENTS	5:2	5:2	4	
JUMP_STATEMENT	5:2	5:16	5	return - EINVAL ;
KEYWORD	5:2	5:2	6	return
LEAF_NODE	5:2	5:2	7	return
DESTINATION	5:9	5:9	6	- EINVAL
EXPR	5:9	5:9	7	- EINVAL
UNARY_EXPR	5:9	5:10	8	- EINVAL
UNARY_OPERATOR	5:9	5:9	9	-
LEAF_NODE	5:9	5:9	10	-
FIELD	5:10	5:10	9	EINVAL
LEAF_NODE	5:10	5:10	10	EINVAL
LEAF_NODE	5:16	5:16	6	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	aim_ssi_itemlist_find ( od -> ssi . local , 0x0000 , 0x0000 ) == NULL
EXPR	6:5	6:61	5	aim_ssi_itemlist_find ( od -> ssi . local , 0x0000 , 0x0000 ) == NULL
FUNCTION_CALL	6:5	6:56	6	aim_ssi_itemlist_find ( od -> ssi . local , 0x0000 , 0x0000 )
CALLEE	6:5	6:5	7	aim_ssi_itemlist_find
LEAF_NODE	6:5	6:5	8	aim_ssi_itemlist_find
LEAF_NODE	6:26	6:26	7	(
ARGUMENT	6:27	6:27	7	od -> ssi . local
FIELD	6:27	6:35	8	od -> ssi . local
LEAF_NODE	6:27	6:27	9	od
LEAF_NODE	6:29	6:29	9	->
LEAF_NODE	6:31	6:31	9	ssi
LEAF_NODE	6:34	6:34	9	.
LEAF_NODE	6:35	6:35	9	local
LEAF_NODE	6:40	6:40	7	,
ARGUMENT	6:42	6:42	7	0x0000
FIELD	6:42	6:42	8	0x0000
LEAF_NODE	6:42	6:42	9	0x0000
LEAF_NODE	6:48	6:48	7	,
ARGUMENT	6:50	6:50	7	0x0000
FIELD	6:50	6:50	8	0x0000
LEAF_NODE	6:50	6:50	9	0x0000
LEAF_NODE	6:56	6:56	7	)
EQ_OPERATOR	6:58	6:58	6	==
LEAF_NODE	6:58	6:58	7	==
FIELD	6:61	6:61	6	NULL
LEAF_NODE	6:61	6:61	7	NULL
LEAF_NODE	6:65	6:65	4	)
STATEMENTS	7:2	7:2	4	
EXPR_STATEMENT	7:2	7:86	5	aim_ssi_itemlist_add ( & od -> ssi . local , NULL , 0x0000 , 0x0000 , AIM_SSI_TYPE_GROUP , NULL ) ;
EXPR	7:2	7:2	6	aim_ssi_itemlist_add ( & od -> ssi . local , NULL , 0x0000 , 0x0000 , AIM_SSI_TYPE_GROUP , NULL )
FUNCTION_CALL	7:2	7:85	7	aim_ssi_itemlist_add ( & od -> ssi . local , NULL , 0x0000 , 0x0000 , AIM_SSI_TYPE_GROUP , NULL )
CALLEE	7:2	7:2	8	aim_ssi_itemlist_add
LEAF_NODE	7:2	7:2	9	aim_ssi_itemlist_add
LEAF_NODE	7:22	7:22	8	(
ARGUMENT	7:23	7:23	8	& od -> ssi . local
UNARY_EXPR	7:23	7:24	9	& od -> ssi . local
UNARY_OPERATOR	7:23	7:23	10	&
LEAF_NODE	7:23	7:23	11	&
FIELD	7:24	7:32	10	od -> ssi . local
LEAF_NODE	7:24	7:24	11	od
LEAF_NODE	7:26	7:26	11	->
LEAF_NODE	7:28	7:28	11	ssi
LEAF_NODE	7:31	7:31	11	.
LEAF_NODE	7:32	7:32	11	local
LEAF_NODE	7:37	7:37	8	,
ARGUMENT	7:39	7:39	8	NULL
FIELD	7:39	7:39	9	NULL
LEAF_NODE	7:39	7:39	10	NULL
LEAF_NODE	7:43	7:43	8	,
ARGUMENT	7:45	7:45	8	0x0000
FIELD	7:45	7:45	9	0x0000
LEAF_NODE	7:45	7:45	10	0x0000
LEAF_NODE	7:51	7:51	8	,
ARGUMENT	7:53	7:53	8	0x0000
FIELD	7:53	7:53	9	0x0000
LEAF_NODE	7:53	7:53	10	0x0000
LEAF_NODE	7:59	7:59	8	,
ARGUMENT	7:61	7:61	8	AIM_SSI_TYPE_GROUP
FIELD	7:61	7:61	9	AIM_SSI_TYPE_GROUP
LEAF_NODE	7:61	7:61	10	AIM_SSI_TYPE_GROUP
LEAF_NODE	7:79	7:79	8	,
ARGUMENT	7:81	7:81	8	NULL
FIELD	7:81	7:81	9	NULL
LEAF_NODE	7:81	7:81	10	NULL
LEAF_NODE	7:85	7:85	8	)
LEAF_NODE	7:86	7:86	6	;
EXPR_STATEMENT	8:1	8:76	3	aim_ssi_itemlist_add ( & od -> ssi . local , name , 0x0000 , 0xFFFF , list_type , NULL ) ;
EXPR	8:1	8:1	4	aim_ssi_itemlist_add ( & od -> ssi . local , name , 0x0000 , 0xFFFF , list_type , NULL )
FUNCTION_CALL	8:1	8:75	5	aim_ssi_itemlist_add ( & od -> ssi . local , name , 0x0000 , 0xFFFF , list_type , NULL )
CALLEE	8:1	8:1	6	aim_ssi_itemlist_add
LEAF_NODE	8:1	8:1	7	aim_ssi_itemlist_add
LEAF_NODE	8:21	8:21	6	(
ARGUMENT	8:22	8:22	6	& od -> ssi . local
UNARY_EXPR	8:22	8:23	7	& od -> ssi . local
UNARY_OPERATOR	8:22	8:22	8	&
LEAF_NODE	8:22	8:22	9	&
FIELD	8:23	8:31	8	od -> ssi . local
LEAF_NODE	8:23	8:23	9	od
LEAF_NODE	8:25	8:25	9	->
LEAF_NODE	8:27	8:27	9	ssi
LEAF_NODE	8:30	8:30	9	.
LEAF_NODE	8:31	8:31	9	local
LEAF_NODE	8:36	8:36	6	,
ARGUMENT	8:38	8:38	6	name
FIELD	8:38	8:38	7	name
LEAF_NODE	8:38	8:38	8	name
LEAF_NODE	8:42	8:42	6	,
ARGUMENT	8:44	8:44	6	0x0000
FIELD	8:44	8:44	7	0x0000
LEAF_NODE	8:44	8:44	8	0x0000
LEAF_NODE	8:50	8:50	6	,
ARGUMENT	8:52	8:52	6	0xFFFF
FIELD	8:52	8:52	7	0xFFFF
LEAF_NODE	8:52	8:52	8	0xFFFF
LEAF_NODE	8:58	8:58	6	,
ARGUMENT	8:60	8:60	6	list_type
FIELD	8:60	8:60	7	list_type
LEAF_NODE	8:60	8:60	8	list_type
LEAF_NODE	8:69	8:69	6	,
ARGUMENT	8:71	8:71	6	NULL
FIELD	8:71	8:71	7	NULL
LEAF_NODE	8:71	8:71	8	NULL
LEAF_NODE	8:75	8:75	6	)
LEAF_NODE	8:76	8:76	4	;
JUMP_STATEMENT	9:1	9:24	3	return aim_ssi_sync ( od ) ;
KEYWORD	9:1	9:1	4	return
LEAF_NODE	9:1	9:1	5	return
DESTINATION	9:8	9:8	4	aim_ssi_sync ( od )
EXPR	9:8	9:8	5	aim_ssi_sync ( od )
FUNCTION_CALL	9:8	9:23	6	aim_ssi_sync ( od )
CALLEE	9:8	9:8	7	aim_ssi_sync
LEAF_NODE	9:8	9:8	8	aim_ssi_sync
LEAF_NODE	9:20	9:20	7	(
ARGUMENT	9:21	9:21	7	od
FIELD	9:21	9:21	8	od
LEAF_NODE	9:21	9:21	9	od
LEAF_NODE	9:23	9:23	7	)
LEAF_NODE	9:24	9:24	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	19:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	disco_ui_callback_helper_handle
LEAF_NODE	2:0	2:0	3	disco_ui_callback_helper_handle
PARAMETER_LIST	2:31	2:44	2	( void * handle )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:38	3	void * handle
TYPE	2:32	2:37	4	void *
TYPE_NAME	2:32	2:32	5	void
LEAF_NODE	2:32	2:32	6	void
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	handle
LEAF_NODE	2:38	2:38	5	handle
LEAF_NODE	2:44	2:44	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:12	3	GSList * cbs ;
VAR_DECL	4:1	4:9	4	GSList * cbs
TYPE	4:1	4:8	5	GSList *
TYPE_NAME	4:1	4:1	6	GSList
LEAF_NODE	4:1	4:1	7	GSList
POINTER	4:8	4:8	6	*
LEAF_NODE	4:8	4:8	7	*
NAME	4:9	4:9	5	cbs
LEAF_NODE	4:9	4:9	6	cbs
LEAF_NODE	4:12	4:12	4	;
SIMPLE_DECL	5:1	5:51	3	PurplePrefsUiOps * uiop ; uiop = purple_prefs_get_ui_ops ( ) ;
VAR_DECL	5:1	5:19	4	PurplePrefsUiOps * uiop ; uiop = purple_prefs_get_ui_ops ( )
TYPE	5:1	5:18	5	PurplePrefsUiOps *
TYPE_NAME	5:1	5:1	6	PurplePrefsUiOps
LEAF_NODE	5:1	5:1	7	PurplePrefsUiOps
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	uiop
LEAF_NODE	5:19	5:19	6	uiop
LEAF_NODE	0:0	0:0	5	;
INIT	5:19	5:19	5	uiop = purple_prefs_get_ui_ops ( )
ASSIGN	5:19	5:26	6	uiop = purple_prefs_get_ui_ops ( )
LVAL	5:19	5:19	7	uiop
NAME	5:19	5:19	8	uiop
LEAF_NODE	5:19	5:19	9	uiop
ASSIGN_OP	5:24	5:24	7	=
LEAF_NODE	5:24	5:24	8	=
RVAL	5:26	5:26	7	purple_prefs_get_ui_ops ( )
FUNCTION_CALL	5:26	5:50	8	purple_prefs_get_ui_ops ( )
CALLEE	5:26	5:26	9	purple_prefs_get_ui_ops
LEAF_NODE	5:26	5:26	10	purple_prefs_get_ui_ops
LEAF_NODE	5:49	5:49	9	(
LEAF_NODE	5:50	5:50	9	)
LEAF_NODE	5:51	5:51	4	;
EXPR_STATEMENT	6:1	6:19	3	cbs = ui_callbacks ;
EXPR	6:1	6:1	4	cbs = ui_callbacks
ASSIGN	6:1	6:7	5	cbs = ui_callbacks
LVAL	6:1	6:1	6	cbs
FIELD	6:1	6:1	7	cbs
LEAF_NODE	6:1	6:1	8	cbs
ASSIGN_OP	6:5	6:5	6	=
LEAF_NODE	6:5	6:5	7	=
RVAL	6:7	6:7	6	ui_callbacks
FIELD	6:7	6:7	7	ui_callbacks
LEAF_NODE	6:7	6:7	8	ui_callbacks
LEAF_NODE	6:19	6:19	4	;
ITERATION	7:1	7:48	3	
KEYWORD	7:1	7:1	4	for
LEAF_NODE	7:1	7:1	5	for
LEAF_NODE	7:5	7:5	4	(
FOR_INIT	7:6	7:24	4	cbs = ui_callbacks ;
EXPR	7:6	7:6	5	cbs = ui_callbacks
ASSIGN	7:6	7:12	6	cbs = ui_callbacks
LVAL	7:6	7:6	7	cbs
FIELD	7:6	7:6	8	cbs
LEAF_NODE	7:6	7:6	9	cbs
ASSIGN_OP	7:10	7:10	7	=
LEAF_NODE	7:10	7:10	8	=
RVAL	7:12	7:12	7	ui_callbacks
FIELD	7:12	7:12	8	ui_callbacks
LEAF_NODE	7:12	7:12	9	ui_callbacks
LEAF_NODE	7:24	7:24	5	;
CONDITION	7:26	7:26	4	cbs
EXPR	7:26	7:26	5	cbs
FIELD	7:26	7:26	6	cbs
LEAF_NODE	7:26	7:26	7	cbs
LEAF_NODE	7:29	7:29	4	;
FOR_EXPR	7:31	7:31	4	cbs = cbs -> next
EXPR	7:31	7:31	5	cbs = cbs -> next
ASSIGN	7:31	7:37	6	cbs = cbs -> next
LVAL	7:31	7:31	7	cbs
FIELD	7:31	7:31	8	cbs
LEAF_NODE	7:31	7:31	9	cbs
ASSIGN_OP	7:35	7:35	7	=
LEAF_NODE	7:35	7:35	8	=
RVAL	7:37	7:37	7	cbs -> next
FIELD	7:37	7:42	8	cbs -> next
LEAF_NODE	7:37	7:37	9	cbs
LEAF_NODE	7:40	7:40	9	->
LEAF_NODE	7:42	7:42	9	next
LEAF_NODE	7:46	7:46	4	)
STATEMENTS	7:48	18:1	4	
LEAF_NODE	7:48	7:48	5	{
STATEMENTS	8:2	17:2	5	
SIMPLE_DECL	8:2	8:40	6	PurplePrefCallbackData * cb ; cb = cbs -> data ;
VAR_DECL	8:2	8:26	7	PurplePrefCallbackData * cb ; cb = cbs -> data
TYPE	8:2	8:25	8	PurplePrefCallbackData *
TYPE_NAME	8:2	8:2	9	PurplePrefCallbackData
LEAF_NODE	8:2	8:2	10	PurplePrefCallbackData
POINTER	8:25	8:25	9	*
LEAF_NODE	8:25	8:25	10	*
NAME	8:26	8:26	8	cb
LEAF_NODE	8:26	8:26	9	cb
LEAF_NODE	0:0	0:0	8	;
INIT	8:26	8:26	8	cb = cbs -> data
ASSIGN	8:26	8:31	9	cb = cbs -> data
LVAL	8:26	8:26	10	cb
NAME	8:26	8:26	11	cb
LEAF_NODE	8:26	8:26	12	cb
ASSIGN_OP	8:29	8:29	10	=
LEAF_NODE	8:29	8:29	11	=
RVAL	8:31	8:31	10	cbs -> data
FIELD	8:31	8:36	11	cbs -> data
LEAF_NODE	8:31	8:31	12	cbs
LEAF_NODE	8:34	8:34	12	->
LEAF_NODE	8:36	8:36	12	data
LEAF_NODE	8:40	8:40	7	;
SELECTION	9:2	9:28	6	
KEYWORD	9:2	9:2	7	if
LEAF_NODE	9:2	9:2	8	if
LEAF_NODE	9:5	9:5	7	(
CONDITION	9:6	9:6	7	cb -> handle != handle
EXPR	9:6	9:20	8	cb -> handle != handle
FIELD	9:6	9:10	9	cb -> handle
LEAF_NODE	9:6	9:6	10	cb
LEAF_NODE	9:8	9:8	10	->
LEAF_NODE	9:10	9:10	10	handle
EQ_OPERATOR	9:17	9:17	9	!=
LEAF_NODE	9:17	9:17	10	!=
FIELD	9:20	9:20	9	handle
LEAF_NODE	9:20	9:20	10	handle
LEAF_NODE	9:26	9:26	7	)
STATEMENTS	9:28	12:2	7	
LEAF_NODE	9:28	9:28	8	{
STATEMENTS	10:3	11:3	8	
EXPR_STATEMENT	10:3	10:18	9	cbs = cbs -> next ;
EXPR	10:3	10:3	10	cbs = cbs -> next
ASSIGN	10:3	10:9	11	cbs = cbs -> next
LVAL	10:3	10:3	12	cbs
FIELD	10:3	10:3	13	cbs
LEAF_NODE	10:3	10:3	14	cbs
ASSIGN_OP	10:7	10:7	12	=
LEAF_NODE	10:7	10:7	13	=
RVAL	10:9	10:9	12	cbs -> next
FIELD	10:9	10:14	13	cbs -> next
LEAF_NODE	10:9	10:9	14	cbs
LEAF_NODE	10:12	10:12	14	->
LEAF_NODE	10:14	10:14	14	next
LEAF_NODE	10:18	10:18	10	;
JUMP_STATEMENT	11:3	11:11	9	continue DESTINATION ;
KEYWORD	11:3	11:3	10	continue
LEAF_NODE	11:3	11:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	11:11	11:11	10	;
LEAF_NODE	12:2	12:2	8	}
EXPR_STATEMENT	13:2	13:50	6	uiop -> disconnect_callback ( cb -> name , cb -> ui_data ) ;
EXPR	13:2	13:2	7	uiop -> disconnect_callback ( cb -> name , cb -> ui_data )
FUNCTION_CALL	13:2	13:49	8	uiop -> disconnect_callback ( cb -> name , cb -> ui_data )
CALLEE	13:2	13:8	9	uiop -> disconnect_callback
LEAF_NODE	13:2	13:2	10	uiop
LEAF_NODE	13:6	13:6	10	->
LEAF_NODE	13:8	13:8	10	disconnect_callback
LEAF_NODE	13:27	13:27	9	(
ARGUMENT	13:28	13:28	9	cb -> name
FIELD	13:28	13:32	10	cb -> name
LEAF_NODE	13:28	13:28	11	cb
LEAF_NODE	13:30	13:30	11	->
LEAF_NODE	13:32	13:32	11	name
LEAF_NODE	13:36	13:36	9	,
ARGUMENT	13:38	13:38	9	cb -> ui_data
FIELD	13:38	13:42	10	cb -> ui_data
LEAF_NODE	13:38	13:38	11	cb
LEAF_NODE	13:40	13:40	11	->
LEAF_NODE	13:42	13:42	11	ui_data
LEAF_NODE	13:49	13:49	9	)
LEAF_NODE	13:50	13:50	7	;
EXPR_STATEMENT	14:2	14:55	6	ui_callbacks = g_slist_delete_link ( ui_callbacks , cbs ) ;
EXPR	14:2	14:2	7	ui_callbacks = g_slist_delete_link ( ui_callbacks , cbs )
ASSIGN	14:2	14:17	8	ui_callbacks = g_slist_delete_link ( ui_callbacks , cbs )
LVAL	14:2	14:2	9	ui_callbacks
FIELD	14:2	14:2	10	ui_callbacks
LEAF_NODE	14:2	14:2	11	ui_callbacks
ASSIGN_OP	14:15	14:15	9	=
LEAF_NODE	14:15	14:15	10	=
RVAL	14:17	14:17	9	g_slist_delete_link ( ui_callbacks , cbs )
FUNCTION_CALL	14:17	14:54	10	g_slist_delete_link ( ui_callbacks , cbs )
CALLEE	14:17	14:17	11	g_slist_delete_link
LEAF_NODE	14:17	14:17	12	g_slist_delete_link
LEAF_NODE	14:36	14:36	11	(
ARGUMENT	14:37	14:37	11	ui_callbacks
FIELD	14:37	14:37	12	ui_callbacks
LEAF_NODE	14:37	14:37	13	ui_callbacks
LEAF_NODE	14:49	14:49	11	,
ARGUMENT	14:51	14:51	11	cbs
FIELD	14:51	14:51	12	cbs
LEAF_NODE	14:51	14:51	13	cbs
LEAF_NODE	14:54	14:54	11	)
LEAF_NODE	14:55	14:55	7	;
EXPR_STATEMENT	15:2	15:18	6	g_free ( cb -> name ) ;
EXPR	15:2	15:2	7	g_free ( cb -> name )
FUNCTION_CALL	15:2	15:17	8	g_free ( cb -> name )
CALLEE	15:2	15:2	9	g_free
LEAF_NODE	15:2	15:2	10	g_free
LEAF_NODE	15:8	15:8	9	(
ARGUMENT	15:9	15:9	9	cb -> name
FIELD	15:9	15:13	10	cb -> name
LEAF_NODE	15:9	15:9	11	cb
LEAF_NODE	15:11	15:11	11	->
LEAF_NODE	15:13	15:13	11	name
LEAF_NODE	15:17	15:17	9	)
LEAF_NODE	15:18	15:18	7	;
EXPR_STATEMENT	16:2	16:12	6	g_free ( cb ) ;
EXPR	16:2	16:2	7	g_free ( cb )
FUNCTION_CALL	16:2	16:11	8	g_free ( cb )
CALLEE	16:2	16:2	9	g_free
LEAF_NODE	16:2	16:2	10	g_free
LEAF_NODE	16:8	16:8	9	(
ARGUMENT	16:9	16:9	9	cb
FIELD	16:9	16:9	10	cb
LEAF_NODE	16:9	16:9	11	cb
LEAF_NODE	16:11	16:11	9	)
LEAF_NODE	16:12	16:12	7	;
EXPR_STATEMENT	17:2	17:20	6	cbs = ui_callbacks ;
EXPR	17:2	17:2	7	cbs = ui_callbacks
ASSIGN	17:2	17:8	8	cbs = ui_callbacks
LVAL	17:2	17:2	9	cbs
FIELD	17:2	17:2	10	cbs
LEAF_NODE	17:2	17:2	11	cbs
ASSIGN_OP	17:6	17:6	9	=
LEAF_NODE	17:6	17:6	10	=
RVAL	17:8	17:8	9	ui_callbacks
FIELD	17:8	17:8	10	ui_callbacks
LEAF_NODE	17:8	17:8	11	ui_callbacks
LEAF_NODE	17:20	17:20	7	;
LEAF_NODE	18:1	18:1	5	}
LEAF_NODE	19:0	19:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	19:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	status_editor_find_account_in_treemodel
LEAF_NODE	2:0	2:0	3	status_editor_find_account_in_treemodel
PARAMETER_LIST	2:39	4:32	2	( GtkTreeIter * iter , StatusEditor * status_editor , PurpleAccount * account )
LEAF_NODE	2:39	2:39	3	(
PARAMETER_DECL	2:40	2:53	3	GtkTreeIter * iter
TYPE	2:40	2:52	4	GtkTreeIter *
TYPE_NAME	2:40	2:40	5	GtkTreeIter
LEAF_NODE	2:40	2:40	6	GtkTreeIter
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	iter
LEAF_NODE	2:53	2:53	5	iter
LEAF_NODE	2:57	2:57	3	,
PARAMETER_DECL	3:10	3:24	3	StatusEditor * status_editor
TYPE	3:10	3:23	4	StatusEditor *
TYPE_NAME	3:10	3:10	5	StatusEditor
LEAF_NODE	3:10	3:10	6	StatusEditor
POINTER	3:23	3:23	5	*
LEAF_NODE	3:23	3:23	6	*
NAME	3:24	3:24	4	status_editor
LEAF_NODE	3:24	3:24	5	status_editor
LEAF_NODE	3:37	3:37	3	,
PARAMETER_DECL	4:10	4:25	3	PurpleAccount * account
TYPE	4:10	4:24	4	PurpleAccount *
TYPE_NAME	4:10	4:10	5	PurpleAccount
LEAF_NODE	4:10	4:10	6	PurpleAccount
POINTER	4:24	4:24	5	*
LEAF_NODE	4:24	4:24	6	*
NAME	4:25	4:25	4	account
LEAF_NODE	4:25	4:25	5	account
LEAF_NODE	4:32	4:32	3	)
LEAF_NODE	5:0	5:0	2	{
STATEMENTS	6:1	18:1	2	
SIMPLE_DECL	6:1	6:20	3	GtkTreeModel * model ;
VAR_DECL	6:1	6:15	4	GtkTreeModel * model
TYPE	6:1	6:14	5	GtkTreeModel *
TYPE_NAME	6:1	6:1	6	GtkTreeModel
LEAF_NODE	6:1	6:1	7	GtkTreeModel
POINTER	6:14	6:14	6	*
LEAF_NODE	6:14	6:14	7	*
NAME	6:15	6:15	5	model
LEAF_NODE	6:15	6:15	6	model
LEAF_NODE	6:20	6:20	4	;
SIMPLE_DECL	7:1	7:19	3	PurpleAccount * cur ;
VAR_DECL	7:1	7:16	4	PurpleAccount * cur
TYPE	7:1	7:15	5	PurpleAccount *
TYPE_NAME	7:1	7:1	6	PurpleAccount
LEAF_NODE	7:1	7:1	7	PurpleAccount
POINTER	7:15	7:15	6	*
LEAF_NODE	7:15	7:15	7	*
NAME	7:16	7:16	5	cur
LEAF_NODE	7:16	7:16	6	cur
LEAF_NODE	7:19	7:19	4	;
EXPR_STATEMENT	8:1	8:51	3	g_return_val_if_fail ( status_editor != NULL , FALSE ) ;
EXPR	8:1	8:1	4	g_return_val_if_fail ( status_editor != NULL , FALSE )
FUNCTION_CALL	8:1	8:50	5	g_return_val_if_fail ( status_editor != NULL , FALSE )
CALLEE	8:1	8:1	6	g_return_val_if_fail
LEAF_NODE	8:1	8:1	7	g_return_val_if_fail
LEAF_NODE	8:21	8:21	6	(
ARGUMENT	8:22	8:39	6	status_editor != NULL
FIELD	8:22	8:22	7	status_editor
LEAF_NODE	8:22	8:22	8	status_editor
EQ_OPERATOR	8:36	8:36	7	!=
LEAF_NODE	8:36	8:36	8	!=
FIELD	8:39	8:39	7	NULL
LEAF_NODE	8:39	8:39	8	NULL
LEAF_NODE	8:43	8:43	6	,
ARGUMENT	8:45	8:45	6	FALSE
FIELD	8:45	8:45	7	FALSE
LEAF_NODE	8:45	8:45	8	FALSE
LEAF_NODE	8:50	8:50	6	)
LEAF_NODE	8:51	8:51	4	;
EXPR_STATEMENT	9:1	9:51	3	g_return_val_if_fail ( account != NULL , FALSE ) ;
EXPR	9:1	9:1	4	g_return_val_if_fail ( account != NULL , FALSE )
FUNCTION_CALL	9:1	9:50	5	g_return_val_if_fail ( account != NULL , FALSE )
CALLEE	9:1	9:1	6	g_return_val_if_fail
LEAF_NODE	9:1	9:1	7	g_return_val_if_fail
LEAF_NODE	9:21	9:21	6	(
ARGUMENT	9:22	9:39	6	account != NULL
FIELD	9:22	9:22	7	account
LEAF_NODE	9:22	9:22	8	account
EQ_OPERATOR	9:36	9:36	7	!=
LEAF_NODE	9:36	9:36	8	!=
FIELD	9:39	9:39	7	NULL
LEAF_NODE	9:39	9:39	8	NULL
LEAF_NODE	9:43	9:43	6	,
ARGUMENT	9:45	9:45	6	FALSE
FIELD	9:45	9:45	7	FALSE
LEAF_NODE	9:45	9:45	8	FALSE
LEAF_NODE	9:50	9:50	6	)
LEAF_NODE	9:51	9:51	4	;
EXPR_STATEMENT	10:1	10:45	3	model = GTK_TREE_MODEL ( status_editor -> model ) ;
EXPR	10:1	10:1	4	model = GTK_TREE_MODEL ( status_editor -> model )
ASSIGN	10:1	10:9	5	model = GTK_TREE_MODEL ( status_editor -> model )
LVAL	10:1	10:1	6	model
FIELD	10:1	10:1	7	model
LEAF_NODE	10:1	10:1	8	model
ASSIGN_OP	10:7	10:7	6	=
LEAF_NODE	10:7	10:7	7	=
RVAL	10:9	10:9	6	GTK_TREE_MODEL ( status_editor -> model )
FUNCTION_CALL	10:9	10:44	7	GTK_TREE_MODEL ( status_editor -> model )
CALLEE	10:9	10:9	8	GTK_TREE_MODEL
LEAF_NODE	10:9	10:9	9	GTK_TREE_MODEL
LEAF_NODE	10:23	10:23	8	(
ARGUMENT	10:24	10:24	8	status_editor -> model
FIELD	10:24	10:39	9	status_editor -> model
LEAF_NODE	10:24	10:24	10	status_editor
LEAF_NODE	10:37	10:37	10	->
LEAF_NODE	10:39	10:39	10	model
LEAF_NODE	10:44	10:44	8	)
LEAF_NODE	10:45	10:45	4	;
SELECTION	11:1	12:2	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	! gtk_tree_model_get_iter_first ( model , iter )
EXPR	11:5	11:5	5	! gtk_tree_model_get_iter_first ( model , iter )
UNARY_EXPR	11:5	11:6	6	! gtk_tree_model_get_iter_first ( model , iter )
UNARY_OPERATOR	11:5	11:5	7	!
LEAF_NODE	11:5	11:5	8	!
FUNCTION_CALL	11:6	11:47	7	gtk_tree_model_get_iter_first ( model , iter )
CALLEE	11:6	11:6	8	gtk_tree_model_get_iter_first
LEAF_NODE	11:6	11:6	9	gtk_tree_model_get_iter_first
LEAF_NODE	11:35	11:35	8	(
ARGUMENT	11:36	11:36	8	model
FIELD	11:36	11:36	9	model
LEAF_NODE	11:36	11:36	10	model
LEAF_NODE	11:41	11:41	8	,
ARGUMENT	11:43	11:43	8	iter
FIELD	11:43	11:43	9	iter
LEAF_NODE	11:43	11:43	10	iter
LEAF_NODE	11:47	11:47	8	)
LEAF_NODE	11:48	11:48	4	)
STATEMENTS	12:2	12:2	4	
JUMP_STATEMENT	12:2	12:14	5	return FALSE ;
KEYWORD	12:2	12:2	6	return
LEAF_NODE	12:2	12:2	7	return
DESTINATION	12:9	12:9	6	FALSE
EXPR	12:9	12:9	7	FALSE
FIELD	12:9	12:9	8	FALSE
LEAF_NODE	12:9	12:9	9	FALSE
LEAF_NODE	12:14	12:14	6	;
ITERATION	13:1	13:4	3	
KEYWORD	13:1	13:1	4	do
LEAF_NODE	13:1	13:1	5	do
LEAF_NODE	17:9	17:9	4	(
CONDITION	17:10	17:10	4	gtk_tree_model_iter_next ( model , iter )
EXPR	17:10	17:10	5	gtk_tree_model_iter_next ( model , iter )
FUNCTION_CALL	17:10	17:46	6	gtk_tree_model_iter_next ( model , iter )
CALLEE	17:10	17:10	7	gtk_tree_model_iter_next
LEAF_NODE	17:10	17:10	8	gtk_tree_model_iter_next
LEAF_NODE	17:34	17:34	7	(
ARGUMENT	17:35	17:35	7	model
FIELD	17:35	17:35	8	model
LEAF_NODE	17:35	17:35	9	model
LEAF_NODE	17:40	17:40	7	,
ARGUMENT	17:42	17:42	7	iter
FIELD	17:42	17:42	8	iter
LEAF_NODE	17:42	17:42	9	iter
LEAF_NODE	17:46	17:46	7	)
LEAF_NODE	17:47	17:47	4	)
STATEMENTS	13:4	17:1	4	
LEAF_NODE	13:4	13:4	5	{
STATEMENTS	14:2	15:2	5	
EXPR_STATEMENT	14:2	14:73	6	gtk_tree_model_get ( model , iter , STATUS_EDITOR_COLUMN_ACCOUNT , & cur , - 1 ) ;
EXPR	14:2	14:2	7	gtk_tree_model_get ( model , iter , STATUS_EDITOR_COLUMN_ACCOUNT , & cur , - 1 )
FUNCTION_CALL	14:2	14:72	8	gtk_tree_model_get ( model , iter , STATUS_EDITOR_COLUMN_ACCOUNT , & cur , - 1 )
CALLEE	14:2	14:2	9	gtk_tree_model_get
LEAF_NODE	14:2	14:2	10	gtk_tree_model_get
LEAF_NODE	14:20	14:20	9	(
ARGUMENT	14:21	14:21	9	model
FIELD	14:21	14:21	10	model
LEAF_NODE	14:21	14:21	11	model
LEAF_NODE	14:26	14:26	9	,
ARGUMENT	14:28	14:28	9	iter
FIELD	14:28	14:28	10	iter
LEAF_NODE	14:28	14:28	11	iter
LEAF_NODE	14:32	14:32	9	,
ARGUMENT	14:34	14:34	9	STATUS_EDITOR_COLUMN_ACCOUNT
FIELD	14:34	14:34	10	STATUS_EDITOR_COLUMN_ACCOUNT
LEAF_NODE	14:34	14:34	11	STATUS_EDITOR_COLUMN_ACCOUNT
LEAF_NODE	14:62	14:62	9	,
ARGUMENT	14:64	14:64	9	& cur
UNARY_EXPR	14:64	14:65	10	& cur
UNARY_OPERATOR	14:64	14:64	11	&
LEAF_NODE	14:64	14:64	12	&
FIELD	14:65	14:65	11	cur
LEAF_NODE	14:65	14:65	12	cur
LEAF_NODE	14:68	14:68	9	,
ARGUMENT	14:70	14:70	9	- 1
UNARY_EXPR	14:70	14:71	10	- 1
UNARY_OPERATOR	14:70	14:70	11	-
LEAF_NODE	14:70	14:70	12	-
FIELD	14:71	14:71	11	1
LEAF_NODE	14:71	14:71	12	1
LEAF_NODE	14:72	14:72	9	)
LEAF_NODE	14:73	14:73	7	;
SELECTION	15:2	16:3	6	
KEYWORD	15:2	15:2	7	if
LEAF_NODE	15:2	15:2	8	if
LEAF_NODE	15:5	15:5	7	(
CONDITION	15:6	15:6	7	cur == account
EXPR	15:6	15:13	8	cur == account
FIELD	15:6	15:6	9	cur
LEAF_NODE	15:6	15:6	10	cur
EQ_OPERATOR	15:10	15:10	9	==
LEAF_NODE	15:10	15:10	10	==
FIELD	15:13	15:13	9	account
LEAF_NODE	15:13	15:13	10	account
LEAF_NODE	15:20	15:20	7	)
STATEMENTS	16:3	16:3	7	
JUMP_STATEMENT	16:3	16:14	8	return TRUE ;
KEYWORD	16:3	16:3	9	return
LEAF_NODE	16:3	16:3	10	return
DESTINATION	16:10	16:10	9	TRUE
EXPR	16:10	16:10	10	TRUE
FIELD	16:10	16:10	11	TRUE
LEAF_NODE	16:10	16:10	12	TRUE
LEAF_NODE	16:14	16:14	9	;
LEAF_NODE	17:1	17:1	5	}
LEAF_NODE	17:48	17:48	3	;
JUMP_STATEMENT	18:1	18:13	3	return FALSE ;
KEYWORD	18:1	18:1	4	return
LEAF_NODE	18:1	18:1	5	return
DESTINATION	18:8	18:8	4	FALSE
EXPR	18:8	18:8	5	FALSE
FIELD	18:8	18:8	6	FALSE
LEAF_NODE	18:8	18:8	7	FALSE
LEAF_NODE	18:13	18:13	4	;
LEAF_NODE	19:0	19:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	18:0	1	
RETURN_TYPE	2:0	2:0	2	uin_t
TYPE_NAME	2:0	2:0	3	uin_t
LEAF_NODE	2:0	2:0	4	uin_t
FUNCTION_NAME	2:6	2:6	2	gg_str_to_uin
LEAF_NODE	2:6	2:6	3	gg_str_to_uin
PARAMETER_LIST	2:19	2:44	2	( const char * str , int len )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:32	3	const char * str
TYPE	2:20	2:31	4	const char *
TYPE_NAME	2:20	2:26	5	const char
LEAF_NODE	2:20	2:20	6	const
LEAF_NODE	2:26	2:26	6	char
POINTER	2:31	2:31	5	*
LEAF_NODE	2:31	2:31	6	*
NAME	2:32	2:32	4	str
LEAF_NODE	2:32	2:32	5	str
LEAF_NODE	2:35	2:35	3	,
PARAMETER_DECL	2:37	2:41	3	int len
TYPE	2:37	2:37	4	int
TYPE_NAME	2:37	2:37	5	int
LEAF_NODE	2:37	2:37	6	int
NAME	2:41	2:41	4	len
LEAF_NODE	2:41	2:41	5	len
LEAF_NODE	2:44	2:44	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	17:1	2	
SIMPLE_DECL	4:1	4:14	3	char [ 11 ] buff ;
VAR_DECL	4:1	4:6	4	char [ 11 ] buff
TYPE	4:1	4:10	5	char [ 11 ]
TYPE_NAME	4:1	4:1	6	char
LEAF_NODE	4:1	4:1	7	char
TYPE_SUFFIX	4:10	4:13	6	[ 11 ]
LEAF_NODE	4:10	4:10	7	[
FIELD	4:11	4:11	7	11
LEAF_NODE	4:11	4:11	8	11
LEAF_NODE	4:13	4:13	7	]
NAME	4:6	4:6	5	buff
LEAF_NODE	4:6	4:6	6	buff
LEAF_NODE	4:14	4:14	4	;
SIMPLE_DECL	5:1	5:13	3	char * endptr ;
VAR_DECL	5:1	5:7	4	char * endptr
TYPE	5:1	5:6	5	char *
TYPE_NAME	5:1	5:1	6	char
LEAF_NODE	5:1	5:1	7	char
POINTER	5:6	5:6	6	*
LEAF_NODE	5:6	5:6	7	*
NAME	5:7	5:7	5	endptr
LEAF_NODE	5:7	5:7	6	endptr
LEAF_NODE	5:13	5:13	4	;
SIMPLE_DECL	6:1	6:10	3	uin_t uin ;
VAR_DECL	6:1	6:7	4	uin_t uin
TYPE	6:1	6:1	5	uin_t
TYPE_NAME	6:1	6:1	6	uin_t
LEAF_NODE	6:1	6:1	7	uin_t
NAME	6:7	6:7	5	uin
LEAF_NODE	6:7	6:7	6	uin
LEAF_NODE	6:10	6:10	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	len < 0
EXPR	7:5	7:11	5	len < 0
FIELD	7:5	7:5	6	len
LEAF_NODE	7:5	7:5	7	len
REL_OPERATOR	7:9	7:9	6	<
LEAF_NODE	7:9	7:9	7	<
FIELD	7:11	7:11	6	0
LEAF_NODE	7:11	7:11	7	0
LEAF_NODE	7:12	7:12	4	)
STATEMENTS	8:2	8:2	4	
EXPR_STATEMENT	8:2	8:19	5	len = strlen ( str ) ;
EXPR	8:2	8:2	6	len = strlen ( str )
ASSIGN	8:2	8:8	7	len = strlen ( str )
LVAL	8:2	8:2	8	len
FIELD	8:2	8:2	9	len
LEAF_NODE	8:2	8:2	10	len
ASSIGN_OP	8:6	8:6	8	=
LEAF_NODE	8:6	8:6	9	=
RVAL	8:8	8:8	8	strlen ( str )
FUNCTION_CALL	8:8	8:18	9	strlen ( str )
CALLEE	8:8	8:8	10	strlen
LEAF_NODE	8:8	8:8	11	strlen
LEAF_NODE	8:14	8:14	10	(
ARGUMENT	8:15	8:15	10	str
FIELD	8:15	8:15	11	str
LEAF_NODE	8:15	8:15	12	str
LEAF_NODE	8:18	8:18	10	)
LEAF_NODE	8:19	8:19	6	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	len > 10
EXPR	9:5	9:11	5	len > 10
FIELD	9:5	9:5	6	len
LEAF_NODE	9:5	9:5	7	len
REL_OPERATOR	9:9	9:9	6	>
LEAF_NODE	9:9	9:9	7	>
FIELD	9:11	9:11	6	10
LEAF_NODE	9:11	9:11	7	10
LEAF_NODE	9:13	9:13	4	)
STATEMENTS	10:2	10:2	4	
JUMP_STATEMENT	10:2	10:10	5	return 0 ;
KEYWORD	10:2	10:2	6	return
LEAF_NODE	10:2	10:2	7	return
DESTINATION	10:9	10:9	6	0
EXPR	10:9	10:9	7	0
FIELD	10:9	10:9	8	0
LEAF_NODE	10:9	10:9	9	0
LEAF_NODE	10:10	10:10	6	;
EXPR_STATEMENT	11:1	11:23	3	memcpy ( buff , str , len ) ;
EXPR	11:1	11:1	4	memcpy ( buff , str , len )
FUNCTION_CALL	11:1	11:22	5	memcpy ( buff , str , len )
CALLEE	11:1	11:1	6	memcpy
LEAF_NODE	11:1	11:1	7	memcpy
LEAF_NODE	11:7	11:7	6	(
ARGUMENT	11:8	11:8	6	buff
FIELD	11:8	11:8	7	buff
LEAF_NODE	11:8	11:8	8	buff
LEAF_NODE	11:12	11:12	6	,
ARGUMENT	11:14	11:14	6	str
FIELD	11:14	11:14	7	str
LEAF_NODE	11:14	11:14	8	str
LEAF_NODE	11:17	11:17	6	,
ARGUMENT	11:19	11:19	6	len
FIELD	11:19	11:19	7	len
LEAF_NODE	11:19	11:19	8	len
LEAF_NODE	11:22	11:22	6	)
LEAF_NODE	11:23	11:23	4	;
EXPR_STATEMENT	12:1	12:17	3	buff [ len ] = '\0' ;
EXPR	12:1	12:1	4	buff [ len ] = '\0'
ASSIGN	12:1	12:13	5	buff [ len ] = '\0'
LVAL	12:1	12:1	6	buff [ len ]
FIELD	12:1	12:9	7	buff [ len ]
LEAF_NODE	12:1	12:1	8	buff
LEAF_NODE	12:5	12:5	8	[
EXPR	12:6	12:6	8	len
FIELD	12:6	12:6	9	len
LEAF_NODE	12:6	12:6	10	len
LEAF_NODE	12:9	12:9	8	]
ASSIGN_OP	12:11	12:11	6	=
LEAF_NODE	12:11	12:11	7	=
RVAL	12:13	12:13	6	'\0'
FIELD	12:13	12:13	7	'\0'
LEAF_NODE	12:13	12:13	8	'\0'
LEAF_NODE	12:17	12:17	4	;
EXPR_STATEMENT	13:1	13:10	3	errno = 0 ;
EXPR	13:1	13:1	4	errno = 0
ASSIGN	13:1	13:9	5	errno = 0
LVAL	13:1	13:1	6	errno
FIELD	13:1	13:1	7	errno
LEAF_NODE	13:1	13:1	8	errno
ASSIGN_OP	13:7	13:7	6	=
LEAF_NODE	13:7	13:7	7	=
RVAL	13:9	13:9	6	0
FIELD	13:9	13:9	7	0
LEAF_NODE	13:9	13:9	8	0
LEAF_NODE	13:10	13:10	4	;
EXPR_STATEMENT	14:1	14:33	3	uin = strtoul ( buff , & endptr , 10 ) ;
EXPR	14:1	14:1	4	uin = strtoul ( buff , & endptr , 10 )
ASSIGN	14:1	14:7	5	uin = strtoul ( buff , & endptr , 10 )
LVAL	14:1	14:1	6	uin
FIELD	14:1	14:1	7	uin
LEAF_NODE	14:1	14:1	8	uin
ASSIGN_OP	14:5	14:5	6	=
LEAF_NODE	14:5	14:5	7	=
RVAL	14:7	14:7	6	strtoul ( buff , & endptr , 10 )
FUNCTION_CALL	14:7	14:32	7	strtoul ( buff , & endptr , 10 )
CALLEE	14:7	14:7	8	strtoul
LEAF_NODE	14:7	14:7	9	strtoul
LEAF_NODE	14:14	14:14	8	(
ARGUMENT	14:15	14:15	8	buff
FIELD	14:15	14:15	9	buff
LEAF_NODE	14:15	14:15	10	buff
LEAF_NODE	14:19	14:19	8	,
ARGUMENT	14:21	14:21	8	& endptr
UNARY_EXPR	14:21	14:22	9	& endptr
UNARY_OPERATOR	14:21	14:21	10	&
LEAF_NODE	14:21	14:21	11	&
FIELD	14:22	14:22	10	endptr
LEAF_NODE	14:22	14:22	11	endptr
LEAF_NODE	14:28	14:28	8	,
ARGUMENT	14:30	14:30	8	10
FIELD	14:30	14:30	9	10
LEAF_NODE	14:30	14:30	10	10
LEAF_NODE	14:32	14:32	8	)
LEAF_NODE	14:33	14:33	4	;
SELECTION	15:1	16:2	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:4	15:4	4	(
CONDITION	15:5	15:5	4	errno == ERANGE || endptr [ 0 ] != '\0'
EXPR	15:5	15:5	5	errno == ERANGE || endptr [ 0 ] != '\0'
OR	15:5	15:24	6	errno == ERANGE || endptr [ 0 ] != '\0'
EXPR	15:5	15:14	7	errno == ERANGE
FIELD	15:5	15:5	8	errno
LEAF_NODE	15:5	15:5	9	errno
EQ_OPERATOR	15:11	15:11	8	==
LEAF_NODE	15:11	15:11	9	==
FIELD	15:14	15:14	8	ERANGE
LEAF_NODE	15:14	15:14	9	ERANGE
LEAF_NODE	15:21	15:21	7	||
EXPR	15:24	15:37	7	endptr [ 0 ] != '\0'
FIELD	15:24	15:32	8	endptr [ 0 ]
LEAF_NODE	15:24	15:24	9	endptr
LEAF_NODE	15:30	15:30	9	[
EXPR	15:31	15:31	9	0
FIELD	15:31	15:31	10	0
LEAF_NODE	15:31	15:31	11	0
LEAF_NODE	15:32	15:32	9	]
EQ_OPERATOR	15:34	15:34	8	!=
LEAF_NODE	15:34	15:34	9	!=
FIELD	15:37	15:37	8	'\0'
LEAF_NODE	15:37	15:37	9	'\0'
LEAF_NODE	15:41	15:41	4	)
STATEMENTS	16:2	16:2	4	
JUMP_STATEMENT	16:2	16:10	5	return 0 ;
KEYWORD	16:2	16:2	6	return
LEAF_NODE	16:2	16:2	7	return
DESTINATION	16:9	16:9	6	0
EXPR	16:9	16:9	7	0
FIELD	16:9	16:9	8	0
LEAF_NODE	16:9	16:9	9	0
LEAF_NODE	16:10	16:10	6	;
JUMP_STATEMENT	17:1	17:11	3	return uin ;
KEYWORD	17:1	17:1	4	return
LEAF_NODE	17:1	17:1	5	return
DESTINATION	17:8	17:8	4	uin
EXPR	17:8	17:8	5	uin
FIELD	17:8	17:8	6	uin
LEAF_NODE	17:8	17:8	7	uin
LEAF_NODE	17:11	17:11	4	;
LEAF_NODE	18:0	18:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	75:0	1	
RETURN_TYPE	2:0	2:7	2	static gboolean
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	gboolean
LEAF_NODE	2:7	2:7	4	gboolean
FUNCTION_NAME	2:16	2:16	2	tcl_probe_plugin
LEAF_NODE	2:16	2:16	3	tcl_probe_plugin
PARAMETER_LIST	2:32	2:53	2	( PurplePlugin * plugin )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:47	3	PurplePlugin * plugin
TYPE	2:33	2:46	4	PurplePlugin *
TYPE_NAME	2:33	2:33	5	PurplePlugin
LEAF_NODE	2:33	2:33	6	PurplePlugin
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	plugin
LEAF_NODE	2:47	2:47	5	plugin
LEAF_NODE	2:53	2:53	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	74:1	2	
SIMPLE_DECL	4:1	4:23	3	PurplePluginInfo * info ;
VAR_DECL	4:1	4:19	4	PurplePluginInfo * info
TYPE	4:1	4:18	5	PurplePluginInfo *
TYPE_NAME	4:1	4:1	6	PurplePluginInfo
LEAF_NODE	4:1	4:1	7	PurplePluginInfo
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	info
LEAF_NODE	4:19	4:19	6	info
LEAF_NODE	4:23	4:23	4	;
SIMPLE_DECL	5:1	5:19	3	Tcl_Interp * interp ;
VAR_DECL	5:1	5:13	4	Tcl_Interp * interp
TYPE	5:1	5:12	5	Tcl_Interp *
TYPE_NAME	5:1	5:1	6	Tcl_Interp
LEAF_NODE	5:1	5:1	7	Tcl_Interp
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	interp
LEAF_NODE	5:13	5:13	6	interp
LEAF_NODE	5:19	5:19	4	;
SIMPLE_DECL	6:1	6:16	3	Tcl_Parse parse ;
VAR_DECL	6:1	6:11	4	Tcl_Parse parse
TYPE	6:1	6:1	5	Tcl_Parse
TYPE_NAME	6:1	6:1	6	Tcl_Parse
LEAF_NODE	6:1	6:1	7	Tcl_Parse
NAME	6:11	6:11	5	parse
LEAF_NODE	6:11	6:11	6	parse
LEAF_NODE	6:16	6:16	4	;
SIMPLE_DECL	7:1	7:29	3	Tcl_Obj * result , Tcl_Obj * listitems ;
INIT_DECL_LIST	7:1	7:1	4	Tcl_Obj * result , Tcl_Obj * listitems
VAR_DECL	7:1	7:10	5	Tcl_Obj * result
TYPE	7:1	7:9	6	Tcl_Obj *
TYPE_NAME	7:1	7:1	7	Tcl_Obj
LEAF_NODE	7:1	7:1	8	Tcl_Obj
POINTER	7:9	7:9	7	*
LEAF_NODE	7:9	7:9	8	*
NAME	7:10	7:10	6	result
LEAF_NODE	7:10	7:10	7	result
LEAF_NODE	7:16	7:16	5	,
VAR_DECL	7:1	7:20	5	Tcl_Obj * listitems
TYPE	7:1	7:19	6	Tcl_Obj *
TYPE_NAME	7:1	7:1	7	Tcl_Obj
LEAF_NODE	7:1	7:1	8	Tcl_Obj
POINTER	7:19	7:19	7	*
LEAF_NODE	7:19	7:19	8	*
NAME	7:20	7:20	6	listitems
LEAF_NODE	7:20	7:20	7	listitems
LEAF_NODE	7:29	7:29	4	;
SIMPLE_DECL	8:1	8:10	3	char * buf ;
VAR_DECL	8:1	8:7	4	char * buf
TYPE	8:1	8:6	5	char *
TYPE_NAME	8:1	8:1	6	char
LEAF_NODE	8:1	8:1	7	char
POINTER	8:6	8:6	6	*
LEAF_NODE	8:6	8:6	7	*
NAME	8:7	8:7	5	buf
LEAF_NODE	8:7	8:7	6	buf
LEAF_NODE	8:10	8:10	4	;
SIMPLE_DECL	9:1	9:17	3	const char * next ;
VAR_DECL	9:1	9:13	4	const char * next
TYPE	9:1	9:12	5	const char *
TYPE_NAME	9:1	9:7	6	const char
LEAF_NODE	9:1	9:1	7	const
LEAF_NODE	9:7	9:7	7	char
POINTER	9:12	9:12	6	*
LEAF_NODE	9:12	9:12	7	*
NAME	9:13	9:13	5	next
LEAF_NODE	9:13	9:13	6	next
LEAF_NODE	9:17	9:17	4	;
SIMPLE_DECL	10:1	10:31	3	int found ; found = 0 , int err ; err = 0 , int nelems ;
INIT_DECL_LIST	10:1	10:1	4	int found ; found = 0 , int err ; err = 0 , int nelems
VAR_DECL	10:1	10:5	5	int found ; found = 0
TYPE	10:1	10:1	6	int
TYPE_NAME	10:1	10:1	7	int
LEAF_NODE	10:1	10:1	8	int
NAME	10:5	10:5	6	found
LEAF_NODE	10:5	10:5	7	found
LEAF_NODE	0:0	0:0	6	;
INIT	10:5	10:5	6	found = 0
ASSIGN	10:5	10:13	7	found = 0
LVAL	10:5	10:5	8	found
NAME	10:5	10:5	9	found
LEAF_NODE	10:5	10:5	10	found
ASSIGN_OP	10:11	10:11	8	=
LEAF_NODE	10:11	10:11	9	=
RVAL	10:13	10:13	8	0
FIELD	10:13	10:13	9	0
LEAF_NODE	10:13	10:13	10	0
LEAF_NODE	10:14	10:14	5	,
INIT_DECL_LIST	10:1	10:1	5	int err ; err = 0 , int nelems
VAR_DECL	10:1	10:16	6	int err ; err = 0
TYPE	10:1	10:1	7	int
TYPE_NAME	10:1	10:1	8	int
LEAF_NODE	10:1	10:1	9	int
NAME	10:16	10:16	7	err
LEAF_NODE	10:16	10:16	8	err
LEAF_NODE	0:0	0:0	7	;
INIT	10:16	10:16	7	err = 0
ASSIGN	10:16	10:22	8	err = 0
LVAL	10:16	10:16	9	err
NAME	10:16	10:16	10	err
LEAF_NODE	10:16	10:16	11	err
ASSIGN_OP	10:20	10:20	9	=
LEAF_NODE	10:20	10:20	10	=
RVAL	10:22	10:22	9	0
FIELD	10:22	10:22	10	0
LEAF_NODE	10:22	10:22	11	0
LEAF_NODE	10:23	10:23	6	,
VAR_DECL	10:1	10:25	6	int nelems
TYPE	10:1	10:1	7	int
TYPE_NAME	10:1	10:1	8	int
LEAF_NODE	10:1	10:1	9	int
NAME	10:25	10:25	7	nelems
LEAF_NODE	10:25	10:25	8	nelems
LEAF_NODE	10:31	10:31	4	;
SIMPLE_DECL	11:1	11:10	3	gsize len ;
VAR_DECL	11:1	11:7	4	gsize len
TYPE	11:1	11:1	5	gsize
TYPE_NAME	11:1	11:1	6	gsize
LEAF_NODE	11:1	11:1	7	gsize
NAME	11:7	11:7	5	len
LEAF_NODE	11:7	11:7	6	len
LEAF_NODE	11:10	11:10	4	;
SIMPLE_DECL	12:1	12:24	3	gboolean status ; status = FALSE ;
VAR_DECL	12:1	12:10	4	gboolean status ; status = FALSE
TYPE	12:1	12:1	5	gboolean
TYPE_NAME	12:1	12:1	6	gboolean
LEAF_NODE	12:1	12:1	7	gboolean
NAME	12:10	12:10	5	status
LEAF_NODE	12:10	12:10	6	status
LEAF_NODE	0:0	0:0	5	;
INIT	12:10	12:10	5	status = FALSE
ASSIGN	12:10	12:19	6	status = FALSE
LVAL	12:10	12:10	7	status
NAME	12:10	12:10	8	status
LEAF_NODE	12:10	12:10	9	status
ASSIGN_OP	12:17	12:17	7	=
LEAF_NODE	12:17	12:17	8	=
RVAL	12:19	12:19	7	FALSE
FIELD	12:19	12:19	8	FALSE
LEAF_NODE	12:19	12:19	9	FALSE
LEAF_NODE	12:24	12:24	4	;
SELECTION	13:1	13:59	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	! g_file_get_contents ( plugin -> path , & buf , & len , NULL )
EXPR	13:5	13:5	5	! g_file_get_contents ( plugin -> path , & buf , & len , NULL )
UNARY_EXPR	13:5	13:6	6	! g_file_get_contents ( plugin -> path , & buf , & len , NULL )
UNARY_OPERATOR	13:5	13:5	7	!
LEAF_NODE	13:5	13:5	8	!
FUNCTION_CALL	13:6	13:56	7	g_file_get_contents ( plugin -> path , & buf , & len , NULL )
CALLEE	13:6	13:6	8	g_file_get_contents
LEAF_NODE	13:6	13:6	9	g_file_get_contents
LEAF_NODE	13:25	13:25	8	(
ARGUMENT	13:26	13:26	8	plugin -> path
FIELD	13:26	13:34	9	plugin -> path
LEAF_NODE	13:26	13:26	10	plugin
LEAF_NODE	13:32	13:32	10	->
LEAF_NODE	13:34	13:34	10	path
LEAF_NODE	13:38	13:38	8	,
ARGUMENT	13:40	13:40	8	& buf
UNARY_EXPR	13:40	13:41	9	& buf
UNARY_OPERATOR	13:40	13:40	10	&
LEAF_NODE	13:40	13:40	11	&
FIELD	13:41	13:41	10	buf
LEAF_NODE	13:41	13:41	11	buf
LEAF_NODE	13:44	13:44	8	,
ARGUMENT	13:46	13:46	8	& len
UNARY_EXPR	13:46	13:47	9	& len
UNARY_OPERATOR	13:46	13:46	10	&
LEAF_NODE	13:46	13:46	11	&
FIELD	13:47	13:47	10	len
LEAF_NODE	13:47	13:47	11	len
LEAF_NODE	13:50	13:50	8	,
ARGUMENT	13:52	13:52	8	NULL
FIELD	13:52	13:52	9	NULL
LEAF_NODE	13:52	13:52	10	NULL
LEAF_NODE	13:56	13:56	8	)
LEAF_NODE	13:57	13:57	4	)
STATEMENTS	13:59	17:1	4	
LEAF_NODE	13:59	13:59	5	{
STATEMENTS	14:2	16:2	5	
EXPR_STATEMENT	14:2	15:21	6	purple_debug ( PURPLE_DEBUG_INFO , "tcl" , "Error opening plugin %s\n" , plugin -> path ) ;
EXPR	14:2	14:2	7	purple_debug ( PURPLE_DEBUG_INFO , "tcl" , "Error opening plugin %s\n" , plugin -> path )
FUNCTION_CALL	14:2	15:20	8	purple_debug ( PURPLE_DEBUG_INFO , "tcl" , "Error opening plugin %s\n" , plugin -> path )
CALLEE	14:2	14:2	9	purple_debug
LEAF_NODE	14:2	14:2	10	purple_debug
LEAF_NODE	14:14	14:14	9	(
ARGUMENT	14:15	14:15	9	PURPLE_DEBUG_INFO
FIELD	14:15	14:15	10	PURPLE_DEBUG_INFO
LEAF_NODE	14:15	14:15	11	PURPLE_DEBUG_INFO
LEAF_NODE	14:32	14:32	9	,
ARGUMENT	14:34	14:34	9	"tcl"
FIELD	14:34	14:34	10	"tcl"
LEAF_NODE	14:34	14:34	11	"tcl"
LEAF_NODE	14:39	14:39	9	,
ARGUMENT	14:41	14:41	9	"Error opening plugin %s\n"
FIELD	14:41	14:41	10	"Error opening plugin %s\n"
LEAF_NODE	14:41	14:41	11	"Error opening plugin %s\n"
LEAF_NODE	14:68	14:68	9	,
ARGUMENT	15:8	15:8	9	plugin -> path
FIELD	15:8	15:16	10	plugin -> path
LEAF_NODE	15:8	15:8	11	plugin
LEAF_NODE	15:14	15:14	11	->
LEAF_NODE	15:16	15:16	11	path
LEAF_NODE	15:20	15:20	9	)
LEAF_NODE	15:21	15:21	7	;
JUMP_STATEMENT	16:2	16:14	6	return FALSE ;
KEYWORD	16:2	16:2	7	return
LEAF_NODE	16:2	16:2	8	return
DESTINATION	16:9	16:9	7	FALSE
EXPR	16:9	16:9	8	FALSE
FIELD	16:9	16:9	9	FALSE
LEAF_NODE	16:9	16:9	10	FALSE
LEAF_NODE	16:14	16:14	7	;
LEAF_NODE	17:1	17:1	5	}
SELECTION	18:1	18:45	3	
KEYWORD	18:1	18:1	4	if
LEAF_NODE	18:1	18:1	5	if
LEAF_NODE	18:4	18:4	4	(
CONDITION	18:5	18:5	4	( interp = tcl_create_interp ( ) ) == NULL
EXPR	18:5	18:39	5	( interp = tcl_create_interp ( ) ) == NULL
LEAF_NODE	18:5	18:5	6	(
ASSIGN	18:6	18:15	6	interp = tcl_create_interp ( )
LVAL	18:6	18:6	7	interp
FIELD	18:6	18:6	8	interp
LEAF_NODE	18:6	18:6	9	interp
ASSIGN_OP	18:13	18:13	7	=
LEAF_NODE	18:13	18:13	8	=
RVAL	18:15	18:15	7	tcl_create_interp ( )
FUNCTION_CALL	18:15	18:33	8	tcl_create_interp ( )
CALLEE	18:15	18:15	9	tcl_create_interp
LEAF_NODE	18:15	18:15	10	tcl_create_interp
LEAF_NODE	18:32	18:32	9	(
LEAF_NODE	18:33	18:33	9	)
LEAF_NODE	18:34	18:34	6	)
EQ_OPERATOR	18:36	18:36	6	==
LEAF_NODE	18:36	18:36	7	==
FIELD	18:39	18:39	6	NULL
LEAF_NODE	18:39	18:39	7	NULL
LEAF_NODE	18:43	18:43	4	)
STATEMENTS	18:45	20:1	4	
LEAF_NODE	18:45	18:45	5	{
STATEMENTS	19:2	19:2	5	
JUMP_STATEMENT	19:2	19:14	6	return FALSE ;
KEYWORD	19:2	19:2	7	return
LEAF_NODE	19:2	19:2	8	return
DESTINATION	19:9	19:9	7	FALSE
EXPR	19:9	19:9	8	FALSE
FIELD	19:9	19:9	9	FALSE
LEAF_NODE	19:9	19:9	10	FALSE
LEAF_NODE	19:14	19:14	7	;
LEAF_NODE	20:1	20:1	5	}
EXPR_STATEMENT	21:1	21:11	3	next = buf ;
EXPR	21:1	21:1	4	next = buf
ASSIGN	21:1	21:8	5	next = buf
LVAL	21:1	21:1	6	next
FIELD	21:1	21:1	7	next
LEAF_NODE	21:1	21:1	8	next
ASSIGN_OP	21:6	21:6	6	=
LEAF_NODE	21:6	21:6	7	=
RVAL	21:8	21:8	6	buf
FIELD	21:8	21:8	7	buf
LEAF_NODE	21:8	21:8	8	buf
LEAF_NODE	21:11	21:11	4	;
ITERATION	22:1	22:4	3	
KEYWORD	22:1	22:1	4	do
LEAF_NODE	22:1	22:1	5	do
LEAF_NODE	43:9	43:9	4	(
CONDITION	43:10	43:10	4	len
EXPR	43:10	43:10	5	len
FIELD	43:10	43:10	6	len
LEAF_NODE	43:10	43:10	7	len
LEAF_NODE	43:13	43:13	4	)
STATEMENTS	22:4	43:1	4	
LEAF_NODE	22:4	22:4	5	{
STATEMENTS	23:2	42:2	5	
SELECTION	23:2	23:67	6	
KEYWORD	23:2	23:2	7	if
LEAF_NODE	23:2	23:2	8	if
LEAF_NODE	23:5	23:5	7	(
CONDITION	23:6	23:6	7	Tcl_ParseCommand ( interp , next , len , 0 , & parse ) == TCL_ERROR
EXPR	23:6	23:56	8	Tcl_ParseCommand ( interp , next , len , 0 , & parse ) == TCL_ERROR
FUNCTION_CALL	23:6	23:51	9	Tcl_ParseCommand ( interp , next , len , 0 , & parse )
CALLEE	23:6	23:6	10	Tcl_ParseCommand
LEAF_NODE	23:6	23:6	11	Tcl_ParseCommand
LEAF_NODE	23:22	23:22	10	(
ARGUMENT	23:23	23:23	10	interp
FIELD	23:23	23:23	11	interp
LEAF_NODE	23:23	23:23	12	interp
LEAF_NODE	23:29	23:29	10	,
ARGUMENT	23:31	23:31	10	next
FIELD	23:31	23:31	11	next
LEAF_NODE	23:31	23:31	12	next
LEAF_NODE	23:35	23:35	10	,
ARGUMENT	23:37	23:37	10	len
FIELD	23:37	23:37	11	len
LEAF_NODE	23:37	23:37	12	len
LEAF_NODE	23:40	23:40	10	,
ARGUMENT	23:42	23:42	10	0
FIELD	23:42	23:42	11	0
LEAF_NODE	23:42	23:42	12	0
LEAF_NODE	23:43	23:43	10	,
ARGUMENT	23:45	23:45	10	& parse
UNARY_EXPR	23:45	23:46	11	& parse
UNARY_OPERATOR	23:45	23:45	12	&
LEAF_NODE	23:45	23:45	13	&
FIELD	23:46	23:46	12	parse
LEAF_NODE	23:46	23:46	13	parse
LEAF_NODE	23:51	23:51	10	)
EQ_OPERATOR	23:53	23:53	9	==
LEAF_NODE	23:53	23:53	10	==
FIELD	23:56	23:56	9	TCL_ERROR
LEAF_NODE	23:56	23:56	10	TCL_ERROR
LEAF_NODE	23:65	23:65	7	)
STATEMENTS	23:67	28:2	7	
LEAF_NODE	23:67	23:67	8	{
STATEMENTS	24:3	27:3	8	
EXPR_STATEMENT	24:3	25:47	9	purple_debug ( PURPLE_DEBUG_ERROR , "tcl" , "parse error in %s: %s\n" , plugin -> path , Tcl_GetString ( Tcl_GetObjResult ( interp ) ) ) ;
EXPR	24:3	24:3	10	purple_debug ( PURPLE_DEBUG_ERROR , "tcl" , "parse error in %s: %s\n" , plugin -> path , Tcl_GetString ( Tcl_GetObjResult ( interp ) ) )
FUNCTION_CALL	24:3	25:46	11	purple_debug ( PURPLE_DEBUG_ERROR , "tcl" , "parse error in %s: %s\n" , plugin -> path , Tcl_GetString ( Tcl_GetObjResult ( interp ) ) )
CALLEE	24:3	24:3	12	purple_debug
LEAF_NODE	24:3	24:3	13	purple_debug
LEAF_NODE	24:15	24:15	12	(
ARGUMENT	24:16	24:16	12	PURPLE_DEBUG_ERROR
FIELD	24:16	24:16	13	PURPLE_DEBUG_ERROR
LEAF_NODE	24:16	24:16	14	PURPLE_DEBUG_ERROR
LEAF_NODE	24:34	24:34	12	,
ARGUMENT	24:36	24:36	12	"tcl"
FIELD	24:36	24:36	13	"tcl"
LEAF_NODE	24:36	24:36	14	"tcl"
LEAF_NODE	24:41	24:41	12	,
ARGUMENT	24:43	24:43	12	"parse error in %s: %s\n"
FIELD	24:43	24:43	13	"parse error in %s: %s\n"
LEAF_NODE	24:43	24:43	14	"parse error in %s: %s\n"
LEAF_NODE	24:68	24:68	12	,
ARGUMENT	24:70	24:70	12	plugin -> path
FIELD	24:70	24:78	13	plugin -> path
LEAF_NODE	24:70	24:70	14	plugin
LEAF_NODE	24:76	24:76	14	->
LEAF_NODE	24:78	24:78	14	path
LEAF_NODE	24:82	24:82	12	,
ARGUMENT	25:7	25:7	12	Tcl_GetString ( Tcl_GetObjResult ( interp ) )
FUNCTION_CALL	25:7	25:45	13	Tcl_GetString ( Tcl_GetObjResult ( interp ) )
CALLEE	25:7	25:7	14	Tcl_GetString
LEAF_NODE	25:7	25:7	15	Tcl_GetString
LEAF_NODE	25:20	25:20	14	(
ARGUMENT	25:21	25:21	14	Tcl_GetObjResult ( interp )
FUNCTION_CALL	25:21	25:44	15	Tcl_GetObjResult ( interp )
CALLEE	25:21	25:21	16	Tcl_GetObjResult
LEAF_NODE	25:21	25:21	17	Tcl_GetObjResult
LEAF_NODE	25:37	25:37	16	(
ARGUMENT	25:38	25:38	16	interp
FIELD	25:38	25:38	17	interp
LEAF_NODE	25:38	25:38	18	interp
LEAF_NODE	25:44	25:44	16	)
LEAF_NODE	25:45	25:45	14	)
LEAF_NODE	25:46	25:46	12	)
LEAF_NODE	25:47	25:47	10	;
EXPR_STATEMENT	26:3	26:10	9	err = 1 ;
EXPR	26:3	26:3	10	err = 1
ASSIGN	26:3	26:9	11	err = 1
LVAL	26:3	26:3	12	err
FIELD	26:3	26:3	13	err
LEAF_NODE	26:3	26:3	14	err
ASSIGN_OP	26:7	26:7	12	=
LEAF_NODE	26:7	26:7	13	=
RVAL	26:9	26:9	12	1
FIELD	26:9	26:9	13	1
LEAF_NODE	26:9	26:9	14	1
LEAF_NODE	26:10	26:10	10	;
JUMP_STATEMENT	27:3	27:8	9	break DESTINATION ;
KEYWORD	27:3	27:3	10	break
LEAF_NODE	27:3	27:3	11	break
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	27:8	27:8	10	;
LEAF_NODE	28:2	28:2	8	}
SELECTION	29:2	30:76	6	
KEYWORD	29:2	29:2	7	if
LEAF_NODE	29:2	29:2	8	if
LEAF_NODE	29:5	29:5	7	(
CONDITION	29:6	29:6	7	parse . tokenPtr [ 0 ] . type == TCL_TOKEN_SIMPLE_WORD && ! strncmp ( parse . tokenPtr [ 0 ] . start , "proc" , parse . tokenPtr [ 0 ] . size )
EXPR	29:6	29:6	8	parse . tokenPtr [ 0 ] . type == TCL_TOKEN_SIMPLE_WORD && ! strncmp ( parse . tokenPtr [ 0 ] . start , "proc" , parse . tokenPtr [ 0 ] . size )
AND	29:6	30:9	9	parse . tokenPtr [ 0 ] . type == TCL_TOKEN_SIMPLE_WORD && ! strncmp ( parse . tokenPtr [ 0 ] . start , "proc" , parse . tokenPtr [ 0 ] . size )
EXPR	29:6	29:32	10	parse . tokenPtr [ 0 ] . type == TCL_TOKEN_SIMPLE_WORD
FIELD	29:6	29:24	11	parse . tokenPtr [ 0 ] . type
LEAF_NODE	29:6	29:6	12	parse
LEAF_NODE	29:11	29:11	12	.
LEAF_NODE	29:12	29:12	12	tokenPtr
LEAF_NODE	29:20	29:20	12	[
EXPR	29:21	29:21	12	0
FIELD	29:21	29:21	13	0
LEAF_NODE	29:21	29:21	14	0
LEAF_NODE	29:22	29:22	12	]
LEAF_NODE	29:23	29:23	12	.
LEAF_NODE	29:24	29:24	12	type
EQ_OPERATOR	29:29	29:29	11	==
LEAF_NODE	29:29	29:29	12	==
FIELD	29:32	29:32	11	TCL_TOKEN_SIMPLE_WORD
LEAF_NODE	29:32	29:32	12	TCL_TOKEN_SIMPLE_WORD
LEAF_NODE	30:6	30:6	10	&&
EXPR	30:9	30:9	10	! strncmp ( parse . tokenPtr [ 0 ] . start , "proc" , parse . tokenPtr [ 0 ] . size )
UNARY_EXPR	30:9	30:10	11	! strncmp ( parse . tokenPtr [ 0 ] . start , "proc" , parse . tokenPtr [ 0 ] . size )
UNARY_OPERATOR	30:9	30:9	12	!
LEAF_NODE	30:9	30:9	13	!
FUNCTION_CALL	30:10	30:73	12	strncmp ( parse . tokenPtr [ 0 ] . start , "proc" , parse . tokenPtr [ 0 ] . size )
CALLEE	30:10	30:10	13	strncmp
LEAF_NODE	30:10	30:10	14	strncmp
LEAF_NODE	30:17	30:17	13	(
ARGUMENT	30:18	30:18	13	parse . tokenPtr [ 0 ] . start
FIELD	30:18	30:36	14	parse . tokenPtr [ 0 ] . start
LEAF_NODE	30:18	30:18	15	parse
LEAF_NODE	30:23	30:23	15	.
LEAF_NODE	30:24	30:24	15	tokenPtr
LEAF_NODE	30:32	30:32	15	[
EXPR	30:33	30:33	15	0
FIELD	30:33	30:33	16	0
LEAF_NODE	30:33	30:33	17	0
LEAF_NODE	30:34	30:34	15	]
LEAF_NODE	30:35	30:35	15	.
LEAF_NODE	30:36	30:36	15	start
LEAF_NODE	30:41	30:41	13	,
ARGUMENT	30:43	30:43	13	"proc"
FIELD	30:43	30:43	14	"proc"
LEAF_NODE	30:43	30:43	15	"proc"
LEAF_NODE	30:49	30:49	13	,
ARGUMENT	30:51	30:51	13	parse . tokenPtr [ 0 ] . size
FIELD	30:51	30:69	14	parse . tokenPtr [ 0 ] . size
LEAF_NODE	30:51	30:51	15	parse
LEAF_NODE	30:56	30:56	15	.
LEAF_NODE	30:57	30:57	15	tokenPtr
LEAF_NODE	30:65	30:65	15	[
EXPR	30:66	30:66	15	0
FIELD	30:66	30:66	16	0
LEAF_NODE	30:66	30:66	17	0
LEAF_NODE	30:67	30:67	15	]
LEAF_NODE	30:68	30:68	15	.
LEAF_NODE	30:69	30:69	15	size
LEAF_NODE	30:73	30:73	13	)
LEAF_NODE	30:74	30:74	7	)
STATEMENTS	30:76	39:2	7	
LEAF_NODE	30:76	30:76	8	{
STATEMENTS	31:3	31:3	8	
SELECTION	31:3	31:81	9	
KEYWORD	31:3	31:3	10	if
LEAF_NODE	31:3	31:3	11	if
LEAF_NODE	31:6	31:6	10	(
CONDITION	31:7	31:7	10	! strncmp ( parse . tokenPtr [ 2 ] . start , "plugin_init" , parse . tokenPtr [ 2 ] . size )
EXPR	31:7	31:7	11	! strncmp ( parse . tokenPtr [ 2 ] . start , "plugin_init" , parse . tokenPtr [ 2 ] . size )
UNARY_EXPR	31:7	31:8	12	! strncmp ( parse . tokenPtr [ 2 ] . start , "plugin_init" , parse . tokenPtr [ 2 ] . size )
UNARY_OPERATOR	31:7	31:7	13	!
LEAF_NODE	31:7	31:7	14	!
FUNCTION_CALL	31:8	31:78	13	strncmp ( parse . tokenPtr [ 2 ] . start , "plugin_init" , parse . tokenPtr [ 2 ] . size )
CALLEE	31:8	31:8	14	strncmp
LEAF_NODE	31:8	31:8	15	strncmp
LEAF_NODE	31:15	31:15	14	(
ARGUMENT	31:16	31:16	14	parse . tokenPtr [ 2 ] . start
FIELD	31:16	31:34	15	parse . tokenPtr [ 2 ] . start
LEAF_NODE	31:16	31:16	16	parse
LEAF_NODE	31:21	31:21	16	.
LEAF_NODE	31:22	31:22	16	tokenPtr
LEAF_NODE	31:30	31:30	16	[
EXPR	31:31	31:31	16	2
FIELD	31:31	31:31	17	2
LEAF_NODE	31:31	31:31	18	2
LEAF_NODE	31:32	31:32	16	]
LEAF_NODE	31:33	31:33	16	.
LEAF_NODE	31:34	31:34	16	start
LEAF_NODE	31:39	31:39	14	,
ARGUMENT	31:41	31:41	14	"plugin_init"
FIELD	31:41	31:41	15	"plugin_init"
LEAF_NODE	31:41	31:41	16	"plugin_init"
LEAF_NODE	31:54	31:54	14	,
ARGUMENT	31:56	31:56	14	parse . tokenPtr [ 2 ] . size
FIELD	31:56	31:74	15	parse . tokenPtr [ 2 ] . size
LEAF_NODE	31:56	31:56	16	parse
LEAF_NODE	31:61	31:61	16	.
LEAF_NODE	31:62	31:62	16	tokenPtr
LEAF_NODE	31:70	31:70	16	[
EXPR	31:71	31:71	16	2
FIELD	31:71	31:71	17	2
LEAF_NODE	31:71	31:71	18	2
LEAF_NODE	31:72	31:72	16	]
LEAF_NODE	31:73	31:73	16	.
LEAF_NODE	31:74	31:74	16	size
LEAF_NODE	31:78	31:78	14	)
LEAF_NODE	31:79	31:79	10	)
STATEMENTS	31:81	38:3	10	
LEAF_NODE	31:81	31:81	11	{
STATEMENTS	32:4	36:4	11	
SELECTION	32:4	32:94	12	
KEYWORD	32:4	32:4	13	if
LEAF_NODE	32:4	32:4	14	if
LEAF_NODE	32:7	32:7	13	(
CONDITION	32:8	32:8	13	Tcl_EvalEx ( interp , parse . commandStart , parse . commandSize , TCL_EVAL_GLOBAL ) != TCL_OK
EXPR	32:8	32:86	14	Tcl_EvalEx ( interp , parse . commandStart , parse . commandSize , TCL_EVAL_GLOBAL ) != TCL_OK
FUNCTION_CALL	32:8	32:81	15	Tcl_EvalEx ( interp , parse . commandStart , parse . commandSize , TCL_EVAL_GLOBAL )
CALLEE	32:8	32:8	16	Tcl_EvalEx
LEAF_NODE	32:8	32:8	17	Tcl_EvalEx
LEAF_NODE	32:18	32:18	16	(
ARGUMENT	32:19	32:19	16	interp
FIELD	32:19	32:19	17	interp
LEAF_NODE	32:19	32:19	18	interp
LEAF_NODE	32:25	32:25	16	,
ARGUMENT	32:27	32:27	16	parse . commandStart
FIELD	32:27	32:33	17	parse . commandStart
LEAF_NODE	32:27	32:27	18	parse
LEAF_NODE	32:32	32:32	18	.
LEAF_NODE	32:33	32:33	18	commandStart
LEAF_NODE	32:45	32:45	16	,
ARGUMENT	32:47	32:47	16	parse . commandSize
FIELD	32:47	32:53	17	parse . commandSize
LEAF_NODE	32:47	32:47	18	parse
LEAF_NODE	32:52	32:52	18	.
LEAF_NODE	32:53	32:53	18	commandSize
LEAF_NODE	32:64	32:64	16	,
ARGUMENT	32:66	32:66	16	TCL_EVAL_GLOBAL
FIELD	32:66	32:66	17	TCL_EVAL_GLOBAL
LEAF_NODE	32:66	32:66	18	TCL_EVAL_GLOBAL
LEAF_NODE	32:81	32:81	16	)
EQ_OPERATOR	32:83	32:83	15	!=
LEAF_NODE	32:83	32:83	16	!=
FIELD	32:86	32:86	15	TCL_OK
LEAF_NODE	32:86	32:86	16	TCL_OK
LEAF_NODE	32:92	32:92	13	)
STATEMENTS	32:94	35:4	13	
LEAF_NODE	32:94	32:94	14	{
STATEMENTS	33:5	34:5	14	
EXPR_STATEMENT	33:5	33:26	15	Tcl_FreeParse ( & parse ) ;
EXPR	33:5	33:5	16	Tcl_FreeParse ( & parse )
FUNCTION_CALL	33:5	33:25	17	Tcl_FreeParse ( & parse )
CALLEE	33:5	33:5	18	Tcl_FreeParse
LEAF_NODE	33:5	33:5	19	Tcl_FreeParse
LEAF_NODE	33:18	33:18	18	(
ARGUMENT	33:19	33:19	18	& parse
UNARY_EXPR	33:19	33:20	19	& parse
UNARY_OPERATOR	33:19	33:19	20	&
LEAF_NODE	33:19	33:19	21	&
FIELD	33:20	33:20	20	parse
LEAF_NODE	33:20	33:20	21	parse
LEAF_NODE	33:25	33:25	18	)
LEAF_NODE	33:26	33:26	16	;
JUMP_STATEMENT	34:5	34:10	15	break DESTINATION ;
KEYWORD	34:5	34:5	16	break
LEAF_NODE	34:5	34:5	17	break
LEAF_NODE	0:0	0:0	16	DESTINATION
LEAF_NODE	34:10	34:10	16	;
LEAF_NODE	35:4	35:4	14	}
EXPR_STATEMENT	36:4	36:13	12	found = 1 ;
EXPR	36:4	36:4	13	found = 1
ASSIGN	36:4	36:12	14	found = 1
LVAL	36:4	36:4	15	found
FIELD	36:4	36:4	16	found
LEAF_NODE	36:4	36:4	17	found
ASSIGN_OP	36:10	36:10	15	=
LEAF_NODE	36:10	36:10	16	=
RVAL	36:12	36:12	15	1
FIELD	36:12	36:12	16	1
LEAF_NODE	36:12	36:12	17	1
LEAF_NODE	36:13	36:13	13	;
LEAF_NODE	38:3	38:3	11	}
LEAF_NODE	39:2	39:2	8	}
EXPR_STATEMENT	40:2	40:56	6	len -= ( parse . commandStart + parse . commandSize ) - next ;
EXPR	40:2	40:2	7	len -= ( parse . commandStart + parse . commandSize ) - next
ASSIGN	40:2	40:9	8	len -= ( parse . commandStart + parse . commandSize ) - next
LVAL	40:2	40:2	9	len
FIELD	40:2	40:2	10	len
LEAF_NODE	40:2	40:2	11	len
ASSIGN_OP	40:6	40:6	9	-=
LEAF_NODE	40:6	40:6	10	-=
RVAL	40:9	40:52	9	( parse . commandStart + parse . commandSize ) - next
LEAF_NODE	40:9	40:9	10	(
FIELD	40:10	40:16	10	parse . commandStart
LEAF_NODE	40:10	40:10	11	parse
LEAF_NODE	40:15	40:15	11	.
LEAF_NODE	40:16	40:16	11	commandStart
LEAF_NODE	40:29	40:29	10	+
FIELD	40:31	40:37	10	parse . commandSize
LEAF_NODE	40:31	40:31	11	parse
LEAF_NODE	40:36	40:36	11	.
LEAF_NODE	40:37	40:37	11	commandSize
LEAF_NODE	40:48	40:48	10	)
LEAF_NODE	40:50	40:50	10	-
FIELD	40:52	40:52	10	next
LEAF_NODE	40:52	40:52	11	next
LEAF_NODE	40:56	40:56	7	;
EXPR_STATEMENT	41:2	41:47	6	next = parse . commandStart + parse . commandSize ;
EXPR	41:2	41:2	7	next = parse . commandStart + parse . commandSize
ASSIGN	41:2	41:9	8	next = parse . commandStart + parse . commandSize
LVAL	41:2	41:2	9	next
FIELD	41:2	41:2	10	next
LEAF_NODE	41:2	41:2	11	next
ASSIGN_OP	41:7	41:7	9	=
LEAF_NODE	41:7	41:7	10	=
RVAL	41:9	41:30	9	parse . commandStart + parse . commandSize
FIELD	41:9	41:15	10	parse . commandStart
LEAF_NODE	41:9	41:9	11	parse
LEAF_NODE	41:14	41:14	11	.
LEAF_NODE	41:15	41:15	11	commandStart
LEAF_NODE	41:28	41:28	10	+
FIELD	41:30	41:36	10	parse . commandSize
LEAF_NODE	41:30	41:30	11	parse
LEAF_NODE	41:35	41:35	11	.
LEAF_NODE	41:36	41:36	11	commandSize
LEAF_NODE	41:47	41:47	7	;
EXPR_STATEMENT	42:2	42:23	6	Tcl_FreeParse ( & parse ) ;
EXPR	42:2	42:2	7	Tcl_FreeParse ( & parse )
FUNCTION_CALL	42:2	42:22	8	Tcl_FreeParse ( & parse )
CALLEE	42:2	42:2	9	Tcl_FreeParse
LEAF_NODE	42:2	42:2	10	Tcl_FreeParse
LEAF_NODE	42:15	42:15	9	(
ARGUMENT	42:16	42:16	9	& parse
UNARY_EXPR	42:16	42:17	10	& parse
UNARY_OPERATOR	42:16	42:16	11	&
LEAF_NODE	42:16	42:16	12	&
FIELD	42:17	42:17	11	parse
LEAF_NODE	42:17	42:17	12	parse
LEAF_NODE	42:22	42:22	9	)
LEAF_NODE	42:23	42:23	7	;
LEAF_NODE	43:1	43:1	5	}
LEAF_NODE	43:14	43:14	3	;
SELECTION	44:1	44:20	3	
KEYWORD	44:1	44:1	4	if
LEAF_NODE	44:1	44:1	5	if
LEAF_NODE	44:4	44:4	4	(
CONDITION	44:5	44:5	4	found && ! err
EXPR	44:5	44:5	5	found && ! err
AND	44:5	44:14	6	found && ! err
EXPR	44:5	44:5	7	found
FIELD	44:5	44:5	8	found
LEAF_NODE	44:5	44:5	9	found
LEAF_NODE	44:11	44:11	7	&&
EXPR	44:14	44:14	7	! err
UNARY_EXPR	44:14	44:15	8	! err
UNARY_OPERATOR	44:14	44:14	9	!
LEAF_NODE	44:14	44:14	10	!
FIELD	44:15	44:15	9	err
LEAF_NODE	44:15	44:15	10	err
LEAF_NODE	44:18	44:18	4	)
STATEMENTS	44:20	71:1	4	
LEAF_NODE	44:20	44:20	5	{
STATEMENTS	45:2	45:2	5	
SELECTION	45:2	45:72	6	
KEYWORD	45:2	45:2	7	if
LEAF_NODE	45:2	45:2	8	if
LEAF_NODE	45:5	45:5	7	(
CONDITION	45:6	45:6	7	Tcl_EvalEx ( interp , "plugin_init" , - 1 , TCL_EVAL_GLOBAL ) == TCL_OK
EXPR	45:6	45:64	8	Tcl_EvalEx ( interp , "plugin_init" , - 1 , TCL_EVAL_GLOBAL ) == TCL_OK
FUNCTION_CALL	45:6	45:59	9	Tcl_EvalEx ( interp , "plugin_init" , - 1 , TCL_EVAL_GLOBAL )
CALLEE	45:6	45:6	10	Tcl_EvalEx
LEAF_NODE	45:6	45:6	11	Tcl_EvalEx
LEAF_NODE	45:16	45:16	10	(
ARGUMENT	45:17	45:17	10	interp
FIELD	45:17	45:17	11	interp
LEAF_NODE	45:17	45:17	12	interp
LEAF_NODE	45:23	45:23	10	,
ARGUMENT	45:25	45:25	10	"plugin_init"
FIELD	45:25	45:25	11	"plugin_init"
LEAF_NODE	45:25	45:25	12	"plugin_init"
LEAF_NODE	45:38	45:38	10	,
ARGUMENT	45:40	45:40	10	- 1
UNARY_EXPR	45:40	45:41	11	- 1
UNARY_OPERATOR	45:40	45:40	12	-
LEAF_NODE	45:40	45:40	13	-
FIELD	45:41	45:41	12	1
LEAF_NODE	45:41	45:41	13	1
LEAF_NODE	45:42	45:42	10	,
ARGUMENT	45:44	45:44	10	TCL_EVAL_GLOBAL
FIELD	45:44	45:44	11	TCL_EVAL_GLOBAL
LEAF_NODE	45:44	45:44	12	TCL_EVAL_GLOBAL
LEAF_NODE	45:59	45:59	10	)
EQ_OPERATOR	45:61	45:61	9	==
LEAF_NODE	45:61	45:61	10	==
FIELD	45:64	45:64	9	TCL_OK
LEAF_NODE	45:64	45:64	10	TCL_OK
LEAF_NODE	45:70	45:70	7	)
STATEMENTS	45:72	70:2	7	
LEAF_NODE	45:72	45:72	8	{
STATEMENTS	46:3	47:3	8	
EXPR_STATEMENT	46:3	46:36	9	result = Tcl_GetObjResult ( interp ) ;
EXPR	46:3	46:3	10	result = Tcl_GetObjResult ( interp )
ASSIGN	46:3	46:12	11	result = Tcl_GetObjResult ( interp )
LVAL	46:3	46:3	12	result
FIELD	46:3	46:3	13	result
LEAF_NODE	46:3	46:3	14	result
ASSIGN_OP	46:10	46:10	12	=
LEAF_NODE	46:10	46:10	13	=
RVAL	46:12	46:12	12	Tcl_GetObjResult ( interp )
FUNCTION_CALL	46:12	46:35	13	Tcl_GetObjResult ( interp )
CALLEE	46:12	46:12	14	Tcl_GetObjResult
LEAF_NODE	46:12	46:12	15	Tcl_GetObjResult
LEAF_NODE	46:28	46:28	14	(
ARGUMENT	46:29	46:29	14	interp
FIELD	46:29	46:29	15	interp
LEAF_NODE	46:29	46:29	16	interp
LEAF_NODE	46:35	46:35	14	)
LEAF_NODE	46:36	46:36	10	;
SELECTION	47:3	47:78	9	
KEYWORD	47:3	47:3	10	if
LEAF_NODE	47:3	47:3	11	if
LEAF_NODE	47:6	47:6	10	(
CONDITION	47:7	47:7	10	Tcl_ListObjGetElements ( interp , result , & nelems , & listitems ) == TCL_OK
EXPR	47:7	47:70	11	Tcl_ListObjGetElements ( interp , result , & nelems , & listitems ) == TCL_OK
FUNCTION_CALL	47:7	47:65	12	Tcl_ListObjGetElements ( interp , result , & nelems , & listitems )
CALLEE	47:7	47:7	13	Tcl_ListObjGetElements
LEAF_NODE	47:7	47:7	14	Tcl_ListObjGetElements
LEAF_NODE	47:29	47:29	13	(
ARGUMENT	47:30	47:30	13	interp
FIELD	47:30	47:30	14	interp
LEAF_NODE	47:30	47:30	15	interp
LEAF_NODE	47:36	47:36	13	,
ARGUMENT	47:38	47:38	13	result
FIELD	47:38	47:38	14	result
LEAF_NODE	47:38	47:38	15	result
LEAF_NODE	47:44	47:44	13	,
ARGUMENT	47:46	47:46	13	& nelems
UNARY_EXPR	47:46	47:47	14	& nelems
UNARY_OPERATOR	47:46	47:46	15	&
LEAF_NODE	47:46	47:46	16	&
FIELD	47:47	47:47	15	nelems
LEAF_NODE	47:47	47:47	16	nelems
LEAF_NODE	47:53	47:53	13	,
ARGUMENT	47:55	47:55	13	& listitems
UNARY_EXPR	47:55	47:56	14	& listitems
UNARY_OPERATOR	47:55	47:55	15	&
LEAF_NODE	47:55	47:55	16	&
FIELD	47:56	47:56	15	listitems
LEAF_NODE	47:56	47:56	16	listitems
LEAF_NODE	47:65	47:65	13	)
EQ_OPERATOR	47:67	47:67	12	==
LEAF_NODE	47:67	47:67	13	==
FIELD	47:70	47:70	12	TCL_OK
LEAF_NODE	47:70	47:70	13	TCL_OK
LEAF_NODE	47:76	47:76	10	)
STATEMENTS	47:78	69:3	10	
LEAF_NODE	47:78	47:78	11	{
STATEMENTS	48:4	48:4	11	
SELECTION	48:4	48:40	12	
KEYWORD	48:4	48:4	13	if
LEAF_NODE	48:4	48:4	14	if
LEAF_NODE	48:7	48:7	13	(
CONDITION	48:8	48:8	13	( nelems == 6 ) || ( nelems == 7 )
EXPR	48:8	48:8	14	( nelems == 6 ) || ( nelems == 7 )
OR	48:8	48:25	15	( nelems == 6 ) || ( nelems == 7 )
EXPR	48:8	48:20	16	( nelems == 6 )
LEAF_NODE	48:8	48:8	17	(
FIELD	48:9	48:9	17	nelems
LEAF_NODE	48:9	48:9	18	nelems
EQ_OPERATOR	48:16	48:16	17	==
LEAF_NODE	48:16	48:16	18	==
FIELD	48:19	48:19	17	6
LEAF_NODE	48:19	48:19	18	6
LEAF_NODE	48:20	48:20	17	)
LEAF_NODE	48:22	48:22	16	||
EXPR	48:25	48:37	16	( nelems == 7 )
LEAF_NODE	48:25	48:25	17	(
FIELD	48:26	48:26	17	nelems
LEAF_NODE	48:26	48:26	18	nelems
EQ_OPERATOR	48:33	48:33	17	==
LEAF_NODE	48:33	48:33	18	==
FIELD	48:36	48:36	17	7
LEAF_NODE	48:36	48:36	18	7
LEAF_NODE	48:37	48:37	17	)
LEAF_NODE	48:38	48:38	13	)
STATEMENTS	48:40	68:4	13	
LEAF_NODE	48:40	48:40	14	{
STATEMENTS	49:5	66:5	14	
EXPR_STATEMENT	49:5	49:39	15	info = g_new0 ( PurplePluginInfo , 1 ) ;
EXPR	49:5	49:5	16	info = g_new0 ( PurplePluginInfo , 1 )
ASSIGN	49:5	49:12	17	info = g_new0 ( PurplePluginInfo , 1 )
LVAL	49:5	49:5	18	info
FIELD	49:5	49:5	19	info
LEAF_NODE	49:5	49:5	20	info
ASSIGN_OP	49:10	49:10	18	=
LEAF_NODE	49:10	49:10	19	=
RVAL	49:12	49:12	18	g_new0 ( PurplePluginInfo , 1 )
FUNCTION_CALL	49:12	49:38	19	g_new0 ( PurplePluginInfo , 1 )
CALLEE	49:12	49:12	20	g_new0
LEAF_NODE	49:12	49:12	21	g_new0
LEAF_NODE	49:18	49:18	20	(
ARGUMENT	49:19	49:19	20	PurplePluginInfo
FIELD	49:19	49:19	21	PurplePluginInfo
LEAF_NODE	49:19	49:19	22	PurplePluginInfo
LEAF_NODE	49:35	49:35	20	,
ARGUMENT	49:37	49:37	20	1
FIELD	49:37	49:37	21	1
LEAF_NODE	49:37	49:37	22	1
LEAF_NODE	49:38	49:38	20	)
LEAF_NODE	49:39	49:39	16	;
EXPR_STATEMENT	50:5	50:38	15	info -> magic = PURPLE_PLUGIN_MAGIC ;
EXPR	50:5	50:5	16	info -> magic = PURPLE_PLUGIN_MAGIC
ASSIGN	50:5	50:19	17	info -> magic = PURPLE_PLUGIN_MAGIC
LVAL	50:5	50:5	18	info -> magic
FIELD	50:5	50:11	19	info -> magic
LEAF_NODE	50:5	50:5	20	info
LEAF_NODE	50:9	50:9	20	->
LEAF_NODE	50:11	50:11	20	magic
ASSIGN_OP	50:17	50:17	18	=
LEAF_NODE	50:17	50:17	19	=
RVAL	50:19	50:19	18	PURPLE_PLUGIN_MAGIC
FIELD	50:19	50:19	19	PURPLE_PLUGIN_MAGIC
LEAF_NODE	50:19	50:19	20	PURPLE_PLUGIN_MAGIC
LEAF_NODE	50:38	50:38	16	;
EXPR_STATEMENT	51:5	51:47	15	info -> major_version = PURPLE_MAJOR_VERSION ;
EXPR	51:5	51:5	16	info -> major_version = PURPLE_MAJOR_VERSION
ASSIGN	51:5	51:27	17	info -> major_version = PURPLE_MAJOR_VERSION
LVAL	51:5	51:5	18	info -> major_version
FIELD	51:5	51:11	19	info -> major_version
LEAF_NODE	51:5	51:5	20	info
LEAF_NODE	51:9	51:9	20	->
LEAF_NODE	51:11	51:11	20	major_version
ASSIGN_OP	51:25	51:25	18	=
LEAF_NODE	51:25	51:25	19	=
RVAL	51:27	51:27	18	PURPLE_MAJOR_VERSION
FIELD	51:27	51:27	19	PURPLE_MAJOR_VERSION
LEAF_NODE	51:27	51:27	20	PURPLE_MAJOR_VERSION
LEAF_NODE	51:47	51:47	16	;
EXPR_STATEMENT	52:5	52:47	15	info -> minor_version = PURPLE_MINOR_VERSION ;
EXPR	52:5	52:5	16	info -> minor_version = PURPLE_MINOR_VERSION
ASSIGN	52:5	52:27	17	info -> minor_version = PURPLE_MINOR_VERSION
LVAL	52:5	52:5	18	info -> minor_version
FIELD	52:5	52:11	19	info -> minor_version
LEAF_NODE	52:5	52:5	20	info
LEAF_NODE	52:9	52:9	20	->
LEAF_NODE	52:11	52:11	20	minor_version
ASSIGN_OP	52:25	52:25	18	=
LEAF_NODE	52:25	52:25	19	=
RVAL	52:27	52:27	18	PURPLE_MINOR_VERSION
FIELD	52:27	52:27	19	PURPLE_MINOR_VERSION
LEAF_NODE	52:27	52:27	20	PURPLE_MINOR_VERSION
LEAF_NODE	52:47	52:47	16	;
EXPR_STATEMENT	53:5	53:40	15	info -> type = PURPLE_PLUGIN_STANDARD ;
EXPR	53:5	53:5	16	info -> type = PURPLE_PLUGIN_STANDARD
ASSIGN	53:5	53:18	17	info -> type = PURPLE_PLUGIN_STANDARD
LVAL	53:5	53:5	18	info -> type
FIELD	53:5	53:11	19	info -> type
LEAF_NODE	53:5	53:5	20	info
LEAF_NODE	53:9	53:9	20	->
LEAF_NODE	53:11	53:11	20	type
ASSIGN_OP	53:16	53:16	18	=
LEAF_NODE	53:16	53:16	19	=
RVAL	53:18	53:18	18	PURPLE_PLUGIN_STANDARD
FIELD	53:18	53:18	19	PURPLE_PLUGIN_STANDARD
LEAF_NODE	53:18	53:18	20	PURPLE_PLUGIN_STANDARD
LEAF_NODE	53:40	53:40	16	;
EXPR_STATEMENT	54:5	54:71	15	info -> dependencies = g_list_append ( info -> dependencies , "core-tcl" ) ;
EXPR	54:5	54:5	16	info -> dependencies = g_list_append ( info -> dependencies , "core-tcl" )
ASSIGN	54:5	54:26	17	info -> dependencies = g_list_append ( info -> dependencies , "core-tcl" )
LVAL	54:5	54:5	18	info -> dependencies
FIELD	54:5	54:11	19	info -> dependencies
LEAF_NODE	54:5	54:5	20	info
LEAF_NODE	54:9	54:9	20	->
LEAF_NODE	54:11	54:11	20	dependencies
ASSIGN_OP	54:24	54:24	18	=
LEAF_NODE	54:24	54:24	19	=
RVAL	54:26	54:26	18	g_list_append ( info -> dependencies , "core-tcl" )
FUNCTION_CALL	54:26	54:70	19	g_list_append ( info -> dependencies , "core-tcl" )
CALLEE	54:26	54:26	20	g_list_append
LEAF_NODE	54:26	54:26	21	g_list_append
LEAF_NODE	54:39	54:39	20	(
ARGUMENT	54:40	54:40	20	info -> dependencies
FIELD	54:40	54:46	21	info -> dependencies
LEAF_NODE	54:40	54:40	22	info
LEAF_NODE	54:44	54:44	22	->
LEAF_NODE	54:46	54:46	22	dependencies
LEAF_NODE	54:58	54:58	20	,
ARGUMENT	54:60	54:60	20	"core-tcl"
FIELD	54:60	54:60	21	"core-tcl"
LEAF_NODE	54:60	54:60	22	"core-tcl"
LEAF_NODE	54:70	54:70	20	)
LEAF_NODE	54:71	54:71	16	;
EXPR_STATEMENT	55:5	55:55	15	info -> name = g_strdup ( Tcl_GetString ( listitems [ 0 ] ) ) ;
EXPR	55:5	55:5	16	info -> name = g_strdup ( Tcl_GetString ( listitems [ 0 ] ) )
ASSIGN	55:5	55:18	17	info -> name = g_strdup ( Tcl_GetString ( listitems [ 0 ] ) )
LVAL	55:5	55:5	18	info -> name
FIELD	55:5	55:11	19	info -> name
LEAF_NODE	55:5	55:5	20	info
LEAF_NODE	55:9	55:9	20	->
LEAF_NODE	55:11	55:11	20	name
ASSIGN_OP	55:16	55:16	18	=
LEAF_NODE	55:16	55:16	19	=
RVAL	55:18	55:18	18	g_strdup ( Tcl_GetString ( listitems [ 0 ] ) )
FUNCTION_CALL	55:18	55:54	19	g_strdup ( Tcl_GetString ( listitems [ 0 ] ) )
CALLEE	55:18	55:18	20	g_strdup
LEAF_NODE	55:18	55:18	21	g_strdup
LEAF_NODE	55:26	55:26	20	(
ARGUMENT	55:27	55:27	20	Tcl_GetString ( listitems [ 0 ] )
FUNCTION_CALL	55:27	55:53	21	Tcl_GetString ( listitems [ 0 ] )
CALLEE	55:27	55:27	22	Tcl_GetString
LEAF_NODE	55:27	55:27	23	Tcl_GetString
LEAF_NODE	55:40	55:40	22	(
ARGUMENT	55:41	55:41	22	listitems [ 0 ]
FIELD	55:41	55:52	23	listitems [ 0 ]
LEAF_NODE	55:41	55:41	24	listitems
LEAF_NODE	55:50	55:50	24	[
EXPR	55:51	55:51	24	0
FIELD	55:51	55:51	25	0
LEAF_NODE	55:51	55:51	26	0
LEAF_NODE	55:52	55:52	24	]
LEAF_NODE	55:53	55:53	22	)
LEAF_NODE	55:54	55:54	20	)
LEAF_NODE	55:55	55:55	16	;
EXPR_STATEMENT	56:5	56:58	15	info -> version = g_strdup ( Tcl_GetString ( listitems [ 1 ] ) ) ;
EXPR	56:5	56:5	16	info -> version = g_strdup ( Tcl_GetString ( listitems [ 1 ] ) )
ASSIGN	56:5	56:21	17	info -> version = g_strdup ( Tcl_GetString ( listitems [ 1 ] ) )
LVAL	56:5	56:5	18	info -> version
FIELD	56:5	56:11	19	info -> version
LEAF_NODE	56:5	56:5	20	info
LEAF_NODE	56:9	56:9	20	->
LEAF_NODE	56:11	56:11	20	version
ASSIGN_OP	56:19	56:19	18	=
LEAF_NODE	56:19	56:19	19	=
RVAL	56:21	56:21	18	g_strdup ( Tcl_GetString ( listitems [ 1 ] ) )
FUNCTION_CALL	56:21	56:57	19	g_strdup ( Tcl_GetString ( listitems [ 1 ] ) )
CALLEE	56:21	56:21	20	g_strdup
LEAF_NODE	56:21	56:21	21	g_strdup
LEAF_NODE	56:29	56:29	20	(
ARGUMENT	56:30	56:30	20	Tcl_GetString ( listitems [ 1 ] )
FUNCTION_CALL	56:30	56:56	21	Tcl_GetString ( listitems [ 1 ] )
CALLEE	56:30	56:30	22	Tcl_GetString
LEAF_NODE	56:30	56:30	23	Tcl_GetString
LEAF_NODE	56:43	56:43	22	(
ARGUMENT	56:44	56:44	22	listitems [ 1 ]
FIELD	56:44	56:55	23	listitems [ 1 ]
LEAF_NODE	56:44	56:44	24	listitems
LEAF_NODE	56:53	56:53	24	[
EXPR	56:54	56:54	24	1
FIELD	56:54	56:54	25	1
LEAF_NODE	56:54	56:54	26	1
LEAF_NODE	56:55	56:55	24	]
LEAF_NODE	56:56	56:56	22	)
LEAF_NODE	56:57	56:57	20	)
LEAF_NODE	56:58	56:58	16	;
EXPR_STATEMENT	57:5	57:58	15	info -> summary = g_strdup ( Tcl_GetString ( listitems [ 2 ] ) ) ;
EXPR	57:5	57:5	16	info -> summary = g_strdup ( Tcl_GetString ( listitems [ 2 ] ) )
ASSIGN	57:5	57:21	17	info -> summary = g_strdup ( Tcl_GetString ( listitems [ 2 ] ) )
LVAL	57:5	57:5	18	info -> summary
FIELD	57:5	57:11	19	info -> summary
LEAF_NODE	57:5	57:5	20	info
LEAF_NODE	57:9	57:9	20	->
LEAF_NODE	57:11	57:11	20	summary
ASSIGN_OP	57:19	57:19	18	=
LEAF_NODE	57:19	57:19	19	=
RVAL	57:21	57:21	18	g_strdup ( Tcl_GetString ( listitems [ 2 ] ) )
FUNCTION_CALL	57:21	57:57	19	g_strdup ( Tcl_GetString ( listitems [ 2 ] ) )
CALLEE	57:21	57:21	20	g_strdup
LEAF_NODE	57:21	57:21	21	g_strdup
LEAF_NODE	57:29	57:29	20	(
ARGUMENT	57:30	57:30	20	Tcl_GetString ( listitems [ 2 ] )
FUNCTION_CALL	57:30	57:56	21	Tcl_GetString ( listitems [ 2 ] )
CALLEE	57:30	57:30	22	Tcl_GetString
LEAF_NODE	57:30	57:30	23	Tcl_GetString
LEAF_NODE	57:43	57:43	22	(
ARGUMENT	57:44	57:44	22	listitems [ 2 ]
FIELD	57:44	57:55	23	listitems [ 2 ]
LEAF_NODE	57:44	57:44	24	listitems
LEAF_NODE	57:53	57:53	24	[
EXPR	57:54	57:54	24	2
FIELD	57:54	57:54	25	2
LEAF_NODE	57:54	57:54	26	2
LEAF_NODE	57:55	57:55	24	]
LEAF_NODE	57:56	57:56	22	)
LEAF_NODE	57:57	57:57	20	)
LEAF_NODE	57:58	57:58	16	;
EXPR_STATEMENT	58:5	58:62	15	info -> description = g_strdup ( Tcl_GetString ( listitems [ 3 ] ) ) ;
EXPR	58:5	58:5	16	info -> description = g_strdup ( Tcl_GetString ( listitems [ 3 ] ) )
ASSIGN	58:5	58:25	17	info -> description = g_strdup ( Tcl_GetString ( listitems [ 3 ] ) )
LVAL	58:5	58:5	18	info -> description
FIELD	58:5	58:11	19	info -> description
LEAF_NODE	58:5	58:5	20	info
LEAF_NODE	58:9	58:9	20	->
LEAF_NODE	58:11	58:11	20	description
ASSIGN_OP	58:23	58:23	18	=
LEAF_NODE	58:23	58:23	19	=
RVAL	58:25	58:25	18	g_strdup ( Tcl_GetString ( listitems [ 3 ] ) )
FUNCTION_CALL	58:25	58:61	19	g_strdup ( Tcl_GetString ( listitems [ 3 ] ) )
CALLEE	58:25	58:25	20	g_strdup
LEAF_NODE	58:25	58:25	21	g_strdup
LEAF_NODE	58:33	58:33	20	(
ARGUMENT	58:34	58:34	20	Tcl_GetString ( listitems [ 3 ] )
FUNCTION_CALL	58:34	58:60	21	Tcl_GetString ( listitems [ 3 ] )
CALLEE	58:34	58:34	22	Tcl_GetString
LEAF_NODE	58:34	58:34	23	Tcl_GetString
LEAF_NODE	58:47	58:47	22	(
ARGUMENT	58:48	58:48	22	listitems [ 3 ]
FIELD	58:48	58:59	23	listitems [ 3 ]
LEAF_NODE	58:48	58:48	24	listitems
LEAF_NODE	58:57	58:57	24	[
EXPR	58:58	58:58	24	3
FIELD	58:58	58:58	25	3
LEAF_NODE	58:58	58:58	26	3
LEAF_NODE	58:59	58:59	24	]
LEAF_NODE	58:60	58:60	22	)
LEAF_NODE	58:61	58:61	20	)
LEAF_NODE	58:62	58:62	16	;
EXPR_STATEMENT	59:5	59:57	15	info -> author = g_strdup ( Tcl_GetString ( listitems [ 4 ] ) ) ;
EXPR	59:5	59:5	16	info -> author = g_strdup ( Tcl_GetString ( listitems [ 4 ] ) )
ASSIGN	59:5	59:20	17	info -> author = g_strdup ( Tcl_GetString ( listitems [ 4 ] ) )
LVAL	59:5	59:5	18	info -> author
FIELD	59:5	59:11	19	info -> author
LEAF_NODE	59:5	59:5	20	info
LEAF_NODE	59:9	59:9	20	->
LEAF_NODE	59:11	59:11	20	author
ASSIGN_OP	59:18	59:18	18	=
LEAF_NODE	59:18	59:18	19	=
RVAL	59:20	59:20	18	g_strdup ( Tcl_GetString ( listitems [ 4 ] ) )
FUNCTION_CALL	59:20	59:56	19	g_strdup ( Tcl_GetString ( listitems [ 4 ] ) )
CALLEE	59:20	59:20	20	g_strdup
LEAF_NODE	59:20	59:20	21	g_strdup
LEAF_NODE	59:28	59:28	20	(
ARGUMENT	59:29	59:29	20	Tcl_GetString ( listitems [ 4 ] )
FUNCTION_CALL	59:29	59:55	21	Tcl_GetString ( listitems [ 4 ] )
CALLEE	59:29	59:29	22	Tcl_GetString
LEAF_NODE	59:29	59:29	23	Tcl_GetString
LEAF_NODE	59:42	59:42	22	(
ARGUMENT	59:43	59:43	22	listitems [ 4 ]
FIELD	59:43	59:54	23	listitems [ 4 ]
LEAF_NODE	59:43	59:43	24	listitems
LEAF_NODE	59:52	59:52	24	[
EXPR	59:53	59:53	24	4
FIELD	59:53	59:53	25	4
LEAF_NODE	59:53	59:53	26	4
LEAF_NODE	59:54	59:54	24	]
LEAF_NODE	59:55	59:55	22	)
LEAF_NODE	59:56	59:56	20	)
LEAF_NODE	59:57	59:57	16	;
EXPR_STATEMENT	60:5	60:59	15	info -> homepage = g_strdup ( Tcl_GetString ( listitems [ 5 ] ) ) ;
EXPR	60:5	60:5	16	info -> homepage = g_strdup ( Tcl_GetString ( listitems [ 5 ] ) )
ASSIGN	60:5	60:22	17	info -> homepage = g_strdup ( Tcl_GetString ( listitems [ 5 ] ) )
LVAL	60:5	60:5	18	info -> homepage
FIELD	60:5	60:11	19	info -> homepage
LEAF_NODE	60:5	60:5	20	info
LEAF_NODE	60:9	60:9	20	->
LEAF_NODE	60:11	60:11	20	homepage
ASSIGN_OP	60:20	60:20	18	=
LEAF_NODE	60:20	60:20	19	=
RVAL	60:22	60:22	18	g_strdup ( Tcl_GetString ( listitems [ 5 ] ) )
FUNCTION_CALL	60:22	60:58	19	g_strdup ( Tcl_GetString ( listitems [ 5 ] ) )
CALLEE	60:22	60:22	20	g_strdup
LEAF_NODE	60:22	60:22	21	g_strdup
LEAF_NODE	60:30	60:30	20	(
ARGUMENT	60:31	60:31	20	Tcl_GetString ( listitems [ 5 ] )
FUNCTION_CALL	60:31	60:57	21	Tcl_GetString ( listitems [ 5 ] )
CALLEE	60:31	60:31	22	Tcl_GetString
LEAF_NODE	60:31	60:31	23	Tcl_GetString
LEAF_NODE	60:44	60:44	22	(
ARGUMENT	60:45	60:45	22	listitems [ 5 ]
FIELD	60:45	60:56	23	listitems [ 5 ]
LEAF_NODE	60:45	60:45	24	listitems
LEAF_NODE	60:54	60:54	24	[
EXPR	60:55	60:55	24	5
FIELD	60:55	60:55	25	5
LEAF_NODE	60:55	60:55	26	5
LEAF_NODE	60:56	60:56	24	]
LEAF_NODE	60:57	60:57	22	)
LEAF_NODE	60:58	60:58	20	)
LEAF_NODE	60:59	60:59	16	;
SELECTION	61:5	62:6	15	
KEYWORD	61:5	61:5	16	if
LEAF_NODE	61:5	61:5	17	if
LEAF_NODE	61:8	61:8	16	(
CONDITION	61:9	61:9	16	nelems == 6
EXPR	61:9	61:19	17	nelems == 6
FIELD	61:9	61:9	18	nelems
LEAF_NODE	61:9	61:9	19	nelems
EQ_OPERATOR	61:16	61:16	18	==
LEAF_NODE	61:16	61:16	19	==
FIELD	61:19	61:19	18	6
LEAF_NODE	61:19	61:19	19	6
LEAF_NODE	61:20	61:20	16	)
STATEMENTS	62:6	62:6	16	
EXPR_STATEMENT	62:6	62:71	17	info -> id = g_strdup_printf ( "tcl-%s" , Tcl_GetString ( listitems [ 0 ] ) ) ;
EXPR	62:6	62:6	18	info -> id = g_strdup_printf ( "tcl-%s" , Tcl_GetString ( listitems [ 0 ] ) )
ASSIGN	62:6	62:17	19	info -> id = g_strdup_printf ( "tcl-%s" , Tcl_GetString ( listitems [ 0 ] ) )
LVAL	62:6	62:6	20	info -> id
FIELD	62:6	62:12	21	info -> id
LEAF_NODE	62:6	62:6	22	info
LEAF_NODE	62:10	62:10	22	->
LEAF_NODE	62:12	62:12	22	id
ASSIGN_OP	62:15	62:15	20	=
LEAF_NODE	62:15	62:15	21	=
RVAL	62:17	62:17	20	g_strdup_printf ( "tcl-%s" , Tcl_GetString ( listitems [ 0 ] ) )
FUNCTION_CALL	62:17	62:70	21	g_strdup_printf ( "tcl-%s" , Tcl_GetString ( listitems [ 0 ] ) )
CALLEE	62:17	62:17	22	g_strdup_printf
LEAF_NODE	62:17	62:17	23	g_strdup_printf
LEAF_NODE	62:32	62:32	22	(
ARGUMENT	62:33	62:33	22	"tcl-%s"
FIELD	62:33	62:33	23	"tcl-%s"
LEAF_NODE	62:33	62:33	24	"tcl-%s"
LEAF_NODE	62:41	62:41	22	,
ARGUMENT	62:43	62:43	22	Tcl_GetString ( listitems [ 0 ] )
FUNCTION_CALL	62:43	62:69	23	Tcl_GetString ( listitems [ 0 ] )
CALLEE	62:43	62:43	24	Tcl_GetString
LEAF_NODE	62:43	62:43	25	Tcl_GetString
LEAF_NODE	62:56	62:56	24	(
ARGUMENT	62:57	62:57	24	listitems [ 0 ]
FIELD	62:57	62:68	25	listitems [ 0 ]
LEAF_NODE	62:57	62:57	26	listitems
LEAF_NODE	62:66	62:66	26	[
EXPR	62:67	62:67	26	0
FIELD	62:67	62:67	27	0
LEAF_NODE	62:67	62:67	28	0
LEAF_NODE	62:68	62:68	26	]
LEAF_NODE	62:69	62:69	24	)
LEAF_NODE	62:70	62:70	22	)
LEAF_NODE	62:71	62:71	18	;
SELECTION	63:5	63:10	15	
KEYWORD	63:5	63:5	16	else
LEAF_NODE	63:5	63:5	17	else
STATEMENTS	63:10	63:10	16	
SELECTION	63:10	64:6	17	
KEYWORD	63:10	63:10	18	if
LEAF_NODE	63:10	63:10	19	if
LEAF_NODE	63:13	63:13	18	(
CONDITION	63:14	63:14	18	nelems == 7
EXPR	63:14	63:24	19	nelems == 7
FIELD	63:14	63:14	20	nelems
LEAF_NODE	63:14	63:14	21	nelems
EQ_OPERATOR	63:21	63:21	20	==
LEAF_NODE	63:21	63:21	21	==
FIELD	63:24	63:24	20	7
LEAF_NODE	63:24	63:24	21	7
LEAF_NODE	63:25	63:25	18	)
STATEMENTS	64:6	64:6	18	
EXPR_STATEMENT	64:6	64:71	19	info -> id = g_strdup_printf ( "tcl-%s" , Tcl_GetString ( listitems [ 6 ] ) ) ;
EXPR	64:6	64:6	20	info -> id = g_strdup_printf ( "tcl-%s" , Tcl_GetString ( listitems [ 6 ] ) )
ASSIGN	64:6	64:17	21	info -> id = g_strdup_printf ( "tcl-%s" , Tcl_GetString ( listitems [ 6 ] ) )
LVAL	64:6	64:6	22	info -> id
FIELD	64:6	64:12	23	info -> id
LEAF_NODE	64:6	64:6	24	info
LEAF_NODE	64:10	64:10	24	->
LEAF_NODE	64:12	64:12	24	id
ASSIGN_OP	64:15	64:15	22	=
LEAF_NODE	64:15	64:15	23	=
RVAL	64:17	64:17	22	g_strdup_printf ( "tcl-%s" , Tcl_GetString ( listitems [ 6 ] ) )
FUNCTION_CALL	64:17	64:70	23	g_strdup_printf ( "tcl-%s" , Tcl_GetString ( listitems [ 6 ] ) )
CALLEE	64:17	64:17	24	g_strdup_printf
LEAF_NODE	64:17	64:17	25	g_strdup_printf
LEAF_NODE	64:32	64:32	24	(
ARGUMENT	64:33	64:33	24	"tcl-%s"
FIELD	64:33	64:33	25	"tcl-%s"
LEAF_NODE	64:33	64:33	26	"tcl-%s"
LEAF_NODE	64:41	64:41	24	,
ARGUMENT	64:43	64:43	24	Tcl_GetString ( listitems [ 6 ] )
FUNCTION_CALL	64:43	64:69	25	Tcl_GetString ( listitems [ 6 ] )
CALLEE	64:43	64:43	26	Tcl_GetString
LEAF_NODE	64:43	64:43	27	Tcl_GetString
LEAF_NODE	64:56	64:56	26	(
ARGUMENT	64:57	64:57	26	listitems [ 6 ]
FIELD	64:57	64:68	27	listitems [ 6 ]
LEAF_NODE	64:57	64:57	28	listitems
LEAF_NODE	64:66	64:66	28	[
EXPR	64:67	64:67	28	6
FIELD	64:67	64:67	29	6
LEAF_NODE	64:67	64:67	30	6
LEAF_NODE	64:68	64:68	28	]
LEAF_NODE	64:69	64:69	26	)
LEAF_NODE	64:70	64:70	24	)
LEAF_NODE	64:71	64:71	20	;
EXPR_STATEMENT	65:5	65:24	15	plugin -> info = info ;
EXPR	65:5	65:5	16	plugin -> info = info
ASSIGN	65:5	65:20	17	plugin -> info = info
LVAL	65:5	65:5	18	plugin -> info
FIELD	65:5	65:13	19	plugin -> info
LEAF_NODE	65:5	65:5	20	plugin
LEAF_NODE	65:11	65:11	20	->
LEAF_NODE	65:13	65:13	20	info
ASSIGN_OP	65:18	65:18	18	=
LEAF_NODE	65:18	65:18	19	=
RVAL	65:20	65:20	18	info
FIELD	65:20	65:20	19	info
LEAF_NODE	65:20	65:20	20	info
LEAF_NODE	65:24	65:24	16	;
SELECTION	66:5	67:6	15	
KEYWORD	66:5	66:5	16	if
LEAF_NODE	66:5	66:5	17	if
LEAF_NODE	66:8	66:8	16	(
CONDITION	66:9	66:9	16	purple_plugin_register ( plugin )
EXPR	66:9	66:9	17	purple_plugin_register ( plugin )
FUNCTION_CALL	66:9	66:38	18	purple_plugin_register ( plugin )
CALLEE	66:9	66:9	19	purple_plugin_register
LEAF_NODE	66:9	66:9	20	purple_plugin_register
LEAF_NODE	66:31	66:31	19	(
ARGUMENT	66:32	66:32	19	plugin
FIELD	66:32	66:32	20	plugin
LEAF_NODE	66:32	66:32	21	plugin
LEAF_NODE	66:38	66:38	19	)
LEAF_NODE	66:39	66:39	16	)
STATEMENTS	67:6	67:6	16	
EXPR_STATEMENT	67:6	67:19	17	status = TRUE ;
EXPR	67:6	67:6	18	status = TRUE
ASSIGN	67:6	67:15	19	status = TRUE
LVAL	67:6	67:6	20	status
FIELD	67:6	67:6	21	status
LEAF_NODE	67:6	67:6	22	status
ASSIGN_OP	67:13	67:13	20	=
LEAF_NODE	67:13	67:13	21	=
RVAL	67:15	67:15	20	TRUE
FIELD	67:15	67:15	21	TRUE
LEAF_NODE	67:15	67:15	22	TRUE
LEAF_NODE	67:19	67:19	18	;
LEAF_NODE	68:4	68:4	14	}
LEAF_NODE	69:3	69:3	11	}
LEAF_NODE	70:2	70:2	8	}
LEAF_NODE	71:1	71:1	5	}
EXPR_STATEMENT	72:1	72:25	3	Tcl_DeleteInterp ( interp ) ;
EXPR	72:1	72:1	4	Tcl_DeleteInterp ( interp )
FUNCTION_CALL	72:1	72:24	5	Tcl_DeleteInterp ( interp )
CALLEE	72:1	72:1	6	Tcl_DeleteInterp
LEAF_NODE	72:1	72:1	7	Tcl_DeleteInterp
LEAF_NODE	72:17	72:17	6	(
ARGUMENT	72:18	72:18	6	interp
FIELD	72:18	72:18	7	interp
LEAF_NODE	72:18	72:18	8	interp
LEAF_NODE	72:24	72:24	6	)
LEAF_NODE	72:25	72:25	4	;
EXPR_STATEMENT	73:1	73:12	3	g_free ( buf ) ;
EXPR	73:1	73:1	4	g_free ( buf )
FUNCTION_CALL	73:1	73:11	5	g_free ( buf )
CALLEE	73:1	73:1	6	g_free
LEAF_NODE	73:1	73:1	7	g_free
LEAF_NODE	73:7	73:7	6	(
ARGUMENT	73:8	73:8	6	buf
FIELD	73:8	73:8	7	buf
LEAF_NODE	73:8	73:8	8	buf
LEAF_NODE	73:11	73:11	6	)
LEAF_NODE	73:12	73:12	4	;
JUMP_STATEMENT	74:1	74:14	3	return status ;
KEYWORD	74:1	74:1	4	return
LEAF_NODE	74:1	74:1	5	return
DESTINATION	74:8	74:8	4	status
EXPR	74:8	74:8	5	status
FIELD	74:8	74:8	6	status
LEAF_NODE	74:8	74:8	7	status
LEAF_NODE	74:14	74:14	4	;
LEAF_NODE	75:0	75:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	update_filter_string
LEAF_NODE	2:0	2:0	3	update_filter_string
PARAMETER_LIST	2:20	2:51	2	( GntEntry * entry , gpointer null )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:31	3	GntEntry * entry
TYPE	2:21	2:30	4	GntEntry *
TYPE_NAME	2:21	2:21	5	GntEntry
LEAF_NODE	2:21	2:21	6	GntEntry
POINTER	2:30	2:30	5	*
LEAF_NODE	2:30	2:30	6	*
NAME	2:31	2:31	4	entry
LEAF_NODE	2:31	2:31	5	entry
LEAF_NODE	2:36	2:36	3	,
PARAMETER_DECL	2:38	2:47	3	gpointer null
TYPE	2:38	2:38	4	gpointer
TYPE_NAME	2:38	2:38	5	gpointer
LEAF_NODE	2:38	2:38	6	gpointer
NAME	2:47	2:47	4	null
LEAF_NODE	2:47	2:47	5	null
LEAF_NODE	2:51	2:51	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:46	3	int id ; id = g_timeout_add ( 1000 , for_real , entry ) ;
VAR_DECL	4:1	4:5	4	int id ; id = g_timeout_add ( 1000 , for_real , entry )
TYPE	4:1	4:1	5	int
TYPE_NAME	4:1	4:1	6	int
LEAF_NODE	4:1	4:1	7	int
NAME	4:5	4:5	5	id
LEAF_NODE	4:5	4:5	6	id
LEAF_NODE	0:0	0:0	5	;
INIT	4:5	4:5	5	id = g_timeout_add ( 1000 , for_real , entry )
ASSIGN	4:5	4:10	6	id = g_timeout_add ( 1000 , for_real , entry )
LVAL	4:5	4:5	7	id
NAME	4:5	4:5	8	id
LEAF_NODE	4:5	4:5	9	id
ASSIGN_OP	4:8	4:8	7	=
LEAF_NODE	4:8	4:8	8	=
RVAL	4:10	4:10	7	g_timeout_add ( 1000 , for_real , entry )
FUNCTION_CALL	4:10	4:45	8	g_timeout_add ( 1000 , for_real , entry )
CALLEE	4:10	4:10	9	g_timeout_add
LEAF_NODE	4:10	4:10	10	g_timeout_add
LEAF_NODE	4:23	4:23	9	(
ARGUMENT	4:24	4:24	9	1000
FIELD	4:24	4:24	10	1000
LEAF_NODE	4:24	4:24	11	1000
LEAF_NODE	4:28	4:28	9	,
ARGUMENT	4:30	4:30	9	for_real
FIELD	4:30	4:30	10	for_real
LEAF_NODE	4:30	4:30	11	for_real
LEAF_NODE	4:38	4:38	9	,
ARGUMENT	4:40	4:40	9	entry
FIELD	4:40	4:40	10	entry
LEAF_NODE	4:40	4:40	11	entry
LEAF_NODE	4:45	4:45	9	)
LEAF_NODE	4:46	4:46	4	;
EXPR_STATEMENT	5:1	6:37	3	g_object_set_data_full ( G_OBJECT ( entry ) , "update-filter" , GINT_TO_POINTER ( id ) , ( GDestroyNotify ) g_source_remove ) ;
EXPR	5:1	5:1	4	g_object_set_data_full ( G_OBJECT ( entry ) , "update-filter" , GINT_TO_POINTER ( id ) , ( GDestroyNotify ) g_source_remove )
FUNCTION_CALL	5:1	6:36	5	g_object_set_data_full ( G_OBJECT ( entry ) , "update-filter" , GINT_TO_POINTER ( id ) , ( GDestroyNotify ) g_source_remove )
CALLEE	5:1	5:1	6	g_object_set_data_full
LEAF_NODE	5:1	5:1	7	g_object_set_data_full
LEAF_NODE	5:23	5:23	6	(
ARGUMENT	5:24	5:24	6	G_OBJECT ( entry )
FUNCTION_CALL	5:24	5:38	7	G_OBJECT ( entry )
CALLEE	5:24	5:24	8	G_OBJECT
LEAF_NODE	5:24	5:24	9	G_OBJECT
LEAF_NODE	5:32	5:32	8	(
ARGUMENT	5:33	5:33	8	entry
FIELD	5:33	5:33	9	entry
LEAF_NODE	5:33	5:33	10	entry
LEAF_NODE	5:38	5:38	8	)
LEAF_NODE	5:39	5:39	6	,
ARGUMENT	5:41	5:41	6	"update-filter"
FIELD	5:41	5:41	7	"update-filter"
LEAF_NODE	5:41	5:41	8	"update-filter"
LEAF_NODE	5:56	5:56	6	,
ARGUMENT	5:58	5:58	6	GINT_TO_POINTER ( id )
FUNCTION_CALL	5:58	5:76	7	GINT_TO_POINTER ( id )
CALLEE	5:58	5:58	8	GINT_TO_POINTER
LEAF_NODE	5:58	5:58	9	GINT_TO_POINTER
LEAF_NODE	5:73	5:73	8	(
ARGUMENT	5:74	5:74	8	id
FIELD	5:74	5:74	9	id
LEAF_NODE	5:74	5:74	10	id
LEAF_NODE	5:76	5:76	8	)
LEAF_NODE	5:77	5:77	6	,
ARGUMENT	6:5	6:21	6	( GDestroyNotify ) g_source_remove
LEAF_NODE	6:5	6:5	7	(
TYPE_NAME	6:6	6:6	7	GDestroyNotify
LEAF_NODE	6:6	6:6	8	GDestroyNotify
LEAF_NODE	6:20	6:20	7	)
FIELD	6:21	6:21	7	g_source_remove
LEAF_NODE	6:21	6:21	8	g_source_remove
LEAF_NODE	6:36	6:36	6	)
LEAF_NODE	6:37	6:37	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	22:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	selection_changed_cb
LEAF_NODE	2:0	2:0	3	selection_changed_cb
PARAMETER_LIST	2:20	2:70	2	( GtkTreeSelection * selection , PidginDiscoList * pdl )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:39	3	GtkTreeSelection * selection
TYPE	2:21	2:38	4	GtkTreeSelection *
TYPE_NAME	2:21	2:21	5	GtkTreeSelection
LEAF_NODE	2:21	2:21	6	GtkTreeSelection
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	selection
LEAF_NODE	2:39	2:39	5	selection
LEAF_NODE	2:48	2:48	3	,
PARAMETER_DECL	2:50	2:67	3	PidginDiscoList * pdl
TYPE	2:50	2:66	4	PidginDiscoList *
TYPE_NAME	2:50	2:50	5	PidginDiscoList
LEAF_NODE	2:50	2:50	6	PidginDiscoList
POINTER	2:66	2:66	5	*
LEAF_NODE	2:66	2:66	6	*
NAME	2:67	2:67	4	pdl
LEAF_NODE	2:67	2:67	5	pdl
LEAF_NODE	2:70	2:70	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	18:3	2	
SIMPLE_DECL	4:1	4:17	3	GtkTreeIter iter ;
VAR_DECL	4:1	4:13	4	GtkTreeIter iter
TYPE	4:1	4:1	5	GtkTreeIter
TYPE_NAME	4:1	4:1	6	GtkTreeIter
LEAF_NODE	4:1	4:1	7	GtkTreeIter
NAME	4:13	4:13	5	iter
LEAF_NODE	4:13	4:13	6	iter
LEAF_NODE	4:17	4:17	4	;
SIMPLE_DECL	5:1	5:11	3	GValue val ;
VAR_DECL	5:1	5:8	4	GValue val
TYPE	5:1	5:1	5	GValue
TYPE_NAME	5:1	5:1	6	GValue
LEAF_NODE	5:1	5:1	7	GValue
NAME	5:8	5:8	5	val
LEAF_NODE	5:8	5:8	6	val
LEAF_NODE	5:11	5:11	4	;
SIMPLE_DECL	6:1	6:40	3	PidginDiscoDialog * dialog ; dialog = pdl -> dialog ;
VAR_DECL	6:1	6:20	4	PidginDiscoDialog * dialog ; dialog = pdl -> dialog
TYPE	6:1	6:19	5	PidginDiscoDialog *
TYPE_NAME	6:1	6:1	6	PidginDiscoDialog
LEAF_NODE	6:1	6:1	7	PidginDiscoDialog
POINTER	6:19	6:19	6	*
LEAF_NODE	6:19	6:19	7	*
NAME	6:20	6:20	5	dialog
LEAF_NODE	6:20	6:20	6	dialog
LEAF_NODE	0:0	0:0	5	;
INIT	6:20	6:20	5	dialog = pdl -> dialog
ASSIGN	6:20	6:29	6	dialog = pdl -> dialog
LVAL	6:20	6:20	7	dialog
NAME	6:20	6:20	8	dialog
LEAF_NODE	6:20	6:20	9	dialog
ASSIGN_OP	6:27	6:27	7	=
LEAF_NODE	6:27	6:27	8	=
RVAL	6:29	6:29	7	pdl -> dialog
FIELD	6:29	6:34	8	pdl -> dialog
LEAF_NODE	6:29	6:29	9	pdl
LEAF_NODE	6:32	6:32	9	->
LEAF_NODE	6:34	6:34	9	dialog
LEAF_NODE	6:40	6:40	4	;
SELECTION	7:1	7:62	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	gtk_tree_selection_get_selected ( selection , NULL , & iter )
EXPR	7:5	7:5	5	gtk_tree_selection_get_selected ( selection , NULL , & iter )
FUNCTION_CALL	7:5	7:59	6	gtk_tree_selection_get_selected ( selection , NULL , & iter )
CALLEE	7:5	7:5	7	gtk_tree_selection_get_selected
LEAF_NODE	7:5	7:5	8	gtk_tree_selection_get_selected
LEAF_NODE	7:36	7:36	7	(
ARGUMENT	7:37	7:37	7	selection
FIELD	7:37	7:37	8	selection
LEAF_NODE	7:37	7:37	9	selection
LEAF_NODE	7:46	7:46	7	,
ARGUMENT	7:48	7:48	7	NULL
FIELD	7:48	7:48	8	NULL
LEAF_NODE	7:48	7:48	9	NULL
LEAF_NODE	7:52	7:52	7	,
ARGUMENT	7:54	7:54	7	& iter
UNARY_EXPR	7:54	7:55	8	& iter
UNARY_OPERATOR	7:54	7:54	9	&
LEAF_NODE	7:54	7:54	10	&
FIELD	7:55	7:55	9	iter
LEAF_NODE	7:55	7:55	10	iter
LEAF_NODE	7:59	7:59	7	)
LEAF_NODE	7:60	7:60	4	)
STATEMENTS	7:62	18:1	4	
LEAF_NODE	7:62	7:62	5	{
STATEMENTS	8:2	17:2	5	
EXPR_STATEMENT	8:2	8:16	6	val . g_type = 0 ;
EXPR	8:2	8:2	7	val . g_type = 0
ASSIGN	8:2	8:15	8	val . g_type = 0
LVAL	8:2	8:2	9	val . g_type
FIELD	8:2	8:6	10	val . g_type
LEAF_NODE	8:2	8:2	11	val
LEAF_NODE	8:5	8:5	11	.
LEAF_NODE	8:6	8:6	11	g_type
ASSIGN_OP	8:13	8:13	9	=
LEAF_NODE	8:13	8:13	10	=
RVAL	8:15	8:15	9	0
FIELD	8:15	8:15	10	0
LEAF_NODE	8:15	8:15	11	0
LEAF_NODE	8:16	8:16	7	;
EXPR_STATEMENT	9:2	9:83	6	gtk_tree_model_get_value ( GTK_TREE_MODEL ( pdl -> model ) , & iter , SERVICE_COLUMN , & val ) ;
EXPR	9:2	9:2	7	gtk_tree_model_get_value ( GTK_TREE_MODEL ( pdl -> model ) , & iter , SERVICE_COLUMN , & val )
FUNCTION_CALL	9:2	9:82	8	gtk_tree_model_get_value ( GTK_TREE_MODEL ( pdl -> model ) , & iter , SERVICE_COLUMN , & val )
CALLEE	9:2	9:2	9	gtk_tree_model_get_value
LEAF_NODE	9:2	9:2	10	gtk_tree_model_get_value
LEAF_NODE	9:26	9:26	9	(
ARGUMENT	9:27	9:27	9	GTK_TREE_MODEL ( pdl -> model )
FUNCTION_CALL	9:27	9:52	10	GTK_TREE_MODEL ( pdl -> model )
CALLEE	9:27	9:27	11	GTK_TREE_MODEL
LEAF_NODE	9:27	9:27	12	GTK_TREE_MODEL
LEAF_NODE	9:41	9:41	11	(
ARGUMENT	9:42	9:42	11	pdl -> model
FIELD	9:42	9:47	12	pdl -> model
LEAF_NODE	9:42	9:42	13	pdl
LEAF_NODE	9:45	9:45	13	->
LEAF_NODE	9:47	9:47	13	model
LEAF_NODE	9:52	9:52	11	)
LEAF_NODE	9:53	9:53	9	,
ARGUMENT	9:55	9:55	9	& iter
UNARY_EXPR	9:55	9:56	10	& iter
UNARY_OPERATOR	9:55	9:55	11	&
LEAF_NODE	9:55	9:55	12	&
FIELD	9:56	9:56	11	iter
LEAF_NODE	9:56	9:56	12	iter
LEAF_NODE	9:60	9:60	9	,
ARGUMENT	9:62	9:62	9	SERVICE_COLUMN
FIELD	9:62	9:62	10	SERVICE_COLUMN
LEAF_NODE	9:62	9:62	11	SERVICE_COLUMN
LEAF_NODE	9:76	9:76	9	,
ARGUMENT	9:78	9:78	9	& val
UNARY_EXPR	9:78	9:79	10	& val
UNARY_OPERATOR	9:78	9:78	11	&
LEAF_NODE	9:78	9:78	12	&
FIELD	9:79	9:79	11	val
LEAF_NODE	9:79	9:79	12	val
LEAF_NODE	9:82	9:82	9	)
LEAF_NODE	9:83	9:83	7	;
EXPR_STATEMENT	10:2	10:46	6	dialog -> selected = g_value_get_pointer ( & val ) ;
EXPR	10:2	10:2	7	dialog -> selected = g_value_get_pointer ( & val )
ASSIGN	10:2	10:21	8	dialog -> selected = g_value_get_pointer ( & val )
LVAL	10:2	10:2	9	dialog -> selected
FIELD	10:2	10:10	10	dialog -> selected
LEAF_NODE	10:2	10:2	11	dialog
LEAF_NODE	10:8	10:8	11	->
LEAF_NODE	10:10	10:10	11	selected
ASSIGN_OP	10:19	10:19	9	=
LEAF_NODE	10:19	10:19	10	=
RVAL	10:21	10:21	9	g_value_get_pointer ( & val )
FUNCTION_CALL	10:21	10:45	10	g_value_get_pointer ( & val )
CALLEE	10:21	10:21	11	g_value_get_pointer
LEAF_NODE	10:21	10:21	12	g_value_get_pointer
LEAF_NODE	10:40	10:40	11	(
ARGUMENT	10:41	10:41	11	& val
UNARY_EXPR	10:41	10:42	12	& val
UNARY_OPERATOR	10:41	10:41	13	&
LEAF_NODE	10:41	10:41	14	&
FIELD	10:42	10:42	13	val
LEAF_NODE	10:42	10:42	14	val
LEAF_NODE	10:45	10:45	11	)
LEAF_NODE	10:46	10:46	7	;
SELECTION	11:2	11:25	6	
KEYWORD	11:2	11:2	7	if
LEAF_NODE	11:2	11:2	8	if
LEAF_NODE	11:5	11:5	7	(
CONDITION	11:6	11:6	7	! dialog -> selected
EXPR	11:6	11:6	8	! dialog -> selected
UNARY_EXPR	11:6	11:7	9	! dialog -> selected
UNARY_OPERATOR	11:6	11:6	10	!
LEAF_NODE	11:6	11:6	11	!
FIELD	11:7	11:15	10	dialog -> selected
LEAF_NODE	11:7	11:7	11	dialog
LEAF_NODE	11:13	11:13	11	->
LEAF_NODE	11:15	11:15	11	selected
LEAF_NODE	11:23	11:23	7	)
STATEMENTS	11:25	15:2	7	
LEAF_NODE	11:25	11:25	8	{
STATEMENTS	12:3	14:3	8	
EXPR_STATEMENT	12:3	12:54	9	gtk_widget_set_sensitive ( dialog -> add_button , FALSE ) ;
EXPR	12:3	12:3	10	gtk_widget_set_sensitive ( dialog -> add_button , FALSE )
FUNCTION_CALL	12:3	12:53	11	gtk_widget_set_sensitive ( dialog -> add_button , FALSE )
CALLEE	12:3	12:3	12	gtk_widget_set_sensitive
LEAF_NODE	12:3	12:3	13	gtk_widget_set_sensitive
LEAF_NODE	12:27	12:27	12	(
ARGUMENT	12:28	12:28	12	dialog -> add_button
FIELD	12:28	12:36	13	dialog -> add_button
LEAF_NODE	12:28	12:28	14	dialog
LEAF_NODE	12:34	12:34	14	->
LEAF_NODE	12:36	12:36	14	add_button
LEAF_NODE	12:46	12:46	12	,
ARGUMENT	12:48	12:48	12	FALSE
FIELD	12:48	12:48	13	FALSE
LEAF_NODE	12:48	12:48	14	FALSE
LEAF_NODE	12:53	12:53	12	)
LEAF_NODE	12:54	12:54	10	;
EXPR_STATEMENT	13:3	13:59	9	gtk_widget_set_sensitive ( dialog -> register_button , FALSE ) ;
EXPR	13:3	13:3	10	gtk_widget_set_sensitive ( dialog -> register_button , FALSE )
FUNCTION_CALL	13:3	13:58	11	gtk_widget_set_sensitive ( dialog -> register_button , FALSE )
CALLEE	13:3	13:3	12	gtk_widget_set_sensitive
LEAF_NODE	13:3	13:3	13	gtk_widget_set_sensitive
LEAF_NODE	13:27	13:27	12	(
ARGUMENT	13:28	13:28	12	dialog -> register_button
FIELD	13:28	13:36	13	dialog -> register_button
LEAF_NODE	13:28	13:28	14	dialog
LEAF_NODE	13:34	13:34	14	->
LEAF_NODE	13:36	13:36	14	register_button
LEAF_NODE	13:51	13:51	12	,
ARGUMENT	13:53	13:53	12	FALSE
FIELD	13:53	13:53	13	FALSE
LEAF_NODE	13:53	13:53	14	FALSE
LEAF_NODE	13:58	13:58	12	)
LEAF_NODE	13:59	13:59	10	;
JUMP_STATEMENT	14:3	14:9	9	return DESTINATION ;
KEYWORD	14:3	14:3	10	return
LEAF_NODE	14:3	14:3	11	return
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	14:9	14:9	10	;
LEAF_NODE	15:2	15:2	8	}
EXPR_STATEMENT	16:2	16:88	6	gtk_widget_set_sensitive ( dialog -> add_button , dialog -> selected -> flags & XMPP_DISCO_ADD ) ;
EXPR	16:2	16:2	7	gtk_widget_set_sensitive ( dialog -> add_button , dialog -> selected -> flags & XMPP_DISCO_ADD )
FUNCTION_CALL	16:2	16:87	8	gtk_widget_set_sensitive ( dialog -> add_button , dialog -> selected -> flags & XMPP_DISCO_ADD )
CALLEE	16:2	16:2	9	gtk_widget_set_sensitive
LEAF_NODE	16:2	16:2	10	gtk_widget_set_sensitive
LEAF_NODE	16:26	16:26	9	(
ARGUMENT	16:27	16:27	9	dialog -> add_button
FIELD	16:27	16:35	10	dialog -> add_button
LEAF_NODE	16:27	16:27	11	dialog
LEAF_NODE	16:33	16:33	11	->
LEAF_NODE	16:35	16:35	11	add_button
LEAF_NODE	16:45	16:45	9	,
ARGUMENT	16:47	16:73	9	dialog -> selected -> flags & XMPP_DISCO_ADD
FIELD	16:47	16:65	10	dialog -> selected -> flags
LEAF_NODE	16:47	16:47	11	dialog
LEAF_NODE	16:53	16:53	11	->
LEAF_NODE	16:55	16:55	11	selected
LEAF_NODE	16:63	16:63	11	->
LEAF_NODE	16:65	16:65	11	flags
LEAF_NODE	16:71	16:71	10	&
FIELD	16:73	16:73	10	XMPP_DISCO_ADD
LEAF_NODE	16:73	16:73	11	XMPP_DISCO_ADD
LEAF_NODE	16:87	16:87	9	)
LEAF_NODE	16:88	16:88	7	;
EXPR_STATEMENT	17:2	17:98	6	gtk_widget_set_sensitive ( dialog -> register_button , dialog -> selected -> flags & XMPP_DISCO_REGISTER ) ;
EXPR	17:2	17:2	7	gtk_widget_set_sensitive ( dialog -> register_button , dialog -> selected -> flags & XMPP_DISCO_REGISTER )
FUNCTION_CALL	17:2	17:97	8	gtk_widget_set_sensitive ( dialog -> register_button , dialog -> selected -> flags & XMPP_DISCO_REGISTER )
CALLEE	17:2	17:2	9	gtk_widget_set_sensitive
LEAF_NODE	17:2	17:2	10	gtk_widget_set_sensitive
LEAF_NODE	17:26	17:26	9	(
ARGUMENT	17:27	17:27	9	dialog -> register_button
FIELD	17:27	17:35	10	dialog -> register_button
LEAF_NODE	17:27	17:27	11	dialog
LEAF_NODE	17:33	17:33	11	->
LEAF_NODE	17:35	17:35	11	register_button
LEAF_NODE	17:50	17:50	9	,
ARGUMENT	17:52	17:78	9	dialog -> selected -> flags & XMPP_DISCO_REGISTER
FIELD	17:52	17:70	10	dialog -> selected -> flags
LEAF_NODE	17:52	17:52	11	dialog
LEAF_NODE	17:58	17:58	11	->
LEAF_NODE	17:60	17:60	11	selected
LEAF_NODE	17:68	17:68	11	->
LEAF_NODE	17:70	17:70	11	flags
LEAF_NODE	17:76	17:76	10	&
FIELD	17:78	17:78	10	XMPP_DISCO_REGISTER
LEAF_NODE	17:78	17:78	11	XMPP_DISCO_REGISTER
LEAF_NODE	17:97	17:97	9	)
LEAF_NODE	17:98	17:98	7	;
LEAF_NODE	18:1	18:1	5	}
SELECTION	18:3	18:8	3	
KEYWORD	18:3	18:3	4	else
LEAF_NODE	18:3	18:3	5	else
STATEMENTS	18:8	21:1	4	
LEAF_NODE	18:8	18:8	5	{
STATEMENTS	19:2	20:2	5	
EXPR_STATEMENT	19:2	19:53	6	gtk_widget_set_sensitive ( dialog -> add_button , FALSE ) ;
EXPR	19:2	19:2	7	gtk_widget_set_sensitive ( dialog -> add_button , FALSE )
FUNCTION_CALL	19:2	19:52	8	gtk_widget_set_sensitive ( dialog -> add_button , FALSE )
CALLEE	19:2	19:2	9	gtk_widget_set_sensitive
LEAF_NODE	19:2	19:2	10	gtk_widget_set_sensitive
LEAF_NODE	19:26	19:26	9	(
ARGUMENT	19:27	19:27	9	dialog -> add_button
FIELD	19:27	19:35	10	dialog -> add_button
LEAF_NODE	19:27	19:27	11	dialog
LEAF_NODE	19:33	19:33	11	->
LEAF_NODE	19:35	19:35	11	add_button
LEAF_NODE	19:45	19:45	9	,
ARGUMENT	19:47	19:47	9	FALSE
FIELD	19:47	19:47	10	FALSE
LEAF_NODE	19:47	19:47	11	FALSE
LEAF_NODE	19:52	19:52	9	)
LEAF_NODE	19:53	19:53	7	;
EXPR_STATEMENT	20:2	20:58	6	gtk_widget_set_sensitive ( dialog -> register_button , FALSE ) ;
EXPR	20:2	20:2	7	gtk_widget_set_sensitive ( dialog -> register_button , FALSE )
FUNCTION_CALL	20:2	20:57	8	gtk_widget_set_sensitive ( dialog -> register_button , FALSE )
CALLEE	20:2	20:2	9	gtk_widget_set_sensitive
LEAF_NODE	20:2	20:2	10	gtk_widget_set_sensitive
LEAF_NODE	20:26	20:26	9	(
ARGUMENT	20:27	20:27	9	dialog -> register_button
FIELD	20:27	20:35	10	dialog -> register_button
LEAF_NODE	20:27	20:27	11	dialog
LEAF_NODE	20:33	20:33	11	->
LEAF_NODE	20:35	20:35	11	register_button
LEAF_NODE	20:50	20:50	9	,
ARGUMENT	20:52	20:52	9	FALSE
FIELD	20:52	20:52	10	FALSE
LEAF_NODE	20:52	20:52	11	FALSE
LEAF_NODE	20:57	20:57	9	)
LEAF_NODE	20:58	20:58	7	;
LEAF_NODE	21:1	21:1	5	}
LEAF_NODE	22:0	22:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	reset_binding_window
LEAF_NODE	2:0	2:0	3	reset_binding_window
PARAMETER_LIST	2:20	2:57	2	( GntBindableClass * window , gpointer k )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:39	3	GntBindableClass * window
TYPE	2:21	2:38	4	GntBindableClass *
TYPE_NAME	2:21	2:21	5	GntBindableClass
LEAF_NODE	2:21	2:21	6	GntBindableClass
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	window
LEAF_NODE	2:39	2:39	5	window
LEAF_NODE	2:45	2:45	3	,
PARAMETER_DECL	2:47	2:56	3	gpointer k
TYPE	2:47	2:47	4	gpointer
TYPE_NAME	2:47	2:47	5	gpointer
LEAF_NODE	2:47	2:47	6	gpointer
NAME	2:56	2:56	4	k
LEAF_NODE	2:56	2:56	5	k
LEAF_NODE	2:57	2:57	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:48	3	GntBindableClass * klass ; klass = GNT_BINDABLE_CLASS ( k ) ;
VAR_DECL	4:1	4:19	4	GntBindableClass * klass ; klass = GNT_BINDABLE_CLASS ( k )
TYPE	4:1	4:18	5	GntBindableClass *
TYPE_NAME	4:1	4:1	6	GntBindableClass
LEAF_NODE	4:1	4:1	7	GntBindableClass
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	klass
LEAF_NODE	4:19	4:19	6	klass
LEAF_NODE	0:0	0:0	5	;
INIT	4:19	4:19	5	klass = GNT_BINDABLE_CLASS ( k )
ASSIGN	4:19	4:27	6	klass = GNT_BINDABLE_CLASS ( k )
LVAL	4:19	4:19	7	klass
NAME	4:19	4:19	8	klass
LEAF_NODE	4:19	4:19	9	klass
ASSIGN_OP	4:25	4:25	7	=
LEAF_NODE	4:25	4:25	8	=
RVAL	4:27	4:27	7	GNT_BINDABLE_CLASS ( k )
FUNCTION_CALL	4:27	4:47	8	GNT_BINDABLE_CLASS ( k )
CALLEE	4:27	4:27	9	GNT_BINDABLE_CLASS
LEAF_NODE	4:27	4:27	10	GNT_BINDABLE_CLASS
LEAF_NODE	4:45	4:45	9	(
ARGUMENT	4:46	4:46	9	k
FIELD	4:46	4:46	10	k
LEAF_NODE	4:46	4:46	11	k
LEAF_NODE	4:47	4:47	9	)
LEAF_NODE	4:48	4:48	4	;
EXPR_STATEMENT	5:1	5:26	3	klass -> help_window = NULL ;
EXPR	5:1	5:1	4	klass -> help_window = NULL
ASSIGN	5:1	5:22	5	klass -> help_window = NULL
LVAL	5:1	5:1	6	klass -> help_window
FIELD	5:1	5:8	7	klass -> help_window
LEAF_NODE	5:1	5:1	8	klass
LEAF_NODE	5:6	5:6	8	->
LEAF_NODE	5:8	5:8	8	help_window
ASSIGN_OP	5:20	5:20	6	=
LEAF_NODE	5:20	5:20	7	=
RVAL	5:22	5:22	6	NULL
FIELD	5:22	5:22	7	NULL
LEAF_NODE	5:22	5:22	8	NULL
LEAF_NODE	5:26	5:26	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	40:0	1	
RETURN_TYPE	1:0	1:0	2	gboolean
TYPE_NAME	1:0	1:0	3	gboolean
LEAF_NODE	1:0	1:0	4	gboolean
FUNCTION_NAME	2:0	2:0	2	purple_privacy_permit_remove
LEAF_NODE	2:0	2:0	3	purple_privacy_permit_remove
PARAMETER_LIST	2:28	3:28	2	( PurpleAccount * account , const char * who , gboolean local_only )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:44	3	PurpleAccount * account
TYPE	2:29	2:43	4	PurpleAccount *
TYPE_NAME	2:29	2:29	5	PurpleAccount
LEAF_NODE	2:29	2:29	6	PurpleAccount
POINTER	2:43	2:43	5	*
LEAF_NODE	2:43	2:43	6	*
NAME	2:44	2:44	4	account
LEAF_NODE	2:44	2:44	5	account
LEAF_NODE	2:51	2:51	3	,
PARAMETER_DECL	2:53	2:65	3	const char * who
TYPE	2:53	2:64	4	const char *
TYPE_NAME	2:53	2:59	5	const char
LEAF_NODE	2:53	2:53	6	const
LEAF_NODE	2:59	2:59	6	char
POINTER	2:64	2:64	5	*
LEAF_NODE	2:64	2:64	6	*
NAME	2:65	2:65	4	who
LEAF_NODE	2:65	2:65	5	who
LEAF_NODE	2:68	2:68	3	,
PARAMETER_DECL	3:9	3:18	3	gboolean local_only
TYPE	3:9	3:9	4	gboolean
TYPE_NAME	3:9	3:9	5	gboolean
LEAF_NODE	3:9	3:9	6	gboolean
NAME	3:18	3:18	4	local_only
LEAF_NODE	3:18	3:18	5	local_only
LEAF_NODE	3:28	3:28	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	39:1	2	
SIMPLE_DECL	5:1	5:10	3	GSList * l ;
VAR_DECL	5:1	5:9	4	GSList * l
TYPE	5:1	5:8	5	GSList *
TYPE_NAME	5:1	5:1	6	GSList
LEAF_NODE	5:1	5:1	7	GSList
POINTER	5:8	5:8	6	*
LEAF_NODE	5:8	5:8	7	*
NAME	5:9	5:9	5	l
LEAF_NODE	5:9	5:9	6	l
LEAF_NODE	5:10	5:10	4	;
SIMPLE_DECL	6:1	6:17	3	const char * name ;
VAR_DECL	6:1	6:13	4	const char * name
TYPE	6:1	6:12	5	const char *
TYPE_NAME	6:1	6:7	6	const char
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	char
POINTER	6:12	6:12	6	*
LEAF_NODE	6:12	6:12	7	*
NAME	6:13	6:13	5	name
LEAF_NODE	6:13	6:13	6	name
LEAF_NODE	6:17	6:17	4	;
SIMPLE_DECL	7:1	7:19	3	PurpleBuddy * buddy ;
VAR_DECL	7:1	7:14	4	PurpleBuddy * buddy
TYPE	7:1	7:13	5	PurpleBuddy *
TYPE_NAME	7:1	7:1	6	PurpleBuddy
LEAF_NODE	7:1	7:1	7	PurpleBuddy
POINTER	7:13	7:13	6	*
LEAF_NODE	7:13	7:13	7	*
NAME	7:14	7:14	5	buddy
LEAF_NODE	7:14	7:14	6	buddy
LEAF_NODE	7:19	7:19	4	;
SIMPLE_DECL	8:1	8:10	3	char * del ;
VAR_DECL	8:1	8:7	4	char * del
TYPE	8:1	8:6	5	char *
TYPE_NAME	8:1	8:1	6	char
LEAF_NODE	8:1	8:1	7	char
POINTER	8:6	8:6	6	*
LEAF_NODE	8:6	8:6	7	*
NAME	8:7	8:7	5	del
LEAF_NODE	8:7	8:7	6	del
LEAF_NODE	8:10	8:10	4	;
SIMPLE_DECL	9:1	9:28	3	PurpleBlistUiOps * blist_ops ;
VAR_DECL	9:1	9:19	4	PurpleBlistUiOps * blist_ops
TYPE	9:1	9:18	5	PurpleBlistUiOps *
TYPE_NAME	9:1	9:1	6	PurpleBlistUiOps
LEAF_NODE	9:1	9:1	7	PurpleBlistUiOps
POINTER	9:18	9:18	6	*
LEAF_NODE	9:18	9:18	7	*
NAME	9:19	9:19	5	blist_ops
LEAF_NODE	9:19	9:19	6	blist_ops
LEAF_NODE	9:28	9:28	4	;
EXPR_STATEMENT	10:1	10:45	3	g_return_val_if_fail ( account != NULL , FALSE ) ;
EXPR	10:1	10:1	4	g_return_val_if_fail ( account != NULL , FALSE )
FUNCTION_CALL	10:1	10:44	5	g_return_val_if_fail ( account != NULL , FALSE )
CALLEE	10:1	10:1	6	g_return_val_if_fail
LEAF_NODE	10:1	10:1	7	g_return_val_if_fail
LEAF_NODE	10:21	10:21	6	(
ARGUMENT	10:22	10:33	6	account != NULL
FIELD	10:22	10:22	7	account
LEAF_NODE	10:22	10:22	8	account
EQ_OPERATOR	10:30	10:30	7	!=
LEAF_NODE	10:30	10:30	8	!=
FIELD	10:33	10:33	7	NULL
LEAF_NODE	10:33	10:33	8	NULL
LEAF_NODE	10:37	10:37	6	,
ARGUMENT	10:39	10:39	6	FALSE
FIELD	10:39	10:39	7	FALSE
LEAF_NODE	10:39	10:39	8	FALSE
LEAF_NODE	10:44	10:44	6	)
LEAF_NODE	10:45	10:45	4	;
EXPR_STATEMENT	11:1	11:45	3	g_return_val_if_fail ( who != NULL , FALSE ) ;
EXPR	11:1	11:1	4	g_return_val_if_fail ( who != NULL , FALSE )
FUNCTION_CALL	11:1	11:44	5	g_return_val_if_fail ( who != NULL , FALSE )
CALLEE	11:1	11:1	6	g_return_val_if_fail
LEAF_NODE	11:1	11:1	7	g_return_val_if_fail
LEAF_NODE	11:21	11:21	6	(
ARGUMENT	11:22	11:33	6	who != NULL
FIELD	11:22	11:22	7	who
LEAF_NODE	11:22	11:22	8	who
EQ_OPERATOR	11:30	11:30	7	!=
LEAF_NODE	11:30	11:30	8	!=
FIELD	11:33	11:33	7	NULL
LEAF_NODE	11:33	11:33	8	NULL
LEAF_NODE	11:37	11:37	6	,
ARGUMENT	11:39	11:39	6	FALSE
FIELD	11:39	11:39	7	FALSE
LEAF_NODE	11:39	11:39	8	FALSE
LEAF_NODE	11:44	11:44	6	)
LEAF_NODE	11:45	11:45	4	;
EXPR_STATEMENT	12:1	12:38	3	name = purple_normalize ( account , who ) ;
EXPR	12:1	12:1	4	name = purple_normalize ( account , who )
ASSIGN	12:1	12:8	5	name = purple_normalize ( account , who )
LVAL	12:1	12:1	6	name
FIELD	12:1	12:1	7	name
LEAF_NODE	12:1	12:1	8	name
ASSIGN_OP	12:6	12:6	6	=
LEAF_NODE	12:6	12:6	7	=
RVAL	12:8	12:8	6	purple_normalize ( account , who )
FUNCTION_CALL	12:8	12:37	7	purple_normalize ( account , who )
CALLEE	12:8	12:8	8	purple_normalize
LEAF_NODE	12:8	12:8	9	purple_normalize
LEAF_NODE	12:24	12:24	8	(
ARGUMENT	12:25	12:25	8	account
FIELD	12:25	12:25	9	account
LEAF_NODE	12:25	12:25	10	account
LEAF_NODE	12:32	12:32	8	,
ARGUMENT	12:34	12:34	8	who
FIELD	12:34	12:34	9	who
LEAF_NODE	12:34	12:34	10	who
LEAF_NODE	12:37	12:37	8	)
LEAF_NODE	12:38	12:38	4	;
ITERATION	13:1	13:51	3	
KEYWORD	13:1	13:1	4	for
LEAF_NODE	13:1	13:1	5	for
LEAF_NODE	13:5	13:5	4	(
FOR_INIT	13:6	13:25	4	l = account -> permit ;
EXPR	13:6	13:6	5	l = account -> permit
ASSIGN	13:6	13:10	6	l = account -> permit
LVAL	13:6	13:6	7	l
FIELD	13:6	13:6	8	l
LEAF_NODE	13:6	13:6	9	l
ASSIGN_OP	13:8	13:8	7	=
LEAF_NODE	13:8	13:8	8	=
RVAL	13:10	13:10	7	account -> permit
FIELD	13:10	13:19	8	account -> permit
LEAF_NODE	13:10	13:10	9	account
LEAF_NODE	13:17	13:17	9	->
LEAF_NODE	13:19	13:19	9	permit
LEAF_NODE	13:25	13:25	5	;
CONDITION	13:27	13:27	4	l != NULL
EXPR	13:27	13:32	5	l != NULL
FIELD	13:27	13:27	6	l
LEAF_NODE	13:27	13:27	7	l
EQ_OPERATOR	13:29	13:29	6	!=
LEAF_NODE	13:29	13:29	7	!=
FIELD	13:32	13:32	6	NULL
LEAF_NODE	13:32	13:32	7	NULL
LEAF_NODE	13:36	13:36	4	;
FOR_EXPR	13:38	13:38	4	l = l -> next
EXPR	13:38	13:38	5	l = l -> next
ASSIGN	13:38	13:42	6	l = l -> next
LVAL	13:38	13:38	7	l
FIELD	13:38	13:38	8	l
LEAF_NODE	13:38	13:38	9	l
ASSIGN_OP	13:40	13:40	7	=
LEAF_NODE	13:40	13:40	8	=
RVAL	13:42	13:42	7	l -> next
FIELD	13:42	13:45	8	l -> next
LEAF_NODE	13:42	13:42	9	l
LEAF_NODE	13:43	13:43	9	->
LEAF_NODE	13:45	13:45	9	next
LEAF_NODE	13:49	13:49	4	)
STATEMENTS	13:51	17:1	4	
LEAF_NODE	13:51	13:51	5	{
STATEMENTS	14:2	14:2	5	
SELECTION	14:2	16:3	6	
KEYWORD	14:2	14:2	7	if
LEAF_NODE	14:2	14:2	8	if
LEAF_NODE	14:5	14:5	7	(
CONDITION	14:6	14:6	7	g_str_equal ( name , l -> data )
EXPR	14:6	14:6	8	g_str_equal ( name , l -> data )
FUNCTION_CALL	14:6	14:31	9	g_str_equal ( name , l -> data )
CALLEE	14:6	14:6	10	g_str_equal
LEAF_NODE	14:6	14:6	11	g_str_equal
LEAF_NODE	14:17	14:17	10	(
ARGUMENT	14:18	14:18	10	name
FIELD	14:18	14:18	11	name
LEAF_NODE	14:18	14:18	12	name
LEAF_NODE	14:22	14:22	10	,
ARGUMENT	14:24	14:24	10	l -> data
FIELD	14:24	14:27	11	l -> data
LEAF_NODE	14:24	14:24	12	l
LEAF_NODE	14:25	14:25	12	->
LEAF_NODE	14:27	14:27	12	data
LEAF_NODE	14:31	14:31	10	)
LEAF_NODE	14:32	14:32	7	)
STATEMENTS	16:3	16:3	7	
JUMP_STATEMENT	16:3	16:8	8	break DESTINATION ;
KEYWORD	16:3	16:3	9	break
LEAF_NODE	16:3	16:3	10	break
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	16:8	16:8	9	;
LEAF_NODE	17:1	17:1	5	}
SELECTION	18:1	20:2	3	
KEYWORD	18:1	18:1	4	if
LEAF_NODE	18:1	18:1	5	if
LEAF_NODE	18:4	18:4	4	(
CONDITION	18:5	18:5	4	l == NULL
EXPR	18:5	18:10	5	l == NULL
FIELD	18:5	18:5	6	l
LEAF_NODE	18:5	18:5	7	l
EQ_OPERATOR	18:7	18:7	6	==
LEAF_NODE	18:7	18:7	7	==
FIELD	18:10	18:10	6	NULL
LEAF_NODE	18:10	18:10	7	NULL
LEAF_NODE	18:14	18:14	4	)
STATEMENTS	20:2	20:2	4	
JUMP_STATEMENT	20:2	20:14	5	return FALSE ;
KEYWORD	20:2	20:2	6	return
LEAF_NODE	20:2	20:2	7	return
DESTINATION	20:9	20:9	6	FALSE
EXPR	20:9	20:9	7	FALSE
FIELD	20:9	20:9	8	FALSE
LEAF_NODE	20:9	20:9	9	FALSE
LEAF_NODE	20:14	20:14	6	;
EXPR_STATEMENT	24:1	24:14	3	del = l -> data ;
EXPR	24:1	24:1	4	del = l -> data
ASSIGN	24:1	24:7	5	del = l -> data
LVAL	24:1	24:1	6	del
FIELD	24:1	24:1	7	del
LEAF_NODE	24:1	24:1	8	del
ASSIGN_OP	24:5	24:5	6	=
LEAF_NODE	24:5	24:5	7	=
RVAL	24:7	24:7	6	l -> data
FIELD	24:7	24:10	7	l -> data
LEAF_NODE	24:7	24:7	8	l
LEAF_NODE	24:8	24:8	8	->
LEAF_NODE	24:10	24:10	8	data
LEAF_NODE	24:14	24:14	4	;
EXPR_STATEMENT	25:1	25:58	3	account -> permit = g_slist_delete_link ( account -> permit , l ) ;
EXPR	25:1	25:1	4	account -> permit = g_slist_delete_link ( account -> permit , l )
ASSIGN	25:1	25:19	5	account -> permit = g_slist_delete_link ( account -> permit , l )
LVAL	25:1	25:1	6	account -> permit
FIELD	25:1	25:10	7	account -> permit
LEAF_NODE	25:1	25:1	8	account
LEAF_NODE	25:8	25:8	8	->
LEAF_NODE	25:10	25:10	8	permit
ASSIGN_OP	25:17	25:17	6	=
LEAF_NODE	25:17	25:17	7	=
RVAL	25:19	25:19	6	g_slist_delete_link ( account -> permit , l )
FUNCTION_CALL	25:19	25:57	7	g_slist_delete_link ( account -> permit , l )
CALLEE	25:19	25:19	8	g_slist_delete_link
LEAF_NODE	25:19	25:19	9	g_slist_delete_link
LEAF_NODE	25:38	25:38	8	(
ARGUMENT	25:39	25:39	8	account -> permit
FIELD	25:39	25:48	9	account -> permit
LEAF_NODE	25:39	25:39	10	account
LEAF_NODE	25:46	25:46	10	->
LEAF_NODE	25:48	25:48	10	permit
LEAF_NODE	25:54	25:54	8	,
ARGUMENT	25:56	25:56	8	l
FIELD	25:56	25:56	9	l
LEAF_NODE	25:56	25:56	10	l
LEAF_NODE	25:57	25:57	8	)
LEAF_NODE	25:58	25:58	4	;
SELECTION	26:1	27:2	3	
KEYWORD	26:1	26:1	4	if
LEAF_NODE	26:1	26:1	5	if
LEAF_NODE	26:4	26:4	4	(
CONDITION	26:5	26:5	4	! local_only && purple_account_is_connected ( account )
EXPR	26:5	26:5	5	! local_only && purple_account_is_connected ( account )
AND	26:5	26:20	6	! local_only && purple_account_is_connected ( account )
EXPR	26:5	26:5	7	! local_only
UNARY_EXPR	26:5	26:6	8	! local_only
UNARY_OPERATOR	26:5	26:5	9	!
LEAF_NODE	26:5	26:5	10	!
FIELD	26:6	26:6	9	local_only
LEAF_NODE	26:6	26:6	10	local_only
LEAF_NODE	26:17	26:17	7	&&
EXPR	26:20	26:20	7	purple_account_is_connected ( account )
FUNCTION_CALL	26:20	26:55	8	purple_account_is_connected ( account )
CALLEE	26:20	26:20	9	purple_account_is_connected
LEAF_NODE	26:20	26:20	10	purple_account_is_connected
LEAF_NODE	26:47	26:47	9	(
ARGUMENT	26:48	26:48	9	account
FIELD	26:48	26:48	10	account
LEAF_NODE	26:48	26:48	11	account
LEAF_NODE	26:55	26:55	9	)
LEAF_NODE	26:56	26:56	4	)
STATEMENTS	27:2	27:2	4	
EXPR_STATEMENT	27:2	27:62	5	serv_rem_permit ( purple_account_get_connection ( account ) , who ) ;
EXPR	27:2	27:2	6	serv_rem_permit ( purple_account_get_connection ( account ) , who )
FUNCTION_CALL	27:2	27:61	7	serv_rem_permit ( purple_account_get_connection ( account ) , who )
CALLEE	27:2	27:2	8	serv_rem_permit
LEAF_NODE	27:2	27:2	9	serv_rem_permit
LEAF_NODE	27:17	27:17	8	(
ARGUMENT	27:18	27:18	8	purple_account_get_connection ( account )
FUNCTION_CALL	27:18	27:55	9	purple_account_get_connection ( account )
CALLEE	27:18	27:18	10	purple_account_get_connection
LEAF_NODE	27:18	27:18	11	purple_account_get_connection
LEAF_NODE	27:47	27:47	10	(
ARGUMENT	27:48	27:48	10	account
FIELD	27:48	27:48	11	account
LEAF_NODE	27:48	27:48	12	account
LEAF_NODE	27:55	27:55	10	)
LEAF_NODE	27:56	27:56	8	,
ARGUMENT	27:58	27:58	8	who
FIELD	27:58	27:58	9	who
LEAF_NODE	27:58	27:58	10	who
LEAF_NODE	27:61	27:61	8	)
LEAF_NODE	27:62	27:62	6	;
SELECTION	28:1	29:2	3	
KEYWORD	28:1	28:1	4	if
LEAF_NODE	28:1	28:1	5	if
LEAF_NODE	28:4	28:4	4	(
CONDITION	28:5	28:5	4	privacy_ops != NULL && privacy_ops -> permit_removed != NULL
EXPR	28:5	28:5	5	privacy_ops != NULL && privacy_ops -> permit_removed != NULL
AND	28:5	28:28	6	privacy_ops != NULL && privacy_ops -> permit_removed != NULL
EXPR	28:5	28:20	7	privacy_ops != NULL
FIELD	28:5	28:5	8	privacy_ops
LEAF_NODE	28:5	28:5	9	privacy_ops
EQ_OPERATOR	28:17	28:17	8	!=
LEAF_NODE	28:17	28:17	9	!=
FIELD	28:20	28:20	8	NULL
LEAF_NODE	28:20	28:20	9	NULL
LEAF_NODE	28:25	28:25	7	&&
EXPR	28:28	28:59	7	privacy_ops -> permit_removed != NULL
FIELD	28:28	28:41	8	privacy_ops -> permit_removed
LEAF_NODE	28:28	28:28	9	privacy_ops
LEAF_NODE	28:39	28:39	9	->
LEAF_NODE	28:41	28:41	9	permit_removed
EQ_OPERATOR	28:56	28:56	8	!=
LEAF_NODE	28:56	28:56	9	!=
FIELD	28:59	28:59	8	NULL
LEAF_NODE	28:59	28:59	9	NULL
LEAF_NODE	28:63	28:63	4	)
STATEMENTS	29:2	29:2	4	
EXPR_STATEMENT	29:2	29:43	5	privacy_ops -> permit_removed ( account , who ) ;
EXPR	29:2	29:2	6	privacy_ops -> permit_removed ( account , who )
FUNCTION_CALL	29:2	29:42	7	privacy_ops -> permit_removed ( account , who )
CALLEE	29:2	29:15	8	privacy_ops -> permit_removed
LEAF_NODE	29:2	29:2	9	privacy_ops
LEAF_NODE	29:13	29:13	9	->
LEAF_NODE	29:15	29:15	9	permit_removed
LEAF_NODE	29:29	29:29	8	(
ARGUMENT	29:30	29:30	8	account
FIELD	29:30	29:30	9	account
LEAF_NODE	29:30	29:30	10	account
LEAF_NODE	29:37	29:37	8	,
ARGUMENT	29:39	29:39	8	who
FIELD	29:39	29:39	9	who
LEAF_NODE	29:39	29:39	10	who
LEAF_NODE	29:42	29:42	8	)
LEAF_NODE	29:43	29:43	6	;
EXPR_STATEMENT	30:1	30:38	3	blist_ops = purple_blist_get_ui_ops ( ) ;
EXPR	30:1	30:1	4	blist_ops = purple_blist_get_ui_ops ( )
ASSIGN	30:1	30:13	5	blist_ops = purple_blist_get_ui_ops ( )
LVAL	30:1	30:1	6	blist_ops
FIELD	30:1	30:1	7	blist_ops
LEAF_NODE	30:1	30:1	8	blist_ops
ASSIGN_OP	30:11	30:11	6	=
LEAF_NODE	30:11	30:11	7	=
RVAL	30:13	30:13	6	purple_blist_get_ui_ops ( )
FUNCTION_CALL	30:13	30:37	7	purple_blist_get_ui_ops ( )
CALLEE	30:13	30:13	8	purple_blist_get_ui_ops
LEAF_NODE	30:13	30:13	9	purple_blist_get_ui_ops
LEAF_NODE	30:36	30:36	8	(
LEAF_NODE	30:37	30:37	8	)
LEAF_NODE	30:38	30:38	4	;
SELECTION	31:1	32:2	3	
KEYWORD	31:1	31:1	4	if
LEAF_NODE	31:1	31:1	5	if
LEAF_NODE	31:4	31:4	4	(
CONDITION	31:5	31:5	4	blist_ops != NULL && blist_ops -> save_account != NULL
EXPR	31:5	31:5	5	blist_ops != NULL && blist_ops -> save_account != NULL
AND	31:5	31:26	6	blist_ops != NULL && blist_ops -> save_account != NULL
EXPR	31:5	31:18	7	blist_ops != NULL
FIELD	31:5	31:5	8	blist_ops
LEAF_NODE	31:5	31:5	9	blist_ops
EQ_OPERATOR	31:15	31:15	8	!=
LEAF_NODE	31:15	31:15	9	!=
FIELD	31:18	31:18	8	NULL
LEAF_NODE	31:18	31:18	9	NULL
LEAF_NODE	31:23	31:23	7	&&
EXPR	31:26	31:53	7	blist_ops -> save_account != NULL
FIELD	31:26	31:37	8	blist_ops -> save_account
LEAF_NODE	31:26	31:26	9	blist_ops
LEAF_NODE	31:35	31:35	9	->
LEAF_NODE	31:37	31:37	9	save_account
EQ_OPERATOR	31:50	31:50	8	!=
LEAF_NODE	31:50	31:50	9	!=
FIELD	31:53	31:53	8	NULL
LEAF_NODE	31:53	31:53	9	NULL
LEAF_NODE	31:57	31:57	4	)
STATEMENTS	32:2	32:2	4	
EXPR_STATEMENT	32:2	32:34	5	blist_ops -> save_account ( account ) ;
EXPR	32:2	32:2	6	blist_ops -> save_account ( account )
FUNCTION_CALL	32:2	32:33	7	blist_ops -> save_account ( account )
CALLEE	32:2	32:13	8	blist_ops -> save_account
LEAF_NODE	32:2	32:2	9	blist_ops
LEAF_NODE	32:11	32:11	9	->
LEAF_NODE	32:13	32:13	9	save_account
LEAF_NODE	32:25	32:25	8	(
ARGUMENT	32:26	32:26	8	account
FIELD	32:26	32:26	9	account
LEAF_NODE	32:26	32:26	10	account
LEAF_NODE	32:33	32:33	8	)
LEAF_NODE	32:34	32:34	6	;
EXPR_STATEMENT	33:1	33:41	3	buddy = purple_find_buddy ( account , name ) ;
EXPR	33:1	33:1	4	buddy = purple_find_buddy ( account , name )
ASSIGN	33:1	33:9	5	buddy = purple_find_buddy ( account , name )
LVAL	33:1	33:1	6	buddy
FIELD	33:1	33:1	7	buddy
LEAF_NODE	33:1	33:1	8	buddy
ASSIGN_OP	33:7	33:7	6	=
LEAF_NODE	33:7	33:7	7	=
RVAL	33:9	33:9	6	purple_find_buddy ( account , name )
FUNCTION_CALL	33:9	33:40	7	purple_find_buddy ( account , name )
CALLEE	33:9	33:9	8	purple_find_buddy
LEAF_NODE	33:9	33:9	9	purple_find_buddy
LEAF_NODE	33:26	33:26	8	(
ARGUMENT	33:27	33:27	8	account
FIELD	33:27	33:27	9	account
LEAF_NODE	33:27	33:27	10	account
LEAF_NODE	33:34	33:34	8	,
ARGUMENT	33:36	33:36	8	name
FIELD	33:36	33:36	9	name
LEAF_NODE	33:36	33:36	10	name
LEAF_NODE	33:40	33:40	8	)
LEAF_NODE	33:41	33:41	4	;
SELECTION	34:1	34:20	3	
KEYWORD	34:1	34:1	4	if
LEAF_NODE	34:1	34:1	5	if
LEAF_NODE	34:4	34:4	4	(
CONDITION	34:5	34:5	4	buddy != NULL
EXPR	34:5	34:14	5	buddy != NULL
FIELD	34:5	34:5	6	buddy
LEAF_NODE	34:5	34:5	7	buddy
EQ_OPERATOR	34:11	34:11	6	!=
LEAF_NODE	34:11	34:11	7	!=
FIELD	34:14	34:14	6	NULL
LEAF_NODE	34:14	34:14	7	NULL
LEAF_NODE	34:18	34:18	4	)
STATEMENTS	34:20	37:1	4	
LEAF_NODE	34:20	34:20	5	{
STATEMENTS	35:2	35:2	5	
EXPR_STATEMENT	35:2	36:47	6	purple_signal_emit ( purple_blist_get_handle ( ) , "buddy-privacy-changed" , buddy ) ;
EXPR	35:2	35:2	7	purple_signal_emit ( purple_blist_get_handle ( ) , "buddy-privacy-changed" , buddy )
FUNCTION_CALL	35:2	36:46	8	purple_signal_emit ( purple_blist_get_handle ( ) , "buddy-privacy-changed" , buddy )
CALLEE	35:2	35:2	9	purple_signal_emit
LEAF_NODE	35:2	35:2	10	purple_signal_emit
LEAF_NODE	35:20	35:20	9	(
ARGUMENT	35:21	35:21	9	purple_blist_get_handle ( )
FUNCTION_CALL	35:21	35:45	10	purple_blist_get_handle ( )
CALLEE	35:21	35:21	11	purple_blist_get_handle
LEAF_NODE	35:21	35:21	12	purple_blist_get_handle
LEAF_NODE	35:44	35:44	11	(
LEAF_NODE	35:45	35:45	11	)
LEAF_NODE	35:46	35:46	9	,
ARGUMENT	36:16	36:16	9	"buddy-privacy-changed"
FIELD	36:16	36:16	10	"buddy-privacy-changed"
LEAF_NODE	36:16	36:16	11	"buddy-privacy-changed"
LEAF_NODE	36:39	36:39	9	,
ARGUMENT	36:41	36:41	9	buddy
FIELD	36:41	36:41	10	buddy
LEAF_NODE	36:41	36:41	11	buddy
LEAF_NODE	36:46	36:46	9	)
LEAF_NODE	36:47	36:47	7	;
LEAF_NODE	37:1	37:1	5	}
EXPR_STATEMENT	38:1	38:12	3	g_free ( del ) ;
EXPR	38:1	38:1	4	g_free ( del )
FUNCTION_CALL	38:1	38:11	5	g_free ( del )
CALLEE	38:1	38:1	6	g_free
LEAF_NODE	38:1	38:1	7	g_free
LEAF_NODE	38:7	38:7	6	(
ARGUMENT	38:8	38:8	6	del
FIELD	38:8	38:8	7	del
LEAF_NODE	38:8	38:8	8	del
LEAF_NODE	38:11	38:11	6	)
LEAF_NODE	38:12	38:12	4	;
JUMP_STATEMENT	39:1	39:12	3	return TRUE ;
KEYWORD	39:1	39:1	4	return
LEAF_NODE	39:1	39:1	5	return
DESTINATION	39:8	39:8	4	TRUE
EXPR	39:8	39:8	5	TRUE
FIELD	39:8	39:8	6	TRUE
LEAF_NODE	39:8	39:8	7	TRUE
LEAF_NODE	39:12	39:12	4	;
LEAF_NODE	40:0	40:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	40:0	1	
RETURN_TYPE	2:0	2:0	2	int
TYPE_NAME	2:0	2:0	3	int
LEAF_NODE	2:0	2:0	4	int
FUNCTION_NAME	2:4	2:4	2	gg_socket_manager_connected
LEAF_NODE	2:4	2:4	3	gg_socket_manager_connected
PARAMETER_LIST	2:31	2:64	2	( void * handle , void * priv , int fd )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:38	3	void * handle
TYPE	2:32	2:37	4	void *
TYPE_NAME	2:32	2:32	5	void
LEAF_NODE	2:32	2:32	6	void
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	handle
LEAF_NODE	2:38	2:38	5	handle
LEAF_NODE	2:44	2:44	3	,
PARAMETER_DECL	2:46	2:52	3	void * priv
TYPE	2:46	2:51	4	void *
TYPE_NAME	2:46	2:46	5	void
LEAF_NODE	2:46	2:46	6	void
POINTER	2:51	2:51	5	*
LEAF_NODE	2:51	2:51	6	*
NAME	2:52	2:52	4	priv
LEAF_NODE	2:52	2:52	5	priv
LEAF_NODE	2:56	2:56	3	,
PARAMETER_DECL	2:58	2:62	3	int fd
TYPE	2:58	2:58	4	int
TYPE_NAME	2:58	2:58	5	int
LEAF_NODE	2:58	2:58	6	int
NAME	2:62	2:62	4	fd
LEAF_NODE	2:62	2:62	5	fd
LEAF_NODE	2:64	2:64	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	39:1	2	
SIMPLE_DECL	4:1	4:31	3	struct gg_session * sess ; sess = priv ;
VAR_DECL	4:1	4:20	4	struct gg_session * sess ; sess = priv
TYPE	4:1	4:19	5	struct gg_session *
TYPE_NAME	4:1	4:8	6	struct gg_session
LEAF_NODE	4:1	4:1	7	struct
LEAF_NODE	4:8	4:8	7	gg_session
POINTER	4:19	4:19	6	*
LEAF_NODE	4:19	4:19	7	*
NAME	4:20	4:20	5	sess
LEAF_NODE	4:20	4:20	6	sess
LEAF_NODE	0:0	0:0	5	;
INIT	4:20	4:20	5	sess = priv
ASSIGN	4:20	4:27	6	sess = priv
LVAL	4:20	4:20	7	sess
NAME	4:20	4:20	8	sess
LEAF_NODE	4:20	4:20	9	sess
ASSIGN_OP	4:25	4:25	7	=
LEAF_NODE	4:25	4:25	8	=
RVAL	4:27	4:27	7	priv
FIELD	4:27	4:27	8	priv
LEAF_NODE	4:27	4:27	9	priv
LEAF_NODE	4:31	4:31	4	;
SIMPLE_DECL	5:1	5:50	3	struct gg_session_private * p ; p = sess -> private_data ;
VAR_DECL	5:1	5:28	4	struct gg_session_private * p ; p = sess -> private_data
TYPE	5:1	5:27	5	struct gg_session_private *
TYPE_NAME	5:1	5:8	6	struct gg_session_private
LEAF_NODE	5:1	5:1	7	struct
LEAF_NODE	5:8	5:8	7	gg_session_private
POINTER	5:27	5:27	6	*
LEAF_NODE	5:27	5:27	7	*
NAME	5:28	5:28	5	p
LEAF_NODE	5:28	5:28	6	p
LEAF_NODE	0:0	0:0	5	;
INIT	5:28	5:28	5	p = sess -> private_data
ASSIGN	5:28	5:32	6	p = sess -> private_data
LVAL	5:28	5:28	7	p
NAME	5:28	5:28	8	p
LEAF_NODE	5:28	5:28	9	p
ASSIGN_OP	5:30	5:30	7	=
LEAF_NODE	5:30	5:30	8	=
RVAL	5:32	5:32	7	sess -> private_data
FIELD	5:32	5:38	8	sess -> private_data
LEAF_NODE	5:32	5:32	9	sess
LEAF_NODE	5:36	5:36	9	->
LEAF_NODE	5:38	5:38	9	private_data
LEAF_NODE	5:50	5:50	4	;
SELECTION	6:1	6:33	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	p -> socket_handle != handle
EXPR	6:5	6:25	5	p -> socket_handle != handle
FIELD	6:5	6:8	6	p -> socket_handle
LEAF_NODE	6:5	6:5	7	p
LEAF_NODE	6:6	6:6	7	->
LEAF_NODE	6:8	6:8	7	socket_handle
EQ_OPERATOR	6:22	6:22	6	!=
LEAF_NODE	6:22	6:22	7	!=
FIELD	6:25	6:25	6	handle
LEAF_NODE	6:25	6:25	7	handle
LEAF_NODE	6:31	6:31	4	)
STATEMENTS	6:33	10:1	4	
LEAF_NODE	6:33	6:33	5	{
STATEMENTS	7:2	9:2	5	
EXPR_STATEMENT	7:2	8:55	6	gg_debug_session ( sess , GG_DEBUG_MISC | GG_DEBUG_ERROR , "// gg_socket_manager_connected() invalid handle\n" ) ;
EXPR	7:2	7:2	7	gg_debug_session ( sess , GG_DEBUG_MISC | GG_DEBUG_ERROR , "// gg_socket_manager_connected() invalid handle\n" )
FUNCTION_CALL	7:2	8:54	8	gg_debug_session ( sess , GG_DEBUG_MISC | GG_DEBUG_ERROR , "// gg_socket_manager_connected() invalid handle\n" )
CALLEE	7:2	7:2	9	gg_debug_session
LEAF_NODE	7:2	7:2	10	gg_debug_session
LEAF_NODE	7:18	7:18	9	(
ARGUMENT	7:19	7:19	9	sess
FIELD	7:19	7:19	10	sess
LEAF_NODE	7:19	7:19	11	sess
LEAF_NODE	7:23	7:23	9	,
ARGUMENT	7:25	7:25	9	GG_DEBUG_MISC | GG_DEBUG_ERROR
BIT_OR	7:25	7:41	10	GG_DEBUG_MISC | GG_DEBUG_ERROR
BIT_OR_ELEM	7:25	7:25	11	GG_DEBUG_MISC
FIELD	7:25	7:25	12	GG_DEBUG_MISC
LEAF_NODE	7:25	7:25	13	GG_DEBUG_MISC
LEAF_NODE	7:39	7:39	11	|
BIT_OR_ELEM	7:41	7:41	11	GG_DEBUG_ERROR
FIELD	7:41	7:41	12	GG_DEBUG_ERROR
LEAF_NODE	7:41	7:41	13	GG_DEBUG_ERROR
LEAF_NODE	7:55	7:55	9	,
ARGUMENT	8:3	8:3	9	"// gg_socket_manager_connected() invalid handle\n"
FIELD	8:3	8:3	10	"// gg_socket_manager_connected() invalid handle\n"
LEAF_NODE	8:3	8:3	11	"// gg_socket_manager_connected() invalid handle\n"
LEAF_NODE	8:54	8:54	9	)
LEAF_NODE	8:55	8:55	7	;
JUMP_STATEMENT	9:2	9:10	6	return 0 ;
KEYWORD	9:2	9:2	7	return
LEAF_NODE	9:2	9:2	8	return
DESTINATION	9:9	9:9	7	0
EXPR	9:9	9:9	8	0
FIELD	9:9	9:9	9	0
LEAF_NODE	9:9	9:9	10	0
LEAF_NODE	9:10	9:10	7	;
LEAF_NODE	10:1	10:1	5	}
EXPR_STATEMENT	11:1	11:14	3	sess -> fd = - 1 ;
EXPR	11:1	11:1	4	sess -> fd = - 1
ASSIGN	11:1	11:12	5	sess -> fd = - 1
LVAL	11:1	11:1	6	sess -> fd
FIELD	11:1	11:7	7	sess -> fd
LEAF_NODE	11:1	11:1	8	sess
LEAF_NODE	11:5	11:5	8	->
LEAF_NODE	11:7	11:7	8	fd
ASSIGN_OP	11:10	11:10	6	=
LEAF_NODE	11:10	11:10	7	=
RVAL	11:12	11:12	6	- 1
UNARY_EXPR	11:12	11:13	7	- 1
UNARY_OPERATOR	11:12	11:12	8	-
LEAF_NODE	11:12	11:12	9	-
FIELD	11:13	11:13	8	1
LEAF_NODE	11:13	11:13	9	1
LEAF_NODE	11:14	11:14	4	;
SELECTION	12:1	12:13	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:4	12:4	4	(
CONDITION	12:5	12:5	4	fd < 0
EXPR	12:5	12:10	5	fd < 0
FIELD	12:5	12:5	6	fd
LEAF_NODE	12:5	12:5	7	fd
REL_OPERATOR	12:8	12:8	6	<
LEAF_NODE	12:8	12:8	7	<
FIELD	12:10	12:10	6	0
LEAF_NODE	12:10	12:10	7	0
LEAF_NODE	12:11	12:11	4	)
STATEMENTS	12:13	18:1	4	
LEAF_NODE	12:13	12:13	5	{
STATEMENTS	13:2	17:2	5	
EXPR_STATEMENT	13:2	14:57	6	gg_debug_session ( sess , GG_DEBUG_MISC | GG_DEBUG_ERROR , "// gg_socket_manager_connected() connection error\n" ) ;
EXPR	13:2	13:2	7	gg_debug_session ( sess , GG_DEBUG_MISC | GG_DEBUG_ERROR , "// gg_socket_manager_connected() connection error\n" )
FUNCTION_CALL	13:2	14:56	8	gg_debug_session ( sess , GG_DEBUG_MISC | GG_DEBUG_ERROR , "// gg_socket_manager_connected() connection error\n" )
CALLEE	13:2	13:2	9	gg_debug_session
LEAF_NODE	13:2	13:2	10	gg_debug_session
LEAF_NODE	13:18	13:18	9	(
ARGUMENT	13:19	13:19	9	sess
FIELD	13:19	13:19	10	sess
LEAF_NODE	13:19	13:19	11	sess
LEAF_NODE	13:23	13:23	9	,
ARGUMENT	13:25	13:25	9	GG_DEBUG_MISC | GG_DEBUG_ERROR
BIT_OR	13:25	13:41	10	GG_DEBUG_MISC | GG_DEBUG_ERROR
BIT_OR_ELEM	13:25	13:25	11	GG_DEBUG_MISC
FIELD	13:25	13:25	12	GG_DEBUG_MISC
LEAF_NODE	13:25	13:25	13	GG_DEBUG_MISC
LEAF_NODE	13:39	13:39	11	|
BIT_OR_ELEM	13:41	13:41	11	GG_DEBUG_ERROR
FIELD	13:41	13:41	12	GG_DEBUG_ERROR
LEAF_NODE	13:41	13:41	13	GG_DEBUG_ERROR
LEAF_NODE	13:55	13:55	9	,
ARGUMENT	14:3	14:3	9	"// gg_socket_manager_connected() connection error\n"
FIELD	14:3	14:3	10	"// gg_socket_manager_connected() connection error\n"
LEAF_NODE	14:3	14:3	11	"// gg_socket_manager_connected() connection error\n"
LEAF_NODE	14:56	14:56	9	)
LEAF_NODE	14:57	14:57	7	;
EXPR_STATEMENT	15:2	15:25	6	p -> socket_handle = NULL ;
EXPR	15:2	15:2	7	p -> socket_handle = NULL
ASSIGN	15:2	15:21	8	p -> socket_handle = NULL
LVAL	15:2	15:2	9	p -> socket_handle
FIELD	15:2	15:5	10	p -> socket_handle
LEAF_NODE	15:2	15:2	11	p
LEAF_NODE	15:3	15:3	11	->
LEAF_NODE	15:5	15:5	11	socket_handle
ASSIGN_OP	15:19	15:19	9	=
LEAF_NODE	15:19	15:19	10	=
RVAL	15:21	15:21	9	NULL
FIELD	15:21	15:21	10	NULL
LEAF_NODE	15:21	15:21	11	NULL
LEAF_NODE	15:25	15:25	7	;
EXPR_STATEMENT	16:2	16:54	6	gg_socket_manager_error ( sess , GG_FAILURE_CONNECTING ) ;
EXPR	16:2	16:2	7	gg_socket_manager_error ( sess , GG_FAILURE_CONNECTING )
FUNCTION_CALL	16:2	16:53	8	gg_socket_manager_error ( sess , GG_FAILURE_CONNECTING )
CALLEE	16:2	16:2	9	gg_socket_manager_error
LEAF_NODE	16:2	16:2	10	gg_socket_manager_error
LEAF_NODE	16:25	16:25	9	(
ARGUMENT	16:26	16:26	9	sess
FIELD	16:26	16:26	10	sess
LEAF_NODE	16:26	16:26	11	sess
LEAF_NODE	16:30	16:30	9	,
ARGUMENT	16:32	16:32	9	GG_FAILURE_CONNECTING
FIELD	16:32	16:32	10	GG_FAILURE_CONNECTING
LEAF_NODE	16:32	16:32	11	GG_FAILURE_CONNECTING
LEAF_NODE	16:53	16:53	9	)
LEAF_NODE	16:54	16:54	7	;
JUMP_STATEMENT	17:2	17:10	6	return 0 ;
KEYWORD	17:2	17:2	7	return
LEAF_NODE	17:2	17:2	8	return
DESTINATION	17:9	17:9	7	0
EXPR	17:9	17:9	8	0
FIELD	17:9	17:9	9	0
LEAF_NODE	17:9	17:9	10	0
LEAF_NODE	17:10	17:10	7	;
LEAF_NODE	18:1	18:1	5	}
SELECTION	19:1	19:55	3	
KEYWORD	19:1	19:1	4	if
LEAF_NODE	19:1	19:1	5	if
LEAF_NODE	19:4	19:4	4	(
CONDITION	19:5	19:5	4	p -> socket_next_state == GG_STATE_TLS_NEGOTIATION
EXPR	19:5	19:29	5	p -> socket_next_state == GG_STATE_TLS_NEGOTIATION
FIELD	19:5	19:8	6	p -> socket_next_state
LEAF_NODE	19:5	19:5	7	p
LEAF_NODE	19:6	19:6	7	->
LEAF_NODE	19:8	19:8	7	socket_next_state
EQ_OPERATOR	19:26	19:26	6	==
LEAF_NODE	19:26	19:26	7	==
FIELD	19:29	19:29	6	GG_STATE_TLS_NEGOTIATION
LEAF_NODE	19:29	19:29	7	GG_STATE_TLS_NEGOTIATION
LEAF_NODE	19:53	19:53	4	)
STATEMENTS	19:55	28:1	4	
LEAF_NODE	19:55	19:55	5	{
STATEMENTS	20:2	20:2	5	
SELECTION	20:2	20:39	6	
KEYWORD	20:2	20:2	7	if
LEAF_NODE	20:2	20:2	8	if
LEAF_NODE	20:5	20:5	7	(
CONDITION	20:6	20:6	7	gg_session_init_ssl ( sess ) == - 1
EXPR	20:6	20:35	8	gg_session_init_ssl ( sess ) == - 1
FUNCTION_CALL	20:6	20:30	9	gg_session_init_ssl ( sess )
CALLEE	20:6	20:6	10	gg_session_init_ssl
LEAF_NODE	20:6	20:6	11	gg_session_init_ssl
LEAF_NODE	20:25	20:25	10	(
ARGUMENT	20:26	20:26	10	sess
FIELD	20:26	20:26	11	sess
LEAF_NODE	20:26	20:26	12	sess
LEAF_NODE	20:30	20:30	10	)
EQ_OPERATOR	20:32	20:32	9	==
LEAF_NODE	20:32	20:32	10	==
UNARY_EXPR	20:35	20:36	9	- 1
UNARY_OPERATOR	20:35	20:35	10	-
LEAF_NODE	20:35	20:35	11	-
FIELD	20:36	20:36	10	1
LEAF_NODE	20:36	20:36	11	1
LEAF_NODE	20:37	20:37	7	)
STATEMENTS	20:39	27:2	7	
LEAF_NODE	20:39	20:39	8	{
STATEMENTS	21:3	26:3	8	
LEAF_NODE	21:3	21:3	9	gg_debug_session
LEAF_NODE	21:19	21:19	9	(
LEAF_NODE	21:20	21:20	9	sess
LEAF_NODE	21:24	21:24	9	,
LEAF_NODE	21:26	21:26	9	GG_DEBUG_MISC
LEAF_NODE	21:40	21:40	9	|
LEAF_NODE	21:42	21:42	9	GG_DEBUG_ERROR
LEAF_NODE	21:56	21:56	9	,
LEAF_NODE	22:4	22:4	9	"// gg_socket_manager_connected() couldn't "
LEAF_NODE	23:4	23:4	9	"initialize ssl\n"
LEAF_NODE	23:22	23:22	9	)
LEAF_NODE	23:23	23:23	9	;
EXPR_STATEMENT	24:3	24:26	9	p -> socket_handle = NULL ;
EXPR	24:3	24:3	10	p -> socket_handle = NULL
ASSIGN	24:3	24:22	11	p -> socket_handle = NULL
LVAL	24:3	24:3	12	p -> socket_handle
FIELD	24:3	24:6	13	p -> socket_handle
LEAF_NODE	24:3	24:3	14	p
LEAF_NODE	24:4	24:4	14	->
LEAF_NODE	24:6	24:6	14	socket_handle
ASSIGN_OP	24:20	24:20	12	=
LEAF_NODE	24:20	24:20	13	=
RVAL	24:22	24:22	12	NULL
FIELD	24:22	24:22	13	NULL
LEAF_NODE	24:22	24:22	14	NULL
LEAF_NODE	24:26	24:26	10	;
EXPR_STATEMENT	25:3	25:48	9	gg_socket_manager_error ( sess , GG_FAILURE_TLS ) ;
EXPR	25:3	25:3	10	gg_socket_manager_error ( sess , GG_FAILURE_TLS )
FUNCTION_CALL	25:3	25:47	11	gg_socket_manager_error ( sess , GG_FAILURE_TLS )
CALLEE	25:3	25:3	12	gg_socket_manager_error
LEAF_NODE	25:3	25:3	13	gg_socket_manager_error
LEAF_NODE	25:26	25:26	12	(
ARGUMENT	25:27	25:27	12	sess
FIELD	25:27	25:27	13	sess
LEAF_NODE	25:27	25:27	14	sess
LEAF_NODE	25:31	25:31	12	,
ARGUMENT	25:33	25:33	12	GG_FAILURE_TLS
FIELD	25:33	25:33	13	GG_FAILURE_TLS
LEAF_NODE	25:33	25:33	14	GG_FAILURE_TLS
LEAF_NODE	25:47	25:47	12	)
LEAF_NODE	25:48	25:48	10	;
JUMP_STATEMENT	26:3	26:11	9	return 0 ;
KEYWORD	26:3	26:3	10	return
LEAF_NODE	26:3	26:3	11	return
DESTINATION	26:10	26:10	10	0
EXPR	26:10	26:10	11	0
FIELD	26:10	26:10	12	0
LEAF_NODE	26:10	26:10	13	0
LEAF_NODE	26:11	26:11	10	;
LEAF_NODE	27:2	27:2	8	}
LEAF_NODE	28:1	28:1	5	}
EXPR_STATEMENT	29:1	29:26	3	p -> socket_is_external = 1 ;
EXPR	29:1	29:1	4	p -> socket_is_external = 1
ASSIGN	29:1	29:25	5	p -> socket_is_external = 1
LVAL	29:1	29:1	6	p -> socket_is_external
FIELD	29:1	29:4	7	p -> socket_is_external
LEAF_NODE	29:1	29:1	8	p
LEAF_NODE	29:2	29:2	8	->
LEAF_NODE	29:4	29:4	8	socket_is_external
ASSIGN_OP	29:23	29:23	6	=
LEAF_NODE	29:23	29:23	7	=
RVAL	29:25	29:25	6	1
FIELD	29:25	29:25	7	1
LEAF_NODE	29:25	29:25	8	1
LEAF_NODE	29:26	29:26	4	;
EXPR_STATEMENT	30:1	30:14	3	sess -> fd = fd ;
EXPR	30:1	30:1	4	sess -> fd = fd
ASSIGN	30:1	30:12	5	sess -> fd = fd
LVAL	30:1	30:1	6	sess -> fd
FIELD	30:1	30:7	7	sess -> fd
LEAF_NODE	30:1	30:1	8	sess
LEAF_NODE	30:5	30:5	8	->
LEAF_NODE	30:7	30:7	8	fd
ASSIGN_OP	30:10	30:10	6	=
LEAF_NODE	30:10	30:10	7	=
RVAL	30:12	30:12	6	fd
FIELD	30:12	30:12	7	fd
LEAF_NODE	30:12	30:12	8	fd
LEAF_NODE	30:14	30:14	4	;
EXPR_STATEMENT	31:1	31:35	3	sess -> timeout = GG_DEFAULT_TIMEOUT ;
EXPR	31:1	31:1	4	sess -> timeout = GG_DEFAULT_TIMEOUT
ASSIGN	31:1	31:17	5	sess -> timeout = GG_DEFAULT_TIMEOUT
LVAL	31:1	31:1	6	sess -> timeout
FIELD	31:1	31:7	7	sess -> timeout
LEAF_NODE	31:1	31:1	8	sess
LEAF_NODE	31:5	31:5	8	->
LEAF_NODE	31:7	31:7	8	timeout
ASSIGN_OP	31:15	31:15	6	=
LEAF_NODE	31:15	31:15	7	=
RVAL	31:17	31:17	6	GG_DEFAULT_TIMEOUT
FIELD	31:17	31:17	7	GG_DEFAULT_TIMEOUT
LEAF_NODE	31:17	31:17	8	GG_DEFAULT_TIMEOUT
LEAF_NODE	31:35	31:35	4	;
EXPR_STATEMENT	32:1	32:35	3	sess -> state = p -> socket_next_state ;
EXPR	32:1	32:1	4	sess -> state = p -> socket_next_state
ASSIGN	32:1	32:15	5	sess -> state = p -> socket_next_state
LVAL	32:1	32:1	6	sess -> state
FIELD	32:1	32:7	7	sess -> state
LEAF_NODE	32:1	32:1	8	sess
LEAF_NODE	32:5	32:5	8	->
LEAF_NODE	32:7	32:7	8	state
ASSIGN_OP	32:13	32:13	6	=
LEAF_NODE	32:13	32:13	7	=
RVAL	32:15	32:15	6	p -> socket_next_state
FIELD	32:15	32:18	7	p -> socket_next_state
LEAF_NODE	32:15	32:15	8	p
LEAF_NODE	32:16	32:16	8	->
LEAF_NODE	32:18	32:18	8	socket_next_state
LEAF_NODE	32:35	32:35	4	;
EXPR_STATEMENT	33:1	34:39	3	gg_debug_session ( sess , GG_DEBUG_MISC , "// next state=%s\n" , gg_debug_state ( p -> socket_next_state ) ) ;
EXPR	33:1	33:1	4	gg_debug_session ( sess , GG_DEBUG_MISC , "// next state=%s\n" , gg_debug_state ( p -> socket_next_state ) )
FUNCTION_CALL	33:1	34:38	5	gg_debug_session ( sess , GG_DEBUG_MISC , "// next state=%s\n" , gg_debug_state ( p -> socket_next_state ) )
CALLEE	33:1	33:1	6	gg_debug_session
LEAF_NODE	33:1	33:1	7	gg_debug_session
LEAF_NODE	33:17	33:17	6	(
ARGUMENT	33:18	33:18	6	sess
FIELD	33:18	33:18	7	sess
LEAF_NODE	33:18	33:18	8	sess
LEAF_NODE	33:22	33:22	6	,
ARGUMENT	33:24	33:24	6	GG_DEBUG_MISC
FIELD	33:24	33:24	7	GG_DEBUG_MISC
LEAF_NODE	33:24	33:24	8	GG_DEBUG_MISC
LEAF_NODE	33:37	33:37	6	,
ARGUMENT	33:39	33:39	6	"// next state=%s\n"
FIELD	33:39	33:39	7	"// next state=%s\n"
LEAF_NODE	33:39	33:39	8	"// next state=%s\n"
LEAF_NODE	33:59	33:59	6	,
ARGUMENT	34:2	34:2	6	gg_debug_state ( p -> socket_next_state )
FUNCTION_CALL	34:2	34:37	7	gg_debug_state ( p -> socket_next_state )
CALLEE	34:2	34:2	8	gg_debug_state
LEAF_NODE	34:2	34:2	9	gg_debug_state
LEAF_NODE	34:16	34:16	8	(
ARGUMENT	34:17	34:17	8	p -> socket_next_state
FIELD	34:17	34:20	9	p -> socket_next_state
LEAF_NODE	34:17	34:17	10	p
LEAF_NODE	34:18	34:18	10	->
LEAF_NODE	34:20	34:20	10	socket_next_state
LEAF_NODE	34:37	34:37	8	)
LEAF_NODE	34:38	34:38	6	)
LEAF_NODE	34:39	34:39	4	;
SELECTION	35:1	36:2	3	
KEYWORD	35:1	35:1	4	if
LEAF_NODE	35:1	35:1	5	if
LEAF_NODE	35:4	35:4	4	(
CONDITION	35:5	35:5	4	p -> socket_next_state == GG_STATE_READING_KEY
EXPR	35:5	35:29	5	p -> socket_next_state == GG_STATE_READING_KEY
FIELD	35:5	35:8	6	p -> socket_next_state
LEAF_NODE	35:5	35:5	7	p
LEAF_NODE	35:6	35:6	7	->
LEAF_NODE	35:8	35:8	7	socket_next_state
EQ_OPERATOR	35:26	35:26	6	==
LEAF_NODE	35:26	35:26	7	==
FIELD	35:29	35:29	6	GG_STATE_READING_KEY
LEAF_NODE	35:29	35:29	7	GG_STATE_READING_KEY
LEAF_NODE	35:49	35:49	4	)
STATEMENTS	36:2	36:2	4	
EXPR_STATEMENT	36:2	36:29	5	sess -> check = GG_CHECK_READ ;
EXPR	36:2	36:2	6	sess -> check = GG_CHECK_READ
ASSIGN	36:2	36:16	7	sess -> check = GG_CHECK_READ
LVAL	36:2	36:2	8	sess -> check
FIELD	36:2	36:8	9	sess -> check
LEAF_NODE	36:2	36:2	10	sess
LEAF_NODE	36:6	36:6	10	->
LEAF_NODE	36:8	36:8	10	check
ASSIGN_OP	36:14	36:14	8	=
LEAF_NODE	36:14	36:14	9	=
RVAL	36:16	36:16	8	GG_CHECK_READ
FIELD	36:16	36:16	9	GG_CHECK_READ
LEAF_NODE	36:16	36:16	10	GG_CHECK_READ
LEAF_NODE	36:29	36:29	6	;
SELECTION	37:1	38:2	3	
KEYWORD	37:1	37:1	4	else
LEAF_NODE	37:1	37:1	5	else
STATEMENTS	38:2	38:2	4	
EXPR_STATEMENT	38:2	38:30	5	sess -> check = GG_CHECK_WRITE ;
EXPR	38:2	38:2	6	sess -> check = GG_CHECK_WRITE
ASSIGN	38:2	38:16	7	sess -> check = GG_CHECK_WRITE
LVAL	38:2	38:2	8	sess -> check
FIELD	38:2	38:8	9	sess -> check
LEAF_NODE	38:2	38:2	10	sess
LEAF_NODE	38:6	38:6	10	->
LEAF_NODE	38:8	38:8	10	check
ASSIGN_OP	38:14	38:14	8	=
LEAF_NODE	38:14	38:14	9	=
RVAL	38:16	38:16	8	GG_CHECK_WRITE
FIELD	38:16	38:16	9	GG_CHECK_WRITE
LEAF_NODE	38:16	38:16	10	GG_CHECK_WRITE
LEAF_NODE	38:30	38:30	6	;
JUMP_STATEMENT	39:1	39:9	3	return 1 ;
KEYWORD	39:1	39:1	4	return
LEAF_NODE	39:1	39:1	5	return
DESTINATION	39:8	39:8	4	1
EXPR	39:8	39:8	5	1
FIELD	39:8	39:8	6	1
LEAF_NODE	39:8	39:8	7	1
LEAF_NODE	39:9	39:9	4	;
LEAF_NODE	40:0	40:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	6:0	1	
RETURN_TYPE	2:0	2:22	2	PurpleSrvTxtQueryData *
TYPE_NAME	2:0	2:0	3	PurpleSrvTxtQueryData
LEAF_NODE	2:0	2:0	4	PurpleSrvTxtQueryData
LEAF_NODE	2:22	2:22	3	*
FUNCTION_NAME	2:23	2:23	2	purple_txt_resolve
LEAF_NODE	2:23	2:23	3	purple_txt_resolve
PARAMETER_LIST	2:41	3:61	2	( const char * owner , const char * domain , PurpleTxtCallback cb , gpointer extradata )
LEAF_NODE	2:41	2:41	3	(
PARAMETER_DECL	2:42	2:54	3	const char * owner
TYPE	2:42	2:53	4	const char *
TYPE_NAME	2:42	2:48	5	const char
LEAF_NODE	2:42	2:42	6	const
LEAF_NODE	2:48	2:48	6	char
POINTER	2:53	2:53	5	*
LEAF_NODE	2:53	2:53	6	*
NAME	2:54	2:54	4	owner
LEAF_NODE	2:54	2:54	5	owner
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	3:1	3:13	3	const char * domain
TYPE	3:1	3:12	4	const char *
TYPE_NAME	3:1	3:7	5	const char
LEAF_NODE	3:1	3:1	6	const
LEAF_NODE	3:7	3:7	6	char
POINTER	3:12	3:12	5	*
LEAF_NODE	3:12	3:12	6	*
NAME	3:13	3:13	4	domain
LEAF_NODE	3:13	3:13	5	domain
LEAF_NODE	3:19	3:19	3	,
PARAMETER_DECL	3:21	3:39	3	PurpleTxtCallback cb
TYPE	3:21	3:21	4	PurpleTxtCallback
TYPE_NAME	3:21	3:21	5	PurpleTxtCallback
LEAF_NODE	3:21	3:21	6	PurpleTxtCallback
NAME	3:39	3:39	4	cb
LEAF_NODE	3:39	3:39	5	cb
LEAF_NODE	3:41	3:41	3	,
PARAMETER_DECL	3:43	3:52	3	gpointer extradata
TYPE	3:43	3:43	4	gpointer
TYPE_NAME	3:43	3:43	5	gpointer
LEAF_NODE	3:43	3:43	6	gpointer
NAME	3:52	3:52	4	extradata
LEAF_NODE	3:52	3:52	5	extradata
LEAF_NODE	3:61	3:61	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	5:1	2	
JUMP_STATEMENT	5:1	5:70	3	return purple_txt_resolve_account ( NULL , owner , domain , cb , extradata ) ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	purple_txt_resolve_account ( NULL , owner , domain , cb , extradata )
EXPR	5:8	5:8	5	purple_txt_resolve_account ( NULL , owner , domain , cb , extradata )
FUNCTION_CALL	5:8	5:69	6	purple_txt_resolve_account ( NULL , owner , domain , cb , extradata )
CALLEE	5:8	5:8	7	purple_txt_resolve_account
LEAF_NODE	5:8	5:8	8	purple_txt_resolve_account
LEAF_NODE	5:34	5:34	7	(
ARGUMENT	5:35	5:35	7	NULL
FIELD	5:35	5:35	8	NULL
LEAF_NODE	5:35	5:35	9	NULL
LEAF_NODE	5:39	5:39	7	,
ARGUMENT	5:41	5:41	7	owner
FIELD	5:41	5:41	8	owner
LEAF_NODE	5:41	5:41	9	owner
LEAF_NODE	5:46	5:46	7	,
ARGUMENT	5:48	5:48	7	domain
FIELD	5:48	5:48	8	domain
LEAF_NODE	5:48	5:48	9	domain
LEAF_NODE	5:54	5:54	7	,
ARGUMENT	5:56	5:56	7	cb
FIELD	5:56	5:56	8	cb
LEAF_NODE	5:56	5:56	9	cb
LEAF_NODE	5:58	5:58	7	,
ARGUMENT	5:60	5:60	7	extradata
FIELD	5:60	5:60	8	extradata
LEAF_NODE	5:60	5:60	9	extradata
LEAF_NODE	5:69	5:69	7	)
LEAF_NODE	5:70	5:70	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	17:0	1	
RETURN_TYPE	1:0	1:0	2	gboolean
TYPE_NAME	1:0	1:0	3	gboolean
LEAF_NODE	1:0	1:0	4	gboolean
FUNCTION_NAME	2:0	2:0	2	purple_conv_custom_smiley_add
LEAF_NODE	2:0	2:0	3	purple_conv_custom_smiley_add
PARAMETER_LIST	2:29	4:22	2	( PurpleConversation * conv , const char * smile , const char * cksum_type , const char * chksum , gboolean remote )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:50	3	PurpleConversation * conv
TYPE	2:30	2:49	4	PurpleConversation *
TYPE_NAME	2:30	2:30	5	PurpleConversation
LEAF_NODE	2:30	2:30	6	PurpleConversation
POINTER	2:49	2:49	5	*
LEAF_NODE	2:49	2:49	6	*
NAME	2:50	2:50	4	conv
LEAF_NODE	2:50	2:50	5	conv
LEAF_NODE	2:54	2:54	3	,
PARAMETER_DECL	2:56	2:68	3	const char * smile
TYPE	2:56	2:67	4	const char *
TYPE_NAME	2:56	2:62	5	const char
LEAF_NODE	2:56	2:56	6	const
LEAF_NODE	2:62	2:62	6	char
POINTER	2:67	2:67	5	*
LEAF_NODE	2:67	2:67	6	*
NAME	2:68	2:68	4	smile
LEAF_NODE	2:68	2:68	5	smile
LEAF_NODE	2:73	2:73	3	,
PARAMETER_DECL	3:28	3:40	3	const char * cksum_type
TYPE	3:28	3:39	4	const char *
TYPE_NAME	3:28	3:34	5	const char
LEAF_NODE	3:28	3:28	6	const
LEAF_NODE	3:34	3:34	6	char
POINTER	3:39	3:39	5	*
LEAF_NODE	3:39	3:39	6	*
NAME	3:40	3:40	4	cksum_type
LEAF_NODE	3:40	3:40	5	cksum_type
LEAF_NODE	3:50	3:50	3	,
PARAMETER_DECL	3:52	3:64	3	const char * chksum
TYPE	3:52	3:63	4	const char *
TYPE_NAME	3:52	3:58	5	const char
LEAF_NODE	3:52	3:52	6	const
LEAF_NODE	3:58	3:58	6	char
POINTER	3:63	3:63	5	*
LEAF_NODE	3:63	3:63	6	*
NAME	3:64	3:64	4	chksum
LEAF_NODE	3:64	3:64	5	chksum
LEAF_NODE	3:70	3:70	3	,
PARAMETER_DECL	4:7	4:16	3	gboolean remote
TYPE	4:7	4:7	4	gboolean
TYPE_NAME	4:7	4:7	5	gboolean
LEAF_NODE	4:7	4:7	6	gboolean
NAME	4:16	4:16	4	remote
LEAF_NODE	4:16	4:16	5	remote
LEAF_NODE	4:22	4:22	3	)
LEAF_NODE	5:0	5:0	2	{
STATEMENTS	6:1	13:3	2	
SELECTION	6:1	6:47	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	conv == NULL || smile == NULL || ! * smile
EXPR	6:5	6:5	5	conv == NULL || smile == NULL || ! * smile
OR	6:5	6:21	6	conv == NULL || smile == NULL || ! * smile
EXPR	6:5	6:13	7	conv == NULL
FIELD	6:5	6:5	8	conv
LEAF_NODE	6:5	6:5	9	conv
EQ_OPERATOR	6:10	6:10	8	==
LEAF_NODE	6:10	6:10	9	==
FIELD	6:13	6:13	8	NULL
LEAF_NODE	6:13	6:13	9	NULL
LEAF_NODE	6:18	6:18	7	||
EXPR	6:21	6:21	7	smile == NULL || ! * smile
OR	6:21	6:38	8	smile == NULL || ! * smile
EXPR	6:21	6:30	9	smile == NULL
FIELD	6:21	6:21	10	smile
LEAF_NODE	6:21	6:21	11	smile
EQ_OPERATOR	6:27	6:27	10	==
LEAF_NODE	6:27	6:27	11	==
FIELD	6:30	6:30	10	NULL
LEAF_NODE	6:30	6:30	11	NULL
LEAF_NODE	6:35	6:35	9	||
EXPR	6:38	6:38	9	! * smile
UNARY_EXPR	6:38	6:40	10	! * smile
UNARY_OPERATOR	6:38	6:38	11	!
LEAF_NODE	6:38	6:38	12	!
UNARY_OPERATOR	6:39	6:39	11	*
LEAF_NODE	6:39	6:39	12	*
FIELD	6:40	6:40	11	smile
LEAF_NODE	6:40	6:40	12	smile
LEAF_NODE	6:45	6:45	4	)
STATEMENTS	6:47	8:1	4	
LEAF_NODE	6:47	6:47	5	{
STATEMENTS	7:2	7:2	5	
JUMP_STATEMENT	7:2	7:14	6	return FALSE ;
KEYWORD	7:2	7:2	7	return
LEAF_NODE	7:2	7:2	8	return
DESTINATION	7:9	7:9	7	FALSE
EXPR	7:9	7:9	8	FALSE
FIELD	7:9	7:9	9	FALSE
LEAF_NODE	7:9	7:9	10	FALSE
LEAF_NODE	7:14	7:14	7	;
LEAF_NODE	8:1	8:1	5	}
SELECTION	11:1	11:69	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	conv -> ui_ops != NULL && conv -> ui_ops -> custom_smiley_add != NULL
EXPR	11:5	11:5	5	conv -> ui_ops != NULL && conv -> ui_ops -> custom_smiley_add != NULL
AND	11:5	11:29	6	conv -> ui_ops != NULL && conv -> ui_ops -> custom_smiley_add != NULL
EXPR	11:5	11:21	7	conv -> ui_ops != NULL
FIELD	11:5	11:11	8	conv -> ui_ops
LEAF_NODE	11:5	11:5	9	conv
LEAF_NODE	11:9	11:9	9	->
LEAF_NODE	11:11	11:11	9	ui_ops
EQ_OPERATOR	11:18	11:18	8	!=
LEAF_NODE	11:18	11:18	9	!=
FIELD	11:21	11:21	8	NULL
LEAF_NODE	11:21	11:21	9	NULL
LEAF_NODE	11:26	11:26	7	&&
EXPR	11:29	11:63	7	conv -> ui_ops -> custom_smiley_add != NULL
FIELD	11:29	11:43	8	conv -> ui_ops -> custom_smiley_add
LEAF_NODE	11:29	11:29	9	conv
LEAF_NODE	11:33	11:33	9	->
LEAF_NODE	11:35	11:35	9	ui_ops
LEAF_NODE	11:41	11:41	9	->
LEAF_NODE	11:43	11:43	9	custom_smiley_add
EQ_OPERATOR	11:61	11:61	8	!=
LEAF_NODE	11:61	11:61	9	!=
FIELD	11:63	11:63	8	NULL
LEAF_NODE	11:63	11:63	9	NULL
LEAF_NODE	11:67	11:67	4	)
STATEMENTS	11:69	13:1	4	
LEAF_NODE	11:69	11:69	5	{
STATEMENTS	12:2	12:2	5	
JUMP_STATEMENT	12:2	12:61	6	return conv -> ui_ops -> custom_smiley_add ( conv , smile , remote ) ;
KEYWORD	12:2	12:2	7	return
LEAF_NODE	12:2	12:2	8	return
DESTINATION	12:9	12:9	7	conv -> ui_ops -> custom_smiley_add ( conv , smile , remote )
EXPR	12:9	12:9	8	conv -> ui_ops -> custom_smiley_add ( conv , smile , remote )
FUNCTION_CALL	12:9	12:60	9	conv -> ui_ops -> custom_smiley_add ( conv , smile , remote )
CALLEE	12:9	12:23	10	conv -> ui_ops -> custom_smiley_add
LEAF_NODE	12:9	12:9	11	conv
LEAF_NODE	12:13	12:13	11	->
LEAF_NODE	12:15	12:15	11	ui_ops
LEAF_NODE	12:21	12:21	11	->
LEAF_NODE	12:23	12:23	11	custom_smiley_add
LEAF_NODE	12:40	12:40	10	(
ARGUMENT	12:41	12:41	10	conv
FIELD	12:41	12:41	11	conv
LEAF_NODE	12:41	12:41	12	conv
LEAF_NODE	12:45	12:45	10	,
ARGUMENT	12:47	12:47	10	smile
FIELD	12:47	12:47	11	smile
LEAF_NODE	12:47	12:47	12	smile
LEAF_NODE	12:52	12:52	10	,
ARGUMENT	12:54	12:54	10	remote
FIELD	12:54	12:54	11	remote
LEAF_NODE	12:54	12:54	12	remote
LEAF_NODE	12:60	12:60	10	)
LEAF_NODE	12:61	12:61	7	;
LEAF_NODE	13:1	13:1	5	}
SELECTION	13:3	13:8	3	
KEYWORD	13:3	13:3	4	else
LEAF_NODE	13:3	13:3	5	else
STATEMENTS	13:8	16:1	4	
LEAF_NODE	13:8	13:8	5	{
STATEMENTS	14:2	15:2	5	
EXPR_STATEMENT	14:2	14:80	6	purple_debug_info ( "conversation" , "Could not find add custom smiley function" ) ;
EXPR	14:2	14:2	7	purple_debug_info ( "conversation" , "Could not find add custom smiley function" )
FUNCTION_CALL	14:2	14:79	8	purple_debug_info ( "conversation" , "Could not find add custom smiley function" )
CALLEE	14:2	14:2	9	purple_debug_info
LEAF_NODE	14:2	14:2	10	purple_debug_info
LEAF_NODE	14:19	14:19	9	(
ARGUMENT	14:20	14:20	9	"conversation"
FIELD	14:20	14:20	10	"conversation"
LEAF_NODE	14:20	14:20	11	"conversation"
LEAF_NODE	14:34	14:34	9	,
ARGUMENT	14:36	14:36	9	"Could not find add custom smiley function"
FIELD	14:36	14:36	10	"Could not find add custom smiley function"
LEAF_NODE	14:36	14:36	11	"Could not find add custom smiley function"
LEAF_NODE	14:79	14:79	9	)
LEAF_NODE	14:80	14:80	7	;
JUMP_STATEMENT	15:2	15:14	6	return FALSE ;
KEYWORD	15:2	15:2	7	return
LEAF_NODE	15:2	15:2	8	return
DESTINATION	15:9	15:9	7	FALSE
EXPR	15:9	15:9	8	FALSE
FIELD	15:9	15:9	9	FALSE
LEAF_NODE	15:9	15:9	10	FALSE
LEAF_NODE	15:14	15:14	7	;
LEAF_NODE	16:1	16:1	5	}
LEAF_NODE	17:0	17:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static gint
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gint
LEAF_NODE	1:7	1:7	4	gint
FUNCTION_NAME	2:0	2:0	2	delete_win_cb
LEAF_NODE	2:0	2:0	3	delete_win_cb
PARAMETER_LIST	2:13	2:72	2	( GtkWidget * w , GdkEvent * event , GevoNewPersonDialog * dialog )
LEAF_NODE	2:13	2:13	3	(
PARAMETER_DECL	2:14	2:25	3	GtkWidget * w
TYPE	2:14	2:24	4	GtkWidget *
TYPE_NAME	2:14	2:14	5	GtkWidget
LEAF_NODE	2:14	2:14	6	GtkWidget
POINTER	2:24	2:24	5	*
LEAF_NODE	2:24	2:24	6	*
NAME	2:25	2:25	4	w
LEAF_NODE	2:25	2:25	5	w
LEAF_NODE	2:26	2:26	3	,
PARAMETER_DECL	2:28	2:38	3	GdkEvent * event
TYPE	2:28	2:37	4	GdkEvent *
TYPE_NAME	2:28	2:28	5	GdkEvent
LEAF_NODE	2:28	2:28	6	GdkEvent
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	event
LEAF_NODE	2:38	2:38	5	event
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:66	3	GevoNewPersonDialog * dialog
TYPE	2:45	2:65	4	GevoNewPersonDialog *
TYPE_NAME	2:45	2:45	5	GevoNewPersonDialog
LEAF_NODE	2:45	2:45	6	GevoNewPersonDialog
POINTER	2:65	2:65	5	*
LEAF_NODE	2:65	2:65	6	*
NAME	2:66	2:66	4	dialog
LEAF_NODE	2:66	2:66	5	dialog
LEAF_NODE	2:72	2:72	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
EXPR_STATEMENT	4:1	4:32	3	gtk_widget_destroy ( dialog -> win ) ;
EXPR	4:1	4:1	4	gtk_widget_destroy ( dialog -> win )
FUNCTION_CALL	4:1	4:31	5	gtk_widget_destroy ( dialog -> win )
CALLEE	4:1	4:1	6	gtk_widget_destroy
LEAF_NODE	4:1	4:1	7	gtk_widget_destroy
LEAF_NODE	4:19	4:19	6	(
ARGUMENT	4:20	4:20	6	dialog -> win
FIELD	4:20	4:28	7	dialog -> win
LEAF_NODE	4:20	4:20	8	dialog
LEAF_NODE	4:26	4:26	8	->
LEAF_NODE	4:28	4:28	8	win
LEAF_NODE	4:31	4:31	6	)
LEAF_NODE	4:32	4:32	4	;
EXPR_STATEMENT	5:1	5:29	3	g_object_unref ( dialog -> book ) ;
EXPR	5:1	5:1	4	g_object_unref ( dialog -> book )
FUNCTION_CALL	5:1	5:28	5	g_object_unref ( dialog -> book )
CALLEE	5:1	5:1	6	g_object_unref
LEAF_NODE	5:1	5:1	7	g_object_unref
LEAF_NODE	5:15	5:15	6	(
ARGUMENT	5:16	5:16	6	dialog -> book
FIELD	5:16	5:24	7	dialog -> book
LEAF_NODE	5:16	5:16	8	dialog
LEAF_NODE	5:22	5:22	8	->
LEAF_NODE	5:24	5:24	8	book
LEAF_NODE	5:28	5:28	6	)
LEAF_NODE	5:29	5:29	4	;
EXPR_STATEMENT	6:1	6:15	3	g_free ( dialog ) ;
EXPR	6:1	6:1	4	g_free ( dialog )
FUNCTION_CALL	6:1	6:14	5	g_free ( dialog )
CALLEE	6:1	6:1	6	g_free
LEAF_NODE	6:1	6:1	7	g_free
LEAF_NODE	6:7	6:7	6	(
ARGUMENT	6:8	6:8	6	dialog
FIELD	6:8	6:8	7	dialog
LEAF_NODE	6:8	6:8	8	dialog
LEAF_NODE	6:14	6:14	6	)
LEAF_NODE	6:15	6:15	4	;
JUMP_STATEMENT	7:1	7:9	3	return 0 ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	0
EXPR	7:8	7:8	5	0
FIELD	7:8	7:8	6	0
LEAF_NODE	7:8	7:8	7	0
LEAF_NODE	7:9	7:9	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	init_plugin
LEAF_NODE	2:0	2:0	3	init_plugin
PARAMETER_LIST	2:11	2:32	2	( PurplePlugin * plugin )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:26	3	PurplePlugin * plugin
TYPE	2:12	2:25	4	PurplePlugin *
TYPE_NAME	2:12	2:12	5	PurplePlugin
LEAF_NODE	2:12	2:12	6	PurplePlugin
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	plugin
LEAF_NODE	2:26	2:26	5	plugin
LEAF_NODE	2:32	2:32	3	)
LEAF_NODE	2:34	2:34	2	{
STATEMENTS	3:1	7:1	2	
EXPR_STATEMENT	3:1	3:65	3	info . dependencies = g_list_prepend ( info . dependencies , "ssl-nss" ) ;
EXPR	3:1	3:1	4	info . dependencies = g_list_prepend ( info . dependencies , "ssl-nss" )
ASSIGN	3:1	3:21	5	info . dependencies = g_list_prepend ( info . dependencies , "ssl-nss" )
LVAL	3:1	3:1	6	info . dependencies
FIELD	3:1	3:6	7	info . dependencies
LEAF_NODE	3:1	3:1	8	info
LEAF_NODE	3:5	3:5	8	.
LEAF_NODE	3:6	3:6	8	dependencies
ASSIGN_OP	3:19	3:19	6	=
LEAF_NODE	3:19	3:19	7	=
RVAL	3:21	3:21	6	g_list_prepend ( info . dependencies , "ssl-nss" )
FUNCTION_CALL	3:21	3:64	7	g_list_prepend ( info . dependencies , "ssl-nss" )
CALLEE	3:21	3:21	8	g_list_prepend
LEAF_NODE	3:21	3:21	9	g_list_prepend
LEAF_NODE	3:35	3:35	8	(
ARGUMENT	3:36	3:36	8	info . dependencies
FIELD	3:36	3:41	9	info . dependencies
LEAF_NODE	3:36	3:36	10	info
LEAF_NODE	3:40	3:40	10	.
LEAF_NODE	3:41	3:41	10	dependencies
LEAF_NODE	3:53	3:53	8	,
ARGUMENT	3:55	3:55	8	"ssl-nss"
FIELD	3:55	3:55	9	"ssl-nss"
LEAF_NODE	3:55	3:55	10	"ssl-nss"
LEAF_NODE	3:64	3:64	8	)
LEAF_NODE	3:65	3:65	4	;
EXPR_STATEMENT	4:1	4:33	3	purple_prefs_add_none ( PREF_BASE ) ;
EXPR	4:1	4:1	4	purple_prefs_add_none ( PREF_BASE )
FUNCTION_CALL	4:1	4:32	5	purple_prefs_add_none ( PREF_BASE )
CALLEE	4:1	4:1	6	purple_prefs_add_none
LEAF_NODE	4:1	4:1	7	purple_prefs_add_none
LEAF_NODE	4:22	4:22	6	(
ARGUMENT	4:23	4:23	6	PREF_BASE
FIELD	4:23	4:23	7	PREF_BASE
LEAF_NODE	4:23	4:23	8	PREF_BASE
LEAF_NODE	4:32	4:32	6	)
LEAF_NODE	4:33	4:33	4	;
EXPR_STATEMENT	5:1	5:49	3	purple_prefs_add_string_list ( CIPHERS_PREF , NULL ) ;
EXPR	5:1	5:1	4	purple_prefs_add_string_list ( CIPHERS_PREF , NULL )
FUNCTION_CALL	5:1	5:48	5	purple_prefs_add_string_list ( CIPHERS_PREF , NULL )
CALLEE	5:1	5:1	6	purple_prefs_add_string_list
LEAF_NODE	5:1	5:1	7	purple_prefs_add_string_list
LEAF_NODE	5:29	5:29	6	(
ARGUMENT	5:30	5:30	6	CIPHERS_PREF
FIELD	5:30	5:30	7	CIPHERS_PREF
LEAF_NODE	5:30	5:30	8	CIPHERS_PREF
LEAF_NODE	5:42	5:42	6	,
ARGUMENT	5:44	5:44	6	NULL
FIELD	5:44	5:44	7	NULL
LEAF_NODE	5:44	5:44	8	NULL
LEAF_NODE	5:48	5:48	6	)
LEAF_NODE	5:49	5:49	4	;
EXPR_STATEMENT	6:1	6:33	3	purple_prefs_add_int ( MIN_TLS , 0 ) ;
EXPR	6:1	6:1	4	purple_prefs_add_int ( MIN_TLS , 0 )
FUNCTION_CALL	6:1	6:32	5	purple_prefs_add_int ( MIN_TLS , 0 )
CALLEE	6:1	6:1	6	purple_prefs_add_int
LEAF_NODE	6:1	6:1	7	purple_prefs_add_int
LEAF_NODE	6:21	6:21	6	(
ARGUMENT	6:22	6:22	6	MIN_TLS
FIELD	6:22	6:22	7	MIN_TLS
LEAF_NODE	6:22	6:22	8	MIN_TLS
LEAF_NODE	6:29	6:29	6	,
ARGUMENT	6:31	6:31	6	0
FIELD	6:31	6:31	7	0
LEAF_NODE	6:31	6:31	8	0
LEAF_NODE	6:32	6:32	6	)
LEAF_NODE	6:33	6:33	4	;
EXPR_STATEMENT	7:1	7:33	3	purple_prefs_add_int ( MAX_TLS , 0 ) ;
EXPR	7:1	7:1	4	purple_prefs_add_int ( MAX_TLS , 0 )
FUNCTION_CALL	7:1	7:32	5	purple_prefs_add_int ( MAX_TLS , 0 )
CALLEE	7:1	7:1	6	purple_prefs_add_int
LEAF_NODE	7:1	7:1	7	purple_prefs_add_int
LEAF_NODE	7:21	7:21	6	(
ARGUMENT	7:22	7:22	6	MAX_TLS
FIELD	7:22	7:22	7	MAX_TLS
LEAF_NODE	7:22	7:22	8	MAX_TLS
LEAF_NODE	7:29	7:29	6	,
ARGUMENT	7:31	7:31	6	0
FIELD	7:31	7:31	7	0
LEAF_NODE	7:31	7:31	8	0
LEAF_NODE	7:32	7:32	6	)
LEAF_NODE	7:33	7:33	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:0	2	gboolean
TYPE_NAME	1:0	1:0	3	gboolean
LEAF_NODE	1:0	1:0	4	gboolean
FUNCTION_NAME	2:0	2:0	2	purple_request_field_account_get_show_all
LEAF_NODE	2:0	2:0	3	purple_request_field_account_get_show_all
PARAMETER_LIST	2:41	2:73	2	( const PurpleRequestField * field )
LEAF_NODE	2:41	2:41	3	(
PARAMETER_DECL	2:42	2:68	3	const PurpleRequestField * field
TYPE	2:42	2:67	4	const PurpleRequestField *
TYPE_NAME	2:42	2:48	5	const PurpleRequestField
LEAF_NODE	2:42	2:42	6	const
LEAF_NODE	2:48	2:48	6	PurpleRequestField
POINTER	2:67	2:67	5	*
LEAF_NODE	2:67	2:67	6	*
NAME	2:68	2:68	4	field
LEAF_NODE	2:68	2:68	5	field
LEAF_NODE	2:73	2:73	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
EXPR_STATEMENT	4:1	4:43	3	g_return_val_if_fail ( field != NULL , FALSE ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( field != NULL , FALSE )
FUNCTION_CALL	4:1	4:42	5	g_return_val_if_fail ( field != NULL , FALSE )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:31	6	field != NULL
FIELD	4:22	4:22	7	field
LEAF_NODE	4:22	4:22	8	field
EQ_OPERATOR	4:28	4:28	7	!=
LEAF_NODE	4:28	4:28	8	!=
FIELD	4:31	4:31	7	NULL
LEAF_NODE	4:31	4:31	8	NULL
LEAF_NODE	4:35	4:35	6	,
ARGUMENT	4:37	4:37	6	FALSE
FIELD	4:37	4:37	7	FALSE
LEAF_NODE	4:37	4:37	8	FALSE
LEAF_NODE	4:42	4:42	6	)
LEAF_NODE	4:43	4:43	4	;
EXPR_STATEMENT	5:1	5:73	3	g_return_val_if_fail ( field -> type == PURPLE_REQUEST_FIELD_ACCOUNT , FALSE ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( field -> type == PURPLE_REQUEST_FIELD_ACCOUNT , FALSE )
FUNCTION_CALL	5:1	5:72	5	g_return_val_if_fail ( field -> type == PURPLE_REQUEST_FIELD_ACCOUNT , FALSE )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:37	6	field -> type == PURPLE_REQUEST_FIELD_ACCOUNT
FIELD	5:22	5:29	7	field -> type
LEAF_NODE	5:22	5:22	8	field
LEAF_NODE	5:27	5:27	8	->
LEAF_NODE	5:29	5:29	8	type
EQ_OPERATOR	5:34	5:34	7	==
LEAF_NODE	5:34	5:34	8	==
FIELD	5:37	5:37	7	PURPLE_REQUEST_FIELD_ACCOUNT
LEAF_NODE	5:37	5:37	8	PURPLE_REQUEST_FIELD_ACCOUNT
LEAF_NODE	5:65	5:65	6	,
ARGUMENT	5:67	5:67	6	FALSE
FIELD	5:67	5:67	7	FALSE
LEAF_NODE	5:67	5:67	8	FALSE
LEAF_NODE	5:72	5:72	6	)
LEAF_NODE	5:73	5:73	4	;
JUMP_STATEMENT	6:1	6:33	3	return field -> u . account . show_all ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	field -> u . account . show_all
EXPR	6:8	6:8	5	field -> u . account . show_all
FIELD	6:8	6:25	6	field -> u . account . show_all
LEAF_NODE	6:8	6:8	7	field
LEAF_NODE	6:13	6:13	7	->
LEAF_NODE	6:15	6:15	7	u
LEAF_NODE	6:16	6:16	7	.
LEAF_NODE	6:17	6:17	7	account
LEAF_NODE	6:24	6:24	7	.
LEAF_NODE	6:25	6:25	7	show_all
LEAF_NODE	6:33	6:33	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	31:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	ggp_login_resolved
LEAF_NODE	2:0	2:0	3	ggp_login_resolved
PARAMETER_LIST	2:18	2:78	2	( GSList * hosts , gpointer _account , const char * error_message )
LEAF_NODE	2:18	2:18	3	(
PARAMETER_DECL	2:19	2:27	3	GSList * hosts
TYPE	2:19	2:26	4	GSList *
TYPE_NAME	2:19	2:19	5	GSList
LEAF_NODE	2:19	2:19	6	GSList
POINTER	2:26	2:26	5	*
LEAF_NODE	2:26	2:26	6	*
NAME	2:27	2:27	4	hosts
LEAF_NODE	2:27	2:27	5	hosts
LEAF_NODE	2:32	2:32	3	,
PARAMETER_DECL	2:34	2:43	3	gpointer _account
TYPE	2:34	2:34	4	gpointer
TYPE_NAME	2:34	2:34	5	gpointer
LEAF_NODE	2:34	2:34	6	gpointer
NAME	2:43	2:43	4	_account
LEAF_NODE	2:43	2:43	5	_account
LEAF_NODE	2:51	2:51	3	,
PARAMETER_DECL	2:53	2:65	3	const char * error_message
TYPE	2:53	2:64	4	const char *
TYPE_NAME	2:53	2:59	5	const char
LEAF_NODE	2:53	2:53	6	const
LEAF_NODE	2:59	2:59	6	char
POINTER	2:64	2:64	5	*
LEAF_NODE	2:64	2:64	6	*
NAME	2:65	2:65	4	error_message
LEAF_NODE	2:65	2:65	5	error_message
LEAF_NODE	2:78	2:78	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	30:1	2	
SIMPLE_DECL	4:1	4:34	3	PurpleAccount * account ; account = _account ;
VAR_DECL	4:1	4:16	4	PurpleAccount * account ; account = _account
TYPE	4:1	4:15	5	PurpleAccount *
TYPE_NAME	4:1	4:1	6	PurpleAccount
LEAF_NODE	4:1	4:1	7	PurpleAccount
POINTER	4:15	4:15	6	*
LEAF_NODE	4:15	4:15	7	*
NAME	4:16	4:16	5	account
LEAF_NODE	4:16	4:16	6	account
LEAF_NODE	0:0	0:0	5	;
INIT	4:16	4:16	5	account = _account
ASSIGN	4:16	4:26	6	account = _account
LVAL	4:16	4:16	7	account
NAME	4:16	4:16	8	account
LEAF_NODE	4:16	4:16	9	account
ASSIGN_OP	4:24	4:24	7	=
LEAF_NODE	4:24	4:24	8	=
RVAL	4:26	4:26	7	_account
FIELD	4:26	4:26	8	_account
LEAF_NODE	4:26	4:26	9	_account
LEAF_NODE	4:34	4:34	4	;
SIMPLE_DECL	5:1	5:21	3	PurpleConnection * gc ;
VAR_DECL	5:1	5:19	4	PurpleConnection * gc
TYPE	5:1	5:18	5	PurpleConnection *
TYPE_NAME	5:1	5:1	6	PurpleConnection
LEAF_NODE	5:1	5:1	7	PurpleConnection
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	gc
LEAF_NODE	5:19	5:19	6	gc
LEAF_NODE	5:21	5:21	4	;
SIMPLE_DECL	6:1	6:14	3	GGPInfo * info ;
VAR_DECL	6:1	6:10	4	GGPInfo * info
TYPE	6:1	6:9	5	GGPInfo *
TYPE_NAME	6:1	6:1	6	GGPInfo
LEAF_NODE	6:1	6:1	7	GGPInfo
POINTER	6:9	6:9	6	*
LEAF_NODE	6:9	6:9	7	*
NAME	6:10	6:10	5	info
LEAF_NODE	6:10	6:10	6	info
LEAF_NODE	6:14	6:14	4	;
SIMPLE_DECL	7:1	7:25	3	uint32_t server_addr ; server_addr = 0 ;
VAR_DECL	7:1	7:10	4	uint32_t server_addr ; server_addr = 0
TYPE	7:1	7:1	5	uint32_t
TYPE_NAME	7:1	7:1	6	uint32_t
LEAF_NODE	7:1	7:1	7	uint32_t
NAME	7:10	7:10	5	server_addr
LEAF_NODE	7:10	7:10	6	server_addr
LEAF_NODE	0:0	0:0	5	;
INIT	7:10	7:10	5	server_addr = 0
ASSIGN	7:10	7:24	6	server_addr = 0
LVAL	7:10	7:10	7	server_addr
NAME	7:10	7:10	8	server_addr
LEAF_NODE	7:10	7:10	9	server_addr
ASSIGN_OP	7:22	7:22	7	=
LEAF_NODE	7:22	7:22	8	=
RVAL	7:24	7:24	7	0
FIELD	7:24	7:24	8	0
LEAF_NODE	7:24	7:24	9	0
LEAF_NODE	7:25	7:25	4	;
EXPR_STATEMENT	8:1	8:44	3	gc = purple_account_get_connection ( account ) ;
EXPR	8:1	8:1	4	gc = purple_account_get_connection ( account )
ASSIGN	8:1	8:6	5	gc = purple_account_get_connection ( account )
LVAL	8:1	8:1	6	gc
FIELD	8:1	8:1	7	gc
LEAF_NODE	8:1	8:1	8	gc
ASSIGN_OP	8:4	8:4	6	=
LEAF_NODE	8:4	8:4	7	=
RVAL	8:6	8:6	6	purple_account_get_connection ( account )
FUNCTION_CALL	8:6	8:43	7	purple_account_get_connection ( account )
CALLEE	8:6	8:6	8	purple_account_get_connection
LEAF_NODE	8:6	8:6	9	purple_account_get_connection
LEAF_NODE	8:35	8:35	8	(
ARGUMENT	8:36	8:36	8	account
FIELD	8:36	8:36	9	account
LEAF_NODE	8:36	8:36	10	account
LEAF_NODE	8:43	8:43	8	)
LEAF_NODE	8:44	8:44	4	;
EXPR_STATEMENT	9:1	9:22	3	info = gc -> proto_data ;
EXPR	9:1	9:1	4	info = gc -> proto_data
ASSIGN	9:1	9:8	5	info = gc -> proto_data
LVAL	9:1	9:1	6	info
FIELD	9:1	9:1	7	info
LEAF_NODE	9:1	9:1	8	info
ASSIGN_OP	9:6	9:6	6	=
LEAF_NODE	9:6	9:6	7	=
RVAL	9:8	9:8	6	gc -> proto_data
FIELD	9:8	9:12	7	gc -> proto_data
LEAF_NODE	9:8	9:8	8	gc
LEAF_NODE	9:10	9:10	8	->
LEAF_NODE	9:12	9:12	8	proto_data
LEAF_NODE	9:22	9:22	4	;
EXPR_STATEMENT	10:1	10:23	3	g_return_if_fail ( info ) ;
EXPR	10:1	10:1	4	g_return_if_fail ( info )
FUNCTION_CALL	10:1	10:22	5	g_return_if_fail ( info )
CALLEE	10:1	10:1	6	g_return_if_fail
LEAF_NODE	10:1	10:1	7	g_return_if_fail
LEAF_NODE	10:17	10:17	6	(
ARGUMENT	10:18	10:18	6	info
FIELD	10:18	10:18	7	info
LEAF_NODE	10:18	10:18	8	info
LEAF_NODE	10:22	10:22	6	)
LEAF_NODE	10:23	10:23	4	;
EXPR_STATEMENT	11:1	11:23	3	info -> dns_query = NULL ;
EXPR	11:1	11:1	4	info -> dns_query = NULL
ASSIGN	11:1	11:19	5	info -> dns_query = NULL
LVAL	11:1	11:1	6	info -> dns_query
FIELD	11:1	11:7	7	info -> dns_query
LEAF_NODE	11:1	11:1	8	info
LEAF_NODE	11:5	11:5	8	->
LEAF_NODE	11:7	11:7	8	dns_query
ASSIGN_OP	11:17	11:17	6	=
LEAF_NODE	11:17	11:17	7	=
RVAL	11:19	11:19	6	NULL
FIELD	11:19	11:19	7	NULL
LEAF_NODE	11:19	11:19	8	NULL
LEAF_NODE	11:23	11:23	4	;
ITERATION	12:1	12:62	3	
KEYWORD	12:1	12:1	4	while
LEAF_NODE	12:1	12:1	5	while
LEAF_NODE	12:7	12:7	4	(
CONDITION	12:8	12:8	4	hosts && ( hosts = g_slist_delete_link ( hosts , hosts ) )
EXPR	12:8	12:8	5	hosts && ( hosts = g_slist_delete_link ( hosts , hosts ) )
AND	12:8	12:17	6	hosts && ( hosts = g_slist_delete_link ( hosts , hosts ) )
EXPR	12:8	12:8	7	hosts
FIELD	12:8	12:8	8	hosts
LEAF_NODE	12:8	12:8	9	hosts
LEAF_NODE	12:14	12:14	7	&&
EXPR	12:17	12:59	7	( hosts = g_slist_delete_link ( hosts , hosts ) )
LEAF_NODE	12:17	12:17	8	(
ASSIGN	12:18	12:26	8	hosts = g_slist_delete_link ( hosts , hosts )
LVAL	12:18	12:18	9	hosts
FIELD	12:18	12:18	10	hosts
LEAF_NODE	12:18	12:18	11	hosts
ASSIGN_OP	12:24	12:24	9	=
LEAF_NODE	12:24	12:24	10	=
RVAL	12:26	12:26	9	g_slist_delete_link ( hosts , hosts )
FUNCTION_CALL	12:26	12:58	10	g_slist_delete_link ( hosts , hosts )
CALLEE	12:26	12:26	11	g_slist_delete_link
LEAF_NODE	12:26	12:26	12	g_slist_delete_link
LEAF_NODE	12:45	12:45	11	(
ARGUMENT	12:46	12:46	11	hosts
FIELD	12:46	12:46	12	hosts
LEAF_NODE	12:46	12:46	13	hosts
LEAF_NODE	12:51	12:51	11	,
ARGUMENT	12:53	12:53	11	hosts
FIELD	12:53	12:53	12	hosts
LEAF_NODE	12:53	12:53	13	hosts
LEAF_NODE	12:58	12:58	11	)
LEAF_NODE	12:59	12:59	8	)
LEAF_NODE	12:60	12:60	4	)
STATEMENTS	12:62	20:1	4	
LEAF_NODE	12:62	12:62	5	{
STATEMENTS	13:2	19:2	5	
SIMPLE_DECL	13:2	13:37	6	struct sockaddr * addr ; addr = hosts -> data ;
VAR_DECL	13:2	13:19	7	struct sockaddr * addr ; addr = hosts -> data
TYPE	13:2	13:18	8	struct sockaddr *
TYPE_NAME	13:2	13:9	9	struct sockaddr
LEAF_NODE	13:2	13:2	10	struct
LEAF_NODE	13:9	13:9	10	sockaddr
POINTER	13:18	13:18	9	*
LEAF_NODE	13:18	13:18	10	*
NAME	13:19	13:19	8	addr
LEAF_NODE	13:19	13:19	9	addr
LEAF_NODE	0:0	0:0	8	;
INIT	13:19	13:19	8	addr = hosts -> data
ASSIGN	13:19	13:26	9	addr = hosts -> data
LVAL	13:19	13:19	10	addr
NAME	13:19	13:19	11	addr
LEAF_NODE	13:19	13:19	12	addr
ASSIGN_OP	13:24	13:24	10	=
LEAF_NODE	13:24	13:24	11	=
RVAL	13:26	13:26	10	hosts -> data
FIELD	13:26	13:33	11	hosts -> data
LEAF_NODE	13:26	13:26	12	hosts
LEAF_NODE	13:31	13:31	12	->
LEAF_NODE	13:33	13:33	12	data
LEAF_NODE	13:37	13:37	7	;
SELECTION	14:2	14:54	6	
KEYWORD	14:2	14:2	7	if
LEAF_NODE	14:2	14:2	8	if
LEAF_NODE	14:5	14:5	7	(
CONDITION	14:6	14:6	7	addr -> sa_family == AF_INET && server_addr == 0
EXPR	14:6	14:6	8	addr -> sa_family == AF_INET && server_addr == 0
AND	14:6	14:36	9	addr -> sa_family == AF_INET && server_addr == 0
EXPR	14:6	14:25	10	addr -> sa_family == AF_INET
FIELD	14:6	14:12	11	addr -> sa_family
LEAF_NODE	14:6	14:6	12	addr
LEAF_NODE	14:10	14:10	12	->
LEAF_NODE	14:12	14:12	12	sa_family
EQ_OPERATOR	14:22	14:22	11	==
LEAF_NODE	14:22	14:22	12	==
FIELD	14:25	14:25	11	AF_INET
LEAF_NODE	14:25	14:25	12	AF_INET
LEAF_NODE	14:33	14:33	10	&&
EXPR	14:36	14:51	10	server_addr == 0
FIELD	14:36	14:36	11	server_addr
LEAF_NODE	14:36	14:36	12	server_addr
EQ_OPERATOR	14:48	14:48	11	==
LEAF_NODE	14:48	14:48	12	==
FIELD	14:51	14:51	11	0
LEAF_NODE	14:51	14:51	12	0
LEAF_NODE	14:52	14:52	7	)
STATEMENTS	14:54	17:2	7	
LEAF_NODE	14:54	14:54	8	{
STATEMENTS	15:3	16:3	8	
SIMPLE_DECL	15:3	15:58	9	struct sockaddr_in * addrv4 ; addrv4 = ( struct sockaddr_in * ) addr ;
VAR_DECL	15:3	15:23	10	struct sockaddr_in * addrv4 ; addrv4 = ( struct sockaddr_in * ) addr
TYPE	15:3	15:22	11	struct sockaddr_in *
TYPE_NAME	15:3	15:10	12	struct sockaddr_in
LEAF_NODE	15:3	15:3	13	struct
LEAF_NODE	15:10	15:10	13	sockaddr_in
POINTER	15:22	15:22	12	*
LEAF_NODE	15:22	15:22	13	*
NAME	15:23	15:23	11	addrv4
LEAF_NODE	15:23	15:23	12	addrv4
LEAF_NODE	0:0	0:0	11	;
INIT	15:23	15:23	11	addrv4 = ( struct sockaddr_in * ) addr
ASSIGN	15:23	15:32	12	addrv4 = ( struct sockaddr_in * ) addr
LVAL	15:23	15:23	13	addrv4
NAME	15:23	15:23	14	addrv4
LEAF_NODE	15:23	15:23	15	addrv4
ASSIGN_OP	15:30	15:30	13	=
LEAF_NODE	15:30	15:30	14	=
RVAL	15:32	15:54	13	( struct sockaddr_in * ) addr
LEAF_NODE	15:32	15:32	14	(
TYPE_NAME	15:33	15:40	14	struct sockaddr_in
LEAF_NODE	15:33	15:33	15	struct
LEAF_NODE	15:40	15:40	15	sockaddr_in
LEAF_NODE	15:52	15:52	14	*
LEAF_NODE	15:53	15:53	14	)
FIELD	15:54	15:54	14	addr
LEAF_NODE	15:54	15:54	15	addr
LEAF_NODE	15:58	15:58	10	;
EXPR_STATEMENT	16:3	16:40	9	server_addr = addrv4 -> sin_addr . s_addr ;
EXPR	16:3	16:3	10	server_addr = addrv4 -> sin_addr . s_addr
ASSIGN	16:3	16:17	11	server_addr = addrv4 -> sin_addr . s_addr
LVAL	16:3	16:3	12	server_addr
FIELD	16:3	16:3	13	server_addr
LEAF_NODE	16:3	16:3	14	server_addr
ASSIGN_OP	16:15	16:15	12	=
LEAF_NODE	16:15	16:15	13	=
RVAL	16:17	16:17	12	addrv4 -> sin_addr . s_addr
FIELD	16:17	16:34	13	addrv4 -> sin_addr . s_addr
LEAF_NODE	16:17	16:17	14	addrv4
LEAF_NODE	16:23	16:23	14	->
LEAF_NODE	16:25	16:25	14	sin_addr
LEAF_NODE	16:33	16:33	14	.
LEAF_NODE	16:34	16:34	14	s_addr
LEAF_NODE	16:40	16:40	10	;
LEAF_NODE	17:2	17:2	8	}
EXPR_STATEMENT	18:2	18:21	6	g_free ( hosts -> data ) ;
EXPR	18:2	18:2	7	g_free ( hosts -> data )
FUNCTION_CALL	18:2	18:20	8	g_free ( hosts -> data )
CALLEE	18:2	18:2	9	g_free
LEAF_NODE	18:2	18:2	10	g_free
LEAF_NODE	18:8	18:8	9	(
ARGUMENT	18:9	18:9	9	hosts -> data
FIELD	18:9	18:16	10	hosts -> data
LEAF_NODE	18:9	18:9	11	hosts
LEAF_NODE	18:14	18:14	11	->
LEAF_NODE	18:16	18:16	11	data
LEAF_NODE	18:20	18:20	9	)
LEAF_NODE	18:21	18:21	7	;
EXPR_STATEMENT	19:2	19:43	6	hosts = g_slist_delete_link ( hosts , hosts ) ;
EXPR	19:2	19:2	7	hosts = g_slist_delete_link ( hosts , hosts )
ASSIGN	19:2	19:10	8	hosts = g_slist_delete_link ( hosts , hosts )
LVAL	19:2	19:2	9	hosts
FIELD	19:2	19:2	10	hosts
LEAF_NODE	19:2	19:2	11	hosts
ASSIGN_OP	19:8	19:8	9	=
LEAF_NODE	19:8	19:8	10	=
RVAL	19:10	19:10	9	g_slist_delete_link ( hosts , hosts )
FUNCTION_CALL	19:10	19:42	10	g_slist_delete_link ( hosts , hosts )
CALLEE	19:10	19:10	11	g_slist_delete_link
LEAF_NODE	19:10	19:10	12	g_slist_delete_link
LEAF_NODE	19:29	19:29	11	(
ARGUMENT	19:30	19:30	11	hosts
FIELD	19:30	19:30	12	hosts
LEAF_NODE	19:30	19:30	13	hosts
LEAF_NODE	19:35	19:35	11	,
ARGUMENT	19:37	19:37	11	hosts
FIELD	19:37	19:37	12	hosts
LEAF_NODE	19:37	19:37	13	hosts
LEAF_NODE	19:42	19:42	11	)
LEAF_NODE	19:43	19:43	7	;
LEAF_NODE	20:1	20:1	5	}
SELECTION	21:1	21:23	3	
KEYWORD	21:1	21:1	4	if
LEAF_NODE	21:1	21:1	5	if
LEAF_NODE	21:4	21:4	4	(
CONDITION	21:5	21:5	4	server_addr == 0
EXPR	21:5	21:20	5	server_addr == 0
FIELD	21:5	21:5	6	server_addr
LEAF_NODE	21:5	21:5	7	server_addr
EQ_OPERATOR	21:17	21:17	6	==
LEAF_NODE	21:17	21:17	7	==
FIELD	21:20	21:20	6	0
LEAF_NODE	21:20	21:20	7	0
LEAF_NODE	21:21	21:21	4	)
STATEMENTS	21:23	29:1	4	
LEAF_NODE	21:23	21:23	5	{
STATEMENTS	22:2	28:2	5	
SIMPLE_DECL	22:2	23:54	6	gchar * tmp ; tmp = g_strdup_printf ( _ ( "Unable to resolve hostname: %s" ) , error_message ) ;
VAR_DECL	22:2	22:9	7	gchar * tmp ; tmp = g_strdup_printf ( _ ( "Unable to resolve hostname: %s" ) , error_message )
TYPE	22:2	22:8	8	gchar *
TYPE_NAME	22:2	22:2	9	gchar
LEAF_NODE	22:2	22:2	10	gchar
POINTER	22:8	22:8	9	*
LEAF_NODE	22:8	22:8	10	*
NAME	22:9	22:9	8	tmp
LEAF_NODE	22:9	22:9	9	tmp
LEAF_NODE	0:0	0:0	8	;
INIT	22:9	22:9	8	tmp = g_strdup_printf ( _ ( "Unable to resolve hostname: %s" ) , error_message )
ASSIGN	22:9	22:15	9	tmp = g_strdup_printf ( _ ( "Unable to resolve hostname: %s" ) , error_message )
LVAL	22:9	22:9	10	tmp
NAME	22:9	22:9	11	tmp
LEAF_NODE	22:9	22:9	12	tmp
ASSIGN_OP	22:13	22:13	10	=
LEAF_NODE	22:13	22:13	11	=
RVAL	22:15	22:15	10	g_strdup_printf ( _ ( "Unable to resolve hostname: %s" ) , error_message )
FUNCTION_CALL	22:15	23:53	11	g_strdup_printf ( _ ( "Unable to resolve hostname: %s" ) , error_message )
CALLEE	22:15	22:15	12	g_strdup_printf
LEAF_NODE	22:15	22:15	13	g_strdup_printf
LEAF_NODE	22:30	22:30	12	(
ARGUMENT	23:3	23:3	12	_ ( "Unable to resolve hostname: %s" )
FUNCTION_CALL	23:3	23:37	13	_ ( "Unable to resolve hostname: %s" )
CALLEE	23:3	23:3	14	_
LEAF_NODE	23:3	23:3	15	_
LEAF_NODE	23:4	23:4	14	(
ARGUMENT	23:5	23:5	14	"Unable to resolve hostname: %s"
FIELD	23:5	23:5	15	"Unable to resolve hostname: %s"
LEAF_NODE	23:5	23:5	16	"Unable to resolve hostname: %s"
LEAF_NODE	23:37	23:37	14	)
LEAF_NODE	23:38	23:38	12	,
ARGUMENT	23:40	23:40	12	error_message
FIELD	23:40	23:40	13	error_message
LEAF_NODE	23:40	23:40	14	error_message
LEAF_NODE	23:53	23:53	12	)
LEAF_NODE	23:54	23:54	7	;
EXPR_STATEMENT	24:2	26:46	6	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , tmp ) ;
EXPR	24:2	24:2	7	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , tmp )
FUNCTION_CALL	24:2	26:45	8	purple_connection_error_reason ( gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , tmp )
CALLEE	24:2	24:2	9	purple_connection_error_reason
LEAF_NODE	24:2	24:2	10	purple_connection_error_reason
LEAF_NODE	24:32	24:32	9	(
ARGUMENT	24:33	24:33	9	gc
FIELD	24:33	24:33	10	gc
LEAF_NODE	24:33	24:33	11	gc
LEAF_NODE	24:35	24:35	9	,
ARGUMENT	26:3	26:3	9	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
FIELD	26:3	26:3	10	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	26:3	26:3	11	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	26:40	26:40	9	,
ARGUMENT	26:42	26:42	9	tmp
FIELD	26:42	26:42	10	tmp
LEAF_NODE	26:42	26:42	11	tmp
LEAF_NODE	26:45	26:45	9	)
LEAF_NODE	26:46	26:46	7	;
EXPR_STATEMENT	27:2	27:13	6	g_free ( tmp ) ;
EXPR	27:2	27:2	7	g_free ( tmp )
FUNCTION_CALL	27:2	27:12	8	g_free ( tmp )
CALLEE	27:2	27:2	9	g_free
LEAF_NODE	27:2	27:2	10	g_free
LEAF_NODE	27:8	27:8	9	(
ARGUMENT	27:9	27:9	9	tmp
FIELD	27:9	27:9	10	tmp
LEAF_NODE	27:9	27:9	11	tmp
LEAF_NODE	27:12	27:12	9	)
LEAF_NODE	27:13	27:13	7	;
JUMP_STATEMENT	28:2	28:8	6	return DESTINATION ;
KEYWORD	28:2	28:2	7	return
LEAF_NODE	28:2	28:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	28:8	28:8	7	;
LEAF_NODE	29:1	29:1	5	}
EXPR_STATEMENT	30:1	30:35	3	ggp_login_to ( account , server_addr ) ;
EXPR	30:1	30:1	4	ggp_login_to ( account , server_addr )
FUNCTION_CALL	30:1	30:34	5	ggp_login_to ( account , server_addr )
CALLEE	30:1	30:1	6	ggp_login_to
LEAF_NODE	30:1	30:1	7	ggp_login_to
LEAF_NODE	30:13	30:13	6	(
ARGUMENT	30:14	30:14	6	account
FIELD	30:14	30:14	7	account
LEAF_NODE	30:14	30:14	8	account
LEAF_NODE	30:21	30:21	6	,
ARGUMENT	30:23	30:23	6	server_addr
FIELD	30:23	30:23	7	server_addr
LEAF_NODE	30:23	30:23	8	server_addr
LEAF_NODE	30:34	30:34	6	)
LEAF_NODE	30:35	30:35	4	;
LEAF_NODE	31:0	31:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:16	2	PidginThemeFont *
TYPE_NAME	1:0	1:0	3	PidginThemeFont
LEAF_NODE	1:0	1:0	4	PidginThemeFont
LEAF_NODE	1:16	1:16	3	*
FUNCTION_NAME	2:0	2:0	2	pidgin_blist_theme_get_away_text_info
LEAF_NODE	2:0	2:0	3	pidgin_blist_theme_get_away_text_info
PARAMETER_LIST	2:37	2:61	2	( PidginBlistTheme * theme )
LEAF_NODE	2:37	2:37	3	(
PARAMETER_DECL	2:38	2:56	3	PidginBlistTheme * theme
TYPE	2:38	2:55	4	PidginBlistTheme *
TYPE_NAME	2:38	2:38	5	PidginBlistTheme
LEAF_NODE	2:38	2:38	6	PidginBlistTheme
POINTER	2:55	2:55	5	*
LEAF_NODE	2:55	2:55	6	*
NAME	2:56	2:56	4	theme
LEAF_NODE	2:56	2:56	5	theme
LEAF_NODE	2:61	2:61	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:30	3	PidginBlistThemePrivate * priv ;
VAR_DECL	4:1	4:26	4	PidginBlistThemePrivate * priv
TYPE	4:1	4:25	5	PidginBlistThemePrivate *
TYPE_NAME	4:1	4:1	6	PidginBlistThemePrivate
LEAF_NODE	4:1	4:1	7	PidginBlistThemePrivate
POINTER	4:25	4:25	6	*
LEAF_NODE	4:25	4:25	7	*
NAME	4:26	4:26	5	priv
LEAF_NODE	4:26	4:26	6	priv
LEAF_NODE	4:30	4:30	4	;
EXPR_STATEMENT	5:1	5:57	3	g_return_val_if_fail ( PIDGIN_IS_BLIST_THEME ( theme ) , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( PIDGIN_IS_BLIST_THEME ( theme ) , NULL )
FUNCTION_CALL	5:1	5:56	5	g_return_val_if_fail ( PIDGIN_IS_BLIST_THEME ( theme ) , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:22	6	PIDGIN_IS_BLIST_THEME ( theme )
FUNCTION_CALL	5:22	5:49	7	PIDGIN_IS_BLIST_THEME ( theme )
CALLEE	5:22	5:22	8	PIDGIN_IS_BLIST_THEME
LEAF_NODE	5:22	5:22	9	PIDGIN_IS_BLIST_THEME
LEAF_NODE	5:43	5:43	8	(
ARGUMENT	5:44	5:44	8	theme
FIELD	5:44	5:44	9	theme
LEAF_NODE	5:44	5:44	10	theme
LEAF_NODE	5:49	5:49	8	)
LEAF_NODE	5:50	5:50	6	,
ARGUMENT	5:52	5:52	6	NULL
FIELD	5:52	5:52	7	NULL
LEAF_NODE	5:52	5:52	8	NULL
LEAF_NODE	5:56	5:56	6	)
LEAF_NODE	5:57	5:57	4	;
EXPR_STATEMENT	6:1	6:55	3	priv = PIDGIN_BLIST_THEME_GET_PRIVATE ( G_OBJECT ( theme ) ) ;
EXPR	6:1	6:1	4	priv = PIDGIN_BLIST_THEME_GET_PRIVATE ( G_OBJECT ( theme ) )
ASSIGN	6:1	6:8	5	priv = PIDGIN_BLIST_THEME_GET_PRIVATE ( G_OBJECT ( theme ) )
LVAL	6:1	6:1	6	priv
FIELD	6:1	6:1	7	priv
LEAF_NODE	6:1	6:1	8	priv
ASSIGN_OP	6:6	6:6	6	=
LEAF_NODE	6:6	6:6	7	=
RVAL	6:8	6:8	6	PIDGIN_BLIST_THEME_GET_PRIVATE ( G_OBJECT ( theme ) )
FUNCTION_CALL	6:8	6:54	7	PIDGIN_BLIST_THEME_GET_PRIVATE ( G_OBJECT ( theme ) )
CALLEE	6:8	6:8	8	PIDGIN_BLIST_THEME_GET_PRIVATE
LEAF_NODE	6:8	6:8	9	PIDGIN_BLIST_THEME_GET_PRIVATE
LEAF_NODE	6:38	6:38	8	(
ARGUMENT	6:39	6:39	8	G_OBJECT ( theme )
FUNCTION_CALL	6:39	6:53	9	G_OBJECT ( theme )
CALLEE	6:39	6:39	10	G_OBJECT
LEAF_NODE	6:39	6:39	11	G_OBJECT
LEAF_NODE	6:47	6:47	10	(
ARGUMENT	6:48	6:48	10	theme
FIELD	6:48	6:48	11	theme
LEAF_NODE	6:48	6:48	12	theme
LEAF_NODE	6:53	6:53	10	)
LEAF_NODE	6:54	6:54	8	)
LEAF_NODE	6:55	6:55	4	;
JUMP_STATEMENT	7:1	7:18	3	return priv -> away ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	priv -> away
EXPR	7:8	7:8	5	priv -> away
FIELD	7:8	7:14	6	priv -> away
LEAF_NODE	7:8	7:8	7	priv
LEAF_NODE	7:12	7:12	7	->
LEAF_NODE	7:14	7:14	7	away
LEAF_NODE	7:18	7:18	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	17:0	1	
RETURN_TYPE	1:0	1:17	2	static GtkWidget *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	GtkWidget
LEAF_NODE	1:7	1:7	4	GtkWidget
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	find_child_widget_by_account
LEAF_NODE	2:0	2:0	3	find_child_widget_by_account
PARAMETER_LIST	2:28	3:51	2	( GtkContainer * container , PurpleAccount * account )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:43	3	GtkContainer * container
TYPE	2:29	2:42	4	GtkContainer *
TYPE_NAME	2:29	2:29	5	GtkContainer
LEAF_NODE	2:29	2:29	6	GtkContainer
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	container
LEAF_NODE	2:43	2:43	5	container
LEAF_NODE	2:52	2:52	3	,
PARAMETER_DECL	3:29	3:44	3	PurpleAccount * account
TYPE	3:29	3:43	4	PurpleAccount *
TYPE_NAME	3:29	3:29	5	PurpleAccount
LEAF_NODE	3:29	3:29	6	PurpleAccount
POINTER	3:43	3:43	5	*
LEAF_NODE	3:43	3:43	6	*
NAME	3:44	3:44	4	account
LEAF_NODE	3:44	3:44	5	account
LEAF_NODE	3:51	3:51	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	16:1	2	
SIMPLE_DECL	5:1	5:16	3	GList * l ; l = NULL ;
VAR_DECL	5:1	5:8	4	GList * l ; l = NULL
TYPE	5:1	5:7	5	GList *
TYPE_NAME	5:1	5:1	6	GList
LEAF_NODE	5:1	5:1	7	GList
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	l
LEAF_NODE	5:8	5:8	6	l
LEAF_NODE	0:0	0:0	5	;
INIT	5:8	5:8	5	l = NULL
ASSIGN	5:8	5:12	6	l = NULL
LVAL	5:8	5:8	7	l
NAME	5:8	5:8	8	l
LEAF_NODE	5:8	5:8	9	l
ASSIGN_OP	5:10	5:10	7	=
LEAF_NODE	5:10	5:10	8	=
RVAL	5:12	5:12	7	NULL
FIELD	5:12	5:12	8	NULL
LEAF_NODE	5:12	5:12	9	NULL
LEAF_NODE	5:16	5:16	4	;
SIMPLE_DECL	6:1	6:23	3	GList * children ; children = NULL ;
VAR_DECL	6:1	6:8	4	GList * children ; children = NULL
TYPE	6:1	6:7	5	GList *
TYPE_NAME	6:1	6:1	6	GList
LEAF_NODE	6:1	6:1	7	GList
POINTER	6:7	6:7	6	*
LEAF_NODE	6:7	6:7	7	*
NAME	6:8	6:8	5	children
LEAF_NODE	6:8	6:8	6	children
LEAF_NODE	0:0	0:0	5	;
INIT	6:8	6:8	5	children = NULL
ASSIGN	6:8	6:19	6	children = NULL
LVAL	6:8	6:8	7	children
NAME	6:8	6:8	8	children
LEAF_NODE	6:8	6:8	9	children
ASSIGN_OP	6:17	6:17	7	=
LEAF_NODE	6:17	6:17	8	=
RVAL	6:19	6:19	7	NULL
FIELD	6:19	6:19	8	NULL
LEAF_NODE	6:19	6:19	9	NULL
LEAF_NODE	6:23	6:23	4	;
SIMPLE_DECL	7:1	7:22	3	GtkWidget * ret ; ret = NULL ;
VAR_DECL	7:1	7:12	4	GtkWidget * ret ; ret = NULL
TYPE	7:1	7:11	5	GtkWidget *
TYPE_NAME	7:1	7:1	6	GtkWidget
LEAF_NODE	7:1	7:1	7	GtkWidget
POINTER	7:11	7:11	6	*
LEAF_NODE	7:11	7:11	7	*
NAME	7:12	7:12	5	ret
LEAF_NODE	7:12	7:12	6	ret
LEAF_NODE	0:0	0:0	5	;
INIT	7:12	7:12	5	ret = NULL
ASSIGN	7:12	7:18	6	ret = NULL
LVAL	7:12	7:12	7	ret
NAME	7:12	7:12	8	ret
LEAF_NODE	7:12	7:12	9	ret
ASSIGN_OP	7:16	7:16	7	=
LEAF_NODE	7:16	7:16	8	=
RVAL	7:18	7:18	7	NULL
FIELD	7:18	7:18	8	NULL
LEAF_NODE	7:18	7:18	9	NULL
LEAF_NODE	7:22	7:22	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	PIDGIN_IS_SCROLL_BOOK ( container )
EXPR	9:5	9:5	5	PIDGIN_IS_SCROLL_BOOK ( container )
FUNCTION_CALL	9:5	9:36	6	PIDGIN_IS_SCROLL_BOOK ( container )
CALLEE	9:5	9:5	7	PIDGIN_IS_SCROLL_BOOK
LEAF_NODE	9:5	9:5	8	PIDGIN_IS_SCROLL_BOOK
LEAF_NODE	9:26	9:26	7	(
ARGUMENT	9:27	9:27	7	container
FIELD	9:27	9:27	8	container
LEAF_NODE	9:27	9:27	9	container
LEAF_NODE	9:36	9:36	7	)
LEAF_NODE	9:37	9:37	4	)
STATEMENTS	10:2	10:2	4	
EXPR_STATEMENT	10:2	10:68	5	container = GTK_CONTAINER ( PIDGIN_SCROLL_BOOK ( container ) -> notebook ) ;
EXPR	10:2	10:2	6	container = GTK_CONTAINER ( PIDGIN_SCROLL_BOOK ( container ) -> notebook )
ASSIGN	10:2	10:14	7	container = GTK_CONTAINER ( PIDGIN_SCROLL_BOOK ( container ) -> notebook )
LVAL	10:2	10:2	8	container
FIELD	10:2	10:2	9	container
LEAF_NODE	10:2	10:2	10	container
ASSIGN_OP	10:12	10:12	8	=
LEAF_NODE	10:12	10:12	9	=
RVAL	10:14	10:14	8	GTK_CONTAINER ( PIDGIN_SCROLL_BOOK ( container ) -> notebook )
FUNCTION_CALL	10:14	10:67	9	GTK_CONTAINER ( PIDGIN_SCROLL_BOOK ( container ) -> notebook )
CALLEE	10:14	10:14	10	GTK_CONTAINER
LEAF_NODE	10:14	10:14	11	GTK_CONTAINER
LEAF_NODE	10:27	10:27	10	(
ARGUMENT	10:28	10:59	10	PIDGIN_SCROLL_BOOK ( container ) -> notebook
FUNCTION_CALL	10:28	10:56	11	PIDGIN_SCROLL_BOOK ( container )
CALLEE	10:28	10:28	12	PIDGIN_SCROLL_BOOK
LEAF_NODE	10:28	10:28	13	PIDGIN_SCROLL_BOOK
LEAF_NODE	10:46	10:46	12	(
ARGUMENT	10:47	10:47	12	container
FIELD	10:47	10:47	13	container
LEAF_NODE	10:47	10:47	14	container
LEAF_NODE	10:56	10:56	12	)
LEAF_NODE	10:57	10:57	11	->
LEAF_NODE	10:59	10:59	11	notebook
LEAF_NODE	10:67	10:67	10	)
LEAF_NODE	10:68	10:68	6	;
EXPR_STATEMENT	11:1	11:49	3	children = gtk_container_get_children ( container ) ;
EXPR	11:1	11:1	4	children = gtk_container_get_children ( container )
ASSIGN	11:1	11:12	5	children = gtk_container_get_children ( container )
LVAL	11:1	11:1	6	children
FIELD	11:1	11:1	7	children
LEAF_NODE	11:1	11:1	8	children
ASSIGN_OP	11:10	11:10	6	=
LEAF_NODE	11:10	11:10	7	=
RVAL	11:12	11:12	6	gtk_container_get_children ( container )
FUNCTION_CALL	11:12	11:48	7	gtk_container_get_children ( container )
CALLEE	11:12	11:12	8	gtk_container_get_children
LEAF_NODE	11:12	11:12	9	gtk_container_get_children
LEAF_NODE	11:38	11:38	8	(
ARGUMENT	11:39	11:39	8	container
FIELD	11:39	11:39	9	container
LEAF_NODE	11:39	11:39	10	container
LEAF_NODE	11:48	11:48	8	)
LEAF_NODE	11:49	11:49	4	;
EXPR_STATEMENT	12:1	12:78	3	l = g_list_find_custom ( children , account , ( GCompareFunc ) find_account_widget ) ;
EXPR	12:1	12:1	4	l = g_list_find_custom ( children , account , ( GCompareFunc ) find_account_widget )
ASSIGN	12:1	12:5	5	l = g_list_find_custom ( children , account , ( GCompareFunc ) find_account_widget )
LVAL	12:1	12:1	6	l
FIELD	12:1	12:1	7	l
LEAF_NODE	12:1	12:1	8	l
ASSIGN_OP	12:3	12:3	6	=
LEAF_NODE	12:3	12:3	7	=
RVAL	12:5	12:5	6	g_list_find_custom ( children , account , ( GCompareFunc ) find_account_widget )
FUNCTION_CALL	12:5	12:77	7	g_list_find_custom ( children , account , ( GCompareFunc ) find_account_widget )
CALLEE	12:5	12:5	8	g_list_find_custom
LEAF_NODE	12:5	12:5	9	g_list_find_custom
LEAF_NODE	12:23	12:23	8	(
ARGUMENT	12:24	12:24	8	children
FIELD	12:24	12:24	9	children
LEAF_NODE	12:24	12:24	10	children
LEAF_NODE	12:32	12:32	8	,
ARGUMENT	12:34	12:34	8	account
FIELD	12:34	12:34	9	account
LEAF_NODE	12:34	12:34	10	account
LEAF_NODE	12:41	12:41	8	,
ARGUMENT	12:43	12:58	8	( GCompareFunc ) find_account_widget
LEAF_NODE	12:43	12:43	9	(
TYPE_NAME	12:44	12:44	9	GCompareFunc
LEAF_NODE	12:44	12:44	10	GCompareFunc
LEAF_NODE	12:56	12:56	9	)
FIELD	12:58	12:58	9	find_account_widget
LEAF_NODE	12:58	12:58	10	find_account_widget
LEAF_NODE	12:77	12:77	8	)
LEAF_NODE	12:78	12:78	4	;
SELECTION	13:1	14:2	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	l
EXPR	13:5	13:5	5	l
FIELD	13:5	13:5	6	l
LEAF_NODE	13:5	13:5	7	l
LEAF_NODE	13:6	13:6	4	)
STATEMENTS	14:2	14:2	4	
EXPR_STATEMENT	14:2	14:27	5	ret = GTK_WIDGET ( l -> data ) ;
EXPR	14:2	14:2	6	ret = GTK_WIDGET ( l -> data )
ASSIGN	14:2	14:8	7	ret = GTK_WIDGET ( l -> data )
LVAL	14:2	14:2	8	ret
FIELD	14:2	14:2	9	ret
LEAF_NODE	14:2	14:2	10	ret
ASSIGN_OP	14:6	14:6	8	=
LEAF_NODE	14:6	14:6	9	=
RVAL	14:8	14:8	8	GTK_WIDGET ( l -> data )
FUNCTION_CALL	14:8	14:26	9	GTK_WIDGET ( l -> data )
CALLEE	14:8	14:8	10	GTK_WIDGET
LEAF_NODE	14:8	14:8	11	GTK_WIDGET
LEAF_NODE	14:18	14:18	10	(
ARGUMENT	14:19	14:19	10	l -> data
FIELD	14:19	14:22	11	l -> data
LEAF_NODE	14:19	14:19	12	l
LEAF_NODE	14:20	14:20	12	->
LEAF_NODE	14:22	14:22	12	data
LEAF_NODE	14:26	14:26	10	)
LEAF_NODE	14:27	14:27	6	;
EXPR_STATEMENT	15:1	15:22	3	g_list_free ( children ) ;
EXPR	15:1	15:1	4	g_list_free ( children )
FUNCTION_CALL	15:1	15:21	5	g_list_free ( children )
CALLEE	15:1	15:1	6	g_list_free
LEAF_NODE	15:1	15:1	7	g_list_free
LEAF_NODE	15:12	15:12	6	(
ARGUMENT	15:13	15:13	6	children
FIELD	15:13	15:13	7	children
LEAF_NODE	15:13	15:13	8	children
LEAF_NODE	15:21	15:21	6	)
LEAF_NODE	15:22	15:22	4	;
JUMP_STATEMENT	16:1	16:11	3	return ret ;
KEYWORD	16:1	16:1	4	return
LEAF_NODE	16:1	16:1	5	return
DESTINATION	16:8	16:8	4	ret
EXPR	16:8	16:8	5	ret
FIELD	16:8	16:8	6	ret
LEAF_NODE	16:8	16:8	7	ret
LEAF_NODE	16:11	16:11	4	;
LEAF_NODE	17:0	17:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	23:0	1	
RETURN_TYPE	2:0	2:0	2	GType
TYPE_NAME	2:0	2:0	3	GType
LEAF_NODE	2:0	2:0	4	GType
FUNCTION_NAME	2:6	2:6	2	irssi_get_gtype
LEAF_NODE	2:6	2:6	3	irssi_get_gtype
PARAMETER_LIST	2:21	2:26	2	( void )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:22	3	void
LEAF_NODE	2:22	2:22	4	void
LEAF_NODE	2:26	2:26	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	22:1	2	
LEAF_NODE	4:1	4:1	3	static
SIMPLE_DECL	4:8	4:22	3	GType type ; type = 0 ;
VAR_DECL	4:8	4:14	4	GType type ; type = 0
TYPE	4:8	4:8	5	GType
TYPE_NAME	4:8	4:8	6	GType
LEAF_NODE	4:8	4:8	7	GType
NAME	4:14	4:14	5	type
LEAF_NODE	4:14	4:14	6	type
LEAF_NODE	0:0	0:0	5	;
INIT	4:14	4:14	5	type = 0
ASSIGN	4:14	4:21	6	type = 0
LVAL	4:14	4:14	7	type
NAME	4:14	4:14	8	type
LEAF_NODE	4:14	4:14	9	type
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:21	7	0
FIELD	4:21	4:21	8	0
LEAF_NODE	4:21	4:21	9	0
LEAF_NODE	4:22	4:22	4	;
SELECTION	5:1	5:15	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:3	5:3	4	(
CONDITION	5:4	5:4	4	type == 0
EXPR	5:4	5:12	5	type == 0
FIELD	5:4	5:4	6	type
LEAF_NODE	5:4	5:4	7	type
EQ_OPERATOR	5:9	5:9	6	==
LEAF_NODE	5:9	5:9	7	==
FIELD	5:12	5:12	6	0
LEAF_NODE	5:12	5:12	7	0
LEAF_NODE	5:13	5:13	4	)
STATEMENTS	5:15	21:1	4	
LEAF_NODE	5:15	5:15	5	{
STATEMENTS	6:2	18:2	5	
LEAF_NODE	6:2	6:2	6	static
LEAF_NODE	6:9	6:9	6	const
LEAF_NODE	6:15	6:15	6	GTypeInfo
LEAF_NODE	6:25	6:25	6	info
LEAF_NODE	6:30	6:30	6	=
LEAF_NODE	6:32	6:32	6	{
STATEMENTS	7:3	16:3	6	
LEAF_NODE	7:3	7:3	7	sizeof
LEAF_NODE	7:9	7:9	7	(
LEAF_NODE	7:10	7:10	7	IrssiClass
LEAF_NODE	7:20	7:20	7	)
LEAF_NODE	7:21	7:21	7	,
LEAF_NODE	8:3	8:3	7	NULL
LEAF_NODE	8:7	8:7	7	,
LEAF_NODE	9:3	9:3	7	NULL
LEAF_NODE	9:7	9:7	7	,
LEAF_NODE	10:3	10:3	7	(
LEAF_NODE	10:4	10:4	7	GClassInitFunc
LEAF_NODE	10:18	10:18	7	)
LEAF_NODE	10:19	10:19	7	irssi_class_init
LEAF_NODE	10:35	10:35	7	,
LEAF_NODE	11:3	11:3	7	NULL
LEAF_NODE	11:7	11:7	7	,
LEAF_NODE	12:3	12:3	7	NULL
LEAF_NODE	12:7	12:7	7	,
LEAF_NODE	13:3	13:3	7	sizeof
LEAF_NODE	13:9	13:9	7	(
LEAF_NODE	13:10	13:10	7	Irssi
LEAF_NODE	13:15	13:15	7	)
LEAF_NODE	13:16	13:16	7	,
LEAF_NODE	14:3	14:3	7	0
LEAF_NODE	14:4	14:4	7	,
LEAF_NODE	15:3	15:3	7	NULL
LEAF_NODE	15:7	15:7	7	,
LEAF_NODE	16:3	16:3	7	NULL
LEAF_NODE	17:2	17:2	6	}
LEAF_NODE	17:3	17:3	6	;
EXPR_STATEMENT	18:2	20:41	6	type = g_type_register_static ( GNT_TYPE_WM , "GntIrssi" , & info , 0 ) ;
EXPR	18:2	18:2	7	type = g_type_register_static ( GNT_TYPE_WM , "GntIrssi" , & info , 0 )
ASSIGN	18:2	18:9	8	type = g_type_register_static ( GNT_TYPE_WM , "GntIrssi" , & info , 0 )
LVAL	18:2	18:2	9	type
FIELD	18:2	18:2	10	type
LEAF_NODE	18:2	18:2	11	type
ASSIGN_OP	18:7	18:7	9	=
LEAF_NODE	18:7	18:7	10	=
RVAL	18:9	18:9	9	g_type_register_static ( GNT_TYPE_WM , "GntIrssi" , & info , 0 )
FUNCTION_CALL	18:9	20:40	10	g_type_register_static ( GNT_TYPE_WM , "GntIrssi" , & info , 0 )
CALLEE	18:9	18:9	11	g_type_register_static
LEAF_NODE	18:9	18:9	12	g_type_register_static
LEAF_NODE	18:31	18:31	11	(
ARGUMENT	18:32	18:32	11	GNT_TYPE_WM
FIELD	18:32	18:32	12	GNT_TYPE_WM
LEAF_NODE	18:32	18:32	13	GNT_TYPE_WM
LEAF_NODE	18:43	18:43	11	,
ARGUMENT	19:32	19:32	11	"GntIrssi"
FIELD	19:32	19:32	12	"GntIrssi"
LEAF_NODE	19:32	19:32	13	"GntIrssi"
LEAF_NODE	19:42	19:42	11	,
ARGUMENT	20:32	20:32	11	& info
UNARY_EXPR	20:32	20:33	12	& info
UNARY_OPERATOR	20:32	20:32	13	&
LEAF_NODE	20:32	20:32	14	&
FIELD	20:33	20:33	13	info
LEAF_NODE	20:33	20:33	14	info
LEAF_NODE	20:37	20:37	11	,
ARGUMENT	20:39	20:39	11	0
FIELD	20:39	20:39	12	0
LEAF_NODE	20:39	20:39	13	0
LEAF_NODE	20:40	20:40	11	)
LEAF_NODE	20:41	20:41	7	;
LEAF_NODE	21:1	21:1	5	}
JUMP_STATEMENT	22:1	22:12	3	return type ;
KEYWORD	22:1	22:1	4	return
LEAF_NODE	22:1	22:1	5	return
DESTINATION	22:8	22:8	4	type
EXPR	22:8	22:8	5	type
FIELD	22:8	22:8	6	type
LEAF_NODE	22:8	22:8	7	type
LEAF_NODE	22:12	22:12	4	;
LEAF_NODE	23:0	23:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	7:0	1	
RETURN_TYPE	2:0	2:11	2	const char *
TYPE_NAME	2:0	2:6	3	const char
LEAF_NODE	2:0	2:0	4	const
LEAF_NODE	2:6	2:6	4	char
LEAF_NODE	2:11	2:11	3	*
FUNCTION_NAME	2:12	2:12	2	oscar_get_locale_charset
LEAF_NODE	2:12	2:12	3	oscar_get_locale_charset
PARAMETER_LIST	2:36	2:41	2	( void )
LEAF_NODE	2:36	2:36	3	(
PARAMETER_DECL	2:37	2:37	3	void
LEAF_NODE	2:37	2:37	4	void
LEAF_NODE	2:41	2:41	3	)
LEAF_NODE	2:43	2:43	2	{
STATEMENTS	3:1	6:1	2	
LEAF_NODE	3:1	3:1	3	static
SIMPLE_DECL	3:8	3:34	3	const char * charset ; charset = NULL ;
VAR_DECL	3:8	3:20	4	const char * charset ; charset = NULL
TYPE	3:8	3:19	5	const char *
TYPE_NAME	3:8	3:14	6	const char
LEAF_NODE	3:8	3:8	7	const
LEAF_NODE	3:14	3:14	7	char
POINTER	3:19	3:19	6	*
LEAF_NODE	3:19	3:19	7	*
NAME	3:20	3:20	5	charset
LEAF_NODE	3:20	3:20	6	charset
LEAF_NODE	0:0	0:0	5	;
INIT	3:20	3:20	5	charset = NULL
ASSIGN	3:20	3:30	6	charset = NULL
LVAL	3:20	3:20	7	charset
NAME	3:20	3:20	8	charset
LEAF_NODE	3:20	3:20	9	charset
ASSIGN_OP	3:28	3:28	7	=
LEAF_NODE	3:28	3:28	8	=
RVAL	3:30	3:30	7	NULL
FIELD	3:30	3:30	8	NULL
LEAF_NODE	3:30	3:30	9	NULL
LEAF_NODE	3:34	3:34	4	;
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	charset == NULL
EXPR	4:5	4:16	5	charset == NULL
FIELD	4:5	4:5	6	charset
LEAF_NODE	4:5	4:5	7	charset
EQ_OPERATOR	4:13	4:13	6	==
LEAF_NODE	4:13	4:13	7	==
FIELD	4:16	4:16	6	NULL
LEAF_NODE	4:16	4:16	7	NULL
LEAF_NODE	4:20	4:20	4	)
STATEMENTS	5:2	5:2	4	
EXPR_STATEMENT	5:2	5:25	5	g_get_charset ( & charset ) ;
EXPR	5:2	5:2	6	g_get_charset ( & charset )
FUNCTION_CALL	5:2	5:24	7	g_get_charset ( & charset )
CALLEE	5:2	5:2	8	g_get_charset
LEAF_NODE	5:2	5:2	9	g_get_charset
LEAF_NODE	5:15	5:15	8	(
ARGUMENT	5:16	5:16	8	& charset
UNARY_EXPR	5:16	5:17	9	& charset
UNARY_OPERATOR	5:16	5:16	10	&
LEAF_NODE	5:16	5:16	11	&
FIELD	5:17	5:17	10	charset
LEAF_NODE	5:17	5:17	11	charset
LEAF_NODE	5:24	5:24	8	)
LEAF_NODE	5:25	5:25	6	;
JUMP_STATEMENT	6:1	6:15	3	return charset ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	charset
EXPR	6:8	6:8	5	charset
FIELD	6:8	6:8	6	charset
LEAF_NODE	6:8	6:8	7	charset
LEAF_NODE	6:15	6:15	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	17:0	1	
RETURN_TYPE	1:0	1:13	2	static GList *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	GList
LEAF_NODE	1:7	1:7	4	GList
LEAF_NODE	1:13	1:13	3	*
FUNCTION_NAME	2:0	2:0	2	purple_media_backend_fs2_get_codecs
LEAF_NODE	2:0	2:0	3	purple_media_backend_fs2_get_codecs
PARAMETER_LIST	2:35	3:22	2	( PurpleMediaBackend * self , const gchar * sess_id )
LEAF_NODE	2:35	2:35	3	(
PARAMETER_DECL	2:36	2:56	3	PurpleMediaBackend * self
TYPE	2:36	2:55	4	PurpleMediaBackend *
TYPE_NAME	2:36	2:36	5	PurpleMediaBackend
LEAF_NODE	2:36	2:36	6	PurpleMediaBackend
POINTER	2:55	2:55	5	*
LEAF_NODE	2:55	2:55	6	*
NAME	2:56	2:56	4	self
LEAF_NODE	2:56	2:56	5	self
LEAF_NODE	2:60	2:60	3	,
PARAMETER_DECL	3:2	3:15	3	const gchar * sess_id
TYPE	3:2	3:14	4	const gchar *
TYPE_NAME	3:2	3:8	5	const gchar
LEAF_NODE	3:2	3:2	6	const
LEAF_NODE	3:8	3:8	6	gchar
POINTER	3:14	3:14	5	*
LEAF_NODE	3:14	3:14	6	*
NAME	3:15	3:15	4	sess_id
LEAF_NODE	3:15	3:15	5	sess_id
LEAF_NODE	3:22	3:22	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	16:1	2	
SIMPLE_DECL	5:1	5:38	3	PurpleMediaBackendFs2Session * session ;
VAR_DECL	5:1	5:31	4	PurpleMediaBackendFs2Session * session
TYPE	5:1	5:30	5	PurpleMediaBackendFs2Session *
TYPE_NAME	5:1	5:1	6	PurpleMediaBackendFs2Session
LEAF_NODE	5:1	5:1	7	PurpleMediaBackendFs2Session
POINTER	5:30	5:30	6	*
LEAF_NODE	5:30	5:30	7	*
NAME	5:31	5:31	5	session
LEAF_NODE	5:31	5:31	6	session
LEAF_NODE	5:38	5:38	4	;
SIMPLE_DECL	6:1	6:16	3	GList * fscodecs ;
VAR_DECL	6:1	6:8	4	GList * fscodecs
TYPE	6:1	6:7	5	GList *
TYPE_NAME	6:1	6:1	6	GList
LEAF_NODE	6:1	6:1	7	GList
POINTER	6:7	6:7	6	*
LEAF_NODE	6:7	6:7	7	*
NAME	6:8	6:8	5	fscodecs
LEAF_NODE	6:8	6:8	6	fscodecs
LEAF_NODE	6:16	6:16	4	;
SIMPLE_DECL	7:1	7:14	3	GList * codecs ;
VAR_DECL	7:1	7:8	4	GList * codecs
TYPE	7:1	7:7	5	GList *
TYPE_NAME	7:1	7:1	6	GList
LEAF_NODE	7:1	7:1	7	GList
POINTER	7:7	7:7	6	*
LEAF_NODE	7:7	7:7	7	*
NAME	7:8	7:8	5	codecs
LEAF_NODE	7:8	7:8	6	codecs
LEAF_NODE	7:14	7:14	4	;
EXPR_STATEMENT	8:1	8:62	3	g_return_val_if_fail ( PURPLE_IS_MEDIA_BACKEND_FS2 ( self ) , NULL ) ;
EXPR	8:1	8:1	4	g_return_val_if_fail ( PURPLE_IS_MEDIA_BACKEND_FS2 ( self ) , NULL )
FUNCTION_CALL	8:1	8:61	5	g_return_val_if_fail ( PURPLE_IS_MEDIA_BACKEND_FS2 ( self ) , NULL )
CALLEE	8:1	8:1	6	g_return_val_if_fail
LEAF_NODE	8:1	8:1	7	g_return_val_if_fail
LEAF_NODE	8:21	8:21	6	(
ARGUMENT	8:22	8:22	6	PURPLE_IS_MEDIA_BACKEND_FS2 ( self )
FUNCTION_CALL	8:22	8:54	7	PURPLE_IS_MEDIA_BACKEND_FS2 ( self )
CALLEE	8:22	8:22	8	PURPLE_IS_MEDIA_BACKEND_FS2
LEAF_NODE	8:22	8:22	9	PURPLE_IS_MEDIA_BACKEND_FS2
LEAF_NODE	8:49	8:49	8	(
ARGUMENT	8:50	8:50	8	self
FIELD	8:50	8:50	9	self
LEAF_NODE	8:50	8:50	10	self
LEAF_NODE	8:54	8:54	8	)
LEAF_NODE	8:55	8:55	6	,
ARGUMENT	8:57	8:57	6	NULL
FIELD	8:57	8:57	7	NULL
LEAF_NODE	8:57	8:57	8	NULL
LEAF_NODE	8:61	8:61	6	)
LEAF_NODE	8:62	8:62	4	;
EXPR_STATEMENT	9:1	9:63	3	session = get_session ( PURPLE_MEDIA_BACKEND_FS2 ( self ) , sess_id ) ;
EXPR	9:1	9:1	4	session = get_session ( PURPLE_MEDIA_BACKEND_FS2 ( self ) , sess_id )
ASSIGN	9:1	9:11	5	session = get_session ( PURPLE_MEDIA_BACKEND_FS2 ( self ) , sess_id )
LVAL	9:1	9:1	6	session
FIELD	9:1	9:1	7	session
LEAF_NODE	9:1	9:1	8	session
ASSIGN_OP	9:9	9:9	6	=
LEAF_NODE	9:9	9:9	7	=
RVAL	9:11	9:11	6	get_session ( PURPLE_MEDIA_BACKEND_FS2 ( self ) , sess_id )
FUNCTION_CALL	9:11	9:62	7	get_session ( PURPLE_MEDIA_BACKEND_FS2 ( self ) , sess_id )
CALLEE	9:11	9:11	8	get_session
LEAF_NODE	9:11	9:11	9	get_session
LEAF_NODE	9:22	9:22	8	(
ARGUMENT	9:23	9:23	8	PURPLE_MEDIA_BACKEND_FS2 ( self )
FUNCTION_CALL	9:23	9:52	9	PURPLE_MEDIA_BACKEND_FS2 ( self )
CALLEE	9:23	9:23	10	PURPLE_MEDIA_BACKEND_FS2
LEAF_NODE	9:23	9:23	11	PURPLE_MEDIA_BACKEND_FS2
LEAF_NODE	9:47	9:47	10	(
ARGUMENT	9:48	9:48	10	self
FIELD	9:48	9:48	11	self
LEAF_NODE	9:48	9:48	12	self
LEAF_NODE	9:52	9:52	10	)
LEAF_NODE	9:53	9:53	8	,
ARGUMENT	9:55	9:55	8	sess_id
FIELD	9:55	9:55	9	sess_id
LEAF_NODE	9:55	9:55	10	sess_id
LEAF_NODE	9:62	9:62	8	)
LEAF_NODE	9:63	9:63	4	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	session == NULL
EXPR	10:5	10:16	5	session == NULL
FIELD	10:5	10:5	6	session
LEAF_NODE	10:5	10:5	7	session
EQ_OPERATOR	10:13	10:13	6	==
LEAF_NODE	10:13	10:13	7	==
FIELD	10:16	10:16	6	NULL
LEAF_NODE	10:16	10:16	7	NULL
LEAF_NODE	10:20	10:20	4	)
STATEMENTS	11:2	11:2	4	
JUMP_STATEMENT	11:2	11:13	5	return NULL ;
KEYWORD	11:2	11:2	6	return
LEAF_NODE	11:2	11:2	7	return
DESTINATION	11:9	11:9	6	NULL
EXPR	11:9	11:9	7	NULL
FIELD	11:9	11:9	8	NULL
LEAF_NODE	11:9	11:9	9	NULL
LEAF_NODE	11:13	11:13	6	;
EXPR_STATEMENT	12:1	13:33	3	g_object_get ( G_OBJECT ( session -> session ) , "codecs" , & fscodecs , NULL ) ;
EXPR	12:1	12:1	4	g_object_get ( G_OBJECT ( session -> session ) , "codecs" , & fscodecs , NULL )
FUNCTION_CALL	12:1	13:32	5	g_object_get ( G_OBJECT ( session -> session ) , "codecs" , & fscodecs , NULL )
CALLEE	12:1	12:1	6	g_object_get
LEAF_NODE	12:1	12:1	7	g_object_get
LEAF_NODE	12:13	12:13	6	(
ARGUMENT	12:14	12:14	6	G_OBJECT ( session -> session )
FUNCTION_CALL	12:14	12:39	7	G_OBJECT ( session -> session )
CALLEE	12:14	12:14	8	G_OBJECT
LEAF_NODE	12:14	12:14	9	G_OBJECT
LEAF_NODE	12:22	12:22	8	(
ARGUMENT	12:23	12:23	8	session -> session
FIELD	12:23	12:32	9	session -> session
LEAF_NODE	12:23	12:23	10	session
LEAF_NODE	12:30	12:30	10	->
LEAF_NODE	12:32	12:32	10	session
LEAF_NODE	12:39	12:39	8	)
LEAF_NODE	12:40	12:40	6	,
ARGUMENT	13:7	13:7	6	"codecs"
FIELD	13:7	13:7	7	"codecs"
LEAF_NODE	13:7	13:7	8	"codecs"
LEAF_NODE	13:15	13:15	6	,
ARGUMENT	13:17	13:17	6	& fscodecs
UNARY_EXPR	13:17	13:18	7	& fscodecs
UNARY_OPERATOR	13:17	13:17	8	&
LEAF_NODE	13:17	13:17	9	&
FIELD	13:18	13:18	8	fscodecs
LEAF_NODE	13:18	13:18	9	fscodecs
LEAF_NODE	13:26	13:26	6	,
ARGUMENT	13:28	13:28	6	NULL
FIELD	13:28	13:28	7	NULL
LEAF_NODE	13:28	13:28	8	NULL
LEAF_NODE	13:32	13:32	6	)
LEAF_NODE	13:33	13:33	4	;
EXPR_STATEMENT	14:1	14:38	3	codecs = codec_list_from_fs ( fscodecs ) ;
EXPR	14:1	14:1	4	codecs = codec_list_from_fs ( fscodecs )
ASSIGN	14:1	14:10	5	codecs = codec_list_from_fs ( fscodecs )
LVAL	14:1	14:1	6	codecs
FIELD	14:1	14:1	7	codecs
LEAF_NODE	14:1	14:1	8	codecs
ASSIGN_OP	14:8	14:8	6	=
LEAF_NODE	14:8	14:8	7	=
RVAL	14:10	14:10	6	codec_list_from_fs ( fscodecs )
FUNCTION_CALL	14:10	14:37	7	codec_list_from_fs ( fscodecs )
CALLEE	14:10	14:10	8	codec_list_from_fs
LEAF_NODE	14:10	14:10	9	codec_list_from_fs
LEAF_NODE	14:28	14:28	8	(
ARGUMENT	14:29	14:29	8	fscodecs
FIELD	14:29	14:29	9	fscodecs
LEAF_NODE	14:29	14:29	10	fscodecs
LEAF_NODE	14:37	14:37	8	)
LEAF_NODE	14:38	14:38	4	;
EXPR_STATEMENT	15:1	15:32	3	fs_codec_list_destroy ( fscodecs ) ;
EXPR	15:1	15:1	4	fs_codec_list_destroy ( fscodecs )
FUNCTION_CALL	15:1	15:31	5	fs_codec_list_destroy ( fscodecs )
CALLEE	15:1	15:1	6	fs_codec_list_destroy
LEAF_NODE	15:1	15:1	7	fs_codec_list_destroy
LEAF_NODE	15:22	15:22	6	(
ARGUMENT	15:23	15:23	6	fscodecs
FIELD	15:23	15:23	7	fscodecs
LEAF_NODE	15:23	15:23	8	fscodecs
LEAF_NODE	15:31	15:31	6	)
LEAF_NODE	15:32	15:32	4	;
JUMP_STATEMENT	16:1	16:14	3	return codecs ;
KEYWORD	16:1	16:1	4	return
LEAF_NODE	16:1	16:1	5	return
DESTINATION	16:8	16:8	4	codecs
EXPR	16:8	16:8	5	codecs
FIELD	16:8	16:8	6	codecs
LEAF_NODE	16:8	16:8	7	codecs
LEAF_NODE	16:14	16:14	4	;
LEAF_NODE	17:0	17:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	36:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	straight_to_hell
LEAF_NODE	2:0	2:0	3	straight_to_hell
PARAMETER_LIST	2:16	2:71	2	( gpointer data , gint source , const gchar * error_message )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:26	3	gpointer data
TYPE	2:17	2:17	4	gpointer
TYPE_NAME	2:17	2:17	5	gpointer
LEAF_NODE	2:17	2:17	6	gpointer
NAME	2:26	2:26	4	data
LEAF_NODE	2:26	2:26	5	data
LEAF_NODE	2:30	2:30	3	,
PARAMETER_DECL	2:32	2:37	3	gint source
TYPE	2:32	2:32	4	gint
TYPE_NAME	2:32	2:32	5	gint
LEAF_NODE	2:32	2:32	6	gint
NAME	2:37	2:37	4	source
LEAF_NODE	2:37	2:37	5	source
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:58	3	const gchar * error_message
TYPE	2:45	2:57	4	const gchar *
TYPE_NAME	2:45	2:51	5	const gchar
LEAF_NODE	2:45	2:45	6	const
LEAF_NODE	2:51	2:51	6	gchar
POINTER	2:57	2:57	5	*
LEAF_NODE	2:57	2:57	6	*
NAME	2:58	2:58	4	error_message
LEAF_NODE	2:58	2:58	5	error_message
LEAF_NODE	2:71	2:71	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	35:1	2	
SIMPLE_DECL	4:1	4:31	3	struct pieceofcrap * pos ; pos = data ;
VAR_DECL	4:1	4:21	4	struct pieceofcrap * pos ; pos = data
TYPE	4:1	4:20	5	struct pieceofcrap *
TYPE_NAME	4:1	4:8	6	struct pieceofcrap
LEAF_NODE	4:1	4:1	7	struct
LEAF_NODE	4:8	4:8	7	pieceofcrap
POINTER	4:20	4:20	6	*
LEAF_NODE	4:20	4:20	7	*
NAME	4:21	4:21	5	pos
LEAF_NODE	4:21	4:21	6	pos
LEAF_NODE	0:0	0:0	5	;
INIT	4:21	4:21	5	pos = data
ASSIGN	4:21	4:27	6	pos = data
LVAL	4:21	4:21	7	pos
NAME	4:21	4:21	8	pos
LEAF_NODE	4:21	4:21	9	pos
ASSIGN_OP	4:25	4:25	7	=
LEAF_NODE	4:25	4:25	8	=
RVAL	4:27	4:27	7	data
FIELD	4:27	4:27	8	data
LEAF_NODE	4:27	4:27	9	data
LEAF_NODE	4:31	4:31	4	;
SIMPLE_DECL	5:1	5:11	3	gchar * buf ;
VAR_DECL	5:1	5:8	4	gchar * buf
TYPE	5:1	5:7	5	gchar *
TYPE_NAME	5:1	5:1	6	gchar
LEAF_NODE	5:1	5:1	7	gchar
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	buf
LEAF_NODE	5:8	5:8	6	buf
LEAF_NODE	5:11	5:11	4	;
SIMPLE_DECL	6:1	6:14	3	gssize result ;
VAR_DECL	6:1	6:8	4	gssize result
TYPE	6:1	6:1	5	gssize
TYPE_NAME	6:1	6:1	6	gssize
LEAF_NODE	6:1	6:1	7	gssize
NAME	6:8	6:8	5	result
LEAF_NODE	6:8	6:8	6	result
LEAF_NODE	6:14	6:14	4	;
EXPR_STATEMENT	7:1	7:17	3	pos -> fd = source ;
EXPR	7:1	7:1	4	pos -> fd = source
ASSIGN	7:1	7:11	5	pos -> fd = source
LVAL	7:1	7:1	6	pos -> fd
FIELD	7:1	7:6	7	pos -> fd
LEAF_NODE	7:1	7:1	8	pos
LEAF_NODE	7:4	7:4	8	->
LEAF_NODE	7:6	7:6	8	fd
ASSIGN_OP	7:9	7:9	6	=
LEAF_NODE	7:9	7:9	7	=
RVAL	7:11	7:11	6	source
FIELD	7:11	7:11	7	source
LEAF_NODE	7:11	7:11	8	source
LEAF_NODE	7:17	7:17	4	;
SELECTION	8:1	8:17	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	source < 0
EXPR	8:5	8:14	5	source < 0
FIELD	8:5	8:5	6	source
LEAF_NODE	8:5	8:5	7	source
REL_OPERATOR	8:12	8:12	6	<
LEAF_NODE	8:12	8:12	7	<
FIELD	8:14	8:14	6	0
LEAF_NODE	8:14	8:14	7	0
LEAF_NODE	8:15	8:15	4	)
STATEMENTS	8:17	19:1	4	
LEAF_NODE	8:17	8:17	5	{
STATEMENTS	9:2	18:2	5	
LEAF_NODE	9:2	9:2	6	buf
LEAF_NODE	9:6	9:6	6	=
LEAF_NODE	9:8	9:8	6	g_strdup_printf
LEAF_NODE	9:23	9:23	6	(
LEAF_NODE	9:24	9:24	6	_
LEAF_NODE	9:25	9:25	6	(
LEAF_NODE	9:26	9:26	6	"You may be disconnected shortly.  "
LEAF_NODE	10:4	10:4	6	"If so, check %s for updates."
LEAF_NODE	10:34	10:34	6	)
LEAF_NODE	10:35	10:35	6	,
LEAF_NODE	11:4	11:4	6	oscar_get_ui_info_string
LEAF_NODE	11:28	11:28	6	(
LEAF_NODE	11:29	11:29	6	"website"
LEAF_NODE	11:38	11:38	6	,
LEAF_NODE	11:40	11:40	6	PURPLE_WEBSITE
LEAF_NODE	11:54	11:54	6	)
LEAF_NODE	11:55	11:55	6	)
LEAF_NODE	11:56	11:56	6	;
EXPR_STATEMENT	12:2	14:11	6	purple_notify_warning ( pos -> gc , NULL , _ ( "Unable to get a valid AIM login hash." ) , buf ) ;
EXPR	12:2	12:2	7	purple_notify_warning ( pos -> gc , NULL , _ ( "Unable to get a valid AIM login hash." ) , buf )
FUNCTION_CALL	12:2	14:10	8	purple_notify_warning ( pos -> gc , NULL , _ ( "Unable to get a valid AIM login hash." ) , buf )
CALLEE	12:2	12:2	9	purple_notify_warning
LEAF_NODE	12:2	12:2	10	purple_notify_warning
LEAF_NODE	12:23	12:23	9	(
ARGUMENT	12:24	12:24	9	pos -> gc
FIELD	12:24	12:29	10	pos -> gc
LEAF_NODE	12:24	12:24	11	pos
LEAF_NODE	12:27	12:27	11	->
LEAF_NODE	12:29	12:29	11	gc
LEAF_NODE	12:31	12:31	9	,
ARGUMENT	12:33	12:33	9	NULL
FIELD	12:33	12:33	10	NULL
LEAF_NODE	12:33	12:33	11	NULL
LEAF_NODE	12:37	12:37	9	,
ARGUMENT	13:7	13:7	9	_ ( "Unable to get a valid AIM login hash." )
FUNCTION_CALL	13:7	13:48	10	_ ( "Unable to get a valid AIM login hash." )
CALLEE	13:7	13:7	11	_
LEAF_NODE	13:7	13:7	12	_
LEAF_NODE	13:8	13:8	11	(
ARGUMENT	13:9	13:9	11	"Unable to get a valid AIM login hash."
FIELD	13:9	13:9	12	"Unable to get a valid AIM login hash."
LEAF_NODE	13:9	13:9	13	"Unable to get a valid AIM login hash."
LEAF_NODE	13:48	13:48	11	)
LEAF_NODE	13:49	13:49	9	,
ARGUMENT	14:7	14:7	9	buf
FIELD	14:7	14:7	10	buf
LEAF_NODE	14:7	14:7	11	buf
LEAF_NODE	14:10	14:10	9	)
LEAF_NODE	14:11	14:11	7	;
EXPR_STATEMENT	15:2	15:13	6	g_free ( buf ) ;
EXPR	15:2	15:2	7	g_free ( buf )
FUNCTION_CALL	15:2	15:12	8	g_free ( buf )
CALLEE	15:2	15:2	9	g_free
LEAF_NODE	15:2	15:2	10	g_free
LEAF_NODE	15:8	15:8	9	(
ARGUMENT	15:9	15:9	9	buf
FIELD	15:9	15:9	10	buf
LEAF_NODE	15:9	15:9	11	buf
LEAF_NODE	15:12	15:12	9	)
LEAF_NODE	15:13	15:13	7	;
EXPR_STATEMENT	16:2	16:22	6	g_free ( pos -> modname ) ;
EXPR	16:2	16:2	7	g_free ( pos -> modname )
FUNCTION_CALL	16:2	16:21	8	g_free ( pos -> modname )
CALLEE	16:2	16:2	9	g_free
LEAF_NODE	16:2	16:2	10	g_free
LEAF_NODE	16:8	16:8	9	(
ARGUMENT	16:9	16:9	9	pos -> modname
FIELD	16:9	16:14	10	pos -> modname
LEAF_NODE	16:9	16:9	11	pos
LEAF_NODE	16:12	16:12	11	->
LEAF_NODE	16:14	16:14	11	modname
LEAF_NODE	16:21	16:21	9	)
LEAF_NODE	16:22	16:22	7	;
EXPR_STATEMENT	17:2	17:13	6	g_free ( pos ) ;
EXPR	17:2	17:2	7	g_free ( pos )
FUNCTION_CALL	17:2	17:12	8	g_free ( pos )
CALLEE	17:2	17:2	9	g_free
LEAF_NODE	17:2	17:2	10	g_free
LEAF_NODE	17:8	17:8	9	(
ARGUMENT	17:9	17:9	9	pos
FIELD	17:9	17:9	10	pos
LEAF_NODE	17:9	17:9	11	pos
LEAF_NODE	17:12	17:12	9	)
LEAF_NODE	17:13	17:13	7	;
JUMP_STATEMENT	18:2	18:8	6	return DESTINATION ;
KEYWORD	18:2	18:2	7	return
LEAF_NODE	18:2	18:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	18:8	18:8	7	;
LEAF_NODE	19:1	19:1	5	}
LEAF_NODE	20:1	20:1	3	buf
LEAF_NODE	20:5	20:5	3	=
LEAF_NODE	20:7	20:7	3	g_strdup_printf
LEAF_NODE	20:22	20:22	3	(
LEAF_NODE	20:23	20:23	3	"GET "
LEAF_NODE	20:30	20:30	3	AIMHASHDATA
LEAF_NODE	20:42	20:42	3	"?offset=%ld&len=%ld&modname=%s HTTP/1.0\n\n"
LEAF_NODE	20:87	20:87	3	,
LEAF_NODE	21:3	21:3	3	pos
LEAF_NODE	21:6	21:6	3	->
LEAF_NODE	21:8	21:8	3	offset
LEAF_NODE	21:14	21:14	3	,
LEAF_NODE	21:16	21:16	3	pos
LEAF_NODE	21:19	21:19	3	->
LEAF_NODE	21:21	21:21	3	len
LEAF_NODE	21:24	21:24	3	,
LEAF_NODE	21:26	21:26	3	pos
LEAF_NODE	21:29	21:29	3	->
LEAF_NODE	21:31	21:31	3	modname
LEAF_NODE	21:39	21:39	3	?
LEAF_NODE	21:41	21:41	3	pos
LEAF_NODE	21:44	21:44	3	->
LABEL	21:46	21:54	3	modname :
LEAF_NODE	21:46	21:46	4	modname
LEAF_NODE	21:54	21:54	4	:
LEAF_NODE	21:56	21:56	3	""
LEAF_NODE	21:58	21:58	3	)
LEAF_NODE	21:59	21:59	3	;
EXPR_STATEMENT	22:1	22:44	3	result = send ( pos -> fd , buf , strlen ( buf ) , 0 ) ;
EXPR	22:1	22:1	4	result = send ( pos -> fd , buf , strlen ( buf ) , 0 )
ASSIGN	22:1	22:10	5	result = send ( pos -> fd , buf , strlen ( buf ) , 0 )
LVAL	22:1	22:1	6	result
FIELD	22:1	22:1	7	result
LEAF_NODE	22:1	22:1	8	result
ASSIGN_OP	22:8	22:8	6	=
LEAF_NODE	22:8	22:8	7	=
RVAL	22:10	22:10	6	send ( pos -> fd , buf , strlen ( buf ) , 0 )
FUNCTION_CALL	22:10	22:43	7	send ( pos -> fd , buf , strlen ( buf ) , 0 )
CALLEE	22:10	22:10	8	send
LEAF_NODE	22:10	22:10	9	send
LEAF_NODE	22:14	22:14	8	(
ARGUMENT	22:15	22:15	8	pos -> fd
FIELD	22:15	22:20	9	pos -> fd
LEAF_NODE	22:15	22:15	10	pos
LEAF_NODE	22:18	22:18	10	->
LEAF_NODE	22:20	22:20	10	fd
LEAF_NODE	22:22	22:22	8	,
ARGUMENT	22:24	22:24	8	buf
FIELD	22:24	22:24	9	buf
LEAF_NODE	22:24	22:24	10	buf
LEAF_NODE	22:27	22:27	8	,
ARGUMENT	22:29	22:29	8	strlen ( buf )
FUNCTION_CALL	22:29	22:39	9	strlen ( buf )
CALLEE	22:29	22:29	10	strlen
LEAF_NODE	22:29	22:29	11	strlen
LEAF_NODE	22:35	22:35	10	(
ARGUMENT	22:36	22:36	10	buf
FIELD	22:36	22:36	11	buf
LEAF_NODE	22:36	22:36	12	buf
LEAF_NODE	22:39	22:39	10	)
LEAF_NODE	22:40	22:40	8	,
ARGUMENT	22:42	22:42	8	0
FIELD	22:42	22:42	9	0
LEAF_NODE	22:42	22:42	10	0
LEAF_NODE	22:43	22:43	8	)
LEAF_NODE	22:44	22:44	4	;
SELECTION	23:1	24:2	3	
KEYWORD	23:1	23:1	4	if
LEAF_NODE	23:1	23:1	5	if
LEAF_NODE	23:4	23:4	4	(
CONDITION	23:5	23:5	4	result < 0
EXPR	23:5	23:14	5	result < 0
FIELD	23:5	23:5	6	result
LEAF_NODE	23:5	23:5	7	result
REL_OPERATOR	23:12	23:12	6	<
LEAF_NODE	23:12	23:12	7	<
FIELD	23:14	23:14	6	0
LEAF_NODE	23:14	23:14	7	0
LEAF_NODE	23:15	23:15	4	)
STATEMENTS	24:2	24:2	4	
LEAF_NODE	24:2	24:2	5	purple_debug_error
LEAF_NODE	24:20	24:20	3	(
LEAF_NODE	24:21	24:21	3	"oscar"
LEAF_NODE	24:28	24:28	3	,
LEAF_NODE	24:30	24:30	3	"Error writing %"
LEAF_NODE	24:48	24:48	3	G_GSIZE_FORMAT
LEAF_NODE	25:4	25:4	3	" bytes to fetch AIM hash data: %s\n"
LEAF_NODE	25:41	25:41	3	,
LEAF_NODE	26:4	26:4	3	strlen
LEAF_NODE	26:10	26:10	3	(
LEAF_NODE	26:11	26:11	3	buf
LEAF_NODE	26:14	26:14	3	)
LEAF_NODE	26:15	26:15	3	,
LEAF_NODE	26:17	26:17	3	g_strerror
LEAF_NODE	26:27	26:27	3	(
LEAF_NODE	26:28	26:28	3	errno
LEAF_NODE	26:33	26:33	3	)
LEAF_NODE	26:34	26:34	3	)
LEAF_NODE	26:35	26:35	3	;
SELECTION	27:1	27:6	3	
KEYWORD	27:1	27:1	4	else
LEAF_NODE	27:1	27:1	5	else
STATEMENTS	27:6	27:6	4	
SELECTION	27:6	28:2	5	
KEYWORD	27:6	27:6	6	if
LEAF_NODE	27:6	27:6	7	if
LEAF_NODE	27:9	27:9	6	(
CONDITION	27:10	27:10	6	( gsize ) result != strlen ( buf )
EXPR	27:10	27:27	7	( gsize ) result != strlen ( buf )
LEAF_NODE	27:10	27:10	8	(
TYPE_NAME	27:11	27:11	8	gsize
LEAF_NODE	27:11	27:11	9	gsize
LEAF_NODE	27:16	27:16	8	)
FIELD	27:17	27:17	8	result
LEAF_NODE	27:17	27:17	9	result
EQ_OPERATOR	27:24	27:24	8	!=
LEAF_NODE	27:24	27:24	9	!=
FUNCTION_CALL	27:27	27:37	8	strlen ( buf )
CALLEE	27:27	27:27	9	strlen
LEAF_NODE	27:27	27:27	10	strlen
LEAF_NODE	27:33	27:33	9	(
ARGUMENT	27:34	27:34	9	buf
FIELD	27:34	27:34	10	buf
LEAF_NODE	27:34	27:34	11	buf
LEAF_NODE	27:37	27:37	9	)
LEAF_NODE	27:38	27:38	6	)
STATEMENTS	28:2	28:2	6	
LEAF_NODE	28:2	28:2	7	purple_debug_error
LEAF_NODE	28:20	28:20	3	(
LEAF_NODE	28:21	28:21	3	"oscar"
LEAF_NODE	28:28	28:28	3	,
LEAF_NODE	28:30	28:30	3	"Tried to write %"
LEAF_NODE	29:4	29:4	3	G_GSIZE_FORMAT
LEAF_NODE	29:19	29:19	3	" bytes to fetch AIM hash data but "
LEAF_NODE	30:4	30:4	3	"instead wrote %"
LEAF_NODE	30:22	30:22	3	G_GSSIZE_FORMAT
LEAF_NODE	30:38	30:38	3	" bytes\n"
LEAF_NODE	30:48	30:48	3	,
LEAF_NODE	31:4	31:4	3	strlen
LEAF_NODE	31:10	31:10	3	(
LEAF_NODE	31:11	31:11	3	buf
LEAF_NODE	31:14	31:14	3	)
LEAF_NODE	31:15	31:15	3	,
LEAF_NODE	31:17	31:17	3	result
LEAF_NODE	31:23	31:23	3	)
LEAF_NODE	31:24	31:24	3	;
EXPR_STATEMENT	32:1	32:12	3	g_free ( buf ) ;
EXPR	32:1	32:1	4	g_free ( buf )
FUNCTION_CALL	32:1	32:11	5	g_free ( buf )
CALLEE	32:1	32:1	6	g_free
LEAF_NODE	32:1	32:1	7	g_free
LEAF_NODE	32:7	32:7	6	(
ARGUMENT	32:8	32:8	6	buf
FIELD	32:8	32:8	7	buf
LEAF_NODE	32:8	32:8	8	buf
LEAF_NODE	32:11	32:11	6	)
LEAF_NODE	32:12	32:12	4	;
EXPR_STATEMENT	33:1	33:21	3	g_free ( pos -> modname ) ;
EXPR	33:1	33:1	4	g_free ( pos -> modname )
FUNCTION_CALL	33:1	33:20	5	g_free ( pos -> modname )
CALLEE	33:1	33:1	6	g_free
LEAF_NODE	33:1	33:1	7	g_free
LEAF_NODE	33:7	33:7	6	(
ARGUMENT	33:8	33:8	6	pos -> modname
FIELD	33:8	33:13	7	pos -> modname
LEAF_NODE	33:8	33:8	8	pos
LEAF_NODE	33:11	33:11	8	->
LEAF_NODE	33:13	33:13	8	modname
LEAF_NODE	33:20	33:20	6	)
LEAF_NODE	33:21	33:21	4	;
EXPR_STATEMENT	34:1	34:72	3	pos -> inpa = purple_input_add ( pos -> fd , PURPLE_INPUT_READ , damn_you , pos ) ;
EXPR	34:1	34:1	4	pos -> inpa = purple_input_add ( pos -> fd , PURPLE_INPUT_READ , damn_you , pos )
ASSIGN	34:1	34:13	5	pos -> inpa = purple_input_add ( pos -> fd , PURPLE_INPUT_READ , damn_you , pos )
LVAL	34:1	34:1	6	pos -> inpa
FIELD	34:1	34:6	7	pos -> inpa
LEAF_NODE	34:1	34:1	8	pos
LEAF_NODE	34:4	34:4	8	->
LEAF_NODE	34:6	34:6	8	inpa
ASSIGN_OP	34:11	34:11	6	=
LEAF_NODE	34:11	34:11	7	=
RVAL	34:13	34:13	6	purple_input_add ( pos -> fd , PURPLE_INPUT_READ , damn_you , pos )
FUNCTION_CALL	34:13	34:71	7	purple_input_add ( pos -> fd , PURPLE_INPUT_READ , damn_you , pos )
CALLEE	34:13	34:13	8	purple_input_add
LEAF_NODE	34:13	34:13	9	purple_input_add
LEAF_NODE	34:29	34:29	8	(
ARGUMENT	34:30	34:30	8	pos -> fd
FIELD	34:30	34:35	9	pos -> fd
LEAF_NODE	34:30	34:30	10	pos
LEAF_NODE	34:33	34:33	10	->
LEAF_NODE	34:35	34:35	10	fd
LEAF_NODE	34:37	34:37	8	,
ARGUMENT	34:39	34:39	8	PURPLE_INPUT_READ
FIELD	34:39	34:39	9	PURPLE_INPUT_READ
LEAF_NODE	34:39	34:39	10	PURPLE_INPUT_READ
LEAF_NODE	34:56	34:56	8	,
ARGUMENT	34:58	34:58	8	damn_you
FIELD	34:58	34:58	9	damn_you
LEAF_NODE	34:58	34:58	10	damn_you
LEAF_NODE	34:66	34:66	8	,
ARGUMENT	34:68	34:68	8	pos
FIELD	34:68	34:68	9	pos
LEAF_NODE	34:68	34:68	10	pos
LEAF_NODE	34:71	34:71	8	)
LEAF_NODE	34:72	34:72	4	;
JUMP_STATEMENT	35:1	35:7	3	return DESTINATION ;
KEYWORD	35:1	35:1	4	return
LEAF_NODE	35:1	35:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	35:7	35:7	4	;
LEAF_NODE	36:0	36:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:15	2	PurplePresence *
TYPE_NAME	1:0	1:0	3	PurplePresence
LEAF_NODE	1:0	1:0	4	PurplePresence
LEAF_NODE	1:15	1:15	3	*
FUNCTION_NAME	2:0	2:0	2	purple_presence_new_for_conv
LEAF_NODE	2:0	2:0	3	purple_presence_new_for_conv
PARAMETER_LIST	2:28	2:53	2	( PurpleConversation * conv )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:49	3	PurpleConversation * conv
TYPE	2:29	2:48	4	PurpleConversation *
TYPE_NAME	2:29	2:29	5	PurpleConversation
LEAF_NODE	2:29	2:29	6	PurpleConversation
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	conv
LEAF_NODE	2:49	2:49	5	conv
LEAF_NODE	2:53	2:53	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:25	3	PurplePresence * presence ;
VAR_DECL	4:1	4:17	4	PurplePresence * presence
TYPE	4:1	4:16	5	PurplePresence *
TYPE_NAME	4:1	4:1	6	PurplePresence
LEAF_NODE	4:1	4:1	7	PurplePresence
POINTER	4:16	4:16	6	*
LEAF_NODE	4:16	4:16	7	*
NAME	4:17	4:17	5	presence
LEAF_NODE	4:17	4:17	6	presence
LEAF_NODE	4:25	4:25	4	;
EXPR_STATEMENT	5:1	5:41	3	g_return_val_if_fail ( conv != NULL , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( conv != NULL , NULL )
FUNCTION_CALL	5:1	5:40	5	g_return_val_if_fail ( conv != NULL , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:30	6	conv != NULL
FIELD	5:22	5:22	7	conv
LEAF_NODE	5:22	5:22	8	conv
EQ_OPERATOR	5:27	5:27	7	!=
LEAF_NODE	5:27	5:27	8	!=
FIELD	5:30	5:30	7	NULL
LEAF_NODE	5:30	5:30	8	NULL
LEAF_NODE	5:34	5:34	6	,
ARGUMENT	5:36	5:36	6	NULL
FIELD	5:36	5:36	7	NULL
LEAF_NODE	5:36	5:36	8	NULL
LEAF_NODE	5:40	5:40	6	)
LEAF_NODE	5:41	5:41	4	;
EXPR_STATEMENT	6:1	6:61	3	presence = purple_presence_new ( PURPLE_PRESENCE_CONTEXT_CONV ) ;
EXPR	6:1	6:1	4	presence = purple_presence_new ( PURPLE_PRESENCE_CONTEXT_CONV )
ASSIGN	6:1	6:12	5	presence = purple_presence_new ( PURPLE_PRESENCE_CONTEXT_CONV )
LVAL	6:1	6:1	6	presence
FIELD	6:1	6:1	7	presence
LEAF_NODE	6:1	6:1	8	presence
ASSIGN_OP	6:10	6:10	6	=
LEAF_NODE	6:10	6:10	7	=
RVAL	6:12	6:12	6	purple_presence_new ( PURPLE_PRESENCE_CONTEXT_CONV )
FUNCTION_CALL	6:12	6:60	7	purple_presence_new ( PURPLE_PRESENCE_CONTEXT_CONV )
CALLEE	6:12	6:12	8	purple_presence_new
LEAF_NODE	6:12	6:12	9	purple_presence_new
LEAF_NODE	6:31	6:31	8	(
ARGUMENT	6:32	6:32	8	PURPLE_PRESENCE_CONTEXT_CONV
FIELD	6:32	6:32	9	PURPLE_PRESENCE_CONTEXT_CONV
LEAF_NODE	6:32	6:32	10	PURPLE_PRESENCE_CONTEXT_CONV
LEAF_NODE	6:60	6:60	8	)
LEAF_NODE	6:61	6:61	4	;
EXPR_STATEMENT	7:1	7:29	3	presence -> u . chat . conv = conv ;
EXPR	7:1	7:1	4	presence -> u . chat . conv = conv
ASSIGN	7:1	7:25	5	presence -> u . chat . conv = conv
LVAL	7:1	7:1	6	presence -> u . chat . conv
FIELD	7:1	7:18	7	presence -> u . chat . conv
LEAF_NODE	7:1	7:1	8	presence
LEAF_NODE	7:9	7:9	8	->
LEAF_NODE	7:11	7:11	8	u
LEAF_NODE	7:12	7:12	8	.
LEAF_NODE	7:13	7:13	8	chat
LEAF_NODE	7:17	7:17	8	.
LEAF_NODE	7:18	7:18	8	conv
ASSIGN_OP	7:23	7:23	6	=
LEAF_NODE	7:23	7:23	7	=
RVAL	7:25	7:25	6	conv
FIELD	7:25	7:25	7	conv
LEAF_NODE	7:25	7:25	8	conv
LEAF_NODE	7:29	7:29	4	;
JUMP_STATEMENT	9:1	9:16	3	return presence ;
KEYWORD	9:1	9:1	4	return
LEAF_NODE	9:1	9:1	5	return
DESTINATION	9:8	9:8	4	presence
EXPR	9:8	9:8	5	presence
FIELD	9:8	9:8	6	presence
LEAF_NODE	9:8	9:8	7	presence
LEAF_NODE	9:16	9:16	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_plugins_unload_all
LEAF_NODE	2:0	2:0	3	purple_plugins_unload_all
PARAMETER_LIST	2:25	2:30	2	( void )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:26	3	void
LEAF_NODE	2:26	2:26	4	void
LEAF_NODE	2:30	2:30	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	5:1	5:1	2	
ITERATION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	while
LEAF_NODE	5:1	5:1	5	while
LEAF_NODE	5:7	5:7	4	(
CONDITION	5:8	5:8	4	loaded_plugins != NULL
EXPR	5:8	5:26	5	loaded_plugins != NULL
FIELD	5:8	5:8	6	loaded_plugins
LEAF_NODE	5:8	5:8	7	loaded_plugins
EQ_OPERATOR	5:23	5:23	6	!=
LEAF_NODE	5:23	5:23	7	!=
FIELD	5:26	5:26	6	NULL
LEAF_NODE	5:26	5:26	7	NULL
LEAF_NODE	5:30	5:30	4	)
STATEMENTS	6:2	6:2	4	
EXPR_STATEMENT	6:2	6:44	5	purple_plugin_unload ( loaded_plugins -> data ) ;
EXPR	6:2	6:2	6	purple_plugin_unload ( loaded_plugins -> data )
FUNCTION_CALL	6:2	6:43	7	purple_plugin_unload ( loaded_plugins -> data )
CALLEE	6:2	6:2	8	purple_plugin_unload
LEAF_NODE	6:2	6:2	9	purple_plugin_unload
LEAF_NODE	6:22	6:22	8	(
ARGUMENT	6:23	6:23	8	loaded_plugins -> data
FIELD	6:23	6:39	9	loaded_plugins -> data
LEAF_NODE	6:23	6:23	10	loaded_plugins
LEAF_NODE	6:37	6:37	10	->
LEAF_NODE	6:39	6:39	10	data
LEAF_NODE	6:43	6:43	8	)
LEAF_NODE	6:44	6:44	6	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	6:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	gg_dcc_set_type
LEAF_NODE	2:5	2:5	3	gg_dcc_set_type
PARAMETER_LIST	2:20	2:47	2	( struct gg_dcc * d , int type )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:36	3	struct gg_dcc * d
TYPE	2:21	2:35	4	struct gg_dcc *
TYPE_NAME	2:21	2:28	5	struct gg_dcc
LEAF_NODE	2:21	2:21	6	struct
LEAF_NODE	2:28	2:28	6	gg_dcc
POINTER	2:35	2:35	5	*
LEAF_NODE	2:35	2:35	6	*
NAME	2:36	2:36	4	d
LEAF_NODE	2:36	2:36	5	d
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:43	3	int type
TYPE	2:39	2:39	4	int
TYPE_NAME	2:39	2:39	5	int
LEAF_NODE	2:39	2:39	6	int
NAME	2:43	2:43	4	type
LEAF_NODE	2:43	2:43	5	type
LEAF_NODE	2:47	2:47	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:15	3	d -> type = type ;
EXPR	4:1	4:1	4	d -> type = type
ASSIGN	4:1	4:11	5	d -> type = type
LVAL	4:1	4:1	6	d -> type
FIELD	4:1	4:4	7	d -> type
LEAF_NODE	4:1	4:1	8	d
LEAF_NODE	4:2	4:2	8	->
LEAF_NODE	4:4	4:4	8	type
ASSIGN_OP	4:9	4:9	6	=
LEAF_NODE	4:9	4:9	7	=
RVAL	4:11	4:11	6	type
FIELD	4:11	4:11	7	type
LEAF_NODE	4:11	4:11	8	type
LEAF_NODE	4:15	4:15	4	;
EXPR_STATEMENT	5:1	5:103	3	d -> state = ( type == GG_SESSION_DCC_SEND ) ? GG_STATE_SENDING_FILE_INFO : GG_STATE_SENDING_VOICE_REQUEST ;
EXPR	5:1	5:1	4	d -> state = ( type == GG_SESSION_DCC_SEND ) ? GG_STATE_SENDING_FILE_INFO : GG_STATE_SENDING_VOICE_REQUEST
ASSIGN	5:1	5:12	5	d -> state = ( type == GG_SESSION_DCC_SEND ) ? GG_STATE_SENDING_FILE_INFO : GG_STATE_SENDING_VOICE_REQUEST
LVAL	5:1	5:1	6	d -> state
FIELD	5:1	5:4	7	d -> state
LEAF_NODE	5:1	5:1	8	d
LEAF_NODE	5:2	5:2	8	->
LEAF_NODE	5:4	5:4	8	state
ASSIGN_OP	5:10	5:10	6	=
LEAF_NODE	5:10	5:10	7	=
RVAL	5:12	5:12	6	( type == GG_SESSION_DCC_SEND ) ? GG_STATE_SENDING_FILE_INFO : GG_STATE_SENDING_VOICE_REQUEST
COND_EXPR	5:12	5:73	7	( type == GG_SESSION_DCC_SEND ) ? GG_STATE_SENDING_FILE_INFO : GG_STATE_SENDING_VOICE_REQUEST
CONDITION	5:12	5:40	8	( type == GG_SESSION_DCC_SEND )
LEAF_NODE	5:12	5:12	9	(
FIELD	5:13	5:13	9	type
LEAF_NODE	5:13	5:13	10	type
EQ_OPERATOR	5:18	5:18	9	==
LEAF_NODE	5:18	5:18	10	==
FIELD	5:21	5:21	9	GG_SESSION_DCC_SEND
LEAF_NODE	5:21	5:21	10	GG_SESSION_DCC_SEND
LEAF_NODE	5:40	5:40	9	)
LEAF_NODE	5:42	5:42	8	?
EXPR	5:44	5:44	8	GG_STATE_SENDING_FILE_INFO
FIELD	5:44	5:44	9	GG_STATE_SENDING_FILE_INFO
LEAF_NODE	5:44	5:44	10	GG_STATE_SENDING_FILE_INFO
LEAF_NODE	5:71	5:71	8	:
FIELD	5:73	5:73	8	GG_STATE_SENDING_VOICE_REQUEST
LEAF_NODE	5:73	5:73	9	GG_STATE_SENDING_VOICE_REQUEST
LEAF_NODE	5:103	5:103	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	11:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_dbus_init_ids
LEAF_NODE	2:0	2:0	3	purple_dbus_init_ids
PARAMETER_LIST	2:20	2:25	2	( void )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:21	3	void
LEAF_NODE	2:21	2:21	4	void
LEAF_NODE	2:25	2:25	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	10:1	2	
EXPR_STATEMENT	4:1	4:62	3	map_id_node = g_hash_table_new ( g_direct_hash , g_direct_equal ) ;
EXPR	4:1	4:1	4	map_id_node = g_hash_table_new ( g_direct_hash , g_direct_equal )
ASSIGN	4:1	4:15	5	map_id_node = g_hash_table_new ( g_direct_hash , g_direct_equal )
LVAL	4:1	4:1	6	map_id_node
FIELD	4:1	4:1	7	map_id_node
LEAF_NODE	4:1	4:1	8	map_id_node
ASSIGN_OP	4:13	4:13	6	=
LEAF_NODE	4:13	4:13	7	=
RVAL	4:15	4:15	6	g_hash_table_new ( g_direct_hash , g_direct_equal )
FUNCTION_CALL	4:15	4:61	7	g_hash_table_new ( g_direct_hash , g_direct_equal )
CALLEE	4:15	4:15	8	g_hash_table_new
LEAF_NODE	4:15	4:15	9	g_hash_table_new
LEAF_NODE	4:31	4:31	8	(
ARGUMENT	4:32	4:32	8	g_direct_hash
FIELD	4:32	4:32	9	g_direct_hash
LEAF_NODE	4:32	4:32	10	g_direct_hash
LEAF_NODE	4:45	4:45	8	,
ARGUMENT	4:47	4:47	8	g_direct_equal
FIELD	4:47	4:47	9	g_direct_equal
LEAF_NODE	4:47	4:47	10	g_direct_equal
LEAF_NODE	4:61	4:61	8	)
LEAF_NODE	4:62	4:62	4	;
EXPR_STATEMENT	5:1	5:62	3	map_id_type = g_hash_table_new ( g_direct_hash , g_direct_equal ) ;
EXPR	5:1	5:1	4	map_id_type = g_hash_table_new ( g_direct_hash , g_direct_equal )
ASSIGN	5:1	5:15	5	map_id_type = g_hash_table_new ( g_direct_hash , g_direct_equal )
LVAL	5:1	5:1	6	map_id_type
FIELD	5:1	5:1	7	map_id_type
LEAF_NODE	5:1	5:1	8	map_id_type
ASSIGN_OP	5:13	5:13	6	=
LEAF_NODE	5:13	5:13	7	=
RVAL	5:15	5:15	6	g_hash_table_new ( g_direct_hash , g_direct_equal )
FUNCTION_CALL	5:15	5:61	7	g_hash_table_new ( g_direct_hash , g_direct_equal )
CALLEE	5:15	5:15	8	g_hash_table_new
LEAF_NODE	5:15	5:15	9	g_hash_table_new
LEAF_NODE	5:31	5:31	8	(
ARGUMENT	5:32	5:32	8	g_direct_hash
FIELD	5:32	5:32	9	g_direct_hash
LEAF_NODE	5:32	5:32	10	g_direct_hash
LEAF_NODE	5:45	5:45	8	,
ARGUMENT	5:47	5:47	8	g_direct_equal
FIELD	5:47	5:47	9	g_direct_equal
LEAF_NODE	5:47	5:47	10	g_direct_equal
LEAF_NODE	5:61	5:61	8	)
LEAF_NODE	5:62	5:62	4	;
EXPR_STATEMENT	6:1	6:62	3	map_node_id = g_hash_table_new ( g_direct_hash , g_direct_equal ) ;
EXPR	6:1	6:1	4	map_node_id = g_hash_table_new ( g_direct_hash , g_direct_equal )
ASSIGN	6:1	6:15	5	map_node_id = g_hash_table_new ( g_direct_hash , g_direct_equal )
LVAL	6:1	6:1	6	map_node_id
FIELD	6:1	6:1	7	map_node_id
LEAF_NODE	6:1	6:1	8	map_node_id
ASSIGN_OP	6:13	6:13	6	=
LEAF_NODE	6:13	6:13	7	=
RVAL	6:15	6:15	6	g_hash_table_new ( g_direct_hash , g_direct_equal )
FUNCTION_CALL	6:15	6:61	7	g_hash_table_new ( g_direct_hash , g_direct_equal )
CALLEE	6:15	6:15	8	g_hash_table_new
LEAF_NODE	6:15	6:15	9	g_hash_table_new
LEAF_NODE	6:31	6:31	8	(
ARGUMENT	6:32	6:32	8	g_direct_hash
FIELD	6:32	6:32	9	g_direct_hash
LEAF_NODE	6:32	6:32	10	g_direct_hash
LEAF_NODE	6:45	6:45	8	,
ARGUMENT	6:47	6:47	8	g_direct_equal
FIELD	6:47	6:47	9	g_direct_equal
LEAF_NODE	6:47	6:47	10	g_direct_equal
LEAF_NODE	6:61	6:61	8	)
LEAF_NODE	6:62	6:62	4	;
EXPR_STATEMENT	7:1	7:76	3	PURPLE_DBUS_TYPE ( PurpleBuddy ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode ) ;
EXPR	7:1	7:1	4	PURPLE_DBUS_TYPE ( PurpleBuddy ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode )
ASSIGN	7:1	7:43	5	PURPLE_DBUS_TYPE ( PurpleBuddy ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode )
LVAL	7:1	7:32	6	PURPLE_DBUS_TYPE ( PurpleBuddy ) -> parent
FUNCTION_CALL	7:1	7:29	7	PURPLE_DBUS_TYPE ( PurpleBuddy )
CALLEE	7:1	7:1	8	PURPLE_DBUS_TYPE
LEAF_NODE	7:1	7:1	9	PURPLE_DBUS_TYPE
LEAF_NODE	7:17	7:17	8	(
ARGUMENT	7:18	7:18	8	PurpleBuddy
FIELD	7:18	7:18	9	PurpleBuddy
LEAF_NODE	7:18	7:18	10	PurpleBuddy
LEAF_NODE	7:29	7:29	8	)
LEAF_NODE	7:30	7:30	7	->
LEAF_NODE	7:32	7:32	7	parent
ASSIGN_OP	7:41	7:41	6	=
LEAF_NODE	7:41	7:41	7	=
RVAL	7:43	7:43	6	PURPLE_DBUS_TYPE ( PurpleBlistNode )
FUNCTION_CALL	7:43	7:75	7	PURPLE_DBUS_TYPE ( PurpleBlistNode )
CALLEE	7:43	7:43	8	PURPLE_DBUS_TYPE
LEAF_NODE	7:43	7:43	9	PURPLE_DBUS_TYPE
LEAF_NODE	7:59	7:59	8	(
ARGUMENT	7:60	7:60	8	PurpleBlistNode
FIELD	7:60	7:60	9	PurpleBlistNode
LEAF_NODE	7:60	7:60	10	PurpleBlistNode
LEAF_NODE	7:75	7:75	8	)
LEAF_NODE	7:76	7:76	4	;
EXPR_STATEMENT	8:1	8:76	3	PURPLE_DBUS_TYPE ( PurpleContact ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode ) ;
EXPR	8:1	8:1	4	PURPLE_DBUS_TYPE ( PurpleContact ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode )
ASSIGN	8:1	8:43	5	PURPLE_DBUS_TYPE ( PurpleContact ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode )
LVAL	8:1	8:34	6	PURPLE_DBUS_TYPE ( PurpleContact ) -> parent
FUNCTION_CALL	8:1	8:31	7	PURPLE_DBUS_TYPE ( PurpleContact )
CALLEE	8:1	8:1	8	PURPLE_DBUS_TYPE
LEAF_NODE	8:1	8:1	9	PURPLE_DBUS_TYPE
LEAF_NODE	8:17	8:17	8	(
ARGUMENT	8:18	8:18	8	PurpleContact
FIELD	8:18	8:18	9	PurpleContact
LEAF_NODE	8:18	8:18	10	PurpleContact
LEAF_NODE	8:31	8:31	8	)
LEAF_NODE	8:32	8:32	7	->
LEAF_NODE	8:34	8:34	7	parent
ASSIGN_OP	8:41	8:41	6	=
LEAF_NODE	8:41	8:41	7	=
RVAL	8:43	8:43	6	PURPLE_DBUS_TYPE ( PurpleBlistNode )
FUNCTION_CALL	8:43	8:75	7	PURPLE_DBUS_TYPE ( PurpleBlistNode )
CALLEE	8:43	8:43	8	PURPLE_DBUS_TYPE
LEAF_NODE	8:43	8:43	9	PURPLE_DBUS_TYPE
LEAF_NODE	8:59	8:59	8	(
ARGUMENT	8:60	8:60	8	PurpleBlistNode
FIELD	8:60	8:60	9	PurpleBlistNode
LEAF_NODE	8:60	8:60	10	PurpleBlistNode
LEAF_NODE	8:75	8:75	8	)
LEAF_NODE	8:76	8:76	4	;
EXPR_STATEMENT	9:1	9:76	3	PURPLE_DBUS_TYPE ( PurpleChat ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode ) ;
EXPR	9:1	9:1	4	PURPLE_DBUS_TYPE ( PurpleChat ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode )
ASSIGN	9:1	9:43	5	PURPLE_DBUS_TYPE ( PurpleChat ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode )
LVAL	9:1	9:31	6	PURPLE_DBUS_TYPE ( PurpleChat ) -> parent
FUNCTION_CALL	9:1	9:28	7	PURPLE_DBUS_TYPE ( PurpleChat )
CALLEE	9:1	9:1	8	PURPLE_DBUS_TYPE
LEAF_NODE	9:1	9:1	9	PURPLE_DBUS_TYPE
LEAF_NODE	9:17	9:17	8	(
ARGUMENT	9:18	9:18	8	PurpleChat
FIELD	9:18	9:18	9	PurpleChat
LEAF_NODE	9:18	9:18	10	PurpleChat
LEAF_NODE	9:28	9:28	8	)
LEAF_NODE	9:29	9:29	7	->
LEAF_NODE	9:31	9:31	7	parent
ASSIGN_OP	9:41	9:41	6	=
LEAF_NODE	9:41	9:41	7	=
RVAL	9:43	9:43	6	PURPLE_DBUS_TYPE ( PurpleBlistNode )
FUNCTION_CALL	9:43	9:75	7	PURPLE_DBUS_TYPE ( PurpleBlistNode )
CALLEE	9:43	9:43	8	PURPLE_DBUS_TYPE
LEAF_NODE	9:43	9:43	9	PURPLE_DBUS_TYPE
LEAF_NODE	9:59	9:59	8	(
ARGUMENT	9:60	9:60	8	PurpleBlistNode
FIELD	9:60	9:60	9	PurpleBlistNode
LEAF_NODE	9:60	9:60	10	PurpleBlistNode
LEAF_NODE	9:75	9:75	8	)
LEAF_NODE	9:76	9:76	4	;
EXPR_STATEMENT	10:1	10:76	3	PURPLE_DBUS_TYPE ( PurpleGroup ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode ) ;
EXPR	10:1	10:1	4	PURPLE_DBUS_TYPE ( PurpleGroup ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode )
ASSIGN	10:1	10:43	5	PURPLE_DBUS_TYPE ( PurpleGroup ) -> parent = PURPLE_DBUS_TYPE ( PurpleBlistNode )
LVAL	10:1	10:32	6	PURPLE_DBUS_TYPE ( PurpleGroup ) -> parent
FUNCTION_CALL	10:1	10:29	7	PURPLE_DBUS_TYPE ( PurpleGroup )
CALLEE	10:1	10:1	8	PURPLE_DBUS_TYPE
LEAF_NODE	10:1	10:1	9	PURPLE_DBUS_TYPE
LEAF_NODE	10:17	10:17	8	(
ARGUMENT	10:18	10:18	8	PurpleGroup
FIELD	10:18	10:18	9	PurpleGroup
LEAF_NODE	10:18	10:18	10	PurpleGroup
LEAF_NODE	10:29	10:29	8	)
LEAF_NODE	10:30	10:30	7	->
LEAF_NODE	10:32	10:32	7	parent
ASSIGN_OP	10:41	10:41	6	=
LEAF_NODE	10:41	10:41	7	=
RVAL	10:43	10:43	6	PURPLE_DBUS_TYPE ( PurpleBlistNode )
FUNCTION_CALL	10:43	10:75	7	PURPLE_DBUS_TYPE ( PurpleBlistNode )
CALLEE	10:43	10:43	8	PURPLE_DBUS_TYPE
LEAF_NODE	10:43	10:43	9	PURPLE_DBUS_TYPE
LEAF_NODE	10:59	10:59	8	(
ARGUMENT	10:60	10:60	8	PurpleBlistNode
FIELD	10:60	10:60	9	PurpleBlistNode
LEAF_NODE	10:60	10:60	10	PurpleBlistNode
LEAF_NODE	10:75	10:75	8	)
LEAF_NODE	10:76	10:76	4	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	11:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	docklet_gtk_status_clicked_cb
LEAF_NODE	2:0	2:0	3	docklet_gtk_status_clicked_cb
PARAMETER_LIST	2:29	2:111	2	( GtkStatusIcon * status_icon , guint button , guint activate_time , gpointer user_data )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:45	3	GtkStatusIcon * status_icon
TYPE	2:30	2:44	4	GtkStatusIcon *
TYPE_NAME	2:30	2:30	5	GtkStatusIcon
LEAF_NODE	2:30	2:30	6	GtkStatusIcon
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	status_icon
LEAF_NODE	2:45	2:45	5	status_icon
LEAF_NODE	2:56	2:56	3	,
PARAMETER_DECL	2:58	2:64	3	guint button
TYPE	2:58	2:58	4	guint
TYPE_NAME	2:58	2:58	5	guint
LEAF_NODE	2:58	2:58	6	guint
NAME	2:64	2:64	4	button
LEAF_NODE	2:64	2:64	5	button
LEAF_NODE	2:70	2:70	3	,
PARAMETER_DECL	2:72	2:78	3	guint activate_time
TYPE	2:72	2:72	4	guint
TYPE_NAME	2:72	2:72	5	guint
LEAF_NODE	2:72	2:72	6	guint
NAME	2:78	2:78	4	activate_time
LEAF_NODE	2:78	2:78	5	activate_time
LEAF_NODE	2:91	2:91	3	,
PARAMETER_DECL	2:93	2:102	3	gpointer user_data
TYPE	2:93	2:93	4	gpointer
TYPE_NAME	2:93	2:93	5	gpointer
LEAF_NODE	2:93	2:93	6	gpointer
NAME	2:102	2:102	4	user_data
LEAF_NODE	2:102	2:102	5	user_data
LEAF_NODE	2:111	2:111	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
EXPR_STATEMENT	4:1	4:59	3	purple_debug_info ( "docklet" , "The button is %u\n" , button ) ;
EXPR	4:1	4:1	4	purple_debug_info ( "docklet" , "The button is %u\n" , button )
FUNCTION_CALL	4:1	4:58	5	purple_debug_info ( "docklet" , "The button is %u\n" , button )
CALLEE	4:1	4:1	6	purple_debug_info
LEAF_NODE	4:1	4:1	7	purple_debug_info
LEAF_NODE	4:18	4:18	6	(
ARGUMENT	4:19	4:19	6	"docklet"
FIELD	4:19	4:19	7	"docklet"
LEAF_NODE	4:19	4:19	8	"docklet"
LEAF_NODE	4:28	4:28	6	,
ARGUMENT	4:30	4:30	6	"The button is %u\n"
FIELD	4:30	4:30	7	"The button is %u\n"
LEAF_NODE	4:30	4:30	8	"The button is %u\n"
LEAF_NODE	4:50	4:50	6	,
ARGUMENT	4:52	4:52	6	button
FIELD	4:52	4:52	7	button
LEAF_NODE	4:52	4:52	8	button
LEAF_NODE	4:58	4:58	6	)
LEAF_NODE	4:59	4:59	4	;
EXPR_STATEMENT	7:1	7:26	3	pidgin_docklet_clicked ( 3 ) ;
EXPR	7:1	7:1	4	pidgin_docklet_clicked ( 3 )
FUNCTION_CALL	7:1	7:25	5	pidgin_docklet_clicked ( 3 )
CALLEE	7:1	7:1	6	pidgin_docklet_clicked
LEAF_NODE	7:1	7:1	7	pidgin_docklet_clicked
LEAF_NODE	7:23	7:23	6	(
ARGUMENT	7:24	7:24	6	3
FIELD	7:24	7:24	7	3
LEAF_NODE	7:24	7:24	8	3
LEAF_NODE	7:25	7:25	6	)
LEAF_NODE	7:26	7:26	4	;
EXPR_STATEMENT	9:1	9:31	3	pidgin_docklet_clicked ( button ) ;
EXPR	9:1	9:1	4	pidgin_docklet_clicked ( button )
FUNCTION_CALL	9:1	9:30	5	pidgin_docklet_clicked ( button )
CALLEE	9:1	9:1	6	pidgin_docklet_clicked
LEAF_NODE	9:1	9:1	7	pidgin_docklet_clicked
LEAF_NODE	9:23	9:23	6	(
ARGUMENT	9:24	9:24	6	button
FIELD	9:24	9:24	7	button
LEAF_NODE	9:24	9:24	8	button
LEAF_NODE	9:30	9:30	6	)
LEAF_NODE	9:31	9:31	4	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	12:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	serv_rem_permit
LEAF_NODE	2:5	2:5	3	serv_rem_permit
PARAMETER_LIST	2:20	2:59	2	( PurpleConnection * gc , const char * name )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:39	3	PurpleConnection * gc
TYPE	2:21	2:38	4	PurpleConnection *
TYPE_NAME	2:21	2:21	5	PurpleConnection
LEAF_NODE	2:21	2:21	6	PurpleConnection
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	gc
LEAF_NODE	2:39	2:39	5	gc
LEAF_NODE	2:41	2:41	3	,
PARAMETER_DECL	2:43	2:55	3	const char * name
TYPE	2:43	2:54	4	const char *
TYPE_NAME	2:43	2:49	5	const char
LEAF_NODE	2:43	2:43	6	const
LEAF_NODE	2:49	2:49	6	char
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	name
LEAF_NODE	2:55	2:55	5	name
LEAF_NODE	2:59	2:59	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SIMPLE_DECL	4:1	4:19	3	PurplePlugin * prpl ;
VAR_DECL	4:1	4:15	4	PurplePlugin * prpl
TYPE	4:1	4:14	5	PurplePlugin *
TYPE_NAME	4:1	4:1	6	PurplePlugin
LEAF_NODE	4:1	4:1	7	PurplePlugin
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	prpl
LEAF_NODE	4:15	4:15	6	prpl
LEAF_NODE	4:19	4:19	4	;
SIMPLE_DECL	5:1	5:36	3	PurplePluginProtocolInfo * prpl_info ;
VAR_DECL	5:1	5:27	4	PurplePluginProtocolInfo * prpl_info
TYPE	5:1	5:26	5	PurplePluginProtocolInfo *
TYPE_NAME	5:1	5:1	6	PurplePluginProtocolInfo
LEAF_NODE	5:1	5:1	7	PurplePluginProtocolInfo
POINTER	5:26	5:26	6	*
LEAF_NODE	5:26	5:26	7	*
NAME	5:27	5:27	5	prpl_info
LEAF_NODE	5:27	5:27	6	prpl_info
LEAF_NODE	5:36	5:36	4	;
SELECTION	6:1	6:9	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	gc
EXPR	6:5	6:5	5	gc
FIELD	6:5	6:5	6	gc
LEAF_NODE	6:5	6:5	7	gc
LEAF_NODE	6:7	6:7	4	)
STATEMENTS	6:9	11:1	4	
LEAF_NODE	6:9	6:9	5	{
STATEMENTS	7:2	9:2	5	
EXPR_STATEMENT	7:2	7:39	6	prpl = purple_connection_get_prpl ( gc ) ;
EXPR	7:2	7:2	7	prpl = purple_connection_get_prpl ( gc )
ASSIGN	7:2	7:9	8	prpl = purple_connection_get_prpl ( gc )
LVAL	7:2	7:2	9	prpl
FIELD	7:2	7:2	10	prpl
LEAF_NODE	7:2	7:2	11	prpl
ASSIGN_OP	7:7	7:7	9	=
LEAF_NODE	7:7	7:7	10	=
RVAL	7:9	7:9	9	purple_connection_get_prpl ( gc )
FUNCTION_CALL	7:9	7:38	10	purple_connection_get_prpl ( gc )
CALLEE	7:9	7:9	11	purple_connection_get_prpl
LEAF_NODE	7:9	7:9	12	purple_connection_get_prpl
LEAF_NODE	7:35	7:35	11	(
ARGUMENT	7:36	7:36	11	gc
FIELD	7:36	7:36	12	gc
LEAF_NODE	7:36	7:36	13	gc
LEAF_NODE	7:38	7:38	11	)
LEAF_NODE	7:39	7:39	7	;
EXPR_STATEMENT	8:2	8:47	6	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl ) ;
EXPR	8:2	8:2	7	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
ASSIGN	8:2	8:14	8	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
LVAL	8:2	8:2	9	prpl_info
FIELD	8:2	8:2	10	prpl_info
LEAF_NODE	8:2	8:2	11	prpl_info
ASSIGN_OP	8:12	8:12	9	=
LEAF_NODE	8:12	8:12	10	=
RVAL	8:14	8:14	9	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
FUNCTION_CALL	8:14	8:46	10	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
CALLEE	8:14	8:14	11	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	8:14	8:14	12	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	8:41	8:41	11	(
ARGUMENT	8:42	8:42	11	prpl
FIELD	8:42	8:42	12	prpl
LEAF_NODE	8:42	8:42	13	prpl
LEAF_NODE	8:46	8:46	11	)
LEAF_NODE	8:47	8:47	7	;
SELECTION	9:2	10:3	6	
KEYWORD	9:2	9:2	7	if
LEAF_NODE	9:2	9:2	8	if
LEAF_NODE	9:5	9:5	7	(
CONDITION	9:6	9:6	7	prpl_info -> rem_permit
EXPR	9:6	9:6	8	prpl_info -> rem_permit
FIELD	9:6	9:17	9	prpl_info -> rem_permit
LEAF_NODE	9:6	9:6	10	prpl_info
LEAF_NODE	9:15	9:15	10	->
LEAF_NODE	9:17	9:17	10	rem_permit
LEAF_NODE	9:27	9:27	7	)
STATEMENTS	10:3	10:3	7	
EXPR_STATEMENT	10:3	10:34	8	prpl_info -> rem_permit ( gc , name ) ;
EXPR	10:3	10:3	9	prpl_info -> rem_permit ( gc , name )
FUNCTION_CALL	10:3	10:33	10	prpl_info -> rem_permit ( gc , name )
CALLEE	10:3	10:14	11	prpl_info -> rem_permit
LEAF_NODE	10:3	10:3	12	prpl_info
LEAF_NODE	10:12	10:12	12	->
LEAF_NODE	10:14	10:14	12	rem_permit
LEAF_NODE	10:24	10:24	11	(
ARGUMENT	10:25	10:25	11	gc
FIELD	10:25	10:25	12	gc
LEAF_NODE	10:25	10:25	13	gc
LEAF_NODE	10:27	10:27	11	,
ARGUMENT	10:29	10:29	11	name
FIELD	10:29	10:29	12	name
LEAF_NODE	10:29	10:29	13	name
LEAF_NODE	10:33	10:33	11	)
LEAF_NODE	10:34	10:34	9	;
LEAF_NODE	11:1	11:1	5	}
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:0	2	PurpleType
TYPE_NAME	1:0	1:0	3	PurpleType
LEAF_NODE	1:0	1:0	4	PurpleType
FUNCTION_NAME	2:0	2:0	2	purple_value_get_type
LEAF_NODE	2:0	2:0	3	purple_value_get_type
PARAMETER_LIST	2:21	2:46	2	( const PurpleValue * value )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:41	3	const PurpleValue * value
TYPE	2:22	2:40	4	const PurpleValue *
TYPE_NAME	2:22	2:28	5	const PurpleValue
LEAF_NODE	2:22	2:22	6	const
LEAF_NODE	2:28	2:28	6	PurpleValue
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	value
LEAF_NODE	2:41	2:41	5	value
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:57	3	g_return_val_if_fail ( value != NULL , PURPLE_TYPE_UNKNOWN ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( value != NULL , PURPLE_TYPE_UNKNOWN )
FUNCTION_CALL	4:1	4:56	5	g_return_val_if_fail ( value != NULL , PURPLE_TYPE_UNKNOWN )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:31	6	value != NULL
FIELD	4:22	4:22	7	value
LEAF_NODE	4:22	4:22	8	value
EQ_OPERATOR	4:28	4:28	7	!=
LEAF_NODE	4:28	4:28	8	!=
FIELD	4:31	4:31	7	NULL
LEAF_NODE	4:31	4:31	8	NULL
LEAF_NODE	4:35	4:35	6	,
ARGUMENT	4:37	4:37	6	PURPLE_TYPE_UNKNOWN
FIELD	4:37	4:37	7	PURPLE_TYPE_UNKNOWN
LEAF_NODE	4:37	4:37	8	PURPLE_TYPE_UNKNOWN
LEAF_NODE	4:56	4:56	6	)
LEAF_NODE	4:57	4:57	4	;
JUMP_STATEMENT	5:1	5:19	3	return value -> type ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	value -> type
EXPR	5:8	5:8	5	value -> type
FIELD	5:8	5:15	6	value -> type
LEAF_NODE	5:8	5:8	7	value
LEAF_NODE	5:13	5:13	7	->
LEAF_NODE	5:15	5:15	7	type
LEAF_NODE	5:19	5:19	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	init_plugin
LEAF_NODE	2:0	2:0	3	init_plugin
PARAMETER_LIST	2:11	2:32	2	( PurplePlugin * plugin )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:26	3	PurplePlugin * plugin
TYPE	2:12	2:25	4	PurplePlugin *
TYPE_NAME	2:12	2:12	5	PurplePlugin
LEAF_NODE	2:12	2:12	6	PurplePlugin
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	plugin
LEAF_NODE	2:26	2:26	5	plugin
LEAF_NODE	2:32	2:32	3	)
LEAF_NODE	2:34	2:34	2	{
STATEMENTS	3:1	5:1	2	
EXPR_STATEMENT	3:1	3:47	3	purple_prefs_add_none ( "/plugins/core/newline" ) ;
EXPR	3:1	3:1	4	purple_prefs_add_none ( "/plugins/core/newline" )
FUNCTION_CALL	3:1	3:46	5	purple_prefs_add_none ( "/plugins/core/newline" )
CALLEE	3:1	3:1	6	purple_prefs_add_none
LEAF_NODE	3:1	3:1	7	purple_prefs_add_none
LEAF_NODE	3:22	3:22	6	(
ARGUMENT	3:23	3:23	6	"/plugins/core/newline"
FIELD	3:23	3:23	7	"/plugins/core/newline"
LEAF_NODE	3:23	3:23	8	"/plugins/core/newline"
LEAF_NODE	3:46	3:46	6	)
LEAF_NODE	3:47	3:47	4	;
EXPR_STATEMENT	4:1	4:56	3	purple_prefs_add_bool ( "/plugins/core/newline/im" , TRUE ) ;
EXPR	4:1	4:1	4	purple_prefs_add_bool ( "/plugins/core/newline/im" , TRUE )
FUNCTION_CALL	4:1	4:55	5	purple_prefs_add_bool ( "/plugins/core/newline/im" , TRUE )
CALLEE	4:1	4:1	6	purple_prefs_add_bool
LEAF_NODE	4:1	4:1	7	purple_prefs_add_bool
LEAF_NODE	4:22	4:22	6	(
ARGUMENT	4:23	4:23	6	"/plugins/core/newline/im"
FIELD	4:23	4:23	7	"/plugins/core/newline/im"
LEAF_NODE	4:23	4:23	8	"/plugins/core/newline/im"
LEAF_NODE	4:49	4:49	6	,
ARGUMENT	4:51	4:51	6	TRUE
FIELD	4:51	4:51	7	TRUE
LEAF_NODE	4:51	4:51	8	TRUE
LEAF_NODE	4:55	4:55	6	)
LEAF_NODE	4:56	4:56	4	;
EXPR_STATEMENT	5:1	5:58	3	purple_prefs_add_bool ( "/plugins/core/newline/chat" , TRUE ) ;
EXPR	5:1	5:1	4	purple_prefs_add_bool ( "/plugins/core/newline/chat" , TRUE )
FUNCTION_CALL	5:1	5:57	5	purple_prefs_add_bool ( "/plugins/core/newline/chat" , TRUE )
CALLEE	5:1	5:1	6	purple_prefs_add_bool
LEAF_NODE	5:1	5:1	7	purple_prefs_add_bool
LEAF_NODE	5:22	5:22	6	(
ARGUMENT	5:23	5:23	6	"/plugins/core/newline/chat"
FIELD	5:23	5:23	7	"/plugins/core/newline/chat"
LEAF_NODE	5:23	5:23	8	"/plugins/core/newline/chat"
LEAF_NODE	5:51	5:51	6	,
ARGUMENT	5:53	5:53	6	TRUE
FIELD	5:53	5:53	7	TRUE
LEAF_NODE	5:53	5:53	8	TRUE
LEAF_NODE	5:57	5:57	6	)
LEAF_NODE	5:58	5:58	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	6:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	systray_change_icon
LEAF_NODE	2:12	2:12	3	systray_change_icon
PARAMETER_LIST	2:31	2:43	2	( HICON hicon )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:38	3	HICON hicon
TYPE	2:32	2:32	4	HICON
TYPE_NAME	2:32	2:32	5	HICON
LEAF_NODE	2:32	2:32	6	HICON
NAME	2:38	2:38	4	hicon
LEAF_NODE	2:38	2:38	5	hicon
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	2:45	2:45	2	{
STATEMENTS	3:1	5:1	2	
EXPR_STATEMENT	3:1	3:32	3	g_return_if_fail ( hicon != NULL ) ;
EXPR	3:1	3:1	4	g_return_if_fail ( hicon != NULL )
FUNCTION_CALL	3:1	3:31	5	g_return_if_fail ( hicon != NULL )
CALLEE	3:1	3:1	6	g_return_if_fail
LEAF_NODE	3:1	3:1	7	g_return_if_fail
LEAF_NODE	3:17	3:17	6	(
ARGUMENT	3:18	3:27	6	hicon != NULL
FIELD	3:18	3:18	7	hicon
LEAF_NODE	3:18	3:18	8	hicon
EQ_OPERATOR	3:24	3:24	7	!=
LEAF_NODE	3:24	3:24	8	!=
FIELD	3:27	3:27	7	NULL
LEAF_NODE	3:27	3:27	8	NULL
LEAF_NODE	3:31	3:31	6	)
LEAF_NODE	3:32	3:32	4	;
EXPR_STATEMENT	4:1	4:26	3	_nicon_data . hIcon = hicon ;
EXPR	4:1	4:1	4	_nicon_data . hIcon = hicon
ASSIGN	4:1	4:21	5	_nicon_data . hIcon = hicon
LVAL	4:1	4:1	6	_nicon_data . hIcon
FIELD	4:1	4:13	7	_nicon_data . hIcon
LEAF_NODE	4:1	4:1	8	_nicon_data
LEAF_NODE	4:12	4:12	8	.
LEAF_NODE	4:13	4:13	8	hIcon
ASSIGN_OP	4:19	4:19	6	=
LEAF_NODE	4:19	4:19	7	=
RVAL	4:21	4:21	6	hicon
FIELD	4:21	4:21	7	hicon
LEAF_NODE	4:21	4:21	8	hicon
LEAF_NODE	4:26	4:26	4	;
EXPR_STATEMENT	5:1	5:44	3	Shell_NotifyIconW ( NIM_MODIFY , & _nicon_data ) ;
EXPR	5:1	5:1	4	Shell_NotifyIconW ( NIM_MODIFY , & _nicon_data )
FUNCTION_CALL	5:1	5:43	5	Shell_NotifyIconW ( NIM_MODIFY , & _nicon_data )
CALLEE	5:1	5:1	6	Shell_NotifyIconW
LEAF_NODE	5:1	5:1	7	Shell_NotifyIconW
LEAF_NODE	5:18	5:18	6	(
ARGUMENT	5:19	5:19	6	NIM_MODIFY
FIELD	5:19	5:19	7	NIM_MODIFY
LEAF_NODE	5:19	5:19	8	NIM_MODIFY
LEAF_NODE	5:29	5:29	6	,
ARGUMENT	5:31	5:31	6	& _nicon_data
UNARY_EXPR	5:31	5:32	7	& _nicon_data
UNARY_OPERATOR	5:31	5:31	8	&
LEAF_NODE	5:31	5:31	9	&
FIELD	5:32	5:32	8	_nicon_data
LEAF_NODE	5:32	5:32	9	_nicon_data
LEAF_NODE	5:43	5:43	6	)
LEAF_NODE	5:44	5:44	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	8:0	1	
RETURN_TYPE	2:0	2:18	2	PurpleStoredImage *
TYPE_NAME	2:0	2:0	3	PurpleStoredImage
LEAF_NODE	2:0	2:0	4	PurpleStoredImage
LEAF_NODE	2:18	2:18	3	*
FUNCTION_NAME	2:19	2:19	2	purple_imgstore_find_by_id
LEAF_NODE	2:19	2:19	3	purple_imgstore_find_by_id
PARAMETER_LIST	2:45	2:52	2	( int id )
LEAF_NODE	2:45	2:45	3	(
PARAMETER_DECL	2:46	2:50	3	int id
TYPE	2:46	2:46	4	int
TYPE_NAME	2:46	2:46	5	int
LEAF_NODE	2:46	2:46	6	int
NAME	2:50	2:50	4	id
LEAF_NODE	2:50	2:50	5	id
LEAF_NODE	2:52	2:52	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:60	3	PurpleStoredImage * img ; img = g_hash_table_lookup ( imgstore , & id ) ;
VAR_DECL	4:1	4:20	4	PurpleStoredImage * img ; img = g_hash_table_lookup ( imgstore , & id )
TYPE	4:1	4:19	5	PurpleStoredImage *
TYPE_NAME	4:1	4:1	6	PurpleStoredImage
LEAF_NODE	4:1	4:1	7	PurpleStoredImage
POINTER	4:19	4:19	6	*
LEAF_NODE	4:19	4:19	7	*
NAME	4:20	4:20	5	img
LEAF_NODE	4:20	4:20	6	img
LEAF_NODE	0:0	0:0	5	;
INIT	4:20	4:20	5	img = g_hash_table_lookup ( imgstore , & id )
ASSIGN	4:20	4:26	6	img = g_hash_table_lookup ( imgstore , & id )
LVAL	4:20	4:20	7	img
NAME	4:20	4:20	8	img
LEAF_NODE	4:20	4:20	9	img
ASSIGN_OP	4:24	4:24	7	=
LEAF_NODE	4:24	4:24	8	=
RVAL	4:26	4:26	7	g_hash_table_lookup ( imgstore , & id )
FUNCTION_CALL	4:26	4:59	8	g_hash_table_lookup ( imgstore , & id )
CALLEE	4:26	4:26	9	g_hash_table_lookup
LEAF_NODE	4:26	4:26	10	g_hash_table_lookup
LEAF_NODE	4:45	4:45	9	(
ARGUMENT	4:46	4:46	9	imgstore
FIELD	4:46	4:46	10	imgstore
LEAF_NODE	4:46	4:46	11	imgstore
LEAF_NODE	4:54	4:54	9	,
ARGUMENT	4:56	4:56	9	& id
UNARY_EXPR	4:56	4:57	10	& id
UNARY_OPERATOR	4:56	4:56	11	&
LEAF_NODE	4:56	4:56	12	&
FIELD	4:57	4:57	11	id
LEAF_NODE	4:57	4:57	12	id
LEAF_NODE	4:59	4:59	9	)
LEAF_NODE	4:60	4:60	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	img != NULL
EXPR	5:5	5:12	5	img != NULL
FIELD	5:5	5:5	6	img
LEAF_NODE	5:5	5:5	7	img
EQ_OPERATOR	5:9	5:9	6	!=
LEAF_NODE	5:9	5:9	7	!=
FIELD	5:12	5:12	6	NULL
LEAF_NODE	5:12	5:12	7	NULL
LEAF_NODE	5:16	5:16	4	)
STATEMENTS	6:2	6:2	4	
EXPR_STATEMENT	6:2	6:67	5	purple_debug_misc ( "imgstore" , "retrieved image id %d\n" , img -> id ) ;
EXPR	6:2	6:2	6	purple_debug_misc ( "imgstore" , "retrieved image id %d\n" , img -> id )
FUNCTION_CALL	6:2	6:66	7	purple_debug_misc ( "imgstore" , "retrieved image id %d\n" , img -> id )
CALLEE	6:2	6:2	8	purple_debug_misc
LEAF_NODE	6:2	6:2	9	purple_debug_misc
LEAF_NODE	6:19	6:19	8	(
ARGUMENT	6:20	6:20	8	"imgstore"
FIELD	6:20	6:20	9	"imgstore"
LEAF_NODE	6:20	6:20	10	"imgstore"
LEAF_NODE	6:30	6:30	8	,
ARGUMENT	6:32	6:32	8	"retrieved image id %d\n"
FIELD	6:32	6:32	9	"retrieved image id %d\n"
LEAF_NODE	6:32	6:32	10	"retrieved image id %d\n"
LEAF_NODE	6:57	6:57	8	,
ARGUMENT	6:59	6:59	8	img -> id
FIELD	6:59	6:64	9	img -> id
LEAF_NODE	6:59	6:59	10	img
LEAF_NODE	6:62	6:62	10	->
LEAF_NODE	6:64	6:64	10	id
LEAF_NODE	6:66	6:66	8	)
LEAF_NODE	6:67	6:67	6	;
JUMP_STATEMENT	7:1	7:11	3	return img ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	img
EXPR	7:8	7:8	5	img
FIELD	7:8	7:8	6	img
LEAF_NODE	7:8	7:8	7	img
LEAF_NODE	7:11	7:11	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	conversation_deleted_update_ui_cb
LEAF_NODE	2:0	2:0	3	conversation_deleted_update_ui_cb
PARAMETER_LIST	2:33	2:89	2	( PurpleConversation * conv , struct _pidgin_blist_node * ui )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:54	3	PurpleConversation * conv
TYPE	2:34	2:53	4	PurpleConversation *
TYPE_NAME	2:34	2:34	5	PurpleConversation
LEAF_NODE	2:34	2:34	6	PurpleConversation
POINTER	2:53	2:53	5	*
LEAF_NODE	2:53	2:53	6	*
NAME	2:54	2:54	4	conv
LEAF_NODE	2:54	2:54	5	conv
LEAF_NODE	2:58	2:58	3	,
PARAMETER_DECL	2:60	2:87	3	struct _pidgin_blist_node * ui
TYPE	2:60	2:86	4	struct _pidgin_blist_node *
TYPE_NAME	2:60	2:67	5	struct _pidgin_blist_node
LEAF_NODE	2:60	2:60	6	struct
LEAF_NODE	2:67	2:67	6	_pidgin_blist_node
POINTER	2:86	2:86	5	*
LEAF_NODE	2:86	2:86	6	*
NAME	2:87	2:87	4	ui
LEAF_NODE	2:87	2:87	5	ui
LEAF_NODE	2:89	2:89	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	ui -> conv . conv != conv
EXPR	4:5	4:22	5	ui -> conv . conv != conv
FIELD	4:5	4:14	6	ui -> conv . conv
LEAF_NODE	4:5	4:5	7	ui
LEAF_NODE	4:7	4:7	7	->
LEAF_NODE	4:9	4:9	7	conv
LEAF_NODE	4:13	4:13	7	.
LEAF_NODE	4:14	4:14	7	conv
EQ_OPERATOR	4:19	4:19	6	!=
LEAF_NODE	4:19	4:19	7	!=
FIELD	4:22	4:22	6	conv
LEAF_NODE	4:22	4:22	7	conv
LEAF_NODE	4:26	4:26	4	)
STATEMENTS	5:2	5:2	4	
JUMP_STATEMENT	5:2	5:8	5	return DESTINATION ;
KEYWORD	5:2	5:2	6	return
LEAF_NODE	5:2	5:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	5:8	5:8	6	;
EXPR_STATEMENT	6:1	6:21	3	ui -> conv . conv = NULL ;
EXPR	6:1	6:1	4	ui -> conv . conv = NULL
ASSIGN	6:1	6:17	5	ui -> conv . conv = NULL
LVAL	6:1	6:1	6	ui -> conv . conv
FIELD	6:1	6:10	7	ui -> conv . conv
LEAF_NODE	6:1	6:1	8	ui
LEAF_NODE	6:3	6:3	8	->
LEAF_NODE	6:5	6:5	8	conv
LEAF_NODE	6:9	6:9	8	.
LEAF_NODE	6:10	6:10	8	conv
ASSIGN_OP	6:15	6:15	6	=
LEAF_NODE	6:15	6:15	7	=
RVAL	6:17	6:17	6	NULL
FIELD	6:17	6:17	7	NULL
LEAF_NODE	6:17	6:17	8	NULL
LEAF_NODE	6:21	6:21	4	;
EXPR_STATEMENT	7:1	7:19	3	ui -> conv . flags = 0 ;
EXPR	7:1	7:1	4	ui -> conv . flags = 0
ASSIGN	7:1	7:18	5	ui -> conv . flags = 0
LVAL	7:1	7:1	6	ui -> conv . flags
FIELD	7:1	7:10	7	ui -> conv . flags
LEAF_NODE	7:1	7:1	8	ui
LEAF_NODE	7:3	7:3	8	->
LEAF_NODE	7:5	7:5	8	conv
LEAF_NODE	7:9	7:9	8	.
LEAF_NODE	7:10	7:10	8	flags
ASSIGN_OP	7:16	7:16	6	=
LEAF_NODE	7:16	7:16	7	=
RVAL	7:18	7:18	6	0
FIELD	7:18	7:18	7	0
LEAF_NODE	7:18	7:18	8	0
LEAF_NODE	7:19	7:19	4	;
EXPR_STATEMENT	8:1	8:26	3	ui -> conv . last_message = 0 ;
EXPR	8:1	8:1	4	ui -> conv . last_message = 0
ASSIGN	8:1	8:25	5	ui -> conv . last_message = 0
LVAL	8:1	8:1	6	ui -> conv . last_message
FIELD	8:1	8:10	7	ui -> conv . last_message
LEAF_NODE	8:1	8:1	8	ui
LEAF_NODE	8:3	8:3	8	->
LEAF_NODE	8:5	8:5	8	conv
LEAF_NODE	8:9	8:9	8	.
LEAF_NODE	8:10	8:10	8	last_message
ASSIGN_OP	8:23	8:23	6	=
LEAF_NODE	8:23	8:23	7	=
RVAL	8:25	8:25	6	0
FIELD	8:25	8:25	7	0
LEAF_NODE	8:25	8:25	8	0
LEAF_NODE	8:26	8:26	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:6	2	GList *
TYPE_NAME	1:0	1:0	3	GList
LEAF_NODE	1:0	1:0	4	GList
LEAF_NODE	1:6	1:6	3	*
FUNCTION_NAME	2:0	2:0	2	purple_conv_chat_cb_get_attribute_keys
LEAF_NODE	2:0	2:0	3	purple_conv_chat_cb_get_attribute_keys
PARAMETER_LIST	2:38	2:62	2	( PurpleConvChatBuddy * cb )
LEAF_NODE	2:38	2:38	3	(
PARAMETER_DECL	2:39	2:60	3	PurpleConvChatBuddy * cb
TYPE	2:39	2:59	4	PurpleConvChatBuddy *
TYPE_NAME	2:39	2:39	5	PurpleConvChatBuddy
LEAF_NODE	2:39	2:39	6	PurpleConvChatBuddy
POINTER	2:59	2:59	5	*
LEAF_NODE	2:59	2:59	6	*
NAME	2:60	2:60	4	cb
LEAF_NODE	2:60	2:60	5	cb
LEAF_NODE	2:62	2:62	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:19	3	GList * keys ; keys = NULL ;
VAR_DECL	4:1	4:8	4	GList * keys ; keys = NULL
TYPE	4:1	4:7	5	GList *
TYPE_NAME	4:1	4:1	6	GList
LEAF_NODE	4:1	4:1	7	GList
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	keys
LEAF_NODE	4:8	4:8	6	keys
LEAF_NODE	0:0	0:0	5	;
INIT	4:8	4:8	5	keys = NULL
ASSIGN	4:8	4:15	6	keys = NULL
LVAL	4:8	4:8	7	keys
NAME	4:8	4:8	8	keys
LEAF_NODE	4:8	4:8	9	keys
ASSIGN_OP	4:13	4:13	7	=
LEAF_NODE	4:13	4:13	8	=
RVAL	4:15	4:15	7	NULL
FIELD	4:15	4:15	8	NULL
LEAF_NODE	4:15	4:15	9	NULL
LEAF_NODE	4:19	4:19	4	;
EXPR_STATEMENT	5:1	5:39	3	g_return_val_if_fail ( cb != NULL , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( cb != NULL , NULL )
FUNCTION_CALL	5:1	5:38	5	g_return_val_if_fail ( cb != NULL , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:28	6	cb != NULL
FIELD	5:22	5:22	7	cb
LEAF_NODE	5:22	5:22	8	cb
EQ_OPERATOR	5:25	5:25	7	!=
LEAF_NODE	5:25	5:25	8	!=
FIELD	5:28	5:28	7	NULL
LEAF_NODE	5:28	5:28	8	NULL
LEAF_NODE	5:32	5:32	6	,
ARGUMENT	5:34	5:34	6	NULL
FIELD	5:34	5:34	7	NULL
LEAF_NODE	5:34	5:34	8	NULL
LEAF_NODE	5:38	5:38	6	)
LEAF_NODE	5:39	5:39	4	;
EXPR_STATEMENT	6:1	6:74	3	g_hash_table_foreach ( cb -> attributes , ( GHFunc ) append_attribute_key , & keys ) ;
EXPR	6:1	6:1	4	g_hash_table_foreach ( cb -> attributes , ( GHFunc ) append_attribute_key , & keys )
FUNCTION_CALL	6:1	6:73	5	g_hash_table_foreach ( cb -> attributes , ( GHFunc ) append_attribute_key , & keys )
CALLEE	6:1	6:1	6	g_hash_table_foreach
LEAF_NODE	6:1	6:1	7	g_hash_table_foreach
LEAF_NODE	6:21	6:21	6	(
ARGUMENT	6:22	6:22	6	cb -> attributes
FIELD	6:22	6:26	7	cb -> attributes
LEAF_NODE	6:22	6:22	8	cb
LEAF_NODE	6:24	6:24	8	->
LEAF_NODE	6:26	6:26	8	attributes
LEAF_NODE	6:36	6:36	6	,
ARGUMENT	6:38	6:46	6	( GHFunc ) append_attribute_key
LEAF_NODE	6:38	6:38	7	(
TYPE_NAME	6:39	6:39	7	GHFunc
LEAF_NODE	6:39	6:39	8	GHFunc
LEAF_NODE	6:45	6:45	7	)
FIELD	6:46	6:46	7	append_attribute_key
LEAF_NODE	6:46	6:46	8	append_attribute_key
LEAF_NODE	6:66	6:66	6	,
ARGUMENT	6:68	6:68	6	& keys
UNARY_EXPR	6:68	6:69	7	& keys
UNARY_OPERATOR	6:68	6:68	8	&
LEAF_NODE	6:68	6:68	9	&
FIELD	6:69	6:69	8	keys
LEAF_NODE	6:69	6:69	9	keys
LEAF_NODE	6:73	6:73	6	)
LEAF_NODE	6:74	6:74	4	;
JUMP_STATEMENT	7:1	7:12	3	return keys ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	keys
EXPR	7:8	7:8	5	keys
FIELD	7:8	7:8	6	keys
LEAF_NODE	7:8	7:8	7	keys
LEAF_NODE	7:12	7:12	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	35:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	jabber_recv_cb_ssl
LEAF_NODE	2:0	2:0	3	jabber_recv_cb_ssl
PARAMETER_LIST	2:18	3:27	2	( gpointer data , PurpleSslConnection * gsc , PurpleInputCondition cond )
LEAF_NODE	2:18	2:18	3	(
PARAMETER_DECL	2:19	2:28	3	gpointer data
TYPE	2:19	2:19	4	gpointer
TYPE_NAME	2:19	2:19	5	gpointer
LEAF_NODE	2:19	2:19	6	gpointer
NAME	2:28	2:28	4	data
LEAF_NODE	2:28	2:28	5	data
LEAF_NODE	2:32	2:32	3	,
PARAMETER_DECL	2:34	2:55	3	PurpleSslConnection * gsc
TYPE	2:34	2:54	4	PurpleSslConnection *
TYPE_NAME	2:34	2:34	5	PurpleSslConnection
LEAF_NODE	2:34	2:34	6	PurpleSslConnection
POINTER	2:54	2:54	5	*
LEAF_NODE	2:54	2:54	6	*
NAME	2:55	2:55	4	gsc
LEAF_NODE	2:55	2:55	5	gsc
LEAF_NODE	2:58	2:58	3	,
PARAMETER_DECL	3:2	3:23	3	PurpleInputCondition cond
TYPE	3:2	3:2	4	PurpleInputCondition
TYPE_NAME	3:2	3:2	5	PurpleInputCondition
LEAF_NODE	3:2	3:2	6	PurpleInputCondition
NAME	3:23	3:23	4	cond
LEAF_NODE	3:23	3:23	5	cond
LEAF_NODE	3:27	3:27	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	24:1	2	
SIMPLE_DECL	5:1	5:28	3	PurpleConnection * gc ; gc = data ;
VAR_DECL	5:1	5:19	4	PurpleConnection * gc ; gc = data
TYPE	5:1	5:18	5	PurpleConnection *
TYPE_NAME	5:1	5:1	6	PurpleConnection
LEAF_NODE	5:1	5:1	7	PurpleConnection
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	gc
LEAF_NODE	5:19	5:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	5:19	5:19	5	gc = data
ASSIGN	5:19	5:24	6	gc = data
LVAL	5:19	5:19	7	gc
NAME	5:19	5:19	8	gc
LEAF_NODE	5:19	5:19	9	gc
ASSIGN_OP	5:22	5:22	7	=
LEAF_NODE	5:22	5:22	8	=
RVAL	5:24	5:24	7	data
FIELD	5:24	5:24	8	data
LEAF_NODE	5:24	5:24	9	data
LEAF_NODE	5:28	5:28	4	;
SIMPLE_DECL	6:1	6:34	3	JabberStream * js ; js = gc -> proto_data ;
VAR_DECL	6:1	6:15	4	JabberStream * js ; js = gc -> proto_data
TYPE	6:1	6:14	5	JabberStream *
TYPE_NAME	6:1	6:1	6	JabberStream
LEAF_NODE	6:1	6:1	7	JabberStream
POINTER	6:14	6:14	6	*
LEAF_NODE	6:14	6:14	7	*
NAME	6:15	6:15	5	js
LEAF_NODE	6:15	6:15	6	js
LEAF_NODE	0:0	0:0	5	;
INIT	6:15	6:15	5	js = gc -> proto_data
ASSIGN	6:15	6:20	6	js = gc -> proto_data
LVAL	6:15	6:15	7	js
NAME	6:15	6:15	8	js
LEAF_NODE	6:15	6:15	9	js
ASSIGN_OP	6:18	6:18	7	=
LEAF_NODE	6:18	6:18	8	=
RVAL	6:20	6:20	7	gc -> proto_data
FIELD	6:20	6:24	8	gc -> proto_data
LEAF_NODE	6:20	6:20	9	gc
LEAF_NODE	6:22	6:22	9	->
LEAF_NODE	6:24	6:24	9	proto_data
LEAF_NODE	6:34	6:34	4	;
SIMPLE_DECL	7:1	7:8	3	int len ;
VAR_DECL	7:1	7:5	4	int len
TYPE	7:1	7:1	5	int
TYPE_NAME	7:1	7:1	6	int
LEAF_NODE	7:1	7:1	7	int
NAME	7:5	7:5	5	len
LEAF_NODE	7:5	7:5	6	len
LEAF_NODE	7:8	7:8	4	;
LEAF_NODE	8:1	8:1	3	static
SIMPLE_DECL	8:8	8:22	3	char [ 4096 ] buf ;
VAR_DECL	8:8	8:13	4	char [ 4096 ] buf
TYPE	8:8	8:16	5	char [ 4096 ]
TYPE_NAME	8:8	8:8	6	char
LEAF_NODE	8:8	8:8	7	char
TYPE_SUFFIX	8:16	8:21	6	[ 4096 ]
LEAF_NODE	8:16	8:16	7	[
FIELD	8:17	8:17	7	4096
LEAF_NODE	8:17	8:17	8	4096
LEAF_NODE	8:21	8:21	7	]
NAME	8:13	8:13	5	buf
LEAF_NODE	8:13	8:13	6	buf
LEAF_NODE	8:22	8:22	4	;
SELECTION	10:1	10:37	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:3	10:3	4	(
CONDITION	10:4	10:4	4	! PURPLE_CONNECTION_IS_VALID ( gc )
EXPR	10:4	10:4	5	! PURPLE_CONNECTION_IS_VALID ( gc )
UNARY_EXPR	10:4	10:5	6	! PURPLE_CONNECTION_IS_VALID ( gc )
UNARY_OPERATOR	10:4	10:4	7	!
LEAF_NODE	10:4	10:4	8	!
FUNCTION_CALL	10:5	10:34	7	PURPLE_CONNECTION_IS_VALID ( gc )
CALLEE	10:5	10:5	8	PURPLE_CONNECTION_IS_VALID
LEAF_NODE	10:5	10:5	9	PURPLE_CONNECTION_IS_VALID
LEAF_NODE	10:31	10:31	8	(
ARGUMENT	10:32	10:32	8	gc
FIELD	10:32	10:32	9	gc
LEAF_NODE	10:32	10:32	10	gc
LEAF_NODE	10:34	10:34	8	)
LEAF_NODE	10:35	10:35	4	)
STATEMENTS	10:37	13:1	4	
LEAF_NODE	10:37	10:37	5	{
STATEMENTS	11:2	12:2	5	
EXPR_STATEMENT	11:2	11:23	6	purple_ssl_close ( gsc ) ;
EXPR	11:2	11:2	7	purple_ssl_close ( gsc )
FUNCTION_CALL	11:2	11:22	8	purple_ssl_close ( gsc )
CALLEE	11:2	11:2	9	purple_ssl_close
LEAF_NODE	11:2	11:2	10	purple_ssl_close
LEAF_NODE	11:18	11:18	9	(
ARGUMENT	11:19	11:19	9	gsc
FIELD	11:19	11:19	10	gsc
LEAF_NODE	11:19	11:19	11	gsc
LEAF_NODE	11:22	11:22	9	)
LEAF_NODE	11:23	11:23	7	;
EXPR_STATEMENT	12:2	12:23	6	g_return_if_reached ( ) ;
EXPR	12:2	12:2	7	g_return_if_reached ( )
FUNCTION_CALL	12:2	12:22	8	g_return_if_reached ( )
CALLEE	12:2	12:2	9	g_return_if_reached
LEAF_NODE	12:2	12:2	10	g_return_if_reached
LEAF_NODE	12:21	12:21	9	(
LEAF_NODE	12:22	12:22	9	)
LEAF_NODE	12:23	12:23	7	;
LEAF_NODE	13:1	13:1	5	}
ITERATION	14:1	14:63	3	
KEYWORD	14:1	14:1	4	while
LEAF_NODE	14:1	14:1	5	while
LEAF_NODE	14:6	14:6	4	(
CONDITION	14:7	14:7	4	( len = purple_ssl_read ( gsc , buf , sizeof ( buf ) - 1 ) ) > 0
EXPR	14:7	14:60	5	( len = purple_ssl_read ( gsc , buf , sizeof ( buf ) - 1 ) ) > 0
LEAF_NODE	14:7	14:7	6	(
ASSIGN	14:8	14:14	6	len = purple_ssl_read ( gsc , buf , sizeof ( buf ) - 1 )
LVAL	14:8	14:8	7	len
FIELD	14:8	14:8	8	len
LEAF_NODE	14:8	14:8	9	len
ASSIGN_OP	14:12	14:12	7	=
LEAF_NODE	14:12	14:12	8	=
RVAL	14:14	14:14	7	purple_ssl_read ( gsc , buf , sizeof ( buf ) - 1 )
FUNCTION_CALL	14:14	14:55	8	purple_ssl_read ( gsc , buf , sizeof ( buf ) - 1 )
CALLEE	14:14	14:14	9	purple_ssl_read
LEAF_NODE	14:14	14:14	10	purple_ssl_read
LEAF_NODE	14:29	14:29	9	(
ARGUMENT	14:30	14:30	9	gsc
FIELD	14:30	14:30	10	gsc
LEAF_NODE	14:30	14:30	11	gsc
LEAF_NODE	14:33	14:33	9	,
ARGUMENT	14:35	14:35	9	buf
FIELD	14:35	14:35	10	buf
LEAF_NODE	14:35	14:35	11	buf
LEAF_NODE	14:38	14:38	9	,
ARGUMENT	14:40	14:54	9	sizeof ( buf ) - 1
FUNCTION_CALL	14:40	14:50	10	sizeof ( buf )
CALLEE	14:40	14:40	11	sizeof
LEAF_NODE	14:40	14:40	12	sizeof
LEAF_NODE	14:46	14:46	11	(
ARGUMENT	14:47	14:47	11	buf
FIELD	14:47	14:47	12	buf
LEAF_NODE	14:47	14:47	13	buf
LEAF_NODE	14:50	14:50	11	)
LEAF_NODE	14:52	14:52	10	-
FIELD	14:54	14:54	10	1
LEAF_NODE	14:54	14:54	11	1
LEAF_NODE	14:55	14:55	9	)
LEAF_NODE	14:56	14:56	6	)
REL_OPERATOR	14:58	14:58	6	>
LEAF_NODE	14:58	14:58	7	>
FIELD	14:60	14:60	6	0
LEAF_NODE	14:60	14:60	7	0
LEAF_NODE	14:61	14:61	4	)
STATEMENTS	14:63	21:1	4	
LEAF_NODE	14:63	14:63	5	{
STATEMENTS	15:2	19:2	5	
EXPR_STATEMENT	15:2	15:32	6	gc -> last_received = time ( NULL ) ;
EXPR	15:2	15:2	7	gc -> last_received = time ( NULL )
ASSIGN	15:2	15:22	8	gc -> last_received = time ( NULL )
LVAL	15:2	15:2	9	gc -> last_received
FIELD	15:2	15:6	10	gc -> last_received
LEAF_NODE	15:2	15:2	11	gc
LEAF_NODE	15:4	15:4	11	->
LEAF_NODE	15:6	15:6	11	last_received
ASSIGN_OP	15:20	15:20	9	=
LEAF_NODE	15:20	15:20	10	=
RVAL	15:22	15:22	9	time ( NULL )
FUNCTION_CALL	15:22	15:31	10	time ( NULL )
CALLEE	15:22	15:22	11	time
LEAF_NODE	15:22	15:22	12	time
LEAF_NODE	15:26	15:26	11	(
ARGUMENT	15:27	15:27	11	NULL
FIELD	15:27	15:27	12	NULL
LEAF_NODE	15:27	15:27	13	NULL
LEAF_NODE	15:31	15:31	11	)
LEAF_NODE	15:32	15:32	7	;
EXPR_STATEMENT	16:2	16:17	6	buf [ len ] = '\0' ;
EXPR	16:2	16:2	7	buf [ len ] = '\0'
ASSIGN	16:2	16:13	8	buf [ len ] = '\0'
LVAL	16:2	16:2	9	buf [ len ]
FIELD	16:2	16:9	10	buf [ len ]
LEAF_NODE	16:2	16:2	11	buf
LEAF_NODE	16:5	16:5	11	[
EXPR	16:6	16:6	11	len
FIELD	16:6	16:6	12	len
LEAF_NODE	16:6	16:6	13	len
LEAF_NODE	16:9	16:9	11	]
ASSIGN_OP	16:11	16:11	9	=
LEAF_NODE	16:11	16:11	10	=
RVAL	16:13	16:13	9	'\0'
FIELD	16:13	16:13	10	'\0'
LEAF_NODE	16:13	16:13	11	'\0'
LEAF_NODE	16:17	16:17	7	;
EXPR_STATEMENT	17:2	17:63	6	purple_debug_info ( "jabber" , "Recv (ssl)(%d): %s\n" , len , buf ) ;
EXPR	17:2	17:2	7	purple_debug_info ( "jabber" , "Recv (ssl)(%d): %s\n" , len , buf )
FUNCTION_CALL	17:2	17:62	8	purple_debug_info ( "jabber" , "Recv (ssl)(%d): %s\n" , len , buf )
CALLEE	17:2	17:2	9	purple_debug_info
LEAF_NODE	17:2	17:2	10	purple_debug_info
LEAF_NODE	17:19	17:19	9	(
ARGUMENT	17:20	17:20	9	"jabber"
FIELD	17:20	17:20	10	"jabber"
LEAF_NODE	17:20	17:20	11	"jabber"
LEAF_NODE	17:28	17:28	9	,
ARGUMENT	17:30	17:30	9	"Recv (ssl)(%d): %s\n"
FIELD	17:30	17:30	10	"Recv (ssl)(%d): %s\n"
LEAF_NODE	17:30	17:30	11	"Recv (ssl)(%d): %s\n"
LEAF_NODE	17:52	17:52	9	,
ARGUMENT	17:54	17:54	9	len
FIELD	17:54	17:54	10	len
LEAF_NODE	17:54	17:54	11	len
LEAF_NODE	17:57	17:57	9	,
ARGUMENT	17:59	17:59	9	buf
FIELD	17:59	17:59	10	buf
LEAF_NODE	17:59	17:59	11	buf
LEAF_NODE	17:62	17:62	9	)
LEAF_NODE	17:63	17:63	7	;
EXPR_STATEMENT	18:2	18:37	6	jabber_parser_process ( js , buf , len ) ;
EXPR	18:2	18:2	7	jabber_parser_process ( js , buf , len )
FUNCTION_CALL	18:2	18:36	8	jabber_parser_process ( js , buf , len )
CALLEE	18:2	18:2	9	jabber_parser_process
LEAF_NODE	18:2	18:2	10	jabber_parser_process
LEAF_NODE	18:23	18:23	9	(
ARGUMENT	18:24	18:24	9	js
FIELD	18:24	18:24	10	js
LEAF_NODE	18:24	18:24	11	js
LEAF_NODE	18:26	18:26	9	,
ARGUMENT	18:28	18:28	9	buf
FIELD	18:28	18:28	10	buf
LEAF_NODE	18:28	18:28	11	buf
LEAF_NODE	18:31	18:31	9	,
ARGUMENT	18:33	18:33	9	len
FIELD	18:33	18:33	10	len
LEAF_NODE	18:33	18:33	11	len
LEAF_NODE	18:36	18:36	9	)
LEAF_NODE	18:37	18:37	7	;
SELECTION	19:2	20:3	6	
KEYWORD	19:2	19:2	7	if
LEAF_NODE	19:2	19:2	8	if
LEAF_NODE	19:4	19:4	7	(
CONDITION	19:5	19:5	7	js -> reinit
EXPR	19:5	19:5	8	js -> reinit
FIELD	19:5	19:9	9	js -> reinit
LEAF_NODE	19:5	19:5	10	js
LEAF_NODE	19:7	19:7	10	->
LEAF_NODE	19:9	19:9	10	reinit
LEAF_NODE	19:15	19:15	7	)
STATEMENTS	20:3	20:3	7	
EXPR_STATEMENT	20:3	20:25	8	jabber_stream_init ( js ) ;
EXPR	20:3	20:3	9	jabber_stream_init ( js )
FUNCTION_CALL	20:3	20:24	10	jabber_stream_init ( js )
CALLEE	20:3	20:3	11	jabber_stream_init
LEAF_NODE	20:3	20:3	12	jabber_stream_init
LEAF_NODE	20:21	20:21	11	(
ARGUMENT	20:22	20:22	11	js
FIELD	20:22	20:22	12	js
LEAF_NODE	20:22	20:22	13	js
LEAF_NODE	20:24	20:24	11	)
LEAF_NODE	20:25	20:25	9	;
LEAF_NODE	21:1	21:1	5	}
SELECTION	22:1	23:2	3	
KEYWORD	22:1	22:1	4	if
LEAF_NODE	22:1	22:1	5	if
LEAF_NODE	22:3	22:3	4	(
CONDITION	22:4	22:4	4	len < 0 && errno == EAGAIN
EXPR	22:4	22:4	5	len < 0 && errno == EAGAIN
AND	22:4	22:15	6	len < 0 && errno == EAGAIN
EXPR	22:4	22:10	7	len < 0
FIELD	22:4	22:4	8	len
LEAF_NODE	22:4	22:4	9	len
REL_OPERATOR	22:8	22:8	8	<
LEAF_NODE	22:8	22:8	9	<
FIELD	22:10	22:10	8	0
LEAF_NODE	22:10	22:10	9	0
LEAF_NODE	22:12	22:12	7	&&
EXPR	22:15	22:24	7	errno == EAGAIN
FIELD	22:15	22:15	8	errno
LEAF_NODE	22:15	22:15	9	errno
EQ_OPERATOR	22:21	22:21	8	==
LEAF_NODE	22:21	22:21	9	==
FIELD	22:24	22:24	8	EAGAIN
LEAF_NODE	22:24	22:24	9	EAGAIN
LEAF_NODE	22:30	22:30	4	)
STATEMENTS	23:2	23:2	4	
JUMP_STATEMENT	23:2	23:8	5	return DESTINATION ;
KEYWORD	23:2	23:2	6	return
LEAF_NODE	23:2	23:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	23:8	23:8	6	;
SELECTION	24:1	24:6	3	
KEYWORD	24:1	24:1	4	else
LEAF_NODE	24:1	24:1	5	else
STATEMENTS	24:6	34:1	4	
LEAF_NODE	24:6	24:6	5	{
STATEMENTS	25:2	33:2	5	
SIMPLE_DECL	25:2	25:12	6	gchar * tmp ;
VAR_DECL	25:2	25:9	7	gchar * tmp
TYPE	25:2	25:8	8	gchar *
TYPE_NAME	25:2	25:2	9	gchar
LEAF_NODE	25:2	25:2	10	gchar
POINTER	25:8	25:8	9	*
LEAF_NODE	25:8	25:8	10	*
NAME	25:9	25:9	8	tmp
LEAF_NODE	25:9	25:9	9	tmp
LEAF_NODE	25:12	25:12	7	;
SELECTION	26:2	27:3	6	
KEYWORD	26:2	26:2	7	if
LEAF_NODE	26:2	26:2	8	if
LEAF_NODE	26:5	26:5	7	(
CONDITION	26:6	26:6	7	len == 0
EXPR	26:6	26:13	8	len == 0
FIELD	26:6	26:6	9	len
LEAF_NODE	26:6	26:6	10	len
EQ_OPERATOR	26:10	26:10	9	==
LEAF_NODE	26:10	26:10	10	==
FIELD	26:13	26:13	9	0
LEAF_NODE	26:13	26:13	10	0
LEAF_NODE	26:14	26:14	7	)
STATEMENTS	27:3	27:3	7	
EXPR_STATEMENT	27:3	27:52	8	tmp = g_strdup ( _ ( "Server closed the connection" ) ) ;
EXPR	27:3	27:3	9	tmp = g_strdup ( _ ( "Server closed the connection" ) )
ASSIGN	27:3	27:9	10	tmp = g_strdup ( _ ( "Server closed the connection" ) )
LVAL	27:3	27:3	11	tmp
FIELD	27:3	27:3	12	tmp
LEAF_NODE	27:3	27:3	13	tmp
ASSIGN_OP	27:7	27:7	11	=
LEAF_NODE	27:7	27:7	12	=
RVAL	27:9	27:9	11	g_strdup ( _ ( "Server closed the connection" ) )
FUNCTION_CALL	27:9	27:51	12	g_strdup ( _ ( "Server closed the connection" ) )
CALLEE	27:9	27:9	13	g_strdup
LEAF_NODE	27:9	27:9	14	g_strdup
LEAF_NODE	27:17	27:17	13	(
ARGUMENT	27:18	27:18	13	_ ( "Server closed the connection" )
FUNCTION_CALL	27:18	27:50	14	_ ( "Server closed the connection" )
CALLEE	27:18	27:18	15	_
LEAF_NODE	27:18	27:18	16	_
LEAF_NODE	27:19	27:19	15	(
ARGUMENT	27:20	27:20	15	"Server closed the connection"
FIELD	27:20	27:20	16	"Server closed the connection"
LEAF_NODE	27:20	27:20	17	"Server closed the connection"
LEAF_NODE	27:50	27:50	15	)
LEAF_NODE	27:51	27:51	13	)
LEAF_NODE	27:52	27:52	9	;
SELECTION	28:2	29:3	6	
KEYWORD	28:2	28:2	7	else
LEAF_NODE	28:2	28:2	8	else
STATEMENTS	29:3	29:3	7	
EXPR_STATEMENT	29:3	30:23	8	tmp = g_strdup_printf ( _ ( "Lost connection with server: %s" ) , g_strerror ( errno ) ) ;
EXPR	29:3	29:3	9	tmp = g_strdup_printf ( _ ( "Lost connection with server: %s" ) , g_strerror ( errno ) )
ASSIGN	29:3	29:9	10	tmp = g_strdup_printf ( _ ( "Lost connection with server: %s" ) , g_strerror ( errno ) )
LVAL	29:3	29:3	11	tmp
FIELD	29:3	29:3	12	tmp
LEAF_NODE	29:3	29:3	13	tmp
ASSIGN_OP	29:7	29:7	11	=
LEAF_NODE	29:7	29:7	12	=
RVAL	29:9	29:9	11	g_strdup_printf ( _ ( "Lost connection with server: %s" ) , g_strerror ( errno ) )
FUNCTION_CALL	29:9	30:22	12	g_strdup_printf ( _ ( "Lost connection with server: %s" ) , g_strerror ( errno ) )
CALLEE	29:9	29:9	13	g_strdup_printf
LEAF_NODE	29:9	29:9	14	g_strdup_printf
LEAF_NODE	29:24	29:24	13	(
ARGUMENT	29:25	29:25	13	_ ( "Lost connection with server: %s" )
FUNCTION_CALL	29:25	29:60	14	_ ( "Lost connection with server: %s" )
CALLEE	29:25	29:25	15	_
LEAF_NODE	29:25	29:25	16	_
LEAF_NODE	29:26	29:26	15	(
ARGUMENT	29:27	29:27	15	"Lost connection with server: %s"
FIELD	29:27	29:27	16	"Lost connection with server: %s"
LEAF_NODE	29:27	29:27	17	"Lost connection with server: %s"
LEAF_NODE	29:60	29:60	15	)
LEAF_NODE	29:61	29:61	13	,
ARGUMENT	30:5	30:5	13	g_strerror ( errno )
FUNCTION_CALL	30:5	30:21	14	g_strerror ( errno )
CALLEE	30:5	30:5	15	g_strerror
LEAF_NODE	30:5	30:5	16	g_strerror
LEAF_NODE	30:15	30:15	15	(
ARGUMENT	30:16	30:16	15	errno
FIELD	30:16	30:16	16	errno
LEAF_NODE	30:16	30:16	17	errno
LEAF_NODE	30:21	30:21	15	)
LEAF_NODE	30:22	30:22	13	)
LEAF_NODE	30:23	30:23	9	;
EXPR_STATEMENT	31:2	32:46	6	purple_connection_error_reason ( js -> gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , tmp ) ;
EXPR	31:2	31:2	7	purple_connection_error_reason ( js -> gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , tmp )
FUNCTION_CALL	31:2	32:45	8	purple_connection_error_reason ( js -> gc , PURPLE_CONNECTION_ERROR_NETWORK_ERROR , tmp )
CALLEE	31:2	31:2	9	purple_connection_error_reason
LEAF_NODE	31:2	31:2	10	purple_connection_error_reason
LEAF_NODE	31:32	31:32	9	(
ARGUMENT	31:33	31:33	9	js -> gc
FIELD	31:33	31:37	10	js -> gc
LEAF_NODE	31:33	31:33	11	js
LEAF_NODE	31:35	31:35	11	->
LEAF_NODE	31:37	31:37	11	gc
LEAF_NODE	31:39	31:39	9	,
ARGUMENT	32:3	32:3	9	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
FIELD	32:3	32:3	10	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	32:3	32:3	11	PURPLE_CONNECTION_ERROR_NETWORK_ERROR
LEAF_NODE	32:40	32:40	9	,
ARGUMENT	32:42	32:42	9	tmp
FIELD	32:42	32:42	10	tmp
LEAF_NODE	32:42	32:42	11	tmp
LEAF_NODE	32:45	32:45	9	)
LEAF_NODE	32:46	32:46	7	;
EXPR_STATEMENT	33:2	33:13	6	g_free ( tmp ) ;
EXPR	33:2	33:2	7	g_free ( tmp )
FUNCTION_CALL	33:2	33:12	8	g_free ( tmp )
CALLEE	33:2	33:2	9	g_free
LEAF_NODE	33:2	33:2	10	g_free
LEAF_NODE	33:8	33:8	9	(
ARGUMENT	33:9	33:9	9	tmp
FIELD	33:9	33:9	10	tmp
LEAF_NODE	33:9	33:9	11	tmp
LEAF_NODE	33:12	33:12	9	)
LEAF_NODE	33:13	33:13	7	;
LEAF_NODE	34:1	34:1	5	}
LEAF_NODE	35:0	35:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	chat_account_filter_func
LEAF_NODE	2:0	2:0	3	chat_account_filter_func
PARAMETER_LIST	2:24	2:47	2	( PurpleAccount * account )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:40	3	PurpleAccount * account
TYPE	2:25	2:39	4	PurpleAccount *
TYPE_NAME	2:25	2:25	5	PurpleAccount
LEAF_NODE	2:25	2:25	6	PurpleAccount
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	account
LEAF_NODE	2:40	2:40	5	account
LEAF_NODE	2:47	2:47	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:62	3	PurpleConnection * gc ; gc = purple_account_get_connection ( account ) ;
VAR_DECL	4:1	4:19	4	PurpleConnection * gc ; gc = purple_account_get_connection ( account )
TYPE	4:1	4:18	5	PurpleConnection *
TYPE_NAME	4:1	4:1	6	PurpleConnection
LEAF_NODE	4:1	4:1	7	PurpleConnection
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	gc
LEAF_NODE	4:19	4:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	4:19	4:19	5	gc = purple_account_get_connection ( account )
ASSIGN	4:19	4:24	6	gc = purple_account_get_connection ( account )
LVAL	4:19	4:19	7	gc
NAME	4:19	4:19	8	gc
LEAF_NODE	4:19	4:19	9	gc
ASSIGN_OP	4:22	4:22	7	=
LEAF_NODE	4:22	4:22	8	=
RVAL	4:24	4:24	7	purple_account_get_connection ( account )
FUNCTION_CALL	4:24	4:61	8	purple_account_get_connection ( account )
CALLEE	4:24	4:24	9	purple_account_get_connection
LEAF_NODE	4:24	4:24	10	purple_account_get_connection
LEAF_NODE	4:53	4:53	9	(
ARGUMENT	4:54	4:54	9	account
FIELD	4:54	4:54	10	account
LEAF_NODE	4:54	4:54	11	account
LEAF_NODE	4:61	4:61	9	)
LEAF_NODE	4:62	4:62	4	;
SIMPLE_DECL	5:1	5:43	3	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL ;
VAR_DECL	5:1	5:27	4	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL
TYPE	5:1	5:26	5	PurplePluginProtocolInfo *
TYPE_NAME	5:1	5:1	6	PurplePluginProtocolInfo
LEAF_NODE	5:1	5:1	7	PurplePluginProtocolInfo
POINTER	5:26	5:26	6	*
LEAF_NODE	5:26	5:26	7	*
NAME	5:27	5:27	5	prpl_info
LEAF_NODE	5:27	5:27	6	prpl_info
LEAF_NODE	0:0	0:0	5	;
INIT	5:27	5:27	5	prpl_info = NULL
ASSIGN	5:27	5:39	6	prpl_info = NULL
LVAL	5:27	5:27	7	prpl_info
NAME	5:27	5:27	8	prpl_info
LEAF_NODE	5:27	5:27	9	prpl_info
ASSIGN_OP	5:37	5:37	7	=
LEAF_NODE	5:37	5:37	8	=
RVAL	5:39	5:39	7	NULL
FIELD	5:39	5:39	8	NULL
LEAF_NODE	5:39	5:39	9	NULL
LEAF_NODE	5:43	5:43	4	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	gc == NULL
EXPR	6:5	6:11	5	gc == NULL
FIELD	6:5	6:5	6	gc
LEAF_NODE	6:5	6:5	7	gc
EQ_OPERATOR	6:8	6:8	6	==
LEAF_NODE	6:8	6:8	7	==
FIELD	6:11	6:11	6	NULL
LEAF_NODE	6:11	6:11	7	NULL
LEAF_NODE	6:15	6:15	4	)
STATEMENTS	7:2	7:2	4	
JUMP_STATEMENT	7:2	7:14	5	return FALSE ;
KEYWORD	7:2	7:2	6	return
LEAF_NODE	7:2	7:2	7	return
DESTINATION	7:9	7:9	6	FALSE
EXPR	7:9	7:9	7	FALSE
FIELD	7:9	7:9	8	FALSE
LEAF_NODE	7:9	7:9	9	FALSE
LEAF_NODE	7:14	7:14	6	;
EXPR_STATEMENT	8:1	8:50	3	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl ) ;
EXPR	8:1	8:1	4	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
ASSIGN	8:1	8:13	5	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
LVAL	8:1	8:1	6	prpl_info
FIELD	8:1	8:1	7	prpl_info
LEAF_NODE	8:1	8:1	8	prpl_info
ASSIGN_OP	8:11	8:11	6	=
LEAF_NODE	8:11	8:11	7	=
RVAL	8:13	8:13	6	PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
FUNCTION_CALL	8:13	8:49	7	PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
CALLEE	8:13	8:13	8	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	8:13	8:13	9	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	8:40	8:40	8	(
ARGUMENT	8:41	8:41	8	gc -> prpl
FIELD	8:41	8:45	9	gc -> prpl
LEAF_NODE	8:41	8:41	10	gc
LEAF_NODE	8:43	8:43	10	->
LEAF_NODE	8:45	8:45	10	prpl
LEAF_NODE	8:49	8:49	8	)
LEAF_NODE	8:50	8:50	4	;
JUMP_STATEMENT	9:1	9:38	3	return ( prpl_info -> chat_info != NULL ) ;
KEYWORD	9:1	9:1	4	return
LEAF_NODE	9:1	9:1	5	return
DESTINATION	9:8	9:8	4	( prpl_info -> chat_info != NULL )
EXPR	9:8	9:37	5	( prpl_info -> chat_info != NULL )
LEAF_NODE	9:8	9:8	6	(
FIELD	9:9	9:20	6	prpl_info -> chat_info
LEAF_NODE	9:9	9:9	7	prpl_info
LEAF_NODE	9:18	9:18	7	->
LEAF_NODE	9:20	9:20	7	chat_info
EQ_OPERATOR	9:30	9:30	6	!=
LEAF_NODE	9:30	9:30	7	!=
FIELD	9:33	9:33	6	NULL
LEAF_NODE	9:33	9:33	7	NULL
LEAF_NODE	9:37	9:37	6	)
LEAF_NODE	9:38	9:38	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	37:0	1	
RETURN_TYPE	1:0	1:7	2	static gpointer
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gpointer
LEAF_NODE	1:7	1:7	4	gpointer
FUNCTION_NAME	2:0	2:0	2	nested_group_find_parent
LEAF_NODE	2:0	2:0	3	nested_group_find_parent
PARAMETER_LIST	2:24	2:46	2	( PurpleBlistNode * node )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:42	3	PurpleBlistNode * node
TYPE	2:25	2:41	4	PurpleBlistNode *
TYPE_NAME	2:25	2:25	5	PurpleBlistNode
LEAF_NODE	2:25	2:25	6	PurpleBlistNode
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	node
LEAF_NODE	2:42	2:42	5	node
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	36:1	2	
SIMPLE_DECL	4:1	4:11	3	char * name ;
VAR_DECL	4:1	4:7	4	char * name
TYPE	4:1	4:6	5	char *
TYPE_NAME	4:1	4:1	6	char
LEAF_NODE	4:1	4:1	7	char
POINTER	4:6	4:6	6	*
LEAF_NODE	4:6	4:6	7	*
NAME	4:7	4:7	5	name
LEAF_NODE	4:7	4:7	6	name
LEAF_NODE	4:11	4:11	4	;
SIMPLE_DECL	5:1	5:19	3	PurpleGroup * group ;
VAR_DECL	5:1	5:14	4	PurpleGroup * group
TYPE	5:1	5:13	5	PurpleGroup *
TYPE_NAME	5:1	5:1	6	PurpleGroup
LEAF_NODE	5:1	5:1	7	PurpleGroup
POINTER	5:13	5:13	6	*
LEAF_NODE	5:13	5:13	7	*
NAME	5:14	5:14	5	group
LEAF_NODE	5:14	5:14	6	group
LEAF_NODE	5:19	5:19	4	;
SIMPLE_DECL	6:1	6:10	3	char * sep ;
VAR_DECL	6:1	6:7	4	char * sep
TYPE	6:1	6:6	5	char *
TYPE_NAME	6:1	6:1	6	char
LEAF_NODE	6:1	6:1	7	char
POINTER	6:6	6:6	6	*
LEAF_NODE	6:6	6:6	7	*
NAME	6:7	6:7	5	sep
LEAF_NODE	6:7	6:7	6	sep
LEAF_NODE	6:10	6:10	4	;
SIMPLE_DECL	7:1	7:30	3	PurpleBlistNode * ret , PurpleBlistNode * parent ;
INIT_DECL_LIST	7:1	7:1	4	PurpleBlistNode * ret , PurpleBlistNode * parent
VAR_DECL	7:1	7:18	5	PurpleBlistNode * ret
TYPE	7:1	7:17	6	PurpleBlistNode *
TYPE_NAME	7:1	7:1	7	PurpleBlistNode
LEAF_NODE	7:1	7:1	8	PurpleBlistNode
POINTER	7:17	7:17	7	*
LEAF_NODE	7:17	7:17	8	*
NAME	7:18	7:18	6	ret
LEAF_NODE	7:18	7:18	7	ret
LEAF_NODE	7:21	7:21	5	,
VAR_DECL	7:1	7:24	5	PurpleBlistNode * parent
TYPE	7:1	7:23	6	PurpleBlistNode *
TYPE_NAME	7:1	7:1	7	PurpleBlistNode
LEAF_NODE	7:1	7:1	8	PurpleBlistNode
POINTER	7:23	7:23	7	*
LEAF_NODE	7:23	7:23	8	*
NAME	7:24	7:24	6	parent
LEAF_NODE	7:24	7:24	7	parent
LEAF_NODE	7:30	7:30	4	;
SIMPLE_DECL	8:1	8:14	3	GntTree * tree ;
VAR_DECL	8:1	8:10	4	GntTree * tree
TYPE	8:1	8:9	5	GntTree *
TYPE_NAME	8:1	8:1	6	GntTree
LEAF_NODE	8:1	8:1	7	GntTree
POINTER	8:9	8:9	6	*
LEAF_NODE	8:9	8:9	7	*
NAME	8:10	8:10	5	tree
LEAF_NODE	8:10	8:10	6	tree
LEAF_NODE	8:14	8:14	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	! PURPLE_BLIST_NODE_IS_GROUP ( node )
EXPR	9:5	9:5	5	! PURPLE_BLIST_NODE_IS_GROUP ( node )
UNARY_EXPR	9:5	9:6	6	! PURPLE_BLIST_NODE_IS_GROUP ( node )
UNARY_OPERATOR	9:5	9:5	7	!
LEAF_NODE	9:5	9:5	8	!
FUNCTION_CALL	9:6	9:37	7	PURPLE_BLIST_NODE_IS_GROUP ( node )
CALLEE	9:6	9:6	8	PURPLE_BLIST_NODE_IS_GROUP
LEAF_NODE	9:6	9:6	9	PURPLE_BLIST_NODE_IS_GROUP
LEAF_NODE	9:32	9:32	8	(
ARGUMENT	9:33	9:33	8	node
FIELD	9:33	9:33	9	node
LEAF_NODE	9:33	9:33	10	node
LEAF_NODE	9:37	9:37	8	)
LEAF_NODE	9:38	9:38	4	)
STATEMENTS	10:2	10:2	4	
JUMP_STATEMENT	10:2	10:43	5	return default_manager -> find_parent ( node ) ;
KEYWORD	10:2	10:2	6	return
LEAF_NODE	10:2	10:2	7	return
DESTINATION	10:9	10:9	6	default_manager -> find_parent ( node )
EXPR	10:9	10:9	7	default_manager -> find_parent ( node )
FUNCTION_CALL	10:9	10:42	8	default_manager -> find_parent ( node )
CALLEE	10:9	10:26	9	default_manager -> find_parent
LEAF_NODE	10:9	10:9	10	default_manager
LEAF_NODE	10:24	10:24	10	->
LEAF_NODE	10:26	10:26	10	find_parent
LEAF_NODE	10:37	10:37	9	(
ARGUMENT	10:38	10:38	9	node
FIELD	10:38	10:38	10	node
LEAF_NODE	10:38	10:38	11	node
LEAF_NODE	10:42	10:42	9	)
LEAF_NODE	10:43	10:43	6	;
EXPR_STATEMENT	11:1	11:28	3	group = ( PurpleGroup * ) node ;
EXPR	11:1	11:1	4	group = ( PurpleGroup * ) node
ASSIGN	11:1	11:9	5	group = ( PurpleGroup * ) node
LVAL	11:1	11:1	6	group
FIELD	11:1	11:1	7	group
LEAF_NODE	11:1	11:1	8	group
ASSIGN_OP	11:7	11:7	6	=
LEAF_NODE	11:7	11:7	7	=
RVAL	11:9	11:24	6	( PurpleGroup * ) node
LEAF_NODE	11:9	11:9	7	(
TYPE_NAME	11:10	11:10	7	PurpleGroup
LEAF_NODE	11:10	11:10	8	PurpleGroup
LEAF_NODE	11:22	11:22	7	*
LEAF_NODE	11:23	11:23	7	)
FIELD	11:24	11:24	7	node
LEAF_NODE	11:24	11:24	8	node
LEAF_NODE	11:28	11:28	4	;
EXPR_STATEMENT	12:1	12:46	3	name = g_strdup ( purple_group_get_name ( group ) ) ;
EXPR	12:1	12:1	4	name = g_strdup ( purple_group_get_name ( group ) )
ASSIGN	12:1	12:8	5	name = g_strdup ( purple_group_get_name ( group ) )
LVAL	12:1	12:1	6	name
FIELD	12:1	12:1	7	name
LEAF_NODE	12:1	12:1	8	name
ASSIGN_OP	12:6	12:6	6	=
LEAF_NODE	12:6	12:6	7	=
RVAL	12:8	12:8	6	g_strdup ( purple_group_get_name ( group ) )
FUNCTION_CALL	12:8	12:45	7	g_strdup ( purple_group_get_name ( group ) )
CALLEE	12:8	12:8	8	g_strdup
LEAF_NODE	12:8	12:8	9	g_strdup
LEAF_NODE	12:16	12:16	8	(
ARGUMENT	12:17	12:17	8	purple_group_get_name ( group )
FUNCTION_CALL	12:17	12:44	9	purple_group_get_name ( group )
CALLEE	12:17	12:17	10	purple_group_get_name
LEAF_NODE	12:17	12:17	11	purple_group_get_name
LEAF_NODE	12:38	12:38	10	(
ARGUMENT	12:39	12:39	10	group
FIELD	12:39	12:39	11	group
LEAF_NODE	12:39	12:39	12	group
LEAF_NODE	12:44	12:44	10	)
LEAF_NODE	12:45	12:45	8	)
LEAF_NODE	12:46	12:46	4	;
SELECTION	13:1	13:33	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	! ( sep = strchr ( name , '/' ) )
EXPR	13:5	13:5	5	! ( sep = strchr ( name , '/' ) )
UNARY_EXPR	13:5	13:30	6	! ( sep = strchr ( name , '/' ) )
UNARY_OPERATOR	13:5	13:5	7	!
LEAF_NODE	13:5	13:5	8	!
LEAF_NODE	13:6	13:6	7	(
ASSIGN	13:7	13:13	7	sep = strchr ( name , '/' )
LVAL	13:7	13:7	8	sep
FIELD	13:7	13:7	9	sep
LEAF_NODE	13:7	13:7	10	sep
ASSIGN_OP	13:11	13:11	8	=
LEAF_NODE	13:11	13:11	9	=
RVAL	13:13	13:13	8	strchr ( name , '/' )
FUNCTION_CALL	13:13	13:29	9	strchr ( name , '/' )
CALLEE	13:13	13:13	10	strchr
LEAF_NODE	13:13	13:13	11	strchr
LEAF_NODE	13:19	13:19	10	(
ARGUMENT	13:20	13:20	10	name
FIELD	13:20	13:20	11	name
LEAF_NODE	13:20	13:20	12	name
LEAF_NODE	13:24	13:24	10	,
ARGUMENT	13:26	13:26	10	'/'
FIELD	13:26	13:26	11	'/'
LEAF_NODE	13:26	13:26	12	'/'
LEAF_NODE	13:29	13:29	10	)
LEAF_NODE	13:30	13:30	7	)
LEAF_NODE	13:31	13:31	4	)
STATEMENTS	13:33	16:1	4	
LEAF_NODE	13:33	13:33	5	{
STATEMENTS	14:2	15:2	5	
EXPR_STATEMENT	14:2	14:14	6	g_free ( name ) ;
EXPR	14:2	14:2	7	g_free ( name )
FUNCTION_CALL	14:2	14:13	8	g_free ( name )
CALLEE	14:2	14:2	9	g_free
LEAF_NODE	14:2	14:2	10	g_free
LEAF_NODE	14:8	14:8	9	(
ARGUMENT	14:9	14:9	9	name
FIELD	14:9	14:9	10	name
LEAF_NODE	14:9	14:9	11	name
LEAF_NODE	14:13	14:13	9	)
LEAF_NODE	14:14	14:14	7	;
JUMP_STATEMENT	15:2	15:43	6	return default_manager -> find_parent ( node ) ;
KEYWORD	15:2	15:2	7	return
LEAF_NODE	15:2	15:2	8	return
DESTINATION	15:9	15:9	7	default_manager -> find_parent ( node )
EXPR	15:9	15:9	8	default_manager -> find_parent ( node )
FUNCTION_CALL	15:9	15:42	9	default_manager -> find_parent ( node )
CALLEE	15:9	15:26	10	default_manager -> find_parent
LEAF_NODE	15:9	15:9	11	default_manager
LEAF_NODE	15:24	15:24	11	->
LEAF_NODE	15:26	15:26	11	find_parent
LEAF_NODE	15:37	15:37	10	(
ARGUMENT	15:38	15:38	10	node
FIELD	15:38	15:38	11	node
LEAF_NODE	15:38	15:38	12	node
LEAF_NODE	15:42	15:42	10	)
LEAF_NODE	15:43	15:43	7	;
LEAF_NODE	16:1	16:1	5	}
EXPR_STATEMENT	17:1	17:30	3	tree = finch_blist_get_tree ( ) ;
EXPR	17:1	17:1	4	tree = finch_blist_get_tree ( )
ASSIGN	17:1	17:8	5	tree = finch_blist_get_tree ( )
LVAL	17:1	17:1	6	tree
FIELD	17:1	17:1	7	tree
LEAF_NODE	17:1	17:1	8	tree
ASSIGN_OP	17:6	17:6	6	=
LEAF_NODE	17:6	17:6	7	=
RVAL	17:8	17:8	6	finch_blist_get_tree ( )
FUNCTION_CALL	17:8	17:29	7	finch_blist_get_tree ( )
CALLEE	17:8	17:8	8	finch_blist_get_tree
LEAF_NODE	17:8	17:8	9	finch_blist_get_tree
LEAF_NODE	17:28	17:28	8	(
LEAF_NODE	17:29	17:29	8	)
LEAF_NODE	17:30	17:30	4	;
EXPR_STATEMENT	18:1	18:14	3	parent = NULL ;
EXPR	18:1	18:1	4	parent = NULL
ASSIGN	18:1	18:10	5	parent = NULL
LVAL	18:1	18:1	6	parent
FIELD	18:1	18:1	7	parent
LEAF_NODE	18:1	18:1	8	parent
ASSIGN_OP	18:8	18:8	6	=
LEAF_NODE	18:8	18:8	7	=
RVAL	18:10	18:10	6	NULL
FIELD	18:10	18:10	7	NULL
LEAF_NODE	18:10	18:10	8	NULL
LEAF_NODE	18:14	18:14	4	;
ITERATION	19:1	19:13	3	
KEYWORD	19:1	19:1	4	while
LEAF_NODE	19:1	19:1	5	while
LEAF_NODE	19:7	19:7	4	(
CONDITION	19:8	19:8	4	sep
EXPR	19:8	19:8	5	sep
FIELD	19:8	19:8	6	sep
LEAF_NODE	19:8	19:8	7	sep
LEAF_NODE	19:11	19:11	4	)
STATEMENTS	19:13	34:1	4	
LEAF_NODE	19:13	19:13	5	{
STATEMENTS	20:2	33:2	5	
EXPR_STATEMENT	20:2	20:10	6	* sep = 0 ;
EXPR	20:2	20:2	7	* sep = 0
ASSIGN	20:2	20:9	8	* sep = 0
LVAL	20:2	20:2	9	* sep
UNARY_EXPR	20:2	20:3	10	* sep
UNARY_OPERATOR	20:2	20:2	11	*
LEAF_NODE	20:2	20:2	12	*
FIELD	20:3	20:3	11	sep
LEAF_NODE	20:3	20:3	12	sep
ASSIGN_OP	20:7	20:7	9	=
LEAF_NODE	20:7	20:7	10	=
RVAL	20:9	20:9	9	0
FIELD	20:9	20:9	10	0
LEAF_NODE	20:9	20:9	11	0
LEAF_NODE	20:10	20:10	7	;
SELECTION	21:2	21:72	6	
KEYWORD	21:2	21:2	7	if
LEAF_NODE	21:2	21:2	8	if
LEAF_NODE	21:5	21:5	7	(
CONDITION	21:6	21:6	7	* ( sep + 1 ) && ( ret = ( PurpleBlistNode * ) purple_find_group ( name ) )
EXPR	21:6	21:6	8	* ( sep + 1 ) && ( ret = ( PurpleBlistNode * ) purple_find_group ( name ) )
AND	21:6	21:20	9	* ( sep + 1 ) && ( ret = ( PurpleBlistNode * ) purple_find_group ( name ) )
EXPR	21:6	21:6	10	* ( sep + 1 )
UNARY_EXPR	21:6	21:15	11	* ( sep + 1 )
UNARY_OPERATOR	21:6	21:6	12	*
LEAF_NODE	21:6	21:6	13	*
LEAF_NODE	21:7	21:7	12	(
FIELD	21:8	21:8	12	sep
LEAF_NODE	21:8	21:8	13	sep
LEAF_NODE	21:12	21:12	12	+
FIELD	21:14	21:14	12	1
LEAF_NODE	21:14	21:14	13	1
LEAF_NODE	21:15	21:15	12	)
LEAF_NODE	21:17	21:17	10	&&
EXPR	21:20	21:69	10	( ret = ( PurpleBlistNode * ) purple_find_group ( name ) )
LEAF_NODE	21:20	21:20	11	(
ASSIGN	21:21	21:27	11	ret = ( PurpleBlistNode * ) purple_find_group ( name )
LVAL	21:21	21:21	12	ret
FIELD	21:21	21:21	13	ret
LEAF_NODE	21:21	21:21	14	ret
ASSIGN_OP	21:25	21:25	12	=
LEAF_NODE	21:25	21:25	13	=
RVAL	21:27	21:46	12	( PurpleBlistNode * ) purple_find_group ( name )
LEAF_NODE	21:27	21:27	13	(
TYPE_NAME	21:28	21:28	13	PurpleBlistNode
LEAF_NODE	21:28	21:28	14	PurpleBlistNode
LEAF_NODE	21:44	21:44	13	*
LEAF_NODE	21:45	21:45	13	)
FUNCTION_CALL	21:46	21:68	13	purple_find_group ( name )
CALLEE	21:46	21:46	14	purple_find_group
LEAF_NODE	21:46	21:46	15	purple_find_group
LEAF_NODE	21:63	21:63	14	(
ARGUMENT	21:64	21:64	14	name
FIELD	21:64	21:64	15	name
LEAF_NODE	21:64	21:64	16	name
LEAF_NODE	21:68	21:68	14	)
LEAF_NODE	21:69	21:69	11	)
LEAF_NODE	21:70	21:70	7	)
STATEMENTS	21:72	24:2	7	
LEAF_NODE	21:72	21:72	8	{
STATEMENTS	22:3	23:3	8	
EXPR_STATEMENT	22:3	22:36	9	finch_blist_manager_add_node ( ret ) ;
EXPR	22:3	22:3	10	finch_blist_manager_add_node ( ret )
FUNCTION_CALL	22:3	22:35	11	finch_blist_manager_add_node ( ret )
CALLEE	22:3	22:3	12	finch_blist_manager_add_node
LEAF_NODE	22:3	22:3	13	finch_blist_manager_add_node
LEAF_NODE	22:31	22:31	12	(
ARGUMENT	22:32	22:32	12	ret
FIELD	22:32	22:32	13	ret
LEAF_NODE	22:32	22:32	14	ret
LEAF_NODE	22:35	22:35	12	)
LEAF_NODE	22:36	22:36	10	;
EXPR_STATEMENT	23:3	23:15	9	parent = ret ;
EXPR	23:3	23:3	10	parent = ret
ASSIGN	23:3	23:12	11	parent = ret
LVAL	23:3	23:3	12	parent
FIELD	23:3	23:3	13	parent
LEAF_NODE	23:3	23:3	14	parent
ASSIGN_OP	23:10	23:10	12	=
LEAF_NODE	23:10	23:10	13	=
RVAL	23:12	23:12	12	ret
FIELD	23:12	23:12	13	ret
LEAF_NODE	23:12	23:12	14	ret
LEAF_NODE	23:15	23:15	10	;
LEAF_NODE	24:2	24:2	8	}
SELECTION	24:4	24:9	6	
KEYWORD	24:4	24:4	7	else
LEAF_NODE	24:4	24:4	8	else
STATEMENTS	24:9	24:9	7	
SELECTION	24:9	24:57	8	
KEYWORD	24:9	24:9	9	if
LEAF_NODE	24:9	24:9	10	if
LEAF_NODE	24:12	24:12	9	(
CONDITION	24:13	24:13	9	! ( ret = g_hash_table_lookup ( groups , name ) )
EXPR	24:13	24:13	10	! ( ret = g_hash_table_lookup ( groups , name ) )
UNARY_EXPR	24:13	24:54	11	! ( ret = g_hash_table_lookup ( groups , name ) )
UNARY_OPERATOR	24:13	24:13	12	!
LEAF_NODE	24:13	24:13	13	!
LEAF_NODE	24:14	24:14	12	(
ASSIGN	24:15	24:21	12	ret = g_hash_table_lookup ( groups , name )
LVAL	24:15	24:15	13	ret
FIELD	24:15	24:15	14	ret
LEAF_NODE	24:15	24:15	15	ret
ASSIGN_OP	24:19	24:19	13	=
LEAF_NODE	24:19	24:19	14	=
RVAL	24:21	24:21	13	g_hash_table_lookup ( groups , name )
FUNCTION_CALL	24:21	24:53	14	g_hash_table_lookup ( groups , name )
CALLEE	24:21	24:21	15	g_hash_table_lookup
LEAF_NODE	24:21	24:21	16	g_hash_table_lookup
LEAF_NODE	24:40	24:40	15	(
ARGUMENT	24:41	24:41	15	groups
FIELD	24:41	24:41	16	groups
LEAF_NODE	24:41	24:41	17	groups
LEAF_NODE	24:47	24:47	15	,
ARGUMENT	24:49	24:49	15	name
FIELD	24:49	24:49	16	name
LEAF_NODE	24:49	24:49	17	name
LEAF_NODE	24:53	24:53	15	)
LEAF_NODE	24:54	24:54	12	)
LEAF_NODE	24:55	24:55	9	)
STATEMENTS	24:57	31:2	9	
LEAF_NODE	24:57	24:57	10	{
STATEMENTS	25:3	30:3	10	
EXPR_STATEMENT	25:3	25:35	11	ret = g_new0 ( PurpleBlistNode , 1 ) ;
EXPR	25:3	25:3	12	ret = g_new0 ( PurpleBlistNode , 1 )
ASSIGN	25:3	25:9	13	ret = g_new0 ( PurpleBlistNode , 1 )
LVAL	25:3	25:3	14	ret
FIELD	25:3	25:3	15	ret
LEAF_NODE	25:3	25:3	16	ret
ASSIGN_OP	25:7	25:7	14	=
LEAF_NODE	25:7	25:7	15	=
RVAL	25:9	25:9	14	g_new0 ( PurpleBlistNode , 1 )
FUNCTION_CALL	25:9	25:34	15	g_new0 ( PurpleBlistNode , 1 )
CALLEE	25:9	25:9	16	g_new0
LEAF_NODE	25:9	25:9	17	g_new0
LEAF_NODE	25:15	25:15	16	(
ARGUMENT	25:16	25:16	16	PurpleBlistNode
FIELD	25:16	25:16	17	PurpleBlistNode
LEAF_NODE	25:16	25:16	18	PurpleBlistNode
LEAF_NODE	25:31	25:31	16	,
ARGUMENT	25:33	25:33	16	1
FIELD	25:33	25:33	17	1
LEAF_NODE	25:33	25:33	18	1
LEAF_NODE	25:34	25:34	16	)
LEAF_NODE	25:35	25:35	12	;
EXPR_STATEMENT	26:3	26:51	11	g_hash_table_insert ( groups , g_strdup ( name ) , ret ) ;
EXPR	26:3	26:3	12	g_hash_table_insert ( groups , g_strdup ( name ) , ret )
FUNCTION_CALL	26:3	26:50	13	g_hash_table_insert ( groups , g_strdup ( name ) , ret )
CALLEE	26:3	26:3	14	g_hash_table_insert
LEAF_NODE	26:3	26:3	15	g_hash_table_insert
LEAF_NODE	26:22	26:22	14	(
ARGUMENT	26:23	26:23	14	groups
FIELD	26:23	26:23	15	groups
LEAF_NODE	26:23	26:23	16	groups
LEAF_NODE	26:29	26:29	14	,
ARGUMENT	26:31	26:31	14	g_strdup ( name )
FUNCTION_CALL	26:31	26:44	15	g_strdup ( name )
CALLEE	26:31	26:31	16	g_strdup
LEAF_NODE	26:31	26:31	17	g_strdup
LEAF_NODE	26:39	26:39	16	(
ARGUMENT	26:40	26:40	16	name
FIELD	26:40	26:40	17	name
LEAF_NODE	26:40	26:40	18	name
LEAF_NODE	26:44	26:44	16	)
LEAF_NODE	26:45	26:45	14	,
ARGUMENT	26:47	26:47	14	ret
FIELD	26:47	26:47	15	ret
LEAF_NODE	26:47	26:47	16	ret
LEAF_NODE	26:50	26:50	14	)
LEAF_NODE	26:51	26:51	12	;
EXPR_STATEMENT	27:3	27:38	11	ret -> type = PURPLE_BLIST_OTHER_NODE ;
EXPR	27:3	27:3	12	ret -> type = PURPLE_BLIST_OTHER_NODE
ASSIGN	27:3	27:15	13	ret -> type = PURPLE_BLIST_OTHER_NODE
LVAL	27:3	27:3	14	ret -> type
FIELD	27:3	27:8	15	ret -> type
LEAF_NODE	27:3	27:3	16	ret
LEAF_NODE	27:6	27:6	16	->
LEAF_NODE	27:8	27:8	16	type
ASSIGN_OP	27:13	27:13	14	=
LEAF_NODE	27:13	27:13	15	=
RVAL	27:15	27:15	14	PURPLE_BLIST_OTHER_NODE
FIELD	27:15	27:15	15	PURPLE_BLIST_OTHER_NODE
LEAF_NODE	27:15	27:15	16	PURPLE_BLIST_OTHER_NODE
LEAF_NODE	27:38	27:38	12	;
EXPR_STATEMENT	28:3	29:45	11	gnt_tree_add_row_last ( tree , ret , gnt_tree_create_row ( tree , name ) , parent ) ;
EXPR	28:3	28:3	12	gnt_tree_add_row_last ( tree , ret , gnt_tree_create_row ( tree , name ) , parent )
FUNCTION_CALL	28:3	29:44	13	gnt_tree_add_row_last ( tree , ret , gnt_tree_create_row ( tree , name ) , parent )
CALLEE	28:3	28:3	14	gnt_tree_add_row_last
LEAF_NODE	28:3	28:3	15	gnt_tree_add_row_last
LEAF_NODE	28:24	28:24	14	(
ARGUMENT	28:25	28:25	14	tree
FIELD	28:25	28:25	15	tree
LEAF_NODE	28:25	28:25	16	tree
LEAF_NODE	28:29	28:29	14	,
ARGUMENT	28:31	28:31	14	ret
FIELD	28:31	28:31	15	ret
LEAF_NODE	28:31	28:31	16	ret
LEAF_NODE	28:34	28:34	14	,
ARGUMENT	29:5	29:5	14	gnt_tree_create_row ( tree , name )
FUNCTION_CALL	29:5	29:35	15	gnt_tree_create_row ( tree , name )
CALLEE	29:5	29:5	16	gnt_tree_create_row
LEAF_NODE	29:5	29:5	17	gnt_tree_create_row
LEAF_NODE	29:24	29:24	16	(
ARGUMENT	29:25	29:25	16	tree
FIELD	29:25	29:25	17	tree
LEAF_NODE	29:25	29:25	18	tree
LEAF_NODE	29:29	29:29	16	,
ARGUMENT	29:31	29:31	16	name
FIELD	29:31	29:31	17	name
LEAF_NODE	29:31	29:31	18	name
LEAF_NODE	29:35	29:35	16	)
LEAF_NODE	29:36	29:36	14	,
ARGUMENT	29:38	29:38	14	parent
FIELD	29:38	29:38	15	parent
LEAF_NODE	29:38	29:38	16	parent
LEAF_NODE	29:44	29:44	14	)
LEAF_NODE	29:45	29:45	12	;
EXPR_STATEMENT	30:3	30:15	11	parent = ret ;
EXPR	30:3	30:3	12	parent = ret
ASSIGN	30:3	30:12	13	parent = ret
LVAL	30:3	30:3	14	parent
FIELD	30:3	30:3	15	parent
LEAF_NODE	30:3	30:3	16	parent
ASSIGN_OP	30:10	30:10	14	=
LEAF_NODE	30:10	30:10	15	=
RVAL	30:12	30:12	14	ret
FIELD	30:12	30:12	15	ret
LEAF_NODE	30:12	30:12	16	ret
LEAF_NODE	30:15	30:15	12	;
LEAF_NODE	31:2	31:2	10	}
EXPR_STATEMENT	32:2	32:12	6	* sep = '/' ;
EXPR	32:2	32:2	7	* sep = '/'
ASSIGN	32:2	32:9	8	* sep = '/'
LVAL	32:2	32:2	9	* sep
UNARY_EXPR	32:2	32:3	10	* sep
UNARY_OPERATOR	32:2	32:2	11	*
LEAF_NODE	32:2	32:2	12	*
FIELD	32:3	32:3	11	sep
LEAF_NODE	32:3	32:3	12	sep
ASSIGN_OP	32:7	32:7	9	=
LEAF_NODE	32:7	32:7	10	=
RVAL	32:9	32:9	9	'/'
FIELD	32:9	32:9	10	'/'
LEAF_NODE	32:9	32:9	11	'/'
LEAF_NODE	32:12	32:12	7	;
EXPR_STATEMENT	33:2	33:28	6	sep = strchr ( sep + 1 , '/' ) ;
EXPR	33:2	33:2	7	sep = strchr ( sep + 1 , '/' )
ASSIGN	33:2	33:8	8	sep = strchr ( sep + 1 , '/' )
LVAL	33:2	33:2	9	sep
FIELD	33:2	33:2	10	sep
LEAF_NODE	33:2	33:2	11	sep
ASSIGN_OP	33:6	33:6	9	=
LEAF_NODE	33:6	33:6	10	=
RVAL	33:8	33:8	9	strchr ( sep + 1 , '/' )
FUNCTION_CALL	33:8	33:27	10	strchr ( sep + 1 , '/' )
CALLEE	33:8	33:8	11	strchr
LEAF_NODE	33:8	33:8	12	strchr
LEAF_NODE	33:14	33:14	11	(
ARGUMENT	33:15	33:21	11	sep + 1
FIELD	33:15	33:15	12	sep
LEAF_NODE	33:15	33:15	13	sep
LEAF_NODE	33:19	33:19	12	+
FIELD	33:21	33:21	12	1
LEAF_NODE	33:21	33:21	13	1
LEAF_NODE	33:22	33:22	11	,
ARGUMENT	33:24	33:24	11	'/'
FIELD	33:24	33:24	12	'/'
LEAF_NODE	33:24	33:24	13	'/'
LEAF_NODE	33:27	33:27	11	)
LEAF_NODE	33:28	33:28	7	;
LEAF_NODE	34:1	34:1	5	}
EXPR_STATEMENT	35:1	35:13	3	g_free ( name ) ;
EXPR	35:1	35:1	4	g_free ( name )
FUNCTION_CALL	35:1	35:12	5	g_free ( name )
CALLEE	35:1	35:1	6	g_free
LEAF_NODE	35:1	35:1	7	g_free
LEAF_NODE	35:7	35:7	6	(
ARGUMENT	35:8	35:8	6	name
FIELD	35:8	35:8	7	name
LEAF_NODE	35:8	35:8	8	name
LEAF_NODE	35:12	35:12	6	)
LEAF_NODE	35:13	35:13	4	;
JUMP_STATEMENT	36:1	36:11	3	return ret ;
KEYWORD	36:1	36:1	4	return
LEAF_NODE	36:1	36:1	5	return
DESTINATION	36:8	36:8	4	ret
EXPR	36:8	36:8	5	ret
FIELD	36:8	36:8	6	ret
LEAF_NODE	36:8	36:8	7	ret
LEAF_NODE	36:11	36:11	4	;
LEAF_NODE	37:0	37:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	12:0	1	
RETURN_TYPE	1:0	1:6	2	GList *
TYPE_NAME	1:0	1:0	3	GList
LEAF_NODE	1:0	1:0	4	GList
LEAF_NODE	1:6	1:6	3	*
FUNCTION_NAME	2:0	2:0	2	purple_media_get_local_candidates
LEAF_NODE	2:0	2:0	3	purple_media_get_local_candidates
PARAMETER_LIST	2:33	3:58	2	( PurpleMedia * media , const gchar * sess_id , const gchar * participant )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:47	3	PurpleMedia * media
TYPE	2:34	2:46	4	PurpleMedia *
TYPE_NAME	2:34	2:34	5	PurpleMedia
LEAF_NODE	2:34	2:34	6	PurpleMedia
POINTER	2:46	2:46	5	*
LEAF_NODE	2:46	2:46	6	*
NAME	2:47	2:47	4	media
LEAF_NODE	2:47	2:47	5	media
LEAF_NODE	2:52	2:52	3	,
PARAMETER_DECL	2:54	2:67	3	const gchar * sess_id
TYPE	2:54	2:66	4	const gchar *
TYPE_NAME	2:54	2:60	5	const gchar
LEAF_NODE	2:54	2:54	6	const
LEAF_NODE	2:60	2:60	6	gchar
POINTER	2:66	2:66	5	*
LEAF_NODE	2:66	2:66	6	*
NAME	2:67	2:67	4	sess_id
LEAF_NODE	2:67	2:67	5	sess_id
LEAF_NODE	2:74	2:74	3	,
PARAMETER_DECL	3:34	3:47	3	const gchar * participant
TYPE	3:34	3:46	4	const gchar *
TYPE_NAME	3:34	3:40	5	const gchar
LEAF_NODE	3:34	3:34	6	const
LEAF_NODE	3:40	3:40	6	gchar
POINTER	3:46	3:46	5	*
LEAF_NODE	3:46	3:46	6	*
NAME	3:47	3:47	4	participant
LEAF_NODE	3:47	3:47	5	participant
LEAF_NODE	3:58	3:58	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	6:1	10:1	2	
EXPR_STATEMENT	6:1	6:51	3	g_return_val_if_fail ( PURPLE_IS_MEDIA ( media ) , NULL ) ;
EXPR	6:1	6:1	4	g_return_val_if_fail ( PURPLE_IS_MEDIA ( media ) , NULL )
FUNCTION_CALL	6:1	6:50	5	g_return_val_if_fail ( PURPLE_IS_MEDIA ( media ) , NULL )
CALLEE	6:1	6:1	6	g_return_val_if_fail
LEAF_NODE	6:1	6:1	7	g_return_val_if_fail
LEAF_NODE	6:21	6:21	6	(
ARGUMENT	6:22	6:22	6	PURPLE_IS_MEDIA ( media )
FUNCTION_CALL	6:22	6:43	7	PURPLE_IS_MEDIA ( media )
CALLEE	6:22	6:22	8	PURPLE_IS_MEDIA
LEAF_NODE	6:22	6:22	9	PURPLE_IS_MEDIA
LEAF_NODE	6:37	6:37	8	(
ARGUMENT	6:38	6:38	8	media
FIELD	6:38	6:38	9	media
LEAF_NODE	6:38	6:38	10	media
LEAF_NODE	6:43	6:43	8	)
LEAF_NODE	6:44	6:44	6	,
ARGUMENT	6:46	6:46	6	NULL
FIELD	6:46	6:46	7	NULL
LEAF_NODE	6:46	6:46	8	NULL
LEAF_NODE	6:50	6:50	6	)
LEAF_NODE	6:51	6:51	4	;
JUMP_STATEMENT	7:1	8:24	3	return purple_media_backend_get_local_candidates ( media -> priv -> backend , sess_id , participant ) ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	purple_media_backend_get_local_candidates ( media -> priv -> backend , sess_id , participant )
EXPR	7:8	7:8	5	purple_media_backend_get_local_candidates ( media -> priv -> backend , sess_id , participant )
FUNCTION_CALL	7:8	8:23	6	purple_media_backend_get_local_candidates ( media -> priv -> backend , sess_id , participant )
CALLEE	7:8	7:8	7	purple_media_backend_get_local_candidates
LEAF_NODE	7:8	7:8	8	purple_media_backend_get_local_candidates
LEAF_NODE	7:49	7:49	7	(
ARGUMENT	7:50	7:50	7	media -> priv -> backend
FIELD	7:50	7:63	8	media -> priv -> backend
LEAF_NODE	7:50	7:50	9	media
LEAF_NODE	7:55	7:55	9	->
LEAF_NODE	7:57	7:57	9	priv
LEAF_NODE	7:61	7:61	9	->
LEAF_NODE	7:63	7:63	9	backend
LEAF_NODE	7:70	7:70	7	,
ARGUMENT	8:3	8:3	7	sess_id
FIELD	8:3	8:3	8	sess_id
LEAF_NODE	8:3	8:3	9	sess_id
LEAF_NODE	8:10	8:10	7	,
ARGUMENT	8:12	8:12	7	participant
FIELD	8:12	8:12	8	participant
LEAF_NODE	8:12	8:12	9	participant
LEAF_NODE	8:23	8:23	7	)
LEAF_NODE	8:24	8:24	4	;
JUMP_STATEMENT	10:1	10:12	3	return NULL ;
KEYWORD	10:1	10:1	4	return
LEAF_NODE	10:1	10:1	5	return
DESTINATION	10:8	10:8	4	NULL
EXPR	10:8	10:8	5	NULL
FIELD	10:8	10:8	6	NULL
LEAF_NODE	10:8	10:8	7	NULL
LEAF_NODE	10:12	10:12	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	48:0	1	
RETURN_TYPE	1:0	1:12	2	static char *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	char
LEAF_NODE	1:7	1:7	4	char
LEAF_NODE	1:12	1:12	3	*
FUNCTION_NAME	2:0	2:0	2	generate_response_value
LEAF_NODE	2:0	2:0	3	generate_response_value
PARAMETER_LIST	2:23	3:55	2	( JabberID * jid , const char * passwd , const char * nonce , const char * cnonce , const char * a2 , const char * realm )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:34	3	JabberID * jid
TYPE	2:24	2:33	4	JabberID *
TYPE_NAME	2:24	2:24	5	JabberID
LEAF_NODE	2:24	2:24	6	JabberID
POINTER	2:33	2:33	5	*
LEAF_NODE	2:33	2:33	6	*
NAME	2:34	2:34	4	jid
LEAF_NODE	2:34	2:34	5	jid
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:51	3	const char * passwd
TYPE	2:39	2:50	4	const char *
TYPE_NAME	2:39	2:45	5	const char
LEAF_NODE	2:39	2:39	6	const
LEAF_NODE	2:45	2:45	6	char
POINTER	2:50	2:50	5	*
LEAF_NODE	2:50	2:50	6	*
NAME	2:51	2:51	4	passwd
LEAF_NODE	2:51	2:51	5	passwd
LEAF_NODE	2:57	2:57	3	,
PARAMETER_DECL	2:59	2:71	3	const char * nonce
TYPE	2:59	2:70	4	const char *
TYPE_NAME	2:59	2:65	5	const char
LEAF_NODE	2:59	2:59	6	const
LEAF_NODE	2:65	2:65	6	char
POINTER	2:70	2:70	5	*
LEAF_NODE	2:70	2:70	6	*
NAME	2:71	2:71	4	nonce
LEAF_NODE	2:71	2:71	5	nonce
LEAF_NODE	2:76	2:76	3	,
PARAMETER_DECL	3:2	3:14	3	const char * cnonce
TYPE	3:2	3:13	4	const char *
TYPE_NAME	3:2	3:8	5	const char
LEAF_NODE	3:2	3:2	6	const
LEAF_NODE	3:8	3:8	6	char
POINTER	3:13	3:13	5	*
LEAF_NODE	3:13	3:13	6	*
NAME	3:14	3:14	4	cnonce
LEAF_NODE	3:14	3:14	5	cnonce
LEAF_NODE	3:20	3:20	3	,
PARAMETER_DECL	3:22	3:34	3	const char * a2
TYPE	3:22	3:33	4	const char *
TYPE_NAME	3:22	3:28	5	const char
LEAF_NODE	3:22	3:22	6	const
LEAF_NODE	3:28	3:28	6	char
POINTER	3:33	3:33	5	*
LEAF_NODE	3:33	3:33	6	*
NAME	3:34	3:34	4	a2
LEAF_NODE	3:34	3:34	5	a2
LEAF_NODE	3:36	3:36	3	,
PARAMETER_DECL	3:38	3:50	3	const char * realm
TYPE	3:38	3:49	4	const char *
TYPE_NAME	3:38	3:44	5	const char
LEAF_NODE	3:38	3:38	6	const
LEAF_NODE	3:44	3:44	6	char
POINTER	3:49	3:49	5	*
LEAF_NODE	3:49	3:49	6	*
NAME	3:50	3:50	4	realm
LEAF_NODE	3:50	3:50	5	realm
LEAF_NODE	3:55	3:55	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	47:1	2	
SIMPLE_DECL	5:1	5:21	3	PurpleCipher * cipher ;
VAR_DECL	5:1	5:15	4	PurpleCipher * cipher
TYPE	5:1	5:14	5	PurpleCipher *
TYPE_NAME	5:1	5:1	6	PurpleCipher
LEAF_NODE	5:1	5:1	7	PurpleCipher
POINTER	5:14	5:14	6	*
LEAF_NODE	5:14	5:14	7	*
NAME	5:15	5:15	5	cipher
LEAF_NODE	5:15	5:15	6	cipher
LEAF_NODE	5:21	5:21	4	;
SIMPLE_DECL	6:1	6:29	3	PurpleCipherContext * context ;
VAR_DECL	6:1	6:22	4	PurpleCipherContext * context
TYPE	6:1	6:21	5	PurpleCipherContext *
TYPE_NAME	6:1	6:1	6	PurpleCipherContext
LEAF_NODE	6:1	6:1	7	PurpleCipherContext
POINTER	6:21	6:21	6	*
LEAF_NODE	6:21	6:21	7	*
NAME	6:22	6:22	5	context
LEAF_NODE	6:22	6:22	6	context
LEAF_NODE	6:29	6:29	4	;
SIMPLE_DECL	7:1	7:18	3	guchar [ 16 ] result ;
VAR_DECL	7:1	7:8	4	guchar [ 16 ] result
TYPE	7:1	7:14	5	guchar [ 16 ]
TYPE_NAME	7:1	7:1	6	guchar
LEAF_NODE	7:1	7:1	7	guchar
TYPE_SUFFIX	7:14	7:17	6	[ 16 ]
LEAF_NODE	7:14	7:14	7	[
FIELD	7:15	7:15	7	16
LEAF_NODE	7:15	7:15	8	16
LEAF_NODE	7:17	7:17	7	]
NAME	7:8	7:8	5	result
LEAF_NODE	7:8	7:8	6	result
LEAF_NODE	7:18	7:18	4	;
SIMPLE_DECL	8:1	8:13	3	size_t a1len ;
VAR_DECL	8:1	8:8	4	size_t a1len
TYPE	8:1	8:1	5	size_t
TYPE_NAME	8:1	8:1	6	size_t
LEAF_NODE	8:1	8:1	7	size_t
NAME	8:8	8:8	5	a1len
LEAF_NODE	8:8	8:8	6	a1len
LEAF_NODE	8:13	8:13	4	;
SIMPLE_DECL	9:1	9:71	3	gchar * a1 , gchar * convnode ; convnode = NULL , gchar * convpasswd ; convpasswd = NULL , gchar * ha1 , gchar * ha2 , gchar * kd , gchar * x , gchar * z ;
INIT_DECL_LIST	9:1	9:1	4	gchar * a1 , gchar * convnode ; convnode = NULL , gchar * convpasswd ; convpasswd = NULL , gchar * ha1 , gchar * ha2 , gchar * kd , gchar * x , gchar * z
VAR_DECL	9:1	9:8	5	gchar * a1
TYPE	9:1	9:7	6	gchar *
TYPE_NAME	9:1	9:1	7	gchar
LEAF_NODE	9:1	9:1	8	gchar
POINTER	9:7	9:7	7	*
LEAF_NODE	9:7	9:7	8	*
NAME	9:8	9:8	6	a1
LEAF_NODE	9:8	9:8	7	a1
LEAF_NODE	9:10	9:10	5	,
INIT_DECL_LIST	9:1	9:1	5	gchar * convnode ; convnode = NULL , gchar * convpasswd ; convpasswd = NULL , gchar * ha1 , gchar * ha2 , gchar * kd , gchar * x , gchar * z
VAR_DECL	9:1	9:13	6	gchar * convnode ; convnode = NULL
TYPE	9:1	9:12	7	gchar *
TYPE_NAME	9:1	9:1	8	gchar
LEAF_NODE	9:1	9:1	9	gchar
POINTER	9:12	9:12	8	*
LEAF_NODE	9:12	9:12	9	*
NAME	9:13	9:13	7	convnode
LEAF_NODE	9:13	9:13	8	convnode
LEAF_NODE	0:0	0:0	7	;
INIT	9:13	9:13	7	convnode = NULL
ASSIGN	9:13	9:22	8	convnode = NULL
LVAL	9:13	9:13	9	convnode
NAME	9:13	9:13	10	convnode
LEAF_NODE	9:13	9:13	11	convnode
ASSIGN_OP	9:21	9:21	9	=
LEAF_NODE	9:21	9:21	10	=
RVAL	9:22	9:22	9	NULL
FIELD	9:22	9:22	10	NULL
LEAF_NODE	9:22	9:22	11	NULL
LEAF_NODE	9:26	9:26	6	,
INIT_DECL_LIST	9:1	9:1	6	gchar * convpasswd ; convpasswd = NULL , gchar * ha1 , gchar * ha2 , gchar * kd , gchar * x , gchar * z
VAR_DECL	9:1	9:29	7	gchar * convpasswd ; convpasswd = NULL
TYPE	9:1	9:28	8	gchar *
TYPE_NAME	9:1	9:1	9	gchar
LEAF_NODE	9:1	9:1	10	gchar
POINTER	9:28	9:28	9	*
LEAF_NODE	9:28	9:28	10	*
NAME	9:29	9:29	8	convpasswd
LEAF_NODE	9:29	9:29	9	convpasswd
LEAF_NODE	0:0	0:0	8	;
INIT	9:29	9:29	8	convpasswd = NULL
ASSIGN	9:29	9:42	9	convpasswd = NULL
LVAL	9:29	9:29	10	convpasswd
NAME	9:29	9:29	11	convpasswd
LEAF_NODE	9:29	9:29	12	convpasswd
ASSIGN_OP	9:40	9:40	10	=
LEAF_NODE	9:40	9:40	11	=
RVAL	9:42	9:42	10	NULL
FIELD	9:42	9:42	11	NULL
LEAF_NODE	9:42	9:42	12	NULL
LEAF_NODE	9:46	9:46	7	,
INIT_DECL_LIST	9:1	9:1	7	gchar * ha1 , gchar * ha2 , gchar * kd , gchar * x , gchar * z
VAR_DECL	9:1	9:49	8	gchar * ha1
TYPE	9:1	9:48	9	gchar *
TYPE_NAME	9:1	9:1	10	gchar
LEAF_NODE	9:1	9:1	11	gchar
POINTER	9:48	9:48	10	*
LEAF_NODE	9:48	9:48	11	*
NAME	9:49	9:49	9	ha1
LEAF_NODE	9:49	9:49	10	ha1
LEAF_NODE	9:52	9:52	8	,
INIT_DECL_LIST	9:1	9:1	8	gchar * ha2 , gchar * kd , gchar * x , gchar * z
VAR_DECL	9:1	9:55	9	gchar * ha2
TYPE	9:1	9:54	10	gchar *
TYPE_NAME	9:1	9:1	11	gchar
LEAF_NODE	9:1	9:1	12	gchar
POINTER	9:54	9:54	11	*
LEAF_NODE	9:54	9:54	12	*
NAME	9:55	9:55	10	ha2
LEAF_NODE	9:55	9:55	11	ha2
LEAF_NODE	9:58	9:58	9	,
INIT_DECL_LIST	9:1	9:1	9	gchar * kd , gchar * x , gchar * z
VAR_DECL	9:1	9:61	10	gchar * kd
TYPE	9:1	9:60	11	gchar *
TYPE_NAME	9:1	9:1	12	gchar
LEAF_NODE	9:1	9:1	13	gchar
POINTER	9:60	9:60	12	*
LEAF_NODE	9:60	9:60	13	*
NAME	9:61	9:61	11	kd
LEAF_NODE	9:61	9:61	12	kd
LEAF_NODE	9:63	9:63	10	,
INIT_DECL_LIST	9:1	9:1	10	gchar * x , gchar * z
VAR_DECL	9:1	9:66	11	gchar * x
TYPE	9:1	9:65	12	gchar *
TYPE_NAME	9:1	9:1	13	gchar
LEAF_NODE	9:1	9:1	14	gchar
POINTER	9:65	9:65	13	*
LEAF_NODE	9:65	9:65	14	*
NAME	9:66	9:66	12	x
LEAF_NODE	9:66	9:66	13	x
LEAF_NODE	9:67	9:67	11	,
VAR_DECL	9:1	9:70	11	gchar * z
TYPE	9:1	9:69	12	gchar *
TYPE_NAME	9:1	9:1	13	gchar
LEAF_NODE	9:1	9:1	14	gchar
POINTER	9:69	9:69	13	*
LEAF_NODE	9:69	9:69	14	*
NAME	9:70	9:70	12	z
LEAF_NODE	9:70	9:70	13	z
LEAF_NODE	9:71	9:71	4	;
SELECTION	10:1	11:33	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:3	10:3	4	(
CONDITION	10:4	10:4	4	( convnode = g_convert ( jid -> node , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL ) ) == NULL
EXPR	10:4	11:27	5	( convnode = g_convert ( jid -> node , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL ) ) == NULL
LEAF_NODE	10:4	10:4	6	(
ASSIGN	10:5	10:16	6	convnode = g_convert ( jid -> node , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL )
LVAL	10:5	10:5	7	convnode
FIELD	10:5	10:5	8	convnode
LEAF_NODE	10:5	10:5	9	convnode
ASSIGN_OP	10:14	10:14	7	=
LEAF_NODE	10:14	10:14	8	=
RVAL	10:16	10:16	7	g_convert ( jid -> node , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL )
FUNCTION_CALL	10:16	11:21	8	g_convert ( jid -> node , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL )
CALLEE	10:16	10:16	9	g_convert
LEAF_NODE	10:16	10:16	10	g_convert
LEAF_NODE	10:25	10:25	9	(
ARGUMENT	10:26	10:26	9	jid -> node
FIELD	10:26	10:31	10	jid -> node
LEAF_NODE	10:26	10:26	11	jid
LEAF_NODE	10:29	10:29	11	->
LEAF_NODE	10:31	10:31	11	node
LEAF_NODE	10:35	10:35	9	,
ARGUMENT	10:37	10:37	9	- 1
UNARY_EXPR	10:37	10:38	10	- 1
UNARY_OPERATOR	10:37	10:37	11	-
LEAF_NODE	10:37	10:37	12	-
FIELD	10:38	10:38	11	1
LEAF_NODE	10:38	10:38	12	1
LEAF_NODE	10:39	10:39	9	,
ARGUMENT	10:41	10:41	9	"iso-8859-1"
FIELD	10:41	10:41	10	"iso-8859-1"
LEAF_NODE	10:41	10:41	11	"iso-8859-1"
LEAF_NODE	10:53	10:53	9	,
ARGUMENT	10:55	10:55	9	"utf-8"
FIELD	10:55	10:55	10	"utf-8"
LEAF_NODE	10:55	10:55	11	"utf-8"
LEAF_NODE	10:62	10:62	9	,
ARGUMENT	11:5	11:5	9	NULL
FIELD	11:5	11:5	10	NULL
LEAF_NODE	11:5	11:5	11	NULL
LEAF_NODE	11:9	11:9	9	,
ARGUMENT	11:11	11:11	9	NULL
FIELD	11:11	11:11	10	NULL
LEAF_NODE	11:11	11:11	11	NULL
LEAF_NODE	11:15	11:15	9	,
ARGUMENT	11:17	11:17	9	NULL
FIELD	11:17	11:17	10	NULL
LEAF_NODE	11:17	11:17	11	NULL
LEAF_NODE	11:21	11:21	9	)
LEAF_NODE	11:22	11:22	6	)
EQ_OPERATOR	11:24	11:24	6	==
LEAF_NODE	11:24	11:24	7	==
FIELD	11:27	11:27	6	NULL
LEAF_NODE	11:27	11:27	7	NULL
LEAF_NODE	11:31	11:31	4	)
STATEMENTS	11:33	13:1	4	
LEAF_NODE	11:33	11:33	5	{
STATEMENTS	12:2	12:2	5	
EXPR_STATEMENT	12:2	12:32	6	convnode = g_strdup ( jid -> node ) ;
EXPR	12:2	12:2	7	convnode = g_strdup ( jid -> node )
ASSIGN	12:2	12:13	8	convnode = g_strdup ( jid -> node )
LVAL	12:2	12:2	9	convnode
FIELD	12:2	12:2	10	convnode
LEAF_NODE	12:2	12:2	11	convnode
ASSIGN_OP	12:11	12:11	9	=
LEAF_NODE	12:11	12:11	10	=
RVAL	12:13	12:13	9	g_strdup ( jid -> node )
FUNCTION_CALL	12:13	12:31	10	g_strdup ( jid -> node )
CALLEE	12:13	12:13	11	g_strdup
LEAF_NODE	12:13	12:13	12	g_strdup
LEAF_NODE	12:21	12:21	11	(
ARGUMENT	12:22	12:22	11	jid -> node
FIELD	12:22	12:27	12	jid -> node
LEAF_NODE	12:22	12:22	13	jid
LEAF_NODE	12:25	12:25	13	->
LEAF_NODE	12:27	12:27	13	node
LEAF_NODE	12:31	12:31	11	)
LEAF_NODE	12:32	12:32	7	;
LEAF_NODE	13:1	13:1	5	}
SELECTION	14:1	15:44	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:3	14:3	4	(
CONDITION	14:4	14:4	4	passwd && ( ( convpasswd = g_convert ( passwd , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL ) ) == NULL )
EXPR	14:4	14:4	5	passwd && ( ( convpasswd = g_convert ( passwd , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL ) ) == NULL )
AND	14:4	14:14	6	passwd && ( ( convpasswd = g_convert ( passwd , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL ) ) == NULL )
EXPR	14:4	14:4	7	passwd
FIELD	14:4	14:4	8	passwd
LEAF_NODE	14:4	14:4	9	passwd
LEAF_NODE	14:11	14:11	7	&&
EXPR	14:14	15:41	7	( ( convpasswd = g_convert ( passwd , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL ) ) == NULL )
LEAF_NODE	14:14	14:14	8	(
LEAF_NODE	14:15	14:15	8	(
ASSIGN	14:16	14:29	8	convpasswd = g_convert ( passwd , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL )
LVAL	14:16	14:16	9	convpasswd
FIELD	14:16	14:16	10	convpasswd
LEAF_NODE	14:16	14:16	11	convpasswd
ASSIGN_OP	14:27	14:27	9	=
LEAF_NODE	14:27	14:27	10	=
RVAL	14:29	14:29	9	g_convert ( passwd , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL )
FUNCTION_CALL	14:29	15:31	10	g_convert ( passwd , - 1 , "iso-8859-1" , "utf-8" , NULL , NULL , NULL )
CALLEE	14:29	14:29	11	g_convert
LEAF_NODE	14:29	14:29	12	g_convert
LEAF_NODE	14:38	14:38	11	(
ARGUMENT	14:39	14:39	11	passwd
FIELD	14:39	14:39	12	passwd
LEAF_NODE	14:39	14:39	13	passwd
LEAF_NODE	14:45	14:45	11	,
ARGUMENT	14:47	14:47	11	- 1
UNARY_EXPR	14:47	14:48	12	- 1
UNARY_OPERATOR	14:47	14:47	13	-
LEAF_NODE	14:47	14:47	14	-
FIELD	14:48	14:48	13	1
LEAF_NODE	14:48	14:48	14	1
LEAF_NODE	14:49	14:49	11	,
ARGUMENT	14:51	14:51	11	"iso-8859-1"
FIELD	14:51	14:51	12	"iso-8859-1"
LEAF_NODE	14:51	14:51	13	"iso-8859-1"
LEAF_NODE	14:63	14:63	11	,
ARGUMENT	15:6	15:6	11	"utf-8"
FIELD	15:6	15:6	12	"utf-8"
LEAF_NODE	15:6	15:6	13	"utf-8"
LEAF_NODE	15:13	15:13	11	,
ARGUMENT	15:15	15:15	11	NULL
FIELD	15:15	15:15	12	NULL
LEAF_NODE	15:15	15:15	13	NULL
LEAF_NODE	15:19	15:19	11	,
ARGUMENT	15:21	15:21	11	NULL
FIELD	15:21	15:21	12	NULL
LEAF_NODE	15:21	15:21	13	NULL
LEAF_NODE	15:25	15:25	11	,
ARGUMENT	15:27	15:27	11	NULL
FIELD	15:27	15:27	12	NULL
LEAF_NODE	15:27	15:27	13	NULL
LEAF_NODE	15:31	15:31	11	)
LEAF_NODE	15:32	15:32	8	)
EQ_OPERATOR	15:34	15:34	8	==
LEAF_NODE	15:34	15:34	9	==
FIELD	15:37	15:37	8	NULL
LEAF_NODE	15:37	15:37	9	NULL
LEAF_NODE	15:41	15:41	8	)
LEAF_NODE	15:42	15:42	4	)
STATEMENTS	15:44	17:1	4	
LEAF_NODE	15:44	15:44	5	{
STATEMENTS	16:2	16:2	5	
EXPR_STATEMENT	16:2	16:31	6	convpasswd = g_strdup ( passwd ) ;
EXPR	16:2	16:2	7	convpasswd = g_strdup ( passwd )
ASSIGN	16:2	16:15	8	convpasswd = g_strdup ( passwd )
LVAL	16:2	16:2	9	convpasswd
FIELD	16:2	16:2	10	convpasswd
LEAF_NODE	16:2	16:2	11	convpasswd
ASSIGN_OP	16:13	16:13	9	=
LEAF_NODE	16:13	16:13	10	=
RVAL	16:15	16:15	9	g_strdup ( passwd )
FUNCTION_CALL	16:15	16:30	10	g_strdup ( passwd )
CALLEE	16:15	16:15	11	g_strdup
LEAF_NODE	16:15	16:15	12	g_strdup
LEAF_NODE	16:23	16:23	11	(
ARGUMENT	16:24	16:24	11	passwd
FIELD	16:24	16:24	12	passwd
LEAF_NODE	16:24	16:24	13	passwd
LEAF_NODE	16:30	16:30	11	)
LEAF_NODE	16:31	16:31	7	;
LEAF_NODE	17:1	17:1	5	}
EXPR_STATEMENT	18:1	18:43	3	cipher = purple_ciphers_find_cipher ( "md5" ) ;
EXPR	18:1	18:1	4	cipher = purple_ciphers_find_cipher ( "md5" )
ASSIGN	18:1	18:10	5	cipher = purple_ciphers_find_cipher ( "md5" )
LVAL	18:1	18:1	6	cipher
FIELD	18:1	18:1	7	cipher
LEAF_NODE	18:1	18:1	8	cipher
ASSIGN_OP	18:8	18:8	6	=
LEAF_NODE	18:8	18:8	7	=
RVAL	18:10	18:10	6	purple_ciphers_find_cipher ( "md5" )
FUNCTION_CALL	18:10	18:42	7	purple_ciphers_find_cipher ( "md5" )
CALLEE	18:10	18:10	8	purple_ciphers_find_cipher
LEAF_NODE	18:10	18:10	9	purple_ciphers_find_cipher
LEAF_NODE	18:36	18:36	8	(
ARGUMENT	18:37	18:37	8	"md5"
FIELD	18:37	18:37	9	"md5"
LEAF_NODE	18:37	18:37	10	"md5"
LEAF_NODE	18:42	18:42	8	)
LEAF_NODE	18:43	18:43	4	;
EXPR_STATEMENT	19:1	19:50	3	context = purple_cipher_context_new ( cipher , NULL ) ;
EXPR	19:1	19:1	4	context = purple_cipher_context_new ( cipher , NULL )
ASSIGN	19:1	19:11	5	context = purple_cipher_context_new ( cipher , NULL )
LVAL	19:1	19:1	6	context
FIELD	19:1	19:1	7	context
LEAF_NODE	19:1	19:1	8	context
ASSIGN_OP	19:9	19:9	6	=
LEAF_NODE	19:9	19:9	7	=
RVAL	19:11	19:11	6	purple_cipher_context_new ( cipher , NULL )
FUNCTION_CALL	19:11	19:49	7	purple_cipher_context_new ( cipher , NULL )
CALLEE	19:11	19:11	8	purple_cipher_context_new
LEAF_NODE	19:11	19:11	9	purple_cipher_context_new
LEAF_NODE	19:36	19:36	8	(
ARGUMENT	19:37	19:37	8	cipher
FIELD	19:37	19:37	9	cipher
LEAF_NODE	19:37	19:37	10	cipher
LEAF_NODE	19:43	19:43	8	,
ARGUMENT	19:45	19:45	8	NULL
FIELD	19:45	19:45	9	NULL
LEAF_NODE	19:45	19:45	10	NULL
LEAF_NODE	19:49	19:49	8	)
LEAF_NODE	19:50	19:50	4	;
EXPR_STATEMENT	20:1	20:79	3	x = g_strdup_printf ( "%s:%s:%s" , convnode , realm , convpasswd ? convpasswd : "" ) ;
EXPR	20:1	20:1	4	x = g_strdup_printf ( "%s:%s:%s" , convnode , realm , convpasswd ? convpasswd : "" )
ASSIGN	20:1	20:5	5	x = g_strdup_printf ( "%s:%s:%s" , convnode , realm , convpasswd ? convpasswd : "" )
LVAL	20:1	20:1	6	x
FIELD	20:1	20:1	7	x
LEAF_NODE	20:1	20:1	8	x
ASSIGN_OP	20:3	20:3	6	=
LEAF_NODE	20:3	20:3	7	=
RVAL	20:5	20:5	6	g_strdup_printf ( "%s:%s:%s" , convnode , realm , convpasswd ? convpasswd : "" )
FUNCTION_CALL	20:5	20:78	7	g_strdup_printf ( "%s:%s:%s" , convnode , realm , convpasswd ? convpasswd : "" )
CALLEE	20:5	20:5	8	g_strdup_printf
LEAF_NODE	20:5	20:5	9	g_strdup_printf
LEAF_NODE	20:20	20:20	8	(
ARGUMENT	20:21	20:21	8	"%s:%s:%s"
FIELD	20:21	20:21	9	"%s:%s:%s"
LEAF_NODE	20:21	20:21	10	"%s:%s:%s"
LEAF_NODE	20:31	20:31	8	,
ARGUMENT	20:33	20:33	8	convnode
FIELD	20:33	20:33	9	convnode
LEAF_NODE	20:33	20:33	10	convnode
LEAF_NODE	20:41	20:41	8	,
ARGUMENT	20:43	20:43	8	realm
FIELD	20:43	20:43	9	realm
LEAF_NODE	20:43	20:43	10	realm
LEAF_NODE	20:48	20:48	8	,
ARGUMENT	20:50	20:50	8	convpasswd ? convpasswd : ""
COND_EXPR	20:50	20:76	9	convpasswd ? convpasswd : ""
CONDITION	20:50	20:50	10	convpasswd
FIELD	20:50	20:50	11	convpasswd
LEAF_NODE	20:50	20:50	12	convpasswd
LEAF_NODE	20:61	20:61	10	?
EXPR	20:63	20:63	10	convpasswd
FIELD	20:63	20:63	11	convpasswd
LEAF_NODE	20:63	20:63	12	convpasswd
LEAF_NODE	20:74	20:74	10	:
FIELD	20:76	20:76	10	""
LEAF_NODE	20:76	20:76	11	""
LEAF_NODE	20:78	20:78	8	)
LEAF_NODE	20:79	20:79	4	;
EXPR_STATEMENT	21:1	21:68	3	purple_cipher_context_append ( context , ( const guchar * ) x , strlen ( x ) ) ;
EXPR	21:1	21:1	4	purple_cipher_context_append ( context , ( const guchar * ) x , strlen ( x ) )
FUNCTION_CALL	21:1	21:67	5	purple_cipher_context_append ( context , ( const guchar * ) x , strlen ( x ) )
CALLEE	21:1	21:1	6	purple_cipher_context_append
LEAF_NODE	21:1	21:1	7	purple_cipher_context_append
LEAF_NODE	21:29	21:29	6	(
ARGUMENT	21:30	21:30	6	context
FIELD	21:30	21:30	7	context
LEAF_NODE	21:30	21:30	8	context
LEAF_NODE	21:37	21:37	6	,
ARGUMENT	21:39	21:55	6	( const guchar * ) x
LEAF_NODE	21:39	21:39	7	(
TYPE_NAME	21:40	21:46	7	const guchar
LEAF_NODE	21:40	21:40	8	const
LEAF_NODE	21:46	21:46	8	guchar
LEAF_NODE	21:53	21:53	7	*
LEAF_NODE	21:54	21:54	7	)
FIELD	21:55	21:55	7	x
LEAF_NODE	21:55	21:55	8	x
LEAF_NODE	21:56	21:56	6	,
ARGUMENT	21:58	21:58	6	strlen ( x )
FUNCTION_CALL	21:58	21:66	7	strlen ( x )
CALLEE	21:58	21:58	8	strlen
LEAF_NODE	21:58	21:58	9	strlen
LEAF_NODE	21:64	21:64	8	(
ARGUMENT	21:65	21:65	8	x
FIELD	21:65	21:65	9	x
LEAF_NODE	21:65	21:65	10	x
LEAF_NODE	21:66	21:66	8	)
LEAF_NODE	21:67	21:67	6	)
LEAF_NODE	21:68	21:68	4	;
EXPR_STATEMENT	22:1	22:68	3	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL ) ;
EXPR	22:1	22:1	4	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL )
FUNCTION_CALL	22:1	22:67	5	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL )
CALLEE	22:1	22:1	6	purple_cipher_context_digest
LEAF_NODE	22:1	22:1	7	purple_cipher_context_digest
LEAF_NODE	22:29	22:29	6	(
ARGUMENT	22:30	22:30	6	context
FIELD	22:30	22:30	7	context
LEAF_NODE	22:30	22:30	8	context
LEAF_NODE	22:37	22:37	6	,
ARGUMENT	22:39	22:39	6	sizeof ( result )
FUNCTION_CALL	22:39	22:52	7	sizeof ( result )
CALLEE	22:39	22:39	8	sizeof
LEAF_NODE	22:39	22:39	9	sizeof
LEAF_NODE	22:45	22:45	8	(
ARGUMENT	22:46	22:46	8	result
FIELD	22:46	22:46	9	result
LEAF_NODE	22:46	22:46	10	result
LEAF_NODE	22:52	22:52	8	)
LEAF_NODE	22:53	22:53	6	,
ARGUMENT	22:55	22:55	6	result
FIELD	22:55	22:55	7	result
LEAF_NODE	22:55	22:55	8	result
LEAF_NODE	22:61	22:61	6	,
ARGUMENT	22:63	22:63	6	NULL
FIELD	22:63	22:63	7	NULL
LEAF_NODE	22:63	22:63	8	NULL
LEAF_NODE	22:67	22:67	6	)
LEAF_NODE	22:68	22:68	4	;
EXPR_STATEMENT	23:1	23:62	3	a1 = g_strdup_printf ( "xxxxxxxxxxxxxxxx:%s:%s" , nonce , cnonce ) ;
EXPR	23:1	23:1	4	a1 = g_strdup_printf ( "xxxxxxxxxxxxxxxx:%s:%s" , nonce , cnonce )
ASSIGN	23:1	23:6	5	a1 = g_strdup_printf ( "xxxxxxxxxxxxxxxx:%s:%s" , nonce , cnonce )
LVAL	23:1	23:1	6	a1
FIELD	23:1	23:1	7	a1
LEAF_NODE	23:1	23:1	8	a1
ASSIGN_OP	23:4	23:4	6	=
LEAF_NODE	23:4	23:4	7	=
RVAL	23:6	23:6	6	g_strdup_printf ( "xxxxxxxxxxxxxxxx:%s:%s" , nonce , cnonce )
FUNCTION_CALL	23:6	23:61	7	g_strdup_printf ( "xxxxxxxxxxxxxxxx:%s:%s" , nonce , cnonce )
CALLEE	23:6	23:6	8	g_strdup_printf
LEAF_NODE	23:6	23:6	9	g_strdup_printf
LEAF_NODE	23:21	23:21	8	(
ARGUMENT	23:22	23:22	8	"xxxxxxxxxxxxxxxx:%s:%s"
FIELD	23:22	23:22	9	"xxxxxxxxxxxxxxxx:%s:%s"
LEAF_NODE	23:22	23:22	10	"xxxxxxxxxxxxxxxx:%s:%s"
LEAF_NODE	23:46	23:46	8	,
ARGUMENT	23:48	23:48	8	nonce
FIELD	23:48	23:48	9	nonce
LEAF_NODE	23:48	23:48	10	nonce
LEAF_NODE	23:53	23:53	8	,
ARGUMENT	23:55	23:55	8	cnonce
FIELD	23:55	23:55	9	cnonce
LEAF_NODE	23:55	23:55	10	cnonce
LEAF_NODE	23:61	23:61	8	)
LEAF_NODE	23:62	23:62	4	;
EXPR_STATEMENT	24:1	24:19	3	a1len = strlen ( a1 ) ;
EXPR	24:1	24:1	4	a1len = strlen ( a1 )
ASSIGN	24:1	24:9	5	a1len = strlen ( a1 )
LVAL	24:1	24:1	6	a1len
FIELD	24:1	24:1	7	a1len
LEAF_NODE	24:1	24:1	8	a1len
ASSIGN_OP	24:7	24:7	6	=
LEAF_NODE	24:7	24:7	7	=
RVAL	24:9	24:9	6	strlen ( a1 )
FUNCTION_CALL	24:9	24:18	7	strlen ( a1 )
CALLEE	24:9	24:9	8	strlen
LEAF_NODE	24:9	24:9	9	strlen
LEAF_NODE	24:15	24:15	8	(
ARGUMENT	24:16	24:16	8	a1
FIELD	24:16	24:16	9	a1
LEAF_NODE	24:16	24:16	10	a1
LEAF_NODE	24:18	24:18	8	)
LEAF_NODE	24:19	24:19	4	;
EXPR_STATEMENT	25:1	25:26	3	g_memmove ( a1 , result , 16 ) ;
EXPR	25:1	25:1	4	g_memmove ( a1 , result , 16 )
FUNCTION_CALL	25:1	25:25	5	g_memmove ( a1 , result , 16 )
CALLEE	25:1	25:1	6	g_memmove
LEAF_NODE	25:1	25:1	7	g_memmove
LEAF_NODE	25:10	25:10	6	(
ARGUMENT	25:11	25:11	6	a1
FIELD	25:11	25:11	7	a1
LEAF_NODE	25:11	25:11	8	a1
LEAF_NODE	25:13	25:13	6	,
ARGUMENT	25:15	25:15	6	result
FIELD	25:15	25:15	7	result
LEAF_NODE	25:15	25:15	8	result
LEAF_NODE	25:21	25:21	6	,
ARGUMENT	25:23	25:23	6	16
FIELD	25:23	25:23	7	16
LEAF_NODE	25:23	25:23	8	16
LEAF_NODE	25:25	25:25	6	)
LEAF_NODE	25:26	25:26	4	;
EXPR_STATEMENT	26:1	26:43	3	purple_cipher_context_reset ( context , NULL ) ;
EXPR	26:1	26:1	4	purple_cipher_context_reset ( context , NULL )
FUNCTION_CALL	26:1	26:42	5	purple_cipher_context_reset ( context , NULL )
CALLEE	26:1	26:1	6	purple_cipher_context_reset
LEAF_NODE	26:1	26:1	7	purple_cipher_context_reset
LEAF_NODE	26:28	26:28	6	(
ARGUMENT	26:29	26:29	6	context
FIELD	26:29	26:29	7	context
LEAF_NODE	26:29	26:29	8	context
LEAF_NODE	26:36	26:36	6	,
ARGUMENT	26:38	26:38	6	NULL
FIELD	26:38	26:38	7	NULL
LEAF_NODE	26:38	26:38	8	NULL
LEAF_NODE	26:42	26:42	6	)
LEAF_NODE	26:43	26:43	4	;
EXPR_STATEMENT	27:1	27:65	3	purple_cipher_context_append ( context , ( const guchar * ) a1 , a1len ) ;
EXPR	27:1	27:1	4	purple_cipher_context_append ( context , ( const guchar * ) a1 , a1len )
FUNCTION_CALL	27:1	27:64	5	purple_cipher_context_append ( context , ( const guchar * ) a1 , a1len )
CALLEE	27:1	27:1	6	purple_cipher_context_append
LEAF_NODE	27:1	27:1	7	purple_cipher_context_append
LEAF_NODE	27:29	27:29	6	(
ARGUMENT	27:30	27:30	6	context
FIELD	27:30	27:30	7	context
LEAF_NODE	27:30	27:30	8	context
LEAF_NODE	27:37	27:37	6	,
ARGUMENT	27:39	27:55	6	( const guchar * ) a1
LEAF_NODE	27:39	27:39	7	(
TYPE_NAME	27:40	27:46	7	const guchar
LEAF_NODE	27:40	27:40	8	const
LEAF_NODE	27:46	27:46	8	guchar
LEAF_NODE	27:53	27:53	7	*
LEAF_NODE	27:54	27:54	7	)
FIELD	27:55	27:55	7	a1
LEAF_NODE	27:55	27:55	8	a1
LEAF_NODE	27:57	27:57	6	,
ARGUMENT	27:59	27:59	6	a1len
FIELD	27:59	27:59	7	a1len
LEAF_NODE	27:59	27:59	8	a1len
LEAF_NODE	27:64	27:64	6	)
LEAF_NODE	27:65	27:65	4	;
EXPR_STATEMENT	28:1	28:68	3	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL ) ;
EXPR	28:1	28:1	4	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL )
FUNCTION_CALL	28:1	28:67	5	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL )
CALLEE	28:1	28:1	6	purple_cipher_context_digest
LEAF_NODE	28:1	28:1	7	purple_cipher_context_digest
LEAF_NODE	28:29	28:29	6	(
ARGUMENT	28:30	28:30	6	context
FIELD	28:30	28:30	7	context
LEAF_NODE	28:30	28:30	8	context
LEAF_NODE	28:37	28:37	6	,
ARGUMENT	28:39	28:39	6	sizeof ( result )
FUNCTION_CALL	28:39	28:52	7	sizeof ( result )
CALLEE	28:39	28:39	8	sizeof
LEAF_NODE	28:39	28:39	9	sizeof
LEAF_NODE	28:45	28:45	8	(
ARGUMENT	28:46	28:46	8	result
FIELD	28:46	28:46	9	result
LEAF_NODE	28:46	28:46	10	result
LEAF_NODE	28:52	28:52	8	)
LEAF_NODE	28:53	28:53	6	,
ARGUMENT	28:55	28:55	6	result
FIELD	28:55	28:55	7	result
LEAF_NODE	28:55	28:55	8	result
LEAF_NODE	28:61	28:61	6	,
ARGUMENT	28:63	28:63	6	NULL
FIELD	28:63	28:63	7	NULL
LEAF_NODE	28:63	28:63	8	NULL
LEAF_NODE	28:67	28:67	6	)
LEAF_NODE	28:68	28:68	4	;
EXPR_STATEMENT	29:1	29:39	3	ha1 = purple_base16_encode ( result , 16 ) ;
EXPR	29:1	29:1	4	ha1 = purple_base16_encode ( result , 16 )
ASSIGN	29:1	29:7	5	ha1 = purple_base16_encode ( result , 16 )
LVAL	29:1	29:1	6	ha1
FIELD	29:1	29:1	7	ha1
LEAF_NODE	29:1	29:1	8	ha1
ASSIGN_OP	29:5	29:5	6	=
LEAF_NODE	29:5	29:5	7	=
RVAL	29:7	29:7	6	purple_base16_encode ( result , 16 )
FUNCTION_CALL	29:7	29:38	7	purple_base16_encode ( result , 16 )
CALLEE	29:7	29:7	8	purple_base16_encode
LEAF_NODE	29:7	29:7	9	purple_base16_encode
LEAF_NODE	29:27	29:27	8	(
ARGUMENT	29:28	29:28	8	result
FIELD	29:28	29:28	9	result
LEAF_NODE	29:28	29:28	10	result
LEAF_NODE	29:34	29:34	8	,
ARGUMENT	29:36	29:36	8	16
FIELD	29:36	29:36	9	16
LEAF_NODE	29:36	29:36	10	16
LEAF_NODE	29:38	29:38	8	)
LEAF_NODE	29:39	29:39	4	;
EXPR_STATEMENT	30:1	30:43	3	purple_cipher_context_reset ( context , NULL ) ;
EXPR	30:1	30:1	4	purple_cipher_context_reset ( context , NULL )
FUNCTION_CALL	30:1	30:42	5	purple_cipher_context_reset ( context , NULL )
CALLEE	30:1	30:1	6	purple_cipher_context_reset
LEAF_NODE	30:1	30:1	7	purple_cipher_context_reset
LEAF_NODE	30:28	30:28	6	(
ARGUMENT	30:29	30:29	6	context
FIELD	30:29	30:29	7	context
LEAF_NODE	30:29	30:29	8	context
LEAF_NODE	30:36	30:36	6	,
ARGUMENT	30:38	30:38	6	NULL
FIELD	30:38	30:38	7	NULL
LEAF_NODE	30:38	30:38	8	NULL
LEAF_NODE	30:42	30:42	6	)
LEAF_NODE	30:43	30:43	4	;
EXPR_STATEMENT	31:1	31:70	3	purple_cipher_context_append ( context , ( const guchar * ) a2 , strlen ( a2 ) ) ;
EXPR	31:1	31:1	4	purple_cipher_context_append ( context , ( const guchar * ) a2 , strlen ( a2 ) )
FUNCTION_CALL	31:1	31:69	5	purple_cipher_context_append ( context , ( const guchar * ) a2 , strlen ( a2 ) )
CALLEE	31:1	31:1	6	purple_cipher_context_append
LEAF_NODE	31:1	31:1	7	purple_cipher_context_append
LEAF_NODE	31:29	31:29	6	(
ARGUMENT	31:30	31:30	6	context
FIELD	31:30	31:30	7	context
LEAF_NODE	31:30	31:30	8	context
LEAF_NODE	31:37	31:37	6	,
ARGUMENT	31:39	31:55	6	( const guchar * ) a2
LEAF_NODE	31:39	31:39	7	(
TYPE_NAME	31:40	31:46	7	const guchar
LEAF_NODE	31:40	31:40	8	const
LEAF_NODE	31:46	31:46	8	guchar
LEAF_NODE	31:53	31:53	7	*
LEAF_NODE	31:54	31:54	7	)
FIELD	31:55	31:55	7	a2
LEAF_NODE	31:55	31:55	8	a2
LEAF_NODE	31:57	31:57	6	,
ARGUMENT	31:59	31:59	6	strlen ( a2 )
FUNCTION_CALL	31:59	31:68	7	strlen ( a2 )
CALLEE	31:59	31:59	8	strlen
LEAF_NODE	31:59	31:59	9	strlen
LEAF_NODE	31:65	31:65	8	(
ARGUMENT	31:66	31:66	8	a2
FIELD	31:66	31:66	9	a2
LEAF_NODE	31:66	31:66	10	a2
LEAF_NODE	31:68	31:68	8	)
LEAF_NODE	31:69	31:69	6	)
LEAF_NODE	31:70	31:70	4	;
EXPR_STATEMENT	32:1	32:68	3	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL ) ;
EXPR	32:1	32:1	4	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL )
FUNCTION_CALL	32:1	32:67	5	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL )
CALLEE	32:1	32:1	6	purple_cipher_context_digest
LEAF_NODE	32:1	32:1	7	purple_cipher_context_digest
LEAF_NODE	32:29	32:29	6	(
ARGUMENT	32:30	32:30	6	context
FIELD	32:30	32:30	7	context
LEAF_NODE	32:30	32:30	8	context
LEAF_NODE	32:37	32:37	6	,
ARGUMENT	32:39	32:39	6	sizeof ( result )
FUNCTION_CALL	32:39	32:52	7	sizeof ( result )
CALLEE	32:39	32:39	8	sizeof
LEAF_NODE	32:39	32:39	9	sizeof
LEAF_NODE	32:45	32:45	8	(
ARGUMENT	32:46	32:46	8	result
FIELD	32:46	32:46	9	result
LEAF_NODE	32:46	32:46	10	result
LEAF_NODE	32:52	32:52	8	)
LEAF_NODE	32:53	32:53	6	,
ARGUMENT	32:55	32:55	6	result
FIELD	32:55	32:55	7	result
LEAF_NODE	32:55	32:55	8	result
LEAF_NODE	32:61	32:61	6	,
ARGUMENT	32:63	32:63	6	NULL
FIELD	32:63	32:63	7	NULL
LEAF_NODE	32:63	32:63	8	NULL
LEAF_NODE	32:67	32:67	6	)
LEAF_NODE	32:68	32:68	4	;
EXPR_STATEMENT	33:1	33:39	3	ha2 = purple_base16_encode ( result , 16 ) ;
EXPR	33:1	33:1	4	ha2 = purple_base16_encode ( result , 16 )
ASSIGN	33:1	33:7	5	ha2 = purple_base16_encode ( result , 16 )
LVAL	33:1	33:1	6	ha2
FIELD	33:1	33:1	7	ha2
LEAF_NODE	33:1	33:1	8	ha2
ASSIGN_OP	33:5	33:5	6	=
LEAF_NODE	33:5	33:5	7	=
RVAL	33:7	33:7	6	purple_base16_encode ( result , 16 )
FUNCTION_CALL	33:7	33:38	7	purple_base16_encode ( result , 16 )
CALLEE	33:7	33:7	8	purple_base16_encode
LEAF_NODE	33:7	33:7	9	purple_base16_encode
LEAF_NODE	33:27	33:27	8	(
ARGUMENT	33:28	33:28	8	result
FIELD	33:28	33:28	9	result
LEAF_NODE	33:28	33:28	10	result
LEAF_NODE	33:34	33:34	8	,
ARGUMENT	33:36	33:36	8	16
FIELD	33:36	33:36	9	16
LEAF_NODE	33:36	33:36	10	16
LEAF_NODE	33:38	33:38	8	)
LEAF_NODE	33:39	33:39	4	;
EXPR_STATEMENT	34:1	34:75	3	kd = g_strdup_printf ( "%s:%s:00000001:%s:auth:%s" , ha1 , nonce , cnonce , ha2 ) ;
EXPR	34:1	34:1	4	kd = g_strdup_printf ( "%s:%s:00000001:%s:auth:%s" , ha1 , nonce , cnonce , ha2 )
ASSIGN	34:1	34:6	5	kd = g_strdup_printf ( "%s:%s:00000001:%s:auth:%s" , ha1 , nonce , cnonce , ha2 )
LVAL	34:1	34:1	6	kd
FIELD	34:1	34:1	7	kd
LEAF_NODE	34:1	34:1	8	kd
ASSIGN_OP	34:4	34:4	6	=
LEAF_NODE	34:4	34:4	7	=
RVAL	34:6	34:6	6	g_strdup_printf ( "%s:%s:00000001:%s:auth:%s" , ha1 , nonce , cnonce , ha2 )
FUNCTION_CALL	34:6	34:74	7	g_strdup_printf ( "%s:%s:00000001:%s:auth:%s" , ha1 , nonce , cnonce , ha2 )
CALLEE	34:6	34:6	8	g_strdup_printf
LEAF_NODE	34:6	34:6	9	g_strdup_printf
LEAF_NODE	34:21	34:21	8	(
ARGUMENT	34:22	34:22	8	"%s:%s:00000001:%s:auth:%s"
FIELD	34:22	34:22	9	"%s:%s:00000001:%s:auth:%s"
LEAF_NODE	34:22	34:22	10	"%s:%s:00000001:%s:auth:%s"
LEAF_NODE	34:49	34:49	8	,
ARGUMENT	34:51	34:51	8	ha1
FIELD	34:51	34:51	9	ha1
LEAF_NODE	34:51	34:51	10	ha1
LEAF_NODE	34:54	34:54	8	,
ARGUMENT	34:56	34:56	8	nonce
FIELD	34:56	34:56	9	nonce
LEAF_NODE	34:56	34:56	10	nonce
LEAF_NODE	34:61	34:61	8	,
ARGUMENT	34:63	34:63	8	cnonce
FIELD	34:63	34:63	9	cnonce
LEAF_NODE	34:63	34:63	10	cnonce
LEAF_NODE	34:69	34:69	8	,
ARGUMENT	34:71	34:71	8	ha2
FIELD	34:71	34:71	9	ha2
LEAF_NODE	34:71	34:71	10	ha2
LEAF_NODE	34:74	34:74	8	)
LEAF_NODE	34:75	34:75	4	;
EXPR_STATEMENT	35:1	35:43	3	purple_cipher_context_reset ( context , NULL ) ;
EXPR	35:1	35:1	4	purple_cipher_context_reset ( context , NULL )
FUNCTION_CALL	35:1	35:42	5	purple_cipher_context_reset ( context , NULL )
CALLEE	35:1	35:1	6	purple_cipher_context_reset
LEAF_NODE	35:1	35:1	7	purple_cipher_context_reset
LEAF_NODE	35:28	35:28	6	(
ARGUMENT	35:29	35:29	6	context
FIELD	35:29	35:29	7	context
LEAF_NODE	35:29	35:29	8	context
LEAF_NODE	35:36	35:36	6	,
ARGUMENT	35:38	35:38	6	NULL
FIELD	35:38	35:38	7	NULL
LEAF_NODE	35:38	35:38	8	NULL
LEAF_NODE	35:42	35:42	6	)
LEAF_NODE	35:43	35:43	4	;
EXPR_STATEMENT	36:1	36:70	3	purple_cipher_context_append ( context , ( const guchar * ) kd , strlen ( kd ) ) ;
EXPR	36:1	36:1	4	purple_cipher_context_append ( context , ( const guchar * ) kd , strlen ( kd ) )
FUNCTION_CALL	36:1	36:69	5	purple_cipher_context_append ( context , ( const guchar * ) kd , strlen ( kd ) )
CALLEE	36:1	36:1	6	purple_cipher_context_append
LEAF_NODE	36:1	36:1	7	purple_cipher_context_append
LEAF_NODE	36:29	36:29	6	(
ARGUMENT	36:30	36:30	6	context
FIELD	36:30	36:30	7	context
LEAF_NODE	36:30	36:30	8	context
LEAF_NODE	36:37	36:37	6	,
ARGUMENT	36:39	36:55	6	( const guchar * ) kd
LEAF_NODE	36:39	36:39	7	(
TYPE_NAME	36:40	36:46	7	const guchar
LEAF_NODE	36:40	36:40	8	const
LEAF_NODE	36:46	36:46	8	guchar
LEAF_NODE	36:53	36:53	7	*
LEAF_NODE	36:54	36:54	7	)
FIELD	36:55	36:55	7	kd
LEAF_NODE	36:55	36:55	8	kd
LEAF_NODE	36:57	36:57	6	,
ARGUMENT	36:59	36:59	6	strlen ( kd )
FUNCTION_CALL	36:59	36:68	7	strlen ( kd )
CALLEE	36:59	36:59	8	strlen
LEAF_NODE	36:59	36:59	9	strlen
LEAF_NODE	36:65	36:65	8	(
ARGUMENT	36:66	36:66	8	kd
FIELD	36:66	36:66	9	kd
LEAF_NODE	36:66	36:66	10	kd
LEAF_NODE	36:68	36:68	8	)
LEAF_NODE	36:69	36:69	6	)
LEAF_NODE	36:70	36:70	4	;
EXPR_STATEMENT	37:1	37:68	3	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL ) ;
EXPR	37:1	37:1	4	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL )
FUNCTION_CALL	37:1	37:67	5	purple_cipher_context_digest ( context , sizeof ( result ) , result , NULL )
CALLEE	37:1	37:1	6	purple_cipher_context_digest
LEAF_NODE	37:1	37:1	7	purple_cipher_context_digest
LEAF_NODE	37:29	37:29	6	(
ARGUMENT	37:30	37:30	6	context
FIELD	37:30	37:30	7	context
LEAF_NODE	37:30	37:30	8	context
LEAF_NODE	37:37	37:37	6	,
ARGUMENT	37:39	37:39	6	sizeof ( result )
FUNCTION_CALL	37:39	37:52	7	sizeof ( result )
CALLEE	37:39	37:39	8	sizeof
LEAF_NODE	37:39	37:39	9	sizeof
LEAF_NODE	37:45	37:45	8	(
ARGUMENT	37:46	37:46	8	result
FIELD	37:46	37:46	9	result
LEAF_NODE	37:46	37:46	10	result
LEAF_NODE	37:52	37:52	8	)
LEAF_NODE	37:53	37:53	6	,
ARGUMENT	37:55	37:55	6	result
FIELD	37:55	37:55	7	result
LEAF_NODE	37:55	37:55	8	result
LEAF_NODE	37:61	37:61	6	,
ARGUMENT	37:63	37:63	6	NULL
FIELD	37:63	37:63	7	NULL
LEAF_NODE	37:63	37:63	8	NULL
LEAF_NODE	37:67	37:67	6	)
LEAF_NODE	37:68	37:68	4	;
EXPR_STATEMENT	38:1	38:39	3	purple_cipher_context_destroy ( context ) ;
EXPR	38:1	38:1	4	purple_cipher_context_destroy ( context )
FUNCTION_CALL	38:1	38:38	5	purple_cipher_context_destroy ( context )
CALLEE	38:1	38:1	6	purple_cipher_context_destroy
LEAF_NODE	38:1	38:1	7	purple_cipher_context_destroy
LEAF_NODE	38:30	38:30	6	(
ARGUMENT	38:31	38:31	6	context
FIELD	38:31	38:31	7	context
LEAF_NODE	38:31	38:31	8	context
LEAF_NODE	38:38	38:38	6	)
LEAF_NODE	38:39	38:39	4	;
EXPR_STATEMENT	39:1	39:37	3	z = purple_base16_encode ( result , 16 ) ;
EXPR	39:1	39:1	4	z = purple_base16_encode ( result , 16 )
ASSIGN	39:1	39:5	5	z = purple_base16_encode ( result , 16 )
LVAL	39:1	39:1	6	z
FIELD	39:1	39:1	7	z
LEAF_NODE	39:1	39:1	8	z
ASSIGN_OP	39:3	39:3	6	=
LEAF_NODE	39:3	39:3	7	=
RVAL	39:5	39:5	6	purple_base16_encode ( result , 16 )
FUNCTION_CALL	39:5	39:36	7	purple_base16_encode ( result , 16 )
CALLEE	39:5	39:5	8	purple_base16_encode
LEAF_NODE	39:5	39:5	9	purple_base16_encode
LEAF_NODE	39:25	39:25	8	(
ARGUMENT	39:26	39:26	8	result
FIELD	39:26	39:26	9	result
LEAF_NODE	39:26	39:26	10	result
LEAF_NODE	39:32	39:32	8	,
ARGUMENT	39:34	39:34	8	16
FIELD	39:34	39:34	9	16
LEAF_NODE	39:34	39:34	10	16
LEAF_NODE	39:36	39:36	8	)
LEAF_NODE	39:37	39:37	4	;
EXPR_STATEMENT	40:1	40:17	3	g_free ( convnode ) ;
EXPR	40:1	40:1	4	g_free ( convnode )
FUNCTION_CALL	40:1	40:16	5	g_free ( convnode )
CALLEE	40:1	40:1	6	g_free
LEAF_NODE	40:1	40:1	7	g_free
LEAF_NODE	40:7	40:7	6	(
ARGUMENT	40:8	40:8	6	convnode
FIELD	40:8	40:8	7	convnode
LEAF_NODE	40:8	40:8	8	convnode
LEAF_NODE	40:16	40:16	6	)
LEAF_NODE	40:17	40:17	4	;
EXPR_STATEMENT	41:1	41:19	3	g_free ( convpasswd ) ;
EXPR	41:1	41:1	4	g_free ( convpasswd )
FUNCTION_CALL	41:1	41:18	5	g_free ( convpasswd )
CALLEE	41:1	41:1	6	g_free
LEAF_NODE	41:1	41:1	7	g_free
LEAF_NODE	41:7	41:7	6	(
ARGUMENT	41:8	41:8	6	convpasswd
FIELD	41:8	41:8	7	convpasswd
LEAF_NODE	41:8	41:8	8	convpasswd
LEAF_NODE	41:18	41:18	6	)
LEAF_NODE	41:19	41:19	4	;
EXPR_STATEMENT	42:1	42:10	3	g_free ( x ) ;
EXPR	42:1	42:1	4	g_free ( x )
FUNCTION_CALL	42:1	42:9	5	g_free ( x )
CALLEE	42:1	42:1	6	g_free
LEAF_NODE	42:1	42:1	7	g_free
LEAF_NODE	42:7	42:7	6	(
ARGUMENT	42:8	42:8	6	x
FIELD	42:8	42:8	7	x
LEAF_NODE	42:8	42:8	8	x
LEAF_NODE	42:9	42:9	6	)
LEAF_NODE	42:10	42:10	4	;
EXPR_STATEMENT	43:1	43:11	3	g_free ( a1 ) ;
EXPR	43:1	43:1	4	g_free ( a1 )
FUNCTION_CALL	43:1	43:10	5	g_free ( a1 )
CALLEE	43:1	43:1	6	g_free
LEAF_NODE	43:1	43:1	7	g_free
LEAF_NODE	43:7	43:7	6	(
ARGUMENT	43:8	43:8	6	a1
FIELD	43:8	43:8	7	a1
LEAF_NODE	43:8	43:8	8	a1
LEAF_NODE	43:10	43:10	6	)
LEAF_NODE	43:11	43:11	4	;
EXPR_STATEMENT	44:1	44:12	3	g_free ( ha1 ) ;
EXPR	44:1	44:1	4	g_free ( ha1 )
FUNCTION_CALL	44:1	44:11	5	g_free ( ha1 )
CALLEE	44:1	44:1	6	g_free
LEAF_NODE	44:1	44:1	7	g_free
LEAF_NODE	44:7	44:7	6	(
ARGUMENT	44:8	44:8	6	ha1
FIELD	44:8	44:8	7	ha1
LEAF_NODE	44:8	44:8	8	ha1
LEAF_NODE	44:11	44:11	6	)
LEAF_NODE	44:12	44:12	4	;
EXPR_STATEMENT	45:1	45:12	3	g_free ( ha2 ) ;
EXPR	45:1	45:1	4	g_free ( ha2 )
FUNCTION_CALL	45:1	45:11	5	g_free ( ha2 )
CALLEE	45:1	45:1	6	g_free
LEAF_NODE	45:1	45:1	7	g_free
LEAF_NODE	45:7	45:7	6	(
ARGUMENT	45:8	45:8	6	ha2
FIELD	45:8	45:8	7	ha2
LEAF_NODE	45:8	45:8	8	ha2
LEAF_NODE	45:11	45:11	6	)
LEAF_NODE	45:12	45:12	4	;
EXPR_STATEMENT	46:1	46:11	3	g_free ( kd ) ;
EXPR	46:1	46:1	4	g_free ( kd )
FUNCTION_CALL	46:1	46:10	5	g_free ( kd )
CALLEE	46:1	46:1	6	g_free
LEAF_NODE	46:1	46:1	7	g_free
LEAF_NODE	46:7	46:7	6	(
ARGUMENT	46:8	46:8	6	kd
FIELD	46:8	46:8	7	kd
LEAF_NODE	46:8	46:8	8	kd
LEAF_NODE	46:10	46:10	6	)
LEAF_NODE	46:11	46:11	4	;
JUMP_STATEMENT	47:1	47:9	3	return z ;
KEYWORD	47:1	47:1	4	return
LEAF_NODE	47:1	47:1	5	return
DESTINATION	47:8	47:8	4	z
EXPR	47:8	47:8	5	z
FIELD	47:8	47:8	6	z
LEAF_NODE	47:8	47:8	7	z
LEAF_NODE	47:9	47:9	4	;
LEAF_NODE	48:0	48:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:0	2	gboolean
TYPE_NAME	1:0	1:0	3	gboolean
LEAF_NODE	1:0	1:0	4	gboolean
FUNCTION_NAME	2:0	2:0	2	purple_request_field_bool_get_default_value
LEAF_NODE	2:0	2:0	3	purple_request_field_bool_get_default_value
PARAMETER_LIST	2:43	2:75	2	( const PurpleRequestField * field )
LEAF_NODE	2:43	2:43	3	(
PARAMETER_DECL	2:44	2:70	3	const PurpleRequestField * field
TYPE	2:44	2:69	4	const PurpleRequestField *
TYPE_NAME	2:44	2:50	5	const PurpleRequestField
LEAF_NODE	2:44	2:44	6	const
LEAF_NODE	2:50	2:50	6	PurpleRequestField
POINTER	2:69	2:69	5	*
LEAF_NODE	2:69	2:69	6	*
NAME	2:70	2:70	4	field
LEAF_NODE	2:70	2:70	5	field
LEAF_NODE	2:75	2:75	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
EXPR_STATEMENT	4:1	4:43	3	g_return_val_if_fail ( field != NULL , FALSE ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( field != NULL , FALSE )
FUNCTION_CALL	4:1	4:42	5	g_return_val_if_fail ( field != NULL , FALSE )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:31	6	field != NULL
FIELD	4:22	4:22	7	field
LEAF_NODE	4:22	4:22	8	field
EQ_OPERATOR	4:28	4:28	7	!=
LEAF_NODE	4:28	4:28	8	!=
FIELD	4:31	4:31	7	NULL
LEAF_NODE	4:31	4:31	8	NULL
LEAF_NODE	4:35	4:35	6	,
ARGUMENT	4:37	4:37	6	FALSE
FIELD	4:37	4:37	7	FALSE
LEAF_NODE	4:37	4:37	8	FALSE
LEAF_NODE	4:42	4:42	6	)
LEAF_NODE	4:43	4:43	4	;
EXPR_STATEMENT	5:1	5:73	3	g_return_val_if_fail ( field -> type == PURPLE_REQUEST_FIELD_BOOLEAN , FALSE ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( field -> type == PURPLE_REQUEST_FIELD_BOOLEAN , FALSE )
FUNCTION_CALL	5:1	5:72	5	g_return_val_if_fail ( field -> type == PURPLE_REQUEST_FIELD_BOOLEAN , FALSE )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:37	6	field -> type == PURPLE_REQUEST_FIELD_BOOLEAN
FIELD	5:22	5:29	7	field -> type
LEAF_NODE	5:22	5:22	8	field
LEAF_NODE	5:27	5:27	8	->
LEAF_NODE	5:29	5:29	8	type
EQ_OPERATOR	5:34	5:34	7	==
LEAF_NODE	5:34	5:34	8	==
FIELD	5:37	5:37	7	PURPLE_REQUEST_FIELD_BOOLEAN
LEAF_NODE	5:37	5:37	8	PURPLE_REQUEST_FIELD_BOOLEAN
LEAF_NODE	5:65	5:65	6	,
ARGUMENT	5:67	5:67	6	FALSE
FIELD	5:67	5:67	7	FALSE
LEAF_NODE	5:67	5:67	8	FALSE
LEAF_NODE	5:72	5:72	6	)
LEAF_NODE	5:73	5:73	4	;
JUMP_STATEMENT	6:1	6:38	3	return field -> u . boolean . default_value ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	field -> u . boolean . default_value
EXPR	6:8	6:8	5	field -> u . boolean . default_value
FIELD	6:8	6:25	6	field -> u . boolean . default_value
LEAF_NODE	6:8	6:8	7	field
LEAF_NODE	6:13	6:13	7	->
LEAF_NODE	6:15	6:15	7	u
LEAF_NODE	6:16	6:16	7	.
LEAF_NODE	6:17	6:17	7	boolean
LEAF_NODE	6:24	6:24	7	.
LEAF_NODE	6:25	6:25	7	default_value
LEAF_NODE	6:38	6:38	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	set_mood_show
LEAF_NODE	2:0	2:0	3	set_mood_show
PARAMETER_LIST	2:13	2:18	2	( void )
LEAF_NODE	2:13	2:13	3	(
PARAMETER_DECL	2:14	2:14	3	void
LEAF_NODE	2:14	2:14	4	void
LEAF_NODE	2:18	2:18	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	4:24	3	set_mood_cb ( NULL , NULL ) ;
EXPR	4:1	4:1	4	set_mood_cb ( NULL , NULL )
FUNCTION_CALL	4:1	4:23	5	set_mood_cb ( NULL , NULL )
CALLEE	4:1	4:1	6	set_mood_cb
LEAF_NODE	4:1	4:1	7	set_mood_cb
LEAF_NODE	4:12	4:12	6	(
ARGUMENT	4:13	4:13	6	NULL
FIELD	4:13	4:13	7	NULL
LEAF_NODE	4:13	4:13	8	NULL
LEAF_NODE	4:17	4:17	6	,
ARGUMENT	4:19	4:19	6	NULL
FIELD	4:19	4:19	7	NULL
LEAF_NODE	4:19	4:19	8	NULL
LEAF_NODE	4:23	4:23	6	)
LEAF_NODE	4:24	4:24	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	4:1	6:1	0	
SIMPLE_DECL	4:1	4:28	1	GObjectClass * gobject_class ;
VAR_DECL	4:1	4:15	2	GObjectClass * gobject_class
TYPE	4:1	4:14	3	GObjectClass *
TYPE_NAME	4:1	4:1	4	GObjectClass
LEAF_NODE	4:1	4:1	5	GObjectClass
POINTER	4:14	4:14	4	*
LEAF_NODE	4:14	4:14	5	*
NAME	4:15	4:15	3	gobject_class
LEAF_NODE	4:15	4:15	4	gobject_class
LEAF_NODE	4:28	4:28	2	;
SIMPLE_DECL	5:1	5:29	1	GtkWidgetClass * widget_class ;
VAR_DECL	5:1	5:17	2	GtkWidgetClass * widget_class
TYPE	5:1	5:16	3	GtkWidgetClass *
TYPE_NAME	5:1	5:1	4	GtkWidgetClass
LEAF_NODE	5:1	5:1	5	GtkWidgetClass
POINTER	5:16	5:16	4	*
LEAF_NODE	5:16	5:16	5	*
NAME	5:17	5:17	3	widget_class
LEAF_NODE	5:17	5:17	4	widget_class
LEAF_NODE	5:29	5:29	2	;
SIMPLE_DECL	6:1	6:35	1	GtkContainerClass * container_class ;
VAR_DECL	6:1	6:20	2	GtkContainerClass * container_class
TYPE	6:1	6:19	3	GtkContainerClass *
TYPE_NAME	6:1	6:1	4	GtkContainerClass
LEAF_NODE	6:1	6:1	5	GtkContainerClass
POINTER	6:19	6:19	4	*
LEAF_NODE	6:19	6:19	5	*
NAME	6:20	6:20	3	container_class
LEAF_NODE	6:20	6:20	4	container_class
LEAF_NODE	6:35	6:35	2	;

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	return_true
LEAF_NODE	2:0	2:0	3	return_true
PARAMETER_LIST	2:11	2:54	2	( gpointer key , gpointer data , gpointer null )
LEAF_NODE	2:11	2:11	3	(
PARAMETER_DECL	2:12	2:21	3	gpointer key
TYPE	2:12	2:12	4	gpointer
TYPE_NAME	2:12	2:12	5	gpointer
LEAF_NODE	2:12	2:12	6	gpointer
NAME	2:21	2:21	4	key
LEAF_NODE	2:21	2:21	5	key
LEAF_NODE	2:24	2:24	3	,
PARAMETER_DECL	2:26	2:35	3	gpointer data
TYPE	2:26	2:26	4	gpointer
TYPE_NAME	2:26	2:26	5	gpointer
LEAF_NODE	2:26	2:26	6	gpointer
NAME	2:35	2:35	4	data
LEAF_NODE	2:35	2:35	5	data
LEAF_NODE	2:39	2:39	3	,
PARAMETER_DECL	2:41	2:50	3	gpointer null
TYPE	2:41	2:41	4	gpointer
TYPE_NAME	2:41	2:41	5	gpointer
LEAF_NODE	2:41	2:41	6	gpointer
NAME	2:50	2:50	4	null
LEAF_NODE	2:50	2:50	5	null
LEAF_NODE	2:54	2:54	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:12	3	return TRUE ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	TRUE
EXPR	4:8	4:8	5	TRUE
FIELD	4:8	4:8	6	TRUE
LEAF_NODE	4:8	4:8	7	TRUE
LEAF_NODE	4:12	4:12	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	15:0	1	
RETURN_TYPE	1:0	1:31	2	static PurplePerlSignalHandler *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	PurplePerlSignalHandler
LEAF_NODE	1:7	1:7	4	PurplePerlSignalHandler
LEAF_NODE	1:31	1:31	3	*
FUNCTION_NAME	2:0	2:0	2	find_signal_handler
LEAF_NODE	2:0	2:0	3	find_signal_handler
PARAMETER_LIST	2:19	2:76	2	( PurplePlugin * plugin , void * instance , const char * signal )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:34	3	PurplePlugin * plugin
TYPE	2:20	2:33	4	PurplePlugin *
TYPE_NAME	2:20	2:20	5	PurplePlugin
LEAF_NODE	2:20	2:20	6	PurplePlugin
POINTER	2:33	2:33	5	*
LEAF_NODE	2:33	2:33	6	*
NAME	2:34	2:34	4	plugin
LEAF_NODE	2:34	2:34	5	plugin
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:48	3	void * instance
TYPE	2:42	2:47	4	void *
TYPE_NAME	2:42	2:42	5	void
LEAF_NODE	2:42	2:42	6	void
POINTER	2:47	2:47	5	*
LEAF_NODE	2:47	2:47	6	*
NAME	2:48	2:48	4	instance
LEAF_NODE	2:48	2:48	5	instance
LEAF_NODE	2:56	2:56	3	,
PARAMETER_DECL	2:58	2:70	3	const char * signal
TYPE	2:58	2:69	4	const char *
TYPE_NAME	2:58	2:64	5	const char
LEAF_NODE	2:58	2:58	6	const
LEAF_NODE	2:64	2:64	6	char
POINTER	2:69	2:69	5	*
LEAF_NODE	2:69	2:69	6	*
NAME	2:70	2:70	4	signal
LEAF_NODE	2:70	2:70	5	signal
LEAF_NODE	2:76	2:76	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	14:1	2	
SIMPLE_DECL	4:1	4:33	3	PurplePerlSignalHandler * handler ;
VAR_DECL	4:1	4:26	4	PurplePerlSignalHandler * handler
TYPE	4:1	4:25	5	PurplePerlSignalHandler *
TYPE_NAME	4:1	4:1	6	PurplePerlSignalHandler
LEAF_NODE	4:1	4:1	7	PurplePerlSignalHandler
POINTER	4:25	4:25	6	*
LEAF_NODE	4:25	4:25	7	*
NAME	4:26	4:26	5	handler
LEAF_NODE	4:26	4:26	6	handler
LEAF_NODE	4:33	4:33	4	;
SIMPLE_DECL	5:1	5:10	3	GSList * l ;
VAR_DECL	5:1	5:9	4	GSList * l
TYPE	5:1	5:8	5	GSList *
TYPE_NAME	5:1	5:1	6	GSList
LEAF_NODE	5:1	5:1	7	GSList
POINTER	5:8	5:8	6	*
LEAF_NODE	5:8	5:8	7	*
NAME	5:9	5:9	5	l
LEAF_NODE	5:9	5:9	6	l
LEAF_NODE	5:10	5:10	4	;
ITERATION	6:1	6:51	3	
KEYWORD	6:1	6:1	4	for
LEAF_NODE	6:1	6:1	5	for
LEAF_NODE	6:5	6:5	4	(
FOR_INIT	6:6	6:25	4	l = signal_handlers ;
EXPR	6:6	6:6	5	l = signal_handlers
ASSIGN	6:6	6:10	6	l = signal_handlers
LVAL	6:6	6:6	7	l
FIELD	6:6	6:6	8	l
LEAF_NODE	6:6	6:6	9	l
ASSIGN_OP	6:8	6:8	7	=
LEAF_NODE	6:8	6:8	8	=
RVAL	6:10	6:10	7	signal_handlers
FIELD	6:10	6:10	8	signal_handlers
LEAF_NODE	6:10	6:10	9	signal_handlers
LEAF_NODE	6:25	6:25	5	;
CONDITION	6:27	6:27	4	l != NULL
EXPR	6:27	6:32	5	l != NULL
FIELD	6:27	6:27	6	l
LEAF_NODE	6:27	6:27	7	l
EQ_OPERATOR	6:29	6:29	6	!=
LEAF_NODE	6:29	6:29	7	!=
FIELD	6:32	6:32	6	NULL
LEAF_NODE	6:32	6:32	7	NULL
LEAF_NODE	6:36	6:36	4	;
FOR_EXPR	6:38	6:38	4	l = l -> next
EXPR	6:38	6:38	5	l = l -> next
ASSIGN	6:38	6:42	6	l = l -> next
LVAL	6:38	6:38	7	l
FIELD	6:38	6:38	8	l
LEAF_NODE	6:38	6:38	9	l
ASSIGN_OP	6:40	6:40	7	=
LEAF_NODE	6:40	6:40	8	=
RVAL	6:42	6:42	7	l -> next
FIELD	6:42	6:45	8	l -> next
LEAF_NODE	6:42	6:42	9	l
LEAF_NODE	6:43	6:43	9	->
LEAF_NODE	6:45	6:45	9	next
LEAF_NODE	6:49	6:49	4	)
STATEMENTS	6:51	13:1	4	
LEAF_NODE	6:51	6:51	5	{
STATEMENTS	7:2	8:2	5	
EXPR_STATEMENT	7:2	7:19	6	handler = l -> data ;
EXPR	7:2	7:2	7	handler = l -> data
ASSIGN	7:2	7:12	8	handler = l -> data
LVAL	7:2	7:2	9	handler
FIELD	7:2	7:2	10	handler
LEAF_NODE	7:2	7:2	11	handler
ASSIGN_OP	7:10	7:10	9	=
LEAF_NODE	7:10	7:10	10	=
RVAL	7:12	7:12	9	l -> data
FIELD	7:12	7:15	10	l -> data
LEAF_NODE	7:12	7:12	11	l
LEAF_NODE	7:13	7:13	11	->
LEAF_NODE	7:15	7:15	11	data
LEAF_NODE	7:19	7:19	7	;
SELECTION	8:2	10:37	6	
KEYWORD	8:2	8:2	7	if
LEAF_NODE	8:2	8:2	8	if
LEAF_NODE	8:5	8:5	7	(
CONDITION	8:6	8:6	7	handler -> plugin == plugin && handler -> instance == instance && ! strcmp ( handler -> signal , signal )
EXPR	8:6	8:6	8	handler -> plugin == plugin && handler -> instance == instance && ! strcmp ( handler -> signal , signal )
AND	8:6	9:3	9	handler -> plugin == plugin && handler -> instance == instance && ! strcmp ( handler -> signal , signal )
EXPR	8:6	8:25	10	handler -> plugin == plugin
FIELD	8:6	8:15	11	handler -> plugin
LEAF_NODE	8:6	8:6	12	handler
LEAF_NODE	8:13	8:13	12	->
LEAF_NODE	8:15	8:15	12	plugin
EQ_OPERATOR	8:22	8:22	11	==
LEAF_NODE	8:22	8:22	12	==
FIELD	8:25	8:25	11	plugin
LEAF_NODE	8:25	8:25	12	plugin
LEAF_NODE	8:32	8:32	10	&&
EXPR	9:3	9:3	10	handler -> instance == instance && ! strcmp ( handler -> signal , signal )
AND	9:3	10:3	11	handler -> instance == instance && ! strcmp ( handler -> signal , signal )
EXPR	9:3	9:24	12	handler -> instance == instance
FIELD	9:3	9:12	13	handler -> instance
LEAF_NODE	9:3	9:3	14	handler
LEAF_NODE	9:10	9:10	14	->
LEAF_NODE	9:12	9:12	14	instance
EQ_OPERATOR	9:21	9:21	13	==
LEAF_NODE	9:21	9:21	14	==
FIELD	9:24	9:24	13	instance
LEAF_NODE	9:24	9:24	14	instance
LEAF_NODE	9:33	9:33	12	&&
EXPR	10:3	10:3	12	! strcmp ( handler -> signal , signal )
UNARY_EXPR	10:3	10:4	13	! strcmp ( handler -> signal , signal )
UNARY_OPERATOR	10:3	10:3	14	!
LEAF_NODE	10:3	10:3	15	!
FUNCTION_CALL	10:4	10:34	14	strcmp ( handler -> signal , signal )
CALLEE	10:4	10:4	15	strcmp
LEAF_NODE	10:4	10:4	16	strcmp
LEAF_NODE	10:10	10:10	15	(
ARGUMENT	10:11	10:11	15	handler -> signal
FIELD	10:11	10:20	16	handler -> signal
LEAF_NODE	10:11	10:11	17	handler
LEAF_NODE	10:18	10:18	17	->
LEAF_NODE	10:20	10:20	17	signal
LEAF_NODE	10:26	10:26	15	,
ARGUMENT	10:28	10:28	15	signal
FIELD	10:28	10:28	16	signal
LEAF_NODE	10:28	10:28	17	signal
LEAF_NODE	10:34	10:34	15	)
LEAF_NODE	10:35	10:35	7	)
STATEMENTS	10:37	12:2	7	
LEAF_NODE	10:37	10:37	8	{
STATEMENTS	11:3	11:3	8	
JUMP_STATEMENT	11:3	11:17	9	return handler ;
KEYWORD	11:3	11:3	10	return
LEAF_NODE	11:3	11:3	11	return
DESTINATION	11:10	11:10	10	handler
EXPR	11:10	11:10	11	handler
FIELD	11:10	11:10	12	handler
LEAF_NODE	11:10	11:10	13	handler
LEAF_NODE	11:17	11:17	10	;
LEAF_NODE	12:2	12:2	8	}
LEAF_NODE	13:1	13:1	5	}
JUMP_STATEMENT	14:1	14:12	3	return NULL ;
KEYWORD	14:1	14:1	4	return
LEAF_NODE	14:1	14:1	5	return
DESTINATION	14:8	14:8	4	NULL
EXPR	14:8	14:8	5	NULL
FIELD	14:8	14:8	6	NULL
LEAF_NODE	14:8	14:8	7	NULL
LEAF_NODE	14:12	14:12	4	;
LEAF_NODE	15:0	15:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	14:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_conv_chat_cb_set_attribute
LEAF_NODE	2:0	2:0	3	purple_conv_chat_cb_set_attribute
PARAMETER_LIST	2:33	2:115	2	( PurpleConvChat * chat , PurpleConvChatBuddy * cb , const char * key , const char * value )
LEAF_NODE	2:33	2:33	3	(
PARAMETER_DECL	2:34	2:50	3	PurpleConvChat * chat
TYPE	2:34	2:49	4	PurpleConvChat *
TYPE_NAME	2:34	2:34	5	PurpleConvChat
LEAF_NODE	2:34	2:34	6	PurpleConvChat
POINTER	2:49	2:49	5	*
LEAF_NODE	2:49	2:49	6	*
NAME	2:50	2:50	4	chat
LEAF_NODE	2:50	2:50	5	chat
LEAF_NODE	2:54	2:54	3	,
PARAMETER_DECL	2:56	2:77	3	PurpleConvChatBuddy * cb
TYPE	2:56	2:76	4	PurpleConvChatBuddy *
TYPE_NAME	2:56	2:56	5	PurpleConvChatBuddy
LEAF_NODE	2:56	2:56	6	PurpleConvChatBuddy
POINTER	2:76	2:76	5	*
LEAF_NODE	2:76	2:76	6	*
NAME	2:77	2:77	4	cb
LEAF_NODE	2:77	2:77	5	cb
LEAF_NODE	2:79	2:79	3	,
PARAMETER_DECL	2:81	2:93	3	const char * key
TYPE	2:81	2:92	4	const char *
TYPE_NAME	2:81	2:87	5	const char
LEAF_NODE	2:81	2:81	6	const
LEAF_NODE	2:87	2:87	6	char
POINTER	2:92	2:92	5	*
LEAF_NODE	2:92	2:92	6	*
NAME	2:93	2:93	4	key
LEAF_NODE	2:93	2:93	5	key
LEAF_NODE	2:96	2:96	3	,
PARAMETER_DECL	2:98	2:110	3	const char * value
TYPE	2:98	2:109	4	const char *
TYPE_NAME	2:98	2:104	5	const char
LEAF_NODE	2:98	2:98	6	const
LEAF_NODE	2:104	2:104	6	char
POINTER	2:109	2:109	5	*
LEAF_NODE	2:109	2:109	6	*
NAME	2:110	2:110	4	value
LEAF_NODE	2:110	2:110	5	value
LEAF_NODE	2:115	2:115	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	12:1	2	
SIMPLE_DECL	4:1	4:25	3	PurpleConversation * conv ;
VAR_DECL	4:1	4:21	4	PurpleConversation * conv
TYPE	4:1	4:20	5	PurpleConversation *
TYPE_NAME	4:1	4:1	6	PurpleConversation
LEAF_NODE	4:1	4:1	7	PurpleConversation
POINTER	4:20	4:20	6	*
LEAF_NODE	4:20	4:20	7	*
NAME	4:21	4:21	5	conv
LEAF_NODE	4:21	4:21	6	conv
LEAF_NODE	4:25	4:25	4	;
SIMPLE_DECL	5:1	5:29	3	PurpleConversationUiOps * ops ;
VAR_DECL	5:1	5:26	4	PurpleConversationUiOps * ops
TYPE	5:1	5:25	5	PurpleConversationUiOps *
TYPE_NAME	5:1	5:1	6	PurpleConversationUiOps
LEAF_NODE	5:1	5:1	7	PurpleConversationUiOps
POINTER	5:25	5:25	6	*
LEAF_NODE	5:25	5:25	7	*
NAME	5:26	5:26	5	ops
LEAF_NODE	5:26	5:26	6	ops
LEAF_NODE	5:29	5:29	4	;
EXPR_STATEMENT	6:1	6:29	3	g_return_if_fail ( cb != NULL ) ;
EXPR	6:1	6:1	4	g_return_if_fail ( cb != NULL )
FUNCTION_CALL	6:1	6:28	5	g_return_if_fail ( cb != NULL )
CALLEE	6:1	6:1	6	g_return_if_fail
LEAF_NODE	6:1	6:1	7	g_return_if_fail
LEAF_NODE	6:17	6:17	6	(
ARGUMENT	6:18	6:24	6	cb != NULL
FIELD	6:18	6:18	7	cb
LEAF_NODE	6:18	6:18	8	cb
EQ_OPERATOR	6:21	6:21	7	!=
LEAF_NODE	6:21	6:21	8	!=
FIELD	6:24	6:24	7	NULL
LEAF_NODE	6:24	6:24	8	NULL
LEAF_NODE	6:28	6:28	6	)
LEAF_NODE	6:29	6:29	4	;
EXPR_STATEMENT	7:1	7:30	3	g_return_if_fail ( key != NULL ) ;
EXPR	7:1	7:1	4	g_return_if_fail ( key != NULL )
FUNCTION_CALL	7:1	7:29	5	g_return_if_fail ( key != NULL )
CALLEE	7:1	7:1	6	g_return_if_fail
LEAF_NODE	7:1	7:1	7	g_return_if_fail
LEAF_NODE	7:17	7:17	6	(
ARGUMENT	7:18	7:25	6	key != NULL
FIELD	7:18	7:18	7	key
LEAF_NODE	7:18	7:18	8	key
EQ_OPERATOR	7:22	7:22	7	!=
LEAF_NODE	7:22	7:22	8	!=
FIELD	7:25	7:25	7	NULL
LEAF_NODE	7:25	7:25	8	NULL
LEAF_NODE	7:29	7:29	6	)
LEAF_NODE	7:30	7:30	4	;
EXPR_STATEMENT	8:1	8:32	3	g_return_if_fail ( value != NULL ) ;
EXPR	8:1	8:1	4	g_return_if_fail ( value != NULL )
FUNCTION_CALL	8:1	8:31	5	g_return_if_fail ( value != NULL )
CALLEE	8:1	8:1	6	g_return_if_fail
LEAF_NODE	8:1	8:1	7	g_return_if_fail
LEAF_NODE	8:17	8:17	6	(
ARGUMENT	8:18	8:27	6	value != NULL
FIELD	8:18	8:18	7	value
LEAF_NODE	8:18	8:18	8	value
EQ_OPERATOR	8:24	8:24	7	!=
LEAF_NODE	8:24	8:24	8	!=
FIELD	8:27	8:27	7	NULL
LEAF_NODE	8:27	8:27	8	NULL
LEAF_NODE	8:31	8:31	6	)
LEAF_NODE	8:32	8:32	4	;
EXPR_STATEMENT	9:1	9:69	3	g_hash_table_replace ( cb -> attributes , g_strdup ( key ) , g_strdup ( value ) ) ;
EXPR	9:1	9:1	4	g_hash_table_replace ( cb -> attributes , g_strdup ( key ) , g_strdup ( value ) )
FUNCTION_CALL	9:1	9:68	5	g_hash_table_replace ( cb -> attributes , g_strdup ( key ) , g_strdup ( value ) )
CALLEE	9:1	9:1	6	g_hash_table_replace
LEAF_NODE	9:1	9:1	7	g_hash_table_replace
LEAF_NODE	9:21	9:21	6	(
ARGUMENT	9:22	9:22	6	cb -> attributes
FIELD	9:22	9:26	7	cb -> attributes
LEAF_NODE	9:22	9:22	8	cb
LEAF_NODE	9:24	9:24	8	->
LEAF_NODE	9:26	9:26	8	attributes
LEAF_NODE	9:36	9:36	6	,
ARGUMENT	9:38	9:38	6	g_strdup ( key )
FUNCTION_CALL	9:38	9:50	7	g_strdup ( key )
CALLEE	9:38	9:38	8	g_strdup
LEAF_NODE	9:38	9:38	9	g_strdup
LEAF_NODE	9:46	9:46	8	(
ARGUMENT	9:47	9:47	8	key
FIELD	9:47	9:47	9	key
LEAF_NODE	9:47	9:47	10	key
LEAF_NODE	9:50	9:50	8	)
LEAF_NODE	9:51	9:51	6	,
ARGUMENT	9:53	9:53	6	g_strdup ( value )
FUNCTION_CALL	9:53	9:67	7	g_strdup ( value )
CALLEE	9:53	9:53	8	g_strdup
LEAF_NODE	9:53	9:53	9	g_strdup
LEAF_NODE	9:61	9:61	8	(
ARGUMENT	9:62	9:62	8	value
FIELD	9:62	9:62	9	value
LEAF_NODE	9:62	9:62	10	value
LEAF_NODE	9:67	9:67	8	)
LEAF_NODE	9:68	9:68	6	)
LEAF_NODE	9:69	9:69	4	;
EXPR_STATEMENT	10:1	10:47	3	conv = purple_conv_chat_get_conversation ( chat ) ;
EXPR	10:1	10:1	4	conv = purple_conv_chat_get_conversation ( chat )
ASSIGN	10:1	10:8	5	conv = purple_conv_chat_get_conversation ( chat )
LVAL	10:1	10:1	6	conv
FIELD	10:1	10:1	7	conv
LEAF_NODE	10:1	10:1	8	conv
ASSIGN_OP	10:6	10:6	6	=
LEAF_NODE	10:6	10:6	7	=
RVAL	10:8	10:8	6	purple_conv_chat_get_conversation ( chat )
FUNCTION_CALL	10:8	10:46	7	purple_conv_chat_get_conversation ( chat )
CALLEE	10:8	10:8	8	purple_conv_chat_get_conversation
LEAF_NODE	10:8	10:8	9	purple_conv_chat_get_conversation
LEAF_NODE	10:41	10:41	8	(
ARGUMENT	10:42	10:42	8	chat
FIELD	10:42	10:42	9	chat
LEAF_NODE	10:42	10:42	10	chat
LEAF_NODE	10:46	10:46	8	)
LEAF_NODE	10:47	10:47	4	;
EXPR_STATEMENT	11:1	11:43	3	ops = purple_conversation_get_ui_ops ( conv ) ;
EXPR	11:1	11:1	4	ops = purple_conversation_get_ui_ops ( conv )
ASSIGN	11:1	11:7	5	ops = purple_conversation_get_ui_ops ( conv )
LVAL	11:1	11:1	6	ops
FIELD	11:1	11:1	7	ops
LEAF_NODE	11:1	11:1	8	ops
ASSIGN_OP	11:5	11:5	6	=
LEAF_NODE	11:5	11:5	7	=
RVAL	11:7	11:7	6	purple_conversation_get_ui_ops ( conv )
FUNCTION_CALL	11:7	11:42	7	purple_conversation_get_ui_ops ( conv )
CALLEE	11:7	11:7	8	purple_conversation_get_ui_ops
LEAF_NODE	11:7	11:7	9	purple_conversation_get_ui_ops
LEAF_NODE	11:37	11:37	8	(
ARGUMENT	11:38	11:38	8	conv
FIELD	11:38	11:38	9	conv
LEAF_NODE	11:38	11:38	10	conv
LEAF_NODE	11:42	11:42	8	)
LEAF_NODE	11:43	11:43	4	;
SELECTION	12:1	13:2	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:4	12:4	4	(
CONDITION	12:5	12:5	4	ops != NULL && ops -> chat_update_user != NULL
EXPR	12:5	12:5	5	ops != NULL && ops -> chat_update_user != NULL
AND	12:5	12:20	6	ops != NULL && ops -> chat_update_user != NULL
EXPR	12:5	12:12	7	ops != NULL
FIELD	12:5	12:5	8	ops
LEAF_NODE	12:5	12:5	9	ops
EQ_OPERATOR	12:9	12:9	8	!=
LEAF_NODE	12:9	12:9	9	!=
FIELD	12:12	12:12	8	NULL
LEAF_NODE	12:12	12:12	9	NULL
LEAF_NODE	12:17	12:17	7	&&
EXPR	12:20	12:45	7	ops -> chat_update_user != NULL
FIELD	12:20	12:25	8	ops -> chat_update_user
LEAF_NODE	12:20	12:20	9	ops
LEAF_NODE	12:23	12:23	9	->
LEAF_NODE	12:25	12:25	9	chat_update_user
EQ_OPERATOR	12:42	12:42	8	!=
LEAF_NODE	12:42	12:42	9	!=
FIELD	12:45	12:45	8	NULL
LEAF_NODE	12:45	12:45	9	NULL
LEAF_NODE	12:49	12:49	4	)
STATEMENTS	13:2	13:2	4	
EXPR_STATEMENT	13:2	13:39	5	ops -> chat_update_user ( conv , cb -> name ) ;
EXPR	13:2	13:2	6	ops -> chat_update_user ( conv , cb -> name )
FUNCTION_CALL	13:2	13:38	7	ops -> chat_update_user ( conv , cb -> name )
CALLEE	13:2	13:7	8	ops -> chat_update_user
LEAF_NODE	13:2	13:2	9	ops
LEAF_NODE	13:5	13:5	9	->
LEAF_NODE	13:7	13:7	9	chat_update_user
LEAF_NODE	13:23	13:23	8	(
ARGUMENT	13:24	13:24	8	conv
FIELD	13:24	13:24	9	conv
LEAF_NODE	13:24	13:24	10	conv
LEAF_NODE	13:28	13:28	8	,
ARGUMENT	13:30	13:30	8	cb -> name
FIELD	13:30	13:34	9	cb -> name
LEAF_NODE	13:30	13:30	10	cb
LEAF_NODE	13:32	13:32	10	->
LEAF_NODE	13:34	13:34	10	name
LEAF_NODE	13:38	13:38	8	)
LEAF_NODE	13:39	13:39	6	;
LEAF_NODE	14:0	14:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	43:0	1	
RETURN_TYPE	1:0	1:7	2	static int
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	int
LEAF_NODE	1:7	1:7	4	int
FUNCTION_NAME	2:0	2:0	2	attach_signals
LEAF_NODE	2:0	2:0	3	attach_signals
PARAMETER_LIST	2:14	2:39	2	( PurpleConversation * conv )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:35	3	PurpleConversation * conv
TYPE	2:15	2:34	4	PurpleConversation *
TYPE_NAME	2:15	2:15	5	PurpleConversation
LEAF_NODE	2:15	2:15	6	PurpleConversation
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	conv
LEAF_NODE	2:35	2:35	5	conv
LEAF_NODE	2:39	2:39	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	42:1	2	
SIMPLE_DECL	4:1	4:35	3	PidginConversation * gtkconv ; gtkconv = NULL ;
VAR_DECL	4:1	4:21	4	PidginConversation * gtkconv ; gtkconv = NULL
TYPE	4:1	4:20	5	PidginConversation *
TYPE_NAME	4:1	4:1	6	PidginConversation
LEAF_NODE	4:1	4:1	7	PidginConversation
POINTER	4:20	4:20	6	*
LEAF_NODE	4:20	4:20	7	*
NAME	4:21	4:21	5	gtkconv
LEAF_NODE	4:21	4:21	6	gtkconv
LEAF_NODE	0:0	0:0	5	;
INIT	4:21	4:21	5	gtkconv = NULL
ASSIGN	4:21	4:31	6	gtkconv = NULL
LVAL	4:21	4:21	7	gtkconv
NAME	4:21	4:21	8	gtkconv
LEAF_NODE	4:21	4:21	9	gtkconv
ASSIGN_OP	4:29	4:29	7	=
LEAF_NODE	4:29	4:29	8	=
RVAL	4:31	4:31	7	NULL
FIELD	4:31	4:31	8	NULL
LEAF_NODE	4:31	4:31	9	NULL
LEAF_NODE	4:35	4:35	4	;
SIMPLE_DECL	5:1	5:45	3	GSList * imhtml_ids ; imhtml_ids = NULL , GSList * entry_ids ; entry_ids = NULL ;
INIT_DECL_LIST	5:1	5:1	4	GSList * imhtml_ids ; imhtml_ids = NULL , GSList * entry_ids ; entry_ids = NULL
VAR_DECL	5:1	5:9	5	GSList * imhtml_ids ; imhtml_ids = NULL
TYPE	5:1	5:8	6	GSList *
TYPE_NAME	5:1	5:1	7	GSList
LEAF_NODE	5:1	5:1	8	GSList
POINTER	5:8	5:8	7	*
LEAF_NODE	5:8	5:8	8	*
NAME	5:9	5:9	6	imhtml_ids
LEAF_NODE	5:9	5:9	7	imhtml_ids
LEAF_NODE	0:0	0:0	6	;
INIT	5:9	5:9	6	imhtml_ids = NULL
ASSIGN	5:9	5:22	7	imhtml_ids = NULL
LVAL	5:9	5:9	8	imhtml_ids
NAME	5:9	5:9	9	imhtml_ids
LEAF_NODE	5:9	5:9	10	imhtml_ids
ASSIGN_OP	5:20	5:20	8	=
LEAF_NODE	5:20	5:20	9	=
RVAL	5:22	5:22	8	NULL
FIELD	5:22	5:22	9	NULL
LEAF_NODE	5:22	5:22	10	NULL
LEAF_NODE	5:26	5:26	5	,
VAR_DECL	5:1	5:29	5	GSList * entry_ids ; entry_ids = NULL
TYPE	5:1	5:28	6	GSList *
TYPE_NAME	5:1	5:1	7	GSList
LEAF_NODE	5:1	5:1	8	GSList
POINTER	5:28	5:28	7	*
LEAF_NODE	5:28	5:28	8	*
NAME	5:29	5:29	6	entry_ids
LEAF_NODE	5:29	5:29	7	entry_ids
LEAF_NODE	0:0	0:0	6	;
INIT	5:29	5:29	6	entry_ids = NULL
ASSIGN	5:29	5:41	7	entry_ids = NULL
LVAL	5:29	5:29	8	entry_ids
NAME	5:29	5:29	9	entry_ids
LEAF_NODE	5:29	5:29	10	entry_ids
ASSIGN_OP	5:39	5:39	8	=
LEAF_NODE	5:39	5:39	9	=
RVAL	5:41	5:41	8	NULL
FIELD	5:41	5:41	9	NULL
LEAF_NODE	5:41	5:41	10	NULL
LEAF_NODE	5:45	5:45	4	;
SIMPLE_DECL	6:1	6:9	3	guint id ;
VAR_DECL	6:1	6:7	4	guint id
TYPE	6:1	6:1	5	guint
TYPE_NAME	6:1	6:1	6	guint
LEAF_NODE	6:1	6:1	7	guint
NAME	6:7	6:7	5	id
LEAF_NODE	6:7	6:7	6	id
LEAF_NODE	6:9	6:9	4	;
EXPR_STATEMENT	7:1	7:36	3	gtkconv = PIDGIN_CONVERSATION ( conv ) ;
EXPR	7:1	7:1	4	gtkconv = PIDGIN_CONVERSATION ( conv )
ASSIGN	7:1	7:11	5	gtkconv = PIDGIN_CONVERSATION ( conv )
LVAL	7:1	7:1	6	gtkconv
FIELD	7:1	7:1	7	gtkconv
LEAF_NODE	7:1	7:1	8	gtkconv
ASSIGN_OP	7:9	7:9	6	=
LEAF_NODE	7:9	7:9	7	=
RVAL	7:11	7:11	6	PIDGIN_CONVERSATION ( conv )
FUNCTION_CALL	7:11	7:35	7	PIDGIN_CONVERSATION ( conv )
CALLEE	7:11	7:11	8	PIDGIN_CONVERSATION
LEAF_NODE	7:11	7:11	9	PIDGIN_CONVERSATION
LEAF_NODE	7:30	7:30	8	(
ARGUMENT	7:31	7:31	8	conv
FIELD	7:31	7:31	9	conv
LEAF_NODE	7:31	7:31	10	conv
LEAF_NODE	7:35	7:35	8	)
LEAF_NODE	7:36	7:36	4	;
SELECTION	8:1	8:15	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	! gtkconv
EXPR	8:5	8:5	5	! gtkconv
UNARY_EXPR	8:5	8:6	6	! gtkconv
UNARY_OPERATOR	8:5	8:5	7	!
LEAF_NODE	8:5	8:5	8	!
FIELD	8:6	8:6	7	gtkconv
LEAF_NODE	8:6	8:6	8	gtkconv
LEAF_NODE	8:13	8:13	4	)
STATEMENTS	8:15	11:1	4	
LEAF_NODE	8:15	8:15	5	{
STATEMENTS	9:2	10:2	5	
EXPR_STATEMENT	9:2	9:57	6	purple_debug_misc ( "notify" , "Failed to find gtkconv\n" ) ;
EXPR	9:2	9:2	7	purple_debug_misc ( "notify" , "Failed to find gtkconv\n" )
FUNCTION_CALL	9:2	9:56	8	purple_debug_misc ( "notify" , "Failed to find gtkconv\n" )
CALLEE	9:2	9:2	9	purple_debug_misc
LEAF_NODE	9:2	9:2	10	purple_debug_misc
LEAF_NODE	9:19	9:19	9	(
ARGUMENT	9:20	9:20	9	"notify"
FIELD	9:20	9:20	10	"notify"
LEAF_NODE	9:20	9:20	11	"notify"
LEAF_NODE	9:28	9:28	9	,
ARGUMENT	9:30	9:30	9	"Failed to find gtkconv\n"
FIELD	9:30	9:30	10	"Failed to find gtkconv\n"
LEAF_NODE	9:30	9:30	11	"Failed to find gtkconv\n"
LEAF_NODE	9:56	9:56	9	)
LEAF_NODE	9:57	9:57	7	;
JUMP_STATEMENT	10:2	10:10	6	return 0 ;
KEYWORD	10:2	10:2	7	return
LEAF_NODE	10:2	10:2	8	return
DESTINATION	10:9	10:9	7	0
EXPR	10:9	10:9	8	0
FIELD	10:9	10:9	9	0
LEAF_NODE	10:9	10:9	10	0
LEAF_NODE	10:10	10:10	7	;
LEAF_NODE	11:1	11:1	5	}
SELECTION	12:1	12:68	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:4	12:4	4	(
CONDITION	12:5	12:5	4	purple_prefs_get_bool ( "/plugins/gtk/X11/notify/notify_focus" )
EXPR	12:5	12:5	5	purple_prefs_get_bool ( "/plugins/gtk/X11/notify/notify_focus" )
FUNCTION_CALL	12:5	12:65	6	purple_prefs_get_bool ( "/plugins/gtk/X11/notify/notify_focus" )
CALLEE	12:5	12:5	7	purple_prefs_get_bool
LEAF_NODE	12:5	12:5	8	purple_prefs_get_bool
LEAF_NODE	12:26	12:26	7	(
ARGUMENT	12:27	12:27	7	"/plugins/gtk/X11/notify/notify_focus"
FIELD	12:27	12:27	8	"/plugins/gtk/X11/notify/notify_focus"
LEAF_NODE	12:27	12:27	9	"/plugins/gtk/X11/notify/notify_focus"
LEAF_NODE	12:65	12:65	7	)
LEAF_NODE	12:66	12:66	4	)
STATEMENTS	12:68	24:1	4	
LEAF_NODE	12:68	12:68	5	{
STATEMENTS	18:2	23:2	5	
EXPR_STATEMENT	18:2	19:54	6	id = g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "focus-in-event" , G_CALLBACK ( unnotify_cb ) , conv ) ;
EXPR	18:2	18:2	7	id = g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "focus-in-event" , G_CALLBACK ( unnotify_cb ) , conv )
ASSIGN	18:2	18:7	8	id = g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "focus-in-event" , G_CALLBACK ( unnotify_cb ) , conv )
LVAL	18:2	18:2	9	id
FIELD	18:2	18:2	10	id
LEAF_NODE	18:2	18:2	11	id
ASSIGN_OP	18:5	18:5	9	=
LEAF_NODE	18:5	18:5	10	=
RVAL	18:7	18:7	9	g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "focus-in-event" , G_CALLBACK ( unnotify_cb ) , conv )
FUNCTION_CALL	18:7	19:53	10	g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "focus-in-event" , G_CALLBACK ( unnotify_cb ) , conv )
CALLEE	18:7	18:7	11	g_signal_connect
LEAF_NODE	18:7	18:7	12	g_signal_connect
LEAF_NODE	18:23	18:23	11	(
ARGUMENT	18:24	18:24	11	G_OBJECT ( gtkconv -> entry )
FUNCTION_CALL	18:24	18:47	12	G_OBJECT ( gtkconv -> entry )
CALLEE	18:24	18:24	13	G_OBJECT
LEAF_NODE	18:24	18:24	14	G_OBJECT
LEAF_NODE	18:32	18:32	13	(
ARGUMENT	18:33	18:33	13	gtkconv -> entry
FIELD	18:33	18:42	14	gtkconv -> entry
LEAF_NODE	18:33	18:33	15	gtkconv
LEAF_NODE	18:40	18:40	15	->
LEAF_NODE	18:42	18:42	15	entry
LEAF_NODE	18:47	18:47	13	)
LEAF_NODE	18:48	18:48	11	,
ARGUMENT	18:50	18:50	11	"focus-in-event"
FIELD	18:50	18:50	12	"focus-in-event"
LEAF_NODE	18:50	18:50	13	"focus-in-event"
LEAF_NODE	18:66	18:66	11	,
ARGUMENT	19:24	19:24	11	G_CALLBACK ( unnotify_cb )
FUNCTION_CALL	19:24	19:46	12	G_CALLBACK ( unnotify_cb )
CALLEE	19:24	19:24	13	G_CALLBACK
LEAF_NODE	19:24	19:24	14	G_CALLBACK
LEAF_NODE	19:34	19:34	13	(
ARGUMENT	19:35	19:35	13	unnotify_cb
FIELD	19:35	19:35	14	unnotify_cb
LEAF_NODE	19:35	19:35	15	unnotify_cb
LEAF_NODE	19:46	19:46	13	)
LEAF_NODE	19:47	19:47	11	,
ARGUMENT	19:49	19:49	11	conv
FIELD	19:49	19:49	12	conv
LEAF_NODE	19:49	19:49	13	conv
LEAF_NODE	19:53	19:53	11	)
LEAF_NODE	19:54	19:54	7	;
EXPR_STATEMENT	20:2	20:61	6	entry_ids = g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) ) ;
EXPR	20:2	20:2	7	entry_ids = g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
ASSIGN	20:2	20:14	8	entry_ids = g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
LVAL	20:2	20:2	9	entry_ids
FIELD	20:2	20:2	10	entry_ids
LEAF_NODE	20:2	20:2	11	entry_ids
ASSIGN_OP	20:12	20:12	9	=
LEAF_NODE	20:12	20:12	10	=
RVAL	20:14	20:14	9	g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
FUNCTION_CALL	20:14	20:60	10	g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
CALLEE	20:14	20:14	11	g_slist_append
LEAF_NODE	20:14	20:14	12	g_slist_append
LEAF_NODE	20:28	20:28	11	(
ARGUMENT	20:29	20:29	11	entry_ids
FIELD	20:29	20:29	12	entry_ids
LEAF_NODE	20:29	20:29	13	entry_ids
LEAF_NODE	20:38	20:38	11	,
ARGUMENT	20:40	20:40	11	GUINT_TO_POINTER ( id )
FUNCTION_CALL	20:40	20:59	12	GUINT_TO_POINTER ( id )
CALLEE	20:40	20:40	13	GUINT_TO_POINTER
LEAF_NODE	20:40	20:40	14	GUINT_TO_POINTER
LEAF_NODE	20:56	20:56	13	(
ARGUMENT	20:57	20:57	13	id
FIELD	20:57	20:57	14	id
LEAF_NODE	20:57	20:57	15	id
LEAF_NODE	20:59	20:59	13	)
LEAF_NODE	20:60	20:60	11	)
LEAF_NODE	20:61	20:61	7	;
EXPR_STATEMENT	21:2	22:54	6	id = g_signal_connect ( G_OBJECT ( gtkconv -> imhtml ) , "focus-in-event" , G_CALLBACK ( unnotify_cb ) , conv ) ;
EXPR	21:2	21:2	7	id = g_signal_connect ( G_OBJECT ( gtkconv -> imhtml ) , "focus-in-event" , G_CALLBACK ( unnotify_cb ) , conv )
ASSIGN	21:2	21:7	8	id = g_signal_connect ( G_OBJECT ( gtkconv -> imhtml ) , "focus-in-event" , G_CALLBACK ( unnotify_cb ) , conv )
LVAL	21:2	21:2	9	id
FIELD	21:2	21:2	10	id
LEAF_NODE	21:2	21:2	11	id
ASSIGN_OP	21:5	21:5	9	=
LEAF_NODE	21:5	21:5	10	=
RVAL	21:7	21:7	9	g_signal_connect ( G_OBJECT ( gtkconv -> imhtml ) , "focus-in-event" , G_CALLBACK ( unnotify_cb ) , conv )
FUNCTION_CALL	21:7	22:53	10	g_signal_connect ( G_OBJECT ( gtkconv -> imhtml ) , "focus-in-event" , G_CALLBACK ( unnotify_cb ) , conv )
CALLEE	21:7	21:7	11	g_signal_connect
LEAF_NODE	21:7	21:7	12	g_signal_connect
LEAF_NODE	21:23	21:23	11	(
ARGUMENT	21:24	21:24	11	G_OBJECT ( gtkconv -> imhtml )
FUNCTION_CALL	21:24	21:48	12	G_OBJECT ( gtkconv -> imhtml )
CALLEE	21:24	21:24	13	G_OBJECT
LEAF_NODE	21:24	21:24	14	G_OBJECT
LEAF_NODE	21:32	21:32	13	(
ARGUMENT	21:33	21:33	13	gtkconv -> imhtml
FIELD	21:33	21:42	14	gtkconv -> imhtml
LEAF_NODE	21:33	21:33	15	gtkconv
LEAF_NODE	21:40	21:40	15	->
LEAF_NODE	21:42	21:42	15	imhtml
LEAF_NODE	21:48	21:48	13	)
LEAF_NODE	21:49	21:49	11	,
ARGUMENT	21:51	21:51	11	"focus-in-event"
FIELD	21:51	21:51	12	"focus-in-event"
LEAF_NODE	21:51	21:51	13	"focus-in-event"
LEAF_NODE	21:67	21:67	11	,
ARGUMENT	22:24	22:24	11	G_CALLBACK ( unnotify_cb )
FUNCTION_CALL	22:24	22:46	12	G_CALLBACK ( unnotify_cb )
CALLEE	22:24	22:24	13	G_CALLBACK
LEAF_NODE	22:24	22:24	14	G_CALLBACK
LEAF_NODE	22:34	22:34	13	(
ARGUMENT	22:35	22:35	13	unnotify_cb
FIELD	22:35	22:35	14	unnotify_cb
LEAF_NODE	22:35	22:35	15	unnotify_cb
LEAF_NODE	22:46	22:46	13	)
LEAF_NODE	22:47	22:47	11	,
ARGUMENT	22:49	22:49	11	conv
FIELD	22:49	22:49	12	conv
LEAF_NODE	22:49	22:49	13	conv
LEAF_NODE	22:53	22:53	11	)
LEAF_NODE	22:54	22:54	7	;
EXPR_STATEMENT	23:2	23:63	6	imhtml_ids = g_slist_append ( imhtml_ids , GUINT_TO_POINTER ( id ) ) ;
EXPR	23:2	23:2	7	imhtml_ids = g_slist_append ( imhtml_ids , GUINT_TO_POINTER ( id ) )
ASSIGN	23:2	23:15	8	imhtml_ids = g_slist_append ( imhtml_ids , GUINT_TO_POINTER ( id ) )
LVAL	23:2	23:2	9	imhtml_ids
FIELD	23:2	23:2	10	imhtml_ids
LEAF_NODE	23:2	23:2	11	imhtml_ids
ASSIGN_OP	23:13	23:13	9	=
LEAF_NODE	23:13	23:13	10	=
RVAL	23:15	23:15	9	g_slist_append ( imhtml_ids , GUINT_TO_POINTER ( id ) )
FUNCTION_CALL	23:15	23:62	10	g_slist_append ( imhtml_ids , GUINT_TO_POINTER ( id ) )
CALLEE	23:15	23:15	11	g_slist_append
LEAF_NODE	23:15	23:15	12	g_slist_append
LEAF_NODE	23:29	23:29	11	(
ARGUMENT	23:30	23:30	11	imhtml_ids
FIELD	23:30	23:30	12	imhtml_ids
LEAF_NODE	23:30	23:30	13	imhtml_ids
LEAF_NODE	23:40	23:40	11	,
ARGUMENT	23:42	23:42	11	GUINT_TO_POINTER ( id )
FUNCTION_CALL	23:42	23:61	12	GUINT_TO_POINTER ( id )
CALLEE	23:42	23:42	13	GUINT_TO_POINTER
LEAF_NODE	23:42	23:42	14	GUINT_TO_POINTER
LEAF_NODE	23:58	23:58	13	(
ARGUMENT	23:59	23:59	13	id
FIELD	23:59	23:59	14	id
LEAF_NODE	23:59	23:59	15	id
LEAF_NODE	23:61	23:61	13	)
LEAF_NODE	23:62	23:62	11	)
LEAF_NODE	23:63	23:63	7	;
LEAF_NODE	24:1	24:1	5	}
SELECTION	25:1	25:68	3	
KEYWORD	25:1	25:1	4	if
LEAF_NODE	25:1	25:1	5	if
LEAF_NODE	25:4	25:4	4	(
CONDITION	25:5	25:5	4	purple_prefs_get_bool ( "/plugins/gtk/X11/notify/notify_click" )
EXPR	25:5	25:5	5	purple_prefs_get_bool ( "/plugins/gtk/X11/notify/notify_click" )
FUNCTION_CALL	25:5	25:65	6	purple_prefs_get_bool ( "/plugins/gtk/X11/notify/notify_click" )
CALLEE	25:5	25:5	7	purple_prefs_get_bool
LEAF_NODE	25:5	25:5	8	purple_prefs_get_bool
LEAF_NODE	25:26	25:26	7	(
ARGUMENT	25:27	25:27	7	"/plugins/gtk/X11/notify/notify_click"
FIELD	25:27	25:27	8	"/plugins/gtk/X11/notify/notify_click"
LEAF_NODE	25:27	25:27	9	"/plugins/gtk/X11/notify/notify_click"
LEAF_NODE	25:65	25:65	7	)
LEAF_NODE	25:66	25:66	4	)
STATEMENTS	25:68	34:1	4	
LEAF_NODE	25:68	25:68	5	{
STATEMENTS	28:2	33:2	5	
EXPR_STATEMENT	28:2	29:54	6	id = g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "button-press-event" , G_CALLBACK ( unnotify_cb ) , conv ) ;
EXPR	28:2	28:2	7	id = g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "button-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
ASSIGN	28:2	28:7	8	id = g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "button-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
LVAL	28:2	28:2	9	id
FIELD	28:2	28:2	10	id
LEAF_NODE	28:2	28:2	11	id
ASSIGN_OP	28:5	28:5	9	=
LEAF_NODE	28:5	28:5	10	=
RVAL	28:7	28:7	9	g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "button-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
FUNCTION_CALL	28:7	29:53	10	g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "button-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
CALLEE	28:7	28:7	11	g_signal_connect
LEAF_NODE	28:7	28:7	12	g_signal_connect
LEAF_NODE	28:23	28:23	11	(
ARGUMENT	28:24	28:24	11	G_OBJECT ( gtkconv -> entry )
FUNCTION_CALL	28:24	28:47	12	G_OBJECT ( gtkconv -> entry )
CALLEE	28:24	28:24	13	G_OBJECT
LEAF_NODE	28:24	28:24	14	G_OBJECT
LEAF_NODE	28:32	28:32	13	(
ARGUMENT	28:33	28:33	13	gtkconv -> entry
FIELD	28:33	28:42	14	gtkconv -> entry
LEAF_NODE	28:33	28:33	15	gtkconv
LEAF_NODE	28:40	28:40	15	->
LEAF_NODE	28:42	28:42	15	entry
LEAF_NODE	28:47	28:47	13	)
LEAF_NODE	28:48	28:48	11	,
ARGUMENT	28:50	28:50	11	"button-press-event"
FIELD	28:50	28:50	12	"button-press-event"
LEAF_NODE	28:50	28:50	13	"button-press-event"
LEAF_NODE	28:70	28:70	11	,
ARGUMENT	29:24	29:24	11	G_CALLBACK ( unnotify_cb )
FUNCTION_CALL	29:24	29:46	12	G_CALLBACK ( unnotify_cb )
CALLEE	29:24	29:24	13	G_CALLBACK
LEAF_NODE	29:24	29:24	14	G_CALLBACK
LEAF_NODE	29:34	29:34	13	(
ARGUMENT	29:35	29:35	13	unnotify_cb
FIELD	29:35	29:35	14	unnotify_cb
LEAF_NODE	29:35	29:35	15	unnotify_cb
LEAF_NODE	29:46	29:46	13	)
LEAF_NODE	29:47	29:47	11	,
ARGUMENT	29:49	29:49	11	conv
FIELD	29:49	29:49	12	conv
LEAF_NODE	29:49	29:49	13	conv
LEAF_NODE	29:53	29:53	11	)
LEAF_NODE	29:54	29:54	7	;
EXPR_STATEMENT	30:2	30:61	6	entry_ids = g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) ) ;
EXPR	30:2	30:2	7	entry_ids = g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
ASSIGN	30:2	30:14	8	entry_ids = g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
LVAL	30:2	30:2	9	entry_ids
FIELD	30:2	30:2	10	entry_ids
LEAF_NODE	30:2	30:2	11	entry_ids
ASSIGN_OP	30:12	30:12	9	=
LEAF_NODE	30:12	30:12	10	=
RVAL	30:14	30:14	9	g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
FUNCTION_CALL	30:14	30:60	10	g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
CALLEE	30:14	30:14	11	g_slist_append
LEAF_NODE	30:14	30:14	12	g_slist_append
LEAF_NODE	30:28	30:28	11	(
ARGUMENT	30:29	30:29	11	entry_ids
FIELD	30:29	30:29	12	entry_ids
LEAF_NODE	30:29	30:29	13	entry_ids
LEAF_NODE	30:38	30:38	11	,
ARGUMENT	30:40	30:40	11	GUINT_TO_POINTER ( id )
FUNCTION_CALL	30:40	30:59	12	GUINT_TO_POINTER ( id )
CALLEE	30:40	30:40	13	GUINT_TO_POINTER
LEAF_NODE	30:40	30:40	14	GUINT_TO_POINTER
LEAF_NODE	30:56	30:56	13	(
ARGUMENT	30:57	30:57	13	id
FIELD	30:57	30:57	14	id
LEAF_NODE	30:57	30:57	15	id
LEAF_NODE	30:59	30:59	13	)
LEAF_NODE	30:60	30:60	11	)
LEAF_NODE	30:61	30:61	7	;
EXPR_STATEMENT	31:2	32:54	6	id = g_signal_connect ( G_OBJECT ( gtkconv -> imhtml ) , "button-press-event" , G_CALLBACK ( unnotify_cb ) , conv ) ;
EXPR	31:2	31:2	7	id = g_signal_connect ( G_OBJECT ( gtkconv -> imhtml ) , "button-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
ASSIGN	31:2	31:7	8	id = g_signal_connect ( G_OBJECT ( gtkconv -> imhtml ) , "button-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
LVAL	31:2	31:2	9	id
FIELD	31:2	31:2	10	id
LEAF_NODE	31:2	31:2	11	id
ASSIGN_OP	31:5	31:5	9	=
LEAF_NODE	31:5	31:5	10	=
RVAL	31:7	31:7	9	g_signal_connect ( G_OBJECT ( gtkconv -> imhtml ) , "button-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
FUNCTION_CALL	31:7	32:53	10	g_signal_connect ( G_OBJECT ( gtkconv -> imhtml ) , "button-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
CALLEE	31:7	31:7	11	g_signal_connect
LEAF_NODE	31:7	31:7	12	g_signal_connect
LEAF_NODE	31:23	31:23	11	(
ARGUMENT	31:24	31:24	11	G_OBJECT ( gtkconv -> imhtml )
FUNCTION_CALL	31:24	31:48	12	G_OBJECT ( gtkconv -> imhtml )
CALLEE	31:24	31:24	13	G_OBJECT
LEAF_NODE	31:24	31:24	14	G_OBJECT
LEAF_NODE	31:32	31:32	13	(
ARGUMENT	31:33	31:33	13	gtkconv -> imhtml
FIELD	31:33	31:42	14	gtkconv -> imhtml
LEAF_NODE	31:33	31:33	15	gtkconv
LEAF_NODE	31:40	31:40	15	->
LEAF_NODE	31:42	31:42	15	imhtml
LEAF_NODE	31:48	31:48	13	)
LEAF_NODE	31:49	31:49	11	,
ARGUMENT	31:51	31:51	11	"button-press-event"
FIELD	31:51	31:51	12	"button-press-event"
LEAF_NODE	31:51	31:51	13	"button-press-event"
LEAF_NODE	31:71	31:71	11	,
ARGUMENT	32:24	32:24	11	G_CALLBACK ( unnotify_cb )
FUNCTION_CALL	32:24	32:46	12	G_CALLBACK ( unnotify_cb )
CALLEE	32:24	32:24	13	G_CALLBACK
LEAF_NODE	32:24	32:24	14	G_CALLBACK
LEAF_NODE	32:34	32:34	13	(
ARGUMENT	32:35	32:35	13	unnotify_cb
FIELD	32:35	32:35	14	unnotify_cb
LEAF_NODE	32:35	32:35	15	unnotify_cb
LEAF_NODE	32:46	32:46	13	)
LEAF_NODE	32:47	32:47	11	,
ARGUMENT	32:49	32:49	11	conv
FIELD	32:49	32:49	12	conv
LEAF_NODE	32:49	32:49	13	conv
LEAF_NODE	32:53	32:53	11	)
LEAF_NODE	32:54	32:54	7	;
EXPR_STATEMENT	33:2	33:63	6	imhtml_ids = g_slist_append ( imhtml_ids , GUINT_TO_POINTER ( id ) ) ;
EXPR	33:2	33:2	7	imhtml_ids = g_slist_append ( imhtml_ids , GUINT_TO_POINTER ( id ) )
ASSIGN	33:2	33:15	8	imhtml_ids = g_slist_append ( imhtml_ids , GUINT_TO_POINTER ( id ) )
LVAL	33:2	33:2	9	imhtml_ids
FIELD	33:2	33:2	10	imhtml_ids
LEAF_NODE	33:2	33:2	11	imhtml_ids
ASSIGN_OP	33:13	33:13	9	=
LEAF_NODE	33:13	33:13	10	=
RVAL	33:15	33:15	9	g_slist_append ( imhtml_ids , GUINT_TO_POINTER ( id ) )
FUNCTION_CALL	33:15	33:62	10	g_slist_append ( imhtml_ids , GUINT_TO_POINTER ( id ) )
CALLEE	33:15	33:15	11	g_slist_append
LEAF_NODE	33:15	33:15	12	g_slist_append
LEAF_NODE	33:29	33:29	11	(
ARGUMENT	33:30	33:30	11	imhtml_ids
FIELD	33:30	33:30	12	imhtml_ids
LEAF_NODE	33:30	33:30	13	imhtml_ids
LEAF_NODE	33:40	33:40	11	,
ARGUMENT	33:42	33:42	11	GUINT_TO_POINTER ( id )
FUNCTION_CALL	33:42	33:61	12	GUINT_TO_POINTER ( id )
CALLEE	33:42	33:42	13	GUINT_TO_POINTER
LEAF_NODE	33:42	33:42	14	GUINT_TO_POINTER
LEAF_NODE	33:58	33:58	13	(
ARGUMENT	33:59	33:59	13	id
FIELD	33:59	33:59	14	id
LEAF_NODE	33:59	33:59	15	id
LEAF_NODE	33:61	33:61	13	)
LEAF_NODE	33:62	33:62	11	)
LEAF_NODE	33:63	33:63	7	;
LEAF_NODE	34:1	34:1	5	}
SELECTION	35:1	35:67	3	
KEYWORD	35:1	35:1	4	if
LEAF_NODE	35:1	35:1	5	if
LEAF_NODE	35:4	35:4	4	(
CONDITION	35:5	35:5	4	purple_prefs_get_bool ( "/plugins/gtk/X11/notify/notify_type" )
EXPR	35:5	35:5	5	purple_prefs_get_bool ( "/plugins/gtk/X11/notify/notify_type" )
FUNCTION_CALL	35:5	35:64	6	purple_prefs_get_bool ( "/plugins/gtk/X11/notify/notify_type" )
CALLEE	35:5	35:5	7	purple_prefs_get_bool
LEAF_NODE	35:5	35:5	8	purple_prefs_get_bool
LEAF_NODE	35:26	35:26	7	(
ARGUMENT	35:27	35:27	7	"/plugins/gtk/X11/notify/notify_type"
FIELD	35:27	35:27	8	"/plugins/gtk/X11/notify/notify_type"
LEAF_NODE	35:27	35:27	9	"/plugins/gtk/X11/notify/notify_type"
LEAF_NODE	35:64	35:64	7	)
LEAF_NODE	35:65	35:65	4	)
STATEMENTS	35:67	39:1	4	
LEAF_NODE	35:67	35:67	5	{
STATEMENTS	36:2	38:2	5	
EXPR_STATEMENT	36:2	37:54	6	id = g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "key-press-event" , G_CALLBACK ( unnotify_cb ) , conv ) ;
EXPR	36:2	36:2	7	id = g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "key-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
ASSIGN	36:2	36:7	8	id = g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "key-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
LVAL	36:2	36:2	9	id
FIELD	36:2	36:2	10	id
LEAF_NODE	36:2	36:2	11	id
ASSIGN_OP	36:5	36:5	9	=
LEAF_NODE	36:5	36:5	10	=
RVAL	36:7	36:7	9	g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "key-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
FUNCTION_CALL	36:7	37:53	10	g_signal_connect ( G_OBJECT ( gtkconv -> entry ) , "key-press-event" , G_CALLBACK ( unnotify_cb ) , conv )
CALLEE	36:7	36:7	11	g_signal_connect
LEAF_NODE	36:7	36:7	12	g_signal_connect
LEAF_NODE	36:23	36:23	11	(
ARGUMENT	36:24	36:24	11	G_OBJECT ( gtkconv -> entry )
FUNCTION_CALL	36:24	36:47	12	G_OBJECT ( gtkconv -> entry )
CALLEE	36:24	36:24	13	G_OBJECT
LEAF_NODE	36:24	36:24	14	G_OBJECT
LEAF_NODE	36:32	36:32	13	(
ARGUMENT	36:33	36:33	13	gtkconv -> entry
FIELD	36:33	36:42	14	gtkconv -> entry
LEAF_NODE	36:33	36:33	15	gtkconv
LEAF_NODE	36:40	36:40	15	->
LEAF_NODE	36:42	36:42	15	entry
LEAF_NODE	36:47	36:47	13	)
LEAF_NODE	36:48	36:48	11	,
ARGUMENT	36:50	36:50	11	"key-press-event"
FIELD	36:50	36:50	12	"key-press-event"
LEAF_NODE	36:50	36:50	13	"key-press-event"
LEAF_NODE	36:67	36:67	11	,
ARGUMENT	37:24	37:24	11	G_CALLBACK ( unnotify_cb )
FUNCTION_CALL	37:24	37:46	12	G_CALLBACK ( unnotify_cb )
CALLEE	37:24	37:24	13	G_CALLBACK
LEAF_NODE	37:24	37:24	14	G_CALLBACK
LEAF_NODE	37:34	37:34	13	(
ARGUMENT	37:35	37:35	13	unnotify_cb
FIELD	37:35	37:35	14	unnotify_cb
LEAF_NODE	37:35	37:35	15	unnotify_cb
LEAF_NODE	37:46	37:46	13	)
LEAF_NODE	37:47	37:47	11	,
ARGUMENT	37:49	37:49	11	conv
FIELD	37:49	37:49	12	conv
LEAF_NODE	37:49	37:49	13	conv
LEAF_NODE	37:53	37:53	11	)
LEAF_NODE	37:54	37:54	7	;
EXPR_STATEMENT	38:2	38:61	6	entry_ids = g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) ) ;
EXPR	38:2	38:2	7	entry_ids = g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
ASSIGN	38:2	38:14	8	entry_ids = g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
LVAL	38:2	38:2	9	entry_ids
FIELD	38:2	38:2	10	entry_ids
LEAF_NODE	38:2	38:2	11	entry_ids
ASSIGN_OP	38:12	38:12	9	=
LEAF_NODE	38:12	38:12	10	=
RVAL	38:14	38:14	9	g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
FUNCTION_CALL	38:14	38:60	10	g_slist_append ( entry_ids , GUINT_TO_POINTER ( id ) )
CALLEE	38:14	38:14	11	g_slist_append
LEAF_NODE	38:14	38:14	12	g_slist_append
LEAF_NODE	38:28	38:28	11	(
ARGUMENT	38:29	38:29	11	entry_ids
FIELD	38:29	38:29	12	entry_ids
LEAF_NODE	38:29	38:29	13	entry_ids
LEAF_NODE	38:38	38:38	11	,
ARGUMENT	38:40	38:40	11	GUINT_TO_POINTER ( id )
FUNCTION_CALL	38:40	38:59	12	GUINT_TO_POINTER ( id )
CALLEE	38:40	38:40	13	GUINT_TO_POINTER
LEAF_NODE	38:40	38:40	14	GUINT_TO_POINTER
LEAF_NODE	38:56	38:56	13	(
ARGUMENT	38:57	38:57	13	id
FIELD	38:57	38:57	14	id
LEAF_NODE	38:57	38:57	15	id
LEAF_NODE	38:59	38:59	13	)
LEAF_NODE	38:60	38:60	11	)
LEAF_NODE	38:61	38:61	7	;
LEAF_NODE	39:1	39:1	5	}
EXPR_STATEMENT	40:1	40:72	3	purple_conversation_set_data ( conv , "notify-imhtml-signals" , imhtml_ids ) ;
EXPR	40:1	40:1	4	purple_conversation_set_data ( conv , "notify-imhtml-signals" , imhtml_ids )
FUNCTION_CALL	40:1	40:71	5	purple_conversation_set_data ( conv , "notify-imhtml-signals" , imhtml_ids )
CALLEE	40:1	40:1	6	purple_conversation_set_data
LEAF_NODE	40:1	40:1	7	purple_conversation_set_data
LEAF_NODE	40:29	40:29	6	(
ARGUMENT	40:30	40:30	6	conv
FIELD	40:30	40:30	7	conv
LEAF_NODE	40:30	40:30	8	conv
LEAF_NODE	40:34	40:34	6	,
ARGUMENT	40:36	40:36	6	"notify-imhtml-signals"
FIELD	40:36	40:36	7	"notify-imhtml-signals"
LEAF_NODE	40:36	40:36	8	"notify-imhtml-signals"
LEAF_NODE	40:59	40:59	6	,
ARGUMENT	40:61	40:61	6	imhtml_ids
FIELD	40:61	40:61	7	imhtml_ids
LEAF_NODE	40:61	40:61	8	imhtml_ids
LEAF_NODE	40:71	40:71	6	)
LEAF_NODE	40:72	40:72	4	;
EXPR_STATEMENT	41:1	41:70	3	purple_conversation_set_data ( conv , "notify-entry-signals" , entry_ids ) ;
EXPR	41:1	41:1	4	purple_conversation_set_data ( conv , "notify-entry-signals" , entry_ids )
FUNCTION_CALL	41:1	41:69	5	purple_conversation_set_data ( conv , "notify-entry-signals" , entry_ids )
CALLEE	41:1	41:1	6	purple_conversation_set_data
LEAF_NODE	41:1	41:1	7	purple_conversation_set_data
LEAF_NODE	41:29	41:29	6	(
ARGUMENT	41:30	41:30	6	conv
FIELD	41:30	41:30	7	conv
LEAF_NODE	41:30	41:30	8	conv
LEAF_NODE	41:34	41:34	6	,
ARGUMENT	41:36	41:36	6	"notify-entry-signals"
FIELD	41:36	41:36	7	"notify-entry-signals"
LEAF_NODE	41:36	41:36	8	"notify-entry-signals"
LEAF_NODE	41:58	41:58	6	,
ARGUMENT	41:60	41:60	6	entry_ids
FIELD	41:60	41:60	7	entry_ids
LEAF_NODE	41:60	41:60	8	entry_ids
LEAF_NODE	41:69	41:69	6	)
LEAF_NODE	41:70	41:70	4	;
JUMP_STATEMENT	42:1	42:9	3	return 0 ;
KEYWORD	42:1	42:1	4	return
LEAF_NODE	42:1	42:1	5	return
DESTINATION	42:8	42:8	4	0
EXPR	42:8	42:8	5	0
FIELD	42:8	42:8	6	0
LEAF_NODE	42:8	42:8	7	0
LEAF_NODE	42:9	42:9	4	;
LEAF_NODE	43:0	43:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	53:0	1	
RETURN_TYPE	2:0	2:27	2	static struct tooltip_data *
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:14	3	struct tooltip_data
LEAF_NODE	2:7	2:7	4	struct
LEAF_NODE	2:14	2:14	4	tooltip_data
LEAF_NODE	2:27	2:27	3	*
FUNCTION_NAME	2:29	2:29	2	create_tip_for_node
LEAF_NODE	2:29	2:29	3	create_tip_for_node
PARAMETER_LIST	2:48	2:85	2	( PurpleBlistNode * node , gboolean full )
LEAF_NODE	2:48	2:48	3	(
PARAMETER_DECL	2:49	2:66	3	PurpleBlistNode * node
TYPE	2:49	2:65	4	PurpleBlistNode *
TYPE_NAME	2:49	2:49	5	PurpleBlistNode
LEAF_NODE	2:49	2:49	6	PurpleBlistNode
POINTER	2:65	2:65	5	*
LEAF_NODE	2:65	2:65	6	*
NAME	2:66	2:66	4	node
LEAF_NODE	2:66	2:66	5	node
LEAF_NODE	2:70	2:70	3	,
PARAMETER_DECL	2:72	2:81	3	gboolean full
TYPE	2:72	2:72	4	gboolean
TYPE_NAME	2:72	2:72	5	gboolean
LEAF_NODE	2:72	2:72	6	gboolean
NAME	2:81	2:81	4	full
LEAF_NODE	2:81	2:81	5	full
LEAF_NODE	2:85	2:85	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	52:1	2	
LEAF_NODE	4:1	4:1	3	struct
LEAF_NODE	4:8	4:8	3	tooltip_data
LEAF_NODE	4:21	4:21	3	*
LEAF_NODE	4:22	4:22	3	td
LEAF_NODE	4:25	4:25	3	=
LEAF_NODE	4:27	4:27	3	g_new0
LEAF_NODE	4:33	4:33	3	(
LEAF_NODE	4:34	4:34	3	struct
LEAF_NODE	4:41	4:41	3	tooltip_data
LEAF_NODE	4:53	4:53	3	,
LEAF_NODE	4:55	4:55	3	1
LEAF_NODE	4:56	4:56	3	)
LEAF_NODE	4:57	4:57	3	;
SIMPLE_DECL	5:1	5:30	3	PurpleAccount * account ; account = NULL ;
VAR_DECL	5:1	5:16	4	PurpleAccount * account ; account = NULL
TYPE	5:1	5:15	5	PurpleAccount *
TYPE_NAME	5:1	5:1	6	PurpleAccount
LEAF_NODE	5:1	5:1	7	PurpleAccount
POINTER	5:15	5:15	6	*
LEAF_NODE	5:15	5:15	7	*
NAME	5:16	5:16	5	account
LEAF_NODE	5:16	5:16	6	account
LEAF_NODE	0:0	0:0	5	;
INIT	5:16	5:16	5	account = NULL
ASSIGN	5:16	5:26	6	account = NULL
LVAL	5:16	5:16	7	account
NAME	5:16	5:16	8	account
LEAF_NODE	5:16	5:16	9	account
ASSIGN_OP	5:24	5:24	7	=
LEAF_NODE	5:24	5:24	8	=
RVAL	5:26	5:26	7	NULL
FIELD	5:26	5:26	8	NULL
LEAF_NODE	5:26	5:26	9	NULL
LEAF_NODE	5:30	5:30	4	;
SIMPLE_DECL	6:1	6:58	3	char * tmp ; tmp = NULL , char * node_name ; node_name = NULL , char * tooltip_text ; tooltip_text = NULL ;
INIT_DECL_LIST	6:1	6:1	4	char * tmp ; tmp = NULL , char * node_name ; node_name = NULL , char * tooltip_text ; tooltip_text = NULL
VAR_DECL	6:1	6:7	5	char * tmp ; tmp = NULL
TYPE	6:1	6:6	6	char *
TYPE_NAME	6:1	6:1	7	char
LEAF_NODE	6:1	6:1	8	char
POINTER	6:6	6:6	7	*
LEAF_NODE	6:6	6:6	8	*
NAME	6:7	6:7	6	tmp
LEAF_NODE	6:7	6:7	7	tmp
LEAF_NODE	0:0	0:0	6	;
INIT	6:7	6:7	6	tmp = NULL
ASSIGN	6:7	6:13	7	tmp = NULL
LVAL	6:7	6:7	8	tmp
NAME	6:7	6:7	9	tmp
LEAF_NODE	6:7	6:7	10	tmp
ASSIGN_OP	6:11	6:11	8	=
LEAF_NODE	6:11	6:11	9	=
RVAL	6:13	6:13	8	NULL
FIELD	6:13	6:13	9	NULL
LEAF_NODE	6:13	6:13	10	NULL
LEAF_NODE	6:17	6:17	5	,
INIT_DECL_LIST	6:1	6:1	5	char * node_name ; node_name = NULL , char * tooltip_text ; tooltip_text = NULL
VAR_DECL	6:1	6:20	6	char * node_name ; node_name = NULL
TYPE	6:1	6:19	7	char *
TYPE_NAME	6:1	6:1	8	char
LEAF_NODE	6:1	6:1	9	char
POINTER	6:19	6:19	8	*
LEAF_NODE	6:19	6:19	9	*
NAME	6:20	6:20	7	node_name
LEAF_NODE	6:20	6:20	8	node_name
LEAF_NODE	0:0	0:0	7	;
INIT	6:20	6:20	7	node_name = NULL
ASSIGN	6:20	6:32	8	node_name = NULL
LVAL	6:20	6:20	9	node_name
NAME	6:20	6:20	10	node_name
LEAF_NODE	6:20	6:20	11	node_name
ASSIGN_OP	6:30	6:30	9	=
LEAF_NODE	6:30	6:30	10	=
RVAL	6:32	6:32	9	NULL
FIELD	6:32	6:32	10	NULL
LEAF_NODE	6:32	6:32	11	NULL
LEAF_NODE	6:36	6:36	6	,
VAR_DECL	6:1	6:39	6	char * tooltip_text ; tooltip_text = NULL
TYPE	6:1	6:38	7	char *
TYPE_NAME	6:1	6:1	8	char
LEAF_NODE	6:1	6:1	9	char
POINTER	6:38	6:38	8	*
LEAF_NODE	6:38	6:38	9	*
NAME	6:39	6:39	7	tooltip_text
LEAF_NODE	6:39	6:39	8	tooltip_text
LEAF_NODE	0:0	0:0	7	;
INIT	6:39	6:39	7	tooltip_text = NULL
ASSIGN	6:39	6:54	8	tooltip_text = NULL
LVAL	6:39	6:39	9	tooltip_text
NAME	6:39	6:39	10	tooltip_text
LEAF_NODE	6:39	6:39	11	tooltip_text
ASSIGN_OP	6:52	6:52	9	=
LEAF_NODE	6:52	6:52	10	=
RVAL	6:54	6:54	9	NULL
FIELD	6:54	6:54	10	NULL
LEAF_NODE	6:54	6:54	11	NULL
LEAF_NODE	6:58	6:58	4	;
SELECTION	7:1	7:39	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	PURPLE_BLIST_NODE_IS_BUDDY ( node )
EXPR	7:5	7:5	5	PURPLE_BLIST_NODE_IS_BUDDY ( node )
FUNCTION_CALL	7:5	7:36	6	PURPLE_BLIST_NODE_IS_BUDDY ( node )
CALLEE	7:5	7:5	7	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	7:5	7:5	8	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	7:31	7:31	7	(
ARGUMENT	7:32	7:32	7	node
FIELD	7:32	7:32	8	node
LEAF_NODE	7:32	7:32	9	node
LEAF_NODE	7:36	7:36	7	)
LEAF_NODE	7:37	7:37	4	)
STATEMENTS	7:39	9:1	4	
LEAF_NODE	7:39	7:39	5	{
STATEMENTS	8:2	8:36	5	
LEAF_NODE	8:2	8:2	6	account
LEAF_NODE	8:10	8:10	6	=
LEAF_NODE	8:12	8:12	6	(
LEAF_NODE	8:13	8:13	6	(
LEAF_NODE	8:14	8:14	6	PurpleBuddy
LEAF_NODE	8:25	8:25	6	*
LEAF_NODE	8:26	8:26	6	)
LEAF_NODE	8:27	8:27	6	(
LEAF_NODE	8:28	8:28	6	node
LEAF_NODE	8:32	8:32	6	)
LEAF_NODE	8:33	8:33	6	)
LEAF_NODE	8:34	8:34	6	->
EXPR_STATEMENT	8:36	8:43	6	account ;
EXPR	8:36	8:36	7	account
FIELD	8:36	8:36	8	account
LEAF_NODE	8:36	8:36	9	account
LEAF_NODE	8:43	8:43	7	;
LEAF_NODE	9:1	9:1	5	}
SELECTION	9:3	9:8	3	
KEYWORD	9:3	9:3	4	else
LEAF_NODE	9:3	9:3	5	else
STATEMENTS	9:8	9:8	4	
SELECTION	9:8	9:45	5	
KEYWORD	9:8	9:8	6	if
LEAF_NODE	9:8	9:8	7	if
LEAF_NODE	9:11	9:11	6	(
CONDITION	9:12	9:12	6	PURPLE_BLIST_NODE_IS_CHAT ( node )
EXPR	9:12	9:12	7	PURPLE_BLIST_NODE_IS_CHAT ( node )
FUNCTION_CALL	9:12	9:42	8	PURPLE_BLIST_NODE_IS_CHAT ( node )
CALLEE	9:12	9:12	9	PURPLE_BLIST_NODE_IS_CHAT
LEAF_NODE	9:12	9:12	10	PURPLE_BLIST_NODE_IS_CHAT
LEAF_NODE	9:37	9:37	9	(
ARGUMENT	9:38	9:38	9	node
FIELD	9:38	9:38	10	node
LEAF_NODE	9:38	9:38	11	node
LEAF_NODE	9:42	9:42	9	)
LEAF_NODE	9:43	9:43	6	)
STATEMENTS	9:45	11:1	6	
LEAF_NODE	9:45	9:45	7	{
STATEMENTS	10:2	10:35	7	
LEAF_NODE	10:2	10:2	8	account
LEAF_NODE	10:10	10:10	8	=
LEAF_NODE	10:12	10:12	8	(
LEAF_NODE	10:13	10:13	8	(
LEAF_NODE	10:14	10:14	8	PurpleChat
LEAF_NODE	10:24	10:24	8	*
LEAF_NODE	10:25	10:25	8	)
LEAF_NODE	10:26	10:26	8	(
LEAF_NODE	10:27	10:27	8	node
LEAF_NODE	10:31	10:31	8	)
LEAF_NODE	10:32	10:32	8	)
LEAF_NODE	10:33	10:33	8	->
EXPR_STATEMENT	10:35	10:42	8	account ;
EXPR	10:35	10:35	9	account
FIELD	10:35	10:35	10	account
LEAF_NODE	10:35	10:35	11	account
LEAF_NODE	10:42	10:42	9	;
LEAF_NODE	11:1	11:1	7	}
EXPR_STATEMENT	12:1	12:29	3	td -> padding = TOOLTIP_BORDER ;
EXPR	12:1	12:1	4	td -> padding = TOOLTIP_BORDER
ASSIGN	12:1	12:15	5	td -> padding = TOOLTIP_BORDER
LVAL	12:1	12:1	6	td -> padding
FIELD	12:1	12:5	7	td -> padding
LEAF_NODE	12:1	12:1	8	td
LEAF_NODE	12:3	12:3	8	->
LEAF_NODE	12:5	12:5	8	padding
ASSIGN_OP	12:13	12:13	6	=
LEAF_NODE	12:13	12:13	7	=
RVAL	12:15	12:15	6	TOOLTIP_BORDER
FIELD	12:15	12:15	7	TOOLTIP_BORDER
LEAF_NODE	12:15	12:15	8	TOOLTIP_BORDER
LEAF_NODE	12:29	12:29	4	;
EXPR_STATEMENT	13:1	13:79	3	td -> status_icon = pidgin_blist_get_status_icon ( node , PIDGIN_STATUS_ICON_LARGE ) ;
EXPR	13:1	13:1	4	td -> status_icon = pidgin_blist_get_status_icon ( node , PIDGIN_STATUS_ICON_LARGE )
ASSIGN	13:1	13:19	5	td -> status_icon = pidgin_blist_get_status_icon ( node , PIDGIN_STATUS_ICON_LARGE )
LVAL	13:1	13:1	6	td -> status_icon
FIELD	13:1	13:5	7	td -> status_icon
LEAF_NODE	13:1	13:1	8	td
LEAF_NODE	13:3	13:3	8	->
LEAF_NODE	13:5	13:5	8	status_icon
ASSIGN_OP	13:17	13:17	6	=
LEAF_NODE	13:17	13:17	7	=
RVAL	13:19	13:19	6	pidgin_blist_get_status_icon ( node , PIDGIN_STATUS_ICON_LARGE )
FUNCTION_CALL	13:19	13:78	7	pidgin_blist_get_status_icon ( node , PIDGIN_STATUS_ICON_LARGE )
CALLEE	13:19	13:19	8	pidgin_blist_get_status_icon
LEAF_NODE	13:19	13:19	9	pidgin_blist_get_status_icon
LEAF_NODE	13:47	13:47	8	(
ARGUMENT	13:48	13:48	8	node
FIELD	13:48	13:48	9	node
LEAF_NODE	13:48	13:48	10	node
LEAF_NODE	13:52	13:52	8	,
ARGUMENT	13:54	13:54	8	PIDGIN_STATUS_ICON_LARGE
FIELD	13:54	13:54	9	PIDGIN_STATUS_ICON_LARGE
LEAF_NODE	13:54	13:54	10	PIDGIN_STATUS_ICON_LARGE
LEAF_NODE	13:78	13:78	8	)
LEAF_NODE	13:79	13:79	4	;
EXPR_STATEMENT	14:1	14:61	3	td -> avatar = pidgin_blist_get_buddy_icon ( node , ! full , FALSE ) ;
EXPR	14:1	14:1	4	td -> avatar = pidgin_blist_get_buddy_icon ( node , ! full , FALSE )
ASSIGN	14:1	14:14	5	td -> avatar = pidgin_blist_get_buddy_icon ( node , ! full , FALSE )
LVAL	14:1	14:1	6	td -> avatar
FIELD	14:1	14:5	7	td -> avatar
LEAF_NODE	14:1	14:1	8	td
LEAF_NODE	14:3	14:3	8	->
LEAF_NODE	14:5	14:5	8	avatar
ASSIGN_OP	14:12	14:12	6	=
LEAF_NODE	14:12	14:12	7	=
RVAL	14:14	14:14	6	pidgin_blist_get_buddy_icon ( node , ! full , FALSE )
FUNCTION_CALL	14:14	14:60	7	pidgin_blist_get_buddy_icon ( node , ! full , FALSE )
CALLEE	14:14	14:14	8	pidgin_blist_get_buddy_icon
LEAF_NODE	14:14	14:14	9	pidgin_blist_get_buddy_icon
LEAF_NODE	14:41	14:41	8	(
ARGUMENT	14:42	14:42	8	node
FIELD	14:42	14:42	9	node
LEAF_NODE	14:42	14:42	10	node
LEAF_NODE	14:46	14:46	8	,
ARGUMENT	14:48	14:48	8	! full
UNARY_EXPR	14:48	14:49	9	! full
UNARY_OPERATOR	14:48	14:48	10	!
LEAF_NODE	14:48	14:48	11	!
FIELD	14:49	14:49	10	full
LEAF_NODE	14:49	14:49	11	full
LEAF_NODE	14:53	14:53	8	,
ARGUMENT	14:55	14:55	8	FALSE
FIELD	14:55	14:55	9	FALSE
LEAF_NODE	14:55	14:55	10	FALSE
LEAF_NODE	14:60	14:60	8	)
LEAF_NODE	14:61	14:61	4	;
SELECTION	15:1	15:22	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:4	15:4	4	(
CONDITION	15:5	15:5	4	account != NULL
EXPR	15:5	15:16	5	account != NULL
FIELD	15:5	15:5	6	account
LEAF_NODE	15:5	15:5	7	account
EQ_OPERATOR	15:13	15:13	6	!=
LEAF_NODE	15:13	15:13	7	!=
FIELD	15:16	15:16	6	NULL
LEAF_NODE	15:16	15:16	7	NULL
LEAF_NODE	15:20	15:20	4	)
STATEMENTS	15:22	17:1	4	
LEAF_NODE	15:22	15:22	5	{
STATEMENTS	16:2	16:2	5	
EXPR_STATEMENT	16:2	16:74	6	td -> prpl_icon = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL ) ;
EXPR	16:2	16:2	7	td -> prpl_icon = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
ASSIGN	16:2	16:18	8	td -> prpl_icon = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
LVAL	16:2	16:2	9	td -> prpl_icon
FIELD	16:2	16:6	10	td -> prpl_icon
LEAF_NODE	16:2	16:2	11	td
LEAF_NODE	16:4	16:4	11	->
LEAF_NODE	16:6	16:6	11	prpl_icon
ASSIGN_OP	16:16	16:16	9	=
LEAF_NODE	16:16	16:16	10	=
RVAL	16:18	16:18	9	pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
FUNCTION_CALL	16:18	16:73	10	pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
CALLEE	16:18	16:18	11	pidgin_create_prpl_icon
LEAF_NODE	16:18	16:18	12	pidgin_create_prpl_icon
LEAF_NODE	16:41	16:41	11	(
ARGUMENT	16:42	16:42	11	account
FIELD	16:42	16:42	12	account
LEAF_NODE	16:42	16:42	13	account
LEAF_NODE	16:49	16:49	11	,
ARGUMENT	16:51	16:51	11	PIDGIN_PRPL_ICON_SMALL
FIELD	16:51	16:51	12	PIDGIN_PRPL_ICON_SMALL
LEAF_NODE	16:51	16:51	13	PIDGIN_PRPL_ICON_SMALL
LEAF_NODE	16:73	16:73	11	)
LEAF_NODE	16:74	16:74	7	;
LEAF_NODE	17:1	17:1	5	}
EXPR_STATEMENT	18:1	18:51	3	tooltip_text = pidgin_get_tooltip_text ( node , full ) ;
EXPR	18:1	18:1	4	tooltip_text = pidgin_get_tooltip_text ( node , full )
ASSIGN	18:1	18:16	5	tooltip_text = pidgin_get_tooltip_text ( node , full )
LVAL	18:1	18:1	6	tooltip_text
FIELD	18:1	18:1	7	tooltip_text
LEAF_NODE	18:1	18:1	8	tooltip_text
ASSIGN_OP	18:14	18:14	6	=
LEAF_NODE	18:14	18:14	7	=
RVAL	18:16	18:16	6	pidgin_get_tooltip_text ( node , full )
FUNCTION_CALL	18:16	18:50	7	pidgin_get_tooltip_text ( node , full )
CALLEE	18:16	18:16	8	pidgin_get_tooltip_text
LEAF_NODE	18:16	18:16	9	pidgin_get_tooltip_text
LEAF_NODE	18:39	18:39	8	(
ARGUMENT	18:40	18:40	8	node
FIELD	18:40	18:40	9	node
LEAF_NODE	18:40	18:40	10	node
LEAF_NODE	18:44	18:44	8	,
ARGUMENT	18:46	18:46	8	full
FIELD	18:46	18:46	9	full
LEAF_NODE	18:46	18:46	10	full
LEAF_NODE	18:50	18:50	8	)
LEAF_NODE	18:51	18:51	4	;
SELECTION	19:1	19:36	3	
KEYWORD	19:1	19:1	4	if
LEAF_NODE	19:1	19:1	5	if
LEAF_NODE	19:4	19:4	4	(
CONDITION	19:5	19:5	4	tooltip_text && * tooltip_text
EXPR	19:5	19:5	5	tooltip_text && * tooltip_text
AND	19:5	19:21	6	tooltip_text && * tooltip_text
EXPR	19:5	19:5	7	tooltip_text
FIELD	19:5	19:5	8	tooltip_text
LEAF_NODE	19:5	19:5	9	tooltip_text
LEAF_NODE	19:18	19:18	7	&&
EXPR	19:21	19:21	7	* tooltip_text
UNARY_EXPR	19:21	19:22	8	* tooltip_text
UNARY_OPERATOR	19:21	19:21	9	*
LEAF_NODE	19:21	19:21	10	*
FIELD	19:22	19:22	9	tooltip_text
LEAF_NODE	19:22	19:22	10	tooltip_text
LEAF_NODE	19:34	19:34	4	)
STATEMENTS	19:36	21:1	4	
LEAF_NODE	19:36	19:36	5	{
STATEMENTS	20:2	20:2	5	
EXPR_STATEMENT	20:2	20:73	6	td -> layout = create_pango_layout ( tooltip_text , & td -> width , & td -> height ) ;
EXPR	20:2	20:2	7	td -> layout = create_pango_layout ( tooltip_text , & td -> width , & td -> height )
ASSIGN	20:2	20:15	8	td -> layout = create_pango_layout ( tooltip_text , & td -> width , & td -> height )
LVAL	20:2	20:2	9	td -> layout
FIELD	20:2	20:6	10	td -> layout
LEAF_NODE	20:2	20:2	11	td
LEAF_NODE	20:4	20:4	11	->
LEAF_NODE	20:6	20:6	11	layout
ASSIGN_OP	20:13	20:13	9	=
LEAF_NODE	20:13	20:13	10	=
RVAL	20:15	20:15	9	create_pango_layout ( tooltip_text , & td -> width , & td -> height )
FUNCTION_CALL	20:15	20:72	10	create_pango_layout ( tooltip_text , & td -> width , & td -> height )
CALLEE	20:15	20:15	11	create_pango_layout
LEAF_NODE	20:15	20:15	12	create_pango_layout
LEAF_NODE	20:34	20:34	11	(
ARGUMENT	20:35	20:35	11	tooltip_text
FIELD	20:35	20:35	12	tooltip_text
LEAF_NODE	20:35	20:35	13	tooltip_text
LEAF_NODE	20:47	20:47	11	,
ARGUMENT	20:49	20:49	11	& td -> width
UNARY_EXPR	20:49	20:50	12	& td -> width
UNARY_OPERATOR	20:49	20:49	13	&
LEAF_NODE	20:49	20:49	14	&
FIELD	20:50	20:54	13	td -> width
LEAF_NODE	20:50	20:50	14	td
LEAF_NODE	20:52	20:52	14	->
LEAF_NODE	20:54	20:54	14	width
LEAF_NODE	20:59	20:59	11	,
ARGUMENT	20:61	20:61	11	& td -> height
UNARY_EXPR	20:61	20:62	12	& td -> height
UNARY_OPERATOR	20:61	20:61	13	&
LEAF_NODE	20:61	20:61	14	&
FIELD	20:62	20:66	13	td -> height
LEAF_NODE	20:62	20:62	14	td
LEAF_NODE	20:64	20:64	14	->
LEAF_NODE	20:66	20:66	14	height
LEAF_NODE	20:72	20:72	11	)
LEAF_NODE	20:73	20:73	7	;
LEAF_NODE	21:1	21:1	5	}
SELECTION	22:1	22:39	3	
KEYWORD	22:1	22:1	4	if
LEAF_NODE	22:1	22:1	5	if
LEAF_NODE	22:4	22:4	4	(
CONDITION	22:5	22:5	4	PURPLE_BLIST_NODE_IS_BUDDY ( node )
EXPR	22:5	22:5	5	PURPLE_BLIST_NODE_IS_BUDDY ( node )
FUNCTION_CALL	22:5	22:36	6	PURPLE_BLIST_NODE_IS_BUDDY ( node )
CALLEE	22:5	22:5	7	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	22:5	22:5	8	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	22:31	22:31	7	(
ARGUMENT	22:32	22:32	7	node
FIELD	22:32	22:32	8	node
LEAF_NODE	22:32	22:32	9	node
LEAF_NODE	22:36	22:36	7	)
LEAF_NODE	22:37	22:37	4	)
STATEMENTS	22:39	24:1	4	
LEAF_NODE	22:39	22:39	5	{
STATEMENTS	23:2	23:2	5	
EXPR_STATEMENT	23:2	23:75	6	tmp = g_markup_escape_text ( purple_buddy_get_name ( ( PurpleBuddy * ) node ) , - 1 ) ;
EXPR	23:2	23:2	7	tmp = g_markup_escape_text ( purple_buddy_get_name ( ( PurpleBuddy * ) node ) , - 1 )
ASSIGN	23:2	23:8	8	tmp = g_markup_escape_text ( purple_buddy_get_name ( ( PurpleBuddy * ) node ) , - 1 )
LVAL	23:2	23:2	9	tmp
FIELD	23:2	23:2	10	tmp
LEAF_NODE	23:2	23:2	11	tmp
ASSIGN_OP	23:6	23:6	9	=
LEAF_NODE	23:6	23:6	10	=
RVAL	23:8	23:8	9	g_markup_escape_text ( purple_buddy_get_name ( ( PurpleBuddy * ) node ) , - 1 )
FUNCTION_CALL	23:8	23:74	10	g_markup_escape_text ( purple_buddy_get_name ( ( PurpleBuddy * ) node ) , - 1 )
CALLEE	23:8	23:8	11	g_markup_escape_text
LEAF_NODE	23:8	23:8	12	g_markup_escape_text
LEAF_NODE	23:28	23:28	11	(
ARGUMENT	23:29	23:29	11	purple_buddy_get_name ( ( PurpleBuddy * ) node )
FUNCTION_CALL	23:29	23:69	12	purple_buddy_get_name ( ( PurpleBuddy * ) node )
CALLEE	23:29	23:29	13	purple_buddy_get_name
LEAF_NODE	23:29	23:29	14	purple_buddy_get_name
LEAF_NODE	23:50	23:50	13	(
ARGUMENT	23:51	23:65	13	( PurpleBuddy * ) node
LEAF_NODE	23:51	23:51	14	(
TYPE_NAME	23:52	23:52	14	PurpleBuddy
LEAF_NODE	23:52	23:52	15	PurpleBuddy
LEAF_NODE	23:63	23:63	14	*
LEAF_NODE	23:64	23:64	14	)
FIELD	23:65	23:65	14	node
LEAF_NODE	23:65	23:65	15	node
LEAF_NODE	23:69	23:69	13	)
LEAF_NODE	23:70	23:70	11	,
ARGUMENT	23:72	23:72	11	- 1
UNARY_EXPR	23:72	23:73	12	- 1
UNARY_OPERATOR	23:72	23:72	13	-
LEAF_NODE	23:72	23:72	14	-
FIELD	23:73	23:73	13	1
LEAF_NODE	23:73	23:73	14	1
LEAF_NODE	23:74	23:74	11	)
LEAF_NODE	23:75	23:75	7	;
LEAF_NODE	24:1	24:1	5	}
SELECTION	24:3	24:8	3	
KEYWORD	24:3	24:3	4	else
LEAF_NODE	24:3	24:3	5	else
STATEMENTS	24:8	24:8	4	
SELECTION	24:8	24:45	5	
KEYWORD	24:8	24:8	6	if
LEAF_NODE	24:8	24:8	7	if
LEAF_NODE	24:11	24:11	6	(
CONDITION	24:12	24:12	6	PURPLE_BLIST_NODE_IS_CHAT ( node )
EXPR	24:12	24:12	7	PURPLE_BLIST_NODE_IS_CHAT ( node )
FUNCTION_CALL	24:12	24:42	8	PURPLE_BLIST_NODE_IS_CHAT ( node )
CALLEE	24:12	24:12	9	PURPLE_BLIST_NODE_IS_CHAT
LEAF_NODE	24:12	24:12	10	PURPLE_BLIST_NODE_IS_CHAT
LEAF_NODE	24:37	24:37	9	(
ARGUMENT	24:38	24:38	9	node
FIELD	24:38	24:38	10	node
LEAF_NODE	24:38	24:38	11	node
LEAF_NODE	24:42	24:42	9	)
LEAF_NODE	24:43	24:43	6	)
STATEMENTS	24:45	26:1	6	
LEAF_NODE	24:45	24:45	7	{
STATEMENTS	25:2	25:2	7	
EXPR_STATEMENT	25:2	25:73	8	tmp = g_markup_escape_text ( purple_chat_get_name ( ( PurpleChat * ) node ) , - 1 ) ;
EXPR	25:2	25:2	9	tmp = g_markup_escape_text ( purple_chat_get_name ( ( PurpleChat * ) node ) , - 1 )
ASSIGN	25:2	25:8	10	tmp = g_markup_escape_text ( purple_chat_get_name ( ( PurpleChat * ) node ) , - 1 )
LVAL	25:2	25:2	11	tmp
FIELD	25:2	25:2	12	tmp
LEAF_NODE	25:2	25:2	13	tmp
ASSIGN_OP	25:6	25:6	11	=
LEAF_NODE	25:6	25:6	12	=
RVAL	25:8	25:8	11	g_markup_escape_text ( purple_chat_get_name ( ( PurpleChat * ) node ) , - 1 )
FUNCTION_CALL	25:8	25:72	12	g_markup_escape_text ( purple_chat_get_name ( ( PurpleChat * ) node ) , - 1 )
CALLEE	25:8	25:8	13	g_markup_escape_text
LEAF_NODE	25:8	25:8	14	g_markup_escape_text
LEAF_NODE	25:28	25:28	13	(
ARGUMENT	25:29	25:29	13	purple_chat_get_name ( ( PurpleChat * ) node )
FUNCTION_CALL	25:29	25:67	14	purple_chat_get_name ( ( PurpleChat * ) node )
CALLEE	25:29	25:29	15	purple_chat_get_name
LEAF_NODE	25:29	25:29	16	purple_chat_get_name
LEAF_NODE	25:49	25:49	15	(
ARGUMENT	25:50	25:63	15	( PurpleChat * ) node
LEAF_NODE	25:50	25:50	16	(
TYPE_NAME	25:51	25:51	16	PurpleChat
LEAF_NODE	25:51	25:51	17	PurpleChat
LEAF_NODE	25:61	25:61	16	*
LEAF_NODE	25:62	25:62	16	)
FIELD	25:63	25:63	16	node
LEAF_NODE	25:63	25:63	17	node
LEAF_NODE	25:67	25:67	15	)
LEAF_NODE	25:68	25:68	13	,
ARGUMENT	25:70	25:70	13	- 1
UNARY_EXPR	25:70	25:71	14	- 1
UNARY_OPERATOR	25:70	25:70	15	-
LEAF_NODE	25:70	25:70	16	-
FIELD	25:71	25:71	15	1
LEAF_NODE	25:71	25:71	16	1
LEAF_NODE	25:72	25:72	13	)
LEAF_NODE	25:73	25:73	9	;
LEAF_NODE	26:1	26:1	7	}
SELECTION	26:3	26:8	3	
KEYWORD	26:3	26:3	4	else
LEAF_NODE	26:3	26:3	5	else
STATEMENTS	26:8	26:8	4	
SELECTION	26:8	26:46	5	
KEYWORD	26:8	26:8	6	if
LEAF_NODE	26:8	26:8	7	if
LEAF_NODE	26:11	26:11	6	(
CONDITION	26:12	26:12	6	PURPLE_BLIST_NODE_IS_GROUP ( node )
EXPR	26:12	26:12	7	PURPLE_BLIST_NODE_IS_GROUP ( node )
FUNCTION_CALL	26:12	26:43	8	PURPLE_BLIST_NODE_IS_GROUP ( node )
CALLEE	26:12	26:12	9	PURPLE_BLIST_NODE_IS_GROUP
LEAF_NODE	26:12	26:12	10	PURPLE_BLIST_NODE_IS_GROUP
LEAF_NODE	26:38	26:38	9	(
ARGUMENT	26:39	26:39	9	node
FIELD	26:39	26:39	10	node
LEAF_NODE	26:39	26:39	11	node
LEAF_NODE	26:43	26:43	9	)
LEAF_NODE	26:44	26:44	6	)
STATEMENTS	26:46	28:1	6	
LEAF_NODE	26:46	26:46	7	{
STATEMENTS	27:2	27:2	7	
EXPR_STATEMENT	27:2	27:75	8	tmp = g_markup_escape_text ( purple_group_get_name ( ( PurpleGroup * ) node ) , - 1 ) ;
EXPR	27:2	27:2	9	tmp = g_markup_escape_text ( purple_group_get_name ( ( PurpleGroup * ) node ) , - 1 )
ASSIGN	27:2	27:8	10	tmp = g_markup_escape_text ( purple_group_get_name ( ( PurpleGroup * ) node ) , - 1 )
LVAL	27:2	27:2	11	tmp
FIELD	27:2	27:2	12	tmp
LEAF_NODE	27:2	27:2	13	tmp
ASSIGN_OP	27:6	27:6	11	=
LEAF_NODE	27:6	27:6	12	=
RVAL	27:8	27:8	11	g_markup_escape_text ( purple_group_get_name ( ( PurpleGroup * ) node ) , - 1 )
FUNCTION_CALL	27:8	27:74	12	g_markup_escape_text ( purple_group_get_name ( ( PurpleGroup * ) node ) , - 1 )
CALLEE	27:8	27:8	13	g_markup_escape_text
LEAF_NODE	27:8	27:8	14	g_markup_escape_text
LEAF_NODE	27:28	27:28	13	(
ARGUMENT	27:29	27:29	13	purple_group_get_name ( ( PurpleGroup * ) node )
FUNCTION_CALL	27:29	27:69	14	purple_group_get_name ( ( PurpleGroup * ) node )
CALLEE	27:29	27:29	15	purple_group_get_name
LEAF_NODE	27:29	27:29	16	purple_group_get_name
LEAF_NODE	27:50	27:50	15	(
ARGUMENT	27:51	27:65	15	( PurpleGroup * ) node
LEAF_NODE	27:51	27:51	16	(
TYPE_NAME	27:52	27:52	16	PurpleGroup
LEAF_NODE	27:52	27:52	17	PurpleGroup
LEAF_NODE	27:63	27:63	16	*
LEAF_NODE	27:64	27:64	16	)
FIELD	27:65	27:65	16	node
LEAF_NODE	27:65	27:65	17	node
LEAF_NODE	27:69	27:69	15	)
LEAF_NODE	27:70	27:70	13	,
ARGUMENT	27:72	27:72	13	- 1
UNARY_EXPR	27:72	27:73	14	- 1
UNARY_OPERATOR	27:72	27:72	15	-
LEAF_NODE	27:72	27:72	16	-
FIELD	27:73	27:73	15	1
LEAF_NODE	27:73	27:73	16	1
LEAF_NODE	27:74	27:74	13	)
LEAF_NODE	27:75	27:75	9	;
LEAF_NODE	28:1	28:1	7	}
SELECTION	28:3	28:8	3	
KEYWORD	28:3	28:3	4	else
LEAF_NODE	28:3	28:3	5	else
STATEMENTS	28:8	33:1	4	
LEAF_NODE	28:8	28:8	5	{
STATEMENTS	32:2	32:2	5	
EXPR_STATEMENT	32:2	32:40	6	tmp = g_strdup ( _ ( "Unknown node type" ) ) ;
EXPR	32:2	32:2	7	tmp = g_strdup ( _ ( "Unknown node type" ) )
ASSIGN	32:2	32:8	8	tmp = g_strdup ( _ ( "Unknown node type" ) )
LVAL	32:2	32:2	9	tmp
FIELD	32:2	32:2	10	tmp
LEAF_NODE	32:2	32:2	11	tmp
ASSIGN_OP	32:6	32:6	9	=
LEAF_NODE	32:6	32:6	10	=
RVAL	32:8	32:8	9	g_strdup ( _ ( "Unknown node type" ) )
FUNCTION_CALL	32:8	32:39	10	g_strdup ( _ ( "Unknown node type" ) )
CALLEE	32:8	32:8	11	g_strdup
LEAF_NODE	32:8	32:8	12	g_strdup
LEAF_NODE	32:16	32:16	11	(
ARGUMENT	32:17	32:17	11	_ ( "Unknown node type" )
FUNCTION_CALL	32:17	32:38	12	_ ( "Unknown node type" )
CALLEE	32:17	32:17	13	_
LEAF_NODE	32:17	32:17	14	_
LEAF_NODE	32:18	32:18	13	(
ARGUMENT	32:19	32:19	13	"Unknown node type"
FIELD	32:19	32:19	14	"Unknown node type"
LEAF_NODE	32:19	32:19	15	"Unknown node type"
LEAF_NODE	32:38	32:38	13	)
LEAF_NODE	32:39	32:39	11	)
LEAF_NODE	32:40	32:40	7	;
LEAF_NODE	33:1	33:1	5	}
EXPR_STATEMENT	34:1	35:23	3	node_name = g_strdup_printf ( "<span size='x-large' weight='bold'>%s</span>" , tmp ? tmp : "" ) ;
EXPR	34:1	34:1	4	node_name = g_strdup_printf ( "<span size='x-large' weight='bold'>%s</span>" , tmp ? tmp : "" )
ASSIGN	34:1	34:13	5	node_name = g_strdup_printf ( "<span size='x-large' weight='bold'>%s</span>" , tmp ? tmp : "" )
LVAL	34:1	34:1	6	node_name
FIELD	34:1	34:1	7	node_name
LEAF_NODE	34:1	34:1	8	node_name
ASSIGN_OP	34:11	34:11	6	=
LEAF_NODE	34:11	34:11	7	=
RVAL	34:13	34:13	6	g_strdup_printf ( "<span size='x-large' weight='bold'>%s</span>" , tmp ? tmp : "" )
FUNCTION_CALL	34:13	35:22	7	g_strdup_printf ( "<span size='x-large' weight='bold'>%s</span>" , tmp ? tmp : "" )
CALLEE	34:13	34:13	8	g_strdup_printf
LEAF_NODE	34:13	34:13	9	g_strdup_printf
LEAF_NODE	34:28	34:28	8	(
ARGUMENT	34:29	34:29	8	"<span size='x-large' weight='bold'>%s</span>"
FIELD	34:29	34:29	9	"<span size='x-large' weight='bold'>%s</span>"
LEAF_NODE	34:29	34:29	10	"<span size='x-large' weight='bold'>%s</span>"
LEAF_NODE	34:75	34:75	8	,
ARGUMENT	35:8	35:8	8	tmp ? tmp : ""
COND_EXPR	35:8	35:20	9	tmp ? tmp : ""
CONDITION	35:8	35:8	10	tmp
FIELD	35:8	35:8	11	tmp
LEAF_NODE	35:8	35:8	12	tmp
LEAF_NODE	35:12	35:12	10	?
EXPR	35:14	35:14	10	tmp
FIELD	35:14	35:14	11	tmp
LEAF_NODE	35:14	35:14	12	tmp
LEAF_NODE	35:18	35:18	10	:
FIELD	35:20	35:20	10	""
LEAF_NODE	35:20	35:20	11	""
LEAF_NODE	35:22	35:22	8	)
LEAF_NODE	35:23	35:23	4	;
EXPR_STATEMENT	36:1	36:12	3	g_free ( tmp ) ;
EXPR	36:1	36:1	4	g_free ( tmp )
FUNCTION_CALL	36:1	36:11	5	g_free ( tmp )
CALLEE	36:1	36:1	6	g_free
LEAF_NODE	36:1	36:1	7	g_free
LEAF_NODE	36:7	36:7	6	(
ARGUMENT	36:8	36:8	6	tmp
FIELD	36:8	36:8	7	tmp
LEAF_NODE	36:8	36:8	8	tmp
LEAF_NODE	36:11	36:11	6	)
LEAF_NODE	36:12	36:12	4	;
EXPR_STATEMENT	37:1	37:84	3	td -> name_layout = create_pango_layout ( node_name , & td -> name_width , & td -> name_height ) ;
EXPR	37:1	37:1	4	td -> name_layout = create_pango_layout ( node_name , & td -> name_width , & td -> name_height )
ASSIGN	37:1	37:19	5	td -> name_layout = create_pango_layout ( node_name , & td -> name_width , & td -> name_height )
LVAL	37:1	37:1	6	td -> name_layout
FIELD	37:1	37:5	7	td -> name_layout
LEAF_NODE	37:1	37:1	8	td
LEAF_NODE	37:3	37:3	8	->
LEAF_NODE	37:5	37:5	8	name_layout
ASSIGN_OP	37:17	37:17	6	=
LEAF_NODE	37:17	37:17	7	=
RVAL	37:19	37:19	6	create_pango_layout ( node_name , & td -> name_width , & td -> name_height )
FUNCTION_CALL	37:19	37:83	7	create_pango_layout ( node_name , & td -> name_width , & td -> name_height )
CALLEE	37:19	37:19	8	create_pango_layout
LEAF_NODE	37:19	37:19	9	create_pango_layout
LEAF_NODE	37:38	37:38	8	(
ARGUMENT	37:39	37:39	8	node_name
FIELD	37:39	37:39	9	node_name
LEAF_NODE	37:39	37:39	10	node_name
LEAF_NODE	37:48	37:48	8	,
ARGUMENT	37:50	37:50	8	& td -> name_width
UNARY_EXPR	37:50	37:51	9	& td -> name_width
UNARY_OPERATOR	37:50	37:50	10	&
LEAF_NODE	37:50	37:50	11	&
FIELD	37:51	37:55	10	td -> name_width
LEAF_NODE	37:51	37:51	11	td
LEAF_NODE	37:53	37:53	11	->
LEAF_NODE	37:55	37:55	11	name_width
LEAF_NODE	37:65	37:65	8	,
ARGUMENT	37:67	37:67	8	& td -> name_height
UNARY_EXPR	37:67	37:68	9	& td -> name_height
UNARY_OPERATOR	37:67	37:67	10	&
LEAF_NODE	37:67	37:67	11	&
FIELD	37:68	37:72	10	td -> name_height
LEAF_NODE	37:68	37:68	11	td
LEAF_NODE	37:70	37:70	11	->
LEAF_NODE	37:72	37:72	11	name_height
LEAF_NODE	37:83	37:83	8	)
LEAF_NODE	37:84	37:84	4	;
EXPR_STATEMENT	38:1	38:42	3	td -> name_width += SMALL_SPACE + PRPL_SIZE ;
EXPR	38:1	38:1	4	td -> name_width += SMALL_SPACE + PRPL_SIZE
ASSIGN	38:1	38:19	5	td -> name_width += SMALL_SPACE + PRPL_SIZE
LVAL	38:1	38:1	6	td -> name_width
FIELD	38:1	38:5	7	td -> name_width
LEAF_NODE	38:1	38:1	8	td
LEAF_NODE	38:3	38:3	8	->
LEAF_NODE	38:5	38:5	8	name_width
ASSIGN_OP	38:16	38:16	6	+=
LEAF_NODE	38:16	38:16	7	+=
RVAL	38:19	38:33	6	SMALL_SPACE + PRPL_SIZE
FIELD	38:19	38:19	7	SMALL_SPACE
LEAF_NODE	38:19	38:19	8	SMALL_SPACE
LEAF_NODE	38:31	38:31	7	+
FIELD	38:33	38:33	7	PRPL_SIZE
LEAF_NODE	38:33	38:33	8	PRPL_SIZE
LEAF_NODE	38:42	38:42	4	;
EXPR_STATEMENT	39:1	39:64	3	td -> name_height = MAX ( td -> name_height , PRPL_SIZE + SMALL_SPACE ) ;
EXPR	39:1	39:1	4	td -> name_height = MAX ( td -> name_height , PRPL_SIZE + SMALL_SPACE )
ASSIGN	39:1	39:19	5	td -> name_height = MAX ( td -> name_height , PRPL_SIZE + SMALL_SPACE )
LVAL	39:1	39:1	6	td -> name_height
FIELD	39:1	39:5	7	td -> name_height
LEAF_NODE	39:1	39:1	8	td
LEAF_NODE	39:3	39:3	8	->
LEAF_NODE	39:5	39:5	8	name_height
ASSIGN_OP	39:17	39:17	6	=
LEAF_NODE	39:17	39:17	7	=
RVAL	39:19	39:19	6	MAX ( td -> name_height , PRPL_SIZE + SMALL_SPACE )
FUNCTION_CALL	39:19	39:63	7	MAX ( td -> name_height , PRPL_SIZE + SMALL_SPACE )
CALLEE	39:19	39:19	8	MAX
LEAF_NODE	39:19	39:19	9	MAX
LEAF_NODE	39:22	39:22	8	(
ARGUMENT	39:23	39:23	8	td -> name_height
FIELD	39:23	39:27	9	td -> name_height
LEAF_NODE	39:23	39:23	10	td
LEAF_NODE	39:25	39:25	10	->
LEAF_NODE	39:27	39:27	10	name_height
LEAF_NODE	39:38	39:38	8	,
ARGUMENT	39:40	39:52	8	PRPL_SIZE + SMALL_SPACE
FIELD	39:40	39:40	9	PRPL_SIZE
LEAF_NODE	39:40	39:40	10	PRPL_SIZE
LEAF_NODE	39:50	39:50	9	+
FIELD	39:52	39:52	9	SMALL_SPACE
LEAF_NODE	39:52	39:52	10	SMALL_SPACE
LEAF_NODE	39:63	39:63	8	)
LEAF_NODE	39:64	39:64	4	;
SELECTION	41:1	41:25	3	
KEYWORD	41:1	41:1	4	if
LEAF_NODE	41:1	41:1	5	if
LEAF_NODE	41:3	41:3	4	(
CONDITION	41:4	41:4	4	! td -> avatar && full
EXPR	41:4	41:4	5	! td -> avatar && full
AND	41:4	41:19	6	! td -> avatar && full
EXPR	41:4	41:4	7	! td -> avatar
UNARY_EXPR	41:4	41:5	8	! td -> avatar
UNARY_OPERATOR	41:4	41:4	9	!
LEAF_NODE	41:4	41:4	10	!
FIELD	41:5	41:9	9	td -> avatar
LEAF_NODE	41:5	41:5	10	td
LEAF_NODE	41:7	41:7	10	->
LEAF_NODE	41:9	41:9	10	avatar
LEAF_NODE	41:16	41:16	7	&&
EXPR	41:19	41:19	7	full
FIELD	41:19	41:19	8	full
LEAF_NODE	41:19	41:19	9	full
LEAF_NODE	41:23	41:23	4	)
STATEMENTS	41:25	44:1	4	
LEAF_NODE	41:25	41:25	5	{
STATEMENTS	42:2	43:2	5	
EXPR_STATEMENT	42:2	42:71	6	td -> avatar = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_LARGE ) ;
EXPR	42:2	42:2	7	td -> avatar = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_LARGE )
ASSIGN	42:2	42:15	8	td -> avatar = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_LARGE )
LVAL	42:2	42:2	9	td -> avatar
FIELD	42:2	42:6	10	td -> avatar
LEAF_NODE	42:2	42:2	11	td
LEAF_NODE	42:4	42:4	11	->
LEAF_NODE	42:6	42:6	11	avatar
ASSIGN_OP	42:13	42:13	9	=
LEAF_NODE	42:13	42:13	10	=
RVAL	42:15	42:15	9	pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_LARGE )
FUNCTION_CALL	42:15	42:70	10	pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_LARGE )
CALLEE	42:15	42:15	11	pidgin_create_prpl_icon
LEAF_NODE	42:15	42:15	12	pidgin_create_prpl_icon
LEAF_NODE	42:38	42:38	11	(
ARGUMENT	42:39	42:39	11	account
FIELD	42:39	42:39	12	account
LEAF_NODE	42:39	42:39	13	account
LEAF_NODE	42:46	42:46	11	,
ARGUMENT	42:48	42:48	11	PIDGIN_PRPL_ICON_LARGE
FIELD	42:48	42:48	12	PIDGIN_PRPL_ICON_LARGE
LEAF_NODE	42:48	42:48	13	PIDGIN_PRPL_ICON_LARGE
LEAF_NODE	42:70	42:70	11	)
LEAF_NODE	42:71	42:71	7	;
EXPR_STATEMENT	43:2	43:32	6	td -> avatar_is_prpl_icon = TRUE ;
EXPR	43:2	43:2	7	td -> avatar_is_prpl_icon = TRUE
ASSIGN	43:2	43:28	8	td -> avatar_is_prpl_icon = TRUE
LVAL	43:2	43:2	9	td -> avatar_is_prpl_icon
FIELD	43:2	43:6	10	td -> avatar_is_prpl_icon
LEAF_NODE	43:2	43:2	11	td
LEAF_NODE	43:4	43:4	11	->
LEAF_NODE	43:6	43:6	11	avatar_is_prpl_icon
ASSIGN_OP	43:26	43:26	9	=
LEAF_NODE	43:26	43:26	10	=
RVAL	43:28	43:28	9	TRUE
FIELD	43:28	43:28	10	TRUE
LEAF_NODE	43:28	43:28	11	TRUE
LEAF_NODE	43:32	43:32	7	;
LEAF_NODE	44:1	44:1	5	}
SELECTION	46:1	46:17	3	
KEYWORD	46:1	46:1	4	if
LEAF_NODE	46:1	46:1	5	if
LEAF_NODE	46:4	46:4	4	(
CONDITION	46:5	46:5	4	td -> avatar
EXPR	46:5	46:5	5	td -> avatar
FIELD	46:5	46:9	6	td -> avatar
LEAF_NODE	46:5	46:5	7	td
LEAF_NODE	46:7	46:7	7	->
LEAF_NODE	46:9	46:9	7	avatar
LEAF_NODE	46:15	46:15	4	)
STATEMENTS	46:17	49:1	4	
LEAF_NODE	46:17	46:17	5	{
STATEMENTS	47:2	48:2	5	
EXPR_STATEMENT	47:2	47:53	6	td -> avatar_width = gdk_pixbuf_get_width ( td -> avatar ) ;
EXPR	47:2	47:2	7	td -> avatar_width = gdk_pixbuf_get_width ( td -> avatar )
ASSIGN	47:2	47:21	8	td -> avatar_width = gdk_pixbuf_get_width ( td -> avatar )
LVAL	47:2	47:2	9	td -> avatar_width
FIELD	47:2	47:6	10	td -> avatar_width
LEAF_NODE	47:2	47:2	11	td
LEAF_NODE	47:4	47:4	11	->
LEAF_NODE	47:6	47:6	11	avatar_width
ASSIGN_OP	47:19	47:19	9	=
LEAF_NODE	47:19	47:19	10	=
RVAL	47:21	47:21	9	gdk_pixbuf_get_width ( td -> avatar )
FUNCTION_CALL	47:21	47:52	10	gdk_pixbuf_get_width ( td -> avatar )
CALLEE	47:21	47:21	11	gdk_pixbuf_get_width
LEAF_NODE	47:21	47:21	12	gdk_pixbuf_get_width
LEAF_NODE	47:41	47:41	11	(
ARGUMENT	47:42	47:42	11	td -> avatar
FIELD	47:42	47:46	12	td -> avatar
LEAF_NODE	47:42	47:42	13	td
LEAF_NODE	47:44	47:44	13	->
LEAF_NODE	47:46	47:46	13	avatar
LEAF_NODE	47:52	47:52	11	)
LEAF_NODE	47:53	47:53	7	;
EXPR_STATEMENT	48:2	48:55	6	td -> avatar_height = gdk_pixbuf_get_height ( td -> avatar ) ;
EXPR	48:2	48:2	7	td -> avatar_height = gdk_pixbuf_get_height ( td -> avatar )
ASSIGN	48:2	48:22	8	td -> avatar_height = gdk_pixbuf_get_height ( td -> avatar )
LVAL	48:2	48:2	9	td -> avatar_height
FIELD	48:2	48:6	10	td -> avatar_height
LEAF_NODE	48:2	48:2	11	td
LEAF_NODE	48:4	48:4	11	->
LEAF_NODE	48:6	48:6	11	avatar_height
ASSIGN_OP	48:20	48:20	9	=
LEAF_NODE	48:20	48:20	10	=
RVAL	48:22	48:22	9	gdk_pixbuf_get_height ( td -> avatar )
FUNCTION_CALL	48:22	48:54	10	gdk_pixbuf_get_height ( td -> avatar )
CALLEE	48:22	48:22	11	gdk_pixbuf_get_height
LEAF_NODE	48:22	48:22	12	gdk_pixbuf_get_height
LEAF_NODE	48:43	48:43	11	(
ARGUMENT	48:44	48:44	11	td -> avatar
FIELD	48:44	48:48	12	td -> avatar
LEAF_NODE	48:44	48:44	13	td
LEAF_NODE	48:46	48:46	13	->
LEAF_NODE	48:48	48:48	13	avatar
LEAF_NODE	48:54	48:54	11	)
LEAF_NODE	48:55	48:55	7	;
LEAF_NODE	49:1	49:1	5	}
EXPR_STATEMENT	50:1	50:18	3	g_free ( node_name ) ;
EXPR	50:1	50:1	4	g_free ( node_name )
FUNCTION_CALL	50:1	50:17	5	g_free ( node_name )
CALLEE	50:1	50:1	6	g_free
LEAF_NODE	50:1	50:1	7	g_free
LEAF_NODE	50:7	50:7	6	(
ARGUMENT	50:8	50:8	6	node_name
FIELD	50:8	50:8	7	node_name
LEAF_NODE	50:8	50:8	8	node_name
LEAF_NODE	50:17	50:17	6	)
LEAF_NODE	50:18	50:18	4	;
EXPR_STATEMENT	51:1	51:21	3	g_free ( tooltip_text ) ;
EXPR	51:1	51:1	4	g_free ( tooltip_text )
FUNCTION_CALL	51:1	51:20	5	g_free ( tooltip_text )
CALLEE	51:1	51:1	6	g_free
LEAF_NODE	51:1	51:1	7	g_free
LEAF_NODE	51:7	51:7	6	(
ARGUMENT	51:8	51:8	6	tooltip_text
FIELD	51:8	51:8	7	tooltip_text
LEAF_NODE	51:8	51:8	8	tooltip_text
LEAF_NODE	51:20	51:20	6	)
LEAF_NODE	51:21	51:21	4	;
JUMP_STATEMENT	52:1	52:10	3	return td ;
KEYWORD	52:1	52:1	4	return
LEAF_NODE	52:1	52:1	5	return
DESTINATION	52:8	52:8	4	td
EXPR	52:8	52:8	5	td
FIELD	52:8	52:8	6	td
LEAF_NODE	52:8	52:8	7	td
LEAF_NODE	52:10	52:10	4	;
LEAF_NODE	53:0	53:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	11:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_dnsquery_uninit
LEAF_NODE	2:0	2:0	3	purple_dnsquery_uninit
PARAMETER_LIST	2:22	2:27	2	( void )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:23	3	void
LEAF_NODE	2:23	2:23	4	void
LEAF_NODE	2:27	2:27	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	5:1	5:1	2	
ITERATION	5:1	6:1	3	
KEYWORD	5:1	5:1	4	while
LEAF_NODE	5:1	5:1	5	while
LEAF_NODE	5:7	5:7	4	(
CONDITION	5:8	5:8	4	free_dns_children != NULL
EXPR	5:8	5:29	5	free_dns_children != NULL
FIELD	5:8	5:8	6	free_dns_children
LEAF_NODE	5:8	5:8	7	free_dns_children
EQ_OPERATOR	5:26	5:26	6	!=
LEAF_NODE	5:26	5:26	7	!=
FIELD	5:29	5:29	6	NULL
LEAF_NODE	5:29	5:29	7	NULL
LEAF_NODE	5:33	5:33	4	)
STATEMENTS	6:1	9:1	4	
LEAF_NODE	6:1	6:1	5	{
STATEMENTS	7:2	8:2	5	
EXPR_STATEMENT	7:2	7:59	6	purple_dnsquery_resolver_destroy ( free_dns_children -> data ) ;
EXPR	7:2	7:2	7	purple_dnsquery_resolver_destroy ( free_dns_children -> data )
FUNCTION_CALL	7:2	7:58	8	purple_dnsquery_resolver_destroy ( free_dns_children -> data )
CALLEE	7:2	7:2	9	purple_dnsquery_resolver_destroy
LEAF_NODE	7:2	7:2	10	purple_dnsquery_resolver_destroy
LEAF_NODE	7:34	7:34	9	(
ARGUMENT	7:35	7:35	9	free_dns_children -> data
FIELD	7:35	7:54	10	free_dns_children -> data
LEAF_NODE	7:35	7:35	11	free_dns_children
LEAF_NODE	7:52	7:52	11	->
LEAF_NODE	7:54	7:54	11	data
LEAF_NODE	7:58	7:58	9	)
LEAF_NODE	7:59	7:59	7	;
EXPR_STATEMENT	8:2	8:80	6	free_dns_children = g_slist_remove ( free_dns_children , free_dns_children -> data ) ;
EXPR	8:2	8:2	7	free_dns_children = g_slist_remove ( free_dns_children , free_dns_children -> data )
ASSIGN	8:2	8:22	8	free_dns_children = g_slist_remove ( free_dns_children , free_dns_children -> data )
LVAL	8:2	8:2	9	free_dns_children
FIELD	8:2	8:2	10	free_dns_children
LEAF_NODE	8:2	8:2	11	free_dns_children
ASSIGN_OP	8:20	8:20	9	=
LEAF_NODE	8:20	8:20	10	=
RVAL	8:22	8:22	9	g_slist_remove ( free_dns_children , free_dns_children -> data )
FUNCTION_CALL	8:22	8:79	10	g_slist_remove ( free_dns_children , free_dns_children -> data )
CALLEE	8:22	8:22	11	g_slist_remove
LEAF_NODE	8:22	8:22	12	g_slist_remove
LEAF_NODE	8:36	8:36	11	(
ARGUMENT	8:37	8:37	11	free_dns_children
FIELD	8:37	8:37	12	free_dns_children
LEAF_NODE	8:37	8:37	13	free_dns_children
LEAF_NODE	8:54	8:54	11	,
ARGUMENT	8:56	8:56	11	free_dns_children -> data
FIELD	8:56	8:75	12	free_dns_children -> data
LEAF_NODE	8:56	8:56	13	free_dns_children
LEAF_NODE	8:73	8:73	13	->
LEAF_NODE	8:75	8:75	13	data
LEAF_NODE	8:79	8:79	11	)
LEAF_NODE	8:80	8:80	7	;
LEAF_NODE	9:1	9:1	5	}
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	34:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	tcl_init_plugin
LEAF_NODE	2:12	2:12	3	tcl_init_plugin
PARAMETER_LIST	2:27	2:48	2	( PurplePlugin * plugin )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:42	3	PurplePlugin * plugin
TYPE	2:28	2:41	4	PurplePlugin *
TYPE_NAME	2:28	2:28	5	PurplePlugin
LEAF_NODE	2:28	2:28	6	PurplePlugin
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	plugin
LEAF_NODE	2:42	2:42	5	plugin
LEAF_NODE	2:48	2:48	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	5:1	33:1	2	
SIMPLE_DECL	5:1	5:26	3	Tcl_Interp * interp ; interp = NULL ;
VAR_DECL	5:1	5:13	4	Tcl_Interp * interp ; interp = NULL
TYPE	5:1	5:12	5	Tcl_Interp *
TYPE_NAME	5:1	5:1	6	Tcl_Interp
LEAF_NODE	5:1	5:1	7	Tcl_Interp
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	interp
LEAF_NODE	5:13	5:13	6	interp
LEAF_NODE	0:0	0:0	5	;
INIT	5:13	5:13	5	interp = NULL
ASSIGN	5:13	5:22	6	interp = NULL
LVAL	5:13	5:13	7	interp
NAME	5:13	5:13	8	interp
LEAF_NODE	5:13	5:13	9	interp
ASSIGN_OP	5:20	5:20	7	=
LEAF_NODE	5:20	5:20	8	=
RVAL	5:22	5:22	7	NULL
FIELD	5:22	5:22	8	NULL
LEAF_NODE	5:22	5:22	9	NULL
LEAF_NODE	5:26	5:26	4	;
EXPR_STATEMENT	7:1	7:21	3	_tcl_plugin = plugin ;
EXPR	7:1	7:1	4	_tcl_plugin = plugin
ASSIGN	7:1	7:15	5	_tcl_plugin = plugin
LVAL	7:1	7:1	6	_tcl_plugin
FIELD	7:1	7:1	7	_tcl_plugin
LEAF_NODE	7:1	7:1	8	_tcl_plugin
ASSIGN_OP	7:13	7:13	6	=
LEAF_NODE	7:13	7:13	7	=
RVAL	7:15	7:15	6	plugin
FIELD	7:15	7:15	7	plugin
LEAF_NODE	7:15	7:15	8	plugin
LEAF_NODE	7:21	7:21	4	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:3	10:3	4	(
CONDITION	10:4	10:4	4	! tcl_win32_init ( )
EXPR	10:4	10:4	5	! tcl_win32_init ( )
UNARY_EXPR	10:4	10:5	6	! tcl_win32_init ( )
UNARY_OPERATOR	10:4	10:4	7	!
LEAF_NODE	10:4	10:4	8	!
FUNCTION_CALL	10:5	10:20	7	tcl_win32_init ( )
CALLEE	10:5	10:5	8	tcl_win32_init
LEAF_NODE	10:5	10:5	9	tcl_win32_init
LEAF_NODE	10:19	10:19	8	(
LEAF_NODE	10:20	10:20	8	)
LEAF_NODE	10:21	10:21	4	)
STATEMENTS	11:2	11:2	4	
JUMP_STATEMENT	11:2	11:8	5	return DESTINATION ;
KEYWORD	11:2	11:2	6	return
LEAF_NODE	11:2	11:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	11:8	11:8	6	;
SELECTION	13:1	14:2	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:3	13:3	4	(
CONDITION	13:4	13:4	4	! ( interp = Tcl_CreateInterp ( ) )
EXPR	13:4	13:4	5	! ( interp = Tcl_CreateInterp ( ) )
UNARY_EXPR	13:4	13:33	6	! ( interp = Tcl_CreateInterp ( ) )
UNARY_OPERATOR	13:4	13:4	7	!
LEAF_NODE	13:4	13:4	8	!
LEAF_NODE	13:5	13:5	7	(
ASSIGN	13:6	13:15	7	interp = Tcl_CreateInterp ( )
LVAL	13:6	13:6	8	interp
FIELD	13:6	13:6	9	interp
LEAF_NODE	13:6	13:6	10	interp
ASSIGN_OP	13:13	13:13	8	=
LEAF_NODE	13:13	13:13	9	=
RVAL	13:15	13:15	8	Tcl_CreateInterp ( )
FUNCTION_CALL	13:15	13:32	9	Tcl_CreateInterp ( )
CALLEE	13:15	13:15	10	Tcl_CreateInterp
LEAF_NODE	13:15	13:15	11	Tcl_CreateInterp
LEAF_NODE	13:31	13:31	10	(
LEAF_NODE	13:32	13:32	10	)
LEAF_NODE	13:33	13:33	7	)
LEAF_NODE	13:34	13:34	4	)
STATEMENTS	14:2	14:2	4	
JUMP_STATEMENT	14:2	14:8	5	return DESTINATION ;
KEYWORD	14:2	14:2	6	return
LEAF_NODE	14:2	14:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	14:8	14:8	6	;
SELECTION	15:1	15:44	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:3	15:3	4	(
CONDITION	15:4	15:4	4	! Tcl_InitStubs ( interp , TCL_VERSION , 0 )
EXPR	15:4	15:4	5	! Tcl_InitStubs ( interp , TCL_VERSION , 0 )
UNARY_EXPR	15:4	15:5	6	! Tcl_InitStubs ( interp , TCL_VERSION , 0 )
UNARY_OPERATOR	15:4	15:4	7	!
LEAF_NODE	15:4	15:4	8	!
FUNCTION_CALL	15:5	15:41	7	Tcl_InitStubs ( interp , TCL_VERSION , 0 )
CALLEE	15:5	15:5	8	Tcl_InitStubs
LEAF_NODE	15:5	15:5	9	Tcl_InitStubs
LEAF_NODE	15:18	15:18	8	(
ARGUMENT	15:19	15:19	8	interp
FIELD	15:19	15:19	9	interp
LEAF_NODE	15:19	15:19	10	interp
LEAF_NODE	15:25	15:25	8	,
ARGUMENT	15:27	15:27	8	TCL_VERSION
FIELD	15:27	15:27	9	TCL_VERSION
LEAF_NODE	15:27	15:27	10	TCL_VERSION
LEAF_NODE	15:38	15:38	8	,
ARGUMENT	15:40	15:40	8	0
FIELD	15:40	15:40	9	0
LEAF_NODE	15:40	15:40	10	0
LEAF_NODE	15:41	15:41	8	)
LEAF_NODE	15:42	15:42	4	)
STATEMENTS	15:44	18:1	4	
LEAF_NODE	15:44	15:44	5	{
STATEMENTS	16:2	17:2	5	
EXPR_STATEMENT	16:2	16:80	6	purple_debug ( PURPLE_DEBUG_ERROR , "tcl" , "Tcl_InitStubs: %s\n" , interp -> result ) ;
EXPR	16:2	16:2	7	purple_debug ( PURPLE_DEBUG_ERROR , "tcl" , "Tcl_InitStubs: %s\n" , interp -> result )
FUNCTION_CALL	16:2	16:79	8	purple_debug ( PURPLE_DEBUG_ERROR , "tcl" , "Tcl_InitStubs: %s\n" , interp -> result )
CALLEE	16:2	16:2	9	purple_debug
LEAF_NODE	16:2	16:2	10	purple_debug
LEAF_NODE	16:14	16:14	9	(
ARGUMENT	16:15	16:15	9	PURPLE_DEBUG_ERROR
FIELD	16:15	16:15	10	PURPLE_DEBUG_ERROR
LEAF_NODE	16:15	16:15	11	PURPLE_DEBUG_ERROR
LEAF_NODE	16:33	16:33	9	,
ARGUMENT	16:35	16:35	9	"tcl"
FIELD	16:35	16:35	10	"tcl"
LEAF_NODE	16:35	16:35	11	"tcl"
LEAF_NODE	16:40	16:40	9	,
ARGUMENT	16:42	16:42	9	"Tcl_InitStubs: %s\n"
FIELD	16:42	16:42	10	"Tcl_InitStubs: %s\n"
LEAF_NODE	16:42	16:42	11	"Tcl_InitStubs: %s\n"
LEAF_NODE	16:63	16:63	9	,
ARGUMENT	16:65	16:65	9	interp -> result
FIELD	16:65	16:73	10	interp -> result
LEAF_NODE	16:65	16:65	11	interp
LEAF_NODE	16:71	16:71	11	->
LEAF_NODE	16:73	16:73	11	result
LEAF_NODE	16:79	16:79	9	)
LEAF_NODE	16:80	16:80	7	;
JUMP_STATEMENT	17:2	17:8	6	return DESTINATION ;
KEYWORD	17:2	17:2	7	return
LEAF_NODE	17:2	17:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	17:8	17:8	7	;
LEAF_NODE	18:1	18:1	5	}
EXPR_STATEMENT	20:1	20:29	3	Tcl_FindExecutable ( "purple" ) ;
EXPR	20:1	20:1	4	Tcl_FindExecutable ( "purple" )
FUNCTION_CALL	20:1	20:28	5	Tcl_FindExecutable ( "purple" )
CALLEE	20:1	20:1	6	Tcl_FindExecutable
LEAF_NODE	20:1	20:1	7	Tcl_FindExecutable
LEAF_NODE	20:19	20:19	6	(
ARGUMENT	20:20	20:20	6	"purple"
FIELD	20:20	20:20	7	"purple"
LEAF_NODE	20:20	20:20	8	"purple"
LEAF_NODE	20:28	20:28	6	)
LEAF_NODE	20:29	20:29	4	;
EXPR_STATEMENT	22:1	22:16	3	Tk_Init ( interp ) ;
EXPR	22:1	22:1	4	Tk_Init ( interp )
FUNCTION_CALL	22:1	22:15	5	Tk_Init ( interp )
CALLEE	22:1	22:1	6	Tk_Init
LEAF_NODE	22:1	22:1	7	Tk_Init
LEAF_NODE	22:8	22:8	6	(
ARGUMENT	22:9	22:9	6	interp
FIELD	22:9	22:9	7	interp
LEAF_NODE	22:9	22:9	8	interp
LEAF_NODE	22:15	22:15	6	)
LEAF_NODE	22:16	22:16	4	;
SELECTION	23:1	23:42	3	
KEYWORD	23:1	23:1	4	if
LEAF_NODE	23:1	23:1	5	if
LEAF_NODE	23:3	23:3	4	(
CONDITION	23:4	23:4	4	! Tk_InitStubs ( interp , TK_VERSION , 0 )
EXPR	23:4	23:4	5	! Tk_InitStubs ( interp , TK_VERSION , 0 )
UNARY_EXPR	23:4	23:5	6	! Tk_InitStubs ( interp , TK_VERSION , 0 )
UNARY_OPERATOR	23:4	23:4	7	!
LEAF_NODE	23:4	23:4	8	!
FUNCTION_CALL	23:5	23:39	7	Tk_InitStubs ( interp , TK_VERSION , 0 )
CALLEE	23:5	23:5	8	Tk_InitStubs
LEAF_NODE	23:5	23:5	9	Tk_InitStubs
LEAF_NODE	23:17	23:17	8	(
ARGUMENT	23:18	23:18	8	interp
FIELD	23:18	23:18	9	interp
LEAF_NODE	23:18	23:18	10	interp
LEAF_NODE	23:24	23:24	8	,
ARGUMENT	23:26	23:26	8	TK_VERSION
FIELD	23:26	23:26	9	TK_VERSION
LEAF_NODE	23:26	23:26	10	TK_VERSION
LEAF_NODE	23:36	23:36	8	,
ARGUMENT	23:38	23:38	8	0
FIELD	23:38	23:38	9	0
LEAF_NODE	23:38	23:38	10	0
LEAF_NODE	23:39	23:39	8	)
LEAF_NODE	23:40	23:40	4	)
STATEMENTS	23:42	27:1	4	
LEAF_NODE	23:42	23:42	5	{
STATEMENTS	24:2	26:2	5	
EXPR_STATEMENT	24:2	24:85	6	purple_debug ( PURPLE_DEBUG_ERROR , "tcl" , "Error Tk_InitStubs: %s\n" , interp -> result ) ;
EXPR	24:2	24:2	7	purple_debug ( PURPLE_DEBUG_ERROR , "tcl" , "Error Tk_InitStubs: %s\n" , interp -> result )
FUNCTION_CALL	24:2	24:84	8	purple_debug ( PURPLE_DEBUG_ERROR , "tcl" , "Error Tk_InitStubs: %s\n" , interp -> result )
CALLEE	24:2	24:2	9	purple_debug
LEAF_NODE	24:2	24:2	10	purple_debug
LEAF_NODE	24:14	24:14	9	(
ARGUMENT	24:15	24:15	9	PURPLE_DEBUG_ERROR
FIELD	24:15	24:15	10	PURPLE_DEBUG_ERROR
LEAF_NODE	24:15	24:15	11	PURPLE_DEBUG_ERROR
LEAF_NODE	24:33	24:33	9	,
ARGUMENT	24:35	24:35	9	"tcl"
FIELD	24:35	24:35	10	"tcl"
LEAF_NODE	24:35	24:35	11	"tcl"
LEAF_NODE	24:40	24:40	9	,
ARGUMENT	24:42	24:42	9	"Error Tk_InitStubs: %s\n"
FIELD	24:42	24:42	10	"Error Tk_InitStubs: %s\n"
LEAF_NODE	24:42	24:42	11	"Error Tk_InitStubs: %s\n"
LEAF_NODE	24:68	24:68	9	,
ARGUMENT	24:70	24:70	9	interp -> result
FIELD	24:70	24:78	10	interp -> result
LEAF_NODE	24:70	24:70	11	interp
LEAF_NODE	24:76	24:76	11	->
LEAF_NODE	24:78	24:78	11	result
LEAF_NODE	24:84	24:84	9	)
LEAF_NODE	24:85	24:85	7	;
EXPR_STATEMENT	25:2	25:26	6	Tcl_DeleteInterp ( interp ) ;
EXPR	25:2	25:2	7	Tcl_DeleteInterp ( interp )
FUNCTION_CALL	25:2	25:25	8	Tcl_DeleteInterp ( interp )
CALLEE	25:2	25:2	9	Tcl_DeleteInterp
LEAF_NODE	25:2	25:2	10	Tcl_DeleteInterp
LEAF_NODE	25:18	25:18	9	(
ARGUMENT	25:19	25:19	9	interp
FIELD	25:19	25:19	10	interp
LEAF_NODE	25:19	25:19	11	interp
LEAF_NODE	25:25	25:25	9	)
LEAF_NODE	25:26	25:26	7	;
JUMP_STATEMENT	26:2	26:8	6	return DESTINATION ;
KEYWORD	26:2	26:2	7	return
LEAF_NODE	26:2	26:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	26:8	26:8	7	;
LEAF_NODE	27:1	27:1	5	}
EXPR_STATEMENT	29:1	29:18	3	tcl_loaded = TRUE ;
EXPR	29:1	29:1	4	tcl_loaded = TRUE
ASSIGN	29:1	29:14	5	tcl_loaded = TRUE
LVAL	29:1	29:1	6	tcl_loaded
FIELD	29:1	29:1	7	tcl_loaded
LEAF_NODE	29:1	29:1	8	tcl_loaded
ASSIGN_OP	29:12	29:12	6	=
LEAF_NODE	29:12	29:12	7	=
RVAL	29:14	29:14	6	TRUE
FIELD	29:14	29:14	7	TRUE
LEAF_NODE	29:14	29:14	8	TRUE
LEAF_NODE	29:18	29:18	4	;
EXPR_STATEMENT	31:1	31:25	3	Tcl_DeleteInterp ( interp ) ;
EXPR	31:1	31:1	4	Tcl_DeleteInterp ( interp )
FUNCTION_CALL	31:1	31:24	5	Tcl_DeleteInterp ( interp )
CALLEE	31:1	31:1	6	Tcl_DeleteInterp
LEAF_NODE	31:1	31:1	7	Tcl_DeleteInterp
LEAF_NODE	31:17	31:17	6	(
ARGUMENT	31:18	31:18	6	interp
FIELD	31:18	31:18	7	interp
LEAF_NODE	31:18	31:18	8	interp
LEAF_NODE	31:24	31:24	6	)
LEAF_NODE	31:25	31:25	4	;
EXPR_STATEMENT	33:1	33:66	3	tcl_loader_info . exts = g_list_append ( tcl_loader_info . exts , "tcl" ) ;
EXPR	33:1	33:1	4	tcl_loader_info . exts = g_list_append ( tcl_loader_info . exts , "tcl" )
ASSIGN	33:1	33:24	5	tcl_loader_info . exts = g_list_append ( tcl_loader_info . exts , "tcl" )
LVAL	33:1	33:1	6	tcl_loader_info . exts
FIELD	33:1	33:17	7	tcl_loader_info . exts
LEAF_NODE	33:1	33:1	8	tcl_loader_info
LEAF_NODE	33:16	33:16	8	.
LEAF_NODE	33:17	33:17	8	exts
ASSIGN_OP	33:22	33:22	6	=
LEAF_NODE	33:22	33:22	7	=
RVAL	33:24	33:24	6	g_list_append ( tcl_loader_info . exts , "tcl" )
FUNCTION_CALL	33:24	33:65	7	g_list_append ( tcl_loader_info . exts , "tcl" )
CALLEE	33:24	33:24	8	g_list_append
LEAF_NODE	33:24	33:24	9	g_list_append
LEAF_NODE	33:37	33:37	8	(
ARGUMENT	33:38	33:38	8	tcl_loader_info . exts
FIELD	33:38	33:54	9	tcl_loader_info . exts
LEAF_NODE	33:38	33:38	10	tcl_loader_info
LEAF_NODE	33:53	33:53	10	.
LEAF_NODE	33:54	33:54	10	exts
LEAF_NODE	33:58	33:58	8	,
ARGUMENT	33:60	33:60	8	"tcl"
FIELD	33:60	33:60	9	"tcl"
LEAF_NODE	33:60	33:60	10	"tcl"
LEAF_NODE	33:65	33:65	8	)
LEAF_NODE	33:66	33:66	4	;
LEAF_NODE	34:0	34:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	button_sensitiveness_changed
LEAF_NODE	2:0	2:0	3	button_sensitiveness_changed
PARAMETER_LIST	2:28	2:82	2	( GtkWidget * button , gpointer dontcare , GtkWidget * item )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:40	3	GtkWidget * button
TYPE	2:29	2:39	4	GtkWidget *
TYPE_NAME	2:29	2:29	5	GtkWidget
LEAF_NODE	2:29	2:29	6	GtkWidget
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	button
LEAF_NODE	2:40	2:40	5	button
LEAF_NODE	2:46	2:46	3	,
PARAMETER_DECL	2:48	2:57	3	gpointer dontcare
TYPE	2:48	2:48	4	gpointer
TYPE_NAME	2:48	2:48	5	gpointer
LEAF_NODE	2:48	2:48	6	gpointer
NAME	2:57	2:57	4	dontcare
LEAF_NODE	2:57	2:57	5	dontcare
LEAF_NODE	2:65	2:65	3	,
PARAMETER_DECL	2:67	2:78	3	GtkWidget * item
TYPE	2:67	2:77	4	GtkWidget *
TYPE_NAME	2:67	2:67	5	GtkWidget
LEAF_NODE	2:67	2:67	6	GtkWidget
POINTER	2:77	2:77	5	*
LEAF_NODE	2:77	2:77	6	*
NAME	2:78	2:78	4	item
LEAF_NODE	2:78	2:78	5	item
LEAF_NODE	2:82	2:82	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	4:64	3	gtk_widget_set_sensitive ( item , GTK_WIDGET_IS_SENSITIVE ( button ) ) ;
EXPR	4:1	4:1	4	gtk_widget_set_sensitive ( item , GTK_WIDGET_IS_SENSITIVE ( button ) )
FUNCTION_CALL	4:1	4:63	5	gtk_widget_set_sensitive ( item , GTK_WIDGET_IS_SENSITIVE ( button ) )
CALLEE	4:1	4:1	6	gtk_widget_set_sensitive
LEAF_NODE	4:1	4:1	7	gtk_widget_set_sensitive
LEAF_NODE	4:25	4:25	6	(
ARGUMENT	4:26	4:26	6	item
FIELD	4:26	4:26	7	item
LEAF_NODE	4:26	4:26	8	item
LEAF_NODE	4:30	4:30	6	,
ARGUMENT	4:32	4:32	6	GTK_WIDGET_IS_SENSITIVE ( button )
FUNCTION_CALL	4:32	4:62	7	GTK_WIDGET_IS_SENSITIVE ( button )
CALLEE	4:32	4:32	8	GTK_WIDGET_IS_SENSITIVE
LEAF_NODE	4:32	4:32	9	GTK_WIDGET_IS_SENSITIVE
LEAF_NODE	4:55	4:55	8	(
ARGUMENT	4:56	4:56	8	button
FIELD	4:56	4:56	9	button
LEAF_NODE	4:56	4:56	10	button
LEAF_NODE	4:62	4:62	8	)
LEAF_NODE	4:63	4:63	6	)
LEAF_NODE	4:64	4:64	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	30:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	insert_cap_msg_count_success
LEAF_NODE	2:0	2:0	3	insert_cap_msg_count_success
PARAMETER_LIST	2:28	2:106	2	( const char * buddy_name , const char * account , const char * protocol , int minute )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:41	3	const char * buddy_name
TYPE	2:29	2:40	4	const char *
TYPE_NAME	2:29	2:35	5	const char
LEAF_NODE	2:29	2:29	6	const
LEAF_NODE	2:35	2:35	6	char
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	buddy_name
LEAF_NODE	2:41	2:41	5	buddy_name
LEAF_NODE	2:51	2:51	3	,
PARAMETER_DECL	2:53	2:65	3	const char * account
TYPE	2:53	2:64	4	const char *
TYPE_NAME	2:53	2:59	5	const char
LEAF_NODE	2:53	2:53	6	const
LEAF_NODE	2:59	2:59	6	char
POINTER	2:64	2:64	5	*
LEAF_NODE	2:64	2:64	6	*
NAME	2:65	2:65	4	account
LEAF_NODE	2:65	2:65	5	account
LEAF_NODE	2:72	2:72	3	,
PARAMETER_DECL	2:74	2:86	3	const char * protocol
TYPE	2:74	2:85	4	const char *
TYPE_NAME	2:74	2:80	5	const char
LEAF_NODE	2:74	2:74	6	const
LEAF_NODE	2:80	2:80	6	char
POINTER	2:85	2:85	5	*
LEAF_NODE	2:85	2:85	6	*
NAME	2:86	2:86	4	protocol
LEAF_NODE	2:86	2:86	5	protocol
LEAF_NODE	2:94	2:94	3	,
PARAMETER_DECL	2:96	2:100	3	int minute
TYPE	2:96	2:96	4	int
TYPE_NAME	2:96	2:96	5	int
LEAF_NODE	2:96	2:96	6	int
NAME	2:100	2:100	4	minute
LEAF_NODE	2:100	2:100	5	minute
LEAF_NODE	2:106	2:106	3	)
LEAF_NODE	2:108	2:108	2	{
STATEMENTS	3:1	29:1	2	
SIMPLE_DECL	3:1	3:7	3	int rc ;
VAR_DECL	3:1	3:5	4	int rc
TYPE	3:1	3:1	5	int
TYPE_NAME	3:1	3:1	6	int
LEAF_NODE	3:1	3:1	7	int
NAME	3:5	3:5	5	rc
LEAF_NODE	3:5	3:5	6	rc
LEAF_NODE	3:7	3:7	4	;
SIMPLE_DECL	4:1	4:19	3	sqlite3_stmt * stmt ;
VAR_DECL	4:1	4:15	4	sqlite3_stmt * stmt
TYPE	4:1	4:14	5	sqlite3_stmt *
TYPE_NAME	4:1	4:1	6	sqlite3_stmt
LEAF_NODE	4:1	4:1	7	sqlite3_stmt
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	stmt
LEAF_NODE	4:15	4:15	6	stmt
LEAF_NODE	4:19	4:19	4	;
SIMPLE_DECL	5:1	5:17	3	const char * tail ;
VAR_DECL	5:1	5:13	4	const char * tail
TYPE	5:1	5:12	5	const char *
TYPE_NAME	5:1	5:7	6	const char
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	char
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	tail
LEAF_NODE	5:13	5:13	6	tail
LEAF_NODE	5:17	5:17	4	;
LEAF_NODE	6:1	6:1	3	char
LEAF_NODE	6:6	6:6	3	*
LEAF_NODE	6:7	6:7	3	sql_select
LEAF_NODE	6:18	6:18	3	=
LEAF_NODE	6:20	6:20	3	sqlite3_mprintf
LEAF_NODE	6:35	6:35	3	(
LEAF_NODE	6:36	6:36	3	"SELECT * FROM cap_msg_count WHERE "
LEAF_NODE	7:2	7:2	3	"buddy=%Q AND account=%Q AND protocol=%Q AND minute_val=%d;"
LEAF_NODE	7:62	7:62	3	,
LEAF_NODE	8:2	8:2	3	buddy_name
LEAF_NODE	8:12	8:12	3	,
LEAF_NODE	8:14	8:14	3	account
LEAF_NODE	8:21	8:21	3	,
LEAF_NODE	8:23	8:23	3	protocol
LEAF_NODE	8:31	8:31	3	,
LEAF_NODE	8:33	8:33	3	minute
LEAF_NODE	8:39	8:39	3	)
LEAF_NODE	8:40	8:40	3	;
SIMPLE_DECL	9:1	9:24	3	char * sql_ins_up ; sql_ins_up = NULL ;
VAR_DECL	9:1	9:7	4	char * sql_ins_up ; sql_ins_up = NULL
TYPE	9:1	9:6	5	char *
TYPE_NAME	9:1	9:1	6	char
LEAF_NODE	9:1	9:1	7	char
POINTER	9:6	9:6	6	*
LEAF_NODE	9:6	9:6	7	*
NAME	9:7	9:7	5	sql_ins_up
LEAF_NODE	9:7	9:7	6	sql_ins_up
LEAF_NODE	0:0	0:0	5	;
INIT	9:7	9:7	5	sql_ins_up = NULL
ASSIGN	9:7	9:20	6	sql_ins_up = NULL
LVAL	9:7	9:7	7	sql_ins_up
NAME	9:7	9:7	8	sql_ins_up
LEAF_NODE	9:7	9:7	9	sql_ins_up
ASSIGN_OP	9:18	9:18	7	=
LEAF_NODE	9:18	9:18	8	=
RVAL	9:20	9:20	7	NULL
FIELD	9:20	9:20	8	NULL
LEAF_NODE	9:20	9:20	9	NULL
LEAF_NODE	9:24	9:24	4	;
EXPR_STATEMENT	10:1	10:45	3	purple_debug_info ( "cap" , "%s\n" , sql_select ) ;
EXPR	10:1	10:1	4	purple_debug_info ( "cap" , "%s\n" , sql_select )
FUNCTION_CALL	10:1	10:44	5	purple_debug_info ( "cap" , "%s\n" , sql_select )
CALLEE	10:1	10:1	6	purple_debug_info
LEAF_NODE	10:1	10:1	7	purple_debug_info
LEAF_NODE	10:18	10:18	6	(
ARGUMENT	10:19	10:19	6	"cap"
FIELD	10:19	10:19	7	"cap"
LEAF_NODE	10:19	10:19	8	"cap"
LEAF_NODE	10:24	10:24	6	,
ARGUMENT	10:26	10:26	6	"%s\n"
FIELD	10:26	10:26	7	"%s\n"
LEAF_NODE	10:26	10:26	8	"%s\n"
LEAF_NODE	10:32	10:32	6	,
ARGUMENT	10:34	10:34	6	sql_select
FIELD	10:34	10:34	7	sql_select
LEAF_NODE	10:34	10:34	8	sql_select
LEAF_NODE	10:44	10:44	6	)
LEAF_NODE	10:45	10:45	4	;
EXPR_STATEMENT	11:1	11:51	3	sqlite3_prepare ( _db , sql_select , - 1 , & stmt , & tail ) ;
EXPR	11:1	11:1	4	sqlite3_prepare ( _db , sql_select , - 1 , & stmt , & tail )
FUNCTION_CALL	11:1	11:50	5	sqlite3_prepare ( _db , sql_select , - 1 , & stmt , & tail )
CALLEE	11:1	11:1	6	sqlite3_prepare
LEAF_NODE	11:1	11:1	7	sqlite3_prepare
LEAF_NODE	11:16	11:16	6	(
ARGUMENT	11:17	11:17	6	_db
FIELD	11:17	11:17	7	_db
LEAF_NODE	11:17	11:17	8	_db
LEAF_NODE	11:20	11:20	6	,
ARGUMENT	11:22	11:22	6	sql_select
FIELD	11:22	11:22	7	sql_select
LEAF_NODE	11:22	11:22	8	sql_select
LEAF_NODE	11:32	11:32	6	,
ARGUMENT	11:34	11:34	6	- 1
UNARY_EXPR	11:34	11:35	7	- 1
UNARY_OPERATOR	11:34	11:34	8	-
LEAF_NODE	11:34	11:34	9	-
FIELD	11:35	11:35	8	1
LEAF_NODE	11:35	11:35	9	1
LEAF_NODE	11:36	11:36	6	,
ARGUMENT	11:38	11:38	6	& stmt
UNARY_EXPR	11:38	11:39	7	& stmt
UNARY_OPERATOR	11:38	11:38	8	&
LEAF_NODE	11:38	11:38	9	&
FIELD	11:39	11:39	8	stmt
LEAF_NODE	11:39	11:39	9	stmt
LEAF_NODE	11:43	11:43	6	,
ARGUMENT	11:45	11:45	6	& tail
UNARY_EXPR	11:45	11:46	7	& tail
UNARY_OPERATOR	11:45	11:45	8	&
LEAF_NODE	11:45	11:45	9	&
FIELD	11:46	11:46	8	tail
LEAF_NODE	11:46	11:46	9	tail
LEAF_NODE	11:50	11:50	6	)
LEAF_NODE	11:51	11:51	4	;
EXPR_STATEMENT	12:1	12:24	3	rc = sqlite3_step ( stmt ) ;
EXPR	12:1	12:1	4	rc = sqlite3_step ( stmt )
ASSIGN	12:1	12:6	5	rc = sqlite3_step ( stmt )
LVAL	12:1	12:1	6	rc
FIELD	12:1	12:1	7	rc
LEAF_NODE	12:1	12:1	8	rc
ASSIGN_OP	12:4	12:4	6	=
LEAF_NODE	12:4	12:4	7	=
RVAL	12:6	12:6	6	sqlite3_step ( stmt )
FUNCTION_CALL	12:6	12:23	7	sqlite3_step ( stmt )
CALLEE	12:6	12:6	8	sqlite3_step
LEAF_NODE	12:6	12:6	9	sqlite3_step
LEAF_NODE	12:18	12:18	8	(
ARGUMENT	12:19	12:19	8	stmt
FIELD	12:19	12:19	9	stmt
LEAF_NODE	12:19	12:19	10	stmt
LEAF_NODE	12:23	12:23	8	)
LEAF_NODE	12:24	12:24	4	;
SELECTION	13:1	13:23	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:3	13:3	4	(
CONDITION	13:4	13:4	4	rc == SQLITE_DONE
EXPR	13:4	13:10	5	rc == SQLITE_DONE
FIELD	13:4	13:4	6	rc
LEAF_NODE	13:4	13:4	7	rc
EQ_OPERATOR	13:7	13:7	6	==
LEAF_NODE	13:7	13:7	7	==
FIELD	13:10	13:10	6	SQLITE_DONE
LEAF_NODE	13:10	13:10	7	SQLITE_DONE
LEAF_NODE	13:21	13:21	4	)
STATEMENTS	13:23	16:1	4	
LEAF_NODE	13:23	13:23	5	{
STATEMENTS	14:2	14:2	5	
EXPR_STATEMENT	14:2	15:47	6	sql_ins_up = sqlite3_mprintf ( "INSERT INTO cap_msg_count VALUES (%Q, %Q, %Q, %d, %d, %d);" , buddy_name , account , protocol , minute , 1 , 0 ) ;
EXPR	14:2	14:2	7	sql_ins_up = sqlite3_mprintf ( "INSERT INTO cap_msg_count VALUES (%Q, %Q, %Q, %d, %d, %d);" , buddy_name , account , protocol , minute , 1 , 0 )
ASSIGN	14:2	14:15	8	sql_ins_up = sqlite3_mprintf ( "INSERT INTO cap_msg_count VALUES (%Q, %Q, %Q, %d, %d, %d);" , buddy_name , account , protocol , minute , 1 , 0 )
LVAL	14:2	14:2	9	sql_ins_up
FIELD	14:2	14:2	10	sql_ins_up
LEAF_NODE	14:2	14:2	11	sql_ins_up
ASSIGN_OP	14:13	14:13	9	=
LEAF_NODE	14:13	14:13	10	=
RVAL	14:15	14:15	9	sqlite3_mprintf ( "INSERT INTO cap_msg_count VALUES (%Q, %Q, %Q, %d, %d, %d);" , buddy_name , account , protocol , minute , 1 , 0 )
FUNCTION_CALL	14:15	15:46	10	sqlite3_mprintf ( "INSERT INTO cap_msg_count VALUES (%Q, %Q, %Q, %d, %d, %d);" , buddy_name , account , protocol , minute , 1 , 0 )
CALLEE	14:15	14:15	11	sqlite3_mprintf
LEAF_NODE	14:15	14:15	12	sqlite3_mprintf
LEAF_NODE	14:30	14:30	11	(
ARGUMENT	14:31	14:31	11	"INSERT INTO cap_msg_count VALUES (%Q, %Q, %Q, %d, %d, %d);"
FIELD	14:31	14:31	12	"INSERT INTO cap_msg_count VALUES (%Q, %Q, %Q, %d, %d, %d);"
LEAF_NODE	14:31	14:31	13	"INSERT INTO cap_msg_count VALUES (%Q, %Q, %Q, %d, %d, %d);"
LEAF_NODE	14:91	14:91	11	,
ARGUMENT	15:3	15:3	11	buddy_name
FIELD	15:3	15:3	12	buddy_name
LEAF_NODE	15:3	15:3	13	buddy_name
LEAF_NODE	15:13	15:13	11	,
ARGUMENT	15:15	15:15	11	account
FIELD	15:15	15:15	12	account
LEAF_NODE	15:15	15:15	13	account
LEAF_NODE	15:22	15:22	11	,
ARGUMENT	15:24	15:24	11	protocol
FIELD	15:24	15:24	12	protocol
LEAF_NODE	15:24	15:24	13	protocol
LEAF_NODE	15:32	15:32	11	,
ARGUMENT	15:34	15:34	11	minute
FIELD	15:34	15:34	12	minute
LEAF_NODE	15:34	15:34	13	minute
LEAF_NODE	15:40	15:40	11	,
ARGUMENT	15:42	15:42	11	1
FIELD	15:42	15:42	12	1
LEAF_NODE	15:42	15:42	13	1
LEAF_NODE	15:43	15:43	11	,
ARGUMENT	15:45	15:45	11	0
FIELD	15:45	15:45	12	0
LEAF_NODE	15:45	15:45	13	0
LEAF_NODE	15:46	15:46	11	)
LEAF_NODE	15:47	15:47	7	;
LEAF_NODE	16:1	16:1	5	}
SELECTION	16:3	16:8	3	
KEYWORD	16:3	16:3	4	else
LEAF_NODE	16:3	16:3	5	else
STATEMENTS	16:8	16:8	4	
SELECTION	16:8	16:29	5	
KEYWORD	16:8	16:8	6	if
LEAF_NODE	16:8	16:8	7	if
LEAF_NODE	16:10	16:10	6	(
CONDITION	16:11	16:11	6	rc == SQLITE_ROW
EXPR	16:11	16:17	7	rc == SQLITE_ROW
FIELD	16:11	16:11	8	rc
LEAF_NODE	16:11	16:11	9	rc
EQ_OPERATOR	16:14	16:14	8	==
LEAF_NODE	16:14	16:14	9	==
FIELD	16:17	16:17	8	SQLITE_ROW
LEAF_NODE	16:17	16:17	9	SQLITE_ROW
LEAF_NODE	16:27	16:27	6	)
STATEMENTS	16:29	20:1	6	
LEAF_NODE	16:29	16:29	7	{
STATEMENTS	17:2	19:41	7	
LEAF_NODE	17:2	17:2	8	sql_ins_up
LEAF_NODE	17:13	17:13	8	=
LEAF_NODE	17:15	17:15	8	sqlite3_mprintf
LEAF_NODE	17:30	17:30	8	(
LEAF_NODE	17:31	17:31	8	"UPDATE cap_msg_count SET success_count=success_count+1 WHERE "
LEAF_NODE	18:3	18:3	8	"buddy=%Q AND account=%Q AND protocol=%Q AND minute_val=%d;"
LEAF_NODE	18:63	18:63	8	,
LEAF_NODE	19:3	19:3	8	buddy_name
LEAF_NODE	19:13	19:13	8	,
LEAF_NODE	19:15	19:15	8	account
LEAF_NODE	19:22	19:22	8	,
LEAF_NODE	19:24	19:24	8	protocol
LEAF_NODE	19:32	19:32	8	,
LEAF_NODE	19:34	19:34	8	minute
LEAF_NODE	19:40	19:40	8	)
LEAF_NODE	19:41	19:41	8	;
LEAF_NODE	20:1	20:1	7	}
SELECTION	20:3	20:8	3	
KEYWORD	20:3	20:3	4	else
LEAF_NODE	20:3	20:3	5	else
STATEMENTS	20:8	25:1	4	
LEAF_NODE	20:8	20:8	5	{
STATEMENTS	21:2	24:2	5	
EXPR_STATEMENT	21:2	21:38	6	purple_debug_info ( "cap" , "%d\n" , rc ) ;
EXPR	21:2	21:2	7	purple_debug_info ( "cap" , "%d\n" , rc )
FUNCTION_CALL	21:2	21:37	8	purple_debug_info ( "cap" , "%d\n" , rc )
CALLEE	21:2	21:2	9	purple_debug_info
LEAF_NODE	21:2	21:2	10	purple_debug_info
LEAF_NODE	21:19	21:19	9	(
ARGUMENT	21:20	21:20	9	"cap"
FIELD	21:20	21:20	10	"cap"
LEAF_NODE	21:20	21:20	11	"cap"
LEAF_NODE	21:25	21:25	9	,
ARGUMENT	21:27	21:27	9	"%d\n"
FIELD	21:27	21:27	10	"%d\n"
LEAF_NODE	21:27	21:27	11	"%d\n"
LEAF_NODE	21:33	21:33	9	,
ARGUMENT	21:35	21:35	9	rc
FIELD	21:35	21:35	10	rc
LEAF_NODE	21:35	21:35	11	rc
LEAF_NODE	21:37	21:37	9	)
LEAF_NODE	21:38	21:38	7	;
EXPR_STATEMENT	22:2	22:24	6	sqlite3_finalize ( stmt ) ;
EXPR	22:2	22:2	7	sqlite3_finalize ( stmt )
FUNCTION_CALL	22:2	22:23	8	sqlite3_finalize ( stmt )
CALLEE	22:2	22:2	9	sqlite3_finalize
LEAF_NODE	22:2	22:2	10	sqlite3_finalize
LEAF_NODE	22:18	22:18	9	(
ARGUMENT	22:19	22:19	9	stmt
FIELD	22:19	22:19	10	stmt
LEAF_NODE	22:19	22:19	11	stmt
LEAF_NODE	22:23	22:23	9	)
LEAF_NODE	22:24	22:24	7	;
EXPR_STATEMENT	23:2	23:26	6	sqlite3_free ( sql_select ) ;
EXPR	23:2	23:2	7	sqlite3_free ( sql_select )
FUNCTION_CALL	23:2	23:25	8	sqlite3_free ( sql_select )
CALLEE	23:2	23:2	9	sqlite3_free
LEAF_NODE	23:2	23:2	10	sqlite3_free
LEAF_NODE	23:14	23:14	9	(
ARGUMENT	23:15	23:15	9	sql_select
FIELD	23:15	23:15	10	sql_select
LEAF_NODE	23:15	23:15	11	sql_select
LEAF_NODE	23:25	23:25	9	)
LEAF_NODE	23:26	23:26	7	;
JUMP_STATEMENT	24:2	24:8	6	return DESTINATION ;
KEYWORD	24:2	24:2	7	return
LEAF_NODE	24:2	24:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	24:8	24:8	7	;
LEAF_NODE	25:1	25:1	5	}
EXPR_STATEMENT	26:1	26:23	3	sqlite3_finalize ( stmt ) ;
EXPR	26:1	26:1	4	sqlite3_finalize ( stmt )
FUNCTION_CALL	26:1	26:22	5	sqlite3_finalize ( stmt )
CALLEE	26:1	26:1	6	sqlite3_finalize
LEAF_NODE	26:1	26:1	7	sqlite3_finalize
LEAF_NODE	26:17	26:17	6	(
ARGUMENT	26:18	26:18	6	stmt
FIELD	26:18	26:18	7	stmt
LEAF_NODE	26:18	26:18	8	stmt
LEAF_NODE	26:22	26:22	6	)
LEAF_NODE	26:23	26:23	4	;
EXPR_STATEMENT	27:1	27:25	3	sqlite3_free ( sql_select ) ;
EXPR	27:1	27:1	4	sqlite3_free ( sql_select )
FUNCTION_CALL	27:1	27:24	5	sqlite3_free ( sql_select )
CALLEE	27:1	27:1	6	sqlite3_free
LEAF_NODE	27:1	27:1	7	sqlite3_free
LEAF_NODE	27:13	27:13	6	(
ARGUMENT	27:14	27:14	6	sql_select
FIELD	27:14	27:14	7	sql_select
LEAF_NODE	27:14	27:14	8	sql_select
LEAF_NODE	27:24	27:24	6	)
LEAF_NODE	27:25	27:25	4	;
EXPR_STATEMENT	28:1	28:48	3	sqlite3_exec ( _db , sql_ins_up , NULL , NULL , NULL ) ;
EXPR	28:1	28:1	4	sqlite3_exec ( _db , sql_ins_up , NULL , NULL , NULL )
FUNCTION_CALL	28:1	28:47	5	sqlite3_exec ( _db , sql_ins_up , NULL , NULL , NULL )
CALLEE	28:1	28:1	6	sqlite3_exec
LEAF_NODE	28:1	28:1	7	sqlite3_exec
LEAF_NODE	28:13	28:13	6	(
ARGUMENT	28:14	28:14	6	_db
FIELD	28:14	28:14	7	_db
LEAF_NODE	28:14	28:14	8	_db
LEAF_NODE	28:17	28:17	6	,
ARGUMENT	28:19	28:19	6	sql_ins_up
FIELD	28:19	28:19	7	sql_ins_up
LEAF_NODE	28:19	28:19	8	sql_ins_up
LEAF_NODE	28:29	28:29	6	,
ARGUMENT	28:31	28:31	6	NULL
FIELD	28:31	28:31	7	NULL
LEAF_NODE	28:31	28:31	8	NULL
LEAF_NODE	28:35	28:35	6	,
ARGUMENT	28:37	28:37	6	NULL
FIELD	28:37	28:37	7	NULL
LEAF_NODE	28:37	28:37	8	NULL
LEAF_NODE	28:41	28:41	6	,
ARGUMENT	28:43	28:43	6	NULL
FIELD	28:43	28:43	7	NULL
LEAF_NODE	28:43	28:43	8	NULL
LEAF_NODE	28:47	28:47	6	)
LEAF_NODE	28:48	28:48	4	;
EXPR_STATEMENT	29:1	29:25	3	sqlite3_free ( sql_ins_up ) ;
EXPR	29:1	29:1	4	sqlite3_free ( sql_ins_up )
FUNCTION_CALL	29:1	29:24	5	sqlite3_free ( sql_ins_up )
CALLEE	29:1	29:1	6	sqlite3_free
LEAF_NODE	29:1	29:1	7	sqlite3_free
LEAF_NODE	29:13	29:13	6	(
ARGUMENT	29:14	29:14	6	sql_ins_up
FIELD	29:14	29:14	7	sql_ins_up
LEAF_NODE	29:14	29:14	8	sql_ins_up
LEAF_NODE	29:24	29:24	6	)
LEAF_NODE	29:25	29:25	4	;
LEAF_NODE	30:0	30:0	2	}

LEAF_NODE	0:0	0:0	0	SOURCE_FILE

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	21:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	jingle_handle_session_accept
LEAF_NODE	2:0	2:0	3	jingle_handle_session_accept
PARAMETER_LIST	2:28	2:68	2	( JingleSession * session , xmlnode * jingle )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:44	3	JingleSession * session
TYPE	2:29	2:43	4	JingleSession *
TYPE_NAME	2:29	2:29	5	JingleSession
LEAF_NODE	2:29	2:29	6	JingleSession
POINTER	2:43	2:43	5	*
LEAF_NODE	2:43	2:43	6	*
NAME	2:44	2:44	4	session
LEAF_NODE	2:44	2:44	5	session
LEAF_NODE	2:51	2:51	3	,
PARAMETER_DECL	2:53	2:62	3	xmlnode * jingle
TYPE	2:53	2:61	4	xmlnode *
TYPE_NAME	2:53	2:53	5	xmlnode
LEAF_NODE	2:53	2:53	6	xmlnode
POINTER	2:61	2:61	5	*
LEAF_NODE	2:61	2:61	6	*
NAME	2:62	2:62	4	jingle
LEAF_NODE	2:62	2:62	5	jingle
LEAF_NODE	2:68	2:68	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:56	3	xmlnode * content ; content = xmlnode_get_child ( jingle , "content" ) ;
VAR_DECL	4:1	4:10	4	xmlnode * content ; content = xmlnode_get_child ( jingle , "content" )
TYPE	4:1	4:9	5	xmlnode *
TYPE_NAME	4:1	4:1	6	xmlnode
LEAF_NODE	4:1	4:1	7	xmlnode
POINTER	4:9	4:9	6	*
LEAF_NODE	4:9	4:9	7	*
NAME	4:10	4:10	5	content
LEAF_NODE	4:10	4:10	6	content
LEAF_NODE	0:0	0:0	5	;
INIT	4:10	4:10	5	content = xmlnode_get_child ( jingle , "content" )
ASSIGN	4:10	4:20	6	content = xmlnode_get_child ( jingle , "content" )
LVAL	4:10	4:10	7	content
NAME	4:10	4:10	8	content
LEAF_NODE	4:10	4:10	9	content
ASSIGN_OP	4:18	4:18	7	=
LEAF_NODE	4:18	4:18	8	=
RVAL	4:20	4:20	7	xmlnode_get_child ( jingle , "content" )
FUNCTION_CALL	4:20	4:55	8	xmlnode_get_child ( jingle , "content" )
CALLEE	4:20	4:20	9	xmlnode_get_child
LEAF_NODE	4:20	4:20	10	xmlnode_get_child
LEAF_NODE	4:37	4:37	9	(
ARGUMENT	4:38	4:38	9	jingle
FIELD	4:38	4:38	10	jingle
LEAF_NODE	4:38	4:38	11	jingle
LEAF_NODE	4:44	4:44	9	,
ARGUMENT	4:46	4:46	9	"content"
FIELD	4:46	4:46	10	"content"
LEAF_NODE	4:46	4:46	11	"content"
LEAF_NODE	4:55	4:55	9	)
LEAF_NODE	4:56	4:56	4	;
EXPR_STATEMENT	5:1	5:59	3	jabber_iq_send ( jingle_session_create_ack ( session , jingle ) ) ;
EXPR	5:1	5:1	4	jabber_iq_send ( jingle_session_create_ack ( session , jingle ) )
FUNCTION_CALL	5:1	5:58	5	jabber_iq_send ( jingle_session_create_ack ( session , jingle ) )
CALLEE	5:1	5:1	6	jabber_iq_send
LEAF_NODE	5:1	5:1	7	jabber_iq_send
LEAF_NODE	5:15	5:15	6	(
ARGUMENT	5:16	5:16	6	jingle_session_create_ack ( session , jingle )
FUNCTION_CALL	5:16	5:57	7	jingle_session_create_ack ( session , jingle )
CALLEE	5:16	5:16	8	jingle_session_create_ack
LEAF_NODE	5:16	5:16	9	jingle_session_create_ack
LEAF_NODE	5:41	5:41	8	(
ARGUMENT	5:42	5:42	8	session
FIELD	5:42	5:42	9	session
LEAF_NODE	5:42	5:42	10	session
LEAF_NODE	5:49	5:49	8	,
ARGUMENT	5:51	5:51	8	jingle
FIELD	5:51	5:51	9	jingle
LEAF_NODE	5:51	5:51	10	jingle
LEAF_NODE	5:57	5:57	8	)
LEAF_NODE	5:58	5:58	6	)
LEAF_NODE	5:59	5:59	4	;
EXPR_STATEMENT	6:1	6:39	3	jingle_session_accept_session ( session ) ;
EXPR	6:1	6:1	4	jingle_session_accept_session ( session )
FUNCTION_CALL	6:1	6:38	5	jingle_session_accept_session ( session )
CALLEE	6:1	6:1	6	jingle_session_accept_session
LEAF_NODE	6:1	6:1	7	jingle_session_accept_session
LEAF_NODE	6:30	6:30	6	(
ARGUMENT	6:31	6:31	6	session
FIELD	6:31	6:31	7	session
LEAF_NODE	6:31	6:31	8	session
LEAF_NODE	6:38	6:38	6	)
LEAF_NODE	6:39	6:39	4	;
ITERATION	7:1	7:59	3	
KEYWORD	7:1	7:1	4	for
LEAF_NODE	7:1	7:1	5	for
LEAF_NODE	7:5	7:5	4	(
FOR_INIT	7:6	7:6	4	;
LEAF_NODE	7:6	7:6	5	;
CONDITION	7:8	7:8	4	content
EXPR	7:8	7:8	5	content
FIELD	7:8	7:8	6	content
LEAF_NODE	7:8	7:8	7	content
LEAF_NODE	7:15	7:15	4	;
FOR_EXPR	7:17	7:17	4	content = xmlnode_get_next_twin ( content )
EXPR	7:17	7:17	5	content = xmlnode_get_next_twin ( content )
ASSIGN	7:17	7:27	6	content = xmlnode_get_next_twin ( content )
LVAL	7:17	7:17	7	content
FIELD	7:17	7:17	8	content
LEAF_NODE	7:17	7:17	9	content
ASSIGN_OP	7:25	7:25	7	=
LEAF_NODE	7:25	7:25	8	=
RVAL	7:27	7:27	7	xmlnode_get_next_twin ( content )
FUNCTION_CALL	7:27	7:56	8	xmlnode_get_next_twin ( content )
CALLEE	7:27	7:27	9	xmlnode_get_next_twin
LEAF_NODE	7:27	7:27	10	xmlnode_get_next_twin
LEAF_NODE	7:48	7:48	9	(
ARGUMENT	7:49	7:49	9	content
FIELD	7:49	7:49	10	content
LEAF_NODE	7:49	7:49	11	content
LEAF_NODE	7:56	7:56	9	)
LEAF_NODE	7:57	7:57	4	)
STATEMENTS	7:59	20:1	4	
LEAF_NODE	7:59	7:59	5	{
STATEMENTS	8:2	16:4	5	
SIMPLE_DECL	8:2	8:57	6	const gchar * name ; name = xmlnode_get_attrib ( content , "name" ) ;
VAR_DECL	8:2	8:15	7	const gchar * name ; name = xmlnode_get_attrib ( content , "name" )
TYPE	8:2	8:14	8	const gchar *
TYPE_NAME	8:2	8:8	9	const gchar
LEAF_NODE	8:2	8:2	10	const
LEAF_NODE	8:8	8:8	10	gchar
POINTER	8:14	8:14	9	*
LEAF_NODE	8:14	8:14	10	*
NAME	8:15	8:15	8	name
LEAF_NODE	8:15	8:15	9	name
LEAF_NODE	0:0	0:0	8	;
INIT	8:15	8:15	8	name = xmlnode_get_attrib ( content , "name" )
ASSIGN	8:15	8:22	9	name = xmlnode_get_attrib ( content , "name" )
LVAL	8:15	8:15	10	name
NAME	8:15	8:15	11	name
LEAF_NODE	8:15	8:15	12	name
ASSIGN_OP	8:20	8:20	10	=
LEAF_NODE	8:20	8:20	11	=
RVAL	8:22	8:22	10	xmlnode_get_attrib ( content , "name" )
FUNCTION_CALL	8:22	8:56	11	xmlnode_get_attrib ( content , "name" )
CALLEE	8:22	8:22	12	xmlnode_get_attrib
LEAF_NODE	8:22	8:22	13	xmlnode_get_attrib
LEAF_NODE	8:40	8:40	12	(
ARGUMENT	8:41	8:41	12	content
FIELD	8:41	8:41	13	content
LEAF_NODE	8:41	8:41	14	content
LEAF_NODE	8:48	8:48	12	,
ARGUMENT	8:50	8:50	12	"name"
FIELD	8:50	8:50	13	"name"
LEAF_NODE	8:50	8:50	14	"name"
LEAF_NODE	8:56	8:56	12	)
LEAF_NODE	8:57	8:57	7	;
SIMPLE_DECL	9:2	9:63	6	const gchar * creator ; creator = xmlnode_get_attrib ( content , "creator" ) ;
VAR_DECL	9:2	9:15	7	const gchar * creator ; creator = xmlnode_get_attrib ( content , "creator" )
TYPE	9:2	9:14	8	const gchar *
TYPE_NAME	9:2	9:8	9	const gchar
LEAF_NODE	9:2	9:2	10	const
LEAF_NODE	9:8	9:8	10	gchar
POINTER	9:14	9:14	9	*
LEAF_NODE	9:14	9:14	10	*
NAME	9:15	9:15	8	creator
LEAF_NODE	9:15	9:15	9	creator
LEAF_NODE	0:0	0:0	8	;
INIT	9:15	9:15	8	creator = xmlnode_get_attrib ( content , "creator" )
ASSIGN	9:15	9:25	9	creator = xmlnode_get_attrib ( content , "creator" )
LVAL	9:15	9:15	10	creator
NAME	9:15	9:15	11	creator
LEAF_NODE	9:15	9:15	12	creator
ASSIGN_OP	9:23	9:23	10	=
LEAF_NODE	9:23	9:23	11	=
RVAL	9:25	9:25	10	xmlnode_get_attrib ( content , "creator" )
FUNCTION_CALL	9:25	9:62	11	xmlnode_get_attrib ( content , "creator" )
CALLEE	9:25	9:25	12	xmlnode_get_attrib
LEAF_NODE	9:25	9:25	13	xmlnode_get_attrib
LEAF_NODE	9:43	9:43	12	(
ARGUMENT	9:44	9:44	12	content
FIELD	9:44	9:44	13	content
LEAF_NODE	9:44	9:44	14	content
LEAF_NODE	9:51	9:51	12	,
ARGUMENT	9:53	9:53	12	"creator"
FIELD	9:53	9:53	13	"creator"
LEAF_NODE	9:53	9:53	14	"creator"
LEAF_NODE	9:62	9:62	12	)
LEAF_NODE	9:63	9:63	7	;
SIMPLE_DECL	10:2	11:55	6	JingleContent * parsed_content ; parsed_content = jingle_session_find_content ( session , name , creator ) ;
VAR_DECL	10:2	10:17	7	JingleContent * parsed_content ; parsed_content = jingle_session_find_content ( session , name , creator )
TYPE	10:2	10:16	8	JingleContent *
TYPE_NAME	10:2	10:2	9	JingleContent
LEAF_NODE	10:2	10:2	10	JingleContent
POINTER	10:16	10:16	9	*
LEAF_NODE	10:16	10:16	10	*
NAME	10:17	10:17	8	parsed_content
LEAF_NODE	10:17	10:17	9	parsed_content
LEAF_NODE	0:0	0:0	8	;
INIT	10:17	10:17	8	parsed_content = jingle_session_find_content ( session , name , creator )
ASSIGN	10:17	11:4	9	parsed_content = jingle_session_find_content ( session , name , creator )
LVAL	10:17	10:17	10	parsed_content
NAME	10:17	10:17	11	parsed_content
LEAF_NODE	10:17	10:17	12	parsed_content
ASSIGN_OP	10:32	10:32	10	=
LEAF_NODE	10:32	10:32	11	=
RVAL	11:4	11:4	10	jingle_session_find_content ( session , name , creator )
FUNCTION_CALL	11:4	11:54	11	jingle_session_find_content ( session , name , creator )
CALLEE	11:4	11:4	12	jingle_session_find_content
LEAF_NODE	11:4	11:4	13	jingle_session_find_content
LEAF_NODE	11:31	11:31	12	(
ARGUMENT	11:32	11:32	12	session
FIELD	11:32	11:32	13	session
LEAF_NODE	11:32	11:32	14	session
LEAF_NODE	11:39	11:39	12	,
ARGUMENT	11:41	11:41	12	name
FIELD	11:41	11:41	13	name
LEAF_NODE	11:41	11:41	14	name
LEAF_NODE	11:45	11:45	12	,
ARGUMENT	11:47	11:47	12	creator
FIELD	11:47	11:47	13	creator
LEAF_NODE	11:47	11:47	14	creator
LEAF_NODE	11:54	11:54	12	)
LEAF_NODE	11:55	11:55	7	;
SELECTION	12:2	12:30	6	
KEYWORD	12:2	12:2	7	if
LEAF_NODE	12:2	12:2	8	if
LEAF_NODE	12:5	12:5	7	(
CONDITION	12:6	12:6	7	parsed_content == NULL
EXPR	12:6	12:24	8	parsed_content == NULL
FIELD	12:6	12:6	9	parsed_content
LEAF_NODE	12:6	12:6	10	parsed_content
EQ_OPERATOR	12:21	12:21	9	==
LEAF_NODE	12:21	12:21	10	==
FIELD	12:24	12:24	9	NULL
LEAF_NODE	12:24	12:24	10	NULL
LEAF_NODE	12:28	12:28	7	)
STATEMENTS	12:30	16:2	7	
LEAF_NODE	12:30	12:30	8	{
STATEMENTS	13:3	14:3	8	
EXPR_STATEMENT	13:3	13:58	9	purple_debug_error ( "jingle" , "Error parsing content\n" ) ;
EXPR	13:3	13:3	10	purple_debug_error ( "jingle" , "Error parsing content\n" )
FUNCTION_CALL	13:3	13:57	11	purple_debug_error ( "jingle" , "Error parsing content\n" )
CALLEE	13:3	13:3	12	purple_debug_error
LEAF_NODE	13:3	13:3	13	purple_debug_error
LEAF_NODE	13:21	13:21	12	(
ARGUMENT	13:22	13:22	12	"jingle"
FIELD	13:22	13:22	13	"jingle"
LEAF_NODE	13:22	13:22	14	"jingle"
LEAF_NODE	13:30	13:30	12	,
ARGUMENT	13:32	13:32	12	"Error parsing content\n"
FIELD	13:32	13:32	13	"Error parsing content\n"
LEAF_NODE	13:32	13:32	14	"Error parsing content\n"
LEAF_NODE	13:57	13:57	12	)
LEAF_NODE	13:58	13:58	10	;
EXPR_STATEMENT	14:3	15:32	9	jabber_iq_send ( jingle_session_terminate_packet ( session , "unsupported-applications" ) ) ;
EXPR	14:3	14:3	10	jabber_iq_send ( jingle_session_terminate_packet ( session , "unsupported-applications" ) )
FUNCTION_CALL	14:3	15:31	11	jabber_iq_send ( jingle_session_terminate_packet ( session , "unsupported-applications" ) )
CALLEE	14:3	14:3	12	jabber_iq_send
LEAF_NODE	14:3	14:3	13	jabber_iq_send
LEAF_NODE	14:17	14:17	12	(
ARGUMENT	14:18	14:18	12	jingle_session_terminate_packet ( session , "unsupported-applications" )
FUNCTION_CALL	14:18	15:30	13	jingle_session_terminate_packet ( session , "unsupported-applications" )
CALLEE	14:18	14:18	14	jingle_session_terminate_packet
LEAF_NODE	14:18	14:18	15	jingle_session_terminate_packet
LEAF_NODE	14:49	14:49	14	(
ARGUMENT	14:50	14:50	14	session
FIELD	14:50	14:50	15	session
LEAF_NODE	14:50	14:50	16	session
LEAF_NODE	14:57	14:57	14	,
ARGUMENT	15:4	15:4	14	"unsupported-applications"
FIELD	15:4	15:4	15	"unsupported-applications"
LEAF_NODE	15:4	15:4	16	"unsupported-applications"
LEAF_NODE	15:30	15:30	14	)
LEAF_NODE	15:31	15:31	12	)
LEAF_NODE	15:32	15:32	10	;
LEAF_NODE	16:2	16:2	8	}
SELECTION	16:4	16:9	6	
KEYWORD	16:4	16:4	7	else
LEAF_NODE	16:4	16:4	8	else
STATEMENTS	16:9	19:2	7	
LEAF_NODE	16:9	16:9	8	{
STATEMENTS	17:3	17:3	8	
EXPR_STATEMENT	17:3	18:27	9	jingle_content_handle_action ( parsed_content , content , JINGLE_SESSION_ACCEPT ) ;
EXPR	17:3	17:3	10	jingle_content_handle_action ( parsed_content , content , JINGLE_SESSION_ACCEPT )
FUNCTION_CALL	17:3	18:26	11	jingle_content_handle_action ( parsed_content , content , JINGLE_SESSION_ACCEPT )
CALLEE	17:3	17:3	12	jingle_content_handle_action
LEAF_NODE	17:3	17:3	13	jingle_content_handle_action
LEAF_NODE	17:31	17:31	12	(
ARGUMENT	17:32	17:32	12	parsed_content
FIELD	17:32	17:32	13	parsed_content
LEAF_NODE	17:32	17:32	14	parsed_content
LEAF_NODE	17:46	17:46	12	,
ARGUMENT	17:48	17:48	12	content
FIELD	17:48	17:48	13	content
LEAF_NODE	17:48	17:48	14	content
LEAF_NODE	17:55	17:55	12	,
ARGUMENT	18:5	18:5	12	JINGLE_SESSION_ACCEPT
FIELD	18:5	18:5	13	JINGLE_SESSION_ACCEPT
LEAF_NODE	18:5	18:5	14	JINGLE_SESSION_ACCEPT
LEAF_NODE	18:26	18:26	12	)
LEAF_NODE	18:27	18:27	10	;
LEAF_NODE	19:2	19:2	8	}
LEAF_NODE	20:1	20:1	5	}
LEAF_NODE	21:0	21:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:5	2	void *
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
LEAF_NODE	1:5	1:5	3	*
FUNCTION_NAME	2:0	2:0	2	purple_pounce_get_data
LEAF_NODE	2:0	2:0	3	purple_pounce_get_data
PARAMETER_LIST	2:22	2:49	2	( const PurplePounce * pounce )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:43	3	const PurplePounce * pounce
TYPE	2:23	2:42	4	const PurplePounce *
TYPE_NAME	2:23	2:29	5	const PurplePounce
LEAF_NODE	2:23	2:23	6	const
LEAF_NODE	2:29	2:29	6	PurplePounce
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	pounce
LEAF_NODE	2:43	2:43	5	pounce
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:43	3	g_return_val_if_fail ( pounce != NULL , NULL ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( pounce != NULL , NULL )
FUNCTION_CALL	4:1	4:42	5	g_return_val_if_fail ( pounce != NULL , NULL )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:32	6	pounce != NULL
FIELD	4:22	4:22	7	pounce
LEAF_NODE	4:22	4:22	8	pounce
EQ_OPERATOR	4:29	4:29	7	!=
LEAF_NODE	4:29	4:29	8	!=
FIELD	4:32	4:32	7	NULL
LEAF_NODE	4:32	4:32	8	NULL
LEAF_NODE	4:36	4:36	6	,
ARGUMENT	4:38	4:38	6	NULL
FIELD	4:38	4:38	7	NULL
LEAF_NODE	4:38	4:38	8	NULL
LEAF_NODE	4:42	4:42	6	)
LEAF_NODE	4:43	4:43	4	;
JUMP_STATEMENT	5:1	5:20	3	return pounce -> data ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	pounce -> data
EXPR	5:8	5:8	5	pounce -> data
FIELD	5:8	5:16	6	pounce -> data
LEAF_NODE	5:8	5:8	7	pounce
LEAF_NODE	5:14	5:14	7	->
LEAF_NODE	5:16	5:16	7	data
LEAF_NODE	5:20	5:20	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	13:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_pounces_uninit
LEAF_NODE	2:0	2:0	3	purple_pounces_uninit
PARAMETER_LIST	2:21	2:22	2	( )
LEAF_NODE	2:21	2:21	3	(
LEAF_NODE	2:22	2:22	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	12:1	2	
SELECTION	4:1	5:1	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	save_timer != 0
EXPR	4:5	4:19	5	save_timer != 0
FIELD	4:5	4:5	6	save_timer
LEAF_NODE	4:5	4:5	7	save_timer
EQ_OPERATOR	4:16	4:16	6	!=
LEAF_NODE	4:16	4:16	7	!=
FIELD	4:19	4:19	6	0
LEAF_NODE	4:19	4:19	7	0
LEAF_NODE	4:20	4:20	4	)
STATEMENTS	5:1	9:1	4	
LEAF_NODE	5:1	5:1	5	{
STATEMENTS	6:2	8:2	5	
EXPR_STATEMENT	6:2	6:35	6	purple_timeout_remove ( save_timer ) ;
EXPR	6:2	6:2	7	purple_timeout_remove ( save_timer )
FUNCTION_CALL	6:2	6:34	8	purple_timeout_remove ( save_timer )
CALLEE	6:2	6:2	9	purple_timeout_remove
LEAF_NODE	6:2	6:2	10	purple_timeout_remove
LEAF_NODE	6:23	6:23	9	(
ARGUMENT	6:24	6:24	9	save_timer
FIELD	6:24	6:24	10	save_timer
LEAF_NODE	6:24	6:24	11	save_timer
LEAF_NODE	6:34	6:34	9	)
LEAF_NODE	6:35	6:35	7	;
EXPR_STATEMENT	7:2	7:16	6	save_timer = 0 ;
EXPR	7:2	7:2	7	save_timer = 0
ASSIGN	7:2	7:15	8	save_timer = 0
LVAL	7:2	7:2	9	save_timer
FIELD	7:2	7:2	10	save_timer
LEAF_NODE	7:2	7:2	11	save_timer
ASSIGN_OP	7:13	7:13	9	=
LEAF_NODE	7:13	7:13	10	=
RVAL	7:15	7:15	9	0
FIELD	7:15	7:15	10	0
LEAF_NODE	7:15	7:15	11	0
LEAF_NODE	7:16	7:16	7	;
EXPR_STATEMENT	8:2	8:16	6	sync_pounces ( ) ;
EXPR	8:2	8:2	7	sync_pounces ( )
FUNCTION_CALL	8:2	8:15	8	sync_pounces ( )
CALLEE	8:2	8:2	9	sync_pounces
LEAF_NODE	8:2	8:2	10	sync_pounces
LEAF_NODE	8:14	8:14	9	(
LEAF_NODE	8:15	8:15	9	)
LEAF_NODE	8:16	8:16	7	;
LEAF_NODE	9:1	9:1	5	}
EXPR_STATEMENT	10:1	10:65	3	purple_signals_disconnect_by_handle ( purple_pounces_get_handle ( ) ) ;
EXPR	10:1	10:1	4	purple_signals_disconnect_by_handle ( purple_pounces_get_handle ( ) )
FUNCTION_CALL	10:1	10:64	5	purple_signals_disconnect_by_handle ( purple_pounces_get_handle ( ) )
CALLEE	10:1	10:1	6	purple_signals_disconnect_by_handle
LEAF_NODE	10:1	10:1	7	purple_signals_disconnect_by_handle
LEAF_NODE	10:36	10:36	6	(
ARGUMENT	10:37	10:37	6	purple_pounces_get_handle ( )
FUNCTION_CALL	10:37	10:63	7	purple_pounces_get_handle ( )
CALLEE	10:37	10:37	8	purple_pounces_get_handle
LEAF_NODE	10:37	10:37	9	purple_pounces_get_handle
LEAF_NODE	10:62	10:62	8	(
LEAF_NODE	10:63	10:63	8	)
LEAF_NODE	10:64	10:64	6	)
LEAF_NODE	10:65	10:65	4	;
EXPR_STATEMENT	11:1	11:38	3	g_hash_table_destroy ( pounce_handlers ) ;
EXPR	11:1	11:1	4	g_hash_table_destroy ( pounce_handlers )
FUNCTION_CALL	11:1	11:37	5	g_hash_table_destroy ( pounce_handlers )
CALLEE	11:1	11:1	6	g_hash_table_destroy
LEAF_NODE	11:1	11:1	7	g_hash_table_destroy
LEAF_NODE	11:21	11:21	6	(
ARGUMENT	11:22	11:22	6	pounce_handlers
FIELD	11:22	11:22	7	pounce_handlers
LEAF_NODE	11:22	11:22	8	pounce_handlers
LEAF_NODE	11:37	11:37	6	)
LEAF_NODE	11:38	11:38	4	;
EXPR_STATEMENT	12:1	12:23	3	pounce_handlers = NULL ;
EXPR	12:1	12:1	4	pounce_handlers = NULL
ASSIGN	12:1	12:19	5	pounce_handlers = NULL
LVAL	12:1	12:1	6	pounce_handlers
FIELD	12:1	12:1	7	pounce_handlers
LEAF_NODE	12:1	12:1	8	pounce_handlers
ASSIGN_OP	12:17	12:17	6	=
LEAF_NODE	12:17	12:17	7	=
RVAL	12:19	12:19	6	NULL
FIELD	12:19	12:19	7	NULL
LEAF_NODE	12:19	12:19	8	NULL
LEAF_NODE	12:23	12:23	4	;
LEAF_NODE	13:0	13:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	6:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	ggp_callback_add_buddy
LEAF_NODE	2:12	2:12	3	ggp_callback_add_buddy
PARAMETER_LIST	2:34	2:87	2	( PurpleConnection * gc , GList * row , gpointer user_data )
LEAF_NODE	2:34	2:34	3	(
PARAMETER_DECL	2:35	2:53	3	PurpleConnection * gc
TYPE	2:35	2:52	4	PurpleConnection *
TYPE_NAME	2:35	2:35	5	PurpleConnection
LEAF_NODE	2:35	2:35	6	PurpleConnection
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	gc
LEAF_NODE	2:53	2:53	5	gc
LEAF_NODE	2:55	2:55	3	,
PARAMETER_DECL	2:57	2:64	3	GList * row
TYPE	2:57	2:63	4	GList *
TYPE_NAME	2:57	2:57	5	GList
LEAF_NODE	2:57	2:57	6	GList
POINTER	2:63	2:63	5	*
LEAF_NODE	2:63	2:63	6	*
NAME	2:64	2:64	4	row
LEAF_NODE	2:64	2:64	5	row
LEAF_NODE	2:67	2:67	3	,
PARAMETER_DECL	2:69	2:78	3	gpointer user_data
TYPE	2:69	2:69	4	gpointer
TYPE_NAME	2:69	2:69	5	gpointer
LEAF_NODE	2:69	2:69	6	gpointer
NAME	2:78	2:78	4	user_data
LEAF_NODE	2:78	2:78	5	user_data
LEAF_NODE	2:87	2:87	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	5:45	3	purple_blist_request_add_buddy ( purple_connection_get_account ( gc ) , g_list_nth_data ( row , 0 ) , NULL , NULL ) ;
EXPR	4:1	4:1	4	purple_blist_request_add_buddy ( purple_connection_get_account ( gc ) , g_list_nth_data ( row , 0 ) , NULL , NULL )
FUNCTION_CALL	4:1	5:44	5	purple_blist_request_add_buddy ( purple_connection_get_account ( gc ) , g_list_nth_data ( row , 0 ) , NULL , NULL )
CALLEE	4:1	4:1	6	purple_blist_request_add_buddy
LEAF_NODE	4:1	4:1	7	purple_blist_request_add_buddy
LEAF_NODE	4:31	4:31	6	(
ARGUMENT	4:32	4:32	6	purple_connection_get_account ( gc )
FUNCTION_CALL	4:32	4:64	7	purple_connection_get_account ( gc )
CALLEE	4:32	4:32	8	purple_connection_get_account
LEAF_NODE	4:32	4:32	9	purple_connection_get_account
LEAF_NODE	4:61	4:61	8	(
ARGUMENT	4:62	4:62	8	gc
FIELD	4:62	4:62	9	gc
LEAF_NODE	4:62	4:62	10	gc
LEAF_NODE	4:64	4:64	8	)
LEAF_NODE	4:65	4:65	6	,
ARGUMENT	5:9	5:9	6	g_list_nth_data ( row , 0 )
FUNCTION_CALL	5:9	5:31	7	g_list_nth_data ( row , 0 )
CALLEE	5:9	5:9	8	g_list_nth_data
LEAF_NODE	5:9	5:9	9	g_list_nth_data
LEAF_NODE	5:24	5:24	8	(
ARGUMENT	5:25	5:25	8	row
FIELD	5:25	5:25	9	row
LEAF_NODE	5:25	5:25	10	row
LEAF_NODE	5:28	5:28	8	,
ARGUMENT	5:30	5:30	8	0
FIELD	5:30	5:30	9	0
LEAF_NODE	5:30	5:30	10	0
LEAF_NODE	5:31	5:31	8	)
LEAF_NODE	5:32	5:32	6	,
ARGUMENT	5:34	5:34	6	NULL
FIELD	5:34	5:34	7	NULL
LEAF_NODE	5:34	5:34	8	NULL
LEAF_NODE	5:38	5:38	6	,
ARGUMENT	5:40	5:40	6	NULL
FIELD	5:40	5:40	7	NULL
LEAF_NODE	5:40	5:40	8	NULL
LEAF_NODE	5:44	5:44	6	)
LEAF_NODE	5:45	5:45	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:18	2	PurpleSavedStatus *
TYPE_NAME	1:0	1:0	3	PurpleSavedStatus
LEAF_NODE	1:0	1:0	4	PurpleSavedStatus
LEAF_NODE	1:18	1:18	3	*
FUNCTION_NAME	2:0	2:0	2	purple_savedstatus_get_current
LEAF_NODE	2:0	2:0	3	purple_savedstatus_get_current
PARAMETER_LIST	2:30	2:35	2	( void )
LEAF_NODE	2:30	2:30	3	(
PARAMETER_DECL	2:31	2:31	3	void
LEAF_NODE	2:31	2:31	4	void
LEAF_NODE	2:35	2:35	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	purple_savedstatus_is_idleaway ( )
EXPR	4:5	4:5	5	purple_savedstatus_is_idleaway ( )
FUNCTION_CALL	4:5	4:36	6	purple_savedstatus_is_idleaway ( )
CALLEE	4:5	4:5	7	purple_savedstatus_is_idleaway
LEAF_NODE	4:5	4:5	8	purple_savedstatus_is_idleaway
LEAF_NODE	4:35	4:35	7	(
LEAF_NODE	4:36	4:36	7	)
LEAF_NODE	4:37	4:37	4	)
STATEMENTS	5:2	5:2	4	
JUMP_STATEMENT	5:2	5:42	5	return purple_savedstatus_get_idleaway ( ) ;
KEYWORD	5:2	5:2	6	return
LEAF_NODE	5:2	5:2	7	return
DESTINATION	5:9	5:9	6	purple_savedstatus_get_idleaway ( )
EXPR	5:9	5:9	7	purple_savedstatus_get_idleaway ( )
FUNCTION_CALL	5:9	5:41	8	purple_savedstatus_get_idleaway ( )
CALLEE	5:9	5:9	9	purple_savedstatus_get_idleaway
LEAF_NODE	5:9	5:9	10	purple_savedstatus_get_idleaway
LEAF_NODE	5:40	5:40	9	(
LEAF_NODE	5:41	5:41	9	)
LEAF_NODE	5:42	5:42	6	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	else
LEAF_NODE	6:1	6:1	5	else
STATEMENTS	7:2	7:2	4	
JUMP_STATEMENT	7:2	7:41	5	return purple_savedstatus_get_default ( ) ;
KEYWORD	7:2	7:2	6	return
LEAF_NODE	7:2	7:2	7	return
DESTINATION	7:9	7:9	6	purple_savedstatus_get_default ( )
EXPR	7:9	7:9	7	purple_savedstatus_get_default ( )
FUNCTION_CALL	7:9	7:40	8	purple_savedstatus_get_default ( )
CALLEE	7:9	7:9	9	purple_savedstatus_get_default
LEAF_NODE	7:9	7:9	10	purple_savedstatus_get_default
LEAF_NODE	7:39	7:39	9	(
LEAF_NODE	7:40	7:40	9	)
LEAF_NODE	7:41	7:41	6	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:6	2	GList *
TYPE_NAME	1:0	1:0	3	GList
LEAF_NODE	1:0	1:0	4	GList
LEAF_NODE	1:6	1:6	3	*
FUNCTION_NAME	2:0	2:0	2	purple_presence_get_statuses
LEAF_NODE	2:0	2:0	3	purple_presence_get_statuses
PARAMETER_LIST	2:28	2:59	2	( const PurplePresence * presence )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:51	3	const PurplePresence * presence
TYPE	2:29	2:50	4	const PurplePresence *
TYPE_NAME	2:29	2:35	5	const PurplePresence
LEAF_NODE	2:29	2:29	6	const
LEAF_NODE	2:35	2:35	6	PurplePresence
POINTER	2:50	2:50	5	*
LEAF_NODE	2:50	2:50	6	*
NAME	2:51	2:51	4	presence
LEAF_NODE	2:51	2:51	5	presence
LEAF_NODE	2:59	2:59	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:45	3	g_return_val_if_fail ( presence != NULL , NULL ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( presence != NULL , NULL )
FUNCTION_CALL	4:1	4:44	5	g_return_val_if_fail ( presence != NULL , NULL )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:34	6	presence != NULL
FIELD	4:22	4:22	7	presence
LEAF_NODE	4:22	4:22	8	presence
EQ_OPERATOR	4:31	4:31	7	!=
LEAF_NODE	4:31	4:31	8	!=
FIELD	4:34	4:34	7	NULL
LEAF_NODE	4:34	4:34	8	NULL
LEAF_NODE	4:38	4:38	6	,
ARGUMENT	4:40	4:40	6	NULL
FIELD	4:40	4:40	7	NULL
LEAF_NODE	4:40	4:40	8	NULL
LEAF_NODE	4:44	4:44	6	)
LEAF_NODE	4:45	4:45	4	;
JUMP_STATEMENT	5:1	5:26	3	return presence -> statuses ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	presence -> statuses
EXPR	5:8	5:8	5	presence -> statuses
FIELD	5:8	5:18	6	presence -> statuses
LEAF_NODE	5:8	5:8	7	presence
LEAF_NODE	5:16	5:16	7	->
LEAF_NODE	5:18	5:18	7	statuses
LEAF_NODE	5:26	5:26	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	16:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_UINT
LEAF_NODE	2:0	2:0	3	purple_marshal_BOOLEAN__POINTER_POINTER_POINTER_POINTER_UINT
PARAMETER_LIST	2:60	3:64	2	( PurpleCallback cb , va_list args , void * data , void * * return_val )
LEAF_NODE	2:60	2:60	3	(
PARAMETER_DECL	3:2	3:17	3	PurpleCallback cb
TYPE	3:2	3:2	4	PurpleCallback
TYPE_NAME	3:2	3:2	5	PurpleCallback
LEAF_NODE	3:2	3:2	6	PurpleCallback
NAME	3:17	3:17	4	cb
LEAF_NODE	3:17	3:17	5	cb
LEAF_NODE	3:19	3:19	3	,
PARAMETER_DECL	3:21	3:29	3	va_list args
TYPE	3:21	3:21	4	va_list
TYPE_NAME	3:21	3:21	5	va_list
LEAF_NODE	3:21	3:21	6	va_list
NAME	3:29	3:29	4	args
LEAF_NODE	3:29	3:29	5	args
LEAF_NODE	3:33	3:33	3	,
PARAMETER_DECL	3:35	3:41	3	void * data
TYPE	3:35	3:40	4	void *
TYPE_NAME	3:35	3:35	5	void
LEAF_NODE	3:35	3:35	6	void
POINTER	3:40	3:40	5	*
LEAF_NODE	3:40	3:40	6	*
NAME	3:41	3:41	4	data
LEAF_NODE	3:41	3:41	5	data
LEAF_NODE	3:45	3:45	3	,
PARAMETER_DECL	3:47	3:54	3	void * * return_val
TYPE	3:47	3:52	4	void * *
TYPE_NAME	3:47	3:47	5	void
LEAF_NODE	3:47	3:47	6	void
POINTER	3:52	3:53	5	* *
LEAF_NODE	3:52	3:52	6	*
LEAF_NODE	3:53	3:53	6	*
NAME	3:54	3:54	4	return_val
LEAF_NODE	3:54	3:54	5	return_val
LEAF_NODE	3:64	3:64	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	14:1	2	
SIMPLE_DECL	5:1	5:17	3	gboolean ret_val ;
VAR_DECL	5:1	5:10	4	gboolean ret_val
TYPE	5:1	5:1	5	gboolean
TYPE_NAME	5:1	5:1	6	gboolean
LEAF_NODE	5:1	5:1	7	gboolean
NAME	5:10	5:10	5	ret_val
LEAF_NODE	5:10	5:10	6	ret_val
LEAF_NODE	5:17	5:17	4	;
LEAF_NODE	6:1	6:1	3	void
LEAF_NODE	6:6	6:6	3	*
LEAF_NODE	6:7	6:7	3	arg1
LEAF_NODE	6:12	6:12	3	=
LEAF_NODE	6:14	6:14	3	va_arg
LEAF_NODE	6:20	6:20	3	(
LEAF_NODE	6:21	6:21	3	args
LEAF_NODE	6:25	6:25	3	,
LEAF_NODE	6:27	6:27	3	void
LEAF_NODE	6:32	6:32	3	*
LEAF_NODE	6:33	6:33	3	)
LEAF_NODE	6:34	6:34	3	;
LEAF_NODE	7:1	7:1	3	void
LEAF_NODE	7:6	7:6	3	*
LEAF_NODE	7:7	7:7	3	arg2
LEAF_NODE	7:12	7:12	3	=
LEAF_NODE	7:14	7:14	3	va_arg
LEAF_NODE	7:20	7:20	3	(
LEAF_NODE	7:21	7:21	3	args
LEAF_NODE	7:25	7:25	3	,
LEAF_NODE	7:27	7:27	3	void
LEAF_NODE	7:32	7:32	3	*
LEAF_NODE	7:33	7:33	3	)
LEAF_NODE	7:34	7:34	3	;
LEAF_NODE	8:1	8:1	3	void
LEAF_NODE	8:6	8:6	3	*
LEAF_NODE	8:7	8:7	3	arg3
LEAF_NODE	8:12	8:12	3	=
LEAF_NODE	8:14	8:14	3	va_arg
LEAF_NODE	8:20	8:20	3	(
LEAF_NODE	8:21	8:21	3	args
LEAF_NODE	8:25	8:25	3	,
LEAF_NODE	8:27	8:27	3	void
LEAF_NODE	8:32	8:32	3	*
LEAF_NODE	8:33	8:33	3	)
LEAF_NODE	8:34	8:34	3	;
LEAF_NODE	9:1	9:1	3	void
LEAF_NODE	9:6	9:6	3	*
LEAF_NODE	9:7	9:7	3	arg4
LEAF_NODE	9:12	9:12	3	=
LEAF_NODE	9:14	9:14	3	va_arg
LEAF_NODE	9:20	9:20	3	(
LEAF_NODE	9:21	9:21	3	args
LEAF_NODE	9:25	9:25	3	,
LEAF_NODE	9:27	9:27	3	void
LEAF_NODE	9:32	9:32	3	*
LEAF_NODE	9:33	9:33	3	)
LEAF_NODE	9:34	9:34	3	;
SIMPLE_DECL	10:1	10:33	3	guint arg5 ; arg5 = va_arg ( args , guint ) ;
VAR_DECL	10:1	10:7	4	guint arg5 ; arg5 = va_arg ( args , guint )
TYPE	10:1	10:1	5	guint
TYPE_NAME	10:1	10:1	6	guint
LEAF_NODE	10:1	10:1	7	guint
NAME	10:7	10:7	5	arg5
LEAF_NODE	10:7	10:7	6	arg5
LEAF_NODE	0:0	0:0	5	;
INIT	10:7	10:7	5	arg5 = va_arg ( args , guint )
ASSIGN	10:7	10:14	6	arg5 = va_arg ( args , guint )
LVAL	10:7	10:7	7	arg5
NAME	10:7	10:7	8	arg5
LEAF_NODE	10:7	10:7	9	arg5
ASSIGN_OP	10:12	10:12	7	=
LEAF_NODE	10:12	10:12	8	=
RVAL	10:14	10:14	7	va_arg ( args , guint )
FUNCTION_CALL	10:14	10:32	8	va_arg ( args , guint )
CALLEE	10:14	10:14	9	va_arg
LEAF_NODE	10:14	10:14	10	va_arg
LEAF_NODE	10:20	10:20	9	(
ARGUMENT	10:21	10:21	9	args
FIELD	10:21	10:21	10	args
LEAF_NODE	10:21	10:21	11	args
LEAF_NODE	10:25	10:25	9	,
ARGUMENT	10:27	10:27	9	guint
FIELD	10:27	10:27	10	guint
LEAF_NODE	10:27	10:27	11	guint
LEAF_NODE	10:32	10:32	9	)
LEAF_NODE	10:33	10:33	4	;
LEAF_NODE	11:1	11:1	3	ret_val
LEAF_NODE	11:9	11:9	3	=
LEAF_NODE	12:2	12:2	3	(
LEAF_NODE	12:3	12:3	3	(
LEAF_NODE	12:4	12:4	3	gboolean
LEAF_NODE	12:13	12:13	3	(
LEAF_NODE	12:14	12:14	3	*
LEAF_NODE	12:15	12:15	3	)
LEAF_NODE	12:16	12:16	3	(
LEAF_NODE	12:17	12:17	3	void
LEAF_NODE	12:22	12:22	3	*
LEAF_NODE	12:23	12:23	3	,
LEAF_NODE	12:25	12:25	3	void
LEAF_NODE	12:30	12:30	3	*
LEAF_NODE	12:31	12:31	3	,
LEAF_NODE	12:33	12:33	3	void
LEAF_NODE	12:38	12:38	3	*
LEAF_NODE	12:39	12:39	3	,
LEAF_NODE	12:41	12:41	3	void
LEAF_NODE	12:46	12:46	3	*
LEAF_NODE	12:47	12:47	3	,
LEAF_NODE	12:49	12:49	3	guint
LEAF_NODE	12:54	12:54	3	,
LEAF_NODE	12:56	12:56	3	void
LEAF_NODE	12:61	12:61	3	*
LEAF_NODE	12:62	12:62	3	)
LEAF_NODE	12:63	12:63	3	)
LEAF_NODE	12:64	12:64	3	cb
LEAF_NODE	12:66	12:66	3	)
LEAF_NODE	12:67	12:67	3	(
LEAF_NODE	13:3	13:3	3	arg1
LEAF_NODE	13:7	13:7	3	,
LEAF_NODE	13:9	13:9	3	arg2
LEAF_NODE	13:13	13:13	3	,
LEAF_NODE	13:15	13:15	3	arg3
LEAF_NODE	13:19	13:19	3	,
LEAF_NODE	13:21	13:21	3	arg4
LEAF_NODE	13:25	13:25	3	,
LEAF_NODE	13:27	13:27	3	arg5
LEAF_NODE	13:31	13:31	3	,
LEAF_NODE	13:33	13:33	3	data
LEAF_NODE	13:37	13:37	3	)
LEAF_NODE	13:38	13:38	3	;
SELECTION	14:1	15:2	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	return_val != NULL
EXPR	14:5	14:19	5	return_val != NULL
FIELD	14:5	14:5	6	return_val
LEAF_NODE	14:5	14:5	7	return_val
EQ_OPERATOR	14:16	14:16	6	!=
LEAF_NODE	14:16	14:16	7	!=
FIELD	14:19	14:19	6	NULL
LEAF_NODE	14:19	14:19	7	NULL
LEAF_NODE	14:23	14:23	4	)
STATEMENTS	15:2	15:2	4	
EXPR_STATEMENT	15:2	15:40	5	* return_val = GINT_TO_POINTER ( ret_val ) ;
EXPR	15:2	15:2	6	* return_val = GINT_TO_POINTER ( ret_val )
ASSIGN	15:2	15:16	7	* return_val = GINT_TO_POINTER ( ret_val )
LVAL	15:2	15:2	8	* return_val
UNARY_EXPR	15:2	15:3	9	* return_val
UNARY_OPERATOR	15:2	15:2	10	*
LEAF_NODE	15:2	15:2	11	*
FIELD	15:3	15:3	10	return_val
LEAF_NODE	15:3	15:3	11	return_val
ASSIGN_OP	15:14	15:14	8	=
LEAF_NODE	15:14	15:14	9	=
RVAL	15:16	15:16	8	GINT_TO_POINTER ( ret_val )
FUNCTION_CALL	15:16	15:39	9	GINT_TO_POINTER ( ret_val )
CALLEE	15:16	15:16	10	GINT_TO_POINTER
LEAF_NODE	15:16	15:16	11	GINT_TO_POINTER
LEAF_NODE	15:31	15:31	10	(
ARGUMENT	15:32	15:32	10	ret_val
FIELD	15:32	15:32	11	ret_val
LEAF_NODE	15:32	15:32	12	ret_val
LEAF_NODE	15:39	15:39	10	)
LEAF_NODE	15:40	15:40	6	;
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	13:0	1	
RETURN_TYPE	2:0	2:6	2	GList *
TYPE_NAME	2:0	2:0	3	GList
LEAF_NODE	2:0	2:0	4	GList
LEAF_NODE	2:6	2:6	3	*
FUNCTION_NAME	2:7	2:7	2	purple_pounces_get_all_for_ui
LEAF_NODE	2:7	2:7	3	purple_pounces_get_all_for_ui
PARAMETER_LIST	2:36	2:51	2	( const char * ui )
LEAF_NODE	2:36	2:36	3	(
PARAMETER_DECL	2:37	2:49	3	const char * ui
TYPE	2:37	2:48	4	const char *
TYPE_NAME	2:37	2:43	5	const char
LEAF_NODE	2:37	2:37	6	const
LEAF_NODE	2:43	2:43	6	char
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	ui
LEAF_NODE	2:49	2:49	5	ui
LEAF_NODE	2:51	2:51	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	12:1	2	
SIMPLE_DECL	4:1	4:26	3	GList * list ; list = NULL , GList * iter ;
INIT_DECL_LIST	4:1	4:1	4	GList * list ; list = NULL , GList * iter
VAR_DECL	4:1	4:8	5	GList * list ; list = NULL
TYPE	4:1	4:7	6	GList *
TYPE_NAME	4:1	4:1	7	GList
LEAF_NODE	4:1	4:1	8	GList
POINTER	4:7	4:7	7	*
LEAF_NODE	4:7	4:7	8	*
NAME	4:8	4:8	6	list
LEAF_NODE	4:8	4:8	7	list
LEAF_NODE	0:0	0:0	6	;
INIT	4:8	4:8	6	list = NULL
ASSIGN	4:8	4:15	7	list = NULL
LVAL	4:8	4:8	8	list
NAME	4:8	4:8	9	list
LEAF_NODE	4:8	4:8	10	list
ASSIGN_OP	4:13	4:13	8	=
LEAF_NODE	4:13	4:13	9	=
RVAL	4:15	4:15	8	NULL
FIELD	4:15	4:15	9	NULL
LEAF_NODE	4:15	4:15	10	NULL
LEAF_NODE	4:19	4:19	5	,
VAR_DECL	4:1	4:22	5	GList * iter
TYPE	4:1	4:21	6	GList *
TYPE_NAME	4:1	4:1	7	GList
LEAF_NODE	4:1	4:1	8	GList
POINTER	4:21	4:21	7	*
LEAF_NODE	4:21	4:21	8	*
NAME	4:22	4:22	6	iter
LEAF_NODE	4:22	4:22	7	iter
LEAF_NODE	4:26	4:26	4	;
EXPR_STATEMENT	5:1	5:39	3	g_return_val_if_fail ( ui != NULL , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( ui != NULL , NULL )
FUNCTION_CALL	5:1	5:38	5	g_return_val_if_fail ( ui != NULL , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:28	6	ui != NULL
FIELD	5:22	5:22	7	ui
LEAF_NODE	5:22	5:22	8	ui
EQ_OPERATOR	5:25	5:25	7	!=
LEAF_NODE	5:25	5:25	8	!=
FIELD	5:28	5:28	7	NULL
LEAF_NODE	5:28	5:28	8	NULL
LEAF_NODE	5:32	5:32	6	,
ARGUMENT	5:34	5:34	6	NULL
FIELD	5:34	5:34	7	NULL
LEAF_NODE	5:34	5:34	8	NULL
LEAF_NODE	5:38	5:38	6	)
LEAF_NODE	5:39	5:39	4	;
ITERATION	6:1	6:47	3	
KEYWORD	6:1	6:1	4	for
LEAF_NODE	6:1	6:1	5	for
LEAF_NODE	6:5	6:5	4	(
FOR_INIT	6:6	6:20	4	iter = pounces ;
EXPR	6:6	6:6	5	iter = pounces
ASSIGN	6:6	6:13	6	iter = pounces
LVAL	6:6	6:6	7	iter
FIELD	6:6	6:6	8	iter
LEAF_NODE	6:6	6:6	9	iter
ASSIGN_OP	6:11	6:11	7	=
LEAF_NODE	6:11	6:11	8	=
RVAL	6:13	6:13	7	pounces
FIELD	6:13	6:13	8	pounces
LEAF_NODE	6:13	6:13	9	pounces
LEAF_NODE	6:20	6:20	5	;
CONDITION	6:22	6:22	4	iter
EXPR	6:22	6:22	5	iter
FIELD	6:22	6:22	6	iter
LEAF_NODE	6:22	6:22	7	iter
LEAF_NODE	6:26	6:26	4	;
FOR_EXPR	6:28	6:28	4	iter = iter -> next
EXPR	6:28	6:28	5	iter = iter -> next
ASSIGN	6:28	6:35	6	iter = iter -> next
LVAL	6:28	6:28	7	iter
FIELD	6:28	6:28	8	iter
LEAF_NODE	6:28	6:28	9	iter
ASSIGN_OP	6:33	6:33	7	=
LEAF_NODE	6:33	6:33	8	=
RVAL	6:35	6:35	7	iter -> next
FIELD	6:35	6:41	8	iter -> next
LEAF_NODE	6:35	6:35	9	iter
LEAF_NODE	6:39	6:39	9	->
LEAF_NODE	6:41	6:41	9	next
LEAF_NODE	6:45	6:45	4	)
STATEMENTS	6:47	10:1	4	
LEAF_NODE	6:47	6:47	5	{
STATEMENTS	7:2	8:2	5	
SIMPLE_DECL	7:2	7:35	6	PurplePounce * pounce ; pounce = iter -> data ;
VAR_DECL	7:2	7:16	7	PurplePounce * pounce ; pounce = iter -> data
TYPE	7:2	7:15	8	PurplePounce *
TYPE_NAME	7:2	7:2	9	PurplePounce
LEAF_NODE	7:2	7:2	10	PurplePounce
POINTER	7:15	7:15	9	*
LEAF_NODE	7:15	7:15	10	*
NAME	7:16	7:16	8	pounce
LEAF_NODE	7:16	7:16	9	pounce
LEAF_NODE	0:0	0:0	8	;
INIT	7:16	7:16	8	pounce = iter -> data
ASSIGN	7:16	7:25	9	pounce = iter -> data
LVAL	7:16	7:16	10	pounce
NAME	7:16	7:16	11	pounce
LEAF_NODE	7:16	7:16	12	pounce
ASSIGN_OP	7:23	7:23	10	=
LEAF_NODE	7:23	7:23	11	=
RVAL	7:25	7:25	10	iter -> data
FIELD	7:25	7:31	11	iter -> data
LEAF_NODE	7:25	7:25	12	iter
LEAF_NODE	7:29	7:29	12	->
LEAF_NODE	7:31	7:31	12	data
LEAF_NODE	7:35	7:35	7	;
SELECTION	8:2	9:3	6	
KEYWORD	8:2	8:2	7	if
LEAF_NODE	8:2	8:2	8	if
LEAF_NODE	8:5	8:5	7	(
CONDITION	8:6	8:6	7	purple_strequal ( pounce -> ui_type , ui )
EXPR	8:6	8:6	8	purple_strequal ( pounce -> ui_type , ui )
FUNCTION_CALL	8:6	8:41	9	purple_strequal ( pounce -> ui_type , ui )
CALLEE	8:6	8:6	10	purple_strequal
LEAF_NODE	8:6	8:6	11	purple_strequal
LEAF_NODE	8:21	8:21	10	(
ARGUMENT	8:22	8:22	10	pounce -> ui_type
FIELD	8:22	8:30	11	pounce -> ui_type
LEAF_NODE	8:22	8:22	12	pounce
LEAF_NODE	8:28	8:28	12	->
LEAF_NODE	8:30	8:30	12	ui_type
LEAF_NODE	8:37	8:37	10	,
ARGUMENT	8:39	8:39	10	ui
FIELD	8:39	8:39	11	ui
LEAF_NODE	8:39	8:39	12	ui
LEAF_NODE	8:41	8:41	10	)
LEAF_NODE	8:42	8:42	7	)
STATEMENTS	9:3	9:3	7	
EXPR_STATEMENT	9:3	9:38	8	list = g_list_prepend ( list , pounce ) ;
EXPR	9:3	9:3	9	list = g_list_prepend ( list , pounce )
ASSIGN	9:3	9:10	10	list = g_list_prepend ( list , pounce )
LVAL	9:3	9:3	11	list
FIELD	9:3	9:3	12	list
LEAF_NODE	9:3	9:3	13	list
ASSIGN_OP	9:8	9:8	11	=
LEAF_NODE	9:8	9:8	12	=
RVAL	9:10	9:10	11	g_list_prepend ( list , pounce )
FUNCTION_CALL	9:10	9:37	12	g_list_prepend ( list , pounce )
CALLEE	9:10	9:10	13	g_list_prepend
LEAF_NODE	9:10	9:10	14	g_list_prepend
LEAF_NODE	9:24	9:24	13	(
ARGUMENT	9:25	9:25	13	list
FIELD	9:25	9:25	14	list
LEAF_NODE	9:25	9:25	15	list
LEAF_NODE	9:29	9:29	13	,
ARGUMENT	9:31	9:31	13	pounce
FIELD	9:31	9:31	14	pounce
LEAF_NODE	9:31	9:31	15	pounce
LEAF_NODE	9:37	9:37	13	)
LEAF_NODE	9:38	9:38	9	;
LEAF_NODE	10:1	10:1	5	}
EXPR_STATEMENT	11:1	11:28	3	list = g_list_reverse ( list ) ;
EXPR	11:1	11:1	4	list = g_list_reverse ( list )
ASSIGN	11:1	11:8	5	list = g_list_reverse ( list )
LVAL	11:1	11:1	6	list
FIELD	11:1	11:1	7	list
LEAF_NODE	11:1	11:1	8	list
ASSIGN_OP	11:6	11:6	6	=
LEAF_NODE	11:6	11:6	7	=
RVAL	11:8	11:8	6	g_list_reverse ( list )
FUNCTION_CALL	11:8	11:27	7	g_list_reverse ( list )
CALLEE	11:8	11:8	8	g_list_reverse
LEAF_NODE	11:8	11:8	9	g_list_reverse
LEAF_NODE	11:22	11:22	8	(
ARGUMENT	11:23	11:23	8	list
FIELD	11:23	11:23	9	list
LEAF_NODE	11:23	11:23	10	list
LEAF_NODE	11:27	11:27	8	)
LEAF_NODE	11:28	11:28	4	;
JUMP_STATEMENT	12:1	12:12	3	return list ;
KEYWORD	12:1	12:1	4	return
LEAF_NODE	12:1	12:1	5	return
DESTINATION	12:8	12:8	4	list
EXPR	12:8	12:8	5	list
FIELD	12:8	12:8	6	list
LEAF_NODE	12:8	12:8	7	list
LEAF_NODE	12:12	12:12	4	;
LEAF_NODE	13:0	13:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	22:0	1	
RETURN_TYPE	1:0	1:0	2	GType
TYPE_NAME	1:0	1:0	3	GType
LEAF_NODE	1:0	1:0	4	GType
FUNCTION_NAME	2:0	2:0	2	purple_theme_manager_get_type
LEAF_NODE	2:0	2:0	3	purple_theme_manager_get_type
PARAMETER_LIST	2:29	2:34	2	( void )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:30	3	void
LEAF_NODE	2:30	2:30	4	void
LEAF_NODE	2:34	2:34	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	21:1	2	
LEAF_NODE	4:1	4:1	3	static
SIMPLE_DECL	4:8	4:22	3	GType type ; type = 0 ;
VAR_DECL	4:8	4:14	4	GType type ; type = 0
TYPE	4:8	4:8	5	GType
TYPE_NAME	4:8	4:8	6	GType
LEAF_NODE	4:8	4:8	7	GType
NAME	4:14	4:14	5	type
LEAF_NODE	4:14	4:14	6	type
LEAF_NODE	0:0	0:0	5	;
INIT	4:14	4:14	5	type = 0
ASSIGN	4:14	4:21	6	type = 0
LVAL	4:14	4:14	7	type
NAME	4:14	4:14	8	type
LEAF_NODE	4:14	4:14	9	type
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:21	7	0
FIELD	4:21	4:21	8	0
LEAF_NODE	4:21	4:21	9	0
LEAF_NODE	4:22	4:22	4	;
SELECTION	5:1	5:16	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	type == 0
EXPR	5:5	5:13	5	type == 0
FIELD	5:5	5:5	6	type
LEAF_NODE	5:5	5:5	7	type
EQ_OPERATOR	5:10	5:10	6	==
LEAF_NODE	5:10	5:10	7	==
FIELD	5:13	5:13	6	0
LEAF_NODE	5:13	5:13	7	0
LEAF_NODE	5:14	5:14	4	)
STATEMENTS	5:16	20:1	4	
LEAF_NODE	5:16	5:16	5	{
STATEMENTS	6:2	18:2	5	
LEAF_NODE	6:2	6:2	6	static
LEAF_NODE	6:9	6:9	6	const
LEAF_NODE	6:15	6:15	6	GTypeInfo
LEAF_NODE	6:25	6:25	6	info
LEAF_NODE	6:30	6:30	6	=
LEAF_NODE	6:32	6:32	6	{
STATEMENTS	7:3	16:7	6	
LEAF_NODE	7:3	7:3	7	sizeof
LEAF_NODE	7:9	7:9	7	(
LEAF_NODE	7:10	7:10	7	PurpleThemeManagerClass
LEAF_NODE	7:33	7:33	7	)
LEAF_NODE	7:34	7:34	7	,
LEAF_NODE	8:3	8:3	7	NULL
LEAF_NODE	8:7	8:7	7	,
LEAF_NODE	9:3	9:3	7	NULL
LEAF_NODE	9:7	9:7	7	,
LEAF_NODE	10:3	10:3	7	NULL
LEAF_NODE	10:7	10:7	7	,
LEAF_NODE	11:3	11:3	7	NULL
LEAF_NODE	11:7	11:7	7	,
LEAF_NODE	12:3	12:3	7	NULL
LEAF_NODE	12:7	12:7	7	,
LEAF_NODE	13:3	13:3	7	sizeof
LEAF_NODE	13:9	13:9	7	(
LEAF_NODE	13:10	13:10	7	PurpleThemeManager
LEAF_NODE	13:28	13:28	7	)
LEAF_NODE	13:29	13:29	7	,
LEAF_NODE	14:3	14:3	7	0
LEAF_NODE	14:4	14:4	7	,
LEAF_NODE	15:3	15:3	7	NULL
LEAF_NODE	15:7	15:7	7	,
LEAF_NODE	16:3	16:3	7	NULL
LEAF_NODE	16:7	16:7	7	,
LEAF_NODE	17:2	17:2	6	}
LEAF_NODE	17:3	17:3	6	;
EXPR_STATEMENT	18:2	19:35	6	type = g_type_register_static ( G_TYPE_OBJECT , "PurpleThemeManager" , & info , 0 ) ;
EXPR	18:2	18:2	7	type = g_type_register_static ( G_TYPE_OBJECT , "PurpleThemeManager" , & info , 0 )
ASSIGN	18:2	18:9	8	type = g_type_register_static ( G_TYPE_OBJECT , "PurpleThemeManager" , & info , 0 )
LVAL	18:2	18:2	9	type
FIELD	18:2	18:2	10	type
LEAF_NODE	18:2	18:2	11	type
ASSIGN_OP	18:7	18:7	9	=
LEAF_NODE	18:7	18:7	10	=
RVAL	18:9	18:9	9	g_type_register_static ( G_TYPE_OBJECT , "PurpleThemeManager" , & info , 0 )
FUNCTION_CALL	18:9	19:34	10	g_type_register_static ( G_TYPE_OBJECT , "PurpleThemeManager" , & info , 0 )
CALLEE	18:9	18:9	11	g_type_register_static
LEAF_NODE	18:9	18:9	12	g_type_register_static
LEAF_NODE	18:31	18:31	11	(
ARGUMENT	18:32	18:32	11	G_TYPE_OBJECT
FIELD	18:32	18:32	12	G_TYPE_OBJECT
LEAF_NODE	18:32	18:32	13	G_TYPE_OBJECT
LEAF_NODE	18:45	18:45	11	,
ARGUMENT	19:4	19:4	11	"PurpleThemeManager"
FIELD	19:4	19:4	12	"PurpleThemeManager"
LEAF_NODE	19:4	19:4	13	"PurpleThemeManager"
LEAF_NODE	19:24	19:24	11	,
ARGUMENT	19:26	19:26	11	& info
UNARY_EXPR	19:26	19:27	12	& info
UNARY_OPERATOR	19:26	19:26	13	&
LEAF_NODE	19:26	19:26	14	&
FIELD	19:27	19:27	13	info
LEAF_NODE	19:27	19:27	14	info
LEAF_NODE	19:31	19:31	11	,
ARGUMENT	19:33	19:33	11	0
FIELD	19:33	19:33	12	0
LEAF_NODE	19:33	19:33	13	0
LEAF_NODE	19:34	19:34	11	)
LEAF_NODE	19:35	19:35	7	;
LEAF_NODE	20:1	20:1	5	}
JUMP_STATEMENT	21:1	21:12	3	return type ;
KEYWORD	21:1	21:1	4	return
LEAF_NODE	21:1	21:1	5	return
DESTINATION	21:8	21:8	4	type
EXPR	21:8	21:8	5	type
FIELD	21:8	21:8	6	type
LEAF_NODE	21:8	21:8	7	type
LEAF_NODE	21:12	21:12	4	;
LEAF_NODE	22:0	22:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_status_attr_destroy
LEAF_NODE	2:0	2:0	3	purple_status_attr_destroy
PARAMETER_LIST	2:26	2:49	2	( PurpleStatusAttr * attr )
LEAF_NODE	2:26	2:26	3	(
PARAMETER_DECL	2:27	2:45	3	PurpleStatusAttr * attr
TYPE	2:27	2:44	4	PurpleStatusAttr *
TYPE_NAME	2:27	2:27	5	PurpleStatusAttr
LEAF_NODE	2:27	2:27	6	PurpleStatusAttr
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	attr
LEAF_NODE	2:45	2:45	5	attr
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
EXPR_STATEMENT	4:1	4:31	3	g_return_if_fail ( attr != NULL ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( attr != NULL )
FUNCTION_CALL	4:1	4:30	5	g_return_if_fail ( attr != NULL )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:26	6	attr != NULL
FIELD	4:18	4:18	7	attr
LEAF_NODE	4:18	4:18	8	attr
EQ_OPERATOR	4:23	4:23	7	!=
LEAF_NODE	4:23	4:23	8	!=
FIELD	4:26	4:26	7	NULL
LEAF_NODE	4:26	4:26	8	NULL
LEAF_NODE	4:30	4:30	6	)
LEAF_NODE	4:31	4:31	4	;
EXPR_STATEMENT	5:1	5:17	3	g_free ( attr -> id ) ;
EXPR	5:1	5:1	4	g_free ( attr -> id )
FUNCTION_CALL	5:1	5:16	5	g_free ( attr -> id )
CALLEE	5:1	5:1	6	g_free
LEAF_NODE	5:1	5:1	7	g_free
LEAF_NODE	5:7	5:7	6	(
ARGUMENT	5:8	5:8	6	attr -> id
FIELD	5:8	5:14	7	attr -> id
LEAF_NODE	5:8	5:8	8	attr
LEAF_NODE	5:12	5:12	8	->
LEAF_NODE	5:14	5:14	8	id
LEAF_NODE	5:16	5:16	6	)
LEAF_NODE	5:17	5:17	4	;
EXPR_STATEMENT	6:1	6:19	3	g_free ( attr -> name ) ;
EXPR	6:1	6:1	4	g_free ( attr -> name )
FUNCTION_CALL	6:1	6:18	5	g_free ( attr -> name )
CALLEE	6:1	6:1	6	g_free
LEAF_NODE	6:1	6:1	7	g_free
LEAF_NODE	6:7	6:7	6	(
ARGUMENT	6:8	6:8	6	attr -> name
FIELD	6:8	6:14	7	attr -> name
LEAF_NODE	6:8	6:8	8	attr
LEAF_NODE	6:12	6:12	8	->
LEAF_NODE	6:14	6:14	8	name
LEAF_NODE	6:18	6:18	6	)
LEAF_NODE	6:19	6:19	4	;
EXPR_STATEMENT	7:1	7:39	3	purple_value_destroy ( attr -> value_type ) ;
EXPR	7:1	7:1	4	purple_value_destroy ( attr -> value_type )
FUNCTION_CALL	7:1	7:38	5	purple_value_destroy ( attr -> value_type )
CALLEE	7:1	7:1	6	purple_value_destroy
LEAF_NODE	7:1	7:1	7	purple_value_destroy
LEAF_NODE	7:21	7:21	6	(
ARGUMENT	7:22	7:22	6	attr -> value_type
FIELD	7:22	7:28	7	attr -> value_type
LEAF_NODE	7:22	7:22	8	attr
LEAF_NODE	7:26	7:26	8	->
LEAF_NODE	7:28	7:28	8	value_type
LEAF_NODE	7:38	7:38	6	)
LEAF_NODE	7:39	7:39	4	;
EXPR_STATEMENT	8:1	8:37	3	PURPLE_DBUS_UNREGISTER_POINTER ( attr ) ;
EXPR	8:1	8:1	4	PURPLE_DBUS_UNREGISTER_POINTER ( attr )
FUNCTION_CALL	8:1	8:36	5	PURPLE_DBUS_UNREGISTER_POINTER ( attr )
CALLEE	8:1	8:1	6	PURPLE_DBUS_UNREGISTER_POINTER
LEAF_NODE	8:1	8:1	7	PURPLE_DBUS_UNREGISTER_POINTER
LEAF_NODE	8:31	8:31	6	(
ARGUMENT	8:32	8:32	6	attr
FIELD	8:32	8:32	7	attr
LEAF_NODE	8:32	8:32	8	attr
LEAF_NODE	8:36	8:36	6	)
LEAF_NODE	8:37	8:37	4	;
EXPR_STATEMENT	9:1	9:13	3	g_free ( attr ) ;
EXPR	9:1	9:1	4	g_free ( attr )
FUNCTION_CALL	9:1	9:12	5	g_free ( attr )
CALLEE	9:1	9:1	6	g_free
LEAF_NODE	9:1	9:1	7	g_free
LEAF_NODE	9:7	9:7	6	(
ARGUMENT	9:8	9:8	6	attr
FIELD	9:8	9:8	7	attr
LEAF_NODE	9:8	9:8	8	attr
LEAF_NODE	9:12	9:12	6	)
LEAF_NODE	9:13	9:13	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	11:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_marshal_POINTER__POINTER
LEAF_NODE	2:0	2:0	3	purple_marshal_POINTER__POINTER
PARAMETER_LIST	2:31	4:53	2	( PurpleCallback cb , va_list args , void * data , void * * return_val )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	3:36	3:51	3	PurpleCallback cb
TYPE	3:36	3:36	4	PurpleCallback
TYPE_NAME	3:36	3:36	5	PurpleCallback
LEAF_NODE	3:36	3:36	6	PurpleCallback
NAME	3:51	3:51	4	cb
LEAF_NODE	3:51	3:51	5	cb
LEAF_NODE	3:53	3:53	3	,
PARAMETER_DECL	3:55	3:63	3	va_list args
TYPE	3:55	3:55	4	va_list
TYPE_NAME	3:55	3:55	5	va_list
LEAF_NODE	3:55	3:55	6	va_list
NAME	3:63	3:63	4	args
LEAF_NODE	3:63	3:63	5	args
LEAF_NODE	3:67	3:67	3	,
PARAMETER_DECL	3:69	3:75	3	void * data
TYPE	3:69	3:74	4	void *
TYPE_NAME	3:69	3:69	5	void
LEAF_NODE	3:69	3:69	6	void
POINTER	3:74	3:74	5	*
LEAF_NODE	3:74	3:74	6	*
NAME	3:75	3:75	4	data
LEAF_NODE	3:75	3:75	5	data
LEAF_NODE	3:79	3:79	3	,
PARAMETER_DECL	4:36	4:43	3	void * * return_val
TYPE	4:36	4:41	4	void * *
TYPE_NAME	4:36	4:36	5	void
LEAF_NODE	4:36	4:36	6	void
POINTER	4:41	4:42	5	* *
LEAF_NODE	4:41	4:41	6	*
LEAF_NODE	4:42	4:42	6	*
NAME	4:43	4:43	4	return_val
LEAF_NODE	4:43	4:43	5	return_val
LEAF_NODE	4:53	4:53	3	)
LEAF_NODE	5:0	5:0	2	{
STATEMENTS	6:1	9:1	2	
SIMPLE_DECL	6:1	6:17	3	gpointer ret_val ;
VAR_DECL	6:1	6:10	4	gpointer ret_val
TYPE	6:1	6:1	5	gpointer
TYPE_NAME	6:1	6:1	6	gpointer
LEAF_NODE	6:1	6:1	7	gpointer
NAME	6:10	6:10	5	ret_val
LEAF_NODE	6:10	6:10	6	ret_val
LEAF_NODE	6:17	6:17	4	;
LEAF_NODE	7:1	7:1	3	void
LEAF_NODE	7:6	7:6	3	*
LEAF_NODE	7:7	7:7	3	arg1
LEAF_NODE	7:12	7:12	3	=
LEAF_NODE	7:14	7:14	3	va_arg
LEAF_NODE	7:20	7:20	3	(
LEAF_NODE	7:21	7:21	3	args
LEAF_NODE	7:25	7:25	3	,
LEAF_NODE	7:27	7:27	3	void
LEAF_NODE	7:32	7:32	3	*
LEAF_NODE	7:33	7:33	3	)
LEAF_NODE	7:34	7:34	3	;
LEAF_NODE	8:1	8:1	3	ret_val
LEAF_NODE	8:9	8:9	3	=
LEAF_NODE	8:11	8:11	3	(
LEAF_NODE	8:12	8:12	3	(
LEAF_NODE	8:13	8:13	3	gpointer
LEAF_NODE	8:21	8:21	3	(
LEAF_NODE	8:22	8:22	3	*
LEAF_NODE	8:23	8:23	3	)
LEAF_NODE	8:24	8:24	3	(
LEAF_NODE	8:25	8:25	3	void
LEAF_NODE	8:30	8:30	3	*
LEAF_NODE	8:31	8:31	3	,
LEAF_NODE	8:33	8:33	3	void
LEAF_NODE	8:38	8:38	3	*
LEAF_NODE	8:39	8:39	3	)
LEAF_NODE	8:40	8:40	3	)
LEAF_NODE	8:41	8:41	3	cb
LEAF_NODE	8:43	8:43	3	)
EXPR_STATEMENT	8:44	8:56	3	( arg1 , data ) ;
EXPR	8:44	8:55	4	( arg1 , data )
LEAF_NODE	8:44	8:44	5	(
FIELD	8:45	8:45	5	arg1
LEAF_NODE	8:45	8:45	6	arg1
LEAF_NODE	8:49	8:49	5	,
FIELD	8:51	8:51	5	data
LEAF_NODE	8:51	8:51	6	data
LEAF_NODE	8:55	8:55	5	)
LEAF_NODE	8:56	8:56	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	return_val != NULL
EXPR	9:5	9:19	5	return_val != NULL
FIELD	9:5	9:5	6	return_val
LEAF_NODE	9:5	9:5	7	return_val
EQ_OPERATOR	9:16	9:16	6	!=
LEAF_NODE	9:16	9:16	7	!=
FIELD	9:19	9:19	6	NULL
LEAF_NODE	9:19	9:19	7	NULL
LEAF_NODE	9:23	9:23	4	)
STATEMENTS	10:2	10:2	4	
EXPR_STATEMENT	10:2	10:23	5	* return_val = ret_val ;
EXPR	10:2	10:2	6	* return_val = ret_val
ASSIGN	10:2	10:16	7	* return_val = ret_val
LVAL	10:2	10:2	8	* return_val
UNARY_EXPR	10:2	10:3	9	* return_val
UNARY_OPERATOR	10:2	10:2	10	*
LEAF_NODE	10:2	10:2	11	*
FIELD	10:3	10:3	10	return_val
LEAF_NODE	10:3	10:3	11	return_val
ASSIGN_OP	10:14	10:14	8	=
LEAF_NODE	10:14	10:14	9	=
RVAL	10:16	10:16	8	ret_val
FIELD	10:16	10:16	9	ret_val
LEAF_NODE	10:16	10:16	10	ret_val
LEAF_NODE	10:23	10:23	6	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:5	2	void *
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
LEAF_NODE	1:5	1:5	3	*
FUNCTION_NAME	2:0	2:0	2	purple_savedstatuses_get_handle
LEAF_NODE	2:0	2:0	3	purple_savedstatuses_get_handle
PARAMETER_LIST	2:31	2:36	2	( void )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:32	3	void
LEAF_NODE	2:32	2:32	4	void
LEAF_NODE	2:36	2:36	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
LEAF_NODE	4:1	4:1	3	static
SIMPLE_DECL	4:8	4:18	3	int handle ;
VAR_DECL	4:8	4:12	4	int handle
TYPE	4:8	4:8	5	int
TYPE_NAME	4:8	4:8	6	int
LEAF_NODE	4:8	4:8	7	int
NAME	4:12	4:12	5	handle
LEAF_NODE	4:12	4:12	6	handle
LEAF_NODE	4:18	4:18	4	;
JUMP_STATEMENT	5:1	5:15	3	return & handle ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	& handle
EXPR	5:8	5:8	5	& handle
UNARY_EXPR	5:8	5:9	6	& handle
UNARY_OPERATOR	5:8	5:8	7	&
LEAF_NODE	5:8	5:8	8	&
FIELD	5:9	5:9	7	handle
LEAF_NODE	5:9	5:9	8	handle
LEAF_NODE	5:15	5:15	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	14:0	1	
RETURN_TYPE	1:0	1:17	2	PurpleStatusAttr *
TYPE_NAME	1:0	1:0	3	PurpleStatusAttr
LEAF_NODE	1:0	1:0	4	PurpleStatusAttr
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	purple_status_type_get_attr
LEAF_NODE	2:0	2:0	3	purple_status_type_get_attr
PARAMETER_LIST	2:27	2:79	2	( const PurpleStatusType * status_type , const char * id )
LEAF_NODE	2:27	2:27	3	(
PARAMETER_DECL	2:28	2:52	3	const PurpleStatusType * status_type
TYPE	2:28	2:51	4	const PurpleStatusType *
TYPE_NAME	2:28	2:34	5	const PurpleStatusType
LEAF_NODE	2:28	2:28	6	const
LEAF_NODE	2:34	2:34	6	PurpleStatusType
POINTER	2:51	2:51	5	*
LEAF_NODE	2:51	2:51	6	*
NAME	2:52	2:52	4	status_type
LEAF_NODE	2:52	2:52	5	status_type
LEAF_NODE	2:63	2:63	3	,
PARAMETER_DECL	2:65	2:77	3	const char * id
TYPE	2:65	2:76	4	const char *
TYPE_NAME	2:65	2:71	5	const char
LEAF_NODE	2:65	2:65	6	const
LEAF_NODE	2:71	2:71	6	char
POINTER	2:76	2:76	5	*
LEAF_NODE	2:76	2:76	6	*
NAME	2:77	2:77	4	id
LEAF_NODE	2:77	2:77	5	id
LEAF_NODE	2:79	2:79	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	13:1	2	
SIMPLE_DECL	4:1	4:9	3	GList * l ;
VAR_DECL	4:1	4:8	4	GList * l
TYPE	4:1	4:7	5	GList *
TYPE_NAME	4:1	4:1	6	GList
LEAF_NODE	4:1	4:1	7	GList
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	l
LEAF_NODE	4:8	4:8	6	l
LEAF_NODE	4:9	4:9	4	;
EXPR_STATEMENT	5:1	5:48	3	g_return_val_if_fail ( status_type != NULL , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( status_type != NULL , NULL )
FUNCTION_CALL	5:1	5:47	5	g_return_val_if_fail ( status_type != NULL , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:37	6	status_type != NULL
FIELD	5:22	5:22	7	status_type
LEAF_NODE	5:22	5:22	8	status_type
EQ_OPERATOR	5:34	5:34	7	!=
LEAF_NODE	5:34	5:34	8	!=
FIELD	5:37	5:37	7	NULL
LEAF_NODE	5:37	5:37	8	NULL
LEAF_NODE	5:41	5:41	6	,
ARGUMENT	5:43	5:43	6	NULL
FIELD	5:43	5:43	7	NULL
LEAF_NODE	5:43	5:43	8	NULL
LEAF_NODE	5:47	5:47	6	)
LEAF_NODE	5:48	5:48	4	;
EXPR_STATEMENT	6:1	6:48	3	g_return_val_if_fail ( id != NULL , NULL ) ;
EXPR	6:1	6:1	4	g_return_val_if_fail ( id != NULL , NULL )
FUNCTION_CALL	6:1	6:47	5	g_return_val_if_fail ( id != NULL , NULL )
CALLEE	6:1	6:1	6	g_return_val_if_fail
LEAF_NODE	6:1	6:1	7	g_return_val_if_fail
LEAF_NODE	6:21	6:21	6	(
ARGUMENT	6:22	6:37	6	id != NULL
FIELD	6:22	6:22	7	id
LEAF_NODE	6:22	6:22	8	id
EQ_OPERATOR	6:34	6:34	7	!=
LEAF_NODE	6:34	6:34	8	!=
FIELD	6:37	6:37	7	NULL
LEAF_NODE	6:37	6:37	8	NULL
LEAF_NODE	6:41	6:41	6	,
ARGUMENT	6:43	6:43	6	NULL
FIELD	6:43	6:43	7	NULL
LEAF_NODE	6:43	6:43	8	NULL
LEAF_NODE	6:47	6:47	6	)
LEAF_NODE	6:48	6:48	4	;
ITERATION	7:1	8:1	3	
KEYWORD	7:1	7:1	4	for
LEAF_NODE	7:1	7:1	5	for
LEAF_NODE	7:5	7:5	4	(
FOR_INIT	7:6	7:28	4	l = status_type -> attrs ;
EXPR	7:6	7:6	5	l = status_type -> attrs
ASSIGN	7:6	7:10	6	l = status_type -> attrs
LVAL	7:6	7:6	7	l
FIELD	7:6	7:6	8	l
LEAF_NODE	7:6	7:6	9	l
ASSIGN_OP	7:8	7:8	7	=
LEAF_NODE	7:8	7:8	8	=
RVAL	7:10	7:10	7	status_type -> attrs
FIELD	7:10	7:23	8	status_type -> attrs
LEAF_NODE	7:10	7:10	9	status_type
LEAF_NODE	7:21	7:21	9	->
LEAF_NODE	7:23	7:23	9	attrs
LEAF_NODE	7:28	7:28	5	;
CONDITION	7:30	7:30	4	l != NULL
EXPR	7:30	7:35	5	l != NULL
FIELD	7:30	7:30	6	l
LEAF_NODE	7:30	7:30	7	l
EQ_OPERATOR	7:32	7:32	6	!=
LEAF_NODE	7:32	7:32	7	!=
FIELD	7:35	7:35	6	NULL
LEAF_NODE	7:35	7:35	7	NULL
LEAF_NODE	7:39	7:39	4	;
FOR_EXPR	7:41	7:41	4	l = l -> next
EXPR	7:41	7:41	5	l = l -> next
ASSIGN	7:41	7:45	6	l = l -> next
LVAL	7:41	7:41	7	l
FIELD	7:41	7:41	8	l
LEAF_NODE	7:41	7:41	9	l
ASSIGN_OP	7:43	7:43	7	=
LEAF_NODE	7:43	7:43	8	=
RVAL	7:45	7:45	7	l -> next
FIELD	7:45	7:48	8	l -> next
LEAF_NODE	7:45	7:45	9	l
LEAF_NODE	7:46	7:46	9	->
LEAF_NODE	7:48	7:48	9	next
LEAF_NODE	7:52	7:52	4	)
STATEMENTS	8:1	12:1	4	
LEAF_NODE	8:1	8:1	5	{
STATEMENTS	9:2	10:2	5	
SIMPLE_DECL	9:2	9:54	6	PurpleStatusAttr * attr ; attr = ( PurpleStatusAttr * ) l -> data ;
VAR_DECL	9:2	9:20	7	PurpleStatusAttr * attr ; attr = ( PurpleStatusAttr * ) l -> data
TYPE	9:2	9:19	8	PurpleStatusAttr *
TYPE_NAME	9:2	9:2	9	PurpleStatusAttr
LEAF_NODE	9:2	9:2	10	PurpleStatusAttr
POINTER	9:19	9:19	9	*
LEAF_NODE	9:19	9:19	10	*
NAME	9:20	9:20	8	attr
LEAF_NODE	9:20	9:20	9	attr
LEAF_NODE	0:0	0:0	8	;
INIT	9:20	9:20	8	attr = ( PurpleStatusAttr * ) l -> data
ASSIGN	9:20	9:27	9	attr = ( PurpleStatusAttr * ) l -> data
LVAL	9:20	9:20	10	attr
NAME	9:20	9:20	11	attr
LEAF_NODE	9:20	9:20	12	attr
ASSIGN_OP	9:25	9:25	10	=
LEAF_NODE	9:25	9:25	11	=
RVAL	9:27	9:47	10	( PurpleStatusAttr * ) l -> data
LEAF_NODE	9:27	9:27	11	(
TYPE_NAME	9:28	9:28	11	PurpleStatusAttr
LEAF_NODE	9:28	9:28	12	PurpleStatusAttr
LEAF_NODE	9:45	9:45	11	*
LEAF_NODE	9:46	9:46	11	)
FIELD	9:47	9:50	11	l -> data
LEAF_NODE	9:47	9:47	12	l
LEAF_NODE	9:48	9:48	12	->
LEAF_NODE	9:50	9:50	12	data
LEAF_NODE	9:54	9:54	7	;
SELECTION	10:2	11:3	6	
KEYWORD	10:2	10:2	7	if
LEAF_NODE	10:2	10:2	8	if
LEAF_NODE	10:5	10:5	7	(
CONDITION	10:6	10:6	7	purple_strequal ( purple_status_attr_get_id ( attr ) , id )
EXPR	10:6	10:6	8	purple_strequal ( purple_status_attr_get_id ( attr ) , id )
FUNCTION_CALL	10:6	10:57	9	purple_strequal ( purple_status_attr_get_id ( attr ) , id )
CALLEE	10:6	10:6	10	purple_strequal
LEAF_NODE	10:6	10:6	11	purple_strequal
LEAF_NODE	10:21	10:21	10	(
ARGUMENT	10:22	10:22	10	purple_status_attr_get_id ( attr )
FUNCTION_CALL	10:22	10:52	11	purple_status_attr_get_id ( attr )
CALLEE	10:22	10:22	12	purple_status_attr_get_id
LEAF_NODE	10:22	10:22	13	purple_status_attr_get_id
LEAF_NODE	10:47	10:47	12	(
ARGUMENT	10:48	10:48	12	attr
FIELD	10:48	10:48	13	attr
LEAF_NODE	10:48	10:48	14	attr
LEAF_NODE	10:52	10:52	12	)
LEAF_NODE	10:53	10:53	10	,
ARGUMENT	10:55	10:55	10	id
FIELD	10:55	10:55	11	id
LEAF_NODE	10:55	10:55	12	id
LEAF_NODE	10:57	10:57	10	)
LEAF_NODE	10:58	10:58	7	)
STATEMENTS	11:3	11:3	7	
JUMP_STATEMENT	11:3	11:14	8	return attr ;
KEYWORD	11:3	11:3	9	return
LEAF_NODE	11:3	11:3	10	return
DESTINATION	11:10	11:10	9	attr
EXPR	11:10	11:10	10	attr
FIELD	11:10	11:10	11	attr
LEAF_NODE	11:10	11:10	12	attr
LEAF_NODE	11:14	11:14	9	;
LEAF_NODE	12:1	12:1	5	}
JUMP_STATEMENT	13:1	13:12	3	return NULL ;
KEYWORD	13:1	13:1	4	return
LEAF_NODE	13:1	13:1	5	return
DESTINATION	13:8	13:8	4	NULL
EXPR	13:8	13:8	5	NULL
FIELD	13:8	13:8	6	NULL
LEAF_NODE	13:8	13:8	7	NULL
LEAF_NODE	13:12	13:12	4	;
LEAF_NODE	14:0	14:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	4:0	1	
RETURN_TYPE	1:0	1:16	2	PurpleCipherOps *
TYPE_NAME	1:0	1:0	3	PurpleCipherOps
LEAF_NODE	1:0	1:0	4	PurpleCipherOps
LEAF_NODE	1:16	1:16	3	*
FUNCTION_NAME	2:0	2:0	2	purple_md4_cipher_get_ops
LEAF_NODE	2:0	2:0	3	purple_md4_cipher_get_ops
PARAMETER_LIST	2:25	2:30	2	( void )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:26	3	void
LEAF_NODE	2:26	2:26	4	void
LEAF_NODE	2:30	2:30	3	)
LEAF_NODE	2:32	2:32	2	{
STATEMENTS	3:1	3:1	2	
JUMP_STATEMENT	3:1	3:15	3	return & MD4Ops ;
KEYWORD	3:1	3:1	4	return
LEAF_NODE	3:1	3:1	5	return
DESTINATION	3:8	3:8	4	& MD4Ops
EXPR	3:8	3:8	5	& MD4Ops
UNARY_EXPR	3:8	3:9	6	& MD4Ops
UNARY_OPERATOR	3:8	3:8	7	&
LEAF_NODE	3:8	3:8	8	&
FIELD	3:9	3:9	7	MD4Ops
LEAF_NODE	3:9	3:9	8	MD4Ops
LEAF_NODE	3:15	3:15	4	;
LEAF_NODE	4:0	4:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	14:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	serv_send_file
LEAF_NODE	2:5	2:5	3	serv_send_file
PARAMETER_LIST	2:19	2:75	2	( PurpleConnection * gc , const char * who , const char * file )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:38	3	PurpleConnection * gc
TYPE	2:20	2:37	4	PurpleConnection *
TYPE_NAME	2:20	2:20	5	PurpleConnection
LEAF_NODE	2:20	2:20	6	PurpleConnection
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	gc
LEAF_NODE	2:38	2:38	5	gc
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:54	3	const char * who
TYPE	2:42	2:53	4	const char *
TYPE_NAME	2:42	2:48	5	const char
LEAF_NODE	2:42	2:42	6	const
LEAF_NODE	2:48	2:48	6	char
POINTER	2:53	2:53	5	*
LEAF_NODE	2:53	2:53	6	*
NAME	2:54	2:54	4	who
LEAF_NODE	2:54	2:54	5	who
LEAF_NODE	2:57	2:57	3	,
PARAMETER_DECL	2:59	2:71	3	const char * file
TYPE	2:59	2:70	4	const char *
TYPE_NAME	2:59	2:65	5	const char
LEAF_NODE	2:59	2:59	6	const
LEAF_NODE	2:65	2:65	6	char
POINTER	2:70	2:70	5	*
LEAF_NODE	2:70	2:70	6	*
NAME	2:71	2:71	4	file
LEAF_NODE	2:71	2:71	5	file
LEAF_NODE	2:75	2:75	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SIMPLE_DECL	4:1	4:19	3	PurplePlugin * prpl ;
VAR_DECL	4:1	4:15	4	PurplePlugin * prpl
TYPE	4:1	4:14	5	PurplePlugin *
TYPE_NAME	4:1	4:1	6	PurplePlugin
LEAF_NODE	4:1	4:1	7	PurplePlugin
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	prpl
LEAF_NODE	4:15	4:15	6	prpl
LEAF_NODE	4:19	4:19	4	;
SIMPLE_DECL	5:1	5:36	3	PurplePluginProtocolInfo * prpl_info ;
VAR_DECL	5:1	5:27	4	PurplePluginProtocolInfo * prpl_info
TYPE	5:1	5:26	5	PurplePluginProtocolInfo *
TYPE_NAME	5:1	5:1	6	PurplePluginProtocolInfo
LEAF_NODE	5:1	5:1	7	PurplePluginProtocolInfo
POINTER	5:26	5:26	6	*
LEAF_NODE	5:26	5:26	7	*
NAME	5:27	5:27	5	prpl_info
LEAF_NODE	5:27	5:27	6	prpl_info
LEAF_NODE	5:36	5:36	4	;
SELECTION	6:1	6:9	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	gc
EXPR	6:5	6:5	5	gc
FIELD	6:5	6:5	6	gc
LEAF_NODE	6:5	6:5	7	gc
LEAF_NODE	6:7	6:7	4	)
STATEMENTS	6:9	13:1	4	
LEAF_NODE	6:9	6:9	5	{
STATEMENTS	7:2	9:2	5	
EXPR_STATEMENT	7:2	7:39	6	prpl = purple_connection_get_prpl ( gc ) ;
EXPR	7:2	7:2	7	prpl = purple_connection_get_prpl ( gc )
ASSIGN	7:2	7:9	8	prpl = purple_connection_get_prpl ( gc )
LVAL	7:2	7:2	9	prpl
FIELD	7:2	7:2	10	prpl
LEAF_NODE	7:2	7:2	11	prpl
ASSIGN_OP	7:7	7:7	9	=
LEAF_NODE	7:7	7:7	10	=
RVAL	7:9	7:9	9	purple_connection_get_prpl ( gc )
FUNCTION_CALL	7:9	7:38	10	purple_connection_get_prpl ( gc )
CALLEE	7:9	7:9	11	purple_connection_get_prpl
LEAF_NODE	7:9	7:9	12	purple_connection_get_prpl
LEAF_NODE	7:35	7:35	11	(
ARGUMENT	7:36	7:36	11	gc
FIELD	7:36	7:36	12	gc
LEAF_NODE	7:36	7:36	13	gc
LEAF_NODE	7:38	7:38	11	)
LEAF_NODE	7:39	7:39	7	;
EXPR_STATEMENT	8:2	8:47	6	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl ) ;
EXPR	8:2	8:2	7	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
ASSIGN	8:2	8:14	8	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
LVAL	8:2	8:2	9	prpl_info
FIELD	8:2	8:2	10	prpl_info
LEAF_NODE	8:2	8:2	11	prpl_info
ASSIGN_OP	8:12	8:12	9	=
LEAF_NODE	8:12	8:12	10	=
RVAL	8:14	8:14	9	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
FUNCTION_CALL	8:14	8:46	10	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
CALLEE	8:14	8:14	11	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	8:14	8:14	12	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	8:41	8:41	11	(
ARGUMENT	8:42	8:42	11	prpl
FIELD	8:42	8:42	12	prpl
LEAF_NODE	8:42	8:42	13	prpl
LEAF_NODE	8:46	8:46	11	)
LEAF_NODE	8:47	8:47	7	;
SELECTION	9:2	12:3	6	
KEYWORD	9:2	9:2	7	if
LEAF_NODE	9:2	9:2	8	if
LEAF_NODE	9:5	9:5	7	(
CONDITION	9:6	9:6	7	prpl_info -> send_file && ( ! prpl_info -> can_receive_file || prpl_info -> can_receive_file ( gc , who ) )
EXPR	9:6	9:6	8	prpl_info -> send_file && ( ! prpl_info -> can_receive_file || prpl_info -> can_receive_file ( gc , who ) )
AND	9:6	10:4	9	prpl_info -> send_file && ( ! prpl_info -> can_receive_file || prpl_info -> can_receive_file ( gc , who ) )
EXPR	9:6	9:6	10	prpl_info -> send_file
FIELD	9:6	9:17	11	prpl_info -> send_file
LEAF_NODE	9:6	9:6	12	prpl_info
LEAF_NODE	9:15	9:15	12	->
LEAF_NODE	9:17	9:17	12	send_file
LEAF_NODE	9:27	9:27	10	&&
EXPR	10:4	11:45	10	( ! prpl_info -> can_receive_file || prpl_info -> can_receive_file ( gc , who ) )
LEAF_NODE	10:4	10:4	11	(
OR	10:5	11:9	11	! prpl_info -> can_receive_file || prpl_info -> can_receive_file ( gc , who )
EXPR	10:5	10:5	12	! prpl_info -> can_receive_file
UNARY_EXPR	10:5	10:6	13	! prpl_info -> can_receive_file
UNARY_OPERATOR	10:5	10:5	14	!
LEAF_NODE	10:5	10:5	15	!
FIELD	10:6	10:17	14	prpl_info -> can_receive_file
LEAF_NODE	10:6	10:6	15	prpl_info
LEAF_NODE	10:15	10:15	15	->
LEAF_NODE	10:17	10:17	15	can_receive_file
LEAF_NODE	11:6	11:6	12	||
EXPR	11:9	11:9	12	prpl_info -> can_receive_file ( gc , who )
FUNCTION_CALL	11:9	11:44	13	prpl_info -> can_receive_file ( gc , who )
CALLEE	11:9	11:20	14	prpl_info -> can_receive_file
LEAF_NODE	11:9	11:9	15	prpl_info
LEAF_NODE	11:18	11:18	15	->
LEAF_NODE	11:20	11:20	15	can_receive_file
LEAF_NODE	11:36	11:36	14	(
ARGUMENT	11:37	11:37	14	gc
FIELD	11:37	11:37	15	gc
LEAF_NODE	11:37	11:37	16	gc
LEAF_NODE	11:39	11:39	14	,
ARGUMENT	11:41	11:41	14	who
FIELD	11:41	11:41	15	who
LEAF_NODE	11:41	11:41	16	who
LEAF_NODE	11:44	11:44	14	)
LEAF_NODE	11:45	11:45	11	)
LEAF_NODE	11:46	11:46	7	)
STATEMENTS	12:3	12:3	7	
EXPR_STATEMENT	12:3	12:38	8	prpl_info -> send_file ( gc , who , file ) ;
EXPR	12:3	12:3	9	prpl_info -> send_file ( gc , who , file )
FUNCTION_CALL	12:3	12:37	10	prpl_info -> send_file ( gc , who , file )
CALLEE	12:3	12:14	11	prpl_info -> send_file
LEAF_NODE	12:3	12:3	12	prpl_info
LEAF_NODE	12:12	12:12	12	->
LEAF_NODE	12:14	12:14	12	send_file
LEAF_NODE	12:23	12:23	11	(
ARGUMENT	12:24	12:24	11	gc
FIELD	12:24	12:24	12	gc
LEAF_NODE	12:24	12:24	13	gc
LEAF_NODE	12:26	12:26	11	,
ARGUMENT	12:28	12:28	11	who
FIELD	12:28	12:28	12	who
LEAF_NODE	12:28	12:28	13	who
LEAF_NODE	12:31	12:31	11	,
ARGUMENT	12:33	12:33	11	file
FIELD	12:33	12:33	12	file
LEAF_NODE	12:33	12:33	13	file
LEAF_NODE	12:37	12:37	11	)
LEAF_NODE	12:38	12:38	9	;
LEAF_NODE	13:1	13:1	5	}
LEAF_NODE	14:0	14:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:8	2	xmlnode *
TYPE_NAME	1:0	1:0	3	xmlnode
LEAF_NODE	1:0	1:0	4	xmlnode
LEAF_NODE	1:8	1:8	3	*
FUNCTION_NAME	2:0	2:0	2	jingle_transport_to_xml
LEAF_NODE	2:0	2:0	3	jingle_transport_to_xml
PARAMETER_LIST	2:23	2:93	2	( JingleTransport * transport , xmlnode * content , JingleActionType action )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:41	3	JingleTransport * transport
TYPE	2:24	2:40	4	JingleTransport *
TYPE_NAME	2:24	2:24	5	JingleTransport
LEAF_NODE	2:24	2:24	6	JingleTransport
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	transport
LEAF_NODE	2:41	2:41	5	transport
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:61	3	xmlnode * content
TYPE	2:52	2:60	4	xmlnode *
TYPE_NAME	2:52	2:52	5	xmlnode
LEAF_NODE	2:52	2:52	6	xmlnode
POINTER	2:60	2:60	5	*
LEAF_NODE	2:60	2:60	6	*
NAME	2:61	2:61	4	content
LEAF_NODE	2:61	2:61	5	content
LEAF_NODE	2:68	2:68	3	,
PARAMETER_DECL	2:70	2:87	3	JingleActionType action
TYPE	2:70	2:70	4	JingleActionType
TYPE_NAME	2:70	2:70	5	JingleActionType
LEAF_NODE	2:70	2:70	6	JingleActionType
NAME	2:87	2:87	4	action
LEAF_NODE	2:87	2:87	5	action
LEAF_NODE	2:93	2:93	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:47	2	
EXPR_STATEMENT	4:1	4:46	3	g_return_val_if_fail ( transport != NULL , NULL ) ;
EXPR	4:1	4:1	4	g_return_val_if_fail ( transport != NULL , NULL )
FUNCTION_CALL	4:1	4:45	5	g_return_val_if_fail ( transport != NULL , NULL )
CALLEE	4:1	4:1	6	g_return_val_if_fail
LEAF_NODE	4:1	4:1	7	g_return_val_if_fail
LEAF_NODE	4:21	4:21	6	(
ARGUMENT	4:22	4:35	6	transport != NULL
FIELD	4:22	4:22	7	transport
LEAF_NODE	4:22	4:22	8	transport
EQ_OPERATOR	4:32	4:32	7	!=
LEAF_NODE	4:32	4:32	8	!=
FIELD	4:35	4:35	7	NULL
LEAF_NODE	4:35	4:35	8	NULL
LEAF_NODE	4:39	4:39	6	,
ARGUMENT	4:41	4:41	6	NULL
FIELD	4:41	4:41	7	NULL
LEAF_NODE	4:41	4:41	8	NULL
LEAF_NODE	4:45	4:45	6	)
LEAF_NODE	4:46	4:46	4	;
EXPR_STATEMENT	5:1	5:59	3	g_return_val_if_fail ( JINGLE_IS_TRANSPORT ( transport ) , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( JINGLE_IS_TRANSPORT ( transport ) , NULL )
FUNCTION_CALL	5:1	5:58	5	g_return_val_if_fail ( JINGLE_IS_TRANSPORT ( transport ) , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:22	6	JINGLE_IS_TRANSPORT ( transport )
FUNCTION_CALL	5:22	5:51	7	JINGLE_IS_TRANSPORT ( transport )
CALLEE	5:22	5:22	8	JINGLE_IS_TRANSPORT
LEAF_NODE	5:22	5:22	9	JINGLE_IS_TRANSPORT
LEAF_NODE	5:41	5:41	8	(
ARGUMENT	5:42	5:42	8	transport
FIELD	5:42	5:42	9	transport
LEAF_NODE	5:42	5:42	10	transport
LEAF_NODE	5:51	5:51	8	)
LEAF_NODE	5:52	5:52	6	,
ARGUMENT	5:54	5:54	6	NULL
FIELD	5:54	5:54	7	NULL
LEAF_NODE	5:54	5:54	8	NULL
LEAF_NODE	5:58	5:58	6	)
LEAF_NODE	5:59	5:59	4	;
LEAF_NODE	6:1	6:1	3	return
LEAF_NODE	6:8	6:8	3	JINGLE_TRANSPORT_GET_CLASS
LEAF_NODE	6:34	6:34	3	(
LEAF_NODE	6:35	6:35	3	transport
LEAF_NODE	6:44	6:44	3	)
LEAF_NODE	6:45	6:45	3	->
EXPR_STATEMENT	6:47	6:81	3	to_xml ( transport , content , action ) ;
EXPR	6:47	6:47	4	to_xml ( transport , content , action )
FUNCTION_CALL	6:47	6:80	5	to_xml ( transport , content , action )
CALLEE	6:47	6:47	6	to_xml
LEAF_NODE	6:47	6:47	7	to_xml
LEAF_NODE	6:53	6:53	6	(
ARGUMENT	6:54	6:54	6	transport
FIELD	6:54	6:54	7	transport
LEAF_NODE	6:54	6:54	8	transport
LEAF_NODE	6:63	6:63	6	,
ARGUMENT	6:65	6:65	6	content
FIELD	6:65	6:65	7	content
LEAF_NODE	6:65	6:65	8	content
LEAF_NODE	6:72	6:72	6	,
ARGUMENT	6:74	6:74	6	action
FIELD	6:74	6:74	7	action
LEAF_NODE	6:74	6:74	8	action
LEAF_NODE	6:80	6:80	6	)
LEAF_NODE	6:81	6:81	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	15:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	history_next
LEAF_NODE	2:0	2:0	3	history_next
PARAMETER_LIST	2:12	2:43	2	( GntBindable * bind , GList * null )
LEAF_NODE	2:12	2:12	3	(
PARAMETER_DECL	2:13	2:26	3	GntBindable * bind
TYPE	2:13	2:25	4	GntBindable *
TYPE_NAME	2:13	2:13	5	GntBindable
LEAF_NODE	2:13	2:13	6	GntBindable
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	bind
LEAF_NODE	2:26	2:26	5	bind
LEAF_NODE	2:30	2:30	3	,
PARAMETER_DECL	2:32	2:39	3	GList * null
TYPE	2:32	2:38	4	GList *
TYPE_NAME	2:32	2:32	5	GList
LEAF_NODE	2:32	2:32	6	GList
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	null
LEAF_NODE	2:39	2:39	5	null
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	14:1	2	
SIMPLE_DECL	4:1	4:34	3	GntEntry * entry ; entry = GNT_ENTRY ( bind ) ;
VAR_DECL	4:1	4:11	4	GntEntry * entry ; entry = GNT_ENTRY ( bind )
TYPE	4:1	4:10	5	GntEntry *
TYPE_NAME	4:1	4:1	6	GntEntry
LEAF_NODE	4:1	4:1	7	GntEntry
POINTER	4:10	4:10	6	*
LEAF_NODE	4:10	4:10	7	*
NAME	4:11	4:11	5	entry
LEAF_NODE	4:11	4:11	6	entry
LEAF_NODE	0:0	0:0	5	;
INIT	4:11	4:11	5	entry = GNT_ENTRY ( bind )
ASSIGN	4:11	4:19	6	entry = GNT_ENTRY ( bind )
LVAL	4:11	4:11	7	entry
NAME	4:11	4:11	8	entry
LEAF_NODE	4:11	4:11	9	entry
ASSIGN_OP	4:17	4:17	7	=
LEAF_NODE	4:17	4:17	8	=
RVAL	4:19	4:19	7	GNT_ENTRY ( bind )
FUNCTION_CALL	4:19	4:33	8	GNT_ENTRY ( bind )
CALLEE	4:19	4:19	9	GNT_ENTRY
LEAF_NODE	4:19	4:19	10	GNT_ENTRY
LEAF_NODE	4:28	4:28	9	(
ARGUMENT	4:29	4:29	9	bind
FIELD	4:29	4:29	10	bind
LEAF_NODE	4:29	4:29	11	bind
LEAF_NODE	4:33	4:33	9	)
LEAF_NODE	4:34	4:34	4	;
SELECTION	5:1	6:1	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	entry -> histlength && entry -> history -> prev
EXPR	5:5	5:5	5	entry -> histlength && entry -> history -> prev
AND	5:5	5:26	6	entry -> histlength && entry -> history -> prev
EXPR	5:5	5:5	7	entry -> histlength
FIELD	5:5	5:12	8	entry -> histlength
LEAF_NODE	5:5	5:5	9	entry
LEAF_NODE	5:10	5:10	9	->
LEAF_NODE	5:12	5:12	9	histlength
LEAF_NODE	5:23	5:23	7	&&
EXPR	5:26	5:26	7	entry -> history -> prev
FIELD	5:26	5:42	8	entry -> history -> prev
LEAF_NODE	5:26	5:26	9	entry
LEAF_NODE	5:31	5:31	9	->
LEAF_NODE	5:33	5:33	9	history
LEAF_NODE	5:40	5:40	9	->
LEAF_NODE	5:42	5:42	9	prev
LEAF_NODE	5:46	5:46	4	)
STATEMENTS	6:1	13:1	4	
LEAF_NODE	6:1	6:1	5	{
STATEMENTS	7:2	12:2	5	
EXPR_STATEMENT	7:2	7:39	6	entry -> history = entry -> history -> prev ;
EXPR	7:2	7:2	7	entry -> history = entry -> history -> prev
ASSIGN	7:2	7:19	8	entry -> history = entry -> history -> prev
LVAL	7:2	7:2	9	entry -> history
FIELD	7:2	7:9	10	entry -> history
LEAF_NODE	7:2	7:2	11	entry
LEAF_NODE	7:7	7:7	11	->
LEAF_NODE	7:9	7:9	11	history
ASSIGN_OP	7:17	7:17	9	=
LEAF_NODE	7:17	7:17	10	=
RVAL	7:19	7:19	9	entry -> history -> prev
FIELD	7:19	7:35	10	entry -> history -> prev
LEAF_NODE	7:19	7:19	11	entry
LEAF_NODE	7:24	7:24	11	->
LEAF_NODE	7:26	7:26	11	history
LEAF_NODE	7:33	7:33	11	->
LEAF_NODE	7:35	7:35	11	prev
LEAF_NODE	7:39	7:39	7	;
EXPR_STATEMENT	8:2	8:58	6	gnt_entry_set_text_internal ( entry , entry -> history -> data ) ;
EXPR	8:2	8:2	7	gnt_entry_set_text_internal ( entry , entry -> history -> data )
FUNCTION_CALL	8:2	8:57	8	gnt_entry_set_text_internal ( entry , entry -> history -> data )
CALLEE	8:2	8:2	9	gnt_entry_set_text_internal
LEAF_NODE	8:2	8:2	10	gnt_entry_set_text_internal
LEAF_NODE	8:29	8:29	9	(
ARGUMENT	8:30	8:30	9	entry
FIELD	8:30	8:30	10	entry
LEAF_NODE	8:30	8:30	11	entry
LEAF_NODE	8:35	8:35	9	,
ARGUMENT	8:37	8:37	9	entry -> history -> data
FIELD	8:37	8:53	10	entry -> history -> data
LEAF_NODE	8:37	8:37	11	entry
LEAF_NODE	8:42	8:42	11	->
LEAF_NODE	8:44	8:44	11	history
LEAF_NODE	8:51	8:51	11	->
LEAF_NODE	8:53	8:53	11	data
LEAF_NODE	8:57	8:57	9	)
LEAF_NODE	8:58	8:58	7	;
EXPR_STATEMENT	9:2	9:24	6	destroy_suggest ( entry ) ;
EXPR	9:2	9:2	7	destroy_suggest ( entry )
FUNCTION_CALL	9:2	9:23	8	destroy_suggest ( entry )
CALLEE	9:2	9:2	9	destroy_suggest
LEAF_NODE	9:2	9:2	10	destroy_suggest
LEAF_NODE	9:17	9:17	9	(
ARGUMENT	9:18	9:18	9	entry
FIELD	9:18	9:18	10	entry
LEAF_NODE	9:18	9:18	11	entry
LEAF_NODE	9:23	9:23	9	)
LEAF_NODE	9:24	9:24	7	;
EXPR_STATEMENT	10:2	10:27	6	entry_text_changed ( entry ) ;
EXPR	10:2	10:2	7	entry_text_changed ( entry )
FUNCTION_CALL	10:2	10:26	8	entry_text_changed ( entry )
CALLEE	10:2	10:2	9	entry_text_changed
LEAF_NODE	10:2	10:2	10	entry_text_changed
LEAF_NODE	10:20	10:20	9	(
ARGUMENT	10:21	10:21	9	entry
FIELD	10:21	10:21	10	entry
LEAF_NODE	10:21	10:21	11	entry
LEAF_NODE	10:26	10:26	9	)
LEAF_NODE	10:27	10:27	7	;
EXPR_STATEMENT	11:2	11:46	6	update_kill_ring ( entry , ENTRY_JAIL , NULL , 0 ) ;
EXPR	11:2	11:2	7	update_kill_ring ( entry , ENTRY_JAIL , NULL , 0 )
FUNCTION_CALL	11:2	11:45	8	update_kill_ring ( entry , ENTRY_JAIL , NULL , 0 )
CALLEE	11:2	11:2	9	update_kill_ring
LEAF_NODE	11:2	11:2	10	update_kill_ring
LEAF_NODE	11:18	11:18	9	(
ARGUMENT	11:19	11:19	9	entry
FIELD	11:19	11:19	10	entry
LEAF_NODE	11:19	11:19	11	entry
LEAF_NODE	11:24	11:24	9	,
ARGUMENT	11:26	11:26	9	ENTRY_JAIL
FIELD	11:26	11:26	10	ENTRY_JAIL
LEAF_NODE	11:26	11:26	11	ENTRY_JAIL
LEAF_NODE	11:36	11:36	9	,
ARGUMENT	11:38	11:38	9	NULL
FIELD	11:38	11:38	10	NULL
LEAF_NODE	11:38	11:38	11	NULL
LEAF_NODE	11:42	11:42	9	,
ARGUMENT	11:44	11:44	9	0
FIELD	11:44	11:44	10	0
LEAF_NODE	11:44	11:44	11	0
LEAF_NODE	11:45	11:45	9	)
LEAF_NODE	11:46	11:46	7	;
JUMP_STATEMENT	12:2	12:13	6	return TRUE ;
KEYWORD	12:2	12:2	7	return
LEAF_NODE	12:2	12:2	8	return
DESTINATION	12:9	12:9	7	TRUE
EXPR	12:9	12:9	8	TRUE
FIELD	12:9	12:9	9	TRUE
LEAF_NODE	12:9	12:9	10	TRUE
LEAF_NODE	12:13	12:13	7	;
LEAF_NODE	13:1	13:1	5	}
JUMP_STATEMENT	14:1	14:13	3	return FALSE ;
KEYWORD	14:1	14:1	4	return
LEAF_NODE	14:1	14:1	5	return
DESTINATION	14:8	14:8	4	FALSE
EXPR	14:8	14:8	5	FALSE
FIELD	14:8	14:8	6	FALSE
LEAF_NODE	14:8	14:8	7	FALSE
LEAF_NODE	14:13	14:13	4	;
LEAF_NODE	15:0	15:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	7:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	gtk_blist_menu_info_cb
LEAF_NODE	2:12	2:12	3	gtk_blist_menu_info_cb
PARAMETER_LIST	2:34	2:63	2	( GtkWidget * w , PurpleBuddy * b )
LEAF_NODE	2:34	2:34	3	(
PARAMETER_DECL	2:35	2:46	3	GtkWidget * w
TYPE	2:35	2:45	4	GtkWidget *
TYPE_NAME	2:35	2:35	5	GtkWidget
LEAF_NODE	2:35	2:35	6	GtkWidget
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	w
LEAF_NODE	2:46	2:46	5	w
LEAF_NODE	2:47	2:47	3	,
PARAMETER_DECL	2:49	2:62	3	PurpleBuddy * b
TYPE	2:49	2:61	4	PurpleBuddy *
TYPE_NAME	2:49	2:49	5	PurpleBuddy
LEAF_NODE	2:49	2:49	6	PurpleBuddy
POINTER	2:61	2:61	5	*
LEAF_NODE	2:61	2:61	6	*
NAME	2:62	2:62	4	b
LEAF_NODE	2:62	2:62	5	b
LEAF_NODE	2:63	2:63	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:53	3	PurpleAccount * account ; account = purple_buddy_get_account ( b ) ;
VAR_DECL	4:1	4:16	4	PurpleAccount * account ; account = purple_buddy_get_account ( b )
TYPE	4:1	4:15	5	PurpleAccount *
TYPE_NAME	4:1	4:1	6	PurpleAccount
LEAF_NODE	4:1	4:1	7	PurpleAccount
POINTER	4:15	4:15	6	*
LEAF_NODE	4:15	4:15	7	*
NAME	4:16	4:16	5	account
LEAF_NODE	4:16	4:16	6	account
LEAF_NODE	0:0	0:0	5	;
INIT	4:16	4:16	5	account = purple_buddy_get_account ( b )
ASSIGN	4:16	4:26	6	account = purple_buddy_get_account ( b )
LVAL	4:16	4:16	7	account
NAME	4:16	4:16	8	account
LEAF_NODE	4:16	4:16	9	account
ASSIGN_OP	4:24	4:24	7	=
LEAF_NODE	4:24	4:24	8	=
RVAL	4:26	4:26	7	purple_buddy_get_account ( b )
FUNCTION_CALL	4:26	4:52	8	purple_buddy_get_account ( b )
CALLEE	4:26	4:26	9	purple_buddy_get_account
LEAF_NODE	4:26	4:26	10	purple_buddy_get_account
LEAF_NODE	4:50	4:50	9	(
ARGUMENT	4:51	4:51	9	b
FIELD	4:51	4:51	10	b
LEAF_NODE	4:51	4:51	11	b
LEAF_NODE	4:52	4:52	9	)
LEAF_NODE	4:53	4:53	4	;
EXPR_STATEMENT	5:1	6:52	3	pidgin_retrieve_user_info ( purple_account_get_connection ( account ) , purple_buddy_get_name ( b ) ) ;
EXPR	5:1	5:1	4	pidgin_retrieve_user_info ( purple_account_get_connection ( account ) , purple_buddy_get_name ( b ) )
FUNCTION_CALL	5:1	6:51	5	pidgin_retrieve_user_info ( purple_account_get_connection ( account ) , purple_buddy_get_name ( b ) )
CALLEE	5:1	5:1	6	pidgin_retrieve_user_info
LEAF_NODE	5:1	5:1	7	pidgin_retrieve_user_info
LEAF_NODE	5:26	5:26	6	(
ARGUMENT	5:27	5:27	6	purple_account_get_connection ( account )
FUNCTION_CALL	5:27	5:64	7	purple_account_get_connection ( account )
CALLEE	5:27	5:27	8	purple_account_get_connection
LEAF_NODE	5:27	5:27	9	purple_account_get_connection
LEAF_NODE	5:56	5:56	8	(
ARGUMENT	5:57	5:57	8	account
FIELD	5:57	5:57	9	account
LEAF_NODE	5:57	5:57	10	account
LEAF_NODE	5:64	5:64	8	)
LEAF_NODE	5:65	5:65	6	,
ARGUMENT	6:27	6:27	6	purple_buddy_get_name ( b )
FUNCTION_CALL	6:27	6:50	7	purple_buddy_get_name ( b )
CALLEE	6:27	6:27	8	purple_buddy_get_name
LEAF_NODE	6:27	6:27	9	purple_buddy_get_name
LEAF_NODE	6:48	6:48	8	(
ARGUMENT	6:49	6:49	8	b
FIELD	6:49	6:49	9	b
LEAF_NODE	6:49	6:49	10	b
LEAF_NODE	6:50	6:50	8	)
LEAF_NODE	6:51	6:51	6	)
LEAF_NODE	6:52	6:52	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	63:0	1	
RETURN_TYPE	2:0	2:7	2	static int
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	int
LEAF_NODE	2:7	2:7	4	int
FUNCTION_NAME	2:11	2:11	2	gg_session_handle_welcome_110
LEAF_NODE	2:11	2:11	3	gg_session_handle_welcome_110
PARAMETER_LIST	2:40	3:20	2	( struct gg_session * gs , uint32_t seed , struct gg_event * ge )
LEAF_NODE	2:40	2:40	3	(
PARAMETER_DECL	2:41	2:60	3	struct gg_session * gs
TYPE	2:41	2:59	4	struct gg_session *
TYPE_NAME	2:41	2:48	5	struct gg_session
LEAF_NODE	2:41	2:41	6	struct
LEAF_NODE	2:48	2:48	6	gg_session
POINTER	2:59	2:59	5	*
LEAF_NODE	2:59	2:59	6	*
NAME	2:60	2:60	4	gs
LEAF_NODE	2:60	2:60	5	gs
LEAF_NODE	2:62	2:62	3	,
PARAMETER_DECL	2:64	2:73	3	uint32_t seed
TYPE	2:64	2:64	4	uint32_t
TYPE_NAME	2:64	2:64	5	uint32_t
LEAF_NODE	2:64	2:64	6	uint32_t
NAME	2:73	2:73	4	seed
LEAF_NODE	2:73	2:73	5	seed
LEAF_NODE	2:77	2:77	3	,
PARAMETER_DECL	3:1	3:18	3	struct gg_event * ge
TYPE	3:1	3:17	4	struct gg_event *
TYPE_NAME	3:1	3:8	5	struct gg_event
LEAF_NODE	3:1	3:1	6	struct
LEAF_NODE	3:8	3:8	6	gg_event
POINTER	3:17	3:17	5	*
LEAF_NODE	3:17	3:17	6	*
NAME	3:18	3:18	4	ge
LEAF_NODE	3:18	3:18	5	ge
LEAF_NODE	3:20	3:20	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	62:1	2	
SIMPLE_DECL	5:1	5:35	3	GG105Login msg ; msg = GG105_LOGIN__INIT ;
VAR_DECL	5:1	5:12	4	GG105Login msg ; msg = GG105_LOGIN__INIT
TYPE	5:1	5:1	5	GG105Login
TYPE_NAME	5:1	5:1	6	GG105Login
LEAF_NODE	5:1	5:1	7	GG105Login
NAME	5:12	5:12	5	msg
LEAF_NODE	5:12	5:12	6	msg
LEAF_NODE	0:0	0:0	5	;
INIT	5:12	5:12	5	msg = GG105_LOGIN__INIT
ASSIGN	5:12	5:18	6	msg = GG105_LOGIN__INIT
LVAL	5:12	5:12	7	msg
NAME	5:12	5:12	8	msg
LEAF_NODE	5:12	5:12	9	msg
ASSIGN_OP	5:16	5:16	7	=
LEAF_NODE	5:16	5:16	8	=
RVAL	5:18	5:18	7	GG105_LOGIN__INIT
FIELD	5:18	5:18	8	GG105_LOGIN__INIT
LEAF_NODE	5:18	5:18	9	GG105_LOGIN__INIT
LEAF_NODE	5:35	5:35	4	;
SIMPLE_DECL	6:1	6:22	3	char [ 1000 ] client_str ;
VAR_DECL	6:1	6:6	4	char [ 1000 ] client_str
TYPE	6:1	6:16	5	char [ 1000 ]
TYPE_NAME	6:1	6:1	6	char
LEAF_NODE	6:1	6:1	7	char
TYPE_SUFFIX	6:16	6:21	6	[ 1000 ]
LEAF_NODE	6:16	6:16	7	[
FIELD	6:17	6:17	7	1000
LEAF_NODE	6:17	6:17	8	1000
LEAF_NODE	6:21	6:21	7	]
NAME	6:6	6:6	5	client_str
LEAF_NODE	6:6	6:6	6	client_str
LEAF_NODE	6:22	6:22	4	;
SIMPLE_DECL	7:1	7:17	3	uint8_t [ 64 ] hash ;
VAR_DECL	7:1	7:9	4	uint8_t [ 64 ] hash
TYPE	7:1	7:13	5	uint8_t [ 64 ]
TYPE_NAME	7:1	7:1	6	uint8_t
LEAF_NODE	7:1	7:1	7	uint8_t
TYPE_SUFFIX	7:13	7:16	6	[ 64 ]
LEAF_NODE	7:13	7:13	7	[
FIELD	7:14	7:14	7	64
LEAF_NODE	7:14	7:14	8	64
LEAF_NODE	7:16	7:16	7	]
NAME	7:9	7:9	5	hash
LEAF_NODE	7:9	7:9	6	hash
LEAF_NODE	7:17	7:17	4	;
SIMPLE_DECL	8:1	8:39	3	const char * client_name ; client_name = GG11_VERSION ;
VAR_DECL	8:1	8:13	4	const char * client_name ; client_name = GG11_VERSION
TYPE	8:1	8:12	5	const char *
TYPE_NAME	8:1	8:7	6	const char
LEAF_NODE	8:1	8:1	7	const
LEAF_NODE	8:7	8:7	7	char
POINTER	8:12	8:12	6	*
LEAF_NODE	8:12	8:12	7	*
NAME	8:13	8:13	5	client_name
LEAF_NODE	8:13	8:13	6	client_name
LEAF_NODE	0:0	0:0	5	;
INIT	8:13	8:13	5	client_name = GG11_VERSION
ASSIGN	8:13	8:27	6	client_name = GG11_VERSION
LVAL	8:13	8:13	7	client_name
NAME	8:13	8:13	8	client_name
LEAF_NODE	8:13	8:13	9	client_name
ASSIGN_OP	8:25	8:25	7	=
LEAF_NODE	8:25	8:25	8	=
RVAL	8:27	8:27	7	GG11_VERSION
FIELD	8:27	8:27	8	GG11_VERSION
LEAF_NODE	8:27	8:27	9	GG11_VERSION
LEAF_NODE	8:39	8:39	4	;
SIMPLE_DECL	9:1	9:59	3	const char * client_version ; client_version = GG_DEFAULT_CLIENT_VERSION_110 ;
VAR_DECL	9:1	9:13	4	const char * client_version ; client_version = GG_DEFAULT_CLIENT_VERSION_110
TYPE	9:1	9:12	5	const char *
TYPE_NAME	9:1	9:7	6	const char
LEAF_NODE	9:1	9:1	7	const
LEAF_NODE	9:7	9:7	7	char
POINTER	9:12	9:12	6	*
LEAF_NODE	9:12	9:12	7	*
NAME	9:13	9:13	5	client_version
LEAF_NODE	9:13	9:13	6	client_version
LEAF_NODE	0:0	0:0	5	;
INIT	9:13	9:13	5	client_version = GG_DEFAULT_CLIENT_VERSION_110
ASSIGN	9:13	9:30	6	client_version = GG_DEFAULT_CLIENT_VERSION_110
LVAL	9:13	9:13	7	client_version
NAME	9:13	9:13	8	client_version
LEAF_NODE	9:13	9:13	9	client_version
ASSIGN_OP	9:28	9:28	7	=
LEAF_NODE	9:28	9:28	8	=
RVAL	9:30	9:30	7	GG_DEFAULT_CLIENT_VERSION_110
FIELD	9:30	9:30	8	GG_DEFAULT_CLIENT_VERSION_110
LEAF_NODE	9:30	9:30	9	GG_DEFAULT_CLIENT_VERSION_110
LEAF_NODE	9:59	9:59	4	;
SIMPLE_DECL	10:1	10:40	3	const char * client_target ; client_target = GG11_TARGET ;
VAR_DECL	10:1	10:13	4	const char * client_target ; client_target = GG11_TARGET
TYPE	10:1	10:12	5	const char *
TYPE_NAME	10:1	10:7	6	const char
LEAF_NODE	10:1	10:1	7	const
LEAF_NODE	10:7	10:7	7	char
POINTER	10:12	10:12	6	*
LEAF_NODE	10:12	10:12	7	*
NAME	10:13	10:13	5	client_target
LEAF_NODE	10:13	10:13	6	client_target
LEAF_NODE	0:0	0:0	5	;
INIT	10:13	10:13	5	client_target = GG11_TARGET
ASSIGN	10:13	10:29	6	client_target = GG11_TARGET
LVAL	10:13	10:13	7	client_target
NAME	10:13	10:13	8	client_target
LEAF_NODE	10:13	10:13	9	client_target
ASSIGN_OP	10:27	10:27	7	=
LEAF_NODE	10:27	10:27	8	=
RVAL	10:29	10:29	7	GG11_TARGET
FIELD	10:29	10:29	8	GG11_TARGET
LEAF_NODE	10:29	10:29	9	GG11_TARGET
LEAF_NODE	10:40	10:40	4	;
LEAF_NODE	11:1	11:1	3	uint8_t
LEAF_NODE	11:9	11:9	3	dummy4
LEAF_NODE	11:15	11:15	3	[
LEAF_NODE	11:16	11:16	3	4
LEAF_NODE	11:17	11:17	3	]
LEAF_NODE	11:19	11:19	3	=
LEAF_NODE	11:21	11:21	3	{
STATEMENTS	11:22	11:31	3	
LEAF_NODE	11:22	11:22	4	0
LEAF_NODE	11:23	11:23	4	,
LEAF_NODE	11:25	11:25	4	0
LEAF_NODE	11:26	11:26	4	,
LEAF_NODE	11:28	11:28	4	0
LEAF_NODE	11:29	11:29	4	,
LEAF_NODE	11:31	11:31	4	0
LEAF_NODE	11:32	11:32	3	}
LEAF_NODE	11:33	11:33	3	;
SELECTION	12:1	12:42	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:4	12:4	4	(
CONDITION	12:5	12:5	4	gs -> hash_type != GG_LOGIN_HASH_SHA1
EXPR	12:5	12:22	5	gs -> hash_type != GG_LOGIN_HASH_SHA1
FIELD	12:5	12:9	6	gs -> hash_type
LEAF_NODE	12:5	12:5	7	gs
LEAF_NODE	12:7	12:7	7	->
LEAF_NODE	12:9	12:9	7	hash_type
EQ_OPERATOR	12:19	12:19	6	!=
LEAF_NODE	12:19	12:19	7	!=
FIELD	12:22	12:22	6	GG_LOGIN_HASH_SHA1
LEAF_NODE	12:22	12:22	7	GG_LOGIN_HASH_SHA1
LEAF_NODE	12:40	12:40	4	)
STATEMENTS	12:42	17:1	4	
LEAF_NODE	12:42	12:42	5	{
STATEMENTS	13:2	16:2	5	
LEAF_NODE	13:2	13:2	6	gg_debug_session
LEAF_NODE	13:18	13:18	6	(
LEAF_NODE	13:19	13:19	6	gs
LEAF_NODE	13:21	13:21	6	,
LEAF_NODE	13:23	13:23	6	GG_DEBUG_ERROR
LEAF_NODE	13:37	13:37	6	,
LEAF_NODE	13:39	13:39	6	"// Unsupported hash type "
LEAF_NODE	14:3	14:3	6	"for this protocol version\n"
LEAF_NODE	14:32	14:32	6	)
LEAF_NODE	14:33	14:33	6	;
EXPR_STATEMENT	15:2	15:52	6	gg_connection_failure ( gs , ge , GG_FAILURE_INTERNAL ) ;
EXPR	15:2	15:2	7	gg_connection_failure ( gs , ge , GG_FAILURE_INTERNAL )
FUNCTION_CALL	15:2	15:51	8	gg_connection_failure ( gs , ge , GG_FAILURE_INTERNAL )
CALLEE	15:2	15:2	9	gg_connection_failure
LEAF_NODE	15:2	15:2	10	gg_connection_failure
LEAF_NODE	15:23	15:23	9	(
ARGUMENT	15:24	15:24	9	gs
FIELD	15:24	15:24	10	gs
LEAF_NODE	15:24	15:24	11	gs
LEAF_NODE	15:26	15:26	9	,
ARGUMENT	15:28	15:28	9	ge
FIELD	15:28	15:28	10	ge
LEAF_NODE	15:28	15:28	11	ge
LEAF_NODE	15:30	15:30	9	,
ARGUMENT	15:32	15:32	9	GG_FAILURE_INTERNAL
FIELD	15:32	15:32	10	GG_FAILURE_INTERNAL
LEAF_NODE	15:32	15:32	11	GG_FAILURE_INTERNAL
LEAF_NODE	15:51	15:51	9	)
LEAF_NODE	15:52	15:52	7	;
JUMP_STATEMENT	16:2	16:11	6	return - 1 ;
KEYWORD	16:2	16:2	7	return
LEAF_NODE	16:2	16:2	8	return
DESTINATION	16:9	16:9	7	- 1
EXPR	16:9	16:9	8	- 1
UNARY_EXPR	16:9	16:10	9	- 1
UNARY_OPERATOR	16:9	16:9	10	-
LEAF_NODE	16:9	16:9	11	-
FIELD	16:10	16:10	10	1
LEAF_NODE	16:10	16:10	11	1
LEAF_NODE	16:11	16:11	7	;
LEAF_NODE	17:1	17:1	5	}
SELECTION	18:1	18:59	3	
KEYWORD	18:1	18:1	4	if
LEAF_NODE	18:1	18:1	5	if
LEAF_NODE	18:4	18:4	4	(
CONDITION	18:5	18:5	4	gg_login_hash_sha1_2 ( gs -> password , seed , hash ) == - 1
EXPR	18:5	18:55	5	gg_login_hash_sha1_2 ( gs -> password , seed , hash ) == - 1
FUNCTION_CALL	18:5	18:50	6	gg_login_hash_sha1_2 ( gs -> password , seed , hash )
CALLEE	18:5	18:5	7	gg_login_hash_sha1_2
LEAF_NODE	18:5	18:5	8	gg_login_hash_sha1_2
LEAF_NODE	18:25	18:25	7	(
ARGUMENT	18:26	18:26	7	gs -> password
FIELD	18:26	18:30	8	gs -> password
LEAF_NODE	18:26	18:26	9	gs
LEAF_NODE	18:28	18:28	9	->
LEAF_NODE	18:30	18:30	9	password
LEAF_NODE	18:38	18:38	7	,
ARGUMENT	18:40	18:40	7	seed
FIELD	18:40	18:40	8	seed
LEAF_NODE	18:40	18:40	9	seed
LEAF_NODE	18:44	18:44	7	,
ARGUMENT	18:46	18:46	7	hash
FIELD	18:46	18:46	8	hash
LEAF_NODE	18:46	18:46	9	hash
LEAF_NODE	18:50	18:50	7	)
EQ_OPERATOR	18:52	18:52	6	==
LEAF_NODE	18:52	18:52	7	==
UNARY_EXPR	18:55	18:56	6	- 1
UNARY_OPERATOR	18:55	18:55	7	-
LEAF_NODE	18:55	18:55	8	-
FIELD	18:56	18:56	7	1
LEAF_NODE	18:56	18:56	8	1
LEAF_NODE	18:57	18:57	4	)
STATEMENTS	18:59	24:1	4	
LEAF_NODE	18:59	18:59	5	{
STATEMENTS	19:2	23:2	5	
LEAF_NODE	19:2	19:2	6	gg_debug_session
LEAF_NODE	19:18	19:18	6	(
LEAF_NODE	19:19	19:19	6	gs
LEAF_NODE	19:21	19:21	6	,
LEAF_NODE	19:23	19:23	6	GG_DEBUG_ERROR
LEAF_NODE	19:37	19:37	6	,
LEAF_NODE	19:39	19:39	6	"// gg_watch_fd() "
LEAF_NODE	20:3	20:3	6	"gg_login_hash_sha1_2() failed, "
LEAF_NODE	21:3	21:3	6	"probably out of memory\n"
LEAF_NODE	21:29	21:29	6	)
LEAF_NODE	21:30	21:30	6	;
EXPR_STATEMENT	22:2	22:52	6	gg_connection_failure ( gs , ge , GG_FAILURE_INTERNAL ) ;
EXPR	22:2	22:2	7	gg_connection_failure ( gs , ge , GG_FAILURE_INTERNAL )
FUNCTION_CALL	22:2	22:51	8	gg_connection_failure ( gs , ge , GG_FAILURE_INTERNAL )
CALLEE	22:2	22:2	9	gg_connection_failure
LEAF_NODE	22:2	22:2	10	gg_connection_failure
LEAF_NODE	22:23	22:23	9	(
ARGUMENT	22:24	22:24	9	gs
FIELD	22:24	22:24	10	gs
LEAF_NODE	22:24	22:24	11	gs
LEAF_NODE	22:26	22:26	9	,
ARGUMENT	22:28	22:28	9	ge
FIELD	22:28	22:28	10	ge
LEAF_NODE	22:28	22:28	11	ge
LEAF_NODE	22:30	22:30	9	,
ARGUMENT	22:32	22:32	9	GG_FAILURE_INTERNAL
FIELD	22:32	22:32	10	GG_FAILURE_INTERNAL
LEAF_NODE	22:32	22:32	11	GG_FAILURE_INTERNAL
LEAF_NODE	22:51	22:51	9	)
LEAF_NODE	22:52	22:52	7	;
JUMP_STATEMENT	23:2	23:11	6	return - 1 ;
KEYWORD	23:2	23:2	7	return
LEAF_NODE	23:2	23:2	8	return
DESTINATION	23:9	23:9	7	- 1
EXPR	23:9	23:9	8	- 1
UNARY_EXPR	23:9	23:10	9	- 1
UNARY_OPERATOR	23:9	23:9	10	-
LEAF_NODE	23:9	23:9	11	-
FIELD	23:10	23:10	10	1
LEAF_NODE	23:10	23:10	11	1
LEAF_NODE	23:11	23:11	7	;
LEAF_NODE	24:1	24:1	5	}
SELECTION	25:1	25:68	3	
KEYWORD	25:1	25:1	4	if
LEAF_NODE	25:1	25:1	5	if
LEAF_NODE	25:4	25:4	4	(
CONDITION	25:5	25:5	4	gs -> client_version != NULL && ! isdigit ( gs -> client_version [ 0 ] )
EXPR	25:5	25:5	5	gs -> client_version != NULL && ! isdigit ( gs -> client_version [ 0 ] )
AND	25:5	25:35	6	gs -> client_version != NULL && ! isdigit ( gs -> client_version [ 0 ] )
EXPR	25:5	25:27	7	gs -> client_version != NULL
FIELD	25:5	25:9	8	gs -> client_version
LEAF_NODE	25:5	25:5	9	gs
LEAF_NODE	25:7	25:7	9	->
LEAF_NODE	25:9	25:9	9	client_version
EQ_OPERATOR	25:24	25:24	8	!=
LEAF_NODE	25:24	25:24	9	!=
FIELD	25:27	25:27	8	NULL
LEAF_NODE	25:27	25:27	9	NULL
LEAF_NODE	25:32	25:32	7	&&
EXPR	25:35	25:35	7	! isdigit ( gs -> client_version [ 0 ] )
UNARY_EXPR	25:35	25:36	8	! isdigit ( gs -> client_version [ 0 ] )
UNARY_OPERATOR	25:35	25:35	9	!
LEAF_NODE	25:35	25:35	10	!
FUNCTION_CALL	25:36	25:65	9	isdigit ( gs -> client_version [ 0 ] )
CALLEE	25:36	25:36	10	isdigit
LEAF_NODE	25:36	25:36	11	isdigit
LEAF_NODE	25:43	25:43	10	(
ARGUMENT	25:44	25:44	10	gs -> client_version [ 0 ]
FIELD	25:44	25:64	11	gs -> client_version [ 0 ]
LEAF_NODE	25:44	25:44	12	gs
LEAF_NODE	25:46	25:46	12	->
LEAF_NODE	25:48	25:48	12	client_version
LEAF_NODE	25:62	25:62	12	[
EXPR	25:63	25:63	12	0
FIELD	25:63	25:63	13	0
LEAF_NODE	25:63	25:63	14	0
LEAF_NODE	25:64	25:64	12	]
LEAF_NODE	25:65	25:65	10	)
LEAF_NODE	25:66	25:66	4	)
STATEMENTS	25:68	28:1	4	
LEAF_NODE	25:68	25:68	5	{
STATEMENTS	26:2	27:2	5	
EXPR_STATEMENT	26:2	26:18	6	client_name = "" ;
EXPR	26:2	26:2	7	client_name = ""
ASSIGN	26:2	26:16	8	client_name = ""
LVAL	26:2	26:2	9	client_name
FIELD	26:2	26:2	10	client_name
LEAF_NODE	26:2	26:2	11	client_name
ASSIGN_OP	26:14	26:14	9	=
LEAF_NODE	26:14	26:14	10	=
RVAL	26:16	26:16	9	""
FIELD	26:16	26:16	10	""
LEAF_NODE	26:16	26:16	11	""
LEAF_NODE	26:18	26:18	7	;
EXPR_STATEMENT	27:2	27:20	6	client_target = "" ;
EXPR	27:2	27:2	7	client_target = ""
ASSIGN	27:2	27:18	8	client_target = ""
LVAL	27:2	27:2	9	client_target
FIELD	27:2	27:2	10	client_target
LEAF_NODE	27:2	27:2	11	client_target
ASSIGN_OP	27:16	27:16	9	=
LEAF_NODE	27:16	27:16	10	=
RVAL	27:18	27:18	9	""
FIELD	27:18	27:18	10	""
LEAF_NODE	27:18	27:18	11	""
LEAF_NODE	27:20	27:20	7	;
LEAF_NODE	28:1	28:1	5	}
SELECTION	29:1	30:2	3	
KEYWORD	29:1	29:1	4	if
LEAF_NODE	29:1	29:1	5	if
LEAF_NODE	29:4	29:4	4	(
CONDITION	29:5	29:5	4	gs -> client_version != NULL
EXPR	29:5	29:27	5	gs -> client_version != NULL
FIELD	29:5	29:9	6	gs -> client_version
LEAF_NODE	29:5	29:5	7	gs
LEAF_NODE	29:7	29:7	7	->
LEAF_NODE	29:9	29:9	7	client_version
EQ_OPERATOR	29:24	29:24	6	!=
LEAF_NODE	29:24	29:24	7	!=
FIELD	29:27	29:27	6	NULL
LEAF_NODE	29:27	29:27	7	NULL
LEAF_NODE	29:31	29:31	4	)
STATEMENTS	30:2	30:2	4	
EXPR_STATEMENT	30:2	30:37	5	client_version = gs -> client_version ;
EXPR	30:2	30:2	6	client_version = gs -> client_version
ASSIGN	30:2	30:19	7	client_version = gs -> client_version
LVAL	30:2	30:2	8	client_version
FIELD	30:2	30:2	9	client_version
LEAF_NODE	30:2	30:2	10	client_version
ASSIGN_OP	30:17	30:17	8	=
LEAF_NODE	30:17	30:17	9	=
RVAL	30:19	30:19	8	gs -> client_version
FIELD	30:19	30:23	9	gs -> client_version
LEAF_NODE	30:19	30:19	10	gs
LEAF_NODE	30:21	30:21	10	->
LEAF_NODE	30:23	30:23	10	client_version
LEAF_NODE	30:37	30:37	6	;
EXPR_STATEMENT	31:1	32:45	3	snprintf ( client_str , sizeof ( client_str ) , "%s%s%s" , client_name , client_version , client_target ) ;
EXPR	31:1	31:1	4	snprintf ( client_str , sizeof ( client_str ) , "%s%s%s" , client_name , client_version , client_target )
FUNCTION_CALL	31:1	32:44	5	snprintf ( client_str , sizeof ( client_str ) , "%s%s%s" , client_name , client_version , client_target )
CALLEE	31:1	31:1	6	snprintf
LEAF_NODE	31:1	31:1	7	snprintf
LEAF_NODE	31:9	31:9	6	(
ARGUMENT	31:10	31:10	6	client_str
FIELD	31:10	31:10	7	client_str
LEAF_NODE	31:10	31:10	8	client_str
LEAF_NODE	31:20	31:20	6	,
ARGUMENT	31:22	31:22	6	sizeof ( client_str )
FUNCTION_CALL	31:22	31:39	7	sizeof ( client_str )
CALLEE	31:22	31:22	8	sizeof
LEAF_NODE	31:22	31:22	9	sizeof
LEAF_NODE	31:28	31:28	8	(
ARGUMENT	31:29	31:29	8	client_str
FIELD	31:29	31:29	9	client_str
LEAF_NODE	31:29	31:29	10	client_str
LEAF_NODE	31:39	31:39	8	)
LEAF_NODE	31:40	31:40	6	,
ARGUMENT	31:42	31:42	6	"%s%s%s"
FIELD	31:42	31:42	7	"%s%s%s"
LEAF_NODE	31:42	31:42	8	"%s%s%s"
LEAF_NODE	31:50	31:50	6	,
ARGUMENT	32:2	32:2	6	client_name
FIELD	32:2	32:2	7	client_name
LEAF_NODE	32:2	32:2	8	client_name
LEAF_NODE	32:13	32:13	6	,
ARGUMENT	32:15	32:15	6	client_version
FIELD	32:15	32:15	7	client_version
LEAF_NODE	32:15	32:15	8	client_version
LEAF_NODE	32:29	32:29	6	,
ARGUMENT	32:31	32:31	6	client_target
FIELD	32:31	32:31	7	client_target
LEAF_NODE	32:31	32:31	8	client_target
LEAF_NODE	32:44	32:44	6	)
LEAF_NODE	32:45	32:45	4	;
EXPR_STATEMENT	33:1	33:42	3	client_str [ sizeof ( client_str ) - 1 ] = '\0' ;
EXPR	33:1	33:1	4	client_str [ sizeof ( client_str ) - 1 ] = '\0'
ASSIGN	33:1	33:38	5	client_str [ sizeof ( client_str ) - 1 ] = '\0'
LVAL	33:1	33:1	6	client_str [ sizeof ( client_str ) - 1 ]
FIELD	33:1	33:34	7	client_str [ sizeof ( client_str ) - 1 ]
LEAF_NODE	33:1	33:1	8	client_str
LEAF_NODE	33:11	33:11	8	[
EXPR	33:12	33:33	8	sizeof ( client_str ) - 1
FUNCTION_CALL	33:12	33:29	9	sizeof ( client_str )
CALLEE	33:12	33:12	10	sizeof
LEAF_NODE	33:12	33:12	11	sizeof
LEAF_NODE	33:18	33:18	10	(
ARGUMENT	33:19	33:19	10	client_str
FIELD	33:19	33:19	11	client_str
LEAF_NODE	33:19	33:19	12	client_str
LEAF_NODE	33:29	33:29	10	)
LEAF_NODE	33:31	33:31	9	-
FIELD	33:33	33:33	9	1
LEAF_NODE	33:33	33:33	10	1
LEAF_NODE	33:34	33:34	8	]
ASSIGN_OP	33:36	33:36	6	=
LEAF_NODE	33:36	33:36	7	=
RVAL	33:38	33:38	6	'\0'
FIELD	33:38	33:38	7	'\0'
LEAF_NODE	33:38	33:38	8	'\0'
LEAF_NODE	33:42	33:42	4	;
LEAF_NODE	34:1	34:1	3	gg_debug_session
LEAF_NODE	34:17	34:17	3	(
LEAF_NODE	34:18	34:18	3	gs
LEAF_NODE	34:20	34:20	3	,
LEAF_NODE	34:22	34:22	3	GG_DEBUG_MISC
LEAF_NODE	34:35	34:35	3	,
LEAF_NODE	34:37	34:37	3	"// gg_watch_fd() "
LEAF_NODE	35:2	35:2	3	"sending GG_LOGIN105 packet\n"
LEAF_NODE	35:32	35:32	3	)
LEAF_NODE	35:33	35:33	3	;
EXPR_STATEMENT	36:1	36:20	3	msg . lang = GG8_LANG ;
EXPR	36:1	36:1	4	msg . lang = GG8_LANG
ASSIGN	36:1	36:12	5	msg . lang = GG8_LANG
LVAL	36:1	36:1	6	msg . lang
FIELD	36:1	36:5	7	msg . lang
LEAF_NODE	36:1	36:1	8	msg
LEAF_NODE	36:4	36:4	8	.
LEAF_NODE	36:5	36:5	8	lang
ASSIGN_OP	36:10	36:10	6	=
LEAF_NODE	36:10	36:10	7	=
RVAL	36:12	36:12	6	GG8_LANG
FIELD	36:12	36:12	7	GG8_LANG
LEAF_NODE	36:12	36:12	8	GG8_LANG
LEAF_NODE	36:20	36:20	4	;
EXPR_STATEMENT	37:1	37:45	3	gg_protobuf_set_uin ( & msg . uin , gs -> uin , NULL ) ;
EXPR	37:1	37:1	4	gg_protobuf_set_uin ( & msg . uin , gs -> uin , NULL )
FUNCTION_CALL	37:1	37:44	5	gg_protobuf_set_uin ( & msg . uin , gs -> uin , NULL )
CALLEE	37:1	37:1	6	gg_protobuf_set_uin
LEAF_NODE	37:1	37:1	7	gg_protobuf_set_uin
LEAF_NODE	37:20	37:20	6	(
ARGUMENT	37:21	37:21	6	& msg . uin
UNARY_EXPR	37:21	37:22	7	& msg . uin
UNARY_OPERATOR	37:21	37:21	8	&
LEAF_NODE	37:21	37:21	9	&
FIELD	37:22	37:26	8	msg . uin
LEAF_NODE	37:22	37:22	9	msg
LEAF_NODE	37:25	37:25	9	.
LEAF_NODE	37:26	37:26	9	uin
LEAF_NODE	37:29	37:29	6	,
ARGUMENT	37:31	37:31	6	gs -> uin
FIELD	37:31	37:35	7	gs -> uin
LEAF_NODE	37:31	37:31	8	gs
LEAF_NODE	37:33	37:33	8	->
LEAF_NODE	37:35	37:35	8	uin
LEAF_NODE	37:38	37:38	6	,
ARGUMENT	37:40	37:40	6	NULL
FIELD	37:40	37:40	7	NULL
LEAF_NODE	37:40	37:40	8	NULL
LEAF_NODE	37:44	37:44	6	)
LEAF_NODE	37:45	37:45	4	;
EXPR_STATEMENT	38:1	38:18	3	msg . hash . len = 20 ;
EXPR	38:1	38:1	4	msg . hash . len = 20
ASSIGN	38:1	38:16	5	msg . hash . len = 20
LVAL	38:1	38:1	6	msg . hash . len
FIELD	38:1	38:10	7	msg . hash . len
LEAF_NODE	38:1	38:1	8	msg
LEAF_NODE	38:4	38:4	8	.
LEAF_NODE	38:5	38:5	8	hash
LEAF_NODE	38:9	38:9	8	.
LEAF_NODE	38:10	38:10	8	len
ASSIGN_OP	38:14	38:14	6	=
LEAF_NODE	38:14	38:14	7	=
RVAL	38:16	38:16	6	20
FIELD	38:16	38:16	7	20
LEAF_NODE	38:16	38:16	8	20
LEAF_NODE	38:18	38:18	4	;
EXPR_STATEMENT	39:1	39:21	3	msg . hash . data = hash ;
EXPR	39:1	39:1	4	msg . hash . data = hash
ASSIGN	39:1	39:17	5	msg . hash . data = hash
LVAL	39:1	39:1	6	msg . hash . data
FIELD	39:1	39:10	7	msg . hash . data
LEAF_NODE	39:1	39:1	8	msg
LEAF_NODE	39:4	39:4	8	.
LEAF_NODE	39:5	39:5	8	hash
LEAF_NODE	39:9	39:9	8	.
LEAF_NODE	39:10	39:10	8	data
ASSIGN_OP	39:15	39:15	6	=
LEAF_NODE	39:15	39:15	7	=
RVAL	39:17	39:17	6	hash
FIELD	39:17	39:17	7	hash
LEAF_NODE	39:17	39:17	8	hash
LEAF_NODE	39:21	39:21	4	;
EXPR_STATEMENT	40:1	40:24	3	msg . client = client_str ;
EXPR	40:1	40:1	4	msg . client = client_str
ASSIGN	40:1	40:14	5	msg . client = client_str
LVAL	40:1	40:1	6	msg . client
FIELD	40:1	40:5	7	msg . client
LEAF_NODE	40:1	40:1	8	msg
LEAF_NODE	40:4	40:4	8	.
LEAF_NODE	40:5	40:5	8	client
ASSIGN_OP	40:12	40:12	6	=
LEAF_NODE	40:12	40:12	7	=
RVAL	40:14	40:14	6	client_str
FIELD	40:14	40:14	7	client_str
LEAF_NODE	40:14	40:14	8	client_str
LEAF_NODE	40:24	40:24	4	;
EXPR_STATEMENT	42:1	43:47	3	msg . initial_status = gs -> initial_status ? ( gs -> initial_status & 0xFF ) : GG_STATUS_AVAIL ;
EXPR	42:1	42:1	4	msg . initial_status = gs -> initial_status ? ( gs -> initial_status & 0xFF ) : GG_STATUS_AVAIL
ASSIGN	42:1	42:22	5	msg . initial_status = gs -> initial_status ? ( gs -> initial_status & 0xFF ) : GG_STATUS_AVAIL
LVAL	42:1	42:1	6	msg . initial_status
FIELD	42:1	42:5	7	msg . initial_status
LEAF_NODE	42:1	42:1	8	msg
LEAF_NODE	42:4	42:4	8	.
LEAF_NODE	42:5	42:5	8	initial_status
ASSIGN_OP	42:20	42:20	6	=
LEAF_NODE	42:20	42:20	7	=
RVAL	42:22	42:22	6	gs -> initial_status ? ( gs -> initial_status & 0xFF ) : GG_STATUS_AVAIL
COND_EXPR	42:22	43:32	7	gs -> initial_status ? ( gs -> initial_status & 0xFF ) : GG_STATUS_AVAIL
CONDITION	42:22	42:22	8	gs -> initial_status
FIELD	42:22	42:26	9	gs -> initial_status
LEAF_NODE	42:22	42:22	10	gs
LEAF_NODE	42:24	42:24	10	->
LEAF_NODE	42:26	42:26	10	initial_status
LEAF_NODE	42:41	42:41	8	?
EXPR	43:2	43:28	8	( gs -> initial_status & 0xFF )
LEAF_NODE	43:2	43:2	9	(
FIELD	43:3	43:7	9	gs -> initial_status
LEAF_NODE	43:3	43:3	10	gs
LEAF_NODE	43:5	43:5	10	->
LEAF_NODE	43:7	43:7	10	initial_status
LEAF_NODE	43:22	43:22	9	&
FIELD	43:24	43:24	9	0xFF
LEAF_NODE	43:24	43:24	10	0xFF
LEAF_NODE	43:28	43:28	9	)
LEAF_NODE	43:30	43:30	8	:
FIELD	43:32	43:32	8	GG_STATUS_AVAIL
LEAF_NODE	43:32	43:32	9	GG_STATUS_AVAIL
LEAF_NODE	43:47	43:47	4	;
SELECTION	44:1	44:32	3	
KEYWORD	44:1	44:1	4	if
LEAF_NODE	44:1	44:1	5	if
LEAF_NODE	44:4	44:4	4	(
CONDITION	44:5	44:5	4	gs -> initial_descr != NULL
EXPR	44:5	44:26	5	gs -> initial_descr != NULL
FIELD	44:5	44:9	6	gs -> initial_descr
LEAF_NODE	44:5	44:5	7	gs
LEAF_NODE	44:7	44:7	7	->
LEAF_NODE	44:9	44:9	7	initial_descr
EQ_OPERATOR	44:23	44:23	6	!=
LEAF_NODE	44:23	44:23	7	!=
FIELD	44:26	44:26	6	NULL
LEAF_NODE	44:26	44:26	7	NULL
LEAF_NODE	44:30	44:30	4	)
STATEMENTS	44:32	46:1	4	
LEAF_NODE	44:32	44:32	5	{
STATEMENTS	45:2	45:2	5	
EXPR_STATEMENT	45:2	45:39	6	msg . initial_descr = gs -> initial_descr ;
EXPR	45:2	45:2	7	msg . initial_descr = gs -> initial_descr
ASSIGN	45:2	45:22	8	msg . initial_descr = gs -> initial_descr
LVAL	45:2	45:2	9	msg . initial_descr
FIELD	45:2	45:6	10	msg . initial_descr
LEAF_NODE	45:2	45:2	11	msg
LEAF_NODE	45:5	45:5	11	.
LEAF_NODE	45:6	45:6	11	initial_descr
ASSIGN_OP	45:20	45:20	9	=
LEAF_NODE	45:20	45:20	10	=
RVAL	45:22	45:22	9	gs -> initial_descr
FIELD	45:22	45:26	10	gs -> initial_descr
LEAF_NODE	45:22	45:22	11	gs
LEAF_NODE	45:24	45:24	11	->
LEAF_NODE	45:26	45:26	11	initial_descr
LEAF_NODE	45:39	45:39	7	;
LEAF_NODE	46:1	46:1	5	}
LEAF_NODE	51:1	51:1	3	msg
LEAF_NODE	51:4	51:4	3	.
LEAF_NODE	51:5	51:5	3	supported_features
LEAF_NODE	51:24	51:24	3	=
LEAF_NODE	51:26	51:26	3	"avatar,StatusComments,ggaccount,edisc,"
EXPR_STATEMENT	52:2	52:54	3	"music_shared,bot,fanpage,pubdir,botCaps,gifts,Gift" ;
EXPR	52:2	52:2	4	"music_shared,bot,fanpage,pubdir,botCaps,gifts,Gift"
FIELD	52:2	52:2	5	"music_shared,bot,fanpage,pubdir,botCaps,gifts,Gift"
LEAF_NODE	52:2	52:2	6	"music_shared,bot,fanpage,pubdir,botCaps,gifts,Gift"
LEAF_NODE	52:54	52:54	4	;
EXPR_STATEMENT	53:1	53:32	3	msg . dummy4 . len = sizeof ( dummy4 ) ;
EXPR	53:1	53:1	4	msg . dummy4 . len = sizeof ( dummy4 )
ASSIGN	53:1	53:18	5	msg . dummy4 . len = sizeof ( dummy4 )
LVAL	53:1	53:1	6	msg . dummy4 . len
FIELD	53:1	53:12	7	msg . dummy4 . len
LEAF_NODE	53:1	53:1	8	msg
LEAF_NODE	53:4	53:4	8	.
LEAF_NODE	53:5	53:5	8	dummy4
LEAF_NODE	53:11	53:11	8	.
LEAF_NODE	53:12	53:12	8	len
ASSIGN_OP	53:16	53:16	6	=
LEAF_NODE	53:16	53:16	7	=
RVAL	53:18	53:18	6	sizeof ( dummy4 )
FUNCTION_CALL	53:18	53:31	7	sizeof ( dummy4 )
CALLEE	53:18	53:18	8	sizeof
LEAF_NODE	53:18	53:18	9	sizeof
LEAF_NODE	53:24	53:24	8	(
ARGUMENT	53:25	53:25	8	dummy4
FIELD	53:25	53:25	9	dummy4
LEAF_NODE	53:25	53:25	10	dummy4
LEAF_NODE	53:31	53:31	8	)
LEAF_NODE	53:32	53:32	4	;
EXPR_STATEMENT	54:1	54:25	3	msg . dummy4 . data = dummy4 ;
EXPR	54:1	54:1	4	msg . dummy4 . data = dummy4
ASSIGN	54:1	54:19	5	msg . dummy4 . data = dummy4
LVAL	54:1	54:1	6	msg . dummy4 . data
FIELD	54:1	54:12	7	msg . dummy4 . data
LEAF_NODE	54:1	54:1	8	msg
LEAF_NODE	54:4	54:4	8	.
LEAF_NODE	54:5	54:5	8	dummy4
LEAF_NODE	54:11	54:11	8	.
LEAF_NODE	54:12	54:12	8	data
ASSIGN_OP	54:17	54:17	6	=
LEAF_NODE	54:17	54:17	7	=
RVAL	54:19	54:19	6	dummy4
FIELD	54:19	54:19	7	dummy4
LEAF_NODE	54:19	54:19	8	dummy4
LEAF_NODE	54:25	54:25	4	;
EXPR_STATEMENT	55:1	55:19	3	msg . has_dummy7 = 1 ;
EXPR	55:1	55:1	4	msg . has_dummy7 = 1
ASSIGN	55:1	55:18	5	msg . has_dummy7 = 1
LVAL	55:1	55:1	6	msg . has_dummy7
FIELD	55:1	55:5	7	msg . has_dummy7
LEAF_NODE	55:1	55:1	8	msg
LEAF_NODE	55:4	55:4	8	.
LEAF_NODE	55:5	55:5	8	has_dummy7
ASSIGN_OP	55:16	55:16	6	=
LEAF_NODE	55:16	55:16	7	=
RVAL	55:18	55:18	6	1
FIELD	55:18	55:18	7	1
LEAF_NODE	55:18	55:18	8	1
LEAF_NODE	55:19	55:19	4	;
EXPR_STATEMENT	56:1	56:19	3	msg . has_dummy8 = 1 ;
EXPR	56:1	56:1	4	msg . has_dummy8 = 1
ASSIGN	56:1	56:18	5	msg . has_dummy8 = 1
LVAL	56:1	56:1	6	msg . has_dummy8
FIELD	56:1	56:5	7	msg . has_dummy8
LEAF_NODE	56:1	56:1	8	msg
LEAF_NODE	56:4	56:4	8	.
LEAF_NODE	56:5	56:5	8	has_dummy8
ASSIGN_OP	56:16	56:16	6	=
LEAF_NODE	56:16	56:16	7	=
RVAL	56:18	56:18	6	1
FIELD	56:18	56:18	7	1
LEAF_NODE	56:18	56:18	8	1
LEAF_NODE	56:19	56:19	4	;
EXPR_STATEMENT	57:1	57:20	3	msg . has_dummy10 = 1 ;
EXPR	57:1	57:1	4	msg . has_dummy10 = 1
ASSIGN	57:1	57:19	5	msg . has_dummy10 = 1
LVAL	57:1	57:1	6	msg . has_dummy10
FIELD	57:1	57:5	7	msg . has_dummy10
LEAF_NODE	57:1	57:1	8	msg
LEAF_NODE	57:4	57:4	8	.
LEAF_NODE	57:5	57:5	8	has_dummy10
ASSIGN_OP	57:17	57:17	6	=
LEAF_NODE	57:17	57:17	7	=
RVAL	57:19	57:19	6	1
FIELD	57:19	57:19	7	1
LEAF_NODE	57:19	57:19	8	1
LEAF_NODE	57:20	57:20	4	;
SELECTION	58:1	59:2	3	
KEYWORD	58:1	58:1	4	if
LEAF_NODE	58:1	58:1	5	if
LEAF_NODE	58:4	58:4	4	(
CONDITION	58:5	58:5	4	! GG_PROTOBUF_SEND ( gs , ge , GG_LOGIN105 , gg105_login , msg )
EXPR	58:5	58:5	5	! GG_PROTOBUF_SEND ( gs , ge , GG_LOGIN105 , gg105_login , msg )
UNARY_EXPR	58:5	58:6	6	! GG_PROTOBUF_SEND ( gs , ge , GG_LOGIN105 , gg105_login , msg )
UNARY_OPERATOR	58:5	58:5	7	!
LEAF_NODE	58:5	58:5	8	!
FUNCTION_CALL	58:6	58:60	7	GG_PROTOBUF_SEND ( gs , ge , GG_LOGIN105 , gg105_login , msg )
CALLEE	58:6	58:6	8	GG_PROTOBUF_SEND
LEAF_NODE	58:6	58:6	9	GG_PROTOBUF_SEND
LEAF_NODE	58:22	58:22	8	(
ARGUMENT	58:23	58:23	8	gs
FIELD	58:23	58:23	9	gs
LEAF_NODE	58:23	58:23	10	gs
LEAF_NODE	58:25	58:25	8	,
ARGUMENT	58:27	58:27	8	ge
FIELD	58:27	58:27	9	ge
LEAF_NODE	58:27	58:27	10	ge
LEAF_NODE	58:29	58:29	8	,
ARGUMENT	58:31	58:31	8	GG_LOGIN105
FIELD	58:31	58:31	9	GG_LOGIN105
LEAF_NODE	58:31	58:31	10	GG_LOGIN105
LEAF_NODE	58:42	58:42	8	,
ARGUMENT	58:44	58:44	8	gg105_login
FIELD	58:44	58:44	9	gg105_login
LEAF_NODE	58:44	58:44	10	gg105_login
LEAF_NODE	58:55	58:55	8	,
ARGUMENT	58:57	58:57	8	msg
FIELD	58:57	58:57	9	msg
LEAF_NODE	58:57	58:57	10	msg
LEAF_NODE	58:60	58:60	8	)
LEAF_NODE	58:61	58:61	4	)
STATEMENTS	59:2	59:2	4	
JUMP_STATEMENT	59:2	59:11	5	return - 1 ;
KEYWORD	59:2	59:2	6	return
LEAF_NODE	59:2	59:2	7	return
DESTINATION	59:9	59:9	6	- 1
EXPR	59:9	59:9	7	- 1
UNARY_EXPR	59:9	59:10	8	- 1
UNARY_OPERATOR	59:9	59:9	9	-
LEAF_NODE	59:9	59:9	10	-
FIELD	59:10	59:10	9	1
LEAF_NODE	59:10	59:10	10	1
LEAF_NODE	59:11	59:11	6	;
EXPR_STATEMENT	60:1	60:35	3	gs -> state = GG_STATE_READING_REPLY ;
EXPR	60:1	60:1	4	gs -> state = GG_STATE_READING_REPLY
ASSIGN	60:1	60:13	5	gs -> state = GG_STATE_READING_REPLY
LVAL	60:1	60:1	6	gs -> state
FIELD	60:1	60:5	7	gs -> state
LEAF_NODE	60:1	60:1	8	gs
LEAF_NODE	60:3	60:3	8	->
LEAF_NODE	60:5	60:5	8	state
ASSIGN_OP	60:11	60:11	6	=
LEAF_NODE	60:11	60:11	7	=
RVAL	60:13	60:13	6	GG_STATE_READING_REPLY
FIELD	60:13	60:13	7	GG_STATE_READING_REPLY
LEAF_NODE	60:13	60:13	8	GG_STATE_READING_REPLY
LEAF_NODE	60:35	60:35	4	;
EXPR_STATEMENT	61:1	61:26	3	gs -> check = GG_CHECK_READ ;
EXPR	61:1	61:1	4	gs -> check = GG_CHECK_READ
ASSIGN	61:1	61:13	5	gs -> check = GG_CHECK_READ
LVAL	61:1	61:1	6	gs -> check
FIELD	61:1	61:5	7	gs -> check
LEAF_NODE	61:1	61:1	8	gs
LEAF_NODE	61:3	61:3	8	->
LEAF_NODE	61:5	61:5	8	check
ASSIGN_OP	61:11	61:11	6	=
LEAF_NODE	61:11	61:11	7	=
RVAL	61:13	61:13	6	GG_CHECK_READ
FIELD	61:13	61:13	7	GG_CHECK_READ
LEAF_NODE	61:13	61:13	8	GG_CHECK_READ
LEAF_NODE	61:26	61:26	4	;
JUMP_STATEMENT	62:1	62:9	3	return 0 ;
KEYWORD	62:1	62:1	4	return
LEAF_NODE	62:1	62:1	5	return
DESTINATION	62:8	62:8	4	0
EXPR	62:8	62:8	5	0
FIELD	62:8	62:8	6	0
LEAF_NODE	62:8	62:8	7	0
LEAF_NODE	62:9	62:9	4	;
LEAF_NODE	63:0	63:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	deleting_conversation_cb
LEAF_NODE	2:0	2:0	3	deleting_conversation_cb
PARAMETER_LIST	2:24	2:61	2	( PurpleConversation * conv , void * data )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:45	3	PurpleConversation * conv
TYPE	2:25	2:44	4	PurpleConversation *
TYPE_NAME	2:25	2:25	5	PurpleConversation
LEAF_NODE	2:25	2:25	6	PurpleConversation
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	conv
LEAF_NODE	2:45	2:45	5	conv
LEAF_NODE	2:49	2:49	3	,
PARAMETER_DECL	2:51	2:57	3	void * data
TYPE	2:51	2:56	4	void *
TYPE_NAME	2:51	2:51	5	void
LEAF_NODE	2:51	2:51	6	void
POINTER	2:56	2:56	5	*
LEAF_NODE	2:56	2:56	6	*
NAME	2:57	2:57	4	data
LEAF_NODE	2:57	2:57	5	data
LEAF_NODE	2:61	2:61	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	5:40	3	purple_debug_misc ( "signals test" , "deleting-conversation (%s)\n" , purple_conversation_get_name ( conv ) ) ;
EXPR	4:1	4:1	4	purple_debug_misc ( "signals test" , "deleting-conversation (%s)\n" , purple_conversation_get_name ( conv ) )
FUNCTION_CALL	4:1	5:39	5	purple_debug_misc ( "signals test" , "deleting-conversation (%s)\n" , purple_conversation_get_name ( conv ) )
CALLEE	4:1	4:1	6	purple_debug_misc
LEAF_NODE	4:1	4:1	7	purple_debug_misc
LEAF_NODE	4:18	4:18	6	(
ARGUMENT	4:19	4:19	6	"signals test"
FIELD	4:19	4:19	7	"signals test"
LEAF_NODE	4:19	4:19	8	"signals test"
LEAF_NODE	4:33	4:33	6	,
ARGUMENT	4:35	4:35	6	"deleting-conversation (%s)\n"
FIELD	4:35	4:35	7	"deleting-conversation (%s)\n"
LEAF_NODE	4:35	4:35	8	"deleting-conversation (%s)\n"
LEAF_NODE	4:65	4:65	6	,
ARGUMENT	5:5	5:5	6	purple_conversation_get_name ( conv )
FUNCTION_CALL	5:5	5:38	7	purple_conversation_get_name ( conv )
CALLEE	5:5	5:5	8	purple_conversation_get_name
LEAF_NODE	5:5	5:5	9	purple_conversation_get_name
LEAF_NODE	5:33	5:33	8	(
ARGUMENT	5:34	5:34	8	conv
FIELD	5:34	5:34	9	conv
LEAF_NODE	5:34	5:34	10	conv
LEAF_NODE	5:38	5:38	8	)
LEAF_NODE	5:39	5:39	6	)
LEAF_NODE	5:40	5:40	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	42:0	1	
RETURN_TYPE	1:0	1:17	2	static GtkWidget *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	GtkWidget
LEAF_NODE	1:7	1:7	4	GtkWidget
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	pidgin_build_help_dialog
LEAF_NODE	2:0	2:0	3	pidgin_build_help_dialog
PARAMETER_LIST	2:24	2:77	2	( const char * title , const char * role , GString * string )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:37	3	const char * title
TYPE	2:25	2:36	4	const char *
TYPE_NAME	2:25	2:31	5	const char
LEAF_NODE	2:25	2:25	6	const
LEAF_NODE	2:31	2:31	6	char
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	title
LEAF_NODE	2:37	2:37	5	title
LEAF_NODE	2:42	2:42	3	,
PARAMETER_DECL	2:44	2:56	3	const char * role
TYPE	2:44	2:55	4	const char *
TYPE_NAME	2:44	2:50	5	const char
LEAF_NODE	2:44	2:44	6	const
LEAF_NODE	2:50	2:50	6	char
POINTER	2:55	2:55	5	*
LEAF_NODE	2:55	2:55	6	*
NAME	2:56	2:56	4	role
LEAF_NODE	2:56	2:56	5	role
LEAF_NODE	2:60	2:60	3	,
PARAMETER_DECL	2:62	2:71	3	GString * string
TYPE	2:62	2:70	4	GString *
TYPE_NAME	2:62	2:62	5	GString
LEAF_NODE	2:62	2:62	6	GString
POINTER	2:70	2:70	5	*
LEAF_NODE	2:70	2:70	6	*
NAME	2:71	2:71	4	string
LEAF_NODE	2:71	2:71	5	string
LEAF_NODE	2:77	2:77	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	41:1	2	
SIMPLE_DECL	4:1	4:55	3	GtkWidget * win , GtkWidget * vbox , GtkWidget * frame , GtkWidget * logo , GtkWidget * imhtml , GtkWidget * button ;
INIT_DECL_LIST	4:1	4:1	4	GtkWidget * win , GtkWidget * vbox , GtkWidget * frame , GtkWidget * logo , GtkWidget * imhtml , GtkWidget * button
VAR_DECL	4:1	4:12	5	GtkWidget * win
TYPE	4:1	4:11	6	GtkWidget *
TYPE_NAME	4:1	4:1	7	GtkWidget
LEAF_NODE	4:1	4:1	8	GtkWidget
POINTER	4:11	4:11	7	*
LEAF_NODE	4:11	4:11	8	*
NAME	4:12	4:12	6	win
LEAF_NODE	4:12	4:12	7	win
LEAF_NODE	4:15	4:15	5	,
INIT_DECL_LIST	4:1	4:1	5	GtkWidget * vbox , GtkWidget * frame , GtkWidget * logo , GtkWidget * imhtml , GtkWidget * button
VAR_DECL	4:1	4:18	6	GtkWidget * vbox
TYPE	4:1	4:17	7	GtkWidget *
TYPE_NAME	4:1	4:1	8	GtkWidget
LEAF_NODE	4:1	4:1	9	GtkWidget
POINTER	4:17	4:17	8	*
LEAF_NODE	4:17	4:17	9	*
NAME	4:18	4:18	7	vbox
LEAF_NODE	4:18	4:18	8	vbox
LEAF_NODE	4:22	4:22	6	,
INIT_DECL_LIST	4:1	4:1	6	GtkWidget * frame , GtkWidget * logo , GtkWidget * imhtml , GtkWidget * button
VAR_DECL	4:1	4:25	7	GtkWidget * frame
TYPE	4:1	4:24	8	GtkWidget *
TYPE_NAME	4:1	4:1	9	GtkWidget
LEAF_NODE	4:1	4:1	10	GtkWidget
POINTER	4:24	4:24	9	*
LEAF_NODE	4:24	4:24	10	*
NAME	4:25	4:25	8	frame
LEAF_NODE	4:25	4:25	9	frame
LEAF_NODE	4:30	4:30	7	,
INIT_DECL_LIST	4:1	4:1	7	GtkWidget * logo , GtkWidget * imhtml , GtkWidget * button
VAR_DECL	4:1	4:33	8	GtkWidget * logo
TYPE	4:1	4:32	9	GtkWidget *
TYPE_NAME	4:1	4:1	10	GtkWidget
LEAF_NODE	4:1	4:1	11	GtkWidget
POINTER	4:32	4:32	10	*
LEAF_NODE	4:32	4:32	11	*
NAME	4:33	4:33	9	logo
LEAF_NODE	4:33	4:33	10	logo
LEAF_NODE	4:37	4:37	8	,
INIT_DECL_LIST	4:1	4:1	8	GtkWidget * imhtml , GtkWidget * button
VAR_DECL	4:1	4:40	9	GtkWidget * imhtml
TYPE	4:1	4:39	10	GtkWidget *
TYPE_NAME	4:1	4:1	11	GtkWidget
LEAF_NODE	4:1	4:1	12	GtkWidget
POINTER	4:39	4:39	11	*
LEAF_NODE	4:39	4:39	12	*
NAME	4:40	4:40	10	imhtml
LEAF_NODE	4:40	4:40	11	imhtml
LEAF_NODE	4:46	4:46	9	,
VAR_DECL	4:1	4:49	9	GtkWidget * button
TYPE	4:1	4:48	10	GtkWidget *
TYPE_NAME	4:1	4:1	11	GtkWidget
LEAF_NODE	4:1	4:1	12	GtkWidget
POINTER	4:48	4:48	11	*
LEAF_NODE	4:48	4:48	12	*
NAME	4:49	4:49	10	button
LEAF_NODE	4:49	4:49	11	button
LEAF_NODE	4:55	4:55	4	;
SIMPLE_DECL	5:1	5:18	3	GdkPixbuf * pixbuf ;
VAR_DECL	5:1	5:12	4	GdkPixbuf * pixbuf
TYPE	5:1	5:11	5	GdkPixbuf *
TYPE_NAME	5:1	5:1	6	GdkPixbuf
LEAF_NODE	5:1	5:1	7	GdkPixbuf
POINTER	5:11	5:11	6	*
LEAF_NODE	5:11	5:11	7	*
NAME	5:12	5:12	5	pixbuf
LEAF_NODE	5:12	5:12	6	pixbuf
LEAF_NODE	5:18	5:18	4	;
SIMPLE_DECL	6:1	6:17	3	GtkTextIter iter ;
VAR_DECL	6:1	6:13	4	GtkTextIter iter
TYPE	6:1	6:1	5	GtkTextIter
TYPE_NAME	6:1	6:1	6	GtkTextIter
LEAF_NODE	6:1	6:1	7	GtkTextIter
NAME	6:13	6:13	5	iter
LEAF_NODE	6:13	6:13	6	iter
LEAF_NODE	6:17	6:17	4	;
SIMPLE_DECL	7:1	7:15	3	AtkObject * obj ;
VAR_DECL	7:1	7:12	4	AtkObject * obj
TYPE	7:1	7:11	5	AtkObject *
TYPE_NAME	7:1	7:1	6	AtkObject
LEAF_NODE	7:1	7:1	7	AtkObject
POINTER	7:11	7:11	6	*
LEAF_NODE	7:11	7:11	7	*
NAME	7:12	7:12	5	obj
LEAF_NODE	7:12	7:12	6	obj
LEAF_NODE	7:15	7:15	4	;
SIMPLE_DECL	8:1	8:21	3	char * filename , char * tmp ;
INIT_DECL_LIST	8:1	8:1	4	char * filename , char * tmp
VAR_DECL	8:1	8:7	5	char * filename
TYPE	8:1	8:6	6	char *
TYPE_NAME	8:1	8:1	7	char
LEAF_NODE	8:1	8:1	8	char
POINTER	8:6	8:6	7	*
LEAF_NODE	8:6	8:6	8	*
NAME	8:7	8:7	6	filename
LEAF_NODE	8:7	8:7	7	filename
LEAF_NODE	8:15	8:15	5	,
VAR_DECL	8:1	8:18	5	char * tmp
TYPE	8:1	8:17	6	char *
TYPE_NAME	8:1	8:1	7	char
LEAF_NODE	8:1	8:1	8	char
POINTER	8:17	8:17	7	*
LEAF_NODE	8:17	8:17	8	*
NAME	8:18	8:18	6	tmp
LEAF_NODE	8:18	8:18	7	tmp
LEAF_NODE	8:21	8:21	4	;
EXPR_STATEMENT	9:1	9:65	3	win = pidgin_create_dialog ( title , PIDGIN_HIG_BORDER , role , TRUE ) ;
EXPR	9:1	9:1	4	win = pidgin_create_dialog ( title , PIDGIN_HIG_BORDER , role , TRUE )
ASSIGN	9:1	9:7	5	win = pidgin_create_dialog ( title , PIDGIN_HIG_BORDER , role , TRUE )
LVAL	9:1	9:1	6	win
FIELD	9:1	9:1	7	win
LEAF_NODE	9:1	9:1	8	win
ASSIGN_OP	9:5	9:5	6	=
LEAF_NODE	9:5	9:5	7	=
RVAL	9:7	9:7	6	pidgin_create_dialog ( title , PIDGIN_HIG_BORDER , role , TRUE )
FUNCTION_CALL	9:7	9:64	7	pidgin_create_dialog ( title , PIDGIN_HIG_BORDER , role , TRUE )
CALLEE	9:7	9:7	8	pidgin_create_dialog
LEAF_NODE	9:7	9:7	9	pidgin_create_dialog
LEAF_NODE	9:27	9:27	8	(
ARGUMENT	9:28	9:28	8	title
FIELD	9:28	9:28	9	title
LEAF_NODE	9:28	9:28	10	title
LEAF_NODE	9:33	9:33	8	,
ARGUMENT	9:35	9:35	8	PIDGIN_HIG_BORDER
FIELD	9:35	9:35	9	PIDGIN_HIG_BORDER
LEAF_NODE	9:35	9:35	10	PIDGIN_HIG_BORDER
LEAF_NODE	9:52	9:52	8	,
ARGUMENT	9:54	9:54	8	role
FIELD	9:54	9:54	9	role
LEAF_NODE	9:54	9:54	10	role
LEAF_NODE	9:58	9:58	8	,
ARGUMENT	9:60	9:60	8	TRUE
FIELD	9:60	9:60	9	TRUE
LEAF_NODE	9:60	9:60	10	TRUE
LEAF_NODE	9:64	9:64	8	)
LEAF_NODE	9:65	9:65	4	;
EXPR_STATEMENT	10:1	10:89	3	vbox = pidgin_dialog_get_vbox_with_properties ( GTK_DIALOG ( win ) , FALSE , PIDGIN_HIG_BORDER ) ;
EXPR	10:1	10:1	4	vbox = pidgin_dialog_get_vbox_with_properties ( GTK_DIALOG ( win ) , FALSE , PIDGIN_HIG_BORDER )
ASSIGN	10:1	10:8	5	vbox = pidgin_dialog_get_vbox_with_properties ( GTK_DIALOG ( win ) , FALSE , PIDGIN_HIG_BORDER )
LVAL	10:1	10:1	6	vbox
FIELD	10:1	10:1	7	vbox
LEAF_NODE	10:1	10:1	8	vbox
ASSIGN_OP	10:6	10:6	6	=
LEAF_NODE	10:6	10:6	7	=
RVAL	10:8	10:8	6	pidgin_dialog_get_vbox_with_properties ( GTK_DIALOG ( win ) , FALSE , PIDGIN_HIG_BORDER )
FUNCTION_CALL	10:8	10:88	7	pidgin_dialog_get_vbox_with_properties ( GTK_DIALOG ( win ) , FALSE , PIDGIN_HIG_BORDER )
CALLEE	10:8	10:8	8	pidgin_dialog_get_vbox_with_properties
LEAF_NODE	10:8	10:8	9	pidgin_dialog_get_vbox_with_properties
LEAF_NODE	10:46	10:46	8	(
ARGUMENT	10:47	10:47	8	GTK_DIALOG ( win )
FUNCTION_CALL	10:47	10:61	9	GTK_DIALOG ( win )
CALLEE	10:47	10:47	10	GTK_DIALOG
LEAF_NODE	10:47	10:47	11	GTK_DIALOG
LEAF_NODE	10:57	10:57	10	(
ARGUMENT	10:58	10:58	10	win
FIELD	10:58	10:58	11	win
LEAF_NODE	10:58	10:58	12	win
LEAF_NODE	10:61	10:61	10	)
LEAF_NODE	10:62	10:62	8	,
ARGUMENT	10:64	10:64	8	FALSE
FIELD	10:64	10:64	9	FALSE
LEAF_NODE	10:64	10:64	10	FALSE
LEAF_NODE	10:69	10:69	8	,
ARGUMENT	10:71	10:71	8	PIDGIN_HIG_BORDER
FIELD	10:71	10:71	9	PIDGIN_HIG_BORDER
LEAF_NODE	10:71	10:71	10	PIDGIN_HIG_BORDER
LEAF_NODE	10:88	10:88	8	)
LEAF_NODE	10:89	10:89	4	;
EXPR_STATEMENT	11:1	11:55	3	gtk_window_set_default_size ( GTK_WINDOW ( win ) , 450 , 450 ) ;
EXPR	11:1	11:1	4	gtk_window_set_default_size ( GTK_WINDOW ( win ) , 450 , 450 )
FUNCTION_CALL	11:1	11:54	5	gtk_window_set_default_size ( GTK_WINDOW ( win ) , 450 , 450 )
CALLEE	11:1	11:1	6	gtk_window_set_default_size
LEAF_NODE	11:1	11:1	7	gtk_window_set_default_size
LEAF_NODE	11:28	11:28	6	(
ARGUMENT	11:29	11:29	6	GTK_WINDOW ( win )
FUNCTION_CALL	11:29	11:43	7	GTK_WINDOW ( win )
CALLEE	11:29	11:29	8	GTK_WINDOW
LEAF_NODE	11:29	11:29	9	GTK_WINDOW
LEAF_NODE	11:39	11:39	8	(
ARGUMENT	11:40	11:40	8	win
FIELD	11:40	11:40	9	win
LEAF_NODE	11:40	11:40	10	win
LEAF_NODE	11:43	11:43	8	)
LEAF_NODE	11:44	11:44	6	,
ARGUMENT	11:46	11:46	6	450
FIELD	11:46	11:46	7	450
LEAF_NODE	11:46	11:46	8	450
LEAF_NODE	11:49	11:49	6	,
ARGUMENT	11:51	11:51	6	450
FIELD	11:51	11:51	7	450
LEAF_NODE	11:51	11:51	8	450
LEAF_NODE	11:54	11:54	6	)
LEAF_NODE	11:55	11:55	4	;
EXPR_STATEMENT	13:1	13:76	3	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "logo.png" , NULL ) ;
EXPR	13:1	13:1	4	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "logo.png" , NULL )
ASSIGN	13:1	13:12	5	filename = g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "logo.png" , NULL )
LVAL	13:1	13:1	6	filename
FIELD	13:1	13:1	7	filename
LEAF_NODE	13:1	13:1	8	filename
ASSIGN_OP	13:10	13:10	6	=
LEAF_NODE	13:10	13:10	7	=
RVAL	13:12	13:12	6	g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "logo.png" , NULL )
FUNCTION_CALL	13:12	13:75	7	g_build_filename ( DATADIR , "pixmaps" , "pidgin" , "logo.png" , NULL )
CALLEE	13:12	13:12	8	g_build_filename
LEAF_NODE	13:12	13:12	9	g_build_filename
LEAF_NODE	13:28	13:28	8	(
ARGUMENT	13:29	13:29	8	DATADIR
FIELD	13:29	13:29	9	DATADIR
LEAF_NODE	13:29	13:29	10	DATADIR
LEAF_NODE	13:36	13:36	8	,
ARGUMENT	13:38	13:38	8	"pixmaps"
FIELD	13:38	13:38	9	"pixmaps"
LEAF_NODE	13:38	13:38	10	"pixmaps"
LEAF_NODE	13:47	13:47	8	,
ARGUMENT	13:49	13:49	8	"pidgin"
FIELD	13:49	13:49	9	"pidgin"
LEAF_NODE	13:49	13:49	10	"pidgin"
LEAF_NODE	13:57	13:57	8	,
ARGUMENT	13:59	13:59	8	"logo.png"
FIELD	13:59	13:59	9	"logo.png"
LEAF_NODE	13:59	13:59	10	"logo.png"
LEAF_NODE	13:69	13:69	8	,
ARGUMENT	13:71	13:71	8	NULL
FIELD	13:71	13:71	9	NULL
LEAF_NODE	13:71	13:71	10	NULL
LEAF_NODE	13:75	13:75	8	)
LEAF_NODE	13:76	13:76	4	;
EXPR_STATEMENT	14:1	14:47	3	pixbuf = pidgin_pixbuf_new_from_file ( filename ) ;
EXPR	14:1	14:1	4	pixbuf = pidgin_pixbuf_new_from_file ( filename )
ASSIGN	14:1	14:10	5	pixbuf = pidgin_pixbuf_new_from_file ( filename )
LVAL	14:1	14:1	6	pixbuf
FIELD	14:1	14:1	7	pixbuf
LEAF_NODE	14:1	14:1	8	pixbuf
ASSIGN_OP	14:8	14:8	6	=
LEAF_NODE	14:8	14:8	7	=
RVAL	14:10	14:10	6	pidgin_pixbuf_new_from_file ( filename )
FUNCTION_CALL	14:10	14:46	7	pidgin_pixbuf_new_from_file ( filename )
CALLEE	14:10	14:10	8	pidgin_pixbuf_new_from_file
LEAF_NODE	14:10	14:10	9	pidgin_pixbuf_new_from_file
LEAF_NODE	14:37	14:37	8	(
ARGUMENT	14:38	14:38	8	filename
FIELD	14:38	14:38	9	filename
LEAF_NODE	14:38	14:38	10	filename
LEAF_NODE	14:46	14:46	8	)
LEAF_NODE	14:47	14:47	4	;
EXPR_STATEMENT	15:1	15:17	3	g_free ( filename ) ;
EXPR	15:1	15:1	4	g_free ( filename )
FUNCTION_CALL	15:1	15:16	5	g_free ( filename )
CALLEE	15:1	15:1	6	g_free
LEAF_NODE	15:1	15:1	7	g_free
LEAF_NODE	15:7	15:7	6	(
ARGUMENT	15:8	15:8	6	filename
FIELD	15:8	15:8	7	filename
LEAF_NODE	15:8	15:8	8	filename
LEAF_NODE	15:16	15:16	6	)
LEAF_NODE	15:17	15:17	4	;
EXPR_STATEMENT	17:1	17:38	3	pidgin_logo_versionize ( & pixbuf , logo ) ;
EXPR	17:1	17:1	4	pidgin_logo_versionize ( & pixbuf , logo )
FUNCTION_CALL	17:1	17:37	5	pidgin_logo_versionize ( & pixbuf , logo )
CALLEE	17:1	17:1	6	pidgin_logo_versionize
LEAF_NODE	17:1	17:1	7	pidgin_logo_versionize
LEAF_NODE	17:23	17:23	6	(
ARGUMENT	17:24	17:24	6	& pixbuf
UNARY_EXPR	17:24	17:25	7	& pixbuf
UNARY_OPERATOR	17:24	17:24	8	&
LEAF_NODE	17:24	17:24	9	&
FIELD	17:25	17:25	8	pixbuf
LEAF_NODE	17:25	17:25	9	pixbuf
LEAF_NODE	17:31	17:31	6	,
ARGUMENT	17:33	17:33	6	logo
FIELD	17:33	17:33	7	logo
LEAF_NODE	17:33	17:33	8	logo
LEAF_NODE	17:37	17:37	6	)
LEAF_NODE	17:38	17:38	4	;
EXPR_STATEMENT	20:1	20:41	3	logo = gtk_image_new_from_pixbuf ( pixbuf ) ;
EXPR	20:1	20:1	4	logo = gtk_image_new_from_pixbuf ( pixbuf )
ASSIGN	20:1	20:8	5	logo = gtk_image_new_from_pixbuf ( pixbuf )
LVAL	20:1	20:1	6	logo
FIELD	20:1	20:1	7	logo
LEAF_NODE	20:1	20:1	8	logo
ASSIGN_OP	20:6	20:6	6	=
LEAF_NODE	20:6	20:6	7	=
RVAL	20:8	20:8	6	gtk_image_new_from_pixbuf ( pixbuf )
FUNCTION_CALL	20:8	20:40	7	gtk_image_new_from_pixbuf ( pixbuf )
CALLEE	20:8	20:8	8	gtk_image_new_from_pixbuf
LEAF_NODE	20:8	20:8	9	gtk_image_new_from_pixbuf
LEAF_NODE	20:33	20:33	8	(
ARGUMENT	20:34	20:34	8	pixbuf
FIELD	20:34	20:34	9	pixbuf
LEAF_NODE	20:34	20:34	10	pixbuf
LEAF_NODE	20:40	20:40	8	)
LEAF_NODE	20:41	20:41	4	;
SELECTION	21:1	22:2	3	
KEYWORD	21:1	21:1	4	if
LEAF_NODE	21:1	21:1	5	if
LEAF_NODE	21:4	21:4	4	(
CONDITION	21:5	21:5	4	pixbuf
EXPR	21:5	21:5	5	pixbuf
FIELD	21:5	21:5	6	pixbuf
LEAF_NODE	21:5	21:5	7	pixbuf
LEAF_NODE	21:11	21:11	4	)
STATEMENTS	22:2	22:2	4	
EXPR_STATEMENT	22:2	22:34	5	g_object_unref ( G_OBJECT ( pixbuf ) ) ;
EXPR	22:2	22:2	6	g_object_unref ( G_OBJECT ( pixbuf ) )
FUNCTION_CALL	22:2	22:33	7	g_object_unref ( G_OBJECT ( pixbuf ) )
CALLEE	22:2	22:2	8	g_object_unref
LEAF_NODE	22:2	22:2	9	g_object_unref
LEAF_NODE	22:16	22:16	8	(
ARGUMENT	22:17	22:17	8	G_OBJECT ( pixbuf )
FUNCTION_CALL	22:17	22:32	9	G_OBJECT ( pixbuf )
CALLEE	22:17	22:17	10	G_OBJECT
LEAF_NODE	22:17	22:17	11	G_OBJECT
LEAF_NODE	22:25	22:25	10	(
ARGUMENT	22:26	22:26	10	pixbuf
FIELD	22:26	22:26	11	pixbuf
LEAF_NODE	22:26	22:26	12	pixbuf
LEAF_NODE	22:32	22:32	10	)
LEAF_NODE	22:33	22:33	8	)
LEAF_NODE	22:34	22:34	6	;
EXPR_STATEMENT	23:1	23:38	3	obj = gtk_widget_get_accessible ( logo ) ;
EXPR	23:1	23:1	4	obj = gtk_widget_get_accessible ( logo )
ASSIGN	23:1	23:7	5	obj = gtk_widget_get_accessible ( logo )
LVAL	23:1	23:1	6	obj
FIELD	23:1	23:1	7	obj
LEAF_NODE	23:1	23:1	8	obj
ASSIGN_OP	23:5	23:5	6	=
LEAF_NODE	23:5	23:5	7	=
RVAL	23:7	23:7	6	gtk_widget_get_accessible ( logo )
FUNCTION_CALL	23:7	23:37	7	gtk_widget_get_accessible ( logo )
CALLEE	23:7	23:7	8	gtk_widget_get_accessible
LEAF_NODE	23:7	23:7	9	gtk_widget_get_accessible
LEAF_NODE	23:32	23:32	8	(
ARGUMENT	23:33	23:33	8	logo
FIELD	23:33	23:33	9	logo
LEAF_NODE	23:33	23:33	10	logo
LEAF_NODE	23:37	23:37	8	)
LEAF_NODE	23:38	23:38	4	;
LEAF_NODE	24:1	24:1	3	tmp
LEAF_NODE	24:5	24:5	3	=
LEAF_NODE	24:7	24:7	3	g_strconcat
LEAF_NODE	24:18	24:18	3	(
LEAF_NODE	24:19	24:19	3	PIDGIN_NAME
LEAF_NODE	24:30	24:30	3	,
LEAF_NODE	24:32	24:32	3	" "
LEAF_NODE	24:36	24:36	3	DISPLAY_VERSION
LEAF_NODE	24:51	24:51	3	,
LEAF_NODE	24:53	24:53	3	NULL
LEAF_NODE	24:57	24:57	3	)
LEAF_NODE	24:58	24:58	3	;
EXPR_STATEMENT	25:1	25:37	3	atk_object_set_description ( obj , tmp ) ;
EXPR	25:1	25:1	4	atk_object_set_description ( obj , tmp )
FUNCTION_CALL	25:1	25:36	5	atk_object_set_description ( obj , tmp )
CALLEE	25:1	25:1	6	atk_object_set_description
LEAF_NODE	25:1	25:1	7	atk_object_set_description
LEAF_NODE	25:27	25:27	6	(
ARGUMENT	25:28	25:28	6	obj
FIELD	25:28	25:28	7	obj
LEAF_NODE	25:28	25:28	8	obj
LEAF_NODE	25:31	25:31	6	,
ARGUMENT	25:33	25:33	6	tmp
FIELD	25:33	25:33	7	tmp
LEAF_NODE	25:33	25:33	8	tmp
LEAF_NODE	25:36	25:36	6	)
LEAF_NODE	25:37	25:37	4	;
EXPR_STATEMENT	26:1	26:12	3	g_free ( tmp ) ;
EXPR	26:1	26:1	4	g_free ( tmp )
FUNCTION_CALL	26:1	26:11	5	g_free ( tmp )
CALLEE	26:1	26:1	6	g_free
LEAF_NODE	26:1	26:1	7	g_free
LEAF_NODE	26:7	26:7	6	(
ARGUMENT	26:8	26:8	6	tmp
FIELD	26:8	26:8	7	tmp
LEAF_NODE	26:8	26:8	8	tmp
LEAF_NODE	26:11	26:11	6	)
LEAF_NODE	26:12	26:12	4	;
EXPR_STATEMENT	27:1	27:57	3	gtk_box_pack_start ( GTK_BOX ( vbox ) , logo , FALSE , FALSE , 0 ) ;
EXPR	27:1	27:1	4	gtk_box_pack_start ( GTK_BOX ( vbox ) , logo , FALSE , FALSE , 0 )
FUNCTION_CALL	27:1	27:56	5	gtk_box_pack_start ( GTK_BOX ( vbox ) , logo , FALSE , FALSE , 0 )
CALLEE	27:1	27:1	6	gtk_box_pack_start
LEAF_NODE	27:1	27:1	7	gtk_box_pack_start
LEAF_NODE	27:19	27:19	6	(
ARGUMENT	27:20	27:20	6	GTK_BOX ( vbox )
FUNCTION_CALL	27:20	27:32	7	GTK_BOX ( vbox )
CALLEE	27:20	27:20	8	GTK_BOX
LEAF_NODE	27:20	27:20	9	GTK_BOX
LEAF_NODE	27:27	27:27	8	(
ARGUMENT	27:28	27:28	8	vbox
FIELD	27:28	27:28	9	vbox
LEAF_NODE	27:28	27:28	10	vbox
LEAF_NODE	27:32	27:32	8	)
LEAF_NODE	27:33	27:33	6	,
ARGUMENT	27:35	27:35	6	logo
FIELD	27:35	27:35	7	logo
LEAF_NODE	27:35	27:35	8	logo
LEAF_NODE	27:39	27:39	6	,
ARGUMENT	27:41	27:41	6	FALSE
FIELD	27:41	27:41	7	FALSE
LEAF_NODE	27:41	27:41	8	FALSE
LEAF_NODE	27:46	27:46	6	,
ARGUMENT	27:48	27:48	6	FALSE
FIELD	27:48	27:48	7	FALSE
LEAF_NODE	27:48	27:48	8	FALSE
LEAF_NODE	27:53	27:53	6	,
ARGUMENT	27:55	27:55	6	0
FIELD	27:55	27:55	7	0
LEAF_NODE	27:55	27:55	8	0
LEAF_NODE	27:56	27:56	6	)
LEAF_NODE	27:57	27:57	4	;
EXPR_STATEMENT	28:1	28:57	3	frame = pidgin_create_imhtml ( FALSE , & imhtml , NULL , NULL ) ;
EXPR	28:1	28:1	4	frame = pidgin_create_imhtml ( FALSE , & imhtml , NULL , NULL )
ASSIGN	28:1	28:9	5	frame = pidgin_create_imhtml ( FALSE , & imhtml , NULL , NULL )
LVAL	28:1	28:1	6	frame
FIELD	28:1	28:1	7	frame
LEAF_NODE	28:1	28:1	8	frame
ASSIGN_OP	28:7	28:7	6	=
LEAF_NODE	28:7	28:7	7	=
RVAL	28:9	28:9	6	pidgin_create_imhtml ( FALSE , & imhtml , NULL , NULL )
FUNCTION_CALL	28:9	28:56	7	pidgin_create_imhtml ( FALSE , & imhtml , NULL , NULL )
CALLEE	28:9	28:9	8	pidgin_create_imhtml
LEAF_NODE	28:9	28:9	9	pidgin_create_imhtml
LEAF_NODE	28:29	28:29	8	(
ARGUMENT	28:30	28:30	8	FALSE
FIELD	28:30	28:30	9	FALSE
LEAF_NODE	28:30	28:30	10	FALSE
LEAF_NODE	28:35	28:35	8	,
ARGUMENT	28:37	28:37	8	& imhtml
UNARY_EXPR	28:37	28:38	9	& imhtml
UNARY_OPERATOR	28:37	28:37	10	&
LEAF_NODE	28:37	28:37	11	&
FIELD	28:38	28:38	10	imhtml
LEAF_NODE	28:38	28:38	11	imhtml
LEAF_NODE	28:44	28:44	8	,
ARGUMENT	28:46	28:46	8	NULL
FIELD	28:46	28:46	9	NULL
LEAF_NODE	28:46	28:46	10	NULL
LEAF_NODE	28:50	28:50	8	,
ARGUMENT	28:52	28:52	8	NULL
FIELD	28:52	28:52	9	NULL
LEAF_NODE	28:52	28:52	10	NULL
LEAF_NODE	28:56	28:56	8	)
LEAF_NODE	28:57	28:57	4	;
EXPR_STATEMENT	29:1	29:88	3	gtk_imhtml_set_format_functions ( GTK_IMHTML ( imhtml ) , GTK_IMHTML_ALL ^ GTK_IMHTML_SMILEY ) ;
EXPR	29:1	29:1	4	gtk_imhtml_set_format_functions ( GTK_IMHTML ( imhtml ) , GTK_IMHTML_ALL ^ GTK_IMHTML_SMILEY )
FUNCTION_CALL	29:1	29:87	5	gtk_imhtml_set_format_functions ( GTK_IMHTML ( imhtml ) , GTK_IMHTML_ALL ^ GTK_IMHTML_SMILEY )
CALLEE	29:1	29:1	6	gtk_imhtml_set_format_functions
LEAF_NODE	29:1	29:1	7	gtk_imhtml_set_format_functions
LEAF_NODE	29:32	29:32	6	(
ARGUMENT	29:33	29:33	6	GTK_IMHTML ( imhtml )
FUNCTION_CALL	29:33	29:50	7	GTK_IMHTML ( imhtml )
CALLEE	29:33	29:33	8	GTK_IMHTML
LEAF_NODE	29:33	29:33	9	GTK_IMHTML
LEAF_NODE	29:43	29:43	8	(
ARGUMENT	29:44	29:44	8	imhtml
FIELD	29:44	29:44	9	imhtml
LEAF_NODE	29:44	29:44	10	imhtml
LEAF_NODE	29:50	29:50	8	)
LEAF_NODE	29:51	29:51	6	,
ARGUMENT	29:53	29:70	6	GTK_IMHTML_ALL ^ GTK_IMHTML_SMILEY
FIELD	29:53	29:53	7	GTK_IMHTML_ALL
LEAF_NODE	29:53	29:53	8	GTK_IMHTML_ALL
LEAF_NODE	29:68	29:68	7	^
FIELD	29:70	29:70	7	GTK_IMHTML_SMILEY
LEAF_NODE	29:70	29:70	8	GTK_IMHTML_SMILEY
LEAF_NODE	29:87	29:87	6	)
LEAF_NODE	29:88	29:88	4	;
EXPR_STATEMENT	30:1	30:56	3	gtk_box_pack_start ( GTK_BOX ( vbox ) , frame , TRUE , TRUE , 0 ) ;
EXPR	30:1	30:1	4	gtk_box_pack_start ( GTK_BOX ( vbox ) , frame , TRUE , TRUE , 0 )
FUNCTION_CALL	30:1	30:55	5	gtk_box_pack_start ( GTK_BOX ( vbox ) , frame , TRUE , TRUE , 0 )
CALLEE	30:1	30:1	6	gtk_box_pack_start
LEAF_NODE	30:1	30:1	7	gtk_box_pack_start
LEAF_NODE	30:19	30:19	6	(
ARGUMENT	30:20	30:20	6	GTK_BOX ( vbox )
FUNCTION_CALL	30:20	30:32	7	GTK_BOX ( vbox )
CALLEE	30:20	30:20	8	GTK_BOX
LEAF_NODE	30:20	30:20	9	GTK_BOX
LEAF_NODE	30:27	30:27	8	(
ARGUMENT	30:28	30:28	8	vbox
FIELD	30:28	30:28	9	vbox
LEAF_NODE	30:28	30:28	10	vbox
LEAF_NODE	30:32	30:32	8	)
LEAF_NODE	30:33	30:33	6	,
ARGUMENT	30:35	30:35	6	frame
FIELD	30:35	30:35	7	frame
LEAF_NODE	30:35	30:35	8	frame
LEAF_NODE	30:40	30:40	6	,
ARGUMENT	30:42	30:42	6	TRUE
FIELD	30:42	30:42	7	TRUE
LEAF_NODE	30:42	30:42	8	TRUE
LEAF_NODE	30:46	30:46	6	,
ARGUMENT	30:48	30:48	6	TRUE
FIELD	30:48	30:48	7	TRUE
LEAF_NODE	30:48	30:48	8	TRUE
LEAF_NODE	30:52	30:52	6	,
ARGUMENT	30:54	30:54	6	0
FIELD	30:54	30:54	7	0
LEAF_NODE	30:54	30:54	8	0
LEAF_NODE	30:55	30:55	6	)
LEAF_NODE	30:56	30:56	4	;
EXPR_STATEMENT	31:1	31:78	3	gtk_imhtml_append_text ( GTK_IMHTML ( imhtml ) , string -> str , GTK_IMHTML_NO_SCROLL ) ;
EXPR	31:1	31:1	4	gtk_imhtml_append_text ( GTK_IMHTML ( imhtml ) , string -> str , GTK_IMHTML_NO_SCROLL )
FUNCTION_CALL	31:1	31:77	5	gtk_imhtml_append_text ( GTK_IMHTML ( imhtml ) , string -> str , GTK_IMHTML_NO_SCROLL )
CALLEE	31:1	31:1	6	gtk_imhtml_append_text
LEAF_NODE	31:1	31:1	7	gtk_imhtml_append_text
LEAF_NODE	31:23	31:23	6	(
ARGUMENT	31:24	31:24	6	GTK_IMHTML ( imhtml )
FUNCTION_CALL	31:24	31:41	7	GTK_IMHTML ( imhtml )
CALLEE	31:24	31:24	8	GTK_IMHTML
LEAF_NODE	31:24	31:24	9	GTK_IMHTML
LEAF_NODE	31:34	31:34	8	(
ARGUMENT	31:35	31:35	8	imhtml
FIELD	31:35	31:35	9	imhtml
LEAF_NODE	31:35	31:35	10	imhtml
LEAF_NODE	31:41	31:41	8	)
LEAF_NODE	31:42	31:42	6	,
ARGUMENT	31:44	31:44	6	string -> str
FIELD	31:44	31:52	7	string -> str
LEAF_NODE	31:44	31:44	8	string
LEAF_NODE	31:50	31:50	8	->
LEAF_NODE	31:52	31:52	8	str
LEAF_NODE	31:55	31:55	6	,
ARGUMENT	31:57	31:57	6	GTK_IMHTML_NO_SCROLL
FIELD	31:57	31:57	7	GTK_IMHTML_NO_SCROLL
LEAF_NODE	31:57	31:57	8	GTK_IMHTML_NO_SCROLL
LEAF_NODE	31:77	31:77	6	)
LEAF_NODE	31:78	31:78	4	;
EXPR_STATEMENT	32:1	32:87	3	gtk_text_buffer_get_start_iter ( gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( imhtml ) ) , & iter ) ;
EXPR	32:1	32:1	4	gtk_text_buffer_get_start_iter ( gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( imhtml ) ) , & iter )
FUNCTION_CALL	32:1	32:86	5	gtk_text_buffer_get_start_iter ( gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( imhtml ) ) , & iter )
CALLEE	32:1	32:1	6	gtk_text_buffer_get_start_iter
LEAF_NODE	32:1	32:1	7	gtk_text_buffer_get_start_iter
LEAF_NODE	32:31	32:31	6	(
ARGUMENT	32:32	32:32	6	gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( imhtml ) )
FUNCTION_CALL	32:32	32:78	7	gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( imhtml ) )
CALLEE	32:32	32:32	8	gtk_text_view_get_buffer
LEAF_NODE	32:32	32:32	9	gtk_text_view_get_buffer
LEAF_NODE	32:56	32:56	8	(
ARGUMENT	32:57	32:57	8	GTK_TEXT_VIEW ( imhtml )
FUNCTION_CALL	32:57	32:77	9	GTK_TEXT_VIEW ( imhtml )
CALLEE	32:57	32:57	10	GTK_TEXT_VIEW
LEAF_NODE	32:57	32:57	11	GTK_TEXT_VIEW
LEAF_NODE	32:70	32:70	10	(
ARGUMENT	32:71	32:71	10	imhtml
FIELD	32:71	32:71	11	imhtml
LEAF_NODE	32:71	32:71	12	imhtml
LEAF_NODE	32:77	32:77	10	)
LEAF_NODE	32:78	32:78	8	)
LEAF_NODE	32:79	32:79	6	,
ARGUMENT	32:81	32:81	6	& iter
UNARY_EXPR	32:81	32:82	7	& iter
UNARY_OPERATOR	32:81	32:81	8	&
LEAF_NODE	32:81	32:81	9	&
FIELD	32:82	32:82	8	iter
LEAF_NODE	32:82	32:82	9	iter
LEAF_NODE	32:86	32:86	6	)
LEAF_NODE	32:87	32:87	4	;
EXPR_STATEMENT	33:1	33:85	3	gtk_text_buffer_place_cursor ( gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( imhtml ) ) , & iter ) ;
EXPR	33:1	33:1	4	gtk_text_buffer_place_cursor ( gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( imhtml ) ) , & iter )
FUNCTION_CALL	33:1	33:84	5	gtk_text_buffer_place_cursor ( gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( imhtml ) ) , & iter )
CALLEE	33:1	33:1	6	gtk_text_buffer_place_cursor
LEAF_NODE	33:1	33:1	7	gtk_text_buffer_place_cursor
LEAF_NODE	33:29	33:29	6	(
ARGUMENT	33:30	33:30	6	gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( imhtml ) )
FUNCTION_CALL	33:30	33:76	7	gtk_text_view_get_buffer ( GTK_TEXT_VIEW ( imhtml ) )
CALLEE	33:30	33:30	8	gtk_text_view_get_buffer
LEAF_NODE	33:30	33:30	9	gtk_text_view_get_buffer
LEAF_NODE	33:54	33:54	8	(
ARGUMENT	33:55	33:55	8	GTK_TEXT_VIEW ( imhtml )
FUNCTION_CALL	33:55	33:75	9	GTK_TEXT_VIEW ( imhtml )
CALLEE	33:55	33:55	10	GTK_TEXT_VIEW
LEAF_NODE	33:55	33:55	11	GTK_TEXT_VIEW
LEAF_NODE	33:68	33:68	10	(
ARGUMENT	33:69	33:69	10	imhtml
FIELD	33:69	33:69	11	imhtml
LEAF_NODE	33:69	33:69	12	imhtml
LEAF_NODE	33:75	33:75	10	)
LEAF_NODE	33:76	33:76	8	)
LEAF_NODE	33:77	33:77	6	,
ARGUMENT	33:79	33:79	6	& iter
UNARY_EXPR	33:79	33:80	7	& iter
UNARY_OPERATOR	33:79	33:79	8	&
LEAF_NODE	33:79	33:79	9	&
FIELD	33:80	33:80	8	iter
LEAF_NODE	33:80	33:80	9	iter
LEAF_NODE	33:84	33:84	6	)
LEAF_NODE	33:85	33:85	4	;
EXPR_STATEMENT	34:1	35:46	3	button = pidgin_dialog_add_button ( GTK_DIALOG ( win ) , GTK_STOCK_CLOSE , G_CALLBACK ( destroy_win ) , win ) ;
EXPR	34:1	34:1	4	button = pidgin_dialog_add_button ( GTK_DIALOG ( win ) , GTK_STOCK_CLOSE , G_CALLBACK ( destroy_win ) , win )
ASSIGN	34:1	34:10	5	button = pidgin_dialog_add_button ( GTK_DIALOG ( win ) , GTK_STOCK_CLOSE , G_CALLBACK ( destroy_win ) , win )
LVAL	34:1	34:1	6	button
FIELD	34:1	34:1	7	button
LEAF_NODE	34:1	34:1	8	button
ASSIGN_OP	34:8	34:8	6	=
LEAF_NODE	34:8	34:8	7	=
RVAL	34:10	34:10	6	pidgin_dialog_add_button ( GTK_DIALOG ( win ) , GTK_STOCK_CLOSE , G_CALLBACK ( destroy_win ) , win )
FUNCTION_CALL	34:10	35:45	7	pidgin_dialog_add_button ( GTK_DIALOG ( win ) , GTK_STOCK_CLOSE , G_CALLBACK ( destroy_win ) , win )
CALLEE	34:10	34:10	8	pidgin_dialog_add_button
LEAF_NODE	34:10	34:10	9	pidgin_dialog_add_button
LEAF_NODE	34:34	34:34	8	(
ARGUMENT	34:35	34:35	8	GTK_DIALOG ( win )
FUNCTION_CALL	34:35	34:49	9	GTK_DIALOG ( win )
CALLEE	34:35	34:35	10	GTK_DIALOG
LEAF_NODE	34:35	34:35	11	GTK_DIALOG
LEAF_NODE	34:45	34:45	10	(
ARGUMENT	34:46	34:46	10	win
FIELD	34:46	34:46	11	win
LEAF_NODE	34:46	34:46	12	win
LEAF_NODE	34:49	34:49	10	)
LEAF_NODE	34:50	34:50	8	,
ARGUMENT	34:52	34:52	8	GTK_STOCK_CLOSE
FIELD	34:52	34:52	9	GTK_STOCK_CLOSE
LEAF_NODE	34:52	34:52	10	GTK_STOCK_CLOSE
LEAF_NODE	34:67	34:67	8	,
ARGUMENT	35:17	35:17	8	G_CALLBACK ( destroy_win )
FUNCTION_CALL	35:17	35:39	9	G_CALLBACK ( destroy_win )
CALLEE	35:17	35:17	10	G_CALLBACK
LEAF_NODE	35:17	35:17	11	G_CALLBACK
LEAF_NODE	35:27	35:27	10	(
ARGUMENT	35:28	35:28	10	destroy_win
FIELD	35:28	35:28	11	destroy_win
LEAF_NODE	35:28	35:28	12	destroy_win
LEAF_NODE	35:39	35:39	10	)
LEAF_NODE	35:40	35:40	8	,
ARGUMENT	35:42	35:42	8	win
FIELD	35:42	35:42	9	win
LEAF_NODE	35:42	35:42	10	win
LEAF_NODE	35:45	35:45	8	)
LEAF_NODE	35:46	35:46	4	;
EXPR_STATEMENT	36:1	36:46	3	GTK_WIDGET_SET_FLAGS ( button , GTK_CAN_DEFAULT ) ;
EXPR	36:1	36:1	4	GTK_WIDGET_SET_FLAGS ( button , GTK_CAN_DEFAULT )
FUNCTION_CALL	36:1	36:45	5	GTK_WIDGET_SET_FLAGS ( button , GTK_CAN_DEFAULT )
CALLEE	36:1	36:1	6	GTK_WIDGET_SET_FLAGS
LEAF_NODE	36:1	36:1	7	GTK_WIDGET_SET_FLAGS
LEAF_NODE	36:21	36:21	6	(
ARGUMENT	36:22	36:22	6	button
FIELD	36:22	36:22	7	button
LEAF_NODE	36:22	36:22	8	button
LEAF_NODE	36:28	36:28	6	,
ARGUMENT	36:30	36:30	6	GTK_CAN_DEFAULT
FIELD	36:30	36:30	7	GTK_CAN_DEFAULT
LEAF_NODE	36:30	36:30	8	GTK_CAN_DEFAULT
LEAF_NODE	36:45	36:45	6	)
LEAF_NODE	36:46	36:46	4	;
EXPR_STATEMENT	37:1	37:32	3	gtk_widget_grab_default ( button ) ;
EXPR	37:1	37:1	4	gtk_widget_grab_default ( button )
FUNCTION_CALL	37:1	37:31	5	gtk_widget_grab_default ( button )
CALLEE	37:1	37:1	6	gtk_widget_grab_default
LEAF_NODE	37:1	37:1	7	gtk_widget_grab_default
LEAF_NODE	37:24	37:24	6	(
ARGUMENT	37:25	37:25	6	button
FIELD	37:25	37:25	7	button
LEAF_NODE	37:25	37:25	8	button
LEAF_NODE	37:31	37:31	6	)
LEAF_NODE	37:32	37:32	4	;
EXPR_STATEMENT	38:1	38:25	3	gtk_widget_show_all ( win ) ;
EXPR	38:1	38:1	4	gtk_widget_show_all ( win )
FUNCTION_CALL	38:1	38:24	5	gtk_widget_show_all ( win )
CALLEE	38:1	38:1	6	gtk_widget_show_all
LEAF_NODE	38:1	38:1	7	gtk_widget_show_all
LEAF_NODE	38:20	38:20	6	(
ARGUMENT	38:21	38:21	6	win
FIELD	38:21	38:21	7	win
LEAF_NODE	38:21	38:21	8	win
LEAF_NODE	38:24	38:24	6	)
LEAF_NODE	38:25	38:25	4	;
EXPR_STATEMENT	39:1	39:36	3	gtk_window_present ( GTK_WINDOW ( win ) ) ;
EXPR	39:1	39:1	4	gtk_window_present ( GTK_WINDOW ( win ) )
FUNCTION_CALL	39:1	39:35	5	gtk_window_present ( GTK_WINDOW ( win ) )
CALLEE	39:1	39:1	6	gtk_window_present
LEAF_NODE	39:1	39:1	7	gtk_window_present
LEAF_NODE	39:19	39:19	6	(
ARGUMENT	39:20	39:20	6	GTK_WINDOW ( win )
FUNCTION_CALL	39:20	39:34	7	GTK_WINDOW ( win )
CALLEE	39:20	39:20	8	GTK_WINDOW
LEAF_NODE	39:20	39:20	9	GTK_WINDOW
LEAF_NODE	39:30	39:30	8	(
ARGUMENT	39:31	39:31	8	win
FIELD	39:31	39:31	9	win
LEAF_NODE	39:31	39:31	10	win
LEAF_NODE	39:34	39:34	8	)
LEAF_NODE	39:35	39:35	6	)
LEAF_NODE	39:36	39:36	4	;
EXPR_STATEMENT	40:1	40:28	3	g_string_free ( string , TRUE ) ;
EXPR	40:1	40:1	4	g_string_free ( string , TRUE )
FUNCTION_CALL	40:1	40:27	5	g_string_free ( string , TRUE )
CALLEE	40:1	40:1	6	g_string_free
LEAF_NODE	40:1	40:1	7	g_string_free
LEAF_NODE	40:14	40:14	6	(
ARGUMENT	40:15	40:15	6	string
FIELD	40:15	40:15	7	string
LEAF_NODE	40:15	40:15	8	string
LEAF_NODE	40:21	40:21	6	,
ARGUMENT	40:23	40:23	6	TRUE
FIELD	40:23	40:23	7	TRUE
LEAF_NODE	40:23	40:23	8	TRUE
LEAF_NODE	40:27	40:27	6	)
LEAF_NODE	40:28	40:28	4	;
JUMP_STATEMENT	41:1	41:11	3	return win ;
KEYWORD	41:1	41:1	4	return
LEAF_NODE	41:1	41:1	5	return
DESTINATION	41:8	41:8	4	win
EXPR	41:8	41:8	5	win
FIELD	41:8	41:8	6	win
LEAF_NODE	41:8	41:8	7	win
LEAF_NODE	41:11	41:11	4	;
LEAF_NODE	42:0	42:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	7:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	on_entry_changed
LEAF_NODE	2:12	2:12	3	on_entry_changed
PARAMETER_LIST	2:28	2:65	2	( GtkEditable * editable , gpointer data )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:42	3	GtkEditable * editable
TYPE	2:29	2:41	4	GtkEditable *
TYPE_NAME	2:29	2:29	5	GtkEditable
LEAF_NODE	2:29	2:29	6	GtkEditable
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	editable
LEAF_NODE	2:42	2:42	5	editable
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:61	3	gpointer data
TYPE	2:52	2:52	4	gpointer
TYPE_NAME	2:52	2:52	5	gpointer
LEAF_NODE	2:52	2:52	6	gpointer
NAME	2:61	2:61	4	data
LEAF_NODE	2:61	2:61	5	data
LEAF_NODE	2:65	2:65	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	6:55	3	gtk_widget_set_sensitive ( ( GtkWidget * ) data , non_empty ( gtk_entry_get_text ( GTK_ENTRY ( bad_entry ) ) ) && non_empty ( gtk_entry_get_text ( GTK_ENTRY ( good_entry ) ) ) ) ;
EXPR	4:1	4:1	4	gtk_widget_set_sensitive ( ( GtkWidget * ) data , non_empty ( gtk_entry_get_text ( GTK_ENTRY ( bad_entry ) ) ) && non_empty ( gtk_entry_get_text ( GTK_ENTRY ( good_entry ) ) ) )
FUNCTION_CALL	4:1	6:54	5	gtk_widget_set_sensitive ( ( GtkWidget * ) data , non_empty ( gtk_entry_get_text ( GTK_ENTRY ( bad_entry ) ) ) && non_empty ( gtk_entry_get_text ( GTK_ENTRY ( good_entry ) ) ) )
CALLEE	4:1	4:1	6	gtk_widget_set_sensitive
LEAF_NODE	4:1	4:1	7	gtk_widget_set_sensitive
LEAF_NODE	4:25	4:25	6	(
ARGUMENT	4:26	4:38	6	( GtkWidget * ) data
LEAF_NODE	4:26	4:26	7	(
TYPE_NAME	4:27	4:27	7	GtkWidget
LEAF_NODE	4:27	4:27	8	GtkWidget
LEAF_NODE	4:36	4:36	7	*
LEAF_NODE	4:37	4:37	7	)
FIELD	4:38	4:38	7	data
LEAF_NODE	4:38	4:38	8	data
LEAF_NODE	4:42	4:42	6	,
ARGUMENT	5:2	5:2	6	non_empty ( gtk_entry_get_text ( GTK_ENTRY ( bad_entry ) ) ) && non_empty ( gtk_entry_get_text ( GTK_ENTRY ( good_entry ) ) )
AND	5:2	6:2	7	non_empty ( gtk_entry_get_text ( GTK_ENTRY ( bad_entry ) ) ) && non_empty ( gtk_entry_get_text ( GTK_ENTRY ( good_entry ) ) )
EXPR	5:2	5:2	8	non_empty ( gtk_entry_get_text ( GTK_ENTRY ( bad_entry ) ) )
FUNCTION_CALL	5:2	5:52	9	non_empty ( gtk_entry_get_text ( GTK_ENTRY ( bad_entry ) ) )
CALLEE	5:2	5:2	10	non_empty
LEAF_NODE	5:2	5:2	11	non_empty
LEAF_NODE	5:11	5:11	10	(
ARGUMENT	5:12	5:12	10	gtk_entry_get_text ( GTK_ENTRY ( bad_entry ) )
FUNCTION_CALL	5:12	5:51	11	gtk_entry_get_text ( GTK_ENTRY ( bad_entry ) )
CALLEE	5:12	5:12	12	gtk_entry_get_text
LEAF_NODE	5:12	5:12	13	gtk_entry_get_text
LEAF_NODE	5:30	5:30	12	(
ARGUMENT	5:31	5:31	12	GTK_ENTRY ( bad_entry )
FUNCTION_CALL	5:31	5:50	13	GTK_ENTRY ( bad_entry )
CALLEE	5:31	5:31	14	GTK_ENTRY
LEAF_NODE	5:31	5:31	15	GTK_ENTRY
LEAF_NODE	5:40	5:40	14	(
ARGUMENT	5:41	5:41	14	bad_entry
FIELD	5:41	5:41	15	bad_entry
LEAF_NODE	5:41	5:41	16	bad_entry
LEAF_NODE	5:50	5:50	14	)
LEAF_NODE	5:51	5:51	12	)
LEAF_NODE	5:52	5:52	10	)
LEAF_NODE	5:54	5:54	8	&&
EXPR	6:2	6:2	8	non_empty ( gtk_entry_get_text ( GTK_ENTRY ( good_entry ) ) )
FUNCTION_CALL	6:2	6:53	9	non_empty ( gtk_entry_get_text ( GTK_ENTRY ( good_entry ) ) )
CALLEE	6:2	6:2	10	non_empty
LEAF_NODE	6:2	6:2	11	non_empty
LEAF_NODE	6:11	6:11	10	(
ARGUMENT	6:12	6:12	10	gtk_entry_get_text ( GTK_ENTRY ( good_entry ) )
FUNCTION_CALL	6:12	6:52	11	gtk_entry_get_text ( GTK_ENTRY ( good_entry ) )
CALLEE	6:12	6:12	12	gtk_entry_get_text
LEAF_NODE	6:12	6:12	13	gtk_entry_get_text
LEAF_NODE	6:30	6:30	12	(
ARGUMENT	6:31	6:31	12	GTK_ENTRY ( good_entry )
FUNCTION_CALL	6:31	6:51	13	GTK_ENTRY ( good_entry )
CALLEE	6:31	6:31	14	GTK_ENTRY
LEAF_NODE	6:31	6:31	15	GTK_ENTRY
LEAF_NODE	6:40	6:40	14	(
ARGUMENT	6:41	6:41	14	good_entry
FIELD	6:41	6:41	15	good_entry
LEAF_NODE	6:41	6:41	16	good_entry
LEAF_NODE	6:51	6:51	14	)
LEAF_NODE	6:52	6:52	12	)
LEAF_NODE	6:53	6:53	10	)
LEAF_NODE	6:54	6:54	6	)
LEAF_NODE	6:55	6:55	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	6:0	1	
RETURN_TYPE	2:0	2:14	2	struct gg_dcc *
TYPE_NAME	2:0	2:7	3	struct gg_dcc
LEAF_NODE	2:0	2:0	4	struct
LEAF_NODE	2:7	2:7	4	gg_dcc
LEAF_NODE	2:14	2:14	3	*
FUNCTION_NAME	2:15	2:15	2	gg_dcc_send_file
LEAF_NODE	2:15	2:15	3	gg_dcc_send_file
PARAMETER_LIST	2:31	2:88	2	( uint32_t ip , uint16_t port , uin_t my_uin , uin_t peer_uin )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:41	3	uint32_t ip
TYPE	2:32	2:32	4	uint32_t
TYPE_NAME	2:32	2:32	5	uint32_t
LEAF_NODE	2:32	2:32	6	uint32_t
NAME	2:41	2:41	4	ip
LEAF_NODE	2:41	2:41	5	ip
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:54	3	uint16_t port
TYPE	2:45	2:45	4	uint16_t
TYPE_NAME	2:45	2:45	5	uint16_t
LEAF_NODE	2:45	2:45	6	uint16_t
NAME	2:54	2:54	4	port
LEAF_NODE	2:54	2:54	5	port
LEAF_NODE	2:58	2:58	3	,
PARAMETER_DECL	2:60	2:66	3	uin_t my_uin
TYPE	2:60	2:60	4	uin_t
TYPE_NAME	2:60	2:60	5	uin_t
LEAF_NODE	2:60	2:60	6	uin_t
NAME	2:66	2:66	4	my_uin
LEAF_NODE	2:66	2:66	5	my_uin
LEAF_NODE	2:72	2:72	3	,
PARAMETER_DECL	2:74	2:80	3	uin_t peer_uin
TYPE	2:74	2:74	4	uin_t
TYPE_NAME	2:74	2:74	5	uin_t
LEAF_NODE	2:74	2:74	6	uin_t
NAME	2:80	2:80	4	peer_uin
LEAF_NODE	2:80	2:80	5	peer_uin
LEAF_NODE	2:88	2:88	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:85	3	gg_debug ( GG_DEBUG_MISC , "// gg_dcc_send_file() handing over to gg_dcc_transfer()\n" ) ;
EXPR	4:1	4:1	4	gg_debug ( GG_DEBUG_MISC , "// gg_dcc_send_file() handing over to gg_dcc_transfer()\n" )
FUNCTION_CALL	4:1	4:84	5	gg_debug ( GG_DEBUG_MISC , "// gg_dcc_send_file() handing over to gg_dcc_transfer()\n" )
CALLEE	4:1	4:1	6	gg_debug
LEAF_NODE	4:1	4:1	7	gg_debug
LEAF_NODE	4:9	4:9	6	(
ARGUMENT	4:10	4:10	6	GG_DEBUG_MISC
FIELD	4:10	4:10	7	GG_DEBUG_MISC
LEAF_NODE	4:10	4:10	8	GG_DEBUG_MISC
LEAF_NODE	4:23	4:23	6	,
ARGUMENT	4:25	4:25	6	"// gg_dcc_send_file() handing over to gg_dcc_transfer()\n"
FIELD	4:25	4:25	7	"// gg_dcc_send_file() handing over to gg_dcc_transfer()\n"
LEAF_NODE	4:25	4:25	8	"// gg_dcc_send_file() handing over to gg_dcc_transfer()\n"
LEAF_NODE	4:84	4:84	6	)
LEAF_NODE	4:85	4:85	4	;
JUMP_STATEMENT	5:1	5:72	3	return gg_dcc_transfer ( ip , port , my_uin , peer_uin , GG_SESSION_DCC_SEND ) ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	gg_dcc_transfer ( ip , port , my_uin , peer_uin , GG_SESSION_DCC_SEND )
EXPR	5:8	5:8	5	gg_dcc_transfer ( ip , port , my_uin , peer_uin , GG_SESSION_DCC_SEND )
FUNCTION_CALL	5:8	5:71	6	gg_dcc_transfer ( ip , port , my_uin , peer_uin , GG_SESSION_DCC_SEND )
CALLEE	5:8	5:8	7	gg_dcc_transfer
LEAF_NODE	5:8	5:8	8	gg_dcc_transfer
LEAF_NODE	5:23	5:23	7	(
ARGUMENT	5:24	5:24	7	ip
FIELD	5:24	5:24	8	ip
LEAF_NODE	5:24	5:24	9	ip
LEAF_NODE	5:26	5:26	7	,
ARGUMENT	5:28	5:28	7	port
FIELD	5:28	5:28	8	port
LEAF_NODE	5:28	5:28	9	port
LEAF_NODE	5:32	5:32	7	,
ARGUMENT	5:34	5:34	7	my_uin
FIELD	5:34	5:34	8	my_uin
LEAF_NODE	5:34	5:34	9	my_uin
LEAF_NODE	5:40	5:40	7	,
ARGUMENT	5:42	5:42	7	peer_uin
FIELD	5:42	5:42	8	peer_uin
LEAF_NODE	5:42	5:42	9	peer_uin
LEAF_NODE	5:50	5:50	7	,
ARGUMENT	5:52	5:52	7	GG_SESSION_DCC_SEND
FIELD	5:52	5:52	8	GG_SESSION_DCC_SEND
LEAF_NODE	5:52	5:52	9	GG_SESSION_DCC_SEND
LEAF_NODE	5:71	5:71	7	)
LEAF_NODE	5:72	5:72	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	_gstroke_init
LEAF_NODE	2:0	2:0	3	_gstroke_init
PARAMETER_LIST	2:14	2:46	2	( struct gstroke_metrics * metrics )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:39	3	struct gstroke_metrics * metrics
TYPE	2:15	2:38	4	struct gstroke_metrics *
TYPE_NAME	2:15	2:22	5	struct gstroke_metrics
LEAF_NODE	2:15	2:15	6	struct
LEAF_NODE	2:22	2:22	6	gstroke_metrics
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	metrics
LEAF_NODE	2:39	2:39	5	metrics
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:2	4:2	2	
SELECTION	4:2	4:34	3	
KEYWORD	4:2	4:2	4	if
LEAF_NODE	4:2	4:2	5	if
LEAF_NODE	4:5	4:5	4	(
CONDITION	4:6	4:6	4	metrics -> pointList != NULL
EXPR	4:6	4:28	5	metrics -> pointList != NULL
FIELD	4:6	4:15	6	metrics -> pointList
LEAF_NODE	4:6	4:6	7	metrics
LEAF_NODE	4:13	4:13	7	->
LEAF_NODE	4:15	4:15	7	pointList
EQ_OPERATOR	4:25	4:25	6	!=
LEAF_NODE	4:25	4:25	7	!=
FIELD	4:28	4:28	6	NULL
LEAF_NODE	4:28	4:28	7	NULL
LEAF_NODE	4:32	4:32	4	)
STATEMENTS	4:34	9:2	4	
LEAF_NODE	4:34	4:34	5	{
STATEMENTS	6:4	8:4	5	
EXPR_STATEMENT	6:4	6:37	6	g_slist_free ( metrics -> pointList ) ;
EXPR	6:4	6:4	7	g_slist_free ( metrics -> pointList )
FUNCTION_CALL	6:4	6:36	8	g_slist_free ( metrics -> pointList )
CALLEE	6:4	6:4	9	g_slist_free
LEAF_NODE	6:4	6:4	10	g_slist_free
LEAF_NODE	6:17	6:17	9	(
ARGUMENT	6:18	6:18	9	metrics -> pointList
FIELD	6:18	6:27	10	metrics -> pointList
LEAF_NODE	6:18	6:18	11	metrics
LEAF_NODE	6:25	6:25	11	->
LEAF_NODE	6:27	6:27	11	pointList
LEAF_NODE	6:36	6:36	9	)
LEAF_NODE	6:37	6:37	7	;
EXPR_STATEMENT	7:4	7:29	6	metrics -> pointList = NULL ;
EXPR	7:4	7:4	7	metrics -> pointList = NULL
ASSIGN	7:4	7:25	8	metrics -> pointList = NULL
LVAL	7:4	7:4	9	metrics -> pointList
FIELD	7:4	7:13	10	metrics -> pointList
LEAF_NODE	7:4	7:4	11	metrics
LEAF_NODE	7:11	7:11	11	->
LEAF_NODE	7:13	7:13	11	pointList
ASSIGN_OP	7:23	7:23	9	=
LEAF_NODE	7:23	7:23	10	=
RVAL	7:25	7:25	9	NULL
FIELD	7:25	7:25	10	NULL
LEAF_NODE	7:25	7:25	11	NULL
LEAF_NODE	7:29	7:29	7	;
EXPR_STATEMENT	8:4	8:28	6	metrics -> point_count = 0 ;
EXPR	8:4	8:4	7	metrics -> point_count = 0
ASSIGN	8:4	8:27	8	metrics -> point_count = 0
LVAL	8:4	8:4	9	metrics -> point_count
FIELD	8:4	8:13	10	metrics -> point_count
LEAF_NODE	8:4	8:4	11	metrics
LEAF_NODE	8:11	8:11	11	->
LEAF_NODE	8:13	8:13	11	point_count
ASSIGN_OP	8:25	8:25	9	=
LEAF_NODE	8:25	8:25	10	=
RVAL	8:27	8:27	9	0
FIELD	8:27	8:27	10	0
LEAF_NODE	8:27	8:27	11	0
LEAF_NODE	8:28	8:28	7	;
LEAF_NODE	9:2	9:2	5	}
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	34:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	pidgin_notify_pounce_add
LEAF_NODE	2:0	2:0	3	pidgin_notify_pounce_add
PARAMETER_LIST	2:24	3:77	2	( PurpleAccount * account , PurplePounce * pounce , const char * alias , const char * event , const char * message , const char * date )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:40	3	PurpleAccount * account
TYPE	2:25	2:39	4	PurpleAccount *
TYPE_NAME	2:25	2:25	5	PurpleAccount
LEAF_NODE	2:25	2:25	6	PurpleAccount
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	account
LEAF_NODE	2:40	2:40	5	account
LEAF_NODE	2:47	2:47	3	,
PARAMETER_DECL	2:49	2:63	3	PurplePounce * pounce
TYPE	2:49	2:62	4	PurplePounce *
TYPE_NAME	2:49	2:49	5	PurplePounce
LEAF_NODE	2:49	2:49	6	PurplePounce
POINTER	2:62	2:62	5	*
LEAF_NODE	2:62	2:62	6	*
NAME	2:63	2:63	4	pounce
LEAF_NODE	2:63	2:63	5	pounce
LEAF_NODE	2:69	2:69	3	,
PARAMETER_DECL	3:2	3:14	3	const char * alias
TYPE	3:2	3:13	4	const char *
TYPE_NAME	3:2	3:8	5	const char
LEAF_NODE	3:2	3:2	6	const
LEAF_NODE	3:8	3:8	6	char
POINTER	3:13	3:13	5	*
LEAF_NODE	3:13	3:13	6	*
NAME	3:14	3:14	4	alias
LEAF_NODE	3:14	3:14	5	alias
LEAF_NODE	3:19	3:19	3	,
PARAMETER_DECL	3:21	3:33	3	const char * event
TYPE	3:21	3:32	4	const char *
TYPE_NAME	3:21	3:27	5	const char
LEAF_NODE	3:21	3:21	6	const
LEAF_NODE	3:27	3:27	6	char
POINTER	3:32	3:32	5	*
LEAF_NODE	3:32	3:32	6	*
NAME	3:33	3:33	4	event
LEAF_NODE	3:33	3:33	5	event
LEAF_NODE	3:38	3:38	3	,
PARAMETER_DECL	3:40	3:52	3	const char * message
TYPE	3:40	3:51	4	const char *
TYPE_NAME	3:40	3:46	5	const char
LEAF_NODE	3:40	3:40	6	const
LEAF_NODE	3:46	3:46	6	char
POINTER	3:51	3:51	5	*
LEAF_NODE	3:51	3:51	6	*
NAME	3:52	3:52	4	message
LEAF_NODE	3:52	3:52	5	message
LEAF_NODE	3:59	3:59	3	,
PARAMETER_DECL	3:61	3:73	3	const char * date
TYPE	3:61	3:72	4	const char *
TYPE_NAME	3:61	3:67	5	const char
LEAF_NODE	3:61	3:61	6	const
LEAF_NODE	3:67	3:67	6	char
POINTER	3:72	3:72	5	*
LEAF_NODE	3:72	3:72	6	*
NAME	3:73	3:73	4	date
LEAF_NODE	3:73	3:73	5	date
LEAF_NODE	3:77	3:77	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	33:1	2	
SIMPLE_DECL	5:1	5:16	3	GdkPixbuf * icon ;
VAR_DECL	5:1	5:12	4	GdkPixbuf * icon
TYPE	5:1	5:11	5	GdkPixbuf *
TYPE_NAME	5:1	5:1	6	GdkPixbuf
LEAF_NODE	5:1	5:1	7	GdkPixbuf
POINTER	5:11	5:11	6	*
LEAF_NODE	5:11	5:11	7	*
NAME	5:12	5:12	5	icon
LEAF_NODE	5:12	5:12	6	icon
LEAF_NODE	5:16	5:16	4	;
SIMPLE_DECL	6:1	6:17	3	GtkTreeIter iter ;
VAR_DECL	6:1	6:13	4	GtkTreeIter iter
TYPE	6:1	6:1	5	GtkTreeIter
TYPE_NAME	6:1	6:1	6	GtkTreeIter
LEAF_NODE	6:1	6:1	7	GtkTreeIter
NAME	6:13	6:13	5	iter
LEAF_NODE	6:13	6:13	6	iter
LEAF_NODE	6:17	6:17	4	;
SIMPLE_DECL	7:1	7:36	3	PidginNotifyPounceData * pounce_data ;
VAR_DECL	7:1	7:25	4	PidginNotifyPounceData * pounce_data
TYPE	7:1	7:24	5	PidginNotifyPounceData *
TYPE_NAME	7:1	7:1	6	PidginNotifyPounceData
LEAF_NODE	7:1	7:1	7	PidginNotifyPounceData
POINTER	7:24	7:24	6	*
LEAF_NODE	7:24	7:24	7	*
NAME	7:25	7:25	5	pounce_data
LEAF_NODE	7:25	7:25	6	pounce_data
LEAF_NODE	7:36	7:36	4	;
SIMPLE_DECL	8:1	8:41	3	gboolean first ; first = ( pounce_dialog == NULL ) ;
VAR_DECL	8:1	8:10	4	gboolean first ; first = ( pounce_dialog == NULL )
TYPE	8:1	8:1	5	gboolean
TYPE_NAME	8:1	8:1	6	gboolean
LEAF_NODE	8:1	8:1	7	gboolean
NAME	8:10	8:10	5	first
LEAF_NODE	8:10	8:10	6	first
LEAF_NODE	0:0	0:0	5	;
INIT	8:10	8:10	5	first = ( pounce_dialog == NULL )
ASSIGN	8:10	8:18	6	first = ( pounce_dialog == NULL )
LVAL	8:10	8:10	7	first
NAME	8:10	8:10	8	first
LEAF_NODE	8:10	8:10	9	first
ASSIGN_OP	8:16	8:16	7	=
LEAF_NODE	8:16	8:16	8	=
RVAL	8:18	8:40	7	( pounce_dialog == NULL )
LEAF_NODE	8:18	8:18	8	(
FIELD	8:19	8:19	8	pounce_dialog
LEAF_NODE	8:19	8:19	9	pounce_dialog
EQ_OPERATOR	8:33	8:33	8	==
LEAF_NODE	8:33	8:33	9	==
FIELD	8:36	8:36	8	NULL
LEAF_NODE	8:36	8:36	9	NULL
LEAF_NODE	8:40	8:40	8	)
LEAF_NODE	8:41	8:41	4	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	pounce_dialog == NULL
EXPR	9:5	9:22	5	pounce_dialog == NULL
FIELD	9:5	9:5	6	pounce_dialog
LEAF_NODE	9:5	9:5	7	pounce_dialog
EQ_OPERATOR	9:19	9:19	6	==
LEAF_NODE	9:19	9:19	7	==
FIELD	9:22	9:22	6	NULL
LEAF_NODE	9:22	9:22	7	NULL
LEAF_NODE	9:26	9:26	4	)
STATEMENTS	10:2	10:2	4	
EXPR_STATEMENT	10:2	10:73	5	pounce_dialog = pidgin_create_notification_dialog ( PIDGIN_NOTIFY_POUNCE ) ;
EXPR	10:2	10:2	6	pounce_dialog = pidgin_create_notification_dialog ( PIDGIN_NOTIFY_POUNCE )
ASSIGN	10:2	10:18	7	pounce_dialog = pidgin_create_notification_dialog ( PIDGIN_NOTIFY_POUNCE )
LVAL	10:2	10:2	8	pounce_dialog
FIELD	10:2	10:2	9	pounce_dialog
LEAF_NODE	10:2	10:2	10	pounce_dialog
ASSIGN_OP	10:16	10:16	8	=
LEAF_NODE	10:16	10:16	9	=
RVAL	10:18	10:18	8	pidgin_create_notification_dialog ( PIDGIN_NOTIFY_POUNCE )
FUNCTION_CALL	10:18	10:72	9	pidgin_create_notification_dialog ( PIDGIN_NOTIFY_POUNCE )
CALLEE	10:18	10:18	10	pidgin_create_notification_dialog
LEAF_NODE	10:18	10:18	11	pidgin_create_notification_dialog
LEAF_NODE	10:51	10:51	10	(
ARGUMENT	10:52	10:52	10	PIDGIN_NOTIFY_POUNCE
FIELD	10:52	10:52	11	PIDGIN_NOTIFY_POUNCE
LEAF_NODE	10:52	10:52	12	PIDGIN_NOTIFY_POUNCE
LEAF_NODE	10:72	10:72	10	)
LEAF_NODE	10:73	10:73	6	;
EXPR_STATEMENT	11:1	11:64	3	icon = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL ) ;
EXPR	11:1	11:1	4	icon = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
ASSIGN	11:1	11:8	5	icon = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
LVAL	11:1	11:1	6	icon
FIELD	11:1	11:1	7	icon
LEAF_NODE	11:1	11:1	8	icon
ASSIGN_OP	11:6	11:6	6	=
LEAF_NODE	11:6	11:6	7	=
RVAL	11:8	11:8	6	pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
FUNCTION_CALL	11:8	11:63	7	pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
CALLEE	11:8	11:8	8	pidgin_create_prpl_icon
LEAF_NODE	11:8	11:8	9	pidgin_create_prpl_icon
LEAF_NODE	11:31	11:31	8	(
ARGUMENT	11:32	11:32	8	account
FIELD	11:32	11:32	9	account
LEAF_NODE	11:32	11:32	10	account
LEAF_NODE	11:39	11:39	8	,
ARGUMENT	11:41	11:41	8	PIDGIN_PRPL_ICON_SMALL
FIELD	11:41	11:41	9	PIDGIN_PRPL_ICON_SMALL
LEAF_NODE	11:41	11:41	10	PIDGIN_PRPL_ICON_SMALL
LEAF_NODE	11:63	11:63	8	)
LEAF_NODE	11:64	11:64	4	;
EXPR_STATEMENT	12:1	12:47	3	pounce_data = g_new ( PidginNotifyPounceData , 1 ) ;
EXPR	12:1	12:1	4	pounce_data = g_new ( PidginNotifyPounceData , 1 )
ASSIGN	12:1	12:15	5	pounce_data = g_new ( PidginNotifyPounceData , 1 )
LVAL	12:1	12:1	6	pounce_data
FIELD	12:1	12:1	7	pounce_data
LEAF_NODE	12:1	12:1	8	pounce_data
ASSIGN_OP	12:13	12:13	6	=
LEAF_NODE	12:13	12:13	7	=
RVAL	12:15	12:15	6	g_new ( PidginNotifyPounceData , 1 )
FUNCTION_CALL	12:15	12:46	7	g_new ( PidginNotifyPounceData , 1 )
CALLEE	12:15	12:15	8	g_new
LEAF_NODE	12:15	12:15	9	g_new
LEAF_NODE	12:20	12:20	8	(
ARGUMENT	12:21	12:21	8	PidginNotifyPounceData
FIELD	12:21	12:21	9	PidginNotifyPounceData
LEAF_NODE	12:21	12:21	10	PidginNotifyPounceData
LEAF_NODE	12:43	12:43	8	,
ARGUMENT	12:45	12:45	8	1
FIELD	12:45	12:45	9	1
LEAF_NODE	12:45	12:45	10	1
LEAF_NODE	12:46	12:46	8	)
LEAF_NODE	12:47	12:47	4	;
EXPR_STATEMENT	13:1	13:31	3	pounce_data -> account = account ;
EXPR	13:1	13:1	4	pounce_data -> account = account
ASSIGN	13:1	13:24	5	pounce_data -> account = account
LVAL	13:1	13:1	6	pounce_data -> account
FIELD	13:1	13:14	7	pounce_data -> account
LEAF_NODE	13:1	13:1	8	pounce_data
LEAF_NODE	13:12	13:12	8	->
LEAF_NODE	13:14	13:14	8	account
ASSIGN_OP	13:22	13:22	6	=
LEAF_NODE	13:22	13:22	7	=
RVAL	13:24	13:24	6	account
FIELD	13:24	13:24	7	account
LEAF_NODE	13:24	13:24	8	account
LEAF_NODE	13:31	13:31	4	;
EXPR_STATEMENT	14:1	14:29	3	pounce_data -> pounce = pounce ;
EXPR	14:1	14:1	4	pounce_data -> pounce = pounce
ASSIGN	14:1	14:23	5	pounce_data -> pounce = pounce
LVAL	14:1	14:1	6	pounce_data -> pounce
FIELD	14:1	14:14	7	pounce_data -> pounce
LEAF_NODE	14:1	14:1	8	pounce_data
LEAF_NODE	14:12	14:12	8	->
LEAF_NODE	14:14	14:14	8	pounce
ASSIGN_OP	14:21	14:21	6	=
LEAF_NODE	14:21	14:21	7	=
RVAL	14:23	14:23	6	pounce
FIELD	14:23	14:23	7	pounce
LEAF_NODE	14:23	14:23	8	pounce
LEAF_NODE	14:29	14:29	4	;
EXPR_STATEMENT	15:1	15:67	3	pounce_data -> pouncee = g_strdup ( purple_pounce_get_pouncee ( pounce ) ) ;
EXPR	15:1	15:1	4	pounce_data -> pouncee = g_strdup ( purple_pounce_get_pouncee ( pounce ) )
ASSIGN	15:1	15:24	5	pounce_data -> pouncee = g_strdup ( purple_pounce_get_pouncee ( pounce ) )
LVAL	15:1	15:1	6	pounce_data -> pouncee
FIELD	15:1	15:14	7	pounce_data -> pouncee
LEAF_NODE	15:1	15:1	8	pounce_data
LEAF_NODE	15:12	15:12	8	->
LEAF_NODE	15:14	15:14	8	pouncee
ASSIGN_OP	15:22	15:22	6	=
LEAF_NODE	15:22	15:22	7	=
RVAL	15:24	15:24	6	g_strdup ( purple_pounce_get_pouncee ( pounce ) )
FUNCTION_CALL	15:24	15:66	7	g_strdup ( purple_pounce_get_pouncee ( pounce ) )
CALLEE	15:24	15:24	8	g_strdup
LEAF_NODE	15:24	15:24	9	g_strdup
LEAF_NODE	15:32	15:32	8	(
ARGUMENT	15:33	15:33	8	purple_pounce_get_pouncee ( pounce )
FUNCTION_CALL	15:33	15:65	9	purple_pounce_get_pouncee ( pounce )
CALLEE	15:33	15:33	10	purple_pounce_get_pouncee
LEAF_NODE	15:33	15:33	11	purple_pounce_get_pouncee
LEAF_NODE	15:58	15:58	10	(
ARGUMENT	15:59	15:59	10	pounce
FIELD	15:59	15:59	11	pounce
LEAF_NODE	15:59	15:59	12	pounce
LEAF_NODE	15:65	15:65	10	)
LEAF_NODE	15:66	15:66	8	)
LEAF_NODE	15:67	15:67	4	;
EXPR_STATEMENT	16:1	16:61	3	gtk_tree_store_append ( pounce_dialog -> treemodel , & iter , NULL ) ;
EXPR	16:1	16:1	4	gtk_tree_store_append ( pounce_dialog -> treemodel , & iter , NULL )
FUNCTION_CALL	16:1	16:60	5	gtk_tree_store_append ( pounce_dialog -> treemodel , & iter , NULL )
CALLEE	16:1	16:1	6	gtk_tree_store_append
LEAF_NODE	16:1	16:1	7	gtk_tree_store_append
LEAF_NODE	16:22	16:22	6	(
ARGUMENT	16:23	16:23	6	pounce_dialog -> treemodel
FIELD	16:23	16:38	7	pounce_dialog -> treemodel
LEAF_NODE	16:23	16:23	8	pounce_dialog
LEAF_NODE	16:36	16:36	8	->
LEAF_NODE	16:38	16:38	8	treemodel
LEAF_NODE	16:47	16:47	6	,
ARGUMENT	16:49	16:49	6	& iter
UNARY_EXPR	16:49	16:50	7	& iter
UNARY_OPERATOR	16:49	16:49	8	&
LEAF_NODE	16:49	16:49	9	&
FIELD	16:50	16:50	8	iter
LEAF_NODE	16:50	16:50	9	iter
LEAF_NODE	16:54	16:54	6	,
ARGUMENT	16:56	16:56	6	NULL
FIELD	16:56	16:56	7	NULL
LEAF_NODE	16:56	16:56	8	NULL
LEAF_NODE	16:60	16:60	6	)
LEAF_NODE	16:61	16:61	4	;
EXPR_STATEMENT	17:1	24:6	3	gtk_tree_store_set ( pounce_dialog -> treemodel , & iter , PIDGIN_POUNCE_ICON , icon , PIDGIN_POUNCE_ALIAS , alias , PIDGIN_POUNCE_EVENT , event , PIDGIN_POUNCE_TEXT , ( message != NULL ) ? message : _ ( "No message" ) , PIDGIN_POUNCE_DATE , date , PIDGIN_POUNCE_DATA , pounce_data , - 1 ) ;
EXPR	17:1	17:1	4	gtk_tree_store_set ( pounce_dialog -> treemodel , & iter , PIDGIN_POUNCE_ICON , icon , PIDGIN_POUNCE_ALIAS , alias , PIDGIN_POUNCE_EVENT , event , PIDGIN_POUNCE_TEXT , ( message != NULL ) ? message : _ ( "No message" ) , PIDGIN_POUNCE_DATE , date , PIDGIN_POUNCE_DATA , pounce_data , - 1 )
FUNCTION_CALL	17:1	24:5	5	gtk_tree_store_set ( pounce_dialog -> treemodel , & iter , PIDGIN_POUNCE_ICON , icon , PIDGIN_POUNCE_ALIAS , alias , PIDGIN_POUNCE_EVENT , event , PIDGIN_POUNCE_TEXT , ( message != NULL ) ? message : _ ( "No message" ) , PIDGIN_POUNCE_DATE , date , PIDGIN_POUNCE_DATA , pounce_data , - 1 )
CALLEE	17:1	17:1	6	gtk_tree_store_set
LEAF_NODE	17:1	17:1	7	gtk_tree_store_set
LEAF_NODE	17:19	17:19	6	(
ARGUMENT	17:20	17:20	6	pounce_dialog -> treemodel
FIELD	17:20	17:35	7	pounce_dialog -> treemodel
LEAF_NODE	17:20	17:20	8	pounce_dialog
LEAF_NODE	17:33	17:33	8	->
LEAF_NODE	17:35	17:35	8	treemodel
LEAF_NODE	17:44	17:44	6	,
ARGUMENT	17:46	17:46	6	& iter
UNARY_EXPR	17:46	17:47	7	& iter
UNARY_OPERATOR	17:46	17:46	8	&
LEAF_NODE	17:46	17:46	9	&
FIELD	17:47	17:47	8	iter
LEAF_NODE	17:47	17:47	9	iter
LEAF_NODE	17:51	17:51	6	,
ARGUMENT	18:3	18:3	6	PIDGIN_POUNCE_ICON
FIELD	18:3	18:3	7	PIDGIN_POUNCE_ICON
LEAF_NODE	18:3	18:3	8	PIDGIN_POUNCE_ICON
LEAF_NODE	18:21	18:21	6	,
ARGUMENT	18:23	18:23	6	icon
FIELD	18:23	18:23	7	icon
LEAF_NODE	18:23	18:23	8	icon
LEAF_NODE	18:27	18:27	6	,
ARGUMENT	19:3	19:3	6	PIDGIN_POUNCE_ALIAS
FIELD	19:3	19:3	7	PIDGIN_POUNCE_ALIAS
LEAF_NODE	19:3	19:3	8	PIDGIN_POUNCE_ALIAS
LEAF_NODE	19:22	19:22	6	,
ARGUMENT	19:24	19:24	6	alias
FIELD	19:24	19:24	7	alias
LEAF_NODE	19:24	19:24	8	alias
LEAF_NODE	19:29	19:29	6	,
ARGUMENT	20:3	20:3	6	PIDGIN_POUNCE_EVENT
FIELD	20:3	20:3	7	PIDGIN_POUNCE_EVENT
LEAF_NODE	20:3	20:3	8	PIDGIN_POUNCE_EVENT
LEAF_NODE	20:22	20:22	6	,
ARGUMENT	20:24	20:24	6	event
FIELD	20:24	20:24	7	event
LEAF_NODE	20:24	20:24	8	event
LEAF_NODE	20:29	20:29	6	,
ARGUMENT	21:3	21:3	6	PIDGIN_POUNCE_TEXT
FIELD	21:3	21:3	7	PIDGIN_POUNCE_TEXT
LEAF_NODE	21:3	21:3	8	PIDGIN_POUNCE_TEXT
LEAF_NODE	21:21	21:21	6	,
ARGUMENT	21:23	21:23	6	( message != NULL ) ? message : _ ( "No message" )
COND_EXPR	21:23	21:52	7	( message != NULL ) ? message : _ ( "No message" )
CONDITION	21:23	21:39	8	( message != NULL )
LEAF_NODE	21:23	21:23	9	(
FIELD	21:24	21:24	9	message
LEAF_NODE	21:24	21:24	10	message
EQ_OPERATOR	21:32	21:32	9	!=
LEAF_NODE	21:32	21:32	10	!=
FIELD	21:35	21:35	9	NULL
LEAF_NODE	21:35	21:35	10	NULL
LEAF_NODE	21:39	21:39	9	)
LEAF_NODE	21:40	21:40	8	?
EXPR	21:42	21:42	8	message
FIELD	21:42	21:42	9	message
LEAF_NODE	21:42	21:42	10	message
LEAF_NODE	21:50	21:50	8	:
FUNCTION_CALL	21:52	21:66	8	_ ( "No message" )
CALLEE	21:52	21:52	9	_
LEAF_NODE	21:52	21:52	10	_
LEAF_NODE	21:53	21:53	9	(
ARGUMENT	21:54	21:54	9	"No message"
FIELD	21:54	21:54	10	"No message"
LEAF_NODE	21:54	21:54	11	"No message"
LEAF_NODE	21:66	21:66	9	)
LEAF_NODE	21:67	21:67	6	,
ARGUMENT	22:3	22:3	6	PIDGIN_POUNCE_DATE
FIELD	22:3	22:3	7	PIDGIN_POUNCE_DATE
LEAF_NODE	22:3	22:3	8	PIDGIN_POUNCE_DATE
LEAF_NODE	22:21	22:21	6	,
ARGUMENT	22:23	22:23	6	date
FIELD	22:23	22:23	7	date
LEAF_NODE	22:23	22:23	8	date
LEAF_NODE	22:27	22:27	6	,
ARGUMENT	23:3	23:3	6	PIDGIN_POUNCE_DATA
FIELD	23:3	23:3	7	PIDGIN_POUNCE_DATA
LEAF_NODE	23:3	23:3	8	PIDGIN_POUNCE_DATA
LEAF_NODE	23:21	23:21	6	,
ARGUMENT	23:23	23:23	6	pounce_data
FIELD	23:23	23:23	7	pounce_data
LEAF_NODE	23:23	23:23	8	pounce_data
LEAF_NODE	23:34	23:34	6	,
ARGUMENT	24:3	24:3	6	- 1
UNARY_EXPR	24:3	24:4	7	- 1
UNARY_OPERATOR	24:3	24:3	8	-
LEAF_NODE	24:3	24:3	9	-
FIELD	24:4	24:4	8	1
LEAF_NODE	24:4	24:4	9	1
LEAF_NODE	24:5	24:5	6	)
LEAF_NODE	24:6	24:6	4	;
SELECTION	25:1	25:12	3	
KEYWORD	25:1	25:1	4	if
LEAF_NODE	25:1	25:1	5	if
LEAF_NODE	25:4	25:4	4	(
CONDITION	25:5	25:5	4	first
EXPR	25:5	25:5	5	first
FIELD	25:5	25:5	6	first
LEAF_NODE	25:5	25:5	7	first
LEAF_NODE	25:10	25:10	4	)
STATEMENTS	25:12	29:1	4	
LEAF_NODE	25:12	25:12	5	{
STATEMENTS	26:2	28:2	5	
SIMPLE_DECL	26:2	27:71	6	GtkTreeSelection * selection ; selection = gtk_tree_view_get_selection ( GTK_TREE_VIEW ( pounce_dialog -> treeview ) ) ;
VAR_DECL	26:2	26:20	7	GtkTreeSelection * selection ; selection = gtk_tree_view_get_selection ( GTK_TREE_VIEW ( pounce_dialog -> treeview ) )
TYPE	26:2	26:19	8	GtkTreeSelection *
TYPE_NAME	26:2	26:2	9	GtkTreeSelection
LEAF_NODE	26:2	26:2	10	GtkTreeSelection
POINTER	26:19	26:19	9	*
LEAF_NODE	26:19	26:19	10	*
NAME	26:20	26:20	8	selection
LEAF_NODE	26:20	26:20	9	selection
LEAF_NODE	0:0	0:0	8	;
INIT	26:20	26:20	8	selection = gtk_tree_view_get_selection ( GTK_TREE_VIEW ( pounce_dialog -> treeview ) )
ASSIGN	26:20	27:4	9	selection = gtk_tree_view_get_selection ( GTK_TREE_VIEW ( pounce_dialog -> treeview ) )
LVAL	26:20	26:20	10	selection
NAME	26:20	26:20	11	selection
LEAF_NODE	26:20	26:20	12	selection
ASSIGN_OP	26:30	26:30	10	=
LEAF_NODE	26:30	26:30	11	=
RVAL	27:4	27:4	10	gtk_tree_view_get_selection ( GTK_TREE_VIEW ( pounce_dialog -> treeview ) )
FUNCTION_CALL	27:4	27:70	11	gtk_tree_view_get_selection ( GTK_TREE_VIEW ( pounce_dialog -> treeview ) )
CALLEE	27:4	27:4	12	gtk_tree_view_get_selection
LEAF_NODE	27:4	27:4	13	gtk_tree_view_get_selection
LEAF_NODE	27:31	27:31	12	(
ARGUMENT	27:32	27:32	12	GTK_TREE_VIEW ( pounce_dialog -> treeview )
FUNCTION_CALL	27:32	27:69	13	GTK_TREE_VIEW ( pounce_dialog -> treeview )
CALLEE	27:32	27:32	14	GTK_TREE_VIEW
LEAF_NODE	27:32	27:32	15	GTK_TREE_VIEW
LEAF_NODE	27:45	27:45	14	(
ARGUMENT	27:46	27:46	14	pounce_dialog -> treeview
FIELD	27:46	27:61	15	pounce_dialog -> treeview
LEAF_NODE	27:46	27:46	16	pounce_dialog
LEAF_NODE	27:59	27:59	16	->
LEAF_NODE	27:61	27:61	16	treeview
LEAF_NODE	27:69	27:69	14	)
LEAF_NODE	27:70	27:70	12	)
LEAF_NODE	27:71	27:71	7	;
EXPR_STATEMENT	28:2	28:50	6	gtk_tree_selection_select_iter ( selection , & iter ) ;
EXPR	28:2	28:2	7	gtk_tree_selection_select_iter ( selection , & iter )
FUNCTION_CALL	28:2	28:49	8	gtk_tree_selection_select_iter ( selection , & iter )
CALLEE	28:2	28:2	9	gtk_tree_selection_select_iter
LEAF_NODE	28:2	28:2	10	gtk_tree_selection_select_iter
LEAF_NODE	28:32	28:32	9	(
ARGUMENT	28:33	28:33	9	selection
FIELD	28:33	28:33	10	selection
LEAF_NODE	28:33	28:33	11	selection
LEAF_NODE	28:42	28:42	9	,
ARGUMENT	28:44	28:44	9	& iter
UNARY_EXPR	28:44	28:45	10	& iter
UNARY_OPERATOR	28:44	28:44	11	&
LEAF_NODE	28:44	28:44	12	&
FIELD	28:45	28:45	11	iter
LEAF_NODE	28:45	28:45	12	iter
LEAF_NODE	28:49	28:49	9	)
LEAF_NODE	28:50	28:50	7	;
LEAF_NODE	29:1	29:1	5	}
SELECTION	30:1	31:2	3	
KEYWORD	30:1	30:1	4	if
LEAF_NODE	30:1	30:1	5	if
LEAF_NODE	30:4	30:4	4	(
CONDITION	30:5	30:5	4	icon
EXPR	30:5	30:5	5	icon
FIELD	30:5	30:5	6	icon
LEAF_NODE	30:5	30:5	7	icon
LEAF_NODE	30:9	30:9	4	)
STATEMENTS	31:2	31:2	4	
EXPR_STATEMENT	31:2	31:22	5	g_object_unref ( icon ) ;
EXPR	31:2	31:2	6	g_object_unref ( icon )
FUNCTION_CALL	31:2	31:21	7	g_object_unref ( icon )
CALLEE	31:2	31:2	8	g_object_unref
LEAF_NODE	31:2	31:2	9	g_object_unref
LEAF_NODE	31:16	31:16	8	(
ARGUMENT	31:17	31:17	8	icon
FIELD	31:17	31:17	9	icon
LEAF_NODE	31:17	31:17	10	icon
LEAF_NODE	31:21	31:21	8	)
LEAF_NODE	31:22	31:22	6	;
EXPR_STATEMENT	32:1	32:43	3	gtk_widget_show_all ( pounce_dialog -> dialog ) ;
EXPR	32:1	32:1	4	gtk_widget_show_all ( pounce_dialog -> dialog )
FUNCTION_CALL	32:1	32:42	5	gtk_widget_show_all ( pounce_dialog -> dialog )
CALLEE	32:1	32:1	6	gtk_widget_show_all
LEAF_NODE	32:1	32:1	7	gtk_widget_show_all
LEAF_NODE	32:20	32:20	6	(
ARGUMENT	32:21	32:21	6	pounce_dialog -> dialog
FIELD	32:21	32:36	7	pounce_dialog -> dialog
LEAF_NODE	32:21	32:21	8	pounce_dialog
LEAF_NODE	32:34	32:34	8	->
LEAF_NODE	32:36	32:36	8	dialog
LEAF_NODE	32:42	32:42	6	)
LEAF_NODE	32:43	32:43	4	;
JUMP_STATEMENT	33:1	33:7	3	return DESTINATION ;
KEYWORD	33:1	33:1	4	return
LEAF_NODE	33:1	33:1	5	return
LEAF_NODE	0:0	0:0	4	DESTINATION
LEAF_NODE	33:7	33:7	4	;
LEAF_NODE	34:0	34:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	idleable_filter
LEAF_NODE	2:0	2:0	3	idleable_filter
PARAMETER_LIST	2:15	2:38	2	( PurpleAccount * account )
LEAF_NODE	2:15	2:15	3	(
PARAMETER_DECL	2:16	2:31	3	PurpleAccount * account
TYPE	2:16	2:30	4	PurpleAccount *
TYPE_NAME	2:16	2:16	5	PurpleAccount
LEAF_NODE	2:16	2:16	6	PurpleAccount
POINTER	2:30	2:30	5	*
LEAF_NODE	2:30	2:30	6	*
NAME	2:31	2:31	4	account
LEAF_NODE	2:31	2:31	5	account
LEAF_NODE	2:38	2:38	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:19	3	PurplePlugin * prpl ;
VAR_DECL	4:1	4:15	4	PurplePlugin * prpl
TYPE	4:1	4:14	5	PurplePlugin *
TYPE_NAME	4:1	4:1	6	PurplePlugin
LEAF_NODE	4:1	4:1	7	PurplePlugin
POINTER	4:14	4:14	6	*
LEAF_NODE	4:14	4:14	7	*
NAME	4:15	4:15	5	prpl
LEAF_NODE	4:15	4:15	6	prpl
LEAF_NODE	4:19	4:19	4	;
EXPR_STATEMENT	5:1	5:65	3	prpl = purple_find_prpl ( purple_account_get_protocol_id ( account ) ) ;
EXPR	5:1	5:1	4	prpl = purple_find_prpl ( purple_account_get_protocol_id ( account ) )
ASSIGN	5:1	5:8	5	prpl = purple_find_prpl ( purple_account_get_protocol_id ( account ) )
LVAL	5:1	5:1	6	prpl
FIELD	5:1	5:1	7	prpl
LEAF_NODE	5:1	5:1	8	prpl
ASSIGN_OP	5:6	5:6	6	=
LEAF_NODE	5:6	5:6	7	=
RVAL	5:8	5:8	6	purple_find_prpl ( purple_account_get_protocol_id ( account ) )
FUNCTION_CALL	5:8	5:64	7	purple_find_prpl ( purple_account_get_protocol_id ( account ) )
CALLEE	5:8	5:8	8	purple_find_prpl
LEAF_NODE	5:8	5:8	9	purple_find_prpl
LEAF_NODE	5:24	5:24	8	(
ARGUMENT	5:25	5:25	8	purple_account_get_protocol_id ( account )
FUNCTION_CALL	5:25	5:63	9	purple_account_get_protocol_id ( account )
CALLEE	5:25	5:25	10	purple_account_get_protocol_id
LEAF_NODE	5:25	5:25	11	purple_account_get_protocol_id
LEAF_NODE	5:55	5:55	10	(
ARGUMENT	5:56	5:56	10	account
FIELD	5:56	5:56	11	account
LEAF_NODE	5:56	5:56	12	account
LEAF_NODE	5:63	5:63	10	)
LEAF_NODE	5:64	5:64	8	)
LEAF_NODE	5:65	5:65	4	;
EXPR_STATEMENT	6:1	6:42	3	g_return_val_if_fail ( prpl != NULL , FALSE ) ;
EXPR	6:1	6:1	4	g_return_val_if_fail ( prpl != NULL , FALSE )
FUNCTION_CALL	6:1	6:41	5	g_return_val_if_fail ( prpl != NULL , FALSE )
CALLEE	6:1	6:1	6	g_return_val_if_fail
LEAF_NODE	6:1	6:1	7	g_return_val_if_fail
LEAF_NODE	6:21	6:21	6	(
ARGUMENT	6:22	6:30	6	prpl != NULL
FIELD	6:22	6:22	7	prpl
LEAF_NODE	6:22	6:22	8	prpl
EQ_OPERATOR	6:27	6:27	7	!=
LEAF_NODE	6:27	6:27	8	!=
FIELD	6:30	6:30	7	NULL
LEAF_NODE	6:30	6:30	8	NULL
LEAF_NODE	6:34	6:34	6	,
ARGUMENT	6:36	6:36	6	FALSE
FIELD	6:36	6:36	7	FALSE
LEAF_NODE	6:36	6:36	8	FALSE
LEAF_NODE	6:41	6:41	6	)
LEAF_NODE	6:42	6:42	4	;
JUMP_STATEMENT	7:1	7:61	3	return ( PURPLE_PLUGIN_PROTOCOL_INFO ( prpl ) -> set_idle != NULL ) ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	( PURPLE_PLUGIN_PROTOCOL_INFO ( prpl ) -> set_idle != NULL )
EXPR	7:8	7:60	5	( PURPLE_PLUGIN_PROTOCOL_INFO ( prpl ) -> set_idle != NULL )
LEAF_NODE	7:8	7:8	6	(
FUNCTION_CALL	7:9	7:41	6	PURPLE_PLUGIN_PROTOCOL_INFO ( prpl )
CALLEE	7:9	7:9	7	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	7:9	7:9	8	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	7:36	7:36	7	(
ARGUMENT	7:37	7:37	7	prpl
FIELD	7:37	7:37	8	prpl
LEAF_NODE	7:37	7:37	9	prpl
LEAF_NODE	7:41	7:41	7	)
LEAF_NODE	7:42	7:42	6	->
LEAF_NODE	7:44	7:44	6	set_idle
EQ_OPERATOR	7:53	7:53	6	!=
LEAF_NODE	7:53	7:53	7	!=
FIELD	7:56	7:56	6	NULL
LEAF_NODE	7:56	7:56	7	NULL
LEAF_NODE	7:60	7:60	6	)
LEAF_NODE	7:61	7:61	4	;
LEAF_NODE	8:0	8:0	2	}

LEAF_NODE	0:0	0:0	0	SOURCE_FILE

SOURCE_FILE	7:1	51:3	0	
SIMPLE_DECL	7:1	11:56	1	enum CLASS_NAME BASE_CLASSES { CMD_PRESENCE_ACCOUNT , CMD_PRESENCE_ACTIVE_STATUS , CMD_PRESENCE_AVAILABLE , CMD_PRESENCE_CHAT_USER , CMD_PRESENCE_CONTEXT , CMD_PRESENCE_CONVERSATION , CMD_PRESENCE_IDLE , CMD_PRESENCE_LOGIN , CMD_PRESENCE_ONLINE , CMD_PRESENCE_STATUS , CMD_PRESENCE_STATUSES } cmd ;
VAR_DECL	7:1	11:53	2	enum CLASS_NAME BASE_CLASSES { CMD_PRESENCE_ACCOUNT , CMD_PRESENCE_ACTIVE_STATUS , CMD_PRESENCE_AVAILABLE , CMD_PRESENCE_CHAT_USER , CMD_PRESENCE_CONTEXT , CMD_PRESENCE_CONVERSATION , CMD_PRESENCE_IDLE , CMD_PRESENCE_LOGIN , CMD_PRESENCE_ONLINE , CMD_PRESENCE_STATUS , CMD_PRESENCE_STATUSES } cmd
TYPE	7:1	7:1	3	enum CLASS_NAME BASE_CLASSES { CMD_PRESENCE_ACCOUNT , CMD_PRESENCE_ACTIVE_STATUS , CMD_PRESENCE_AVAILABLE , CMD_PRESENCE_CHAT_USER , CMD_PRESENCE_CONTEXT , CMD_PRESENCE_CONVERSATION , CMD_PRESENCE_IDLE , CMD_PRESENCE_LOGIN , CMD_PRESENCE_ONLINE , CMD_PRESENCE_STATUS , CMD_PRESENCE_STATUSES }
CLASS_DEF	7:1	11:51	4	enum CLASS_NAME BASE_CLASSES { CMD_PRESENCE_ACCOUNT , CMD_PRESENCE_ACTIVE_STATUS , CMD_PRESENCE_AVAILABLE , CMD_PRESENCE_CHAT_USER , CMD_PRESENCE_CONTEXT , CMD_PRESENCE_CONVERSATION , CMD_PRESENCE_IDLE , CMD_PRESENCE_LOGIN , CMD_PRESENCE_ONLINE , CMD_PRESENCE_STATUS , CMD_PRESENCE_STATUSES }
LEAF_NODE	7:1	7:1	5	enum
LEAF_NODE	0:0	0:0	5	CLASS_NAME
LEAF_NODE	0:0	0:0	5	BASE_CLASSES
LEAF_NODE	7:6	7:6	5	{
CLASS_CONTENT	7:8	11:29	5	CMD_PRESENCE_ACCOUNT , CMD_PRESENCE_ACTIVE_STATUS , CMD_PRESENCE_AVAILABLE , CMD_PRESENCE_CHAT_USER , CMD_PRESENCE_CONTEXT , CMD_PRESENCE_CONVERSATION , CMD_PRESENCE_IDLE , CMD_PRESENCE_LOGIN , CMD_PRESENCE_ONLINE , CMD_PRESENCE_STATUS , CMD_PRESENCE_STATUSES
LEAF_NODE	7:8	7:8	6	CMD_PRESENCE_ACCOUNT
LEAF_NODE	7:28	7:28	6	,
LEAF_NODE	7:30	7:30	6	CMD_PRESENCE_ACTIVE_STATUS
LEAF_NODE	7:56	7:56	6	,
LEAF_NODE	8:8	8:8	6	CMD_PRESENCE_AVAILABLE
LEAF_NODE	8:30	8:30	6	,
LEAF_NODE	8:32	8:32	6	CMD_PRESENCE_CHAT_USER
LEAF_NODE	8:54	8:54	6	,
LEAF_NODE	9:8	9:8	6	CMD_PRESENCE_CONTEXT
LEAF_NODE	9:28	9:28	6	,
LEAF_NODE	9:30	9:30	6	CMD_PRESENCE_CONVERSATION
LEAF_NODE	9:55	9:55	6	,
LEAF_NODE	10:8	10:8	6	CMD_PRESENCE_IDLE
LEAF_NODE	10:25	10:25	6	,
LEAF_NODE	10:27	10:27	6	CMD_PRESENCE_LOGIN
LEAF_NODE	10:45	10:45	6	,
LEAF_NODE	10:47	10:47	6	CMD_PRESENCE_ONLINE
LEAF_NODE	10:66	10:66	6	,
LEAF_NODE	11:8	11:8	6	CMD_PRESENCE_STATUS
LEAF_NODE	11:27	11:27	6	,
LEAF_NODE	11:29	11:29	6	CMD_PRESENCE_STATUSES
LEAF_NODE	11:51	11:51	5	}
NAME	11:53	11:53	3	cmd
LEAF_NODE	11:53	11:53	4	cmd
LEAF_NODE	11:56	11:56	2	;
SIMPLE_DECL	12:1	12:16	1	Tcl_Obj * result ;
VAR_DECL	12:1	12:10	2	Tcl_Obj * result
TYPE	12:1	12:9	3	Tcl_Obj *
TYPE_NAME	12:1	12:1	4	Tcl_Obj
LEAF_NODE	12:1	12:1	5	Tcl_Obj
POINTER	12:9	12:9	4	*
LEAF_NODE	12:9	12:9	5	*
NAME	12:10	12:10	3	result
LEAF_NODE	12:10	12:10	4	result
LEAF_NODE	12:16	12:16	2	;
SIMPLE_DECL	13:1	13:21	1	Tcl_Obj * list , Tcl_Obj * elem ;
INIT_DECL_LIST	13:1	13:1	2	Tcl_Obj * list , Tcl_Obj * elem
VAR_DECL	13:1	13:10	3	Tcl_Obj * list
TYPE	13:1	13:9	4	Tcl_Obj *
TYPE_NAME	13:1	13:1	5	Tcl_Obj
LEAF_NODE	13:1	13:1	6	Tcl_Obj
POINTER	13:9	13:9	5	*
LEAF_NODE	13:9	13:9	6	*
NAME	13:10	13:10	4	list
LEAF_NODE	13:10	13:10	5	list
LEAF_NODE	13:14	13:14	3	,
VAR_DECL	13:1	13:17	3	Tcl_Obj * elem
TYPE	13:1	13:16	4	Tcl_Obj *
TYPE_NAME	13:1	13:1	5	Tcl_Obj
LEAF_NODE	13:1	13:1	6	Tcl_Obj
POINTER	13:16	13:16	5	*
LEAF_NODE	13:16	13:16	6	*
NAME	13:17	13:17	4	elem
LEAF_NODE	13:17	13:17	5	elem
LEAF_NODE	13:21	13:21	2	;
SIMPLE_DECL	14:1	14:25	1	PurplePresence * presence ;
VAR_DECL	14:1	14:17	2	PurplePresence * presence
TYPE	14:1	14:16	3	PurplePresence *
TYPE_NAME	14:1	14:1	4	PurplePresence
LEAF_NODE	14:1	14:1	5	PurplePresence
POINTER	14:16	14:16	4	*
LEAF_NODE	14:16	14:16	5	*
NAME	14:17	14:17	3	presence
LEAF_NODE	14:17	14:17	4	presence
LEAF_NODE	14:25	14:25	2	;
SIMPLE_DECL	15:1	15:11	1	GList * cur ;
VAR_DECL	15:1	15:8	2	GList * cur
TYPE	15:1	15:7	3	GList *
TYPE_NAME	15:1	15:1	4	GList
LEAF_NODE	15:1	15:1	5	GList
POINTER	15:7	15:7	4	*
LEAF_NODE	15:7	15:7	5	*
NAME	15:8	15:8	3	cur
LEAF_NODE	15:8	15:8	4	cur
LEAF_NODE	15:11	15:11	2	;
SIMPLE_DECL	16:1	16:39	1	int error , int idle , int idle_time , int login_time ;
INIT_DECL_LIST	16:1	16:1	2	int error , int idle , int idle_time , int login_time
VAR_DECL	16:1	16:5	3	int error
TYPE	16:1	16:1	4	int
TYPE_NAME	16:1	16:1	5	int
LEAF_NODE	16:1	16:1	6	int
NAME	16:5	16:5	4	error
LEAF_NODE	16:5	16:5	5	error
LEAF_NODE	16:10	16:10	3	,
INIT_DECL_LIST	16:1	16:1	3	int idle , int idle_time , int login_time
VAR_DECL	16:1	16:12	4	int idle
TYPE	16:1	16:1	5	int
TYPE_NAME	16:1	16:1	6	int
LEAF_NODE	16:1	16:1	7	int
NAME	16:12	16:12	5	idle
LEAF_NODE	16:12	16:12	6	idle
LEAF_NODE	16:16	16:16	4	,
INIT_DECL_LIST	16:1	16:1	4	int idle_time , int login_time
VAR_DECL	16:1	16:18	5	int idle_time
TYPE	16:1	16:1	6	int
TYPE_NAME	16:1	16:1	7	int
LEAF_NODE	16:1	16:1	8	int
NAME	16:18	16:18	6	idle_time
LEAF_NODE	16:18	16:18	7	idle_time
LEAF_NODE	16:27	16:27	5	,
VAR_DECL	16:1	16:29	5	int login_time
TYPE	16:1	16:1	6	int
TYPE_NAME	16:1	16:1	7	int
LEAF_NODE	16:1	16:1	8	int
NAME	16:29	16:29	6	login_time
LEAF_NODE	16:29	16:29	7	login_time
LEAF_NODE	16:39	16:39	2	;
SIMPLE_DECL	51:3	51:34	1	PurpleStatusPrimitive primitive ;
VAR_DECL	51:3	51:25	2	PurpleStatusPrimitive primitive
TYPE	51:3	51:3	3	PurpleStatusPrimitive
TYPE_NAME	51:3	51:3	4	PurpleStatusPrimitive
LEAF_NODE	51:3	51:3	5	PurpleStatusPrimitive
NAME	51:25	51:25	3	primitive
LEAF_NODE	51:25	51:25	4	primitive
LEAF_NODE	51:34	51:34	2	;

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	plugin_unload
LEAF_NODE	2:0	2:0	3	plugin_unload
PARAMETER_LIST	2:13	2:34	2	( PurplePlugin * plugin )
LEAF_NODE	2:13	2:13	3	(
PARAMETER_DECL	2:14	2:28	3	PurplePlugin * plugin
TYPE	2:14	2:27	4	PurplePlugin *
TYPE_NAME	2:14	2:14	5	PurplePlugin
LEAF_NODE	2:14	2:14	6	PurplePlugin
POINTER	2:27	2:27	5	*
LEAF_NODE	2:27	2:27	6	*
NAME	2:28	2:28	4	plugin
LEAF_NODE	2:28	2:28	5	plugin
LEAF_NODE	2:34	2:34	3	)
LEAF_NODE	2:36	2:36	2	{
STATEMENTS	3:1	9:1	2	
SIMPLE_DECL	3:1	3:30	3	MMConversation * mmconv ; mmconv = NULL ;
VAR_DECL	3:1	3:17	4	MMConversation * mmconv ; mmconv = NULL
TYPE	3:1	3:16	5	MMConversation *
TYPE_NAME	3:1	3:1	6	MMConversation
LEAF_NODE	3:1	3:1	7	MMConversation
POINTER	3:16	3:16	6	*
LEAF_NODE	3:16	3:16	7	*
NAME	3:17	3:17	5	mmconv
LEAF_NODE	3:17	3:17	6	mmconv
LEAF_NODE	0:0	0:0	5	;
INIT	3:17	3:17	5	mmconv = NULL
ASSIGN	3:17	3:26	6	mmconv = NULL
LVAL	3:17	3:17	7	mmconv
NAME	3:17	3:17	8	mmconv
LEAF_NODE	3:17	3:17	9	mmconv
ASSIGN_OP	3:24	3:24	7	=
LEAF_NODE	3:24	3:24	8	=
RVAL	3:26	3:26	7	NULL
FIELD	3:26	3:26	8	NULL
LEAF_NODE	3:26	3:26	9	NULL
LEAF_NODE	3:30	3:30	4	;
ITERATION	4:1	5:1	3	
KEYWORD	4:1	4:1	4	while
LEAF_NODE	4:1	4:1	5	while
LEAF_NODE	4:7	4:7	4	(
CONDITION	4:8	4:8	4	conversations != NULL
EXPR	4:8	4:25	5	conversations != NULL
FIELD	4:8	4:8	6	conversations
LEAF_NODE	4:8	4:8	7	conversations
EQ_OPERATOR	4:22	4:22	6	!=
LEAF_NODE	4:22	4:22	7	!=
FIELD	4:25	4:25	6	NULL
LEAF_NODE	4:25	4:25	7	NULL
LEAF_NODE	4:29	4:29	4	)
STATEMENTS	5:1	8:1	4	
LEAF_NODE	5:1	5:1	5	{
STATEMENTS	6:2	7:2	5	
EXPR_STATEMENT	6:2	6:30	6	mmconv = conversations -> data ;
EXPR	6:2	6:2	7	mmconv = conversations -> data
ASSIGN	6:2	6:11	8	mmconv = conversations -> data
LVAL	6:2	6:2	9	mmconv
FIELD	6:2	6:2	10	mmconv
LEAF_NODE	6:2	6:2	11	mmconv
ASSIGN_OP	6:9	6:9	9	=
LEAF_NODE	6:9	6:9	10	=
RVAL	6:11	6:11	9	conversations -> data
FIELD	6:11	6:26	10	conversations -> data
LEAF_NODE	6:11	6:11	11	conversations
LEAF_NODE	6:24	6:24	11	->
LEAF_NODE	6:26	6:26	11	data
LEAF_NODE	6:30	6:30	7	;
EXPR_STATEMENT	7:2	7:30	6	conv_destroyed ( mmconv -> conv ) ;
EXPR	7:2	7:2	7	conv_destroyed ( mmconv -> conv )
FUNCTION_CALL	7:2	7:29	8	conv_destroyed ( mmconv -> conv )
CALLEE	7:2	7:2	9	conv_destroyed
LEAF_NODE	7:2	7:2	10	conv_destroyed
LEAF_NODE	7:16	7:16	9	(
ARGUMENT	7:17	7:17	9	mmconv -> conv
FIELD	7:17	7:25	10	mmconv -> conv
LEAF_NODE	7:17	7:17	11	mmconv
LEAF_NODE	7:23	7:23	11	->
LEAF_NODE	7:25	7:25	11	conv
LEAF_NODE	7:29	7:29	9	)
LEAF_NODE	7:30	7:30	7	;
LEAF_NODE	8:1	8:1	5	}
JUMP_STATEMENT	9:1	9:12	3	return TRUE ;
KEYWORD	9:1	9:1	4	return
LEAF_NODE	9:1	9:1	5	return
DESTINATION	9:8	9:8	4	TRUE
EXPR	9:8	9:8	5	TRUE
FIELD	9:8	9:8	6	TRUE
LEAF_NODE	9:8	9:8	7	TRUE
LEAF_NODE	9:12	9:12	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	29:0	1	
RETURN_TYPE	1:0	1:19	2	static PurpleMedia *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	PurpleMedia
LEAF_NODE	1:7	1:7	4	PurpleMedia
LEAF_NODE	1:19	1:19	3	*
FUNCTION_NAME	2:0	2:0	2	jingle_rtp_create_media
LEAF_NODE	2:0	2:0	3	jingle_rtp_create_media
PARAMETER_LIST	2:23	2:46	2	( JingleContent * content )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:39	3	JingleContent * content
TYPE	2:24	2:38	4	JingleContent *
TYPE_NAME	2:24	2:24	5	JingleContent
LEAF_NODE	2:24	2:24	6	JingleContent
POINTER	2:38	2:38	5	*
LEAF_NODE	2:38	2:38	6	*
NAME	2:39	2:39	4	content
LEAF_NODE	2:39	2:39	5	content
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	28:1	2	
SIMPLE_DECL	4:1	4:61	3	JingleSession * session ; session = jingle_content_get_session ( content ) ;
VAR_DECL	4:1	4:16	4	JingleSession * session ; session = jingle_content_get_session ( content )
TYPE	4:1	4:15	5	JingleSession *
TYPE_NAME	4:1	4:1	6	JingleSession
LEAF_NODE	4:1	4:1	7	JingleSession
POINTER	4:15	4:15	6	*
LEAF_NODE	4:15	4:15	7	*
NAME	4:16	4:16	5	session
LEAF_NODE	4:16	4:16	6	session
LEAF_NODE	0:0	0:0	5	;
INIT	4:16	4:16	5	session = jingle_content_get_session ( content )
ASSIGN	4:16	4:26	6	session = jingle_content_get_session ( content )
LVAL	4:16	4:16	7	session
NAME	4:16	4:16	8	session
LEAF_NODE	4:16	4:16	9	session
ASSIGN_OP	4:24	4:24	7	=
LEAF_NODE	4:24	4:24	8	=
RVAL	4:26	4:26	7	jingle_content_get_session ( content )
FUNCTION_CALL	4:26	4:60	8	jingle_content_get_session ( content )
CALLEE	4:26	4:26	9	jingle_content_get_session
LEAF_NODE	4:26	4:26	10	jingle_content_get_session
LEAF_NODE	4:52	4:52	9	(
ARGUMENT	4:53	4:53	9	content
FIELD	4:53	4:53	10	content
LEAF_NODE	4:53	4:53	11	content
LEAF_NODE	4:60	4:60	9	)
LEAF_NODE	4:61	4:61	4	;
SIMPLE_DECL	5:1	5:50	3	JabberStream * js ; js = jingle_session_get_js ( session ) ;
VAR_DECL	5:1	5:15	4	JabberStream * js ; js = jingle_session_get_js ( session )
TYPE	5:1	5:14	5	JabberStream *
TYPE_NAME	5:1	5:1	6	JabberStream
LEAF_NODE	5:1	5:1	7	JabberStream
POINTER	5:14	5:14	6	*
LEAF_NODE	5:14	5:14	7	*
NAME	5:15	5:15	5	js
LEAF_NODE	5:15	5:15	6	js
LEAF_NODE	0:0	0:0	5	;
INIT	5:15	5:15	5	js = jingle_session_get_js ( session )
ASSIGN	5:15	5:20	6	js = jingle_session_get_js ( session )
LVAL	5:15	5:15	7	js
NAME	5:15	5:15	8	js
LEAF_NODE	5:15	5:15	9	js
ASSIGN_OP	5:18	5:18	7	=
LEAF_NODE	5:18	5:18	8	=
RVAL	5:20	5:20	7	jingle_session_get_js ( session )
FUNCTION_CALL	5:20	5:49	8	jingle_session_get_js ( session )
CALLEE	5:20	5:20	9	jingle_session_get_js
LEAF_NODE	5:20	5:20	10	jingle_session_get_js
LEAF_NODE	5:41	5:41	9	(
ARGUMENT	5:42	5:42	9	session
FIELD	5:42	5:42	10	session
LEAF_NODE	5:42	5:42	11	session
LEAF_NODE	5:49	5:49	9	)
LEAF_NODE	5:50	5:50	4	;
SIMPLE_DECL	6:1	6:59	3	gchar * remote_jid ; remote_jid = jingle_session_get_remote_jid ( session ) ;
VAR_DECL	6:1	6:8	4	gchar * remote_jid ; remote_jid = jingle_session_get_remote_jid ( session )
TYPE	6:1	6:7	5	gchar *
TYPE_NAME	6:1	6:1	6	gchar
LEAF_NODE	6:1	6:1	7	gchar
POINTER	6:7	6:7	6	*
LEAF_NODE	6:7	6:7	7	*
NAME	6:8	6:8	5	remote_jid
LEAF_NODE	6:8	6:8	6	remote_jid
LEAF_NODE	0:0	0:0	5	;
INIT	6:8	6:8	5	remote_jid = jingle_session_get_remote_jid ( session )
ASSIGN	6:8	6:21	6	remote_jid = jingle_session_get_remote_jid ( session )
LVAL	6:8	6:8	7	remote_jid
NAME	6:8	6:8	8	remote_jid
LEAF_NODE	6:8	6:8	9	remote_jid
ASSIGN_OP	6:19	6:19	7	=
LEAF_NODE	6:19	6:19	8	=
RVAL	6:21	6:21	7	jingle_session_get_remote_jid ( session )
FUNCTION_CALL	6:21	6:58	8	jingle_session_get_remote_jid ( session )
CALLEE	6:21	6:21	9	jingle_session_get_remote_jid
LEAF_NODE	6:21	6:21	10	jingle_session_get_remote_jid
LEAF_NODE	6:50	6:50	9	(
ARGUMENT	6:51	6:51	9	session
FIELD	6:51	6:51	10	session
LEAF_NODE	6:51	6:51	11	session
LEAF_NODE	6:58	6:58	9	)
LEAF_NODE	6:59	6:59	4	;
SIMPLE_DECL	7:1	11:40	3	PurpleMedia * media ; media = purple_media_manager_create_media ( purple_media_manager_get ( ) , purple_connection_get_account ( js -> gc ) , "fsrtpconference" , remote_jid , jingle_session_is_initiator ( session ) ) ;
VAR_DECL	7:1	7:14	4	PurpleMedia * media ; media = purple_media_manager_create_media ( purple_media_manager_get ( ) , purple_connection_get_account ( js -> gc ) , "fsrtpconference" , remote_jid , jingle_session_is_initiator ( session ) )
TYPE	7:1	7:13	5	PurpleMedia *
TYPE_NAME	7:1	7:1	6	PurpleMedia
LEAF_NODE	7:1	7:1	7	PurpleMedia
POINTER	7:13	7:13	6	*
LEAF_NODE	7:13	7:13	7	*
NAME	7:14	7:14	5	media
LEAF_NODE	7:14	7:14	6	media
LEAF_NODE	0:0	0:0	5	;
INIT	7:14	7:14	5	media = purple_media_manager_create_media ( purple_media_manager_get ( ) , purple_connection_get_account ( js -> gc ) , "fsrtpconference" , remote_jid , jingle_session_is_initiator ( session ) )
ASSIGN	7:14	7:22	6	media = purple_media_manager_create_media ( purple_media_manager_get ( ) , purple_connection_get_account ( js -> gc ) , "fsrtpconference" , remote_jid , jingle_session_is_initiator ( session ) )
LVAL	7:14	7:14	7	media
NAME	7:14	7:14	8	media
LEAF_NODE	7:14	7:14	9	media
ASSIGN_OP	7:20	7:20	7	=
LEAF_NODE	7:20	7:20	8	=
RVAL	7:22	7:22	7	purple_media_manager_create_media ( purple_media_manager_get ( ) , purple_connection_get_account ( js -> gc ) , "fsrtpconference" , remote_jid , jingle_session_is_initiator ( session ) )
FUNCTION_CALL	7:22	11:39	8	purple_media_manager_create_media ( purple_media_manager_get ( ) , purple_connection_get_account ( js -> gc ) , "fsrtpconference" , remote_jid , jingle_session_is_initiator ( session ) )
CALLEE	7:22	7:22	9	purple_media_manager_create_media
LEAF_NODE	7:22	7:22	10	purple_media_manager_create_media
LEAF_NODE	7:55	7:55	9	(
ARGUMENT	8:3	8:3	9	purple_media_manager_get ( )
FUNCTION_CALL	8:3	8:28	10	purple_media_manager_get ( )
CALLEE	8:3	8:3	11	purple_media_manager_get
LEAF_NODE	8:3	8:3	12	purple_media_manager_get
LEAF_NODE	8:27	8:27	11	(
LEAF_NODE	8:28	8:28	11	)
LEAF_NODE	8:29	8:29	9	,
ARGUMENT	9:3	9:3	9	purple_connection_get_account ( js -> gc )
FUNCTION_CALL	9:3	9:39	10	purple_connection_get_account ( js -> gc )
CALLEE	9:3	9:3	11	purple_connection_get_account
LEAF_NODE	9:3	9:3	12	purple_connection_get_account
LEAF_NODE	9:32	9:32	11	(
ARGUMENT	9:33	9:33	11	js -> gc
FIELD	9:33	9:37	12	js -> gc
LEAF_NODE	9:33	9:33	13	js
LEAF_NODE	9:35	9:35	13	->
LEAF_NODE	9:37	9:37	13	gc
LEAF_NODE	9:39	9:39	11	)
LEAF_NODE	9:40	9:40	9	,
ARGUMENT	10:3	10:3	9	"fsrtpconference"
FIELD	10:3	10:3	10	"fsrtpconference"
LEAF_NODE	10:3	10:3	11	"fsrtpconference"
LEAF_NODE	10:20	10:20	9	,
ARGUMENT	10:22	10:22	9	remote_jid
FIELD	10:22	10:22	10	remote_jid
LEAF_NODE	10:22	10:22	11	remote_jid
LEAF_NODE	10:32	10:32	9	,
ARGUMENT	11:3	11:3	9	jingle_session_is_initiator ( session )
FUNCTION_CALL	11:3	11:38	10	jingle_session_is_initiator ( session )
CALLEE	11:3	11:3	11	jingle_session_is_initiator
LEAF_NODE	11:3	11:3	12	jingle_session_is_initiator
LEAF_NODE	11:30	11:30	11	(
ARGUMENT	11:31	11:31	11	session
FIELD	11:31	11:31	12	session
LEAF_NODE	11:31	11:31	13	session
LEAF_NODE	11:38	11:38	11	)
LEAF_NODE	11:39	11:39	9	)
LEAF_NODE	11:40	11:40	4	;
EXPR_STATEMENT	12:1	12:19	3	g_free ( remote_jid ) ;
EXPR	12:1	12:1	4	g_free ( remote_jid )
FUNCTION_CALL	12:1	12:18	5	g_free ( remote_jid )
CALLEE	12:1	12:1	6	g_free
LEAF_NODE	12:1	12:1	7	g_free
LEAF_NODE	12:7	12:7	6	(
ARGUMENT	12:8	12:8	6	remote_jid
FIELD	12:8	12:8	7	remote_jid
LEAF_NODE	12:8	12:8	8	remote_jid
LEAF_NODE	12:18	12:18	6	)
LEAF_NODE	12:19	12:19	4	;
SELECTION	13:1	13:13	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	! media
EXPR	13:5	13:5	5	! media
UNARY_EXPR	13:5	13:6	6	! media
UNARY_OPERATOR	13:5	13:5	7	!
LEAF_NODE	13:5	13:5	8	!
FIELD	13:6	13:6	7	media
LEAF_NODE	13:6	13:6	8	media
LEAF_NODE	13:11	13:11	4	)
STATEMENTS	13:13	16:1	4	
LEAF_NODE	13:13	13:13	5	{
STATEMENTS	14:2	15:2	5	
EXPR_STATEMENT	14:2	14:69	6	purple_debug_error ( "jingle-rtp" , "Couldn't create media session\n" ) ;
EXPR	14:2	14:2	7	purple_debug_error ( "jingle-rtp" , "Couldn't create media session\n" )
FUNCTION_CALL	14:2	14:68	8	purple_debug_error ( "jingle-rtp" , "Couldn't create media session\n" )
CALLEE	14:2	14:2	9	purple_debug_error
LEAF_NODE	14:2	14:2	10	purple_debug_error
LEAF_NODE	14:20	14:20	9	(
ARGUMENT	14:21	14:21	9	"jingle-rtp"
FIELD	14:21	14:21	10	"jingle-rtp"
LEAF_NODE	14:21	14:21	11	"jingle-rtp"
LEAF_NODE	14:33	14:33	9	,
ARGUMENT	14:35	14:35	9	"Couldn't create media session\n"
FIELD	14:35	14:35	10	"Couldn't create media session\n"
LEAF_NODE	14:35	14:35	11	"Couldn't create media session\n"
LEAF_NODE	14:68	14:68	9	)
LEAF_NODE	14:69	14:69	7	;
JUMP_STATEMENT	15:2	15:13	6	return NULL ;
KEYWORD	15:2	15:2	7	return
LEAF_NODE	15:2	15:2	8	return
DESTINATION	15:9	15:9	7	NULL
EXPR	15:9	15:9	8	NULL
FIELD	15:9	15:9	9	NULL
LEAF_NODE	15:9	15:9	10	NULL
LEAF_NODE	15:13	15:13	7	;
LEAF_NODE	16:1	16:1	5	}
EXPR_STATEMENT	17:1	17:43	3	purple_media_set_prpl_data ( media , session ) ;
EXPR	17:1	17:1	4	purple_media_set_prpl_data ( media , session )
FUNCTION_CALL	17:1	17:42	5	purple_media_set_prpl_data ( media , session )
CALLEE	17:1	17:1	6	purple_media_set_prpl_data
LEAF_NODE	17:1	17:1	7	purple_media_set_prpl_data
LEAF_NODE	17:27	17:27	6	(
ARGUMENT	17:28	17:28	6	media
FIELD	17:28	17:28	7	media
LEAF_NODE	17:28	17:28	8	media
LEAF_NODE	17:33	17:33	6	,
ARGUMENT	17:35	17:35	6	session
FIELD	17:35	17:35	7	session
LEAF_NODE	17:35	17:35	8	session
LEAF_NODE	17:42	17:42	6	)
LEAF_NODE	17:43	17:43	4	;
EXPR_STATEMENT	19:1	20:60	3	g_signal_connect ( G_OBJECT ( media ) , "candidates-prepared" , G_CALLBACK ( jingle_rtp_candidates_prepared_cb ) , session ) ;
EXPR	19:1	19:1	4	g_signal_connect ( G_OBJECT ( media ) , "candidates-prepared" , G_CALLBACK ( jingle_rtp_candidates_prepared_cb ) , session )
FUNCTION_CALL	19:1	20:59	5	g_signal_connect ( G_OBJECT ( media ) , "candidates-prepared" , G_CALLBACK ( jingle_rtp_candidates_prepared_cb ) , session )
CALLEE	19:1	19:1	6	g_signal_connect
LEAF_NODE	19:1	19:1	7	g_signal_connect
LEAF_NODE	19:17	19:17	6	(
ARGUMENT	19:18	19:18	6	G_OBJECT ( media )
FUNCTION_CALL	19:18	19:32	7	G_OBJECT ( media )
CALLEE	19:18	19:18	8	G_OBJECT
LEAF_NODE	19:18	19:18	9	G_OBJECT
LEAF_NODE	19:26	19:26	8	(
ARGUMENT	19:27	19:27	8	media
FIELD	19:27	19:27	9	media
LEAF_NODE	19:27	19:27	10	media
LEAF_NODE	19:32	19:32	8	)
LEAF_NODE	19:33	19:33	6	,
ARGUMENT	19:35	19:35	6	"candidates-prepared"
FIELD	19:35	19:35	7	"candidates-prepared"
LEAF_NODE	19:35	19:35	8	"candidates-prepared"
LEAF_NODE	19:56	19:56	6	,
ARGUMENT	20:5	20:5	6	G_CALLBACK ( jingle_rtp_candidates_prepared_cb )
FUNCTION_CALL	20:5	20:49	7	G_CALLBACK ( jingle_rtp_candidates_prepared_cb )
CALLEE	20:5	20:5	8	G_CALLBACK
LEAF_NODE	20:5	20:5	9	G_CALLBACK
LEAF_NODE	20:15	20:15	8	(
ARGUMENT	20:16	20:16	8	jingle_rtp_candidates_prepared_cb
FIELD	20:16	20:16	9	jingle_rtp_candidates_prepared_cb
LEAF_NODE	20:16	20:16	10	jingle_rtp_candidates_prepared_cb
LEAF_NODE	20:49	20:49	8	)
LEAF_NODE	20:50	20:50	6	,
ARGUMENT	20:52	20:52	6	session
FIELD	20:52	20:52	7	session
LEAF_NODE	20:52	20:52	8	session
LEAF_NODE	20:59	20:59	6	)
LEAF_NODE	20:60	20:60	4	;
EXPR_STATEMENT	21:1	22:55	3	g_signal_connect ( G_OBJECT ( media ) , "codecs-changed" , G_CALLBACK ( jingle_rtp_codecs_changed_cb ) , session ) ;
EXPR	21:1	21:1	4	g_signal_connect ( G_OBJECT ( media ) , "codecs-changed" , G_CALLBACK ( jingle_rtp_codecs_changed_cb ) , session )
FUNCTION_CALL	21:1	22:54	5	g_signal_connect ( G_OBJECT ( media ) , "codecs-changed" , G_CALLBACK ( jingle_rtp_codecs_changed_cb ) , session )
CALLEE	21:1	21:1	6	g_signal_connect
LEAF_NODE	21:1	21:1	7	g_signal_connect
LEAF_NODE	21:17	21:17	6	(
ARGUMENT	21:18	21:18	6	G_OBJECT ( media )
FUNCTION_CALL	21:18	21:32	7	G_OBJECT ( media )
CALLEE	21:18	21:18	8	G_OBJECT
LEAF_NODE	21:18	21:18	9	G_OBJECT
LEAF_NODE	21:26	21:26	8	(
ARGUMENT	21:27	21:27	8	media
FIELD	21:27	21:27	9	media
LEAF_NODE	21:27	21:27	10	media
LEAF_NODE	21:32	21:32	8	)
LEAF_NODE	21:33	21:33	6	,
ARGUMENT	21:35	21:35	6	"codecs-changed"
FIELD	21:35	21:35	7	"codecs-changed"
LEAF_NODE	21:35	21:35	8	"codecs-changed"
LEAF_NODE	21:51	21:51	6	,
ARGUMENT	22:5	22:5	6	G_CALLBACK ( jingle_rtp_codecs_changed_cb )
FUNCTION_CALL	22:5	22:44	7	G_CALLBACK ( jingle_rtp_codecs_changed_cb )
CALLEE	22:5	22:5	8	G_CALLBACK
LEAF_NODE	22:5	22:5	9	G_CALLBACK
LEAF_NODE	22:15	22:15	8	(
ARGUMENT	22:16	22:16	8	jingle_rtp_codecs_changed_cb
FIELD	22:16	22:16	9	jingle_rtp_codecs_changed_cb
LEAF_NODE	22:16	22:16	10	jingle_rtp_codecs_changed_cb
LEAF_NODE	22:44	22:44	8	)
LEAF_NODE	22:45	22:45	6	,
ARGUMENT	22:47	22:47	6	session
FIELD	22:47	22:47	7	session
LEAF_NODE	22:47	22:47	8	session
LEAF_NODE	22:54	22:54	6	)
LEAF_NODE	22:55	22:55	4	;
EXPR_STATEMENT	23:1	24:54	3	g_signal_connect ( G_OBJECT ( media ) , "state-changed" , G_CALLBACK ( jingle_rtp_state_changed_cb ) , session ) ;
EXPR	23:1	23:1	4	g_signal_connect ( G_OBJECT ( media ) , "state-changed" , G_CALLBACK ( jingle_rtp_state_changed_cb ) , session )
FUNCTION_CALL	23:1	24:53	5	g_signal_connect ( G_OBJECT ( media ) , "state-changed" , G_CALLBACK ( jingle_rtp_state_changed_cb ) , session )
CALLEE	23:1	23:1	6	g_signal_connect
LEAF_NODE	23:1	23:1	7	g_signal_connect
LEAF_NODE	23:17	23:17	6	(
ARGUMENT	23:18	23:18	6	G_OBJECT ( media )
FUNCTION_CALL	23:18	23:32	7	G_OBJECT ( media )
CALLEE	23:18	23:18	8	G_OBJECT
LEAF_NODE	23:18	23:18	9	G_OBJECT
LEAF_NODE	23:26	23:26	8	(
ARGUMENT	23:27	23:27	8	media
FIELD	23:27	23:27	9	media
LEAF_NODE	23:27	23:27	10	media
LEAF_NODE	23:32	23:32	8	)
LEAF_NODE	23:33	23:33	6	,
ARGUMENT	23:35	23:35	6	"state-changed"
FIELD	23:35	23:35	7	"state-changed"
LEAF_NODE	23:35	23:35	8	"state-changed"
LEAF_NODE	23:50	23:50	6	,
ARGUMENT	24:5	24:5	6	G_CALLBACK ( jingle_rtp_state_changed_cb )
FUNCTION_CALL	24:5	24:43	7	G_CALLBACK ( jingle_rtp_state_changed_cb )
CALLEE	24:5	24:5	8	G_CALLBACK
LEAF_NODE	24:5	24:5	9	G_CALLBACK
LEAF_NODE	24:15	24:15	8	(
ARGUMENT	24:16	24:16	8	jingle_rtp_state_changed_cb
FIELD	24:16	24:16	9	jingle_rtp_state_changed_cb
LEAF_NODE	24:16	24:16	10	jingle_rtp_state_changed_cb
LEAF_NODE	24:43	24:43	8	)
LEAF_NODE	24:44	24:44	6	,
ARGUMENT	24:46	24:46	6	session
FIELD	24:46	24:46	7	session
LEAF_NODE	24:46	24:46	8	session
LEAF_NODE	24:53	24:53	6	)
LEAF_NODE	24:54	24:54	4	;
EXPR_STATEMENT	25:1	26:50	3	g_signal_connect ( G_OBJECT ( media ) , "stream-info" , G_CALLBACK ( jingle_rtp_stream_info_cb ) , session ) ;
EXPR	25:1	25:1	4	g_signal_connect ( G_OBJECT ( media ) , "stream-info" , G_CALLBACK ( jingle_rtp_stream_info_cb ) , session )
FUNCTION_CALL	25:1	26:49	5	g_signal_connect ( G_OBJECT ( media ) , "stream-info" , G_CALLBACK ( jingle_rtp_stream_info_cb ) , session )
CALLEE	25:1	25:1	6	g_signal_connect
LEAF_NODE	25:1	25:1	7	g_signal_connect
LEAF_NODE	25:17	25:17	6	(
ARGUMENT	25:18	25:18	6	G_OBJECT ( media )
FUNCTION_CALL	25:18	25:32	7	G_OBJECT ( media )
CALLEE	25:18	25:18	8	G_OBJECT
LEAF_NODE	25:18	25:18	9	G_OBJECT
LEAF_NODE	25:26	25:26	8	(
ARGUMENT	25:27	25:27	8	media
FIELD	25:27	25:27	9	media
LEAF_NODE	25:27	25:27	10	media
LEAF_NODE	25:32	25:32	8	)
LEAF_NODE	25:33	25:33	6	,
ARGUMENT	25:35	25:35	6	"stream-info"
FIELD	25:35	25:35	7	"stream-info"
LEAF_NODE	25:35	25:35	8	"stream-info"
LEAF_NODE	25:48	25:48	6	,
ARGUMENT	26:3	26:3	6	G_CALLBACK ( jingle_rtp_stream_info_cb )
FUNCTION_CALL	26:3	26:39	7	G_CALLBACK ( jingle_rtp_stream_info_cb )
CALLEE	26:3	26:3	8	G_CALLBACK
LEAF_NODE	26:3	26:3	9	G_CALLBACK
LEAF_NODE	26:13	26:13	8	(
ARGUMENT	26:14	26:14	8	jingle_rtp_stream_info_cb
FIELD	26:14	26:14	9	jingle_rtp_stream_info_cb
LEAF_NODE	26:14	26:14	10	jingle_rtp_stream_info_cb
LEAF_NODE	26:39	26:39	8	)
LEAF_NODE	26:40	26:40	6	,
ARGUMENT	26:42	26:42	6	session
FIELD	26:42	26:42	7	session
LEAF_NODE	26:42	26:42	8	session
LEAF_NODE	26:49	26:49	6	)
LEAF_NODE	26:50	26:50	4	;
EXPR_STATEMENT	27:1	27:24	3	g_object_unref ( session ) ;
EXPR	27:1	27:1	4	g_object_unref ( session )
FUNCTION_CALL	27:1	27:23	5	g_object_unref ( session )
CALLEE	27:1	27:1	6	g_object_unref
LEAF_NODE	27:1	27:1	7	g_object_unref
LEAF_NODE	27:15	27:15	6	(
ARGUMENT	27:16	27:16	6	session
FIELD	27:16	27:16	7	session
LEAF_NODE	27:16	27:16	8	session
LEAF_NODE	27:23	27:23	6	)
LEAF_NODE	27:24	27:24	4	;
JUMP_STATEMENT	28:1	28:13	3	return media ;
KEYWORD	28:1	28:1	4	return
LEAF_NODE	28:1	28:1	5	return
DESTINATION	28:8	28:8	4	media
EXPR	28:8	28:8	5	media
FIELD	28:8	28:8	6	media
LEAF_NODE	28:8	28:8	7	media
LEAF_NODE	28:13	28:13	4	;
LEAF_NODE	29:0	29:0	2	}

SOURCE_FILE	2:0	10:0	0	
FUNCTION_DEF	2:0	8:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	jabber_parser_free
LEAF_NODE	2:5	2:5	3	jabber_parser_free
PARAMETER_LIST	2:23	2:40	2	( JabberStream * js )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:38	3	JabberStream * js
TYPE	2:24	2:37	4	JabberStream *
TYPE_NAME	2:24	2:24	5	JabberStream
LEAF_NODE	2:24	2:24	6	JabberStream
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	js
LEAF_NODE	2:38	2:38	5	js
LEAF_NODE	2:40	2:40	3	)
LEAF_NODE	2:42	2:42	2	{
STATEMENTS	3:1	3:1	2	
SELECTION	3:1	3:18	3	
KEYWORD	3:1	3:1	4	if
LEAF_NODE	3:1	3:1	5	if
LEAF_NODE	3:4	3:4	4	(
CONDITION	3:5	3:5	4	js -> context
EXPR	3:5	3:5	5	js -> context
FIELD	3:5	3:9	6	js -> context
LEAF_NODE	3:5	3:5	7	js
LEAF_NODE	3:7	3:7	7	->
LEAF_NODE	3:9	3:9	7	context
LEAF_NODE	3:16	3:16	4	)
STATEMENTS	3:18	7:1	4	
LEAF_NODE	3:18	3:18	5	{
STATEMENTS	4:2	6:2	5	
EXPR_STATEMENT	4:2	4:38	6	xmlParseChunk ( js -> context , NULL , 0 , 1 ) ;
EXPR	4:2	4:2	7	xmlParseChunk ( js -> context , NULL , 0 , 1 )
FUNCTION_CALL	4:2	4:37	8	xmlParseChunk ( js -> context , NULL , 0 , 1 )
CALLEE	4:2	4:2	9	xmlParseChunk
LEAF_NODE	4:2	4:2	10	xmlParseChunk
LEAF_NODE	4:15	4:15	9	(
ARGUMENT	4:16	4:16	9	js -> context
FIELD	4:16	4:20	10	js -> context
LEAF_NODE	4:16	4:16	11	js
LEAF_NODE	4:18	4:18	11	->
LEAF_NODE	4:20	4:20	11	context
LEAF_NODE	4:27	4:27	9	,
ARGUMENT	4:29	4:29	9	NULL
FIELD	4:29	4:29	10	NULL
LEAF_NODE	4:29	4:29	11	NULL
LEAF_NODE	4:33	4:33	9	,
ARGUMENT	4:34	4:34	9	0
FIELD	4:34	4:34	10	0
LEAF_NODE	4:34	4:34	11	0
LEAF_NODE	4:35	4:35	9	,
ARGUMENT	4:36	4:36	9	1
FIELD	4:36	4:36	10	1
LEAF_NODE	4:36	4:36	11	1
LEAF_NODE	4:37	4:37	9	)
LEAF_NODE	4:38	4:38	7	;
EXPR_STATEMENT	5:2	5:32	6	xmlFreeParserCtxt ( js -> context ) ;
EXPR	5:2	5:2	7	xmlFreeParserCtxt ( js -> context )
FUNCTION_CALL	5:2	5:31	8	xmlFreeParserCtxt ( js -> context )
CALLEE	5:2	5:2	9	xmlFreeParserCtxt
LEAF_NODE	5:2	5:2	10	xmlFreeParserCtxt
LEAF_NODE	5:19	5:19	9	(
ARGUMENT	5:20	5:20	9	js -> context
FIELD	5:20	5:24	10	js -> context
LEAF_NODE	5:20	5:20	11	js
LEAF_NODE	5:22	5:22	11	->
LEAF_NODE	5:24	5:24	11	context
LEAF_NODE	5:31	5:31	9	)
LEAF_NODE	5:32	5:32	7	;
EXPR_STATEMENT	6:2	6:20	6	js -> context = NULL ;
EXPR	6:2	6:2	7	js -> context = NULL
ASSIGN	6:2	6:16	8	js -> context = NULL
LVAL	6:2	6:2	9	js -> context
FIELD	6:2	6:6	10	js -> context
LEAF_NODE	6:2	6:2	11	js
LEAF_NODE	6:4	6:4	11	->
LEAF_NODE	6:6	6:6	11	context
ASSIGN_OP	6:14	6:14	9	=
LEAF_NODE	6:14	6:14	10	=
RVAL	6:16	6:16	9	NULL
FIELD	6:16	6:16	10	NULL
LEAF_NODE	6:16	6:16	11	NULL
LEAF_NODE	6:20	6:20	7	;
LEAF_NODE	7:1	7:1	5	}
LEAF_NODE	8:0	8:0	2	}
FUNCTION_DEF	10:0	16:0	1	
RETURN_TYPE	10:0	10:0	2	void
TYPE_NAME	10:0	10:0	3	void
LEAF_NODE	10:0	10:0	4	void
FUNCTION_NAME	10:5	10:5	2	jabber_parser_free
LEAF_NODE	10:5	10:5	3	jabber_parser_free
PARAMETER_LIST	10:23	10:40	2	( JabberStream * js )
LEAF_NODE	10:23	10:23	3	(
PARAMETER_DECL	10:24	10:38	3	JabberStream * js
TYPE	10:24	10:37	4	JabberStream *
TYPE_NAME	10:24	10:24	5	JabberStream
LEAF_NODE	10:24	10:24	6	JabberStream
POINTER	10:37	10:37	5	*
LEAF_NODE	10:37	10:37	6	*
NAME	10:38	10:38	4	js
LEAF_NODE	10:38	10:38	5	js
LEAF_NODE	10:40	10:40	3	)
LEAF_NODE	10:42	10:42	2	{
STATEMENTS	11:1	11:1	2	
SELECTION	11:1	11:18	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	js -> context
EXPR	11:5	11:5	5	js -> context
FIELD	11:5	11:9	6	js -> context
LEAF_NODE	11:5	11:5	7	js
LEAF_NODE	11:7	11:7	7	->
LEAF_NODE	11:9	11:9	7	context
LEAF_NODE	11:16	11:16	4	)
STATEMENTS	11:18	15:1	4	
LEAF_NODE	11:18	11:18	5	{
STATEMENTS	12:2	14:2	5	
EXPR_STATEMENT	12:2	12:38	6	xmlParseChunk ( js -> context , NULL , 0 , 1 ) ;
EXPR	12:2	12:2	7	xmlParseChunk ( js -> context , NULL , 0 , 1 )
FUNCTION_CALL	12:2	12:37	8	xmlParseChunk ( js -> context , NULL , 0 , 1 )
CALLEE	12:2	12:2	9	xmlParseChunk
LEAF_NODE	12:2	12:2	10	xmlParseChunk
LEAF_NODE	12:15	12:15	9	(
ARGUMENT	12:16	12:16	9	js -> context
FIELD	12:16	12:20	10	js -> context
LEAF_NODE	12:16	12:16	11	js
LEAF_NODE	12:18	12:18	11	->
LEAF_NODE	12:20	12:20	11	context
LEAF_NODE	12:27	12:27	9	,
ARGUMENT	12:29	12:29	9	NULL
FIELD	12:29	12:29	10	NULL
LEAF_NODE	12:29	12:29	11	NULL
LEAF_NODE	12:33	12:33	9	,
ARGUMENT	12:34	12:34	9	0
FIELD	12:34	12:34	10	0
LEAF_NODE	12:34	12:34	11	0
LEAF_NODE	12:35	12:35	9	,
ARGUMENT	12:36	12:36	9	1
FIELD	12:36	12:36	10	1
LEAF_NODE	12:36	12:36	11	1
LEAF_NODE	12:37	12:37	9	)
LEAF_NODE	12:38	12:38	7	;
EXPR_STATEMENT	13:2	13:32	6	xmlFreeParserCtxt ( js -> context ) ;
EXPR	13:2	13:2	7	xmlFreeParserCtxt ( js -> context )
FUNCTION_CALL	13:2	13:31	8	xmlFreeParserCtxt ( js -> context )
CALLEE	13:2	13:2	9	xmlFreeParserCtxt
LEAF_NODE	13:2	13:2	10	xmlFreeParserCtxt
LEAF_NODE	13:19	13:19	9	(
ARGUMENT	13:20	13:20	9	js -> context
FIELD	13:20	13:24	10	js -> context
LEAF_NODE	13:20	13:20	11	js
LEAF_NODE	13:22	13:22	11	->
LEAF_NODE	13:24	13:24	11	context
LEAF_NODE	13:31	13:31	9	)
LEAF_NODE	13:32	13:32	7	;
EXPR_STATEMENT	14:2	14:20	6	js -> context = NULL ;
EXPR	14:2	14:2	7	js -> context = NULL
ASSIGN	14:2	14:16	8	js -> context = NULL
LVAL	14:2	14:2	9	js -> context
FIELD	14:2	14:6	10	js -> context
LEAF_NODE	14:2	14:2	11	js
LEAF_NODE	14:4	14:4	11	->
LEAF_NODE	14:6	14:6	11	context
ASSIGN_OP	14:14	14:14	9	=
LEAF_NODE	14:14	14:14	10	=
RVAL	14:16	14:16	9	NULL
FIELD	14:16	14:16	10	NULL
LEAF_NODE	14:16	14:16	11	NULL
LEAF_NODE	14:20	14:20	7	;
LEAF_NODE	15:1	15:1	5	}
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	5:0	1	
RETURN_TYPE	2:0	2:18	2	PurpleNotifyUiOps *
TYPE_NAME	2:0	2:0	3	PurpleNotifyUiOps
LEAF_NODE	2:0	2:0	4	PurpleNotifyUiOps
LEAF_NODE	2:18	2:18	3	*
FUNCTION_NAME	2:19	2:19	2	finch_notify_get_ui_ops
LEAF_NODE	2:19	2:19	3	finch_notify_get_ui_ops
PARAMETER_LIST	2:42	2:43	2	( )
LEAF_NODE	2:42	2:42	3	(
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:12	3	return & ops ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	& ops
EXPR	4:8	4:8	5	& ops
UNARY_EXPR	4:8	4:9	6	& ops
UNARY_OPERATOR	4:8	4:8	7	&
LEAF_NODE	4:8	4:8	8	&
FIELD	4:9	4:9	7	ops
LEAF_NODE	4:9	4:9	8	ops
LEAF_NODE	4:12	4:12	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	49:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	gnt_tree_key_pressed
LEAF_NODE	2:0	2:0	3	gnt_tree_key_pressed
PARAMETER_LIST	2:20	2:56	2	( GntWidget * widget , const char * text )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:32	3	GntWidget * widget
TYPE	2:21	2:31	4	GntWidget *
TYPE_NAME	2:21	2:21	5	GntWidget
LEAF_NODE	2:21	2:21	6	GntWidget
POINTER	2:31	2:31	5	*
LEAF_NODE	2:31	2:31	6	*
NAME	2:32	2:32	4	widget
LEAF_NODE	2:32	2:32	5	widget
LEAF_NODE	2:38	2:38	3	,
PARAMETER_DECL	2:40	2:52	3	const char * text
TYPE	2:40	2:51	4	const char *
TYPE_NAME	2:40	2:46	5	const char
LEAF_NODE	2:40	2:40	6	const
LEAF_NODE	2:46	2:46	6	char
POINTER	2:51	2:51	5	*
LEAF_NODE	2:51	2:51	6	*
NAME	2:52	2:52	4	text
LEAF_NODE	2:52	2:52	5	text
LEAF_NODE	2:56	2:56	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	48:1	2	
SIMPLE_DECL	4:1	4:33	3	GntTree * tree ; tree = GNT_TREE ( widget ) ;
VAR_DECL	4:1	4:10	4	GntTree * tree ; tree = GNT_TREE ( widget )
TYPE	4:1	4:9	5	GntTree *
TYPE_NAME	4:1	4:1	6	GntTree
LEAF_NODE	4:1	4:1	7	GntTree
POINTER	4:9	4:9	6	*
LEAF_NODE	4:9	4:9	7	*
NAME	4:10	4:10	5	tree
LEAF_NODE	4:10	4:10	6	tree
LEAF_NODE	0:0	0:0	5	;
INIT	4:10	4:10	5	tree = GNT_TREE ( widget )
ASSIGN	4:10	4:17	6	tree = GNT_TREE ( widget )
LVAL	4:10	4:10	7	tree
NAME	4:10	4:10	8	tree
LEAF_NODE	4:10	4:10	9	tree
ASSIGN_OP	4:15	4:15	7	=
LEAF_NODE	4:15	4:15	8	=
RVAL	4:17	4:17	7	GNT_TREE ( widget )
FUNCTION_CALL	4:17	4:32	8	GNT_TREE ( widget )
CALLEE	4:17	4:17	9	GNT_TREE
LEAF_NODE	4:17	4:17	10	GNT_TREE
LEAF_NODE	4:25	4:25	9	(
ARGUMENT	4:26	4:26	9	widget
FIELD	4:26	4:26	10	widget
LEAF_NODE	4:26	4:26	11	widget
LEAF_NODE	4:32	4:32	9	)
LEAF_NODE	4:33	4:33	4	;
SIMPLE_DECL	5:1	5:32	3	GntTreeRow * old ; old = tree -> current ;
VAR_DECL	5:1	5:13	4	GntTreeRow * old ; old = tree -> current
TYPE	5:1	5:12	5	GntTreeRow *
TYPE_NAME	5:1	5:1	6	GntTreeRow
LEAF_NODE	5:1	5:1	7	GntTreeRow
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	old
LEAF_NODE	5:13	5:13	6	old
LEAF_NODE	0:0	0:0	5	;
INIT	5:13	5:13	5	old = tree -> current
ASSIGN	5:13	5:19	6	old = tree -> current
LVAL	5:13	5:13	7	old
NAME	5:13	5:13	8	old
LEAF_NODE	5:13	5:13	9	old
ASSIGN_OP	5:17	5:17	7	=
LEAF_NODE	5:17	5:17	8	=
RVAL	5:19	5:19	7	tree -> current
FIELD	5:19	5:25	8	tree -> current
LEAF_NODE	5:19	5:19	9	tree
LEAF_NODE	5:23	5:23	9	->
LEAF_NODE	5:25	5:25	9	current
LEAF_NODE	5:32	5:32	4	;
SELECTION	6:1	6:41	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	text [ 0 ] == '\r' || text [ 0 ] == '\n'
EXPR	6:5	6:5	5	text [ 0 ] == '\r' || text [ 0 ] == '\n'
OR	6:5	6:24	6	text [ 0 ] == '\r' || text [ 0 ] == '\n'
EXPR	6:5	6:16	7	text [ 0 ] == '\r'
FIELD	6:5	6:11	8	text [ 0 ]
LEAF_NODE	6:5	6:5	9	text
LEAF_NODE	6:9	6:9	9	[
EXPR	6:10	6:10	9	0
FIELD	6:10	6:10	10	0
LEAF_NODE	6:10	6:10	11	0
LEAF_NODE	6:11	6:11	9	]
EQ_OPERATOR	6:13	6:13	8	==
LEAF_NODE	6:13	6:13	9	==
FIELD	6:16	6:16	8	'\r'
LEAF_NODE	6:16	6:16	9	'\r'
LEAF_NODE	6:21	6:21	7	||
EXPR	6:24	6:35	7	text [ 0 ] == '\n'
FIELD	6:24	6:30	8	text [ 0 ]
LEAF_NODE	6:24	6:24	9	text
LEAF_NODE	6:28	6:28	9	[
EXPR	6:29	6:29	9	0
FIELD	6:29	6:29	10	0
LEAF_NODE	6:29	6:29	11	0
LEAF_NODE	6:30	6:30	9	]
EQ_OPERATOR	6:32	6:32	8	==
LEAF_NODE	6:32	6:32	9	==
FIELD	6:35	6:35	8	'\n'
LEAF_NODE	6:35	6:35	9	'\n'
LEAF_NODE	6:39	6:39	4	)
STATEMENTS	6:41	9:1	4	
LEAF_NODE	6:41	6:41	5	{
STATEMENTS	7:2	8:2	5	
EXPR_STATEMENT	7:2	7:18	6	end_search ( tree ) ;
EXPR	7:2	7:2	7	end_search ( tree )
FUNCTION_CALL	7:2	7:17	8	end_search ( tree )
CALLEE	7:2	7:2	9	end_search
LEAF_NODE	7:2	7:2	10	end_search
LEAF_NODE	7:12	7:12	9	(
ARGUMENT	7:13	7:13	9	tree
FIELD	7:13	7:13	10	tree
LEAF_NODE	7:13	7:13	11	tree
LEAF_NODE	7:17	7:17	9	)
LEAF_NODE	7:18	7:18	7	;
EXPR_STATEMENT	8:2	8:29	6	gnt_widget_activate ( widget ) ;
EXPR	8:2	8:2	7	gnt_widget_activate ( widget )
FUNCTION_CALL	8:2	8:28	8	gnt_widget_activate ( widget )
CALLEE	8:2	8:2	9	gnt_widget_activate
LEAF_NODE	8:2	8:2	10	gnt_widget_activate
LEAF_NODE	8:21	8:21	9	(
ARGUMENT	8:22	8:22	9	widget
FIELD	8:22	8:22	10	widget
LEAF_NODE	8:22	8:22	11	widget
LEAF_NODE	8:28	8:28	9	)
LEAF_NODE	8:29	8:29	7	;
LEAF_NODE	9:1	9:1	5	}
SELECTION	9:3	9:8	3	
KEYWORD	9:3	9:3	4	else
LEAF_NODE	9:3	9:3	5	else
STATEMENTS	9:8	9:8	4	
SELECTION	9:8	9:32	5	
KEYWORD	9:8	9:8	6	if
LEAF_NODE	9:8	9:8	7	if
LEAF_NODE	9:11	9:11	6	(
CONDITION	9:12	9:12	6	tree -> priv -> search
EXPR	9:12	9:12	7	tree -> priv -> search
FIELD	9:12	9:24	8	tree -> priv -> search
LEAF_NODE	9:12	9:12	9	tree
LEAF_NODE	9:16	9:16	9	->
LEAF_NODE	9:18	9:18	9	priv
LEAF_NODE	9:22	9:22	9	->
LEAF_NODE	9:24	9:24	9	search
LEAF_NODE	9:30	9:30	6	)
STATEMENTS	9:32	26:1	6	
LEAF_NODE	9:32	9:32	7	{
STATEMENTS	10:2	25:2	7	
SIMPLE_DECL	10:2	10:25	8	gboolean changed ; changed = TRUE ;
VAR_DECL	10:2	10:11	9	gboolean changed ; changed = TRUE
TYPE	10:2	10:2	10	gboolean
TYPE_NAME	10:2	10:2	11	gboolean
LEAF_NODE	10:2	10:2	12	gboolean
NAME	10:11	10:11	10	changed
LEAF_NODE	10:11	10:11	11	changed
LEAF_NODE	0:0	0:0	10	;
INIT	10:11	10:11	10	changed = TRUE
ASSIGN	10:11	10:21	11	changed = TRUE
LVAL	10:11	10:11	12	changed
NAME	10:11	10:11	13	changed
LEAF_NODE	10:11	10:11	14	changed
ASSIGN_OP	10:19	10:19	12	=
LEAF_NODE	10:19	10:19	13	=
RVAL	10:21	10:21	12	TRUE
FIELD	10:21	10:21	13	TRUE
LEAF_NODE	10:21	10:21	14	TRUE
LEAF_NODE	10:25	10:25	9	;
SELECTION	11:2	11:32	8	
KEYWORD	11:2	11:2	9	if
LEAF_NODE	11:2	11:2	10	if
LEAF_NODE	11:5	11:5	9	(
CONDITION	11:6	11:6	9	g_unichar_isprint ( * text )
EXPR	11:6	11:6	10	g_unichar_isprint ( * text )
FUNCTION_CALL	11:6	11:29	11	g_unichar_isprint ( * text )
CALLEE	11:6	11:6	12	g_unichar_isprint
LEAF_NODE	11:6	11:6	13	g_unichar_isprint
LEAF_NODE	11:23	11:23	12	(
ARGUMENT	11:24	11:24	12	* text
UNARY_EXPR	11:24	11:25	13	* text
UNARY_OPERATOR	11:24	11:24	14	*
LEAF_NODE	11:24	11:24	15	*
FIELD	11:25	11:25	14	text
LEAF_NODE	11:25	11:25	15	text
LEAF_NODE	11:29	11:29	12	)
LEAF_NODE	11:30	11:30	9	)
STATEMENTS	11:32	13:2	9	
LEAF_NODE	11:32	11:32	10	{
STATEMENTS	12:3	12:3	10	
EXPR_STATEMENT	12:3	12:68	11	tree -> priv -> search = g_string_append_c ( tree -> priv -> search , * text ) ;
EXPR	12:3	12:3	12	tree -> priv -> search = g_string_append_c ( tree -> priv -> search , * text )
ASSIGN	12:3	12:24	13	tree -> priv -> search = g_string_append_c ( tree -> priv -> search , * text )
LVAL	12:3	12:3	14	tree -> priv -> search
FIELD	12:3	12:15	15	tree -> priv -> search
LEAF_NODE	12:3	12:3	16	tree
LEAF_NODE	12:7	12:7	16	->
LEAF_NODE	12:9	12:9	16	priv
LEAF_NODE	12:13	12:13	16	->
LEAF_NODE	12:15	12:15	16	search
ASSIGN_OP	12:22	12:22	14	=
LEAF_NODE	12:22	12:22	15	=
RVAL	12:24	12:24	14	g_string_append_c ( tree -> priv -> search , * text )
FUNCTION_CALL	12:24	12:67	15	g_string_append_c ( tree -> priv -> search , * text )
CALLEE	12:24	12:24	16	g_string_append_c
LEAF_NODE	12:24	12:24	17	g_string_append_c
LEAF_NODE	12:41	12:41	16	(
ARGUMENT	12:42	12:42	16	tree -> priv -> search
FIELD	12:42	12:54	17	tree -> priv -> search
LEAF_NODE	12:42	12:42	18	tree
LEAF_NODE	12:46	12:46	18	->
LEAF_NODE	12:48	12:48	18	priv
LEAF_NODE	12:52	12:52	18	->
LEAF_NODE	12:54	12:54	18	search
LEAF_NODE	12:60	12:60	16	,
ARGUMENT	12:62	12:62	16	* text
UNARY_EXPR	12:62	12:63	17	* text
UNARY_OPERATOR	12:62	12:62	18	*
LEAF_NODE	12:62	12:62	19	*
FIELD	12:63	12:63	18	text
LEAF_NODE	12:63	12:63	19	text
LEAF_NODE	12:67	12:67	16	)
LEAF_NODE	12:68	12:68	12	;
LEAF_NODE	13:2	13:2	10	}
SELECTION	13:4	13:9	8	
KEYWORD	13:4	13:4	9	else
LEAF_NODE	13:4	13:4	10	else
STATEMENTS	13:9	13:9	9	
SELECTION	13:9	13:59	10	
KEYWORD	13:9	13:9	11	if
LEAF_NODE	13:9	13:9	12	if
LEAF_NODE	13:12	13:12	11	(
CONDITION	13:13	13:13	11	g_utf8_collate ( text , GNT_KEY_BACKSPACE ) == 0
EXPR	13:13	13:56	12	g_utf8_collate ( text , GNT_KEY_BACKSPACE ) == 0
FUNCTION_CALL	13:13	13:51	13	g_utf8_collate ( text , GNT_KEY_BACKSPACE )
CALLEE	13:13	13:13	14	g_utf8_collate
LEAF_NODE	13:13	13:13	15	g_utf8_collate
LEAF_NODE	13:27	13:27	14	(
ARGUMENT	13:28	13:28	14	text
FIELD	13:28	13:28	15	text
LEAF_NODE	13:28	13:28	16	text
LEAF_NODE	13:32	13:32	14	,
ARGUMENT	13:34	13:34	14	GNT_KEY_BACKSPACE
FIELD	13:34	13:34	15	GNT_KEY_BACKSPACE
LEAF_NODE	13:34	13:34	16	GNT_KEY_BACKSPACE
LEAF_NODE	13:51	13:51	14	)
EQ_OPERATOR	13:53	13:53	13	==
LEAF_NODE	13:53	13:53	14	==
FIELD	13:56	13:56	13	0
LEAF_NODE	13:56	13:56	14	0
LEAF_NODE	13:57	13:57	11	)
STATEMENTS	13:59	16:2	11	
LEAF_NODE	13:59	13:59	12	{
STATEMENTS	14:3	14:3	12	
SELECTION	14:3	15:4	13	
KEYWORD	14:3	14:3	14	if
LEAF_NODE	14:3	14:3	15	if
LEAF_NODE	14:6	14:6	14	(
CONDITION	14:7	14:7	14	tree -> priv -> search -> len
EXPR	14:7	14:7	15	tree -> priv -> search -> len
FIELD	14:7	14:27	16	tree -> priv -> search -> len
LEAF_NODE	14:7	14:7	17	tree
LEAF_NODE	14:11	14:11	17	->
LEAF_NODE	14:13	14:13	17	priv
LEAF_NODE	14:17	14:17	17	->
LEAF_NODE	14:19	14:19	17	search
LEAF_NODE	14:25	14:25	17	->
LEAF_NODE	14:27	14:27	17	len
LEAF_NODE	14:30	14:30	14	)
STATEMENTS	15:4	15:4	14	
EXPR_STATEMENT	15:4	15:61	15	tree -> priv -> search -> str [ -- tree -> priv -> search -> len ] = '\0' ;
EXPR	15:4	15:4	16	tree -> priv -> search -> str [ -- tree -> priv -> search -> len ] = '\0'
ASSIGN	15:4	15:57	17	tree -> priv -> search -> str [ -- tree -> priv -> search -> len ] = '\0'
LVAL	15:4	15:4	18	tree -> priv -> search -> str [ -- tree -> priv -> search -> len ]
FIELD	15:4	15:53	19	tree -> priv -> search -> str [ -- tree -> priv -> search -> len ]
LEAF_NODE	15:4	15:4	20	tree
LEAF_NODE	15:8	15:8	20	->
LEAF_NODE	15:10	15:10	20	priv
LEAF_NODE	15:14	15:14	20	->
LEAF_NODE	15:16	15:16	20	search
LEAF_NODE	15:22	15:22	20	->
LEAF_NODE	15:24	15:24	20	str
LEAF_NODE	15:27	15:27	20	[
EXPR	15:28	15:30	20	-- tree -> priv -> search -> len
LEAF_NODE	15:28	15:28	21	--
FIELD	15:30	15:50	21	tree -> priv -> search -> len
LEAF_NODE	15:30	15:30	22	tree
LEAF_NODE	15:34	15:34	22	->
LEAF_NODE	15:36	15:36	22	priv
LEAF_NODE	15:40	15:40	22	->
LEAF_NODE	15:42	15:42	22	search
LEAF_NODE	15:48	15:48	22	->
LEAF_NODE	15:50	15:50	22	len
LEAF_NODE	15:53	15:53	20	]
ASSIGN_OP	15:55	15:55	18	=
LEAF_NODE	15:55	15:55	19	=
RVAL	15:57	15:57	18	'\0'
FIELD	15:57	15:57	19	'\0'
LEAF_NODE	15:57	15:57	20	'\0'
LEAF_NODE	15:61	15:61	16	;
LEAF_NODE	16:2	16:2	12	}
SELECTION	16:4	17:3	8	
KEYWORD	16:4	16:4	9	else
LEAF_NODE	16:4	16:4	10	else
STATEMENTS	17:3	17:3	9	
EXPR_STATEMENT	17:3	17:18	10	changed = FALSE ;
EXPR	17:3	17:3	11	changed = FALSE
ASSIGN	17:3	17:13	12	changed = FALSE
LVAL	17:3	17:3	13	changed
FIELD	17:3	17:3	14	changed
LEAF_NODE	17:3	17:3	15	changed
ASSIGN_OP	17:11	17:11	13	=
LEAF_NODE	17:11	17:11	14	=
RVAL	17:13	17:13	13	FALSE
FIELD	17:13	17:13	14	FALSE
LEAF_NODE	17:13	17:13	15	FALSE
LEAF_NODE	17:18	17:18	11	;
SELECTION	18:2	18:15	8	
KEYWORD	18:2	18:2	9	if
LEAF_NODE	18:2	18:2	10	if
LEAF_NODE	18:5	18:5	9	(
CONDITION	18:6	18:6	9	changed
EXPR	18:6	18:6	10	changed
FIELD	18:6	18:6	11	changed
LEAF_NODE	18:6	18:6	12	changed
LEAF_NODE	18:13	18:13	9	)
STATEMENTS	18:15	20:2	9	
LEAF_NODE	18:15	18:15	10	{
STATEMENTS	19:3	19:3	10	
EXPR_STATEMENT	19:3	19:20	11	redraw_tree ( tree ) ;
EXPR	19:3	19:3	12	redraw_tree ( tree )
FUNCTION_CALL	19:3	19:19	13	redraw_tree ( tree )
CALLEE	19:3	19:3	14	redraw_tree
LEAF_NODE	19:3	19:3	15	redraw_tree
LEAF_NODE	19:14	19:14	14	(
ARGUMENT	19:15	19:15	14	tree
FIELD	19:15	19:15	15	tree
LEAF_NODE	19:15	19:15	16	tree
LEAF_NODE	19:19	19:19	14	)
LEAF_NODE	19:20	19:20	12	;
LEAF_NODE	20:2	20:2	10	}
SELECTION	20:4	20:9	8	
KEYWORD	20:4	20:4	9	else
LEAF_NODE	20:4	20:4	10	else
STATEMENTS	20:9	22:2	9	
LEAF_NODE	20:9	20:9	10	{
STATEMENTS	21:3	21:3	10	
EXPR_STATEMENT	21:3	21:60	11	gnt_bindable_perform_action_key ( GNT_BINDABLE ( tree ) , text ) ;
EXPR	21:3	21:3	12	gnt_bindable_perform_action_key ( GNT_BINDABLE ( tree ) , text )
FUNCTION_CALL	21:3	21:59	13	gnt_bindable_perform_action_key ( GNT_BINDABLE ( tree ) , text )
CALLEE	21:3	21:3	14	gnt_bindable_perform_action_key
LEAF_NODE	21:3	21:3	15	gnt_bindable_perform_action_key
LEAF_NODE	21:34	21:34	14	(
ARGUMENT	21:35	21:35	14	GNT_BINDABLE ( tree )
FUNCTION_CALL	21:35	21:52	15	GNT_BINDABLE ( tree )
CALLEE	21:35	21:35	16	GNT_BINDABLE
LEAF_NODE	21:35	21:35	17	GNT_BINDABLE
LEAF_NODE	21:47	21:47	16	(
ARGUMENT	21:48	21:48	16	tree
FIELD	21:48	21:48	17	tree
LEAF_NODE	21:48	21:48	18	tree
LEAF_NODE	21:52	21:52	16	)
LEAF_NODE	21:53	21:53	14	,
ARGUMENT	21:55	21:55	14	text
FIELD	21:55	21:55	15	text
LEAF_NODE	21:55	21:55	16	text
LEAF_NODE	21:59	21:59	14	)
LEAF_NODE	21:60	21:60	12	;
LEAF_NODE	22:2	22:2	10	}
EXPR_STATEMENT	23:2	23:45	8	g_source_remove ( tree -> priv -> search_timeout ) ;
EXPR	23:2	23:2	9	g_source_remove ( tree -> priv -> search_timeout )
FUNCTION_CALL	23:2	23:44	10	g_source_remove ( tree -> priv -> search_timeout )
CALLEE	23:2	23:2	11	g_source_remove
LEAF_NODE	23:2	23:2	12	g_source_remove
LEAF_NODE	23:17	23:17	11	(
ARGUMENT	23:18	23:18	11	tree -> priv -> search_timeout
FIELD	23:18	23:30	12	tree -> priv -> search_timeout
LEAF_NODE	23:18	23:18	13	tree
LEAF_NODE	23:22	23:22	13	->
LEAF_NODE	23:24	23:24	13	priv
LEAF_NODE	23:28	23:28	13	->
LEAF_NODE	23:30	23:30	13	search_timeout
LEAF_NODE	23:44	23:44	11	)
LEAF_NODE	23:45	23:45	9	;
EXPR_STATEMENT	24:2	24:92	8	tree -> priv -> search_timeout = g_timeout_add_seconds ( SEARCH_TIMEOUT_S , search_timeout , tree ) ;
EXPR	24:2	24:2	9	tree -> priv -> search_timeout = g_timeout_add_seconds ( SEARCH_TIMEOUT_S , search_timeout , tree )
ASSIGN	24:2	24:31	10	tree -> priv -> search_timeout = g_timeout_add_seconds ( SEARCH_TIMEOUT_S , search_timeout , tree )
LVAL	24:2	24:2	11	tree -> priv -> search_timeout
FIELD	24:2	24:14	12	tree -> priv -> search_timeout
LEAF_NODE	24:2	24:2	13	tree
LEAF_NODE	24:6	24:6	13	->
LEAF_NODE	24:8	24:8	13	priv
LEAF_NODE	24:12	24:12	13	->
LEAF_NODE	24:14	24:14	13	search_timeout
ASSIGN_OP	24:29	24:29	11	=
LEAF_NODE	24:29	24:29	12	=
RVAL	24:31	24:31	11	g_timeout_add_seconds ( SEARCH_TIMEOUT_S , search_timeout , tree )
FUNCTION_CALL	24:31	24:91	12	g_timeout_add_seconds ( SEARCH_TIMEOUT_S , search_timeout , tree )
CALLEE	24:31	24:31	13	g_timeout_add_seconds
LEAF_NODE	24:31	24:31	14	g_timeout_add_seconds
LEAF_NODE	24:52	24:52	13	(
ARGUMENT	24:53	24:53	13	SEARCH_TIMEOUT_S
FIELD	24:53	24:53	14	SEARCH_TIMEOUT_S
LEAF_NODE	24:53	24:53	15	SEARCH_TIMEOUT_S
LEAF_NODE	24:69	24:69	13	,
ARGUMENT	24:71	24:71	13	search_timeout
FIELD	24:71	24:71	14	search_timeout
LEAF_NODE	24:71	24:71	15	search_timeout
LEAF_NODE	24:85	24:85	13	,
ARGUMENT	24:87	24:87	13	tree
FIELD	24:87	24:87	14	tree
LEAF_NODE	24:87	24:87	15	tree
LEAF_NODE	24:91	24:91	13	)
LEAF_NODE	24:92	24:92	9	;
JUMP_STATEMENT	25:2	25:13	8	return TRUE ;
KEYWORD	25:2	25:2	9	return
LEAF_NODE	25:2	25:2	10	return
DESTINATION	25:9	25:9	9	TRUE
EXPR	25:9	25:9	10	TRUE
FIELD	25:9	25:9	11	TRUE
LEAF_NODE	25:9	25:9	12	TRUE
LEAF_NODE	25:13	25:13	9	;
LEAF_NODE	26:1	26:1	7	}
SELECTION	26:3	26:8	3	
KEYWORD	26:3	26:3	4	else
LEAF_NODE	26:3	26:3	5	else
STATEMENTS	26:8	26:8	4	
SELECTION	26:8	26:44	5	
KEYWORD	26:8	26:8	6	if
LEAF_NODE	26:8	26:8	7	if
LEAF_NODE	26:11	26:11	6	(
CONDITION	26:12	26:12	6	text [ 0 ] == ' ' && text [ 1 ] == 0
EXPR	26:12	26:12	7	text [ 0 ] == ' ' && text [ 1 ] == 0
AND	26:12	26:30	8	text [ 0 ] == ' ' && text [ 1 ] == 0
EXPR	26:12	26:23	9	text [ 0 ] == ' '
FIELD	26:12	26:18	10	text [ 0 ]
LEAF_NODE	26:12	26:12	11	text
LEAF_NODE	26:16	26:16	11	[
EXPR	26:17	26:17	11	0
FIELD	26:17	26:17	12	0
LEAF_NODE	26:17	26:17	13	0
LEAF_NODE	26:18	26:18	11	]
EQ_OPERATOR	26:20	26:20	10	==
LEAF_NODE	26:20	26:20	11	==
FIELD	26:23	26:23	10	' '
LEAF_NODE	26:23	26:23	11	' '
LEAF_NODE	26:27	26:27	9	&&
EXPR	26:30	26:41	9	text [ 1 ] == 0
FIELD	26:30	26:36	10	text [ 1 ]
LEAF_NODE	26:30	26:30	11	text
LEAF_NODE	26:34	26:34	11	[
EXPR	26:35	26:35	11	1
FIELD	26:35	26:35	12	1
LEAF_NODE	26:35	26:35	13	1
LEAF_NODE	26:36	26:36	11	]
EQ_OPERATOR	26:38	26:38	10	==
LEAF_NODE	26:38	26:38	11	==
FIELD	26:41	26:41	10	0
LEAF_NODE	26:41	26:41	11	0
LEAF_NODE	26:42	26:42	6	)
STATEMENTS	26:44	41:1	6	
LEAF_NODE	26:44	26:44	7	{
STATEMENTS	28:2	35:2	7	
SIMPLE_DECL	28:2	28:33	8	GntTreeRow * row ; row = tree -> current ;
VAR_DECL	28:2	28:14	9	GntTreeRow * row ; row = tree -> current
TYPE	28:2	28:13	10	GntTreeRow *
TYPE_NAME	28:2	28:2	11	GntTreeRow
LEAF_NODE	28:2	28:2	12	GntTreeRow
POINTER	28:13	28:13	11	*
LEAF_NODE	28:13	28:13	12	*
NAME	28:14	28:14	10	row
LEAF_NODE	28:14	28:14	11	row
LEAF_NODE	0:0	0:0	10	;
INIT	28:14	28:14	10	row = tree -> current
ASSIGN	28:14	28:20	11	row = tree -> current
LVAL	28:14	28:14	12	row
NAME	28:14	28:14	13	row
LEAF_NODE	28:14	28:14	14	row
ASSIGN_OP	28:18	28:18	12	=
LEAF_NODE	28:18	28:18	13	=
RVAL	28:20	28:20	12	tree -> current
FIELD	28:20	28:26	13	tree -> current
LEAF_NODE	28:20	28:20	14	tree
LEAF_NODE	28:24	28:24	14	->
LEAF_NODE	28:26	28:26	14	current
LEAF_NODE	28:33	28:33	9	;
SELECTION	29:2	30:2	8	
KEYWORD	29:2	29:2	9	if
LEAF_NODE	29:2	29:2	10	if
LEAF_NODE	29:5	29:5	9	(
CONDITION	29:6	29:6	9	row && row -> child
EXPR	29:6	29:6	10	row && row -> child
AND	29:6	29:13	11	row && row -> child
EXPR	29:6	29:6	12	row
FIELD	29:6	29:6	13	row
LEAF_NODE	29:6	29:6	14	row
LEAF_NODE	29:10	29:10	12	&&
EXPR	29:13	29:13	12	row -> child
FIELD	29:13	29:18	13	row -> child
LEAF_NODE	29:13	29:13	14	row
LEAF_NODE	29:16	29:16	14	->
LEAF_NODE	29:18	29:18	14	child
LEAF_NODE	29:23	29:23	9	)
STATEMENTS	30:2	34:2	9	
LEAF_NODE	30:2	30:2	10	{
STATEMENTS	31:3	33:3	10	
EXPR_STATEMENT	31:3	31:35	11	row -> collapsed = ! row -> collapsed ;
EXPR	31:3	31:3	12	row -> collapsed = ! row -> collapsed
ASSIGN	31:3	31:20	13	row -> collapsed = ! row -> collapsed
LVAL	31:3	31:3	14	row -> collapsed
FIELD	31:3	31:8	15	row -> collapsed
LEAF_NODE	31:3	31:3	16	row
LEAF_NODE	31:6	31:6	16	->
LEAF_NODE	31:8	31:8	16	collapsed
ASSIGN_OP	31:18	31:18	14	=
LEAF_NODE	31:18	31:18	15	=
RVAL	31:20	31:20	14	! row -> collapsed
UNARY_EXPR	31:20	31:21	15	! row -> collapsed
UNARY_OPERATOR	31:20	31:20	16	!
LEAF_NODE	31:20	31:20	17	!
FIELD	31:21	31:26	16	row -> collapsed
LEAF_NODE	31:21	31:21	17	row
LEAF_NODE	31:24	31:24	17	->
LEAF_NODE	31:26	31:26	17	collapsed
LEAF_NODE	31:35	31:35	12	;
EXPR_STATEMENT	32:3	32:20	11	redraw_tree ( tree ) ;
EXPR	32:3	32:3	12	redraw_tree ( tree )
FUNCTION_CALL	32:3	32:19	13	redraw_tree ( tree )
CALLEE	32:3	32:3	14	redraw_tree
LEAF_NODE	32:3	32:3	15	redraw_tree
LEAF_NODE	32:14	32:14	14	(
ARGUMENT	32:15	32:15	14	tree
FIELD	32:15	32:15	15	tree
LEAF_NODE	32:15	32:15	16	tree
LEAF_NODE	32:19	32:19	14	)
LEAF_NODE	32:20	32:20	12	;
EXPR_STATEMENT	33:3	33:75	11	g_signal_emit ( tree , signals [ SIG_COLLAPSED ] , 0 , row -> key , row -> collapsed ) ;
EXPR	33:3	33:3	12	g_signal_emit ( tree , signals [ SIG_COLLAPSED ] , 0 , row -> key , row -> collapsed )
FUNCTION_CALL	33:3	33:74	13	g_signal_emit ( tree , signals [ SIG_COLLAPSED ] , 0 , row -> key , row -> collapsed )
CALLEE	33:3	33:3	14	g_signal_emit
LEAF_NODE	33:3	33:3	15	g_signal_emit
LEAF_NODE	33:16	33:16	14	(
ARGUMENT	33:17	33:17	14	tree
FIELD	33:17	33:17	15	tree
LEAF_NODE	33:17	33:17	16	tree
LEAF_NODE	33:21	33:21	14	,
ARGUMENT	33:23	33:23	14	signals [ SIG_COLLAPSED ]
FIELD	33:23	33:44	15	signals [ SIG_COLLAPSED ]
LEAF_NODE	33:23	33:23	16	signals
LEAF_NODE	33:30	33:30	16	[
EXPR	33:31	33:31	16	SIG_COLLAPSED
FIELD	33:31	33:31	17	SIG_COLLAPSED
LEAF_NODE	33:31	33:31	18	SIG_COLLAPSED
LEAF_NODE	33:44	33:44	16	]
LEAF_NODE	33:45	33:45	14	,
ARGUMENT	33:47	33:47	14	0
FIELD	33:47	33:47	15	0
LEAF_NODE	33:47	33:47	16	0
LEAF_NODE	33:48	33:48	14	,
ARGUMENT	33:50	33:50	14	row -> key
FIELD	33:50	33:55	15	row -> key
LEAF_NODE	33:50	33:50	16	row
LEAF_NODE	33:53	33:53	16	->
LEAF_NODE	33:55	33:55	16	key
LEAF_NODE	33:58	33:58	14	,
ARGUMENT	33:60	33:60	14	row -> collapsed
FIELD	33:60	33:65	15	row -> collapsed
LEAF_NODE	33:60	33:60	16	row
LEAF_NODE	33:63	33:63	16	->
LEAF_NODE	33:65	33:65	16	collapsed
LEAF_NODE	33:74	33:74	14	)
LEAF_NODE	33:75	33:75	12	;
LEAF_NODE	34:2	34:2	10	}
SELECTION	35:2	35:7	8	
KEYWORD	35:2	35:2	9	else
LEAF_NODE	35:2	35:2	10	else
STATEMENTS	35:7	35:7	9	
SELECTION	35:7	36:2	10	
KEYWORD	35:7	35:7	11	if
LEAF_NODE	35:7	35:7	12	if
LEAF_NODE	35:10	35:10	11	(
CONDITION	35:11	35:11	11	row && row -> choice
EXPR	35:11	35:11	12	row && row -> choice
AND	35:11	35:18	13	row && row -> choice
EXPR	35:11	35:11	14	row
FIELD	35:11	35:11	15	row
LEAF_NODE	35:11	35:11	16	row
LEAF_NODE	35:15	35:15	14	&&
EXPR	35:18	35:18	14	row -> choice
FIELD	35:18	35:23	15	row -> choice
LEAF_NODE	35:18	35:18	16	row
LEAF_NODE	35:21	35:21	16	->
LEAF_NODE	35:23	35:23	16	choice
LEAF_NODE	35:29	35:29	11	)
STATEMENTS	36:2	40:2	11	
LEAF_NODE	36:2	36:2	12	{
STATEMENTS	37:3	39:3	12	
EXPR_STATEMENT	37:3	37:37	13	row -> isselected = ! row -> isselected ;
EXPR	37:3	37:3	14	row -> isselected = ! row -> isselected
ASSIGN	37:3	37:21	15	row -> isselected = ! row -> isselected
LVAL	37:3	37:3	16	row -> isselected
FIELD	37:3	37:8	17	row -> isselected
LEAF_NODE	37:3	37:3	18	row
LEAF_NODE	37:6	37:6	18	->
LEAF_NODE	37:8	37:8	18	isselected
ASSIGN_OP	37:19	37:19	16	=
LEAF_NODE	37:19	37:19	17	=
RVAL	37:21	37:21	16	! row -> isselected
UNARY_EXPR	37:21	37:22	17	! row -> isselected
UNARY_OPERATOR	37:21	37:21	18	!
LEAF_NODE	37:21	37:21	19	!
FIELD	37:22	37:27	18	row -> isselected
LEAF_NODE	37:22	37:22	19	row
LEAF_NODE	37:25	37:25	19	->
LEAF_NODE	37:27	37:27	19	isselected
LEAF_NODE	37:37	37:37	14	;
EXPR_STATEMENT	38:3	38:57	13	g_signal_emit ( tree , signals [ SIG_TOGGLED ] , 0 , row -> key ) ;
EXPR	38:3	38:3	14	g_signal_emit ( tree , signals [ SIG_TOGGLED ] , 0 , row -> key )
FUNCTION_CALL	38:3	38:56	15	g_signal_emit ( tree , signals [ SIG_TOGGLED ] , 0 , row -> key )
CALLEE	38:3	38:3	16	g_signal_emit
LEAF_NODE	38:3	38:3	17	g_signal_emit
LEAF_NODE	38:16	38:16	16	(
ARGUMENT	38:17	38:17	16	tree
FIELD	38:17	38:17	17	tree
LEAF_NODE	38:17	38:17	18	tree
LEAF_NODE	38:21	38:21	16	,
ARGUMENT	38:23	38:23	16	signals [ SIG_TOGGLED ]
FIELD	38:23	38:42	17	signals [ SIG_TOGGLED ]
LEAF_NODE	38:23	38:23	18	signals
LEAF_NODE	38:30	38:30	18	[
EXPR	38:31	38:31	18	SIG_TOGGLED
FIELD	38:31	38:31	19	SIG_TOGGLED
LEAF_NODE	38:31	38:31	20	SIG_TOGGLED
LEAF_NODE	38:42	38:42	18	]
LEAF_NODE	38:43	38:43	16	,
ARGUMENT	38:45	38:45	16	0
FIELD	38:45	38:45	17	0
LEAF_NODE	38:45	38:45	18	0
LEAF_NODE	38:46	38:46	16	,
ARGUMENT	38:48	38:48	16	row -> key
FIELD	38:48	38:53	17	row -> key
LEAF_NODE	38:48	38:48	18	row
LEAF_NODE	38:51	38:51	18	->
LEAF_NODE	38:53	38:53	18	key
LEAF_NODE	38:56	38:56	16	)
LEAF_NODE	38:57	38:57	14	;
EXPR_STATEMENT	39:3	39:20	13	redraw_tree ( tree ) ;
EXPR	39:3	39:3	14	redraw_tree ( tree )
FUNCTION_CALL	39:3	39:19	15	redraw_tree ( tree )
CALLEE	39:3	39:3	16	redraw_tree
LEAF_NODE	39:3	39:3	17	redraw_tree
LEAF_NODE	39:14	39:14	16	(
ARGUMENT	39:15	39:15	16	tree
FIELD	39:15	39:15	17	tree
LEAF_NODE	39:15	39:15	18	tree
LEAF_NODE	39:19	39:19	16	)
LEAF_NODE	39:20	39:20	14	;
LEAF_NODE	40:2	40:2	12	}
LEAF_NODE	41:1	41:1	7	}
SELECTION	41:3	41:8	3	
KEYWORD	41:3	41:3	4	else
LEAF_NODE	41:3	41:3	5	else
STATEMENTS	41:8	43:1	4	
LEAF_NODE	41:8	41:8	5	{
STATEMENTS	42:2	42:2	5	
JUMP_STATEMENT	42:2	42:14	6	return FALSE ;
KEYWORD	42:2	42:2	7	return
LEAF_NODE	42:2	42:2	8	return
DESTINATION	42:9	42:9	7	FALSE
EXPR	42:9	42:9	8	FALSE
FIELD	42:9	42:9	9	FALSE
LEAF_NODE	42:9	42:9	10	FALSE
LEAF_NODE	42:14	42:14	7	;
LEAF_NODE	43:1	43:1	5	}
SELECTION	44:1	45:1	3	
KEYWORD	44:1	44:1	4	if
LEAF_NODE	44:1	44:1	5	if
LEAF_NODE	44:4	44:4	4	(
CONDITION	44:5	44:5	4	old != tree -> current
EXPR	44:5	44:12	5	old != tree -> current
FIELD	44:5	44:5	6	old
LEAF_NODE	44:5	44:5	7	old
EQ_OPERATOR	44:9	44:9	6	!=
LEAF_NODE	44:9	44:9	7	!=
FIELD	44:12	44:18	6	tree -> current
LEAF_NODE	44:12	44:12	7	tree
LEAF_NODE	44:16	44:16	7	->
LEAF_NODE	44:18	44:18	7	current
LEAF_NODE	44:25	44:25	4	)
STATEMENTS	45:1	47:1	4	
LEAF_NODE	45:1	45:1	5	{
STATEMENTS	46:2	46:2	5	
EXPR_STATEMENT	46:2	46:50	6	tree_selection_changed ( tree , old , tree -> current ) ;
EXPR	46:2	46:2	7	tree_selection_changed ( tree , old , tree -> current )
FUNCTION_CALL	46:2	46:49	8	tree_selection_changed ( tree , old , tree -> current )
CALLEE	46:2	46:2	9	tree_selection_changed
LEAF_NODE	46:2	46:2	10	tree_selection_changed
LEAF_NODE	46:24	46:24	9	(
ARGUMENT	46:25	46:25	9	tree
FIELD	46:25	46:25	10	tree
LEAF_NODE	46:25	46:25	11	tree
LEAF_NODE	46:29	46:29	9	,
ARGUMENT	46:31	46:31	9	old
FIELD	46:31	46:31	10	old
LEAF_NODE	46:31	46:31	11	old
LEAF_NODE	46:34	46:34	9	,
ARGUMENT	46:36	46:36	9	tree -> current
FIELD	46:36	46:42	10	tree -> current
LEAF_NODE	46:36	46:36	11	tree
LEAF_NODE	46:40	46:40	11	->
LEAF_NODE	46:42	46:42	11	current
LEAF_NODE	46:49	46:49	9	)
LEAF_NODE	46:50	46:50	7	;
LEAF_NODE	47:1	47:1	5	}
JUMP_STATEMENT	48:1	48:12	3	return TRUE ;
KEYWORD	48:1	48:1	4	return
LEAF_NODE	48:1	48:1	5	return
DESTINATION	48:8	48:8	4	TRUE
EXPR	48:8	48:8	5	TRUE
FIELD	48:8	48:8	6	TRUE
LEAF_NODE	48:8	48:8	7	TRUE
LEAF_NODE	48:12	48:12	4	;
LEAF_NODE	49:0	49:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	60:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	ggp_generic_status_handler
LEAF_NODE	2:12	2:12	3	ggp_generic_status_handler
PARAMETER_LIST	2:38	3:40	2	( PurpleConnection * gc , uin_t uin , int status , const char * descr )
LEAF_NODE	2:38	2:38	3	(
PARAMETER_DECL	2:39	2:57	3	PurpleConnection * gc
TYPE	2:39	2:56	4	PurpleConnection *
TYPE_NAME	2:39	2:39	5	PurpleConnection
LEAF_NODE	2:39	2:39	6	PurpleConnection
POINTER	2:56	2:56	5	*
LEAF_NODE	2:56	2:56	6	*
NAME	2:57	2:57	4	gc
LEAF_NODE	2:57	2:57	5	gc
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	2:61	2:67	3	uin_t uin
TYPE	2:61	2:61	4	uin_t
TYPE_NAME	2:61	2:61	5	uin_t
LEAF_NODE	2:61	2:61	6	uin_t
NAME	2:67	2:67	4	uin
LEAF_NODE	2:67	2:67	5	uin
LEAF_NODE	2:70	2:70	3	,
PARAMETER_DECL	3:11	3:15	3	int status
TYPE	3:11	3:11	4	int
TYPE_NAME	3:11	3:11	5	int
LEAF_NODE	3:11	3:11	6	int
NAME	3:15	3:15	4	status
LEAF_NODE	3:15	3:15	5	status
LEAF_NODE	3:21	3:21	3	,
PARAMETER_DECL	3:23	3:35	3	const char * descr
TYPE	3:23	3:34	4	const char *
TYPE_NAME	3:23	3:29	5	const char
LEAF_NODE	3:23	3:23	6	const
LEAF_NODE	3:29	3:29	6	char
POINTER	3:34	3:34	5	*
LEAF_NODE	3:34	3:34	6	*
NAME	3:35	3:35	4	descr
LEAF_NODE	3:35	3:35	5	descr
LEAF_NODE	3:40	3:40	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	59:1	2	
SIMPLE_DECL	5:1	5:12	3	gchar * from ;
VAR_DECL	5:1	5:8	4	gchar * from
TYPE	5:1	5:7	5	gchar *
TYPE_NAME	5:1	5:1	6	gchar
LEAF_NODE	5:1	5:1	7	gchar
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	from
LEAF_NODE	5:8	5:8	6	from
LEAF_NODE	5:12	5:12	4	;
SIMPLE_DECL	6:1	6:15	3	const char * st ;
VAR_DECL	6:1	6:13	4	const char * st
TYPE	6:1	6:12	5	const char *
TYPE_NAME	6:1	6:7	6	const char
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	char
POINTER	6:12	6:12	6	*
LEAF_NODE	6:12	6:12	7	*
NAME	6:13	6:13	5	st
LEAF_NODE	6:13	6:13	6	st
LEAF_NODE	6:15	6:15	4	;
SIMPLE_DECL	7:1	7:24	3	char * status_msg ; status_msg = NULL ;
VAR_DECL	7:1	7:7	4	char * status_msg ; status_msg = NULL
TYPE	7:1	7:6	5	char *
TYPE_NAME	7:1	7:1	6	char
LEAF_NODE	7:1	7:1	7	char
POINTER	7:6	7:6	6	*
LEAF_NODE	7:6	7:6	7	*
NAME	7:7	7:7	5	status_msg
LEAF_NODE	7:7	7:7	6	status_msg
LEAF_NODE	0:0	0:0	5	;
INIT	7:7	7:7	5	status_msg = NULL
ASSIGN	7:7	7:20	6	status_msg = NULL
LVAL	7:7	7:7	7	status_msg
NAME	7:7	7:7	8	status_msg
LEAF_NODE	7:7	7:7	9	status_msg
ASSIGN_OP	7:18	7:18	7	=
LEAF_NODE	7:18	7:18	8	=
RVAL	7:20	7:20	7	NULL
FIELD	7:20	7:20	8	NULL
LEAF_NODE	7:20	7:20	9	NULL
LEAF_NODE	7:24	7:24	4	;
EXPR_STATEMENT	8:1	8:33	3	ggp_update_buddy_avatar ( gc , uin ) ;
EXPR	8:1	8:1	4	ggp_update_buddy_avatar ( gc , uin )
FUNCTION_CALL	8:1	8:32	5	ggp_update_buddy_avatar ( gc , uin )
CALLEE	8:1	8:1	6	ggp_update_buddy_avatar
LEAF_NODE	8:1	8:1	7	ggp_update_buddy_avatar
LEAF_NODE	8:24	8:24	6	(
ARGUMENT	8:25	8:25	6	gc
FIELD	8:25	8:25	7	gc
LEAF_NODE	8:25	8:25	8	gc
LEAF_NODE	8:27	8:27	6	,
ARGUMENT	8:29	8:29	6	uin
FIELD	8:29	8:29	7	uin
LEAF_NODE	8:29	8:29	8	uin
LEAF_NODE	8:32	8:32	6	)
LEAF_NODE	8:33	8:33	4	;
EXPR_STATEMENT	9:1	9:34	3	from = g_strdup_printf ( "%u" , uin ) ;
EXPR	9:1	9:1	4	from = g_strdup_printf ( "%u" , uin )
ASSIGN	9:1	9:8	5	from = g_strdup_printf ( "%u" , uin )
LVAL	9:1	9:1	6	from
FIELD	9:1	9:1	7	from
LEAF_NODE	9:1	9:1	8	from
ASSIGN_OP	9:6	9:6	6	=
LEAF_NODE	9:6	9:6	7	=
RVAL	9:8	9:8	6	g_strdup_printf ( "%u" , uin )
FUNCTION_CALL	9:8	9:33	7	g_strdup_printf ( "%u" , uin )
CALLEE	9:8	9:8	8	g_strdup_printf
LEAF_NODE	9:8	9:8	9	g_strdup_printf
LEAF_NODE	9:23	9:23	8	(
ARGUMENT	9:24	9:24	8	"%u"
FIELD	9:24	9:24	9	"%u"
LEAF_NODE	9:24	9:24	10	"%u"
LEAF_NODE	9:28	9:28	8	,
ARGUMENT	9:30	9:30	8	uin
FIELD	9:30	9:30	9	uin
LEAF_NODE	9:30	9:30	10	uin
LEAF_NODE	9:33	9:33	8	)
LEAF_NODE	9:34	9:34	4	;
SELECTION	10:1	10:17	3	
KEYWORD	10:1	10:1	4	switch
LEAF_NODE	10:1	10:1	5	switch
LEAF_NODE	10:8	10:8	4	(
CONDITION	10:9	10:9	4	status
EXPR	10:9	10:9	5	status
FIELD	10:9	10:9	6	status
LEAF_NODE	10:9	10:9	7	status
LEAF_NODE	10:15	10:15	4	)
STATEMENTS	10:17	40:1	4	
LEAF_NODE	10:17	10:17	5	{
STATEMENTS	11:2	39:3	5	
LABEL	11:2	11:26	6	case GG_STATUS_NOT_AVAIL :
LEAF_NODE	11:2	11:2	7	case
LEAF_NODE	11:7	11:7	7	GG_STATUS_NOT_AVAIL
LEAF_NODE	11:26	11:26	7	:
LABEL	12:2	12:32	6	case GG_STATUS_NOT_AVAIL_DESCR :
LEAF_NODE	12:2	12:2	7	case
LEAF_NODE	12:7	12:7	7	GG_STATUS_NOT_AVAIL_DESCR
LEAF_NODE	12:32	12:32	7	:
EXPR_STATEMENT	13:3	13:64	6	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_OFFLINE ) ;
EXPR	13:3	13:3	7	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_OFFLINE )
ASSIGN	13:3	13:8	8	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_OFFLINE )
LVAL	13:3	13:3	9	st
FIELD	13:3	13:3	10	st
LEAF_NODE	13:3	13:3	11	st
ASSIGN_OP	13:6	13:6	9	=
LEAF_NODE	13:6	13:6	10	=
RVAL	13:8	13:8	9	purple_primitive_get_id_from_type ( PURPLE_STATUS_OFFLINE )
FUNCTION_CALL	13:8	13:63	10	purple_primitive_get_id_from_type ( PURPLE_STATUS_OFFLINE )
CALLEE	13:8	13:8	11	purple_primitive_get_id_from_type
LEAF_NODE	13:8	13:8	12	purple_primitive_get_id_from_type
LEAF_NODE	13:41	13:41	11	(
ARGUMENT	13:42	13:42	11	PURPLE_STATUS_OFFLINE
FIELD	13:42	13:42	12	PURPLE_STATUS_OFFLINE
LEAF_NODE	13:42	13:42	13	PURPLE_STATUS_OFFLINE
LEAF_NODE	13:63	13:63	11	)
LEAF_NODE	13:64	13:64	7	;
JUMP_STATEMENT	14:3	14:8	6	break DESTINATION ;
KEYWORD	14:3	14:3	7	break
LEAF_NODE	14:3	14:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	14:8	14:8	7	;
LABEL	15:2	15:20	6	case GG_STATUS_FFC :
LEAF_NODE	15:2	15:2	7	case
LEAF_NODE	15:7	15:7	7	GG_STATUS_FFC
LEAF_NODE	15:20	15:20	7	:
LABEL	16:2	16:26	6	case GG_STATUS_FFC_DESCR :
LEAF_NODE	16:2	16:2	7	case
LEAF_NODE	16:7	16:7	7	GG_STATUS_FFC_DESCR
LEAF_NODE	16:26	16:26	7	:
EXPR_STATEMENT	17:3	17:66	6	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE ) ;
EXPR	17:3	17:3	7	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
ASSIGN	17:3	17:8	8	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
LVAL	17:3	17:3	9	st
FIELD	17:3	17:3	10	st
LEAF_NODE	17:3	17:3	11	st
ASSIGN_OP	17:6	17:6	9	=
LEAF_NODE	17:6	17:6	10	=
RVAL	17:8	17:8	9	purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
FUNCTION_CALL	17:8	17:65	10	purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
CALLEE	17:8	17:8	11	purple_primitive_get_id_from_type
LEAF_NODE	17:8	17:8	12	purple_primitive_get_id_from_type
LEAF_NODE	17:41	17:41	11	(
ARGUMENT	17:42	17:42	11	PURPLE_STATUS_AVAILABLE
FIELD	17:42	17:42	12	PURPLE_STATUS_AVAILABLE
LEAF_NODE	17:42	17:42	13	PURPLE_STATUS_AVAILABLE
LEAF_NODE	17:65	17:65	11	)
LEAF_NODE	17:66	17:66	7	;
JUMP_STATEMENT	18:3	18:8	6	break DESTINATION ;
KEYWORD	18:3	18:3	7	break
LEAF_NODE	18:3	18:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	18:8	18:8	7	;
LABEL	19:2	19:22	6	case GG_STATUS_AVAIL :
LEAF_NODE	19:2	19:2	7	case
LEAF_NODE	19:7	19:7	7	GG_STATUS_AVAIL
LEAF_NODE	19:22	19:22	7	:
LABEL	20:2	20:28	6	case GG_STATUS_AVAIL_DESCR :
LEAF_NODE	20:2	20:2	7	case
LEAF_NODE	20:7	20:7	7	GG_STATUS_AVAIL_DESCR
LEAF_NODE	20:28	20:28	7	:
EXPR_STATEMENT	21:3	21:66	6	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE ) ;
EXPR	21:3	21:3	7	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
ASSIGN	21:3	21:8	8	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
LVAL	21:3	21:3	9	st
FIELD	21:3	21:3	10	st
LEAF_NODE	21:3	21:3	11	st
ASSIGN_OP	21:6	21:6	9	=
LEAF_NODE	21:6	21:6	10	=
RVAL	21:8	21:8	9	purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
FUNCTION_CALL	21:8	21:65	10	purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
CALLEE	21:8	21:8	11	purple_primitive_get_id_from_type
LEAF_NODE	21:8	21:8	12	purple_primitive_get_id_from_type
LEAF_NODE	21:41	21:41	11	(
ARGUMENT	21:42	21:42	11	PURPLE_STATUS_AVAILABLE
FIELD	21:42	21:42	12	PURPLE_STATUS_AVAILABLE
LEAF_NODE	21:42	21:42	13	PURPLE_STATUS_AVAILABLE
LEAF_NODE	21:65	21:65	11	)
LEAF_NODE	21:66	21:66	7	;
JUMP_STATEMENT	22:3	22:8	6	break DESTINATION ;
KEYWORD	22:3	22:3	7	break
LEAF_NODE	22:3	22:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	22:8	22:8	7	;
LABEL	23:2	23:21	6	case GG_STATUS_BUSY :
LEAF_NODE	23:2	23:2	7	case
LEAF_NODE	23:7	23:7	7	GG_STATUS_BUSY
LEAF_NODE	23:21	23:21	7	:
LABEL	24:2	24:27	6	case GG_STATUS_BUSY_DESCR :
LEAF_NODE	24:2	24:2	7	case
LEAF_NODE	24:7	24:7	7	GG_STATUS_BUSY_DESCR
LEAF_NODE	24:27	24:27	7	:
EXPR_STATEMENT	25:3	25:61	6	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AWAY ) ;
EXPR	25:3	25:3	7	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AWAY )
ASSIGN	25:3	25:8	8	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AWAY )
LVAL	25:3	25:3	9	st
FIELD	25:3	25:3	10	st
LEAF_NODE	25:3	25:3	11	st
ASSIGN_OP	25:6	25:6	9	=
LEAF_NODE	25:6	25:6	10	=
RVAL	25:8	25:8	9	purple_primitive_get_id_from_type ( PURPLE_STATUS_AWAY )
FUNCTION_CALL	25:8	25:60	10	purple_primitive_get_id_from_type ( PURPLE_STATUS_AWAY )
CALLEE	25:8	25:8	11	purple_primitive_get_id_from_type
LEAF_NODE	25:8	25:8	12	purple_primitive_get_id_from_type
LEAF_NODE	25:41	25:41	11	(
ARGUMENT	25:42	25:42	11	PURPLE_STATUS_AWAY
FIELD	25:42	25:42	12	PURPLE_STATUS_AWAY
LEAF_NODE	25:42	25:42	13	PURPLE_STATUS_AWAY
LEAF_NODE	25:60	25:60	11	)
LEAF_NODE	25:61	25:61	7	;
JUMP_STATEMENT	26:3	26:8	6	break DESTINATION ;
KEYWORD	26:3	26:3	7	break
LEAF_NODE	26:3	26:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	26:8	26:8	7	;
LABEL	27:2	27:20	6	case GG_STATUS_DND :
LEAF_NODE	27:2	27:2	7	case
LEAF_NODE	27:7	27:7	7	GG_STATUS_DND
LEAF_NODE	27:20	27:20	7	:
LABEL	28:2	28:26	6	case GG_STATUS_DND_DESCR :
LEAF_NODE	28:2	28:2	7	case
LEAF_NODE	28:7	28:7	7	GG_STATUS_DND_DESCR
LEAF_NODE	28:26	28:26	7	:
EXPR_STATEMENT	29:3	29:68	6	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_UNAVAILABLE ) ;
EXPR	29:3	29:3	7	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_UNAVAILABLE )
ASSIGN	29:3	29:8	8	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_UNAVAILABLE )
LVAL	29:3	29:3	9	st
FIELD	29:3	29:3	10	st
LEAF_NODE	29:3	29:3	11	st
ASSIGN_OP	29:6	29:6	9	=
LEAF_NODE	29:6	29:6	10	=
RVAL	29:8	29:8	9	purple_primitive_get_id_from_type ( PURPLE_STATUS_UNAVAILABLE )
FUNCTION_CALL	29:8	29:67	10	purple_primitive_get_id_from_type ( PURPLE_STATUS_UNAVAILABLE )
CALLEE	29:8	29:8	11	purple_primitive_get_id_from_type
LEAF_NODE	29:8	29:8	12	purple_primitive_get_id_from_type
LEAF_NODE	29:41	29:41	11	(
ARGUMENT	29:42	29:42	11	PURPLE_STATUS_UNAVAILABLE
FIELD	29:42	29:42	12	PURPLE_STATUS_UNAVAILABLE
LEAF_NODE	29:42	29:42	13	PURPLE_STATUS_UNAVAILABLE
LEAF_NODE	29:67	29:67	11	)
LEAF_NODE	29:68	29:68	7	;
JUMP_STATEMENT	30:3	30:8	6	break DESTINATION ;
KEYWORD	30:3	30:3	7	break
LEAF_NODE	30:3	30:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	30:8	30:8	7	;
LABEL	31:2	31:24	6	case GG_STATUS_BLOCKED :
LEAF_NODE	31:2	31:2	7	case
LEAF_NODE	31:7	31:7	7	GG_STATUS_BLOCKED
LEAF_NODE	31:24	31:24	7	:
EXPR_STATEMENT	33:3	33:17	6	st = "blocked" ;
EXPR	33:3	33:3	7	st = "blocked"
ASSIGN	33:3	33:8	8	st = "blocked"
LVAL	33:3	33:3	9	st
FIELD	33:3	33:3	10	st
LEAF_NODE	33:3	33:3	11	st
ASSIGN_OP	33:6	33:6	9	=
LEAF_NODE	33:6	33:6	10	=
RVAL	33:8	33:8	9	"blocked"
FIELD	33:8	33:8	10	"blocked"
LEAF_NODE	33:8	33:8	11	"blocked"
LEAF_NODE	33:17	33:17	7	;
JUMP_STATEMENT	34:3	34:8	6	break DESTINATION ;
KEYWORD	34:3	34:3	7	break
LEAF_NODE	34:3	34:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	34:8	34:8	7	;
LABEL	35:2	35:9	6	default :
LEAF_NODE	35:2	35:2	7	default
LEAF_NODE	35:9	35:9	7	:
EXPR_STATEMENT	36:3	36:66	6	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE ) ;
EXPR	36:3	36:3	7	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
ASSIGN	36:3	36:8	8	st = purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
LVAL	36:3	36:3	9	st
FIELD	36:3	36:3	10	st
LEAF_NODE	36:3	36:3	11	st
ASSIGN_OP	36:6	36:6	9	=
LEAF_NODE	36:6	36:6	10	=
RVAL	36:8	36:8	9	purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
FUNCTION_CALL	36:8	36:65	10	purple_primitive_get_id_from_type ( PURPLE_STATUS_AVAILABLE )
CALLEE	36:8	36:8	11	purple_primitive_get_id_from_type
LEAF_NODE	36:8	36:8	12	purple_primitive_get_id_from_type
LEAF_NODE	36:41	36:41	11	(
ARGUMENT	36:42	36:42	11	PURPLE_STATUS_AVAILABLE
FIELD	36:42	36:42	12	PURPLE_STATUS_AVAILABLE
LEAF_NODE	36:42	36:42	13	PURPLE_STATUS_AVAILABLE
LEAF_NODE	36:65	36:65	11	)
LEAF_NODE	36:66	36:66	7	;
EXPR_STATEMENT	37:3	38:52	6	purple_debug_info ( "gg" , "GG_EVENT_NOTIFY: Unknown status: %d\n" , status ) ;
EXPR	37:3	37:3	7	purple_debug_info ( "gg" , "GG_EVENT_NOTIFY: Unknown status: %d\n" , status )
FUNCTION_CALL	37:3	38:51	8	purple_debug_info ( "gg" , "GG_EVENT_NOTIFY: Unknown status: %d\n" , status )
CALLEE	37:3	37:3	9	purple_debug_info
LEAF_NODE	37:3	37:3	10	purple_debug_info
LEAF_NODE	37:20	37:20	9	(
ARGUMENT	37:21	37:21	9	"gg"
FIELD	37:21	37:21	10	"gg"
LEAF_NODE	37:21	37:21	11	"gg"
LEAF_NODE	37:25	37:25	9	,
ARGUMENT	38:4	38:4	9	"GG_EVENT_NOTIFY: Unknown status: %d\n"
FIELD	38:4	38:4	10	"GG_EVENT_NOTIFY: Unknown status: %d\n"
LEAF_NODE	38:4	38:4	11	"GG_EVENT_NOTIFY: Unknown status: %d\n"
LEAF_NODE	38:43	38:43	9	,
ARGUMENT	38:45	38:45	9	status
FIELD	38:45	38:45	10	status
LEAF_NODE	38:45	38:45	11	status
LEAF_NODE	38:51	38:51	9	)
LEAF_NODE	38:52	38:52	7	;
JUMP_STATEMENT	39:3	39:8	6	break DESTINATION ;
KEYWORD	39:3	39:3	7	break
LEAF_NODE	39:3	39:3	8	break
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	39:8	39:8	7	;
LEAF_NODE	40:1	40:1	5	}
SELECTION	41:1	41:20	3	
KEYWORD	41:1	41:1	4	if
LEAF_NODE	41:1	41:1	5	if
LEAF_NODE	41:4	41:4	4	(
CONDITION	41:5	41:5	4	descr != NULL
EXPR	41:5	41:14	5	descr != NULL
FIELD	41:5	41:5	6	descr
LEAF_NODE	41:5	41:5	7	descr
EQ_OPERATOR	41:11	41:11	6	!=
LEAF_NODE	41:11	41:11	7	!=
FIELD	41:14	41:14	6	NULL
LEAF_NODE	41:14	41:14	7	NULL
LEAF_NODE	41:18	41:18	4	)
STATEMENTS	41:20	48:1	4	
LEAF_NODE	41:20	41:20	5	{
STATEMENTS	42:2	44:2	5	
EXPR_STATEMENT	42:2	42:30	6	status_msg = g_strdup ( descr ) ;
EXPR	42:2	42:2	7	status_msg = g_strdup ( descr )
ASSIGN	42:2	42:15	8	status_msg = g_strdup ( descr )
LVAL	42:2	42:2	9	status_msg
FIELD	42:2	42:2	10	status_msg
LEAF_NODE	42:2	42:2	11	status_msg
ASSIGN_OP	42:13	42:13	9	=
LEAF_NODE	42:13	42:13	10	=
RVAL	42:15	42:15	9	g_strdup ( descr )
FUNCTION_CALL	42:15	42:29	10	g_strdup ( descr )
CALLEE	42:15	42:15	11	g_strdup
LEAF_NODE	42:15	42:15	12	g_strdup
LEAF_NODE	42:23	42:23	11	(
ARGUMENT	42:24	42:24	11	descr
FIELD	42:24	42:24	12	descr
LEAF_NODE	42:24	42:24	13	descr
LEAF_NODE	42:29	42:29	11	)
LEAF_NODE	42:30	42:30	7	;
EXPR_STATEMENT	43:2	43:24	6	g_strstrip ( status_msg ) ;
EXPR	43:2	43:2	7	g_strstrip ( status_msg )
FUNCTION_CALL	43:2	43:23	8	g_strstrip ( status_msg )
CALLEE	43:2	43:2	9	g_strstrip
LEAF_NODE	43:2	43:2	10	g_strstrip
LEAF_NODE	43:12	43:12	9	(
ARGUMENT	43:13	43:13	9	status_msg
FIELD	43:13	43:13	10	status_msg
LEAF_NODE	43:13	43:13	11	status_msg
LEAF_NODE	43:23	43:23	9	)
LEAF_NODE	43:24	43:24	7	;
SELECTION	44:2	44:29	6	
KEYWORD	44:2	44:2	7	if
LEAF_NODE	44:2	44:2	8	if
LEAF_NODE	44:5	44:5	7	(
CONDITION	44:6	44:6	7	status_msg [ 0 ] == '\0'
EXPR	44:6	44:23	8	status_msg [ 0 ] == '\0'
FIELD	44:6	44:18	9	status_msg [ 0 ]
LEAF_NODE	44:6	44:6	10	status_msg
LEAF_NODE	44:16	44:16	10	[
EXPR	44:17	44:17	10	0
FIELD	44:17	44:17	11	0
LEAF_NODE	44:17	44:17	12	0
LEAF_NODE	44:18	44:18	10	]
EQ_OPERATOR	44:20	44:20	9	==
LEAF_NODE	44:20	44:20	10	==
FIELD	44:23	44:23	9	'\0'
LEAF_NODE	44:23	44:23	10	'\0'
LEAF_NODE	44:27	44:27	7	)
STATEMENTS	44:29	47:2	7	
LEAF_NODE	44:29	44:29	8	{
STATEMENTS	45:3	46:3	8	
EXPR_STATEMENT	45:3	45:21	9	g_free ( status_msg ) ;
EXPR	45:3	45:3	10	g_free ( status_msg )
FUNCTION_CALL	45:3	45:20	11	g_free ( status_msg )
CALLEE	45:3	45:3	12	g_free
LEAF_NODE	45:3	45:3	13	g_free
LEAF_NODE	45:9	45:9	12	(
ARGUMENT	45:10	45:10	12	status_msg
FIELD	45:10	45:10	13	status_msg
LEAF_NODE	45:10	45:10	14	status_msg
LEAF_NODE	45:20	45:20	12	)
LEAF_NODE	45:21	45:21	10	;
EXPR_STATEMENT	46:3	46:20	9	status_msg = NULL ;
EXPR	46:3	46:3	10	status_msg = NULL
ASSIGN	46:3	46:16	11	status_msg = NULL
LVAL	46:3	46:3	12	status_msg
FIELD	46:3	46:3	13	status_msg
LEAF_NODE	46:3	46:3	14	status_msg
ASSIGN_OP	46:14	46:14	12	=
LEAF_NODE	46:14	46:14	13	=
RVAL	46:16	46:16	12	NULL
FIELD	46:16	46:16	13	NULL
LEAF_NODE	46:16	46:16	14	NULL
LEAF_NODE	46:20	46:20	10	;
LEAF_NODE	47:2	47:2	8	}
LEAF_NODE	48:1	48:1	5	}
EXPR_STATEMENT	49:1	50:31	3	purple_debug_info ( "gg" , "status of %u is %s [%s]\n" , uin , st , status_msg ? status_msg : "" ) ;
EXPR	49:1	49:1	4	purple_debug_info ( "gg" , "status of %u is %s [%s]\n" , uin , st , status_msg ? status_msg : "" )
FUNCTION_CALL	49:1	50:30	5	purple_debug_info ( "gg" , "status of %u is %s [%s]\n" , uin , st , status_msg ? status_msg : "" )
CALLEE	49:1	49:1	6	purple_debug_info
LEAF_NODE	49:1	49:1	7	purple_debug_info
LEAF_NODE	49:18	49:18	6	(
ARGUMENT	49:19	49:19	6	"gg"
FIELD	49:19	49:19	7	"gg"
LEAF_NODE	49:19	49:19	8	"gg"
LEAF_NODE	49:23	49:23	6	,
ARGUMENT	49:25	49:25	6	"status of %u is %s [%s]\n"
FIELD	49:25	49:25	7	"status of %u is %s [%s]\n"
LEAF_NODE	49:25	49:25	8	"status of %u is %s [%s]\n"
LEAF_NODE	49:52	49:52	6	,
ARGUMENT	49:54	49:54	6	uin
FIELD	49:54	49:54	7	uin
LEAF_NODE	49:54	49:54	8	uin
LEAF_NODE	49:57	49:57	6	,
ARGUMENT	49:59	49:59	6	st
FIELD	49:59	49:59	7	st
LEAF_NODE	49:59	49:59	8	st
LEAF_NODE	49:61	49:61	6	,
ARGUMENT	50:2	50:2	6	status_msg ? status_msg : ""
COND_EXPR	50:2	50:28	7	status_msg ? status_msg : ""
CONDITION	50:2	50:2	8	status_msg
FIELD	50:2	50:2	9	status_msg
LEAF_NODE	50:2	50:2	10	status_msg
LEAF_NODE	50:13	50:13	8	?
EXPR	50:15	50:15	8	status_msg
FIELD	50:15	50:15	9	status_msg
LEAF_NODE	50:15	50:15	10	status_msg
LEAF_NODE	50:26	50:26	8	:
FIELD	50:28	50:28	8	""
LEAF_NODE	50:28	50:28	9	""
LEAF_NODE	50:30	50:30	6	)
LEAF_NODE	50:31	50:31	4	;
SELECTION	51:1	51:25	3	
KEYWORD	51:1	51:1	4	if
LEAF_NODE	51:1	51:1	5	if
LEAF_NODE	51:4	51:4	4	(
CONDITION	51:5	51:5	4	status_msg == NULL
EXPR	51:5	51:19	5	status_msg == NULL
FIELD	51:5	51:5	6	status_msg
LEAF_NODE	51:5	51:5	7	status_msg
EQ_OPERATOR	51:16	51:16	6	==
LEAF_NODE	51:16	51:16	7	==
FIELD	51:19	51:19	6	NULL
LEAF_NODE	51:19	51:19	7	NULL
LEAF_NODE	51:23	51:23	4	)
STATEMENTS	51:25	54:1	4	
LEAF_NODE	51:25	51:25	5	{
STATEMENTS	52:2	52:2	5	
EXPR_STATEMENT	52:2	53:18	6	purple_prpl_got_user_status ( purple_connection_get_account ( gc ) , from , st , NULL ) ;
EXPR	52:2	52:2	7	purple_prpl_got_user_status ( purple_connection_get_account ( gc ) , from , st , NULL )
FUNCTION_CALL	52:2	53:17	8	purple_prpl_got_user_status ( purple_connection_get_account ( gc ) , from , st , NULL )
CALLEE	52:2	52:2	9	purple_prpl_got_user_status
LEAF_NODE	52:2	52:2	10	purple_prpl_got_user_status
LEAF_NODE	52:29	52:29	9	(
ARGUMENT	52:30	52:30	9	purple_connection_get_account ( gc )
FUNCTION_CALL	52:30	52:62	10	purple_connection_get_account ( gc )
CALLEE	52:30	52:30	11	purple_connection_get_account
LEAF_NODE	52:30	52:30	12	purple_connection_get_account
LEAF_NODE	52:59	52:59	11	(
ARGUMENT	52:60	52:60	11	gc
FIELD	52:60	52:60	12	gc
LEAF_NODE	52:60	52:60	13	gc
LEAF_NODE	52:62	52:62	11	)
LEAF_NODE	52:63	52:63	9	,
ARGUMENT	53:3	53:3	9	from
FIELD	53:3	53:3	10	from
LEAF_NODE	53:3	53:3	11	from
LEAF_NODE	53:7	53:7	9	,
ARGUMENT	53:9	53:9	9	st
FIELD	53:9	53:9	10	st
LEAF_NODE	53:9	53:9	11	st
LEAF_NODE	53:11	53:11	9	,
ARGUMENT	53:13	53:13	9	NULL
FIELD	53:13	53:13	10	NULL
LEAF_NODE	53:13	53:13	11	NULL
LEAF_NODE	53:17	53:17	9	)
LEAF_NODE	53:18	53:18	7	;
LEAF_NODE	54:1	54:1	5	}
SELECTION	54:3	54:8	3	
KEYWORD	54:3	54:3	4	else
LEAF_NODE	54:3	54:3	5	else
STATEMENTS	54:8	58:1	4	
LEAF_NODE	54:8	54:8	5	{
STATEMENTS	55:2	57:2	5	
EXPR_STATEMENT	55:2	56:41	6	purple_prpl_got_user_status ( purple_connection_get_account ( gc ) , from , st , "message" , status_msg , NULL ) ;
EXPR	55:2	55:2	7	purple_prpl_got_user_status ( purple_connection_get_account ( gc ) , from , st , "message" , status_msg , NULL )
FUNCTION_CALL	55:2	56:40	8	purple_prpl_got_user_status ( purple_connection_get_account ( gc ) , from , st , "message" , status_msg , NULL )
CALLEE	55:2	55:2	9	purple_prpl_got_user_status
LEAF_NODE	55:2	55:2	10	purple_prpl_got_user_status
LEAF_NODE	55:29	55:29	9	(
ARGUMENT	55:30	55:30	9	purple_connection_get_account ( gc )
FUNCTION_CALL	55:30	55:62	10	purple_connection_get_account ( gc )
CALLEE	55:30	55:30	11	purple_connection_get_account
LEAF_NODE	55:30	55:30	12	purple_connection_get_account
LEAF_NODE	55:59	55:59	11	(
ARGUMENT	55:60	55:60	11	gc
FIELD	55:60	55:60	12	gc
LEAF_NODE	55:60	55:60	13	gc
LEAF_NODE	55:62	55:62	11	)
LEAF_NODE	55:63	55:63	9	,
ARGUMENT	56:3	56:3	9	from
FIELD	56:3	56:3	10	from
LEAF_NODE	56:3	56:3	11	from
LEAF_NODE	56:7	56:7	9	,
ARGUMENT	56:9	56:9	9	st
FIELD	56:9	56:9	10	st
LEAF_NODE	56:9	56:9	11	st
LEAF_NODE	56:11	56:11	9	,
ARGUMENT	56:13	56:13	9	"message"
FIELD	56:13	56:13	10	"message"
LEAF_NODE	56:13	56:13	11	"message"
LEAF_NODE	56:22	56:22	9	,
ARGUMENT	56:24	56:24	9	status_msg
FIELD	56:24	56:24	10	status_msg
LEAF_NODE	56:24	56:24	11	status_msg
LEAF_NODE	56:34	56:34	9	,
ARGUMENT	56:36	56:36	9	NULL
FIELD	56:36	56:36	10	NULL
LEAF_NODE	56:36	56:36	11	NULL
LEAF_NODE	56:40	56:40	9	)
LEAF_NODE	56:41	56:41	7	;
EXPR_STATEMENT	57:2	57:20	6	g_free ( status_msg ) ;
EXPR	57:2	57:2	7	g_free ( status_msg )
FUNCTION_CALL	57:2	57:19	8	g_free ( status_msg )
CALLEE	57:2	57:2	9	g_free
LEAF_NODE	57:2	57:2	10	g_free
LEAF_NODE	57:8	57:8	9	(
ARGUMENT	57:9	57:9	9	status_msg
FIELD	57:9	57:9	10	status_msg
LEAF_NODE	57:9	57:9	11	status_msg
LEAF_NODE	57:19	57:19	9	)
LEAF_NODE	57:20	57:20	7	;
LEAF_NODE	58:1	58:1	5	}
EXPR_STATEMENT	59:1	59:13	3	g_free ( from ) ;
EXPR	59:1	59:1	4	g_free ( from )
FUNCTION_CALL	59:1	59:12	5	g_free ( from )
CALLEE	59:1	59:1	6	g_free
LEAF_NODE	59:1	59:1	7	g_free
LEAF_NODE	59:7	59:7	6	(
ARGUMENT	59:8	59:8	6	from
FIELD	59:8	59:8	7	from
LEAF_NODE	59:8	59:8	8	from
LEAF_NODE	59:12	59:12	6	)
LEAF_NODE	59:13	59:13	4	;
LEAF_NODE	60:0	60:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	17:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	purple_whiteboard_destroy
LEAF_NODE	2:5	2:5	3	purple_whiteboard_destroy
PARAMETER_LIST	2:30	2:51	2	( PurpleWhiteboard * wb )
LEAF_NODE	2:30	2:30	3	(
PARAMETER_DECL	2:31	2:49	3	PurpleWhiteboard * wb
TYPE	2:31	2:48	4	PurpleWhiteboard *
TYPE_NAME	2:31	2:31	5	PurpleWhiteboard
LEAF_NODE	2:31	2:31	6	PurpleWhiteboard
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	wb
LEAF_NODE	2:49	2:49	5	wb
LEAF_NODE	2:51	2:51	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	16:1	2	
EXPR_STATEMENT	4:1	4:29	3	g_return_if_fail ( wb != NULL ) ;
EXPR	4:1	4:1	4	g_return_if_fail ( wb != NULL )
FUNCTION_CALL	4:1	4:28	5	g_return_if_fail ( wb != NULL )
CALLEE	4:1	4:1	6	g_return_if_fail
LEAF_NODE	4:1	4:1	7	g_return_if_fail
LEAF_NODE	4:17	4:17	6	(
ARGUMENT	4:18	4:24	6	wb != NULL
FIELD	4:18	4:18	7	wb
LEAF_NODE	4:18	4:18	8	wb
EQ_OPERATOR	4:21	4:21	7	!=
LEAF_NODE	4:21	4:21	8	!=
FIELD	4:24	4:24	7	NULL
LEAF_NODE	4:24	4:24	8	NULL
LEAF_NODE	4:28	4:28	6	)
LEAF_NODE	4:29	4:29	4	;
SELECTION	5:1	6:1	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:3	5:3	4	(
CONDITION	5:4	5:4	4	wb -> ui_data
EXPR	5:4	5:4	5	wb -> ui_data
FIELD	5:4	5:8	6	wb -> ui_data
LEAF_NODE	5:4	5:4	7	wb
LEAF_NODE	5:6	5:6	7	->
LEAF_NODE	5:8	5:8	7	ui_data
LEAF_NODE	5:15	5:15	4	)
STATEMENTS	6:1	10:1	4	
LEAF_NODE	6:1	6:1	5	{
STATEMENTS	8:2	8:2	5	
SELECTION	8:2	9:3	6	
KEYWORD	8:2	8:2	7	if
LEAF_NODE	8:2	8:2	8	if
LEAF_NODE	8:4	8:4	7	(
CONDITION	8:5	8:5	7	whiteboard_ui_ops && whiteboard_ui_ops -> destroy
EXPR	8:5	8:5	8	whiteboard_ui_ops && whiteboard_ui_ops -> destroy
AND	8:5	8:26	9	whiteboard_ui_ops && whiteboard_ui_ops -> destroy
EXPR	8:5	8:5	10	whiteboard_ui_ops
FIELD	8:5	8:5	11	whiteboard_ui_ops
LEAF_NODE	8:5	8:5	12	whiteboard_ui_ops
LEAF_NODE	8:23	8:23	10	&&
EXPR	8:26	8:26	10	whiteboard_ui_ops -> destroy
FIELD	8:26	8:45	11	whiteboard_ui_ops -> destroy
LEAF_NODE	8:26	8:26	12	whiteboard_ui_ops
LEAF_NODE	8:43	8:43	12	->
LEAF_NODE	8:45	8:45	12	destroy
LEAF_NODE	8:52	8:52	7	)
STATEMENTS	9:3	9:3	7	
EXPR_STATEMENT	9:3	9:33	8	whiteboard_ui_ops -> destroy ( wb ) ;
EXPR	9:3	9:3	9	whiteboard_ui_ops -> destroy ( wb )
FUNCTION_CALL	9:3	9:32	10	whiteboard_ui_ops -> destroy ( wb )
CALLEE	9:3	9:22	11	whiteboard_ui_ops -> destroy
LEAF_NODE	9:3	9:3	12	whiteboard_ui_ops
LEAF_NODE	9:20	9:20	12	->
LEAF_NODE	9:22	9:22	12	destroy
LEAF_NODE	9:29	9:29	11	(
ARGUMENT	9:30	9:30	11	wb
FIELD	9:30	9:30	12	wb
LEAF_NODE	9:30	9:30	13	wb
LEAF_NODE	9:32	9:32	11	)
LEAF_NODE	9:33	9:33	9	;
LEAF_NODE	10:1	10:1	5	}
SELECTION	12:1	13:2	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:3	12:3	4	(
CONDITION	12:4	12:4	4	wb -> prpl_ops && wb -> prpl_ops -> end
EXPR	12:4	12:4	5	wb -> prpl_ops && wb -> prpl_ops -> end
AND	12:4	12:20	6	wb -> prpl_ops && wb -> prpl_ops -> end
EXPR	12:4	12:4	7	wb -> prpl_ops
FIELD	12:4	12:8	8	wb -> prpl_ops
LEAF_NODE	12:4	12:4	9	wb
LEAF_NODE	12:6	12:6	9	->
LEAF_NODE	12:8	12:8	9	prpl_ops
LEAF_NODE	12:17	12:17	7	&&
EXPR	12:20	12:20	7	wb -> prpl_ops -> end
FIELD	12:20	12:34	8	wb -> prpl_ops -> end
LEAF_NODE	12:20	12:20	9	wb
LEAF_NODE	12:22	12:22	9	->
LEAF_NODE	12:24	12:24	9	prpl_ops
LEAF_NODE	12:32	12:32	9	->
LEAF_NODE	12:34	12:34	9	end
LEAF_NODE	12:37	12:37	4	)
STATEMENTS	13:2	13:2	4	
EXPR_STATEMENT	13:2	13:23	5	wb -> prpl_ops -> end ( wb ) ;
EXPR	13:2	13:2	6	wb -> prpl_ops -> end ( wb )
FUNCTION_CALL	13:2	13:22	7	wb -> prpl_ops -> end ( wb )
CALLEE	13:2	13:16	8	wb -> prpl_ops -> end
LEAF_NODE	13:2	13:2	9	wb
LEAF_NODE	13:4	13:4	9	->
LEAF_NODE	13:6	13:6	9	prpl_ops
LEAF_NODE	13:14	13:14	9	->
LEAF_NODE	13:16	13:16	9	end
LEAF_NODE	13:19	13:19	8	(
ARGUMENT	13:20	13:20	8	wb
FIELD	13:20	13:20	9	wb
LEAF_NODE	13:20	13:20	10	wb
LEAF_NODE	13:22	13:22	8	)
LEAF_NODE	13:23	13:23	6	;
EXPR_STATEMENT	14:1	14:16	3	g_free ( wb -> who ) ;
EXPR	14:1	14:1	4	g_free ( wb -> who )
FUNCTION_CALL	14:1	14:15	5	g_free ( wb -> who )
CALLEE	14:1	14:1	6	g_free
LEAF_NODE	14:1	14:1	7	g_free
LEAF_NODE	14:7	14:7	6	(
ARGUMENT	14:8	14:8	6	wb -> who
FIELD	14:8	14:12	7	wb -> who
LEAF_NODE	14:8	14:8	8	wb
LEAF_NODE	14:10	14:10	8	->
LEAF_NODE	14:12	14:12	8	who
LEAF_NODE	14:15	14:15	6	)
LEAF_NODE	14:16	14:16	4	;
EXPR_STATEMENT	15:1	15:35	3	wbList = g_list_remove ( wbList , wb ) ;
EXPR	15:1	15:1	4	wbList = g_list_remove ( wbList , wb )
ASSIGN	15:1	15:10	5	wbList = g_list_remove ( wbList , wb )
LVAL	15:1	15:1	6	wbList
FIELD	15:1	15:1	7	wbList
LEAF_NODE	15:1	15:1	8	wbList
ASSIGN_OP	15:8	15:8	6	=
LEAF_NODE	15:8	15:8	7	=
RVAL	15:10	15:10	6	g_list_remove ( wbList , wb )
FUNCTION_CALL	15:10	15:34	7	g_list_remove ( wbList , wb )
CALLEE	15:10	15:10	8	g_list_remove
LEAF_NODE	15:10	15:10	9	g_list_remove
LEAF_NODE	15:23	15:23	8	(
ARGUMENT	15:24	15:24	8	wbList
FIELD	15:24	15:24	9	wbList
LEAF_NODE	15:24	15:24	10	wbList
LEAF_NODE	15:30	15:30	8	,
ARGUMENT	15:32	15:32	8	wb
FIELD	15:32	15:32	9	wb
LEAF_NODE	15:32	15:32	10	wb
LEAF_NODE	15:34	15:34	8	)
LEAF_NODE	15:35	15:35	4	;
EXPR_STATEMENT	16:1	16:11	3	g_free ( wb ) ;
EXPR	16:1	16:1	4	g_free ( wb )
FUNCTION_CALL	16:1	16:10	5	g_free ( wb )
CALLEE	16:1	16:1	6	g_free
LEAF_NODE	16:1	16:1	7	g_free
LEAF_NODE	16:7	16:7	6	(
ARGUMENT	16:8	16:8	6	wb
FIELD	16:8	16:8	7	wb
LEAF_NODE	16:8	16:8	8	wb
LEAF_NODE	16:10	16:10	6	)
LEAF_NODE	16:11	16:11	4	;
LEAF_NODE	17:0	17:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:19	2	PurpleRequestUiOps *
TYPE_NAME	1:0	1:0	3	PurpleRequestUiOps
LEAF_NODE	1:0	1:0	4	PurpleRequestUiOps
LEAF_NODE	1:19	1:19	3	*
FUNCTION_NAME	2:0	2:0	2	pidgin_request_get_ui_ops
LEAF_NODE	2:0	2:0	3	pidgin_request_get_ui_ops
PARAMETER_LIST	2:25	2:30	2	( void )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:26	3	void
LEAF_NODE	2:26	2:26	4	void
LEAF_NODE	2:30	2:30	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:12	3	return & ops ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	& ops
EXPR	4:8	4:8	5	& ops
UNARY_EXPR	4:8	4:9	6	& ops
UNARY_OPERATOR	4:8	4:8	7	&
LEAF_NODE	4:8	4:8	8	&
FIELD	4:9	4:9	7	ops
LEAF_NODE	4:9	4:9	8	ops
LEAF_NODE	4:12	4:12	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	6:0	1	
RETURN_TYPE	2:0	2:10	2	GntWidget *
TYPE_NAME	2:0	2:0	3	GntWidget
LEAF_NODE	2:0	2:0	4	GntWidget
LEAF_NODE	2:10	2:10	3	*
FUNCTION_NAME	2:11	2:11	2	gnt_combo_box_new
LEAF_NODE	2:11	2:11	3	gnt_combo_box_new
PARAMETER_LIST	2:28	2:29	2	( )
LEAF_NODE	2:28	2:28	3	(
LEAF_NODE	2:29	2:29	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
SIMPLE_DECL	4:1	4:59	3	GntWidget * widget ; widget = g_object_new ( GNT_TYPE_COMBO_BOX , NULL ) ;
VAR_DECL	4:1	4:12	4	GntWidget * widget ; widget = g_object_new ( GNT_TYPE_COMBO_BOX , NULL )
TYPE	4:1	4:11	5	GntWidget *
TYPE_NAME	4:1	4:1	6	GntWidget
LEAF_NODE	4:1	4:1	7	GntWidget
POINTER	4:11	4:11	6	*
LEAF_NODE	4:11	4:11	7	*
NAME	4:12	4:12	5	widget
LEAF_NODE	4:12	4:12	6	widget
LEAF_NODE	0:0	0:0	5	;
INIT	4:12	4:12	5	widget = g_object_new ( GNT_TYPE_COMBO_BOX , NULL )
ASSIGN	4:12	4:21	6	widget = g_object_new ( GNT_TYPE_COMBO_BOX , NULL )
LVAL	4:12	4:12	7	widget
NAME	4:12	4:12	8	widget
LEAF_NODE	4:12	4:12	9	widget
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:21	7	g_object_new ( GNT_TYPE_COMBO_BOX , NULL )
FUNCTION_CALL	4:21	4:58	8	g_object_new ( GNT_TYPE_COMBO_BOX , NULL )
CALLEE	4:21	4:21	9	g_object_new
LEAF_NODE	4:21	4:21	10	g_object_new
LEAF_NODE	4:33	4:33	9	(
ARGUMENT	4:34	4:34	9	GNT_TYPE_COMBO_BOX
FIELD	4:34	4:34	10	GNT_TYPE_COMBO_BOX
LEAF_NODE	4:34	4:34	11	GNT_TYPE_COMBO_BOX
LEAF_NODE	4:52	4:52	9	,
ARGUMENT	4:54	4:54	9	NULL
FIELD	4:54	4:54	10	NULL
LEAF_NODE	4:54	4:54	11	NULL
LEAF_NODE	4:58	4:58	9	)
LEAF_NODE	4:59	4:59	4	;
JUMP_STATEMENT	5:1	5:14	3	return widget ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	widget
EXPR	5:8	5:8	5	widget
FIELD	5:8	5:8	6	widget
LEAF_NODE	5:8	5:8	7	widget
LEAF_NODE	5:14	5:14	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	27:0	1	
RETURN_TYPE	2:0	2:5	2	char *
TYPE_NAME	2:0	2:0	3	char
LEAF_NODE	2:0	2:0	4	char
LEAF_NODE	2:5	2:5	3	*
FUNCTION_NAME	2:6	2:6	2	gg_proxy_auth
LEAF_NODE	2:6	2:6	3	gg_proxy_auth
PARAMETER_LIST	2:19	2:24	2	( void )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:20	3	void
LEAF_NODE	2:20	2:20	4	void
LEAF_NODE	2:24	2:24	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	26:1	2	
SIMPLE_DECL	4:1	4:22	3	char * tmp , char * enc , char * out ;
INIT_DECL_LIST	4:1	4:1	4	char * tmp , char * enc , char * out
VAR_DECL	4:1	4:7	5	char * tmp
TYPE	4:1	4:6	6	char *
TYPE_NAME	4:1	4:1	7	char
LEAF_NODE	4:1	4:1	8	char
POINTER	4:6	4:6	7	*
LEAF_NODE	4:6	4:6	8	*
NAME	4:7	4:7	6	tmp
LEAF_NODE	4:7	4:7	7	tmp
LEAF_NODE	4:10	4:10	5	,
INIT_DECL_LIST	4:1	4:1	5	char * enc , char * out
VAR_DECL	4:1	4:13	6	char * enc
TYPE	4:1	4:12	7	char *
TYPE_NAME	4:1	4:1	8	char
LEAF_NODE	4:1	4:1	9	char
POINTER	4:12	4:12	8	*
LEAF_NODE	4:12	4:12	9	*
NAME	4:13	4:13	7	enc
LEAF_NODE	4:13	4:13	8	enc
LEAF_NODE	4:16	4:16	6	,
VAR_DECL	4:1	4:19	6	char * out
TYPE	4:1	4:18	7	char *
TYPE_NAME	4:1	4:1	8	char
LEAF_NODE	4:1	4:1	9	char
POINTER	4:18	4:18	8	*
LEAF_NODE	4:18	4:18	9	*
NAME	4:19	4:19	7	out
LEAF_NODE	4:19	4:19	8	out
LEAF_NODE	4:22	4:22	4	;
SIMPLE_DECL	5:1	5:22	3	unsigned int tmp_size ;
VAR_DECL	5:1	5:14	4	unsigned int tmp_size
TYPE	5:1	5:1	5	unsigned int
TYPE_NAME	5:1	5:10	6	unsigned int
LEAF_NODE	5:1	5:1	7	unsigned
LEAF_NODE	5:10	5:10	7	int
NAME	5:14	5:14	5	tmp_size
LEAF_NODE	5:14	5:14	6	tmp_size
LEAF_NODE	5:22	5:22	4	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	! gg_proxy_enabled || ! gg_proxy_username || ! gg_proxy_password
EXPR	6:5	6:5	5	! gg_proxy_enabled || ! gg_proxy_username || ! gg_proxy_password
OR	6:5	6:26	6	! gg_proxy_enabled || ! gg_proxy_username || ! gg_proxy_password
EXPR	6:5	6:5	7	! gg_proxy_enabled
UNARY_EXPR	6:5	6:6	8	! gg_proxy_enabled
UNARY_OPERATOR	6:5	6:5	9	!
LEAF_NODE	6:5	6:5	10	!
FIELD	6:6	6:6	9	gg_proxy_enabled
LEAF_NODE	6:6	6:6	10	gg_proxy_enabled
LEAF_NODE	6:23	6:23	7	||
EXPR	6:26	6:26	7	! gg_proxy_username || ! gg_proxy_password
OR	6:26	6:48	8	! gg_proxy_username || ! gg_proxy_password
EXPR	6:26	6:26	9	! gg_proxy_username
UNARY_EXPR	6:26	6:27	10	! gg_proxy_username
UNARY_OPERATOR	6:26	6:26	11	!
LEAF_NODE	6:26	6:26	12	!
FIELD	6:27	6:27	11	gg_proxy_username
LEAF_NODE	6:27	6:27	12	gg_proxy_username
LEAF_NODE	6:45	6:45	9	||
EXPR	6:48	6:48	9	! gg_proxy_password
UNARY_EXPR	6:48	6:49	10	! gg_proxy_password
UNARY_OPERATOR	6:48	6:48	11	!
LEAF_NODE	6:48	6:48	12	!
FIELD	6:49	6:49	11	gg_proxy_password
LEAF_NODE	6:49	6:49	12	gg_proxy_password
LEAF_NODE	6:66	6:66	4	)
STATEMENTS	7:2	7:2	4	
JUMP_STATEMENT	7:2	7:13	5	return NULL ;
KEYWORD	7:2	7:2	6	return
LEAF_NODE	7:2	7:2	7	return
DESTINATION	7:9	7:9	6	NULL
EXPR	7:9	7:9	7	NULL
FIELD	7:9	7:9	8	NULL
LEAF_NODE	7:9	7:9	9	NULL
LEAF_NODE	7:13	7:13	6	;
EXPR_STATEMENT	8:1	8:69	3	tmp_size = strlen ( gg_proxy_username ) + strlen ( gg_proxy_password ) + 2 ;
EXPR	8:1	8:1	4	tmp_size = strlen ( gg_proxy_username ) + strlen ( gg_proxy_password ) + 2
ASSIGN	8:1	8:12	5	tmp_size = strlen ( gg_proxy_username ) + strlen ( gg_proxy_password ) + 2
LVAL	8:1	8:1	6	tmp_size
FIELD	8:1	8:1	7	tmp_size
LEAF_NODE	8:1	8:1	8	tmp_size
ASSIGN_OP	8:10	8:10	6	=
LEAF_NODE	8:10	8:10	7	=
RVAL	8:12	8:68	6	strlen ( gg_proxy_username ) + strlen ( gg_proxy_password ) + 2
FUNCTION_CALL	8:12	8:36	7	strlen ( gg_proxy_username )
CALLEE	8:12	8:12	8	strlen
LEAF_NODE	8:12	8:12	9	strlen
LEAF_NODE	8:18	8:18	8	(
ARGUMENT	8:19	8:19	8	gg_proxy_username
FIELD	8:19	8:19	9	gg_proxy_username
LEAF_NODE	8:19	8:19	10	gg_proxy_username
LEAF_NODE	8:36	8:36	8	)
LEAF_NODE	8:38	8:38	7	+
FUNCTION_CALL	8:40	8:64	7	strlen ( gg_proxy_password )
CALLEE	8:40	8:40	8	strlen
LEAF_NODE	8:40	8:40	9	strlen
LEAF_NODE	8:46	8:46	8	(
ARGUMENT	8:47	8:47	8	gg_proxy_password
FIELD	8:47	8:47	9	gg_proxy_password
LEAF_NODE	8:47	8:47	10	gg_proxy_password
LEAF_NODE	8:64	8:64	8	)
LEAF_NODE	8:66	8:66	7	+
FIELD	8:68	8:68	7	2
LEAF_NODE	8:68	8:68	8	2
LEAF_NODE	8:69	8:69	4	;
EXPR_STATEMENT	9:1	9:23	3	tmp = malloc ( tmp_size ) ;
EXPR	9:1	9:1	4	tmp = malloc ( tmp_size )
ASSIGN	9:1	9:7	5	tmp = malloc ( tmp_size )
LVAL	9:1	9:1	6	tmp
FIELD	9:1	9:1	7	tmp
LEAF_NODE	9:1	9:1	8	tmp
ASSIGN_OP	9:5	9:5	6	=
LEAF_NODE	9:5	9:5	7	=
RVAL	9:7	9:7	6	malloc ( tmp_size )
FUNCTION_CALL	9:7	9:22	7	malloc ( tmp_size )
CALLEE	9:7	9:7	8	malloc
LEAF_NODE	9:7	9:7	9	malloc
LEAF_NODE	9:13	9:13	8	(
ARGUMENT	9:14	9:14	8	tmp_size
FIELD	9:14	9:14	9	tmp_size
LEAF_NODE	9:14	9:14	10	tmp_size
LEAF_NODE	9:22	9:22	8	)
LEAF_NODE	9:23	9:23	4	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	! tmp
EXPR	10:5	10:5	5	! tmp
UNARY_EXPR	10:5	10:6	6	! tmp
UNARY_OPERATOR	10:5	10:5	7	!
LEAF_NODE	10:5	10:5	8	!
FIELD	10:6	10:6	7	tmp
LEAF_NODE	10:6	10:6	8	tmp
LEAF_NODE	10:9	10:9	4	)
STATEMENTS	11:2	11:2	4	
JUMP_STATEMENT	11:2	11:13	5	return NULL ;
KEYWORD	11:2	11:2	6	return
LEAF_NODE	11:2	11:2	7	return
DESTINATION	11:9	11:9	6	NULL
EXPR	11:9	11:9	7	NULL
FIELD	11:9	11:9	8	NULL
LEAF_NODE	11:9	11:9	9	NULL
LEAF_NODE	11:13	11:13	6	;
EXPR_STATEMENT	12:1	12:71	3	snprintf ( tmp , tmp_size , "%s:%s" , gg_proxy_username , gg_proxy_password ) ;
EXPR	12:1	12:1	4	snprintf ( tmp , tmp_size , "%s:%s" , gg_proxy_username , gg_proxy_password )
FUNCTION_CALL	12:1	12:70	5	snprintf ( tmp , tmp_size , "%s:%s" , gg_proxy_username , gg_proxy_password )
CALLEE	12:1	12:1	6	snprintf
LEAF_NODE	12:1	12:1	7	snprintf
LEAF_NODE	12:9	12:9	6	(
ARGUMENT	12:10	12:10	6	tmp
FIELD	12:10	12:10	7	tmp
LEAF_NODE	12:10	12:10	8	tmp
LEAF_NODE	12:13	12:13	6	,
ARGUMENT	12:15	12:15	6	tmp_size
FIELD	12:15	12:15	7	tmp_size
LEAF_NODE	12:15	12:15	8	tmp_size
LEAF_NODE	12:23	12:23	6	,
ARGUMENT	12:25	12:25	6	"%s:%s"
FIELD	12:25	12:25	7	"%s:%s"
LEAF_NODE	12:25	12:25	8	"%s:%s"
LEAF_NODE	12:32	12:32	6	,
ARGUMENT	12:34	12:34	6	gg_proxy_username
FIELD	12:34	12:34	7	gg_proxy_username
LEAF_NODE	12:34	12:34	8	gg_proxy_username
LEAF_NODE	12:51	12:51	6	,
ARGUMENT	12:53	12:53	6	gg_proxy_password
FIELD	12:53	12:53	7	gg_proxy_password
LEAF_NODE	12:53	12:53	8	gg_proxy_password
LEAF_NODE	12:70	12:70	6	)
LEAF_NODE	12:71	12:71	4	;
EXPR_STATEMENT	13:1	13:28	3	enc = gg_base64_encode ( tmp ) ;
EXPR	13:1	13:1	4	enc = gg_base64_encode ( tmp )
ASSIGN	13:1	13:7	5	enc = gg_base64_encode ( tmp )
LVAL	13:1	13:1	6	enc
FIELD	13:1	13:1	7	enc
LEAF_NODE	13:1	13:1	8	enc
ASSIGN_OP	13:5	13:5	6	=
LEAF_NODE	13:5	13:5	7	=
RVAL	13:7	13:7	6	gg_base64_encode ( tmp )
FUNCTION_CALL	13:7	13:27	7	gg_base64_encode ( tmp )
CALLEE	13:7	13:7	8	gg_base64_encode
LEAF_NODE	13:7	13:7	9	gg_base64_encode
LEAF_NODE	13:23	13:23	8	(
ARGUMENT	13:24	13:24	8	tmp
FIELD	13:24	13:24	9	tmp
LEAF_NODE	13:24	13:24	10	tmp
LEAF_NODE	13:27	13:27	8	)
LEAF_NODE	13:28	13:28	4	;
SELECTION	14:1	14:11	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	! enc
EXPR	14:5	14:5	5	! enc
UNARY_EXPR	14:5	14:6	6	! enc
UNARY_OPERATOR	14:5	14:5	7	!
LEAF_NODE	14:5	14:5	8	!
FIELD	14:6	14:6	7	enc
LEAF_NODE	14:6	14:6	8	enc
LEAF_NODE	14:9	14:9	4	)
STATEMENTS	14:11	17:1	4	
LEAF_NODE	14:11	14:11	5	{
STATEMENTS	15:2	16:2	5	
EXPR_STATEMENT	15:2	15:11	6	free ( tmp ) ;
EXPR	15:2	15:2	7	free ( tmp )
FUNCTION_CALL	15:2	15:10	8	free ( tmp )
CALLEE	15:2	15:2	9	free
LEAF_NODE	15:2	15:2	10	free
LEAF_NODE	15:6	15:6	9	(
ARGUMENT	15:7	15:7	9	tmp
FIELD	15:7	15:7	10	tmp
LEAF_NODE	15:7	15:7	11	tmp
LEAF_NODE	15:10	15:10	9	)
LEAF_NODE	15:11	15:11	7	;
JUMP_STATEMENT	16:2	16:13	6	return NULL ;
KEYWORD	16:2	16:2	7	return
LEAF_NODE	16:2	16:2	8	return
DESTINATION	16:9	16:9	7	NULL
EXPR	16:9	16:9	8	NULL
FIELD	16:9	16:9	9	NULL
LEAF_NODE	16:9	16:9	10	NULL
LEAF_NODE	16:13	16:13	7	;
LEAF_NODE	17:1	17:1	5	}
EXPR_STATEMENT	18:1	18:10	3	free ( tmp ) ;
EXPR	18:1	18:1	4	free ( tmp )
FUNCTION_CALL	18:1	18:9	5	free ( tmp )
CALLEE	18:1	18:1	6	free
LEAF_NODE	18:1	18:1	7	free
LEAF_NODE	18:5	18:5	6	(
ARGUMENT	18:6	18:6	6	tmp
FIELD	18:6	18:6	7	tmp
LEAF_NODE	18:6	18:6	8	tmp
LEAF_NODE	18:9	18:9	6	)
LEAF_NODE	18:10	18:10	4	;
EXPR_STATEMENT	19:1	19:31	3	out = malloc ( strlen ( enc ) + 40 ) ;
EXPR	19:1	19:1	4	out = malloc ( strlen ( enc ) + 40 )
ASSIGN	19:1	19:7	5	out = malloc ( strlen ( enc ) + 40 )
LVAL	19:1	19:1	6	out
FIELD	19:1	19:1	7	out
LEAF_NODE	19:1	19:1	8	out
ASSIGN_OP	19:5	19:5	6	=
LEAF_NODE	19:5	19:5	7	=
RVAL	19:7	19:7	6	malloc ( strlen ( enc ) + 40 )
FUNCTION_CALL	19:7	19:30	7	malloc ( strlen ( enc ) + 40 )
CALLEE	19:7	19:7	8	malloc
LEAF_NODE	19:7	19:7	9	malloc
LEAF_NODE	19:13	19:13	8	(
ARGUMENT	19:14	19:28	8	strlen ( enc ) + 40
FUNCTION_CALL	19:14	19:24	9	strlen ( enc )
CALLEE	19:14	19:14	10	strlen
LEAF_NODE	19:14	19:14	11	strlen
LEAF_NODE	19:20	19:20	10	(
ARGUMENT	19:21	19:21	10	enc
FIELD	19:21	19:21	11	enc
LEAF_NODE	19:21	19:21	12	enc
LEAF_NODE	19:24	19:24	10	)
LEAF_NODE	19:26	19:26	9	+
FIELD	19:28	19:28	9	40
LEAF_NODE	19:28	19:28	10	40
LEAF_NODE	19:30	19:30	8	)
LEAF_NODE	19:31	19:31	4	;
SELECTION	20:1	20:11	3	
KEYWORD	20:1	20:1	4	if
LEAF_NODE	20:1	20:1	5	if
LEAF_NODE	20:4	20:4	4	(
CONDITION	20:5	20:5	4	! out
EXPR	20:5	20:5	5	! out
UNARY_EXPR	20:5	20:6	6	! out
UNARY_OPERATOR	20:5	20:5	7	!
LEAF_NODE	20:5	20:5	8	!
FIELD	20:6	20:6	7	out
LEAF_NODE	20:6	20:6	8	out
LEAF_NODE	20:9	20:9	4	)
STATEMENTS	20:11	23:1	4	
LEAF_NODE	20:11	20:11	5	{
STATEMENTS	21:2	22:2	5	
EXPR_STATEMENT	21:2	21:11	6	free ( enc ) ;
EXPR	21:2	21:2	7	free ( enc )
FUNCTION_CALL	21:2	21:10	8	free ( enc )
CALLEE	21:2	21:2	9	free
LEAF_NODE	21:2	21:2	10	free
LEAF_NODE	21:6	21:6	9	(
ARGUMENT	21:7	21:7	9	enc
FIELD	21:7	21:7	10	enc
LEAF_NODE	21:7	21:7	11	enc
LEAF_NODE	21:10	21:10	9	)
LEAF_NODE	21:11	21:11	7	;
JUMP_STATEMENT	22:2	22:13	6	return NULL ;
KEYWORD	22:2	22:2	7	return
LEAF_NODE	22:2	22:2	8	return
DESTINATION	22:9	22:9	7	NULL
EXPR	22:9	22:9	8	NULL
FIELD	22:9	22:9	9	NULL
LEAF_NODE	22:9	22:9	10	NULL
LEAF_NODE	22:13	22:13	7	;
LEAF_NODE	23:1	23:1	5	}
EXPR_STATEMENT	24:1	24:75	3	snprintf ( out , strlen ( enc ) + 40 , "Proxy-Authorization: Basic %s\r\n" , enc ) ;
EXPR	24:1	24:1	4	snprintf ( out , strlen ( enc ) + 40 , "Proxy-Authorization: Basic %s\r\n" , enc )
FUNCTION_CALL	24:1	24:74	5	snprintf ( out , strlen ( enc ) + 40 , "Proxy-Authorization: Basic %s\r\n" , enc )
CALLEE	24:1	24:1	6	snprintf
LEAF_NODE	24:1	24:1	7	snprintf
LEAF_NODE	24:9	24:9	6	(
ARGUMENT	24:10	24:10	6	out
FIELD	24:10	24:10	7	out
LEAF_NODE	24:10	24:10	8	out
LEAF_NODE	24:13	24:13	6	,
ARGUMENT	24:15	24:29	6	strlen ( enc ) + 40
FUNCTION_CALL	24:15	24:25	7	strlen ( enc )
CALLEE	24:15	24:15	8	strlen
LEAF_NODE	24:15	24:15	9	strlen
LEAF_NODE	24:21	24:21	8	(
ARGUMENT	24:22	24:22	8	enc
FIELD	24:22	24:22	9	enc
LEAF_NODE	24:22	24:22	10	enc
LEAF_NODE	24:25	24:25	8	)
LEAF_NODE	24:27	24:27	7	+
FIELD	24:29	24:29	7	40
LEAF_NODE	24:29	24:29	8	40
LEAF_NODE	24:31	24:31	6	,
ARGUMENT	24:34	24:34	6	"Proxy-Authorization: Basic %s\r\n"
FIELD	24:34	24:34	7	"Proxy-Authorization: Basic %s\r\n"
LEAF_NODE	24:34	24:34	8	"Proxy-Authorization: Basic %s\r\n"
LEAF_NODE	24:69	24:69	6	,
ARGUMENT	24:71	24:71	6	enc
FIELD	24:71	24:71	7	enc
LEAF_NODE	24:71	24:71	8	enc
LEAF_NODE	24:74	24:74	6	)
LEAF_NODE	24:75	24:75	4	;
EXPR_STATEMENT	25:1	25:10	3	free ( enc ) ;
EXPR	25:1	25:1	4	free ( enc )
FUNCTION_CALL	25:1	25:9	5	free ( enc )
CALLEE	25:1	25:1	6	free
LEAF_NODE	25:1	25:1	7	free
LEAF_NODE	25:5	25:5	6	(
ARGUMENT	25:6	25:6	6	enc
FIELD	25:6	25:6	7	enc
LEAF_NODE	25:6	25:6	8	enc
LEAF_NODE	25:9	25:9	6	)
LEAF_NODE	25:10	25:10	4	;
JUMP_STATEMENT	26:1	26:11	3	return out ;
KEYWORD	26:1	26:1	4	return
LEAF_NODE	26:1	26:1	5	return
DESTINATION	26:8	26:8	4	out
EXPR	26:8	26:8	5	out
FIELD	26:8	26:8	6	out
LEAF_NODE	26:8	26:8	7	out
LEAF_NODE	26:11	26:11	4	;
LEAF_NODE	27:0	27:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	11:0	1	
RETURN_TYPE	2:0	2:7	2	static PurpleCmdRet
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	PurpleCmdRet
LEAF_NODE	2:7	2:7	4	PurpleCmdRet
FUNCTION_NAME	2:20	2:20	2	zephyr_purple_cmd_zi
LEAF_NODE	2:20	2:20	3	zephyr_purple_cmd_zi
PARAMETER_LIST	2:40	3:63	2	( PurpleConversation * conv , const char * cmd , char * * args , char * * error , void * data )
LEAF_NODE	2:40	2:40	3	(
PARAMETER_DECL	2:41	2:61	3	PurpleConversation * conv
TYPE	2:41	2:60	4	PurpleConversation *
TYPE_NAME	2:41	2:41	5	PurpleConversation
LEAF_NODE	2:41	2:41	6	PurpleConversation
POINTER	2:60	2:60	5	*
LEAF_NODE	2:60	2:60	6	*
NAME	2:61	2:61	4	conv
LEAF_NODE	2:61	2:61	5	conv
LEAF_NODE	2:65	2:65	3	,
PARAMETER_DECL	3:9	3:21	3	const char * cmd
TYPE	3:9	3:20	4	const char *
TYPE_NAME	3:9	3:15	5	const char
LEAF_NODE	3:9	3:9	6	const
LEAF_NODE	3:15	3:15	6	char
POINTER	3:20	3:20	5	*
LEAF_NODE	3:20	3:20	6	*
NAME	3:21	3:21	4	cmd
LEAF_NODE	3:21	3:21	5	cmd
LEAF_NODE	3:24	3:24	3	,
PARAMETER_DECL	3:26	3:33	3	char * * args
TYPE	3:26	3:31	4	char * *
TYPE_NAME	3:26	3:26	5	char
LEAF_NODE	3:26	3:26	6	char
POINTER	3:31	3:32	5	* *
LEAF_NODE	3:31	3:31	6	*
LEAF_NODE	3:32	3:32	6	*
NAME	3:33	3:33	4	args
LEAF_NODE	3:33	3:33	5	args
LEAF_NODE	3:37	3:37	3	,
PARAMETER_DECL	3:39	3:46	3	char * * error
TYPE	3:39	3:44	4	char * *
TYPE_NAME	3:39	3:39	5	char
LEAF_NODE	3:39	3:39	6	char
POINTER	3:44	3:45	5	* *
LEAF_NODE	3:44	3:44	6	*
LEAF_NODE	3:45	3:45	6	*
NAME	3:46	3:46	4	error
LEAF_NODE	3:46	3:46	5	error
LEAF_NODE	3:51	3:51	3	,
PARAMETER_DECL	3:53	3:59	3	void * data
TYPE	3:53	3:58	4	void *
TYPE_NAME	3:53	3:53	5	void
LEAF_NODE	3:53	3:53	6	void
POINTER	3:58	3:58	5	*
LEAF_NODE	3:58	3:58	6	*
NAME	3:59	3:59	4	data
LEAF_NODE	3:59	3:59	5	data
LEAF_NODE	3:63	3:63	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	6:1	9:1	2	
SIMPLE_DECL	6:1	6:70	3	zephyr_account * zephyr ; zephyr = purple_conversation_get_gc ( conv ) -> proto_data ;
VAR_DECL	6:1	6:17	4	zephyr_account * zephyr ; zephyr = purple_conversation_get_gc ( conv ) -> proto_data
TYPE	6:1	6:16	5	zephyr_account *
TYPE_NAME	6:1	6:1	6	zephyr_account
LEAF_NODE	6:1	6:1	7	zephyr_account
POINTER	6:16	6:16	6	*
LEAF_NODE	6:16	6:16	7	*
NAME	6:17	6:17	5	zephyr
LEAF_NODE	6:17	6:17	6	zephyr
LEAF_NODE	0:0	0:0	5	;
INIT	6:17	6:17	5	zephyr = purple_conversation_get_gc ( conv ) -> proto_data
ASSIGN	6:17	6:26	6	zephyr = purple_conversation_get_gc ( conv ) -> proto_data
LVAL	6:17	6:17	7	zephyr
NAME	6:17	6:17	8	zephyr
LEAF_NODE	6:17	6:17	9	zephyr
ASSIGN_OP	6:24	6:24	7	=
LEAF_NODE	6:24	6:24	8	=
RVAL	6:26	6:60	7	purple_conversation_get_gc ( conv ) -> proto_data
FUNCTION_CALL	6:26	6:57	8	purple_conversation_get_gc ( conv )
CALLEE	6:26	6:26	9	purple_conversation_get_gc
LEAF_NODE	6:26	6:26	10	purple_conversation_get_gc
LEAF_NODE	6:52	6:52	9	(
ARGUMENT	6:53	6:53	9	conv
FIELD	6:53	6:53	10	conv
LEAF_NODE	6:53	6:53	11	conv
LEAF_NODE	6:57	6:57	9	)
LEAF_NODE	6:58	6:58	8	->
LEAF_NODE	6:60	6:60	8	proto_data
LEAF_NODE	6:70	6:70	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:6	7:6	4	zephyr_send_message ( zephyr , "message" , args [ 0 ] , "" , args [ 1 ] , zephyr_get_signature ( ) , "" )
EXPR	7:6	7:6	5	zephyr_send_message ( zephyr , "message" , args [ 0 ] , "" , args [ 1 ] , zephyr_get_signature ( ) , "" )
FUNCTION_CALL	7:6	7:87	6	zephyr_send_message ( zephyr , "message" , args [ 0 ] , "" , args [ 1 ] , zephyr_get_signature ( ) , "" )
CALLEE	7:6	7:6	7	zephyr_send_message
LEAF_NODE	7:6	7:6	8	zephyr_send_message
LEAF_NODE	7:25	7:25	7	(
ARGUMENT	7:26	7:26	7	zephyr
FIELD	7:26	7:26	8	zephyr
LEAF_NODE	7:26	7:26	9	zephyr
LEAF_NODE	7:32	7:32	7	,
ARGUMENT	7:33	7:33	7	"message"
FIELD	7:33	7:33	8	"message"
LEAF_NODE	7:33	7:33	9	"message"
LEAF_NODE	7:42	7:42	7	,
ARGUMENT	7:43	7:43	7	args [ 0 ]
FIELD	7:43	7:49	8	args [ 0 ]
LEAF_NODE	7:43	7:43	9	args
LEAF_NODE	7:47	7:47	9	[
EXPR	7:48	7:48	9	0
FIELD	7:48	7:48	10	0
LEAF_NODE	7:48	7:48	11	0
LEAF_NODE	7:49	7:49	9	]
LEAF_NODE	7:50	7:50	7	,
ARGUMENT	7:51	7:51	7	""
FIELD	7:51	7:51	8	""
LEAF_NODE	7:51	7:51	9	""
LEAF_NODE	7:53	7:53	7	,
ARGUMENT	7:54	7:54	7	args [ 1 ]
FIELD	7:54	7:60	8	args [ 1 ]
LEAF_NODE	7:54	7:54	9	args
LEAF_NODE	7:58	7:58	9	[
EXPR	7:59	7:59	9	1
FIELD	7:59	7:59	10	1
LEAF_NODE	7:59	7:59	11	1
LEAF_NODE	7:60	7:60	9	]
LEAF_NODE	7:61	7:61	7	,
ARGUMENT	7:62	7:62	7	zephyr_get_signature ( )
FUNCTION_CALL	7:62	7:83	8	zephyr_get_signature ( )
CALLEE	7:62	7:62	9	zephyr_get_signature
LEAF_NODE	7:62	7:62	10	zephyr_get_signature
LEAF_NODE	7:82	7:82	9	(
LEAF_NODE	7:83	7:83	9	)
LEAF_NODE	7:84	7:84	7	,
ARGUMENT	7:85	7:85	7	""
FIELD	7:85	7:85	8	""
LEAF_NODE	7:85	7:85	9	""
LEAF_NODE	7:87	7:87	7	)
LEAF_NODE	7:88	7:88	4	)
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:26	5	return PURPLE_CMD_RET_OK ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
DESTINATION	8:9	8:9	6	PURPLE_CMD_RET_OK
EXPR	8:9	8:9	7	PURPLE_CMD_RET_OK
FIELD	8:9	8:9	8	PURPLE_CMD_RET_OK
LEAF_NODE	8:9	8:9	9	PURPLE_CMD_RET_OK
LEAF_NODE	8:26	8:26	6	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	else
LEAF_NODE	9:1	9:1	5	else
STATEMENTS	10:2	10:2	4	
JUMP_STATEMENT	10:2	10:30	5	return PURPLE_CMD_RET_FAILED ;
KEYWORD	10:2	10:2	6	return
LEAF_NODE	10:2	10:2	7	return
DESTINATION	10:9	10:9	6	PURPLE_CMD_RET_FAILED
EXPR	10:9	10:9	7	PURPLE_CMD_RET_FAILED
FIELD	10:9	10:9	8	PURPLE_CMD_RET_FAILED
LEAF_NODE	10:9	10:9	9	PURPLE_CMD_RET_FAILED
LEAF_NODE	10:30	10:30	6	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	1:0	16:0	0	
FUNCTION_DEF	1:0	15:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	blist_created_cb
LEAF_NODE	2:0	2:0	3	blist_created_cb
PARAMETER_LIST	2:16	2:61	2	( PurpleBuddyList * purple_blist , gpointer data )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:34	3	PurpleBuddyList * purple_blist
TYPE	2:17	2:33	4	PurpleBuddyList *
TYPE_NAME	2:17	2:17	5	PurpleBuddyList
LEAF_NODE	2:17	2:17	6	PurpleBuddyList
POINTER	2:33	2:33	5	*
LEAF_NODE	2:33	2:33	6	*
NAME	2:34	2:34	4	purple_blist
LEAF_NODE	2:34	2:34	5	purple_blist
LEAF_NODE	2:46	2:46	3	,
PARAMETER_DECL	2:48	2:57	3	gpointer data
TYPE	2:48	2:48	4	gpointer
TYPE_NAME	2:48	2:48	5	gpointer
LEAF_NODE	2:48	2:48	6	gpointer
NAME	2:57	2:57	4	data
LEAF_NODE	2:57	2:57	5	data
LEAF_NODE	2:61	2:61	3	)
LEAF_NODE	2:63	2:63	2	{
STATEMENTS	3:1	3:1	2	
SELECTION	3:1	3:12	3	
KEYWORD	3:1	3:1	4	if
LEAF_NODE	3:1	3:1	5	if
LEAF_NODE	3:4	3:4	4	(
CONDITION	3:5	3:5	4	blist
EXPR	3:5	3:5	5	blist
FIELD	3:5	3:5	6	blist
LEAF_NODE	3:5	3:5	7	blist
LEAF_NODE	3:10	3:10	4	)
STATEMENTS	3:12	14:1	4	
LEAF_NODE	3:12	3:12	5	{
STATEMENTS	4:2	12:2	5	
SELECTION	4:2	4:54	6	
KEYWORD	4:2	4:2	7	if
LEAF_NODE	4:2	4:2	8	if
LEAF_NODE	4:5	4:5	7	(
CONDITION	4:6	4:6	7	purple_prefs_get_bool ( OPT_WINTRANS_BL_ENABLED )
EXPR	4:6	4:6	8	purple_prefs_get_bool ( OPT_WINTRANS_BL_ENABLED )
FUNCTION_CALL	4:6	4:51	9	purple_prefs_get_bool ( OPT_WINTRANS_BL_ENABLED )
CALLEE	4:6	4:6	10	purple_prefs_get_bool
LEAF_NODE	4:6	4:6	11	purple_prefs_get_bool
LEAF_NODE	4:27	4:27	10	(
ARGUMENT	4:28	4:28	10	OPT_WINTRANS_BL_ENABLED
FIELD	4:28	4:28	11	OPT_WINTRANS_BL_ENABLED
LEAF_NODE	4:28	4:28	12	OPT_WINTRANS_BL_ENABLED
LEAF_NODE	4:51	4:51	10	)
LEAF_NODE	4:52	4:52	7	)
STATEMENTS	4:54	9:2	7	
LEAF_NODE	4:54	4:54	8	{
STATEMENTS	5:3	5:3	8	
EXPR_STATEMENT	5:3	8:49	9	set_wintrans ( blist , purple_prefs_get_int ( OPT_WINTRANS_BL_ALPHA ) , TRUE , purple_prefs_get_bool ( OPT_WINTRANS_BL_ONTOP ) ) ;
EXPR	5:3	5:3	10	set_wintrans ( blist , purple_prefs_get_int ( OPT_WINTRANS_BL_ALPHA ) , TRUE , purple_prefs_get_bool ( OPT_WINTRANS_BL_ONTOP ) )
FUNCTION_CALL	5:3	8:48	11	set_wintrans ( blist , purple_prefs_get_int ( OPT_WINTRANS_BL_ALPHA ) , TRUE , purple_prefs_get_bool ( OPT_WINTRANS_BL_ONTOP ) )
CALLEE	5:3	5:3	12	set_wintrans
LEAF_NODE	5:3	5:3	13	set_wintrans
LEAF_NODE	5:15	5:15	12	(
ARGUMENT	5:16	5:16	12	blist
FIELD	5:16	5:16	13	blist
LEAF_NODE	5:16	5:16	14	blist
LEAF_NODE	5:21	5:21	12	,
ARGUMENT	6:4	6:4	12	purple_prefs_get_int ( OPT_WINTRANS_BL_ALPHA )
FUNCTION_CALL	6:4	6:46	13	purple_prefs_get_int ( OPT_WINTRANS_BL_ALPHA )
CALLEE	6:4	6:4	14	purple_prefs_get_int
LEAF_NODE	6:4	6:4	15	purple_prefs_get_int
LEAF_NODE	6:24	6:24	14	(
ARGUMENT	6:25	6:25	14	OPT_WINTRANS_BL_ALPHA
FIELD	6:25	6:25	15	OPT_WINTRANS_BL_ALPHA
LEAF_NODE	6:25	6:25	16	OPT_WINTRANS_BL_ALPHA
LEAF_NODE	6:46	6:46	14	)
LEAF_NODE	6:47	6:47	12	,
ARGUMENT	7:4	7:4	12	TRUE
FIELD	7:4	7:4	13	TRUE
LEAF_NODE	7:4	7:4	14	TRUE
LEAF_NODE	7:8	7:8	12	,
ARGUMENT	8:4	8:4	12	purple_prefs_get_bool ( OPT_WINTRANS_BL_ONTOP )
FUNCTION_CALL	8:4	8:47	13	purple_prefs_get_bool ( OPT_WINTRANS_BL_ONTOP )
CALLEE	8:4	8:4	14	purple_prefs_get_bool
LEAF_NODE	8:4	8:4	15	purple_prefs_get_bool
LEAF_NODE	8:25	8:25	14	(
ARGUMENT	8:26	8:26	14	OPT_WINTRANS_BL_ONTOP
FIELD	8:26	8:26	15	OPT_WINTRANS_BL_ONTOP
LEAF_NODE	8:26	8:26	16	OPT_WINTRANS_BL_ONTOP
LEAF_NODE	8:47	8:47	14	)
LEAF_NODE	8:48	8:48	12	)
LEAF_NODE	8:49	8:49	10	;
LEAF_NODE	9:2	9:2	8	}
EXPR_STATEMENT	10:2	11:41	6	g_signal_connect ( G_OBJECT ( blist ) , "focus_in_event" , G_CALLBACK ( focus_blist_win_cb ) , blist ) ;
EXPR	10:2	10:2	7	g_signal_connect ( G_OBJECT ( blist ) , "focus_in_event" , G_CALLBACK ( focus_blist_win_cb ) , blist )
FUNCTION_CALL	10:2	11:40	8	g_signal_connect ( G_OBJECT ( blist ) , "focus_in_event" , G_CALLBACK ( focus_blist_win_cb ) , blist )
CALLEE	10:2	10:2	9	g_signal_connect
LEAF_NODE	10:2	10:2	10	g_signal_connect
LEAF_NODE	10:18	10:18	9	(
ARGUMENT	10:19	10:19	9	G_OBJECT ( blist )
FUNCTION_CALL	10:19	10:33	10	G_OBJECT ( blist )
CALLEE	10:19	10:19	11	G_OBJECT
LEAF_NODE	10:19	10:19	12	G_OBJECT
LEAF_NODE	10:27	10:27	11	(
ARGUMENT	10:28	10:28	11	blist
FIELD	10:28	10:28	12	blist
LEAF_NODE	10:28	10:28	13	blist
LEAF_NODE	10:33	10:33	11	)
LEAF_NODE	10:34	10:34	9	,
ARGUMENT	10:36	10:36	9	"focus_in_event"
FIELD	10:36	10:36	10	"focus_in_event"
LEAF_NODE	10:36	10:36	11	"focus_in_event"
LEAF_NODE	10:52	10:52	9	,
ARGUMENT	11:3	11:3	9	G_CALLBACK ( focus_blist_win_cb )
FUNCTION_CALL	11:3	11:32	10	G_CALLBACK ( focus_blist_win_cb )
CALLEE	11:3	11:3	11	G_CALLBACK
LEAF_NODE	11:3	11:3	12	G_CALLBACK
LEAF_NODE	11:13	11:13	11	(
ARGUMENT	11:14	11:14	11	focus_blist_win_cb
FIELD	11:14	11:14	12	focus_blist_win_cb
LEAF_NODE	11:14	11:14	13	focus_blist_win_cb
LEAF_NODE	11:32	11:32	11	)
LEAF_NODE	11:33	11:33	9	,
ARGUMENT	11:35	11:35	9	blist
FIELD	11:35	11:35	10	blist
LEAF_NODE	11:35	11:35	11	blist
LEAF_NODE	11:40	11:40	9	)
LEAF_NODE	11:41	11:41	7	;
EXPR_STATEMENT	12:2	13:41	6	g_signal_connect ( G_OBJECT ( blist ) , "focus_out_event" , G_CALLBACK ( focus_blist_win_cb ) , blist ) ;
EXPR	12:2	12:2	7	g_signal_connect ( G_OBJECT ( blist ) , "focus_out_event" , G_CALLBACK ( focus_blist_win_cb ) , blist )
FUNCTION_CALL	12:2	13:40	8	g_signal_connect ( G_OBJECT ( blist ) , "focus_out_event" , G_CALLBACK ( focus_blist_win_cb ) , blist )
CALLEE	12:2	12:2	9	g_signal_connect
LEAF_NODE	12:2	12:2	10	g_signal_connect
LEAF_NODE	12:18	12:18	9	(
ARGUMENT	12:19	12:19	9	G_OBJECT ( blist )
FUNCTION_CALL	12:19	12:33	10	G_OBJECT ( blist )
CALLEE	12:19	12:19	11	G_OBJECT
LEAF_NODE	12:19	12:19	12	G_OBJECT
LEAF_NODE	12:27	12:27	11	(
ARGUMENT	12:28	12:28	11	blist
FIELD	12:28	12:28	12	blist
LEAF_NODE	12:28	12:28	13	blist
LEAF_NODE	12:33	12:33	11	)
LEAF_NODE	12:34	12:34	9	,
ARGUMENT	12:36	12:36	9	"focus_out_event"
FIELD	12:36	12:36	10	"focus_out_event"
LEAF_NODE	12:36	12:36	11	"focus_out_event"
LEAF_NODE	12:53	12:53	9	,
ARGUMENT	13:3	13:3	9	G_CALLBACK ( focus_blist_win_cb )
FUNCTION_CALL	13:3	13:32	10	G_CALLBACK ( focus_blist_win_cb )
CALLEE	13:3	13:3	11	G_CALLBACK
LEAF_NODE	13:3	13:3	12	G_CALLBACK
LEAF_NODE	13:13	13:13	11	(
ARGUMENT	13:14	13:14	11	focus_blist_win_cb
FIELD	13:14	13:14	12	focus_blist_win_cb
LEAF_NODE	13:14	13:14	13	focus_blist_win_cb
LEAF_NODE	13:32	13:32	11	)
LEAF_NODE	13:33	13:33	9	,
ARGUMENT	13:35	13:35	9	blist
FIELD	13:35	13:35	10	blist
LEAF_NODE	13:35	13:35	11	blist
LEAF_NODE	13:40	13:40	9	)
LEAF_NODE	13:41	13:41	7	;
LEAF_NODE	14:1	14:1	5	}
LEAF_NODE	15:0	15:0	2	}
FUNCTION_DEF	16:0	30:0	1	
RETURN_TYPE	16:0	16:7	2	static void
LEAF_NODE	16:0	16:0	3	static
TYPE_NAME	16:7	16:7	3	void
LEAF_NODE	16:7	16:7	4	void
FUNCTION_NAME	17:0	17:0	2	blist_created_cb
LEAF_NODE	17:0	17:0	3	blist_created_cb
PARAMETER_LIST	17:16	17:61	2	( PurpleBuddyList * purple_blist , gpointer data )
LEAF_NODE	17:16	17:16	3	(
PARAMETER_DECL	17:17	17:34	3	PurpleBuddyList * purple_blist
TYPE	17:17	17:33	4	PurpleBuddyList *
TYPE_NAME	17:17	17:17	5	PurpleBuddyList
LEAF_NODE	17:17	17:17	6	PurpleBuddyList
POINTER	17:33	17:33	5	*
LEAF_NODE	17:33	17:33	6	*
NAME	17:34	17:34	4	purple_blist
LEAF_NODE	17:34	17:34	5	purple_blist
LEAF_NODE	17:46	17:46	3	,
PARAMETER_DECL	17:48	17:57	3	gpointer data
TYPE	17:48	17:48	4	gpointer
TYPE_NAME	17:48	17:48	5	gpointer
LEAF_NODE	17:48	17:48	6	gpointer
NAME	17:57	17:57	4	data
LEAF_NODE	17:57	17:57	5	data
LEAF_NODE	17:61	17:61	3	)
LEAF_NODE	17:63	17:63	2	{
STATEMENTS	18:1	18:1	2	
SELECTION	18:1	18:12	3	
KEYWORD	18:1	18:1	4	if
LEAF_NODE	18:1	18:1	5	if
LEAF_NODE	18:4	18:4	4	(
CONDITION	18:5	18:5	4	blist
EXPR	18:5	18:5	5	blist
FIELD	18:5	18:5	6	blist
LEAF_NODE	18:5	18:5	7	blist
LEAF_NODE	18:10	18:10	4	)
STATEMENTS	18:12	29:1	4	
LEAF_NODE	18:12	18:12	5	{
STATEMENTS	19:2	27:2	5	
SELECTION	19:2	19:54	6	
KEYWORD	19:2	19:2	7	if
LEAF_NODE	19:2	19:2	8	if
LEAF_NODE	19:5	19:5	7	(
CONDITION	19:6	19:6	7	purple_prefs_get_bool ( OPT_WINTRANS_BL_ENABLED )
EXPR	19:6	19:6	8	purple_prefs_get_bool ( OPT_WINTRANS_BL_ENABLED )
FUNCTION_CALL	19:6	19:51	9	purple_prefs_get_bool ( OPT_WINTRANS_BL_ENABLED )
CALLEE	19:6	19:6	10	purple_prefs_get_bool
LEAF_NODE	19:6	19:6	11	purple_prefs_get_bool
LEAF_NODE	19:27	19:27	10	(
ARGUMENT	19:28	19:28	10	OPT_WINTRANS_BL_ENABLED
FIELD	19:28	19:28	11	OPT_WINTRANS_BL_ENABLED
LEAF_NODE	19:28	19:28	12	OPT_WINTRANS_BL_ENABLED
LEAF_NODE	19:51	19:51	10	)
LEAF_NODE	19:52	19:52	7	)
STATEMENTS	19:54	24:2	7	
LEAF_NODE	19:54	19:54	8	{
STATEMENTS	20:3	20:3	8	
EXPR_STATEMENT	20:3	23:49	9	set_wintrans ( blist , purple_prefs_get_int ( OPT_WINTRANS_BL_ALPHA ) , TRUE , purple_prefs_get_bool ( OPT_WINTRANS_BL_ONTOP ) ) ;
EXPR	20:3	20:3	10	set_wintrans ( blist , purple_prefs_get_int ( OPT_WINTRANS_BL_ALPHA ) , TRUE , purple_prefs_get_bool ( OPT_WINTRANS_BL_ONTOP ) )
FUNCTION_CALL	20:3	23:48	11	set_wintrans ( blist , purple_prefs_get_int ( OPT_WINTRANS_BL_ALPHA ) , TRUE , purple_prefs_get_bool ( OPT_WINTRANS_BL_ONTOP ) )
CALLEE	20:3	20:3	12	set_wintrans
LEAF_NODE	20:3	20:3	13	set_wintrans
LEAF_NODE	20:15	20:15	12	(
ARGUMENT	20:16	20:16	12	blist
FIELD	20:16	20:16	13	blist
LEAF_NODE	20:16	20:16	14	blist
LEAF_NODE	20:21	20:21	12	,
ARGUMENT	21:4	21:4	12	purple_prefs_get_int ( OPT_WINTRANS_BL_ALPHA )
FUNCTION_CALL	21:4	21:46	13	purple_prefs_get_int ( OPT_WINTRANS_BL_ALPHA )
CALLEE	21:4	21:4	14	purple_prefs_get_int
LEAF_NODE	21:4	21:4	15	purple_prefs_get_int
LEAF_NODE	21:24	21:24	14	(
ARGUMENT	21:25	21:25	14	OPT_WINTRANS_BL_ALPHA
FIELD	21:25	21:25	15	OPT_WINTRANS_BL_ALPHA
LEAF_NODE	21:25	21:25	16	OPT_WINTRANS_BL_ALPHA
LEAF_NODE	21:46	21:46	14	)
LEAF_NODE	21:47	21:47	12	,
ARGUMENT	22:4	22:4	12	TRUE
FIELD	22:4	22:4	13	TRUE
LEAF_NODE	22:4	22:4	14	TRUE
LEAF_NODE	22:8	22:8	12	,
ARGUMENT	23:4	23:4	12	purple_prefs_get_bool ( OPT_WINTRANS_BL_ONTOP )
FUNCTION_CALL	23:4	23:47	13	purple_prefs_get_bool ( OPT_WINTRANS_BL_ONTOP )
CALLEE	23:4	23:4	14	purple_prefs_get_bool
LEAF_NODE	23:4	23:4	15	purple_prefs_get_bool
LEAF_NODE	23:25	23:25	14	(
ARGUMENT	23:26	23:26	14	OPT_WINTRANS_BL_ONTOP
FIELD	23:26	23:26	15	OPT_WINTRANS_BL_ONTOP
LEAF_NODE	23:26	23:26	16	OPT_WINTRANS_BL_ONTOP
LEAF_NODE	23:47	23:47	14	)
LEAF_NODE	23:48	23:48	12	)
LEAF_NODE	23:49	23:49	10	;
LEAF_NODE	24:2	24:2	8	}
EXPR_STATEMENT	25:2	26:41	6	g_signal_connect ( G_OBJECT ( blist ) , "focus_in_event" , G_CALLBACK ( focus_blist_win_cb ) , blist ) ;
EXPR	25:2	25:2	7	g_signal_connect ( G_OBJECT ( blist ) , "focus_in_event" , G_CALLBACK ( focus_blist_win_cb ) , blist )
FUNCTION_CALL	25:2	26:40	8	g_signal_connect ( G_OBJECT ( blist ) , "focus_in_event" , G_CALLBACK ( focus_blist_win_cb ) , blist )
CALLEE	25:2	25:2	9	g_signal_connect
LEAF_NODE	25:2	25:2	10	g_signal_connect
LEAF_NODE	25:18	25:18	9	(
ARGUMENT	25:19	25:19	9	G_OBJECT ( blist )
FUNCTION_CALL	25:19	25:33	10	G_OBJECT ( blist )
CALLEE	25:19	25:19	11	G_OBJECT
LEAF_NODE	25:19	25:19	12	G_OBJECT
LEAF_NODE	25:27	25:27	11	(
ARGUMENT	25:28	25:28	11	blist
FIELD	25:28	25:28	12	blist
LEAF_NODE	25:28	25:28	13	blist
LEAF_NODE	25:33	25:33	11	)
LEAF_NODE	25:34	25:34	9	,
ARGUMENT	25:36	25:36	9	"focus_in_event"
FIELD	25:36	25:36	10	"focus_in_event"
LEAF_NODE	25:36	25:36	11	"focus_in_event"
LEAF_NODE	25:52	25:52	9	,
ARGUMENT	26:3	26:3	9	G_CALLBACK ( focus_blist_win_cb )
FUNCTION_CALL	26:3	26:32	10	G_CALLBACK ( focus_blist_win_cb )
CALLEE	26:3	26:3	11	G_CALLBACK
LEAF_NODE	26:3	26:3	12	G_CALLBACK
LEAF_NODE	26:13	26:13	11	(
ARGUMENT	26:14	26:14	11	focus_blist_win_cb
FIELD	26:14	26:14	12	focus_blist_win_cb
LEAF_NODE	26:14	26:14	13	focus_blist_win_cb
LEAF_NODE	26:32	26:32	11	)
LEAF_NODE	26:33	26:33	9	,
ARGUMENT	26:35	26:35	9	blist
FIELD	26:35	26:35	10	blist
LEAF_NODE	26:35	26:35	11	blist
LEAF_NODE	26:40	26:40	9	)
LEAF_NODE	26:41	26:41	7	;
EXPR_STATEMENT	27:2	28:41	6	g_signal_connect ( G_OBJECT ( blist ) , "focus_out_event" , G_CALLBACK ( focus_blist_win_cb ) , blist ) ;
EXPR	27:2	27:2	7	g_signal_connect ( G_OBJECT ( blist ) , "focus_out_event" , G_CALLBACK ( focus_blist_win_cb ) , blist )
FUNCTION_CALL	27:2	28:40	8	g_signal_connect ( G_OBJECT ( blist ) , "focus_out_event" , G_CALLBACK ( focus_blist_win_cb ) , blist )
CALLEE	27:2	27:2	9	g_signal_connect
LEAF_NODE	27:2	27:2	10	g_signal_connect
LEAF_NODE	27:18	27:18	9	(
ARGUMENT	27:19	27:19	9	G_OBJECT ( blist )
FUNCTION_CALL	27:19	27:33	10	G_OBJECT ( blist )
CALLEE	27:19	27:19	11	G_OBJECT
LEAF_NODE	27:19	27:19	12	G_OBJECT
LEAF_NODE	27:27	27:27	11	(
ARGUMENT	27:28	27:28	11	blist
FIELD	27:28	27:28	12	blist
LEAF_NODE	27:28	27:28	13	blist
LEAF_NODE	27:33	27:33	11	)
LEAF_NODE	27:34	27:34	9	,
ARGUMENT	27:36	27:36	9	"focus_out_event"
FIELD	27:36	27:36	10	"focus_out_event"
LEAF_NODE	27:36	27:36	11	"focus_out_event"
LEAF_NODE	27:53	27:53	9	,
ARGUMENT	28:3	28:3	9	G_CALLBACK ( focus_blist_win_cb )
FUNCTION_CALL	28:3	28:32	10	G_CALLBACK ( focus_blist_win_cb )
CALLEE	28:3	28:3	11	G_CALLBACK
LEAF_NODE	28:3	28:3	12	G_CALLBACK
LEAF_NODE	28:13	28:13	11	(
ARGUMENT	28:14	28:14	11	focus_blist_win_cb
FIELD	28:14	28:14	12	focus_blist_win_cb
LEAF_NODE	28:14	28:14	13	focus_blist_win_cb
LEAF_NODE	28:32	28:32	11	)
LEAF_NODE	28:33	28:33	9	,
ARGUMENT	28:35	28:35	9	blist
FIELD	28:35	28:35	10	blist
LEAF_NODE	28:35	28:35	11	blist
LEAF_NODE	28:40	28:40	9	)
LEAF_NODE	28:41	28:41	7	;
LEAF_NODE	29:1	29:1	5	}
LEAF_NODE	30:0	30:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	21:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	create_conv_from_userlist
LEAF_NODE	2:0	2:0	3	create_conv_from_userlist
PARAMETER_LIST	2:25	2:58	2	( GntWidget * widget , FinchConv * fc )
LEAF_NODE	2:25	2:25	3	(
PARAMETER_DECL	2:26	2:37	3	GntWidget * widget
TYPE	2:26	2:36	4	GntWidget *
TYPE_NAME	2:26	2:26	5	GntWidget
LEAF_NODE	2:26	2:26	6	GntWidget
POINTER	2:36	2:36	5	*
LEAF_NODE	2:36	2:36	6	*
NAME	2:37	2:37	4	widget
LEAF_NODE	2:37	2:37	5	widget
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:56	3	FinchConv * fc
TYPE	2:45	2:55	4	FinchConv *
TYPE_NAME	2:45	2:45	5	FinchConv
LEAF_NODE	2:45	2:45	6	FinchConv
POINTER	2:55	2:55	5	*
LEAF_NODE	2:55	2:55	6	*
NAME	2:56	2:56	4	fc
LEAF_NODE	2:56	2:56	5	fc
LEAF_NODE	2:58	2:58	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	20:1	2	
SIMPLE_DECL	4:1	4:74	3	PurpleAccount * account ; account = purple_conversation_get_account ( fc -> active_conv ) ;
VAR_DECL	4:1	4:16	4	PurpleAccount * account ; account = purple_conversation_get_account ( fc -> active_conv )
TYPE	4:1	4:15	5	PurpleAccount *
TYPE_NAME	4:1	4:1	6	PurpleAccount
LEAF_NODE	4:1	4:1	7	PurpleAccount
POINTER	4:15	4:15	6	*
LEAF_NODE	4:15	4:15	7	*
NAME	4:16	4:16	5	account
LEAF_NODE	4:16	4:16	6	account
LEAF_NODE	0:0	0:0	5	;
INIT	4:16	4:16	5	account = purple_conversation_get_account ( fc -> active_conv )
ASSIGN	4:16	4:26	6	account = purple_conversation_get_account ( fc -> active_conv )
LVAL	4:16	4:16	7	account
NAME	4:16	4:16	8	account
LEAF_NODE	4:16	4:16	9	account
ASSIGN_OP	4:24	4:24	7	=
LEAF_NODE	4:24	4:24	8	=
RVAL	4:26	4:26	7	purple_conversation_get_account ( fc -> active_conv )
FUNCTION_CALL	4:26	4:73	8	purple_conversation_get_account ( fc -> active_conv )
CALLEE	4:26	4:26	9	purple_conversation_get_account
LEAF_NODE	4:26	4:26	10	purple_conversation_get_account
LEAF_NODE	4:57	4:57	9	(
ARGUMENT	4:58	4:58	9	fc -> active_conv
FIELD	4:58	4:62	10	fc -> active_conv
LEAF_NODE	4:58	4:58	11	fc
LEAF_NODE	4:60	4:60	11	->
LEAF_NODE	4:62	4:62	11	active_conv
LEAF_NODE	4:73	4:73	9	)
LEAF_NODE	4:74	4:74	4	;
SIMPLE_DECL	5:1	5:62	3	PurpleConnection * gc ; gc = purple_account_get_connection ( account ) ;
VAR_DECL	5:1	5:19	4	PurpleConnection * gc ; gc = purple_account_get_connection ( account )
TYPE	5:1	5:18	5	PurpleConnection *
TYPE_NAME	5:1	5:1	6	PurpleConnection
LEAF_NODE	5:1	5:1	7	PurpleConnection
POINTER	5:18	5:18	6	*
LEAF_NODE	5:18	5:18	7	*
NAME	5:19	5:19	5	gc
LEAF_NODE	5:19	5:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	5:19	5:19	5	gc = purple_account_get_connection ( account )
ASSIGN	5:19	5:24	6	gc = purple_account_get_connection ( account )
LVAL	5:19	5:19	7	gc
NAME	5:19	5:19	8	gc
LEAF_NODE	5:19	5:19	9	gc
ASSIGN_OP	5:22	5:22	7	=
LEAF_NODE	5:22	5:22	8	=
RVAL	5:24	5:24	7	purple_account_get_connection ( account )
FUNCTION_CALL	5:24	5:61	8	purple_account_get_connection ( account )
CALLEE	5:24	5:24	9	purple_account_get_connection
LEAF_NODE	5:24	5:24	10	purple_account_get_connection
LEAF_NODE	5:53	5:53	9	(
ARGUMENT	5:54	5:54	9	account
FIELD	5:54	5:54	10	account
LEAF_NODE	5:54	5:54	11	account
LEAF_NODE	5:61	5:61	9	)
LEAF_NODE	5:62	5:62	4	;
SIMPLE_DECL	6:1	6:43	3	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL ;
VAR_DECL	6:1	6:27	4	PurplePluginProtocolInfo * prpl_info ; prpl_info = NULL
TYPE	6:1	6:26	5	PurplePluginProtocolInfo *
TYPE_NAME	6:1	6:1	6	PurplePluginProtocolInfo
LEAF_NODE	6:1	6:1	7	PurplePluginProtocolInfo
POINTER	6:26	6:26	6	*
LEAF_NODE	6:26	6:26	7	*
NAME	6:27	6:27	5	prpl_info
LEAF_NODE	6:27	6:27	6	prpl_info
LEAF_NODE	0:0	0:0	5	;
INIT	6:27	6:27	5	prpl_info = NULL
ASSIGN	6:27	6:39	6	prpl_info = NULL
LVAL	6:27	6:27	7	prpl_info
NAME	6:27	6:27	8	prpl_info
LEAF_NODE	6:27	6:27	9	prpl_info
ASSIGN_OP	6:37	6:37	7	=
LEAF_NODE	6:37	6:37	8	=
RVAL	6:39	6:39	7	NULL
FIELD	6:39	6:39	8	NULL
LEAF_NODE	6:39	6:39	9	NULL
LEAF_NODE	6:43	6:43	4	;
SIMPLE_DECL	7:1	7:22	3	char * name , char * realname ;
INIT_DECL_LIST	7:1	7:1	4	char * name , char * realname
VAR_DECL	7:1	7:7	5	char * name
TYPE	7:1	7:6	6	char *
TYPE_NAME	7:1	7:1	7	char
LEAF_NODE	7:1	7:1	8	char
POINTER	7:6	7:6	7	*
LEAF_NODE	7:6	7:6	8	*
NAME	7:7	7:7	6	name
LEAF_NODE	7:7	7:7	7	name
LEAF_NODE	7:11	7:11	5	,
VAR_DECL	7:1	7:14	5	char * realname
TYPE	7:1	7:13	6	char *
TYPE_NAME	7:1	7:1	7	char
LEAF_NODE	7:1	7:1	8	char
POINTER	7:13	7:13	7	*
LEAF_NODE	7:13	7:13	8	*
NAME	7:14	7:14	6	realname
LEAF_NODE	7:14	7:14	7	realname
LEAF_NODE	7:22	7:22	4	;
SELECTION	8:1	8:10	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	! gc
EXPR	8:5	8:5	5	! gc
UNARY_EXPR	8:5	8:6	6	! gc
UNARY_OPERATOR	8:5	8:5	7	!
LEAF_NODE	8:5	8:5	8	!
FIELD	8:6	8:6	7	gc
LEAF_NODE	8:6	8:6	8	gc
LEAF_NODE	8:8	8:8	4	)
STATEMENTS	8:10	12:1	4	
LEAF_NODE	8:10	8:10	5	{
STATEMENTS	9:2	11:2	5	
EXPR_STATEMENT	9:2	10:38	6	purple_conversation_write ( fc -> active_conv , NULL , _ ( "You are not connected." ) , PURPLE_MESSAGE_SYSTEM , time ( NULL ) ) ;
EXPR	9:2	9:2	7	purple_conversation_write ( fc -> active_conv , NULL , _ ( "You are not connected." ) , PURPLE_MESSAGE_SYSTEM , time ( NULL ) )
FUNCTION_CALL	9:2	10:37	8	purple_conversation_write ( fc -> active_conv , NULL , _ ( "You are not connected." ) , PURPLE_MESSAGE_SYSTEM , time ( NULL ) )
CALLEE	9:2	9:2	9	purple_conversation_write
LEAF_NODE	9:2	9:2	10	purple_conversation_write
LEAF_NODE	9:27	9:27	9	(
ARGUMENT	9:28	9:28	9	fc -> active_conv
FIELD	9:28	9:32	10	fc -> active_conv
LEAF_NODE	9:28	9:28	11	fc
LEAF_NODE	9:30	9:30	11	->
LEAF_NODE	9:32	9:32	11	active_conv
LEAF_NODE	9:43	9:43	9	,
ARGUMENT	9:45	9:45	9	NULL
FIELD	9:45	9:45	10	NULL
LEAF_NODE	9:45	9:45	11	NULL
LEAF_NODE	9:49	9:49	9	,
ARGUMENT	9:51	9:51	9	_ ( "You are not connected." )
FUNCTION_CALL	9:51	9:77	10	_ ( "You are not connected." )
CALLEE	9:51	9:51	11	_
LEAF_NODE	9:51	9:51	12	_
LEAF_NODE	9:52	9:52	11	(
ARGUMENT	9:53	9:53	11	"You are not connected."
FIELD	9:53	9:53	12	"You are not connected."
LEAF_NODE	9:53	9:53	13	"You are not connected."
LEAF_NODE	9:77	9:77	11	)
LEAF_NODE	9:78	9:78	9	,
ARGUMENT	10:4	10:4	9	PURPLE_MESSAGE_SYSTEM
FIELD	10:4	10:4	10	PURPLE_MESSAGE_SYSTEM
LEAF_NODE	10:4	10:4	11	PURPLE_MESSAGE_SYSTEM
LEAF_NODE	10:25	10:25	9	,
ARGUMENT	10:27	10:27	9	time ( NULL )
FUNCTION_CALL	10:27	10:36	10	time ( NULL )
CALLEE	10:27	10:27	11	time
LEAF_NODE	10:27	10:27	12	time
LEAF_NODE	10:31	10:31	11	(
ARGUMENT	10:32	10:32	11	NULL
FIELD	10:32	10:32	12	NULL
LEAF_NODE	10:32	10:32	13	NULL
LEAF_NODE	10:36	10:36	11	)
LEAF_NODE	10:37	10:37	9	)
LEAF_NODE	10:38	10:38	7	;
JUMP_STATEMENT	11:2	11:8	6	return DESTINATION ;
KEYWORD	11:2	11:2	7	return
LEAF_NODE	11:2	11:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	11:8	11:8	7	;
LEAF_NODE	12:1	12:1	5	}
EXPR_STATEMENT	13:1	13:53	3	name = gnt_tree_get_selection_data ( GNT_TREE ( widget ) ) ;
EXPR	13:1	13:1	4	name = gnt_tree_get_selection_data ( GNT_TREE ( widget ) )
ASSIGN	13:1	13:8	5	name = gnt_tree_get_selection_data ( GNT_TREE ( widget ) )
LVAL	13:1	13:1	6	name
FIELD	13:1	13:1	7	name
LEAF_NODE	13:1	13:1	8	name
ASSIGN_OP	13:6	13:6	6	=
LEAF_NODE	13:6	13:6	7	=
RVAL	13:8	13:8	6	gnt_tree_get_selection_data ( GNT_TREE ( widget ) )
FUNCTION_CALL	13:8	13:52	7	gnt_tree_get_selection_data ( GNT_TREE ( widget ) )
CALLEE	13:8	13:8	8	gnt_tree_get_selection_data
LEAF_NODE	13:8	13:8	9	gnt_tree_get_selection_data
LEAF_NODE	13:35	13:35	8	(
ARGUMENT	13:36	13:36	8	GNT_TREE ( widget )
FUNCTION_CALL	13:36	13:51	9	GNT_TREE ( widget )
CALLEE	13:36	13:36	10	GNT_TREE
LEAF_NODE	13:36	13:36	11	GNT_TREE
LEAF_NODE	13:44	13:44	10	(
ARGUMENT	13:45	13:45	10	widget
FIELD	13:45	13:45	11	widget
LEAF_NODE	13:45	13:45	12	widget
LEAF_NODE	13:51	13:51	10	)
LEAF_NODE	13:52	13:52	8	)
LEAF_NODE	13:53	13:53	4	;
EXPR_STATEMENT	14:1	14:50	3	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl ) ;
EXPR	14:1	14:1	4	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
ASSIGN	14:1	14:13	5	prpl_info = PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
LVAL	14:1	14:1	6	prpl_info
FIELD	14:1	14:1	7	prpl_info
LEAF_NODE	14:1	14:1	8	prpl_info
ASSIGN_OP	14:11	14:11	6	=
LEAF_NODE	14:11	14:11	7	=
RVAL	14:13	14:13	6	PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
FUNCTION_CALL	14:13	14:49	7	PURPLE_PLUGIN_PROTOCOL_INFO ( gc -> prpl )
CALLEE	14:13	14:13	8	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	14:13	14:13	9	PURPLE_PLUGIN_PROTOCOL_INFO
LEAF_NODE	14:40	14:40	8	(
ARGUMENT	14:41	14:41	8	gc -> prpl
FIELD	14:41	14:45	9	gc -> prpl
LEAF_NODE	14:41	14:41	10	gc
LEAF_NODE	14:43	14:43	10	->
LEAF_NODE	14:45	14:45	10	prpl
LEAF_NODE	14:49	14:49	8	)
LEAF_NODE	14:50	14:50	4	;
SELECTION	15:1	16:2	3	
KEYWORD	15:1	15:1	4	if
LEAF_NODE	15:1	15:1	5	if
LEAF_NODE	15:4	15:4	4	(
CONDITION	15:5	15:5	4	prpl_info && PURPLE_PROTOCOL_PLUGIN_HAS_FUNC ( prpl_info , get_cb_real_name )
EXPR	15:5	15:5	5	prpl_info && PURPLE_PROTOCOL_PLUGIN_HAS_FUNC ( prpl_info , get_cb_real_name )
AND	15:5	15:18	6	prpl_info && PURPLE_PROTOCOL_PLUGIN_HAS_FUNC ( prpl_info , get_cb_real_name )
EXPR	15:5	15:5	7	prpl_info
FIELD	15:5	15:5	8	prpl_info
LEAF_NODE	15:5	15:5	9	prpl_info
LEAF_NODE	15:15	15:15	7	&&
EXPR	15:18	15:18	7	PURPLE_PROTOCOL_PLUGIN_HAS_FUNC ( prpl_info , get_cb_real_name )
FUNCTION_CALL	15:18	15:77	8	PURPLE_PROTOCOL_PLUGIN_HAS_FUNC ( prpl_info , get_cb_real_name )
CALLEE	15:18	15:18	9	PURPLE_PROTOCOL_PLUGIN_HAS_FUNC
LEAF_NODE	15:18	15:18	10	PURPLE_PROTOCOL_PLUGIN_HAS_FUNC
LEAF_NODE	15:49	15:49	9	(
ARGUMENT	15:50	15:50	9	prpl_info
FIELD	15:50	15:50	10	prpl_info
LEAF_NODE	15:50	15:50	11	prpl_info
LEAF_NODE	15:59	15:59	9	,
ARGUMENT	15:61	15:61	9	get_cb_real_name
FIELD	15:61	15:61	10	get_cb_real_name
LEAF_NODE	15:61	15:61	11	get_cb_real_name
LEAF_NODE	15:77	15:77	9	)
LEAF_NODE	15:78	15:78	4	)
STATEMENTS	16:2	16:2	4	
EXPR_STATEMENT	16:2	16:110	5	realname = prpl_info -> get_cb_real_name ( gc , purple_conv_chat_get_id ( PURPLE_CONV_CHAT ( fc -> active_conv ) ) , name ) ;
EXPR	16:2	16:2	6	realname = prpl_info -> get_cb_real_name ( gc , purple_conv_chat_get_id ( PURPLE_CONV_CHAT ( fc -> active_conv ) ) , name )
ASSIGN	16:2	16:13	7	realname = prpl_info -> get_cb_real_name ( gc , purple_conv_chat_get_id ( PURPLE_CONV_CHAT ( fc -> active_conv ) ) , name )
LVAL	16:2	16:2	8	realname
FIELD	16:2	16:2	9	realname
LEAF_NODE	16:2	16:2	10	realname
ASSIGN_OP	16:11	16:11	8	=
LEAF_NODE	16:11	16:11	9	=
RVAL	16:13	16:13	8	prpl_info -> get_cb_real_name ( gc , purple_conv_chat_get_id ( PURPLE_CONV_CHAT ( fc -> active_conv ) ) , name )
FUNCTION_CALL	16:13	16:109	9	prpl_info -> get_cb_real_name ( gc , purple_conv_chat_get_id ( PURPLE_CONV_CHAT ( fc -> active_conv ) ) , name )
CALLEE	16:13	16:24	10	prpl_info -> get_cb_real_name
LEAF_NODE	16:13	16:13	11	prpl_info
LEAF_NODE	16:22	16:22	11	->
LEAF_NODE	16:24	16:24	11	get_cb_real_name
LEAF_NODE	16:40	16:40	10	(
ARGUMENT	16:41	16:41	10	gc
FIELD	16:41	16:41	11	gc
LEAF_NODE	16:41	16:41	12	gc
LEAF_NODE	16:43	16:43	10	,
ARGUMENT	16:45	16:45	10	purple_conv_chat_get_id ( PURPLE_CONV_CHAT ( fc -> active_conv ) )
FUNCTION_CALL	16:45	16:102	11	purple_conv_chat_get_id ( PURPLE_CONV_CHAT ( fc -> active_conv ) )
CALLEE	16:45	16:45	12	purple_conv_chat_get_id
LEAF_NODE	16:45	16:45	13	purple_conv_chat_get_id
LEAF_NODE	16:68	16:68	12	(
ARGUMENT	16:69	16:69	12	PURPLE_CONV_CHAT ( fc -> active_conv )
FUNCTION_CALL	16:69	16:101	13	PURPLE_CONV_CHAT ( fc -> active_conv )
CALLEE	16:69	16:69	14	PURPLE_CONV_CHAT
LEAF_NODE	16:69	16:69	15	PURPLE_CONV_CHAT
LEAF_NODE	16:85	16:85	14	(
ARGUMENT	16:86	16:86	14	fc -> active_conv
FIELD	16:86	16:90	15	fc -> active_conv
LEAF_NODE	16:86	16:86	16	fc
LEAF_NODE	16:88	16:88	16	->
LEAF_NODE	16:90	16:90	16	active_conv
LEAF_NODE	16:101	16:101	14	)
LEAF_NODE	16:102	16:102	12	)
LEAF_NODE	16:103	16:103	10	,
ARGUMENT	16:105	16:105	10	name
FIELD	16:105	16:105	11	name
LEAF_NODE	16:105	16:105	12	name
LEAF_NODE	16:109	16:109	10	)
LEAF_NODE	16:110	16:110	6	;
SELECTION	17:1	18:2	3	
KEYWORD	17:1	17:1	4	else
LEAF_NODE	17:1	17:1	5	else
STATEMENTS	18:2	18:2	4	
EXPR_STATEMENT	18:2	18:17	5	realname = NULL ;
EXPR	18:2	18:2	6	realname = NULL
ASSIGN	18:2	18:13	7	realname = NULL
LVAL	18:2	18:2	8	realname
FIELD	18:2	18:2	9	realname
LEAF_NODE	18:2	18:2	10	realname
ASSIGN_OP	18:11	18:11	8	=
LEAF_NODE	18:11	18:11	9	=
RVAL	18:13	18:13	8	NULL
FIELD	18:13	18:13	9	NULL
LEAF_NODE	18:13	18:13	10	NULL
LEAF_NODE	18:17	18:17	6	;
EXPR_STATEMENT	19:1	19:82	3	purple_conversation_new ( PURPLE_CONV_TYPE_IM , account , realname ? realname : name ) ;
EXPR	19:1	19:1	4	purple_conversation_new ( PURPLE_CONV_TYPE_IM , account , realname ? realname : name )
FUNCTION_CALL	19:1	19:81	5	purple_conversation_new ( PURPLE_CONV_TYPE_IM , account , realname ? realname : name )
CALLEE	19:1	19:1	6	purple_conversation_new
LEAF_NODE	19:1	19:1	7	purple_conversation_new
LEAF_NODE	19:24	19:24	6	(
ARGUMENT	19:25	19:25	6	PURPLE_CONV_TYPE_IM
FIELD	19:25	19:25	7	PURPLE_CONV_TYPE_IM
LEAF_NODE	19:25	19:25	8	PURPLE_CONV_TYPE_IM
LEAF_NODE	19:44	19:44	6	,
ARGUMENT	19:46	19:46	6	account
FIELD	19:46	19:46	7	account
LEAF_NODE	19:46	19:46	8	account
LEAF_NODE	19:53	19:53	6	,
ARGUMENT	19:55	19:55	6	realname ? realname : name
COND_EXPR	19:55	19:77	7	realname ? realname : name
CONDITION	19:55	19:55	8	realname
FIELD	19:55	19:55	9	realname
LEAF_NODE	19:55	19:55	10	realname
LEAF_NODE	19:64	19:64	8	?
EXPR	19:66	19:66	8	realname
FIELD	19:66	19:66	9	realname
LEAF_NODE	19:66	19:66	10	realname
LEAF_NODE	19:75	19:75	8	:
FIELD	19:77	19:77	8	name
LEAF_NODE	19:77	19:77	9	name
LEAF_NODE	19:81	19:81	6	)
LEAF_NODE	19:82	19:82	4	;
EXPR_STATEMENT	20:1	20:17	3	g_free ( realname ) ;
EXPR	20:1	20:1	4	g_free ( realname )
FUNCTION_CALL	20:1	20:16	5	g_free ( realname )
CALLEE	20:1	20:1	6	g_free
LEAF_NODE	20:1	20:1	7	g_free
LEAF_NODE	20:7	20:7	6	(
ARGUMENT	20:8	20:8	6	realname
FIELD	20:8	20:8	7	realname
LEAF_NODE	20:8	20:8	8	realname
LEAF_NODE	20:16	20:16	6	)
LEAF_NODE	20:17	20:17	4	;
LEAF_NODE	21:0	21:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	23:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	run_editor
LEAF_NODE	2:12	2:12	3	run_editor
PARAMETER_LIST	2:23	2:46	2	( MMConversation * mmconv )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:40	3	MMConversation * mmconv
TYPE	2:24	2:39	4	MMConversation *
TYPE_NAME	2:24	2:24	5	MMConversation
LEAF_NODE	2:24	2:24	6	MMConversation
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	mmconv
LEAF_NODE	2:40	2:40	5	mmconv
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	19:1	2	
SIMPLE_DECL	4:1	4:27	3	GError * spawn_error ; spawn_error = NULL ;
VAR_DECL	4:1	4:9	4	GError * spawn_error ; spawn_error = NULL
TYPE	4:1	4:8	5	GError *
TYPE_NAME	4:1	4:1	6	GError
LEAF_NODE	4:1	4:1	7	GError
POINTER	4:8	4:8	6	*
LEAF_NODE	4:8	4:8	7	*
NAME	4:9	4:9	5	spawn_error
LEAF_NODE	4:9	4:9	6	spawn_error
LEAF_NODE	0:0	0:0	5	;
INIT	4:9	4:9	5	spawn_error = NULL
ASSIGN	4:9	4:23	6	spawn_error = NULL
LVAL	4:9	4:9	7	spawn_error
NAME	4:9	4:9	8	spawn_error
LEAF_NODE	4:9	4:9	9	spawn_error
ASSIGN_OP	4:21	4:21	7	=
LEAF_NODE	4:21	4:21	8	=
RVAL	4:23	4:23	7	NULL
FIELD	4:23	4:23	8	NULL
LEAF_NODE	4:23	4:23	9	NULL
LEAF_NODE	4:27	4:27	4	;
SIMPLE_DECL	5:1	5:20	3	GString * session_id ;
VAR_DECL	5:1	5:10	4	GString * session_id
TYPE	5:1	5:9	5	GString *
TYPE_NAME	5:1	5:1	6	GString
LEAF_NODE	5:1	5:1	7	GString
POINTER	5:9	5:9	6	*
LEAF_NODE	5:9	5:9	7	*
NAME	5:10	5:10	5	session_id
LEAF_NODE	5:10	5:10	6	session_id
LEAF_NODE	5:20	5:20	4	;
SIMPLE_DECL	6:1	6:16	3	gchar * [ 4 ] args ;
VAR_DECL	6:1	6:9	4	gchar * [ 4 ] args
TYPE	6:1	6:13	5	gchar * [ 4 ]
TYPE_NAME	6:1	6:1	6	gchar
LEAF_NODE	6:1	6:1	7	gchar
POINTER	6:7	6:7	6	*
LEAF_NODE	6:7	6:7	7	*
TYPE_SUFFIX	6:13	6:15	6	[ 4 ]
LEAF_NODE	6:13	6:13	7	[
FIELD	6:14	6:14	7	4
LEAF_NODE	6:14	6:14	8	4
LEAF_NODE	6:15	6:15	7	]
NAME	6:9	6:9	5	args
LEAF_NODE	6:9	6:9	6	args
LEAF_NODE	6:16	6:16	4	;
EXPR_STATEMENT	7:1	7:86	3	args [ 0 ] = ( gchar * ) purple_prefs_get_string ( "/plugins/gtk/musicmessaging/editor_path" ) ;
EXPR	7:1	7:1	4	args [ 0 ] = ( gchar * ) purple_prefs_get_string ( "/plugins/gtk/musicmessaging/editor_path" )
ASSIGN	7:1	7:11	5	args [ 0 ] = ( gchar * ) purple_prefs_get_string ( "/plugins/gtk/musicmessaging/editor_path" )
LVAL	7:1	7:1	6	args [ 0 ]
FIELD	7:1	7:7	7	args [ 0 ]
LEAF_NODE	7:1	7:1	8	args
LEAF_NODE	7:5	7:5	8	[
EXPR	7:6	7:6	8	0
FIELD	7:6	7:6	9	0
LEAF_NODE	7:6	7:6	10	0
LEAF_NODE	7:7	7:7	8	]
ASSIGN_OP	7:9	7:9	6	=
LEAF_NODE	7:9	7:9	7	=
RVAL	7:11	7:20	6	( gchar * ) purple_prefs_get_string ( "/plugins/gtk/musicmessaging/editor_path" )
LEAF_NODE	7:11	7:11	7	(
TYPE_NAME	7:12	7:12	7	gchar
LEAF_NODE	7:12	7:12	8	gchar
LEAF_NODE	7:18	7:18	7	*
LEAF_NODE	7:19	7:19	7	)
FUNCTION_CALL	7:20	7:85	7	purple_prefs_get_string ( "/plugins/gtk/musicmessaging/editor_path" )
CALLEE	7:20	7:20	8	purple_prefs_get_string
LEAF_NODE	7:20	7:20	9	purple_prefs_get_string
LEAF_NODE	7:43	7:43	8	(
ARGUMENT	7:44	7:44	8	"/plugins/gtk/musicmessaging/editor_path"
FIELD	7:44	7:44	9	"/plugins/gtk/musicmessaging/editor_path"
LEAF_NODE	7:44	7:44	10	"/plugins/gtk/musicmessaging/editor_path"
LEAF_NODE	7:85	7:85	8	)
LEAF_NODE	7:86	7:86	4	;
EXPR_STATEMENT	8:1	8:24	3	args [ 1 ] = "-session_id" ;
EXPR	8:1	8:1	4	args [ 1 ] = "-session_id"
ASSIGN	8:1	8:11	5	args [ 1 ] = "-session_id"
LVAL	8:1	8:1	6	args [ 1 ]
FIELD	8:1	8:7	7	args [ 1 ]
LEAF_NODE	8:1	8:1	8	args
LEAF_NODE	8:5	8:5	8	[
EXPR	8:6	8:6	8	1
FIELD	8:6	8:6	9	1
LEAF_NODE	8:6	8:6	10	1
LEAF_NODE	8:7	8:7	8	]
ASSIGN_OP	8:9	8:9	6	=
LEAF_NODE	8:9	8:9	7	=
RVAL	8:11	8:11	6	"-session_id"
FIELD	8:11	8:11	7	"-session_id"
LEAF_NODE	8:11	8:11	8	"-session_id"
LEAF_NODE	8:24	8:24	4	;
EXPR_STATEMENT	9:1	9:30	3	session_id = g_string_new ( "" ) ;
EXPR	9:1	9:1	4	session_id = g_string_new ( "" )
ASSIGN	9:1	9:14	5	session_id = g_string_new ( "" )
LVAL	9:1	9:1	6	session_id
FIELD	9:1	9:1	7	session_id
LEAF_NODE	9:1	9:1	8	session_id
ASSIGN_OP	9:12	9:12	6	=
LEAF_NODE	9:12	9:12	7	=
RVAL	9:14	9:14	6	g_string_new ( "" )
FUNCTION_CALL	9:14	9:29	7	g_string_new ( "" )
CALLEE	9:14	9:14	8	g_string_new
LEAF_NODE	9:14	9:14	9	g_string_new
LEAF_NODE	9:26	9:26	8	(
ARGUMENT	9:27	9:27	8	""
FIELD	9:27	9:27	9	""
LEAF_NODE	9:27	9:27	10	""
LEAF_NODE	9:29	9:29	8	)
LEAF_NODE	9:30	9:30	4	;
EXPR_STATEMENT	10:1	10:77	3	g_string_append_printf ( session_id , "%d" , mmconv_from_conv_loc ( mmconv -> conv ) ) ;
EXPR	10:1	10:1	4	g_string_append_printf ( session_id , "%d" , mmconv_from_conv_loc ( mmconv -> conv ) )
FUNCTION_CALL	10:1	10:76	5	g_string_append_printf ( session_id , "%d" , mmconv_from_conv_loc ( mmconv -> conv ) )
CALLEE	10:1	10:1	6	g_string_append_printf
LEAF_NODE	10:1	10:1	7	g_string_append_printf
LEAF_NODE	10:23	10:23	6	(
ARGUMENT	10:24	10:24	6	session_id
FIELD	10:24	10:24	7	session_id
LEAF_NODE	10:24	10:24	8	session_id
LEAF_NODE	10:34	10:34	6	,
ARGUMENT	10:36	10:36	6	"%d"
FIELD	10:36	10:36	7	"%d"
LEAF_NODE	10:36	10:36	8	"%d"
LEAF_NODE	10:40	10:40	6	,
ARGUMENT	10:42	10:42	6	mmconv_from_conv_loc ( mmconv -> conv )
FUNCTION_CALL	10:42	10:75	7	mmconv_from_conv_loc ( mmconv -> conv )
CALLEE	10:42	10:42	8	mmconv_from_conv_loc
LEAF_NODE	10:42	10:42	9	mmconv_from_conv_loc
LEAF_NODE	10:62	10:62	8	(
ARGUMENT	10:63	10:63	8	mmconv -> conv
FIELD	10:63	10:71	9	mmconv -> conv
LEAF_NODE	10:63	10:63	10	mmconv
LEAF_NODE	10:69	10:69	10	->
LEAF_NODE	10:71	10:71	10	conv
LEAF_NODE	10:75	10:75	8	)
LEAF_NODE	10:76	10:76	6	)
LEAF_NODE	10:77	10:77	4	;
EXPR_STATEMENT	11:1	11:26	3	args [ 2 ] = session_id -> str ;
EXPR	11:1	11:1	4	args [ 2 ] = session_id -> str
ASSIGN	11:1	11:11	5	args [ 2 ] = session_id -> str
LVAL	11:1	11:1	6	args [ 2 ]
FIELD	11:1	11:7	7	args [ 2 ]
LEAF_NODE	11:1	11:1	8	args
LEAF_NODE	11:5	11:5	8	[
EXPR	11:6	11:6	8	2
FIELD	11:6	11:6	9	2
LEAF_NODE	11:6	11:6	10	2
LEAF_NODE	11:7	11:7	8	]
ASSIGN_OP	11:9	11:9	6	=
LEAF_NODE	11:9	11:9	7	=
RVAL	11:11	11:11	6	session_id -> str
FIELD	11:11	11:23	7	session_id -> str
LEAF_NODE	11:11	11:11	8	session_id
LEAF_NODE	11:21	11:21	8	->
LEAF_NODE	11:23	11:23	8	str
LEAF_NODE	11:26	11:26	4	;
EXPR_STATEMENT	12:1	12:15	3	args [ 3 ] = NULL ;
EXPR	12:1	12:1	4	args [ 3 ] = NULL
ASSIGN	12:1	12:11	5	args [ 3 ] = NULL
LVAL	12:1	12:1	6	args [ 3 ]
FIELD	12:1	12:7	7	args [ 3 ]
LEAF_NODE	12:1	12:1	8	args
LEAF_NODE	12:5	12:5	8	[
EXPR	12:6	12:6	8	3
FIELD	12:6	12:6	9	3
LEAF_NODE	12:6	12:6	10	3
LEAF_NODE	12:7	12:7	8	]
ASSIGN_OP	12:9	12:9	6	=
LEAF_NODE	12:9	12:9	7	=
RVAL	12:11	12:11	6	NULL
FIELD	12:11	12:11	7	NULL
LEAF_NODE	12:11	12:11	8	NULL
LEAF_NODE	12:15	12:15	4	;
SELECTION	13:1	14:1	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	! ( g_spawn_async ( "." , args , NULL , 4 , NULL , NULL , & ( mmconv -> pid ) , & spawn_error ) )
EXPR	13:5	13:5	5	! ( g_spawn_async ( "." , args , NULL , 4 , NULL , NULL , & ( mmconv -> pid ) , & spawn_error ) )
UNARY_EXPR	13:5	13:83	6	! ( g_spawn_async ( "." , args , NULL , 4 , NULL , NULL , & ( mmconv -> pid ) , & spawn_error ) )
UNARY_OPERATOR	13:5	13:5	7	!
LEAF_NODE	13:5	13:5	8	!
LEAF_NODE	13:6	13:6	7	(
FUNCTION_CALL	13:7	13:82	7	g_spawn_async ( "." , args , NULL , 4 , NULL , NULL , & ( mmconv -> pid ) , & spawn_error )
CALLEE	13:7	13:7	8	g_spawn_async
LEAF_NODE	13:7	13:7	9	g_spawn_async
LEAF_NODE	13:21	13:21	8	(
ARGUMENT	13:22	13:22	8	"."
FIELD	13:22	13:22	9	"."
LEAF_NODE	13:22	13:22	10	"."
LEAF_NODE	13:25	13:25	8	,
ARGUMENT	13:27	13:27	8	args
FIELD	13:27	13:27	9	args
LEAF_NODE	13:27	13:27	10	args
LEAF_NODE	13:31	13:31	8	,
ARGUMENT	13:33	13:33	8	NULL
FIELD	13:33	13:33	9	NULL
LEAF_NODE	13:33	13:33	10	NULL
LEAF_NODE	13:37	13:37	8	,
ARGUMENT	13:39	13:39	8	4
FIELD	13:39	13:39	9	4
LEAF_NODE	13:39	13:39	10	4
LEAF_NODE	13:40	13:40	8	,
ARGUMENT	13:42	13:42	8	NULL
FIELD	13:42	13:42	9	NULL
LEAF_NODE	13:42	13:42	10	NULL
LEAF_NODE	13:46	13:46	8	,
ARGUMENT	13:48	13:48	8	NULL
FIELD	13:48	13:48	9	NULL
LEAF_NODE	13:48	13:48	10	NULL
LEAF_NODE	13:52	13:52	8	,
ARGUMENT	13:54	13:54	8	& ( mmconv -> pid )
UNARY_EXPR	13:54	13:67	9	& ( mmconv -> pid )
UNARY_OPERATOR	13:54	13:54	10	&
LEAF_NODE	13:54	13:54	11	&
LEAF_NODE	13:55	13:55	10	(
FIELD	13:56	13:64	10	mmconv -> pid
LEAF_NODE	13:56	13:56	11	mmconv
LEAF_NODE	13:62	13:62	11	->
LEAF_NODE	13:64	13:64	11	pid
LEAF_NODE	13:67	13:67	10	)
LEAF_NODE	13:68	13:68	8	,
ARGUMENT	13:70	13:70	8	& spawn_error
UNARY_EXPR	13:70	13:71	9	& spawn_error
UNARY_OPERATOR	13:70	13:70	10	&
LEAF_NODE	13:70	13:70	11	&
FIELD	13:71	13:71	10	spawn_error
LEAF_NODE	13:71	13:71	11	spawn_error
LEAF_NODE	13:82	13:82	8	)
LEAF_NODE	13:83	13:83	7	)
LEAF_NODE	13:84	13:84	4	)
STATEMENTS	14:1	18:1	4	
LEAF_NODE	14:1	14:1	5	{
STATEMENTS	15:2	17:2	5	
EXPR_STATEMENT	15:2	16:67	6	purple_notify_error ( plugin_pointer , _ ( "Error Running Editor" ) , _ ( "The following error has occurred:" ) , spawn_error -> message ) ;
EXPR	15:2	15:2	7	purple_notify_error ( plugin_pointer , _ ( "Error Running Editor" ) , _ ( "The following error has occurred:" ) , spawn_error -> message )
FUNCTION_CALL	15:2	16:66	8	purple_notify_error ( plugin_pointer , _ ( "Error Running Editor" ) , _ ( "The following error has occurred:" ) , spawn_error -> message )
CALLEE	15:2	15:2	9	purple_notify_error
LEAF_NODE	15:2	15:2	10	purple_notify_error
LEAF_NODE	15:21	15:21	9	(
ARGUMENT	15:22	15:22	9	plugin_pointer
FIELD	15:22	15:22	10	plugin_pointer
LEAF_NODE	15:22	15:22	11	plugin_pointer
LEAF_NODE	15:36	15:36	9	,
ARGUMENT	15:38	15:38	9	_ ( "Error Running Editor" )
FUNCTION_CALL	15:38	15:62	10	_ ( "Error Running Editor" )
CALLEE	15:38	15:38	11	_
LEAF_NODE	15:38	15:38	12	_
LEAF_NODE	15:39	15:39	11	(
ARGUMENT	15:40	15:40	11	"Error Running Editor"
FIELD	15:40	15:40	12	"Error Running Editor"
LEAF_NODE	15:40	15:40	13	"Error Running Editor"
LEAF_NODE	15:62	15:62	11	)
LEAF_NODE	15:63	15:63	9	,
ARGUMENT	16:6	16:6	9	_ ( "The following error has occurred:" )
FUNCTION_CALL	16:6	16:43	10	_ ( "The following error has occurred:" )
CALLEE	16:6	16:6	11	_
LEAF_NODE	16:6	16:6	12	_
LEAF_NODE	16:7	16:7	11	(
ARGUMENT	16:8	16:8	11	"The following error has occurred:"
FIELD	16:8	16:8	12	"The following error has occurred:"
LEAF_NODE	16:8	16:8	13	"The following error has occurred:"
LEAF_NODE	16:43	16:43	11	)
LEAF_NODE	16:44	16:44	9	,
ARGUMENT	16:46	16:46	9	spawn_error -> message
FIELD	16:46	16:59	10	spawn_error -> message
LEAF_NODE	16:46	16:46	11	spawn_error
LEAF_NODE	16:57	16:57	11	->
LEAF_NODE	16:59	16:59	11	message
LEAF_NODE	16:66	16:66	9	)
LEAF_NODE	16:67	16:67	7	;
EXPR_STATEMENT	17:2	17:25	6	mmconv -> started = FALSE ;
EXPR	17:2	17:2	7	mmconv -> started = FALSE
ASSIGN	17:2	17:20	8	mmconv -> started = FALSE
LVAL	17:2	17:2	9	mmconv -> started
FIELD	17:2	17:10	10	mmconv -> started
LEAF_NODE	17:2	17:2	11	mmconv
LEAF_NODE	17:8	17:8	11	->
LEAF_NODE	17:10	17:10	11	started
ASSIGN_OP	17:18	17:18	9	=
LEAF_NODE	17:18	17:18	10	=
RVAL	17:20	17:20	9	FALSE
FIELD	17:20	17:20	10	FALSE
LEAF_NODE	17:20	17:20	11	FALSE
LEAF_NODE	17:25	17:25	7	;
LEAF_NODE	18:1	18:1	5	}
SELECTION	19:1	20:1	3	
KEYWORD	19:1	19:1	4	else
LEAF_NODE	19:1	19:1	5	else
STATEMENTS	20:1	22:1	4	
LEAF_NODE	20:1	20:1	5	{
STATEMENTS	21:2	21:2	5	
EXPR_STATEMENT	21:2	21:24	6	mmconv -> started = TRUE ;
EXPR	21:2	21:2	7	mmconv -> started = TRUE
ASSIGN	21:2	21:20	8	mmconv -> started = TRUE
LVAL	21:2	21:2	9	mmconv -> started
FIELD	21:2	21:10	10	mmconv -> started
LEAF_NODE	21:2	21:2	11	mmconv
LEAF_NODE	21:8	21:8	11	->
LEAF_NODE	21:10	21:10	11	started
ASSIGN_OP	21:18	21:18	9	=
LEAF_NODE	21:18	21:18	10	=
RVAL	21:20	21:20	9	TRUE
FIELD	21:20	21:20	10	TRUE
LEAF_NODE	21:20	21:20	11	TRUE
LEAF_NODE	21:24	21:24	7	;
LEAF_NODE	22:1	22:1	5	}
LEAF_NODE	23:0	23:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	12:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	tls_peers_mgmt_import_cb
LEAF_NODE	2:0	2:0	3	tls_peers_mgmt_import_cb
PARAMETER_LIST	2:24	2:57	2	( GtkWidget * button , gpointer data )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:36	3	GtkWidget * button
TYPE	2:25	2:35	4	GtkWidget *
TYPE_NAME	2:25	2:25	5	GtkWidget
LEAF_NODE	2:25	2:25	6	GtkWidget
POINTER	2:35	2:35	5	*
LEAF_NODE	2:35	2:35	6	*
NAME	2:36	2:36	4	button
LEAF_NODE	2:36	2:36	5	button
LEAF_NODE	2:42	2:42	3	,
PARAMETER_DECL	2:44	2:53	3	gpointer data
TYPE	2:44	2:44	4	gpointer
TYPE_NAME	2:44	2:44	5	gpointer
LEAF_NODE	2:44	2:44	6	gpointer
NAME	2:53	2:53	4	data
LEAF_NODE	2:53	2:53	5	data
LEAF_NODE	2:57	2:57	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	5:1	5:1	2	
EXPR_STATEMENT	5:1	11:31	3	purple_request_file ( tpm_dat , _ ( "Select a PEM certificate" ) , "certificate.pem" , FALSE , G_CALLBACK ( tls_peers_mgmt_import_ok_cb ) , NULL , NULL , NULL , NULL , NULL ) ;
EXPR	5:1	5:1	4	purple_request_file ( tpm_dat , _ ( "Select a PEM certificate" ) , "certificate.pem" , FALSE , G_CALLBACK ( tls_peers_mgmt_import_ok_cb ) , NULL , NULL , NULL , NULL , NULL )
FUNCTION_CALL	5:1	11:30	5	purple_request_file ( tpm_dat , _ ( "Select a PEM certificate" ) , "certificate.pem" , FALSE , G_CALLBACK ( tls_peers_mgmt_import_ok_cb ) , NULL , NULL , NULL , NULL , NULL )
CALLEE	5:1	5:1	6	purple_request_file
LEAF_NODE	5:1	5:1	7	purple_request_file
LEAF_NODE	5:20	5:20	6	(
ARGUMENT	5:21	5:21	6	tpm_dat
FIELD	5:21	5:21	7	tpm_dat
LEAF_NODE	5:21	5:21	8	tpm_dat
LEAF_NODE	5:28	5:28	6	,
ARGUMENT	6:7	6:7	6	_ ( "Select a PEM certificate" )
FUNCTION_CALL	6:7	6:35	7	_ ( "Select a PEM certificate" )
CALLEE	6:7	6:7	8	_
LEAF_NODE	6:7	6:7	9	_
LEAF_NODE	6:8	6:8	8	(
ARGUMENT	6:9	6:9	8	"Select a PEM certificate"
FIELD	6:9	6:9	9	"Select a PEM certificate"
LEAF_NODE	6:9	6:9	10	"Select a PEM certificate"
LEAF_NODE	6:35	6:35	8	)
LEAF_NODE	6:36	6:36	6	,
ARGUMENT	7:7	7:7	6	"certificate.pem"
FIELD	7:7	7:7	7	"certificate.pem"
LEAF_NODE	7:7	7:7	8	"certificate.pem"
LEAF_NODE	7:24	7:24	6	,
ARGUMENT	8:7	8:7	6	FALSE
FIELD	8:7	8:7	7	FALSE
LEAF_NODE	8:7	8:7	8	FALSE
LEAF_NODE	8:12	8:12	6	,
ARGUMENT	9:7	9:7	6	G_CALLBACK ( tls_peers_mgmt_import_ok_cb )
FUNCTION_CALL	9:7	9:45	7	G_CALLBACK ( tls_peers_mgmt_import_ok_cb )
CALLEE	9:7	9:7	8	G_CALLBACK
LEAF_NODE	9:7	9:7	9	G_CALLBACK
LEAF_NODE	9:17	9:17	8	(
ARGUMENT	9:18	9:18	8	tls_peers_mgmt_import_ok_cb
FIELD	9:18	9:18	9	tls_peers_mgmt_import_ok_cb
LEAF_NODE	9:18	9:18	10	tls_peers_mgmt_import_ok_cb
LEAF_NODE	9:45	9:45	8	)
LEAF_NODE	9:46	9:46	6	,
ARGUMENT	10:7	10:7	6	NULL
FIELD	10:7	10:7	7	NULL
LEAF_NODE	10:7	10:7	8	NULL
LEAF_NODE	10:11	10:11	6	,
ARGUMENT	11:7	11:7	6	NULL
FIELD	11:7	11:7	7	NULL
LEAF_NODE	11:7	11:7	8	NULL
LEAF_NODE	11:11	11:11	6	,
ARGUMENT	11:13	11:13	6	NULL
FIELD	11:13	11:13	7	NULL
LEAF_NODE	11:13	11:13	8	NULL
LEAF_NODE	11:17	11:17	6	,
ARGUMENT	11:19	11:19	6	NULL
FIELD	11:19	11:19	7	NULL
LEAF_NODE	11:19	11:19	8	NULL
LEAF_NODE	11:23	11:23	6	,
ARGUMENT	11:25	11:25	6	NULL
FIELD	11:25	11:25	7	NULL
LEAF_NODE	11:25	11:25	8	NULL
LEAF_NODE	11:30	11:30	6	)
LEAF_NODE	11:31	11:31	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	purple_request_field_account_set_filter
LEAF_NODE	2:0	2:0	3	purple_request_field_account_set_filter
PARAMETER_LIST	2:39	3:46	2	( PurpleRequestField * field , PurpleFilterAccountFunc filter_func )
LEAF_NODE	2:39	2:39	3	(
PARAMETER_DECL	2:40	2:60	3	PurpleRequestField * field
TYPE	2:40	2:59	4	PurpleRequestField *
TYPE_NAME	2:40	2:40	5	PurpleRequestField
LEAF_NODE	2:40	2:40	6	PurpleRequestField
POINTER	2:59	2:59	5	*
LEAF_NODE	2:59	2:59	6	*
NAME	2:60	2:60	4	field
LEAF_NODE	2:60	2:60	5	field
LEAF_NODE	2:65	2:65	3	,
PARAMETER_DECL	3:11	3:35	3	PurpleFilterAccountFunc filter_func
TYPE	3:11	3:11	4	PurpleFilterAccountFunc
TYPE_NAME	3:11	3:11	5	PurpleFilterAccountFunc
LEAF_NODE	3:11	3:11	6	PurpleFilterAccountFunc
NAME	3:35	3:35	4	filter_func
LEAF_NODE	3:35	3:35	5	filter_func
LEAF_NODE	3:46	3:46	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	7:1	2	
EXPR_STATEMENT	5:1	5:32	3	g_return_if_fail ( field != NULL ) ;
EXPR	5:1	5:1	4	g_return_if_fail ( field != NULL )
FUNCTION_CALL	5:1	5:31	5	g_return_if_fail ( field != NULL )
CALLEE	5:1	5:1	6	g_return_if_fail
LEAF_NODE	5:1	5:1	7	g_return_if_fail
LEAF_NODE	5:17	5:17	6	(
ARGUMENT	5:18	5:27	6	field != NULL
FIELD	5:18	5:18	7	field
LEAF_NODE	5:18	5:18	8	field
EQ_OPERATOR	5:24	5:24	7	!=
LEAF_NODE	5:24	5:24	8	!=
FIELD	5:27	5:27	7	NULL
LEAF_NODE	5:27	5:27	8	NULL
LEAF_NODE	5:31	5:31	6	)
LEAF_NODE	5:32	5:32	4	;
EXPR_STATEMENT	6:1	6:62	3	g_return_if_fail ( field -> type == PURPLE_REQUEST_FIELD_ACCOUNT ) ;
EXPR	6:1	6:1	4	g_return_if_fail ( field -> type == PURPLE_REQUEST_FIELD_ACCOUNT )
FUNCTION_CALL	6:1	6:61	5	g_return_if_fail ( field -> type == PURPLE_REQUEST_FIELD_ACCOUNT )
CALLEE	6:1	6:1	6	g_return_if_fail
LEAF_NODE	6:1	6:1	7	g_return_if_fail
LEAF_NODE	6:17	6:17	6	(
ARGUMENT	6:18	6:33	6	field -> type == PURPLE_REQUEST_FIELD_ACCOUNT
FIELD	6:18	6:25	7	field -> type
LEAF_NODE	6:18	6:18	8	field
LEAF_NODE	6:23	6:23	8	->
LEAF_NODE	6:25	6:25	8	type
EQ_OPERATOR	6:30	6:30	7	==
LEAF_NODE	6:30	6:30	8	==
FIELD	6:33	6:33	7	PURPLE_REQUEST_FIELD_ACCOUNT
LEAF_NODE	6:33	6:33	8	PURPLE_REQUEST_FIELD_ACCOUNT
LEAF_NODE	6:61	6:61	6	)
LEAF_NODE	6:62	6:62	4	;
EXPR_STATEMENT	7:1	7:43	3	field -> u . account . filter_func = filter_func ;
EXPR	7:1	7:1	4	field -> u . account . filter_func = filter_func
ASSIGN	7:1	7:32	5	field -> u . account . filter_func = filter_func
LVAL	7:1	7:1	6	field -> u . account . filter_func
FIELD	7:1	7:18	7	field -> u . account . filter_func
LEAF_NODE	7:1	7:1	8	field
LEAF_NODE	7:6	7:6	8	->
LEAF_NODE	7:8	7:8	8	u
LEAF_NODE	7:9	7:9	8	.
LEAF_NODE	7:10	7:10	8	account
LEAF_NODE	7:17	7:17	8	.
LEAF_NODE	7:18	7:18	8	filter_func
ASSIGN_OP	7:30	7:30	6	=
LEAF_NODE	7:30	7:30	7	=
RVAL	7:32	7:32	6	filter_func
FIELD	7:32	7:32	7	filter_func
LEAF_NODE	7:32	7:32	8	filter_func
LEAF_NODE	7:43	7:43	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	65:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	finch_blist_place_tagged
LEAF_NODE	2:0	2:0	3	finch_blist_place_tagged
PARAMETER_LIST	2:24	2:48	2	( PurpleBlistNode * target )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:42	3	PurpleBlistNode * target
TYPE	2:25	2:41	4	PurpleBlistNode *
TYPE_NAME	2:25	2:25	5	PurpleBlistNode
LEAF_NODE	2:25	2:25	6	PurpleBlistNode
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	target
LEAF_NODE	2:42	2:42	5	target
LEAF_NODE	2:48	2:48	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	19:1	2	
SIMPLE_DECL	4:1	4:23	3	PurpleGroup * tg ; tg = NULL ;
VAR_DECL	4:1	4:14	4	PurpleGroup * tg ; tg = NULL
TYPE	4:1	4:13	5	PurpleGroup *
TYPE_NAME	4:1	4:1	6	PurpleGroup
LEAF_NODE	4:1	4:1	7	PurpleGroup
POINTER	4:13	4:13	6	*
LEAF_NODE	4:13	4:13	7	*
NAME	4:14	4:14	5	tg
LEAF_NODE	4:14	4:14	6	tg
LEAF_NODE	0:0	0:0	5	;
INIT	4:14	4:14	5	tg = NULL
ASSIGN	4:14	4:19	6	tg = NULL
LVAL	4:14	4:14	7	tg
NAME	4:14	4:14	8	tg
LEAF_NODE	4:14	4:14	9	tg
ASSIGN_OP	4:17	4:17	7	=
LEAF_NODE	4:17	4:17	8	=
RVAL	4:19	4:19	7	NULL
FIELD	4:19	4:19	8	NULL
LEAF_NODE	4:19	4:19	9	NULL
LEAF_NODE	4:23	4:23	4	;
SIMPLE_DECL	5:1	5:25	3	PurpleContact * tc ; tc = NULL ;
VAR_DECL	5:1	5:16	4	PurpleContact * tc ; tc = NULL
TYPE	5:1	5:15	5	PurpleContact *
TYPE_NAME	5:1	5:1	6	PurpleContact
LEAF_NODE	5:1	5:1	7	PurpleContact
POINTER	5:15	5:15	6	*
LEAF_NODE	5:15	5:15	7	*
NAME	5:16	5:16	5	tc
LEAF_NODE	5:16	5:16	6	tc
LEAF_NODE	0:0	0:0	5	;
INIT	5:16	5:16	5	tc = NULL
ASSIGN	5:16	5:21	6	tc = NULL
LVAL	5:16	5:16	7	tc
NAME	5:16	5:16	8	tc
LEAF_NODE	5:16	5:16	9	tc
ASSIGN_OP	5:19	5:19	7	=
LEAF_NODE	5:19	5:19	8	=
RVAL	5:21	5:21	7	NULL
FIELD	5:21	5:21	8	NULL
LEAF_NODE	5:21	5:21	9	NULL
LEAF_NODE	5:25	5:25	4	;
SELECTION	6:1	8:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	target == NULL || purple_blist_node_get_type ( target ) == PURPLE_BLIST_OTHER_NODE
EXPR	6:5	6:5	5	target == NULL || purple_blist_node_get_type ( target ) == PURPLE_BLIST_OTHER_NODE
OR	6:5	7:3	6	target == NULL || purple_blist_node_get_type ( target ) == PURPLE_BLIST_OTHER_NODE
EXPR	6:5	6:15	7	target == NULL
FIELD	6:5	6:5	8	target
LEAF_NODE	6:5	6:5	9	target
EQ_OPERATOR	6:12	6:12	8	==
LEAF_NODE	6:12	6:12	9	==
FIELD	6:15	6:15	8	NULL
LEAF_NODE	6:15	6:15	9	NULL
LEAF_NODE	6:20	6:20	7	||
EXPR	7:3	7:41	7	purple_blist_node_get_type ( target ) == PURPLE_BLIST_OTHER_NODE
FUNCTION_CALL	7:3	7:36	8	purple_blist_node_get_type ( target )
CALLEE	7:3	7:3	9	purple_blist_node_get_type
LEAF_NODE	7:3	7:3	10	purple_blist_node_get_type
LEAF_NODE	7:29	7:29	9	(
ARGUMENT	7:30	7:30	9	target
FIELD	7:30	7:30	10	target
LEAF_NODE	7:30	7:30	11	target
LEAF_NODE	7:36	7:36	9	)
EQ_OPERATOR	7:38	7:38	8	==
LEAF_NODE	7:38	7:38	9	==
FIELD	7:41	7:41	8	PURPLE_BLIST_OTHER_NODE
LEAF_NODE	7:41	7:41	9	PURPLE_BLIST_OTHER_NODE
LEAF_NODE	7:64	7:64	4	)
STATEMENTS	8:2	8:2	4	
JUMP_STATEMENT	8:2	8:8	5	return DESTINATION ;
KEYWORD	8:2	8:2	6	return
LEAF_NODE	8:2	8:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	8:8	8:8	6	;
SELECTION	9:1	10:2	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	PURPLE_BLIST_NODE_IS_GROUP ( target )
EXPR	9:5	9:5	5	PURPLE_BLIST_NODE_IS_GROUP ( target )
FUNCTION_CALL	9:5	9:38	6	PURPLE_BLIST_NODE_IS_GROUP ( target )
CALLEE	9:5	9:5	7	PURPLE_BLIST_NODE_IS_GROUP
LEAF_NODE	9:5	9:5	8	PURPLE_BLIST_NODE_IS_GROUP
LEAF_NODE	9:31	9:31	7	(
ARGUMENT	9:32	9:32	7	target
FIELD	9:32	9:32	8	target
LEAF_NODE	9:32	9:32	9	target
LEAF_NODE	9:38	9:38	7	)
LEAF_NODE	9:39	9:39	4	)
STATEMENTS	10:2	10:2	4	
EXPR_STATEMENT	10:2	10:27	5	tg = ( PurpleGroup * ) target ;
EXPR	10:2	10:2	6	tg = ( PurpleGroup * ) target
ASSIGN	10:2	10:7	7	tg = ( PurpleGroup * ) target
LVAL	10:2	10:2	8	tg
FIELD	10:2	10:2	9	tg
LEAF_NODE	10:2	10:2	10	tg
ASSIGN_OP	10:5	10:5	8	=
LEAF_NODE	10:5	10:5	9	=
RVAL	10:7	10:21	8	( PurpleGroup * ) target
LEAF_NODE	10:7	10:7	9	(
TYPE_NAME	10:8	10:8	9	PurpleGroup
LEAF_NODE	10:8	10:8	10	PurpleGroup
LEAF_NODE	10:19	10:19	9	*
LEAF_NODE	10:20	10:20	9	)
FIELD	10:21	10:21	9	target
LEAF_NODE	10:21	10:21	10	target
LEAF_NODE	10:27	10:27	6	;
SELECTION	11:1	11:6	3	
KEYWORD	11:1	11:1	4	else
LEAF_NODE	11:1	11:1	5	else
STATEMENTS	11:6	11:6	4	
SELECTION	11:6	11:46	5	
KEYWORD	11:6	11:6	6	if
LEAF_NODE	11:6	11:6	7	if
LEAF_NODE	11:9	11:9	6	(
CONDITION	11:10	11:10	6	PURPLE_BLIST_NODE_IS_BUDDY ( target )
EXPR	11:10	11:10	7	PURPLE_BLIST_NODE_IS_BUDDY ( target )
FUNCTION_CALL	11:10	11:43	8	PURPLE_BLIST_NODE_IS_BUDDY ( target )
CALLEE	11:10	11:10	9	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	11:10	11:10	10	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	11:36	11:36	9	(
ARGUMENT	11:37	11:37	9	target
FIELD	11:37	11:37	10	target
LEAF_NODE	11:37	11:37	11	target
LEAF_NODE	11:43	11:43	9	)
LEAF_NODE	11:44	11:44	6	)
STATEMENTS	11:46	14:1	6	
LEAF_NODE	11:46	11:46	7	{
STATEMENTS	12:2	13:2	7	
EXPR_STATEMENT	12:2	12:59	8	tc = ( PurpleContact * ) purple_blist_node_get_parent ( target ) ;
EXPR	12:2	12:2	9	tc = ( PurpleContact * ) purple_blist_node_get_parent ( target )
ASSIGN	12:2	12:7	10	tc = ( PurpleContact * ) purple_blist_node_get_parent ( target )
LVAL	12:2	12:2	11	tc
FIELD	12:2	12:2	12	tc
LEAF_NODE	12:2	12:2	13	tc
ASSIGN_OP	12:5	12:5	11	=
LEAF_NODE	12:5	12:5	12	=
RVAL	12:7	12:23	11	( PurpleContact * ) purple_blist_node_get_parent ( target )
LEAF_NODE	12:7	12:7	12	(
TYPE_NAME	12:8	12:8	12	PurpleContact
LEAF_NODE	12:8	12:8	13	PurpleContact
LEAF_NODE	12:21	12:21	12	*
LEAF_NODE	12:22	12:22	12	)
FUNCTION_CALL	12:23	12:58	12	purple_blist_node_get_parent ( target )
CALLEE	12:23	12:23	13	purple_blist_node_get_parent
LEAF_NODE	12:23	12:23	14	purple_blist_node_get_parent
LEAF_NODE	12:51	12:51	13	(
ARGUMENT	12:52	12:52	13	target
FIELD	12:52	12:52	14	target
LEAF_NODE	12:52	12:52	15	target
LEAF_NODE	12:58	12:58	13	)
LEAF_NODE	12:59	12:59	9	;
EXPR_STATEMENT	13:2	13:71	8	tg = ( PurpleGroup * ) purple_blist_node_get_parent ( ( PurpleBlistNode * ) tc ) ;
EXPR	13:2	13:2	9	tg = ( PurpleGroup * ) purple_blist_node_get_parent ( ( PurpleBlistNode * ) tc )
ASSIGN	13:2	13:7	10	tg = ( PurpleGroup * ) purple_blist_node_get_parent ( ( PurpleBlistNode * ) tc )
LVAL	13:2	13:2	11	tg
FIELD	13:2	13:2	12	tg
LEAF_NODE	13:2	13:2	13	tg
ASSIGN_OP	13:5	13:5	11	=
LEAF_NODE	13:5	13:5	12	=
RVAL	13:7	13:21	11	( PurpleGroup * ) purple_blist_node_get_parent ( ( PurpleBlistNode * ) tc )
LEAF_NODE	13:7	13:7	12	(
TYPE_NAME	13:8	13:8	12	PurpleGroup
LEAF_NODE	13:8	13:8	13	PurpleGroup
LEAF_NODE	13:19	13:19	12	*
LEAF_NODE	13:20	13:20	12	)
FUNCTION_CALL	13:21	13:70	12	purple_blist_node_get_parent ( ( PurpleBlistNode * ) tc )
CALLEE	13:21	13:21	13	purple_blist_node_get_parent
LEAF_NODE	13:21	13:21	14	purple_blist_node_get_parent
LEAF_NODE	13:49	13:49	13	(
ARGUMENT	13:50	13:68	13	( PurpleBlistNode * ) tc
LEAF_NODE	13:50	13:50	14	(
TYPE_NAME	13:51	13:51	14	PurpleBlistNode
LEAF_NODE	13:51	13:51	15	PurpleBlistNode
LEAF_NODE	13:66	13:66	14	*
LEAF_NODE	13:67	13:67	14	)
FIELD	13:68	13:68	14	tc
LEAF_NODE	13:68	13:68	15	tc
LEAF_NODE	13:70	13:70	13	)
LEAF_NODE	13:71	13:71	9	;
LEAF_NODE	14:1	14:1	7	}
SELECTION	14:3	14:8	3	
KEYWORD	14:3	14:3	4	else
LEAF_NODE	14:3	14:3	5	else
STATEMENTS	14:8	18:1	4	
LEAF_NODE	14:8	14:8	5	{
STATEMENTS	15:2	17:2	5	
SELECTION	15:2	16:3	6	
KEYWORD	15:2	15:2	7	if
LEAF_NODE	15:2	15:2	8	if
LEAF_NODE	15:5	15:5	7	(
CONDITION	15:6	15:6	7	PURPLE_BLIST_NODE_IS_CONTACT ( target )
EXPR	15:6	15:6	8	PURPLE_BLIST_NODE_IS_CONTACT ( target )
FUNCTION_CALL	15:6	15:41	9	PURPLE_BLIST_NODE_IS_CONTACT ( target )
CALLEE	15:6	15:6	10	PURPLE_BLIST_NODE_IS_CONTACT
LEAF_NODE	15:6	15:6	11	PURPLE_BLIST_NODE_IS_CONTACT
LEAF_NODE	15:34	15:34	10	(
ARGUMENT	15:35	15:35	10	target
FIELD	15:35	15:35	11	target
LEAF_NODE	15:35	15:35	12	target
LEAF_NODE	15:41	15:41	10	)
LEAF_NODE	15:42	15:42	7	)
STATEMENTS	16:3	16:3	7	
EXPR_STATEMENT	16:3	16:30	8	tc = ( PurpleContact * ) target ;
EXPR	16:3	16:3	9	tc = ( PurpleContact * ) target
ASSIGN	16:3	16:8	10	tc = ( PurpleContact * ) target
LVAL	16:3	16:3	11	tc
FIELD	16:3	16:3	12	tc
LEAF_NODE	16:3	16:3	13	tc
ASSIGN_OP	16:6	16:6	11	=
LEAF_NODE	16:6	16:6	12	=
RVAL	16:8	16:24	11	( PurpleContact * ) target
LEAF_NODE	16:8	16:8	12	(
TYPE_NAME	16:9	16:9	12	PurpleContact
LEAF_NODE	16:9	16:9	13	PurpleContact
LEAF_NODE	16:22	16:22	12	*
LEAF_NODE	16:23	16:23	12	)
FIELD	16:24	16:24	12	target
LEAF_NODE	16:24	16:24	13	target
LEAF_NODE	16:30	16:30	9	;
EXPR_STATEMENT	17:2	17:57	6	tg = ( PurpleGroup * ) purple_blist_node_get_parent ( target ) ;
EXPR	17:2	17:2	7	tg = ( PurpleGroup * ) purple_blist_node_get_parent ( target )
ASSIGN	17:2	17:7	8	tg = ( PurpleGroup * ) purple_blist_node_get_parent ( target )
LVAL	17:2	17:2	9	tg
FIELD	17:2	17:2	10	tg
LEAF_NODE	17:2	17:2	11	tg
ASSIGN_OP	17:5	17:5	9	=
LEAF_NODE	17:5	17:5	10	=
RVAL	17:7	17:21	9	( PurpleGroup * ) purple_blist_node_get_parent ( target )
LEAF_NODE	17:7	17:7	10	(
TYPE_NAME	17:8	17:8	10	PurpleGroup
LEAF_NODE	17:8	17:8	11	PurpleGroup
LEAF_NODE	17:19	17:19	10	*
LEAF_NODE	17:20	17:20	10	)
FUNCTION_CALL	17:21	17:56	10	purple_blist_node_get_parent ( target )
CALLEE	17:21	17:21	11	purple_blist_node_get_parent
LEAF_NODE	17:21	17:21	12	purple_blist_node_get_parent
LEAF_NODE	17:49	17:49	11	(
ARGUMENT	17:50	17:50	11	target
FIELD	17:50	17:50	12	target
LEAF_NODE	17:50	17:50	13	target
LEAF_NODE	17:56	17:56	11	)
LEAF_NODE	17:57	17:57	7	;
LEAF_NODE	18:1	18:1	5	}
SELECTION	19:1	19:22	3	
KEYWORD	19:1	19:1	4	if
LEAF_NODE	19:1	19:1	5	if
LEAF_NODE	19:4	19:4	4	(
CONDITION	19:5	19:5	4	ggblist -> tagged
EXPR	19:5	19:5	5	ggblist -> tagged
FIELD	19:5	19:14	6	ggblist -> tagged
LEAF_NODE	19:5	19:5	7	ggblist
LEAF_NODE	19:12	19:12	7	->
LEAF_NODE	19:14	19:14	7	tagged
LEAF_NODE	19:20	19:20	4	)
STATEMENTS	19:22	64:1	4	
LEAF_NODE	19:22	19:22	5	{
STATEMENTS	20:2	22:2	5	
SIMPLE_DECL	20:2	20:31	6	GList * list ; list = ggblist -> tagged ;
VAR_DECL	20:2	20:9	7	GList * list ; list = ggblist -> tagged
TYPE	20:2	20:8	8	GList *
TYPE_NAME	20:2	20:2	9	GList
LEAF_NODE	20:2	20:2	10	GList
POINTER	20:8	20:8	9	*
LEAF_NODE	20:8	20:8	10	*
NAME	20:9	20:9	8	list
LEAF_NODE	20:9	20:9	9	list
LEAF_NODE	0:0	0:0	8	;
INIT	20:9	20:9	8	list = ggblist -> tagged
ASSIGN	20:9	20:16	9	list = ggblist -> tagged
LVAL	20:9	20:9	10	list
NAME	20:9	20:9	11	list
LEAF_NODE	20:9	20:9	12	list
ASSIGN_OP	20:14	20:14	10	=
LEAF_NODE	20:14	20:14	11	=
RVAL	20:16	20:16	10	ggblist -> tagged
FIELD	20:16	20:25	11	ggblist -> tagged
LEAF_NODE	20:16	20:16	12	ggblist
LEAF_NODE	20:23	20:23	12	->
LEAF_NODE	20:25	20:25	12	tagged
LEAF_NODE	20:31	20:31	7	;
EXPR_STATEMENT	21:2	21:24	6	ggblist -> tagged = NULL ;
EXPR	21:2	21:2	7	ggblist -> tagged = NULL
ASSIGN	21:2	21:20	8	ggblist -> tagged = NULL
LVAL	21:2	21:2	9	ggblist -> tagged
FIELD	21:2	21:11	10	ggblist -> tagged
LEAF_NODE	21:2	21:2	11	ggblist
LEAF_NODE	21:9	21:9	11	->
LEAF_NODE	21:11	21:11	11	tagged
ASSIGN_OP	21:18	21:18	9	=
LEAF_NODE	21:18	21:18	10	=
RVAL	21:20	21:20	9	NULL
FIELD	21:20	21:20	10	NULL
LEAF_NODE	21:20	21:20	11	NULL
LEAF_NODE	21:24	21:24	7	;
ITERATION	22:2	22:15	6	
KEYWORD	22:2	22:2	7	while
LEAF_NODE	22:2	22:2	8	while
LEAF_NODE	22:8	22:8	7	(
CONDITION	22:9	22:9	7	list
EXPR	22:9	22:9	8	list
FIELD	22:9	22:9	9	list
LEAF_NODE	22:9	22:9	10	list
LEAF_NODE	22:13	22:13	7	)
STATEMENTS	22:15	63:2	7	
LEAF_NODE	22:15	22:15	8	{
STATEMENTS	23:3	56:5	8	
SIMPLE_DECL	23:3	23:37	9	PurpleBlistNode * node ; node = list -> data ;
VAR_DECL	23:3	23:20	10	PurpleBlistNode * node ; node = list -> data
TYPE	23:3	23:19	11	PurpleBlistNode *
TYPE_NAME	23:3	23:3	12	PurpleBlistNode
LEAF_NODE	23:3	23:3	13	PurpleBlistNode
POINTER	23:19	23:19	12	*
LEAF_NODE	23:19	23:19	13	*
NAME	23:20	23:20	11	node
LEAF_NODE	23:20	23:20	12	node
LEAF_NODE	0:0	0:0	11	;
INIT	23:20	23:20	11	node = list -> data
ASSIGN	23:20	23:27	12	node = list -> data
LVAL	23:20	23:20	13	node
NAME	23:20	23:20	14	node
LEAF_NODE	23:20	23:20	15	node
ASSIGN_OP	23:25	23:25	13	=
LEAF_NODE	23:25	23:25	14	=
RVAL	23:27	23:27	13	list -> data
FIELD	23:27	23:33	14	list -> data
LEAF_NODE	23:27	23:27	15	list
LEAF_NODE	23:31	23:31	15	->
LEAF_NODE	23:33	23:33	15	data
LEAF_NODE	23:37	23:37	10	;
EXPR_STATEMENT	24:3	24:40	9	list = g_list_delete_link ( list , list ) ;
EXPR	24:3	24:3	10	list = g_list_delete_link ( list , list )
ASSIGN	24:3	24:10	11	list = g_list_delete_link ( list , list )
LVAL	24:3	24:3	12	list
FIELD	24:3	24:3	13	list
LEAF_NODE	24:3	24:3	14	list
ASSIGN_OP	24:8	24:8	12	=
LEAF_NODE	24:8	24:8	13	=
RVAL	24:10	24:10	12	g_list_delete_link ( list , list )
FUNCTION_CALL	24:10	24:39	13	g_list_delete_link ( list , list )
CALLEE	24:10	24:10	14	g_list_delete_link
LEAF_NODE	24:10	24:10	15	g_list_delete_link
LEAF_NODE	24:28	24:28	14	(
ARGUMENT	24:29	24:29	14	list
FIELD	24:29	24:29	15	list
LEAF_NODE	24:29	24:29	16	list
LEAF_NODE	24:33	24:33	14	,
ARGUMENT	24:35	24:35	14	list
FIELD	24:35	24:35	15	list
LEAF_NODE	24:35	24:35	16	list
LEAF_NODE	24:39	24:39	14	)
LEAF_NODE	24:40	24:40	10	;
SELECTION	25:3	25:41	9	
KEYWORD	25:3	25:3	10	if
LEAF_NODE	25:3	25:3	11	if
LEAF_NODE	25:6	25:6	10	(
CONDITION	25:7	25:7	10	PURPLE_BLIST_NODE_IS_GROUP ( node )
EXPR	25:7	25:7	11	PURPLE_BLIST_NODE_IS_GROUP ( node )
FUNCTION_CALL	25:7	25:38	12	PURPLE_BLIST_NODE_IS_GROUP ( node )
CALLEE	25:7	25:7	13	PURPLE_BLIST_NODE_IS_GROUP
LEAF_NODE	25:7	25:7	14	PURPLE_BLIST_NODE_IS_GROUP
LEAF_NODE	25:33	25:33	13	(
ARGUMENT	25:34	25:34	13	node
FIELD	25:34	25:34	14	node
LEAF_NODE	25:34	25:34	15	node
LEAF_NODE	25:38	25:38	13	)
LEAF_NODE	25:39	25:39	10	)
STATEMENTS	25:41	29:3	10	
LEAF_NODE	25:41	25:41	11	{
STATEMENTS	26:4	28:4	11	
EXPR_STATEMENT	26:4	26:38	12	update_node_display ( node , ggblist ) ;
EXPR	26:4	26:4	13	update_node_display ( node , ggblist )
FUNCTION_CALL	26:4	26:37	14	update_node_display ( node , ggblist )
CALLEE	26:4	26:4	15	update_node_display
LEAF_NODE	26:4	26:4	16	update_node_display
LEAF_NODE	26:23	26:23	15	(
ARGUMENT	26:24	26:24	15	node
FIELD	26:24	26:24	16	node
LEAF_NODE	26:24	26:24	17	node
LEAF_NODE	26:28	26:28	15	,
ARGUMENT	26:30	26:30	15	ggblist
FIELD	26:30	26:30	16	ggblist
LEAF_NODE	26:30	26:30	17	ggblist
LEAF_NODE	26:37	26:37	15	)
LEAF_NODE	26:38	26:38	13	;
EXPR_STATEMENT	28:4	28:68	12	purple_blist_add_group ( ( PurpleGroup * ) node , ( PurpleBlistNode * ) tg ) ;
EXPR	28:4	28:4	13	purple_blist_add_group ( ( PurpleGroup * ) node , ( PurpleBlistNode * ) tg )
FUNCTION_CALL	28:4	28:67	14	purple_blist_add_group ( ( PurpleGroup * ) node , ( PurpleBlistNode * ) tg )
CALLEE	28:4	28:4	15	purple_blist_add_group
LEAF_NODE	28:4	28:4	16	purple_blist_add_group
LEAF_NODE	28:26	28:26	15	(
ARGUMENT	28:27	28:41	15	( PurpleGroup * ) node
LEAF_NODE	28:27	28:27	16	(
TYPE_NAME	28:28	28:28	16	PurpleGroup
LEAF_NODE	28:28	28:28	17	PurpleGroup
LEAF_NODE	28:39	28:39	16	*
LEAF_NODE	28:40	28:40	16	)
FIELD	28:41	28:41	16	node
LEAF_NODE	28:41	28:41	17	node
LEAF_NODE	28:45	28:45	15	,
ARGUMENT	28:47	28:65	15	( PurpleBlistNode * ) tg
LEAF_NODE	28:47	28:47	16	(
TYPE_NAME	28:48	28:48	16	PurpleBlistNode
LEAF_NODE	28:48	28:48	17	PurpleBlistNode
LEAF_NODE	28:63	28:63	16	*
LEAF_NODE	28:64	28:64	16	)
FIELD	28:65	28:65	16	tg
LEAF_NODE	28:65	28:65	17	tg
LEAF_NODE	28:67	28:67	15	)
LEAF_NODE	28:68	28:68	13	;
LEAF_NODE	29:3	29:3	11	}
SELECTION	29:5	29:10	9	
KEYWORD	29:5	29:5	10	else
LEAF_NODE	29:5	29:5	11	else
STATEMENTS	29:10	29:10	10	
SELECTION	29:10	29:50	11	
KEYWORD	29:10	29:10	12	if
LEAF_NODE	29:10	29:10	13	if
LEAF_NODE	29:13	29:13	12	(
CONDITION	29:14	29:14	12	PURPLE_BLIST_NODE_IS_CONTACT ( node )
EXPR	29:14	29:14	13	PURPLE_BLIST_NODE_IS_CONTACT ( node )
FUNCTION_CALL	29:14	29:47	14	PURPLE_BLIST_NODE_IS_CONTACT ( node )
CALLEE	29:14	29:14	15	PURPLE_BLIST_NODE_IS_CONTACT
LEAF_NODE	29:14	29:14	16	PURPLE_BLIST_NODE_IS_CONTACT
LEAF_NODE	29:42	29:42	15	(
ARGUMENT	29:43	29:43	15	node
FIELD	29:43	29:43	16	node
LEAF_NODE	29:43	29:43	17	node
LEAF_NODE	29:47	29:47	15	)
LEAF_NODE	29:48	29:48	12	)
STATEMENTS	29:50	41:3	12	
LEAF_NODE	29:50	29:50	13	{
STATEMENTS	30:4	37:6	13	
EXPR_STATEMENT	30:4	30:90	14	update_buddy_display ( purple_contact_get_priority_buddy ( ( PurpleContact * ) node ) , ggblist ) ;
EXPR	30:4	30:4	15	update_buddy_display ( purple_contact_get_priority_buddy ( ( PurpleContact * ) node ) , ggblist )
FUNCTION_CALL	30:4	30:89	16	update_buddy_display ( purple_contact_get_priority_buddy ( ( PurpleContact * ) node ) , ggblist )
CALLEE	30:4	30:4	17	update_buddy_display
LEAF_NODE	30:4	30:4	18	update_buddy_display
LEAF_NODE	30:24	30:24	17	(
ARGUMENT	30:25	30:25	17	purple_contact_get_priority_buddy ( ( PurpleContact * ) node )
FUNCTION_CALL	30:25	30:79	18	purple_contact_get_priority_buddy ( ( PurpleContact * ) node )
CALLEE	30:25	30:25	19	purple_contact_get_priority_buddy
LEAF_NODE	30:25	30:25	20	purple_contact_get_priority_buddy
LEAF_NODE	30:58	30:58	19	(
ARGUMENT	30:59	30:75	19	( PurpleContact * ) node
LEAF_NODE	30:59	30:59	20	(
TYPE_NAME	30:60	30:60	20	PurpleContact
LEAF_NODE	30:60	30:60	21	PurpleContact
LEAF_NODE	30:73	30:73	20	*
LEAF_NODE	30:74	30:74	20	)
FIELD	30:75	30:75	20	node
LEAF_NODE	30:75	30:75	21	node
LEAF_NODE	30:79	30:79	19	)
LEAF_NODE	30:80	30:80	17	,
ARGUMENT	30:82	30:82	17	ggblist
FIELD	30:82	30:82	18	ggblist
LEAF_NODE	30:82	30:82	19	ggblist
LEAF_NODE	30:89	30:89	17	)
LEAF_NODE	30:90	30:90	15	;
SELECTION	31:4	31:41	14	
KEYWORD	31:4	31:4	15	if
LEAF_NODE	31:4	31:4	16	if
LEAF_NODE	31:7	31:7	15	(
CONDITION	31:8	31:8	15	PURPLE_BLIST_NODE ( tg ) == target
EXPR	31:8	31:33	16	PURPLE_BLIST_NODE ( tg ) == target
FUNCTION_CALL	31:8	31:28	17	PURPLE_BLIST_NODE ( tg )
CALLEE	31:8	31:8	18	PURPLE_BLIST_NODE
LEAF_NODE	31:8	31:8	19	PURPLE_BLIST_NODE
LEAF_NODE	31:25	31:25	18	(
ARGUMENT	31:26	31:26	18	tg
FIELD	31:26	31:26	19	tg
LEAF_NODE	31:26	31:26	20	tg
LEAF_NODE	31:28	31:28	18	)
EQ_OPERATOR	31:30	31:30	17	==
LEAF_NODE	31:30	31:30	18	==
FIELD	31:33	31:33	17	target
LEAF_NODE	31:33	31:33	18	target
LEAF_NODE	31:39	31:39	15	)
STATEMENTS	31:41	34:4	15	
LEAF_NODE	31:41	31:41	16	{
STATEMENTS	33:5	33:5	16	
EXPR_STATEMENT	33:5	33:61	17	purple_blist_add_contact ( ( PurpleContact * ) node , tg , NULL ) ;
EXPR	33:5	33:5	18	purple_blist_add_contact ( ( PurpleContact * ) node , tg , NULL )
FUNCTION_CALL	33:5	33:60	19	purple_blist_add_contact ( ( PurpleContact * ) node , tg , NULL )
CALLEE	33:5	33:5	20	purple_blist_add_contact
LEAF_NODE	33:5	33:5	21	purple_blist_add_contact
LEAF_NODE	33:29	33:29	20	(
ARGUMENT	33:30	33:46	20	( PurpleContact * ) node
LEAF_NODE	33:30	33:30	21	(
TYPE_NAME	33:31	33:31	21	PurpleContact
LEAF_NODE	33:31	33:31	22	PurpleContact
LEAF_NODE	33:44	33:44	21	*
LEAF_NODE	33:45	33:45	21	)
FIELD	33:46	33:46	21	node
LEAF_NODE	33:46	33:46	22	node
LEAF_NODE	33:50	33:50	20	,
ARGUMENT	33:52	33:52	20	tg
FIELD	33:52	33:52	21	tg
LEAF_NODE	33:52	33:52	22	tg
LEAF_NODE	33:54	33:54	20	,
ARGUMENT	33:56	33:56	20	NULL
FIELD	33:56	33:56	21	NULL
LEAF_NODE	33:56	33:56	22	NULL
LEAF_NODE	33:60	33:60	20	)
LEAF_NODE	33:61	33:61	18	;
LEAF_NODE	34:4	34:4	16	}
SELECTION	34:6	34:11	14	
KEYWORD	34:6	34:6	15	else
LEAF_NODE	34:6	34:6	16	else
STATEMENTS	34:11	34:11	15	
SELECTION	34:11	34:19	16	
KEYWORD	34:11	34:11	17	if
LEAF_NODE	34:11	34:11	18	if
LEAF_NODE	34:14	34:14	17	(
CONDITION	34:15	34:15	17	tc
EXPR	34:15	34:15	18	tc
FIELD	34:15	34:15	19	tc
LEAF_NODE	34:15	34:15	20	tc
LEAF_NODE	34:17	34:17	17	)
STATEMENTS	34:19	37:4	17	
LEAF_NODE	34:19	34:19	18	{
STATEMENTS	36:5	36:5	18	
EXPR_STATEMENT	36:5	36:75	19	purple_blist_merge_contact ( ( PurpleContact * ) node , ( PurpleBlistNode * ) tc ) ;
EXPR	36:5	36:5	20	purple_blist_merge_contact ( ( PurpleContact * ) node , ( PurpleBlistNode * ) tc )
FUNCTION_CALL	36:5	36:74	21	purple_blist_merge_contact ( ( PurpleContact * ) node , ( PurpleBlistNode * ) tc )
CALLEE	36:5	36:5	22	purple_blist_merge_contact
LEAF_NODE	36:5	36:5	23	purple_blist_merge_contact
LEAF_NODE	36:31	36:31	22	(
ARGUMENT	36:32	36:48	22	( PurpleContact * ) node
LEAF_NODE	36:32	36:32	23	(
TYPE_NAME	36:33	36:33	23	PurpleContact
LEAF_NODE	36:33	36:33	24	PurpleContact
LEAF_NODE	36:46	36:46	23	*
LEAF_NODE	36:47	36:47	23	)
FIELD	36:48	36:48	23	node
LEAF_NODE	36:48	36:48	24	node
LEAF_NODE	36:52	36:52	22	,
ARGUMENT	36:54	36:72	22	( PurpleBlistNode * ) tc
LEAF_NODE	36:54	36:54	23	(
TYPE_NAME	36:55	36:55	23	PurpleBlistNode
LEAF_NODE	36:55	36:55	24	PurpleBlistNode
LEAF_NODE	36:70	36:70	23	*
LEAF_NODE	36:71	36:71	23	)
FIELD	36:72	36:72	23	tc
LEAF_NODE	36:72	36:72	24	tc
LEAF_NODE	36:74	36:74	22	)
LEAF_NODE	36:75	36:75	20	;
LEAF_NODE	37:4	37:4	18	}
SELECTION	37:6	37:11	14	
KEYWORD	37:6	37:6	15	else
LEAF_NODE	37:6	37:6	16	else
STATEMENTS	37:11	40:4	15	
LEAF_NODE	37:11	37:11	16	{
STATEMENTS	39:5	39:5	16	
EXPR_STATEMENT	39:5	39:65	17	purple_blist_add_contact ( ( PurpleContact * ) node , NULL , target ) ;
EXPR	39:5	39:5	18	purple_blist_add_contact ( ( PurpleContact * ) node , NULL , target )
FUNCTION_CALL	39:5	39:64	19	purple_blist_add_contact ( ( PurpleContact * ) node , NULL , target )
CALLEE	39:5	39:5	20	purple_blist_add_contact
LEAF_NODE	39:5	39:5	21	purple_blist_add_contact
LEAF_NODE	39:29	39:29	20	(
ARGUMENT	39:30	39:46	20	( PurpleContact * ) node
LEAF_NODE	39:30	39:30	21	(
TYPE_NAME	39:31	39:31	21	PurpleContact
LEAF_NODE	39:31	39:31	22	PurpleContact
LEAF_NODE	39:44	39:44	21	*
LEAF_NODE	39:45	39:45	21	)
FIELD	39:46	39:46	21	node
LEAF_NODE	39:46	39:46	22	node
LEAF_NODE	39:50	39:50	20	,
ARGUMENT	39:52	39:52	20	NULL
FIELD	39:52	39:52	21	NULL
LEAF_NODE	39:52	39:52	22	NULL
LEAF_NODE	39:56	39:56	20	,
ARGUMENT	39:58	39:58	20	target
FIELD	39:58	39:58	21	target
LEAF_NODE	39:58	39:58	22	target
LEAF_NODE	39:64	39:64	20	)
LEAF_NODE	39:65	39:65	18	;
LEAF_NODE	40:4	40:4	16	}
LEAF_NODE	41:3	41:3	13	}
SELECTION	41:5	41:10	9	
KEYWORD	41:5	41:5	10	else
LEAF_NODE	41:5	41:5	11	else
STATEMENTS	41:10	41:10	10	
SELECTION	41:10	41:48	11	
KEYWORD	41:10	41:10	12	if
LEAF_NODE	41:10	41:10	13	if
LEAF_NODE	41:13	41:13	12	(
CONDITION	41:14	41:14	12	PURPLE_BLIST_NODE_IS_BUDDY ( node )
EXPR	41:14	41:14	13	PURPLE_BLIST_NODE_IS_BUDDY ( node )
FUNCTION_CALL	41:14	41:45	14	PURPLE_BLIST_NODE_IS_BUDDY ( node )
CALLEE	41:14	41:14	15	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	41:14	41:14	16	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	41:40	41:40	15	(
ARGUMENT	41:41	41:41	15	node
FIELD	41:41	41:41	16	node
LEAF_NODE	41:41	41:41	17	node
LEAF_NODE	41:45	41:45	15	)
LEAF_NODE	41:46	41:46	12	)
STATEMENTS	41:48	56:3	12	
LEAF_NODE	41:48	41:48	13	{
STATEMENTS	42:4	52:6	13	
EXPR_STATEMENT	42:4	42:53	14	update_buddy_display ( ( PurpleBuddy * ) node , ggblist ) ;
EXPR	42:4	42:4	15	update_buddy_display ( ( PurpleBuddy * ) node , ggblist )
FUNCTION_CALL	42:4	42:52	16	update_buddy_display ( ( PurpleBuddy * ) node , ggblist )
CALLEE	42:4	42:4	17	update_buddy_display
LEAF_NODE	42:4	42:4	18	update_buddy_display
LEAF_NODE	42:24	42:24	17	(
ARGUMENT	42:25	42:39	17	( PurpleBuddy * ) node
LEAF_NODE	42:25	42:25	18	(
TYPE_NAME	42:26	42:26	18	PurpleBuddy
LEAF_NODE	42:26	42:26	19	PurpleBuddy
LEAF_NODE	42:37	42:37	18	*
LEAF_NODE	42:38	42:38	18	)
FIELD	42:39	42:39	18	node
LEAF_NODE	42:39	42:39	19	node
LEAF_NODE	42:43	42:43	17	,
ARGUMENT	42:45	42:45	17	ggblist
FIELD	42:45	42:45	18	ggblist
LEAF_NODE	42:45	42:45	19	ggblist
LEAF_NODE	42:52	42:52	17	)
LEAF_NODE	42:53	42:53	15	;
SELECTION	43:4	43:41	14	
KEYWORD	43:4	43:4	15	if
LEAF_NODE	43:4	43:4	16	if
LEAF_NODE	43:7	43:7	15	(
CONDITION	43:8	43:8	15	PURPLE_BLIST_NODE ( tg ) == target
EXPR	43:8	43:33	16	PURPLE_BLIST_NODE ( tg ) == target
FUNCTION_CALL	43:8	43:28	17	PURPLE_BLIST_NODE ( tg )
CALLEE	43:8	43:8	18	PURPLE_BLIST_NODE
LEAF_NODE	43:8	43:8	19	PURPLE_BLIST_NODE
LEAF_NODE	43:25	43:25	18	(
ARGUMENT	43:26	43:26	18	tg
FIELD	43:26	43:26	19	tg
LEAF_NODE	43:26	43:26	20	tg
LEAF_NODE	43:28	43:28	18	)
EQ_OPERATOR	43:30	43:30	17	==
LEAF_NODE	43:30	43:30	18	==
FIELD	43:33	43:33	17	target
LEAF_NODE	43:33	43:33	18	target
LEAF_NODE	43:39	43:39	15	)
STATEMENTS	43:41	46:4	15	
LEAF_NODE	43:41	43:41	16	{
STATEMENTS	45:5	45:5	16	
EXPR_STATEMENT	45:5	45:63	17	purple_blist_add_buddy ( ( PurpleBuddy * ) node , NULL , tg , NULL ) ;
EXPR	45:5	45:5	18	purple_blist_add_buddy ( ( PurpleBuddy * ) node , NULL , tg , NULL )
FUNCTION_CALL	45:5	45:62	19	purple_blist_add_buddy ( ( PurpleBuddy * ) node , NULL , tg , NULL )
CALLEE	45:5	45:5	20	purple_blist_add_buddy
LEAF_NODE	45:5	45:5	21	purple_blist_add_buddy
LEAF_NODE	45:27	45:27	20	(
ARGUMENT	45:28	45:42	20	( PurpleBuddy * ) node
LEAF_NODE	45:28	45:28	21	(
TYPE_NAME	45:29	45:29	21	PurpleBuddy
LEAF_NODE	45:29	45:29	22	PurpleBuddy
LEAF_NODE	45:40	45:40	21	*
LEAF_NODE	45:41	45:41	21	)
FIELD	45:42	45:42	21	node
LEAF_NODE	45:42	45:42	22	node
LEAF_NODE	45:46	45:46	20	,
ARGUMENT	45:48	45:48	20	NULL
FIELD	45:48	45:48	21	NULL
LEAF_NODE	45:48	45:48	22	NULL
LEAF_NODE	45:52	45:52	20	,
ARGUMENT	45:54	45:54	20	tg
FIELD	45:54	45:54	21	tg
LEAF_NODE	45:54	45:54	22	tg
LEAF_NODE	45:56	45:56	20	,
ARGUMENT	45:58	45:58	20	NULL
FIELD	45:58	45:58	21	NULL
LEAF_NODE	45:58	45:58	22	NULL
LEAF_NODE	45:62	45:62	20	)
LEAF_NODE	45:63	45:63	18	;
LEAF_NODE	46:4	46:4	16	}
SELECTION	46:6	46:11	14	
KEYWORD	46:6	46:6	15	else
LEAF_NODE	46:6	46:6	16	else
STATEMENTS	46:11	46:11	15	
SELECTION	46:11	46:53	16	
KEYWORD	46:11	46:11	17	if
LEAF_NODE	46:11	46:11	18	if
LEAF_NODE	46:14	46:14	17	(
CONDITION	46:15	46:15	17	PURPLE_BLIST_NODE_IS_CONTACT ( target )
EXPR	46:15	46:15	18	PURPLE_BLIST_NODE_IS_CONTACT ( target )
FUNCTION_CALL	46:15	46:50	19	PURPLE_BLIST_NODE_IS_CONTACT ( target )
CALLEE	46:15	46:15	20	PURPLE_BLIST_NODE_IS_CONTACT
LEAF_NODE	46:15	46:15	21	PURPLE_BLIST_NODE_IS_CONTACT
LEAF_NODE	46:43	46:43	20	(
ARGUMENT	46:44	46:44	20	target
FIELD	46:44	46:44	21	target
LEAF_NODE	46:44	46:44	22	target
LEAF_NODE	46:50	46:50	20	)
LEAF_NODE	46:51	46:51	17	)
STATEMENTS	46:53	49:4	17	
LEAF_NODE	46:53	46:53	18	{
STATEMENTS	48:5	48:5	18	
EXPR_STATEMENT	48:5	48:63	19	purple_blist_add_buddy ( ( PurpleBuddy * ) node , tc , NULL , NULL ) ;
EXPR	48:5	48:5	20	purple_blist_add_buddy ( ( PurpleBuddy * ) node , tc , NULL , NULL )
FUNCTION_CALL	48:5	48:62	21	purple_blist_add_buddy ( ( PurpleBuddy * ) node , tc , NULL , NULL )
CALLEE	48:5	48:5	22	purple_blist_add_buddy
LEAF_NODE	48:5	48:5	23	purple_blist_add_buddy
LEAF_NODE	48:27	48:27	22	(
ARGUMENT	48:28	48:42	22	( PurpleBuddy * ) node
LEAF_NODE	48:28	48:28	23	(
TYPE_NAME	48:29	48:29	23	PurpleBuddy
LEAF_NODE	48:29	48:29	24	PurpleBuddy
LEAF_NODE	48:40	48:40	23	*
LEAF_NODE	48:41	48:41	23	)
FIELD	48:42	48:42	23	node
LEAF_NODE	48:42	48:42	24	node
LEAF_NODE	48:46	48:46	22	,
ARGUMENT	48:48	48:48	22	tc
FIELD	48:48	48:48	23	tc
LEAF_NODE	48:48	48:48	24	tc
LEAF_NODE	48:50	48:50	22	,
ARGUMENT	48:52	48:52	22	NULL
FIELD	48:52	48:52	23	NULL
LEAF_NODE	48:52	48:52	24	NULL
LEAF_NODE	48:56	48:56	22	,
ARGUMENT	48:58	48:58	22	NULL
FIELD	48:58	48:58	23	NULL
LEAF_NODE	48:58	48:58	24	NULL
LEAF_NODE	48:62	48:62	22	)
LEAF_NODE	48:63	48:63	20	;
LEAF_NODE	49:4	49:4	18	}
SELECTION	49:6	49:11	14	
KEYWORD	49:6	49:6	15	else
LEAF_NODE	49:6	49:6	16	else
STATEMENTS	49:11	49:11	15	
SELECTION	49:11	49:51	16	
KEYWORD	49:11	49:11	17	if
LEAF_NODE	49:11	49:11	18	if
LEAF_NODE	49:14	49:14	17	(
CONDITION	49:15	49:15	17	PURPLE_BLIST_NODE_IS_BUDDY ( target )
EXPR	49:15	49:15	18	PURPLE_BLIST_NODE_IS_BUDDY ( target )
FUNCTION_CALL	49:15	49:48	19	PURPLE_BLIST_NODE_IS_BUDDY ( target )
CALLEE	49:15	49:15	20	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	49:15	49:15	21	PURPLE_BLIST_NODE_IS_BUDDY
LEAF_NODE	49:41	49:41	20	(
ARGUMENT	49:42	49:42	20	target
FIELD	49:42	49:42	21	target
LEAF_NODE	49:42	49:42	22	target
LEAF_NODE	49:48	49:48	20	)
LEAF_NODE	49:49	49:49	17	)
STATEMENTS	49:51	52:4	17	
LEAF_NODE	49:51	49:51	18	{
STATEMENTS	51:5	51:5	18	
EXPR_STATEMENT	51:5	51:67	19	purple_blist_add_buddy ( ( PurpleBuddy * ) node , NULL , NULL , target ) ;
EXPR	51:5	51:5	20	purple_blist_add_buddy ( ( PurpleBuddy * ) node , NULL , NULL , target )
FUNCTION_CALL	51:5	51:66	21	purple_blist_add_buddy ( ( PurpleBuddy * ) node , NULL , NULL , target )
CALLEE	51:5	51:5	22	purple_blist_add_buddy
LEAF_NODE	51:5	51:5	23	purple_blist_add_buddy
LEAF_NODE	51:27	51:27	22	(
ARGUMENT	51:28	51:42	22	( PurpleBuddy * ) node
LEAF_NODE	51:28	51:28	23	(
TYPE_NAME	51:29	51:29	23	PurpleBuddy
LEAF_NODE	51:29	51:29	24	PurpleBuddy
LEAF_NODE	51:40	51:40	23	*
LEAF_NODE	51:41	51:41	23	)
FIELD	51:42	51:42	23	node
LEAF_NODE	51:42	51:42	24	node
LEAF_NODE	51:46	51:46	22	,
ARGUMENT	51:48	51:48	22	NULL
FIELD	51:48	51:48	23	NULL
LEAF_NODE	51:48	51:48	24	NULL
LEAF_NODE	51:52	51:52	22	,
ARGUMENT	51:54	51:54	22	NULL
FIELD	51:54	51:54	23	NULL
LEAF_NODE	51:54	51:54	24	NULL
LEAF_NODE	51:58	51:58	22	,
ARGUMENT	51:60	51:60	22	target
FIELD	51:60	51:60	23	target
LEAF_NODE	51:60	51:60	24	target
LEAF_NODE	51:66	51:66	22	)
LEAF_NODE	51:67	51:67	20	;
LEAF_NODE	52:4	52:4	18	}
SELECTION	52:6	52:11	14	
KEYWORD	52:6	52:6	15	else
LEAF_NODE	52:6	52:6	16	else
STATEMENTS	52:11	52:11	15	
SELECTION	52:11	52:50	16	
KEYWORD	52:11	52:11	17	if
LEAF_NODE	52:11	52:11	18	if
LEAF_NODE	52:14	52:14	17	(
CONDITION	52:15	52:15	17	PURPLE_BLIST_NODE_IS_CHAT ( target )
EXPR	52:15	52:15	18	PURPLE_BLIST_NODE_IS_CHAT ( target )
FUNCTION_CALL	52:15	52:47	19	PURPLE_BLIST_NODE_IS_CHAT ( target )
CALLEE	52:15	52:15	20	PURPLE_BLIST_NODE_IS_CHAT
LEAF_NODE	52:15	52:15	21	PURPLE_BLIST_NODE_IS_CHAT
LEAF_NODE	52:40	52:40	20	(
ARGUMENT	52:41	52:41	20	target
FIELD	52:41	52:41	21	target
LEAF_NODE	52:41	52:41	22	target
LEAF_NODE	52:47	52:47	20	)
LEAF_NODE	52:48	52:48	17	)
STATEMENTS	52:50	55:4	17	
LEAF_NODE	52:50	52:50	18	{
STATEMENTS	54:5	54:5	18	
EXPR_STATEMENT	54:5	54:63	19	purple_blist_add_buddy ( ( PurpleBuddy * ) node , NULL , tg , NULL ) ;
EXPR	54:5	54:5	20	purple_blist_add_buddy ( ( PurpleBuddy * ) node , NULL , tg , NULL )
FUNCTION_CALL	54:5	54:62	21	purple_blist_add_buddy ( ( PurpleBuddy * ) node , NULL , tg , NULL )
CALLEE	54:5	54:5	22	purple_blist_add_buddy
LEAF_NODE	54:5	54:5	23	purple_blist_add_buddy
LEAF_NODE	54:27	54:27	22	(
ARGUMENT	54:28	54:42	22	( PurpleBuddy * ) node
LEAF_NODE	54:28	54:28	23	(
TYPE_NAME	54:29	54:29	23	PurpleBuddy
LEAF_NODE	54:29	54:29	24	PurpleBuddy
LEAF_NODE	54:40	54:40	23	*
LEAF_NODE	54:41	54:41	23	)
FIELD	54:42	54:42	23	node
LEAF_NODE	54:42	54:42	24	node
LEAF_NODE	54:46	54:46	22	,
ARGUMENT	54:48	54:48	22	NULL
FIELD	54:48	54:48	23	NULL
LEAF_NODE	54:48	54:48	24	NULL
LEAF_NODE	54:52	54:52	22	,
ARGUMENT	54:54	54:54	22	tg
FIELD	54:54	54:54	23	tg
LEAF_NODE	54:54	54:54	24	tg
LEAF_NODE	54:56	54:56	22	,
ARGUMENT	54:58	54:58	22	NULL
FIELD	54:58	54:58	23	NULL
LEAF_NODE	54:58	54:58	24	NULL
LEAF_NODE	54:62	54:62	22	)
LEAF_NODE	54:63	54:63	20	;
LEAF_NODE	55:4	55:4	18	}
LEAF_NODE	56:3	56:3	13	}
SELECTION	56:5	56:10	9	
KEYWORD	56:5	56:5	10	else
LEAF_NODE	56:5	56:5	11	else
STATEMENTS	56:10	56:10	10	
SELECTION	56:10	56:47	11	
KEYWORD	56:10	56:10	12	if
LEAF_NODE	56:10	56:10	13	if
LEAF_NODE	56:13	56:13	12	(
CONDITION	56:14	56:14	12	PURPLE_BLIST_NODE_IS_CHAT ( node )
EXPR	56:14	56:14	13	PURPLE_BLIST_NODE_IS_CHAT ( node )
FUNCTION_CALL	56:14	56:44	14	PURPLE_BLIST_NODE_IS_CHAT ( node )
CALLEE	56:14	56:14	15	PURPLE_BLIST_NODE_IS_CHAT
LEAF_NODE	56:14	56:14	16	PURPLE_BLIST_NODE_IS_CHAT
LEAF_NODE	56:39	56:39	15	(
ARGUMENT	56:40	56:40	15	node
FIELD	56:40	56:40	16	node
LEAF_NODE	56:40	56:40	17	node
LEAF_NODE	56:44	56:44	15	)
LEAF_NODE	56:45	56:45	12	)
STATEMENTS	56:47	62:3	12	
LEAF_NODE	56:47	56:47	13	{
STATEMENTS	57:4	60:4	13	
EXPR_STATEMENT	57:4	57:38	14	update_node_display ( node , ggblist ) ;
EXPR	57:4	57:4	15	update_node_display ( node , ggblist )
FUNCTION_CALL	57:4	57:37	16	update_node_display ( node , ggblist )
CALLEE	57:4	57:4	17	update_node_display
LEAF_NODE	57:4	57:4	18	update_node_display
LEAF_NODE	57:23	57:23	17	(
ARGUMENT	57:24	57:24	17	node
FIELD	57:24	57:24	18	node
LEAF_NODE	57:24	57:24	19	node
LEAF_NODE	57:28	57:28	17	,
ARGUMENT	57:30	57:30	17	ggblist
FIELD	57:30	57:30	18	ggblist
LEAF_NODE	57:30	57:30	19	ggblist
LEAF_NODE	57:37	57:37	17	)
LEAF_NODE	57:38	57:38	15	;
SELECTION	58:4	59:5	14	
KEYWORD	58:4	58:4	15	if
LEAF_NODE	58:4	58:4	16	if
LEAF_NODE	58:7	58:7	15	(
CONDITION	58:8	58:8	15	PURPLE_BLIST_NODE ( tg ) == target
EXPR	58:8	58:33	16	PURPLE_BLIST_NODE ( tg ) == target
FUNCTION_CALL	58:8	58:28	17	PURPLE_BLIST_NODE ( tg )
CALLEE	58:8	58:8	18	PURPLE_BLIST_NODE
LEAF_NODE	58:8	58:8	19	PURPLE_BLIST_NODE
LEAF_NODE	58:25	58:25	18	(
ARGUMENT	58:26	58:26	18	tg
FIELD	58:26	58:26	19	tg
LEAF_NODE	58:26	58:26	20	tg
LEAF_NODE	58:28	58:28	18	)
EQ_OPERATOR	58:30	58:30	17	==
LEAF_NODE	58:30	58:30	18	==
FIELD	58:33	58:33	17	target
LEAF_NODE	58:33	58:33	18	target
LEAF_NODE	58:39	58:39	15	)
STATEMENTS	59:5	59:5	15	
EXPR_STATEMENT	59:5	59:55	16	purple_blist_add_chat ( ( PurpleChat * ) node , tg , NULL ) ;
EXPR	59:5	59:5	17	purple_blist_add_chat ( ( PurpleChat * ) node , tg , NULL )
FUNCTION_CALL	59:5	59:54	18	purple_blist_add_chat ( ( PurpleChat * ) node , tg , NULL )
CALLEE	59:5	59:5	19	purple_blist_add_chat
LEAF_NODE	59:5	59:5	20	purple_blist_add_chat
LEAF_NODE	59:26	59:26	19	(
ARGUMENT	59:27	59:40	19	( PurpleChat * ) node
LEAF_NODE	59:27	59:27	20	(
TYPE_NAME	59:28	59:28	20	PurpleChat
LEAF_NODE	59:28	59:28	21	PurpleChat
LEAF_NODE	59:38	59:38	20	*
LEAF_NODE	59:39	59:39	20	)
FIELD	59:40	59:40	20	node
LEAF_NODE	59:40	59:40	21	node
LEAF_NODE	59:44	59:44	19	,
ARGUMENT	59:46	59:46	19	tg
FIELD	59:46	59:46	20	tg
LEAF_NODE	59:46	59:46	21	tg
LEAF_NODE	59:48	59:48	19	,
ARGUMENT	59:50	59:50	19	NULL
FIELD	59:50	59:50	20	NULL
LEAF_NODE	59:50	59:50	21	NULL
LEAF_NODE	59:54	59:54	19	)
LEAF_NODE	59:55	59:55	17	;
SELECTION	60:4	61:5	14	
KEYWORD	60:4	60:4	15	else
LEAF_NODE	60:4	60:4	16	else
STATEMENTS	61:5	61:5	15	
EXPR_STATEMENT	61:5	61:59	16	purple_blist_add_chat ( ( PurpleChat * ) node , NULL , target ) ;
EXPR	61:5	61:5	17	purple_blist_add_chat ( ( PurpleChat * ) node , NULL , target )
FUNCTION_CALL	61:5	61:58	18	purple_blist_add_chat ( ( PurpleChat * ) node , NULL , target )
CALLEE	61:5	61:5	19	purple_blist_add_chat
LEAF_NODE	61:5	61:5	20	purple_blist_add_chat
LEAF_NODE	61:26	61:26	19	(
ARGUMENT	61:27	61:40	19	( PurpleChat * ) node
LEAF_NODE	61:27	61:27	20	(
TYPE_NAME	61:28	61:28	20	PurpleChat
LEAF_NODE	61:28	61:28	21	PurpleChat
LEAF_NODE	61:38	61:38	20	*
LEAF_NODE	61:39	61:39	20	)
FIELD	61:40	61:40	20	node
LEAF_NODE	61:40	61:40	21	node
LEAF_NODE	61:44	61:44	19	,
ARGUMENT	61:46	61:46	19	NULL
FIELD	61:46	61:46	20	NULL
LEAF_NODE	61:46	61:46	21	NULL
LEAF_NODE	61:50	61:50	19	,
ARGUMENT	61:52	61:52	19	target
FIELD	61:52	61:52	20	target
LEAF_NODE	61:52	61:52	21	target
LEAF_NODE	61:58	61:58	19	)
LEAF_NODE	61:59	61:59	17	;
LEAF_NODE	62:3	62:3	13	}
LEAF_NODE	63:2	63:2	8	}
LEAF_NODE	64:1	64:1	5	}
LEAF_NODE	65:0	65:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:12	2	PurpleTheme *
TYPE_NAME	1:0	1:0	3	PurpleTheme
LEAF_NODE	1:0	1:0	4	PurpleTheme
LEAF_NODE	1:12	1:12	3	*
FUNCTION_NAME	2:0	2:0	2	purple_theme_manager_load_theme
LEAF_NODE	2:0	2:0	3	purple_theme_manager_load_theme
PARAMETER_LIST	2:31	2:73	2	( const gchar * theme_dir , const gchar * type )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:45	3	const gchar * theme_dir
TYPE	2:32	2:44	4	const gchar *
TYPE_NAME	2:32	2:38	5	const gchar
LEAF_NODE	2:32	2:32	6	const
LEAF_NODE	2:38	2:38	6	gchar
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	theme_dir
LEAF_NODE	2:45	2:45	5	theme_dir
LEAF_NODE	2:54	2:54	3	,
PARAMETER_DECL	2:56	2:69	3	const gchar * type
TYPE	2:56	2:68	4	const gchar *
TYPE_NAME	2:56	2:62	5	const gchar
LEAF_NODE	2:56	2:56	6	const
LEAF_NODE	2:62	2:62	6	gchar
POINTER	2:68	2:68	5	*
LEAF_NODE	2:68	2:68	6	*
NAME	2:69	2:69	4	type
LEAF_NODE	2:69	2:69	5	type
LEAF_NODE	2:73	2:73	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SIMPLE_DECL	4:1	4:26	3	PurpleThemeLoader * loader ;
VAR_DECL	4:1	4:20	4	PurpleThemeLoader * loader
TYPE	4:1	4:19	5	PurpleThemeLoader *
TYPE_NAME	4:1	4:1	6	PurpleThemeLoader
LEAF_NODE	4:1	4:1	7	PurpleThemeLoader
POINTER	4:19	4:19	6	*
LEAF_NODE	4:19	4:19	7	*
NAME	4:20	4:20	5	loader
LEAF_NODE	4:20	4:20	6	loader
LEAF_NODE	4:26	4:26	4	;
EXPR_STATEMENT	5:1	5:62	3	g_return_val_if_fail ( theme_dir != NULL && type != NULL , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( theme_dir != NULL && type != NULL , NULL )
FUNCTION_CALL	5:1	5:61	5	g_return_val_if_fail ( theme_dir != NULL && type != NULL , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:22	6	theme_dir != NULL && type != NULL
AND	5:22	5:43	7	theme_dir != NULL && type != NULL
EXPR	5:22	5:35	8	theme_dir != NULL
FIELD	5:22	5:22	9	theme_dir
LEAF_NODE	5:22	5:22	10	theme_dir
EQ_OPERATOR	5:32	5:32	9	!=
LEAF_NODE	5:32	5:32	10	!=
FIELD	5:35	5:35	9	NULL
LEAF_NODE	5:35	5:35	10	NULL
LEAF_NODE	5:40	5:40	8	&&
EXPR	5:43	5:51	8	type != NULL
FIELD	5:43	5:43	9	type
LEAF_NODE	5:43	5:43	10	type
EQ_OPERATOR	5:48	5:48	9	!=
LEAF_NODE	5:48	5:48	10	!=
FIELD	5:51	5:51	9	NULL
LEAF_NODE	5:51	5:51	10	NULL
LEAF_NODE	5:55	5:55	6	,
ARGUMENT	5:57	5:57	6	NULL
FIELD	5:57	5:57	7	NULL
LEAF_NODE	5:57	5:57	8	NULL
LEAF_NODE	5:61	5:61	6	)
LEAF_NODE	5:62	5:62	4	;
EXPR_STATEMENT	6:1	6:48	3	loader = g_hash_table_lookup ( theme_table , type ) ;
EXPR	6:1	6:1	4	loader = g_hash_table_lookup ( theme_table , type )
ASSIGN	6:1	6:10	5	loader = g_hash_table_lookup ( theme_table , type )
LVAL	6:1	6:1	6	loader
FIELD	6:1	6:1	7	loader
LEAF_NODE	6:1	6:1	8	loader
ASSIGN_OP	6:8	6:8	6	=
LEAF_NODE	6:8	6:8	7	=
RVAL	6:10	6:10	6	g_hash_table_lookup ( theme_table , type )
FUNCTION_CALL	6:10	6:47	7	g_hash_table_lookup ( theme_table , type )
CALLEE	6:10	6:10	8	g_hash_table_lookup
LEAF_NODE	6:10	6:10	9	g_hash_table_lookup
LEAF_NODE	6:29	6:29	8	(
ARGUMENT	6:30	6:30	8	theme_table
FIELD	6:30	6:30	9	theme_table
LEAF_NODE	6:30	6:30	10	theme_table
LEAF_NODE	6:41	6:41	8	,
ARGUMENT	6:43	6:43	8	type
FIELD	6:43	6:43	9	type
LEAF_NODE	6:43	6:43	10	type
LEAF_NODE	6:47	6:47	8	)
LEAF_NODE	6:48	6:48	4	;
EXPR_STATEMENT	7:1	7:59	3	g_return_val_if_fail ( PURPLE_IS_THEME_LOADER ( loader ) , NULL ) ;
EXPR	7:1	7:1	4	g_return_val_if_fail ( PURPLE_IS_THEME_LOADER ( loader ) , NULL )
FUNCTION_CALL	7:1	7:58	5	g_return_val_if_fail ( PURPLE_IS_THEME_LOADER ( loader ) , NULL )
CALLEE	7:1	7:1	6	g_return_val_if_fail
LEAF_NODE	7:1	7:1	7	g_return_val_if_fail
LEAF_NODE	7:21	7:21	6	(
ARGUMENT	7:22	7:22	6	PURPLE_IS_THEME_LOADER ( loader )
FUNCTION_CALL	7:22	7:51	7	PURPLE_IS_THEME_LOADER ( loader )
CALLEE	7:22	7:22	8	PURPLE_IS_THEME_LOADER
LEAF_NODE	7:22	7:22	9	PURPLE_IS_THEME_LOADER
LEAF_NODE	7:44	7:44	8	(
ARGUMENT	7:45	7:45	8	loader
FIELD	7:45	7:45	9	loader
LEAF_NODE	7:45	7:45	10	loader
LEAF_NODE	7:51	7:51	8	)
LEAF_NODE	7:52	7:52	6	,
ARGUMENT	7:54	7:54	6	NULL
FIELD	7:54	7:54	7	NULL
LEAF_NODE	7:54	7:54	8	NULL
LEAF_NODE	7:58	7:58	6	)
LEAF_NODE	7:59	7:59	4	;
JUMP_STATEMENT	8:1	8:52	3	return purple_theme_loader_build ( loader , theme_dir ) ;
KEYWORD	8:1	8:1	4	return
LEAF_NODE	8:1	8:1	5	return
DESTINATION	8:8	8:8	4	purple_theme_loader_build ( loader , theme_dir )
EXPR	8:8	8:8	5	purple_theme_loader_build ( loader , theme_dir )
FUNCTION_CALL	8:8	8:51	6	purple_theme_loader_build ( loader , theme_dir )
CALLEE	8:8	8:8	7	purple_theme_loader_build
LEAF_NODE	8:8	8:8	8	purple_theme_loader_build
LEAF_NODE	8:33	8:33	7	(
ARGUMENT	8:34	8:34	7	loader
FIELD	8:34	8:34	8	loader
LEAF_NODE	8:34	8:34	9	loader
LEAF_NODE	8:40	8:40	7	,
ARGUMENT	8:42	8:42	7	theme_dir
FIELD	8:42	8:42	8	theme_dir
LEAF_NODE	8:42	8:42	9	theme_dir
LEAF_NODE	8:51	8:51	7	)
LEAF_NODE	8:52	8:52	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	7:0	1	
RETURN_TYPE	1:0	1:8	2	xmlnode *
TYPE_NAME	1:0	1:0	3	xmlnode
LEAF_NODE	1:0	1:0	4	xmlnode
LEAF_NODE	1:8	1:8	3	*
FUNCTION_NAME	2:0	2:0	2	jingle_transport_to_xml_internal
LEAF_NODE	2:0	2:0	3	jingle_transport_to_xml_internal
PARAMETER_LIST	2:32	2:102	2	( JingleTransport * transport , xmlnode * content , JingleActionType action )
LEAF_NODE	2:32	2:32	3	(
PARAMETER_DECL	2:33	2:50	3	JingleTransport * transport
TYPE	2:33	2:49	4	JingleTransport *
TYPE_NAME	2:33	2:33	5	JingleTransport
LEAF_NODE	2:33	2:33	6	JingleTransport
POINTER	2:49	2:49	5	*
LEAF_NODE	2:49	2:49	6	*
NAME	2:50	2:50	4	transport
LEAF_NODE	2:50	2:50	5	transport
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	2:61	2:70	3	xmlnode * content
TYPE	2:61	2:69	4	xmlnode *
TYPE_NAME	2:61	2:61	5	xmlnode
LEAF_NODE	2:61	2:61	6	xmlnode
POINTER	2:69	2:69	5	*
LEAF_NODE	2:69	2:69	6	*
NAME	2:70	2:70	4	content
LEAF_NODE	2:70	2:70	5	content
LEAF_NODE	2:77	2:77	3	,
PARAMETER_DECL	2:79	2:96	3	JingleActionType action
TYPE	2:79	2:79	4	JingleActionType
TYPE_NAME	2:79	2:79	5	JingleActionType
LEAF_NODE	2:79	2:79	6	JingleActionType
NAME	2:96	2:96	4	action
LEAF_NODE	2:96	2:96	5	action
LEAF_NODE	2:102	2:102	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	6:1	2	
SIMPLE_DECL	4:1	4:56	3	xmlnode * node ; node = xmlnode_new_child ( content , "transport" ) ;
VAR_DECL	4:1	4:10	4	xmlnode * node ; node = xmlnode_new_child ( content , "transport" )
TYPE	4:1	4:9	5	xmlnode *
TYPE_NAME	4:1	4:1	6	xmlnode
LEAF_NODE	4:1	4:1	7	xmlnode
POINTER	4:9	4:9	6	*
LEAF_NODE	4:9	4:9	7	*
NAME	4:10	4:10	5	node
LEAF_NODE	4:10	4:10	6	node
LEAF_NODE	0:0	0:0	5	;
INIT	4:10	4:10	5	node = xmlnode_new_child ( content , "transport" )
ASSIGN	4:10	4:17	6	node = xmlnode_new_child ( content , "transport" )
LVAL	4:10	4:10	7	node
NAME	4:10	4:10	8	node
LEAF_NODE	4:10	4:10	9	node
ASSIGN_OP	4:15	4:15	7	=
LEAF_NODE	4:15	4:15	8	=
RVAL	4:17	4:17	7	xmlnode_new_child ( content , "transport" )
FUNCTION_CALL	4:17	4:55	8	xmlnode_new_child ( content , "transport" )
CALLEE	4:17	4:17	9	xmlnode_new_child
LEAF_NODE	4:17	4:17	10	xmlnode_new_child
LEAF_NODE	4:34	4:34	9	(
ARGUMENT	4:35	4:35	9	content
FIELD	4:35	4:35	10	content
LEAF_NODE	4:35	4:35	11	content
LEAF_NODE	4:42	4:42	9	,
ARGUMENT	4:44	4:44	9	"transport"
FIELD	4:44	4:44	10	"transport"
LEAF_NODE	4:44	4:44	11	"transport"
LEAF_NODE	4:55	4:55	9	)
LEAF_NODE	4:56	4:56	4	;
EXPR_STATEMENT	5:1	5:76	3	xmlnode_set_namespace ( node , jingle_transport_get_transport_type ( transport ) ) ;
EXPR	5:1	5:1	4	xmlnode_set_namespace ( node , jingle_transport_get_transport_type ( transport ) )
FUNCTION_CALL	5:1	5:75	5	xmlnode_set_namespace ( node , jingle_transport_get_transport_type ( transport ) )
CALLEE	5:1	5:1	6	xmlnode_set_namespace
LEAF_NODE	5:1	5:1	7	xmlnode_set_namespace
LEAF_NODE	5:22	5:22	6	(
ARGUMENT	5:23	5:23	6	node
FIELD	5:23	5:23	7	node
LEAF_NODE	5:23	5:23	8	node
LEAF_NODE	5:27	5:27	6	,
ARGUMENT	5:29	5:29	6	jingle_transport_get_transport_type ( transport )
FUNCTION_CALL	5:29	5:74	7	jingle_transport_get_transport_type ( transport )
CALLEE	5:29	5:29	8	jingle_transport_get_transport_type
LEAF_NODE	5:29	5:29	9	jingle_transport_get_transport_type
LEAF_NODE	5:64	5:64	8	(
ARGUMENT	5:65	5:65	8	transport
FIELD	5:65	5:65	9	transport
LEAF_NODE	5:65	5:65	10	transport
LEAF_NODE	5:74	5:74	8	)
LEAF_NODE	5:75	5:75	6	)
LEAF_NODE	5:76	5:76	4	;
JUMP_STATEMENT	6:1	6:12	3	return node ;
KEYWORD	6:1	6:1	4	return
LEAF_NODE	6:1	6:1	5	return
DESTINATION	6:8	6:8	4	node
EXPR	6:8	6:8	5	node
FIELD	6:8	6:8	6	node
LEAF_NODE	6:8	6:8	7	node
LEAF_NODE	6:12	6:12	4	;
LEAF_NODE	7:0	7:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	21:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	use_icon_theme
LEAF_NODE	2:0	2:0	3	use_icon_theme
PARAMETER_LIST	2:14	2:46	2	( GtkWidget * w , GtkWidget * window )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:26	3	GtkWidget * w
TYPE	2:15	2:25	4	GtkWidget *
TYPE_NAME	2:15	2:15	5	GtkWidget
LEAF_NODE	2:15	2:15	6	GtkWidget
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	w
LEAF_NODE	2:26	2:26	5	w
LEAF_NODE	2:27	2:27	3	,
PARAMETER_DECL	2:29	2:40	3	GtkWidget * window
TYPE	2:29	2:39	4	GtkWidget *
TYPE_NAME	2:29	2:29	5	GtkWidget
LEAF_NODE	2:29	2:29	6	GtkWidget
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	window
LEAF_NODE	2:40	2:40	5	window
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	16:1	20:1	2	
SIMPLE_DECL	16:1	16:57	3	PidginStatusIconTheme * theme ; theme = create_icon_theme ( window ) ;
VAR_DECL	16:1	16:24	4	PidginStatusIconTheme * theme ; theme = create_icon_theme ( window )
TYPE	16:1	16:23	5	PidginStatusIconTheme *
TYPE_NAME	16:1	16:1	6	PidginStatusIconTheme
LEAF_NODE	16:1	16:1	7	PidginStatusIconTheme
POINTER	16:23	16:23	6	*
LEAF_NODE	16:23	16:23	7	*
NAME	16:24	16:24	5	theme
LEAF_NODE	16:24	16:24	6	theme
LEAF_NODE	0:0	0:0	5	;
INIT	16:24	16:24	5	theme = create_icon_theme ( window )
ASSIGN	16:24	16:32	6	theme = create_icon_theme ( window )
LVAL	16:24	16:24	7	theme
NAME	16:24	16:24	8	theme
LEAF_NODE	16:24	16:24	9	theme
ASSIGN_OP	16:30	16:30	7	=
LEAF_NODE	16:30	16:30	8	=
RVAL	16:32	16:32	7	create_icon_theme ( window )
FUNCTION_CALL	16:32	16:56	8	create_icon_theme ( window )
CALLEE	16:32	16:32	9	create_icon_theme
LEAF_NODE	16:32	16:32	10	create_icon_theme
LEAF_NODE	16:49	16:49	9	(
ARGUMENT	16:50	16:50	9	window
FIELD	16:50	16:50	10	window
LEAF_NODE	16:50	16:50	11	window
LEAF_NODE	16:56	16:56	9	)
LEAF_NODE	16:57	16:57	4	;
EXPR_STATEMENT	17:1	17:69	3	pidgin_stock_load_status_icon_theme ( PIDGIN_STATUS_ICON_THEME ( theme ) ) ;
EXPR	17:1	17:1	4	pidgin_stock_load_status_icon_theme ( PIDGIN_STATUS_ICON_THEME ( theme ) )
FUNCTION_CALL	17:1	17:68	5	pidgin_stock_load_status_icon_theme ( PIDGIN_STATUS_ICON_THEME ( theme ) )
CALLEE	17:1	17:1	6	pidgin_stock_load_status_icon_theme
LEAF_NODE	17:1	17:1	7	pidgin_stock_load_status_icon_theme
LEAF_NODE	17:36	17:36	6	(
ARGUMENT	17:37	17:37	6	PIDGIN_STATUS_ICON_THEME ( theme )
FUNCTION_CALL	17:37	17:67	7	PIDGIN_STATUS_ICON_THEME ( theme )
CALLEE	17:37	17:37	8	PIDGIN_STATUS_ICON_THEME
LEAF_NODE	17:37	17:37	9	PIDGIN_STATUS_ICON_THEME
LEAF_NODE	17:61	17:61	8	(
ARGUMENT	17:62	17:62	8	theme
FIELD	17:62	17:62	9	theme
LEAF_NODE	17:62	17:62	10	theme
LEAF_NODE	17:67	17:67	8	)
LEAF_NODE	17:68	17:68	6	)
LEAF_NODE	17:69	17:69	4	;
EXPR_STATEMENT	18:1	18:66	3	pidgin_stock_load_stock_icon_theme ( ( PidginStockIconTheme * ) theme ) ;
EXPR	18:1	18:1	4	pidgin_stock_load_stock_icon_theme ( ( PidginStockIconTheme * ) theme )
FUNCTION_CALL	18:1	18:65	5	pidgin_stock_load_stock_icon_theme ( ( PidginStockIconTheme * ) theme )
CALLEE	18:1	18:1	6	pidgin_stock_load_stock_icon_theme
LEAF_NODE	18:1	18:1	7	pidgin_stock_load_stock_icon_theme
LEAF_NODE	18:35	18:35	6	(
ARGUMENT	18:36	18:60	6	( PidginStockIconTheme * ) theme
LEAF_NODE	18:36	18:36	7	(
TYPE_NAME	18:37	18:37	7	PidginStockIconTheme
LEAF_NODE	18:37	18:37	8	PidginStockIconTheme
LEAF_NODE	18:58	18:58	7	*
LEAF_NODE	18:59	18:59	7	)
FIELD	18:60	18:60	7	theme
LEAF_NODE	18:60	18:60	8	theme
LEAF_NODE	18:65	18:65	6	)
LEAF_NODE	18:66	18:66	4	;
EXPR_STATEMENT	19:1	19:41	3	pidgin_blist_refresh ( purple_get_blist ( ) ) ;
EXPR	19:1	19:1	4	pidgin_blist_refresh ( purple_get_blist ( ) )
FUNCTION_CALL	19:1	19:40	5	pidgin_blist_refresh ( purple_get_blist ( ) )
CALLEE	19:1	19:1	6	pidgin_blist_refresh
LEAF_NODE	19:1	19:1	7	pidgin_blist_refresh
LEAF_NODE	19:21	19:21	6	(
ARGUMENT	19:22	19:22	6	purple_get_blist ( )
FUNCTION_CALL	19:22	19:39	7	purple_get_blist ( )
CALLEE	19:22	19:22	8	purple_get_blist
LEAF_NODE	19:22	19:22	9	purple_get_blist
LEAF_NODE	19:38	19:38	8	(
LEAF_NODE	19:39	19:39	8	)
LEAF_NODE	19:40	19:40	6	)
LEAF_NODE	19:41	19:41	4	;
EXPR_STATEMENT	20:1	20:22	3	g_object_unref ( theme ) ;
EXPR	20:1	20:1	4	g_object_unref ( theme )
FUNCTION_CALL	20:1	20:21	5	g_object_unref ( theme )
CALLEE	20:1	20:1	6	g_object_unref
LEAF_NODE	20:1	20:1	7	g_object_unref
LEAF_NODE	20:15	20:15	6	(
ARGUMENT	20:16	20:16	6	theme
FIELD	20:16	20:16	7	theme
LEAF_NODE	20:16	20:16	8	theme
LEAF_NODE	20:21	20:21	6	)
LEAF_NODE	20:22	20:22	4	;
LEAF_NODE	21:0	21:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	18:0	1	
RETURN_TYPE	1:0	1:17	2	static GntWidget *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	GntWidget
LEAF_NODE	1:7	1:7	4	GntWidget
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	setup_request_window
LEAF_NODE	2:0	2:0	3	setup_request_window
PARAMETER_LIST	2:20	3:47	2	( const char * title , const char * primary , const char * secondary , PurpleRequestType type )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:33	3	const char * title
TYPE	2:21	2:32	4	const char *
TYPE_NAME	2:21	2:27	5	const char
LEAF_NODE	2:21	2:21	6	const
LEAF_NODE	2:27	2:27	6	char
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	title
LEAF_NODE	2:33	2:33	5	title
LEAF_NODE	2:38	2:38	3	,
PARAMETER_DECL	2:40	2:52	3	const char * primary
TYPE	2:40	2:51	4	const char *
TYPE_NAME	2:40	2:46	5	const char
LEAF_NODE	2:40	2:40	6	const
LEAF_NODE	2:46	2:46	6	char
POINTER	2:51	2:51	5	*
LEAF_NODE	2:51	2:51	6	*
NAME	2:52	2:52	4	primary
LEAF_NODE	2:52	2:52	5	primary
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	3:2	3:14	3	const char * secondary
TYPE	3:2	3:13	4	const char *
TYPE_NAME	3:2	3:8	5	const char
LEAF_NODE	3:2	3:2	6	const
LEAF_NODE	3:8	3:8	6	char
POINTER	3:13	3:13	5	*
LEAF_NODE	3:13	3:13	6	*
NAME	3:14	3:14	4	secondary
LEAF_NODE	3:14	3:14	5	secondary
LEAF_NODE	3:23	3:23	3	,
PARAMETER_DECL	3:25	3:43	3	PurpleRequestType type
TYPE	3:25	3:25	4	PurpleRequestType
TYPE_NAME	3:25	3:25	5	PurpleRequestType
LEAF_NODE	3:25	3:25	6	PurpleRequestType
NAME	3:43	3:43	4	type
LEAF_NODE	3:43	3:43	5	type
LEAF_NODE	3:47	3:47	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	17:1	2	
SIMPLE_DECL	5:1	5:18	3	GntWidget * window ;
VAR_DECL	5:1	5:12	4	GntWidget * window
TYPE	5:1	5:11	5	GntWidget *
TYPE_NAME	5:1	5:1	6	GntWidget
LEAF_NODE	5:1	5:1	7	GntWidget
POINTER	5:11	5:11	6	*
LEAF_NODE	5:11	5:11	7	*
NAME	5:12	5:12	5	window
LEAF_NODE	5:12	5:12	6	window
LEAF_NODE	5:18	5:18	4	;
EXPR_STATEMENT	6:1	6:29	3	window = gnt_vbox_new ( FALSE ) ;
EXPR	6:1	6:1	4	window = gnt_vbox_new ( FALSE )
ASSIGN	6:1	6:10	5	window = gnt_vbox_new ( FALSE )
LVAL	6:1	6:1	6	window
FIELD	6:1	6:1	7	window
LEAF_NODE	6:1	6:1	8	window
ASSIGN_OP	6:8	6:8	6	=
LEAF_NODE	6:8	6:8	7	=
RVAL	6:10	6:10	6	gnt_vbox_new ( FALSE )
FUNCTION_CALL	6:10	6:28	7	gnt_vbox_new ( FALSE )
CALLEE	6:10	6:10	8	gnt_vbox_new
LEAF_NODE	6:10	6:10	9	gnt_vbox_new
LEAF_NODE	6:22	6:22	8	(
ARGUMENT	6:23	6:23	8	FALSE
FIELD	6:23	6:23	9	FALSE
LEAF_NODE	6:23	6:23	10	FALSE
LEAF_NODE	6:28	6:28	8	)
LEAF_NODE	6:29	6:29	4	;
EXPR_STATEMENT	7:1	7:44	3	gnt_box_set_toplevel ( GNT_BOX ( window ) , TRUE ) ;
EXPR	7:1	7:1	4	gnt_box_set_toplevel ( GNT_BOX ( window ) , TRUE )
FUNCTION_CALL	7:1	7:43	5	gnt_box_set_toplevel ( GNT_BOX ( window ) , TRUE )
CALLEE	7:1	7:1	6	gnt_box_set_toplevel
LEAF_NODE	7:1	7:1	7	gnt_box_set_toplevel
LEAF_NODE	7:21	7:21	6	(
ARGUMENT	7:22	7:22	6	GNT_BOX ( window )
FUNCTION_CALL	7:22	7:36	7	GNT_BOX ( window )
CALLEE	7:22	7:22	8	GNT_BOX
LEAF_NODE	7:22	7:22	9	GNT_BOX
LEAF_NODE	7:29	7:29	8	(
ARGUMENT	7:30	7:30	8	window
FIELD	7:30	7:30	9	window
LEAF_NODE	7:30	7:30	10	window
LEAF_NODE	7:36	7:36	8	)
LEAF_NODE	7:37	7:37	6	,
ARGUMENT	7:39	7:39	6	TRUE
FIELD	7:39	7:39	7	TRUE
LEAF_NODE	7:39	7:39	8	TRUE
LEAF_NODE	7:43	7:43	6	)
LEAF_NODE	7:44	7:44	4	;
EXPR_STATEMENT	8:1	8:42	3	gnt_box_set_title ( GNT_BOX ( window ) , title ) ;
EXPR	8:1	8:1	4	gnt_box_set_title ( GNT_BOX ( window ) , title )
FUNCTION_CALL	8:1	8:41	5	gnt_box_set_title ( GNT_BOX ( window ) , title )
CALLEE	8:1	8:1	6	gnt_box_set_title
LEAF_NODE	8:1	8:1	7	gnt_box_set_title
LEAF_NODE	8:18	8:18	6	(
ARGUMENT	8:19	8:19	6	GNT_BOX ( window )
FUNCTION_CALL	8:19	8:33	7	GNT_BOX ( window )
CALLEE	8:19	8:19	8	GNT_BOX
LEAF_NODE	8:19	8:19	9	GNT_BOX
LEAF_NODE	8:26	8:26	8	(
ARGUMENT	8:27	8:27	8	window
FIELD	8:27	8:27	9	window
LEAF_NODE	8:27	8:27	10	window
LEAF_NODE	8:33	8:33	8	)
LEAF_NODE	8:34	8:34	6	,
ARGUMENT	8:36	8:36	6	title
FIELD	8:36	8:36	7	title
LEAF_NODE	8:36	8:36	8	title
LEAF_NODE	8:41	8:41	6	)
LEAF_NODE	8:42	8:42	4	;
EXPR_STATEMENT	9:1	9:54	3	gnt_box_set_alignment ( GNT_BOX ( window ) , GNT_ALIGN_MID ) ;
EXPR	9:1	9:1	4	gnt_box_set_alignment ( GNT_BOX ( window ) , GNT_ALIGN_MID )
FUNCTION_CALL	9:1	9:53	5	gnt_box_set_alignment ( GNT_BOX ( window ) , GNT_ALIGN_MID )
CALLEE	9:1	9:1	6	gnt_box_set_alignment
LEAF_NODE	9:1	9:1	7	gnt_box_set_alignment
LEAF_NODE	9:22	9:22	6	(
ARGUMENT	9:23	9:23	6	GNT_BOX ( window )
FUNCTION_CALL	9:23	9:37	7	GNT_BOX ( window )
CALLEE	9:23	9:23	8	GNT_BOX
LEAF_NODE	9:23	9:23	9	GNT_BOX
LEAF_NODE	9:30	9:30	8	(
ARGUMENT	9:31	9:31	8	window
FIELD	9:31	9:31	9	window
LEAF_NODE	9:31	9:31	10	window
LEAF_NODE	9:37	9:37	8	)
LEAF_NODE	9:38	9:38	6	,
ARGUMENT	9:40	9:40	6	GNT_ALIGN_MID
FIELD	9:40	9:40	7	GNT_ALIGN_MID
LEAF_NODE	9:40	9:40	8	GNT_ALIGN_MID
LEAF_NODE	9:53	9:53	6	)
LEAF_NODE	9:54	9:54	4	;
SELECTION	10:1	11:2	3	
KEYWORD	10:1	10:1	4	if
LEAF_NODE	10:1	10:1	5	if
LEAF_NODE	10:4	10:4	4	(
CONDITION	10:5	10:5	4	primary
EXPR	10:5	10:5	5	primary
FIELD	10:5	10:5	6	primary
LEAF_NODE	10:5	10:5	7	primary
LEAF_NODE	10:12	10:12	4	)
STATEMENTS	11:2	11:2	4	
EXPR_STATEMENT	11:2	12:59	5	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new_with_format ( primary , GNT_TEXT_FLAG_BOLD ) ) ;
EXPR	11:2	11:2	6	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new_with_format ( primary , GNT_TEXT_FLAG_BOLD ) )
FUNCTION_CALL	11:2	12:58	7	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new_with_format ( primary , GNT_TEXT_FLAG_BOLD ) )
CALLEE	11:2	11:2	8	gnt_box_add_widget
LEAF_NODE	11:2	11:2	9	gnt_box_add_widget
LEAF_NODE	11:20	11:20	8	(
ARGUMENT	11:21	11:21	8	GNT_BOX ( window )
FUNCTION_CALL	11:21	11:35	9	GNT_BOX ( window )
CALLEE	11:21	11:21	10	GNT_BOX
LEAF_NODE	11:21	11:21	11	GNT_BOX
LEAF_NODE	11:28	11:28	10	(
ARGUMENT	11:29	11:29	10	window
FIELD	11:29	11:29	11	window
LEAF_NODE	11:29	11:29	12	window
LEAF_NODE	11:35	11:35	10	)
LEAF_NODE	11:36	11:36	8	,
ARGUMENT	12:4	12:4	8	gnt_label_new_with_format ( primary , GNT_TEXT_FLAG_BOLD )
FUNCTION_CALL	12:4	12:57	9	gnt_label_new_with_format ( primary , GNT_TEXT_FLAG_BOLD )
CALLEE	12:4	12:4	10	gnt_label_new_with_format
LEAF_NODE	12:4	12:4	11	gnt_label_new_with_format
LEAF_NODE	12:29	12:29	10	(
ARGUMENT	12:30	12:30	10	primary
FIELD	12:30	12:30	11	primary
LEAF_NODE	12:30	12:30	12	primary
LEAF_NODE	12:37	12:37	10	,
ARGUMENT	12:39	12:39	10	GNT_TEXT_FLAG_BOLD
FIELD	12:39	12:39	11	GNT_TEXT_FLAG_BOLD
LEAF_NODE	12:39	12:39	12	GNT_TEXT_FLAG_BOLD
LEAF_NODE	12:57	12:57	10	)
LEAF_NODE	12:58	12:58	8	)
LEAF_NODE	12:59	12:59	6	;
SELECTION	13:1	14:2	3	
KEYWORD	13:1	13:1	4	if
LEAF_NODE	13:1	13:1	5	if
LEAF_NODE	13:4	13:4	4	(
CONDITION	13:5	13:5	4	secondary
EXPR	13:5	13:5	5	secondary
FIELD	13:5	13:5	6	secondary
LEAF_NODE	13:5	13:5	7	secondary
LEAF_NODE	13:14	13:14	4	)
STATEMENTS	14:2	14:2	4	
EXPR_STATEMENT	14:2	14:63	5	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new ( secondary ) ) ;
EXPR	14:2	14:2	6	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new ( secondary ) )
FUNCTION_CALL	14:2	14:62	7	gnt_box_add_widget ( GNT_BOX ( window ) , gnt_label_new ( secondary ) )
CALLEE	14:2	14:2	8	gnt_box_add_widget
LEAF_NODE	14:2	14:2	9	gnt_box_add_widget
LEAF_NODE	14:20	14:20	8	(
ARGUMENT	14:21	14:21	8	GNT_BOX ( window )
FUNCTION_CALL	14:21	14:35	9	GNT_BOX ( window )
CALLEE	14:21	14:21	10	GNT_BOX
LEAF_NODE	14:21	14:21	11	GNT_BOX
LEAF_NODE	14:28	14:28	10	(
ARGUMENT	14:29	14:29	10	window
FIELD	14:29	14:29	11	window
LEAF_NODE	14:29	14:29	12	window
LEAF_NODE	14:35	14:35	10	)
LEAF_NODE	14:36	14:36	8	,
ARGUMENT	14:38	14:38	8	gnt_label_new ( secondary )
FUNCTION_CALL	14:38	14:61	9	gnt_label_new ( secondary )
CALLEE	14:38	14:38	10	gnt_label_new
LEAF_NODE	14:38	14:38	11	gnt_label_new
LEAF_NODE	14:51	14:51	10	(
ARGUMENT	14:52	14:52	10	secondary
FIELD	14:52	14:52	11	secondary
LEAF_NODE	14:52	14:52	12	secondary
LEAF_NODE	14:61	14:61	10	)
LEAF_NODE	14:62	14:62	8	)
LEAF_NODE	14:63	14:63	6	;
EXPR_STATEMENT	15:1	16:25	3	g_signal_connect_swapped ( G_OBJECT ( window ) , "destroy" , G_CALLBACK ( purple_request_close ) , GINT_TO_POINTER ( type ) ) ;
EXPR	15:1	15:1	4	g_signal_connect_swapped ( G_OBJECT ( window ) , "destroy" , G_CALLBACK ( purple_request_close ) , GINT_TO_POINTER ( type ) )
FUNCTION_CALL	15:1	16:24	5	g_signal_connect_swapped ( G_OBJECT ( window ) , "destroy" , G_CALLBACK ( purple_request_close ) , GINT_TO_POINTER ( type ) )
CALLEE	15:1	15:1	6	g_signal_connect_swapped
LEAF_NODE	15:1	15:1	7	g_signal_connect_swapped
LEAF_NODE	15:25	15:25	6	(
ARGUMENT	15:26	15:26	6	G_OBJECT ( window )
FUNCTION_CALL	15:26	15:41	7	G_OBJECT ( window )
CALLEE	15:26	15:26	8	G_OBJECT
LEAF_NODE	15:26	15:26	9	G_OBJECT
LEAF_NODE	15:34	15:34	8	(
ARGUMENT	15:35	15:35	8	window
FIELD	15:35	15:35	9	window
LEAF_NODE	15:35	15:35	10	window
LEAF_NODE	15:41	15:41	8	)
LEAF_NODE	15:42	15:42	6	,
ARGUMENT	15:44	15:44	6	"destroy"
FIELD	15:44	15:44	7	"destroy"
LEAF_NODE	15:44	15:44	8	"destroy"
LEAF_NODE	15:53	15:53	6	,
ARGUMENT	15:55	15:55	6	G_CALLBACK ( purple_request_close )
FUNCTION_CALL	15:55	15:86	7	G_CALLBACK ( purple_request_close )
CALLEE	15:55	15:55	8	G_CALLBACK
LEAF_NODE	15:55	15:55	9	G_CALLBACK
LEAF_NODE	15:65	15:65	8	(
ARGUMENT	15:66	15:66	8	purple_request_close
FIELD	15:66	15:66	9	purple_request_close
LEAF_NODE	15:66	15:66	10	purple_request_close
LEAF_NODE	15:86	15:86	8	)
LEAF_NODE	15:87	15:87	6	,
ARGUMENT	16:3	16:3	6	GINT_TO_POINTER ( type )
FUNCTION_CALL	16:3	16:23	7	GINT_TO_POINTER ( type )
CALLEE	16:3	16:3	8	GINT_TO_POINTER
LEAF_NODE	16:3	16:3	9	GINT_TO_POINTER
LEAF_NODE	16:18	16:18	8	(
ARGUMENT	16:19	16:19	8	type
FIELD	16:19	16:19	9	type
LEAF_NODE	16:19	16:19	10	type
LEAF_NODE	16:23	16:23	8	)
LEAF_NODE	16:24	16:24	6	)
LEAF_NODE	16:25	16:25	4	;
JUMP_STATEMENT	17:1	17:14	3	return window ;
KEYWORD	17:1	17:1	4	return
LEAF_NODE	17:1	17:1	5	return
DESTINATION	17:8	17:8	4	window
EXPR	17:8	17:8	5	window
FIELD	17:8	17:8	6	window
LEAF_NODE	17:8	17:8	7	window
LEAF_NODE	17:14	17:14	4	;
LEAF_NODE	18:0	18:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	16:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	move_first_action
LEAF_NODE	2:0	2:0	3	move_first_action
PARAMETER_LIST	2:17	2:48	2	( GntBindable * bind , GList * null )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:31	3	GntBindable * bind
TYPE	2:18	2:30	4	GntBindable *
TYPE_NAME	2:18	2:18	5	GntBindable
LEAF_NODE	2:18	2:18	6	GntBindable
POINTER	2:30	2:30	5	*
LEAF_NODE	2:30	2:30	6	*
NAME	2:31	2:31	4	bind
LEAF_NODE	2:31	2:31	5	bind
LEAF_NODE	2:35	2:35	3	,
PARAMETER_DECL	2:37	2:44	3	GList * null
TYPE	2:37	2:43	4	GList *
TYPE_NAME	2:37	2:37	5	GList
LEAF_NODE	2:37	2:37	6	GList
POINTER	2:43	2:43	5	*
LEAF_NODE	2:43	2:43	6	*
NAME	2:44	2:44	4	null
LEAF_NODE	2:44	2:44	5	null
LEAF_NODE	2:48	2:48	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	15:1	2	
SIMPLE_DECL	4:1	4:31	3	GntTree * tree ; tree = GNT_TREE ( bind ) ;
VAR_DECL	4:1	4:10	4	GntTree * tree ; tree = GNT_TREE ( bind )
TYPE	4:1	4:9	5	GntTree *
TYPE_NAME	4:1	4:1	6	GntTree
LEAF_NODE	4:1	4:1	7	GntTree
POINTER	4:9	4:9	6	*
LEAF_NODE	4:9	4:9	7	*
NAME	4:10	4:10	5	tree
LEAF_NODE	4:10	4:10	6	tree
LEAF_NODE	0:0	0:0	5	;
INIT	4:10	4:10	5	tree = GNT_TREE ( bind )
ASSIGN	4:10	4:17	6	tree = GNT_TREE ( bind )
LVAL	4:10	4:10	7	tree
NAME	4:10	4:10	8	tree
LEAF_NODE	4:10	4:10	9	tree
ASSIGN_OP	4:15	4:15	7	=
LEAF_NODE	4:15	4:15	8	=
RVAL	4:17	4:17	7	GNT_TREE ( bind )
FUNCTION_CALL	4:17	4:30	8	GNT_TREE ( bind )
CALLEE	4:17	4:17	9	GNT_TREE
LEAF_NODE	4:17	4:17	10	GNT_TREE
LEAF_NODE	4:25	4:25	9	(
ARGUMENT	4:26	4:26	9	bind
FIELD	4:26	4:26	10	bind
LEAF_NODE	4:26	4:26	11	bind
LEAF_NODE	4:30	4:30	9	)
LEAF_NODE	4:31	4:31	4	;
SIMPLE_DECL	5:1	5:29	3	GntTreeRow * row ; row = tree -> root ;
VAR_DECL	5:1	5:13	4	GntTreeRow * row ; row = tree -> root
TYPE	5:1	5:12	5	GntTreeRow *
TYPE_NAME	5:1	5:1	6	GntTreeRow
LEAF_NODE	5:1	5:1	7	GntTreeRow
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	row
LEAF_NODE	5:13	5:13	6	row
LEAF_NODE	0:0	0:0	5	;
INIT	5:13	5:13	5	row = tree -> root
ASSIGN	5:13	5:19	6	row = tree -> root
LVAL	5:13	5:13	7	row
NAME	5:13	5:13	8	row
LEAF_NODE	5:13	5:13	9	row
ASSIGN_OP	5:17	5:17	7	=
LEAF_NODE	5:17	5:17	8	=
RVAL	5:19	5:19	7	tree -> root
FIELD	5:19	5:25	8	tree -> root
LEAF_NODE	5:19	5:19	9	tree
LEAF_NODE	5:23	5:23	9	->
LEAF_NODE	5:25	5:25	9	root
LEAF_NODE	5:29	5:29	4	;
SIMPLE_DECL	6:1	6:32	3	GntTreeRow * old ; old = tree -> current ;
VAR_DECL	6:1	6:13	4	GntTreeRow * old ; old = tree -> current
TYPE	6:1	6:12	5	GntTreeRow *
TYPE_NAME	6:1	6:1	6	GntTreeRow
LEAF_NODE	6:1	6:1	7	GntTreeRow
POINTER	6:12	6:12	6	*
LEAF_NODE	6:12	6:12	7	*
NAME	6:13	6:13	5	old
LEAF_NODE	6:13	6:13	6	old
LEAF_NODE	0:0	0:0	5	;
INIT	6:13	6:13	5	old = tree -> current
ASSIGN	6:13	6:19	6	old = tree -> current
LVAL	6:13	6:13	7	old
NAME	6:13	6:13	8	old
LEAF_NODE	6:13	6:13	9	old
ASSIGN_OP	6:17	6:17	7	=
LEAF_NODE	6:17	6:17	8	=
RVAL	6:19	6:19	7	tree -> current
FIELD	6:19	6:25	8	tree -> current
LEAF_NODE	6:19	6:19	9	tree
LEAF_NODE	6:23	6:23	9	->
LEAF_NODE	6:25	6:25	9	current
LEAF_NODE	6:32	6:32	4	;
SELECTION	7:1	8:2	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	row && ! row_matches_search ( row )
EXPR	7:5	7:5	5	row && ! row_matches_search ( row )
AND	7:5	7:12	6	row && ! row_matches_search ( row )
EXPR	7:5	7:5	7	row
FIELD	7:5	7:5	8	row
LEAF_NODE	7:5	7:5	9	row
LEAF_NODE	7:9	7:9	7	&&
EXPR	7:12	7:12	7	! row_matches_search ( row )
UNARY_EXPR	7:12	7:13	8	! row_matches_search ( row )
UNARY_OPERATOR	7:12	7:12	9	!
LEAF_NODE	7:12	7:12	10	!
FUNCTION_CALL	7:13	7:35	9	row_matches_search ( row )
CALLEE	7:13	7:13	10	row_matches_search
LEAF_NODE	7:13	7:13	11	row_matches_search
LEAF_NODE	7:31	7:31	10	(
ARGUMENT	7:32	7:32	10	row
FIELD	7:32	7:32	11	row
LEAF_NODE	7:32	7:32	12	row
LEAF_NODE	7:35	7:35	10	)
LEAF_NODE	7:36	7:36	4	)
STATEMENTS	8:2	8:2	4	
EXPR_STATEMENT	8:2	8:21	5	row = get_next ( row ) ;
EXPR	8:2	8:2	6	row = get_next ( row )
ASSIGN	8:2	8:8	7	row = get_next ( row )
LVAL	8:2	8:2	8	row
FIELD	8:2	8:2	9	row
LEAF_NODE	8:2	8:2	10	row
ASSIGN_OP	8:6	8:6	8	=
LEAF_NODE	8:6	8:6	9	=
RVAL	8:8	8:8	8	get_next ( row )
FUNCTION_CALL	8:8	8:20	9	get_next ( row )
CALLEE	8:8	8:8	10	get_next
LEAF_NODE	8:8	8:8	11	get_next
LEAF_NODE	8:16	8:16	10	(
ARGUMENT	8:17	8:17	10	row
FIELD	8:17	8:17	11	row
LEAF_NODE	8:17	8:17	12	row
LEAF_NODE	8:20	8:20	10	)
LEAF_NODE	8:21	8:21	6	;
SELECTION	9:1	9:10	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	row
EXPR	9:5	9:5	5	row
FIELD	9:5	9:5	6	row
LEAF_NODE	9:5	9:5	7	row
LEAF_NODE	9:8	9:8	4	)
STATEMENTS	9:10	14:1	4	
LEAF_NODE	9:10	9:10	5	{
STATEMENTS	10:2	12:2	5	
EXPR_STATEMENT	10:2	10:21	6	tree -> current = row ;
EXPR	10:2	10:2	7	tree -> current = row
ASSIGN	10:2	10:18	8	tree -> current = row
LVAL	10:2	10:2	9	tree -> current
FIELD	10:2	10:8	10	tree -> current
LEAF_NODE	10:2	10:2	11	tree
LEAF_NODE	10:6	10:6	11	->
LEAF_NODE	10:8	10:8	11	current
ASSIGN_OP	10:16	10:16	9	=
LEAF_NODE	10:16	10:16	10	=
RVAL	10:18	10:18	9	row
FIELD	10:18	10:18	10	row
LEAF_NODE	10:18	10:18	11	row
LEAF_NODE	10:21	10:21	7	;
EXPR_STATEMENT	11:2	11:19	6	redraw_tree ( tree ) ;
EXPR	11:2	11:2	7	redraw_tree ( tree )
FUNCTION_CALL	11:2	11:18	8	redraw_tree ( tree )
CALLEE	11:2	11:2	9	redraw_tree
LEAF_NODE	11:2	11:2	10	redraw_tree
LEAF_NODE	11:13	11:13	9	(
ARGUMENT	11:14	11:14	9	tree
FIELD	11:14	11:14	10	tree
LEAF_NODE	11:14	11:14	11	tree
LEAF_NODE	11:18	11:18	9	)
LEAF_NODE	11:19	11:19	7	;
SELECTION	12:2	13:3	6	
KEYWORD	12:2	12:2	7	if
LEAF_NODE	12:2	12:2	8	if
LEAF_NODE	12:5	12:5	7	(
CONDITION	12:6	12:6	7	old != tree -> current
EXPR	12:6	12:13	8	old != tree -> current
FIELD	12:6	12:6	9	old
LEAF_NODE	12:6	12:6	10	old
EQ_OPERATOR	12:10	12:10	9	!=
LEAF_NODE	12:10	12:10	10	!=
FIELD	12:13	12:19	9	tree -> current
LEAF_NODE	12:13	12:13	10	tree
LEAF_NODE	12:17	12:17	10	->
LEAF_NODE	12:19	12:19	10	current
LEAF_NODE	12:26	12:26	7	)
STATEMENTS	13:3	13:3	7	
EXPR_STATEMENT	13:3	13:51	8	tree_selection_changed ( tree , old , tree -> current ) ;
EXPR	13:3	13:3	9	tree_selection_changed ( tree , old , tree -> current )
FUNCTION_CALL	13:3	13:50	10	tree_selection_changed ( tree , old , tree -> current )
CALLEE	13:3	13:3	11	tree_selection_changed
LEAF_NODE	13:3	13:3	12	tree_selection_changed
LEAF_NODE	13:25	13:25	11	(
ARGUMENT	13:26	13:26	11	tree
FIELD	13:26	13:26	12	tree
LEAF_NODE	13:26	13:26	13	tree
LEAF_NODE	13:30	13:30	11	,
ARGUMENT	13:32	13:32	11	old
FIELD	13:32	13:32	12	old
LEAF_NODE	13:32	13:32	13	old
LEAF_NODE	13:35	13:35	11	,
ARGUMENT	13:37	13:37	11	tree -> current
FIELD	13:37	13:43	12	tree -> current
LEAF_NODE	13:37	13:37	13	tree
LEAF_NODE	13:41	13:41	13	->
LEAF_NODE	13:43	13:43	13	current
LEAF_NODE	13:50	13:50	11	)
LEAF_NODE	13:51	13:51	9	;
LEAF_NODE	14:1	14:1	5	}
JUMP_STATEMENT	15:1	15:12	3	return TRUE ;
KEYWORD	15:1	15:1	4	return
LEAF_NODE	15:1	15:1	5	return
DESTINATION	15:8	15:8	4	TRUE
EXPR	15:8	15:8	5	TRUE
FIELD	15:8	15:8	6	TRUE
LEAF_NODE	15:8	15:8	7	TRUE
LEAF_NODE	15:12	15:12	4	;
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	8:0	1	
RETURN_TYPE	2:0	2:0	2	size_t
TYPE_NAME	2:0	2:0	3	size_t
LEAF_NODE	2:0	2:0	4	size_t
FUNCTION_NAME	2:7	2:7	2	gg112_transfer_info__pack_to_buffer
LEAF_NODE	2:7	2:7	3	gg112_transfer_info__pack_to_buffer
PARAMETER_LIST	3:21	4:45	2	( const GG112TransferInfo * message , ProtobufCBuffer * buffer )
LEAF_NODE	3:21	3:21	3	(
PARAMETER_DECL	3:22	3:47	3	const GG112TransferInfo * message
TYPE	3:22	3:46	4	const GG112TransferInfo *
TYPE_NAME	3:22	3:28	5	const GG112TransferInfo
LEAF_NODE	3:22	3:22	6	const
LEAF_NODE	3:28	3:28	6	GG112TransferInfo
POINTER	3:46	3:46	5	*
LEAF_NODE	3:46	3:46	6	*
NAME	3:47	3:47	4	message
LEAF_NODE	3:47	3:47	5	message
LEAF_NODE	3:54	3:54	3	,
PARAMETER_DECL	4:22	4:39	3	ProtobufCBuffer * buffer
TYPE	4:22	4:38	4	ProtobufCBuffer *
TYPE_NAME	4:22	4:22	5	ProtobufCBuffer
LEAF_NODE	4:22	4:22	6	ProtobufCBuffer
POINTER	4:38	4:38	5	*
LEAF_NODE	4:38	4:38	6	*
NAME	4:39	4:39	4	buffer
LEAF_NODE	4:39	4:39	5	buffer
LEAF_NODE	4:45	4:45	3	)
LEAF_NODE	5:0	5:0	2	{
STATEMENTS	6:2	7:2	2	
EXPR_STATEMENT	6:2	6:70	3	assert ( message -> base . descriptor == & gg112_transfer_info__descriptor ) ;
EXPR	6:2	6:2	4	assert ( message -> base . descriptor == & gg112_transfer_info__descriptor )
FUNCTION_CALL	6:2	6:69	5	assert ( message -> base . descriptor == & gg112_transfer_info__descriptor )
CALLEE	6:2	6:2	6	assert
LEAF_NODE	6:2	6:2	7	assert
LEAF_NODE	6:8	6:8	6	(
ARGUMENT	6:9	6:37	6	message -> base . descriptor == & gg112_transfer_info__descriptor
FIELD	6:9	6:23	7	message -> base . descriptor
LEAF_NODE	6:9	6:9	8	message
LEAF_NODE	6:16	6:16	8	->
LEAF_NODE	6:18	6:18	8	base
LEAF_NODE	6:22	6:22	8	.
LEAF_NODE	6:23	6:23	8	descriptor
EQ_OPERATOR	6:34	6:34	7	==
LEAF_NODE	6:34	6:34	8	==
UNARY_EXPR	6:37	6:38	7	& gg112_transfer_info__descriptor
UNARY_OPERATOR	6:37	6:37	8	&
LEAF_NODE	6:37	6:37	9	&
FIELD	6:38	6:38	8	gg112_transfer_info__descriptor
LEAF_NODE	6:38	6:38	9	gg112_transfer_info__descriptor
LEAF_NODE	6:69	6:69	6	)
LEAF_NODE	6:70	6:70	4	;
JUMP_STATEMENT	7:2	7:85	3	return protobuf_c_message_pack_to_buffer ( ( const ProtobufCMessage * ) message , buffer ) ;
KEYWORD	7:2	7:2	4	return
LEAF_NODE	7:2	7:2	5	return
DESTINATION	7:9	7:9	4	protobuf_c_message_pack_to_buffer ( ( const ProtobufCMessage * ) message , buffer )
EXPR	7:9	7:9	5	protobuf_c_message_pack_to_buffer ( ( const ProtobufCMessage * ) message , buffer )
FUNCTION_CALL	7:9	7:84	6	protobuf_c_message_pack_to_buffer ( ( const ProtobufCMessage * ) message , buffer )
CALLEE	7:9	7:9	7	protobuf_c_message_pack_to_buffer
LEAF_NODE	7:9	7:9	8	protobuf_c_message_pack_to_buffer
LEAF_NODE	7:43	7:43	7	(
ARGUMENT	7:44	7:69	7	( const ProtobufCMessage * ) message
LEAF_NODE	7:44	7:44	8	(
TYPE_NAME	7:45	7:51	8	const ProtobufCMessage
LEAF_NODE	7:45	7:45	9	const
LEAF_NODE	7:51	7:51	9	ProtobufCMessage
LEAF_NODE	7:67	7:67	8	*
LEAF_NODE	7:68	7:68	8	)
FIELD	7:69	7:69	8	message
LEAF_NODE	7:69	7:69	9	message
LEAF_NODE	7:76	7:76	7	,
ARGUMENT	7:78	7:78	7	buffer
FIELD	7:78	7:78	8	buffer
LEAF_NODE	7:78	7:78	9	buffer
LEAF_NODE	7:84	7:84	7	)
LEAF_NODE	7:85	7:85	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	4:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	nullprpl_destroy
LEAF_NODE	2:12	2:12	3	nullprpl_destroy
PARAMETER_LIST	2:28	2:49	2	( PurplePlugin * plugin )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:43	3	PurplePlugin * plugin
TYPE	2:29	2:42	4	PurplePlugin *
TYPE_NAME	2:29	2:29	5	PurplePlugin
LEAF_NODE	2:29	2:29	6	PurplePlugin
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	plugin
LEAF_NODE	2:43	2:43	5	plugin
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	2:51	2:51	2	{
STATEMENTS	3:2	3:2	2	
EXPR_STATEMENT	3:2	3:50	3	purple_debug_info ( "nullprpl" , "shutting down\n" ) ;
EXPR	3:2	3:2	4	purple_debug_info ( "nullprpl" , "shutting down\n" )
FUNCTION_CALL	3:2	3:49	5	purple_debug_info ( "nullprpl" , "shutting down\n" )
CALLEE	3:2	3:2	6	purple_debug_info
LEAF_NODE	3:2	3:2	7	purple_debug_info
LEAF_NODE	3:19	3:19	6	(
ARGUMENT	3:20	3:20	6	"nullprpl"
FIELD	3:20	3:20	7	"nullprpl"
LEAF_NODE	3:20	3:20	8	"nullprpl"
LEAF_NODE	3:30	3:30	6	,
ARGUMENT	3:32	3:32	6	"shutting down\n"
FIELD	3:32	3:32	7	"shutting down\n"
LEAF_NODE	3:32	3:32	8	"shutting down\n"
LEAF_NODE	3:49	3:49	6	)
LEAF_NODE	3:50	3:50	4	;
LEAF_NODE	4:0	4:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	15:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	pidgin_dialogs_remove_buddy_cb
LEAF_NODE	2:0	2:0	3	pidgin_dialogs_remove_buddy_cb
PARAMETER_LIST	2:30	2:49	2	( PurpleBuddy * buddy )
LEAF_NODE	2:30	2:30	3	(
PARAMETER_DECL	2:31	2:44	3	PurpleBuddy * buddy
TYPE	2:31	2:43	4	PurpleBuddy *
TYPE_NAME	2:31	2:31	5	PurpleBuddy
LEAF_NODE	2:31	2:31	6	PurpleBuddy
POINTER	2:43	2:43	5	*
LEAF_NODE	2:43	2:43	6	*
NAME	2:44	2:44	4	buddy
LEAF_NODE	2:44	2:44	5	buddy
LEAF_NODE	2:49	2:49	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	14:1	2	
SIMPLE_DECL	4:1	4:19	3	PurpleGroup * group ;
VAR_DECL	4:1	4:14	4	PurpleGroup * group
TYPE	4:1	4:13	5	PurpleGroup *
TYPE_NAME	4:1	4:1	6	PurpleGroup
LEAF_NODE	4:1	4:1	7	PurpleGroup
POINTER	4:13	4:13	6	*
LEAF_NODE	4:13	4:13	7	*
NAME	4:14	4:14	5	group
LEAF_NODE	4:14	4:14	6	group
LEAF_NODE	4:19	4:19	4	;
SIMPLE_DECL	5:1	5:12	3	gchar * name ;
VAR_DECL	5:1	5:8	4	gchar * name
TYPE	5:1	5:7	5	gchar *
TYPE_NAME	5:1	5:1	6	gchar
LEAF_NODE	5:1	5:1	7	gchar
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	name
LEAF_NODE	5:8	5:8	6	name
LEAF_NODE	5:12	5:12	4	;
SIMPLE_DECL	6:1	6:23	3	PurpleAccount * account ;
VAR_DECL	6:1	6:16	4	PurpleAccount * account
TYPE	6:1	6:15	5	PurpleAccount *
TYPE_NAME	6:1	6:1	6	PurpleAccount
LEAF_NODE	6:1	6:1	7	PurpleAccount
POINTER	6:15	6:15	6	*
LEAF_NODE	6:15	6:15	7	*
NAME	6:16	6:16	5	account
LEAF_NODE	6:16	6:16	6	account
LEAF_NODE	6:23	6:23	4	;
EXPR_STATEMENT	7:1	7:38	3	group = purple_buddy_get_group ( buddy ) ;
EXPR	7:1	7:1	4	group = purple_buddy_get_group ( buddy )
ASSIGN	7:1	7:9	5	group = purple_buddy_get_group ( buddy )
LVAL	7:1	7:1	6	group
FIELD	7:1	7:1	7	group
LEAF_NODE	7:1	7:1	8	group
ASSIGN_OP	7:7	7:7	6	=
LEAF_NODE	7:7	7:7	7	=
RVAL	7:9	7:9	6	purple_buddy_get_group ( buddy )
FUNCTION_CALL	7:9	7:37	7	purple_buddy_get_group ( buddy )
CALLEE	7:9	7:9	8	purple_buddy_get_group
LEAF_NODE	7:9	7:9	9	purple_buddy_get_group
LEAF_NODE	7:31	7:31	8	(
ARGUMENT	7:32	7:32	8	buddy
FIELD	7:32	7:32	9	buddy
LEAF_NODE	7:32	7:32	10	buddy
LEAF_NODE	7:37	7:37	8	)
LEAF_NODE	7:38	7:38	4	;
EXPR_STATEMENT	8:1	8:29	3	name = g_strdup ( buddy -> name ) ;
EXPR	8:1	8:1	4	name = g_strdup ( buddy -> name )
ASSIGN	8:1	8:8	5	name = g_strdup ( buddy -> name )
LVAL	8:1	8:1	6	name
FIELD	8:1	8:1	7	name
LEAF_NODE	8:1	8:1	8	name
ASSIGN_OP	8:6	8:6	6	=
LEAF_NODE	8:6	8:6	7	=
RVAL	8:8	8:8	6	g_strdup ( buddy -> name )
FUNCTION_CALL	8:8	8:28	7	g_strdup ( buddy -> name )
CALLEE	8:8	8:8	8	g_strdup
LEAF_NODE	8:8	8:8	9	g_strdup
LEAF_NODE	8:16	8:16	8	(
ARGUMENT	8:17	8:17	8	buddy -> name
FIELD	8:17	8:24	9	buddy -> name
LEAF_NODE	8:17	8:17	10	buddy
LEAF_NODE	8:22	8:22	10	->
LEAF_NODE	8:24	8:24	10	name
LEAF_NODE	8:28	8:28	8	)
LEAF_NODE	8:29	8:29	4	;
EXPR_STATEMENT	9:1	9:25	3	account = buddy -> account ;
EXPR	9:1	9:1	4	account = buddy -> account
ASSIGN	9:1	9:11	5	account = buddy -> account
LVAL	9:1	9:1	6	account
FIELD	9:1	9:1	7	account
LEAF_NODE	9:1	9:1	8	account
ASSIGN_OP	9:9	9:9	6	=
LEAF_NODE	9:9	9:9	7	=
RVAL	9:11	9:11	6	buddy -> account
FIELD	9:11	9:18	7	buddy -> account
LEAF_NODE	9:11	9:11	8	buddy
LEAF_NODE	9:16	9:16	8	->
LEAF_NODE	9:18	9:18	8	account
LEAF_NODE	9:25	9:25	4	;
EXPR_STATEMENT	10:1	10:76	3	purple_debug_info ( "blist" , "Removing '%s' from buddy list.\n" , buddy -> name ) ;
EXPR	10:1	10:1	4	purple_debug_info ( "blist" , "Removing '%s' from buddy list.\n" , buddy -> name )
FUNCTION_CALL	10:1	10:75	5	purple_debug_info ( "blist" , "Removing '%s' from buddy list.\n" , buddy -> name )
CALLEE	10:1	10:1	6	purple_debug_info
LEAF_NODE	10:1	10:1	7	purple_debug_info
LEAF_NODE	10:18	10:18	6	(
ARGUMENT	10:19	10:19	6	"blist"
FIELD	10:19	10:19	7	"blist"
LEAF_NODE	10:19	10:19	8	"blist"
LEAF_NODE	10:26	10:26	6	,
ARGUMENT	10:28	10:28	6	"Removing '%s' from buddy list.\n"
FIELD	10:28	10:28	7	"Removing '%s' from buddy list.\n"
LEAF_NODE	10:28	10:28	8	"Removing '%s' from buddy list.\n"
LEAF_NODE	10:62	10:62	6	,
ARGUMENT	10:64	10:64	6	buddy -> name
FIELD	10:64	10:71	7	buddy -> name
LEAF_NODE	10:64	10:64	8	buddy
LEAF_NODE	10:69	10:69	8	->
LEAF_NODE	10:71	10:71	8	name
LEAF_NODE	10:75	10:75	6	)
LEAF_NODE	10:76	10:76	4	;
EXPR_STATEMENT	12:1	12:51	3	purple_account_remove_buddy ( account , buddy , group ) ;
EXPR	12:1	12:1	4	purple_account_remove_buddy ( account , buddy , group )
FUNCTION_CALL	12:1	12:50	5	purple_account_remove_buddy ( account , buddy , group )
CALLEE	12:1	12:1	6	purple_account_remove_buddy
LEAF_NODE	12:1	12:1	7	purple_account_remove_buddy
LEAF_NODE	12:28	12:28	6	(
ARGUMENT	12:29	12:29	6	account
FIELD	12:29	12:29	7	account
LEAF_NODE	12:29	12:29	8	account
LEAF_NODE	12:36	12:36	6	,
ARGUMENT	12:38	12:38	6	buddy
FIELD	12:38	12:38	7	buddy
LEAF_NODE	12:38	12:38	8	buddy
LEAF_NODE	12:43	12:43	6	,
ARGUMENT	12:45	12:45	6	group
FIELD	12:45	12:45	7	group
LEAF_NODE	12:45	12:45	8	group
LEAF_NODE	12:50	12:50	6	)
LEAF_NODE	12:51	12:51	4	;
EXPR_STATEMENT	13:1	13:33	3	purple_blist_remove_buddy ( buddy ) ;
EXPR	13:1	13:1	4	purple_blist_remove_buddy ( buddy )
FUNCTION_CALL	13:1	13:32	5	purple_blist_remove_buddy ( buddy )
CALLEE	13:1	13:1	6	purple_blist_remove_buddy
LEAF_NODE	13:1	13:1	7	purple_blist_remove_buddy
LEAF_NODE	13:26	13:26	6	(
ARGUMENT	13:27	13:27	6	buddy
FIELD	13:27	13:27	7	buddy
LEAF_NODE	13:27	13:27	8	buddy
LEAF_NODE	13:32	13:32	6	)
LEAF_NODE	13:33	13:33	4	;
EXPR_STATEMENT	14:1	14:13	3	g_free ( name ) ;
EXPR	14:1	14:1	4	g_free ( name )
FUNCTION_CALL	14:1	14:12	5	g_free ( name )
CALLEE	14:1	14:1	6	g_free
LEAF_NODE	14:1	14:1	7	g_free
LEAF_NODE	14:7	14:7	6	(
ARGUMENT	14:8	14:8	6	name
FIELD	14:8	14:8	7	name
LEAF_NODE	14:8	14:8	8	name
LEAF_NODE	14:12	14:12	6	)
LEAF_NODE	14:13	14:13	4	;
LEAF_NODE	15:0	15:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	15:0	1	
RETURN_TYPE	2:0	2:7	2	static PurpleCmdRet
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	PurpleCmdRet
LEAF_NODE	2:7	2:7	4	PurpleCmdRet
FUNCTION_NAME	2:20	2:20	2	silcpurple_cmd_msg
LEAF_NODE	2:20	2:20	3	silcpurple_cmd_msg
PARAMETER_LIST	2:38	3:56	2	( PurpleConversation * conv , const char * cmd , char * * args , char * * error , void * data )
LEAF_NODE	2:38	2:38	3	(
PARAMETER_DECL	2:39	2:59	3	PurpleConversation * conv
TYPE	2:39	2:58	4	PurpleConversation *
TYPE_NAME	2:39	2:39	5	PurpleConversation
LEAF_NODE	2:39	2:39	6	PurpleConversation
POINTER	2:58	2:58	5	*
LEAF_NODE	2:58	2:58	6	*
NAME	2:59	2:59	4	conv
LEAF_NODE	2:59	2:59	5	conv
LEAF_NODE	2:63	2:63	3	,
PARAMETER_DECL	3:2	3:14	3	const char * cmd
TYPE	3:2	3:13	4	const char *
TYPE_NAME	3:2	3:8	5	const char
LEAF_NODE	3:2	3:2	6	const
LEAF_NODE	3:8	3:8	6	char
POINTER	3:13	3:13	5	*
LEAF_NODE	3:13	3:13	6	*
NAME	3:14	3:14	4	cmd
LEAF_NODE	3:14	3:14	5	cmd
LEAF_NODE	3:17	3:17	3	,
PARAMETER_DECL	3:19	3:26	3	char * * args
TYPE	3:19	3:24	4	char * *
TYPE_NAME	3:19	3:19	5	char
LEAF_NODE	3:19	3:19	6	char
POINTER	3:24	3:25	5	* *
LEAF_NODE	3:24	3:24	6	*
LEAF_NODE	3:25	3:25	6	*
NAME	3:26	3:26	4	args
LEAF_NODE	3:26	3:26	5	args
LEAF_NODE	3:30	3:30	3	,
PARAMETER_DECL	3:32	3:39	3	char * * error
TYPE	3:32	3:37	4	char * *
TYPE_NAME	3:32	3:32	5	char
LEAF_NODE	3:32	3:32	6	char
POINTER	3:37	3:38	5	* *
LEAF_NODE	3:37	3:37	6	*
LEAF_NODE	3:38	3:38	6	*
NAME	3:39	3:39	4	error
LEAF_NODE	3:39	3:39	5	error
LEAF_NODE	3:44	3:44	3	,
PARAMETER_DECL	3:46	3:52	3	void * data
TYPE	3:46	3:51	4	void *
TYPE_NAME	3:46	3:46	5	void
LEAF_NODE	3:46	3:46	6	void
POINTER	3:51	3:51	5	*
LEAF_NODE	3:51	3:51	6	*
NAME	3:52	3:52	4	data
LEAF_NODE	3:52	3:52	5	data
LEAF_NODE	3:56	3:56	3	)
LEAF_NODE	4:0	4:0	2	{
STATEMENTS	5:1	13:1	2	
SIMPLE_DECL	5:1	5:8	3	int ret ;
VAR_DECL	5:1	5:5	4	int ret
TYPE	5:1	5:1	5	int
TYPE_NAME	5:1	5:1	6	int
LEAF_NODE	5:1	5:1	7	int
NAME	5:5	5:5	5	ret
LEAF_NODE	5:5	5:5	6	ret
LEAF_NODE	5:8	5:8	4	;
SIMPLE_DECL	6:1	6:21	3	PurpleConnection * gc ;
VAR_DECL	6:1	6:19	4	PurpleConnection * gc
TYPE	6:1	6:18	5	PurpleConnection *
TYPE_NAME	6:1	6:1	6	PurpleConnection
LEAF_NODE	6:1	6:1	7	PurpleConnection
POINTER	6:18	6:18	6	*
LEAF_NODE	6:18	6:18	7	*
NAME	6:19	6:19	5	gc
LEAF_NODE	6:19	6:19	6	gc
LEAF_NODE	6:21	6:21	4	;
EXPR_STATEMENT	7:1	7:38	3	gc = purple_conversation_get_gc ( conv ) ;
EXPR	7:1	7:1	4	gc = purple_conversation_get_gc ( conv )
ASSIGN	7:1	7:6	5	gc = purple_conversation_get_gc ( conv )
LVAL	7:1	7:1	6	gc
FIELD	7:1	7:1	7	gc
LEAF_NODE	7:1	7:1	8	gc
ASSIGN_OP	7:4	7:4	6	=
LEAF_NODE	7:4	7:4	7	=
RVAL	7:6	7:6	6	purple_conversation_get_gc ( conv )
FUNCTION_CALL	7:6	7:37	7	purple_conversation_get_gc ( conv )
CALLEE	7:6	7:6	8	purple_conversation_get_gc
LEAF_NODE	7:6	7:6	9	purple_conversation_get_gc
LEAF_NODE	7:32	7:32	8	(
ARGUMENT	7:33	7:33	8	conv
FIELD	7:33	7:33	9	conv
LEAF_NODE	7:33	7:33	10	conv
LEAF_NODE	7:37	7:37	8	)
LEAF_NODE	7:38	7:38	4	;
SELECTION	8:1	9:2	3	
KEYWORD	8:1	8:1	4	if
LEAF_NODE	8:1	8:1	5	if
LEAF_NODE	8:4	8:4	4	(
CONDITION	8:5	8:5	4	gc == NULL
EXPR	8:5	8:11	5	gc == NULL
FIELD	8:5	8:5	6	gc
LEAF_NODE	8:5	8:5	7	gc
EQ_OPERATOR	8:8	8:8	6	==
LEAF_NODE	8:8	8:8	7	==
FIELD	8:11	8:11	6	NULL
LEAF_NODE	8:11	8:11	7	NULL
LEAF_NODE	8:15	8:15	4	)
STATEMENTS	9:2	9:2	4	
JUMP_STATEMENT	9:2	9:30	5	return PURPLE_CMD_RET_FAILED ;
KEYWORD	9:2	9:2	6	return
LEAF_NODE	9:2	9:2	7	return
DESTINATION	9:9	9:9	6	PURPLE_CMD_RET_FAILED
EXPR	9:9	9:9	7	PURPLE_CMD_RET_FAILED
FIELD	9:9	9:9	8	PURPLE_CMD_RET_FAILED
LEAF_NODE	9:9	9:9	9	PURPLE_CMD_RET_FAILED
LEAF_NODE	9:30	9:30	6	;
EXPR_STATEMENT	10:1	10:68	3	ret = silcpurple_send_im ( gc , args [ 0 ] , args [ 1 ] , PURPLE_MESSAGE_SEND ) ;
EXPR	10:1	10:1	4	ret = silcpurple_send_im ( gc , args [ 0 ] , args [ 1 ] , PURPLE_MESSAGE_SEND )
ASSIGN	10:1	10:7	5	ret = silcpurple_send_im ( gc , args [ 0 ] , args [ 1 ] , PURPLE_MESSAGE_SEND )
LVAL	10:1	10:1	6	ret
FIELD	10:1	10:1	7	ret
LEAF_NODE	10:1	10:1	8	ret
ASSIGN_OP	10:5	10:5	6	=
LEAF_NODE	10:5	10:5	7	=
RVAL	10:7	10:7	6	silcpurple_send_im ( gc , args [ 0 ] , args [ 1 ] , PURPLE_MESSAGE_SEND )
FUNCTION_CALL	10:7	10:67	7	silcpurple_send_im ( gc , args [ 0 ] , args [ 1 ] , PURPLE_MESSAGE_SEND )
CALLEE	10:7	10:7	8	silcpurple_send_im
LEAF_NODE	10:7	10:7	9	silcpurple_send_im
LEAF_NODE	10:25	10:25	8	(
ARGUMENT	10:26	10:26	8	gc
FIELD	10:26	10:26	9	gc
LEAF_NODE	10:26	10:26	10	gc
LEAF_NODE	10:28	10:28	8	,
ARGUMENT	10:30	10:30	8	args [ 0 ]
FIELD	10:30	10:36	9	args [ 0 ]
LEAF_NODE	10:30	10:30	10	args
LEAF_NODE	10:34	10:34	10	[
EXPR	10:35	10:35	10	0
FIELD	10:35	10:35	11	0
LEAF_NODE	10:35	10:35	12	0
LEAF_NODE	10:36	10:36	10	]
LEAF_NODE	10:37	10:37	8	,
ARGUMENT	10:39	10:39	8	args [ 1 ]
FIELD	10:39	10:45	9	args [ 1 ]
LEAF_NODE	10:39	10:39	10	args
LEAF_NODE	10:43	10:43	10	[
EXPR	10:44	10:44	10	1
FIELD	10:44	10:44	11	1
LEAF_NODE	10:44	10:44	12	1
LEAF_NODE	10:45	10:45	10	]
LEAF_NODE	10:46	10:46	8	,
ARGUMENT	10:48	10:48	8	PURPLE_MESSAGE_SEND
FIELD	10:48	10:48	9	PURPLE_MESSAGE_SEND
LEAF_NODE	10:48	10:48	10	PURPLE_MESSAGE_SEND
LEAF_NODE	10:67	10:67	8	)
LEAF_NODE	10:68	10:68	4	;
SELECTION	11:1	12:2	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	ret
EXPR	11:5	11:5	5	ret
FIELD	11:5	11:5	6	ret
LEAF_NODE	11:5	11:5	7	ret
LEAF_NODE	11:8	11:8	4	)
STATEMENTS	12:2	12:2	4	
JUMP_STATEMENT	12:2	12:26	5	return PURPLE_CMD_RET_OK ;
KEYWORD	12:2	12:2	6	return
LEAF_NODE	12:2	12:2	7	return
DESTINATION	12:9	12:9	6	PURPLE_CMD_RET_OK
EXPR	12:9	12:9	7	PURPLE_CMD_RET_OK
FIELD	12:9	12:9	8	PURPLE_CMD_RET_OK
LEAF_NODE	12:9	12:9	9	PURPLE_CMD_RET_OK
LEAF_NODE	12:26	12:26	6	;
SELECTION	13:1	14:2	3	
KEYWORD	13:1	13:1	4	else
LEAF_NODE	13:1	13:1	5	else
STATEMENTS	14:2	14:2	4	
JUMP_STATEMENT	14:2	14:30	5	return PURPLE_CMD_RET_FAILED ;
KEYWORD	14:2	14:2	6	return
LEAF_NODE	14:2	14:2	7	return
DESTINATION	14:9	14:9	6	PURPLE_CMD_RET_FAILED
EXPR	14:9	14:9	7	PURPLE_CMD_RET_FAILED
FIELD	14:9	14:9	8	PURPLE_CMD_RET_FAILED
LEAF_NODE	14:9	14:9	9	PURPLE_CMD_RET_FAILED
LEAF_NODE	14:30	14:30	6	;
LEAF_NODE	15:0	15:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	8:0	1	
RETURN_TYPE	1:0	1:19	2	PurpleMediaManager *
TYPE_NAME	1:0	1:0	3	PurpleMediaManager
LEAF_NODE	1:0	1:0	4	PurpleMediaManager
LEAF_NODE	1:19	1:19	3	*
FUNCTION_NAME	2:0	2:0	2	purple_media_get_manager
LEAF_NODE	2:0	2:0	3	purple_media_get_manager
PARAMETER_LIST	2:24	2:43	2	( PurpleMedia * media )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:38	3	PurpleMedia * media
TYPE	2:25	2:37	4	PurpleMedia *
TYPE_NAME	2:25	2:25	5	PurpleMedia
LEAF_NODE	2:25	2:25	6	PurpleMedia
POINTER	2:37	2:37	5	*
LEAF_NODE	2:37	2:37	6	*
NAME	2:38	2:38	4	media
LEAF_NODE	2:38	2:38	5	media
LEAF_NODE	2:43	2:43	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:24	3	PurpleMediaManager * ret ;
VAR_DECL	4:1	4:21	4	PurpleMediaManager * ret
TYPE	4:1	4:20	5	PurpleMediaManager *
TYPE_NAME	4:1	4:1	6	PurpleMediaManager
LEAF_NODE	4:1	4:1	7	PurpleMediaManager
POINTER	4:20	4:20	6	*
LEAF_NODE	4:20	4:20	7	*
NAME	4:21	4:21	5	ret
LEAF_NODE	4:21	4:21	6	ret
LEAF_NODE	4:24	4:24	4	;
EXPR_STATEMENT	5:1	5:51	3	g_return_val_if_fail ( PURPLE_IS_MEDIA ( media ) , NULL ) ;
EXPR	5:1	5:1	4	g_return_val_if_fail ( PURPLE_IS_MEDIA ( media ) , NULL )
FUNCTION_CALL	5:1	5:50	5	g_return_val_if_fail ( PURPLE_IS_MEDIA ( media ) , NULL )
CALLEE	5:1	5:1	6	g_return_val_if_fail
LEAF_NODE	5:1	5:1	7	g_return_val_if_fail
LEAF_NODE	5:21	5:21	6	(
ARGUMENT	5:22	5:22	6	PURPLE_IS_MEDIA ( media )
FUNCTION_CALL	5:22	5:43	7	PURPLE_IS_MEDIA ( media )
CALLEE	5:22	5:22	8	PURPLE_IS_MEDIA
LEAF_NODE	5:22	5:22	9	PURPLE_IS_MEDIA
LEAF_NODE	5:37	5:37	8	(
ARGUMENT	5:38	5:38	8	media
FIELD	5:38	5:38	9	media
LEAF_NODE	5:38	5:38	10	media
LEAF_NODE	5:43	5:43	8	)
LEAF_NODE	5:44	5:44	6	,
ARGUMENT	5:46	5:46	6	NULL
FIELD	5:46	5:46	7	NULL
LEAF_NODE	5:46	5:46	8	NULL
LEAF_NODE	5:50	5:50	6	)
LEAF_NODE	5:51	5:51	4	;
EXPR_STATEMENT	6:1	6:43	3	g_object_get ( media , "manager" , & ret , NULL ) ;
EXPR	6:1	6:1	4	g_object_get ( media , "manager" , & ret , NULL )
FUNCTION_CALL	6:1	6:42	5	g_object_get ( media , "manager" , & ret , NULL )
CALLEE	6:1	6:1	6	g_object_get
LEAF_NODE	6:1	6:1	7	g_object_get
LEAF_NODE	6:13	6:13	6	(
ARGUMENT	6:14	6:14	6	media
FIELD	6:14	6:14	7	media
LEAF_NODE	6:14	6:14	8	media
LEAF_NODE	6:19	6:19	6	,
ARGUMENT	6:21	6:21	6	"manager"
FIELD	6:21	6:21	7	"manager"
LEAF_NODE	6:21	6:21	8	"manager"
LEAF_NODE	6:30	6:30	6	,
ARGUMENT	6:32	6:32	6	& ret
UNARY_EXPR	6:32	6:33	7	& ret
UNARY_OPERATOR	6:32	6:32	8	&
LEAF_NODE	6:32	6:32	9	&
FIELD	6:33	6:33	8	ret
LEAF_NODE	6:33	6:33	9	ret
LEAF_NODE	6:36	6:36	6	,
ARGUMENT	6:38	6:38	6	NULL
FIELD	6:38	6:38	7	NULL
LEAF_NODE	6:38	6:38	8	NULL
LEAF_NODE	6:42	6:42	6	)
LEAF_NODE	6:43	6:43	4	;
JUMP_STATEMENT	7:1	7:11	3	return ret ;
KEYWORD	7:1	7:1	4	return
LEAF_NODE	7:1	7:1	5	return
DESTINATION	7:8	7:8	4	ret
EXPR	7:8	7:8	5	ret
FIELD	7:8	7:8	6	ret
LEAF_NODE	7:8	7:8	7	ret
LEAF_NODE	7:11	7:11	4	;
LEAF_NODE	8:0	8:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	4:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	pidgin_privacy_init
LEAF_NODE	2:0	2:0	3	pidgin_privacy_init
PARAMETER_LIST	2:19	2:24	2	( void )
LEAF_NODE	2:19	2:19	3	(
PARAMETER_DECL	2:20	2:20	3	void
LEAF_NODE	2:20	2:20	4	void
LEAF_NODE	2:24	2:24	3	)
LEAF_NODE	3:0	3:0	2	{
LEAF_NODE	0:0	0:0	2	STATEMENTS
LEAF_NODE	4:0	4:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	16:0	1	
RETURN_TYPE	2:0	2:17	2	PurpleWhiteboard *
TYPE_NAME	2:0	2:0	3	PurpleWhiteboard
LEAF_NODE	2:0	2:0	4	PurpleWhiteboard
LEAF_NODE	2:17	2:17	3	*
FUNCTION_NAME	2:18	2:18	2	purple_whiteboard_get_session
LEAF_NODE	2:18	2:18	3	purple_whiteboard_get_session
PARAMETER_LIST	2:47	2:93	2	( const PurpleAccount * account , const char * who )
LEAF_NODE	2:47	2:47	3	(
PARAMETER_DECL	2:48	2:69	3	const PurpleAccount * account
TYPE	2:48	2:68	4	const PurpleAccount *
TYPE_NAME	2:48	2:54	5	const PurpleAccount
LEAF_NODE	2:48	2:48	6	const
LEAF_NODE	2:54	2:54	6	PurpleAccount
POINTER	2:68	2:68	5	*
LEAF_NODE	2:68	2:68	6	*
NAME	2:69	2:69	4	account
LEAF_NODE	2:69	2:69	5	account
LEAF_NODE	2:76	2:76	3	,
PARAMETER_DECL	2:78	2:90	3	const char * who
TYPE	2:78	2:89	4	const char *
TYPE_NAME	2:78	2:84	5	const char
LEAF_NODE	2:78	2:78	6	const
LEAF_NODE	2:84	2:84	6	char
POINTER	2:89	2:89	5	*
LEAF_NODE	2:89	2:89	6	*
NAME	2:90	2:90	4	who
LEAF_NODE	2:90	2:90	5	who
LEAF_NODE	2:93	2:93	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	15:1	2	
SIMPLE_DECL	4:1	4:21	3	PurpleWhiteboard * wb ;
VAR_DECL	4:1	4:19	4	PurpleWhiteboard * wb
TYPE	4:1	4:18	5	PurpleWhiteboard *
TYPE_NAME	4:1	4:1	6	PurpleWhiteboard
LEAF_NODE	4:1	4:1	7	PurpleWhiteboard
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	wb
LEAF_NODE	4:19	4:19	6	wb
LEAF_NODE	4:21	4:21	4	;
SIMPLE_DECL	5:1	5:18	3	GList * l ; l = wbList ;
VAR_DECL	5:1	5:8	4	GList * l ; l = wbList
TYPE	5:1	5:7	5	GList *
TYPE_NAME	5:1	5:1	6	GList
LEAF_NODE	5:1	5:1	7	GList
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	l
LEAF_NODE	5:8	5:8	6	l
LEAF_NODE	0:0	0:0	5	;
INIT	5:8	5:8	5	l = wbList
ASSIGN	5:8	5:12	6	l = wbList
LVAL	5:8	5:8	7	l
NAME	5:8	5:8	8	l
LEAF_NODE	5:8	5:8	9	l
ASSIGN_OP	5:10	5:10	7	=
LEAF_NODE	5:10	5:10	8	=
RVAL	5:12	5:12	7	wbList
FIELD	5:12	5:12	8	wbList
LEAF_NODE	5:12	5:12	9	wbList
LEAF_NODE	5:18	5:18	4	;
ITERATION	8:1	9:1	3	
KEYWORD	8:1	8:1	4	while
LEAF_NODE	8:1	8:1	5	while
LEAF_NODE	8:6	8:6	4	(
CONDITION	8:7	8:7	4	l != NULL
EXPR	8:7	8:12	5	l != NULL
FIELD	8:7	8:7	6	l
LEAF_NODE	8:7	8:7	7	l
EQ_OPERATOR	8:9	8:9	6	!=
LEAF_NODE	8:9	8:9	7	!=
FIELD	8:12	8:12	6	NULL
LEAF_NODE	8:12	8:12	7	NULL
LEAF_NODE	8:16	8:16	4	)
STATEMENTS	9:1	14:1	4	
LEAF_NODE	9:1	9:1	5	{
STATEMENTS	10:2	13:2	5	
EXPR_STATEMENT	10:2	10:14	6	wb = l -> data ;
EXPR	10:2	10:2	7	wb = l -> data
ASSIGN	10:2	10:7	8	wb = l -> data
LVAL	10:2	10:2	9	wb
FIELD	10:2	10:2	10	wb
LEAF_NODE	10:2	10:2	11	wb
ASSIGN_OP	10:5	10:5	9	=
LEAF_NODE	10:5	10:5	10	=
RVAL	10:7	10:7	9	l -> data
FIELD	10:7	10:10	10	l -> data
LEAF_NODE	10:7	10:7	11	l
LEAF_NODE	10:8	10:8	11	->
LEAF_NODE	10:10	10:10	11	data
LEAF_NODE	10:14	10:14	7	;
SELECTION	11:2	12:3	6	
KEYWORD	11:2	11:2	7	if
LEAF_NODE	11:2	11:2	8	if
LEAF_NODE	11:4	11:4	7	(
CONDITION	11:5	11:5	7	wb -> account == account && purple_strequal ( wb -> who , who )
EXPR	11:5	11:5	8	wb -> account == account && purple_strequal ( wb -> who , who )
AND	11:5	11:31	9	wb -> account == account && purple_strequal ( wb -> who , who )
EXPR	11:5	11:20	10	wb -> account == account
FIELD	11:5	11:9	11	wb -> account
LEAF_NODE	11:5	11:5	12	wb
LEAF_NODE	11:7	11:7	12	->
LEAF_NODE	11:9	11:9	12	account
EQ_OPERATOR	11:17	11:17	11	==
LEAF_NODE	11:17	11:17	12	==
FIELD	11:20	11:20	11	account
LEAF_NODE	11:20	11:20	12	account
LEAF_NODE	11:28	11:28	10	&&
EXPR	11:31	11:31	10	purple_strequal ( wb -> who , who )
FUNCTION_CALL	11:31	11:59	11	purple_strequal ( wb -> who , who )
CALLEE	11:31	11:31	12	purple_strequal
LEAF_NODE	11:31	11:31	13	purple_strequal
LEAF_NODE	11:46	11:46	12	(
ARGUMENT	11:47	11:47	12	wb -> who
FIELD	11:47	11:51	13	wb -> who
LEAF_NODE	11:47	11:47	14	wb
LEAF_NODE	11:49	11:49	14	->
LEAF_NODE	11:51	11:51	14	who
LEAF_NODE	11:54	11:54	12	,
ARGUMENT	11:56	11:56	12	who
FIELD	11:56	11:56	13	who
LEAF_NODE	11:56	11:56	14	who
LEAF_NODE	11:59	11:59	12	)
LEAF_NODE	11:60	11:60	7	)
STATEMENTS	12:3	12:3	7	
JUMP_STATEMENT	12:3	12:12	8	return wb ;
KEYWORD	12:3	12:3	9	return
LEAF_NODE	12:3	12:3	10	return
DESTINATION	12:10	12:10	9	wb
EXPR	12:10	12:10	10	wb
FIELD	12:10	12:10	11	wb
LEAF_NODE	12:10	12:10	12	wb
LEAF_NODE	12:12	12:12	9	;
EXPR_STATEMENT	13:2	13:13	6	l = l -> next ;
EXPR	13:2	13:2	7	l = l -> next
ASSIGN	13:2	13:6	8	l = l -> next
LVAL	13:2	13:2	9	l
FIELD	13:2	13:2	10	l
LEAF_NODE	13:2	13:2	11	l
ASSIGN_OP	13:4	13:4	9	=
LEAF_NODE	13:4	13:4	10	=
RVAL	13:6	13:6	9	l -> next
FIELD	13:6	13:9	10	l -> next
LEAF_NODE	13:6	13:6	11	l
LEAF_NODE	13:7	13:7	11	->
LEAF_NODE	13:9	13:9	11	next
LEAF_NODE	13:13	13:13	7	;
LEAF_NODE	14:1	14:1	5	}
JUMP_STATEMENT	15:1	15:12	3	return NULL ;
KEYWORD	15:1	15:1	4	return
LEAF_NODE	15:1	15:1	5	return
DESTINATION	15:8	15:8	4	NULL
EXPR	15:8	15:8	5	NULL
FIELD	15:8	15:8	6	NULL
LEAF_NODE	15:8	15:8	7	NULL
LEAF_NODE	15:12	15:12	4	;
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	10:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	toggle_enabled
LEAF_NODE	2:0	2:0	3	toggle_enabled
PARAMETER_LIST	2:14	2:47	2	( GtkWidget * widget , gpointer data )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:26	3	GtkWidget * widget
TYPE	2:15	2:25	4	GtkWidget *
TYPE_NAME	2:15	2:15	5	GtkWidget
LEAF_NODE	2:15	2:15	6	GtkWidget
POINTER	2:25	2:25	5	*
LEAF_NODE	2:25	2:25	6	*
NAME	2:26	2:26	4	widget
LEAF_NODE	2:26	2:26	5	widget
LEAF_NODE	2:32	2:32	3	,
PARAMETER_DECL	2:34	2:43	3	gpointer data
TYPE	2:34	2:34	4	gpointer
TYPE_NAME	2:34	2:34	5	gpointer
LEAF_NODE	2:34	2:34	6	gpointer
NAME	2:43	2:43	4	data
LEAF_NODE	2:43	2:43	5	data
LEAF_NODE	2:47	2:47	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:34	3	const char * prefix ; prefix = ( char * ) data ;
VAR_DECL	4:1	4:13	4	const char * prefix ; prefix = ( char * ) data
TYPE	4:1	4:12	5	const char *
TYPE_NAME	4:1	4:7	6	const char
LEAF_NODE	4:1	4:1	7	const
LEAF_NODE	4:7	4:7	7	char
POINTER	4:12	4:12	6	*
LEAF_NODE	4:12	4:12	7	*
NAME	4:13	4:13	5	prefix
LEAF_NODE	4:13	4:13	6	prefix
LEAF_NODE	0:0	0:0	5	;
INIT	4:13	4:13	5	prefix = ( char * ) data
ASSIGN	4:13	4:22	6	prefix = ( char * ) data
LVAL	4:13	4:13	7	prefix
NAME	4:13	4:13	8	prefix
LEAF_NODE	4:13	4:13	9	prefix
ASSIGN_OP	4:20	4:20	7	=
LEAF_NODE	4:20	4:20	8	=
RVAL	4:22	4:30	7	( char * ) data
LEAF_NODE	4:22	4:22	8	(
TYPE_NAME	4:23	4:23	8	char
LEAF_NODE	4:23	4:23	9	char
LEAF_NODE	4:28	4:28	8	*
LEAF_NODE	4:29	4:29	8	)
FIELD	4:30	4:30	8	data
LEAF_NODE	4:30	4:30	9	data
LEAF_NODE	4:34	4:34	4	;
SIMPLE_DECL	5:1	5:11	3	gboolean e ;
VAR_DECL	5:1	5:10	4	gboolean e
TYPE	5:1	5:1	5	gboolean
TYPE_NAME	5:1	5:1	6	gboolean
LEAF_NODE	5:1	5:1	7	gboolean
NAME	5:10	5:10	5	e
LEAF_NODE	5:10	5:10	6	e
LEAF_NODE	5:11	5:11	4	;
SIMPLE_DECL	6:1	6:14	3	char [ 128 ] tmp ;
VAR_DECL	6:1	6:6	4	char [ 128 ] tmp
TYPE	6:1	6:9	5	char [ 128 ]
TYPE_NAME	6:1	6:1	6	char
LEAF_NODE	6:1	6:1	7	char
TYPE_SUFFIX	6:9	6:13	6	[ 128 ]
LEAF_NODE	6:9	6:9	7	[
FIELD	6:10	6:10	7	128
LEAF_NODE	6:10	6:10	8	128
LEAF_NODE	6:13	6:13	7	]
NAME	6:6	6:6	5	tmp
LEAF_NODE	6:6	6:6	6	tmp
LEAF_NODE	6:14	6:14	4	;
EXPR_STATEMENT	7:1	7:51	3	g_snprintf ( tmp , sizeof ( tmp ) , "%s/enabled" , prefix ) ;
EXPR	7:1	7:1	4	g_snprintf ( tmp , sizeof ( tmp ) , "%s/enabled" , prefix )
FUNCTION_CALL	7:1	7:50	5	g_snprintf ( tmp , sizeof ( tmp ) , "%s/enabled" , prefix )
CALLEE	7:1	7:1	6	g_snprintf
LEAF_NODE	7:1	7:1	7	g_snprintf
LEAF_NODE	7:11	7:11	6	(
ARGUMENT	7:12	7:12	6	tmp
FIELD	7:12	7:12	7	tmp
LEAF_NODE	7:12	7:12	8	tmp
LEAF_NODE	7:15	7:15	6	,
ARGUMENT	7:17	7:17	6	sizeof ( tmp )
FUNCTION_CALL	7:17	7:27	7	sizeof ( tmp )
CALLEE	7:17	7:17	8	sizeof
LEAF_NODE	7:17	7:17	9	sizeof
LEAF_NODE	7:23	7:23	8	(
ARGUMENT	7:24	7:24	8	tmp
FIELD	7:24	7:24	9	tmp
LEAF_NODE	7:24	7:24	10	tmp
LEAF_NODE	7:27	7:27	8	)
LEAF_NODE	7:28	7:28	6	,
ARGUMENT	7:30	7:30	6	"%s/enabled"
FIELD	7:30	7:30	7	"%s/enabled"
LEAF_NODE	7:30	7:30	8	"%s/enabled"
LEAF_NODE	7:42	7:42	6	,
ARGUMENT	7:44	7:44	6	prefix
FIELD	7:44	7:44	7	prefix
LEAF_NODE	7:44	7:44	8	prefix
LEAF_NODE	7:50	7:50	6	)
LEAF_NODE	7:51	7:51	4	;
EXPR_STATEMENT	8:1	8:31	3	e = purple_prefs_get_bool ( tmp ) ;
EXPR	8:1	8:1	4	e = purple_prefs_get_bool ( tmp )
ASSIGN	8:1	8:5	5	e = purple_prefs_get_bool ( tmp )
LVAL	8:1	8:1	6	e
FIELD	8:1	8:1	7	e
LEAF_NODE	8:1	8:1	8	e
ASSIGN_OP	8:3	8:3	6	=
LEAF_NODE	8:3	8:3	7	=
RVAL	8:5	8:5	6	purple_prefs_get_bool ( tmp )
FUNCTION_CALL	8:5	8:30	7	purple_prefs_get_bool ( tmp )
CALLEE	8:5	8:5	8	purple_prefs_get_bool
LEAF_NODE	8:5	8:5	9	purple_prefs_get_bool
LEAF_NODE	8:26	8:26	8	(
ARGUMENT	8:27	8:27	8	tmp
FIELD	8:27	8:27	9	tmp
LEAF_NODE	8:27	8:27	10	tmp
LEAF_NODE	8:30	8:30	8	)
LEAF_NODE	8:31	8:31	4	;
EXPR_STATEMENT	9:1	9:31	3	purple_prefs_set_bool ( tmp , ! e ) ;
EXPR	9:1	9:1	4	purple_prefs_set_bool ( tmp , ! e )
FUNCTION_CALL	9:1	9:30	5	purple_prefs_set_bool ( tmp , ! e )
CALLEE	9:1	9:1	6	purple_prefs_set_bool
LEAF_NODE	9:1	9:1	7	purple_prefs_set_bool
LEAF_NODE	9:22	9:22	6	(
ARGUMENT	9:23	9:23	6	tmp
FIELD	9:23	9:23	7	tmp
LEAF_NODE	9:23	9:23	8	tmp
LEAF_NODE	9:26	9:26	6	,
ARGUMENT	9:28	9:28	6	! e
UNARY_EXPR	9:28	9:29	7	! e
UNARY_OPERATOR	9:28	9:28	8	!
LEAF_NODE	9:28	9:28	9	!
FIELD	9:29	9:29	8	e
LEAF_NODE	9:29	9:29	9	e
LEAF_NODE	9:30	9:30	6	)
LEAF_NODE	9:31	9:31	4	;
LEAF_NODE	10:0	10:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	139:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	msn_slplink_process_msg
LEAF_NODE	2:0	2:0	3	msn_slplink_process_msg
PARAMETER_LIST	2:23	2:60	2	( MsnSlpLink * slplink , MsnMessage * msg )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:36	3	MsnSlpLink * slplink
TYPE	2:24	2:35	4	MsnSlpLink *
TYPE_NAME	2:24	2:24	5	MsnSlpLink
LEAF_NODE	2:24	2:24	6	MsnSlpLink
POINTER	2:35	2:35	5	*
LEAF_NODE	2:35	2:35	6	*
NAME	2:36	2:36	4	slplink
LEAF_NODE	2:36	2:36	5	slplink
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:57	3	MsnMessage * msg
TYPE	2:45	2:56	4	MsnMessage *
TYPE_NAME	2:45	2:45	5	MsnMessage
LEAF_NODE	2:45	2:45	6	MsnMessage
POINTER	2:56	2:56	5	*
LEAF_NODE	2:56	2:56	6	*
NAME	2:57	2:57	4	msg
LEAF_NODE	2:57	2:57	5	msg
LEAF_NODE	2:60	2:60	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	112:1	2	
SIMPLE_DECL	4:1	4:22	3	MsnSlpMessage * slpmsg ;
VAR_DECL	4:1	4:16	4	MsnSlpMessage * slpmsg
TYPE	4:1	4:15	5	MsnSlpMessage *
TYPE_NAME	4:1	4:1	6	MsnSlpMessage
LEAF_NODE	4:1	4:1	7	MsnSlpMessage
POINTER	4:15	4:15	6	*
LEAF_NODE	4:15	4:15	7	*
NAME	4:16	4:16	5	slpmsg
LEAF_NODE	4:16	4:16	6	slpmsg
LEAF_NODE	4:22	4:22	4	;
SIMPLE_DECL	5:1	5:17	3	const char * data ;
VAR_DECL	5:1	5:13	4	const char * data
TYPE	5:1	5:12	5	const char *
TYPE_NAME	5:1	5:7	6	const char
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	char
POINTER	5:12	5:12	6	*
LEAF_NODE	5:12	5:12	7	*
NAME	5:13	5:13	5	data
LEAF_NODE	5:13	5:13	6	data
LEAF_NODE	5:17	5:17	4	;
SIMPLE_DECL	6:1	6:13	3	gsize offset ;
VAR_DECL	6:1	6:7	4	gsize offset
TYPE	6:1	6:1	5	gsize
TYPE_NAME	6:1	6:1	6	gsize
LEAF_NODE	6:1	6:1	7	gsize
NAME	6:7	6:7	5	offset
LEAF_NODE	6:7	6:7	6	offset
LEAF_NODE	6:13	6:13	4	;
SIMPLE_DECL	7:1	7:10	3	gsize len ;
VAR_DECL	7:1	7:7	4	gsize len
TYPE	7:1	7:1	5	gsize
TYPE_NAME	7:1	7:1	6	gsize
LEAF_NODE	7:1	7:1	7	gsize
NAME	7:7	7:7	5	len
LEAF_NODE	7:7	7:7	6	len
LEAF_NODE	7:10	7:10	4	;
EXPR_STATEMENT	9:1	9:21	3	msn_slpmsg_show ( msg ) ;
EXPR	9:1	9:1	4	msn_slpmsg_show ( msg )
FUNCTION_CALL	9:1	9:20	5	msn_slpmsg_show ( msg )
CALLEE	9:1	9:1	6	msn_slpmsg_show
LEAF_NODE	9:1	9:1	7	msn_slpmsg_show
LEAF_NODE	9:16	9:16	6	(
ARGUMENT	9:17	9:17	6	msg
FIELD	9:17	9:17	7	msg
LEAF_NODE	9:17	9:17	8	msg
LEAF_NODE	9:20	9:20	6	)
LEAF_NODE	9:21	9:21	4	;
EXPR_STATEMENT	12:1	12:30	3	debug_msg_to_file ( msg , FALSE ) ;
EXPR	12:1	12:1	4	debug_msg_to_file ( msg , FALSE )
FUNCTION_CALL	12:1	12:29	5	debug_msg_to_file ( msg , FALSE )
CALLEE	12:1	12:1	6	debug_msg_to_file
LEAF_NODE	12:1	12:1	7	debug_msg_to_file
LEAF_NODE	12:18	12:18	6	(
ARGUMENT	12:19	12:19	6	msg
FIELD	12:19	12:19	7	msg
LEAF_NODE	12:19	12:19	8	msg
LEAF_NODE	12:22	12:22	6	,
ARGUMENT	12:24	12:24	6	FALSE
FIELD	12:24	12:24	7	FALSE
LEAF_NODE	12:24	12:24	8	FALSE
LEAF_NODE	12:29	12:29	6	)
LEAF_NODE	12:30	12:30	4	;
SELECTION	14:1	15:1	3	
KEYWORD	14:1	14:1	4	if
LEAF_NODE	14:1	14:1	5	if
LEAF_NODE	14:4	14:4	4	(
CONDITION	14:5	14:5	4	msg -> msnslp_header . total_size < msg -> msnslp_header . length
EXPR	14:5	14:37	5	msg -> msnslp_header . total_size < msg -> msnslp_header . length
FIELD	14:5	14:24	6	msg -> msnslp_header . total_size
LEAF_NODE	14:5	14:5	7	msg
LEAF_NODE	14:8	14:8	7	->
LEAF_NODE	14:10	14:10	7	msnslp_header
LEAF_NODE	14:23	14:23	7	.
LEAF_NODE	14:24	14:24	7	total_size
REL_OPERATOR	14:35	14:35	6	<
LEAF_NODE	14:35	14:35	7	<
FIELD	14:37	14:56	6	msg -> msnslp_header . length
LEAF_NODE	14:37	14:37	7	msg
LEAF_NODE	14:40	14:40	7	->
LEAF_NODE	14:42	14:42	7	msnslp_header
LEAF_NODE	14:55	14:55	7	.
LEAF_NODE	14:56	14:56	7	length
LEAF_NODE	14:62	14:62	4	)
STATEMENTS	15:1	18:1	4	
LEAF_NODE	15:1	15:1	5	{
STATEMENTS	16:2	17:2	5	
EXPR_STATEMENT	16:2	16:51	6	purple_debug_error ( "msn" , "This can't be good\n" ) ;
EXPR	16:2	16:2	7	purple_debug_error ( "msn" , "This can't be good\n" )
FUNCTION_CALL	16:2	16:50	8	purple_debug_error ( "msn" , "This can't be good\n" )
CALLEE	16:2	16:2	9	purple_debug_error
LEAF_NODE	16:2	16:2	10	purple_debug_error
LEAF_NODE	16:20	16:20	9	(
ARGUMENT	16:21	16:21	9	"msn"
FIELD	16:21	16:21	10	"msn"
LEAF_NODE	16:21	16:21	11	"msn"
LEAF_NODE	16:26	16:26	9	,
ARGUMENT	16:28	16:28	9	"This can't be good\n"
FIELD	16:28	16:28	10	"This can't be good\n"
LEAF_NODE	16:28	16:28	11	"This can't be good\n"
LEAF_NODE	16:50	16:50	9	)
LEAF_NODE	16:51	16:51	7	;
EXPR_STATEMENT	17:2	17:23	6	g_return_if_reached ( ) ;
EXPR	17:2	17:2	7	g_return_if_reached ( )
FUNCTION_CALL	17:2	17:22	8	g_return_if_reached ( )
CALLEE	17:2	17:2	9	g_return_if_reached
LEAF_NODE	17:2	17:2	10	g_return_if_reached
LEAF_NODE	17:21	17:21	9	(
LEAF_NODE	17:22	17:22	9	)
LEAF_NODE	17:23	17:23	7	;
LEAF_NODE	18:1	18:1	5	}
EXPR_STATEMENT	19:1	19:14	3	slpmsg = NULL ;
EXPR	19:1	19:1	4	slpmsg = NULL
ASSIGN	19:1	19:10	5	slpmsg = NULL
LVAL	19:1	19:1	6	slpmsg
FIELD	19:1	19:1	7	slpmsg
LEAF_NODE	19:1	19:1	8	slpmsg
ASSIGN_OP	19:8	19:8	6	=
LEAF_NODE	19:8	19:8	7	=
RVAL	19:10	19:10	6	NULL
FIELD	19:10	19:10	7	NULL
LEAF_NODE	19:10	19:10	8	NULL
LEAF_NODE	19:14	19:14	4	;
EXPR_STATEMENT	20:1	20:43	3	data = msn_message_get_bin_data ( msg , & len ) ;
EXPR	20:1	20:1	4	data = msn_message_get_bin_data ( msg , & len )
ASSIGN	20:1	20:8	5	data = msn_message_get_bin_data ( msg , & len )
LVAL	20:1	20:1	6	data
FIELD	20:1	20:1	7	data
LEAF_NODE	20:1	20:1	8	data
ASSIGN_OP	20:6	20:6	6	=
LEAF_NODE	20:6	20:6	7	=
RVAL	20:8	20:8	6	msn_message_get_bin_data ( msg , & len )
FUNCTION_CALL	20:8	20:42	7	msn_message_get_bin_data ( msg , & len )
CALLEE	20:8	20:8	8	msn_message_get_bin_data
LEAF_NODE	20:8	20:8	9	msn_message_get_bin_data
LEAF_NODE	20:32	20:32	8	(
ARGUMENT	20:33	20:33	8	msg
FIELD	20:33	20:33	9	msg
LEAF_NODE	20:33	20:33	10	msg
LEAF_NODE	20:36	20:36	8	,
ARGUMENT	20:38	20:38	8	& len
UNARY_EXPR	20:38	20:39	9	& len
UNARY_OPERATOR	20:38	20:38	10	&
LEAF_NODE	20:38	20:38	11	&
FIELD	20:39	20:39	10	len
LEAF_NODE	20:39	20:39	11	len
LEAF_NODE	20:42	20:42	8	)
LEAF_NODE	20:43	20:43	4	;
EXPR_STATEMENT	25:1	25:35	3	offset = msg -> msnslp_header . offset ;
EXPR	25:1	25:1	4	offset = msg -> msnslp_header . offset
ASSIGN	25:1	25:10	5	offset = msg -> msnslp_header . offset
LVAL	25:1	25:1	6	offset
FIELD	25:1	25:1	7	offset
LEAF_NODE	25:1	25:1	8	offset
ASSIGN_OP	25:8	25:8	6	=
LEAF_NODE	25:8	25:8	7	=
RVAL	25:10	25:10	6	msg -> msnslp_header . offset
FIELD	25:10	25:29	7	msg -> msnslp_header . offset
LEAF_NODE	25:10	25:10	8	msg
LEAF_NODE	25:13	25:13	8	->
LEAF_NODE	25:15	25:15	8	msnslp_header
LEAF_NODE	25:28	25:28	8	.
LEAF_NODE	25:29	25:29	8	offset
LEAF_NODE	25:35	25:35	4	;
SELECTION	26:1	27:1	3	
KEYWORD	26:1	26:1	4	if
LEAF_NODE	26:1	26:1	5	if
LEAF_NODE	26:4	26:4	4	(
CONDITION	26:5	26:5	4	offset == 0
EXPR	26:5	26:15	5	offset == 0
FIELD	26:5	26:5	6	offset
LEAF_NODE	26:5	26:5	7	offset
EQ_OPERATOR	26:12	26:12	6	==
LEAF_NODE	26:12	26:12	7	==
FIELD	26:15	26:15	6	0
LEAF_NODE	26:15	26:15	7	0
LEAF_NODE	26:16	26:16	4	)
STATEMENTS	27:1	69:1	4	
LEAF_NODE	27:1	27:1	5	{
STATEMENTS	28:2	60:2	5	
EXPR_STATEMENT	28:2	28:34	6	slpmsg = msn_slpmsg_new ( slplink ) ;
EXPR	28:2	28:2	7	slpmsg = msn_slpmsg_new ( slplink )
ASSIGN	28:2	28:11	8	slpmsg = msn_slpmsg_new ( slplink )
LVAL	28:2	28:2	9	slpmsg
FIELD	28:2	28:2	10	slpmsg
LEAF_NODE	28:2	28:2	11	slpmsg
ASSIGN_OP	28:9	28:9	9	=
LEAF_NODE	28:9	28:9	10	=
RVAL	28:11	28:11	9	msn_slpmsg_new ( slplink )
FUNCTION_CALL	28:11	28:33	10	msn_slpmsg_new ( slplink )
CALLEE	28:11	28:11	11	msn_slpmsg_new
LEAF_NODE	28:11	28:11	12	msn_slpmsg_new
LEAF_NODE	28:25	28:25	11	(
ARGUMENT	28:26	28:26	11	slplink
FIELD	28:26	28:26	12	slplink
LEAF_NODE	28:26	28:26	13	slplink
LEAF_NODE	28:33	28:33	11	)
LEAF_NODE	28:34	28:34	7	;
EXPR_STATEMENT	29:2	29:36	6	slpmsg -> id = msg -> msnslp_header . id ;
EXPR	29:2	29:2	7	slpmsg -> id = msg -> msnslp_header . id
ASSIGN	29:2	29:15	8	slpmsg -> id = msg -> msnslp_header . id
LVAL	29:2	29:2	9	slpmsg -> id
FIELD	29:2	29:10	10	slpmsg -> id
LEAF_NODE	29:2	29:2	11	slpmsg
LEAF_NODE	29:8	29:8	11	->
LEAF_NODE	29:10	29:10	11	id
ASSIGN_OP	29:13	29:13	9	=
LEAF_NODE	29:13	29:13	10	=
RVAL	29:15	29:15	9	msg -> msnslp_header . id
FIELD	29:15	29:34	10	msg -> msnslp_header . id
LEAF_NODE	29:15	29:15	11	msg
LEAF_NODE	29:18	29:18	11	->
LEAF_NODE	29:20	29:20	11	msnslp_header
LEAF_NODE	29:33	29:33	11	.
LEAF_NODE	29:34	29:34	11	id
LEAF_NODE	29:36	29:36	7	;
EXPR_STATEMENT	30:2	30:52	6	slpmsg -> session_id = msg -> msnslp_header . session_id ;
EXPR	30:2	30:2	7	slpmsg -> session_id = msg -> msnslp_header . session_id
ASSIGN	30:2	30:23	8	slpmsg -> session_id = msg -> msnslp_header . session_id
LVAL	30:2	30:2	9	slpmsg -> session_id
FIELD	30:2	30:10	10	slpmsg -> session_id
LEAF_NODE	30:2	30:2	11	slpmsg
LEAF_NODE	30:8	30:8	11	->
LEAF_NODE	30:10	30:10	11	session_id
ASSIGN_OP	30:21	30:21	9	=
LEAF_NODE	30:21	30:21	10	=
RVAL	30:23	30:23	9	msg -> msnslp_header . session_id
FIELD	30:23	30:42	10	msg -> msnslp_header . session_id
LEAF_NODE	30:23	30:23	11	msg
LEAF_NODE	30:26	30:26	11	->
LEAF_NODE	30:28	30:28	11	msnslp_header
LEAF_NODE	30:41	30:41	11	.
LEAF_NODE	30:42	30:42	11	session_id
LEAF_NODE	30:52	30:52	7	;
EXPR_STATEMENT	31:2	31:46	6	slpmsg -> size = msg -> msnslp_header . total_size ;
EXPR	31:2	31:2	7	slpmsg -> size = msg -> msnslp_header . total_size
ASSIGN	31:2	31:17	8	slpmsg -> size = msg -> msnslp_header . total_size
LVAL	31:2	31:2	9	slpmsg -> size
FIELD	31:2	31:10	10	slpmsg -> size
LEAF_NODE	31:2	31:2	11	slpmsg
LEAF_NODE	31:8	31:8	11	->
LEAF_NODE	31:10	31:10	11	size
ASSIGN_OP	31:15	31:15	9	=
LEAF_NODE	31:15	31:15	10	=
RVAL	31:17	31:17	9	msg -> msnslp_header . total_size
FIELD	31:17	31:36	10	msg -> msnslp_header . total_size
LEAF_NODE	31:17	31:17	11	msg
LEAF_NODE	31:20	31:20	11	->
LEAF_NODE	31:22	31:22	11	msnslp_header
LEAF_NODE	31:35	31:35	11	.
LEAF_NODE	31:36	31:36	11	total_size
LEAF_NODE	31:46	31:46	7	;
EXPR_STATEMENT	32:2	32:42	6	slpmsg -> flags = msg -> msnslp_header . flags ;
EXPR	32:2	32:2	7	slpmsg -> flags = msg -> msnslp_header . flags
ASSIGN	32:2	32:18	8	slpmsg -> flags = msg -> msnslp_header . flags
LVAL	32:2	32:2	9	slpmsg -> flags
FIELD	32:2	32:10	10	slpmsg -> flags
LEAF_NODE	32:2	32:2	11	slpmsg
LEAF_NODE	32:8	32:8	11	->
LEAF_NODE	32:10	32:10	11	flags
ASSIGN_OP	32:16	32:16	9	=
LEAF_NODE	32:16	32:16	10	=
RVAL	32:18	32:18	9	msg -> msnslp_header . flags
FIELD	32:18	32:37	10	msg -> msnslp_header . flags
LEAF_NODE	32:18	32:18	11	msg
LEAF_NODE	32:21	32:21	11	->
LEAF_NODE	32:23	32:23	11	msnslp_header
LEAF_NODE	32:36	32:36	11	.
LEAF_NODE	32:37	32:37	11	flags
LEAF_NODE	32:42	32:42	7	;
SELECTION	33:2	34:2	6	
KEYWORD	33:2	33:2	7	if
LEAF_NODE	33:2	33:2	8	if
LEAF_NODE	33:5	33:5	7	(
CONDITION	33:6	33:6	7	slpmsg -> session_id
EXPR	33:6	33:6	8	slpmsg -> session_id
FIELD	33:6	33:14	9	slpmsg -> session_id
LEAF_NODE	33:6	33:6	10	slpmsg
LEAF_NODE	33:12	33:12	10	->
LEAF_NODE	33:14	33:14	10	session_id
LEAF_NODE	33:24	33:24	7	)
STATEMENTS	34:2	59:2	7	
LEAF_NODE	34:2	34:2	8	{
STATEMENTS	35:3	37:3	8	
SELECTION	35:3	36:4	9	
KEYWORD	35:3	35:3	10	if
LEAF_NODE	35:3	35:3	11	if
LEAF_NODE	35:6	35:6	10	(
CONDITION	35:7	35:7	10	slpmsg -> slpcall == NULL
EXPR	35:7	35:26	11	slpmsg -> slpcall == NULL
FIELD	35:7	35:15	12	slpmsg -> slpcall
LEAF_NODE	35:7	35:7	13	slpmsg
LEAF_NODE	35:13	35:13	13	->
LEAF_NODE	35:15	35:15	13	slpcall
EQ_OPERATOR	35:23	35:23	12	==
LEAF_NODE	35:23	35:23	13	==
FIELD	35:26	35:26	12	NULL
LEAF_NODE	35:26	35:26	13	NULL
LEAF_NODE	35:30	35:30	10	)
STATEMENTS	36:4	36:4	10	
EXPR_STATEMENT	36:4	36:92	11	slpmsg -> slpcall = msn_slplink_find_slp_call_with_session_id ( slplink , slpmsg -> session_id ) ;
EXPR	36:4	36:4	12	slpmsg -> slpcall = msn_slplink_find_slp_call_with_session_id ( slplink , slpmsg -> session_id )
ASSIGN	36:4	36:22	13	slpmsg -> slpcall = msn_slplink_find_slp_call_with_session_id ( slplink , slpmsg -> session_id )
LVAL	36:4	36:4	14	slpmsg -> slpcall
FIELD	36:4	36:12	15	slpmsg -> slpcall
LEAF_NODE	36:4	36:4	16	slpmsg
LEAF_NODE	36:10	36:10	16	->
LEAF_NODE	36:12	36:12	16	slpcall
ASSIGN_OP	36:20	36:20	14	=
LEAF_NODE	36:20	36:20	15	=
RVAL	36:22	36:22	14	msn_slplink_find_slp_call_with_session_id ( slplink , slpmsg -> session_id )
FUNCTION_CALL	36:22	36:91	15	msn_slplink_find_slp_call_with_session_id ( slplink , slpmsg -> session_id )
CALLEE	36:22	36:22	16	msn_slplink_find_slp_call_with_session_id
LEAF_NODE	36:22	36:22	17	msn_slplink_find_slp_call_with_session_id
LEAF_NODE	36:63	36:63	16	(
ARGUMENT	36:64	36:64	16	slplink
FIELD	36:64	36:64	17	slplink
LEAF_NODE	36:64	36:64	18	slplink
LEAF_NODE	36:71	36:71	16	,
ARGUMENT	36:73	36:73	16	slpmsg -> session_id
FIELD	36:73	36:81	17	slpmsg -> session_id
LEAF_NODE	36:73	36:73	18	slpmsg
LEAF_NODE	36:79	36:79	18	->
LEAF_NODE	36:81	36:81	18	session_id
LEAF_NODE	36:91	36:91	16	)
LEAF_NODE	36:92	36:92	12	;
SELECTION	37:3	38:3	9	
KEYWORD	37:3	37:3	10	if
LEAF_NODE	37:3	37:3	11	if
LEAF_NODE	37:6	37:6	10	(
CONDITION	37:7	37:7	10	slpmsg -> slpcall != NULL
EXPR	37:7	37:26	11	slpmsg -> slpcall != NULL
FIELD	37:7	37:15	12	slpmsg -> slpcall
LEAF_NODE	37:7	37:7	13	slpmsg
LEAF_NODE	37:13	37:13	13	->
LEAF_NODE	37:15	37:15	13	slpcall
EQ_OPERATOR	37:23	37:23	12	!=
LEAF_NODE	37:23	37:23	13	!=
FIELD	37:26	37:26	12	NULL
LEAF_NODE	37:26	37:26	13	NULL
LEAF_NODE	37:30	37:30	10	)
STATEMENTS	38:3	58:3	10	
LEAF_NODE	38:3	38:3	11	{
STATEMENTS	39:4	39:4	11	
SELECTION	39:4	41:4	12	
KEYWORD	39:4	39:4	13	if
LEAF_NODE	39:4	39:4	14	if
LEAF_NODE	39:7	39:7	13	(
CONDITION	39:8	39:8	13	slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
EXPR	39:8	39:8	14	slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
OR	39:8	40:8	15	slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
EXPR	39:8	39:25	16	slpmsg -> flags == 0x20
FIELD	39:8	39:16	17	slpmsg -> flags
LEAF_NODE	39:8	39:8	18	slpmsg
LEAF_NODE	39:14	39:14	18	->
LEAF_NODE	39:16	39:16	18	flags
EQ_OPERATOR	39:22	39:22	17	==
LEAF_NODE	39:22	39:22	18	==
FIELD	39:25	39:25	17	0x20
LEAF_NODE	39:25	39:25	18	0x20
LEAF_NODE	39:30	39:30	16	||
EXPR	40:8	40:8	16	slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
OR	40:8	40:38	17	slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
EXPR	40:8	40:25	18	slpmsg -> flags == 0x1000020
FIELD	40:8	40:16	19	slpmsg -> flags
LEAF_NODE	40:8	40:8	20	slpmsg
LEAF_NODE	40:14	40:14	20	->
LEAF_NODE	40:16	40:16	20	flags
EQ_OPERATOR	40:22	40:22	19	==
LEAF_NODE	40:22	40:22	20	==
FIELD	40:25	40:25	19	0x1000020
LEAF_NODE	40:25	40:25	20	0x1000020
LEAF_NODE	40:35	40:35	18	||
EXPR	40:38	40:55	18	slpmsg -> flags == 0x1000030
FIELD	40:38	40:46	19	slpmsg -> flags
LEAF_NODE	40:38	40:38	20	slpmsg
LEAF_NODE	40:44	40:44	20	->
LEAF_NODE	40:46	40:46	20	flags
EQ_OPERATOR	40:52	40:52	19	==
LEAF_NODE	40:52	40:52	20	==
FIELD	40:55	40:55	19	0x1000030
LEAF_NODE	40:55	40:55	20	0x1000030
LEAF_NODE	40:64	40:64	13	)
STATEMENTS	41:4	57:4	13	
LEAF_NODE	41:4	41:4	14	{
STATEMENTS	42:5	44:5	14	
SIMPLE_DECL	42:5	42:21	15	PurpleXfer * xfer ;
VAR_DECL	42:5	42:17	16	PurpleXfer * xfer
TYPE	42:5	42:16	17	PurpleXfer *
TYPE_NAME	42:5	42:5	18	PurpleXfer
LEAF_NODE	42:5	42:5	19	PurpleXfer
POINTER	42:16	42:16	18	*
LEAF_NODE	42:16	42:16	19	*
NAME	42:17	42:17	17	xfer
LEAF_NODE	42:17	42:17	18	xfer
LEAF_NODE	42:21	42:21	16	;
EXPR_STATEMENT	43:5	43:33	15	xfer = slpmsg -> slpcall -> xfer ;
EXPR	43:5	43:5	16	xfer = slpmsg -> slpcall -> xfer
ASSIGN	43:5	43:12	17	xfer = slpmsg -> slpcall -> xfer
LVAL	43:5	43:5	18	xfer
FIELD	43:5	43:5	19	xfer
LEAF_NODE	43:5	43:5	20	xfer
ASSIGN_OP	43:10	43:10	18	=
LEAF_NODE	43:10	43:10	19	=
RVAL	43:12	43:12	18	slpmsg -> slpcall -> xfer
FIELD	43:12	43:29	19	slpmsg -> slpcall -> xfer
LEAF_NODE	43:12	43:12	20	slpmsg
LEAF_NODE	43:18	43:18	20	->
LEAF_NODE	43:20	43:20	20	slpcall
LEAF_NODE	43:27	43:27	20	->
LEAF_NODE	43:29	43:29	20	xfer
LEAF_NODE	43:33	43:33	16	;
SELECTION	44:5	45:5	15	
KEYWORD	44:5	44:5	16	if
LEAF_NODE	44:5	44:5	17	if
LEAF_NODE	44:8	44:8	16	(
CONDITION	44:9	44:9	16	xfer != NULL
EXPR	44:9	44:17	17	xfer != NULL
FIELD	44:9	44:9	18	xfer
LEAF_NODE	44:9	44:9	19	xfer
EQ_OPERATOR	44:14	44:14	18	!=
LEAF_NODE	44:14	44:14	19	!=
FIELD	44:17	44:17	18	NULL
LEAF_NODE	44:17	44:17	19	NULL
LEAF_NODE	44:21	44:21	16	)
STATEMENTS	45:5	56:5	16	
LEAF_NODE	45:5	45:5	17	{
STATEMENTS	46:6	51:8	17	
EXPR_STATEMENT	46:6	46:27	18	purple_xfer_ref ( xfer ) ;
EXPR	46:6	46:6	19	purple_xfer_ref ( xfer )
FUNCTION_CALL	46:6	46:26	20	purple_xfer_ref ( xfer )
CALLEE	46:6	46:6	21	purple_xfer_ref
LEAF_NODE	46:6	46:6	22	purple_xfer_ref
LEAF_NODE	46:21	46:21	21	(
ARGUMENT	46:22	46:22	21	xfer
FIELD	46:22	46:22	22	xfer
LEAF_NODE	46:22	46:22	23	xfer
LEAF_NODE	46:26	46:26	21	)
LEAF_NODE	46:27	46:27	19	;
EXPR_STATEMENT	47:6	47:41	18	purple_xfer_start ( xfer , 0 , NULL , 0 ) ;
EXPR	47:6	47:6	19	purple_xfer_start ( xfer , 0 , NULL , 0 )
FUNCTION_CALL	47:6	47:40	20	purple_xfer_start ( xfer , 0 , NULL , 0 )
CALLEE	47:6	47:6	21	purple_xfer_start
LEAF_NODE	47:6	47:6	22	purple_xfer_start
LEAF_NODE	47:23	47:23	21	(
ARGUMENT	47:24	47:24	21	xfer
FIELD	47:24	47:24	22	xfer
LEAF_NODE	47:24	47:24	23	xfer
LEAF_NODE	47:28	47:28	21	,
ARGUMENT	47:30	47:30	21	0
FIELD	47:30	47:30	22	0
LEAF_NODE	47:30	47:30	23	0
LEAF_NODE	47:31	47:31	21	,
ARGUMENT	47:33	47:33	21	NULL
FIELD	47:33	47:33	22	NULL
LEAF_NODE	47:33	47:33	23	NULL
LEAF_NODE	47:37	47:37	21	,
ARGUMENT	47:39	47:39	21	0
FIELD	47:39	47:39	22	0
LEAF_NODE	47:39	47:39	23	0
LEAF_NODE	47:40	47:40	21	)
LEAF_NODE	47:41	47:41	19	;
SELECTION	48:6	48:30	18	
KEYWORD	48:6	48:6	19	if
LEAF_NODE	48:6	48:6	20	if
LEAF_NODE	48:9	48:9	19	(
CONDITION	48:10	48:10	19	xfer -> data == NULL
EXPR	48:10	48:24	20	xfer -> data == NULL
FIELD	48:10	48:16	21	xfer -> data
LEAF_NODE	48:10	48:10	22	xfer
LEAF_NODE	48:14	48:14	22	->
LEAF_NODE	48:16	48:16	22	data
EQ_OPERATOR	48:21	48:21	21	==
LEAF_NODE	48:21	48:21	22	==
FIELD	48:24	48:24	21	NULL
LEAF_NODE	48:24	48:24	22	NULL
LEAF_NODE	48:28	48:28	19	)
STATEMENTS	48:30	51:6	19	
LEAF_NODE	48:30	48:30	20	{
STATEMENTS	49:7	50:7	20	
EXPR_STATEMENT	49:7	49:30	21	purple_xfer_unref ( xfer ) ;
EXPR	49:7	49:7	22	purple_xfer_unref ( xfer )
FUNCTION_CALL	49:7	49:29	23	purple_xfer_unref ( xfer )
CALLEE	49:7	49:7	24	purple_xfer_unref
LEAF_NODE	49:7	49:7	25	purple_xfer_unref
LEAF_NODE	49:24	49:24	24	(
ARGUMENT	49:25	49:25	24	xfer
FIELD	49:25	49:25	25	xfer
LEAF_NODE	49:25	49:25	26	xfer
LEAF_NODE	49:29	49:29	24	)
LEAF_NODE	49:30	49:30	22	;
JUMP_STATEMENT	50:7	50:13	21	return DESTINATION ;
KEYWORD	50:7	50:7	22	return
LEAF_NODE	50:7	50:7	23	return
LEAF_NODE	0:0	0:0	22	DESTINATION
LEAF_NODE	50:13	50:13	22	;
LEAF_NODE	51:6	51:6	20	}
SELECTION	51:8	51:13	18	
KEYWORD	51:8	51:8	19	else
LEAF_NODE	51:8	51:8	20	else
STATEMENTS	51:13	55:6	19	
LEAF_NODE	51:13	51:13	20	{
STATEMENTS	52:7	54:7	20	
EXPR_STATEMENT	52:7	52:30	21	purple_xfer_unref ( xfer ) ;
EXPR	52:7	52:7	22	purple_xfer_unref ( xfer )
FUNCTION_CALL	52:7	52:29	23	purple_xfer_unref ( xfer )
CALLEE	52:7	52:7	24	purple_xfer_unref
LEAF_NODE	52:7	52:7	25	purple_xfer_unref
LEAF_NODE	52:24	52:24	24	(
ARGUMENT	52:25	52:25	24	xfer
FIELD	52:25	52:25	25	xfer
LEAF_NODE	52:25	52:25	26	xfer
LEAF_NODE	52:29	52:29	24	)
LEAF_NODE	52:30	52:30	22	;
EXPR_STATEMENT	53:7	53:33	21	slpmsg -> fp = xfer -> dest_fp ;
EXPR	53:7	53:7	22	slpmsg -> fp = xfer -> dest_fp
ASSIGN	53:7	53:20	23	slpmsg -> fp = xfer -> dest_fp
LVAL	53:7	53:7	24	slpmsg -> fp
FIELD	53:7	53:15	25	slpmsg -> fp
LEAF_NODE	53:7	53:7	26	slpmsg
LEAF_NODE	53:13	53:13	26	->
LEAF_NODE	53:15	53:15	26	fp
ASSIGN_OP	53:18	53:18	24	=
LEAF_NODE	53:18	53:18	25	=
RVAL	53:20	53:20	24	xfer -> dest_fp
FIELD	53:20	53:26	25	xfer -> dest_fp
LEAF_NODE	53:20	53:20	26	xfer
LEAF_NODE	53:24	53:24	26	->
LEAF_NODE	53:26	53:26	26	dest_fp
LEAF_NODE	53:33	53:33	22	;
EXPR_STATEMENT	54:7	54:27	21	xfer -> dest_fp = NULL ;
EXPR	54:7	54:7	22	xfer -> dest_fp = NULL
ASSIGN	54:7	54:23	23	xfer -> dest_fp = NULL
LVAL	54:7	54:7	24	xfer -> dest_fp
FIELD	54:7	54:13	25	xfer -> dest_fp
LEAF_NODE	54:7	54:7	26	xfer
LEAF_NODE	54:11	54:11	26	->
LEAF_NODE	54:13	54:13	26	dest_fp
ASSIGN_OP	54:21	54:21	24	=
LEAF_NODE	54:21	54:21	25	=
RVAL	54:23	54:23	24	NULL
FIELD	54:23	54:23	25	NULL
LEAF_NODE	54:23	54:23	26	NULL
LEAF_NODE	54:27	54:27	22	;
LEAF_NODE	55:6	55:6	20	}
LEAF_NODE	56:5	56:5	17	}
LEAF_NODE	57:4	57:4	14	}
LEAF_NODE	58:3	58:3	11	}
LEAF_NODE	59:2	59:2	8	}
SELECTION	60:2	61:2	6	
KEYWORD	60:2	60:2	7	if
LEAF_NODE	60:2	60:2	8	if
LEAF_NODE	60:5	60:5	7	(
CONDITION	60:6	60:6	7	! slpmsg -> fp && slpmsg -> size
EXPR	60:6	60:6	8	! slpmsg -> fp && slpmsg -> size
AND	60:6	60:21	9	! slpmsg -> fp && slpmsg -> size
EXPR	60:6	60:6	10	! slpmsg -> fp
UNARY_EXPR	60:6	60:7	11	! slpmsg -> fp
UNARY_OPERATOR	60:6	60:6	12	!
LEAF_NODE	60:6	60:6	13	!
FIELD	60:7	60:15	12	slpmsg -> fp
LEAF_NODE	60:7	60:7	13	slpmsg
LEAF_NODE	60:13	60:13	13	->
LEAF_NODE	60:15	60:15	13	fp
LEAF_NODE	60:18	60:18	10	&&
EXPR	60:21	60:21	10	slpmsg -> size
FIELD	60:21	60:29	11	slpmsg -> size
LEAF_NODE	60:21	60:21	12	slpmsg
LEAF_NODE	60:27	60:27	12	->
LEAF_NODE	60:29	60:29	12	size
LEAF_NODE	60:33	60:33	7	)
STATEMENTS	61:2	68:2	7	
LEAF_NODE	61:2	61:2	8	{
STATEMENTS	62:3	63:3	8	
EXPR_STATEMENT	62:3	62:46	9	slpmsg -> buffer = g_try_malloc ( slpmsg -> size ) ;
EXPR	62:3	62:3	10	slpmsg -> buffer = g_try_malloc ( slpmsg -> size )
ASSIGN	62:3	62:20	11	slpmsg -> buffer = g_try_malloc ( slpmsg -> size )
LVAL	62:3	62:3	12	slpmsg -> buffer
FIELD	62:3	62:11	13	slpmsg -> buffer
LEAF_NODE	62:3	62:3	14	slpmsg
LEAF_NODE	62:9	62:9	14	->
LEAF_NODE	62:11	62:11	14	buffer
ASSIGN_OP	62:18	62:18	12	=
LEAF_NODE	62:18	62:18	13	=
RVAL	62:20	62:20	12	g_try_malloc ( slpmsg -> size )
FUNCTION_CALL	62:20	62:45	13	g_try_malloc ( slpmsg -> size )
CALLEE	62:20	62:20	14	g_try_malloc
LEAF_NODE	62:20	62:20	15	g_try_malloc
LEAF_NODE	62:32	62:32	14	(
ARGUMENT	62:33	62:33	14	slpmsg -> size
FIELD	62:33	62:41	15	slpmsg -> size
LEAF_NODE	62:33	62:33	16	slpmsg
LEAF_NODE	62:39	62:39	16	->
LEAF_NODE	62:41	62:41	16	size
LEAF_NODE	62:45	62:45	14	)
LEAF_NODE	62:46	62:46	10	;
SELECTION	63:3	64:3	9	
KEYWORD	63:3	63:3	10	if
LEAF_NODE	63:3	63:3	11	if
LEAF_NODE	63:6	63:6	10	(
CONDITION	63:7	63:7	10	slpmsg -> buffer == NULL
EXPR	63:7	63:25	11	slpmsg -> buffer == NULL
FIELD	63:7	63:15	12	slpmsg -> buffer
LEAF_NODE	63:7	63:7	13	slpmsg
LEAF_NODE	63:13	63:13	13	->
LEAF_NODE	63:15	63:15	13	buffer
EQ_OPERATOR	63:22	63:22	12	==
LEAF_NODE	63:22	63:22	13	==
FIELD	63:25	63:25	12	NULL
LEAF_NODE	63:25	63:25	13	NULL
LEAF_NODE	63:29	63:29	10	)
STATEMENTS	64:3	67:3	10	
LEAF_NODE	64:3	64:3	11	{
STATEMENTS	65:4	66:4	11	
EXPR_STATEMENT	65:4	65:71	12	purple_debug_error ( "msn" , "Failed to allocate buffer for slpmsg\n" ) ;
EXPR	65:4	65:4	13	purple_debug_error ( "msn" , "Failed to allocate buffer for slpmsg\n" )
FUNCTION_CALL	65:4	65:70	14	purple_debug_error ( "msn" , "Failed to allocate buffer for slpmsg\n" )
CALLEE	65:4	65:4	15	purple_debug_error
LEAF_NODE	65:4	65:4	16	purple_debug_error
LEAF_NODE	65:22	65:22	15	(
ARGUMENT	65:23	65:23	15	"msn"
FIELD	65:23	65:23	16	"msn"
LEAF_NODE	65:23	65:23	17	"msn"
LEAF_NODE	65:28	65:28	15	,
ARGUMENT	65:30	65:30	15	"Failed to allocate buffer for slpmsg\n"
FIELD	65:30	65:30	16	"Failed to allocate buffer for slpmsg\n"
LEAF_NODE	65:30	65:30	17	"Failed to allocate buffer for slpmsg\n"
LEAF_NODE	65:70	65:70	15	)
LEAF_NODE	65:71	65:71	13	;
JUMP_STATEMENT	66:4	66:10	12	return DESTINATION ;
KEYWORD	66:4	66:4	13	return
LEAF_NODE	66:4	66:4	14	return
LEAF_NODE	0:0	0:0	13	DESTINATION
LEAF_NODE	66:10	66:10	13	;
LEAF_NODE	67:3	67:3	11	}
LEAF_NODE	68:2	68:2	8	}
LEAF_NODE	69:1	69:1	5	}
SELECTION	70:1	71:1	3	
KEYWORD	70:1	70:1	4	else
LEAF_NODE	70:1	70:1	5	else
STATEMENTS	71:1	73:1	4	
LEAF_NODE	71:1	71:1	5	{
STATEMENTS	72:2	72:2	5	
EXPR_STATEMENT	72:2	72:98	6	slpmsg = msn_slplink_message_find ( slplink , msg -> msnslp_header . session_id , msg -> msnslp_header . id ) ;
EXPR	72:2	72:2	7	slpmsg = msn_slplink_message_find ( slplink , msg -> msnslp_header . session_id , msg -> msnslp_header . id )
ASSIGN	72:2	72:11	8	slpmsg = msn_slplink_message_find ( slplink , msg -> msnslp_header . session_id , msg -> msnslp_header . id )
LVAL	72:2	72:2	9	slpmsg
FIELD	72:2	72:2	10	slpmsg
LEAF_NODE	72:2	72:2	11	slpmsg
ASSIGN_OP	72:9	72:9	9	=
LEAF_NODE	72:9	72:9	10	=
RVAL	72:11	72:11	9	msn_slplink_message_find ( slplink , msg -> msnslp_header . session_id , msg -> msnslp_header . id )
FUNCTION_CALL	72:11	72:97	10	msn_slplink_message_find ( slplink , msg -> msnslp_header . session_id , msg -> msnslp_header . id )
CALLEE	72:11	72:11	11	msn_slplink_message_find
LEAF_NODE	72:11	72:11	12	msn_slplink_message_find
LEAF_NODE	72:35	72:35	11	(
ARGUMENT	72:36	72:36	11	slplink
FIELD	72:36	72:36	12	slplink
LEAF_NODE	72:36	72:36	13	slplink
LEAF_NODE	72:43	72:43	11	,
ARGUMENT	72:45	72:45	11	msg -> msnslp_header . session_id
FIELD	72:45	72:64	12	msg -> msnslp_header . session_id
LEAF_NODE	72:45	72:45	13	msg
LEAF_NODE	72:48	72:48	13	->
LEAF_NODE	72:50	72:50	13	msnslp_header
LEAF_NODE	72:63	72:63	13	.
LEAF_NODE	72:64	72:64	13	session_id
LEAF_NODE	72:74	72:74	11	,
ARGUMENT	72:76	72:76	11	msg -> msnslp_header . id
FIELD	72:76	72:95	12	msg -> msnslp_header . id
LEAF_NODE	72:76	72:76	13	msg
LEAF_NODE	72:79	72:79	13	->
LEAF_NODE	72:81	72:81	13	msnslp_header
LEAF_NODE	72:94	72:94	13	.
LEAF_NODE	72:95	72:95	13	id
LEAF_NODE	72:97	72:97	11	)
LEAF_NODE	72:98	72:98	7	;
LEAF_NODE	73:1	73:1	5	}
SELECTION	74:1	75:1	3	
KEYWORD	74:1	74:1	4	if
LEAF_NODE	74:1	74:1	5	if
LEAF_NODE	74:4	74:4	4	(
CONDITION	74:5	74:5	4	slpmsg == NULL
EXPR	74:5	74:15	5	slpmsg == NULL
FIELD	74:5	74:5	6	slpmsg
LEAF_NODE	74:5	74:5	7	slpmsg
EQ_OPERATOR	74:12	74:12	6	==
LEAF_NODE	74:12	74:12	7	==
FIELD	74:15	74:15	6	NULL
LEAF_NODE	74:15	74:15	7	NULL
LEAF_NODE	74:19	74:19	4	)
STATEMENTS	75:1	79:1	4	
LEAF_NODE	75:1	75:1	5	{
STATEMENTS	77:2	78:2	5	
EXPR_STATEMENT	77:2	77:53	6	purple_debug_error ( "msn" , "Couldn't find slpmsg\n" ) ;
EXPR	77:2	77:2	7	purple_debug_error ( "msn" , "Couldn't find slpmsg\n" )
FUNCTION_CALL	77:2	77:52	8	purple_debug_error ( "msn" , "Couldn't find slpmsg\n" )
CALLEE	77:2	77:2	9	purple_debug_error
LEAF_NODE	77:2	77:2	10	purple_debug_error
LEAF_NODE	77:20	77:20	9	(
ARGUMENT	77:21	77:21	9	"msn"
FIELD	77:21	77:21	10	"msn"
LEAF_NODE	77:21	77:21	11	"msn"
LEAF_NODE	77:26	77:26	9	,
ARGUMENT	77:28	77:28	9	"Couldn't find slpmsg\n"
FIELD	77:28	77:28	10	"Couldn't find slpmsg\n"
LEAF_NODE	77:28	77:28	11	"Couldn't find slpmsg\n"
LEAF_NODE	77:52	77:52	9	)
LEAF_NODE	77:53	77:53	7	;
JUMP_STATEMENT	78:2	78:8	6	return DESTINATION ;
KEYWORD	78:2	78:2	7	return
LEAF_NODE	78:2	78:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	78:8	78:8	7	;
LEAF_NODE	79:1	79:1	5	}
SELECTION	80:1	81:1	3	
KEYWORD	80:1	80:1	4	if
LEAF_NODE	80:1	80:1	5	if
LEAF_NODE	80:4	80:4	4	(
CONDITION	80:5	80:5	4	slpmsg -> fp
EXPR	80:5	80:5	5	slpmsg -> fp
FIELD	80:5	80:13	6	slpmsg -> fp
LEAF_NODE	80:5	80:5	7	slpmsg
LEAF_NODE	80:11	80:11	7	->
LEAF_NODE	80:13	80:13	7	fp
LEAF_NODE	80:15	80:15	4	)
STATEMENTS	81:1	84:1	4	
LEAF_NODE	81:1	81:1	5	{
STATEMENTS	83:2	83:2	5	
EXPR_STATEMENT	83:2	83:40	6	len = fwrite ( data , 1 , len , slpmsg -> fp ) ;
EXPR	83:2	83:2	7	len = fwrite ( data , 1 , len , slpmsg -> fp )
ASSIGN	83:2	83:8	8	len = fwrite ( data , 1 , len , slpmsg -> fp )
LVAL	83:2	83:2	9	len
FIELD	83:2	83:2	10	len
LEAF_NODE	83:2	83:2	11	len
ASSIGN_OP	83:6	83:6	9	=
LEAF_NODE	83:6	83:6	10	=
RVAL	83:8	83:8	9	fwrite ( data , 1 , len , slpmsg -> fp )
FUNCTION_CALL	83:8	83:39	10	fwrite ( data , 1 , len , slpmsg -> fp )
CALLEE	83:8	83:8	11	fwrite
LEAF_NODE	83:8	83:8	12	fwrite
LEAF_NODE	83:14	83:14	11	(
ARGUMENT	83:15	83:15	11	data
FIELD	83:15	83:15	12	data
LEAF_NODE	83:15	83:15	13	data
LEAF_NODE	83:19	83:19	11	,
ARGUMENT	83:21	83:21	11	1
FIELD	83:21	83:21	12	1
LEAF_NODE	83:21	83:21	13	1
LEAF_NODE	83:22	83:22	11	,
ARGUMENT	83:24	83:24	11	len
FIELD	83:24	83:24	12	len
LEAF_NODE	83:24	83:24	13	len
LEAF_NODE	83:27	83:27	11	,
ARGUMENT	83:29	83:29	11	slpmsg -> fp
FIELD	83:29	83:37	12	slpmsg -> fp
LEAF_NODE	83:29	83:29	13	slpmsg
LEAF_NODE	83:35	83:35	13	->
LEAF_NODE	83:37	83:37	13	fp
LEAF_NODE	83:39	83:39	11	)
LEAF_NODE	83:40	83:40	7	;
LEAF_NODE	84:1	84:1	5	}
SELECTION	85:1	85:6	3	
KEYWORD	85:1	85:1	4	else
LEAF_NODE	85:1	85:1	5	else
STATEMENTS	85:6	85:6	4	
SELECTION	85:6	86:1	5	
KEYWORD	85:6	85:6	6	if
LEAF_NODE	85:6	85:6	7	if
LEAF_NODE	85:9	85:9	6	(
CONDITION	85:10	85:10	6	slpmsg -> size
EXPR	85:10	85:10	7	slpmsg -> size
FIELD	85:10	85:18	8	slpmsg -> size
LEAF_NODE	85:10	85:10	9	slpmsg
LEAF_NODE	85:16	85:16	9	->
LEAF_NODE	85:18	85:18	9	size
LEAF_NODE	85:22	85:22	6	)
STATEMENTS	86:1	96:1	6	
LEAF_NODE	86:1	86:1	7	{
STATEMENTS	87:2	94:2	7	
SELECTION	87:2	88:2	8	
KEYWORD	87:2	87:2	9	if
LEAF_NODE	87:2	87:2	10	if
LEAF_NODE	87:5	87:5	9	(
CONDITION	87:6	87:6	9	G_MAXSIZE - len < offset || ( offset + len ) > slpmsg -> size
EXPR	87:6	87:6	10	G_MAXSIZE - len < offset || ( offset + len ) > slpmsg -> size
OR	87:6	87:34	11	G_MAXSIZE - len < offset || ( offset + len ) > slpmsg -> size
EXPR	87:6	87:24	12	G_MAXSIZE - len < offset
FIELD	87:6	87:6	13	G_MAXSIZE
LEAF_NODE	87:6	87:6	14	G_MAXSIZE
LEAF_NODE	87:16	87:16	13	-
FIELD	87:18	87:18	13	len
LEAF_NODE	87:18	87:18	14	len
REL_OPERATOR	87:22	87:22	13	<
LEAF_NODE	87:22	87:22	14	<
FIELD	87:24	87:24	13	offset
LEAF_NODE	87:24	87:24	14	offset
LEAF_NODE	87:31	87:31	12	||
EXPR	87:34	87:51	12	( offset + len ) > slpmsg -> size
LEAF_NODE	87:34	87:34	13	(
FIELD	87:35	87:35	13	offset
LEAF_NODE	87:35	87:35	14	offset
LEAF_NODE	87:42	87:42	13	+
FIELD	87:44	87:44	13	len
LEAF_NODE	87:44	87:44	14	len
LEAF_NODE	87:47	87:47	13	)
REL_OPERATOR	87:49	87:49	13	>
LEAF_NODE	87:49	87:49	14	>
FIELD	87:51	87:59	13	slpmsg -> size
LEAF_NODE	87:51	87:51	14	slpmsg
LEAF_NODE	87:57	87:57	14	->
LEAF_NODE	87:59	87:59	14	size
LEAF_NODE	87:63	87:63	9	)
STATEMENTS	88:2	93:2	9	
LEAF_NODE	88:2	88:2	10	{
STATEMENTS	89:3	92:3	10	
LEAF_NODE	89:3	89:3	11	purple_debug_error
LEAF_NODE	89:21	89:21	11	(
LEAF_NODE	89:22	89:22	11	"msn"
LEAF_NODE	89:27	89:27	11	,
LEAF_NODE	90:4	90:4	11	"Oversized slpmsg - msgsize=%lld offset=%"
LEAF_NODE	90:47	90:47	11	G_GSIZE_FORMAT
LEAF_NODE	90:62	90:62	11	" len=%"
LEAF_NODE	90:71	90:71	11	G_GSIZE_FORMAT
LEAF_NODE	90:86	90:86	11	"\n"
LEAF_NODE	90:90	90:90	11	,
LEAF_NODE	91:4	91:4	11	slpmsg
LEAF_NODE	91:10	91:10	11	->
LEAF_NODE	91:12	91:12	11	size
LEAF_NODE	91:16	91:16	11	,
LEAF_NODE	91:18	91:18	11	offset
LEAF_NODE	91:24	91:24	11	,
LEAF_NODE	91:26	91:26	11	len
LEAF_NODE	91:29	91:29	11	)
LEAF_NODE	91:30	91:30	11	;
EXPR_STATEMENT	92:3	92:24	11	g_return_if_reached ( ) ;
EXPR	92:3	92:3	12	g_return_if_reached ( )
FUNCTION_CALL	92:3	92:23	13	g_return_if_reached ( )
CALLEE	92:3	92:3	14	g_return_if_reached
LEAF_NODE	92:3	92:3	15	g_return_if_reached
LEAF_NODE	92:22	92:22	14	(
LEAF_NODE	92:23	92:23	14	)
LEAF_NODE	92:24	92:24	12	;
LEAF_NODE	93:2	93:2	10	}
SELECTION	94:2	95:3	8	
KEYWORD	94:2	94:2	9	else
LEAF_NODE	94:2	94:2	10	else
STATEMENTS	95:3	95:3	9	
EXPR_STATEMENT	95:3	95:45	10	memcpy ( slpmsg -> buffer + offset , data , len ) ;
EXPR	95:3	95:3	11	memcpy ( slpmsg -> buffer + offset , data , len )
FUNCTION_CALL	95:3	95:44	12	memcpy ( slpmsg -> buffer + offset , data , len )
CALLEE	95:3	95:3	13	memcpy
LEAF_NODE	95:3	95:3	14	memcpy
LEAF_NODE	95:9	95:9	13	(
ARGUMENT	95:10	95:27	13	slpmsg -> buffer + offset
FIELD	95:10	95:18	14	slpmsg -> buffer
LEAF_NODE	95:10	95:10	15	slpmsg
LEAF_NODE	95:16	95:16	15	->
LEAF_NODE	95:18	95:18	15	buffer
LEAF_NODE	95:25	95:25	14	+
FIELD	95:27	95:27	14	offset
LEAF_NODE	95:27	95:27	15	offset
LEAF_NODE	95:33	95:33	13	,
ARGUMENT	95:35	95:35	13	data
FIELD	95:35	95:35	14	data
LEAF_NODE	95:35	95:35	15	data
LEAF_NODE	95:39	95:39	13	,
ARGUMENT	95:41	95:41	13	len
FIELD	95:41	95:41	14	len
LEAF_NODE	95:41	95:41	15	len
LEAF_NODE	95:44	95:44	13	)
LEAF_NODE	95:45	95:45	11	;
LEAF_NODE	96:1	96:1	7	}
SELECTION	97:1	100:1	3	
KEYWORD	97:1	97:1	4	if
LEAF_NODE	97:1	97:1	5	if
LEAF_NODE	97:4	97:4	4	(
CONDITION	97:5	97:5	4	( slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030 ) && ( slpmsg -> slpcall != NULL )
EXPR	97:5	97:5	5	( slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030 ) && ( slpmsg -> slpcall != NULL )
AND	97:5	99:2	6	( slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030 ) && ( slpmsg -> slpcall != NULL )
EXPR	97:5	98:62	7	( slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030 )
LEAF_NODE	97:5	97:5	8	(
OR	97:6	98:6	8	slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
EXPR	97:6	97:23	9	slpmsg -> flags == 0x20
FIELD	97:6	97:14	10	slpmsg -> flags
LEAF_NODE	97:6	97:6	11	slpmsg
LEAF_NODE	97:12	97:12	11	->
LEAF_NODE	97:14	97:14	11	flags
EQ_OPERATOR	97:20	97:20	10	==
LEAF_NODE	97:20	97:20	11	==
FIELD	97:23	97:23	10	0x20
LEAF_NODE	97:23	97:23	11	0x20
LEAF_NODE	97:28	97:28	9	||
EXPR	98:6	98:6	9	slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
OR	98:6	98:36	10	slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
EXPR	98:6	98:23	11	slpmsg -> flags == 0x1000020
FIELD	98:6	98:14	12	slpmsg -> flags
LEAF_NODE	98:6	98:6	13	slpmsg
LEAF_NODE	98:12	98:12	13	->
LEAF_NODE	98:14	98:14	13	flags
EQ_OPERATOR	98:20	98:20	12	==
LEAF_NODE	98:20	98:20	13	==
FIELD	98:23	98:23	12	0x1000020
LEAF_NODE	98:23	98:23	13	0x1000020
LEAF_NODE	98:33	98:33	11	||
EXPR	98:36	98:53	11	slpmsg -> flags == 0x1000030
FIELD	98:36	98:44	12	slpmsg -> flags
LEAF_NODE	98:36	98:36	13	slpmsg
LEAF_NODE	98:42	98:42	13	->
LEAF_NODE	98:44	98:44	13	flags
EQ_OPERATOR	98:50	98:50	12	==
LEAF_NODE	98:50	98:50	13	==
FIELD	98:53	98:53	12	0x1000030
LEAF_NODE	98:53	98:53	13	0x1000030
LEAF_NODE	98:62	98:62	8	)
LEAF_NODE	98:64	98:64	7	&&
EXPR	99:2	99:26	7	( slpmsg -> slpcall != NULL )
LEAF_NODE	99:2	99:2	8	(
FIELD	99:3	99:11	8	slpmsg -> slpcall
LEAF_NODE	99:3	99:3	9	slpmsg
LEAF_NODE	99:9	99:9	9	->
LEAF_NODE	99:11	99:11	9	slpcall
EQ_OPERATOR	99:19	99:19	8	!=
LEAF_NODE	99:19	99:19	9	!=
FIELD	99:22	99:22	8	NULL
LEAF_NODE	99:22	99:22	9	NULL
LEAF_NODE	99:26	99:26	8	)
LEAF_NODE	99:27	99:27	4	)
STATEMENTS	100:1	107:1	4	
LEAF_NODE	100:1	100:1	5	{
STATEMENTS	101:2	102:2	5	
EXPR_STATEMENT	101:2	101:34	6	slpmsg -> slpcall -> progress = TRUE ;
EXPR	101:2	101:2	7	slpmsg -> slpcall -> progress = TRUE
ASSIGN	101:2	101:30	8	slpmsg -> slpcall -> progress = TRUE
LVAL	101:2	101:2	9	slpmsg -> slpcall -> progress
FIELD	101:2	101:19	10	slpmsg -> slpcall -> progress
LEAF_NODE	101:2	101:2	11	slpmsg
LEAF_NODE	101:8	101:8	11	->
LEAF_NODE	101:10	101:10	11	slpcall
LEAF_NODE	101:17	101:17	11	->
LEAF_NODE	101:19	101:19	11	progress
ASSIGN_OP	101:28	101:28	9	=
LEAF_NODE	101:28	101:28	10	=
RVAL	101:30	101:30	9	TRUE
FIELD	101:30	101:30	10	TRUE
LEAF_NODE	101:30	101:30	11	TRUE
LEAF_NODE	101:34	101:34	7	;
SELECTION	102:2	103:2	6	
KEYWORD	102:2	102:2	7	if
LEAF_NODE	102:2	102:2	8	if
LEAF_NODE	102:5	102:5	7	(
CONDITION	102:6	102:6	7	slpmsg -> slpcall -> progress_cb != NULL
EXPR	102:6	102:38	8	slpmsg -> slpcall -> progress_cb != NULL
FIELD	102:6	102:23	9	slpmsg -> slpcall -> progress_cb
LEAF_NODE	102:6	102:6	10	slpmsg
LEAF_NODE	102:12	102:12	10	->
LEAF_NODE	102:14	102:14	10	slpcall
LEAF_NODE	102:21	102:21	10	->
LEAF_NODE	102:23	102:23	10	progress_cb
EQ_OPERATOR	102:35	102:35	9	!=
LEAF_NODE	102:35	102:35	10	!=
FIELD	102:38	102:38	9	NULL
LEAF_NODE	102:38	102:38	10	NULL
LEAF_NODE	102:42	102:42	7	)
STATEMENTS	103:2	106:2	7	
LEAF_NODE	103:2	103:2	8	{
STATEMENTS	104:3	104:3	8	
EXPR_STATEMENT	104:3	105:23	9	slpmsg -> slpcall -> progress_cb ( slpmsg -> slpcall , slpmsg -> size , len , offset ) ;
EXPR	104:3	104:3	10	slpmsg -> slpcall -> progress_cb ( slpmsg -> slpcall , slpmsg -> size , len , offset )
FUNCTION_CALL	104:3	105:22	11	slpmsg -> slpcall -> progress_cb ( slpmsg -> slpcall , slpmsg -> size , len , offset )
CALLEE	104:3	104:20	12	slpmsg -> slpcall -> progress_cb
LEAF_NODE	104:3	104:3	13	slpmsg
LEAF_NODE	104:9	104:9	13	->
LEAF_NODE	104:11	104:11	13	slpcall
LEAF_NODE	104:18	104:18	13	->
LEAF_NODE	104:20	104:20	13	progress_cb
LEAF_NODE	104:31	104:31	12	(
ARGUMENT	104:32	104:32	12	slpmsg -> slpcall
FIELD	104:32	104:40	13	slpmsg -> slpcall
LEAF_NODE	104:32	104:32	14	slpmsg
LEAF_NODE	104:38	104:38	14	->
LEAF_NODE	104:40	104:40	14	slpcall
LEAF_NODE	104:47	104:47	12	,
ARGUMENT	104:49	104:49	12	slpmsg -> size
FIELD	104:49	104:57	13	slpmsg -> size
LEAF_NODE	104:49	104:49	14	slpmsg
LEAF_NODE	104:55	104:55	14	->
LEAF_NODE	104:57	104:57	14	size
LEAF_NODE	104:61	104:61	12	,
ARGUMENT	105:11	105:11	12	len
FIELD	105:11	105:11	13	len
LEAF_NODE	105:11	105:11	14	len
LEAF_NODE	105:14	105:14	12	,
ARGUMENT	105:16	105:16	12	offset
FIELD	105:16	105:16	13	offset
LEAF_NODE	105:16	105:16	14	offset
LEAF_NODE	105:22	105:22	12	)
LEAF_NODE	105:23	105:23	10	;
LEAF_NODE	106:2	106:2	8	}
LEAF_NODE	107:1	107:1	5	}
SELECTION	109:1	110:2	3	
KEYWORD	109:1	109:1	4	if
LEAF_NODE	109:1	109:1	5	if
LEAF_NODE	109:4	109:4	4	(
CONDITION	109:5	109:5	4	slpmsg -> buffer == NULL
EXPR	109:5	109:23	5	slpmsg -> buffer == NULL
FIELD	109:5	109:13	6	slpmsg -> buffer
LEAF_NODE	109:5	109:5	7	slpmsg
LEAF_NODE	109:11	109:11	7	->
LEAF_NODE	109:13	109:13	7	buffer
EQ_OPERATOR	109:20	109:20	6	==
LEAF_NODE	109:20	109:20	7	==
FIELD	109:23	109:23	6	NULL
LEAF_NODE	109:23	109:23	7	NULL
LEAF_NODE	109:27	109:27	4	)
STATEMENTS	110:2	110:2	4	
JUMP_STATEMENT	110:2	110:8	5	return DESTINATION ;
KEYWORD	110:2	110:2	6	return
LEAF_NODE	110:2	110:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	110:8	110:8	6	;
SELECTION	112:1	114:1	3	
KEYWORD	112:1	112:1	4	if
LEAF_NODE	112:1	112:1	5	if
LEAF_NODE	112:4	112:4	4	(
CONDITION	112:5	112:5	4	msg -> msnslp_header . offset + msg -> msnslp_header . length >= msg -> msnslp_header . total_size
EXPR	112:5	113:5	5	msg -> msnslp_header . offset + msg -> msnslp_header . length >= msg -> msnslp_header . total_size
FIELD	112:5	112:24	6	msg -> msnslp_header . offset
LEAF_NODE	112:5	112:5	7	msg
LEAF_NODE	112:8	112:8	7	->
LEAF_NODE	112:10	112:10	7	msnslp_header
LEAF_NODE	112:23	112:23	7	.
LEAF_NODE	112:24	112:24	7	offset
LEAF_NODE	112:31	112:31	6	+
FIELD	112:33	112:52	6	msg -> msnslp_header . length
LEAF_NODE	112:33	112:33	7	msg
LEAF_NODE	112:36	112:36	7	->
LEAF_NODE	112:38	112:38	7	msnslp_header
LEAF_NODE	112:51	112:51	7	.
LEAF_NODE	112:52	112:52	7	length
REL_OPERATOR	113:2	113:2	6	>=
LEAF_NODE	113:2	113:2	7	>=
FIELD	113:5	113:24	6	msg -> msnslp_header . total_size
LEAF_NODE	113:5	113:5	7	msg
LEAF_NODE	113:8	113:8	7	->
LEAF_NODE	113:10	113:10	7	msnslp_header
LEAF_NODE	113:23	113:23	7	.
LEAF_NODE	113:24	113:24	7	total_size
LEAF_NODE	113:34	113:34	4	)
STATEMENTS	114:1	138:1	4	
LEAF_NODE	114:1	114:1	5	{
STATEMENTS	116:2	136:2	5	
SIMPLE_DECL	116:2	116:21	6	MsnSlpCall * slpcall ;
VAR_DECL	116:2	116:14	7	MsnSlpCall * slpcall
TYPE	116:2	116:13	8	MsnSlpCall *
TYPE_NAME	116:2	116:2	9	MsnSlpCall
LEAF_NODE	116:2	116:2	10	MsnSlpCall
POINTER	116:13	116:13	9	*
LEAF_NODE	116:13	116:13	10	*
NAME	116:14	116:14	8	slpcall
LEAF_NODE	116:14	116:14	9	slpcall
LEAF_NODE	116:21	116:21	7	;
EXPR_STATEMENT	117:2	117:48	6	slpcall = msn_slp_process_msg ( slplink , slpmsg ) ;
EXPR	117:2	117:2	7	slpcall = msn_slp_process_msg ( slplink , slpmsg )
ASSIGN	117:2	117:12	8	slpcall = msn_slp_process_msg ( slplink , slpmsg )
LVAL	117:2	117:2	9	slpcall
FIELD	117:2	117:2	10	slpcall
LEAF_NODE	117:2	117:2	11	slpcall
ASSIGN_OP	117:10	117:10	9	=
LEAF_NODE	117:10	117:10	10	=
RVAL	117:12	117:12	9	msn_slp_process_msg ( slplink , slpmsg )
FUNCTION_CALL	117:12	117:47	10	msn_slp_process_msg ( slplink , slpmsg )
CALLEE	117:12	117:12	11	msn_slp_process_msg
LEAF_NODE	117:12	117:12	12	msn_slp_process_msg
LEAF_NODE	117:31	117:31	11	(
ARGUMENT	117:32	117:32	11	slplink
FIELD	117:32	117:32	12	slplink
LEAF_NODE	117:32	117:32	13	slplink
LEAF_NODE	117:39	117:39	11	,
ARGUMENT	117:41	117:41	11	slpmsg
FIELD	117:41	117:41	12	slpmsg
LEAF_NODE	117:41	117:41	13	slpmsg
LEAF_NODE	117:47	117:47	11	)
LEAF_NODE	117:48	117:48	7	;
SELECTION	118:2	119:2	6	
KEYWORD	118:2	118:2	7	if
LEAF_NODE	118:2	118:2	8	if
LEAF_NODE	118:5	118:5	7	(
CONDITION	118:6	118:6	7	slpmsg -> flags == 0x100
EXPR	118:6	118:23	8	slpmsg -> flags == 0x100
FIELD	118:6	118:14	9	slpmsg -> flags
LEAF_NODE	118:6	118:6	10	slpmsg
LEAF_NODE	118:12	118:12	10	->
LEAF_NODE	118:14	118:14	10	flags
EQ_OPERATOR	118:20	118:20	9	==
LEAF_NODE	118:20	118:20	10	==
FIELD	118:23	118:23	9	0x100
LEAF_NODE	118:23	118:23	10	0x100
LEAF_NODE	118:28	118:28	7	)
STATEMENTS	119:2	126:2	7	
LEAF_NODE	119:2	119:2	8	{
STATEMENTS	120:3	123:3	8	
SIMPLE_DECL	120:3	120:28	9	MsnDirectConn * directconn ;
VAR_DECL	120:3	120:18	10	MsnDirectConn * directconn
TYPE	120:3	120:17	11	MsnDirectConn *
TYPE_NAME	120:3	120:3	12	MsnDirectConn
LEAF_NODE	120:3	120:3	13	MsnDirectConn
POINTER	120:17	120:17	12	*
LEAF_NODE	120:17	120:17	13	*
NAME	120:18	120:18	11	directconn
LEAF_NODE	120:18	120:18	12	directconn
LEAF_NODE	120:28	120:28	10	;
EXPR_STATEMENT	121:3	121:35	9	directconn = slplink -> directconn ;
EXPR	121:3	121:3	10	directconn = slplink -> directconn
ASSIGN	121:3	121:16	11	directconn = slplink -> directconn
LVAL	121:3	121:3	12	directconn
FIELD	121:3	121:3	13	directconn
LEAF_NODE	121:3	121:3	14	directconn
ASSIGN_OP	121:14	121:14	12	=
LEAF_NODE	121:14	121:14	13	=
RVAL	121:16	121:16	12	slplink -> directconn
FIELD	121:16	121:25	13	slplink -> directconn
LEAF_NODE	121:16	121:16	14	slplink
LEAF_NODE	121:23	121:23	14	->
LEAF_NODE	121:25	121:25	14	directconn
LEAF_NODE	121:35	121:35	10	;
SELECTION	123:3	124:4	9	
KEYWORD	123:3	123:3	10	if
LEAF_NODE	123:3	123:3	11	if
LEAF_NODE	123:6	123:6	10	(
CONDITION	123:7	123:7	10	! directconn -> acked
EXPR	123:7	123:7	11	! directconn -> acked
UNARY_EXPR	123:7	123:8	12	! directconn -> acked
UNARY_OPERATOR	123:7	123:7	13	!
LEAF_NODE	123:7	123:7	14	!
FIELD	123:8	123:20	13	directconn -> acked
LEAF_NODE	123:8	123:8	14	directconn
LEAF_NODE	123:18	123:18	14	->
LEAF_NODE	123:20	123:20	14	acked
LEAF_NODE	123:25	123:25	10	)
STATEMENTS	124:4	124:4	10	
EXPR_STATEMENT	124:4	124:45	11	msn_directconn_send_handshake ( directconn ) ;
EXPR	124:4	124:4	12	msn_directconn_send_handshake ( directconn )
FUNCTION_CALL	124:4	124:44	13	msn_directconn_send_handshake ( directconn )
CALLEE	124:4	124:4	14	msn_directconn_send_handshake
LEAF_NODE	124:4	124:4	15	msn_directconn_send_handshake
LEAF_NODE	124:33	124:33	14	(
ARGUMENT	124:34	124:34	14	directconn
FIELD	124:34	124:34	15	directconn
LEAF_NODE	124:34	124:34	16	directconn
LEAF_NODE	124:44	124:44	14	)
LEAF_NODE	124:45	124:45	12	;
LEAF_NODE	126:2	126:2	8	}
SELECTION	127:2	127:7	6	
KEYWORD	127:2	127:2	7	else
LEAF_NODE	127:2	127:2	8	else
STATEMENTS	127:7	127:7	7	
SELECTION	127:7	130:2	8	
KEYWORD	127:7	127:7	9	if
LEAF_NODE	127:7	127:7	10	if
LEAF_NODE	127:10	127:10	9	(
CONDITION	127:11	127:11	9	slpmsg -> flags == 0x00 || slpmsg -> flags == 0x1000000 || slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
EXPR	127:11	127:11	10	slpmsg -> flags == 0x00 || slpmsg -> flags == 0x1000000 || slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
OR	127:11	127:36	11	slpmsg -> flags == 0x00 || slpmsg -> flags == 0x1000000 || slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
EXPR	127:11	127:28	12	slpmsg -> flags == 0x00
FIELD	127:11	127:19	13	slpmsg -> flags
LEAF_NODE	127:11	127:11	14	slpmsg
LEAF_NODE	127:17	127:17	14	->
LEAF_NODE	127:19	127:19	14	flags
EQ_OPERATOR	127:25	127:25	13	==
LEAF_NODE	127:25	127:25	14	==
FIELD	127:28	127:28	13	0x00
LEAF_NODE	127:28	127:28	14	0x00
LEAF_NODE	127:33	127:33	12	||
EXPR	127:36	127:36	12	slpmsg -> flags == 0x1000000 || slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
OR	127:36	128:11	13	slpmsg -> flags == 0x1000000 || slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
EXPR	127:36	127:53	14	slpmsg -> flags == 0x1000000
FIELD	127:36	127:44	15	slpmsg -> flags
LEAF_NODE	127:36	127:36	16	slpmsg
LEAF_NODE	127:42	127:42	16	->
LEAF_NODE	127:44	127:44	16	flags
EQ_OPERATOR	127:50	127:50	15	==
LEAF_NODE	127:50	127:50	16	==
FIELD	127:53	127:53	15	0x1000000
LEAF_NODE	127:53	127:53	16	0x1000000
LEAF_NODE	127:63	127:63	14	||
EXPR	128:11	128:11	14	slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
OR	128:11	128:36	15	slpmsg -> flags == 0x20 || slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
EXPR	128:11	128:28	16	slpmsg -> flags == 0x20
FIELD	128:11	128:19	17	slpmsg -> flags
LEAF_NODE	128:11	128:11	18	slpmsg
LEAF_NODE	128:17	128:17	18	->
LEAF_NODE	128:19	128:19	18	flags
EQ_OPERATOR	128:25	128:25	17	==
LEAF_NODE	128:25	128:25	18	==
FIELD	128:28	128:28	17	0x20
LEAF_NODE	128:28	128:28	18	0x20
LEAF_NODE	128:33	128:33	16	||
EXPR	128:36	128:36	16	slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
OR	128:36	129:11	17	slpmsg -> flags == 0x1000020 || slpmsg -> flags == 0x1000030
EXPR	128:36	128:53	18	slpmsg -> flags == 0x1000020
FIELD	128:36	128:44	19	slpmsg -> flags
LEAF_NODE	128:36	128:36	20	slpmsg
LEAF_NODE	128:42	128:42	20	->
LEAF_NODE	128:44	128:44	20	flags
EQ_OPERATOR	128:50	128:50	19	==
LEAF_NODE	128:50	128:50	20	==
FIELD	128:53	128:53	19	0x1000020
LEAF_NODE	128:53	128:53	20	0x1000020
LEAF_NODE	128:63	128:63	18	||
EXPR	129:11	129:28	18	slpmsg -> flags == 0x1000030
FIELD	129:11	129:19	19	slpmsg -> flags
LEAF_NODE	129:11	129:11	20	slpmsg
LEAF_NODE	129:17	129:17	20	->
LEAF_NODE	129:19	129:19	20	flags
EQ_OPERATOR	129:25	129:25	19	==
LEAF_NODE	129:25	129:25	20	==
FIELD	129:28	129:28	19	0x1000030
LEAF_NODE	129:28	129:28	20	0x1000030
LEAF_NODE	129:37	129:37	9	)
STATEMENTS	130:2	134:2	9	
LEAF_NODE	130:2	130:2	10	{
STATEMENTS	132:3	133:3	10	
EXPR_STATEMENT	132:3	132:37	11	msn_slplink_send_ack ( slplink , msg ) ;
EXPR	132:3	132:3	12	msn_slplink_send_ack ( slplink , msg )
FUNCTION_CALL	132:3	132:36	13	msn_slplink_send_ack ( slplink , msg )
CALLEE	132:3	132:3	14	msn_slplink_send_ack
LEAF_NODE	132:3	132:3	15	msn_slplink_send_ack
LEAF_NODE	132:23	132:23	14	(
ARGUMENT	132:24	132:24	14	slplink
FIELD	132:24	132:24	15	slplink
LEAF_NODE	132:24	132:24	16	slplink
LEAF_NODE	132:31	132:31	14	,
ARGUMENT	132:33	132:33	14	msg
FIELD	132:33	132:33	15	msg
LEAF_NODE	132:33	132:33	16	msg
LEAF_NODE	132:36	132:36	14	)
LEAF_NODE	132:37	132:37	12	;
EXPR_STATEMENT	133:3	133:43	11	msn_slplink_send_queued_slpmsgs ( slplink ) ;
EXPR	133:3	133:3	12	msn_slplink_send_queued_slpmsgs ( slplink )
FUNCTION_CALL	133:3	133:42	13	msn_slplink_send_queued_slpmsgs ( slplink )
CALLEE	133:3	133:3	14	msn_slplink_send_queued_slpmsgs
LEAF_NODE	133:3	133:3	15	msn_slplink_send_queued_slpmsgs
LEAF_NODE	133:34	133:34	14	(
ARGUMENT	133:35	133:35	14	slplink
FIELD	133:35	133:35	15	slplink
LEAF_NODE	133:35	133:35	16	slplink
LEAF_NODE	133:42	133:42	14	)
LEAF_NODE	133:43	133:43	12	;
LEAF_NODE	134:2	134:2	10	}
EXPR_STATEMENT	135:2	135:28	6	msn_slpmsg_destroy ( slpmsg ) ;
EXPR	135:2	135:2	7	msn_slpmsg_destroy ( slpmsg )
FUNCTION_CALL	135:2	135:27	8	msn_slpmsg_destroy ( slpmsg )
CALLEE	135:2	135:2	9	msn_slpmsg_destroy
LEAF_NODE	135:2	135:2	10	msn_slpmsg_destroy
LEAF_NODE	135:20	135:20	9	(
ARGUMENT	135:21	135:21	9	slpmsg
FIELD	135:21	135:21	10	slpmsg
LEAF_NODE	135:21	135:21	11	slpmsg
LEAF_NODE	135:27	135:27	9	)
LEAF_NODE	135:28	135:28	7	;
SELECTION	136:2	137:3	6	
KEYWORD	136:2	136:2	7	if
LEAF_NODE	136:2	136:2	8	if
LEAF_NODE	136:5	136:5	7	(
CONDITION	136:6	136:6	7	slpcall != NULL && slpcall -> wasted
EXPR	136:6	136:6	8	slpcall != NULL && slpcall -> wasted
AND	136:6	136:25	9	slpcall != NULL && slpcall -> wasted
EXPR	136:6	136:17	10	slpcall != NULL
FIELD	136:6	136:6	11	slpcall
LEAF_NODE	136:6	136:6	12	slpcall
EQ_OPERATOR	136:14	136:14	11	!=
LEAF_NODE	136:14	136:14	12	!=
FIELD	136:17	136:17	11	NULL
LEAF_NODE	136:17	136:17	12	NULL
LEAF_NODE	136:22	136:22	10	&&
EXPR	136:25	136:25	10	slpcall -> wasted
FIELD	136:25	136:34	11	slpcall -> wasted
LEAF_NODE	136:25	136:25	12	slpcall
LEAF_NODE	136:32	136:32	12	->
LEAF_NODE	136:34	136:34	12	wasted
LEAF_NODE	136:40	136:40	7	)
STATEMENTS	137:3	137:3	7	
EXPR_STATEMENT	137:3	137:31	8	msn_slpcall_destroy ( slpcall ) ;
EXPR	137:3	137:3	9	msn_slpcall_destroy ( slpcall )
FUNCTION_CALL	137:3	137:30	10	msn_slpcall_destroy ( slpcall )
CALLEE	137:3	137:3	11	msn_slpcall_destroy
LEAF_NODE	137:3	137:3	12	msn_slpcall_destroy
LEAF_NODE	137:22	137:22	11	(
ARGUMENT	137:23	137:23	11	slpcall
FIELD	137:23	137:23	12	slpcall
LEAF_NODE	137:23	137:23	13	slpcall
LEAF_NODE	137:30	137:30	11	)
LEAF_NODE	137:31	137:31	9	;
LEAF_NODE	138:1	138:1	5	}
LEAF_NODE	139:0	139:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	80:0	1	
RETURN_TYPE	1:0	1:17	2	static GtkWidget *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	GtkWidget
LEAF_NODE	1:7	1:7	4	GtkWidget
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	get_config_frame
LEAF_NODE	2:0	2:0	3	get_config_frame
PARAMETER_LIST	2:16	2:37	2	( PurplePlugin * plugin )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:31	3	PurplePlugin * plugin
TYPE	2:17	2:30	4	PurplePlugin *
TYPE_NAME	2:17	2:17	5	PurplePlugin
LEAF_NODE	2:17	2:17	6	PurplePlugin
POINTER	2:30	2:30	5	*
LEAF_NODE	2:30	2:30	6	*
NAME	2:31	2:31	4	plugin
LEAF_NODE	2:31	2:31	5	plugin
LEAF_NODE	2:37	2:37	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	79:1	2	
SIMPLE_DECL	4:1	4:15	3	GtkWidget * ret ;
VAR_DECL	4:1	4:12	4	GtkWidget * ret
TYPE	4:1	4:11	5	GtkWidget *
TYPE_NAME	4:1	4:1	6	GtkWidget
LEAF_NODE	4:1	4:1	7	GtkWidget
POINTER	4:11	4:11	6	*
LEAF_NODE	4:11	4:11	7	*
NAME	4:12	4:12	5	ret
LEAF_NODE	4:12	4:12	6	ret
LEAF_NODE	4:15	4:15	4	;
SIMPLE_DECL	5:1	5:16	3	GtkWidget * vbox ;
VAR_DECL	5:1	5:12	4	GtkWidget * vbox
TYPE	5:1	5:11	5	GtkWidget *
TYPE_NAME	5:1	5:1	6	GtkWidget
LEAF_NODE	5:1	5:1	7	GtkWidget
POINTER	5:11	5:11	6	*
LEAF_NODE	5:11	5:11	7	*
NAME	5:12	5:12	5	vbox
LEAF_NODE	5:12	5:12	6	vbox
LEAF_NODE	5:16	5:16	4	;
SIMPLE_DECL	6:1	6:17	3	GtkWidget * label ;
VAR_DECL	6:1	6:12	4	GtkWidget * label
TYPE	6:1	6:11	5	GtkWidget *
TYPE_NAME	6:1	6:1	6	GtkWidget
LEAF_NODE	6:1	6:1	7	GtkWidget
POINTER	6:11	6:11	6	*
LEAF_NODE	6:11	6:11	7	*
NAME	6:12	6:12	5	label
LEAF_NODE	6:12	6:12	6	label
LEAF_NODE	6:17	6:17	4	;
SIMPLE_DECL	7:1	7:20	3	GtkWidget * treeview ;
VAR_DECL	7:1	7:12	4	GtkWidget * treeview
TYPE	7:1	7:11	5	GtkWidget *
TYPE_NAME	7:1	7:1	6	GtkWidget
LEAF_NODE	7:1	7:1	7	GtkWidget
POINTER	7:11	7:11	6	*
LEAF_NODE	7:11	7:11	7	*
NAME	7:12	7:12	5	treeview
LEAF_NODE	7:12	7:12	6	treeview
LEAF_NODE	7:20	7:20	4	;
SIMPLE_DECL	8:1	8:26	3	GtkTreeViewColumn * column ;
VAR_DECL	8:1	8:20	4	GtkTreeViewColumn * column
TYPE	8:1	8:19	5	GtkTreeViewColumn *
TYPE_NAME	8:1	8:1	6	GtkTreeViewColumn
LEAF_NODE	8:1	8:1	7	GtkTreeViewColumn
POINTER	8:19	8:19	6	*
LEAF_NODE	8:19	8:19	7	*
NAME	8:20	8:20	5	column
LEAF_NODE	8:20	8:20	6	column
LEAF_NODE	8:26	8:26	4	;
SIMPLE_DECL	9:1	9:26	3	GtkCellRenderer * renderer ;
VAR_DECL	9:1	9:18	4	GtkCellRenderer * renderer
TYPE	9:1	9:17	5	GtkCellRenderer *
TYPE_NAME	9:1	9:1	6	GtkCellRenderer
LEAF_NODE	9:1	9:1	7	GtkCellRenderer
POINTER	9:17	9:17	6	*
LEAF_NODE	9:17	9:17	7	*
NAME	9:18	9:18	5	renderer
LEAF_NODE	9:18	9:18	6	renderer
LEAF_NODE	9:26	9:26	4	;
SIMPLE_DECL	10:1	10:18	3	GdkPixbuf * pixbuf ;
VAR_DECL	10:1	10:12	4	GdkPixbuf * pixbuf
TYPE	10:1	10:11	5	GdkPixbuf *
TYPE_NAME	10:1	10:1	6	GdkPixbuf
LEAF_NODE	10:1	10:1	7	GdkPixbuf
POINTER	10:11	10:11	6	*
LEAF_NODE	10:11	10:11	7	*
NAME	10:12	10:12	5	pixbuf
LEAF_NODE	10:12	10:12	6	pixbuf
LEAF_NODE	10:18	10:18	4	;
SIMPLE_DECL	11:1	11:20	3	GtkListStore * model ;
VAR_DECL	11:1	11:15	4	GtkListStore * model
TYPE	11:1	11:14	5	GtkListStore *
TYPE_NAME	11:1	11:1	6	GtkListStore
LEAF_NODE	11:1	11:1	7	GtkListStore
POINTER	11:14	11:14	6	*
LEAF_NODE	11:14	11:14	7	*
NAME	11:15	11:15	5	model
LEAF_NODE	11:15	11:15	6	model
LEAF_NODE	11:20	11:20	4	;
SIMPLE_DECL	12:1	12:9	3	GList * l ;
VAR_DECL	12:1	12:8	4	GList * l
TYPE	12:1	12:7	5	GList *
TYPE_NAME	12:1	12:1	6	GList
LEAF_NODE	12:1	12:1	7	GList
POINTER	12:7	12:7	6	*
LEAF_NODE	12:7	12:7	7	*
NAME	12:8	12:8	5	l
LEAF_NODE	12:8	12:8	6	l
LEAF_NODE	12:9	12:9	4	;
EXPR_STATEMENT	14:1	14:30	3	ret = gtk_vbox_new ( FALSE , 18 ) ;
EXPR	14:1	14:1	4	ret = gtk_vbox_new ( FALSE , 18 )
ASSIGN	14:1	14:7	5	ret = gtk_vbox_new ( FALSE , 18 )
LVAL	14:1	14:1	6	ret
FIELD	14:1	14:1	7	ret
LEAF_NODE	14:1	14:1	8	ret
ASSIGN_OP	14:5	14:5	6	=
LEAF_NODE	14:5	14:5	7	=
RVAL	14:7	14:7	6	gtk_vbox_new ( FALSE , 18 )
FUNCTION_CALL	14:7	14:29	7	gtk_vbox_new ( FALSE , 18 )
CALLEE	14:7	14:7	8	gtk_vbox_new
LEAF_NODE	14:7	14:7	9	gtk_vbox_new
LEAF_NODE	14:19	14:19	8	(
ARGUMENT	14:20	14:20	8	FALSE
FIELD	14:20	14:20	9	FALSE
LEAF_NODE	14:20	14:20	10	FALSE
LEAF_NODE	14:25	14:25	8	,
ARGUMENT	14:27	14:27	8	18
FIELD	14:27	14:27	9	18
LEAF_NODE	14:27	14:27	10	18
LEAF_NODE	14:29	14:29	8	)
LEAF_NODE	14:30	14:30	4	;
EXPR_STATEMENT	15:1	15:55	3	gtk_container_set_border_width ( GTK_CONTAINER ( ret ) , 12 ) ;
EXPR	15:1	15:1	4	gtk_container_set_border_width ( GTK_CONTAINER ( ret ) , 12 )
FUNCTION_CALL	15:1	15:54	5	gtk_container_set_border_width ( GTK_CONTAINER ( ret ) , 12 )
CALLEE	15:1	15:1	6	gtk_container_set_border_width
LEAF_NODE	15:1	15:1	7	gtk_container_set_border_width
LEAF_NODE	15:31	15:31	6	(
ARGUMENT	15:32	15:32	6	GTK_CONTAINER ( ret )
FUNCTION_CALL	15:32	15:49	7	GTK_CONTAINER ( ret )
CALLEE	15:32	15:32	8	GTK_CONTAINER
LEAF_NODE	15:32	15:32	9	GTK_CONTAINER
LEAF_NODE	15:45	15:45	8	(
ARGUMENT	15:46	15:46	8	ret
FIELD	15:46	15:46	9	ret
LEAF_NODE	15:46	15:46	10	ret
LEAF_NODE	15:49	15:49	8	)
LEAF_NODE	15:50	15:50	6	,
ARGUMENT	15:52	15:52	6	12
FIELD	15:52	15:52	7	12
LEAF_NODE	15:52	15:52	8	12
LEAF_NODE	15:54	15:54	6	)
LEAF_NODE	15:55	15:55	4	;
EXPR_STATEMENT	17:1	17:72	3	vbox = pidgin_make_frame ( ret , _ ( "Evolution Integration Configuration" ) ) ;
EXPR	17:1	17:1	4	vbox = pidgin_make_frame ( ret , _ ( "Evolution Integration Configuration" ) )
ASSIGN	17:1	17:8	5	vbox = pidgin_make_frame ( ret , _ ( "Evolution Integration Configuration" ) )
LVAL	17:1	17:1	6	vbox
FIELD	17:1	17:1	7	vbox
LEAF_NODE	17:1	17:1	8	vbox
ASSIGN_OP	17:6	17:6	6	=
LEAF_NODE	17:6	17:6	7	=
RVAL	17:8	17:8	6	pidgin_make_frame ( ret , _ ( "Evolution Integration Configuration" ) )
FUNCTION_CALL	17:8	17:71	7	pidgin_make_frame ( ret , _ ( "Evolution Integration Configuration" ) )
CALLEE	17:8	17:8	8	pidgin_make_frame
LEAF_NODE	17:8	17:8	9	pidgin_make_frame
LEAF_NODE	17:25	17:25	8	(
ARGUMENT	17:26	17:26	8	ret
FIELD	17:26	17:26	9	ret
LEAF_NODE	17:26	17:26	10	ret
LEAF_NODE	17:29	17:29	8	,
ARGUMENT	17:31	17:31	8	_ ( "Evolution Integration Configuration" )
FUNCTION_CALL	17:31	17:70	9	_ ( "Evolution Integration Configuration" )
CALLEE	17:31	17:31	10	_
LEAF_NODE	17:31	17:31	11	_
LEAF_NODE	17:32	17:32	10	(
ARGUMENT	17:33	17:33	10	"Evolution Integration Configuration"
FIELD	17:33	17:33	11	"Evolution Integration Configuration"
LEAF_NODE	17:33	17:33	12	"Evolution Integration Configuration"
LEAF_NODE	17:70	17:70	10	)
LEAF_NODE	17:71	17:71	8	)
LEAF_NODE	17:72	17:72	4	;
LEAF_NODE	19:1	19:1	3	label
LEAF_NODE	19:7	19:7	3	=
LEAF_NODE	19:9	19:9	3	gtk_label_new
LEAF_NODE	19:22	19:22	3	(
LEAF_NODE	19:23	19:23	3	_
LEAF_NODE	19:24	19:24	3	(
LEAF_NODE	19:25	19:25	3	"Select all accounts that buddies should be "
LEAF_NODE	20:7	20:7	3	"auto-added to."
LEAF_NODE	20:23	20:23	3	)
LEAF_NODE	20:24	20:24	3	)
LEAF_NODE	20:25	20:25	3	;
EXPR_STATEMENT	21:1	21:48	3	gtk_misc_set_alignment ( GTK_MISC ( label ) , 0 , 0.5 ) ;
EXPR	21:1	21:1	4	gtk_misc_set_alignment ( GTK_MISC ( label ) , 0 , 0.5 )
FUNCTION_CALL	21:1	21:47	5	gtk_misc_set_alignment ( GTK_MISC ( label ) , 0 , 0.5 )
CALLEE	21:1	21:1	6	gtk_misc_set_alignment
LEAF_NODE	21:1	21:1	7	gtk_misc_set_alignment
LEAF_NODE	21:23	21:23	6	(
ARGUMENT	21:24	21:24	6	GTK_MISC ( label )
FUNCTION_CALL	21:24	21:38	7	GTK_MISC ( label )
CALLEE	21:24	21:24	8	GTK_MISC
LEAF_NODE	21:24	21:24	9	GTK_MISC
LEAF_NODE	21:32	21:32	8	(
ARGUMENT	21:33	21:33	8	label
FIELD	21:33	21:33	9	label
LEAF_NODE	21:33	21:33	10	label
LEAF_NODE	21:38	21:38	8	)
LEAF_NODE	21:39	21:39	6	,
ARGUMENT	21:41	21:41	6	0
FIELD	21:41	21:41	7	0
LEAF_NODE	21:41	21:41	8	0
LEAF_NODE	21:42	21:42	6	,
ARGUMENT	21:44	21:44	6	0.5
FIELD	21:44	21:44	7	0.5
LEAF_NODE	21:44	21:44	8	0.5
LEAF_NODE	21:47	21:47	6	)
LEAF_NODE	21:48	21:48	4	;
EXPR_STATEMENT	22:1	22:58	3	gtk_box_pack_start ( GTK_BOX ( vbox ) , label , FALSE , FALSE , 0 ) ;
EXPR	22:1	22:1	4	gtk_box_pack_start ( GTK_BOX ( vbox ) , label , FALSE , FALSE , 0 )
FUNCTION_CALL	22:1	22:57	5	gtk_box_pack_start ( GTK_BOX ( vbox ) , label , FALSE , FALSE , 0 )
CALLEE	22:1	22:1	6	gtk_box_pack_start
LEAF_NODE	22:1	22:1	7	gtk_box_pack_start
LEAF_NODE	22:19	22:19	6	(
ARGUMENT	22:20	22:20	6	GTK_BOX ( vbox )
FUNCTION_CALL	22:20	22:32	7	GTK_BOX ( vbox )
CALLEE	22:20	22:20	8	GTK_BOX
LEAF_NODE	22:20	22:20	9	GTK_BOX
LEAF_NODE	22:27	22:27	8	(
ARGUMENT	22:28	22:28	8	vbox
FIELD	22:28	22:28	9	vbox
LEAF_NODE	22:28	22:28	10	vbox
LEAF_NODE	22:32	22:32	8	)
LEAF_NODE	22:33	22:33	6	,
ARGUMENT	22:35	22:35	6	label
FIELD	22:35	22:35	7	label
LEAF_NODE	22:35	22:35	8	label
LEAF_NODE	22:40	22:40	6	,
ARGUMENT	22:42	22:42	6	FALSE
FIELD	22:42	22:42	7	FALSE
LEAF_NODE	22:42	22:42	8	FALSE
LEAF_NODE	22:47	22:47	6	,
ARGUMENT	22:49	22:49	6	FALSE
FIELD	22:49	22:49	7	FALSE
LEAF_NODE	22:49	22:49	8	FALSE
LEAF_NODE	22:54	22:54	6	,
ARGUMENT	22:56	22:56	6	0
FIELD	22:56	22:56	7	0
LEAF_NODE	22:56	22:56	8	0
LEAF_NODE	22:57	22:57	6	)
LEAF_NODE	22:58	22:58	4	;
EXPR_STATEMENT	23:1	23:23	3	gtk_widget_show ( label ) ;
EXPR	23:1	23:1	4	gtk_widget_show ( label )
FUNCTION_CALL	23:1	23:22	5	gtk_widget_show ( label )
CALLEE	23:1	23:1	6	gtk_widget_show
LEAF_NODE	23:1	23:1	7	gtk_widget_show
LEAF_NODE	23:16	23:16	6	(
ARGUMENT	23:17	23:17	6	label
FIELD	23:17	23:17	7	label
LEAF_NODE	23:17	23:17	8	label
LEAF_NODE	23:22	23:22	6	)
LEAF_NODE	23:23	23:23	4	;
EXPR_STATEMENT	25:1	27:40	3	model = gtk_list_store_new ( NUM_COLUMNS , G_TYPE_BOOLEAN , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_POINTER ) ;
EXPR	25:1	25:1	4	model = gtk_list_store_new ( NUM_COLUMNS , G_TYPE_BOOLEAN , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_POINTER )
ASSIGN	25:1	25:9	5	model = gtk_list_store_new ( NUM_COLUMNS , G_TYPE_BOOLEAN , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_POINTER )
LVAL	25:1	25:1	6	model
FIELD	25:1	25:1	7	model
LEAF_NODE	25:1	25:1	8	model
ASSIGN_OP	25:7	25:7	6	=
LEAF_NODE	25:7	25:7	7	=
RVAL	25:9	25:9	6	gtk_list_store_new ( NUM_COLUMNS , G_TYPE_BOOLEAN , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_POINTER )
FUNCTION_CALL	25:9	27:39	7	gtk_list_store_new ( NUM_COLUMNS , G_TYPE_BOOLEAN , GDK_TYPE_PIXBUF , G_TYPE_STRING , G_TYPE_POINTER )
CALLEE	25:9	25:9	8	gtk_list_store_new
LEAF_NODE	25:9	25:9	9	gtk_list_store_new
LEAF_NODE	25:27	25:27	8	(
ARGUMENT	25:28	25:28	8	NUM_COLUMNS
FIELD	25:28	25:28	9	NUM_COLUMNS
LEAF_NODE	25:28	25:28	10	NUM_COLUMNS
LEAF_NODE	25:39	25:39	8	,
ARGUMENT	26:10	26:10	8	G_TYPE_BOOLEAN
FIELD	26:10	26:10	9	G_TYPE_BOOLEAN
LEAF_NODE	26:10	26:10	10	G_TYPE_BOOLEAN
LEAF_NODE	26:24	26:24	8	,
ARGUMENT	26:26	26:26	8	GDK_TYPE_PIXBUF
FIELD	26:26	26:26	9	GDK_TYPE_PIXBUF
LEAF_NODE	26:26	26:26	10	GDK_TYPE_PIXBUF
LEAF_NODE	26:41	26:41	8	,
ARGUMENT	27:10	27:10	8	G_TYPE_STRING
FIELD	27:10	27:10	9	G_TYPE_STRING
LEAF_NODE	27:10	27:10	10	G_TYPE_STRING
LEAF_NODE	27:23	27:23	8	,
ARGUMENT	27:25	27:25	8	G_TYPE_POINTER
FIELD	27:25	27:25	9	G_TYPE_POINTER
LEAF_NODE	27:25	27:25	10	G_TYPE_POINTER
LEAF_NODE	27:39	27:39	8	)
LEAF_NODE	27:40	27:40	4	;
EXPR_STATEMENT	29:1	29:63	3	treeview = gtk_tree_view_new_with_model ( GTK_TREE_MODEL ( model ) ) ;
EXPR	29:1	29:1	4	treeview = gtk_tree_view_new_with_model ( GTK_TREE_MODEL ( model ) )
ASSIGN	29:1	29:12	5	treeview = gtk_tree_view_new_with_model ( GTK_TREE_MODEL ( model ) )
LVAL	29:1	29:1	6	treeview
FIELD	29:1	29:1	7	treeview
LEAF_NODE	29:1	29:1	8	treeview
ASSIGN_OP	29:10	29:10	6	=
LEAF_NODE	29:10	29:10	7	=
RVAL	29:12	29:12	6	gtk_tree_view_new_with_model ( GTK_TREE_MODEL ( model ) )
FUNCTION_CALL	29:12	29:62	7	gtk_tree_view_new_with_model ( GTK_TREE_MODEL ( model ) )
CALLEE	29:12	29:12	8	gtk_tree_view_new_with_model
LEAF_NODE	29:12	29:12	9	gtk_tree_view_new_with_model
LEAF_NODE	29:40	29:40	8	(
ARGUMENT	29:41	29:41	8	GTK_TREE_MODEL ( model )
FUNCTION_CALL	29:41	29:61	9	GTK_TREE_MODEL ( model )
CALLEE	29:41	29:41	10	GTK_TREE_MODEL
LEAF_NODE	29:41	29:41	11	GTK_TREE_MODEL
LEAF_NODE	29:55	29:55	10	(
ARGUMENT	29:56	29:56	10	model
FIELD	29:56	29:56	11	model
LEAF_NODE	29:56	29:56	12	model
LEAF_NODE	29:61	29:61	10	)
LEAF_NODE	29:62	29:62	8	)
LEAF_NODE	29:63	29:63	4	;
EXPR_STATEMENT	30:1	30:60	3	gtk_tree_view_set_rules_hint ( GTK_TREE_VIEW ( treeview ) , TRUE ) ;
EXPR	30:1	30:1	4	gtk_tree_view_set_rules_hint ( GTK_TREE_VIEW ( treeview ) , TRUE )
FUNCTION_CALL	30:1	30:59	5	gtk_tree_view_set_rules_hint ( GTK_TREE_VIEW ( treeview ) , TRUE )
CALLEE	30:1	30:1	6	gtk_tree_view_set_rules_hint
LEAF_NODE	30:1	30:1	7	gtk_tree_view_set_rules_hint
LEAF_NODE	30:29	30:29	6	(
ARGUMENT	30:30	30:30	6	GTK_TREE_VIEW ( treeview )
FUNCTION_CALL	30:30	30:52	7	GTK_TREE_VIEW ( treeview )
CALLEE	30:30	30:30	8	GTK_TREE_VIEW
LEAF_NODE	30:30	30:30	9	GTK_TREE_VIEW
LEAF_NODE	30:43	30:43	8	(
ARGUMENT	30:44	30:44	8	treeview
FIELD	30:44	30:44	9	treeview
LEAF_NODE	30:44	30:44	10	treeview
LEAF_NODE	30:52	30:52	8	)
LEAF_NODE	30:53	30:53	6	,
ARGUMENT	30:55	30:55	6	TRUE
FIELD	30:55	30:55	7	TRUE
LEAF_NODE	30:55	30:55	8	TRUE
LEAF_NODE	30:59	30:59	6	)
LEAF_NODE	30:60	30:60	4	;
EXPR_STATEMENT	31:1	33:62	3	gtk_box_pack_start ( GTK_BOX ( vbox ) , pidgin_make_scrollable ( treeview , GTK_POLICY_AUTOMATIC , GTK_POLICY_ALWAYS , GTK_SHADOW_IN , 300 , 300 ) , TRUE , TRUE , 0 ) ;
EXPR	31:1	31:1	4	gtk_box_pack_start ( GTK_BOX ( vbox ) , pidgin_make_scrollable ( treeview , GTK_POLICY_AUTOMATIC , GTK_POLICY_ALWAYS , GTK_SHADOW_IN , 300 , 300 ) , TRUE , TRUE , 0 )
FUNCTION_CALL	31:1	33:61	5	gtk_box_pack_start ( GTK_BOX ( vbox ) , pidgin_make_scrollable ( treeview , GTK_POLICY_AUTOMATIC , GTK_POLICY_ALWAYS , GTK_SHADOW_IN , 300 , 300 ) , TRUE , TRUE , 0 )
CALLEE	31:1	31:1	6	gtk_box_pack_start
LEAF_NODE	31:1	31:1	7	gtk_box_pack_start
LEAF_NODE	31:19	31:19	6	(
ARGUMENT	31:20	31:20	6	GTK_BOX ( vbox )
FUNCTION_CALL	31:20	31:32	7	GTK_BOX ( vbox )
CALLEE	31:20	31:20	8	GTK_BOX
LEAF_NODE	31:20	31:20	9	GTK_BOX
LEAF_NODE	31:27	31:27	8	(
ARGUMENT	31:28	31:28	8	vbox
FIELD	31:28	31:28	9	vbox
LEAF_NODE	31:28	31:28	10	vbox
LEAF_NODE	31:32	31:32	8	)
LEAF_NODE	31:33	31:33	6	,
ARGUMENT	32:3	32:3	6	pidgin_make_scrollable ( treeview , GTK_POLICY_AUTOMATIC , GTK_POLICY_ALWAYS , GTK_SHADOW_IN , 300 , 300 )
FUNCTION_CALL	32:3	33:45	7	pidgin_make_scrollable ( treeview , GTK_POLICY_AUTOMATIC , GTK_POLICY_ALWAYS , GTK_SHADOW_IN , 300 , 300 )
CALLEE	32:3	32:3	8	pidgin_make_scrollable
LEAF_NODE	32:3	32:3	9	pidgin_make_scrollable
LEAF_NODE	32:25	32:25	8	(
ARGUMENT	32:26	32:26	8	treeview
FIELD	32:26	32:26	9	treeview
LEAF_NODE	32:26	32:26	10	treeview
LEAF_NODE	32:34	32:34	8	,
ARGUMENT	32:36	32:36	8	GTK_POLICY_AUTOMATIC
FIELD	32:36	32:36	9	GTK_POLICY_AUTOMATIC
LEAF_NODE	32:36	32:36	10	GTK_POLICY_AUTOMATIC
LEAF_NODE	32:56	32:56	8	,
ARGUMENT	33:3	33:3	8	GTK_POLICY_ALWAYS
FIELD	33:3	33:3	9	GTK_POLICY_ALWAYS
LEAF_NODE	33:3	33:3	10	GTK_POLICY_ALWAYS
LEAF_NODE	33:20	33:20	8	,
ARGUMENT	33:22	33:22	8	GTK_SHADOW_IN
FIELD	33:22	33:22	9	GTK_SHADOW_IN
LEAF_NODE	33:22	33:22	10	GTK_SHADOW_IN
LEAF_NODE	33:35	33:35	8	,
ARGUMENT	33:37	33:37	8	300
FIELD	33:37	33:37	9	300
LEAF_NODE	33:37	33:37	10	300
LEAF_NODE	33:40	33:40	8	,
ARGUMENT	33:42	33:42	8	300
FIELD	33:42	33:42	9	300
LEAF_NODE	33:42	33:42	10	300
LEAF_NODE	33:45	33:45	8	)
LEAF_NODE	33:46	33:46	6	,
ARGUMENT	33:48	33:48	6	TRUE
FIELD	33:48	33:48	7	TRUE
LEAF_NODE	33:48	33:48	8	TRUE
LEAF_NODE	33:52	33:52	6	,
ARGUMENT	33:54	33:54	6	TRUE
FIELD	33:54	33:54	7	TRUE
LEAF_NODE	33:54	33:54	8	TRUE
LEAF_NODE	33:58	33:58	6	,
ARGUMENT	33:60	33:60	6	0
FIELD	33:60	33:60	7	0
LEAF_NODE	33:60	33:60	8	0
LEAF_NODE	33:61	33:61	6	)
LEAF_NODE	33:62	33:62	4	;
EXPR_STATEMENT	34:1	34:26	3	gtk_widget_show ( treeview ) ;
EXPR	34:1	34:1	4	gtk_widget_show ( treeview )
FUNCTION_CALL	34:1	34:25	5	gtk_widget_show ( treeview )
CALLEE	34:1	34:1	6	gtk_widget_show
LEAF_NODE	34:1	34:1	7	gtk_widget_show
LEAF_NODE	34:16	34:16	6	(
ARGUMENT	34:17	34:17	6	treeview
FIELD	34:17	34:17	7	treeview
LEAF_NODE	34:17	34:17	8	treeview
LEAF_NODE	34:25	34:25	6	)
LEAF_NODE	34:26	34:26	4	;
EXPR_STATEMENT	36:1	36:36	3	column = gtk_tree_view_column_new ( ) ;
EXPR	36:1	36:1	4	column = gtk_tree_view_column_new ( )
ASSIGN	36:1	36:10	5	column = gtk_tree_view_column_new ( )
LVAL	36:1	36:1	6	column
FIELD	36:1	36:1	7	column
LEAF_NODE	36:1	36:1	8	column
ASSIGN_OP	36:8	36:8	6	=
LEAF_NODE	36:8	36:8	7	=
RVAL	36:10	36:10	6	gtk_tree_view_column_new ( )
FUNCTION_CALL	36:10	36:35	7	gtk_tree_view_column_new ( )
CALLEE	36:10	36:10	8	gtk_tree_view_column_new
LEAF_NODE	36:10	36:10	9	gtk_tree_view_column_new
LEAF_NODE	36:34	36:34	8	(
LEAF_NODE	36:35	36:35	8	)
LEAF_NODE	36:36	36:36	4	;
EXPR_STATEMENT	37:1	37:53	3	gtk_tree_view_column_set_title ( column , _ ( "Account" ) ) ;
EXPR	37:1	37:1	4	gtk_tree_view_column_set_title ( column , _ ( "Account" ) )
FUNCTION_CALL	37:1	37:52	5	gtk_tree_view_column_set_title ( column , _ ( "Account" ) )
CALLEE	37:1	37:1	6	gtk_tree_view_column_set_title
LEAF_NODE	37:1	37:1	7	gtk_tree_view_column_set_title
LEAF_NODE	37:31	37:31	6	(
ARGUMENT	37:32	37:32	6	column
FIELD	37:32	37:32	7	column
LEAF_NODE	37:32	37:32	8	column
LEAF_NODE	37:38	37:38	6	,
ARGUMENT	37:40	37:40	6	_ ( "Account" )
FUNCTION_CALL	37:40	37:51	7	_ ( "Account" )
CALLEE	37:40	37:40	8	_
LEAF_NODE	37:40	37:40	9	_
LEAF_NODE	37:41	37:41	8	(
ARGUMENT	37:42	37:42	8	"Account"
FIELD	37:42	37:42	9	"Account"
LEAF_NODE	37:42	37:42	10	"Account"
LEAF_NODE	37:51	37:51	8	)
LEAF_NODE	37:52	37:52	6	)
LEAF_NODE	37:53	37:53	4	;
EXPR_STATEMENT	38:1	38:65	3	gtk_tree_view_insert_column ( GTK_TREE_VIEW ( treeview ) , column , - 1 ) ;
EXPR	38:1	38:1	4	gtk_tree_view_insert_column ( GTK_TREE_VIEW ( treeview ) , column , - 1 )
FUNCTION_CALL	38:1	38:64	5	gtk_tree_view_insert_column ( GTK_TREE_VIEW ( treeview ) , column , - 1 )
CALLEE	38:1	38:1	6	gtk_tree_view_insert_column
LEAF_NODE	38:1	38:1	7	gtk_tree_view_insert_column
LEAF_NODE	38:28	38:28	6	(
ARGUMENT	38:29	38:29	6	GTK_TREE_VIEW ( treeview )
FUNCTION_CALL	38:29	38:51	7	GTK_TREE_VIEW ( treeview )
CALLEE	38:29	38:29	8	GTK_TREE_VIEW
LEAF_NODE	38:29	38:29	9	GTK_TREE_VIEW
LEAF_NODE	38:42	38:42	8	(
ARGUMENT	38:43	38:43	8	treeview
FIELD	38:43	38:43	9	treeview
LEAF_NODE	38:43	38:43	10	treeview
LEAF_NODE	38:51	38:51	8	)
LEAF_NODE	38:52	38:52	6	,
ARGUMENT	38:54	38:54	6	column
FIELD	38:54	38:54	7	column
LEAF_NODE	38:54	38:54	8	column
LEAF_NODE	38:60	38:60	6	,
ARGUMENT	38:62	38:62	6	- 1
UNARY_EXPR	38:62	38:63	7	- 1
UNARY_OPERATOR	38:62	38:62	8	-
LEAF_NODE	38:62	38:62	9	-
FIELD	38:63	38:63	8	1
LEAF_NODE	38:63	38:63	9	1
LEAF_NODE	38:64	38:64	6	)
LEAF_NODE	38:65	38:65	4	;
EXPR_STATEMENT	40:1	40:42	3	renderer = gtk_cell_renderer_toggle_new ( ) ;
EXPR	40:1	40:1	4	renderer = gtk_cell_renderer_toggle_new ( )
ASSIGN	40:1	40:12	5	renderer = gtk_cell_renderer_toggle_new ( )
LVAL	40:1	40:1	6	renderer
FIELD	40:1	40:1	7	renderer
LEAF_NODE	40:1	40:1	8	renderer
ASSIGN_OP	40:10	40:10	6	=
LEAF_NODE	40:10	40:10	7	=
RVAL	40:12	40:12	6	gtk_cell_renderer_toggle_new ( )
FUNCTION_CALL	40:12	40:41	7	gtk_cell_renderer_toggle_new ( )
CALLEE	40:12	40:12	8	gtk_cell_renderer_toggle_new
LEAF_NODE	40:12	40:12	9	gtk_cell_renderer_toggle_new
LEAF_NODE	40:40	40:40	8	(
LEAF_NODE	40:41	40:41	8	)
LEAF_NODE	40:42	40:42	4	;
EXPR_STATEMENT	41:1	42:44	3	g_signal_connect ( G_OBJECT ( renderer ) , "toggled" , G_CALLBACK ( autoadd_toggled_cb ) , model ) ;
EXPR	41:1	41:1	4	g_signal_connect ( G_OBJECT ( renderer ) , "toggled" , G_CALLBACK ( autoadd_toggled_cb ) , model )
FUNCTION_CALL	41:1	42:43	5	g_signal_connect ( G_OBJECT ( renderer ) , "toggled" , G_CALLBACK ( autoadd_toggled_cb ) , model )
CALLEE	41:1	41:1	6	g_signal_connect
LEAF_NODE	41:1	41:1	7	g_signal_connect
LEAF_NODE	41:17	41:17	6	(
ARGUMENT	41:18	41:18	6	G_OBJECT ( renderer )
FUNCTION_CALL	41:18	41:35	7	G_OBJECT ( renderer )
CALLEE	41:18	41:18	8	G_OBJECT
LEAF_NODE	41:18	41:18	9	G_OBJECT
LEAF_NODE	41:26	41:26	8	(
ARGUMENT	41:27	41:27	8	renderer
FIELD	41:27	41:27	9	renderer
LEAF_NODE	41:27	41:27	10	renderer
LEAF_NODE	41:35	41:35	8	)
LEAF_NODE	41:36	41:36	6	,
ARGUMENT	41:38	41:38	6	"toggled"
FIELD	41:38	41:38	7	"toggled"
LEAF_NODE	41:38	41:38	8	"toggled"
LEAF_NODE	41:47	41:47	6	,
ARGUMENT	42:6	42:6	6	G_CALLBACK ( autoadd_toggled_cb )
FUNCTION_CALL	42:6	42:35	7	G_CALLBACK ( autoadd_toggled_cb )
CALLEE	42:6	42:6	8	G_CALLBACK
LEAF_NODE	42:6	42:6	9	G_CALLBACK
LEAF_NODE	42:16	42:16	8	(
ARGUMENT	42:17	42:17	8	autoadd_toggled_cb
FIELD	42:17	42:17	9	autoadd_toggled_cb
LEAF_NODE	42:17	42:17	10	autoadd_toggled_cb
LEAF_NODE	42:35	42:35	8	)
LEAF_NODE	42:36	42:36	6	,
ARGUMENT	42:38	42:38	6	model
FIELD	42:38	42:38	7	model
LEAF_NODE	42:38	42:38	8	model
LEAF_NODE	42:43	42:43	6	)
LEAF_NODE	42:44	42:44	4	;
EXPR_STATEMENT	43:1	43:57	3	gtk_tree_view_column_pack_start ( column , renderer , FALSE ) ;
EXPR	43:1	43:1	4	gtk_tree_view_column_pack_start ( column , renderer , FALSE )
FUNCTION_CALL	43:1	43:56	5	gtk_tree_view_column_pack_start ( column , renderer , FALSE )
CALLEE	43:1	43:1	6	gtk_tree_view_column_pack_start
LEAF_NODE	43:1	43:1	7	gtk_tree_view_column_pack_start
LEAF_NODE	43:32	43:32	6	(
ARGUMENT	43:33	43:33	6	column
FIELD	43:33	43:33	7	column
LEAF_NODE	43:33	43:33	8	column
LEAF_NODE	43:39	43:39	6	,
ARGUMENT	43:41	43:41	6	renderer
FIELD	43:41	43:41	7	renderer
LEAF_NODE	43:41	43:41	8	renderer
LEAF_NODE	43:49	43:49	6	,
ARGUMENT	43:51	43:51	6	FALSE
FIELD	43:51	43:51	7	FALSE
LEAF_NODE	43:51	43:51	8	FALSE
LEAF_NODE	43:56	43:56	6	)
LEAF_NODE	43:57	43:57	4	;
EXPR_STATEMENT	44:1	45:37	3	gtk_tree_view_column_add_attribute ( column , renderer , "active" , COLUMN_AUTOADD ) ;
EXPR	44:1	44:1	4	gtk_tree_view_column_add_attribute ( column , renderer , "active" , COLUMN_AUTOADD )
FUNCTION_CALL	44:1	45:36	5	gtk_tree_view_column_add_attribute ( column , renderer , "active" , COLUMN_AUTOADD )
CALLEE	44:1	44:1	6	gtk_tree_view_column_add_attribute
LEAF_NODE	44:1	44:1	7	gtk_tree_view_column_add_attribute
LEAF_NODE	44:35	44:35	6	(
ARGUMENT	44:36	44:36	6	column
FIELD	44:36	44:36	7	column
LEAF_NODE	44:36	44:36	8	column
LEAF_NODE	44:42	44:42	6	,
ARGUMENT	44:44	44:44	6	renderer
FIELD	44:44	44:44	7	renderer
LEAF_NODE	44:44	44:44	8	renderer
LEAF_NODE	44:52	44:52	6	,
ARGUMENT	45:12	45:12	6	"active"
FIELD	45:12	45:12	7	"active"
LEAF_NODE	45:12	45:12	8	"active"
LEAF_NODE	45:20	45:20	6	,
ARGUMENT	45:22	45:22	6	COLUMN_AUTOADD
FIELD	45:22	45:22	7	COLUMN_AUTOADD
LEAF_NODE	45:22	45:22	8	COLUMN_AUTOADD
LEAF_NODE	45:36	45:36	6	)
LEAF_NODE	45:37	45:37	4	;
EXPR_STATEMENT	47:1	47:42	3	renderer = gtk_cell_renderer_pixbuf_new ( ) ;
EXPR	47:1	47:1	4	renderer = gtk_cell_renderer_pixbuf_new ( )
ASSIGN	47:1	47:12	5	renderer = gtk_cell_renderer_pixbuf_new ( )
LVAL	47:1	47:1	6	renderer
FIELD	47:1	47:1	7	renderer
LEAF_NODE	47:1	47:1	8	renderer
ASSIGN_OP	47:10	47:10	6	=
LEAF_NODE	47:10	47:10	7	=
RVAL	47:12	47:12	6	gtk_cell_renderer_pixbuf_new ( )
FUNCTION_CALL	47:12	47:41	7	gtk_cell_renderer_pixbuf_new ( )
CALLEE	47:12	47:12	8	gtk_cell_renderer_pixbuf_new
LEAF_NODE	47:12	47:12	9	gtk_cell_renderer_pixbuf_new
LEAF_NODE	47:40	47:40	8	(
LEAF_NODE	47:41	47:41	8	)
LEAF_NODE	47:42	47:42	4	;
EXPR_STATEMENT	48:1	48:57	3	gtk_tree_view_column_pack_start ( column , renderer , FALSE ) ;
EXPR	48:1	48:1	4	gtk_tree_view_column_pack_start ( column , renderer , FALSE )
FUNCTION_CALL	48:1	48:56	5	gtk_tree_view_column_pack_start ( column , renderer , FALSE )
CALLEE	48:1	48:1	6	gtk_tree_view_column_pack_start
LEAF_NODE	48:1	48:1	7	gtk_tree_view_column_pack_start
LEAF_NODE	48:32	48:32	6	(
ARGUMENT	48:33	48:33	6	column
FIELD	48:33	48:33	7	column
LEAF_NODE	48:33	48:33	8	column
LEAF_NODE	48:39	48:39	6	,
ARGUMENT	48:41	48:41	6	renderer
FIELD	48:41	48:41	7	renderer
LEAF_NODE	48:41	48:41	8	renderer
LEAF_NODE	48:49	48:49	6	,
ARGUMENT	48:51	48:51	6	FALSE
FIELD	48:51	48:51	7	FALSE
LEAF_NODE	48:51	48:51	8	FALSE
LEAF_NODE	48:56	48:56	6	)
LEAF_NODE	48:57	48:57	4	;
EXPR_STATEMENT	49:1	50:34	3	gtk_tree_view_column_add_attribute ( column , renderer , "pixbuf" , COLUMN_ICON ) ;
EXPR	49:1	49:1	4	gtk_tree_view_column_add_attribute ( column , renderer , "pixbuf" , COLUMN_ICON )
FUNCTION_CALL	49:1	50:33	5	gtk_tree_view_column_add_attribute ( column , renderer , "pixbuf" , COLUMN_ICON )
CALLEE	49:1	49:1	6	gtk_tree_view_column_add_attribute
LEAF_NODE	49:1	49:1	7	gtk_tree_view_column_add_attribute
LEAF_NODE	49:35	49:35	6	(
ARGUMENT	49:36	49:36	6	column
FIELD	49:36	49:36	7	column
LEAF_NODE	49:36	49:36	8	column
LEAF_NODE	49:42	49:42	6	,
ARGUMENT	49:44	49:44	6	renderer
FIELD	49:44	49:44	7	renderer
LEAF_NODE	49:44	49:44	8	renderer
LEAF_NODE	49:52	49:52	6	,
ARGUMENT	50:12	50:12	6	"pixbuf"
FIELD	50:12	50:12	7	"pixbuf"
LEAF_NODE	50:12	50:12	8	"pixbuf"
LEAF_NODE	50:20	50:20	6	,
ARGUMENT	50:22	50:22	6	COLUMN_ICON
FIELD	50:22	50:22	7	COLUMN_ICON
LEAF_NODE	50:22	50:22	8	COLUMN_ICON
LEAF_NODE	50:33	50:33	6	)
LEAF_NODE	50:34	50:34	4	;
EXPR_STATEMENT	52:1	52:40	3	renderer = gtk_cell_renderer_text_new ( ) ;
EXPR	52:1	52:1	4	renderer = gtk_cell_renderer_text_new ( )
ASSIGN	52:1	52:12	5	renderer = gtk_cell_renderer_text_new ( )
LVAL	52:1	52:1	6	renderer
FIELD	52:1	52:1	7	renderer
LEAF_NODE	52:1	52:1	8	renderer
ASSIGN_OP	52:10	52:10	6	=
LEAF_NODE	52:10	52:10	7	=
RVAL	52:12	52:12	6	gtk_cell_renderer_text_new ( )
FUNCTION_CALL	52:12	52:39	7	gtk_cell_renderer_text_new ( )
CALLEE	52:12	52:12	8	gtk_cell_renderer_text_new
LEAF_NODE	52:12	52:12	9	gtk_cell_renderer_text_new
LEAF_NODE	52:38	52:38	8	(
LEAF_NODE	52:39	52:39	8	)
LEAF_NODE	52:40	52:40	4	;
EXPR_STATEMENT	53:1	53:56	3	gtk_tree_view_column_pack_start ( column , renderer , TRUE ) ;
EXPR	53:1	53:1	4	gtk_tree_view_column_pack_start ( column , renderer , TRUE )
FUNCTION_CALL	53:1	53:55	5	gtk_tree_view_column_pack_start ( column , renderer , TRUE )
CALLEE	53:1	53:1	6	gtk_tree_view_column_pack_start
LEAF_NODE	53:1	53:1	7	gtk_tree_view_column_pack_start
LEAF_NODE	53:32	53:32	6	(
ARGUMENT	53:33	53:33	6	column
FIELD	53:33	53:33	7	column
LEAF_NODE	53:33	53:33	8	column
LEAF_NODE	53:39	53:39	6	,
ARGUMENT	53:41	53:41	6	renderer
FIELD	53:41	53:41	7	renderer
LEAF_NODE	53:41	53:41	8	renderer
LEAF_NODE	53:49	53:49	6	,
ARGUMENT	53:51	53:51	6	TRUE
FIELD	53:51	53:51	7	TRUE
LEAF_NODE	53:51	53:51	8	TRUE
LEAF_NODE	53:55	53:55	6	)
LEAF_NODE	53:56	53:56	4	;
EXPR_STATEMENT	54:1	55:36	3	gtk_tree_view_column_add_attribute ( column , renderer , "text" , COLUMN_USERNAME ) ;
EXPR	54:1	54:1	4	gtk_tree_view_column_add_attribute ( column , renderer , "text" , COLUMN_USERNAME )
FUNCTION_CALL	54:1	55:35	5	gtk_tree_view_column_add_attribute ( column , renderer , "text" , COLUMN_USERNAME )
CALLEE	54:1	54:1	6	gtk_tree_view_column_add_attribute
LEAF_NODE	54:1	54:1	7	gtk_tree_view_column_add_attribute
LEAF_NODE	54:35	54:35	6	(
ARGUMENT	54:36	54:36	6	column
FIELD	54:36	54:36	7	column
LEAF_NODE	54:36	54:36	8	column
LEAF_NODE	54:42	54:42	6	,
ARGUMENT	54:44	54:44	6	renderer
FIELD	54:44	54:44	7	renderer
LEAF_NODE	54:44	54:44	8	renderer
LEAF_NODE	54:52	54:52	6	,
ARGUMENT	55:12	55:12	6	"text"
FIELD	55:12	55:12	7	"text"
LEAF_NODE	55:12	55:12	8	"text"
LEAF_NODE	55:18	55:18	6	,
ARGUMENT	55:20	55:20	6	COLUMN_USERNAME
FIELD	55:20	55:20	7	COLUMN_USERNAME
LEAF_NODE	55:20	55:20	8	COLUMN_USERNAME
LEAF_NODE	55:35	55:35	6	)
LEAF_NODE	55:36	55:36	4	;
ITERATION	57:1	58:1	3	
KEYWORD	57:1	57:1	4	for
LEAF_NODE	57:1	57:1	5	for
LEAF_NODE	57:5	57:5	4	(
FOR_INIT	57:6	57:35	4	l = purple_accounts_get_all ( ) ;
EXPR	57:6	57:6	5	l = purple_accounts_get_all ( )
ASSIGN	57:6	57:10	6	l = purple_accounts_get_all ( )
LVAL	57:6	57:6	7	l
FIELD	57:6	57:6	8	l
LEAF_NODE	57:6	57:6	9	l
ASSIGN_OP	57:8	57:8	7	=
LEAF_NODE	57:8	57:8	8	=
RVAL	57:10	57:10	7	purple_accounts_get_all ( )
FUNCTION_CALL	57:10	57:34	8	purple_accounts_get_all ( )
CALLEE	57:10	57:10	9	purple_accounts_get_all
LEAF_NODE	57:10	57:10	10	purple_accounts_get_all
LEAF_NODE	57:33	57:33	9	(
LEAF_NODE	57:34	57:34	9	)
LEAF_NODE	57:35	57:35	5	;
CONDITION	57:37	57:37	4	l != NULL
EXPR	57:37	57:42	5	l != NULL
FIELD	57:37	57:37	6	l
LEAF_NODE	57:37	57:37	7	l
EQ_OPERATOR	57:39	57:39	6	!=
LEAF_NODE	57:39	57:39	7	!=
FIELD	57:42	57:42	6	NULL
LEAF_NODE	57:42	57:42	7	NULL
LEAF_NODE	57:46	57:46	4	;
FOR_EXPR	57:48	57:48	4	l = l -> next
EXPR	57:48	57:48	5	l = l -> next
ASSIGN	57:48	57:52	6	l = l -> next
LVAL	57:48	57:48	7	l
FIELD	57:48	57:48	8	l
LEAF_NODE	57:48	57:48	9	l
ASSIGN_OP	57:50	57:50	7	=
LEAF_NODE	57:50	57:50	8	=
RVAL	57:52	57:52	7	l -> next
FIELD	57:52	57:55	8	l -> next
LEAF_NODE	57:52	57:52	9	l
LEAF_NODE	57:53	57:53	9	->
LEAF_NODE	57:55	57:55	9	next
LEAF_NODE	57:59	57:59	4	)
STATEMENTS	58:1	77:1	4	
LEAF_NODE	58:1	58:1	5	{
STATEMENTS	59:2	75:2	5	
SIMPLE_DECL	59:2	59:51	6	PurpleAccount * account ; account = ( PurpleAccount * ) l -> data ;
VAR_DECL	59:2	59:17	7	PurpleAccount * account ; account = ( PurpleAccount * ) l -> data
TYPE	59:2	59:16	8	PurpleAccount *
TYPE_NAME	59:2	59:2	9	PurpleAccount
LEAF_NODE	59:2	59:2	10	PurpleAccount
POINTER	59:16	59:16	9	*
LEAF_NODE	59:16	59:16	10	*
NAME	59:17	59:17	8	account
LEAF_NODE	59:17	59:17	9	account
LEAF_NODE	0:0	0:0	8	;
INIT	59:17	59:17	8	account = ( PurpleAccount * ) l -> data
ASSIGN	59:17	59:27	9	account = ( PurpleAccount * ) l -> data
LVAL	59:17	59:17	10	account
NAME	59:17	59:17	11	account
LEAF_NODE	59:17	59:17	12	account
ASSIGN_OP	59:25	59:25	10	=
LEAF_NODE	59:25	59:25	11	=
RVAL	59:27	59:44	10	( PurpleAccount * ) l -> data
LEAF_NODE	59:27	59:27	11	(
TYPE_NAME	59:28	59:28	11	PurpleAccount
LEAF_NODE	59:28	59:28	12	PurpleAccount
LEAF_NODE	59:42	59:42	11	*
LEAF_NODE	59:43	59:43	11	)
FIELD	59:44	59:47	11	l -> data
LEAF_NODE	59:44	59:44	12	l
LEAF_NODE	59:45	59:45	12	->
LEAF_NODE	59:47	59:47	12	data
LEAF_NODE	59:51	59:51	7	;
SIMPLE_DECL	60:2	60:18	6	GtkTreeIter iter ;
VAR_DECL	60:2	60:14	7	GtkTreeIter iter
TYPE	60:2	60:2	8	GtkTreeIter
TYPE_NAME	60:2	60:2	9	GtkTreeIter
LEAF_NODE	60:2	60:2	10	GtkTreeIter
NAME	60:14	60:14	8	iter
LEAF_NODE	60:14	60:14	9	iter
LEAF_NODE	60:18	60:18	7	;
EXPR_STATEMENT	61:2	61:52	6	purple_debug_info ( "evolution" , "Adding account\n" ) ;
EXPR	61:2	61:2	7	purple_debug_info ( "evolution" , "Adding account\n" )
FUNCTION_CALL	61:2	61:51	8	purple_debug_info ( "evolution" , "Adding account\n" )
CALLEE	61:2	61:2	9	purple_debug_info
LEAF_NODE	61:2	61:2	10	purple_debug_info
LEAF_NODE	61:19	61:19	9	(
ARGUMENT	61:20	61:20	9	"evolution"
FIELD	61:20	61:20	10	"evolution"
LEAF_NODE	61:20	61:20	11	"evolution"
LEAF_NODE	61:31	61:31	9	,
ARGUMENT	61:33	61:33	9	"Adding account\n"
FIELD	61:33	61:33	10	"Adding account\n"
LEAF_NODE	61:33	61:33	11	"Adding account\n"
LEAF_NODE	61:51	61:51	9	)
LEAF_NODE	61:52	61:52	7	;
EXPR_STATEMENT	62:2	62:37	6	gtk_list_store_append ( model , & iter ) ;
EXPR	62:2	62:2	7	gtk_list_store_append ( model , & iter )
FUNCTION_CALL	62:2	62:36	8	gtk_list_store_append ( model , & iter )
CALLEE	62:2	62:2	9	gtk_list_store_append
LEAF_NODE	62:2	62:2	10	gtk_list_store_append
LEAF_NODE	62:23	62:23	9	(
ARGUMENT	62:24	62:24	9	model
FIELD	62:24	62:24	10	model
LEAF_NODE	62:24	62:24	11	model
LEAF_NODE	62:29	62:29	9	,
ARGUMENT	62:31	62:31	9	& iter
UNARY_EXPR	62:31	62:32	10	& iter
UNARY_OPERATOR	62:31	62:31	11	&
LEAF_NODE	62:31	62:31	12	&
FIELD	62:32	62:32	11	iter
LEAF_NODE	62:32	62:32	12	iter
LEAF_NODE	62:36	62:36	9	)
LEAF_NODE	62:37	62:37	7	;
EXPR_STATEMENT	63:2	63:67	6	pixbuf = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL ) ;
EXPR	63:2	63:2	7	pixbuf = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
ASSIGN	63:2	63:11	8	pixbuf = pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
LVAL	63:2	63:2	9	pixbuf
FIELD	63:2	63:2	10	pixbuf
LEAF_NODE	63:2	63:2	11	pixbuf
ASSIGN_OP	63:9	63:9	9	=
LEAF_NODE	63:9	63:9	10	=
RVAL	63:11	63:11	9	pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
FUNCTION_CALL	63:11	63:66	10	pidgin_create_prpl_icon ( account , PIDGIN_PRPL_ICON_SMALL )
CALLEE	63:11	63:11	11	pidgin_create_prpl_icon
LEAF_NODE	63:11	63:11	12	pidgin_create_prpl_icon
LEAF_NODE	63:34	63:34	11	(
ARGUMENT	63:35	63:35	11	account
FIELD	63:35	63:35	12	account
LEAF_NODE	63:35	63:35	13	account
LEAF_NODE	63:42	63:42	11	,
ARGUMENT	63:44	63:44	11	PIDGIN_PRPL_ICON_SMALL
FIELD	63:44	63:44	12	PIDGIN_PRPL_ICON_SMALL
LEAF_NODE	63:44	63:44	13	PIDGIN_PRPL_ICON_SMALL
LEAF_NODE	63:66	63:66	11	)
LEAF_NODE	63:67	63:67	7	;
SELECTION	64:2	65:3	6	
KEYWORD	64:2	64:2	7	if
LEAF_NODE	64:2	64:2	8	if
LEAF_NODE	64:5	64:5	7	(
CONDITION	64:6	64:6	7	( pixbuf != NULL ) && ( ! purple_account_is_connected ( account ) )
EXPR	64:6	64:6	8	( pixbuf != NULL ) && ( ! purple_account_is_connected ( account ) )
AND	64:6	64:26	9	( pixbuf != NULL ) && ( ! purple_account_is_connected ( account ) )
EXPR	64:6	64:21	10	( pixbuf != NULL )
LEAF_NODE	64:6	64:6	11	(
FIELD	64:7	64:7	11	pixbuf
LEAF_NODE	64:7	64:7	12	pixbuf
EQ_OPERATOR	64:14	64:14	11	!=
LEAF_NODE	64:14	64:14	12	!=
FIELD	64:17	64:17	11	NULL
LEAF_NODE	64:17	64:17	12	NULL
LEAF_NODE	64:21	64:21	11	)
LEAF_NODE	64:23	64:23	10	&&
EXPR	64:26	64:64	10	( ! purple_account_is_connected ( account ) )
LEAF_NODE	64:26	64:26	11	(
UNARY_EXPR	64:27	64:28	11	! purple_account_is_connected ( account )
UNARY_OPERATOR	64:27	64:27	12	!
LEAF_NODE	64:27	64:27	13	!
FUNCTION_CALL	64:28	64:63	12	purple_account_is_connected ( account )
CALLEE	64:28	64:28	13	purple_account_is_connected
LEAF_NODE	64:28	64:28	14	purple_account_is_connected
LEAF_NODE	64:55	64:55	13	(
ARGUMENT	64:56	64:56	13	account
FIELD	64:56	64:56	14	account
LEAF_NODE	64:56	64:56	15	account
LEAF_NODE	64:63	64:63	13	)
LEAF_NODE	64:64	64:64	11	)
LEAF_NODE	64:65	64:65	7	)
STATEMENTS	65:3	65:3	7	
EXPR_STATEMENT	65:3	65:63	8	gdk_pixbuf_saturate_and_pixelate ( pixbuf , pixbuf , 0.0 , FALSE ) ;
EXPR	65:3	65:3	9	gdk_pixbuf_saturate_and_pixelate ( pixbuf , pixbuf , 0.0 , FALSE )
FUNCTION_CALL	65:3	65:62	10	gdk_pixbuf_saturate_and_pixelate ( pixbuf , pixbuf , 0.0 , FALSE )
CALLEE	65:3	65:3	11	gdk_pixbuf_saturate_and_pixelate
LEAF_NODE	65:3	65:3	12	gdk_pixbuf_saturate_and_pixelate
LEAF_NODE	65:35	65:35	11	(
ARGUMENT	65:36	65:36	11	pixbuf
FIELD	65:36	65:36	12	pixbuf
LEAF_NODE	65:36	65:36	13	pixbuf
LEAF_NODE	65:42	65:42	11	,
ARGUMENT	65:44	65:44	11	pixbuf
FIELD	65:44	65:44	12	pixbuf
LEAF_NODE	65:44	65:44	13	pixbuf
LEAF_NODE	65:50	65:50	11	,
ARGUMENT	65:52	65:52	11	0.0
FIELD	65:52	65:52	12	0.0
LEAF_NODE	65:52	65:52	13	0.0
LEAF_NODE	65:55	65:55	11	,
ARGUMENT	65:57	65:57	11	FALSE
FIELD	65:57	65:57	12	FALSE
LEAF_NODE	65:57	65:57	13	FALSE
LEAF_NODE	65:62	65:62	11	)
LEAF_NODE	65:63	65:63	9	;
EXPR_STATEMENT	66:2	74:12	6	gtk_list_store_set ( model , & iter , COLUMN_AUTOADD , purple_account_get_bool ( account , "gevo-autoadd" , FALSE ) , COLUMN_ICON , pixbuf , COLUMN_USERNAME , purple_account_get_username ( account ) , COLUMN_DATA , account , - 1 ) ;
EXPR	66:2	66:2	7	gtk_list_store_set ( model , & iter , COLUMN_AUTOADD , purple_account_get_bool ( account , "gevo-autoadd" , FALSE ) , COLUMN_ICON , pixbuf , COLUMN_USERNAME , purple_account_get_username ( account ) , COLUMN_DATA , account , - 1 )
FUNCTION_CALL	66:2	74:11	8	gtk_list_store_set ( model , & iter , COLUMN_AUTOADD , purple_account_get_bool ( account , "gevo-autoadd" , FALSE ) , COLUMN_ICON , pixbuf , COLUMN_USERNAME , purple_account_get_username ( account ) , COLUMN_DATA , account , - 1 )
CALLEE	66:2	66:2	9	gtk_list_store_set
LEAF_NODE	66:2	66:2	10	gtk_list_store_set
LEAF_NODE	66:20	66:20	9	(
ARGUMENT	66:21	66:21	9	model
FIELD	66:21	66:21	10	model
LEAF_NODE	66:21	66:21	11	model
LEAF_NODE	66:26	66:26	9	,
ARGUMENT	66:28	66:28	9	& iter
UNARY_EXPR	66:28	66:29	10	& iter
UNARY_OPERATOR	66:28	66:28	11	&
LEAF_NODE	66:28	66:28	12	&
FIELD	66:29	66:29	11	iter
LEAF_NODE	66:29	66:29	12	iter
LEAF_NODE	66:33	66:33	9	,
ARGUMENT	67:9	67:9	9	COLUMN_AUTOADD
FIELD	67:9	67:9	10	COLUMN_AUTOADD
LEAF_NODE	67:9	67:9	11	COLUMN_AUTOADD
LEAF_NODE	67:23	67:23	9	,
ARGUMENT	68:9	68:9	9	purple_account_get_bool ( account , "gevo-autoadd" , FALSE )
FUNCTION_CALL	68:9	69:18	10	purple_account_get_bool ( account , "gevo-autoadd" , FALSE )
CALLEE	68:9	68:9	11	purple_account_get_bool
LEAF_NODE	68:9	68:9	12	purple_account_get_bool
LEAF_NODE	68:32	68:32	11	(
ARGUMENT	68:33	68:33	11	account
FIELD	68:33	68:33	12	account
LEAF_NODE	68:33	68:33	13	account
LEAF_NODE	68:40	68:40	11	,
ARGUMENT	68:42	68:42	11	"gevo-autoadd"
FIELD	68:42	68:42	12	"gevo-autoadd"
LEAF_NODE	68:42	68:42	13	"gevo-autoadd"
LEAF_NODE	68:56	68:56	11	,
ARGUMENT	69:13	69:13	11	FALSE
FIELD	69:13	69:13	12	FALSE
LEAF_NODE	69:13	69:13	13	FALSE
LEAF_NODE	69:18	69:18	11	)
LEAF_NODE	69:19	69:19	9	,
ARGUMENT	70:9	70:9	9	COLUMN_ICON
FIELD	70:9	70:9	10	COLUMN_ICON
LEAF_NODE	70:9	70:9	11	COLUMN_ICON
LEAF_NODE	70:20	70:20	9	,
ARGUMENT	70:22	70:22	9	pixbuf
FIELD	70:22	70:22	10	pixbuf
LEAF_NODE	70:22	70:22	11	pixbuf
LEAF_NODE	70:28	70:28	9	,
ARGUMENT	71:9	71:9	9	COLUMN_USERNAME
FIELD	71:9	71:9	10	COLUMN_USERNAME
LEAF_NODE	71:9	71:9	11	COLUMN_USERNAME
LEAF_NODE	71:24	71:24	9	,
ARGUMENT	72:9	72:9	9	purple_account_get_username ( account )
FUNCTION_CALL	72:9	72:44	10	purple_account_get_username ( account )
CALLEE	72:9	72:9	11	purple_account_get_username
LEAF_NODE	72:9	72:9	12	purple_account_get_username
LEAF_NODE	72:36	72:36	11	(
ARGUMENT	72:37	72:37	11	account
FIELD	72:37	72:37	12	account
LEAF_NODE	72:37	72:37	13	account
LEAF_NODE	72:44	72:44	11	)
LEAF_NODE	72:45	72:45	9	,
ARGUMENT	73:9	73:9	9	COLUMN_DATA
FIELD	73:9	73:9	10	COLUMN_DATA
LEAF_NODE	73:9	73:9	11	COLUMN_DATA
LEAF_NODE	73:20	73:20	9	,
ARGUMENT	73:22	73:22	9	account
FIELD	73:22	73:22	10	account
LEAF_NODE	73:22	73:22	11	account
LEAF_NODE	73:29	73:29	9	,
ARGUMENT	74:9	74:9	9	- 1
UNARY_EXPR	74:9	74:10	10	- 1
UNARY_OPERATOR	74:9	74:9	11	-
LEAF_NODE	74:9	74:9	12	-
FIELD	74:10	74:10	11	1
LEAF_NODE	74:10	74:10	12	1
LEAF_NODE	74:11	74:11	9	)
LEAF_NODE	74:12	74:12	7	;
SELECTION	75:2	76:3	6	
KEYWORD	75:2	75:2	7	if
LEAF_NODE	75:2	75:2	8	if
LEAF_NODE	75:5	75:5	7	(
CONDITION	75:6	75:6	7	pixbuf != NULL
EXPR	75:6	75:16	8	pixbuf != NULL
FIELD	75:6	75:6	9	pixbuf
LEAF_NODE	75:6	75:6	10	pixbuf
EQ_OPERATOR	75:13	75:13	9	!=
LEAF_NODE	75:13	75:13	10	!=
FIELD	75:16	75:16	9	NULL
LEAF_NODE	75:16	75:16	10	NULL
LEAF_NODE	75:20	75:20	7	)
STATEMENTS	76:3	76:3	7	
EXPR_STATEMENT	76:3	76:35	8	g_object_unref ( G_OBJECT ( pixbuf ) ) ;
EXPR	76:3	76:3	9	g_object_unref ( G_OBJECT ( pixbuf ) )
FUNCTION_CALL	76:3	76:34	10	g_object_unref ( G_OBJECT ( pixbuf ) )
CALLEE	76:3	76:3	11	g_object_unref
LEAF_NODE	76:3	76:3	12	g_object_unref
LEAF_NODE	76:17	76:17	11	(
ARGUMENT	76:18	76:18	11	G_OBJECT ( pixbuf )
FUNCTION_CALL	76:18	76:33	12	G_OBJECT ( pixbuf )
CALLEE	76:18	76:18	13	G_OBJECT
LEAF_NODE	76:18	76:18	14	G_OBJECT
LEAF_NODE	76:26	76:26	13	(
ARGUMENT	76:27	76:27	13	pixbuf
FIELD	76:27	76:27	14	pixbuf
LEAF_NODE	76:27	76:27	15	pixbuf
LEAF_NODE	76:33	76:33	13	)
LEAF_NODE	76:34	76:34	11	)
LEAF_NODE	76:35	76:35	9	;
LEAF_NODE	77:1	77:1	5	}
EXPR_STATEMENT	78:1	78:25	3	gtk_widget_show_all ( ret ) ;
EXPR	78:1	78:1	4	gtk_widget_show_all ( ret )
FUNCTION_CALL	78:1	78:24	5	gtk_widget_show_all ( ret )
CALLEE	78:1	78:1	6	gtk_widget_show_all
LEAF_NODE	78:1	78:1	7	gtk_widget_show_all
LEAF_NODE	78:20	78:20	6	(
ARGUMENT	78:21	78:21	6	ret
FIELD	78:21	78:21	7	ret
LEAF_NODE	78:21	78:21	8	ret
LEAF_NODE	78:24	78:24	6	)
LEAF_NODE	78:25	78:25	4	;
JUMP_STATEMENT	79:1	79:11	3	return ret ;
KEYWORD	79:1	79:1	4	return
LEAF_NODE	79:1	79:1	5	return
DESTINATION	79:8	79:8	4	ret
EXPR	79:8	79:8	5	ret
FIELD	79:8	79:8	6	ret
LEAF_NODE	79:8	79:8	7	ret
LEAF_NODE	79:11	79:11	4	;
LEAF_NODE	80:0	80:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	24:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	search_changed_cb
LEAF_NODE	2:0	2:0	3	search_changed_cb
PARAMETER_LIST	2:17	2:67	2	( GtkEntry * entry , GevoAssociateBuddyDialog * dialog )
LEAF_NODE	2:17	2:17	3	(
PARAMETER_DECL	2:18	2:28	3	GtkEntry * entry
TYPE	2:18	2:27	4	GtkEntry *
TYPE_NAME	2:18	2:18	5	GtkEntry
LEAF_NODE	2:18	2:18	6	GtkEntry
POINTER	2:27	2:27	5	*
LEAF_NODE	2:27	2:27	6	*
NAME	2:28	2:28	4	entry
LEAF_NODE	2:28	2:28	5	entry
LEAF_NODE	2:33	2:33	3	,
PARAMETER_DECL	2:35	2:61	3	GevoAssociateBuddyDialog * dialog
TYPE	2:35	2:60	4	GevoAssociateBuddyDialog *
TYPE_NAME	2:35	2:35	5	GevoAssociateBuddyDialog
LEAF_NODE	2:35	2:35	6	GevoAssociateBuddyDialog
POINTER	2:60	2:60	5	*
LEAF_NODE	2:60	2:60	6	*
NAME	2:61	2:61	4	dialog
LEAF_NODE	2:61	2:61	5	dialog
LEAF_NODE	2:67	2:67	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	7:1	2	
SIMPLE_DECL	4:1	4:45	3	const char * text ; text = gtk_entry_get_text ( entry ) ;
VAR_DECL	4:1	4:13	4	const char * text ; text = gtk_entry_get_text ( entry )
TYPE	4:1	4:12	5	const char *
TYPE_NAME	4:1	4:7	6	const char
LEAF_NODE	4:1	4:1	7	const
LEAF_NODE	4:7	4:7	7	char
POINTER	4:12	4:12	6	*
LEAF_NODE	4:12	4:12	7	*
NAME	4:13	4:13	5	text
LEAF_NODE	4:13	4:13	6	text
LEAF_NODE	0:0	0:0	5	;
INIT	4:13	4:13	5	text = gtk_entry_get_text ( entry )
ASSIGN	4:13	4:20	6	text = gtk_entry_get_text ( entry )
LVAL	4:13	4:13	7	text
NAME	4:13	4:13	8	text
LEAF_NODE	4:13	4:13	9	text
ASSIGN_OP	4:18	4:18	7	=
LEAF_NODE	4:18	4:18	8	=
RVAL	4:20	4:20	7	gtk_entry_get_text ( entry )
FUNCTION_CALL	4:20	4:44	8	gtk_entry_get_text ( entry )
CALLEE	4:20	4:20	9	gtk_entry_get_text
LEAF_NODE	4:20	4:20	10	gtk_entry_get_text
LEAF_NODE	4:38	4:38	9	(
ARGUMENT	4:39	4:39	9	entry
FIELD	4:39	4:39	10	entry
LEAF_NODE	4:39	4:39	11	entry
LEAF_NODE	4:44	4:44	9	)
LEAF_NODE	4:45	4:45	4	;
SIMPLE_DECL	5:1	5:9	3	GList * l ;
VAR_DECL	5:1	5:8	4	GList * l
TYPE	5:1	5:7	5	GList *
TYPE_NAME	5:1	5:1	6	GList
LEAF_NODE	5:1	5:1	7	GList
POINTER	5:7	5:7	6	*
LEAF_NODE	5:7	5:7	7	*
NAME	5:8	5:8	5	l
LEAF_NODE	5:8	5:8	6	l
LEAF_NODE	5:9	5:9	4	;
EXPR_STATEMENT	6:1	6:36	3	gtk_list_store_clear ( dialog -> model ) ;
EXPR	6:1	6:1	4	gtk_list_store_clear ( dialog -> model )
FUNCTION_CALL	6:1	6:35	5	gtk_list_store_clear ( dialog -> model )
CALLEE	6:1	6:1	6	gtk_list_store_clear
LEAF_NODE	6:1	6:1	7	gtk_list_store_clear
LEAF_NODE	6:21	6:21	6	(
ARGUMENT	6:22	6:22	6	dialog -> model
FIELD	6:22	6:30	7	dialog -> model
LEAF_NODE	6:22	6:22	8	dialog
LEAF_NODE	6:28	6:28	8	->
LEAF_NODE	6:30	6:30	8	model
LEAF_NODE	6:35	6:35	6	)
LEAF_NODE	6:36	6:36	4	;
ITERATION	7:1	8:1	3	
KEYWORD	7:1	7:1	4	for
LEAF_NODE	7:1	7:1	5	for
LEAF_NODE	7:5	7:5	4	(
FOR_INIT	7:6	7:26	4	l = dialog -> contacts ;
EXPR	7:6	7:6	5	l = dialog -> contacts
ASSIGN	7:6	7:10	6	l = dialog -> contacts
LVAL	7:6	7:6	7	l
FIELD	7:6	7:6	8	l
LEAF_NODE	7:6	7:6	9	l
ASSIGN_OP	7:8	7:8	7	=
LEAF_NODE	7:8	7:8	8	=
RVAL	7:10	7:10	7	dialog -> contacts
FIELD	7:10	7:18	8	dialog -> contacts
LEAF_NODE	7:10	7:10	9	dialog
LEAF_NODE	7:16	7:16	9	->
LEAF_NODE	7:18	7:18	9	contacts
LEAF_NODE	7:26	7:26	5	;
CONDITION	7:28	7:28	4	l != NULL
EXPR	7:28	7:33	5	l != NULL
FIELD	7:28	7:28	6	l
LEAF_NODE	7:28	7:28	7	l
EQ_OPERATOR	7:30	7:30	6	!=
LEAF_NODE	7:30	7:30	7	!=
FIELD	7:33	7:33	6	NULL
LEAF_NODE	7:33	7:33	7	NULL
LEAF_NODE	7:37	7:37	4	;
FOR_EXPR	7:39	7:39	4	l = l -> next
EXPR	7:39	7:39	5	l = l -> next
ASSIGN	7:39	7:43	6	l = l -> next
LVAL	7:39	7:39	7	l
FIELD	7:39	7:39	8	l
LEAF_NODE	7:39	7:39	9	l
ASSIGN_OP	7:41	7:41	7	=
LEAF_NODE	7:41	7:41	8	=
RVAL	7:43	7:43	7	l -> next
FIELD	7:43	7:46	8	l -> next
LEAF_NODE	7:43	7:43	9	l
LEAF_NODE	7:44	7:44	9	->
LEAF_NODE	7:46	7:46	9	next
LEAF_NODE	7:50	7:50	4	)
STATEMENTS	8:1	23:1	4	
LEAF_NODE	8:1	8:1	5	{
STATEMENTS	9:2	19:2	5	
SIMPLE_DECL	9:2	9:40	6	EContact * contact ; contact = E_CONTACT ( l -> data ) ;
VAR_DECL	9:2	9:12	7	EContact * contact ; contact = E_CONTACT ( l -> data )
TYPE	9:2	9:11	8	EContact *
TYPE_NAME	9:2	9:2	9	EContact
LEAF_NODE	9:2	9:2	10	EContact
POINTER	9:11	9:11	9	*
LEAF_NODE	9:11	9:11	10	*
NAME	9:12	9:12	8	contact
LEAF_NODE	9:12	9:12	9	contact
LEAF_NODE	0:0	0:0	8	;
INIT	9:12	9:12	8	contact = E_CONTACT ( l -> data )
ASSIGN	9:12	9:22	9	contact = E_CONTACT ( l -> data )
LVAL	9:12	9:12	10	contact
NAME	9:12	9:12	11	contact
LEAF_NODE	9:12	9:12	12	contact
ASSIGN_OP	9:20	9:20	10	=
LEAF_NODE	9:20	9:20	11	=
RVAL	9:22	9:22	10	E_CONTACT ( l -> data )
FUNCTION_CALL	9:22	9:39	11	E_CONTACT ( l -> data )
CALLEE	9:22	9:22	12	E_CONTACT
LEAF_NODE	9:22	9:22	13	E_CONTACT
LEAF_NODE	9:31	9:31	12	(
ARGUMENT	9:32	9:32	12	l -> data
FIELD	9:32	9:35	13	l -> data
LEAF_NODE	9:32	9:32	14	l
LEAF_NODE	9:33	9:33	14	->
LEAF_NODE	9:35	9:35	14	data
LEAF_NODE	9:39	9:39	12	)
LEAF_NODE	9:40	9:40	7	;
SIMPLE_DECL	10:2	10:18	6	const char * name ;
VAR_DECL	10:2	10:14	7	const char * name
TYPE	10:2	10:13	8	const char *
TYPE_NAME	10:2	10:8	9	const char
LEAF_NODE	10:2	10:2	10	const
LEAF_NODE	10:8	10:8	10	char
POINTER	10:13	10:13	9	*
LEAF_NODE	10:13	10:13	10	*
NAME	10:14	10:14	8	name
LEAF_NODE	10:14	10:14	9	name
LEAF_NODE	10:18	10:18	7	;
SIMPLE_DECL	11:2	11:18	6	GtkTreeIter iter ;
VAR_DECL	11:2	11:14	7	GtkTreeIter iter
TYPE	11:2	11:2	8	GtkTreeIter
TYPE_NAME	11:2	11:2	9	GtkTreeIter
LEAF_NODE	11:2	11:2	10	GtkTreeIter
NAME	11:14	11:14	8	iter
LEAF_NODE	11:14	11:14	9	iter
LEAF_NODE	11:18	11:18	7	;
EXPR_STATEMENT	12:2	12:58	6	name = e_contact_get_const ( contact , E_CONTACT_FULL_NAME ) ;
EXPR	12:2	12:2	7	name = e_contact_get_const ( contact , E_CONTACT_FULL_NAME )
ASSIGN	12:2	12:9	8	name = e_contact_get_const ( contact , E_CONTACT_FULL_NAME )
LVAL	12:2	12:2	9	name
FIELD	12:2	12:2	10	name
LEAF_NODE	12:2	12:2	11	name
ASSIGN_OP	12:7	12:7	9	=
LEAF_NODE	12:7	12:7	10	=
RVAL	12:9	12:9	9	e_contact_get_const ( contact , E_CONTACT_FULL_NAME )
FUNCTION_CALL	12:9	12:57	10	e_contact_get_const ( contact , E_CONTACT_FULL_NAME )
CALLEE	12:9	12:9	11	e_contact_get_const
LEAF_NODE	12:9	12:9	12	e_contact_get_const
LEAF_NODE	12:28	12:28	11	(
ARGUMENT	12:29	12:29	11	contact
FIELD	12:29	12:29	12	contact
LEAF_NODE	12:29	12:29	13	contact
LEAF_NODE	12:36	12:36	11	,
ARGUMENT	12:38	12:38	11	E_CONTACT_FULL_NAME
FIELD	12:38	12:38	12	E_CONTACT_FULL_NAME
LEAF_NODE	12:38	12:38	13	E_CONTACT_FULL_NAME
LEAF_NODE	12:57	12:57	11	)
LEAF_NODE	12:58	12:58	7	;
SELECTION	13:2	15:2	6	
KEYWORD	13:2	13:2	7	if
LEAF_NODE	13:2	13:2	8	if
LEAF_NODE	13:5	13:5	7	(
CONDITION	13:6	13:6	7	text != NULL && * text != '\0' && name != NULL && g_ascii_strncasecmp ( name , text , strlen ( text ) )
EXPR	13:6	13:6	8	text != NULL && * text != '\0' && name != NULL && g_ascii_strncasecmp ( name , text , strlen ( text ) )
AND	13:6	13:22	9	text != NULL && * text != '\0' && name != NULL && g_ascii_strncasecmp ( name , text , strlen ( text ) )
EXPR	13:6	13:14	10	text != NULL
FIELD	13:6	13:6	11	text
LEAF_NODE	13:6	13:6	12	text
EQ_OPERATOR	13:11	13:11	11	!=
LEAF_NODE	13:11	13:11	12	!=
FIELD	13:14	13:14	11	NULL
LEAF_NODE	13:14	13:14	12	NULL
LEAF_NODE	13:19	13:19	10	&&
EXPR	13:22	13:22	10	* text != '\0' && name != NULL && g_ascii_strncasecmp ( name , text , strlen ( text ) )
AND	13:22	13:39	11	* text != '\0' && name != NULL && g_ascii_strncasecmp ( name , text , strlen ( text ) )
EXPR	13:22	13:31	12	* text != '\0'
UNARY_EXPR	13:22	13:23	13	* text
UNARY_OPERATOR	13:22	13:22	14	*
LEAF_NODE	13:22	13:22	15	*
FIELD	13:23	13:23	14	text
LEAF_NODE	13:23	13:23	15	text
EQ_OPERATOR	13:28	13:28	13	!=
LEAF_NODE	13:28	13:28	14	!=
FIELD	13:31	13:31	13	'\0'
LEAF_NODE	13:31	13:31	14	'\0'
LEAF_NODE	13:36	13:36	12	&&
EXPR	13:39	13:39	12	name != NULL && g_ascii_strncasecmp ( name , text , strlen ( text ) )
AND	13:39	14:3	13	name != NULL && g_ascii_strncasecmp ( name , text , strlen ( text ) )
EXPR	13:39	13:47	14	name != NULL
FIELD	13:39	13:39	15	name
LEAF_NODE	13:39	13:39	16	name
EQ_OPERATOR	13:44	13:44	15	!=
LEAF_NODE	13:44	13:44	16	!=
FIELD	13:47	13:47	15	NULL
LEAF_NODE	13:47	13:47	16	NULL
LEAF_NODE	13:52	13:52	14	&&
EXPR	14:3	14:3	14	g_ascii_strncasecmp ( name , text , strlen ( text ) )
FUNCTION_CALL	14:3	14:47	15	g_ascii_strncasecmp ( name , text , strlen ( text ) )
CALLEE	14:3	14:3	16	g_ascii_strncasecmp
LEAF_NODE	14:3	14:3	17	g_ascii_strncasecmp
LEAF_NODE	14:22	14:22	16	(
ARGUMENT	14:23	14:23	16	name
FIELD	14:23	14:23	17	name
LEAF_NODE	14:23	14:23	18	name
LEAF_NODE	14:27	14:27	16	,
ARGUMENT	14:29	14:29	16	text
FIELD	14:29	14:29	17	text
LEAF_NODE	14:29	14:29	18	text
LEAF_NODE	14:33	14:33	16	,
ARGUMENT	14:35	14:35	16	strlen ( text )
FUNCTION_CALL	14:35	14:46	17	strlen ( text )
CALLEE	14:35	14:35	18	strlen
LEAF_NODE	14:35	14:35	19	strlen
LEAF_NODE	14:41	14:41	18	(
ARGUMENT	14:42	14:42	18	text
FIELD	14:42	14:42	19	text
LEAF_NODE	14:42	14:42	20	text
LEAF_NODE	14:46	14:46	18	)
LEAF_NODE	14:47	14:47	16	)
LEAF_NODE	14:48	14:48	7	)
STATEMENTS	15:2	17:2	7	
LEAF_NODE	15:2	15:2	8	{
STATEMENTS	16:3	16:3	8	
JUMP_STATEMENT	16:3	16:11	9	continue DESTINATION ;
KEYWORD	16:3	16:3	10	continue
LEAF_NODE	16:3	16:3	11	continue
LEAF_NODE	0:0	0:0	10	DESTINATION
LEAF_NODE	16:11	16:11	10	;
LEAF_NODE	17:2	17:2	8	}
EXPR_STATEMENT	18:2	18:45	6	gtk_list_store_append ( dialog -> model , & iter ) ;
EXPR	18:2	18:2	7	gtk_list_store_append ( dialog -> model , & iter )
FUNCTION_CALL	18:2	18:44	8	gtk_list_store_append ( dialog -> model , & iter )
CALLEE	18:2	18:2	9	gtk_list_store_append
LEAF_NODE	18:2	18:2	10	gtk_list_store_append
LEAF_NODE	18:23	18:23	9	(
ARGUMENT	18:24	18:24	9	dialog -> model
FIELD	18:24	18:32	10	dialog -> model
LEAF_NODE	18:24	18:24	11	dialog
LEAF_NODE	18:30	18:30	11	->
LEAF_NODE	18:32	18:32	11	model
LEAF_NODE	18:37	18:37	9	,
ARGUMENT	18:39	18:39	9	& iter
UNARY_EXPR	18:39	18:40	10	& iter
UNARY_OPERATOR	18:39	18:39	11	&
LEAF_NODE	18:39	18:39	12	&
FIELD	18:40	18:40	11	iter
LEAF_NODE	18:40	18:40	12	iter
LEAF_NODE	18:44	18:44	9	)
LEAF_NODE	18:45	18:45	7	;
EXPR_STATEMENT	19:2	22:12	6	gtk_list_store_set ( dialog -> model , & iter , COLUMN_NAME , name , COLUMN_DATA , contact , - 1 ) ;
EXPR	19:2	19:2	7	gtk_list_store_set ( dialog -> model , & iter , COLUMN_NAME , name , COLUMN_DATA , contact , - 1 )
FUNCTION_CALL	19:2	22:11	8	gtk_list_store_set ( dialog -> model , & iter , COLUMN_NAME , name , COLUMN_DATA , contact , - 1 )
CALLEE	19:2	19:2	9	gtk_list_store_set
LEAF_NODE	19:2	19:2	10	gtk_list_store_set
LEAF_NODE	19:20	19:20	9	(
ARGUMENT	19:21	19:21	9	dialog -> model
FIELD	19:21	19:29	10	dialog -> model
LEAF_NODE	19:21	19:21	11	dialog
LEAF_NODE	19:27	19:27	11	->
LEAF_NODE	19:29	19:29	11	model
LEAF_NODE	19:34	19:34	9	,
ARGUMENT	19:36	19:36	9	& iter
UNARY_EXPR	19:36	19:37	10	& iter
UNARY_OPERATOR	19:36	19:36	11	&
LEAF_NODE	19:36	19:36	12	&
FIELD	19:37	19:37	11	iter
LEAF_NODE	19:37	19:37	12	iter
LEAF_NODE	19:41	19:41	9	,
ARGUMENT	20:9	20:9	9	COLUMN_NAME
FIELD	20:9	20:9	10	COLUMN_NAME
LEAF_NODE	20:9	20:9	11	COLUMN_NAME
LEAF_NODE	20:20	20:20	9	,
ARGUMENT	20:22	20:22	9	name
FIELD	20:22	20:22	10	name
LEAF_NODE	20:22	20:22	11	name
LEAF_NODE	20:26	20:26	9	,
ARGUMENT	21:9	21:9	9	COLUMN_DATA
FIELD	21:9	21:9	10	COLUMN_DATA
LEAF_NODE	21:9	21:9	11	COLUMN_DATA
LEAF_NODE	21:20	21:20	9	,
ARGUMENT	21:22	21:22	9	contact
FIELD	21:22	21:22	10	contact
LEAF_NODE	21:22	21:22	11	contact
LEAF_NODE	21:29	21:29	9	,
ARGUMENT	22:9	22:9	9	- 1
UNARY_EXPR	22:9	22:10	10	- 1
UNARY_OPERATOR	22:9	22:9	11	-
LEAF_NODE	22:9	22:9	12	-
FIELD	22:10	22:10	11	1
LEAF_NODE	22:10	22:10	12	1
LEAF_NODE	22:11	22:11	9	)
LEAF_NODE	22:12	22:12	7	;
LEAF_NODE	23:1	23:1	5	}
LEAF_NODE	24:0	24:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	11:0	1	
RETURN_TYPE	1:0	1:13	2	static gchar *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gchar
LEAF_NODE	1:7	1:7	4	gchar
LEAF_NODE	1:13	1:13	3	*
FUNCTION_NAME	2:0	2:0	2	theme_clean_text
LEAF_NODE	2:0	2:0	3	theme_clean_text
PARAMETER_LIST	2:16	2:34	2	( const gchar * text )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:30	3	const gchar * text
TYPE	2:17	2:29	4	const gchar *
TYPE_NAME	2:17	2:23	5	const gchar
LEAF_NODE	2:17	2:17	6	const
LEAF_NODE	2:23	2:23	6	gchar
POINTER	2:29	2:29	5	*
LEAF_NODE	2:29	2:29	6	*
NAME	2:30	2:30	4	text
LEAF_NODE	2:30	2:30	5	text
LEAF_NODE	2:34	2:34	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	10:1	2	
SIMPLE_DECL	4:1	4:25	3	gchar * clean_text ; clean_text = NULL ;
VAR_DECL	4:1	4:8	4	gchar * clean_text ; clean_text = NULL
TYPE	4:1	4:7	5	gchar *
TYPE_NAME	4:1	4:1	6	gchar
LEAF_NODE	4:1	4:1	7	gchar
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	clean_text
LEAF_NODE	4:8	4:8	6	clean_text
LEAF_NODE	0:0	0:0	5	;
INIT	4:8	4:8	5	clean_text = NULL
ASSIGN	4:8	4:21	6	clean_text = NULL
LVAL	4:8	4:8	7	clean_text
NAME	4:8	4:8	8	clean_text
LEAF_NODE	4:8	4:8	9	clean_text
ASSIGN_OP	4:19	4:19	7	=
LEAF_NODE	4:19	4:19	8	=
RVAL	4:21	4:21	7	NULL
FIELD	4:21	4:21	8	NULL
LEAF_NODE	4:21	4:21	9	NULL
LEAF_NODE	4:25	4:25	4	;
SELECTION	5:1	5:19	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	text != NULL
EXPR	5:5	5:13	5	text != NULL
FIELD	5:5	5:5	6	text
LEAF_NODE	5:5	5:5	7	text
EQ_OPERATOR	5:10	5:10	6	!=
LEAF_NODE	5:10	5:10	7	!=
FIELD	5:13	5:13	6	NULL
LEAF_NODE	5:13	5:13	7	NULL
LEAF_NODE	5:17	5:17	4	)
STATEMENTS	5:19	9:1	4	
LEAF_NODE	5:19	5:19	5	{
STATEMENTS	6:2	8:2	5	
EXPR_STATEMENT	6:2	6:45	6	clean_text = g_markup_escape_text ( text , - 1 ) ;
EXPR	6:2	6:2	7	clean_text = g_markup_escape_text ( text , - 1 )
ASSIGN	6:2	6:15	8	clean_text = g_markup_escape_text ( text , - 1 )
LVAL	6:2	6:2	9	clean_text
FIELD	6:2	6:2	10	clean_text
LEAF_NODE	6:2	6:2	11	clean_text
ASSIGN_OP	6:13	6:13	9	=
LEAF_NODE	6:13	6:13	10	=
RVAL	6:15	6:15	9	g_markup_escape_text ( text , - 1 )
FUNCTION_CALL	6:15	6:44	10	g_markup_escape_text ( text , - 1 )
CALLEE	6:15	6:15	11	g_markup_escape_text
LEAF_NODE	6:15	6:15	12	g_markup_escape_text
LEAF_NODE	6:35	6:35	11	(
ARGUMENT	6:36	6:36	11	text
FIELD	6:36	6:36	12	text
LEAF_NODE	6:36	6:36	13	text
LEAF_NODE	6:40	6:40	11	,
ARGUMENT	6:42	6:42	11	- 1
UNARY_EXPR	6:42	6:43	12	- 1
UNARY_OPERATOR	6:42	6:42	13	-
LEAF_NODE	6:42	6:42	14	-
FIELD	6:43	6:43	13	1
LEAF_NODE	6:43	6:43	14	1
LEAF_NODE	6:44	6:44	11	)
LEAF_NODE	6:45	6:45	7	;
EXPR_STATEMENT	7:2	7:37	6	g_strdelimit ( clean_text , "\n" , ' ' ) ;
EXPR	7:2	7:2	7	g_strdelimit ( clean_text , "\n" , ' ' )
FUNCTION_CALL	7:2	7:36	8	g_strdelimit ( clean_text , "\n" , ' ' )
CALLEE	7:2	7:2	9	g_strdelimit
LEAF_NODE	7:2	7:2	10	g_strdelimit
LEAF_NODE	7:14	7:14	9	(
ARGUMENT	7:15	7:15	9	clean_text
FIELD	7:15	7:15	10	clean_text
LEAF_NODE	7:15	7:15	11	clean_text
LEAF_NODE	7:25	7:25	9	,
ARGUMENT	7:27	7:27	9	"\n"
FIELD	7:27	7:27	10	"\n"
LEAF_NODE	7:27	7:27	11	"\n"
LEAF_NODE	7:31	7:31	9	,
ARGUMENT	7:33	7:33	9	' '
FIELD	7:33	7:33	10	' '
LEAF_NODE	7:33	7:33	11	' '
LEAF_NODE	7:36	7:36	9	)
LEAF_NODE	7:37	7:37	7	;
EXPR_STATEMENT	8:2	8:41	6	purple_str_strip_char ( clean_text , '\r' ) ;
EXPR	8:2	8:2	7	purple_str_strip_char ( clean_text , '\r' )
FUNCTION_CALL	8:2	8:40	8	purple_str_strip_char ( clean_text , '\r' )
CALLEE	8:2	8:2	9	purple_str_strip_char
LEAF_NODE	8:2	8:2	10	purple_str_strip_char
LEAF_NODE	8:23	8:23	9	(
ARGUMENT	8:24	8:24	9	clean_text
FIELD	8:24	8:24	10	clean_text
LEAF_NODE	8:24	8:24	11	clean_text
LEAF_NODE	8:34	8:34	9	,
ARGUMENT	8:36	8:36	9	'\r'
FIELD	8:36	8:36	10	'\r'
LEAF_NODE	8:36	8:36	11	'\r'
LEAF_NODE	8:40	8:40	9	)
LEAF_NODE	8:41	8:41	7	;
LEAF_NODE	9:1	9:1	5	}
JUMP_STATEMENT	10:1	10:18	3	return clean_text ;
KEYWORD	10:1	10:1	4	return
LEAF_NODE	10:1	10:1	5	return
DESTINATION	10:8	10:8	4	clean_text
EXPR	10:8	10:8	5	clean_text
FIELD	10:8	10:8	6	clean_text
LEAF_NODE	10:8	10:8	7	clean_text
LEAF_NODE	10:18	10:18	4	;
LEAF_NODE	11:0	11:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	104:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	jabber_do_init
LEAF_NODE	2:0	2:0	3	jabber_do_init
PARAMETER_LIST	2:14	2:19	2	( void )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:15	3	void
LEAF_NODE	2:15	2:15	4	void
LEAF_NODE	2:19	2:19	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	103:1	2	
SIMPLE_DECL	4:1	4:48	3	GHashTable * ui_info ; ui_info = purple_core_get_ui_info ( ) ;
VAR_DECL	4:1	4:13	4	GHashTable * ui_info ; ui_info = purple_core_get_ui_info ( )
TYPE	4:1	4:12	5	GHashTable *
TYPE_NAME	4:1	4:1	6	GHashTable
LEAF_NODE	4:1	4:1	7	GHashTable
POINTER	4:12	4:12	6	*
LEAF_NODE	4:12	4:12	7	*
NAME	4:13	4:13	5	ui_info
LEAF_NODE	4:13	4:13	6	ui_info
LEAF_NODE	0:0	0:0	5	;
INIT	4:13	4:13	5	ui_info = purple_core_get_ui_info ( )
ASSIGN	4:13	4:23	6	ui_info = purple_core_get_ui_info ( )
LVAL	4:13	4:13	7	ui_info
NAME	4:13	4:13	8	ui_info
LEAF_NODE	4:13	4:13	9	ui_info
ASSIGN_OP	4:21	4:21	7	=
LEAF_NODE	4:21	4:21	8	=
RVAL	4:23	4:23	7	purple_core_get_ui_info ( )
FUNCTION_CALL	4:23	4:47	8	purple_core_get_ui_info ( )
CALLEE	4:23	4:23	9	purple_core_get_ui_info
LEAF_NODE	4:23	4:23	10	purple_core_get_ui_info
LEAF_NODE	4:46	4:46	9	(
LEAF_NODE	4:47	4:47	9	)
LEAF_NODE	4:48	4:48	4	;
SIMPLE_DECL	5:1	5:21	3	const gchar * ui_type ;
VAR_DECL	5:1	5:14	4	const gchar * ui_type
TYPE	5:1	5:13	5	const gchar *
TYPE_NAME	5:1	5:7	6	const gchar
LEAF_NODE	5:1	5:1	7	const
LEAF_NODE	5:7	5:7	7	gchar
POINTER	5:13	5:13	6	*
LEAF_NODE	5:13	5:13	7	*
NAME	5:14	5:14	5	ui_type
LEAF_NODE	5:14	5:14	6	ui_type
LEAF_NODE	5:21	5:21	4	;
SIMPLE_DECL	6:1	6:25	3	const gchar * type ; type = "pc" ;
VAR_DECL	6:1	6:14	4	const gchar * type ; type = "pc"
TYPE	6:1	6:13	5	const gchar *
TYPE_NAME	6:1	6:7	6	const gchar
LEAF_NODE	6:1	6:1	7	const
LEAF_NODE	6:7	6:7	7	gchar
POINTER	6:13	6:13	6	*
LEAF_NODE	6:13	6:13	7	*
NAME	6:14	6:14	5	type
LEAF_NODE	6:14	6:14	6	type
LEAF_NODE	0:0	0:0	5	;
INIT	6:14	6:14	5	type = "pc"
ASSIGN	6:14	6:21	6	type = "pc"
LVAL	6:14	6:14	7	type
NAME	6:14	6:14	8	type
LEAF_NODE	6:14	6:14	9	type
ASSIGN_OP	6:19	6:19	7	=
LEAF_NODE	6:19	6:19	8	=
RVAL	6:21	6:21	7	"pc"
FIELD	6:21	6:21	8	"pc"
LEAF_NODE	6:21	6:21	9	"pc"
LEAF_NODE	6:25	6:25	4	;
SIMPLE_DECL	8:1	8:28	3	const gchar * ui_name ; ui_name = NULL ;
VAR_DECL	8:1	8:14	4	const gchar * ui_name ; ui_name = NULL
TYPE	8:1	8:13	5	const gchar *
TYPE_NAME	8:1	8:7	6	const gchar
LEAF_NODE	8:1	8:1	7	const
LEAF_NODE	8:7	8:7	7	gchar
POINTER	8:13	8:13	6	*
LEAF_NODE	8:13	8:13	7	*
NAME	8:14	8:14	5	ui_name
LEAF_NODE	8:14	8:14	6	ui_name
LEAF_NODE	0:0	0:0	5	;
INIT	8:14	8:14	5	ui_name = NULL
ASSIGN	8:14	8:24	6	ui_name = NULL
LVAL	8:14	8:14	7	ui_name
NAME	8:14	8:14	8	ui_name
LEAF_NODE	8:14	8:14	9	ui_name
ASSIGN_OP	8:22	8:22	7	=
LEAF_NODE	8:22	8:22	8	=
RVAL	8:24	8:24	7	NULL
FIELD	8:24	8:24	8	NULL
LEAF_NODE	8:24	8:24	9	NULL
LEAF_NODE	8:28	8:28	4	;
LEAF_NODE	11:1	11:1	3	static
SIMPLE_DECL	11:8	11:41	3	gboolean sasl_initialized ; sasl_initialized = FALSE ;
VAR_DECL	11:8	11:17	4	gboolean sasl_initialized ; sasl_initialized = FALSE
TYPE	11:8	11:8	5	gboolean
TYPE_NAME	11:8	11:8	6	gboolean
LEAF_NODE	11:8	11:8	7	gboolean
NAME	11:17	11:17	5	sasl_initialized
LEAF_NODE	11:17	11:17	6	sasl_initialized
LEAF_NODE	0:0	0:0	5	;
INIT	11:17	11:17	5	sasl_initialized = FALSE
ASSIGN	11:17	11:36	6	sasl_initialized = FALSE
LVAL	11:17	11:17	7	sasl_initialized
NAME	11:17	11:17	8	sasl_initialized
LEAF_NODE	11:17	11:17	9	sasl_initialized
ASSIGN_OP	11:34	11:34	7	=
LEAF_NODE	11:34	11:34	8	=
RVAL	11:36	11:36	7	FALSE
FIELD	11:36	11:36	8	FALSE
LEAF_NODE	11:36	11:36	9	FALSE
LEAF_NODE	11:41	11:41	4	;
SIMPLE_DECL	13:1	13:20	3	UINT old_error_mode ;
VAR_DECL	13:1	13:6	4	UINT old_error_mode
TYPE	13:1	13:1	5	UINT
TYPE_NAME	13:1	13:1	6	UINT
LEAF_NODE	13:1	13:1	7	UINT
NAME	13:6	13:6	5	old_error_mode
LEAF_NODE	13:6	13:6	6	old_error_mode
LEAF_NODE	13:20	13:20	4	;
SIMPLE_DECL	14:1	14:15	3	gchar * sasldir ;
VAR_DECL	14:1	14:8	4	gchar * sasldir
TYPE	14:1	14:7	5	gchar *
TYPE_NAME	14:1	14:1	6	gchar
LEAF_NODE	14:1	14:1	7	gchar
POINTER	14:7	14:7	6	*
LEAF_NODE	14:7	14:7	7	*
NAME	14:8	14:8	5	sasldir
LEAF_NODE	14:8	14:8	6	sasldir
LEAF_NODE	14:15	14:15	4	;
SIMPLE_DECL	16:1	16:8	3	int ret ;
VAR_DECL	16:1	16:5	4	int ret
TYPE	16:1	16:1	5	int
TYPE_NAME	16:1	16:1	6	int
LEAF_NODE	16:1	16:1	7	int
NAME	16:5	16:5	5	ret
LEAF_NODE	16:5	16:5	6	ret
LEAF_NODE	16:8	16:8	4	;
SELECTION	20:1	20:24	3	
KEYWORD	20:1	20:1	4	if
LEAF_NODE	20:1	20:1	5	if
LEAF_NODE	20:4	20:4	4	(
CONDITION	20:5	20:5	4	! sasl_initialized
EXPR	20:5	20:5	5	! sasl_initialized
UNARY_EXPR	20:5	20:6	6	! sasl_initialized
UNARY_OPERATOR	20:5	20:5	7	!
LEAF_NODE	20:5	20:5	8	!
FIELD	20:6	20:6	7	sasl_initialized
LEAF_NODE	20:6	20:6	8	sasl_initialized
LEAF_NODE	20:22	20:22	4	)
STATEMENTS	20:24	36:1	4	
LEAF_NODE	20:24	20:24	5	{
STATEMENTS	21:2	34:2	5	
EXPR_STATEMENT	21:2	21:25	6	sasl_initialized = TRUE ;
EXPR	21:2	21:2	7	sasl_initialized = TRUE
ASSIGN	21:2	21:21	8	sasl_initialized = TRUE
LVAL	21:2	21:2	9	sasl_initialized
FIELD	21:2	21:2	10	sasl_initialized
LEAF_NODE	21:2	21:2	11	sasl_initialized
ASSIGN_OP	21:19	21:19	9	=
LEAF_NODE	21:19	21:19	10	=
RVAL	21:21	21:21	9	TRUE
FIELD	21:21	21:21	10	TRUE
LEAF_NODE	21:21	21:21	11	TRUE
LEAF_NODE	21:25	21:25	7	;
EXPR_STATEMENT	23:2	23:66	6	sasldir = g_build_filename ( wpurple_install_dir ( ) , "sasl2" , NULL ) ;
EXPR	23:2	23:2	7	sasldir = g_build_filename ( wpurple_install_dir ( ) , "sasl2" , NULL )
ASSIGN	23:2	23:12	8	sasldir = g_build_filename ( wpurple_install_dir ( ) , "sasl2" , NULL )
LVAL	23:2	23:2	9	sasldir
FIELD	23:2	23:2	10	sasldir
LEAF_NODE	23:2	23:2	11	sasldir
ASSIGN_OP	23:10	23:10	9	=
LEAF_NODE	23:10	23:10	10	=
RVAL	23:12	23:12	9	g_build_filename ( wpurple_install_dir ( ) , "sasl2" , NULL )
FUNCTION_CALL	23:12	23:65	10	g_build_filename ( wpurple_install_dir ( ) , "sasl2" , NULL )
CALLEE	23:12	23:12	11	g_build_filename
LEAF_NODE	23:12	23:12	12	g_build_filename
LEAF_NODE	23:28	23:28	11	(
ARGUMENT	23:29	23:29	11	wpurple_install_dir ( )
FUNCTION_CALL	23:29	23:49	12	wpurple_install_dir ( )
CALLEE	23:29	23:29	13	wpurple_install_dir
LEAF_NODE	23:29	23:29	14	wpurple_install_dir
LEAF_NODE	23:48	23:48	13	(
LEAF_NODE	23:49	23:49	13	)
LEAF_NODE	23:50	23:50	11	,
ARGUMENT	23:52	23:52	11	"sasl2"
FIELD	23:52	23:52	12	"sasl2"
LEAF_NODE	23:52	23:52	13	"sasl2"
LEAF_NODE	23:59	23:59	11	,
ARGUMENT	23:61	23:61	11	NULL
FIELD	23:61	23:61	12	NULL
LEAF_NODE	23:61	23:61	13	NULL
LEAF_NODE	23:65	23:65	11	)
LEAF_NODE	23:66	23:66	7	;
EXPR_STATEMENT	24:2	24:47	6	sasl_set_path ( SASL_PATH_TYPE_PLUGIN , sasldir ) ;
EXPR	24:2	24:2	7	sasl_set_path ( SASL_PATH_TYPE_PLUGIN , sasldir )
FUNCTION_CALL	24:2	24:46	8	sasl_set_path ( SASL_PATH_TYPE_PLUGIN , sasldir )
CALLEE	24:2	24:2	9	sasl_set_path
LEAF_NODE	24:2	24:2	10	sasl_set_path
LEAF_NODE	24:15	24:15	9	(
ARGUMENT	24:16	24:16	9	SASL_PATH_TYPE_PLUGIN
FIELD	24:16	24:16	10	SASL_PATH_TYPE_PLUGIN
LEAF_NODE	24:16	24:16	11	SASL_PATH_TYPE_PLUGIN
LEAF_NODE	24:37	24:37	9	,
ARGUMENT	24:39	24:39	9	sasldir
FIELD	24:39	24:39	10	sasldir
LEAF_NODE	24:39	24:39	11	sasldir
LEAF_NODE	24:46	24:46	9	)
LEAF_NODE	24:47	24:47	7	;
EXPR_STATEMENT	25:2	25:17	6	g_free ( sasldir ) ;
EXPR	25:2	25:2	7	g_free ( sasldir )
FUNCTION_CALL	25:2	25:16	8	g_free ( sasldir )
CALLEE	25:2	25:2	9	g_free
LEAF_NODE	25:2	25:2	10	g_free
LEAF_NODE	25:8	25:8	9	(
ARGUMENT	25:9	25:9	9	sasldir
FIELD	25:9	25:9	10	sasldir
LEAF_NODE	25:9	25:9	11	sasldir
LEAF_NODE	25:16	25:16	9	)
LEAF_NODE	25:17	25:17	7	;
EXPR_STATEMENT	27:2	27:55	6	old_error_mode = SetErrorMode ( SEM_FAILCRITICALERRORS ) ;
EXPR	27:2	27:2	7	old_error_mode = SetErrorMode ( SEM_FAILCRITICALERRORS )
ASSIGN	27:2	27:19	8	old_error_mode = SetErrorMode ( SEM_FAILCRITICALERRORS )
LVAL	27:2	27:2	9	old_error_mode
FIELD	27:2	27:2	10	old_error_mode
LEAF_NODE	27:2	27:2	11	old_error_mode
ASSIGN_OP	27:17	27:17	9	=
LEAF_NODE	27:17	27:17	10	=
RVAL	27:19	27:19	9	SetErrorMode ( SEM_FAILCRITICALERRORS )
FUNCTION_CALL	27:19	27:54	10	SetErrorMode ( SEM_FAILCRITICALERRORS )
CALLEE	27:19	27:19	11	SetErrorMode
LEAF_NODE	27:19	27:19	12	SetErrorMode
LEAF_NODE	27:31	27:31	11	(
ARGUMENT	27:32	27:32	11	SEM_FAILCRITICALERRORS
FIELD	27:32	27:32	12	SEM_FAILCRITICALERRORS
LEAF_NODE	27:32	27:32	13	SEM_FAILCRITICALERRORS
LEAF_NODE	27:54	27:54	11	)
LEAF_NODE	27:55	27:55	7	;
SELECTION	29:2	29:49	6	
KEYWORD	29:2	29:2	7	if
LEAF_NODE	29:2	29:2	8	if
LEAF_NODE	29:5	29:5	7	(
CONDITION	29:6	29:6	7	( ret = sasl_client_init ( NULL ) ) != SASL_OK
EXPR	29:6	29:40	8	( ret = sasl_client_init ( NULL ) ) != SASL_OK
LEAF_NODE	29:6	29:6	9	(
ASSIGN	29:7	29:13	9	ret = sasl_client_init ( NULL )
LVAL	29:7	29:7	10	ret
FIELD	29:7	29:7	11	ret
LEAF_NODE	29:7	29:7	12	ret
ASSIGN_OP	29:11	29:11	10	=
LEAF_NODE	29:11	29:11	11	=
RVAL	29:13	29:13	10	sasl_client_init ( NULL )
FUNCTION_CALL	29:13	29:34	11	sasl_client_init ( NULL )
CALLEE	29:13	29:13	12	sasl_client_init
LEAF_NODE	29:13	29:13	13	sasl_client_init
LEAF_NODE	29:29	29:29	12	(
ARGUMENT	29:30	29:30	12	NULL
FIELD	29:30	29:30	13	NULL
LEAF_NODE	29:30	29:30	14	NULL
LEAF_NODE	29:34	29:34	12	)
LEAF_NODE	29:35	29:35	9	)
EQ_OPERATOR	29:37	29:37	9	!=
LEAF_NODE	29:37	29:37	10	!=
FIELD	29:40	29:40	9	SASL_OK
LEAF_NODE	29:40	29:40	10	SASL_OK
LEAF_NODE	29:47	29:47	7	)
STATEMENTS	29:49	31:2	7	
LEAF_NODE	29:49	29:49	8	{
STATEMENTS	30:3	30:3	8	
EXPR_STATEMENT	30:3	30:69	9	purple_debug_error ( "xmpp" , "Error (%d) initializing SASL.\n" , ret ) ;
EXPR	30:3	30:3	10	purple_debug_error ( "xmpp" , "Error (%d) initializing SASL.\n" , ret )
FUNCTION_CALL	30:3	30:68	11	purple_debug_error ( "xmpp" , "Error (%d) initializing SASL.\n" , ret )
CALLEE	30:3	30:3	12	purple_debug_error
LEAF_NODE	30:3	30:3	13	purple_debug_error
LEAF_NODE	30:21	30:21	12	(
ARGUMENT	30:22	30:22	12	"xmpp"
FIELD	30:22	30:22	13	"xmpp"
LEAF_NODE	30:22	30:22	14	"xmpp"
LEAF_NODE	30:28	30:28	12	,
ARGUMENT	30:30	30:30	12	"Error (%d) initializing SASL.\n"
FIELD	30:30	30:30	13	"Error (%d) initializing SASL.\n"
LEAF_NODE	30:30	30:30	14	"Error (%d) initializing SASL.\n"
LEAF_NODE	30:63	30:63	12	,
ARGUMENT	30:65	30:65	12	ret
FIELD	30:65	30:65	13	ret
LEAF_NODE	30:65	30:65	14	ret
LEAF_NODE	30:68	30:68	12	)
LEAF_NODE	30:69	30:69	10	;
LEAF_NODE	31:2	31:2	8	}
EXPR_STATEMENT	34:2	34:30	6	SetErrorMode ( old_error_mode ) ;
EXPR	34:2	34:2	7	SetErrorMode ( old_error_mode )
FUNCTION_CALL	34:2	34:29	8	SetErrorMode ( old_error_mode )
CALLEE	34:2	34:2	9	SetErrorMode
LEAF_NODE	34:2	34:2	10	SetErrorMode
LEAF_NODE	34:14	34:14	9	(
ARGUMENT	34:15	34:15	9	old_error_mode
FIELD	34:15	34:15	10	old_error_mode
LEAF_NODE	34:15	34:15	11	old_error_mode
LEAF_NODE	34:29	34:29	9	)
LEAF_NODE	34:30	34:30	7	;
LEAF_NODE	36:1	36:1	5	}
EXPR_STATEMENT	38:1	38:89	3	jabber_cmds = g_hash_table_new_full ( g_direct_hash , g_direct_equal , NULL , cmds_free_func ) ;
EXPR	38:1	38:1	4	jabber_cmds = g_hash_table_new_full ( g_direct_hash , g_direct_equal , NULL , cmds_free_func )
ASSIGN	38:1	38:15	5	jabber_cmds = g_hash_table_new_full ( g_direct_hash , g_direct_equal , NULL , cmds_free_func )
LVAL	38:1	38:1	6	jabber_cmds
FIELD	38:1	38:1	7	jabber_cmds
LEAF_NODE	38:1	38:1	8	jabber_cmds
ASSIGN_OP	38:13	38:13	6	=
LEAF_NODE	38:13	38:13	7	=
RVAL	38:15	38:15	6	g_hash_table_new_full ( g_direct_hash , g_direct_equal , NULL , cmds_free_func )
FUNCTION_CALL	38:15	38:88	7	g_hash_table_new_full ( g_direct_hash , g_direct_equal , NULL , cmds_free_func )
CALLEE	38:15	38:15	8	g_hash_table_new_full
LEAF_NODE	38:15	38:15	9	g_hash_table_new_full
LEAF_NODE	38:36	38:36	8	(
ARGUMENT	38:37	38:37	8	g_direct_hash
FIELD	38:37	38:37	9	g_direct_hash
LEAF_NODE	38:37	38:37	10	g_direct_hash
LEAF_NODE	38:50	38:50	8	,
ARGUMENT	38:52	38:52	8	g_direct_equal
FIELD	38:52	38:52	9	g_direct_equal
LEAF_NODE	38:52	38:52	10	g_direct_equal
LEAF_NODE	38:66	38:66	8	,
ARGUMENT	38:68	38:68	8	NULL
FIELD	38:68	38:68	9	NULL
LEAF_NODE	38:68	38:68	10	NULL
LEAF_NODE	38:72	38:72	8	,
ARGUMENT	38:74	38:74	8	cmds_free_func
FIELD	38:74	38:74	9	cmds_free_func
LEAF_NODE	38:74	38:74	10	cmds_free_func
LEAF_NODE	38:88	38:88	8	)
LEAF_NODE	38:89	38:89	4	;
EXPR_STATEMENT	39:1	39:71	3	ui_type = ui_info ? g_hash_table_lookup ( ui_info , "client_type" ) : NULL ;
EXPR	39:1	39:1	4	ui_type = ui_info ? g_hash_table_lookup ( ui_info , "client_type" ) : NULL
ASSIGN	39:1	39:11	5	ui_type = ui_info ? g_hash_table_lookup ( ui_info , "client_type" ) : NULL
LVAL	39:1	39:1	6	ui_type
FIELD	39:1	39:1	7	ui_type
LEAF_NODE	39:1	39:1	8	ui_type
ASSIGN_OP	39:9	39:9	6	=
LEAF_NODE	39:9	39:9	7	=
RVAL	39:11	39:11	6	ui_info ? g_hash_table_lookup ( ui_info , "client_type" ) : NULL
COND_EXPR	39:11	39:67	7	ui_info ? g_hash_table_lookup ( ui_info , "client_type" ) : NULL
CONDITION	39:11	39:11	8	ui_info
FIELD	39:11	39:11	9	ui_info
LEAF_NODE	39:11	39:11	10	ui_info
LEAF_NODE	39:19	39:19	8	?
EXPR	39:21	39:21	8	g_hash_table_lookup ( ui_info , "client_type" )
FUNCTION_CALL	39:21	39:63	9	g_hash_table_lookup ( ui_info , "client_type" )
CALLEE	39:21	39:21	10	g_hash_table_lookup
LEAF_NODE	39:21	39:21	11	g_hash_table_lookup
LEAF_NODE	39:40	39:40	10	(
ARGUMENT	39:41	39:41	10	ui_info
FIELD	39:41	39:41	11	ui_info
LEAF_NODE	39:41	39:41	12	ui_info
LEAF_NODE	39:48	39:48	10	,
ARGUMENT	39:50	39:50	10	"client_type"
FIELD	39:50	39:50	11	"client_type"
LEAF_NODE	39:50	39:50	12	"client_type"
LEAF_NODE	39:63	39:63	10	)
LEAF_NODE	39:65	39:65	8	:
FIELD	39:67	39:67	8	NULL
LEAF_NODE	39:67	39:67	9	NULL
LEAF_NODE	39:71	39:71	4	;
SELECTION	40:1	40:14	3	
KEYWORD	40:1	40:1	4	if
LEAF_NODE	40:1	40:1	5	if
LEAF_NODE	40:4	40:4	4	(
CONDITION	40:5	40:5	4	ui_type
EXPR	40:5	40:5	5	ui_type
FIELD	40:5	40:5	6	ui_type
LEAF_NODE	40:5	40:5	7	ui_type
LEAF_NODE	40:12	40:12	4	)
STATEMENTS	40:14	49:1	4	
LEAF_NODE	40:14	40:14	5	{
STATEMENTS	41:2	41:2	5	
SELECTION	41:2	46:32	6	
KEYWORD	41:2	41:2	7	if
LEAF_NODE	41:2	41:2	8	if
LEAF_NODE	41:5	41:5	7	(
CONDITION	41:6	41:6	7	strcmp ( ui_type , "pc" ) == 0 || strcmp ( ui_type , "console" ) == 0 || strcmp ( ui_type , "phone" ) == 0 || strcmp ( ui_type , "handheld" ) == 0 || strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
EXPR	41:6	41:6	8	strcmp ( ui_type , "pc" ) == 0 || strcmp ( ui_type , "console" ) == 0 || strcmp ( ui_type , "phone" ) == 0 || strcmp ( ui_type , "handheld" ) == 0 || strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
OR	41:6	42:3	9	strcmp ( ui_type , "pc" ) == 0 || strcmp ( ui_type , "console" ) == 0 || strcmp ( ui_type , "phone" ) == 0 || strcmp ( ui_type , "handheld" ) == 0 || strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
EXPR	41:6	41:31	10	strcmp ( ui_type , "pc" ) == 0
FUNCTION_CALL	41:6	41:26	11	strcmp ( ui_type , "pc" )
CALLEE	41:6	41:6	12	strcmp
LEAF_NODE	41:6	41:6	13	strcmp
LEAF_NODE	41:12	41:12	12	(
ARGUMENT	41:13	41:13	12	ui_type
FIELD	41:13	41:13	13	ui_type
LEAF_NODE	41:13	41:13	14	ui_type
LEAF_NODE	41:20	41:20	12	,
ARGUMENT	41:22	41:22	12	"pc"
FIELD	41:22	41:22	13	"pc"
LEAF_NODE	41:22	41:22	14	"pc"
LEAF_NODE	41:26	41:26	12	)
EQ_OPERATOR	41:28	41:28	11	==
LEAF_NODE	41:28	41:28	12	==
FIELD	41:31	41:31	11	0
LEAF_NODE	41:31	41:31	12	0
LEAF_NODE	41:33	41:33	10	||
EXPR	42:3	42:3	10	strcmp ( ui_type , "console" ) == 0 || strcmp ( ui_type , "phone" ) == 0 || strcmp ( ui_type , "handheld" ) == 0 || strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
OR	42:3	43:3	11	strcmp ( ui_type , "console" ) == 0 || strcmp ( ui_type , "phone" ) == 0 || strcmp ( ui_type , "handheld" ) == 0 || strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
EXPR	42:3	42:33	12	strcmp ( ui_type , "console" ) == 0
FUNCTION_CALL	42:3	42:28	13	strcmp ( ui_type , "console" )
CALLEE	42:3	42:3	14	strcmp
LEAF_NODE	42:3	42:3	15	strcmp
LEAF_NODE	42:9	42:9	14	(
ARGUMENT	42:10	42:10	14	ui_type
FIELD	42:10	42:10	15	ui_type
LEAF_NODE	42:10	42:10	16	ui_type
LEAF_NODE	42:17	42:17	14	,
ARGUMENT	42:19	42:19	14	"console"
FIELD	42:19	42:19	15	"console"
LEAF_NODE	42:19	42:19	16	"console"
LEAF_NODE	42:28	42:28	14	)
EQ_OPERATOR	42:30	42:30	13	==
LEAF_NODE	42:30	42:30	14	==
FIELD	42:33	42:33	13	0
LEAF_NODE	42:33	42:33	14	0
LEAF_NODE	42:35	42:35	12	||
EXPR	43:3	43:3	12	strcmp ( ui_type , "phone" ) == 0 || strcmp ( ui_type , "handheld" ) == 0 || strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
OR	43:3	44:3	13	strcmp ( ui_type , "phone" ) == 0 || strcmp ( ui_type , "handheld" ) == 0 || strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
EXPR	43:3	43:31	14	strcmp ( ui_type , "phone" ) == 0
FUNCTION_CALL	43:3	43:26	15	strcmp ( ui_type , "phone" )
CALLEE	43:3	43:3	16	strcmp
LEAF_NODE	43:3	43:3	17	strcmp
LEAF_NODE	43:9	43:9	16	(
ARGUMENT	43:10	43:10	16	ui_type
FIELD	43:10	43:10	17	ui_type
LEAF_NODE	43:10	43:10	18	ui_type
LEAF_NODE	43:17	43:17	16	,
ARGUMENT	43:19	43:19	16	"phone"
FIELD	43:19	43:19	17	"phone"
LEAF_NODE	43:19	43:19	18	"phone"
LEAF_NODE	43:26	43:26	16	)
EQ_OPERATOR	43:28	43:28	15	==
LEAF_NODE	43:28	43:28	16	==
FIELD	43:31	43:31	15	0
LEAF_NODE	43:31	43:31	16	0
LEAF_NODE	43:33	43:33	14	||
EXPR	44:3	44:3	14	strcmp ( ui_type , "handheld" ) == 0 || strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
OR	44:3	45:3	15	strcmp ( ui_type , "handheld" ) == 0 || strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
EXPR	44:3	44:34	16	strcmp ( ui_type , "handheld" ) == 0
FUNCTION_CALL	44:3	44:29	17	strcmp ( ui_type , "handheld" )
CALLEE	44:3	44:3	18	strcmp
LEAF_NODE	44:3	44:3	19	strcmp
LEAF_NODE	44:9	44:9	18	(
ARGUMENT	44:10	44:10	18	ui_type
FIELD	44:10	44:10	19	ui_type
LEAF_NODE	44:10	44:10	20	ui_type
LEAF_NODE	44:17	44:17	18	,
ARGUMENT	44:19	44:19	18	"handheld"
FIELD	44:19	44:19	19	"handheld"
LEAF_NODE	44:19	44:19	20	"handheld"
LEAF_NODE	44:29	44:29	18	)
EQ_OPERATOR	44:31	44:31	17	==
LEAF_NODE	44:31	44:31	18	==
FIELD	44:34	44:34	17	0
LEAF_NODE	44:34	44:34	18	0
LEAF_NODE	44:36	44:36	16	||
EXPR	45:3	45:3	16	strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
OR	45:3	46:3	17	strcmp ( ui_type , "web" ) == 0 || strcmp ( ui_type , "bot" ) == 0
EXPR	45:3	45:29	18	strcmp ( ui_type , "web" ) == 0
FUNCTION_CALL	45:3	45:24	19	strcmp ( ui_type , "web" )
CALLEE	45:3	45:3	20	strcmp
LEAF_NODE	45:3	45:3	21	strcmp
LEAF_NODE	45:9	45:9	20	(
ARGUMENT	45:10	45:10	20	ui_type
FIELD	45:10	45:10	21	ui_type
LEAF_NODE	45:10	45:10	22	ui_type
LEAF_NODE	45:17	45:17	20	,
ARGUMENT	45:19	45:19	20	"web"
FIELD	45:19	45:19	21	"web"
LEAF_NODE	45:19	45:19	22	"web"
LEAF_NODE	45:24	45:24	20	)
EQ_OPERATOR	45:26	45:26	19	==
LEAF_NODE	45:26	45:26	20	==
FIELD	45:29	45:29	19	0
LEAF_NODE	45:29	45:29	20	0
LEAF_NODE	45:31	45:31	18	||
EXPR	46:3	46:29	18	strcmp ( ui_type , "bot" ) == 0
FUNCTION_CALL	46:3	46:24	19	strcmp ( ui_type , "bot" )
CALLEE	46:3	46:3	20	strcmp
LEAF_NODE	46:3	46:3	21	strcmp
LEAF_NODE	46:9	46:9	20	(
ARGUMENT	46:10	46:10	20	ui_type
FIELD	46:10	46:10	21	ui_type
LEAF_NODE	46:10	46:10	22	ui_type
LEAF_NODE	46:17	46:17	20	,
ARGUMENT	46:19	46:19	20	"bot"
FIELD	46:19	46:19	21	"bot"
LEAF_NODE	46:19	46:19	22	"bot"
LEAF_NODE	46:24	46:24	20	)
EQ_OPERATOR	46:26	46:26	19	==
LEAF_NODE	46:26	46:26	20	==
FIELD	46:29	46:29	19	0
LEAF_NODE	46:29	46:29	20	0
LEAF_NODE	46:30	46:30	7	)
STATEMENTS	46:32	48:2	7	
LEAF_NODE	46:32	46:32	8	{
STATEMENTS	47:3	47:3	8	
EXPR_STATEMENT	47:3	47:17	9	type = ui_type ;
EXPR	47:3	47:3	10	type = ui_type
ASSIGN	47:3	47:10	11	type = ui_type
LVAL	47:3	47:3	12	type
FIELD	47:3	47:3	13	type
LEAF_NODE	47:3	47:3	14	type
ASSIGN_OP	47:8	47:8	12	=
LEAF_NODE	47:8	47:8	13	=
RVAL	47:10	47:10	12	ui_type
FIELD	47:10	47:10	13	ui_type
LEAF_NODE	47:10	47:10	14	ui_type
LEAF_NODE	47:17	47:17	10	;
LEAF_NODE	48:2	48:2	8	}
LEAF_NODE	49:1	49:1	5	}
SELECTION	50:1	51:2	3	
KEYWORD	50:1	50:1	4	if
LEAF_NODE	50:1	50:1	5	if
LEAF_NODE	50:4	50:4	4	(
CONDITION	50:5	50:5	4	ui_info
EXPR	50:5	50:5	5	ui_info
FIELD	50:5	50:5	6	ui_info
LEAF_NODE	50:5	50:5	7	ui_info
LEAF_NODE	50:12	50:12	4	)
STATEMENTS	51:2	51:2	4	
EXPR_STATEMENT	51:2	51:48	5	ui_name = g_hash_table_lookup ( ui_info , "name" ) ;
EXPR	51:2	51:2	6	ui_name = g_hash_table_lookup ( ui_info , "name" )
ASSIGN	51:2	51:12	7	ui_name = g_hash_table_lookup ( ui_info , "name" )
LVAL	51:2	51:2	8	ui_name
FIELD	51:2	51:2	9	ui_name
LEAF_NODE	51:2	51:2	10	ui_name
ASSIGN_OP	51:10	51:10	8	=
LEAF_NODE	51:10	51:10	9	=
RVAL	51:12	51:12	8	g_hash_table_lookup ( ui_info , "name" )
FUNCTION_CALL	51:12	51:47	9	g_hash_table_lookup ( ui_info , "name" )
CALLEE	51:12	51:12	10	g_hash_table_lookup
LEAF_NODE	51:12	51:12	11	g_hash_table_lookup
LEAF_NODE	51:31	51:31	10	(
ARGUMENT	51:32	51:32	10	ui_info
FIELD	51:32	51:32	11	ui_info
LEAF_NODE	51:32	51:32	12	ui_info
LEAF_NODE	51:39	51:39	10	,
ARGUMENT	51:41	51:41	10	"name"
FIELD	51:41	51:41	11	"name"
LEAF_NODE	51:41	51:41	12	"name"
LEAF_NODE	51:47	51:47	10	)
LEAF_NODE	51:48	51:48	6	;
SELECTION	52:1	53:2	3	
KEYWORD	52:1	52:1	4	if
LEAF_NODE	52:1	52:1	5	if
LEAF_NODE	52:4	52:4	4	(
CONDITION	52:5	52:5	4	ui_name == NULL
EXPR	52:5	52:16	5	ui_name == NULL
FIELD	52:5	52:5	6	ui_name
LEAF_NODE	52:5	52:5	7	ui_name
EQ_OPERATOR	52:13	52:13	6	==
LEAF_NODE	52:13	52:13	7	==
FIELD	52:16	52:16	6	NULL
LEAF_NODE	52:16	52:16	7	NULL
LEAF_NODE	52:20	52:20	4	)
STATEMENTS	53:2	53:2	4	
EXPR_STATEMENT	53:2	53:19	5	ui_name = PACKAGE ;
EXPR	53:2	53:2	6	ui_name = PACKAGE
ASSIGN	53:2	53:12	7	ui_name = PACKAGE
LVAL	53:2	53:2	8	ui_name
FIELD	53:2	53:2	9	ui_name
LEAF_NODE	53:2	53:2	10	ui_name
ASSIGN_OP	53:10	53:10	8	=
LEAF_NODE	53:10	53:10	9	=
RVAL	53:12	53:12	8	PACKAGE
FIELD	53:12	53:12	9	PACKAGE
LEAF_NODE	53:12	53:12	10	PACKAGE
LEAF_NODE	53:19	53:19	6	;
EXPR_STATEMENT	54:1	54:51	3	jabber_add_identity ( "client" , type , NULL , ui_name ) ;
EXPR	54:1	54:1	4	jabber_add_identity ( "client" , type , NULL , ui_name )
FUNCTION_CALL	54:1	54:50	5	jabber_add_identity ( "client" , type , NULL , ui_name )
CALLEE	54:1	54:1	6	jabber_add_identity
LEAF_NODE	54:1	54:1	7	jabber_add_identity
LEAF_NODE	54:20	54:20	6	(
ARGUMENT	54:21	54:21	6	"client"
FIELD	54:21	54:21	7	"client"
LEAF_NODE	54:21	54:21	8	"client"
LEAF_NODE	54:29	54:29	6	,
ARGUMENT	54:31	54:31	6	type
FIELD	54:31	54:31	7	type
LEAF_NODE	54:31	54:31	8	type
LEAF_NODE	54:35	54:35	6	,
ARGUMENT	54:37	54:37	6	NULL
FIELD	54:37	54:37	7	NULL
LEAF_NODE	54:37	54:37	8	NULL
LEAF_NODE	54:41	54:41	6	,
ARGUMENT	54:43	54:43	6	ui_name
FIELD	54:43	54:43	7	ui_name
LEAF_NODE	54:43	54:43	8	ui_name
LEAF_NODE	54:50	54:50	6	)
LEAF_NODE	54:51	54:51	4	;
EXPR_STATEMENT	56:1	56:40	3	jabber_add_feature ( NS_LAST_ACTIVITY , 0 ) ;
EXPR	56:1	56:1	4	jabber_add_feature ( NS_LAST_ACTIVITY , 0 )
FUNCTION_CALL	56:1	56:39	5	jabber_add_feature ( NS_LAST_ACTIVITY , 0 )
CALLEE	56:1	56:1	6	jabber_add_feature
LEAF_NODE	56:1	56:1	7	jabber_add_feature
LEAF_NODE	56:19	56:19	6	(
ARGUMENT	56:20	56:20	6	NS_LAST_ACTIVITY
FIELD	56:20	56:20	7	NS_LAST_ACTIVITY
LEAF_NODE	56:20	56:20	8	NS_LAST_ACTIVITY
LEAF_NODE	56:36	56:36	6	,
ARGUMENT	56:38	56:38	6	0
FIELD	56:38	56:38	7	0
LEAF_NODE	56:38	56:38	8	0
LEAF_NODE	56:39	56:39	6	)
LEAF_NODE	56:40	56:40	4	;
EXPR_STATEMENT	57:1	57:38	3	jabber_add_feature ( NS_OOB_IQ_DATA , 0 ) ;
EXPR	57:1	57:1	4	jabber_add_feature ( NS_OOB_IQ_DATA , 0 )
FUNCTION_CALL	57:1	57:37	5	jabber_add_feature ( NS_OOB_IQ_DATA , 0 )
CALLEE	57:1	57:1	6	jabber_add_feature
LEAF_NODE	57:1	57:1	7	jabber_add_feature
LEAF_NODE	57:19	57:19	6	(
ARGUMENT	57:20	57:20	6	NS_OOB_IQ_DATA
FIELD	57:20	57:20	7	NS_OOB_IQ_DATA
LEAF_NODE	57:20	57:20	8	NS_OOB_IQ_DATA
LEAF_NODE	57:34	57:34	6	,
ARGUMENT	57:36	57:36	6	0
FIELD	57:36	57:36	7	0
LEAF_NODE	57:36	57:36	8	0
LEAF_NODE	57:37	57:37	6	)
LEAF_NODE	57:38	57:38	4	;
EXPR_STATEMENT	58:1	58:38	3	jabber_add_feature ( NS_ENTITY_TIME , 0 ) ;
EXPR	58:1	58:1	4	jabber_add_feature ( NS_ENTITY_TIME , 0 )
FUNCTION_CALL	58:1	58:37	5	jabber_add_feature ( NS_ENTITY_TIME , 0 )
CALLEE	58:1	58:1	6	jabber_add_feature
LEAF_NODE	58:1	58:1	7	jabber_add_feature
LEAF_NODE	58:19	58:19	6	(
ARGUMENT	58:20	58:20	6	NS_ENTITY_TIME
FIELD	58:20	58:20	7	NS_ENTITY_TIME
LEAF_NODE	58:20	58:20	8	NS_ENTITY_TIME
LEAF_NODE	58:34	58:34	6	,
ARGUMENT	58:36	58:36	6	0
FIELD	58:36	58:36	7	0
LEAF_NODE	58:36	58:36	8	0
LEAF_NODE	58:37	58:37	6	)
LEAF_NODE	58:38	58:38	4	;
EXPR_STATEMENT	59:1	59:43	3	jabber_add_feature ( "jabber:iq:version" , 0 ) ;
EXPR	59:1	59:1	4	jabber_add_feature ( "jabber:iq:version" , 0 )
FUNCTION_CALL	59:1	59:42	5	jabber_add_feature ( "jabber:iq:version" , 0 )
CALLEE	59:1	59:1	6	jabber_add_feature
LEAF_NODE	59:1	59:1	7	jabber_add_feature
LEAF_NODE	59:19	59:19	6	(
ARGUMENT	59:20	59:20	6	"jabber:iq:version"
FIELD	59:20	59:20	7	"jabber:iq:version"
LEAF_NODE	59:20	59:20	8	"jabber:iq:version"
LEAF_NODE	59:39	59:39	6	,
ARGUMENT	59:41	59:41	6	0
FIELD	59:41	59:41	7	0
LEAF_NODE	59:41	59:41	8	0
LEAF_NODE	59:42	59:42	6	)
LEAF_NODE	59:43	59:43	4	;
EXPR_STATEMENT	60:1	60:45	3	jabber_add_feature ( "jabber:x:conference" , 0 ) ;
EXPR	60:1	60:1	4	jabber_add_feature ( "jabber:x:conference" , 0 )
FUNCTION_CALL	60:1	60:44	5	jabber_add_feature ( "jabber:x:conference" , 0 )
CALLEE	60:1	60:1	6	jabber_add_feature
LEAF_NODE	60:1	60:1	7	jabber_add_feature
LEAF_NODE	60:19	60:19	6	(
ARGUMENT	60:20	60:20	6	"jabber:x:conference"
FIELD	60:20	60:20	7	"jabber:x:conference"
LEAF_NODE	60:20	60:20	8	"jabber:x:conference"
LEAF_NODE	60:41	60:41	6	,
ARGUMENT	60:43	60:43	6	0
FIELD	60:43	60:43	7	0
LEAF_NODE	60:43	60:43	8	0
LEAF_NODE	60:44	60:44	6	)
LEAF_NODE	60:45	60:45	4	;
EXPR_STATEMENT	61:1	61:38	3	jabber_add_feature ( NS_BYTESTREAMS , 0 ) ;
EXPR	61:1	61:1	4	jabber_add_feature ( NS_BYTESTREAMS , 0 )
FUNCTION_CALL	61:1	61:37	5	jabber_add_feature ( NS_BYTESTREAMS , 0 )
CALLEE	61:1	61:1	6	jabber_add_feature
LEAF_NODE	61:1	61:1	7	jabber_add_feature
LEAF_NODE	61:19	61:19	6	(
ARGUMENT	61:20	61:20	6	NS_BYTESTREAMS
FIELD	61:20	61:20	7	NS_BYTESTREAMS
LEAF_NODE	61:20	61:20	8	NS_BYTESTREAMS
LEAF_NODE	61:34	61:34	6	,
ARGUMENT	61:36	61:36	6	0
FIELD	61:36	61:36	7	0
LEAF_NODE	61:36	61:36	8	0
LEAF_NODE	61:37	61:37	6	)
LEAF_NODE	61:38	61:38	4	;
EXPR_STATEMENT	62:1	62:57	3	jabber_add_feature ( "http://jabber.org/protocol/caps" , 0 ) ;
EXPR	62:1	62:1	4	jabber_add_feature ( "http://jabber.org/protocol/caps" , 0 )
FUNCTION_CALL	62:1	62:56	5	jabber_add_feature ( "http://jabber.org/protocol/caps" , 0 )
CALLEE	62:1	62:1	6	jabber_add_feature
LEAF_NODE	62:1	62:1	7	jabber_add_feature
LEAF_NODE	62:19	62:19	6	(
ARGUMENT	62:20	62:20	6	"http://jabber.org/protocol/caps"
FIELD	62:20	62:20	7	"http://jabber.org/protocol/caps"
LEAF_NODE	62:20	62:20	8	"http://jabber.org/protocol/caps"
LEAF_NODE	62:53	62:53	6	,
ARGUMENT	62:55	62:55	6	0
FIELD	62:55	62:55	7	0
LEAF_NODE	62:55	62:55	8	0
LEAF_NODE	62:56	62:56	6	)
LEAF_NODE	62:57	62:57	4	;
EXPR_STATEMENT	63:1	63:63	3	jabber_add_feature ( "http://jabber.org/protocol/chatstates" , 0 ) ;
EXPR	63:1	63:1	4	jabber_add_feature ( "http://jabber.org/protocol/chatstates" , 0 )
FUNCTION_CALL	63:1	63:62	5	jabber_add_feature ( "http://jabber.org/protocol/chatstates" , 0 )
CALLEE	63:1	63:1	6	jabber_add_feature
LEAF_NODE	63:1	63:1	7	jabber_add_feature
LEAF_NODE	63:19	63:19	6	(
ARGUMENT	63:20	63:20	6	"http://jabber.org/protocol/chatstates"
FIELD	63:20	63:20	7	"http://jabber.org/protocol/chatstates"
LEAF_NODE	63:20	63:20	8	"http://jabber.org/protocol/chatstates"
LEAF_NODE	63:59	63:59	6	,
ARGUMENT	63:61	63:61	6	0
FIELD	63:61	63:61	7	0
LEAF_NODE	63:61	63:61	8	0
LEAF_NODE	63:62	63:62	6	)
LEAF_NODE	63:63	63:63	4	;
EXPR_STATEMENT	64:1	64:37	3	jabber_add_feature ( NS_DISCO_INFO , 0 ) ;
EXPR	64:1	64:1	4	jabber_add_feature ( NS_DISCO_INFO , 0 )
FUNCTION_CALL	64:1	64:36	5	jabber_add_feature ( NS_DISCO_INFO , 0 )
CALLEE	64:1	64:1	6	jabber_add_feature
LEAF_NODE	64:1	64:1	7	jabber_add_feature
LEAF_NODE	64:19	64:19	6	(
ARGUMENT	64:20	64:20	6	NS_DISCO_INFO
FIELD	64:20	64:20	7	NS_DISCO_INFO
LEAF_NODE	64:20	64:20	8	NS_DISCO_INFO
LEAF_NODE	64:33	64:33	6	,
ARGUMENT	64:35	64:35	6	0
FIELD	64:35	64:35	7	0
LEAF_NODE	64:35	64:35	8	0
LEAF_NODE	64:36	64:36	6	)
LEAF_NODE	64:37	64:37	4	;
EXPR_STATEMENT	65:1	65:38	3	jabber_add_feature ( NS_DISCO_ITEMS , 0 ) ;
EXPR	65:1	65:1	4	jabber_add_feature ( NS_DISCO_ITEMS , 0 )
FUNCTION_CALL	65:1	65:37	5	jabber_add_feature ( NS_DISCO_ITEMS , 0 )
CALLEE	65:1	65:1	6	jabber_add_feature
LEAF_NODE	65:1	65:1	7	jabber_add_feature
LEAF_NODE	65:19	65:19	6	(
ARGUMENT	65:20	65:20	6	NS_DISCO_ITEMS
FIELD	65:20	65:20	7	NS_DISCO_ITEMS
LEAF_NODE	65:20	65:20	8	NS_DISCO_ITEMS
LEAF_NODE	65:34	65:34	6	,
ARGUMENT	65:36	65:36	6	0
FIELD	65:36	65:36	7	0
LEAF_NODE	65:36	65:36	8	0
LEAF_NODE	65:37	65:37	6	)
LEAF_NODE	65:38	65:38	4	;
EXPR_STATEMENT	66:1	66:30	3	jabber_add_feature ( NS_IBB , 0 ) ;
EXPR	66:1	66:1	4	jabber_add_feature ( NS_IBB , 0 )
FUNCTION_CALL	66:1	66:29	5	jabber_add_feature ( NS_IBB , 0 )
CALLEE	66:1	66:1	6	jabber_add_feature
LEAF_NODE	66:1	66:1	7	jabber_add_feature
LEAF_NODE	66:19	66:19	6	(
ARGUMENT	66:20	66:20	6	NS_IBB
FIELD	66:20	66:20	7	NS_IBB
LEAF_NODE	66:20	66:20	8	NS_IBB
LEAF_NODE	66:26	66:26	6	,
ARGUMENT	66:28	66:28	6	0
FIELD	66:28	66:28	7	0
LEAF_NODE	66:28	66:28	8	0
LEAF_NODE	66:29	66:29	6	)
LEAF_NODE	66:30	66:30	4	;
EXPR_STATEMENT	67:1	67:56	3	jabber_add_feature ( "http://jabber.org/protocol/muc" , 0 ) ;
EXPR	67:1	67:1	4	jabber_add_feature ( "http://jabber.org/protocol/muc" , 0 )
FUNCTION_CALL	67:1	67:55	5	jabber_add_feature ( "http://jabber.org/protocol/muc" , 0 )
CALLEE	67:1	67:1	6	jabber_add_feature
LEAF_NODE	67:1	67:1	7	jabber_add_feature
LEAF_NODE	67:19	67:19	6	(
ARGUMENT	67:20	67:20	6	"http://jabber.org/protocol/muc"
FIELD	67:20	67:20	7	"http://jabber.org/protocol/muc"
LEAF_NODE	67:20	67:20	8	"http://jabber.org/protocol/muc"
LEAF_NODE	67:52	67:52	6	,
ARGUMENT	67:54	67:54	6	0
FIELD	67:54	67:54	7	0
LEAF_NODE	67:54	67:54	8	0
LEAF_NODE	67:55	67:55	6	)
LEAF_NODE	67:56	67:56	4	;
EXPR_STATEMENT	68:1	68:61	3	jabber_add_feature ( "http://jabber.org/protocol/muc#user" , 0 ) ;
EXPR	68:1	68:1	4	jabber_add_feature ( "http://jabber.org/protocol/muc#user" , 0 )
FUNCTION_CALL	68:1	68:60	5	jabber_add_feature ( "http://jabber.org/protocol/muc#user" , 0 )
CALLEE	68:1	68:1	6	jabber_add_feature
LEAF_NODE	68:1	68:1	7	jabber_add_feature
LEAF_NODE	68:19	68:19	6	(
ARGUMENT	68:20	68:20	6	"http://jabber.org/protocol/muc#user"
FIELD	68:20	68:20	7	"http://jabber.org/protocol/muc#user"
LEAF_NODE	68:20	68:20	8	"http://jabber.org/protocol/muc#user"
LEAF_NODE	68:57	68:57	6	,
ARGUMENT	68:59	68:59	6	0
FIELD	68:59	68:59	7	0
LEAF_NODE	68:59	68:59	8	0
LEAF_NODE	68:60	68:60	6	)
LEAF_NODE	68:61	68:61	4	;
EXPR_STATEMENT	69:1	69:55	3	jabber_add_feature ( "http://jabber.org/protocol/si" , 0 ) ;
EXPR	69:1	69:1	4	jabber_add_feature ( "http://jabber.org/protocol/si" , 0 )
FUNCTION_CALL	69:1	69:54	5	jabber_add_feature ( "http://jabber.org/protocol/si" , 0 )
CALLEE	69:1	69:1	6	jabber_add_feature
LEAF_NODE	69:1	69:1	7	jabber_add_feature
LEAF_NODE	69:19	69:19	6	(
ARGUMENT	69:20	69:20	6	"http://jabber.org/protocol/si"
FIELD	69:20	69:20	7	"http://jabber.org/protocol/si"
LEAF_NODE	69:20	69:20	8	"http://jabber.org/protocol/si"
LEAF_NODE	69:51	69:51	6	,
ARGUMENT	69:53	69:53	6	0
FIELD	69:53	69:53	7	0
LEAF_NODE	69:53	69:53	8	0
LEAF_NODE	69:54	69:54	6	)
LEAF_NODE	69:55	69:55	4	;
EXPR_STATEMENT	70:1	70:43	3	jabber_add_feature ( NS_SI_FILE_TRANSFER , 0 ) ;
EXPR	70:1	70:1	4	jabber_add_feature ( NS_SI_FILE_TRANSFER , 0 )
FUNCTION_CALL	70:1	70:42	5	jabber_add_feature ( NS_SI_FILE_TRANSFER , 0 )
CALLEE	70:1	70:1	6	jabber_add_feature
LEAF_NODE	70:1	70:1	7	jabber_add_feature
LEAF_NODE	70:19	70:19	6	(
ARGUMENT	70:20	70:20	6	NS_SI_FILE_TRANSFER
FIELD	70:20	70:20	7	NS_SI_FILE_TRANSFER
LEAF_NODE	70:20	70:20	8	NS_SI_FILE_TRANSFER
LEAF_NODE	70:39	70:39	6	,
ARGUMENT	70:41	70:41	6	0
FIELD	70:41	70:41	7	0
LEAF_NODE	70:41	70:41	8	0
LEAF_NODE	70:42	70:42	6	)
LEAF_NODE	70:43	70:43	4	;
EXPR_STATEMENT	71:1	71:35	3	jabber_add_feature ( NS_XHTML_IM , 0 ) ;
EXPR	71:1	71:1	4	jabber_add_feature ( NS_XHTML_IM , 0 )
FUNCTION_CALL	71:1	71:34	5	jabber_add_feature ( NS_XHTML_IM , 0 )
CALLEE	71:1	71:1	6	jabber_add_feature
LEAF_NODE	71:1	71:1	7	jabber_add_feature
LEAF_NODE	71:19	71:19	6	(
ARGUMENT	71:20	71:20	6	NS_XHTML_IM
FIELD	71:20	71:20	7	NS_XHTML_IM
LEAF_NODE	71:20	71:20	8	NS_XHTML_IM
LEAF_NODE	71:31	71:31	6	,
ARGUMENT	71:33	71:33	6	0
FIELD	71:33	71:33	7	0
LEAF_NODE	71:33	71:33	8	0
LEAF_NODE	71:34	71:34	6	)
LEAF_NODE	71:35	71:35	4	;
EXPR_STATEMENT	72:1	72:31	3	jabber_add_feature ( NS_PING , 0 ) ;
EXPR	72:1	72:1	4	jabber_add_feature ( NS_PING , 0 )
FUNCTION_CALL	72:1	72:30	5	jabber_add_feature ( NS_PING , 0 )
CALLEE	72:1	72:1	6	jabber_add_feature
LEAF_NODE	72:1	72:1	7	jabber_add_feature
LEAF_NODE	72:19	72:19	6	(
ARGUMENT	72:20	72:20	6	NS_PING
FIELD	72:20	72:20	7	NS_PING
LEAF_NODE	72:20	72:20	8	NS_PING
LEAF_NODE	72:27	72:27	6	,
ARGUMENT	72:29	72:29	6	0
FIELD	72:29	72:29	7	0
LEAF_NODE	72:29	72:29	8	0
LEAF_NODE	72:30	72:30	6	)
LEAF_NODE	72:31	72:31	4	;
EXPR_STATEMENT	74:1	74:56	3	jabber_add_feature ( NS_ATTENTION , jabber_buzz_isenabled ) ;
EXPR	74:1	74:1	4	jabber_add_feature ( NS_ATTENTION , jabber_buzz_isenabled )
FUNCTION_CALL	74:1	74:55	5	jabber_add_feature ( NS_ATTENTION , jabber_buzz_isenabled )
CALLEE	74:1	74:1	6	jabber_add_feature
LEAF_NODE	74:1	74:1	7	jabber_add_feature
LEAF_NODE	74:19	74:19	6	(
ARGUMENT	74:20	74:20	6	NS_ATTENTION
FIELD	74:20	74:20	7	NS_ATTENTION
LEAF_NODE	74:20	74:20	8	NS_ATTENTION
LEAF_NODE	74:32	74:32	6	,
ARGUMENT	74:34	74:34	6	jabber_buzz_isenabled
FIELD	74:34	74:34	7	jabber_buzz_isenabled
LEAF_NODE	74:34	74:34	8	jabber_buzz_isenabled
LEAF_NODE	74:55	74:55	6	)
LEAF_NODE	74:56	74:56	4	;
EXPR_STATEMENT	76:1	76:30	3	jabber_add_feature ( NS_BOB , 0 ) ;
EXPR	76:1	76:1	4	jabber_add_feature ( NS_BOB , 0 )
FUNCTION_CALL	76:1	76:29	5	jabber_add_feature ( NS_BOB , 0 )
CALLEE	76:1	76:1	6	jabber_add_feature
LEAF_NODE	76:1	76:1	7	jabber_add_feature
LEAF_NODE	76:19	76:19	6	(
ARGUMENT	76:20	76:20	6	NS_BOB
FIELD	76:20	76:20	7	NS_BOB
LEAF_NODE	76:20	76:20	8	NS_BOB
LEAF_NODE	76:26	76:26	6	,
ARGUMENT	76:28	76:28	6	0
FIELD	76:28	76:28	7	0
LEAF_NODE	76:28	76:28	8	0
LEAF_NODE	76:29	76:29	6	)
LEAF_NODE	76:30	76:30	4	;
EXPR_STATEMENT	78:1	78:30	3	jabber_add_feature ( JINGLE , 0 ) ;
EXPR	78:1	78:1	4	jabber_add_feature ( JINGLE , 0 )
FUNCTION_CALL	78:1	78:29	5	jabber_add_feature ( JINGLE , 0 )
CALLEE	78:1	78:1	6	jabber_add_feature
LEAF_NODE	78:1	78:1	7	jabber_add_feature
LEAF_NODE	78:19	78:19	6	(
ARGUMENT	78:20	78:20	6	JINGLE
FIELD	78:20	78:20	7	JINGLE
LEAF_NODE	78:20	78:20	8	JINGLE
LEAF_NODE	78:26	78:26	6	,
ARGUMENT	78:28	78:28	6	0
FIELD	78:28	78:28	7	0
LEAF_NODE	78:28	78:28	8	0
LEAF_NODE	78:29	78:29	6	)
LEAF_NODE	78:30	78:30	4	;
EXPR_STATEMENT	80:1	80:69	3	jabber_add_feature ( NS_GOOGLE_PROTOCOL_SESSION , jabber_audio_enabled ) ;
EXPR	80:1	80:1	4	jabber_add_feature ( NS_GOOGLE_PROTOCOL_SESSION , jabber_audio_enabled )
FUNCTION_CALL	80:1	80:68	5	jabber_add_feature ( NS_GOOGLE_PROTOCOL_SESSION , jabber_audio_enabled )
CALLEE	80:1	80:1	6	jabber_add_feature
LEAF_NODE	80:1	80:1	7	jabber_add_feature
LEAF_NODE	80:19	80:19	6	(
ARGUMENT	80:20	80:20	6	NS_GOOGLE_PROTOCOL_SESSION
FIELD	80:20	80:20	7	NS_GOOGLE_PROTOCOL_SESSION
LEAF_NODE	80:20	80:20	8	NS_GOOGLE_PROTOCOL_SESSION
LEAF_NODE	80:46	80:46	6	,
ARGUMENT	80:48	80:48	6	jabber_audio_enabled
FIELD	80:48	80:48	7	jabber_audio_enabled
LEAF_NODE	80:48	80:48	8	jabber_audio_enabled
LEAF_NODE	80:68	80:68	6	)
LEAF_NODE	80:69	80:69	4	;
EXPR_STATEMENT	81:1	81:58	3	jabber_add_feature ( NS_GOOGLE_VOICE , jabber_audio_enabled ) ;
EXPR	81:1	81:1	4	jabber_add_feature ( NS_GOOGLE_VOICE , jabber_audio_enabled )
FUNCTION_CALL	81:1	81:57	5	jabber_add_feature ( NS_GOOGLE_VOICE , jabber_audio_enabled )
CALLEE	81:1	81:1	6	jabber_add_feature
LEAF_NODE	81:1	81:1	7	jabber_add_feature
LEAF_NODE	81:19	81:19	6	(
ARGUMENT	81:20	81:20	6	NS_GOOGLE_VOICE
FIELD	81:20	81:20	7	NS_GOOGLE_VOICE
LEAF_NODE	81:20	81:20	8	NS_GOOGLE_VOICE
LEAF_NODE	81:35	81:35	6	,
ARGUMENT	81:37	81:37	6	jabber_audio_enabled
FIELD	81:37	81:37	7	jabber_audio_enabled
LEAF_NODE	81:37	81:37	8	jabber_audio_enabled
LEAF_NODE	81:57	81:57	6	)
LEAF_NODE	81:58	81:58	4	;
EXPR_STATEMENT	82:1	82:58	3	jabber_add_feature ( NS_GOOGLE_VIDEO , jabber_video_enabled ) ;
EXPR	82:1	82:1	4	jabber_add_feature ( NS_GOOGLE_VIDEO , jabber_video_enabled )
FUNCTION_CALL	82:1	82:57	5	jabber_add_feature ( NS_GOOGLE_VIDEO , jabber_video_enabled )
CALLEE	82:1	82:1	6	jabber_add_feature
LEAF_NODE	82:1	82:1	7	jabber_add_feature
LEAF_NODE	82:19	82:19	6	(
ARGUMENT	82:20	82:20	6	NS_GOOGLE_VIDEO
FIELD	82:20	82:20	7	NS_GOOGLE_VIDEO
LEAF_NODE	82:20	82:20	8	NS_GOOGLE_VIDEO
LEAF_NODE	82:35	82:35	6	,
ARGUMENT	82:37	82:37	6	jabber_video_enabled
FIELD	82:37	82:37	7	jabber_video_enabled
LEAF_NODE	82:37	82:37	8	jabber_video_enabled
LEAF_NODE	82:57	82:57	6	)
LEAF_NODE	82:58	82:58	4	;
EXPR_STATEMENT	83:1	83:59	3	jabber_add_feature ( NS_GOOGLE_CAMERA , jabber_video_enabled ) ;
EXPR	83:1	83:1	4	jabber_add_feature ( NS_GOOGLE_CAMERA , jabber_video_enabled )
FUNCTION_CALL	83:1	83:58	5	jabber_add_feature ( NS_GOOGLE_CAMERA , jabber_video_enabled )
CALLEE	83:1	83:1	6	jabber_add_feature
LEAF_NODE	83:1	83:1	7	jabber_add_feature
LEAF_NODE	83:19	83:19	6	(
ARGUMENT	83:20	83:20	6	NS_GOOGLE_CAMERA
FIELD	83:20	83:20	7	NS_GOOGLE_CAMERA
LEAF_NODE	83:20	83:20	8	NS_GOOGLE_CAMERA
LEAF_NODE	83:36	83:36	6	,
ARGUMENT	83:38	83:38	6	jabber_video_enabled
FIELD	83:38	83:38	7	jabber_video_enabled
LEAF_NODE	83:38	83:38	8	jabber_video_enabled
LEAF_NODE	83:58	83:58	6	)
LEAF_NODE	83:59	83:59	4	;
EXPR_STATEMENT	84:1	84:38	3	jabber_add_feature ( JINGLE_APP_RTP , 0 ) ;
EXPR	84:1	84:1	4	jabber_add_feature ( JINGLE_APP_RTP , 0 )
FUNCTION_CALL	84:1	84:37	5	jabber_add_feature ( JINGLE_APP_RTP , 0 )
CALLEE	84:1	84:1	6	jabber_add_feature
LEAF_NODE	84:1	84:1	7	jabber_add_feature
LEAF_NODE	84:19	84:19	6	(
ARGUMENT	84:20	84:20	6	JINGLE_APP_RTP
FIELD	84:20	84:20	7	JINGLE_APP_RTP
LEAF_NODE	84:20	84:20	8	JINGLE_APP_RTP
LEAF_NODE	84:34	84:34	6	,
ARGUMENT	84:36	84:36	6	0
FIELD	84:36	84:36	7	0
LEAF_NODE	84:36	84:36	8	0
LEAF_NODE	84:37	84:37	6	)
LEAF_NODE	84:38	84:38	4	;
EXPR_STATEMENT	85:1	85:71	3	jabber_add_feature ( JINGLE_APP_RTP_SUPPORT_AUDIO , jabber_audio_enabled ) ;
EXPR	85:1	85:1	4	jabber_add_feature ( JINGLE_APP_RTP_SUPPORT_AUDIO , jabber_audio_enabled )
FUNCTION_CALL	85:1	85:70	5	jabber_add_feature ( JINGLE_APP_RTP_SUPPORT_AUDIO , jabber_audio_enabled )
CALLEE	85:1	85:1	6	jabber_add_feature
LEAF_NODE	85:1	85:1	7	jabber_add_feature
LEAF_NODE	85:19	85:19	6	(
ARGUMENT	85:20	85:20	6	JINGLE_APP_RTP_SUPPORT_AUDIO
FIELD	85:20	85:20	7	JINGLE_APP_RTP_SUPPORT_AUDIO
LEAF_NODE	85:20	85:20	8	JINGLE_APP_RTP_SUPPORT_AUDIO
LEAF_NODE	85:48	85:48	6	,
ARGUMENT	85:50	85:50	6	jabber_audio_enabled
FIELD	85:50	85:50	7	jabber_audio_enabled
LEAF_NODE	85:50	85:50	8	jabber_audio_enabled
LEAF_NODE	85:70	85:70	6	)
LEAF_NODE	85:71	85:71	4	;
EXPR_STATEMENT	86:1	86:71	3	jabber_add_feature ( JINGLE_APP_RTP_SUPPORT_VIDEO , jabber_video_enabled ) ;
EXPR	86:1	86:1	4	jabber_add_feature ( JINGLE_APP_RTP_SUPPORT_VIDEO , jabber_video_enabled )
FUNCTION_CALL	86:1	86:70	5	jabber_add_feature ( JINGLE_APP_RTP_SUPPORT_VIDEO , jabber_video_enabled )
CALLEE	86:1	86:1	6	jabber_add_feature
LEAF_NODE	86:1	86:1	7	jabber_add_feature
LEAF_NODE	86:19	86:19	6	(
ARGUMENT	86:20	86:20	6	JINGLE_APP_RTP_SUPPORT_VIDEO
FIELD	86:20	86:20	7	JINGLE_APP_RTP_SUPPORT_VIDEO
LEAF_NODE	86:20	86:20	8	JINGLE_APP_RTP_SUPPORT_VIDEO
LEAF_NODE	86:48	86:48	6	,
ARGUMENT	86:50	86:50	6	jabber_video_enabled
FIELD	86:50	86:50	7	jabber_video_enabled
LEAF_NODE	86:50	86:50	8	jabber_video_enabled
LEAF_NODE	86:70	86:70	6	)
LEAF_NODE	86:71	86:71	4	;
EXPR_STATEMENT	87:1	87:47	3	jabber_add_feature ( JINGLE_TRANSPORT_RAWUDP , 0 ) ;
EXPR	87:1	87:1	4	jabber_add_feature ( JINGLE_TRANSPORT_RAWUDP , 0 )
FUNCTION_CALL	87:1	87:46	5	jabber_add_feature ( JINGLE_TRANSPORT_RAWUDP , 0 )
CALLEE	87:1	87:1	6	jabber_add_feature
LEAF_NODE	87:1	87:1	7	jabber_add_feature
LEAF_NODE	87:19	87:19	6	(
ARGUMENT	87:20	87:20	6	JINGLE_TRANSPORT_RAWUDP
FIELD	87:20	87:20	7	JINGLE_TRANSPORT_RAWUDP
LEAF_NODE	87:20	87:20	8	JINGLE_TRANSPORT_RAWUDP
LEAF_NODE	87:43	87:43	6	,
ARGUMENT	87:45	87:45	6	0
FIELD	87:45	87:45	7	0
LEAF_NODE	87:45	87:45	8	0
LEAF_NODE	87:46	87:46	6	)
LEAF_NODE	87:47	87:47	4	;
EXPR_STATEMENT	88:1	88:47	3	jabber_add_feature ( JINGLE_TRANSPORT_ICEUDP , 0 ) ;
EXPR	88:1	88:1	4	jabber_add_feature ( JINGLE_TRANSPORT_ICEUDP , 0 )
FUNCTION_CALL	88:1	88:46	5	jabber_add_feature ( JINGLE_TRANSPORT_ICEUDP , 0 )
CALLEE	88:1	88:1	6	jabber_add_feature
LEAF_NODE	88:1	88:1	7	jabber_add_feature
LEAF_NODE	88:19	88:19	6	(
ARGUMENT	88:20	88:20	6	JINGLE_TRANSPORT_ICEUDP
FIELD	88:20	88:20	7	JINGLE_TRANSPORT_ICEUDP
LEAF_NODE	88:20	88:20	8	JINGLE_TRANSPORT_ICEUDP
LEAF_NODE	88:43	88:43	6	,
ARGUMENT	88:45	88:45	6	0
FIELD	88:45	88:45	7	0
LEAF_NODE	88:45	88:45	8	0
LEAF_NODE	88:46	88:46	6	)
LEAF_NODE	88:47	88:47	4	;
EXPR_STATEMENT	89:1	90:50	3	g_signal_connect ( G_OBJECT ( purple_media_manager_get ( ) ) , "ui-caps-changed" , G_CALLBACK ( jabber_caps_broadcast_change ) , NULL ) ;
EXPR	89:1	89:1	4	g_signal_connect ( G_OBJECT ( purple_media_manager_get ( ) ) , "ui-caps-changed" , G_CALLBACK ( jabber_caps_broadcast_change ) , NULL )
FUNCTION_CALL	89:1	90:49	5	g_signal_connect ( G_OBJECT ( purple_media_manager_get ( ) ) , "ui-caps-changed" , G_CALLBACK ( jabber_caps_broadcast_change ) , NULL )
CALLEE	89:1	89:1	6	g_signal_connect
LEAF_NODE	89:1	89:1	7	g_signal_connect
LEAF_NODE	89:17	89:17	6	(
ARGUMENT	89:18	89:18	6	G_OBJECT ( purple_media_manager_get ( ) )
FUNCTION_CALL	89:18	89:53	7	G_OBJECT ( purple_media_manager_get ( ) )
CALLEE	89:18	89:18	8	G_OBJECT
LEAF_NODE	89:18	89:18	9	G_OBJECT
LEAF_NODE	89:26	89:26	8	(
ARGUMENT	89:27	89:27	8	purple_media_manager_get ( )
FUNCTION_CALL	89:27	89:52	9	purple_media_manager_get ( )
CALLEE	89:27	89:27	10	purple_media_manager_get
LEAF_NODE	89:27	89:27	11	purple_media_manager_get
LEAF_NODE	89:51	89:51	10	(
LEAF_NODE	89:52	89:52	10	)
LEAF_NODE	89:53	89:53	8	)
LEAF_NODE	89:54	89:54	6	,
ARGUMENT	89:56	89:56	6	"ui-caps-changed"
FIELD	89:56	89:56	7	"ui-caps-changed"
LEAF_NODE	89:56	89:56	8	"ui-caps-changed"
LEAF_NODE	89:73	89:73	6	,
ARGUMENT	90:3	90:3	6	G_CALLBACK ( jabber_caps_broadcast_change )
FUNCTION_CALL	90:3	90:42	7	G_CALLBACK ( jabber_caps_broadcast_change )
CALLEE	90:3	90:3	8	G_CALLBACK
LEAF_NODE	90:3	90:3	9	G_CALLBACK
LEAF_NODE	90:13	90:13	8	(
ARGUMENT	90:14	90:14	8	jabber_caps_broadcast_change
FIELD	90:14	90:14	9	jabber_caps_broadcast_change
LEAF_NODE	90:14	90:14	10	jabber_caps_broadcast_change
LEAF_NODE	90:42	90:42	8	)
LEAF_NODE	90:43	90:43	6	,
ARGUMENT	90:45	90:45	6	NULL
FIELD	90:45	90:45	7	NULL
LEAF_NODE	90:45	90:45	8	NULL
LEAF_NODE	90:49	90:49	6	)
LEAF_NODE	90:50	90:50	4	;
EXPR_STATEMENT	93:1	93:17	3	jabber_iq_init ( ) ;
EXPR	93:1	93:1	4	jabber_iq_init ( )
FUNCTION_CALL	93:1	93:16	5	jabber_iq_init ( )
CALLEE	93:1	93:1	6	jabber_iq_init
LEAF_NODE	93:1	93:1	7	jabber_iq_init
LEAF_NODE	93:15	93:15	6	(
LEAF_NODE	93:16	93:16	6	)
LEAF_NODE	93:17	93:17	4	;
EXPR_STATEMENT	94:1	94:23	3	jabber_presence_init ( ) ;
EXPR	94:1	94:1	4	jabber_presence_init ( )
FUNCTION_CALL	94:1	94:22	5	jabber_presence_init ( )
CALLEE	94:1	94:1	6	jabber_presence_init
LEAF_NODE	94:1	94:1	7	jabber_presence_init
LEAF_NODE	94:21	94:21	6	(
LEAF_NODE	94:22	94:22	6	)
LEAF_NODE	94:23	94:23	4	;
EXPR_STATEMENT	95:1	95:19	3	jabber_caps_init ( ) ;
EXPR	95:1	95:1	4	jabber_caps_init ( )
FUNCTION_CALL	95:1	95:18	5	jabber_caps_init ( )
CALLEE	95:1	95:1	6	jabber_caps_init
LEAF_NODE	95:1	95:1	7	jabber_caps_init
LEAF_NODE	95:17	95:17	6	(
LEAF_NODE	95:18	95:18	6	)
LEAF_NODE	95:19	95:19	4	;
EXPR_STATEMENT	97:1	97:18	3	jabber_pep_init ( ) ;
EXPR	97:1	97:1	4	jabber_pep_init ( )
FUNCTION_CALL	97:1	97:17	5	jabber_pep_init ( )
CALLEE	97:1	97:1	6	jabber_pep_init
LEAF_NODE	97:1	97:1	7	jabber_pep_init
LEAF_NODE	97:16	97:16	6	(
LEAF_NODE	97:17	97:17	6	)
LEAF_NODE	97:18	97:18	4	;
EXPR_STATEMENT	98:1	98:19	3	jabber_data_init ( ) ;
EXPR	98:1	98:1	4	jabber_data_init ( )
FUNCTION_CALL	98:1	98:18	5	jabber_data_init ( )
CALLEE	98:1	98:1	6	jabber_data_init
LEAF_NODE	98:1	98:1	7	jabber_data_init
LEAF_NODE	98:17	98:17	6	(
LEAF_NODE	98:18	98:18	6	)
LEAF_NODE	98:19	98:19	4	;
EXPR_STATEMENT	99:1	99:19	3	jabber_bosh_init ( ) ;
EXPR	99:1	99:1	4	jabber_bosh_init ( )
FUNCTION_CALL	99:1	99:18	5	jabber_bosh_init ( )
CALLEE	99:1	99:1	6	jabber_bosh_init
LEAF_NODE	99:1	99:1	7	jabber_bosh_init
LEAF_NODE	99:17	99:17	6	(
LEAF_NODE	99:18	99:18	6	)
LEAF_NODE	99:19	99:19	4	;
EXPR_STATEMENT	101:1	101:18	3	jabber_ibb_init ( ) ;
EXPR	101:1	101:1	4	jabber_ibb_init ( )
FUNCTION_CALL	101:1	101:17	5	jabber_ibb_init ( )
CALLEE	101:1	101:1	6	jabber_ibb_init
LEAF_NODE	101:1	101:1	7	jabber_ibb_init
LEAF_NODE	101:16	101:16	6	(
LEAF_NODE	101:17	101:17	6	)
LEAF_NODE	101:18	101:18	4	;
EXPR_STATEMENT	102:1	102:17	3	jabber_si_init ( ) ;
EXPR	102:1	102:1	4	jabber_si_init ( )
FUNCTION_CALL	102:1	102:16	5	jabber_si_init ( )
CALLEE	102:1	102:1	6	jabber_si_init
LEAF_NODE	102:1	102:1	7	jabber_si_init
LEAF_NODE	102:15	102:15	6	(
LEAF_NODE	102:16	102:16	6	)
LEAF_NODE	102:17	102:17	4	;
EXPR_STATEMENT	103:1	103:19	3	jabber_auth_init ( ) ;
EXPR	103:1	103:1	4	jabber_auth_init ( )
FUNCTION_CALL	103:1	103:18	5	jabber_auth_init ( )
CALLEE	103:1	103:1	6	jabber_auth_init
LEAF_NODE	103:1	103:1	7	jabber_auth_init
LEAF_NODE	103:17	103:17	6	(
LEAF_NODE	103:18	103:18	6	)
LEAF_NODE	103:19	103:19	4	;
LEAF_NODE	104:0	104:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:18	2	static const char *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:13	3	const char
LEAF_NODE	1:7	1:7	4	const
LEAF_NODE	1:13	1:13	4	char
LEAF_NODE	1:18	1:18	3	*
FUNCTION_NAME	2:0	2:0	2	lookup
LEAF_NODE	2:0	2:0	3	lookup
PARAMETER_LIST	2:7	2:54	2	( const PurpleDesktopItem * item , const char * key )
LEAF_NODE	2:7	2:7	3	(
PARAMETER_DECL	2:8	2:33	3	const PurpleDesktopItem * item
TYPE	2:8	2:32	4	const PurpleDesktopItem *
TYPE_NAME	2:8	2:14	5	const PurpleDesktopItem
LEAF_NODE	2:8	2:8	6	const
LEAF_NODE	2:14	2:14	6	PurpleDesktopItem
POINTER	2:32	2:32	5	*
LEAF_NODE	2:32	2:32	6	*
NAME	2:33	2:33	4	item
LEAF_NODE	2:33	2:33	5	item
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:51	3	const char * key
TYPE	2:39	2:50	4	const char *
TYPE_NAME	2:39	2:45	5	const char
LEAF_NODE	2:39	2:39	6	const
LEAF_NODE	2:45	2:45	6	char
POINTER	2:50	2:50	5	*
LEAF_NODE	2:50	2:50	6	*
NAME	2:51	2:51	4	key
LEAF_NODE	2:51	2:51	5	key
LEAF_NODE	2:54	2:54	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:50	3	return g_hash_table_lookup ( item -> main_hash , key ) ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	g_hash_table_lookup ( item -> main_hash , key )
EXPR	4:8	4:8	5	g_hash_table_lookup ( item -> main_hash , key )
FUNCTION_CALL	4:8	4:49	6	g_hash_table_lookup ( item -> main_hash , key )
CALLEE	4:8	4:8	7	g_hash_table_lookup
LEAF_NODE	4:8	4:8	8	g_hash_table_lookup
LEAF_NODE	4:28	4:28	7	(
ARGUMENT	4:29	4:29	7	item -> main_hash
FIELD	4:29	4:35	8	item -> main_hash
LEAF_NODE	4:29	4:29	9	item
LEAF_NODE	4:33	4:33	9	->
LEAF_NODE	4:35	4:35	9	main_hash
LEAF_NODE	4:44	4:44	7	,
ARGUMENT	4:46	4:46	7	key
FIELD	4:46	4:46	8	key
LEAF_NODE	4:46	4:46	9	key
LEAF_NODE	4:49	4:49	7	)
LEAF_NODE	4:50	4:50	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	12:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	account_enabled_cb
LEAF_NODE	2:12	2:12	3	account_enabled_cb
PARAMETER_LIST	2:30	2:79	2	( PurpleAccount * acct , PidginStatusBox * status_box )
LEAF_NODE	2:30	2:30	3	(
PARAMETER_DECL	2:31	2:46	3	PurpleAccount * acct
TYPE	2:31	2:45	4	PurpleAccount *
TYPE_NAME	2:31	2:31	5	PurpleAccount
LEAF_NODE	2:31	2:31	6	PurpleAccount
POINTER	2:45	2:45	5	*
LEAF_NODE	2:45	2:45	6	*
NAME	2:46	2:46	4	acct
LEAF_NODE	2:46	2:46	5	acct
LEAF_NODE	2:50	2:50	3	,
PARAMETER_DECL	2:52	2:69	3	PidginStatusBox * status_box
TYPE	2:52	2:68	4	PidginStatusBox *
TYPE_NAME	2:52	2:52	5	PidginStatusBox
LEAF_NODE	2:52	2:52	6	PidginStatusBox
POINTER	2:68	2:68	5	*
LEAF_NODE	2:68	2:68	6	*
NAME	2:69	2:69	4	status_box
LEAF_NODE	2:69	2:69	5	status_box
LEAF_NODE	2:79	2:79	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:1	2	
SIMPLE_DECL	4:1	4:69	3	PurpleAccount * initial_token_acct ; initial_token_acct = status_box -> token_status_account ;
VAR_DECL	4:1	4:16	4	PurpleAccount * initial_token_acct ; initial_token_acct = status_box -> token_status_account
TYPE	4:1	4:15	5	PurpleAccount *
TYPE_NAME	4:1	4:1	6	PurpleAccount
LEAF_NODE	4:1	4:1	7	PurpleAccount
POINTER	4:15	4:15	6	*
LEAF_NODE	4:15	4:15	7	*
NAME	4:16	4:16	5	initial_token_acct
LEAF_NODE	4:16	4:16	6	initial_token_acct
LEAF_NODE	0:0	0:0	5	;
INIT	4:16	4:16	5	initial_token_acct = status_box -> token_status_account
ASSIGN	4:16	4:37	6	initial_token_acct = status_box -> token_status_account
LVAL	4:16	4:16	7	initial_token_acct
NAME	4:16	4:16	8	initial_token_acct
LEAF_NODE	4:16	4:16	9	initial_token_acct
ASSIGN_OP	4:35	4:35	7	=
LEAF_NODE	4:35	4:35	8	=
RVAL	4:37	4:37	7	status_box -> token_status_account
FIELD	4:37	4:49	8	status_box -> token_status_account
LEAF_NODE	4:37	4:37	9	status_box
LEAF_NODE	4:47	4:47	9	->
LEAF_NODE	4:49	4:49	9	token_status_account
LEAF_NODE	4:69	4:69	4	;
SELECTION	5:1	6:2	3	
KEYWORD	5:1	5:1	4	if
LEAF_NODE	5:1	5:1	5	if
LEAF_NODE	5:4	5:4	4	(
CONDITION	5:5	5:5	4	status_box -> account
EXPR	5:5	5:5	5	status_box -> account
FIELD	5:5	5:17	6	status_box -> account
LEAF_NODE	5:5	5:5	7	status_box
LEAF_NODE	5:15	5:15	7	->
LEAF_NODE	5:17	5:17	7	account
LEAF_NODE	5:24	5:24	4	)
STATEMENTS	6:2	6:2	4	
JUMP_STATEMENT	6:2	6:8	5	return DESTINATION ;
KEYWORD	6:2	6:2	6	return
LEAF_NODE	6:2	6:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	6:8	6:8	6	;
EXPR_STATEMENT	7:1	7:82	3	status_box -> token_status_account = check_active_accounts_for_identical_statuses ( ) ;
EXPR	7:1	7:1	4	status_box -> token_status_account = check_active_accounts_for_identical_statuses ( )
ASSIGN	7:1	7:36	5	status_box -> token_status_account = check_active_accounts_for_identical_statuses ( )
LVAL	7:1	7:1	6	status_box -> token_status_account
FIELD	7:1	7:13	7	status_box -> token_status_account
LEAF_NODE	7:1	7:1	8	status_box
LEAF_NODE	7:11	7:11	8	->
LEAF_NODE	7:13	7:13	8	token_status_account
ASSIGN_OP	7:34	7:34	6	=
LEAF_NODE	7:34	7:34	7	=
RVAL	7:36	7:36	6	check_active_accounts_for_identical_statuses ( )
FUNCTION_CALL	7:36	7:81	7	check_active_accounts_for_identical_statuses ( )
CALLEE	7:36	7:36	8	check_active_accounts_for_identical_statuses
LEAF_NODE	7:36	7:36	9	check_active_accounts_for_identical_statuses
LEAF_NODE	7:80	7:80	8	(
LEAF_NODE	7:81	7:81	8	)
LEAF_NODE	7:82	7:82	4	;
SELECTION	9:1	9:61	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	initial_token_acct != status_box -> token_status_account
EXPR	9:5	9:27	5	initial_token_acct != status_box -> token_status_account
FIELD	9:5	9:5	6	initial_token_acct
LEAF_NODE	9:5	9:5	7	initial_token_acct
EQ_OPERATOR	9:24	9:24	6	!=
LEAF_NODE	9:24	9:24	7	!=
FIELD	9:27	9:39	6	status_box -> token_status_account
LEAF_NODE	9:27	9:27	7	status_box
LEAF_NODE	9:37	9:37	7	->
LEAF_NODE	9:39	9:39	7	token_status_account
LEAF_NODE	9:59	9:59	4	)
STATEMENTS	9:61	11:1	4	
LEAF_NODE	9:61	9:61	5	{
STATEMENTS	10:2	10:2	5	
EXPR_STATEMENT	10:2	10:48	6	pidgin_status_box_regenerate ( status_box , TRUE ) ;
EXPR	10:2	10:2	7	pidgin_status_box_regenerate ( status_box , TRUE )
FUNCTION_CALL	10:2	10:47	8	pidgin_status_box_regenerate ( status_box , TRUE )
CALLEE	10:2	10:2	9	pidgin_status_box_regenerate
LEAF_NODE	10:2	10:2	10	pidgin_status_box_regenerate
LEAF_NODE	10:30	10:30	9	(
ARGUMENT	10:31	10:31	9	status_box
FIELD	10:31	10:31	10	status_box
LEAF_NODE	10:31	10:31	11	status_box
LEAF_NODE	10:41	10:41	9	,
ARGUMENT	10:43	10:43	9	TRUE
FIELD	10:43	10:43	10	TRUE
LEAF_NODE	10:43	10:43	11	TRUE
LEAF_NODE	10:47	10:47	9	)
LEAF_NODE	10:48	10:48	7	;
LEAF_NODE	11:1	11:1	5	}
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	12:0	1	
RETURN_TYPE	1:0	1:13	2	static GList *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	GList
LEAF_NODE	1:7	1:7	4	GList
LEAF_NODE	1:13	1:13	3	*
FUNCTION_NAME	2:0	2:0	2	get_idle_options
LEAF_NODE	2:0	2:0	3	get_idle_options
PARAMETER_LIST	2:16	2:21	2	( void )
LEAF_NODE	2:16	2:16	3	(
PARAMETER_DECL	2:17	2:17	3	void
LEAF_NODE	2:17	2:17	4	void
LEAF_NODE	2:21	2:21	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	11:1	2	
SIMPLE_DECL	4:1	4:19	3	GList * list ; list = NULL ;
VAR_DECL	4:1	4:8	4	GList * list ; list = NULL
TYPE	4:1	4:7	5	GList *
TYPE_NAME	4:1	4:1	6	GList
LEAF_NODE	4:1	4:1	7	GList
POINTER	4:7	4:7	6	*
LEAF_NODE	4:7	4:7	7	*
NAME	4:8	4:8	5	list
LEAF_NODE	4:8	4:8	6	list
LEAF_NODE	0:0	0:0	5	;
INIT	4:8	4:8	5	list = NULL
ASSIGN	4:8	4:15	6	list = NULL
LVAL	4:8	4:8	7	list
NAME	4:8	4:8	8	list
LEAF_NODE	4:8	4:8	9	list
ASSIGN_OP	4:13	4:13	7	=
LEAF_NODE	4:13	4:13	8	=
RVAL	4:15	4:15	7	NULL
FIELD	4:15	4:15	8	NULL
LEAF_NODE	4:15	4:15	9	NULL
LEAF_NODE	4:19	4:19	4	;
EXPR_STATEMENT	5:1	5:63	3	list = g_list_append ( list , ( char * ) _ ( "Based on keyboard use" ) ) ;
EXPR	5:1	5:1	4	list = g_list_append ( list , ( char * ) _ ( "Based on keyboard use" ) )
ASSIGN	5:1	5:8	5	list = g_list_append ( list , ( char * ) _ ( "Based on keyboard use" ) )
LVAL	5:1	5:1	6	list
FIELD	5:1	5:1	7	list
LEAF_NODE	5:1	5:1	8	list
ASSIGN_OP	5:6	5:6	6	=
LEAF_NODE	5:6	5:6	7	=
RVAL	5:8	5:8	6	g_list_append ( list , ( char * ) _ ( "Based on keyboard use" ) )
FUNCTION_CALL	5:8	5:62	7	g_list_append ( list , ( char * ) _ ( "Based on keyboard use" ) )
CALLEE	5:8	5:8	8	g_list_append
LEAF_NODE	5:8	5:8	9	g_list_append
LEAF_NODE	5:21	5:21	8	(
ARGUMENT	5:22	5:22	8	list
FIELD	5:22	5:22	9	list
LEAF_NODE	5:22	5:22	10	list
LEAF_NODE	5:26	5:26	8	,
ARGUMENT	5:28	5:36	8	( char * ) _ ( "Based on keyboard use" )
LEAF_NODE	5:28	5:28	9	(
TYPE_NAME	5:29	5:29	9	char
LEAF_NODE	5:29	5:29	10	char
LEAF_NODE	5:34	5:34	9	*
LEAF_NODE	5:35	5:35	9	)
FUNCTION_CALL	5:36	5:61	9	_ ( "Based on keyboard use" )
CALLEE	5:36	5:36	10	_
LEAF_NODE	5:36	5:36	11	_
LEAF_NODE	5:37	5:37	10	(
ARGUMENT	5:38	5:38	10	"Based on keyboard use"
FIELD	5:38	5:38	11	"Based on keyboard use"
LEAF_NODE	5:38	5:38	12	"Based on keyboard use"
LEAF_NODE	5:61	5:61	10	)
LEAF_NODE	5:62	5:62	8	)
LEAF_NODE	5:63	5:63	4	;
EXPR_STATEMENT	6:1	6:37	3	list = g_list_append ( list , "system" ) ;
EXPR	6:1	6:1	4	list = g_list_append ( list , "system" )
ASSIGN	6:1	6:8	5	list = g_list_append ( list , "system" )
LVAL	6:1	6:1	6	list
FIELD	6:1	6:1	7	list
LEAF_NODE	6:1	6:1	8	list
ASSIGN_OP	6:6	6:6	6	=
LEAF_NODE	6:6	6:6	7	=
RVAL	6:8	6:8	6	g_list_append ( list , "system" )
FUNCTION_CALL	6:8	6:36	7	g_list_append ( list , "system" )
CALLEE	6:8	6:8	8	g_list_append
LEAF_NODE	6:8	6:8	9	g_list_append
LEAF_NODE	6:21	6:21	8	(
ARGUMENT	6:22	6:22	8	list
FIELD	6:22	6:22	9	list
LEAF_NODE	6:22	6:22	10	list
LEAF_NODE	6:26	6:26	8	,
ARGUMENT	6:28	6:28	8	"system"
FIELD	6:28	6:28	9	"system"
LEAF_NODE	6:28	6:28	10	"system"
LEAF_NODE	6:36	6:36	8	)
LEAF_NODE	6:37	6:37	4	;
EXPR_STATEMENT	7:1	7:63	3	list = g_list_append ( list , ( char * ) _ ( "From last sent message" ) ) ;
EXPR	7:1	7:1	4	list = g_list_append ( list , ( char * ) _ ( "From last sent message" ) )
ASSIGN	7:1	7:8	5	list = g_list_append ( list , ( char * ) _ ( "From last sent message" ) )
LVAL	7:1	7:1	6	list
FIELD	7:1	7:1	7	list
LEAF_NODE	7:1	7:1	8	list
ASSIGN_OP	7:6	7:6	6	=
LEAF_NODE	7:6	7:6	7	=
RVAL	7:8	7:8	6	g_list_append ( list , ( char * ) _ ( "From last sent message" ) )
FUNCTION_CALL	7:8	7:62	7	g_list_append ( list , ( char * ) _ ( "From last sent message" ) )
CALLEE	7:8	7:8	8	g_list_append
LEAF_NODE	7:8	7:8	9	g_list_append
LEAF_NODE	7:21	7:21	8	(
ARGUMENT	7:22	7:22	8	list
FIELD	7:22	7:22	9	list
LEAF_NODE	7:22	7:22	10	list
LEAF_NODE	7:26	7:26	8	,
ARGUMENT	7:28	7:35	8	( char * ) _ ( "From last sent message" )
LEAF_NODE	7:28	7:28	9	(
TYPE_NAME	7:29	7:29	9	char
LEAF_NODE	7:29	7:29	10	char
LEAF_NODE	7:33	7:33	9	*
LEAF_NODE	7:34	7:34	9	)
FUNCTION_CALL	7:35	7:61	9	_ ( "From last sent message" )
CALLEE	7:35	7:35	10	_
LEAF_NODE	7:35	7:35	11	_
LEAF_NODE	7:36	7:36	10	(
ARGUMENT	7:37	7:37	10	"From last sent message"
FIELD	7:37	7:37	11	"From last sent message"
LEAF_NODE	7:37	7:37	12	"From last sent message"
LEAF_NODE	7:61	7:61	10	)
LEAF_NODE	7:62	7:62	8	)
LEAF_NODE	7:63	7:63	4	;
EXPR_STATEMENT	8:1	8:37	3	list = g_list_append ( list , "purple" ) ;
EXPR	8:1	8:1	4	list = g_list_append ( list , "purple" )
ASSIGN	8:1	8:8	5	list = g_list_append ( list , "purple" )
LVAL	8:1	8:1	6	list
FIELD	8:1	8:1	7	list
LEAF_NODE	8:1	8:1	8	list
ASSIGN_OP	8:6	8:6	6	=
LEAF_NODE	8:6	8:6	7	=
RVAL	8:8	8:8	6	g_list_append ( list , "purple" )
FUNCTION_CALL	8:8	8:36	7	g_list_append ( list , "purple" )
CALLEE	8:8	8:8	8	g_list_append
LEAF_NODE	8:8	8:8	9	g_list_append
LEAF_NODE	8:21	8:21	8	(
ARGUMENT	8:22	8:22	8	list
FIELD	8:22	8:22	9	list
LEAF_NODE	8:22	8:22	10	list
LEAF_NODE	8:26	8:26	8	,
ARGUMENT	8:28	8:28	8	"purple"
FIELD	8:28	8:28	9	"purple"
LEAF_NODE	8:28	8:28	10	"purple"
LEAF_NODE	8:36	8:36	8	)
LEAF_NODE	8:37	8:37	4	;
EXPR_STATEMENT	9:1	9:46	3	list = g_list_append ( list , ( char * ) _ ( "Never" ) ) ;
EXPR	9:1	9:1	4	list = g_list_append ( list , ( char * ) _ ( "Never" ) )
ASSIGN	9:1	9:8	5	list = g_list_append ( list , ( char * ) _ ( "Never" ) )
LVAL	9:1	9:1	6	list
FIELD	9:1	9:1	7	list
LEAF_NODE	9:1	9:1	8	list
ASSIGN_OP	9:6	9:6	6	=
LEAF_NODE	9:6	9:6	7	=
RVAL	9:8	9:8	6	g_list_append ( list , ( char * ) _ ( "Never" ) )
FUNCTION_CALL	9:8	9:45	7	g_list_append ( list , ( char * ) _ ( "Never" ) )
CALLEE	9:8	9:8	8	g_list_append
LEAF_NODE	9:8	9:8	9	g_list_append
LEAF_NODE	9:21	9:21	8	(
ARGUMENT	9:22	9:22	8	list
FIELD	9:22	9:22	9	list
LEAF_NODE	9:22	9:22	10	list
LEAF_NODE	9:26	9:26	8	,
ARGUMENT	9:28	9:35	8	( char * ) _ ( "Never" )
LEAF_NODE	9:28	9:28	9	(
TYPE_NAME	9:29	9:29	9	char
LEAF_NODE	9:29	9:29	10	char
LEAF_NODE	9:33	9:33	9	*
LEAF_NODE	9:34	9:34	9	)
FUNCTION_CALL	9:35	9:44	9	_ ( "Never" )
CALLEE	9:35	9:35	10	_
LEAF_NODE	9:35	9:35	11	_
LEAF_NODE	9:36	9:36	10	(
ARGUMENT	9:37	9:37	10	"Never"
FIELD	9:37	9:37	11	"Never"
LEAF_NODE	9:37	9:37	12	"Never"
LEAF_NODE	9:44	9:44	10	)
LEAF_NODE	9:45	9:45	8	)
LEAF_NODE	9:46	9:46	4	;
EXPR_STATEMENT	10:1	10:36	3	list = g_list_append ( list , "never" ) ;
EXPR	10:1	10:1	4	list = g_list_append ( list , "never" )
ASSIGN	10:1	10:8	5	list = g_list_append ( list , "never" )
LVAL	10:1	10:1	6	list
FIELD	10:1	10:1	7	list
LEAF_NODE	10:1	10:1	8	list
ASSIGN_OP	10:6	10:6	6	=
LEAF_NODE	10:6	10:6	7	=
RVAL	10:8	10:8	6	g_list_append ( list , "never" )
FUNCTION_CALL	10:8	10:35	7	g_list_append ( list , "never" )
CALLEE	10:8	10:8	8	g_list_append
LEAF_NODE	10:8	10:8	9	g_list_append
LEAF_NODE	10:21	10:21	8	(
ARGUMENT	10:22	10:22	8	list
FIELD	10:22	10:22	9	list
LEAF_NODE	10:22	10:22	10	list
LEAF_NODE	10:26	10:26	8	,
ARGUMENT	10:28	10:28	8	"never"
FIELD	10:28	10:28	9	"never"
LEAF_NODE	10:28	10:28	10	"never"
LEAF_NODE	10:35	10:35	8	)
LEAF_NODE	10:36	10:36	4	;
JUMP_STATEMENT	11:1	11:12	3	return list ;
KEYWORD	11:1	11:1	4	return
LEAF_NODE	11:1	11:1	5	return
DESTINATION	11:8	11:8	4	list
EXPR	11:8	11:8	5	list
FIELD	11:8	11:8	6	list
LEAF_NODE	11:8	11:8	7	list
LEAF_NODE	11:12	11:12	4	;
LEAF_NODE	12:0	12:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	signing_on_cb
LEAF_NODE	2:0	2:0	3	signing_on_cb
PARAMETER_LIST	2:13	2:46	2	( PurpleConnection * gc , void * data )
LEAF_NODE	2:13	2:13	3	(
PARAMETER_DECL	2:14	2:32	3	PurpleConnection * gc
TYPE	2:14	2:31	4	PurpleConnection *
TYPE_NAME	2:14	2:14	5	PurpleConnection
LEAF_NODE	2:14	2:14	6	PurpleConnection
POINTER	2:31	2:31	5	*
LEAF_NODE	2:31	2:31	6	*
NAME	2:32	2:32	4	gc
LEAF_NODE	2:32	2:32	5	gc
LEAF_NODE	2:34	2:34	3	,
PARAMETER_DECL	2:36	2:42	3	void * data
TYPE	2:36	2:41	4	void *
TYPE_NAME	2:36	2:36	5	void
LEAF_NODE	2:36	2:36	6	void
POINTER	2:41	2:41	5	*
LEAF_NODE	2:41	2:41	6	*
NAME	2:42	2:42	4	data
LEAF_NODE	2:42	2:42	5	data
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	5:68	3	purple_debug_misc ( "signals test" , "signing-on (%s)\n" , purple_account_get_username ( purple_connection_get_account ( gc ) ) ) ;
EXPR	4:1	4:1	4	purple_debug_misc ( "signals test" , "signing-on (%s)\n" , purple_account_get_username ( purple_connection_get_account ( gc ) ) )
FUNCTION_CALL	4:1	5:67	5	purple_debug_misc ( "signals test" , "signing-on (%s)\n" , purple_account_get_username ( purple_connection_get_account ( gc ) ) )
CALLEE	4:1	4:1	6	purple_debug_misc
LEAF_NODE	4:1	4:1	7	purple_debug_misc
LEAF_NODE	4:18	4:18	6	(
ARGUMENT	4:19	4:19	6	"signals test"
FIELD	4:19	4:19	7	"signals test"
LEAF_NODE	4:19	4:19	8	"signals test"
LEAF_NODE	4:33	4:33	6	,
ARGUMENT	4:35	4:35	6	"signing-on (%s)\n"
FIELD	4:35	4:35	7	"signing-on (%s)\n"
LEAF_NODE	4:35	4:35	8	"signing-on (%s)\n"
LEAF_NODE	4:54	4:54	6	,
ARGUMENT	5:5	5:5	6	purple_account_get_username ( purple_connection_get_account ( gc ) )
FUNCTION_CALL	5:5	5:66	7	purple_account_get_username ( purple_connection_get_account ( gc ) )
CALLEE	5:5	5:5	8	purple_account_get_username
LEAF_NODE	5:5	5:5	9	purple_account_get_username
LEAF_NODE	5:32	5:32	8	(
ARGUMENT	5:33	5:33	8	purple_connection_get_account ( gc )
FUNCTION_CALL	5:33	5:65	9	purple_connection_get_account ( gc )
CALLEE	5:33	5:33	10	purple_connection_get_account
LEAF_NODE	5:33	5:33	11	purple_connection_get_account
LEAF_NODE	5:62	5:62	10	(
ARGUMENT	5:63	5:63	10	gc
FIELD	5:63	5:63	11	gc
LEAF_NODE	5:63	5:63	12	gc
LEAF_NODE	5:65	5:65	10	)
LEAF_NODE	5:66	5:66	8	)
LEAF_NODE	5:67	5:67	6	)
LEAF_NODE	5:68	5:68	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	33:0	1	
RETURN_TYPE	2:0	2:0	2	void
TYPE_NAME	2:0	2:0	3	void
LEAF_NODE	2:0	2:0	4	void
FUNCTION_NAME	2:5	2:5	2	gnt_wm_new_window
LEAF_NODE	2:5	2:5	3	gnt_wm_new_window
PARAMETER_LIST	2:22	2:51	2	( GntWM * wm , GntWidget * widget )
LEAF_NODE	2:22	2:22	3	(
PARAMETER_DECL	2:23	2:30	3	GntWM * wm
TYPE	2:23	2:29	4	GntWM *
TYPE_NAME	2:23	2:23	5	GntWM
LEAF_NODE	2:23	2:23	6	GntWM
POINTER	2:29	2:29	5	*
LEAF_NODE	2:29	2:29	6	*
NAME	2:30	2:30	4	wm
LEAF_NODE	2:30	2:30	5	wm
LEAF_NODE	2:32	2:32	3	,
PARAMETER_DECL	2:34	2:45	3	GntWidget * widget
TYPE	2:34	2:44	4	GntWidget *
TYPE_NAME	2:34	2:34	5	GntWidget
LEAF_NODE	2:34	2:34	6	GntWidget
POINTER	2:44	2:44	5	*
LEAF_NODE	2:44	2:44	6	*
NAME	2:45	2:45	4	widget
LEAF_NODE	2:45	2:45	5	widget
LEAF_NODE	2:51	2:51	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	32:1	2	
ITERATION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	while
LEAF_NODE	4:1	4:1	5	while
LEAF_NODE	4:7	4:7	4	(
CONDITION	4:8	4:8	4	widget -> parent
EXPR	4:8	4:8	5	widget -> parent
FIELD	4:8	4:16	6	widget -> parent
LEAF_NODE	4:8	4:8	7	widget
LEAF_NODE	4:14	4:14	7	->
LEAF_NODE	4:16	4:16	7	parent
LEAF_NODE	4:22	4:22	4	)
STATEMENTS	5:2	5:2	4	
EXPR_STATEMENT	5:2	5:25	5	widget = widget -> parent ;
EXPR	5:2	5:2	6	widget = widget -> parent
ASSIGN	5:2	5:11	7	widget = widget -> parent
LVAL	5:2	5:2	8	widget
FIELD	5:2	5:2	9	widget
LEAF_NODE	5:2	5:2	10	widget
ASSIGN_OP	5:9	5:9	8	=
LEAF_NODE	5:9	5:9	9	=
RVAL	5:11	5:11	8	widget -> parent
FIELD	5:11	5:19	9	widget -> parent
LEAF_NODE	5:11	5:11	10	widget
LEAF_NODE	5:17	5:17	10	->
LEAF_NODE	5:19	5:19	10	parent
LEAF_NODE	5:25	5:25	6	;
SELECTION	6:1	7:43	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_INVISIBLE ) || g_hash_table_lookup ( wm -> nodes , widget )
EXPR	6:5	6:5	5	GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_INVISIBLE ) || g_hash_table_lookup ( wm -> nodes , widget )
OR	6:5	7:3	6	GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_INVISIBLE ) || g_hash_table_lookup ( wm -> nodes , widget )
EXPR	6:5	6:5	7	GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_INVISIBLE )
FUNCTION_CALL	6:5	6:56	8	GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_INVISIBLE )
CALLEE	6:5	6:5	9	GNT_WIDGET_IS_FLAG_SET
LEAF_NODE	6:5	6:5	10	GNT_WIDGET_IS_FLAG_SET
LEAF_NODE	6:27	6:27	9	(
ARGUMENT	6:28	6:28	9	widget
FIELD	6:28	6:28	10	widget
LEAF_NODE	6:28	6:28	11	widget
LEAF_NODE	6:34	6:34	9	,
ARGUMENT	6:36	6:36	9	GNT_WIDGET_INVISIBLE
FIELD	6:36	6:36	10	GNT_WIDGET_INVISIBLE
LEAF_NODE	6:36	6:36	11	GNT_WIDGET_INVISIBLE
LEAF_NODE	6:56	6:56	9	)
LEAF_NODE	6:58	6:58	7	||
EXPR	7:3	7:3	7	g_hash_table_lookup ( wm -> nodes , widget )
FUNCTION_CALL	7:3	7:40	8	g_hash_table_lookup ( wm -> nodes , widget )
CALLEE	7:3	7:3	9	g_hash_table_lookup
LEAF_NODE	7:3	7:3	10	g_hash_table_lookup
LEAF_NODE	7:22	7:22	9	(
ARGUMENT	7:23	7:23	9	wm -> nodes
FIELD	7:23	7:27	10	wm -> nodes
LEAF_NODE	7:23	7:23	11	wm
LEAF_NODE	7:25	7:25	11	->
LEAF_NODE	7:27	7:27	11	nodes
LEAF_NODE	7:32	7:32	9	,
ARGUMENT	7:34	7:34	9	widget
FIELD	7:34	7:34	10	widget
LEAF_NODE	7:34	7:34	11	widget
LEAF_NODE	7:40	7:40	9	)
LEAF_NODE	7:41	7:41	4	)
STATEMENTS	7:43	10:1	4	
LEAF_NODE	7:43	7:43	5	{
STATEMENTS	8:2	9:2	5	
EXPR_STATEMENT	8:2	8:19	6	update_screen ( wm ) ;
EXPR	8:2	8:2	7	update_screen ( wm )
FUNCTION_CALL	8:2	8:18	8	update_screen ( wm )
CALLEE	8:2	8:2	9	update_screen
LEAF_NODE	8:2	8:2	10	update_screen
LEAF_NODE	8:15	8:15	9	(
ARGUMENT	8:16	8:16	9	wm
FIELD	8:16	8:16	10	wm
LEAF_NODE	8:16	8:16	11	wm
LEAF_NODE	8:18	8:18	9	)
LEAF_NODE	8:19	8:19	7	;
JUMP_STATEMENT	9:2	9:8	6	return DESTINATION ;
KEYWORD	9:2	9:2	7	return
LEAF_NODE	9:2	9:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	9:8	9:8	7	;
LEAF_NODE	10:1	10:1	5	}
SELECTION	11:1	11:25	3	
KEYWORD	11:1	11:1	4	if
LEAF_NODE	11:1	11:1	5	if
LEAF_NODE	11:4	11:4	4	(
CONDITION	11:5	11:5	4	GNT_IS_BOX ( widget )
EXPR	11:5	11:5	5	GNT_IS_BOX ( widget )
FUNCTION_CALL	11:5	11:22	6	GNT_IS_BOX ( widget )
CALLEE	11:5	11:5	7	GNT_IS_BOX
LEAF_NODE	11:5	11:5	8	GNT_IS_BOX
LEAF_NODE	11:15	11:15	7	(
ARGUMENT	11:16	11:16	7	widget
FIELD	11:16	11:16	8	widget
LEAF_NODE	11:16	11:16	9	widget
LEAF_NODE	11:22	11:22	7	)
LEAF_NODE	11:23	11:23	4	)
STATEMENTS	11:25	19:1	4	
LEAF_NODE	11:25	11:25	5	{
STATEMENTS	12:2	14:2	5	
SIMPLE_DECL	12:2	12:44	6	const char * title ; title = GNT_BOX ( widget ) -> title ;
VAR_DECL	12:2	12:14	7	const char * title ; title = GNT_BOX ( widget ) -> title
TYPE	12:2	12:13	8	const char *
TYPE_NAME	12:2	12:8	9	const char
LEAF_NODE	12:2	12:2	10	const
LEAF_NODE	12:8	12:8	10	char
POINTER	12:13	12:13	9	*
LEAF_NODE	12:13	12:13	10	*
NAME	12:14	12:14	8	title
LEAF_NODE	12:14	12:14	9	title
LEAF_NODE	0:0	0:0	8	;
INIT	12:14	12:14	8	title = GNT_BOX ( widget ) -> title
ASSIGN	12:14	12:22	9	title = GNT_BOX ( widget ) -> title
LVAL	12:14	12:14	10	title
NAME	12:14	12:14	11	title
LEAF_NODE	12:14	12:14	12	title
ASSIGN_OP	12:20	12:20	10	=
LEAF_NODE	12:20	12:20	11	=
RVAL	12:22	12:39	10	GNT_BOX ( widget ) -> title
FUNCTION_CALL	12:22	12:36	11	GNT_BOX ( widget )
CALLEE	12:22	12:22	12	GNT_BOX
LEAF_NODE	12:22	12:22	13	GNT_BOX
LEAF_NODE	12:29	12:29	12	(
ARGUMENT	12:30	12:30	12	widget
FIELD	12:30	12:30	13	widget
LEAF_NODE	12:30	12:30	14	widget
LEAF_NODE	12:36	12:36	12	)
LEAF_NODE	12:37	12:37	11	->
LEAF_NODE	12:39	12:39	11	title
LEAF_NODE	12:44	12:44	7	;
SIMPLE_DECL	13:2	13:23	6	GntPosition * p ; p = NULL ;
VAR_DECL	13:2	13:15	7	GntPosition * p ; p = NULL
TYPE	13:2	13:14	8	GntPosition *
TYPE_NAME	13:2	13:2	9	GntPosition
LEAF_NODE	13:2	13:2	10	GntPosition
POINTER	13:14	13:14	9	*
LEAF_NODE	13:14	13:14	10	*
NAME	13:15	13:15	8	p
LEAF_NODE	13:15	13:15	9	p
LEAF_NODE	0:0	0:0	8	;
INIT	13:15	13:15	8	p = NULL
ASSIGN	13:15	13:19	9	p = NULL
LVAL	13:15	13:15	10	p
NAME	13:15	13:15	11	p
LEAF_NODE	13:15	13:15	12	p
ASSIGN_OP	13:17	13:17	10	=
LEAF_NODE	13:17	13:17	11	=
RVAL	13:19	13:19	10	NULL
FIELD	13:19	13:19	11	NULL
LEAF_NODE	13:19	13:19	12	NULL
LEAF_NODE	13:23	13:23	7	;
SELECTION	14:2	14:72	6	
KEYWORD	14:2	14:2	7	if
LEAF_NODE	14:2	14:2	8	if
LEAF_NODE	14:5	14:5	7	(
CONDITION	14:6	14:6	7	title && ( p = g_hash_table_lookup ( wm -> positions , title ) ) != NULL
EXPR	14:6	14:6	8	title && ( p = g_hash_table_lookup ( wm -> positions , title ) ) != NULL
AND	14:6	14:15	9	title && ( p = g_hash_table_lookup ( wm -> positions , title ) ) != NULL
EXPR	14:6	14:6	10	title
FIELD	14:6	14:6	11	title
LEAF_NODE	14:6	14:6	12	title
LEAF_NODE	14:12	14:12	10	&&
EXPR	14:15	14:66	10	( p = g_hash_table_lookup ( wm -> positions , title ) ) != NULL
LEAF_NODE	14:15	14:15	11	(
ASSIGN	14:16	14:20	11	p = g_hash_table_lookup ( wm -> positions , title )
LVAL	14:16	14:16	12	p
FIELD	14:16	14:16	13	p
LEAF_NODE	14:16	14:16	14	p
ASSIGN_OP	14:18	14:18	12	=
LEAF_NODE	14:18	14:18	13	=
RVAL	14:20	14:20	12	g_hash_table_lookup ( wm -> positions , title )
FUNCTION_CALL	14:20	14:60	13	g_hash_table_lookup ( wm -> positions , title )
CALLEE	14:20	14:20	14	g_hash_table_lookup
LEAF_NODE	14:20	14:20	15	g_hash_table_lookup
LEAF_NODE	14:39	14:39	14	(
ARGUMENT	14:40	14:40	14	wm -> positions
FIELD	14:40	14:44	15	wm -> positions
LEAF_NODE	14:40	14:40	16	wm
LEAF_NODE	14:42	14:42	16	->
LEAF_NODE	14:44	14:44	16	positions
LEAF_NODE	14:53	14:53	14	,
ARGUMENT	14:55	14:55	14	title
FIELD	14:55	14:55	15	title
LEAF_NODE	14:55	14:55	16	title
LEAF_NODE	14:60	14:60	14	)
LEAF_NODE	14:61	14:61	11	)
EQ_OPERATOR	14:63	14:63	11	!=
LEAF_NODE	14:63	14:63	12	!=
FIELD	14:66	14:66	11	NULL
LEAF_NODE	14:66	14:66	12	NULL
LEAF_NODE	14:70	14:70	7	)
STATEMENTS	14:72	18:2	7	
LEAF_NODE	14:72	14:72	8	{
STATEMENTS	15:3	17:3	8	
EXPR_STATEMENT	15:3	15:48	9	sanitize_position ( widget , & p -> x , & p -> y , TRUE ) ;
EXPR	15:3	15:3	10	sanitize_position ( widget , & p -> x , & p -> y , TRUE )
FUNCTION_CALL	15:3	15:47	11	sanitize_position ( widget , & p -> x , & p -> y , TRUE )
CALLEE	15:3	15:3	12	sanitize_position
LEAF_NODE	15:3	15:3	13	sanitize_position
LEAF_NODE	15:20	15:20	12	(
ARGUMENT	15:21	15:21	12	widget
FIELD	15:21	15:21	13	widget
LEAF_NODE	15:21	15:21	14	widget
LEAF_NODE	15:27	15:27	12	,
ARGUMENT	15:29	15:29	12	& p -> x
UNARY_EXPR	15:29	15:30	13	& p -> x
UNARY_OPERATOR	15:29	15:29	14	&
LEAF_NODE	15:29	15:29	15	&
FIELD	15:30	15:33	14	p -> x
LEAF_NODE	15:30	15:30	15	p
LEAF_NODE	15:31	15:31	15	->
LEAF_NODE	15:33	15:33	15	x
LEAF_NODE	15:34	15:34	12	,
ARGUMENT	15:36	15:36	12	& p -> y
UNARY_EXPR	15:36	15:37	13	& p -> y
UNARY_OPERATOR	15:36	15:36	14	&
LEAF_NODE	15:36	15:36	15	&
FIELD	15:37	15:40	14	p -> y
LEAF_NODE	15:37	15:37	15	p
LEAF_NODE	15:38	15:38	15	->
LEAF_NODE	15:40	15:40	15	y
LEAF_NODE	15:41	15:41	12	,
ARGUMENT	15:43	15:43	12	TRUE
FIELD	15:43	15:43	13	TRUE
LEAF_NODE	15:43	15:43	14	TRUE
LEAF_NODE	15:47	15:47	12	)
LEAF_NODE	15:48	15:48	10	;
EXPR_STATEMENT	16:3	16:46	9	gnt_widget_set_position ( widget , p -> x , p -> y ) ;
EXPR	16:3	16:3	10	gnt_widget_set_position ( widget , p -> x , p -> y )
FUNCTION_CALL	16:3	16:45	11	gnt_widget_set_position ( widget , p -> x , p -> y )
CALLEE	16:3	16:3	12	gnt_widget_set_position
LEAF_NODE	16:3	16:3	13	gnt_widget_set_position
LEAF_NODE	16:26	16:26	12	(
ARGUMENT	16:27	16:27	12	widget
FIELD	16:27	16:27	13	widget
LEAF_NODE	16:27	16:27	14	widget
LEAF_NODE	16:33	16:33	12	,
ARGUMENT	16:35	16:35	12	p -> x
FIELD	16:35	16:38	13	p -> x
LEAF_NODE	16:35	16:35	14	p
LEAF_NODE	16:36	16:36	14	->
LEAF_NODE	16:38	16:38	14	x
LEAF_NODE	16:39	16:39	12	,
ARGUMENT	16:41	16:41	12	p -> y
FIELD	16:41	16:44	13	p -> y
LEAF_NODE	16:41	16:41	14	p
LEAF_NODE	16:42	16:42	14	->
LEAF_NODE	16:44	16:44	14	y
LEAF_NODE	16:45	16:45	12	)
LEAF_NODE	16:46	16:46	10	;
EXPR_STATEMENT	17:3	17:36	9	mvwin ( widget -> window , p -> y , p -> x ) ;
EXPR	17:3	17:3	10	mvwin ( widget -> window , p -> y , p -> x )
FUNCTION_CALL	17:3	17:35	11	mvwin ( widget -> window , p -> y , p -> x )
CALLEE	17:3	17:3	12	mvwin
LEAF_NODE	17:3	17:3	13	mvwin
LEAF_NODE	17:8	17:8	12	(
ARGUMENT	17:9	17:9	12	widget -> window
FIELD	17:9	17:17	13	widget -> window
LEAF_NODE	17:9	17:9	14	widget
LEAF_NODE	17:15	17:15	14	->
LEAF_NODE	17:17	17:17	14	window
LEAF_NODE	17:23	17:23	12	,
ARGUMENT	17:25	17:25	12	p -> y
FIELD	17:25	17:28	13	p -> y
LEAF_NODE	17:25	17:25	14	p
LEAF_NODE	17:26	17:26	14	->
LEAF_NODE	17:28	17:28	14	y
LEAF_NODE	17:29	17:29	12	,
ARGUMENT	17:31	17:31	12	p -> x
FIELD	17:31	17:34	13	p -> x
LEAF_NODE	17:31	17:31	14	p
LEAF_NODE	17:32	17:32	14	->
LEAF_NODE	17:34	17:34	14	x
LEAF_NODE	17:35	17:35	12	)
LEAF_NODE	17:36	17:36	10	;
LEAF_NODE	18:2	18:2	8	}
LEAF_NODE	19:1	19:1	5	}
EXPR_STATEMENT	20:1	20:51	3	g_signal_emit ( wm , signals [ SIG_NEW_WIN ] , 0 , widget ) ;
EXPR	20:1	20:1	4	g_signal_emit ( wm , signals [ SIG_NEW_WIN ] , 0 , widget )
FUNCTION_CALL	20:1	20:50	5	g_signal_emit ( wm , signals [ SIG_NEW_WIN ] , 0 , widget )
CALLEE	20:1	20:1	6	g_signal_emit
LEAF_NODE	20:1	20:1	7	g_signal_emit
LEAF_NODE	20:14	20:14	6	(
ARGUMENT	20:15	20:15	6	wm
FIELD	20:15	20:15	7	wm
LEAF_NODE	20:15	20:15	8	wm
LEAF_NODE	20:17	20:17	6	,
ARGUMENT	20:19	20:19	6	signals [ SIG_NEW_WIN ]
FIELD	20:19	20:38	7	signals [ SIG_NEW_WIN ]
LEAF_NODE	20:19	20:19	8	signals
LEAF_NODE	20:26	20:26	8	[
EXPR	20:27	20:27	8	SIG_NEW_WIN
FIELD	20:27	20:27	9	SIG_NEW_WIN
LEAF_NODE	20:27	20:27	10	SIG_NEW_WIN
LEAF_NODE	20:38	20:38	8	]
LEAF_NODE	20:39	20:39	6	,
ARGUMENT	20:41	20:41	6	0
FIELD	20:41	20:41	7	0
LEAF_NODE	20:41	20:41	8	0
LEAF_NODE	20:42	20:42	6	,
ARGUMENT	20:44	20:44	6	widget
FIELD	20:44	20:44	7	widget
LEAF_NODE	20:44	20:44	8	widget
LEAF_NODE	20:50	20:50	6	)
LEAF_NODE	20:51	20:51	4	;
EXPR_STATEMENT	21:1	21:56	3	g_signal_emit ( wm , signals [ SIG_DECORATE_WIN ] , 0 , widget ) ;
EXPR	21:1	21:1	4	g_signal_emit ( wm , signals [ SIG_DECORATE_WIN ] , 0 , widget )
FUNCTION_CALL	21:1	21:55	5	g_signal_emit ( wm , signals [ SIG_DECORATE_WIN ] , 0 , widget )
CALLEE	21:1	21:1	6	g_signal_emit
LEAF_NODE	21:1	21:1	7	g_signal_emit
LEAF_NODE	21:14	21:14	6	(
ARGUMENT	21:15	21:15	6	wm
FIELD	21:15	21:15	7	wm
LEAF_NODE	21:15	21:15	8	wm
LEAF_NODE	21:17	21:17	6	,
ARGUMENT	21:19	21:19	6	signals [ SIG_DECORATE_WIN ]
FIELD	21:19	21:43	7	signals [ SIG_DECORATE_WIN ]
LEAF_NODE	21:19	21:19	8	signals
LEAF_NODE	21:26	21:26	8	[
EXPR	21:27	21:27	8	SIG_DECORATE_WIN
FIELD	21:27	21:27	9	SIG_DECORATE_WIN
LEAF_NODE	21:27	21:27	10	SIG_DECORATE_WIN
LEAF_NODE	21:43	21:43	8	]
LEAF_NODE	21:44	21:44	6	,
ARGUMENT	21:46	21:46	6	0
FIELD	21:46	21:46	7	0
LEAF_NODE	21:46	21:46	8	0
LEAF_NODE	21:47	21:47	6	,
ARGUMENT	21:49	21:49	6	widget
FIELD	21:49	21:49	7	widget
LEAF_NODE	21:49	21:49	8	widget
LEAF_NODE	21:55	21:55	6	)
LEAF_NODE	21:56	21:56	4	;
SELECTION	22:1	22:75	3	
KEYWORD	22:1	22:1	4	if
LEAF_NODE	22:1	22:1	5	if
LEAF_NODE	22:4	22:4	4	(
CONDITION	22:5	22:5	4	wm -> windows && ! GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_TRANSIENT )
EXPR	22:5	22:5	5	wm -> windows && ! GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_TRANSIENT )
AND	22:5	22:20	6	wm -> windows && ! GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_TRANSIENT )
EXPR	22:5	22:5	7	wm -> windows
FIELD	22:5	22:9	8	wm -> windows
LEAF_NODE	22:5	22:5	9	wm
LEAF_NODE	22:7	22:7	9	->
LEAF_NODE	22:9	22:9	9	windows
LEAF_NODE	22:17	22:17	7	&&
EXPR	22:20	22:20	7	! GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_TRANSIENT )
UNARY_EXPR	22:20	22:21	8	! GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_TRANSIENT )
UNARY_OPERATOR	22:20	22:20	9	!
LEAF_NODE	22:20	22:20	10	!
FUNCTION_CALL	22:21	22:72	9	GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_TRANSIENT )
CALLEE	22:21	22:21	10	GNT_WIDGET_IS_FLAG_SET
LEAF_NODE	22:21	22:21	11	GNT_WIDGET_IS_FLAG_SET
LEAF_NODE	22:43	22:43	10	(
ARGUMENT	22:44	22:44	10	widget
FIELD	22:44	22:44	11	widget
LEAF_NODE	22:44	22:44	12	widget
LEAF_NODE	22:50	22:50	10	,
ARGUMENT	22:52	22:52	10	GNT_WIDGET_TRANSIENT
FIELD	22:52	22:52	11	GNT_WIDGET_TRANSIENT
LEAF_NODE	22:52	22:52	12	GNT_WIDGET_TRANSIENT
LEAF_NODE	22:72	22:72	10	)
LEAF_NODE	22:73	22:73	4	)
STATEMENTS	22:75	30:1	4	
LEAF_NODE	22:75	22:75	5	{
STATEMENTS	23:2	23:2	5	
SELECTION	23:2	24:66	6	
KEYWORD	23:2	23:2	7	if
LEAF_NODE	23:2	23:2	8	if
LEAF_NODE	23:5	23:5	7	(
CONDITION	23:6	23:6	7	( GNT_IS_BOX ( widget ) && GNT_BOX ( widget ) -> title ) && wm -> _list . window != widget && GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_CAN_TAKE_FOCUS )
EXPR	23:6	23:6	8	( GNT_IS_BOX ( widget ) && GNT_BOX ( widget ) -> title ) && wm -> _list . window != widget && GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_CAN_TAKE_FOCUS )
AND	23:6	23:56	9	( GNT_IS_BOX ( widget ) && GNT_BOX ( widget ) -> title ) && wm -> _list . window != widget && GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_CAN_TAKE_FOCUS )
EXPR	23:6	23:51	10	( GNT_IS_BOX ( widget ) && GNT_BOX ( widget ) -> title )
LEAF_NODE	23:6	23:6	11	(
AND	23:7	23:29	11	GNT_IS_BOX ( widget ) && GNT_BOX ( widget ) -> title
EXPR	23:7	23:7	12	GNT_IS_BOX ( widget )
FUNCTION_CALL	23:7	23:24	13	GNT_IS_BOX ( widget )
CALLEE	23:7	23:7	14	GNT_IS_BOX
LEAF_NODE	23:7	23:7	15	GNT_IS_BOX
LEAF_NODE	23:17	23:17	14	(
ARGUMENT	23:18	23:18	14	widget
FIELD	23:18	23:18	15	widget
LEAF_NODE	23:18	23:18	16	widget
LEAF_NODE	23:24	23:24	14	)
LEAF_NODE	23:26	23:26	12	&&
EXPR	23:29	23:46	12	GNT_BOX ( widget ) -> title
FUNCTION_CALL	23:29	23:43	13	GNT_BOX ( widget )
CALLEE	23:29	23:29	14	GNT_BOX
LEAF_NODE	23:29	23:29	15	GNT_BOX
LEAF_NODE	23:36	23:36	14	(
ARGUMENT	23:37	23:37	14	widget
FIELD	23:37	23:37	15	widget
LEAF_NODE	23:37	23:37	16	widget
LEAF_NODE	23:43	23:43	14	)
LEAF_NODE	23:44	23:44	13	->
LEAF_NODE	23:46	23:46	13	title
LEAF_NODE	23:51	23:51	11	)
LEAF_NODE	23:53	23:53	10	&&
EXPR	23:56	23:56	10	wm -> _list . window != widget && GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_CAN_TAKE_FOCUS )
AND	23:56	24:7	11	wm -> _list . window != widget && GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_CAN_TAKE_FOCUS )
EXPR	23:56	23:76	12	wm -> _list . window != widget
FIELD	23:56	23:66	13	wm -> _list . window
LEAF_NODE	23:56	23:56	14	wm
LEAF_NODE	23:58	23:58	14	->
LEAF_NODE	23:60	23:60	14	_list
LEAF_NODE	23:65	23:65	14	.
LEAF_NODE	23:66	23:66	14	window
EQ_OPERATOR	23:73	23:73	13	!=
LEAF_NODE	23:73	23:73	14	!=
FIELD	23:76	23:76	13	widget
LEAF_NODE	23:76	23:76	14	widget
LEAF_NODE	24:4	24:4	12	&&
EXPR	24:7	24:7	12	GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_CAN_TAKE_FOCUS )
FUNCTION_CALL	24:7	24:63	13	GNT_WIDGET_IS_FLAG_SET ( widget , GNT_WIDGET_CAN_TAKE_FOCUS )
CALLEE	24:7	24:7	14	GNT_WIDGET_IS_FLAG_SET
LEAF_NODE	24:7	24:7	15	GNT_WIDGET_IS_FLAG_SET
LEAF_NODE	24:29	24:29	14	(
ARGUMENT	24:30	24:30	14	widget
FIELD	24:30	24:30	15	widget
LEAF_NODE	24:30	24:30	16	widget
LEAF_NODE	24:36	24:36	14	,
ARGUMENT	24:38	24:38	14	GNT_WIDGET_CAN_TAKE_FOCUS
FIELD	24:38	24:38	15	GNT_WIDGET_CAN_TAKE_FOCUS
LEAF_NODE	24:38	24:38	16	GNT_WIDGET_CAN_TAKE_FOCUS
LEAF_NODE	24:63	24:63	14	)
LEAF_NODE	24:64	24:64	7	)
STATEMENTS	24:66	29:2	7	
LEAF_NODE	24:66	24:66	8	{
STATEMENTS	25:3	28:3	8	
EXPR_STATEMENT	25:3	27:82	9	gnt_tree_add_row_last ( GNT_TREE ( wm -> windows -> tree ) , widget , gnt_tree_create_row ( GNT_TREE ( wm -> windows -> tree ) , GNT_BOX ( widget ) -> title ) , g_object_get_data ( G_OBJECT ( wm -> windows -> tree ) , "workspace" ) ? wm -> cws : NULL ) ;
EXPR	25:3	25:3	10	gnt_tree_add_row_last ( GNT_TREE ( wm -> windows -> tree ) , widget , gnt_tree_create_row ( GNT_TREE ( wm -> windows -> tree ) , GNT_BOX ( widget ) -> title ) , g_object_get_data ( G_OBJECT ( wm -> windows -> tree ) , "workspace" ) ? wm -> cws : NULL )
FUNCTION_CALL	25:3	27:81	11	gnt_tree_add_row_last ( GNT_TREE ( wm -> windows -> tree ) , widget , gnt_tree_create_row ( GNT_TREE ( wm -> windows -> tree ) , GNT_BOX ( widget ) -> title ) , g_object_get_data ( G_OBJECT ( wm -> windows -> tree ) , "workspace" ) ? wm -> cws : NULL )
CALLEE	25:3	25:3	12	gnt_tree_add_row_last
LEAF_NODE	25:3	25:3	13	gnt_tree_add_row_last
LEAF_NODE	25:24	25:24	12	(
ARGUMENT	25:25	25:25	12	GNT_TREE ( wm -> windows -> tree )
FUNCTION_CALL	25:25	25:51	13	GNT_TREE ( wm -> windows -> tree )
CALLEE	25:25	25:25	14	GNT_TREE
LEAF_NODE	25:25	25:25	15	GNT_TREE
LEAF_NODE	25:33	25:33	14	(
ARGUMENT	25:34	25:34	14	wm -> windows -> tree
FIELD	25:34	25:47	15	wm -> windows -> tree
LEAF_NODE	25:34	25:34	16	wm
LEAF_NODE	25:36	25:36	16	->
LEAF_NODE	25:38	25:38	16	windows
LEAF_NODE	25:45	25:45	16	->
LEAF_NODE	25:47	25:47	16	tree
LEAF_NODE	25:51	25:51	14	)
LEAF_NODE	25:52	25:52	12	,
ARGUMENT	25:54	25:54	12	widget
FIELD	25:54	25:54	13	widget
LEAF_NODE	25:54	25:54	14	widget
LEAF_NODE	25:60	25:60	12	,
ARGUMENT	26:5	26:5	12	gnt_tree_create_row ( GNT_TREE ( wm -> windows -> tree ) , GNT_BOX ( widget ) -> title )
FUNCTION_CALL	26:5	26:76	13	gnt_tree_create_row ( GNT_TREE ( wm -> windows -> tree ) , GNT_BOX ( widget ) -> title )
CALLEE	26:5	26:5	14	gnt_tree_create_row
LEAF_NODE	26:5	26:5	15	gnt_tree_create_row
LEAF_NODE	26:24	26:24	14	(
ARGUMENT	26:25	26:25	14	GNT_TREE ( wm -> windows -> tree )
FUNCTION_CALL	26:25	26:51	15	GNT_TREE ( wm -> windows -> tree )
CALLEE	26:25	26:25	16	GNT_TREE
LEAF_NODE	26:25	26:25	17	GNT_TREE
LEAF_NODE	26:33	26:33	16	(
ARGUMENT	26:34	26:34	16	wm -> windows -> tree
FIELD	26:34	26:47	17	wm -> windows -> tree
LEAF_NODE	26:34	26:34	18	wm
LEAF_NODE	26:36	26:36	18	->
LEAF_NODE	26:38	26:38	18	windows
LEAF_NODE	26:45	26:45	18	->
LEAF_NODE	26:47	26:47	18	tree
LEAF_NODE	26:51	26:51	16	)
LEAF_NODE	26:52	26:52	14	,
ARGUMENT	26:54	26:71	14	GNT_BOX ( widget ) -> title
FUNCTION_CALL	26:54	26:68	15	GNT_BOX ( widget )
CALLEE	26:54	26:54	16	GNT_BOX
LEAF_NODE	26:54	26:54	17	GNT_BOX
LEAF_NODE	26:61	26:61	16	(
ARGUMENT	26:62	26:62	16	widget
FIELD	26:62	26:62	17	widget
LEAF_NODE	26:62	26:62	18	widget
LEAF_NODE	26:68	26:68	16	)
LEAF_NODE	26:69	26:69	15	->
LEAF_NODE	26:71	26:71	15	title
LEAF_NODE	26:76	26:76	14	)
LEAF_NODE	26:77	26:77	12	,
ARGUMENT	27:5	27:5	12	g_object_get_data ( G_OBJECT ( wm -> windows -> tree ) , "workspace" ) ? wm -> cws : NULL
COND_EXPR	27:5	27:77	13	g_object_get_data ( G_OBJECT ( wm -> windows -> tree ) , "workspace" ) ? wm -> cws : NULL
CONDITION	27:5	27:5	14	g_object_get_data ( G_OBJECT ( wm -> windows -> tree ) , "workspace" )
FUNCTION_CALL	27:5	27:63	15	g_object_get_data ( G_OBJECT ( wm -> windows -> tree ) , "workspace" )
CALLEE	27:5	27:5	16	g_object_get_data
LEAF_NODE	27:5	27:5	17	g_object_get_data
LEAF_NODE	27:22	27:22	16	(
ARGUMENT	27:23	27:23	16	G_OBJECT ( wm -> windows -> tree )
FUNCTION_CALL	27:23	27:49	17	G_OBJECT ( wm -> windows -> tree )
CALLEE	27:23	27:23	18	G_OBJECT
LEAF_NODE	27:23	27:23	19	G_OBJECT
LEAF_NODE	27:31	27:31	18	(
ARGUMENT	27:32	27:32	18	wm -> windows -> tree
FIELD	27:32	27:45	19	wm -> windows -> tree
LEAF_NODE	27:32	27:32	20	wm
LEAF_NODE	27:34	27:34	20	->
LEAF_NODE	27:36	27:36	20	windows
LEAF_NODE	27:43	27:43	20	->
LEAF_NODE	27:45	27:45	20	tree
LEAF_NODE	27:49	27:49	18	)
LEAF_NODE	27:50	27:50	16	,
ARGUMENT	27:52	27:52	16	"workspace"
FIELD	27:52	27:52	17	"workspace"
LEAF_NODE	27:52	27:52	18	"workspace"
LEAF_NODE	27:63	27:63	16	)
LEAF_NODE	27:65	27:65	14	?
EXPR	27:67	27:67	14	wm -> cws
FIELD	27:67	27:71	15	wm -> cws
LEAF_NODE	27:67	27:67	16	wm
LEAF_NODE	27:69	27:69	16	->
LEAF_NODE	27:71	27:71	16	cws
LEAF_NODE	27:75	27:75	14	:
FIELD	27:77	27:77	14	NULL
LEAF_NODE	27:77	27:77	15	NULL
LEAF_NODE	27:81	27:81	12	)
LEAF_NODE	27:82	27:82	10	;
EXPR_STATEMENT	28:3	28:36	9	update_window_in_list ( wm , widget ) ;
EXPR	28:3	28:3	10	update_window_in_list ( wm , widget )
FUNCTION_CALL	28:3	28:35	11	update_window_in_list ( wm , widget )
CALLEE	28:3	28:3	12	update_window_in_list
LEAF_NODE	28:3	28:3	13	update_window_in_list
LEAF_NODE	28:24	28:24	12	(
ARGUMENT	28:25	28:25	12	wm
FIELD	28:25	28:25	13	wm
LEAF_NODE	28:25	28:25	14	wm
LEAF_NODE	28:27	28:27	12	,
ARGUMENT	28:29	28:29	12	widget
FIELD	28:29	28:29	13	widget
LEAF_NODE	28:29	28:29	14	widget
LEAF_NODE	28:35	28:35	12	)
LEAF_NODE	28:36	28:36	10	;
LEAF_NODE	29:2	29:2	8	}
LEAF_NODE	30:1	30:1	5	}
EXPR_STATEMENT	31:1	31:36	3	gnt_ws_draw_taskbar ( wm -> cws , FALSE ) ;
EXPR	31:1	31:1	4	gnt_ws_draw_taskbar ( wm -> cws , FALSE )
FUNCTION_CALL	31:1	31:35	5	gnt_ws_draw_taskbar ( wm -> cws , FALSE )
CALLEE	31:1	31:1	6	gnt_ws_draw_taskbar
LEAF_NODE	31:1	31:1	7	gnt_ws_draw_taskbar
LEAF_NODE	31:20	31:20	6	(
ARGUMENT	31:21	31:21	6	wm -> cws
FIELD	31:21	31:25	7	wm -> cws
LEAF_NODE	31:21	31:21	8	wm
LEAF_NODE	31:23	31:23	8	->
LEAF_NODE	31:25	31:25	8	cws
LEAF_NODE	31:28	31:28	6	,
ARGUMENT	31:30	31:30	6	FALSE
FIELD	31:30	31:30	7	FALSE
LEAF_NODE	31:30	31:30	8	FALSE
LEAF_NODE	31:35	31:35	6	)
LEAF_NODE	31:36	31:36	4	;
EXPR_STATEMENT	32:1	32:18	3	update_screen ( wm ) ;
EXPR	32:1	32:1	4	update_screen ( wm )
FUNCTION_CALL	32:1	32:17	5	update_screen ( wm )
CALLEE	32:1	32:1	6	update_screen
LEAF_NODE	32:1	32:1	7	update_screen
LEAF_NODE	32:14	32:14	6	(
ARGUMENT	32:15	32:15	6	wm
FIELD	32:15	32:15	7	wm
LEAF_NODE	32:15	32:15	8	wm
LEAF_NODE	32:17	32:17	6	)
LEAF_NODE	32:18	32:18	4	;
LEAF_NODE	33:0	33:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	md5_uninit
LEAF_NODE	2:0	2:0	3	md5_uninit
PARAMETER_LIST	2:10	2:39	2	( PurpleCipherContext * context )
LEAF_NODE	2:10	2:10	3	(
PARAMETER_DECL	2:11	2:32	3	PurpleCipherContext * context
TYPE	2:11	2:31	4	PurpleCipherContext *
TYPE_NAME	2:11	2:11	5	PurpleCipherContext
LEAF_NODE	2:11	2:11	6	PurpleCipherContext
POINTER	2:31	2:31	5	*
LEAF_NODE	2:31	2:31	6	*
NAME	2:32	2:32	4	context
LEAF_NODE	2:32	2:32	5	context
LEAF_NODE	2:39	2:39	3	)
LEAF_NODE	2:41	2:41	2	{
STATEMENTS	3:1	8:1	2	
SIMPLE_DECL	3:1	3:31	3	struct MD5Context * md5_context ;
VAR_DECL	3:1	3:20	4	struct MD5Context * md5_context
TYPE	3:1	3:19	5	struct MD5Context *
TYPE_NAME	3:1	3:8	6	struct MD5Context
LEAF_NODE	3:1	3:1	7	struct
LEAF_NODE	3:8	3:8	7	MD5Context
POINTER	3:19	3:19	6	*
LEAF_NODE	3:19	3:19	7	*
NAME	3:20	3:20	5	md5_context
LEAF_NODE	3:20	3:20	6	md5_context
LEAF_NODE	3:31	3:31	4	;
EXPR_STATEMENT	4:1	4:43	3	purple_cipher_context_reset ( context , NULL ) ;
EXPR	4:1	4:1	4	purple_cipher_context_reset ( context , NULL )
FUNCTION_CALL	4:1	4:42	5	purple_cipher_context_reset ( context , NULL )
CALLEE	4:1	4:1	6	purple_cipher_context_reset
LEAF_NODE	4:1	4:1	7	purple_cipher_context_reset
LEAF_NODE	4:28	4:28	6	(
ARGUMENT	4:29	4:29	6	context
FIELD	4:29	4:29	7	context
LEAF_NODE	4:29	4:29	8	context
LEAF_NODE	4:36	4:36	6	,
ARGUMENT	4:38	4:38	6	NULL
FIELD	4:38	4:38	7	NULL
LEAF_NODE	4:38	4:38	8	NULL
LEAF_NODE	4:42	4:42	6	)
LEAF_NODE	4:43	4:43	4	;
EXPR_STATEMENT	5:1	5:54	3	md5_context = purple_cipher_context_get_data ( context ) ;
EXPR	5:1	5:1	4	md5_context = purple_cipher_context_get_data ( context )
ASSIGN	5:1	5:15	5	md5_context = purple_cipher_context_get_data ( context )
LVAL	5:1	5:1	6	md5_context
FIELD	5:1	5:1	7	md5_context
LEAF_NODE	5:1	5:1	8	md5_context
ASSIGN_OP	5:13	5:13	6	=
LEAF_NODE	5:13	5:13	7	=
RVAL	5:15	5:15	6	purple_cipher_context_get_data ( context )
FUNCTION_CALL	5:15	5:53	7	purple_cipher_context_get_data ( context )
CALLEE	5:15	5:15	8	purple_cipher_context_get_data
LEAF_NODE	5:15	5:15	9	purple_cipher_context_get_data
LEAF_NODE	5:45	5:45	8	(
ARGUMENT	5:46	5:46	8	context
FIELD	5:46	5:46	9	context
LEAF_NODE	5:46	5:46	10	context
LEAF_NODE	5:53	5:53	8	)
LEAF_NODE	5:54	5:54	4	;
EXPR_STATEMENT	6:1	6:45	3	memset ( md5_context , 0 , sizeof ( * md5_context ) ) ;
EXPR	6:1	6:1	4	memset ( md5_context , 0 , sizeof ( * md5_context ) )
FUNCTION_CALL	6:1	6:44	5	memset ( md5_context , 0 , sizeof ( * md5_context ) )
CALLEE	6:1	6:1	6	memset
LEAF_NODE	6:1	6:1	7	memset
LEAF_NODE	6:7	6:7	6	(
ARGUMENT	6:8	6:8	6	md5_context
FIELD	6:8	6:8	7	md5_context
LEAF_NODE	6:8	6:8	8	md5_context
LEAF_NODE	6:19	6:19	6	,
ARGUMENT	6:21	6:21	6	0
FIELD	6:21	6:21	7	0
LEAF_NODE	6:21	6:21	8	0
LEAF_NODE	6:22	6:22	6	,
ARGUMENT	6:24	6:24	6	sizeof ( * md5_context )
FUNCTION_CALL	6:24	6:43	7	sizeof ( * md5_context )
CALLEE	6:24	6:24	8	sizeof
LEAF_NODE	6:24	6:24	9	sizeof
LEAF_NODE	6:30	6:30	8	(
ARGUMENT	6:31	6:31	8	* md5_context
UNARY_EXPR	6:31	6:32	9	* md5_context
UNARY_OPERATOR	6:31	6:31	10	*
LEAF_NODE	6:31	6:31	11	*
FIELD	6:32	6:32	10	md5_context
LEAF_NODE	6:32	6:32	11	md5_context
LEAF_NODE	6:43	6:43	8	)
LEAF_NODE	6:44	6:44	6	)
LEAF_NODE	6:45	6:45	4	;
EXPR_STATEMENT	7:1	7:20	3	g_free ( md5_context ) ;
EXPR	7:1	7:1	4	g_free ( md5_context )
FUNCTION_CALL	7:1	7:19	5	g_free ( md5_context )
CALLEE	7:1	7:1	6	g_free
LEAF_NODE	7:1	7:1	7	g_free
LEAF_NODE	7:7	7:7	6	(
ARGUMENT	7:8	7:8	6	md5_context
FIELD	7:8	7:8	7	md5_context
LEAF_NODE	7:8	7:8	8	md5_context
LEAF_NODE	7:19	7:19	6	)
LEAF_NODE	7:20	7:20	4	;
EXPR_STATEMENT	8:1	8:19	3	md5_context = NULL ;
EXPR	8:1	8:1	4	md5_context = NULL
ASSIGN	8:1	8:15	5	md5_context = NULL
LVAL	8:1	8:1	6	md5_context
FIELD	8:1	8:1	7	md5_context
LEAF_NODE	8:1	8:1	8	md5_context
ASSIGN_OP	8:13	8:13	6	=
LEAF_NODE	8:13	8:13	7	=
RVAL	8:15	8:15	6	NULL
FIELD	8:15	8:15	7	NULL
LEAF_NODE	8:15	8:15	8	NULL
LEAF_NODE	8:19	8:19	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:17	2	const JabberData *
TYPE_NAME	1:0	1:6	3	const JabberData
LEAF_NODE	1:0	1:0	4	const
LEAF_NODE	1:6	1:6	4	JabberData
LEAF_NODE	1:17	1:17	3	*
FUNCTION_NAME	2:0	2:0	2	jabber_data_find_local_by_cid
LEAF_NODE	2:0	2:0	3	jabber_data_find_local_by_cid
PARAMETER_LIST	2:29	2:46	2	( const gchar * cid )
LEAF_NODE	2:29	2:29	3	(
PARAMETER_DECL	2:30	2:43	3	const gchar * cid
TYPE	2:30	2:42	4	const gchar *
TYPE_NAME	2:30	2:36	5	const gchar
LEAF_NODE	2:30	2:30	6	const
LEAF_NODE	2:36	2:36	6	gchar
POINTER	2:42	2:42	5	*
LEAF_NODE	2:42	2:42	6	*
NAME	2:43	2:43	4	cid
LEAF_NODE	2:43	2:43	5	cid
LEAF_NODE	2:46	2:46	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:1	2	
EXPR_STATEMENT	4:1	4:77	3	purple_debug_info ( "jabber" , "lookup local data object with cid = %s\n" , cid ) ;
EXPR	4:1	4:1	4	purple_debug_info ( "jabber" , "lookup local data object with cid = %s\n" , cid )
FUNCTION_CALL	4:1	4:76	5	purple_debug_info ( "jabber" , "lookup local data object with cid = %s\n" , cid )
CALLEE	4:1	4:1	6	purple_debug_info
LEAF_NODE	4:1	4:1	7	purple_debug_info
LEAF_NODE	4:18	4:18	6	(
ARGUMENT	4:19	4:19	6	"jabber"
FIELD	4:19	4:19	7	"jabber"
LEAF_NODE	4:19	4:19	8	"jabber"
LEAF_NODE	4:27	4:27	6	,
ARGUMENT	4:29	4:29	6	"lookup local data object with cid = %s\n"
FIELD	4:29	4:29	7	"lookup local data object with cid = %s\n"
LEAF_NODE	4:29	4:29	8	"lookup local data object with cid = %s\n"
LEAF_NODE	4:71	4:71	6	,
ARGUMENT	4:73	4:73	6	cid
FIELD	4:73	4:73	7	cid
LEAF_NODE	4:73	4:73	8	cid
LEAF_NODE	4:76	4:76	6	)
LEAF_NODE	4:77	4:77	4	;
JUMP_STATEMENT	5:1	5:51	3	return g_hash_table_lookup ( local_data_by_cid , cid ) ;
KEYWORD	5:1	5:1	4	return
LEAF_NODE	5:1	5:1	5	return
DESTINATION	5:8	5:8	4	g_hash_table_lookup ( local_data_by_cid , cid )
EXPR	5:8	5:8	5	g_hash_table_lookup ( local_data_by_cid , cid )
FUNCTION_CALL	5:8	5:50	6	g_hash_table_lookup ( local_data_by_cid , cid )
CALLEE	5:8	5:8	7	g_hash_table_lookup
LEAF_NODE	5:8	5:8	8	g_hash_table_lookup
LEAF_NODE	5:27	5:27	7	(
ARGUMENT	5:28	5:28	7	local_data_by_cid
FIELD	5:28	5:28	8	local_data_by_cid
LEAF_NODE	5:28	5:28	9	local_data_by_cid
LEAF_NODE	5:45	5:45	7	,
ARGUMENT	5:47	5:47	7	cid
FIELD	5:47	5:47	8	cid
LEAF_NODE	5:47	5:47	9	cid
LEAF_NODE	5:50	5:50	7	)
LEAF_NODE	5:51	5:51	4	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	9:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	is_word_proper
LEAF_NODE	2:0	2:0	3	is_word_proper
PARAMETER_LIST	2:14	2:32	2	( const gchar * word )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:28	3	const gchar * word
TYPE	2:15	2:27	4	const gchar *
TYPE_NAME	2:15	2:21	5	const gchar
LEAF_NODE	2:15	2:15	6	const
LEAF_NODE	2:21	2:21	6	gchar
POINTER	2:27	2:27	5	*
LEAF_NODE	2:27	2:27	6	*
NAME	2:28	2:28	4	word
LEAF_NODE	2:28	2:28	5	word
LEAF_NODE	2:32	2:32	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	8:1	2	
SELECTION	4:1	5:2	3	
KEYWORD	4:1	4:1	4	if
LEAF_NODE	4:1	4:1	5	if
LEAF_NODE	4:4	4:4	4	(
CONDITION	4:5	4:5	4	word [ 0 ] == '\0'
EXPR	4:5	4:16	5	word [ 0 ] == '\0'
FIELD	4:5	4:11	6	word [ 0 ]
LEAF_NODE	4:5	4:5	7	word
LEAF_NODE	4:9	4:9	7	[
EXPR	4:10	4:10	7	0
FIELD	4:10	4:10	8	0
LEAF_NODE	4:10	4:10	9	0
LEAF_NODE	4:11	4:11	7	]
EQ_OPERATOR	4:13	4:13	6	==
LEAF_NODE	4:13	4:13	7	==
FIELD	4:16	4:16	6	'\0'
LEAF_NODE	4:16	4:16	7	'\0'
LEAF_NODE	4:20	4:20	4	)
STATEMENTS	5:2	5:2	4	
JUMP_STATEMENT	5:2	5:14	5	return FALSE ;
KEYWORD	5:2	5:2	6	return
LEAF_NODE	5:2	5:2	7	return
DESTINATION	5:9	5:9	6	FALSE
EXPR	5:9	5:9	7	FALSE
FIELD	5:9	5:9	8	FALSE
LEAF_NODE	5:9	5:9	9	FALSE
LEAF_NODE	5:14	5:14	6	;
SELECTION	6:1	7:2	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	! g_unichar_isupper ( g_utf8_get_char_validated ( word , - 1 ) )
EXPR	6:5	6:5	5	! g_unichar_isupper ( g_utf8_get_char_validated ( word , - 1 ) )
UNARY_EXPR	6:5	6:6	6	! g_unichar_isupper ( g_utf8_get_char_validated ( word , - 1 ) )
UNARY_OPERATOR	6:5	6:5	7	!
LEAF_NODE	6:5	6:5	8	!
FUNCTION_CALL	6:6	6:59	7	g_unichar_isupper ( g_utf8_get_char_validated ( word , - 1 ) )
CALLEE	6:6	6:6	8	g_unichar_isupper
LEAF_NODE	6:6	6:6	9	g_unichar_isupper
LEAF_NODE	6:23	6:23	8	(
ARGUMENT	6:24	6:24	8	g_utf8_get_char_validated ( word , - 1 )
FUNCTION_CALL	6:24	6:58	9	g_utf8_get_char_validated ( word , - 1 )
CALLEE	6:24	6:24	10	g_utf8_get_char_validated
LEAF_NODE	6:24	6:24	11	g_utf8_get_char_validated
LEAF_NODE	6:49	6:49	10	(
ARGUMENT	6:50	6:50	10	word
FIELD	6:50	6:50	11	word
LEAF_NODE	6:50	6:50	12	word
LEAF_NODE	6:54	6:54	10	,
ARGUMENT	6:56	6:56	10	- 1
UNARY_EXPR	6:56	6:57	11	- 1
UNARY_OPERATOR	6:56	6:56	12	-
LEAF_NODE	6:56	6:56	13	-
FIELD	6:57	6:57	12	1
LEAF_NODE	6:57	6:57	13	1
LEAF_NODE	6:58	6:58	10	)
LEAF_NODE	6:59	6:59	8	)
LEAF_NODE	6:60	6:60	4	)
STATEMENTS	7:2	7:2	4	
JUMP_STATEMENT	7:2	7:14	5	return FALSE ;
KEYWORD	7:2	7:2	6	return
LEAF_NODE	7:2	7:2	7	return
DESTINATION	7:9	7:9	6	FALSE
EXPR	7:9	7:9	7	FALSE
FIELD	7:9	7:9	8	FALSE
LEAF_NODE	7:9	7:9	9	FALSE
LEAF_NODE	7:14	7:14	6	;
JUMP_STATEMENT	8:1	8:60	3	return is_word_lowercase ( g_utf8_offset_to_pointer ( word , 1 ) ) ;
KEYWORD	8:1	8:1	4	return
LEAF_NODE	8:1	8:1	5	return
DESTINATION	8:8	8:8	4	is_word_lowercase ( g_utf8_offset_to_pointer ( word , 1 ) )
EXPR	8:8	8:8	5	is_word_lowercase ( g_utf8_offset_to_pointer ( word , 1 ) )
FUNCTION_CALL	8:8	8:59	6	is_word_lowercase ( g_utf8_offset_to_pointer ( word , 1 ) )
CALLEE	8:8	8:8	7	is_word_lowercase
LEAF_NODE	8:8	8:8	8	is_word_lowercase
LEAF_NODE	8:25	8:25	7	(
ARGUMENT	8:26	8:26	7	g_utf8_offset_to_pointer ( word , 1 )
FUNCTION_CALL	8:26	8:58	8	g_utf8_offset_to_pointer ( word , 1 )
CALLEE	8:26	8:26	9	g_utf8_offset_to_pointer
LEAF_NODE	8:26	8:26	10	g_utf8_offset_to_pointer
LEAF_NODE	8:50	8:50	9	(
ARGUMENT	8:51	8:51	9	word
FIELD	8:51	8:51	10	word
LEAF_NODE	8:51	8:51	11	word
LEAF_NODE	8:55	8:55	9	,
ARGUMENT	8:57	8:57	9	1
FIELD	8:57	8:57	10	1
LEAF_NODE	8:57	8:57	11	1
LEAF_NODE	8:58	8:58	9	)
LEAF_NODE	8:59	8:59	7	)
LEAF_NODE	8:60	8:60	4	;
LEAF_NODE	9:0	9:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	6:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	filter_level_changed_cb
LEAF_NODE	2:0	2:0	3	filter_level_changed_cb
PARAMETER_LIST	2:23	2:55	2	( GtkWidget * combo , gpointer null )
LEAF_NODE	2:23	2:23	3	(
PARAMETER_DECL	2:24	2:35	3	GtkWidget * combo
TYPE	2:24	2:34	4	GtkWidget *
TYPE_NAME	2:24	2:24	5	GtkWidget
LEAF_NODE	2:24	2:24	6	GtkWidget
POINTER	2:34	2:34	5	*
LEAF_NODE	2:34	2:34	6	*
NAME	2:35	2:35	4	combo
LEAF_NODE	2:35	2:35	5	combo
LEAF_NODE	2:40	2:40	3	,
PARAMETER_DECL	2:42	2:51	3	gpointer null
TYPE	2:42	2:42	4	gpointer
TYPE_NAME	2:42	2:42	5	gpointer
LEAF_NODE	2:42	2:42	6	gpointer
NAME	2:51	2:51	4	null
LEAF_NODE	2:51	2:51	5	null
LEAF_NODE	2:55	2:55	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	5:51	2	
LEAF_NODE	4:1	4:1	3	purple_prefs_set_int
LEAF_NODE	4:21	4:21	3	(
LEAF_NODE	4:22	4:22	3	PIDGIN_PREFS_ROOT
LEAF_NODE	4:40	4:40	3	"/debug/filterlevel"
LEAF_NODE	4:60	4:60	3	,
LEAF_NODE	5:4	5:4	3	gtk_combo_box_get_active
LEAF_NODE	5:28	5:28	3	(
LEAF_NODE	5:29	5:29	3	GTK_COMBO_BOX
LEAF_NODE	5:42	5:42	3	(
LEAF_NODE	5:43	5:43	3	combo
LEAF_NODE	5:48	5:48	3	)
LEAF_NODE	5:49	5:49	3	)
LEAF_NODE	5:50	5:50	3	)
LEAF_NODE	5:51	5:51	3	;
LEAF_NODE	6:0	6:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	37:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	xep_bytestreams_parse
LEAF_NODE	2:0	2:0	3	xep_bytestreams_parse
PARAMETER_LIST	2:21	2:76	2	( PurpleConnection * pc , xmlnode * packet , PurpleBuddy * pb )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:40	3	PurpleConnection * pc
TYPE	2:22	2:39	4	PurpleConnection *
TYPE_NAME	2:22	2:22	5	PurpleConnection
LEAF_NODE	2:22	2:22	6	PurpleConnection
POINTER	2:39	2:39	5	*
LEAF_NODE	2:39	2:39	6	*
NAME	2:40	2:40	4	pc
LEAF_NODE	2:40	2:40	5	pc
LEAF_NODE	2:42	2:42	3	,
PARAMETER_DECL	2:44	2:53	3	xmlnode * packet
TYPE	2:44	2:52	4	xmlnode *
TYPE_NAME	2:44	2:44	5	xmlnode
LEAF_NODE	2:44	2:44	6	xmlnode
POINTER	2:52	2:52	5	*
LEAF_NODE	2:52	2:52	6	*
NAME	2:53	2:53	4	packet
LEAF_NODE	2:53	2:53	5	packet
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	2:61	2:74	3	PurpleBuddy * pb
TYPE	2:61	2:73	4	PurpleBuddy *
TYPE_NAME	2:61	2:61	5	PurpleBuddy
LEAF_NODE	2:61	2:61	6	PurpleBuddy
POINTER	2:73	2:73	5	*
LEAF_NODE	2:73	2:73	6	*
NAME	2:74	2:74	4	pb
LEAF_NODE	2:74	2:74	5	pb
LEAF_NODE	2:76	2:76	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	35:1	2	
SIMPLE_DECL	4:1	4:38	3	const char * type , const char * from , const char * iq_id , const char * sid ;
INIT_DECL_LIST	4:1	4:1	4	const char * type , const char * from , const char * iq_id , const char * sid
VAR_DECL	4:1	4:13	5	const char * type
TYPE	4:1	4:12	6	const char *
TYPE_NAME	4:1	4:7	7	const char
LEAF_NODE	4:1	4:1	8	const
LEAF_NODE	4:7	4:7	8	char
POINTER	4:12	4:12	7	*
LEAF_NODE	4:12	4:12	8	*
NAME	4:13	4:13	6	type
LEAF_NODE	4:13	4:13	7	type
LEAF_NODE	4:17	4:17	5	,
INIT_DECL_LIST	4:1	4:1	5	const char * from , const char * iq_id , const char * sid
VAR_DECL	4:1	4:20	6	const char * from
TYPE	4:1	4:19	7	const char *
TYPE_NAME	4:1	4:7	8	const char
LEAF_NODE	4:1	4:1	9	const
LEAF_NODE	4:7	4:7	9	char
POINTER	4:19	4:19	8	*
LEAF_NODE	4:19	4:19	9	*
NAME	4:20	4:20	7	from
LEAF_NODE	4:20	4:20	8	from
LEAF_NODE	4:24	4:24	6	,
INIT_DECL_LIST	4:1	4:1	6	const char * iq_id , const char * sid
VAR_DECL	4:1	4:27	7	const char * iq_id
TYPE	4:1	4:26	8	const char *
TYPE_NAME	4:1	4:7	9	const char
LEAF_NODE	4:1	4:1	10	const
LEAF_NODE	4:7	4:7	10	char
POINTER	4:26	4:26	9	*
LEAF_NODE	4:26	4:26	10	*
NAME	4:27	4:27	8	iq_id
LEAF_NODE	4:27	4:27	9	iq_id
LEAF_NODE	4:32	4:32	7	,
VAR_DECL	4:1	4:35	7	const char * sid
TYPE	4:1	4:34	8	const char *
TYPE_NAME	4:1	4:7	9	const char
LEAF_NODE	4:1	4:1	10	const
LEAF_NODE	4:7	4:7	10	char
POINTER	4:34	4:34	9	*
LEAF_NODE	4:34	4:34	10	*
NAME	4:35	4:35	8	sid
LEAF_NODE	4:35	4:35	9	sid
LEAF_NODE	4:38	4:38	4	;
SIMPLE_DECL	5:1	5:28	3	xmlnode * query , xmlnode * streamhost ;
INIT_DECL_LIST	5:1	5:1	4	xmlnode * query , xmlnode * streamhost
VAR_DECL	5:1	5:10	5	xmlnode * query
TYPE	5:1	5:9	6	xmlnode *
TYPE_NAME	5:1	5:1	7	xmlnode
LEAF_NODE	5:1	5:1	8	xmlnode
POINTER	5:9	5:9	7	*
LEAF_NODE	5:9	5:9	8	*
NAME	5:10	5:10	6	query
LEAF_NODE	5:10	5:10	7	query
LEAF_NODE	5:15	5:15	5	,
VAR_DECL	5:1	5:18	5	xmlnode * streamhost
TYPE	5:1	5:17	6	xmlnode *
TYPE_NAME	5:1	5:1	7	xmlnode
LEAF_NODE	5:1	5:1	8	xmlnode
POINTER	5:17	5:17	7	*
LEAF_NODE	5:17	5:17	8	*
NAME	5:18	5:18	6	streamhost
LEAF_NODE	5:18	5:18	7	streamhost
LEAF_NODE	5:28	5:28	4	;
SIMPLE_DECL	6:1	6:16	3	BonjourData * bd ;
VAR_DECL	6:1	6:14	4	BonjourData * bd
TYPE	6:1	6:13	5	BonjourData *
TYPE_NAME	6:1	6:1	6	BonjourData
LEAF_NODE	6:1	6:1	7	BonjourData
POINTER	6:13	6:13	6	*
LEAF_NODE	6:13	6:13	7	*
NAME	6:14	6:14	5	bd
LEAF_NODE	6:14	6:14	6	bd
LEAF_NODE	6:16	6:16	4	;
SIMPLE_DECL	7:1	7:17	3	PurpleXfer * xfer ;
VAR_DECL	7:1	7:13	4	PurpleXfer * xfer
TYPE	7:1	7:12	5	PurpleXfer *
TYPE_NAME	7:1	7:1	6	PurpleXfer
LEAF_NODE	7:1	7:1	7	PurpleXfer
POINTER	7:12	7:12	6	*
LEAF_NODE	7:12	7:12	7	*
NAME	7:13	7:13	5	xfer
LEAF_NODE	7:13	7:13	6	xfer
LEAF_NODE	7:17	7:17	4	;
EXPR_STATEMENT	8:1	8:29	3	g_return_if_fail ( pc != NULL ) ;
EXPR	8:1	8:1	4	g_return_if_fail ( pc != NULL )
FUNCTION_CALL	8:1	8:28	5	g_return_if_fail ( pc != NULL )
CALLEE	8:1	8:1	6	g_return_if_fail
LEAF_NODE	8:1	8:1	7	g_return_if_fail
LEAF_NODE	8:17	8:17	6	(
ARGUMENT	8:18	8:24	6	pc != NULL
FIELD	8:18	8:18	7	pc
LEAF_NODE	8:18	8:18	8	pc
EQ_OPERATOR	8:21	8:21	7	!=
LEAF_NODE	8:21	8:21	8	!=
FIELD	8:24	8:24	7	NULL
LEAF_NODE	8:24	8:24	8	NULL
LEAF_NODE	8:28	8:28	6	)
LEAF_NODE	8:29	8:29	4	;
EXPR_STATEMENT	9:1	9:33	3	g_return_if_fail ( packet != NULL ) ;
EXPR	9:1	9:1	4	g_return_if_fail ( packet != NULL )
FUNCTION_CALL	9:1	9:32	5	g_return_if_fail ( packet != NULL )
CALLEE	9:1	9:1	6	g_return_if_fail
LEAF_NODE	9:1	9:1	7	g_return_if_fail
LEAF_NODE	9:17	9:17	6	(
ARGUMENT	9:18	9:28	6	packet != NULL
FIELD	9:18	9:18	7	packet
LEAF_NODE	9:18	9:18	8	packet
EQ_OPERATOR	9:25	9:25	7	!=
LEAF_NODE	9:25	9:25	8	!=
FIELD	9:28	9:28	7	NULL
LEAF_NODE	9:28	9:28	8	NULL
LEAF_NODE	9:32	9:32	6	)
LEAF_NODE	9:33	9:33	4	;
EXPR_STATEMENT	10:1	10:29	3	g_return_if_fail ( pb != NULL ) ;
EXPR	10:1	10:1	4	g_return_if_fail ( pb != NULL )
FUNCTION_CALL	10:1	10:28	5	g_return_if_fail ( pb != NULL )
CALLEE	10:1	10:1	6	g_return_if_fail
LEAF_NODE	10:1	10:1	7	g_return_if_fail
LEAF_NODE	10:17	10:17	6	(
ARGUMENT	10:18	10:24	6	pb != NULL
FIELD	10:18	10:18	7	pb
LEAF_NODE	10:18	10:18	8	pb
EQ_OPERATOR	10:21	10:21	7	!=
LEAF_NODE	10:21	10:21	8	!=
FIELD	10:24	10:24	7	NULL
LEAF_NODE	10:24	10:24	8	NULL
LEAF_NODE	10:28	10:28	6	)
LEAF_NODE	10:29	10:29	4	;
EXPR_STATEMENT	11:1	11:35	3	bd = ( BonjourData * ) pc -> proto_data ;
EXPR	11:1	11:1	4	bd = ( BonjourData * ) pc -> proto_data
ASSIGN	11:1	11:6	5	bd = ( BonjourData * ) pc -> proto_data
LVAL	11:1	11:1	6	bd
FIELD	11:1	11:1	7	bd
LEAF_NODE	11:1	11:1	8	bd
ASSIGN_OP	11:4	11:4	6	=
LEAF_NODE	11:4	11:4	7	=
RVAL	11:6	11:21	6	( BonjourData * ) pc -> proto_data
LEAF_NODE	11:6	11:6	7	(
TYPE_NAME	11:7	11:7	7	BonjourData
LEAF_NODE	11:7	11:7	8	BonjourData
LEAF_NODE	11:18	11:18	7	*
LEAF_NODE	11:19	11:19	7	)
FIELD	11:21	11:25	7	pc -> proto_data
LEAF_NODE	11:21	11:21	8	pc
LEAF_NODE	11:23	11:23	8	->
LEAF_NODE	11:25	11:25	8	proto_data
LEAF_NODE	11:35	11:35	4	;
SELECTION	12:1	13:2	3	
KEYWORD	12:1	12:1	4	if
LEAF_NODE	12:1	12:1	5	if
LEAF_NODE	12:3	12:3	4	(
CONDITION	12:4	12:4	4	bd == NULL
EXPR	12:4	12:10	5	bd == NULL
FIELD	12:4	12:4	6	bd
LEAF_NODE	12:4	12:4	7	bd
EQ_OPERATOR	12:7	12:7	6	==
LEAF_NODE	12:7	12:7	7	==
FIELD	12:10	12:10	6	NULL
LEAF_NODE	12:10	12:10	7	NULL
LEAF_NODE	12:14	12:14	4	)
STATEMENTS	13:2	13:2	4	
JUMP_STATEMENT	13:2	13:8	5	return DESTINATION ;
KEYWORD	13:2	13:2	6	return
LEAF_NODE	13:2	13:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	13:8	13:8	6	;
EXPR_STATEMENT	14:1	14:57	3	purple_debug_info ( "bonjour" , "xep-bytestreams-parse.\n" ) ;
EXPR	14:1	14:1	4	purple_debug_info ( "bonjour" , "xep-bytestreams-parse.\n" )
FUNCTION_CALL	14:1	14:56	5	purple_debug_info ( "bonjour" , "xep-bytestreams-parse.\n" )
CALLEE	14:1	14:1	6	purple_debug_info
LEAF_NODE	14:1	14:1	7	purple_debug_info
LEAF_NODE	14:18	14:18	6	(
ARGUMENT	14:19	14:19	6	"bonjour"
FIELD	14:19	14:19	7	"bonjour"
LEAF_NODE	14:19	14:19	8	"bonjour"
LEAF_NODE	14:28	14:28	6	,
ARGUMENT	14:30	14:30	6	"xep-bytestreams-parse.\n"
FIELD	14:30	14:30	7	"xep-bytestreams-parse.\n"
LEAF_NODE	14:30	14:30	8	"xep-bytestreams-parse.\n"
LEAF_NODE	14:56	14:56	6	)
LEAF_NODE	14:57	14:57	4	;
EXPR_STATEMENT	15:1	15:42	3	type = xmlnode_get_attrib ( packet , "type" ) ;
EXPR	15:1	15:1	4	type = xmlnode_get_attrib ( packet , "type" )
ASSIGN	15:1	15:8	5	type = xmlnode_get_attrib ( packet , "type" )
LVAL	15:1	15:1	6	type
FIELD	15:1	15:1	7	type
LEAF_NODE	15:1	15:1	8	type
ASSIGN_OP	15:6	15:6	6	=
LEAF_NODE	15:6	15:6	7	=
RVAL	15:8	15:8	6	xmlnode_get_attrib ( packet , "type" )
FUNCTION_CALL	15:8	15:41	7	xmlnode_get_attrib ( packet , "type" )
CALLEE	15:8	15:8	8	xmlnode_get_attrib
LEAF_NODE	15:8	15:8	9	xmlnode_get_attrib
LEAF_NODE	15:26	15:26	8	(
ARGUMENT	15:27	15:27	8	packet
FIELD	15:27	15:27	9	packet
LEAF_NODE	15:27	15:27	10	packet
LEAF_NODE	15:33	15:33	8	,
ARGUMENT	15:35	15:35	8	"type"
FIELD	15:35	15:35	9	"type"
LEAF_NODE	15:35	15:35	10	"type"
LEAF_NODE	15:41	15:41	8	)
LEAF_NODE	15:42	15:42	4	;
EXPR_STATEMENT	16:1	16:33	3	from = purple_buddy_get_name ( pb ) ;
EXPR	16:1	16:1	4	from = purple_buddy_get_name ( pb )
ASSIGN	16:1	16:8	5	from = purple_buddy_get_name ( pb )
LVAL	16:1	16:1	6	from
FIELD	16:1	16:1	7	from
LEAF_NODE	16:1	16:1	8	from
ASSIGN_OP	16:6	16:6	6	=
LEAF_NODE	16:6	16:6	7	=
RVAL	16:8	16:8	6	purple_buddy_get_name ( pb )
FUNCTION_CALL	16:8	16:32	7	purple_buddy_get_name ( pb )
CALLEE	16:8	16:8	8	purple_buddy_get_name
LEAF_NODE	16:8	16:8	9	purple_buddy_get_name
LEAF_NODE	16:29	16:29	8	(
ARGUMENT	16:30	16:30	8	pb
FIELD	16:30	16:30	9	pb
LEAF_NODE	16:30	16:30	10	pb
LEAF_NODE	16:32	16:32	8	)
LEAF_NODE	16:33	16:33	4	;
EXPR_STATEMENT	17:1	17:42	3	query = xmlnode_get_child ( packet , "query" ) ;
EXPR	17:1	17:1	4	query = xmlnode_get_child ( packet , "query" )
ASSIGN	17:1	17:9	5	query = xmlnode_get_child ( packet , "query" )
LVAL	17:1	17:1	6	query
FIELD	17:1	17:1	7	query
LEAF_NODE	17:1	17:1	8	query
ASSIGN_OP	17:7	17:7	6	=
LEAF_NODE	17:7	17:7	7	=
RVAL	17:9	17:9	6	xmlnode_get_child ( packet , "query" )
FUNCTION_CALL	17:9	17:41	7	xmlnode_get_child ( packet , "query" )
CALLEE	17:9	17:9	8	xmlnode_get_child
LEAF_NODE	17:9	17:9	9	xmlnode_get_child
LEAF_NODE	17:26	17:26	8	(
ARGUMENT	17:27	17:27	8	packet
FIELD	17:27	17:27	9	packet
LEAF_NODE	17:27	17:27	10	packet
LEAF_NODE	17:33	17:33	8	,
ARGUMENT	17:34	17:34	8	"query"
FIELD	17:34	17:34	9	"query"
LEAF_NODE	17:34	17:34	10	"query"
LEAF_NODE	17:41	17:41	8	)
LEAF_NODE	17:42	17:42	4	;
SELECTION	18:1	19:2	3	
KEYWORD	18:1	18:1	4	if
LEAF_NODE	18:1	18:1	5	if
LEAF_NODE	18:3	18:3	4	(
CONDITION	18:4	18:4	4	! type
EXPR	18:4	18:4	5	! type
UNARY_EXPR	18:4	18:5	6	! type
UNARY_OPERATOR	18:4	18:4	7	!
LEAF_NODE	18:4	18:4	8	!
FIELD	18:5	18:5	7	type
LEAF_NODE	18:5	18:5	8	type
LEAF_NODE	18:9	18:9	4	)
STATEMENTS	19:2	19:2	4	
JUMP_STATEMENT	19:2	19:8	5	return DESTINATION ;
KEYWORD	19:2	19:2	6	return
LEAF_NODE	19:2	19:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	19:8	19:8	6	;
EXPR_STATEMENT	20:1	20:28	3	query = xmlnode_copy ( query ) ;
EXPR	20:1	20:1	4	query = xmlnode_copy ( query )
ASSIGN	20:1	20:9	5	query = xmlnode_copy ( query )
LVAL	20:1	20:1	6	query
FIELD	20:1	20:1	7	query
LEAF_NODE	20:1	20:1	8	query
ASSIGN_OP	20:7	20:7	6	=
LEAF_NODE	20:7	20:7	7	=
RVAL	20:9	20:9	6	xmlnode_copy ( query )
FUNCTION_CALL	20:9	20:27	7	xmlnode_copy ( query )
CALLEE	20:9	20:9	8	xmlnode_copy
LEAF_NODE	20:9	20:9	9	xmlnode_copy
LEAF_NODE	20:21	20:21	8	(
ARGUMENT	20:22	20:22	8	query
FIELD	20:22	20:22	9	query
LEAF_NODE	20:22	20:22	10	query
LEAF_NODE	20:27	20:27	8	)
LEAF_NODE	20:28	20:28	4	;
SELECTION	21:1	22:2	3	
KEYWORD	21:1	21:1	4	if
LEAF_NODE	21:1	21:1	5	if
LEAF_NODE	21:4	21:4	4	(
CONDITION	21:5	21:5	4	! query
EXPR	21:5	21:5	5	! query
UNARY_EXPR	21:5	21:6	6	! query
UNARY_OPERATOR	21:5	21:5	7	!
LEAF_NODE	21:5	21:5	8	!
FIELD	21:6	21:6	7	query
LEAF_NODE	21:6	21:6	8	query
LEAF_NODE	21:11	21:11	4	)
STATEMENTS	22:2	22:2	4	
JUMP_STATEMENT	22:2	22:8	5	return DESTINATION ;
KEYWORD	22:2	22:2	6	return
LEAF_NODE	22:2	22:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	22:8	22:8	6	;
SELECTION	23:1	23:25	3	
KEYWORD	23:1	23:1	4	if
LEAF_NODE	23:1	23:1	5	if
LEAF_NODE	23:3	23:3	4	(
CONDITION	23:4	23:4	4	strcmp ( type , "set" )
EXPR	23:4	23:4	5	strcmp ( type , "set" )
FUNCTION_CALL	23:4	23:22	6	strcmp ( type , "set" )
CALLEE	23:4	23:4	7	strcmp
LEAF_NODE	23:4	23:4	8	strcmp
LEAF_NODE	23:10	23:10	7	(
ARGUMENT	23:11	23:11	7	type
FIELD	23:11	23:11	8	type
LEAF_NODE	23:11	23:11	9	type
LEAF_NODE	23:15	23:15	7	,
ARGUMENT	23:17	23:17	7	"set"
FIELD	23:17	23:17	8	"set"
LEAF_NODE	23:17	23:17	9	"set"
LEAF_NODE	23:22	23:22	7	)
LEAF_NODE	23:23	23:23	4	)
STATEMENTS	23:25	26:1	4	
LEAF_NODE	23:25	23:25	5	{
STATEMENTS	24:2	25:2	5	
EXPR_STATEMENT	24:2	24:85	6	purple_debug_info ( "bonjour" , "bytestream offer Message type - Unknown-%s.\n" , type ) ;
EXPR	24:2	24:2	7	purple_debug_info ( "bonjour" , "bytestream offer Message type - Unknown-%s.\n" , type )
FUNCTION_CALL	24:2	24:84	8	purple_debug_info ( "bonjour" , "bytestream offer Message type - Unknown-%s.\n" , type )
CALLEE	24:2	24:2	9	purple_debug_info
LEAF_NODE	24:2	24:2	10	purple_debug_info
LEAF_NODE	24:19	24:19	9	(
ARGUMENT	24:20	24:20	9	"bonjour"
FIELD	24:20	24:20	10	"bonjour"
LEAF_NODE	24:20	24:20	11	"bonjour"
LEAF_NODE	24:29	24:29	9	,
ARGUMENT	24:31	24:31	9	"bytestream offer Message type - Unknown-%s.\n"
FIELD	24:31	24:31	10	"bytestream offer Message type - Unknown-%s.\n"
LEAF_NODE	24:31	24:31	11	"bytestream offer Message type - Unknown-%s.\n"
LEAF_NODE	24:78	24:78	9	,
ARGUMENT	24:80	24:80	9	type
FIELD	24:80	24:80	10	type
LEAF_NODE	24:80	24:80	11	type
LEAF_NODE	24:84	24:84	9	)
LEAF_NODE	24:85	24:85	7	;
JUMP_STATEMENT	25:2	25:8	6	return DESTINATION ;
KEYWORD	25:2	25:2	7	return
LEAF_NODE	25:2	25:2	8	return
LEAF_NODE	0:0	0:0	7	DESTINATION
LEAF_NODE	25:8	25:8	7	;
LEAF_NODE	26:1	26:1	5	}
EXPR_STATEMENT	27:1	27:71	3	purple_debug_info ( "bonjour" , "bytestream offer Message type - SET.\n" ) ;
EXPR	27:1	27:1	4	purple_debug_info ( "bonjour" , "bytestream offer Message type - SET.\n" )
FUNCTION_CALL	27:1	27:70	5	purple_debug_info ( "bonjour" , "bytestream offer Message type - SET.\n" )
CALLEE	27:1	27:1	6	purple_debug_info
LEAF_NODE	27:1	27:1	7	purple_debug_info
LEAF_NODE	27:18	27:18	6	(
ARGUMENT	27:19	27:19	6	"bonjour"
FIELD	27:19	27:19	7	"bonjour"
LEAF_NODE	27:19	27:19	8	"bonjour"
LEAF_NODE	27:28	27:28	6	,
ARGUMENT	27:30	27:30	6	"bytestream offer Message type - SET.\n"
FIELD	27:30	27:30	7	"bytestream offer Message type - SET.\n"
LEAF_NODE	27:30	27:30	8	"bytestream offer Message type - SET.\n"
LEAF_NODE	27:70	27:70	6	)
LEAF_NODE	27:71	27:71	4	;
EXPR_STATEMENT	28:1	28:41	3	iq_id = xmlnode_get_attrib ( packet , "id" ) ;
EXPR	28:1	28:1	4	iq_id = xmlnode_get_attrib ( packet , "id" )
ASSIGN	28:1	28:9	5	iq_id = xmlnode_get_attrib ( packet , "id" )
LVAL	28:1	28:1	6	iq_id
FIELD	28:1	28:1	7	iq_id
LEAF_NODE	28:1	28:1	8	iq_id
ASSIGN_OP	28:7	28:7	6	=
LEAF_NODE	28:7	28:7	7	=
RVAL	28:9	28:9	6	xmlnode_get_attrib ( packet , "id" )
FUNCTION_CALL	28:9	28:40	7	xmlnode_get_attrib ( packet , "id" )
CALLEE	28:9	28:9	8	xmlnode_get_attrib
LEAF_NODE	28:9	28:9	9	xmlnode_get_attrib
LEAF_NODE	28:27	28:27	8	(
ARGUMENT	28:28	28:28	8	packet
FIELD	28:28	28:28	9	packet
LEAF_NODE	28:28	28:28	10	packet
LEAF_NODE	28:34	28:34	8	,
ARGUMENT	28:36	28:36	8	"id"
FIELD	28:36	28:36	9	"id"
LEAF_NODE	28:36	28:36	10	"id"
LEAF_NODE	28:40	28:40	8	)
LEAF_NODE	28:41	28:41	4	;
EXPR_STATEMENT	29:1	29:39	3	sid = xmlnode_get_attrib ( query , "sid" ) ;
EXPR	29:1	29:1	4	sid = xmlnode_get_attrib ( query , "sid" )
ASSIGN	29:1	29:7	5	sid = xmlnode_get_attrib ( query , "sid" )
LVAL	29:1	29:1	6	sid
FIELD	29:1	29:1	7	sid
LEAF_NODE	29:1	29:1	8	sid
ASSIGN_OP	29:5	29:5	6	=
LEAF_NODE	29:5	29:5	7	=
RVAL	29:7	29:7	6	xmlnode_get_attrib ( query , "sid" )
FUNCTION_CALL	29:7	29:38	7	xmlnode_get_attrib ( query , "sid" )
CALLEE	29:7	29:7	8	xmlnode_get_attrib
LEAF_NODE	29:7	29:7	9	xmlnode_get_attrib
LEAF_NODE	29:25	29:25	8	(
ARGUMENT	29:26	29:26	8	query
FIELD	29:26	29:26	9	query
LEAF_NODE	29:26	29:26	10	query
LEAF_NODE	29:31	29:31	8	,
ARGUMENT	29:33	29:33	8	"sid"
FIELD	29:33	29:33	9	"sid"
LEAF_NODE	29:33	29:33	10	"sid"
LEAF_NODE	29:38	29:38	8	)
LEAF_NODE	29:39	29:39	4	;
EXPR_STATEMENT	30:1	30:43	3	xfer = bonjour_si_xfer_find ( bd , sid , from ) ;
EXPR	30:1	30:1	4	xfer = bonjour_si_xfer_find ( bd , sid , from )
ASSIGN	30:1	30:8	5	xfer = bonjour_si_xfer_find ( bd , sid , from )
LVAL	30:1	30:1	6	xfer
FIELD	30:1	30:1	7	xfer
LEAF_NODE	30:1	30:1	8	xfer
ASSIGN_OP	30:6	30:6	6	=
LEAF_NODE	30:6	30:6	7	=
RVAL	30:8	30:8	6	bonjour_si_xfer_find ( bd , sid , from )
FUNCTION_CALL	30:8	30:42	7	bonjour_si_xfer_find ( bd , sid , from )
CALLEE	30:8	30:8	8	bonjour_si_xfer_find
LEAF_NODE	30:8	30:8	9	bonjour_si_xfer_find
LEAF_NODE	30:28	30:28	8	(
ARGUMENT	30:29	30:29	8	bd
FIELD	30:29	30:29	9	bd
LEAF_NODE	30:29	30:29	10	bd
LEAF_NODE	30:31	30:31	8	,
ARGUMENT	30:33	30:33	8	sid
FIELD	30:33	30:33	9	sid
LEAF_NODE	30:33	30:33	10	sid
LEAF_NODE	30:36	30:36	8	,
ARGUMENT	30:38	30:38	8	from
FIELD	30:38	30:38	9	from
LEAF_NODE	30:38	30:38	10	from
LEAF_NODE	30:42	30:42	8	)
LEAF_NODE	30:43	30:43	4	;
EXPR_STATEMENT	31:1	31:52	3	streamhost = xmlnode_get_child ( query , "streamhost" ) ;
EXPR	31:1	31:1	4	streamhost = xmlnode_get_child ( query , "streamhost" )
ASSIGN	31:1	31:14	5	streamhost = xmlnode_get_child ( query , "streamhost" )
LVAL	31:1	31:1	6	streamhost
FIELD	31:1	31:1	7	streamhost
LEAF_NODE	31:1	31:1	8	streamhost
ASSIGN_OP	31:12	31:12	6	=
LEAF_NODE	31:12	31:12	7	=
RVAL	31:14	31:14	6	xmlnode_get_child ( query , "streamhost" )
FUNCTION_CALL	31:14	31:51	7	xmlnode_get_child ( query , "streamhost" )
CALLEE	31:14	31:14	8	xmlnode_get_child
LEAF_NODE	31:14	31:14	9	xmlnode_get_child
LEAF_NODE	31:31	31:31	8	(
ARGUMENT	31:32	31:32	8	query
FIELD	31:32	31:32	9	query
LEAF_NODE	31:32	31:32	10	query
LEAF_NODE	31:37	31:37	8	,
ARGUMENT	31:39	31:39	8	"streamhost"
FIELD	31:39	31:39	9	"streamhost"
LEAF_NODE	31:39	31:39	10	"streamhost"
LEAF_NODE	31:51	31:51	8	)
LEAF_NODE	31:52	31:52	4	;
SELECTION	32:1	33:2	3	
KEYWORD	32:1	32:1	4	if
LEAF_NODE	32:1	32:1	5	if
LEAF_NODE	32:3	32:3	4	(
CONDITION	32:4	32:4	4	xfer && streamhost && __xep_bytestreams_parse ( pb , xfer , streamhost , iq_id )
EXPR	32:4	32:4	5	xfer && streamhost && __xep_bytestreams_parse ( pb , xfer , streamhost , iq_id )
AND	32:4	32:12	6	xfer && streamhost && __xep_bytestreams_parse ( pb , xfer , streamhost , iq_id )
EXPR	32:4	32:4	7	xfer
FIELD	32:4	32:4	8	xfer
LEAF_NODE	32:4	32:4	9	xfer
LEAF_NODE	32:9	32:9	7	&&
EXPR	32:12	32:12	7	streamhost && __xep_bytestreams_parse ( pb , xfer , streamhost , iq_id )
AND	32:12	32:26	8	streamhost && __xep_bytestreams_parse ( pb , xfer , streamhost , iq_id )
EXPR	32:12	32:12	9	streamhost
FIELD	32:12	32:12	10	streamhost
LEAF_NODE	32:12	32:12	11	streamhost
LEAF_NODE	32:23	32:23	9	&&
EXPR	32:26	32:26	9	__xep_bytestreams_parse ( pb , xfer , streamhost , iq_id )
FUNCTION_CALL	32:26	32:77	10	__xep_bytestreams_parse ( pb , xfer , streamhost , iq_id )
CALLEE	32:26	32:26	11	__xep_bytestreams_parse
LEAF_NODE	32:26	32:26	12	__xep_bytestreams_parse
LEAF_NODE	32:49	32:49	11	(
ARGUMENT	32:50	32:50	11	pb
FIELD	32:50	32:50	12	pb
LEAF_NODE	32:50	32:50	13	pb
LEAF_NODE	32:52	32:52	11	,
ARGUMENT	32:54	32:54	11	xfer
FIELD	32:54	32:54	12	xfer
LEAF_NODE	32:54	32:54	13	xfer
LEAF_NODE	32:58	32:58	11	,
ARGUMENT	32:60	32:60	11	streamhost
FIELD	32:60	32:60	12	streamhost
LEAF_NODE	32:60	32:60	13	streamhost
LEAF_NODE	32:70	32:70	11	,
ARGUMENT	32:72	32:72	11	iq_id
FIELD	32:72	32:72	12	iq_id
LEAF_NODE	32:72	32:72	13	iq_id
LEAF_NODE	32:77	32:77	11	)
LEAF_NODE	32:78	32:78	4	)
STATEMENTS	33:2	33:2	4	
JUMP_STATEMENT	33:2	33:8	5	return DESTINATION ;
KEYWORD	33:2	33:2	6	return
LEAF_NODE	33:2	33:2	7	return
LEAF_NODE	0:0	0:0	6	DESTINATION
LEAF_NODE	33:8	33:8	6	;
EXPR_STATEMENT	34:1	34:73	3	purple_debug_error ( "bonjour" , "Didn't find an acceptable streamhost.\n" ) ;
EXPR	34:1	34:1	4	purple_debug_error ( "bonjour" , "Didn't find an acceptable streamhost.\n" )
FUNCTION_CALL	34:1	34:72	5	purple_debug_error ( "bonjour" , "Didn't find an acceptable streamhost.\n" )
CALLEE	34:1	34:1	6	purple_debug_error
LEAF_NODE	34:1	34:1	7	purple_debug_error
LEAF_NODE	34:19	34:19	6	(
ARGUMENT	34:20	34:20	6	"bonjour"
FIELD	34:20	34:20	7	"bonjour"
LEAF_NODE	34:20	34:20	8	"bonjour"
LEAF_NODE	34:29	34:29	6	,
ARGUMENT	34:31	34:31	6	"Didn't find an acceptable streamhost.\n"
FIELD	34:31	34:31	7	"Didn't find an acceptable streamhost.\n"
LEAF_NODE	34:31	34:31	8	"Didn't find an acceptable streamhost.\n"
LEAF_NODE	34:72	34:72	6	)
LEAF_NODE	34:73	34:73	4	;
SELECTION	35:1	36:2	3	
KEYWORD	35:1	35:1	4	if
LEAF_NODE	35:1	35:1	5	if
LEAF_NODE	35:4	35:4	4	(
CONDITION	35:5	35:5	4	iq_id && xfer != NULL
EXPR	35:5	35:5	5	iq_id && xfer != NULL
AND	35:5	35:14	6	iq_id && xfer != NULL
EXPR	35:5	35:5	7	iq_id
FIELD	35:5	35:5	8	iq_id
LEAF_NODE	35:5	35:5	9	iq_id
LEAF_NODE	35:11	35:11	7	&&
EXPR	35:14	35:22	7	xfer != NULL
FIELD	35:14	35:14	8	xfer
LEAF_NODE	35:14	35:14	9	xfer
EQ_OPERATOR	35:19	35:19	8	!=
LEAF_NODE	35:19	35:19	9	!=
FIELD	35:22	35:22	8	NULL
LEAF_NODE	35:22	35:22	9	NULL
LEAF_NODE	35:26	35:26	4	)
STATEMENTS	36:2	36:2	4	
EXPR_STATEMENT	36:2	36:57	5	xep_ft_si_reject ( bd , iq_id , xfer -> who , "404" , "cancel" ) ;
EXPR	36:2	36:2	6	xep_ft_si_reject ( bd , iq_id , xfer -> who , "404" , "cancel" )
FUNCTION_CALL	36:2	36:56	7	xep_ft_si_reject ( bd , iq_id , xfer -> who , "404" , "cancel" )
CALLEE	36:2	36:2	8	xep_ft_si_reject
LEAF_NODE	36:2	36:2	9	xep_ft_si_reject
LEAF_NODE	36:18	36:18	8	(
ARGUMENT	36:19	36:19	8	bd
FIELD	36:19	36:19	9	bd
LEAF_NODE	36:19	36:19	10	bd
LEAF_NODE	36:21	36:21	8	,
ARGUMENT	36:23	36:23	8	iq_id
FIELD	36:23	36:23	9	iq_id
LEAF_NODE	36:23	36:23	10	iq_id
LEAF_NODE	36:28	36:28	8	,
ARGUMENT	36:30	36:30	8	xfer -> who
FIELD	36:30	36:36	9	xfer -> who
LEAF_NODE	36:30	36:30	10	xfer
LEAF_NODE	36:34	36:34	10	->
LEAF_NODE	36:36	36:36	10	who
LEAF_NODE	36:39	36:39	8	,
ARGUMENT	36:41	36:41	8	"404"
FIELD	36:41	36:41	9	"404"
LEAF_NODE	36:41	36:41	10	"404"
LEAF_NODE	36:46	36:46	8	,
ARGUMENT	36:48	36:48	8	"cancel"
FIELD	36:48	36:48	9	"cancel"
LEAF_NODE	36:48	36:48	10	"cancel"
LEAF_NODE	36:56	36:56	8	)
LEAF_NODE	36:57	36:57	6	;
LEAF_NODE	37:0	37:0	2	}

SOURCE_FILE	2:0	2:0	0	
FUNCTION_DEF	2:0	13:0	1	
RETURN_TYPE	2:0	2:7	2	static void
LEAF_NODE	2:0	2:0	3	static
TYPE_NAME	2:7	2:7	3	void
LEAF_NODE	2:7	2:7	4	void
FUNCTION_NAME	2:12	2:12	2	oscar_show_email
LEAF_NODE	2:12	2:12	3	oscar_show_email
PARAMETER_LIST	2:28	2:55	2	( PurplePluginAction * action )
LEAF_NODE	2:28	2:28	3	(
PARAMETER_DECL	2:29	2:49	3	PurplePluginAction * action
TYPE	2:29	2:48	4	PurplePluginAction *
TYPE_NAME	2:29	2:29	5	PurplePluginAction
LEAF_NODE	2:29	2:29	6	PurplePluginAction
POINTER	2:48	2:48	5	*
LEAF_NODE	2:48	2:48	6	*
NAME	2:49	2:49	4	action
LEAF_NODE	2:49	2:49	5	action
LEAF_NODE	2:55	2:55	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	9:3	2	
SIMPLE_DECL	4:1	4:60	3	PurpleConnection * gc ; gc = ( PurpleConnection * ) action -> context ;
VAR_DECL	4:1	4:19	4	PurpleConnection * gc ; gc = ( PurpleConnection * ) action -> context
TYPE	4:1	4:18	5	PurpleConnection *
TYPE_NAME	4:1	4:1	6	PurpleConnection
LEAF_NODE	4:1	4:1	7	PurpleConnection
POINTER	4:18	4:18	6	*
LEAF_NODE	4:18	4:18	7	*
NAME	4:19	4:19	5	gc
LEAF_NODE	4:19	4:19	6	gc
LEAF_NODE	0:0	0:0	5	;
INIT	4:19	4:19	5	gc = ( PurpleConnection * ) action -> context
ASSIGN	4:19	4:24	6	gc = ( PurpleConnection * ) action -> context
LVAL	4:19	4:19	7	gc
NAME	4:19	4:19	8	gc
LEAF_NODE	4:19	4:19	9	gc
ASSIGN_OP	4:22	4:22	7	=
LEAF_NODE	4:22	4:22	8	=
RVAL	4:24	4:45	7	( PurpleConnection * ) action -> context
LEAF_NODE	4:24	4:24	8	(
TYPE_NAME	4:25	4:25	8	PurpleConnection
LEAF_NODE	4:25	4:25	9	PurpleConnection
LEAF_NODE	4:42	4:42	8	*
LEAF_NODE	4:43	4:43	8	)
FIELD	4:45	4:53	8	action -> context
LEAF_NODE	4:45	4:45	9	action
LEAF_NODE	4:51	4:51	9	->
LEAF_NODE	4:53	4:53	9	context
LEAF_NODE	4:60	4:60	4	;
SIMPLE_DECL	5:1	5:56	3	OscarData * od ; od = purple_connection_get_protocol_data ( gc ) ;
VAR_DECL	5:1	5:12	4	OscarData * od ; od = purple_connection_get_protocol_data ( gc )
TYPE	5:1	5:11	5	OscarData *
TYPE_NAME	5:1	5:1	6	OscarData
LEAF_NODE	5:1	5:1	7	OscarData
POINTER	5:11	5:11	6	*
LEAF_NODE	5:11	5:11	7	*
NAME	5:12	5:12	5	od
LEAF_NODE	5:12	5:12	6	od
LEAF_NODE	0:0	0:0	5	;
INIT	5:12	5:12	5	od = purple_connection_get_protocol_data ( gc )
ASSIGN	5:12	5:17	6	od = purple_connection_get_protocol_data ( gc )
LVAL	5:12	5:12	7	od
NAME	5:12	5:12	8	od
LEAF_NODE	5:12	5:12	9	od
ASSIGN_OP	5:15	5:15	7	=
LEAF_NODE	5:15	5:15	8	=
RVAL	5:17	5:17	7	purple_connection_get_protocol_data ( gc )
FUNCTION_CALL	5:17	5:55	8	purple_connection_get_protocol_data ( gc )
CALLEE	5:17	5:17	9	purple_connection_get_protocol_data
LEAF_NODE	5:17	5:17	10	purple_connection_get_protocol_data
LEAF_NODE	5:52	5:52	9	(
ARGUMENT	5:53	5:53	9	gc
FIELD	5:53	5:53	10	gc
LEAF_NODE	5:53	5:53	11	gc
LEAF_NODE	5:55	5:55	9	)
LEAF_NODE	5:56	5:56	4	;
SIMPLE_DECL	6:1	6:72	3	FlapConnection * conn ; conn = flap_connection_getbytype ( od , SNAC_FAMILY_ADMIN ) ;
VAR_DECL	6:1	6:17	4	FlapConnection * conn ; conn = flap_connection_getbytype ( od , SNAC_FAMILY_ADMIN )
TYPE	6:1	6:16	5	FlapConnection *
TYPE_NAME	6:1	6:1	6	FlapConnection
LEAF_NODE	6:1	6:1	7	FlapConnection
POINTER	6:16	6:16	6	*
LEAF_NODE	6:16	6:16	7	*
NAME	6:17	6:17	5	conn
LEAF_NODE	6:17	6:17	6	conn
LEAF_NODE	0:0	0:0	5	;
INIT	6:17	6:17	5	conn = flap_connection_getbytype ( od , SNAC_FAMILY_ADMIN )
ASSIGN	6:17	6:24	6	conn = flap_connection_getbytype ( od , SNAC_FAMILY_ADMIN )
LVAL	6:17	6:17	7	conn
NAME	6:17	6:17	8	conn
LEAF_NODE	6:17	6:17	9	conn
ASSIGN_OP	6:22	6:22	7	=
LEAF_NODE	6:22	6:22	8	=
RVAL	6:24	6:24	7	flap_connection_getbytype ( od , SNAC_FAMILY_ADMIN )
FUNCTION_CALL	6:24	6:71	8	flap_connection_getbytype ( od , SNAC_FAMILY_ADMIN )
CALLEE	6:24	6:24	9	flap_connection_getbytype
LEAF_NODE	6:24	6:24	10	flap_connection_getbytype
LEAF_NODE	6:49	6:49	9	(
ARGUMENT	6:50	6:50	9	od
FIELD	6:50	6:50	10	od
LEAF_NODE	6:50	6:50	11	od
LEAF_NODE	6:52	6:52	9	,
ARGUMENT	6:54	6:54	9	SNAC_FAMILY_ADMIN
FIELD	6:54	6:54	10	SNAC_FAMILY_ADMIN
LEAF_NODE	6:54	6:54	11	SNAC_FAMILY_ADMIN
LEAF_NODE	6:71	6:71	9	)
LEAF_NODE	6:72	6:72	4	;
SELECTION	7:1	7:11	3	
KEYWORD	7:1	7:1	4	if
LEAF_NODE	7:1	7:1	5	if
LEAF_NODE	7:4	7:4	4	(
CONDITION	7:5	7:5	4	conn
EXPR	7:5	7:5	5	conn
FIELD	7:5	7:5	6	conn
LEAF_NODE	7:5	7:5	7	conn
LEAF_NODE	7:9	7:9	4	)
STATEMENTS	7:11	9:1	4	
LEAF_NODE	7:11	7:11	5	{
STATEMENTS	8:2	8:2	5	
EXPR_STATEMENT	8:2	8:35	6	aim_admin_getinfo ( od , conn , 0x11 ) ;
EXPR	8:2	8:2	7	aim_admin_getinfo ( od , conn , 0x11 )
FUNCTION_CALL	8:2	8:34	8	aim_admin_getinfo ( od , conn , 0x11 )
CALLEE	8:2	8:2	9	aim_admin_getinfo
LEAF_NODE	8:2	8:2	10	aim_admin_getinfo
LEAF_NODE	8:19	8:19	9	(
ARGUMENT	8:20	8:20	9	od
FIELD	8:20	8:20	10	od
LEAF_NODE	8:20	8:20	11	od
LEAF_NODE	8:22	8:22	9	,
ARGUMENT	8:24	8:24	9	conn
FIELD	8:24	8:24	10	conn
LEAF_NODE	8:24	8:24	11	conn
LEAF_NODE	8:28	8:28	9	,
ARGUMENT	8:30	8:30	9	0x11
FIELD	8:30	8:30	10	0x11
LEAF_NODE	8:30	8:30	11	0x11
LEAF_NODE	8:34	8:34	9	)
LEAF_NODE	8:35	8:35	7	;
LEAF_NODE	9:1	9:1	5	}
SELECTION	9:3	9:8	3	
KEYWORD	9:3	9:3	4	else
LEAF_NODE	9:3	9:3	5	else
STATEMENTS	9:8	12:1	4	
LEAF_NODE	9:8	9:8	5	{
STATEMENTS	10:2	11:2	5	
EXPR_STATEMENT	10:2	10:21	6	od -> reqemail = TRUE ;
EXPR	10:2	10:2	7	od -> reqemail = TRUE
ASSIGN	10:2	10:17	8	od -> reqemail = TRUE
LVAL	10:2	10:2	9	od -> reqemail
FIELD	10:2	10:6	10	od -> reqemail
LEAF_NODE	10:2	10:2	11	od
LEAF_NODE	10:4	10:4	11	->
LEAF_NODE	10:6	10:6	11	reqemail
ASSIGN_OP	10:15	10:15	9	=
LEAF_NODE	10:15	10:15	10	=
RVAL	10:17	10:17	9	TRUE
FIELD	10:17	10:17	10	TRUE
LEAF_NODE	10:17	10:17	11	TRUE
LEAF_NODE	10:21	10:21	7	;
EXPR_STATEMENT	11:2	11:43	6	aim_srv_requestnew ( od , SNAC_FAMILY_ADMIN ) ;
EXPR	11:2	11:2	7	aim_srv_requestnew ( od , SNAC_FAMILY_ADMIN )
FUNCTION_CALL	11:2	11:42	8	aim_srv_requestnew ( od , SNAC_FAMILY_ADMIN )
CALLEE	11:2	11:2	9	aim_srv_requestnew
LEAF_NODE	11:2	11:2	10	aim_srv_requestnew
LEAF_NODE	11:20	11:20	9	(
ARGUMENT	11:21	11:21	9	od
FIELD	11:21	11:21	10	od
LEAF_NODE	11:21	11:21	11	od
LEAF_NODE	11:23	11:23	9	,
ARGUMENT	11:25	11:25	9	SNAC_FAMILY_ADMIN
FIELD	11:25	11:25	10	SNAC_FAMILY_ADMIN
LEAF_NODE	11:25	11:25	11	SNAC_FAMILY_ADMIN
LEAF_NODE	11:42	11:42	9	)
LEAF_NODE	11:43	11:43	7	;
LEAF_NODE	12:1	12:1	5	}
LEAF_NODE	13:0	13:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	13:0	1	
RETURN_TYPE	1:0	1:25	2	static PurpleCertificate *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	PurpleCertificate
LEAF_NODE	1:7	1:7	4	PurpleCertificate
LEAF_NODE	1:25	1:25	3	*
FUNCTION_NAME	2:0	2:0	2	x509_copy_certificate
LEAF_NODE	2:0	2:0	3	x509_copy_certificate
PARAMETER_LIST	2:21	2:44	2	( PurpleCertificate * crt )
LEAF_NODE	2:21	2:21	3	(
PARAMETER_DECL	2:22	2:41	3	PurpleCertificate * crt
TYPE	2:22	2:40	4	PurpleCertificate *
TYPE_NAME	2:22	2:22	5	PurpleCertificate
LEAF_NODE	2:22	2:22	6	PurpleCertificate
POINTER	2:40	2:40	5	*
LEAF_NODE	2:40	2:40	6	*
NAME	2:41	2:41	4	crt
LEAF_NODE	2:41	2:41	5	crt
LEAF_NODE	2:44	2:44	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	12:1	2	
SIMPLE_DECL	4:1	4:23	3	x509_crtdata_t * crtdat ;
VAR_DECL	4:1	4:17	4	x509_crtdata_t * crtdat
TYPE	4:1	4:16	5	x509_crtdata_t *
TYPE_NAME	4:1	4:1	6	x509_crtdata_t
LEAF_NODE	4:1	4:1	7	x509_crtdata_t
POINTER	4:16	4:16	6	*
LEAF_NODE	4:16	4:16	7	*
NAME	4:17	4:17	5	crtdat
LEAF_NODE	4:17	4:17	6	crtdat
LEAF_NODE	4:23	4:23	4	;
SIMPLE_DECL	5:1	5:26	3	PurpleCertificate * newcrt ;
VAR_DECL	5:1	5:20	4	PurpleCertificate * newcrt
TYPE	5:1	5:19	5	PurpleCertificate *
TYPE_NAME	5:1	5:1	6	PurpleCertificate
LEAF_NODE	5:1	5:1	7	PurpleCertificate
POINTER	5:19	5:19	6	*
LEAF_NODE	5:19	5:19	7	*
NAME	5:20	5:20	5	newcrt
LEAF_NODE	5:20	5:20	6	newcrt
LEAF_NODE	5:26	5:26	4	;
EXPR_STATEMENT	6:1	6:32	3	g_return_val_if_fail ( crt , NULL ) ;
EXPR	6:1	6:1	4	g_return_val_if_fail ( crt , NULL )
FUNCTION_CALL	6:1	6:31	5	g_return_val_if_fail ( crt , NULL )
CALLEE	6:1	6:1	6	g_return_val_if_fail
LEAF_NODE	6:1	6:1	7	g_return_val_if_fail
LEAF_NODE	6:21	6:21	6	(
ARGUMENT	6:22	6:22	6	crt
FIELD	6:22	6:22	7	crt
LEAF_NODE	6:22	6:22	8	crt
LEAF_NODE	6:25	6:25	6	,
ARGUMENT	6:27	6:27	6	NULL
FIELD	6:27	6:27	7	NULL
LEAF_NODE	6:27	6:27	8	NULL
LEAF_NODE	6:31	6:31	6	)
LEAF_NODE	6:32	6:32	4	;
EXPR_STATEMENT	7:1	7:56	3	g_return_val_if_fail ( crt -> scheme == & x509_gnutls , NULL ) ;
EXPR	7:1	7:1	4	g_return_val_if_fail ( crt -> scheme == & x509_gnutls , NULL )
FUNCTION_CALL	7:1	7:55	5	g_return_val_if_fail ( crt -> scheme == & x509_gnutls , NULL )
CALLEE	7:1	7:1	6	g_return_val_if_fail
LEAF_NODE	7:1	7:1	7	g_return_val_if_fail
LEAF_NODE	7:21	7:21	6	(
ARGUMENT	7:22	7:37	6	crt -> scheme == & x509_gnutls
FIELD	7:22	7:27	7	crt -> scheme
LEAF_NODE	7:22	7:22	8	crt
LEAF_NODE	7:25	7:25	8	->
LEAF_NODE	7:27	7:27	8	scheme
EQ_OPERATOR	7:34	7:34	7	==
LEAF_NODE	7:34	7:34	8	==
UNARY_EXPR	7:37	7:38	7	& x509_gnutls
UNARY_OPERATOR	7:37	7:37	8	&
LEAF_NODE	7:37	7:37	9	&
FIELD	7:38	7:38	8	x509_gnutls
LEAF_NODE	7:38	7:38	9	x509_gnutls
LEAF_NODE	7:49	7:49	6	,
ARGUMENT	7:51	7:51	6	NULL
FIELD	7:51	7:51	7	NULL
LEAF_NODE	7:51	7:51	8	NULL
LEAF_NODE	7:55	7:55	6	)
LEAF_NODE	7:56	7:56	4	;
EXPR_STATEMENT	8:1	8:38	3	crtdat = ( x509_crtdata_t * ) crt -> data ;
EXPR	8:1	8:1	4	crtdat = ( x509_crtdata_t * ) crt -> data
ASSIGN	8:1	8:10	5	crtdat = ( x509_crtdata_t * ) crt -> data
LVAL	8:1	8:1	6	crtdat
FIELD	8:1	8:1	7	crtdat
LEAF_NODE	8:1	8:1	8	crtdat
ASSIGN_OP	8:8	8:8	6	=
LEAF_NODE	8:8	8:8	7	=
RVAL	8:10	8:29	6	( x509_crtdata_t * ) crt -> data
LEAF_NODE	8:10	8:10	7	(
TYPE_NAME	8:11	8:11	7	x509_crtdata_t
LEAF_NODE	8:11	8:11	8	x509_crtdata_t
LEAF_NODE	8:26	8:26	7	*
LEAF_NODE	8:27	8:27	7	)
FIELD	8:29	8:34	7	crt -> data
LEAF_NODE	8:29	8:29	8	crt
LEAF_NODE	8:32	8:32	8	->
LEAF_NODE	8:34	8:34	8	data
LEAF_NODE	8:38	8:38	4	;
EXPR_STATEMENT	9:1	9:38	3	newcrt = g_new0 ( PurpleCertificate , 1 ) ;
EXPR	9:1	9:1	4	newcrt = g_new0 ( PurpleCertificate , 1 )
ASSIGN	9:1	9:10	5	newcrt = g_new0 ( PurpleCertificate , 1 )
LVAL	9:1	9:1	6	newcrt
FIELD	9:1	9:1	7	newcrt
LEAF_NODE	9:1	9:1	8	newcrt
ASSIGN_OP	9:8	9:8	6	=
LEAF_NODE	9:8	9:8	7	=
RVAL	9:10	9:10	6	g_new0 ( PurpleCertificate , 1 )
FUNCTION_CALL	9:10	9:37	7	g_new0 ( PurpleCertificate , 1 )
CALLEE	9:10	9:10	8	g_new0
LEAF_NODE	9:10	9:10	9	g_new0
LEAF_NODE	9:16	9:16	8	(
ARGUMENT	9:17	9:17	8	PurpleCertificate
FIELD	9:17	9:17	9	PurpleCertificate
LEAF_NODE	9:17	9:17	10	PurpleCertificate
LEAF_NODE	9:34	9:34	8	,
ARGUMENT	9:36	9:36	8	1
FIELD	9:36	9:36	9	1
LEAF_NODE	9:36	9:36	10	1
LEAF_NODE	9:37	9:37	8	)
LEAF_NODE	9:38	9:38	4	;
EXPR_STATEMENT	10:1	10:30	3	newcrt -> scheme = & x509_gnutls ;
EXPR	10:1	10:1	4	newcrt -> scheme = & x509_gnutls
ASSIGN	10:1	10:18	5	newcrt -> scheme = & x509_gnutls
LVAL	10:1	10:1	6	newcrt -> scheme
FIELD	10:1	10:9	7	newcrt -> scheme
LEAF_NODE	10:1	10:1	8	newcrt
LEAF_NODE	10:7	10:7	8	->
LEAF_NODE	10:9	10:9	8	scheme
ASSIGN_OP	10:16	10:16	6	=
LEAF_NODE	10:16	10:16	7	=
RVAL	10:18	10:18	6	& x509_gnutls
UNARY_EXPR	10:18	10:19	7	& x509_gnutls
UNARY_OPERATOR	10:18	10:18	8	&
LEAF_NODE	10:18	10:18	9	&
FIELD	10:19	10:19	8	x509_gnutls
LEAF_NODE	10:19	10:19	9	x509_gnutls
LEAF_NODE	10:30	10:30	4	;
EXPR_STATEMENT	11:1	11:43	3	newcrt -> data = x509_crtdata_addref ( crtdat ) ;
EXPR	11:1	11:1	4	newcrt -> data = x509_crtdata_addref ( crtdat )
ASSIGN	11:1	11:16	5	newcrt -> data = x509_crtdata_addref ( crtdat )
LVAL	11:1	11:1	6	newcrt -> data
FIELD	11:1	11:9	7	newcrt -> data
LEAF_NODE	11:1	11:1	8	newcrt
LEAF_NODE	11:7	11:7	8	->
LEAF_NODE	11:9	11:9	8	data
ASSIGN_OP	11:14	11:14	6	=
LEAF_NODE	11:14	11:14	7	=
RVAL	11:16	11:16	6	x509_crtdata_addref ( crtdat )
FUNCTION_CALL	11:16	11:42	7	x509_crtdata_addref ( crtdat )
CALLEE	11:16	11:16	8	x509_crtdata_addref
LEAF_NODE	11:16	11:16	9	x509_crtdata_addref
LEAF_NODE	11:35	11:35	8	(
ARGUMENT	11:36	11:36	8	crtdat
FIELD	11:36	11:36	9	crtdat
LEAF_NODE	11:36	11:36	10	crtdat
LEAF_NODE	11:42	11:42	8	)
LEAF_NODE	11:43	11:43	4	;
JUMP_STATEMENT	12:1	12:14	3	return newcrt ;
KEYWORD	12:1	12:1	4	return
LEAF_NODE	12:1	12:1	5	return
DESTINATION	12:8	12:8	4	newcrt
EXPR	12:8	12:8	5	newcrt
FIELD	12:8	12:8	6	newcrt
LEAF_NODE	12:8	12:8	7	newcrt
LEAF_NODE	12:14	12:14	4	;
LEAF_NODE	13:0	13:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:18	2	static const char *
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:13	3	const char
LEAF_NODE	1:7	1:7	4	const
LEAF_NODE	1:13	1:13	4	char
LEAF_NODE	1:18	1:18	3	*
FUNCTION_NAME	2:0	2:0	2	silcpurple_list_icon
LEAF_NODE	2:0	2:0	3	silcpurple_list_icon
PARAMETER_LIST	2:20	2:53	2	( PurpleAccount * a , PurpleBuddy * b )
LEAF_NODE	2:20	2:20	3	(
PARAMETER_DECL	2:21	2:36	3	PurpleAccount * a
TYPE	2:21	2:35	4	PurpleAccount *
TYPE_NAME	2:21	2:21	5	PurpleAccount
LEAF_NODE	2:21	2:21	6	PurpleAccount
POINTER	2:35	2:35	5	*
LEAF_NODE	2:35	2:35	6	*
NAME	2:36	2:36	4	a
LEAF_NODE	2:36	2:36	5	a
LEAF_NODE	2:37	2:37	3	,
PARAMETER_DECL	2:39	2:52	3	PurpleBuddy * b
TYPE	2:39	2:51	4	PurpleBuddy *
TYPE_NAME	2:39	2:39	5	PurpleBuddy
LEAF_NODE	2:39	2:39	6	PurpleBuddy
POINTER	2:51	2:51	5	*
LEAF_NODE	2:51	2:51	6	*
NAME	2:52	2:52	4	b
LEAF_NODE	2:52	2:52	5	b
LEAF_NODE	2:53	2:53	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
JUMP_STATEMENT	4:1	4:28	3	return ( const char * ) "silc" ;
KEYWORD	4:1	4:1	4	return
LEAF_NODE	4:1	4:1	5	return
DESTINATION	4:8	4:8	4	( const char * ) "silc"
EXPR	4:8	4:22	5	( const char * ) "silc"
LEAF_NODE	4:8	4:8	6	(
TYPE_NAME	4:9	4:15	6	const char
LEAF_NODE	4:9	4:9	7	const
LEAF_NODE	4:15	4:15	7	char
LEAF_NODE	4:20	4:20	6	*
LEAF_NODE	4:21	4:21	6	)
FIELD	4:22	4:22	6	"silc"
LEAF_NODE	4:22	4:22	7	"silc"
LEAF_NODE	4:28	4:28	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	5:0	1	
RETURN_TYPE	1:0	1:0	2	void
TYPE_NAME	1:0	1:0	3	void
LEAF_NODE	1:0	1:0	4	void
FUNCTION_NAME	2:0	2:0	2	gstroke_set_draw_strokes
LEAF_NODE	2:0	2:0	3	gstroke_set_draw_strokes
PARAMETER_LIST	2:24	2:38	2	( gboolean draw )
LEAF_NODE	2:24	2:24	3	(
PARAMETER_DECL	2:25	2:34	3	gboolean draw
TYPE	2:25	2:25	4	gboolean
TYPE_NAME	2:25	2:25	5	gboolean
LEAF_NODE	2:25	2:25	6	gboolean
NAME	2:34	2:34	4	draw
LEAF_NODE	2:34	2:34	5	draw
LEAF_NODE	2:38	2:38	3	)
LEAF_NODE	3:0	3:0	2	{
STATEMENTS	4:1	4:1	2	
EXPR_STATEMENT	4:1	4:20	3	draw_strokes = draw ;
EXPR	4:1	4:1	4	draw_strokes = draw
ASSIGN	4:1	4:16	5	draw_strokes = draw
LVAL	4:1	4:1	6	draw_strokes
FIELD	4:1	4:1	7	draw_strokes
LEAF_NODE	4:1	4:1	8	draw_strokes
ASSIGN_OP	4:14	4:14	6	=
LEAF_NODE	4:14	4:14	7	=
RVAL	4:16	4:16	6	draw
FIELD	4:16	4:16	7	draw
LEAF_NODE	4:16	4:16	8	draw
LEAF_NODE	4:20	4:20	4	;
LEAF_NODE	5:0	5:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	16:0	1	
RETURN_TYPE	1:0	1:7	2	static gboolean
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	gboolean
LEAF_NODE	1:7	1:7	4	gboolean
FUNCTION_NAME	2:0	2:0	2	get_rect_of_window_multimonitor
LEAF_NODE	2:0	2:0	3	get_rect_of_window_multimonitor
PARAMETER_LIST	2:31	2:55	2	( HWND window , RECT * rect )
LEAF_NODE	2:31	2:31	3	(
PARAMETER_DECL	2:32	2:37	3	HWND window
TYPE	2:32	2:32	4	HWND
TYPE_NAME	2:32	2:32	5	HWND
LEAF_NODE	2:32	2:32	6	HWND
NAME	2:37	2:37	4	window
LEAF_NODE	2:37	2:37	5	window
LEAF_NODE	2:43	2:43	3	,
PARAMETER_DECL	2:45	2:51	3	RECT * rect
TYPE	2:45	2:50	4	RECT *
TYPE_NAME	2:45	2:45	5	RECT
LEAF_NODE	2:45	2:45	6	RECT
POINTER	2:50	2:50	5	*
LEAF_NODE	2:50	2:50	6	*
NAME	2:51	2:51	4	rect
LEAF_NODE	2:51	2:51	5	rect
LEAF_NODE	2:55	2:55	3	)
LEAF_NODE	2:57	2:57	2	{
STATEMENTS	3:1	15:1	2	
SIMPLE_DECL	3:1	3:13	3	HMODULE hmod ;
VAR_DECL	3:1	3:9	4	HMODULE hmod
TYPE	3:1	3:1	5	HMODULE
TYPE_NAME	3:1	3:1	6	HMODULE
LEAF_NODE	3:1	3:1	7	HMODULE
NAME	3:9	3:9	5	hmod
LEAF_NODE	3:9	3:9	6	hmod
LEAF_NODE	3:13	3:13	4	;
SIMPLE_DECL	4:1	4:48	3	purple_MonitorFromWindow * the_MonitorFromWindow ;
VAR_DECL	4:1	4:27	4	purple_MonitorFromWindow * the_MonitorFromWindow
TYPE	4:1	4:26	5	purple_MonitorFromWindow *
TYPE_NAME	4:1	4:1	6	purple_MonitorFromWindow
LEAF_NODE	4:1	4:1	7	purple_MonitorFromWindow
POINTER	4:26	4:26	6	*
LEAF_NODE	4:26	4:26	7	*
NAME	4:27	4:27	5	the_MonitorFromWindow
LEAF_NODE	4:27	4:27	6	the_MonitorFromWindow
LEAF_NODE	4:48	4:48	4	;
SIMPLE_DECL	5:1	5:17	3	HMONITOR monitor ;
VAR_DECL	5:1	5:10	4	HMONITOR monitor
TYPE	5:1	5:1	5	HMONITOR
TYPE_NAME	5:1	5:1	6	HMONITOR
LEAF_NODE	5:1	5:1	7	HMONITOR
NAME	5:10	5:10	5	monitor
LEAF_NODE	5:10	5:10	6	monitor
LEAF_NODE	5:17	5:17	4	;
SELECTION	6:1	6:42	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	! ( hmod = GetModuleHandle ( "user32" ) )
EXPR	6:5	6:5	5	! ( hmod = GetModuleHandle ( "user32" ) )
UNARY_EXPR	6:5	6:39	6	! ( hmod = GetModuleHandle ( "user32" ) )
UNARY_OPERATOR	6:5	6:5	7	!
LEAF_NODE	6:5	6:5	8	!
LEAF_NODE	6:6	6:6	7	(
ASSIGN	6:7	6:14	7	hmod = GetModuleHandle ( "user32" )
LVAL	6:7	6:7	8	hmod
FIELD	6:7	6:7	9	hmod
LEAF_NODE	6:7	6:7	10	hmod
ASSIGN_OP	6:12	6:12	8	=
LEAF_NODE	6:12	6:12	9	=
RVAL	6:14	6:14	8	GetModuleHandle ( "user32" )
FUNCTION_CALL	6:14	6:38	9	GetModuleHandle ( "user32" )
CALLEE	6:14	6:14	10	GetModuleHandle
LEAF_NODE	6:14	6:14	11	GetModuleHandle
LEAF_NODE	6:29	6:29	10	(
ARGUMENT	6:30	6:30	10	"user32"
FIELD	6:30	6:30	11	"user32"
LEAF_NODE	6:30	6:30	12	"user32"
LEAF_NODE	6:38	6:38	10	)
LEAF_NODE	6:39	6:39	7	)
LEAF_NODE	6:40	6:40	4	)
STATEMENTS	6:42	8:1	4	
LEAF_NODE	6:42	6:42	5	{
STATEMENTS	7:2	7:2	5	
JUMP_STATEMENT	7:2	7:14	6	return FALSE ;
KEYWORD	7:2	7:2	7	return
LEAF_NODE	7:2	7:2	8	return
DESTINATION	7:9	7:9	7	FALSE
EXPR	7:9	7:9	8	FALSE
FIELD	7:9	7:9	9	FALSE
LEAF_NODE	7:9	7:9	10	FALSE
LEAF_NODE	7:14	7:14	7	;
LEAF_NODE	8:1	8:1	5	}
SELECTION	9:1	10:46	3	
KEYWORD	9:1	9:1	4	if
LEAF_NODE	9:1	9:1	5	if
LEAF_NODE	9:4	9:4	4	(
CONDITION	9:5	9:5	4	! ( the_MonitorFromWindow = ( purple_MonitorFromWindow * ) GetProcAddress ( hmod , "MonitorFromWindow" ) )
EXPR	9:5	9:5	5	! ( the_MonitorFromWindow = ( purple_MonitorFromWindow * ) GetProcAddress ( hmod , "MonitorFromWindow" ) )
UNARY_EXPR	9:5	10:43	6	! ( the_MonitorFromWindow = ( purple_MonitorFromWindow * ) GetProcAddress ( hmod , "MonitorFromWindow" ) )
UNARY_OPERATOR	9:5	9:5	7	!
LEAF_NODE	9:5	9:5	8	!
LEAF_NODE	9:6	9:6	7	(
ASSIGN	9:7	9:31	7	the_MonitorFromWindow = ( purple_MonitorFromWindow * ) GetProcAddress ( hmod , "MonitorFromWindow" )
LVAL	9:7	9:7	8	the_MonitorFromWindow
FIELD	9:7	9:7	9	the_MonitorFromWindow
LEAF_NODE	9:7	9:7	10	the_MonitorFromWindow
ASSIGN_OP	9:29	9:29	8	=
LEAF_NODE	9:29	9:29	9	=
RVAL	9:31	10:2	8	( purple_MonitorFromWindow * ) GetProcAddress ( hmod , "MonitorFromWindow" )
LEAF_NODE	9:31	9:31	9	(
TYPE_NAME	9:32	9:32	9	purple_MonitorFromWindow
LEAF_NODE	9:32	9:32	10	purple_MonitorFromWindow
LEAF_NODE	9:56	9:56	9	*
LEAF_NODE	9:57	9:57	9	)
FUNCTION_CALL	10:2	10:42	9	GetProcAddress ( hmod , "MonitorFromWindow" )
CALLEE	10:2	10:2	10	GetProcAddress
LEAF_NODE	10:2	10:2	11	GetProcAddress
LEAF_NODE	10:16	10:16	10	(
ARGUMENT	10:17	10:17	10	hmod
FIELD	10:17	10:17	11	hmod
LEAF_NODE	10:17	10:17	12	hmod
LEAF_NODE	10:21	10:21	10	,
ARGUMENT	10:23	10:23	10	"MonitorFromWindow"
FIELD	10:23	10:23	11	"MonitorFromWindow"
LEAF_NODE	10:23	10:23	12	"MonitorFromWindow"
LEAF_NODE	10:42	10:42	10	)
LEAF_NODE	10:43	10:43	7	)
LEAF_NODE	10:44	10:44	4	)
STATEMENTS	10:46	12:1	4	
LEAF_NODE	10:46	10:46	5	{
STATEMENTS	11:2	11:2	5	
JUMP_STATEMENT	11:2	11:14	6	return FALSE ;
KEYWORD	11:2	11:2	7	return
LEAF_NODE	11:2	11:2	8	return
DESTINATION	11:9	11:9	7	FALSE
EXPR	11:9	11:9	8	FALSE
FIELD	11:9	11:9	9	FALSE
LEAF_NODE	11:9	11:9	10	FALSE
LEAF_NODE	11:14	11:14	7	;
LEAF_NODE	12:1	12:1	5	}
EXPR_STATEMENT	13:1	14:57	3	monitor = the_MonitorFromWindow ( window , MONITOR_DEFAULTTOPRIMARY ) ;
EXPR	13:1	13:1	4	monitor = the_MonitorFromWindow ( window , MONITOR_DEFAULTTOPRIMARY )
ASSIGN	13:1	14:2	5	monitor = the_MonitorFromWindow ( window , MONITOR_DEFAULTTOPRIMARY )
LVAL	13:1	13:1	6	monitor
FIELD	13:1	13:1	7	monitor
LEAF_NODE	13:1	13:1	8	monitor
ASSIGN_OP	13:9	13:9	6	=
LEAF_NODE	13:9	13:9	7	=
RVAL	14:2	14:2	6	the_MonitorFromWindow ( window , MONITOR_DEFAULTTOPRIMARY )
FUNCTION_CALL	14:2	14:56	7	the_MonitorFromWindow ( window , MONITOR_DEFAULTTOPRIMARY )
CALLEE	14:2	14:2	8	the_MonitorFromWindow
LEAF_NODE	14:2	14:2	9	the_MonitorFromWindow
LEAF_NODE	14:23	14:23	8	(
ARGUMENT	14:24	14:24	8	window
FIELD	14:24	14:24	9	window
LEAF_NODE	14:24	14:24	10	window
LEAF_NODE	14:30	14:30	8	,
ARGUMENT	14:32	14:32	8	MONITOR_DEFAULTTOPRIMARY
FIELD	14:32	14:32	9	MONITOR_DEFAULTTOPRIMARY
LEAF_NODE	14:32	14:32	10	MONITOR_DEFAULTTOPRIMARY
LEAF_NODE	14:56	14:56	8	)
LEAF_NODE	14:57	14:57	4	;
JUMP_STATEMENT	15:1	15:50	3	return get_rect_from_monitor ( hmod , monitor , rect ) ;
KEYWORD	15:1	15:1	4	return
LEAF_NODE	15:1	15:1	5	return
DESTINATION	15:8	15:8	4	get_rect_from_monitor ( hmod , monitor , rect )
EXPR	15:8	15:8	5	get_rect_from_monitor ( hmod , monitor , rect )
FUNCTION_CALL	15:8	15:49	6	get_rect_from_monitor ( hmod , monitor , rect )
CALLEE	15:8	15:8	7	get_rect_from_monitor
LEAF_NODE	15:8	15:8	8	get_rect_from_monitor
LEAF_NODE	15:29	15:29	7	(
ARGUMENT	15:30	15:30	7	hmod
FIELD	15:30	15:30	8	hmod
LEAF_NODE	15:30	15:30	9	hmod
LEAF_NODE	15:34	15:34	7	,
ARGUMENT	15:36	15:36	7	monitor
FIELD	15:36	15:36	8	monitor
LEAF_NODE	15:36	15:36	9	monitor
LEAF_NODE	15:43	15:43	7	,
ARGUMENT	15:45	15:45	7	rect
FIELD	15:45	15:45	8	rect
LEAF_NODE	15:45	15:45	9	rect
LEAF_NODE	15:49	15:49	7	)
LEAF_NODE	15:50	15:50	4	;
LEAF_NODE	16:0	16:0	2	}

SOURCE_FILE	1:0	1:0	0	
FUNCTION_DEF	1:0	90:0	1	
RETURN_TYPE	1:0	1:7	2	static void
LEAF_NODE	1:0	1:0	3	static
TYPE_NAME	1:7	1:7	3	void
LEAF_NODE	1:7	1:7	4	void
FUNCTION_NAME	2:0	2:0	2	stream_info_cb
LEAF_NODE	2:0	2:0	3	stream_info_cb
PARAMETER_LIST	2:14	4:29	2	( PurpleMedia * media , PurpleMediaInfoType type , gchar * sid , gchar * name , gboolean local , PurpleMediaBackendFs2 * self )
LEAF_NODE	2:14	2:14	3	(
PARAMETER_DECL	2:15	2:28	3	PurpleMedia * media
TYPE	2:15	2:27	4	PurpleMedia *
TYPE_NAME	2:15	2:15	5	PurpleMedia
LEAF_NODE	2:15	2:15	6	PurpleMedia
POINTER	2:27	2:27	5	*
LEAF_NODE	2:27	2:27	6	*
NAME	2:28	2:28	4	media
LEAF_NODE	2:28	2:28	5	media
LEAF_NODE	2:33	2:33	3	,
PARAMETER_DECL	2:35	2:55	3	PurpleMediaInfoType type
TYPE	2:35	2:35	4	PurpleMediaInfoType
TYPE_NAME	2:35	2:35	5	PurpleMediaInfoType
LEAF_NODE	2:35	2:35	6	PurpleMediaInfoType
NAME	2:55	2:55	4	type
LEAF_NODE	2:55	2:55	5	type
LEAF_NODE	2:59	2:59	3	,
PARAMETER_DECL	3:2	3:9	3	gchar * sid
TYPE	3:2	3:8	4	gchar *
TYPE_NAME	3:2	3:2	5	gchar
LEAF_NODE	3:2	3:2	6	gchar
POINTER	3:8	3:8	5	*
LEAF_NODE	3:8	3:8	6	*
NAME	3:9	3:9	4	sid
LEAF_NODE	3:9	3:9	5	sid
LEAF_NODE	3:12	3:12	3	,
PARAMETER_DECL	3:14	3:21	3	gchar * name
TYPE	3:14	3:20	4	gchar *
TYPE_NAME	3:14	3:14	5	gchar
LEAF_NODE	3:14	3:14	6	gchar
POINTER	3:20	3:20	5	*
LEAF_NODE	3:20	3:20	6	*
NAME	3:21	3:21	4	name
LEAF_NODE	3:21	3:21	5	name
LEAF_NODE	3:25	3:25	3	,
PARAMETER_DECL	3:27	3:36	3	gboolean local
TYPE	3:27	3:27	4	gboolean
TYPE_NAME	3:27	3:27	5	gboolean
LEAF_NODE	3:27	3:27	6	gboolean
NAME	3:36	3:36	4	local
LEAF_NODE	3:36	3:36	5	local
LEAF_NODE	3:41	3:41	3	,
PARAMETER_DECL	4:2	4:25	3	PurpleMediaBackendFs2 * self
TYPE	4:2	4:24	4	PurpleMediaBackendFs2 *
TYPE_NAME	4:2	4:2	5	PurpleMediaBackendFs2
LEAF_NODE	4:2	4:2	6	PurpleMediaBackendFs2
POINTER	4:24	4:24	5	*
LEAF_NODE	4:24	4:24	6	*
NAME	4:25	4:25	4	self
LEAF_NODE	4:25	4:25	5	self
LEAF_NODE	4:29	4:29	3	)
LEAF_NODE	5:0	5:0	2	{
STATEMENTS	6:1	74:3	2	
SELECTION	6:1	6:70	3	
KEYWORD	6:1	6:1	4	if
LEAF_NODE	6:1	6:1	5	if
LEAF_NODE	6:4	6:4	4	(
CONDITION	6:5	6:5	4	type == PURPLE_MEDIA_INFO_ACCEPT && sid != NULL && name != NULL
EXPR	6:5	6:5	5	type == PURPLE_MEDIA_INFO_ACCEPT && sid != NULL && name != NULL
AND	6:5	6:41	6	type == PURPLE_MEDIA_INFO_ACCEPT && sid != NULL && name != NULL
EXPR	6:5	6:13	7	type == PURPLE_MEDIA_INFO_ACCEPT
FIELD	6:5	6:5	8	type
LEAF_NODE	6:5	6:5	9	type
EQ_OPERATOR	6:10	6:10	8	==
LEAF_NODE	6:10	6:10	9	==
FIELD	6:13	6:13	8	PURPLE_MEDIA_INFO_ACCEPT
LEAF_NODE	6:13	6:13	9	PURPLE_MEDIA_INFO_ACCEPT
LEAF_NODE	6:38	6:38	7	&&
EXPR	6:41	6:41	7	sid != NULL && name != NULL
AND	6:41	6:56	8	sid != NULL && name != NULL
EXPR	6:41	6:48	9	sid != NULL
FIELD	6:41	6:41	10	sid
LEAF_NODE	6:41	6:41	11	sid
EQ_OPERATOR	6:45	6:45	10	!=
LEAF_NODE	6:45	6:45	11	!=
FIELD	6:48	6:48	10	NULL
LEAF_NODE	6:48	6:48	11	NULL
LEAF_NODE	6:53	6:53	9	&&
EXPR	6:56	6:64	9	name != NULL
FIELD	6:56	6:56	10	name
LEAF_NODE	6:56	6:56	11	name
EQ_OPERATOR	6:61	6:61	10	!=
LEAF_NODE	6:61	6:61	11	!=
FIELD	6:64	6:64	10	NULL
LEAF_NODE	6:64	6:64	11	NULL
LEAF_NODE	6:68	6:68	4	)
STATEMENTS	6:70	33:1	4	
LEAF_NODE	6:70	6:70	5	{
STATEMENTS	7:2	32:2	5	
SIMPLE_DECL	7:2	8:31	6	PurpleMediaBackendFs2Stream * stream ; stream = get_stream ( self , sid , name ) ;
VAR_DECL	7:2	7:31	7	PurpleMediaBackendFs2Stream * stream ; stream = get_stream ( self , sid , name )
TYPE	7:2	7:30	8	PurpleMediaBackendFs2Stream *
TYPE_NAME	7:2	7:2	9	PurpleMediaBackendFs2Stream
LEAF_NODE	7:2	7:2	10	PurpleMediaBackendFs2Stream
POINTER	7:30	7:30	9	*
LEAF_NODE	7:30	7:30	10	*
NAME	7:31	7:31	8	stream
LEAF_NODE	7:31	7:31	9	stream
LEAF_NODE	0:0	0:0	8	;
INIT	7:31	7:31	8	stream = get_stream ( self , sid , name )
ASSIGN	7:31	8:4	9	stream = get_stream ( self , sid , name )
LVAL	7:31	7:31	10	stream
NAME	7:31	7:31	11	stream
LEAF_NODE	7:31	7:31	12	stream
ASSIGN_OP	7:38	7:38	10	=
LEAF_NODE	7:38	7:38	11	=
RVAL	8:4	8:4	10	get_stream ( self , sid , name )
FUNCTION_CALL	8:4	8:30	11	get_stream ( self , sid , name )
CALLEE	8:4	8:4	12	get_stream
LEAF_NODE	8:4	8:4	13	get_stream
LEAF_NODE	8:14	8:14	12	(
ARGUMENT	8:15	8:15	12	self
FIELD	8:15	8:15	13	self
LEAF_NODE	8:15	8:15	14	self
LEAF_NODE	8:19	8:19	12	,
ARGUMENT	8:21	8:21	12	sid
FIELD	8:21	8:21	13	sid
LEAF_NODE	8:21	8:21	14	sid
LEAF_NODE	8:24	8:24	12	,
ARGUMENT	8:26	8:26	12	name
FIELD	8:26	8:26	13	name
LEAF_NODE	8:26	8:26	14	name
LEAF_NODE	8:30	8:30	12	)
LEAF_NODE	8:31	8:31	7	;
SIMPLE_DECL	9:2	9:20	6	GError * err ; err = NULL ;
VAR_DECL	9:2	9:10	7	GError * err ; err = NULL
TYPE	9:2	9:9	8	GError *
TYPE_NAME	9:2	9:2	9	GError
LEAF_NODE	9:2	9:2	10	GError
POINTER	9:9	9:9	9	*
LEAF_NODE	9:9	9:9	10	*
NAME	9:10	9:10	8	err
LEAF_NODE	9:10	9:10	9	err
LEAF_NODE	0:0	0:0	8	;
INIT	9:10	9:10	8	err = NULL
ASSIGN	9:10	9:16	9	err = NULL
LVAL	9:10	9:10	10	err
NAME	9:10	9:10	11	err
LEAF_NODE	9:10	9:10	12	err
ASSIGN_OP	9:14	9:14	10	=
LEAF_NODE	9:14	9:14	11	=
RVAL	9:16	9:16	10	NULL
FIELD	9:16	9:16	11	NULL
LEAF_NODE	9:16	9:16	12	NULL
LEAF_NODE	9:20	9:20	7	;
EXPR_STATEMENT	10:2	12:33	6	g_object_set ( G_OBJECT ( stream -> stream ) , "direction" , session_type_to_fs_stream_direction ( stream -> session -> type ) , NULL ) ;
EXPR	10:2	10:2	7	g_object_set ( G_OBJECT ( stream -> stream ) , "direction" , session_type_to_fs_stream_direction ( stream -> session -> type ) , NULL )
FUNCTION_CALL	10:2	12:32	8	g_object_set ( G_OBJECT ( stream -> stream ) , "direction" , session_type_to_fs_stream_direction ( stream -> session -> type ) , NULL )
CALLEE	10:2	10:2	9	g_object_set
LEAF_NODE	10:2	10:2	10	g_object_set
LEAF_NODE	10:14	10:14	9	(
ARGUMENT	10:15	10:15	9	G_OBJECT ( stream -> stream )
FUNCTION_CALL	10:15	10:38	10	G_OBJECT ( stream -> stream )
CALLEE	10:15	10:15	11	G_OBJECT
LEAF_NODE	10:15	10:15	12	G_OBJECT
LEAF_NODE	10:23	10:23	11	(
ARGUMENT	10:24	10:24	11	stream -> stream
FIELD	10:24	10:32	12	stream -> stream
LEAF_NODE	10:24	10:24	13	stream
LEAF_NODE	10:30	10:30	13	->
LEAF_NODE	10:32	10:32	13	stream
LEAF_NODE	10:38	10:38	11	)
LEAF_NODE	10:39	10:39	9	,
ARGUMENT	10:41	10:41	9	"direction"
FIELD	10:41	10:41	10	"direction"
LEAF_NODE	10:41	10:41	11	"direction"
LEAF_NODE	10:52	10:52	9	,
ARGUMENT	11:4	11:4	9	session_type_to_fs_stream_direction ( stream -> session -> type )
FUNCTION_CALL	11:4	12:25	10	session_type_to_fs_stream_direction ( stream -> session -> type )
CALLEE	11:4	11:4	11	session_type_to_fs_stream_direction
LEAF_NODE	11:4	11:4	12	session_type_to_fs_stream_direction
LEAF_NODE	11:39	11:39	11	(
ARGUMENT	12:4	12:4	11	stream -> session -> type
FIELD	12:4	12:21	12	stream -> session -> type
LEAF_NODE	12:4	12:4	13	stream
LEAF_NODE	12:10	12:10	13	->
LEAF_NODE	12:12	12:12	13	session
LEAF_NODE	12:19	12:19	13	->
LEAF_NODE	12:21	12:21	13	type
LEAF_NODE	12:25	12:25	11	)
LEAF_NODE	12:26	12:26	9	,
ARGUMENT	12:28	12:28	9	NULL
FIELD	12:28	12:28	10	NULL
LEAF_NODE	12:28	12:28	11	NULL
LEAF_NODE	12:32	12:32	9	)
LEAF_NODE	12:33	12:33	7	;
SELECTION	13:2	15:3	6	
KEYWORD	13:2	13:2	7	if
LEAF_NODE	13:2	13:2	8	if
LEAF_NODE	13:5	13:5	7	(
CONDITION	13:6	13:6	7	stream -> remote_candidates == NULL || purple_media_is_initiator ( media , sid , name )
EXPR	13:6	13:6	8	stream -> remote_candidates == NULL || purple_media_is_initiator ( media , sid , name )
OR	13:6	14:4	9	stream -> remote_candidates == NULL || purple_media_is_initiator ( media , sid , name )
EXPR	13:6	13:35	10	stream -> remote_candidates == NULL
FIELD	13:6	13:14	11	stream -> remote_candidates
LEAF_NODE	13:6	13:6	12	stream
LEAF_NODE	13:12	13:12	12	->
LEAF_NODE	13:14	13:14	12	remote_candidates
EQ_OPERATOR	13:32	13:32	11	==
LEAF_NODE	13:32	13:32	12	==
FIELD	13:35	13:35	11	NULL
LEAF_NODE	13:35	13:35	12	NULL
LEAF_NODE	13:40	13:40	10	||
EXPR	14:4	14:4	10	purple_media_is_initiator ( media , sid , name )
FUNCTION_CALL	14:4	14:46	11	purple_media_is_initiator ( media , sid , name )
CALLEE	14:4	14:4	12	purple_media_is_initiator
LEAF_NODE	14:4	14:4	13	purple_media_is_initiator
LEAF_NODE	14:29	14:29	12	(
ARGUMENT	14:30	14:30	12	media
FIELD	14:30	14:30	13	media
LEAF_NODE	14:30	14:30	14	media
LEAF_NODE	14:35	14:35	12	,
ARGUMENT	14:37	14:37	12	sid
FIELD	14:37	14:37	13	sid
LEAF_NODE	14:37	14:37	14	sid
LEAF_NODE	14:40	14:40	12	,
ARGUMENT	14:42	14:42	12	name
FIELD	14:42	14:42	13	name
LEAF_NODE	14:42	14:42	14	name
LEAF_NODE	14:46	14:46	12	)
LEAF_NODE	14:47	14:47	7	)
STATEMENTS	15:3	15:3	7	
JUMP_STATEMENT	15:3	15:9	8	return DESTINATION ;
KEYWORD	15:3	15:3	9	return
LEAF_NODE	15:3	15:3	10	return
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	15:9	15:9	9	;
EXPR_STATEMENT	17:2	18:36	6	fs_stream_set_remote_candidates ( stream -> stream , stream -> remote_candidates , & err ) ;
EXPR	17:2	17:2	7	fs_stream_set_remote_candidates ( stream -> stream , stream -> remote_candidates , & err )
FUNCTION_CALL	17:2	18:35	8	fs_stream_set_remote_candidates ( stream -> stream , stream -> remote_candidates , & err )
CALLEE	17:2	17:2	9	fs_stream_set_remote_candidates
LEAF_NODE	17:2	17:2	10	fs_stream_set_remote_candidates
LEAF_NODE	17:33	17:33	9	(
ARGUMENT	17:34	17:34	9	stream -> stream
FIELD	17:34	17:42	10	stream -> stream
LEAF_NODE	17:34	17:34	11	stream
LEAF_NODE	17:40	17:40	11	->
LEAF_NODE	17:42	17:42	11	stream
LEAF_NODE	17:48	17:48	9	,
ARGUMENT	18:4	18:4	9	stream -> remote_candidates
FIELD	18:4	18:12	10	stream -> remote_candidates
LEAF_NODE	18:4	18:4	11	stream
LEAF_NODE	18:10	18:10	11	->
LEAF_NODE	18:12	18:12	11	remote_candidates
LEAF_NODE	18:29	18:29	9	,
ARGUMENT	18:31	18:31	9	& err
UNARY_EXPR	18:31	18:32	10	& err
UNARY_OPERATOR	18:31	18:31	11	&
LEAF_NODE	18:31	18:31	12	&
FIELD	18:32	18:32	11	err
LEAF_NODE	18:32	18:32	12	err
LEAF_NODE	18:35	18:35	9	)
LEAF_NODE	18:36	18:36	7	;
SELECTION	20:2	21:3	6	
KEYWORD	20:2	20:2	7	if
LEAF_NODE	20:2	20:2	8	if
LEAF_NODE	20:5	20:5	7	(
CONDITION	20:6	20:6	7	stream -> supports_add
EXPR	20:6	20:6	8	stream -> supports_add
FIELD	20:6	20:14	9	stream -> supports_add
LEAF_NODE	20:6	20:6	10	stream
LEAF_NODE	20:12	20:12	10	->
LEAF_NODE	20:14	20:14	10	supports_add
LEAF_NODE	20:26	20:26	7	)
STATEMENTS	21:3	21:3	7	
EXPR_STATEMENT	21:3	22:37	8	fs_stream_add_remote_candidates ( stream -> stream , stream -> remote_candidates , & err ) ;
EXPR	21:3	21:3	9	fs_stream_add_remote_candidates ( stream -> stream , stream -> remote_candidates , & err )
FUNCTION_CALL	21:3	22:36	10	fs_stream_add_remote_candidates ( stream -> stream , stream -> remote_candidates , & err )
CALLEE	21:3	21:3	11	fs_stream_add_remote_candidates
LEAF_NODE	21:3	21:3	12	fs_stream_add_remote_candidates
LEAF_NODE	21:34	21:34	11	(
ARGUMENT	21:35	21:35	11	stream -> stream
FIELD	21:35	21:43	12	stream -> stream
LEAF_NODE	21:35	21:35	13	stream
LEAF_NODE	21:41	21:41	13	->
LEAF_NODE	21:43	21:43	13	stream
LEAF_NODE	21:49	21:49	11	,
ARGUMENT	22:5	22:5	11	stream -> remote_candidates
FIELD	22:5	22:13	12	stream -> remote_candidates
LEAF_NODE	22:5	22:5	13	stream
LEAF_NODE	22:11	22:11	13	->
LEAF_NODE	22:13	22:13	13	remote_candidates
LEAF_NODE	22:30	22:30	11	,
ARGUMENT	22:32	22:32	11	& err
UNARY_EXPR	22:32	22:33	12	& err
UNARY_OPERATOR	22:32	22:32	13	&
LEAF_NODE	22:32	22:32	14	&
FIELD	22:33	22:33	13	err
LEAF_NODE	22:33	22:33	14	err
LEAF_NODE	22:36	22:36	11	)
LEAF_NODE	22:37	22:37	9	;
SELECTION	23:2	24:3	6	
KEYWORD	23:2	23:2	7	else
LEAF_NODE	23:2	23:2	8	else
STATEMENTS	24:3	24:3	7	
EXPR_STATEMENT	24:3	25:37	8	fs_stream_force_remote_candidates ( stream -> stream , stream -> remote_candidates , & err ) ;
EXPR	24:3	24:3	9	fs_stream_force_remote_candidates ( stream -> stream , stream -> remote_candidates , & err )
FUNCTION_CALL	24:3	25:36	10	fs_stream_force_remote_candidates ( stream -> stream , stream -> remote_candidates , & err )
CALLEE	24:3	24:3	11	fs_stream_force_remote_candidates
LEAF_NODE	24:3	24:3	12	fs_stream_force_remote_candidates
LEAF_NODE	24:36	24:36	11	(
ARGUMENT	24:37	24:37	11	stream -> stream
FIELD	24:37	24:45	12	stream -> stream
LEAF_NODE	24:37	24:37	13	stream
LEAF_NODE	24:43	24:43	13	->
LEAF_NODE	24:45	24:45	13	stream
LEAF_NODE	24:51	24:51	11	,
ARGUMENT	25:5	25:5	11	stream -> remote_candidates
FIELD	25:5	25:13	12	stream -> remote_candidates
LEAF_NODE	25:5	25:5	13	stream
LEAF_NODE	25:11	25:11	13	->
LEAF_NODE	25:13	25:13	13	remote_candidates
LEAF_NODE	25:30	25:30	11	,
ARGUMENT	25:32	25:32	11	& err
UNARY_EXPR	25:32	25:33	12	& err
UNARY_OPERATOR	25:32	25:32	13	&
LEAF_NODE	25:32	25:32	14	&
FIELD	25:33	25:33	13	err
LEAF_NODE	25:33	25:33	14	err
LEAF_NODE	25:36	25:36	11	)
LEAF_NODE	25:37	25:37	9	;
SELECTION	27:2	28:3	6	
KEYWORD	27:2	27:2	7	if
LEAF_NODE	27:2	27:2	8	if
LEAF_NODE	27:5	27:5	7	(
CONDITION	27:6	27:6	7	err == NULL
EXPR	27:6	27:13	8	err == NULL
FIELD	27:6	27:6	9	err
LEAF_NODE	27:6	27:6	10	err
EQ_OPERATOR	27:10	27:10	9	==
LEAF_NODE	27:10	27:10	10	==
FIELD	27:13	27:13	9	NULL
LEAF_NODE	27:13	27:13	10	NULL
LEAF_NODE	27:17	27:17	7	)
STATEMENTS	28:3	28:3	7	
JUMP_STATEMENT	28:3	28:9	8	return DESTINATION ;
KEYWORD	28:3	28:3	9	return
LEAF_NODE	28:3	28:3	10	return
LEAF_NODE	0:0	0:0	9	DESTINATION
LEAF_NODE	28:9	28:9	9	;
LEAF_NODE	29:2	29:2	6	purple_debug_error
LEAF_NODE	29:20	29:20	6	(
LEAF_NODE	29:21	29:21	6	"backend-fs2"
LEAF_NODE	29:34	29:34	6	,
LEAF_NODE	29:36	29:36	6	"Error adding "
LEAF_NODE	30:4	30:4	6	"remote candidates: %s\n"
LEAF_NODE	30:29	30:29	6	,
LEAF_NODE	31:4	31:4	6	err
LEAF_NODE	31:7	31:7	6	->
LEAF_NODE	31:9	31:9	6	message
LEAF_NODE	31:16	31:16	6	)
LEAF_NODE	31:17	31:17	6	;
EXPR_STATEMENT	32:2	32:19	6	g_error_free ( err ) ;
EXPR	32:2	32:2	7	g_error_free ( err )
FUNCTION_CALL	32:2	32:18	8	g_error_free ( err )
CALLEE	32:2	32:2	9	g_error_free
LEAF_NODE	32:2	32:2	10	g_error_free
LEAF_NODE	32:14	32:14	9	(
ARGUMENT	32:15	32:15	9	err
FIELD	32:15	32:15	10	err
LEAF_NODE	32:15	32:15	11	err
LEAF_NODE	32:18	32:18	9	)
LEAF_NODE	32:19	32:19	7	;
LEAF_NODE	33:1	33:1	5	}
SELECTION	33:3	33:8	3	
KEYWORD	33:3	33:3	4	else
LEAF_NODE	33:3	33:3	5	else
STATEMENTS	33:8	33:8	4	
SELECTION	33:8	34:38	5	
KEYWORD	33:8	33:8	6	if
LEAF_NODE	33:8	33:8	7	if
LEAF_NODE	33:11	33:11	6	(
CONDITION	33:12	33:12	6	local == TRUE && ( type == PURPLE_MEDIA_INFO_MUTE || type == PURPLE_MEDIA_INFO_UNMUTE )
EXPR	33:12	33:12	7	local == TRUE && ( type == PURPLE_MEDIA_INFO_MUTE || type == PURPLE_MEDIA_INFO_UNMUTE )
AND	33:12	33:29	8	local == TRUE && ( type == PURPLE_MEDIA_INFO_MUTE || type == PURPLE_MEDIA_INFO_UNMUTE )
EXPR	33:12	33:21	9	local == TRUE
FIELD	33:12	33:12	10	local
LEAF_NODE	33:12	33:12	11	local
EQ_OPERATOR	33:18	33:18	10	==
LEAF_NODE	33:18	33:18	11	==
FIELD	33:21	33:21	10	TRUE
LEAF_NODE	33:21	33:21	11	TRUE
LEAF_NODE	33:26	33:26	9	&&
EXPR	33:29	34:35	9	( type == PURPLE_MEDIA_INFO_MUTE || type == PURPLE_MEDIA_INFO_UNMUTE )
LEAF_NODE	33:29	33:29	10	(
OR	33:30	34:3	10	type == PURPLE_MEDIA_INFO_MUTE || type == PURPLE_MEDIA_INFO_UNMUTE
EXPR	33:30	33:38	11	type == PURPLE_MEDIA_INFO_MUTE
FIELD	33:30	33:30	12	type
LEAF_NODE	33:30	33:30	13	type
EQ_OPERATOR	33:35	33:35	12	==
LEAF_NODE	33:35	33:35	13	==
FIELD	33:38	33:38	12	PURPLE_MEDIA_INFO_MUTE
LEAF_NODE	33:38	33:38	13	PURPLE_MEDIA_INFO_MUTE
LEAF_NODE	33:61	33:61	11	||
EXPR	34:3	34:11	11	type == PURPLE_MEDIA_INFO_UNMUTE
FIELD	34:3	34:3	12	type
LEAF_NODE	34:3	34:3	13	type
EQ_OPERATOR	34:8	34:8	12	==
LEAF_NODE	34:8	34:8	13	==
FIELD	34:11	34:11	12	PURPLE_MEDIA_INFO_UNMUTE
LEAF_NODE	34:11	34:11	13	PURPLE_MEDIA_INFO_UNMUTE
LEAF_NODE	34:35	34:35	10	)
LEAF_NODE	34:36	34:36	6	)
STATEMENTS	34:38	59:1	6	
LEAF_NODE	34:38	34:38	7	{
STATEMENTS	35:2	46:2	7	
SIMPLE_DECL	35:2	36:46	8	PurpleMediaBackendFs2Private * priv ; priv = PURPLE_MEDIA_BACKEND_FS2_GET_PRIVATE ( self ) ;
VAR_DECL	35:2	35:32	9	PurpleMediaBackendFs2Private * priv ; priv = PURPLE_MEDIA_BACKEND_FS2_GET_PRIVATE ( self )
TYPE	35:2	35:31	10	PurpleMediaBackendFs2Private *
TYPE_NAME	35:2	35:2	11	PurpleMediaBackendFs2Private
LEAF_NODE	35:2	35:2	12	PurpleMediaBackendFs2Private
POINTER	35:31	35:31	11	*
LEAF_NODE	35:31	35:31	12	*
NAME	35:32	35:32	10	priv
LEAF_NODE	35:32	35:32	11	priv
LEAF_NODE	0:0	0:0	10	;
INIT	35:32	35:32	10	priv = PURPLE_MEDIA_BACKEND_FS2_GET_PRIVATE ( self )
ASSIGN	35:32	36:4	11	priv = PURPLE_MEDIA_BACKEND_FS2_GET_PRIVATE ( self )
LVAL	35:32	35:32	12	priv
NAME	35:32	35:32	13	priv
LEAF_NODE	35:32	35:32	14	priv
ASSIGN_OP	35:37	35:37	12	=
LEAF_NODE	35:37	35:37	13	=
RVAL	36:4	36:4	12	PURPLE_MEDIA_BACKEND_FS2_GET_PRIVATE ( self )
FUNCTION_CALL	36:4	36:45	13	PURPLE_MEDIA_BACKEND_FS2_GET_PRIVATE ( self )
CALLEE	36:4	36:4	14	PURPLE_MEDIA_BACKEND_FS2_GET_PRIVATE
LEAF_NODE	36:4	36:4	15	PURPLE_MEDIA_BACKEND_FS2_GET_PRIVATE
LEAF_NODE	36:40	36:40	14	(
ARGUMENT	36:41	36:41	14	self
FIELD	36:41	36:41	15	self
LEAF_NODE	36:41	36:41	16	self
LEAF_NODE	36:45	36:45	14	)
LEAF_NODE	36:46	36:46	9	;
SIMPLE_DECL	37:2	37:52	8	gboolean active ; active = ( type == PURPLE_MEDIA_INFO_MUTE ) ;
VAR_DECL	37:2	37:11	9	gboolean active ; active = ( type == PURPLE_MEDIA_INFO_MUTE )
TYPE	37:2	37:2	10	gboolean
TYPE_NAME	37:2	37:2	11	gboolean
LEAF_NODE	37:2	37:2	12	gboolean
NAME	37:11	37:11	10	active
LEAF_NODE	37:11	37:11	11	active
LEAF_NODE	0:0	0:0	10	;
INIT	37:11	37:11	10	active = ( type == PURPLE_MEDIA_INFO_MUTE )
ASSIGN	37:11	37:20	11	active = ( type == PURPLE_MEDIA_INFO_MUTE )
LVAL	37:11	37:11	12	active
NAME	37:11	37:11	13	active
LEAF_NODE	37:11	37:11	14	active
ASSIGN_OP	37:18	37:18	12	=
LEAF_NODE	37:18	37:18	13	=
RVAL	37:20	37:51	12	( type == PURPLE_MEDIA_INFO_MUTE )
LEAF_NODE	37:20	37:20	13	(
FIELD	37:21	37:21	13	type
LEAF_NODE	37:21	37:21	14	type
EQ_OPERATOR	37:26	37:26	13	==
LEAF_NODE	37:26	37:26	14	==
FIELD	37:29	37:29	13	PURPLE_MEDIA_INFO_MUTE
LEAF_NODE	37:29	37:29	14	PURPLE_MEDIA_INFO_MUTE
LEAF_NODE	37:51	37:51	13	)
LEAF_NODE	37:52	37:52	9	;
SIMPLE_DECL	38:2	38:17	8	GList * sessions ;
VAR_DECL	38:2	38:9	9	GList * sessions
TYPE	38:2	38:8	10	GList *
TYPE_NAME	38:2	38:2	11	GList
LEAF_NODE	38:2	38:2	12	GList
POINTER	38:8	38:8	11	*
LEAF_NODE	38:8	38:8	12	*
NAME	38:9	38:9	10	sessions
LEAF_NODE	38:9	38:9	11	sessions
LEAF_NODE	38:17	38:17	9	;
SELECTION	39:2	40:3	8	
KEYWORD	39:2	39:2	9	if
LEAF_NODE	39:2	39:2	10	if
LEAF_NODE	39:5	39:5	9	(
CONDITION	39:6	39:6	9	sid == NULL
EXPR	39:6	39:13	10	sid == NULL
FIELD	39:6	39:6	11	sid
LEAF_NODE	39:6	39:6	12	sid
EQ_OPERATOR	39:10	39:10	11	==
LEAF_NODE	39:10	39:10	12	==
FIELD	39:13	39:13	11	NULL
LEAF_NODE	39:13	39:13	12	NULL
LEAF_NODE	39:17	39:17	9	)
STATEMENTS	40:3	40:3	9	
EXPR_STATEMENT	40:3	40:53	10	sessions = g_hash_table_get_values ( priv -> sessions ) ;
EXPR	40:3	40:3	11	sessions = g_hash_table_get_values ( priv -> sessions )
ASSIGN	40:3	40:14	12	sessions = g_hash_table_get_values ( priv -> sessions )
LVAL	40:3	40:3	13	sessions
FIELD	40:3	40:3	14	sessions
LEAF_NODE	40:3	40:3	15	sessions
ASSIGN_OP	40:12	40:12	13	=
LEAF_NODE	40:12	40:12	14	=
RVAL	40:14	40:14	13	g_hash_table_get_values ( priv -> sessions )
FUNCTION_CALL	40:14	40:52	14	g_hash_table_get_values ( priv -> sessions )
CALLEE	40:14	40:14	15	g_hash_table_get_values
LEAF_NODE	40:14	40:14	16	g_hash_table_get_values
LEAF_NODE	40:37	40:37	15	(
ARGUMENT	40:38	40:38	15	priv -> sessions
FIELD	40:38	40:44	16	priv -> sessions
LEAF_NODE	40:38	40:38	17	priv
LEAF_NODE	40:42	40:42	17	->
LEAF_NODE	40:44	40:44	17	sessions
LEAF_NODE	40:52	40:52	15	)
LEAF_NODE	40:53	40:53	11	;
SELECTION	41:2	42:3	8	
KEYWORD	41:2	41:2	9	else
LEAF_NODE	41:2	41:2	10	else
STATEMENTS	42:3	42:3	9	
EXPR_STATEMENT	42:3	43:28	10	sessions = g_list_prepend ( NULL , get_session ( self , sid ) ) ;
EXPR	42:3	42:3	11	sessions = g_list_prepend ( NULL , get_session ( self , sid ) )
ASSIGN	42:3	42:14	12	sessions = g_list_prepend ( NULL , get_session ( self , sid ) )
LVAL	42:3	42:3	13	sessions
FIELD	42:3	42:3	14	sessions
LEAF_NODE	42:3	42:3	15	sessions
ASSIGN_OP	42:12	42:12	13	=
LEAF_NODE	42:12	42:12	14	=
RVAL	42:14	42:14	13	g_list_prepend ( NULL , get_session ( self , sid ) )
FUNCTION_CALL	42:14	43:27	14	g_list_prepend ( NULL , get_session ( self , sid ) )
CALLEE	42:14	42:14	15	g_list_prepend
LEAF_NODE	42:14	42:14	16	g_list_prepend
LEAF_NODE	42:28	42:28	15	(
ARGUMENT	42:29	42:29	15	NULL
FIELD	42:29	42:29	16	NULL
LEAF_NODE	42:29	42:29	17	NULL
LEAF_NODE	42:33	42:33	15	,
ARGUMENT	43:5	43:5	15	get_session ( self , sid )
FUNCTION_CALL	43:5	43:26	16	get_session ( self , sid )
CALLEE	43:5	43:5	17	get_session
LEAF_NODE	43:5	43:5	18	get_session
LEAF_NODE	43:16	43:16	17	(
ARGUMENT	43:17	43:17	17	self
FIELD	43:17	43:17	18	self
LEAF_NODE	43:17	43:17	19	self
LEAF_NODE	43:21	43:21	17	,
ARGUMENT	43:23	43:23	17	sid
FIELD	43:23	43:23	18	sid
LEAF_NODE	43:23	43:23	19	sid
LEAF_NODE	43:26	43:26	17	)
LEAF_NODE	43:27	43:27	15	)
LEAF_NODE	43:28	43:28	11	;
EXPR_STATEMENT	44:2	45:26	8	purple_debug_info ( "media" , "Turning mute %s\n" , active ? "on" : "off" ) ;
EXPR	44:2	44:2	9	purple_debug_info ( "media" , "Turning mute %s\n" , active ? "on" : "off" )
FUNCTION_CALL	44:2	45:25	10	purple_debug_info ( "media" , "Turning mute %s\n" , active ? "on" : "off" )
CALLEE	44:2	44:2	11	purple_debug_info
LEAF_NODE	44:2	44:2	12	purple_debug_info
LEAF_NODE	44:19	44:19	11	(
ARGUMENT	44:20	44:20	11	"media"
FIELD	44:20	44:20	12	"media"
LEAF_NODE	44:20	44:20	13	"media"
LEAF_NODE	44:27	44:27	11	,
ARGUMENT	44:29	44:29	11	"Turning mute %s\n"
FIELD	44:29	44:29	12	"Turning mute %s\n"
LEAF_NODE	44:29	44:29	13	"Turning mute %s\n"
LEAF_NODE	44:48	44:48	11	,
ARGUMENT	45:4	45:4	11	active ? "on" : "off"
COND_EXPR	45:4	45:20	12	active ? "on" : "off"
CONDITION	45:4	45:4	13	active
FIELD	45:4	45:4	14	active
LEAF_NODE	45:4	45:4	15	active
LEAF_NODE	45:11	45:11	13	?
EXPR	45:13	45:13	13	"on"
FIELD	45:13	45:13	14	"on"
LEAF_NODE	45:13	45:13	15	"on"
LEAF_NODE	45:18	45:18	13	:
FIELD	45:20	45:20	13	"off"
LEAF_NODE	45:20	45:20	14	"off"
LEAF_NODE	45:25	45:25	11	)
LEAF_NODE	45:26	45:26	9	;
ITERATION	46:2	47:25	8	
KEYWORD	46:2	46:2	9	for
LEAF_NODE	46:2	46:2	10	for
LEAF_NODE	46:6	46:6	9	(
FOR_INIT	46:7	46:7	9	;
LEAF_NODE	46:7	46:7	10	;
CONDITION	46:9	46:9	9	sessions
EXPR	46:9	46:9	10	sessions
FIELD	46:9	46:9	11	sessions
LEAF_NODE	46:9	46:9	12	sessions
LEAF_NODE	46:17	46:17	9	;
FOR_EXPR	46:19	46:19	9	sessions = g_list_delete_link ( sessions , sessions )
EXPR	46:19	46:19	10	sessions = g_list_delete_link ( sessions , sessions )
ASSIGN	46:19	46:30	11	sessions = g_list_delete_link ( sessions , sessions )
LVAL	46:19	46:19	12	sessions
FIELD	46:19	46:19	13	sessions
LEAF_NODE	46:19	46:19	14	sessions
ASSIGN_OP	46:28	46:28	12	=
LEAF_NODE	46:28	46:28	13	=
RVAL	46:30	46:30	12	g_list_delete_link ( sessions , sessions )
FUNCTION_CALL	46:30	47:22	13	g_list_delete_link ( sessions , sessions )
CALLEE	46:30	46:30	14	g_list_delete_link
LEAF_NODE	46:30	46:30	15	g_list_delete_link
LEAF_NODE	46:48	46:48	14	(
ARGUMENT	47:4	47:4	14	sessions
FIELD	47:4	47:4	15	sessions
LEAF_NODE	47:4	47:4	16	sessions
LEAF_NODE	47:12	47:12	14	,
ARGUMENT	47:14	47:14	14	sessions
FIELD	47:14	47:14	15	sessions
LEAF_NODE	47:14	47:14	16	sessions
LEAF_NODE	47:22	47:22	14	)
LEAF_NODE	47:23	47:23	9	)
STATEMENTS	47:25	58:2	9	
LEAF_NODE	47:25	47:25	10	{
STATEMENTS	48:3	50:3	10	
SIMPLE_DECL	48:3	49:19	11	PurpleMediaBackendFs2Session * session ; session = sessions -> data ;
VAR_DECL	48:3	48:33	12	PurpleMediaBackendFs2Session * session ; session = sessions -> data
TYPE	48:3	48:32	13	PurpleMediaBackendFs2Session *
TYPE_NAME	48:3	48:3	14	PurpleMediaBackendFs2Session
LEAF_NODE	48:3	48:3	15	PurpleMediaBackendFs2Session
POINTER	48:32	48:32	14	*
LEAF_NODE	48:32	48:32	15	*
NAME	48:33	48:33	13	session
LEAF_NODE	48:33	48:33	14	session
LEAF_NODE	0:0	0:0	13	;
INIT	48:33	48:33	13	session = sessions -> data
ASSIGN	48:33	49:5	14	session = sessions -> data
LVAL	48:33	48:33	15	session
NAME	48:33	48:33	16	session
LEAF_NODE	48:33	48:33	17	session
ASSIGN_OP	48:41	48:41	15	=
LEAF_NODE	48:41	48:41	16	=
RVAL	49:5	49:5	15	sessions -> data
FIELD	49:5	49:15	16	sessions -> data
LEAF_NODE	49:5	49:5	17	sessions
LEAF_NODE	49:13	49:13	17	->
LEAF_NODE	49:15	49:15	17	data
LEAF_NODE	49:19	49:19	12	;
SELECTION	50:3	50:48	11	
KEYWORD	50:3	50:3	12	if
LEAF_NODE	50:3	50:3	13	if
LEAF_NODE	50:6	50:6	12	(
CONDITION	50:7	50:7	12	session -> type & PURPLE_MEDIA_SEND_AUDIO
EXPR	50:7	50:23	13	session -> type & PURPLE_MEDIA_SEND_AUDIO
FIELD	50:7	50:16	14	session -> type
LEAF_NODE	50:7	50:7	15	session
LEAF_NODE	50:14	50:14	15	->
LEAF_NODE	50:16	50:16	15	type
LEAF_NODE	50:21	50:21	14	&
FIELD	50:23	50:23	14	PURPLE_MEDIA_SEND_AUDIO
LEAF_NODE	50:23	50:23	15	PURPLE_MEDIA_SEND_AUDIO
LEAF_NODE	50:46	50:46	12	)
STATEMENTS	50:48	57:3	12	
LEAF_NODE	50:48	50:48	13	{
STATEMENTS	51:4	56:4	13	
SIMPLE_DECL	51:4	52:18	14	gchar * name ; name = g_strdup_printf ( "volume_%s" , session -> id ) ;
VAR_DECL	51:4	51:11	15	gchar * name ; name = g_strdup_printf ( "volume_%s" , session -> id )
TYPE	51:4	51:10	16	gchar *
TYPE_NAME	51:4	51:4	17	gchar
LEAF_NODE	51:4	51:4	18	gchar
POINTER	51:10	51:10	17	*
LEAF_NODE	51:10	51:10	18	*
NAME	51:11	51:11	16	name
LEAF_NODE	51:11	51:11	17	name
LEAF_NODE	0:0	0:0	16	;
INIT	51:11	51:11	16	name = g_strdup_printf ( "volume_%s" , session -> id )
ASSIGN	51:11	51:18	17	name = g_strdup_printf ( "volume_%s" , session -> id )
LVAL	51:11	51:11	18	name
NAME	51:11	51:11	19	name
LEAF_NODE	51:11	51:11	20	name
ASSIGN_OP	51:16	51:16	18	=
LEAF_NODE	51:16	51:16	19	=
RVAL	51:18	51:18	18	g_strdup_printf ( "volume_%s" , session -> id )
FUNCTION_CALL	51:18	52:17	19	g_strdup_printf ( "volume_%s" , session -> id )
CALLEE	51:18	51:18	20	g_strdup_printf
LEAF_NODE	51:18	51:18	21	g_strdup_printf
LEAF_NODE	51:33	51:33	20	(
ARGUMENT	51:34	51:34	20	"volume_%s"
FIELD	51:34	51:34	21	"volume_%s"
LEAF_NODE	51:34	51:34	22	"volume_%s"
LEAF_NODE	51:45	51:45	20	,
ARGUMENT	52:6	52:6	20	session -> id
FIELD	52:6	52:15	21	session -> id
LEAF_NODE	52:6	52:6	22	session
LEAF_NODE	52:13	52:13	22	->
LEAF_NODE	52:15	52:15	22	id
LEAF_NODE	52:17	52:17	20	)
LEAF_NODE	52:18	52:18	15	;
SIMPLE_DECL	53:4	54:35	14	GstElement * volume ; volume = gst_bin_get_by_name ( GST_BIN ( priv -> confbin ) , name ) ;
VAR_DECL	53:4	53:16	15	GstElement * volume ; volume = gst_bin_get_by_name ( GST_BIN ( priv -> confbin ) , name )
TYPE	53:4	53:15	16	GstElement *
TYPE_NAME	53:4	53:4	17	GstElement
LEAF_NODE	53:4	53:4	18	GstElement
POINTER	53:15	53:15	17	*
LEAF_NODE	53:15	53:15	18	*
NAME	53:16	53:16	16	volume
LEAF_NODE	53:16	53:16	17	volume
LEAF_NODE	0:0	0:0	16	;
INIT	53:16	53:16	16	volume = gst_bin_get_by_name ( GST_BIN ( priv -> confbin ) , name )
ASSIGN	53:16	53:25	17	volume = gst_bin_get_by_name ( GST_BIN ( priv -> confbin ) , name )
LVAL	53:16	53:16	18	volume
NAME	53:16	53:16	19	volume
LEAF_NODE	53:16	53:16	20	volume
ASSIGN_OP	53:23	53:23	18	=
LEAF_NODE	53:23	53:23	19	=
RVAL	53:25	53:25	18	gst_bin_get_by_name ( GST_BIN ( priv -> confbin ) , name )
FUNCTION_CALL	53:25	54:34	19	gst_bin_get_by_name ( GST_BIN ( priv -> confbin ) , name )
CALLEE	53:25	53:25	20	gst_bin_get_by_name
LEAF_NODE	53:25	53:25	21	gst_bin_get_by_name
LEAF_NODE	53:44	53:44	20	(
ARGUMENT	54:6	54:6	20	GST_BIN ( priv -> confbin )
FUNCTION_CALL	54:6	54:27	21	GST_BIN ( priv -> confbin )
CALLEE	54:6	54:6	22	GST_BIN
LEAF_NODE	54:6	54:6	23	GST_BIN
LEAF_NODE	54:13	54:13	22	(
ARGUMENT	54:14	54:14	22	priv -> confbin
FIELD	54:14	54:20	23	priv -> confbin
LEAF_NODE	54:14	54:14	24	priv
LEAF_NODE	54:18	54:18	24	->
LEAF_NODE	54:20	54:20	24	confbin
LEAF_NODE	54:27	54:27	22	)
LEAF_NODE	54:28	54:28	20	,
ARGUMENT	54:30	54:30	20	name
FIELD	54:30	54:30	21	name
LEAF_NODE	54:30	54:30	22	name
LEAF_NODE	54:34	54:34	20	)
LEAF_NODE	54:35	54:35	15	;
EXPR_STATEMENT	55:4	55:16	14	g_free ( name ) ;
EXPR	55:4	55:4	15	g_free ( name )
FUNCTION_CALL	55:4	55:15	16	g_free ( name )
CALLEE	55:4	55:4	17	g_free
LEAF_NODE	55:4	55:4	18	g_free
LEAF_NODE	55:10	55:10	17	(
ARGUMENT	55:11	55:11	17	name
FIELD	55:11	55:11	18	name
LEAF_NODE	55:11	55:11	19	name
LEAF_NODE	55:15	55:15	17	)
LEAF_NODE	55:16	55:16	15	;
EXPR_STATEMENT	56:4	56:46	14	g_object_set ( volume , "mute" , active , NULL ) ;
EXPR	56:4	56:4	15	g_object_set ( volume , "mute" , active , NULL )
FUNCTION_CALL	56:4	56:45	16	g_object_set ( volume , "mute" , active , NULL )
CALLEE	56:4	56:4	17	g_object_set
LEAF_NODE	56:4	56:4	18	g_object_set
LEAF_NODE	56:16	56:16	17	(
ARGUMENT	56:17	56:17	17	volume
FIELD	56:17	56:17	18	volume
LEAF_NODE	56:17	56:17	19	volume
LEAF_NODE	56:23	56:23	17	,
ARGUMENT	56:25	56:25	17	"mute"
FIELD	56:25	56:25	18	"mute"
LEAF_NODE	56:25	56:25	19	"mute"
LEAF_NODE	56:31	56:31	17	,
ARGUMENT	56:33	56:33	17	active
FIELD	56:33	56:33	18	active
LEAF_NODE	56:33	56:33	19	active
LEAF_NODE	56:39	56:39	17	,
ARGUMENT	56:41	56:41	17	NULL
FIELD	56:41	56:41	18	NULL
LEAF_NODE	56:41	56:41	19	NULL
LEAF_NODE	56:45	56:45	17	)
LEAF_NODE	56:46	56:46	15	;
LEAF_NODE	57:3	57:3	13	}
LEAF_NODE	58:2	58:2	10	}
LEAF_NODE	59:1	59:1	7	}
SELECTION	59:3	59:8	3	
KEYWORD	59:3	59:3	4	else
LEAF_NODE	59:3	59:3	5	else
STATEMENTS	59:8	59:8	4	
SELECTION	59:8	60:38	5	
KEYWORD	59:8	59:8	6	if
LEAF_NODE	59:8	59:8	7	if
LEAF_NODE	59:11	59:11	6	(
CONDITION	59:12	59:12	6	local == TRUE && ( type == PURPLE_MEDIA_INFO_HOLD || type == PURPLE_MEDIA_INFO_UNHOLD )
EXPR	59:12	59:12	7	local == TRUE && ( type == PURPLE_MEDIA_INFO_HOLD || type == PURPLE_MEDIA_INFO_UNHOLD )
AND	59:12	59:29	8	local == TRUE && ( type == PURPLE_MEDIA_INFO_HOLD || type == PURPLE_MEDIA_INFO_UNHOLD )
EXPR	59:12	59:21	9	local == TRUE
FIELD	59:12	59:12	10	local
LEAF_NODE	59:12	59:12	11	local
EQ_OPERATOR	59:18	59:18	10	==
LEAF_NODE	59:18	59:18	11	==
FIELD	59:21	59:21	10	TRUE
LEAF_NODE	59:21	59:21	11	TRUE
LEAF_NODE	59:26	59:26	9	&&
EXPR	59:29	60:35	9	( type == PURPLE_MEDIA_INFO_HOLD || type == PURPLE_MEDIA_INFO_UNHOLD )
LEAF_NODE	59:29	59:29	10	(
OR	59:30	60:3	10	type == PURPLE_MEDIA_INFO_HOLD || type == PURPLE_MEDIA_INFO_UNHOLD
EXPR	59:30	59:38	11	type == PURPLE_MEDIA_INFO_HOLD
FIELD	59:30	59:30	12	type
LEAF_NODE	59:30	59:30	13	type
EQ_OPERATOR	59:35	59:35	12	==
LEAF_NODE	59:35	59:35	13	==
FIELD	59:38	59:38	12	PURPLE_MEDIA_INFO_HOLD
LEAF_NODE	59:38	59:38	13	PURPLE_MEDIA_INFO_HOLD
LEAF_NODE	59:61	59:61	11	||
EXPR	60:3	60:11	11	type == PURPLE_MEDIA_INFO_UNHOLD
FIELD	60:3	60:3	12	type
LEAF_NODE	60:3	60:3	13	type
EQ_OPERATOR	60:8	60:8	12	==
LEAF_NODE	60:8	60:8	13	==
FIELD	60:11	60:11	12	PURPLE_MEDIA_INFO_UNHOLD
LEAF_NODE	60:11	60:11	13	PURPLE_MEDIA_INFO_UNHOLD
LEAF_NODE	60:35	60:35	10	)
LEAF_NODE	60:36	60:36	6	)
STATEMENTS	60:38	74:1	6	
LEAF_NODE	60:38	60:38	7	{
STATEMENTS	61:2	63:2	7	
SIMPLE_DECL	61:2	61:52	8	gboolean active ; active = ( type == PURPLE_MEDIA_INFO_HOLD ) ;
VAR_DECL	61:2	61:11	9	gboolean active ; active = ( type == PURPLE_MEDIA_INFO_HOLD )
TYPE	61:2	61:2	10	gboolean
TYPE_NAME	61:2	61:2	11	gboolean
LEAF_NODE	61:2	61:2	12	gboolean
NAME	61:11	61:11	10	active
LEAF_NODE	61:11	61:11	11	active
LEAF_NODE	0:0	0:0	10	;
INIT	61:11	61:11	10	active = ( type == PURPLE_MEDIA_INFO_HOLD )
ASSIGN	61:11	61:20	11	active = ( type == PURPLE_MEDIA_INFO_HOLD )
LVAL	61:11	61:11	12	active
NAME	61:11	61:11	13	active
LEAF_NODE	61:11	61:11	14	active
ASSIGN_OP	61:18	61:18	12	=
LEAF_NODE	61:18	61:18	13	=
RVAL	61:20	61:51	12	( type == PURPLE_MEDIA_INFO_HOLD )
LEAF_NODE	61:20	61:20	13	(
FIELD	61:21	61:21	13	type
LEAF_NODE	61:21	61:21	14	type
EQ_OPERATOR	61:26	61:26	13	==
LEAF_NODE	61:26	61:26	14	==
FIELD	61:29	61:29	13	PURPLE_MEDIA_INFO_HOLD
LEAF_NODE	61:29	61:29	14	PURPLE_MEDIA_INFO_HOLD
LEAF_NODE	61:51	61:51	13	)
LEAF_NODE	61:52	61:52	9	;
SIMPLE_DECL	62:2	62:47	8	GList * streams ; streams = get_streams ( self , sid , name ) ;
VAR_DECL	62:2	62:9	9	GList * streams ; streams = get_streams ( self , sid , name )
TYPE	62:2	62:8	10	GList *
TYPE_NAME	62:2	62:2	11	GList
LEAF_NODE	62:2	62:2	12	GList
POINTER	62:8	62:8	11	*
LEAF_NODE	62:8	62:8	12	*
NAME	62:9	62:9	10	streams
LEAF_NODE	62:9	62:9	11	streams
LEAF_NODE	0:0	0:0	10	;
INIT	62:9	62:9	10	streams = get_streams ( self , sid , name )
ASSIGN	62:9	62:19	11	streams = get_streams ( self , sid , name )
LVAL	62:9	62:9	12	streams
NAME	62:9	62:9	13	streams
LEAF_NODE	62:9	62:9	14	streams
ASSIGN_OP	62:17	62:17	12	=
LEAF_NODE	62:17	62:17	13	=
RVAL	62:19	62:19	12	get_streams ( self , sid , name )
FUNCTION_CALL	62:19	62:46	13	get_streams ( self , sid , name )
CALLEE	62:19	62:19	14	get_streams
LEAF_NODE	62:19	62:19	15	get_streams
LEAF_NODE	62:30	62:30	14	(
ARGUMENT	62:31	62:31	14	self
FIELD	62:31	62:31	15	self
LEAF_NODE	62:31	62:31	16	self
LEAF_NODE	62:35	62:35	14	,
ARGUMENT	62:37	62:37	14	sid
FIELD	62:37	62:37	15	sid
LEAF_NODE	62:37	62:37	16	sid
LEAF_NODE	62:40	62:40	14	,
ARGUMENT	62:42	62:42	14	name
FIELD	62:42	62:42	15	name
LEAF_NODE	62:42	62:42	16	name
LEAF_NODE	62:46	62:46	14	)
LEAF_NODE	62:47	62:47	9	;
ITERATION	63:2	64:42	8	
KEYWORD	63:2	63:2	9	for
LEAF_NODE	63:2	63:2	10	for
LEAF_NODE	63:6	63:6	9	(
FOR_INIT	63:7	63:7	9	;
LEAF_NODE	63:7	63:7	10	;
CONDITION	63:9	63:9	9	streams
EXPR	63:9	63:9	10	streams
FIELD	63:9	63:9	11	streams
LEAF_NODE	63:9	63:9	12	streams
LEAF_NODE	63:16	63:16	9	;
FOR_EXPR	63:18	63:18	9	streams = g_list_delete_link ( streams , streams )
EXPR	63:18	63:18	10	streams = g_list_delete_link ( streams , streams )
ASSIGN	63:18	64:4	11	streams = g_list_delete_link ( streams , streams )
LVAL	63:18	63:18	12	streams
FIELD	63:18	63:18	13	streams
LEAF_NODE	63:18	63:18	14	streams
ASSIGN_OP	63:26	63:26	12	=
LEAF_NODE	63:26	63:26	13	=
RVAL	64:4	64:4	12	g_list_delete_link ( streams , streams )
FUNCTION_CALL	64:4	64:39	13	g_list_delete_link ( streams , streams )
CALLEE	64:4	64:4	14	g_list_delete_link
LEAF_NODE	64:4	64:4	15	g_list_delete_link
LEAF_NODE	64:22	64:22	14	(
ARGUMENT	64:23	64:23	14	streams
FIELD	64:23	64:23	15	streams
LEAF_NODE	64:23	64:23	16	streams
LEAF_NODE	64:30	64:30	14	,
ARGUMENT	64:32	64:32	14	streams
FIELD	64:32	64:32	15	streams
LEAF_NODE	64:32	64:32	16	streams
LEAF_NODE	64:39	64:39	14	)
LEAF_NODE	64:40	64:40	9	)
STATEMENTS	64:42	73:2	9	
LEAF_NODE	64:42	64:42	10	{
STATEMENTS	65:3	66:3	10	
SIMPLE_DECL	65:3	65:54	11	PurpleMediaBackendFs2Stream * stream ; stream = streams -> data ;
VAR_DECL	65:3	65:32	12	PurpleMediaBackendFs2Stream * stream ; stream = streams -> data
TYPE	65:3	65:31	13	PurpleMediaBackendFs2Stream *
TYPE_NAME	65:3	65:3	14	PurpleMediaBackendFs2Stream
LEAF_NODE	65:3	65:3	15	PurpleMediaBackendFs2Stream
POINTER	65:31	65:31	14	*
LEAF_NODE	65:31	65:31	15	*
NAME	65:32	65:32	13	stream
LEAF_NODE	65:32	65:32	14	stream
LEAF_NODE	0:0	0:0	13	;
INIT	65:32	65:32	13	stream = streams -> data
ASSIGN	65:32	65:41	14	stream = streams -> data
LVAL	65:32	65:32	15	stream
NAME	65:32	65:32	16	stream
LEAF_NODE	65:32	65:32	17	stream
ASSIGN_OP	65:39	65:39	15	=
LEAF_NODE	65:39	65:39	16	=
RVAL	65:41	65:41	15	streams -> data
FIELD	65:41	65:50	16	streams -> data
LEAF_NODE	65:41	65:41	17	streams
LEAF_NODE	65:48	65:48	17	->
LEAF_NODE	65:50	65:50	17	data
LEAF_NODE	65:54	65:54	12	;
SELECTION	66:3	66:56	11	
KEYWORD	66:3	66:3	12	if
LEAF_NODE	66:3	66:3	13	if
LEAF_NODE	66:6	66:6	12	(
CONDITION	66:7	66:7	12	stream -> session -> type & PURPLE_MEDIA_SEND_AUDIO
EXPR	66:7	66:31	13	stream -> session -> type & PURPLE_MEDIA_SEND_AUDIO
FIELD	66:7	66:24	14	stream -> session -> type
LEAF_NODE	66:7	66:7	15	stream
LEAF_NODE	66:13	66:13	15	->
LEAF_NODE	66:15	66:15	15	session
LEAF_NODE	66:22	66:22	15	->
LEAF_NODE	66:24	66:24	15	type
LEAF_NODE	66:29	66:29	14	&
FIELD	66:31	66:31	14	PURPLE_MEDIA_SEND_AUDIO
LEAF_NODE	66:31	66:31	15	PURPLE_MEDIA_SEND_AUDIO
LEAF_NODE	66:54	66:54	12	)
STATEMENTS	66:56	72:3	12	
LEAF_NODE	66:56	66:56	13	{
STATEMENTS	67:4	71:33	13	
LEAF_NODE	67:4	67:4	14	g_object_set
LEAF_NODE	67:16	67:16	14	(
LEAF_NODE	67:17	67:17	14	stream
LEAF_NODE	67:23	67:23	14	->
LEAF_NODE	67:25	67:25	14	stream
LEAF_NODE	67:31	67:31	14	,
LEAF_NODE	67:33	67:33	14	"direction"
LEAF_NODE	67:44	67:44	14	,
LEAF_NODE	68:6	68:6	14	session_type_to_fs_stream_direction
LEAF_NODE	68:41	68:41	14	(
LEAF_NODE	69:6	69:6	14	stream
LEAF_NODE	69:12	69:12	14	->
LEAF_NODE	69:14	69:14	14	session
LEAF_NODE	69:21	69:21	14	->
LEAF_NODE	69:23	69:23	14	type
LEAF_NODE	69:28	69:28	14	&
LEAF_NODE	69:30	69:30	14	(
LEAF_NODE	69:31	69:31	14	(
LEAF_NODE	69:32	69:32	14	active
LEAF_NODE	69:38	69:38	14	)
LEAF_NODE	69:40	69:40	14	?
LABEL	70:6	70:31	14	~PURPLE_MEDIA_SEND_AUDIO :
LEAF_NODE	70:6	70:6	15	~PURPLE_MEDIA_SEND_AUDIO
LEAF_NODE	70:31	70:31	15	:
LEAF_NODE	71:6	71:6	14	PURPLE_MEDIA_AUDIO
LEAF_NODE	71:24	71:24	14	)
LEAF_NODE	71:25	71:25	14	)
LEAF_NODE	71:26	71:26	14	,
LEAF_NODE	71:28	71:28	14	NULL
LEAF_NODE	71:32	71:32	14	)
LEAF_NODE	71:33	71:33	14	;
LEAF_NODE	72:3	72:3	13	}
LEAF_NODE	73:2	73:2	10	}
LEAF_NODE	74:1	74:1	7	}
SELECTION	74:3	74:8	3	
KEYWORD	74:3	74:3	4	else
LEAF_NODE	74:3	74:3	5	else
STATEMENTS	74:8	74:8	4	
SELECTION	74:8	75:39	5	
KEYWORD	74:8	74:8	6	if
LEAF_NODE	74:8	74:8	7	if
LEAF_NODE	74:11	74:11	6	(
CONDITION	74:12	74:12	6	local == TRUE && ( type == PURPLE_MEDIA_INFO_PAUSE || type == PURPLE_MEDIA_INFO_UNPAUSE )
EXPR	74:12	74:12	7	local == TRUE && ( type == PURPLE_MEDIA_INFO_PAUSE || type == PURPLE_MEDIA_INFO_UNPAUSE )
AND	74:12	74:29	8	local == TRUE && ( type == PURPLE_MEDIA_INFO_PAUSE || type == PURPLE_MEDIA_INFO_UNPAUSE )
EXPR	74:12	74:21	9	local == TRUE
FIELD	74:12	74:12	10	local
LEAF_NODE	74:12	74:12	11	local
EQ_OPERATOR	74:18	74:18	10	==
LEAF_NODE	74:18	74:18	11	==
FIELD	74:21	74:21	10	TRUE
LEAF_NODE	74:21	74:21	11	TRUE
LEAF_NODE	74:26	74:26	9	&&
EXPR	74:29	75:36	9	( type == PURPLE_MEDIA_INFO_PAUSE || type == PURPLE_MEDIA_INFO_UNPAUSE )
LEAF_NODE	74:29	74:29	10	(
OR	74:30	75:3	10	type == PURPLE_MEDIA_INFO_PAUSE || type == PURPLE_MEDIA_INFO_UNPAUSE
EXPR	74:30	74:38	11	type == PURPLE_MEDIA_INFO_PAUSE
FIELD	74:30	74:30	12	type
LEAF_NODE	74:30	74:30	13	type
EQ_OPERATOR	74:35	74:35	12	==
LEAF_NODE	74:35	74:35	13	==
FIELD	74:38	74:38	12	PURPLE_MEDIA_INFO_PAUSE
LEAF_NODE	74:38	74:38	13	PURPLE_MEDIA_INFO_PAUSE
LEAF_NODE	74:62	74:62	11	||
EXPR	75:3	75:11	11	type == PURPLE_MEDIA_INFO_UNPAUSE
FIELD	75:3	75:3	12	type
LEAF_NODE	75:3	75:3	13	type
EQ_OPERATOR	75:8	75:8	12	==
LEAF_NODE	75:8	75:8	13	==
FIELD	75:11	75:11	12	PURPLE_MEDIA_INFO_UNPAUSE
LEAF_NODE	75:11	75:11	13	PURPLE_MEDIA_INFO_UNPAUSE
LEAF_NODE	75:36	75:36	10	)
LEAF_NODE	75:37	75:37	6	)
STATEMENTS	75:39	89:1	6	
LEAF_NODE	75:39	75:39	7	{
STATEMENTS	76:2	78:2	7	
SIMPLE_DECL	76:2	76:53	8	gboolean active ; active = ( type == PURPLE_MEDIA_INFO_PAUSE ) ;
VAR_DECL	76:2	76:11	9	gboolean active ; active = ( type == PURPLE_MEDIA_INFO_PAUSE )
TYPE	76:2	76:2	10	gboolean
TYPE_NAME	76:2	76:2	11	gboolean
LEAF_NODE	76:2	76:2	12	gboolean
NAME	76:11	76:11	10	active
LEAF_NODE	76:11	76:11	11	active
LEAF_NODE	0:0	0:0	10	;
INIT	76:11	76:11	10	active = ( type == PURPLE_MEDIA_INFO_PAUSE )
ASSIGN	76:11	76:20	11	active = ( type == PURPLE_MEDIA_INFO_PAUSE )
LVAL	76:11	76:11	12	active
NAME	76:11	76:11	13	active
LEAF_NODE	76:11	76:11	14	active
ASSIGN_OP	76:18	76:18	12	=
LEAF_NODE	76:18	76:18	13	=
RVAL	76:20	76:52	12	( type == PURPLE_MEDIA_INFO_PAUSE )
LEAF_NODE	76:20	76:20	13	(
FIELD	76:21	76:21	13	type
LEAF_NODE	76:21	76:21	14	type
EQ_OPERATOR	76:26	76:26	13	==
LEAF_NODE	76:26	76:26	14	==
FIELD	76:29	76:29	13	PURPLE_MEDIA_INFO_PAUSE
LEAF_NODE	76:29	76:29	14	PURPLE_MEDIA_INFO_PAUSE
LEAF_NODE	76:52	76:52	13	)
LEAF_NODE	76:53	76:53	9	;
SIMPLE_DECL	77:2	77:47	8	GList * streams ; streams = get_streams ( self , sid , name ) ;
VAR_DECL	77:2	77:9	9	GList * streams ; streams = get_streams ( self , sid , name )
TYPE	77:2	77:8	10	GList *
TYPE_NAME	77:2	77:2	11	GList
LEAF_NODE	77:2	77:2	12	GList
POINTER	77:8	77:8	11	*
LEAF_NODE	77:8	77:8	12	*
NAME	77:9	77:9	10	streams
LEAF_NODE	77:9	77:9	11	streams
LEAF_NODE	0:0	0:0	10	;
INIT	77:9	77:9	10	streams = get_streams ( self , sid , name )
ASSIGN	77:9	77:19	11	streams = get_streams ( self , sid , name )
LVAL	77:9	77:9	12	streams
NAME	77:9	77:9	13	streams
LEAF_NODE	77:9	77:9	14	streams
ASSIGN_OP	77:17	77:17	12	=
LEAF_NODE	77:17	77:17	13	=
RVAL	77:19	77:19	12	get_streams ( self , sid , name )
FUNCTION_CALL	77:19	77:46	13	get_streams ( self , sid , name )
CALLEE	77:19	77:19	14	get_streams
LEAF_NODE	77:19	77:19	15	get_streams
LEAF_NODE	77:30	77:30	14	(
ARGUMENT	77:31	77:31	14	self
FIELD	77:31	77:31	15	self
LEAF_NODE	77:31	77:31	16	self
LEAF_NODE	77:35	77:35	14	,
ARGUMENT	77:37	77:37	14	sid
FIELD	77:37	77:37	15	sid
LEAF_NODE	77:37	77:37	16	sid
LEAF_NODE	77:40	77:40	14	,
ARGUMENT	77:42	77:42	14	name
FIELD	77:42	77:42	15	name
LEAF_NODE	77:42	77:42	16	name
LEAF_NODE	77:46	77:46	14	)
LEAF_NODE	77:47	77:47	9	;
ITERATION	78:2	79:42	8	
KEYWORD	78:2	78:2	9	for
LEAF_NODE	78:2	78:2	10	for
LEAF_NODE	78:6	78:6	9	(
FOR_INIT	78:7	78:7	9	;
LEAF_NODE	78:7	78:7	10	;
CONDITION	78:9	78:9	9	streams
EXPR	78:9	78:9	10	streams
FIELD	78:9	78:9	11	streams
LEAF_NODE	78:9	78:9	12	streams
LEAF_NODE	78:16	78:16	9	;
FOR_EXPR	78:18	78:18	9	streams = g_list_delete_link ( streams , streams )
EXPR	78:18	78:18	10	streams = g_list_delete_link ( streams , streams )
ASSIGN	78:18	79:4	11	streams = g_list_delete_link ( streams , streams )
LVAL	78:18	78:18	12	streams
FIELD	78:18	78:18	13	streams
LEAF_NODE	78:18	78:18	14	streams
ASSIGN_OP	78:26	78:26	12	=
LEAF_NODE	78:26	78:26	13	=
RVAL	79:4	79:4	12	g_list_delete_link ( streams , streams )
FUNCTION_CALL	79:4	79:39	13	g_list_delete_link ( streams , streams )
CALLEE	79:4	79:4	14	g_list_delete_link
LEAF_NODE	79:4	79:4	15	g_list_delete_link
LEAF_NODE	79:22	79:22	14	(
ARGUMENT	79:23	79:23	14	streams
FIELD	79:23	79:23	15	streams
LEAF_NODE	79:23	79:23	16	streams
LEAF_NODE	79:30	79:30	14	,
ARGUMENT	79:32	79:32	14	streams
FIELD	79:32	79:32	15	streams
LEAF_NODE	79:32	79:32	16	streams
LEAF_NODE	79:39	79:39	14	)
LEAF_NODE	79:40	79:40	9	)
STATEMENTS	79:42	88:2	9	
LEAF_NODE	79:42	79:42	10	{
STATEMENTS	80:3	81:3	10	
SIMPLE_DECL	80:3	80:54	11	PurpleMediaBackendFs2Stream * stream ; stream = streams -> data ;
VAR_DECL	80:3	80:32	12	PurpleMediaBackendFs2Stream * stream ; stream = streams -> data
TYPE	80:3	80:31	13	PurpleMediaBackendFs2Stream *
TYPE_NAME	80:3	80:3	14	PurpleMediaBackendFs2Stream
LEAF_NODE	80:3	80:3	15	PurpleMediaBackendFs2Stream
POINTER	80:31	80:31	14	*
LEAF_NODE	80:31	80:31	15	*
NAME	80:32	80:32	13	stream
LEAF_NODE	80:32	80:32	14	stream
LEAF_NODE	0:0	0:0	13	;
INIT	80:32	80:32	13	stream = streams -> data
ASSIGN	80:32	80:41	14	stream = streams -> data
LVAL	80:32	80:32	15	stream
NAME	80:32	80:32	16	stream
LEAF_NODE	80:32	80:32	17	stream
ASSIGN_OP	80:39	80:39	15	=
LEAF_NODE	80:39	80:39	16	=
RVAL	80:41	80:41	15	streams -> data
FIELD	80:41	80:50	16	streams -> data
LEAF_NODE	80:41	80:41	17	streams
LEAF_NODE	80:48	80:48	17	->
LEAF_NODE	80:50	80:50	17	data
LEAF_NODE	80:54	80:54	12	;
SELECTION	81:3	81:56	11	
KEYWORD	81:3	81:3	12	if
LEAF_NODE	81:3	81:3	13	if
LEAF_NODE	81:6	81:6	12	(
CONDITION	81:7	81:7	12	stream -> session -> type & PURPLE_MEDIA_SEND_VIDEO
EXPR	81:7	81:31	13	stream -> session -> type & PURPLE_MEDIA_SEND_VIDEO
FIELD	81:7	81:24	14	stream -> session -> type
LEAF_NODE	81:7	81:7	15	stream
LEAF_NODE	81:13	81:13	15	->
LEAF_NODE	81:15	81:15	15	session
LEAF_NODE	81:22	81:22	15	->
LEAF_NODE	81:24	81:24	15	type
LEAF_NODE	81:29	81:29	14	&
FIELD	81:31	81:31	14	PURPLE_MEDIA_SEND_VIDEO
LEAF_NODE	81:31	81:31	15	PURPLE_MEDIA_SEND_VIDEO
LEAF_NODE	81:54	81:54	12	)
STATEMENTS	81:56	87:3	12	
LEAF_NODE	81:56	81:56	13	{
STATEMENTS	82:4	86:33	13	
LEAF_NODE	82:4	82:4	14	g_object_set
LEAF_NODE	82:16	82:16	14	(
LEAF_NODE	82:17	82:17	14	stream
LEAF_NODE	82:23	82:23	14	->
LEAF_NODE	82:25	82:25	14	stream
LEAF_NODE	82:31	82:31	14	,
LEAF_NODE	82:33	82:33	14	"direction"
LEAF_NODE	82:44	82:44	14	,
LEAF_NODE	83:6	83:6	14	session_type_to_fs_stream_direction
LEAF_NODE	83:41	83:41	14	(
LEAF_NODE	84:6	84:6	14	stream
LEAF_NODE	84:12	84:12	14	->
LEAF_NODE	84:14	84:14	14	session
LEAF_NODE	84:21	84:21	14	->
LEAF_NODE	84:23	84:23	14	type
LEAF_NODE	84:28	84:28	14	&
LEAF_NODE	84:30	84:30	14	(
LEAF_NODE	84:31	84:31	14	(
LEAF_NODE	84:32	84:32	14	active
LEAF_NODE	84:38	84:38	14	)
LEAF_NODE	84:40	84:40	14	?
LABEL	85:6	85:31	14	~PURPLE_MEDIA_SEND_VIDEO :
LEAF_NODE	85:6	85:6	15	~PURPLE_MEDIA_SEND_VIDEO
LEAF_NODE	85:31	85:31	15	:
LEAF_NODE	86:6	86:6	14	PURPLE_MEDIA_VIDEO
LEAF_NODE	86:24	86:24	14	)
LEAF_NODE	86:25	86:25	14	)
LEAF_NODE	86:26	86:26	14	,
LEAF_NODE	86:28	86:28	14	NULL
LEAF_NODE	86:32	86:32	14	)
LEAF_NODE	86:33	86:33	14	;
LEAF_NODE	87:3	87:3	13	}
LEAF_NODE	88:2	88:2	10	}
LEAF_NODE	89:1	89:1	7	}
LEAF_NODE	90:0	90:0	2	}

